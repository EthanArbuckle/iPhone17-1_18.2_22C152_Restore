Swift::Int ListSelectOption.hashValue.getter()
{
  long long *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[72];
  long long v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD v14[2];
  long long v15;
  long long v16;
  _OWORD v17[2];
  long long v18;
  long long v19;
  unsigned char v20[40];
  uint64_t v21;
  char v22;

  sub_10027B4F8(v0, &v10);
  v1 = v11;
  v3 = v12;
  v2 = v13;
  sub_1005E33F0();
  sub_10027B4F8(v0, v14);
  switch((char)v15)
  {
    case -4:
      v4 = 3;
      goto LABEL_6;
    case -3:
      v4 = 2;
      goto LABEL_6;
    case -2:
      v4 = 1;
      goto LABEL_6;
    case -1:
      v4 = 0;
LABEL_6:
      sub_1005E3410(v4);
      break;
    default:
      v17[0] = v14[0];
      v17[1] = v14[1];
      v18 = v15;
      v19 = v16;
      sub_1005E3410(4uLL);
      sub_1002676E0((uint64_t)v17, (uint64_t)v20);
      sub_1002676E0((uint64_t)v20, (uint64_t)&v21);
      if (v22)
      {
        sub_1005E3410(1uLL);
        sub_10027C548();
        sub_1001F3404(v1, v3, v2);
        sub_1005E1DB0();
      }
      else
      {
        sub_1005E3410(0);
        sub_10027C548();
        sub_1001F3404(v1, v3, v2);
      }
      sub_1005E1DB0();
      v6 = *((void *)&v19 + 1);
      if (HIBYTE(*((void *)&v19 + 1)) == 255)
      {
        sub_1005E3420(0);
      }
      else
      {
        v8 = *((void *)&v18 + 1);
        v7 = v19;
        sub_1005E3420(1u);
        if ((v6 & 0x100000000000000) != 0)
        {
          sub_1005E3410(1uLL);
          swift_bridgeObjectRetain();
          sub_100228B20((uint64_t)v9, v8);
          sub_1001F34D0(v8, v7, v6);
        }
        else
        {
          sub_1005E3410(0);
          swift_beginAccess();
          sub_10027BC60();
          sub_1005E3400();
        }
      }
      sub_10027D768(v0, (uint64_t)sub_1001F3480, (uint64_t)sub_1001F34D0, (void (*)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_10027D7C0);
      break;
  }
  return sub_1005E3470();
}

Swift::Int sub_10027CDC4()
{
  sub_10027B4F8(v0, v2);
  return ListSelectOption.hashValue.getter();
}

void sub_10027CDFC(uint64_t a1)
{
  sub_10027B4F8(v1, v3);
  ListSelectOption.hash(into:)(a1);
}

Swift::Int sub_10027CE3C()
{
  sub_10027B4F8(v0, v3);
  sub_1005E33F0();
  ListSelectOption.hash(into:)((uint64_t)v2);
  return sub_1005E3470();
}

BOOL sub_10027CE90(long long *a1, long long *a2)
{
  sub_10027B4F8(a1, v4);
  sub_10027B4F8(a2, v5);
  return static ListSelectOption.__derived_enum_equals(_:_:)(v4, v5);
}

uint64_t ListSelectOptions.baseOption.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10027D820(v1, a1);
}

uint64_t ListSelectOptions.baseOption.setter(uint64_t a1)
{
  return sub_10027D87C(a1, v1);
}

double ListSelectOptions.init(baseOption:options:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10027B4F8(a1, v9);
  double result = *(double *)v9;
  long long v6 = v9[1];
  long long v7 = v9[2];
  long long v8 = v9[3];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(void *)(a3 + 64) = a2;
  return result;
}

uint64_t ListSelectOptions.hash(into:)(uint64_t a1)
{
  v2 = v1;
  uint64_t v4 = v2[4];
  if (*((unsigned char *)v2 + 32) == 0xFF)
  {
    sub_1005E3410(0);
  }
  else
  {
    uint64_t v6 = v2[5];
    uint64_t v5 = v2[6];
    unint64_t v7 = v2[7];
    sub_1005E3410(1uLL);
    if (v4)
    {
      sub_1005E3410(1uLL);
      uint64_t v12 = sub_10027E0F0();
      sub_1001F33C4(v12, v13, v14, v15, 1);
      sub_10027E168();
      sub_1005E1DB0();
    }
    else
    {
      sub_1005E3410(0);
      uint64_t v8 = sub_10027E0F0();
      sub_1001F33C4(v8, v9, v10, v11, 0);
      sub_10027E168();
    }
    sub_1005E1DB0();
    if (HIBYTE(v7) == 255)
    {
      sub_1005E3420(0);
    }
    else
    {
      sub_1005E3420(1u);
      if ((v7 & 0x100000000000000) != 0)
      {
        sub_1005E3410(1uLL);
        sub_1001F33AC(v6, v5, v7, 1);
        sub_100228B20(a1, v6);
        sub_1001F34D0(v6, v5, v7);
      }
      else
      {
        sub_1005E3410(0);
        swift_beginAccess();
        sub_1005E3400();
      }
    }
    uint64_t v16 = sub_10027E0F0();
    sub_10027D8D8(v16, v17, v18, v19, v4);
  }
  swift_bridgeObjectRetain();
  sub_10022A57C();
  return swift_bridgeObjectRelease();
}

uint64_t static ListSelectOptions.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10027B4F8((long long *)a1, v9);
  sub_10027B4F8((long long *)a2, v8);
  sub_10027B4F8(v9, v12);
  if ((_BYTE)v13 == 0xFF)
  {
    sub_10027B4F8(v8, v15);
    sub_10027E140();
    if (!v4)
    {
LABEL_7:
      char v6 = 0;
      return v6 & 1;
    }
  }
  else
  {
    v10[0] = v12[0];
    v10[1] = v12[1];
    v10[2] = v13;
    v10[3] = v14;
    sub_10027B4F8(v8, v15);
    sub_10027E140();
    if (v4) {
      goto LABEL_7;
    }
    v11[0] = v15[0];
    v11[1] = v15[1];
    v11[2] = v15[2];
    v11[3] = v15[3];
    sub_10027D768(v9, (uint64_t)sub_1001F33C4, (uint64_t)sub_1001F3404, (void (*)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_10027D8D8);
    sub_10027D768(v8, (uint64_t)sub_1001F33C4, (uint64_t)sub_1001F3404, (void (*)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_10027D8D8);
    BOOL v5 = sub_100266050(v10, v11);
    sub_10027D768(v8, (uint64_t)sub_1001F3480, (uint64_t)sub_1001F34D0, (void (*)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_10027D8D8);
    sub_10027D768(v9, (uint64_t)sub_1001F3480, (uint64_t)sub_1001F34D0, (void (*)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_10027D8D8);
    if (!v5) {
      goto LABEL_7;
    }
  }
  char v6 = sub_10021B4D0(*(void *)(a1 + 64), *(void *)(a2 + 64));
  return v6 & 1;
}

Swift::Int ListSelectOptions.hashValue.getter()
{
  sub_1005E33F0();
  ListSelectOptions.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_10027D2E8()
{
  sub_1005E33F0();
  ListSelectOptions.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_10027D324(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static ListSelectOptions.__derived_struct_equals(_:_:)((uint64_t)v4, (uint64_t)__dst) & 1;
}

void sub_10027D37C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_1001EEA10(v4, 0, 0xE000000000000000, 0, (void *)0xE000000000000000, 0, (void *)0xE000000000000000);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[4];
  if (*((unsigned char *)a1 + 32) == 0xFF)
  {
    Swift::Int v8 = *(unsigned int *)(a2 + 20);
    sub_100210AD0(0x4249524353425553, 0xEA00000000004445, a2 + 8, *(_DWORD *)(a2 + 20));
    if (v10)
    {
      v11._countAndFlagsBits = 0x4249524353425553;
      v11._object = (void *)0xEA00000000004445;
      Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v11, v8);
    }
    Swift::Int v12 = v9;
    int v13 = *(_DWORD *)(a2 + 20);
    BOOL v14 = __CFADD__(v13, v9);
    int v15 = v13 + v9;
    if (v14) {
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = v15;
  }
  else
  {
    uint64_t v17 = a1[6];
    unint64_t v16 = a1[7];
    uint64_t v18 = a1[5];
    uint64_t v20 = a1[2];
    uint64_t v19 = a1[3];
    uint64_t v25 = v6;
    uint64_t v21 = *a1;
    uint64_t v22 = a1[1];
    v26[0] = v21;
    v26[1] = v22;
    v26[2] = v20;
    v26[3] = v19;
    char v27 = v7 & 1;
    uint64_t v28 = v18;
    uint64_t v29 = v17;
    unint64_t v30 = v16;
    sub_1001F33C4(v21, v22, v20, v19, v7 & 1);
    sub_1001F3404(v18, v17, v16);
    sub_100290DC4(v26);
    Swift::Int v12 = v23;
    uint64_t v24 = v21;
    uint64_t v6 = v25;
    sub_10027D8D8(v24, v22, v20, v19, v7);
  }
  if (__OFADD__(v6, v12))
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

Swift::Int sub_10027D544(void *a1, uint64_t a2)
{
  Swift::Int v4 = a1[4];
  switch((char)v4)
  {
    case -4:
      Swift::Int v4 = *(unsigned int *)(a2 + 20);
      uint64_t v5 = sub_10027E098();
      sub_10027E150(v5, v6);
      if (v7)
      {
        v8._countAndFlagsBits = sub_10027E098();
        ByteBuffer._setStringSlowpath(_:at:)(v8, v4);
      }
      sub_10027E0E0();
      if (!v10) {
        goto LABEL_21;
      }
      __break(1u);
LABEL_7:
      uint64_t v48 = a1[6];
      unint64_t v49 = a1[7];
      uint64_t v11 = a1[5];
      uint64_t v13 = a1[2];
      uint64_t v12 = a1[3];
      uint64_t v14 = a1[1];
      v50[0] = *a1;
      v50[1] = v14;
      v50[2] = v13;
      v50[3] = v12;
      char v51 = v4 & 1;
      uint64_t v52 = v11;
      uint64_t v53 = v48;
      unint64_t v54 = v49;
      uint64_t v15 = sub_10027E1C8();
      sub_1001F33C4(v15, v16, v17, v18, v19);
      sub_1001F3404(v11, v48, v49);
      sub_100290DC4(v50);
      uint64_t v2 = v20;
      uint64_t v21 = sub_10027E1C8();
      sub_10027D7C0(v21, v22, v23, v24, v4);
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      goto LABEL_22;
    case -3:
      Swift::Int v25 = *(unsigned int *)(a2 + 20);
      uint64_t v26 = sub_10027E104();
      sub_10027E150(v26, v27);
      if (v28)
      {
        v29._countAndFlagsBits = sub_10027E104();
        ByteBuffer._setStringSlowpath(_:at:)(v29, v25);
      }
      sub_10027E0E0();
      if (!v10) {
        goto LABEL_21;
      }
      __break(1u);
LABEL_13:
      Swift::Int v30 = *(unsigned int *)(a2 + 20);
      uint64_t v31 = sub_10027E194();
      sub_10027E150(v31, v32);
      if (v33)
      {
        v34._countAndFlagsBits = sub_10027E194();
        ByteBuffer._setStringSlowpath(_:at:)(v34, v30);
      }
      sub_10027E0E0();
      if (v10)
      {
        __break(1u);
LABEL_18:
        Swift::Int v35 = *(unsigned int *)(a2 + 20);
        uint64_t v36 = sub_10027E124();
        sub_10027E150(v36, v37);
        if (v38)
        {
          v39._countAndFlagsBits = sub_10027E124();
          ByteBuffer._setStringSlowpath(_:at:)(v39, v35);
        }
        sub_10027E0E0();
        if (v10) {
          goto LABEL_29;
        }
      }
LABEL_21:
      *(_DWORD *)(a2 + 20) = v9;
LABEL_22:
      Swift::Int v40 = v9;
      sub_10027E150(32, 0xE100000000000000);
      if (v42)
      {
        v43._countAndFlagsBits = 32;
        v43._object = (void *)0xE100000000000000;
        Swift::Int v41 = ByteBuffer._setStringSlowpath(_:at:)(v43, v40);
      }
      int v44 = *(_DWORD *)(a2 + 20);
      BOOL v10 = __CFADD__(v44, v41);
      int v45 = v44 + v41;
      if (v10)
      {
        __break(1u);
        goto LABEL_28;
      }
      *(_DWORD *)(a2 + 20) = v45;
      BOOL v46 = __OFADD__(v2, v41);
      Swift::Int result = v2 + v41;
      if (v46)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10027D758);
      }
      return result;
    case -2:
      goto LABEL_13;
    case -1:
      goto LABEL_18;
    default:
      goto LABEL_7;
  }
}

void *sub_10027D768(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))
{
  return a1;
}

void sub_10027D7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 0xFC | 2) != 0xFE)
  {
    sub_10027E0BC();
    v6();
    uint64_t v7 = sub_1001F4934();
    v8(v7);
  }
}

uint64_t sub_10027D820(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10027D87C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10027D8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1)
  {
    sub_10027E0BC();
    v6();
    uint64_t v7 = sub_1001F4934();
    v8(v7);
  }
}

unint64_t sub_10027D938()
{
  unint64_t result = qword_100711000;
  if (!qword_100711000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711000);
  }
  return result;
}

unint64_t sub_10027D988()
{
  unint64_t result = qword_100711008;
  if (!qword_100711008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711008);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ListSelectOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 > 1) {
    unsigned int v4 = (v3 ^ 0xFF) + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 5) {
    return v4 - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ListSelectOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -4 - a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSelectOption()
{
  return &type metadata for ListSelectOption;
}

uint64_t destroy for ListSelectOptions(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255)
  {
    sub_1001F3480(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v2 & 1);
    unint64_t v3 = *(void *)(a1 + 56);
    if (HIBYTE(v3) != 255) {
      sub_1001F33B8(*(void *)(a1 + 40), *(void *)(a1 + 48), v3, HIBYTE(v3) & 1);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ListSelectOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 32);
  if (v4 == 255)
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    long long v6 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  else
  {
    char v7 = v4 & 1;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    uint64_t v10 = a2[2];
    uint64_t v11 = a2[3];
    sub_1001F33C4(*a2, v9, v10, v11, v4 & 1);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = v7;
    unint64_t v12 = a2[7];
    if (HIBYTE(v12) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(void *)(a1 + 56) = a2[7];
    }
    else
    {
      uint64_t v13 = a2[5];
      uint64_t v14 = a2[6];
      sub_1001F33AC(v13, v14, a2[7], HIBYTE(v12) & 1);
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v14;
      *(unsigned char *)(a1 + 62) = BYTE6(v12);
      *(_WORD *)(a1 + 60) = WORD2(v12);
      *(_DWORD *)(a1 + 56) = v12;
      *(unsigned char *)(a1 + 63) = HIBYTE(v12) & 1;
    }
  }
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListSelectOptions(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 32);
  if (*(unsigned char *)(a1 + 32) == 0xFF)
  {
    if (v4 == 255)
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      long long v7 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_15;
    }
    char v11 = v4 & 1;
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *((void *)a2 + 1);
    uint64_t v14 = *((void *)a2 + 2);
    uint64_t v15 = *((void *)a2 + 3);
    sub_1001F33C4(*(void *)a2, v13, v14, v15, v4 & 1);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v15;
    *(unsigned char *)(a1 + 32) = v11;
    unint64_t v16 = *((void *)a2 + 7);
    if (HIBYTE(v16) == 255)
    {
      long long v17 = *(long long *)((char *)a2 + 40);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(_OWORD *)(a1 + 40) = v17;
      goto LABEL_15;
    }
LABEL_11:
    uint64_t v31 = *((void *)a2 + 5);
    uint64_t v32 = *((void *)a2 + 6);
    sub_1001F33AC(v31, v32, v16, HIBYTE(v16) & 1);
    *(void *)(a1 + 40) = v31;
    *(void *)(a1 + 48) = v32;
    *(unsigned char *)(a1 + 62) = BYTE6(v16);
    *(_WORD *)(a1 + 60) = WORD2(v16);
    *(_DWORD *)(a1 + 56) = v16;
    *(unsigned char *)(a1 + 63) = HIBYTE(v16) & 1;
    goto LABEL_15;
  }
  if (v4 == 255)
  {
    sub_10027DE28(a1);
    long long v8 = a2[3];
    long long v10 = *a2;
    long long v9 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_15;
  }
  char v18 = v4 & 1;
  uint64_t v19 = *(void *)a2;
  uint64_t v20 = *((void *)a2 + 1);
  uint64_t v21 = *((void *)a2 + 2);
  uint64_t v22 = *((void *)a2 + 3);
  sub_1001F33C4(*(void *)a2, v20, v21, v22, v4 & 1);
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  char v27 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v22;
  *(unsigned char *)(a1 + 32) = v18;
  sub_1001F3480(v23, v24, v25, v26, v27);
  char v28 = (long long *)(a1 + 40);
  Swift::String v29 = (long long *)((char *)a2 + 40);
  unint64_t v16 = *((void *)a2 + 7);
  if (*(unsigned __int8 *)(a1 + 63) == 255)
  {
    if (HIBYTE(v16) == 255)
    {
      long long v30 = *v29;
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *char v28 = v30;
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (HIBYTE(v16) == 255)
  {
    sub_10027B9E0(a1 + 40);
    uint64_t v33 = *((void *)a2 + 7);
    *char v28 = *v29;
    *(void *)(a1 + 56) = v33;
  }
  else
  {
    uint64_t v34 = *((void *)a2 + 5);
    uint64_t v35 = *((void *)a2 + 6);
    sub_1001F33AC(v34, v35, *((void *)a2 + 7), HIBYTE(v16) & 1);
    uint64_t v36 = *(void *)(a1 + 40);
    uint64_t v37 = *(void *)(a1 + 48);
    unint64_t v38 = *(unsigned int *)(a1 + 56) | ((unint64_t)(*(unsigned __int16 *)(a1 + 60) | (*(unsigned __int8 *)(a1 + 62) << 16)) << 32);
    char v39 = *(unsigned char *)(a1 + 63);
    *(void *)(a1 + 40) = v34;
    *(void *)(a1 + 48) = v35;
    *(_DWORD *)(a1 + 56) = v16;
    *(_WORD *)(a1 + 60) = WORD2(v16);
    *(unsigned char *)(a1 + 62) = BYTE6(v16);
    *(unsigned char *)(a1 + 63) = HIBYTE(v16) & 1;
    sub_1001F33B8(v36, v37, v38, v39);
  }
LABEL_15:
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10027DE28(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100711010);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for ListSelectOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 == 255) {
    goto LABEL_4;
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 32);
  if (v5 == 255)
  {
    sub_10027DE28(a1);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = v5 & 1;
  sub_1001F3480(v8, v9, v10, v11, v4 & 1);
  uint64_t v13 = (_OWORD *)(a2 + 40);
  unint64_t v14 = *(void *)(a1 + 56);
  if (HIBYTE(v14) != 255)
  {
    unint64_t v15 = *(void *)(a2 + 56);
    if (HIBYTE(v15) != 255)
    {
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v13;
      *(_DWORD *)(a1 + 56) = v15;
      *(unsigned char *)(a1 + 62) = BYTE6(v15);
      *(_WORD *)(a1 + 60) = WORD2(v15);
      *(unsigned char *)(a1 + 63) = HIBYTE(v15) & 1;
      sub_1001F33B8(v16, v17, v14, HIBYTE(v14) & 1);
      goto LABEL_10;
    }
    sub_10027B9E0(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v13;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
LABEL_10:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSelectOptions(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 64);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListSelectOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSelectOptions()
{
  return &type metadata for ListSelectOptions;
}

uint64_t sub_10027E030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027E098()
{
  return 0x5649535255434552;
}

uint64_t sub_10027E0F0()
{
  return v0;
}

uint64_t sub_10027E104()
{
  return 0x2D4C414943455053;
}

uint64_t sub_10027E124()
{
  return 0x4249524353425553;
}

void sub_10027E150(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_10027E168()
{
  sub_1001F3404(v3, v2, v1);
  return v0;
}

uint64_t sub_10027E194()
{
  return 0x45544F4D4552;
}

_OWORD *sub_10027E1A8()
{
  return sub_10027B4F8(v0, (_OWORD *)(v1 - 128));
}

uint64_t sub_10027E1C8()
{
  return v0;
}

NIOIMAPCore2::MailboxAttribute_optional __swiftcall MailboxAttribute.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v5._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &off_1006CCD68;
  v5._object = object;
  unint64_t v3 = sub_1005E3050(v2, v5);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return (NIOIMAPCore2::MailboxAttribute_optional)8;
  }
  else {
    return (NIOIMAPCore2::MailboxAttribute_optional)v3;
  }
}

_UNKNOWN **static MailboxAttribute.allCases.getter()
{
  return &off_1006CCE48;
}

uint64_t MailboxAttribute.rawValue.getter(char a1)
{
  uint64_t result = 0x534547415353454DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x544E45434552;
      break;
    case 2:
      uint64_t result = 0x5458454E444955;
      break;
    case 3:
      uint64_t result = 0x44494C4156444955;
      break;
    case 4:
      uint64_t result = 0x4E4545534E55;
      break;
    case 5:
      uint64_t result = 1163544915;
      break;
    case 6:
      uint64_t result = 0x4D54534548474948;
      break;
    case 7:
      uint64_t result = 0x494C444E45505041;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10027E344(unsigned __int8 *a1, char *a2)
{
  return sub_1001E5C38(*a1, *a2);
}

Swift::Int sub_10027E350()
{
  return sub_1002AB57C();
}

uint64_t sub_10027E358()
{
  return sub_100235908();
}

Swift::Int sub_10027E360(uint64_t a1)
{
  return sub_1002AB76C(a1, *v1);
}

NIOIMAPCore2::MailboxAttribute_optional sub_10027E368@<W0>(Swift::String *a1@<X0>, NIOIMAPCore2::MailboxAttribute_optional *a2@<X8>)
{
  result.value = MailboxAttribute.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10027E398@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MailboxAttribute.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10027E3C4(void *a1@<X8>)
{
  *a1 = &off_1006CCE48;
}

uint64_t SearchReturnData.Partial.range.getter()
{
  return *(void *)v0;
}

uint64_t SearchReturnData.Partial.range.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t RemoteMailbox.Status.unreadMessagesCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

unint64_t MailboxStatus.nextUID.getter()
{
  return sub_10027F16C(*(unsigned int *)(v0 + 28));
}

uint64_t SearchCorrelator.uidValidity.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  *(unsigned char *)(v1 + 32) = BYTE4(result) & 1;
  return result;
}

Swift::UInt32 (__swiftcall *SearchCorrelator.uidValidity.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

unint64_t MailboxStatus.uidValidity.getter()
{
  return sub_10027F16C(*(unsigned int *)(v0 + 36));
}

uint64_t MailboxStatus.uidValidity.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  *(unsigned char *)(v1 + 40) = BYTE4(result) & 1;
  return result;
}

Swift::UInt32 (__swiftcall *MailboxStatus.uidValidity.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t MailboxStatus.size.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t MailboxStatus.size.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t MailboxStatus.highestModificationSequence.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t MailboxStatus.highestModificationSequence.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t MailboxStatus.appendLimit.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t MailboxStatus.appendLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 96) = result;
  *(unsigned char *)(v2 + 104) = a2 & 1;
  return result;
}

Swift::UInt32 (__swiftcall *DisplayPart.Attachment.contentTransferEncoding.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

void __swiftcall MailboxStatus.init(messageCount:recentCount:nextUID:uidValidity:unseenCount:size:highestModificationSequence:appendLimit:)(NIOIMAPCore2::MailboxStatus *__return_ptr retstr, Swift::Int_optional messageCount, Swift::Int_optional recentCount, NIOIMAPCore2::UID_optional nextUID, NIOIMAPCore2::UIDValidity_optional uidValidity, Swift::Int_optional unseenCount, Swift::Int_optional size, NIOIMAPCore2::ModificationSequenceValue_optional highestModificationSequence, Swift::Int_optional appendLimit)
{
  retstr->messageCount.value = messageCount.value;
  retstr->messageCount.is_nil = messageCount.is_nil;
  retstr->recentCount.value = recentCount.value;
  retstr->recentCount.is_nil = recentCount.is_nil;
  retstr->nextUID.value.rawValue = nextUID.value.rawValue;
  retstr->nextUID.is_nil = nextUID.is_nil;
  retstr->uidValidity.value.rawValue = uidValidity.value.rawValue;
  retstr->uidValidity.is_nil = uidValidity.is_nil;
  retstr->unseenCount.value = unseenCount.value;
  retstr->unseenCount.is_nil = unseenCount.is_nil;
  retstr->size.value = size.value;
  retstr->size.is_nil = size.is_nil;
  retstr->highestModificationSequence.value.value = highestModificationSequence.value.value;
  retstr->highestModificationSequence.is_nil = highestModificationSequence.is_nil;
  retstr->appendLimit.value = appendLimit.value;
  retstr->appendLimit.is_nil = appendLimit.is_nil;
}

void MailboxStatus.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt v1 = *(void *)v0;
    sub_1005E3420(1u);
    sub_1005E3410(v1);
  }
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)(v0 + 16);
    sub_1005E3420(1u);
    sub_1005E3410(v2);
  }
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
    sub_1005E3420(1u);
    sub_1005E3440(v3);
  }
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt32 v4 = *(_DWORD *)(v0 + 36);
    sub_1005E3420(1u);
    sub_1005E3440(v4);
  }
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt v5 = *(void *)(v0 + 48);
    sub_1005E3420(1u);
    sub_1005E3410(v5);
  }
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt v6 = *(void *)(v0 + 64);
    sub_1005E3420(1u);
    sub_1005E3410(v6);
  }
  if (*(unsigned char *)(v0 + 88) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt64 v7 = *(void *)(v0 + 80);
    sub_1005E3420(1u);
    sub_1005E3450(v7);
  }
  if (*(unsigned char *)(v0 + 104) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt v8 = *(void *)(v0 + 96);
    sub_1005E3420(1u);
    sub_1005E3410(v8);
  }
}

uint64_t static MailboxStatus.__derived_struct_equals(_:_:)(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(result + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)result != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(result + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  char v4 = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(result + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 28) != *(_DWORD *)(result + 28)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  char v5 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(result + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(result + 36) != *(_DWORD *)(a2 + 36)) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  char v6 = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(result + 56))
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(result + 48) != *(void *)(a2 + 48)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  char v7 = *(unsigned char *)(a2 + 72);
  if (*(unsigned char *)(result + 72))
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(result + 64) != *(void *)(a2 + 64)) {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  if (*(unsigned char *)(result + 88))
  {
    if ((*(unsigned char *)(a2 + 88) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 88)) {
      return 0;
    }
    uint64_t v8 = *(void *)(result + 80);
    uint64_t v9 = *(void *)(a2 + 80);
    if ((v9 | v8) < 0)
    {
      __break(1u);
      return result;
    }
    if (v9 != v8) {
      return 0;
    }
  }
  char v10 = *(unsigned char *)(a2 + 104);
  if (*(unsigned char *)(result + 104))
  {
    if ((*(unsigned char *)(a2 + 104) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(result + 96) != *(void *)(a2 + 96)) {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  return 1;
}

Swift::Int MailboxStatus.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_10027E8A8()
{
  return sub_1005E3470();
}

uint64_t sub_10027E8E8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  int KeyPath = swift_getKeyPath();
  sub_10027F180(KeyPath, 0x534547415353454DLL, 0xE800000000000000);
  swift_release();
  int v4 = swift_getKeyPath();
  sub_10027F180(v4, 0x544E45434552, 0xE600000000000000);
  swift_release();
  int v5 = swift_getKeyPath();
  sub_10027EC40(v5, 0x5458454E444955, 0xE700000000000000, a1, v2);
  swift_release();
  int v6 = swift_getKeyPath();
  sub_10027EC40(v6, 0x44494C4156444955, 0xEB00000000595449, a1, v2);
  swift_release();
  int v7 = swift_getKeyPath();
  sub_10027F180(v7, 0x4E4545534E55, 0xE600000000000000);
  swift_release();
  int v8 = swift_getKeyPath();
  sub_10027F180(v8, 1163544915, 0xE400000000000000);
  swift_release();
  int v9 = swift_getKeyPath();
  sub_10027ED38(v9, 0x4D54534548474948, 0xED0000514553444FLL, a1, v2);
  swift_release();
  int v10 = swift_getKeyPath();
  sub_10027F180(v10, 0x494C444E45505041, 0xEB0000000054494DLL);
  swift_release();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1001EEECC();
  uint64_t v12 = v11;
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10027EB48(int a1, uint64_t a2, uint64_t a3, void *__src, uint64_t a5)
{
  memcpy(__dst, __src, 0x69uLL);
  uint64_t result = swift_getAtKeyPath();
  if ((v14 & 1) == 0)
  {
    __dst[0] = 0;
    __dst[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_1005E2E90();
    uint64_t v9 = __dst[0];
    uint64_t v10 = __dst[1];
    swift_beginAccess();
    sub_1002D214C();
    uint64_t v11 = *(void *)(*(void *)(a5 + 16) + 16);
    uint64_t result = sub_1002D2208(v11);
    uint64_t v12 = *(void *)(a5 + 16);
    *(void *)(v12 + 16) = v11 + 1;
    uint64_t v13 = (void *)(v12 + 32 * v11);
    v13[4] = a2;
    v13[5] = a3;
    v13[6] = v9;
    v13[7] = v10;
  }
  return result;
}

uint64_t sub_10027EC40(int a1, uint64_t a2, uint64_t a3, void *__src, uint64_t a5)
{
  memcpy(__dst, __src, 0x69uLL);
  uint64_t result = swift_getAtKeyPath();
  if ((v14 & 1) == 0)
  {
    __dst[0] = 0;
    __dst[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_1005E2E90();
    uint64_t v9 = __dst[0];
    uint64_t v10 = __dst[1];
    swift_beginAccess();
    sub_1002D214C();
    uint64_t v11 = *(void *)(*(void *)(a5 + 16) + 16);
    uint64_t result = sub_1002D2208(v11);
    uint64_t v12 = *(void *)(a5 + 16);
    *(void *)(v12 + 16) = v11 + 1;
    uint64_t v13 = (void *)(v12 + 32 * v11);
    v13[4] = a2;
    v13[5] = a3;
    v13[6] = v9;
    v13[7] = v10;
  }
  return result;
}

uint64_t sub_10027ED38(int a1, uint64_t a2, uint64_t a3, void *__src, uint64_t a5)
{
  memcpy(__dst, __src, 0x69uLL);
  uint64_t result = swift_getAtKeyPath();
  if ((v14 & 1) == 0)
  {
    __dst[0] = 0;
    __dst[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_1005E2E90();
    uint64_t v9 = __dst[0];
    uint64_t v10 = __dst[1];
    swift_beginAccess();
    sub_1002D214C();
    uint64_t v11 = *(void *)(*(void *)(a5 + 16) + 16);
    uint64_t result = sub_1002D2208(v11);
    uint64_t v12 = *(void *)(a5 + 16);
    *(void *)(v12 + 16) = v11 + 1;
    uint64_t v13 = (void *)(v12 + 32 * v11);
    v13[4] = a2;
    v13[5] = a3;
    v13[6] = v9;
    v13[7] = v10;
  }
  return result;
}

unint64_t sub_10027EE34()
{
  unint64_t result = qword_100711018;
  if (!qword_100711018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711018);
  }
  return result;
}

unint64_t sub_10027EE84()
{
  unint64_t result = qword_100711020;
  if (!qword_100711020)
  {
    sub_10000744C(&qword_100711028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711020);
  }
  return result;
}

unint64_t sub_10027EEDC()
{
  unint64_t result = qword_100711030;
  if (!qword_100711030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711030);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MailboxAttribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MailboxAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10027F07CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxAttribute()
{
  return &type metadata for MailboxAttribute;
}

void *initializeWithCopy for MailboxStatus(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x69uLL);
}

uint64_t getEnumTagSinglePayload for MailboxStatus(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MailboxStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 105) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MailboxStatus()
{
  return &type metadata for MailboxStatus;
}

uint64_t sub_10027F134()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10027F16C@<X0>(uint64_t a1@<X8>)
{
  return a1 | ((unint64_t)v1 << 32);
}

uint64_t sub_10027F180(int a1, uint64_t a2, uint64_t a3)
{
  return sub_10027EB48(a1, a2, a3, v4, v3);
}

void MailboxData.hash(into:)(uint64_t a1)
{
  sub_10027F540(v1, __dst);
  sub_10027F540(__dst, __src);
  sub_10027F540(v1, v56);
  switch(sub_10027F554((uint64_t)v56))
  {
    case 1u:
      uint64_t v11 = sub_100280B60((uint64_t)v56);
      sub_100281344(v11);
      Swift::UInt v5 = 1;
      goto LABEL_7;
    case 2u:
      uint64_t v4 = sub_100280B60((uint64_t)v56);
      sub_100281344(v4);
      Swift::UInt v5 = 2;
LABEL_7:
      sub_1005E3410(v5);
      sub_10027F540(__src, &v39);
      sub_100280B60((uint64_t)&v39);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MailboxInfo.hash(into:)(a1);
      sub_100280B70((uint64_t)v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
      return;
    case 3u:
      uint64_t v12 = sub_100280B60((uint64_t)v56);
      uint64_t v14 = *(void *)v12;
      Swift::UInt64 v13 = *(void *)(v12 + 8);
      int v15 = *(unsigned __int8 *)(v12 + 16);
      sub_1005E3410(3uLL);
      sub_10022BF50(a1, v14);
      if (v15 == 1)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1005E3420(1u);
        Swift::UInt64 v10 = v13;
LABEL_16:
        sub_1005E3450(v10);
      }
      return;
    case 4u:
      unsigned int v6 = (__n128 *)sub_100280B60((uint64_t)v56);
      sub_100281284(v6);
      sub_1005E3410(4uLL);
      ExtendedSearchResponse.hash(into:)();
      return;
    case 5u:
      uint64_t v16 = sub_100280B60((uint64_t)v56);
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      uint64_t v18 = *(void *)(v16 + 16);
      char v19 = *(unsigned char *)(v16 + 24);
      uint64_t v20 = *(void *)(v16 + 32);
      char v21 = *(unsigned char *)(v16 + 40);
      int v22 = *(_DWORD *)(v16 + 44);
      char v23 = *(unsigned char *)(v16 + 48);
      int v24 = *(_DWORD *)(v16 + 52);
      char v25 = *(unsigned char *)(v16 + 56);
      uint64_t v26 = *(void *)(v16 + 64);
      char v27 = *(unsigned char *)(v16 + 72);
      uint64_t v28 = *(void *)(v16 + 80);
      char v29 = *(unsigned char *)(v16 + 88);
      uint64_t v30 = *(void *)(v16 + 96);
      char v31 = *(unsigned char *)(v16 + 104);
      uint64_t v32 = *(void *)(v16 + 112);
      LOBYTE(v16) = *(unsigned char *)(v16 + 120);
      uint64_t v39 = v18;
      char v40 = v19 & 1;
      uint64_t v41 = v20;
      char v42 = v21 & 1;
      int v43 = v22;
      char v44 = v23 & 1;
      int v45 = v24;
      char v46 = v25 & 1;
      uint64_t v47 = v26;
      char v48 = v27 & 1;
      uint64_t v49 = v28;
      char v50 = v29 & 1;
      uint64_t v51 = v30;
      char v52 = v31 & 1;
      uint64_t v53 = v32;
      char v54 = v16 & 1;
      sub_1005E3410(5uLL);
      sub_1005E3410(v17 | (v17 << 32));
      MailboxStatus.hash(into:)();
      return;
    case 6u:
      Swift::UInt v33 = *(void *)sub_100280B60((uint64_t)v56);
      Swift::UInt v34 = 6;
      goto LABEL_13;
    case 7u:
      Swift::UInt v33 = *(void *)sub_100280B60((uint64_t)v56);
      Swift::UInt v34 = 7;
LABEL_13:
      sub_1005E3410(v34);
      sub_1005E3410(v33);
      return;
    case 8u:
      uint64_t v35 = (uint64_t *)sub_100280B60((uint64_t)v56);
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      uint64_t v38 = v35[2];
      sub_1005E3410(8uLL);
      swift_bridgeObjectRetain();
      sub_10022A2BC(a1, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_10022A2BC(a1, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_10022A2BC(a1, v38);
      swift_bridgeObjectRelease();
      return;
    case 9u:
      BOOL v7 = (uint64_t *)sub_100280B60((uint64_t)v56);
      uint64_t v8 = *v7;
      Swift::UInt64 v9 = v7[1];
      sub_1005E3410(9uLL);
      sub_100226C94(a1, v8);
      Swift::UInt64 v10 = v9;
      goto LABEL_16;
    default:
      uint64_t v3 = *(void *)sub_100280B60((uint64_t)v56);
      sub_1005E3410(0);
      sub_10022A804(a1, v3);
      return;
  }
}

void *sub_10027F540(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x79uLL);
}

uint64_t sub_10027F554(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120) >> 4;
}

uint64_t static MailboxData.__derived_enum_equals(_:_:)(void *a1, void *a2)
{
  sub_10027F540(a1, __dst);
  switch(sub_10027F554((uint64_t)__dst))
  {
    case 1u:
      uint64_t v7 = sub_100280B60((uint64_t)__dst);
      uint64_t v9 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v10 = *(unsigned int *)(v7 + 16);
      uint64_t v11 = *(unsigned __int8 *)(v7 + 20);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) == 1) {
        goto LABEL_7;
      }
      goto LABEL_50;
    case 2u:
      uint64_t v12 = sub_100280B60((uint64_t)__dst);
      uint64_t v9 = *(void *)v12;
      uint64_t v8 = *(void *)(v12 + 8);
      uint64_t v10 = *(unsigned int *)(v12 + 16);
      uint64_t v11 = *(unsigned __int8 *)(v12 + 20);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 2) {
        goto LABEL_50;
      }
LABEL_7:
      uint64_t v13 = sub_100280B60((uint64_t)v117);
      uint64_t v14 = *(void *)v13;
      uint64_t v115 = *(void *)(v13 + 8);
      uint64_t v15 = *(unsigned int *)(v13 + 16);
      uint64_t v16 = *(unsigned __int8 *)(v13 + 20);
      sub_100280B70((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280BDC);
      sub_100280B70((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280BDC);
      if ((sub_10021B04C(v9, v14) & 1) != 0
        && (static MailboxPath.__derived_struct_equals(_:_:)(v8, v10 | (v11 << 32), v115, v15 | (v16 << 32)) & 1) != 0
        && (sub_100221CD0(), (v17 & 1) != 0))
      {
        sub_100222F7C();
        char v19 = v18;
        sub_100280B70((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
        sub_100280B70((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
        if (v19) {
          goto LABEL_49;
        }
      }
      else
      {
        sub_100280B70((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
        sub_100280B70((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
      }
      goto LABEL_50;
    case 3u:
      uint64_t v20 = sub_100280B60((uint64_t)__dst);
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = *(void *)(v20 + 8);
      char v23 = *(unsigned char *)(v20 + 16);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 3) {
        goto LABEL_50;
      }
      uint64_t v24 = sub_100280B60((uint64_t)v117);
      uint64_t v25 = *(void *)(v24 + 8);
      char v26 = *(unsigned char *)(v24 + 16);
      if ((sub_100221AD8(v21, *(void *)v24) & 1) == 0) {
        goto LABEL_50;
      }
      if (v23)
      {
        if (v26) {
          goto LABEL_49;
        }
      }
      else
      {
        if (v26) {
          goto LABEL_50;
        }
        if ((v25 | v22) < 0)
        {
          __break(1u);
          goto LABEL_46;
        }
LABEL_38:
        if (v25 == v22) {
          goto LABEL_49;
        }
      }
      goto LABEL_50;
    case 4u:
      uint64_t v35 = sub_100280B60((uint64_t)__dst);
      uint64_t v37 = *(void *)v35;
      uint64_t v36 = *(void *)(v35 + 8);
      uint64_t v39 = *(void *)(v35 + 16);
      uint64_t v38 = *(void *)(v35 + 24);
      char v40 = *(unsigned char *)(v35 + 32);
      int v41 = *(unsigned __int8 *)(v35 + 33);
      uint64_t v42 = *(void *)(v35 + 40);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 4) {
        goto LABEL_50;
      }
      int v114 = v41;
      uint64_t v112 = v42;
      uint64_t v43 = sub_100280B60((uint64_t)v117);
      uint64_t v44 = *(void *)v43;
      uint64_t v45 = *(void *)(v43 + 8);
      uint64_t v46 = *(void *)(v43 + 16);
      uint64_t v47 = *(void *)(v43 + 24);
      char v48 = *(unsigned char *)(v43 + 32);
      int v34 = *(unsigned __int8 *)(v43 + 33);
      uint64_t v27 = *(void *)(v43 + 40);
      if (v36)
      {
        if (v45)
        {
          int v106 = *(unsigned __int8 *)(v43 + 33);
          uint64_t v119 = v37;
          uint64_t v120 = v36;
          uint64_t v121 = v39;
          uint64_t v122 = v38;
          char v123 = v40 & 1;
          uint64_t v134 = v44;
          uint64_t v135 = v45;
          uint64_t v136 = v46;
          uint64_t v137 = v47;
          char v138 = v48 & 1;
          uint64_t v110 = v27;
          char v108 = static SearchCorrelator.__derived_struct_equals(_:_:)((uint64_t)&v119, (uint64_t)&v134);
          sub_100281244();
          sub_100281244();
          sub_1002812B8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100281300();
          uint64_t v27 = v110;
          if ((v108 & 1) == 0) {
            goto LABEL_50;
          }
          int v49 = v114;
          int v34 = v106;
          goto LABEL_47;
        }
LABEL_42:
        sub_100281244();
        sub_1002812B8();
        sub_100281300();
        sub_1000E8770(v44, v45);
        goto LABEL_50;
      }
      if (v45) {
        goto LABEL_42;
      }
LABEL_46:
      int v49 = v114;
LABEL_47:
      if (((v49 ^ v34) & 1) == 0)
      {
        sub_100219718(v112, v27, v28, v29, v30, v31, v32, v33, v76, v79, v81, v83, v86, v89, v91, v93, v95, v97, v99,
          v101);
        if (v74)
        {
LABEL_49:
          char v6 = 1;
          return v6 & 1;
        }
      }
LABEL_50:
      char v6 = 0;
      return v6 & 1;
    case 5u:
      uint64_t v50 = sub_100280B60((uint64_t)__dst);
      uint64_t v51 = *(void *)v50;
      uint64_t v52 = *(unsigned int *)(v50 + 8);
      uint64_t v53 = *(void *)(v50 + 16);
      char v54 = *(unsigned char *)(v50 + 24);
      uint64_t v55 = *(void *)(v50 + 32);
      char v56 = *(unsigned char *)(v50 + 40);
      int v57 = *(_DWORD *)(v50 + 44);
      char v58 = *(unsigned char *)(v50 + 48);
      char v59 = *(unsigned char *)(v50 + 56);
      uint64_t v104 = *(void *)(v50 + 64);
      int v102 = *(_DWORD *)(v50 + 52);
      char v103 = *(unsigned char *)(v50 + 72);
      uint64_t v107 = *(void *)(v50 + 80);
      char v105 = *(unsigned char *)(v50 + 88);
      uint64_t v111 = *(void *)(v50 + 96);
      char v109 = *(unsigned char *)(v50 + 104);
      uint64_t v116 = *(void *)(v50 + 112);
      char v113 = *(unsigned char *)(v50 + 120);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 5) {
        goto LABEL_50;
      }
      uint64_t v60 = sub_100280B60((uint64_t)v117);
      if ((v52 | (v52 << 32)) != (*(unsigned int *)(v60 + 8) | ((unint64_t)*(unsigned int *)(v60 + 8) << 32))) {
        goto LABEL_50;
      }
      uint64_t v61 = *(void *)(v60 + 16);
      uint64_t v80 = *(void *)(v60 + 32);
      char v77 = *(unsigned char *)(v60 + 24);
      char v78 = *(unsigned char *)(v60 + 40);
      char v82 = *(unsigned char *)(v60 + 48);
      int v84 = *(_DWORD *)(v60 + 44);
      char v85 = *(unsigned char *)(v60 + 56);
      int v87 = *(_DWORD *)(v60 + 52);
      uint64_t v90 = *(void *)(v60 + 64);
      char v88 = *(unsigned char *)(v60 + 72);
      uint64_t v94 = *(void *)(v60 + 80);
      char v92 = *(unsigned char *)(v60 + 88);
      uint64_t v98 = *(void *)(v60 + 96);
      char v96 = *(unsigned char *)(v60 + 104);
      uint64_t v62 = *(void *)(v60 + 112);
      char v100 = *(unsigned char *)(v60 + 120);
      if ((sub_100219B44(v51, *(void *)v60) & 1) == 0) {
        goto LABEL_50;
      }
      uint64_t v119 = v53;
      LOBYTE(v120) = v54 & 1;
      uint64_t v121 = v55;
      LOBYTE(v122) = v56 & 1;
      HIDWORD(v122) = v57;
      char v123 = v58 & 1;
      int v124 = v102;
      char v125 = v59 & 1;
      uint64_t v126 = v104;
      char v127 = v103 & 1;
      uint64_t v128 = v107;
      char v129 = v105 & 1;
      uint64_t v130 = v111;
      char v131 = v109 & 1;
      uint64_t v132 = v116;
      char v133 = v113 & 1;
      uint64_t v134 = v61;
      LOBYTE(v135) = v77 & 1;
      uint64_t v136 = v80;
      LOBYTE(v137) = v78 & 1;
      HIDWORD(v137) = v84;
      char v138 = v82 & 1;
      int v139 = v87;
      char v140 = v85 & 1;
      uint64_t v141 = v90;
      char v142 = v88 & 1;
      uint64_t v143 = v94;
      char v144 = v92 & 1;
      uint64_t v145 = v98;
      char v146 = v96 & 1;
      uint64_t v147 = v62;
      char v148 = v100 & 1;
      char v6 = static MailboxStatus.__derived_struct_equals(_:_:)((uint64_t)&v119, (uint64_t)&v134);
      return v6 & 1;
    case 6u:
      uint64_t v63 = *(void *)sub_100280B60((uint64_t)__dst);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 6) {
        goto LABEL_50;
      }
      goto LABEL_29;
    case 7u:
      uint64_t v63 = *(void *)sub_100280B60((uint64_t)__dst);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 7) {
        goto LABEL_50;
      }
LABEL_29:
      char v6 = v63 == *(void *)sub_100280B60((uint64_t)v117);
      return v6 & 1;
    case 8u:
      v64 = (uint64_t *)sub_100280B60((uint64_t)__dst);
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      uint64_t v67 = v64[2];
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 8) {
        goto LABEL_50;
      }
      v68 = (uint64_t *)sub_100280B60((uint64_t)v117);
      uint64_t v69 = v68[1];
      uint64_t v70 = v68[2];
      if ((sub_100220C64(v66, *v68) & 1) == 0
        || (sub_100220C64(v65, v69) & 1) == 0
        || (sub_100220C64(v67, v70) & 1) == 0)
      {
        goto LABEL_50;
      }
      goto LABEL_49;
    case 9u:
      uint64_t v71 = sub_100280B60((uint64_t)__dst);
      v72 = *(void **)v71;
      uint64_t v22 = *(void *)(v71 + 8);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117) != 9) {
        goto LABEL_50;
      }
      uint64_t v73 = sub_100280B60((uint64_t)v117);
      uint64_t v25 = *(void *)(v73 + 8);
      if ((_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(v72, *(void **)v73) & 1) == 0) {
        goto LABEL_50;
      }
      if ((v25 | v22) < 0)
      {
        __break(1u);
        JUMPOUT(0x10027FCC8);
      }
      goto LABEL_38;
    default:
      uint64_t v4 = *(void *)sub_100280B60((uint64_t)__dst);
      sub_10027F540(a2, v117);
      if (sub_10027F554((uint64_t)v117)) {
        goto LABEL_50;
      }
      Swift::UInt v5 = (uint64_t *)sub_100280B60((uint64_t)v117);
      char v6 = sub_10021E990(v4, *v5);
      return v6 & 1;
  }
}

uint64_t static SortData.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = _s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a3);
  if ((result & 1) == 0) {
    return 0;
  }
  if (((a4 | a2) & 0x8000000000000000) == 0) {
    return a4 == a2;
  }
  __break(1u);
  return result;
}

Swift::Int MailboxData.hashValue.getter()
{
  sub_1005E33F0();
  MailboxData.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_10027FD7C()
{
  sub_10027F540(v0, &v2);
  return MailboxData.hashValue.getter();
}

void sub_10027FDB4(uint64_t a1)
{
  sub_10027F540(v1, &v3);
  MailboxData.hash(into:)(a1);
}

Swift::Int sub_10027FDF4()
{
  sub_10027F540(v0, __dst);
  sub_1005E33F0();
  MailboxData.hash(into:)((uint64_t)v2);
  return sub_1005E3470();
}

uint64_t sub_10027FE48(void *a1, void *a2)
{
  sub_10027F540(a1, v4);
  sub_10027F540(a2, __dst);
  return static MailboxData.__derived_enum_equals(_:_:)(v4, __dst) & 1;
}

void SortData.hash(into:)(uint64_t a1, uint64_t a2, Swift::UInt64 a3)
{
}

Swift::Int SortData.hashValue.getter(uint64_t a1, Swift::UInt64 a2)
{
  sub_1005E33F0();
  sub_100226C94((uint64_t)v5, a1);
  sub_1005E3450(a2);
  return sub_1005E3470();
}

Swift::Int sub_10027FF1C()
{
  return SortData.hashValue.getter(*(void *)v0, *(void *)(v0 + 8));
}

void sub_10027FF24(uint64_t a1)
{
  SortData.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_10027FF2C()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  sub_1005E33F0();
  sub_100226C94((uint64_t)v4, v1);
  sub_1005E3450(v2);
  return sub_1005E3470();
}

uint64_t sub_10027FF84(uint64_t a1, uint64_t a2)
{
  return static SortData.__derived_struct_equals(_:_:)(*(void **)a1, *(void *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
}

#error "10027FFE8: call analysis failed (funcsize=97)"

Swift::Int sub_100280134(void *a1)
{
  uint64_t v2 = v1;
  sub_10027F540(a1, __dst);
  sub_10027F540(__dst, __src);
  sub_10027F540(a1, v85);
  switch(sub_10027F554((uint64_t)v85))
  {
    case 1u:
      char v6 = (long long *)sub_100280B60((uint64_t)v85);
      long long v86 = *v6;
      long long v87 = v6[1];
      long long v88 = v6[2];
      Swift::Int v7 = *(unsigned int *)(v1 + 20);
      sub_10027F540(__src, &v69);
      sub_100280B60((uint64_t)&v69);
      sub_100281358();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002812DC(1414744396);
      if (v9)
      {
        v10._countAndFlagsBits = 0x205453494CLL;
        v10._object = (void *)0xE500000000000000;
        Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v7);
      }
      Swift::Int v11 = v8;
      int v12 = *(_DWORD *)(v1 + 20);
      BOOL v13 = __CFADD__(v12, v8);
      int v14 = v12 + v8;
      if (v13) {
        goto LABEL_36;
      }
      *(_DWORD *)(v1 + 20) = v14;
      sub_100281F60((uint64_t *)&v86);
      uint64_t v2 = v15;
      sub_100280B70((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
      Swift::Int v16 = v11 + v2;
      if (!__OFADD__(v11, v2)) {
        return v16;
      }
      __break(1u);
LABEL_9:
      char v17 = (long long *)sub_100280B60((uint64_t)v85);
      long long v86 = *v17;
      long long v87 = v17[1];
      long long v88 = v17[2];
      Swift::Int v18 = *(unsigned int *)(v2 + 20);
      sub_10027F540(__src, &v69);
      sub_100280B60((uint64_t)&v69);
      sub_100281358();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002812DC(1112888140);
      if (v20)
      {
        v21._countAndFlagsBits = 0x204255534CLL;
        v21._object = (void *)0xE500000000000000;
        Swift::Int v19 = ByteBuffer._setStringSlowpath(_:at:)(v21, v18);
      }
      Swift::Int v22 = v19;
      int v23 = *(_DWORD *)(v2 + 20);
      BOOL v13 = __CFADD__(v23, v19);
      int v24 = v23 + v19;
      if (v13) {
        goto LABEL_37;
      }
      *(_DWORD *)(v2 + 20) = v24;
      sub_100281F60((uint64_t *)&v86);
      uint64_t v26 = v25;
      sub_100280B70((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100280A34);
      Swift::Int v16 = v22 + v26;
      if (__OFADD__(v22, v26))
      {
        __break(1u);
LABEL_15:
        uint64_t v27 = sub_100280B60((uint64_t)v85);
        sub_100280728(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
        return v5;
      }
      return v16;
    case 2u:
      goto LABEL_9;
    case 3u:
      goto LABEL_15;
    case 4u:
      uint64_t v28 = (__n128 *)sub_100280B60((uint64_t)v85);
      sub_100281284(v28);
      sub_100296AA4((uint64_t)&v69);
      return v5;
    case 5u:
      uint64_t v29 = sub_100280B60((uint64_t)v85);
      uint64_t v30 = *(void *)v29;
      uint64_t v31 = *(unsigned int *)(v29 + 8);
      uint64_t v32 = *(void *)(v29 + 16);
      char v33 = *(unsigned char *)(v29 + 24);
      uint64_t v34 = *(void *)(v29 + 32);
      char v35 = *(unsigned char *)(v29 + 40);
      int v36 = *(_DWORD *)(v29 + 44);
      char v37 = *(unsigned char *)(v29 + 48);
      int v38 = *(_DWORD *)(v29 + 52);
      char v39 = *(unsigned char *)(v29 + 56);
      uint64_t v40 = *(void *)(v29 + 64);
      char v41 = *(unsigned char *)(v29 + 72);
      uint64_t v42 = *(void *)(v29 + 80);
      char v43 = *(unsigned char *)(v29 + 88);
      uint64_t v44 = *(void *)(v29 + 96);
      char v45 = *(unsigned char *)(v29 + 104);
      uint64_t v46 = *(void *)(v29 + 112);
      LOBYTE(v29) = *(unsigned char *)(v29 + 120);
      *(void *)&long long v69 = v32;
      BYTE8(v69) = v33 & 1;
      uint64_t v70 = v34;
      char v71 = v35 & 1;
      int v72 = v36;
      char v73 = v37 & 1;
      int v74 = v38;
      char v75 = v39 & 1;
      uint64_t v76 = v40;
      char v77 = v41 & 1;
      uint64_t v78 = v42;
      char v79 = v43 & 1;
      uint64_t v80 = v44;
      char v81 = v45 & 1;
      uint64_t v82 = v46;
      char v83 = v29 & 1;
      sub_1002808A4(v30, v31, &v69);
      return v5;
    case 6u:
      *(void *)&long long v86 = *(void *)sub_100280B60((uint64_t)v85);
      *(void *)&long long v69 = sub_1005E3230();
      *((void *)&v69 + 1) = v47;
      v90._countAndFlagsBits = 0x53545349584520;
      v90._object = (void *)0xE700000000000000;
      sub_1005E1E30(v90);
      sub_100281324();
      sub_10021333C();
      Swift::Int v16 = v48;
      char v50 = v49;
      swift_bridgeObjectRelease();
      if (v50) {
        Swift::Int v16 = sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (!v13) {
        goto LABEL_26;
      }
      __break(1u);
LABEL_23:
      *(void *)&long long v86 = *(void *)sub_100280B60((uint64_t)v85);
      *(void *)&long long v69 = sub_1005E3230();
      *((void *)&v69 + 1) = v52;
      v91._countAndFlagsBits = 0x544E4543455220;
      v91._object = (void *)0xE700000000000000;
      sub_1005E1E30(v91);
      sub_100281324();
      sub_10021333C();
      Swift::Int v16 = v53;
      char v55 = v54;
      swift_bridgeObjectRelease();
      if (v55) {
        Swift::Int v16 = sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (v13) {
        goto LABEL_38;
      }
LABEL_26:
      *(_DWORD *)(v2 + 20) = v51;
      return v16;
    case 7u:
      goto LABEL_23;
    case 8u:
      char v56 = (uint64_t *)sub_100280B60((uint64_t)v85);
      sub_10028F308(*v56, v56[1], v56[2]);
      return v5;
    case 9u:
      long long v69 = *(_OWORD *)sub_100280B60((uint64_t)v85);
      Swift::Int v58 = *(unsigned int *)(v1 + 20);
      uint64_t v59 = sub_1002812A0();
      sub_100210AD0(v59, v60, v61, v58);
      if (v63)
      {
        v64._countAndFlagsBits = static Capability.ContextKind.search.getter();
        Swift::Int v62 = ByteBuffer._setStringSlowpath(_:at:)(v64, v58);
      }
      Swift::Int v65 = v62;
      sub_1001F4120();
      if (v13) {
        goto LABEL_39;
      }
      *(_DWORD *)(v2 + 20) = v66;
      long long v86 = v69;
      uint64_t v67 = sub_10027FF98(&v86, v2);
      BOOL v68 = __OFADD__(v65, v67);
      Swift::Int v16 = v65 + v67;
      if (!v68) {
        return v16;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      JUMPOUT(0x100280630);
    default:
      uint64_t v4 = (uint64_t *)sub_100280B60((uint64_t)v85);
      sub_100280658(*v4);
      return v5;
  }
}

void sub_100280658(uint64_t a1)
{
  Swift::Int v3 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(0x205347414C46, 0xE600000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v5)
  {
    v6._countAndFlagsBits = 0x205347414C46;
    v6._object = (void *)0xE600000000000000;
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v6, v3);
  }
  int v7 = *(_DWORD *)(v1 + 20);
  BOOL v8 = __CFADD__(v7, v4);
  int v9 = v7 + v4;
  if (v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(v1 + 20) = v9;
  if (__OFADD__(v4, sub_1001E8CEC(a1, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1)))
  {
LABEL_7:
    __break(1u);
  }
}

void sub_100280728(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3 + 8;
  Swift::Int v8 = *(unsigned int *)(v3 + 20);
  uint64_t v9 = sub_1002812A0();
  sub_100210AD0(v9, v10, v11, v8);
  if (v13)
  {
    v14._countAndFlagsBits = static Capability.ContextKind.search.getter();
    Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v8);
  }
  Swift::Int v15 = v12;
  sub_1001F4120();
  if (v17)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(_DWORD *)(v4 + 20) = v16;
  uint64_t v18 = sub_1001EF348(a1, 32, 0xE100000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 0, v4);
  Swift::Int v19 = v15 + v18;
  if (__OFADD__(v15, v18))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a3)
  {
LABEL_16:
    Swift::Int v37 = 0;
    goto LABEL_17;
  }
  Swift::Int v20 = *(unsigned int *)(v4 + 20);
  uint64_t v21 = sub_100281268();
  sub_100210AD0(v21, v22, v7, v20);
  if (v24)
  {
    v25._countAndFlagsBits = sub_100281268();
    Swift::Int v23 = ByteBuffer._setStringSlowpath(_:at:)(v25, v20);
  }
  Swift::Int v26 = v23;
  int v27 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v27, v23);
  int v28 = v27 + v23;
  if (v17) {
    goto LABEL_22;
  }
  *(_DWORD *)(v4 + 20) = v28;
  uint64_t v29 = sub_10028DBEC();
  Swift::Int v30 = v26 + v29;
  if (__OFADD__(v26, v29))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  Swift::Int v31 = *(unsigned int *)(v4 + 20);
  sub_100210AD0(41, 0xE100000000000000, v7, *(_DWORD *)(v4 + 20));
  if (v33)
  {
    v34._countAndFlagsBits = 41;
    v34._object = (void *)0xE100000000000000;
    Swift::Int v32 = ByteBuffer._setStringSlowpath(_:at:)(v34, v31);
  }
  int v35 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v35, v32);
  int v36 = v35 + v32;
  if (v17) {
    goto LABEL_24;
  }
  *(_DWORD *)(v4 + 20) = v36;
  Swift::Int v37 = v30 + v32;
  if (__OFADD__(v30, v32))
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  if (__OFADD__(v19, v37))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
}

void sub_1002808A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = v3 + 8;
  Swift::Int v7 = *(unsigned int *)(v3 + 20);
  sub_100210AD0(0x20535554415453, 0xE700000000000000, v6, v7);
  if (v9)
  {
    v10._countAndFlagsBits = 0x20535554415453;
    v10._object = (void *)0xE700000000000000;
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v7);
  }
  Swift::Int v11 = v8;
  int v12 = *(_DWORD *)(v4 + 20);
  BOOL v13 = __CFADD__(v12, v8);
  int v14 = v12 + v8;
  if (v13)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v4 + 20) = v14;
  uint64_t v15 = swift_bridgeObjectRetain();
  Swift::Int v16 = sub_10025E538(v15);
  swift_bridgeObjectRelease();
  Swift::Int v17 = v11 + v16;
  if (__OFADD__(v11, v16))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  Swift::Int v18 = *(unsigned int *)(v4 + 20);
  sub_100210AD0(10272, 0xE200000000000000, v6, *(_DWORD *)(v4 + 20));
  if (v20)
  {
    v21._countAndFlagsBits = 10272;
    v21._object = (void *)0xE200000000000000;
    Swift::Int v19 = ByteBuffer._setStringSlowpath(_:at:)(v21, v18);
  }
  int v22 = *(_DWORD *)(v4 + 20);
  BOOL v13 = __CFADD__(v22, v19);
  int v23 = v22 + v19;
  if (v13) {
    goto LABEL_17;
  }
  *(_DWORD *)(v4 + 20) = v23;
  BOOL v24 = __OFADD__(v17, v19);
  Swift::Int v25 = v17 + v19;
  if (v24)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v26 = sub_10027E8E8(a3);
  Swift::Int v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  Swift::Int v28 = *(unsigned int *)(v4 + 20);
  sub_100210AD0(41, 0xE100000000000000, v6, *(_DWORD *)(v4 + 20));
  if (v30)
  {
    v31._countAndFlagsBits = 41;
    v31._object = (void *)0xE100000000000000;
    Swift::Int v29 = ByteBuffer._setStringSlowpath(_:at:)(v31, v28);
  }
  int v32 = *(_DWORD *)(v4 + 20);
  BOOL v13 = __CFADD__(v32, v29);
  int v33 = v32 + v29;
  if (v13) {
    goto LABEL_20;
  }
  *(_DWORD *)(v4 + 20) = v33;
  if (__OFADD__(v27, v29)) {
LABEL_21:
  }
    __break(1u);
}

uint64_t sub_100280A34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  switch(a16 >> 4)
  {
    case 0:
    case 3:
    case 5:
    case 9:
      goto LABEL_7;
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    case 4:
      sub_1000E8770(result, a2);
      goto LABEL_7;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100280B60(uint64_t result)
{
  *(unsigned char *)(result + 120) &= 0xFu;
  return result;
}

uint64_t sub_100280B70(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_100280BDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  switch(a16 >> 4)
  {
    case 0:
    case 3:
    case 5:
    case 9:
      goto LABEL_5;
    case 1:
    case 2:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 4:
      sub_1000E872C(result, a2);
      goto LABEL_5;
    case 8:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_5:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100280CF8()
{
  unint64_t result = qword_100711038;
  if (!qword_100711038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711038);
  }
  return result;
}

unint64_t sub_100280D48()
{
  unint64_t result = qword_100711040;
  if (!qword_100711040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711040);
  }
  return result;
}

uint64_t destroy for MailboxData(uint64_t a1)
{
  return sub_100280A34(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
}

uint64_t initializeWithCopy for MailboxData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  unsigned __int8 v19 = *(unsigned char *)(a2 + 120);
  sub_100280BDC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(unsigned char *)(a1 + 120) = v19;
  return a1;
}

uint64_t assignWithCopy for MailboxData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  unsigned __int8 v32 = *(unsigned char *)(a2 + 120);
  sub_100280BDC(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 112);
  unsigned __int8 v24 = *(unsigned char *)(a1 + 120);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(unsigned char *)(a1 + 120) = v32;
  sub_100280A34(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, v24);
  return a1;
}

void *initializeWithTake for MailboxData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x79uLL);
}

uint64_t assignWithTake for MailboxData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  char v4 = *(unsigned char *)(a2 + 120);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 112);
  unsigned __int8 v17 = *(unsigned char *)(a1 + 120);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v3;
  *(unsigned char *)(a1 + 120) = v4;
  sub_100280A34(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 121))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unsigned int v2 = (*(_DWORD *)(a1 + 48) >> 1) & 0x7FFFFFFF | ((*(_DWORD *)(a1 + 56) >> 1) << 31);
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MailboxData(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (-2 * a2);
      *(void *)(a1 + 56) = 2;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 105) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

int8x16_t sub_100281198(int8x16_t *a1, char a2)
{
  uint64_t v2 = a1[4].i64[1] & 1;
  uint64_t v3 = a1[5].i64[1] & 1;
  uint64_t v4 = a1[6].i64[1] & 1;
  __int8 v5 = a1[7].i8[8] & 1 | (16 * a2);
  int8x16_t result = vandq_s8(a1[3], (int8x16_t)xmmword_1005F69A0);
  a1[3] = result;
  a1[4].i64[1] = v2;
  a1[5].i64[1] = v3;
  a1[6].i64[1] = v4;
  a1[7].i8[8] = v5;
  return result;
}

ValueMetadata *type metadata accessor for MailboxData()
{
  return &type metadata for MailboxData;
}

uint64_t getEnumTagSinglePayload for MailboxData.SearchSort(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for MailboxData.SearchSort()
{
  return &type metadata for MailboxData.SearchSort;
}

uint64_t sub_100281244()
{
  return sub_1000E872C(v1, v0);
}

uint64_t sub_100281268()
{
  return 0x514553444F4D2820;
}

__n128 sub_100281284(__n128 *a1)
{
  return a1[2];
}

uint64_t sub_1002812A0()
{
  return 0x484352414553;
}

uint64_t sub_1002812B8()
{
  return sub_1000E872C(v0, v1);
}

void sub_1002812DC(uint64_t a1)
{
  unint64_t v4 = a1 & 0xFFFF0000FFFFFFFFLL | 0x2000000000;
  sub_100210AD0(v4, 0xE500000000000000, v1, v2);
}

uint64_t sub_100281300()
{
  return sub_1000E8770(v1, v0);
}

uint64_t sub_100281324()
{
  return swift_bridgeObjectRetain();
}

__n128 sub_100281344(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 - 240) = *(_OWORD *)a1;
  *(_OWORD *)(v1 - 224) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 - 208) = result;
  return result;
}

uint64_t sub_100281358()
{
  return swift_retain();
}

uint64_t NamespaceDescription.string.getter()
{
  return swift_retain();
}

uint64_t EmailAddressGroup.sourceRoot.getter()
{
  return swift_retain();
}

uint64_t EmailAddressGroup.sourceRoot.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_release();
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  *(unsigned char *)(v3 + 46) = BYTE6(a3);
  *(_WORD *)(v3 + 44) = WORD2(a3);
  *(_DWORD *)(v3 + 40) = a3;
  return result;
}

uint64_t EmailAddressGroup.init(groupName:sourceRoot:children:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(_DWORD *)(a8 + 16) = a3;
  *(_WORD *)(a8 + 20) = WORD2(a3);
  *(unsigned char *)(a8 + 22) = BYTE6(a3);
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(_DWORD *)(a8 + 40) = a6;
  *(unsigned char *)(a8 + 46) = BYTE6(a6);
  *(_WORD *)(a8 + 44) = WORD2(a6);
  *(void *)(a8 + 48) = a7;
  return result;
}

uint64_t EmailAddressGroup.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  sub_1005E3400();
  if (*(void *)(v2 + 24))
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
  uint64_t v4 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain();
  sub_100226CD4(a1, v4);
  return swift_bridgeObjectRelease();
}

void static EmailAddressGroup.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48)))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a2 + 24);
    if (v4)
    {
      if (!v5) {
        return;
      }
      unint64_t v6 = *(void *)(a1 + 32);
      sub_100254AA8();
      uint64_t v9 = *(void *)(a2 + 32);
      unint64_t v10 = (v8 | (v7 << 32)) & 0xFFFFFFFFFFFFFFLL;
      unint64_t v11 = (*(unsigned int *)(a2 + 40) | ((unint64_t)(*(unsigned __int16 *)(a2 + 44) | (*(unsigned __int8 *)(a2 + 46) << 16)) << 32)) & 0xFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_retain();
      LOBYTE(v6) = static ByteBuffer.== infix(_:_:)(v4, v6, v10, v5, v9, v11);
      swift_release();
      swift_release();
      if ((v6 & 1) == 0) {
        return;
      }
    }
    else if (v5)
    {
      return;
    }
    sub_10021A368();
  }
}

Swift::Int EmailAddressGroup.hashValue.getter()
{
  sub_1005E33F0();
  EmailAddressGroup.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002816E8()
{
  sub_1005E33F0();
  EmailAddressGroup.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

void EmailAddressListElement.hash(into:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100281EB4((__n128 *)(a2 & 0x7FFFFFFFFFFFFFFFLL));
    sub_1005E3410(1uLL);
    sub_100281940((uint64_t)v3);
    EmailAddressGroup.hash(into:)(a1);
    sub_10028198C((uint64_t)v3);
  }
  else
  {
    memcpy(v3, (const void *)(a2 + 16), 0x5FuLL);
    sub_1005E3410(0);
    EmailAddress.hash(into:)();
  }
}

uint64_t static EmailAddressListElement.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    sub_100281EB4((__n128 *)(a1 & 0x7FFFFFFFFFFFFFFFLL));
    if (a2 < 0)
    {
      long long v4 = *(_OWORD *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
      __dst[0] = *(_OWORD *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
      __dst[1] = v4;
      __dst[2] = *(_OWORD *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x30);
      *(void *)&__dst[3] = *(void *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x40);
      sub_100281940((uint64_t)v7);
      sub_100281940((uint64_t)__dst);
      static EmailAddressGroup.__derived_struct_equals(_:_:)((uint64_t)v7, (uint64_t)__dst);
      char v3 = v5;
      sub_10028198C((uint64_t)__dst);
      sub_10028198C((uint64_t)v7);
      return v3 & 1;
    }
    goto LABEL_5;
  }
  memcpy(v7, (const void *)(a1 + 16), 0x5FuLL);
  if (a2 < 0)
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  memcpy(__dst, (const void *)(a2 + 16), 0x5FuLL);
  sub_1001F32FC((uint64_t)v7);
  sub_1001F32FC((uint64_t)__dst);
  char v3 = static EmailAddress.__derived_struct_equals(_:_:)(v7, (uint64_t *)__dst);
  sub_1001F3354((uint64_t)__dst);
  sub_1001F3354((uint64_t)v7);
  return v3 & 1;
}

Swift::Int EmailAddressListElement.hashValue.getter(uint64_t a1)
{
  sub_1005E33F0();
  EmailAddressListElement.hash(into:)((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_1002818E0()
{
  return EmailAddressListElement.hashValue.getter(*v0);
}

void sub_1002818E8(uint64_t a1)
{
  EmailAddressListElement.hash(into:)(a1, *v1);
}

Swift::Int sub_1002818F0()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  EmailAddressListElement.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

uint64_t sub_100281934(uint64_t *a1, uint64_t *a2)
{
  return static EmailAddressListElement.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100281940(uint64_t a1)
{
  return a1;
}

uint64_t sub_10028198C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1002819DC()
{
  unint64_t result = qword_100711048;
  if (!qword_100711048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711048);
  }
  return result;
}

unint64_t sub_100281A2C()
{
  unint64_t result = qword_100711050;
  if (!qword_100711050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711050);
  }
  return result;
}

uint64_t destroy for EmailAddressGroup()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EmailAddressGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EmailAddressGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EmailAddressGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmailAddressGroup(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmailAddressGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmailAddressGroup()
{
  return &type metadata for EmailAddressGroup;
}

void *initializeBufferWithCopyOfBuffer for EmailAddressListElement(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for EmailAddressListElement()
{
  return swift_release();
}

void *assignWithCopy for EmailAddressListElement(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for EmailAddressListElement(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmailAddressListElement(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7F && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 126;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7E) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for EmailAddressListElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmailAddressListElement()
{
  return &type metadata for EmailAddressListElement;
}

__n128 sub_100281EB4@<Q0>(__n128 *a1@<X8>)
{
  return a1[3];
}

BOOL static MailboxInfo.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((sub_10021B04C(*(void *)a1, *(void *)a2) & 1) != 0
    && (static MailboxPath.__derived_struct_equals(_:_:)(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32)) & 1) != 0)
  {
    sub_100221CD0();
    if (v4)
    {
      sub_100222F7C();
      if (v5) {
        return 1;
      }
    }
  }
  return result;
}

void sub_100281F60(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 8;
  Swift::Int v5 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(40, 0xE100000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v7)
  {
    v8._countAndFlagsBits = 40;
    v8._object = (void *)0xE100000000000000;
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v5);
  }
  Swift::Int v9 = v6;
  int v10 = *(_DWORD *)(v2 + 20);
  BOOL v11 = __CFADD__(v10, v6);
  int v12 = v10 + v6;
  if (v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  *(_DWORD *)(v2 + 20) = v12;
  uint64_t v13 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v14 = sub_1001EBE14(v13, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 0, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  Swift::Int v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v16 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(8233, 0xE200000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v18)
  {
    v19._countAndFlagsBits = 8233;
    v19._object = (void *)0xE200000000000000;
    Swift::Int v17 = ByteBuffer._setStringSlowpath(_:at:)(v19, v16);
  }
  int v20 = *(_DWORD *)(v2 + 20);
  BOOL v11 = __CFADD__(v20, v17);
  int v21 = v20 + v17;
  if (v11) {
    goto LABEL_18;
  }
  *(_DWORD *)(v2 + 20) = v21;
  Swift::Int v22 = v15 + v17;
  if (__OFADD__(v15, v17))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  Swift::Int v23 = MailboxPath.pathSeparator.getter(a1[1], *((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32));
  uint64_t v25 = sub_100282628(v23, v24);
  swift_bridgeObjectRelease();
  Swift::Int v26 = v22 + v25;
  if (__OFADD__(v22, v25))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  Swift::Int v27 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(32, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v29)
  {
    v30._countAndFlagsBits = 32;
    v30._object = (void *)0xE100000000000000;
    Swift::Int v28 = ByteBuffer._setStringSlowpath(_:at:)(v30, v27);
  }
  int v31 = *(_DWORD *)(v2 + 20);
  BOOL v11 = __CFADD__(v31, v28);
  int v32 = v31 + v28;
  if (v11) {
    goto LABEL_21;
  }
  *(_DWORD *)(v2 + 20) = v32;
  Swift::Int v33 = v26 + v28;
  if (__OFADD__(v26, v28))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v34 = swift_bridgeObjectRetain();
  Swift::Int v35 = sub_10025E538(v34);
  swift_bridgeObjectRelease();
  if (__OFADD__(v33, v35)) {
LABEL_23:
  }
    __break(1u);
}

uint64_t MailboxInfo.path.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MailboxInfo.path.setter(uint64_t a1, unint64_t a2)
{
  int v3 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = v3;
  *(unsigned char *)(v2 + 20) = v5;
  return result;
}

uint64_t MailboxInfo.init(attributes:path:extensions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 16) = a3;
  *(unsigned char *)(a7 + 20) = BYTE4(a3);
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return result;
}

uint64_t MailboxInfo.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v2;
  swift_bridgeObjectRetain();
  sub_100229AE8(a1, v4);
  swift_bridgeObjectRelease();
  LOBYTE(v4) = *(unsigned char *)(v2 + 20);
  sub_1005E3410(*(unsigned int *)(v2 + 16) | ((unint64_t)*(unsigned int *)(v2 + 16) << 32));
  sub_1005E3420(v4);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10022660C(a1, v5, v6, v7);
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Int MailboxInfo.hashValue.getter()
{
  sub_1005E33F0();
  MailboxInfo.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_10028230C()
{
  sub_1005E33F0();
  MailboxInfo.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t static MailboxInfo.Attribute.noSelect.getter()
{
  return 0x63656C65736F4E5CLL;
}

uint64_t static MailboxInfo.Attribute.marked.getter()
{
  return 0x64656B72614D5CLL;
}

uint64_t static MailboxInfo.Attribute.unmarked.getter()
{
  return 0x656B72616D6E555CLL;
}

void static MailboxInfo.Attribute.nonExistent.getter()
{
}

void static MailboxInfo.Attribute.noInferiors.getter()
{
}

uint64_t static MailboxInfo.Attribute.subscribed.getter()
{
  return 0x697263736275535CLL;
}

uint64_t static MailboxInfo.Attribute.remote.getter()
{
  return 0x65746F6D65525CLL;
}

void static MailboxInfo.Attribute.hasChildren.getter()
{
}

uint64_t static MailboxInfo.Attribute.hasNoChildren.getter()
{
  return 0x68436F4E7361485CLL;
}

uint64_t static UseAttribute.== infix(_:_:)()
{
  uint64_t v0 = sub_1005E1CB0();
  uint64_t v2 = v1;
  if (v0 == sub_1005E1CB0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1005E3290();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t UseAttribute.hash(into:)()
{
  sub_1005E1CB0();
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int UseAttribute.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002825A0()
{
  return UseAttribute.hashValue.getter();
}

uint64_t sub_1002825A8()
{
  return UseAttribute.hash(into:)();
}

Swift::Int sub_1002825B0()
{
  return sub_1005E3470();
}

uint64_t sub_100282614()
{
  return static UseAttribute.== infix(_:_:)();
}

uint64_t sub_100282628(Swift::Int a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  if (a2)
  {
    Swift::Int v5 = a1;
    if (a1 != 92 || a2 != 0xE100000000000000)
    {
      Swift::Int v7 = 0xE100000000000000;
      if ((sub_1005E3290() & 1) == 0) {
        goto LABEL_17;
      }
    }
    Swift::UInt32 v9 = v3[5];
    v3 += 5;
    Swift::Int v8 = v9;
    uint64_t v4 = 0;
    sub_100210AD0(2251810, 0xE300000000000000, (uint64_t)(v3 - 3), v9);
    if (v11)
    {
      v12._countAndFlagsBits = 2251810;
      v12._object = (void *)0xE300000000000000;
      Swift::Int v10 = ByteBuffer._setStringSlowpath(_:at:)(v12, v8);
    }
    Swift::Int v7 = v10;
    int v13 = *v3 + v10;
    if (!__CFADD__(*v3, v10)) {
      goto LABEL_30;
    }
    __break(1u);
  }
  Swift::UInt32 v14 = v3[5];
  v3 += 5;
  Swift::Int v5 = v14;
  sub_100210AD0(4999502, 0xE300000000000000, (uint64_t)(v3 - 3), v14);
  if (v16)
  {
    v17._countAndFlagsBits = 4999502;
    v17._object = (void *)0xE300000000000000;
    Swift::Int v15 = ByteBuffer._setStringSlowpath(_:at:)(v17, v5);
  }
  Swift::Int v7 = v15;
  int v13 = *v3 + v15;
  if (!__CFADD__(*v3, v15)) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_17:
  BOOL v18 = v5 == 34 && v4 == v7;
  if (v18 || (sub_1005E3290() & 1) != 0)
  {
    Swift::UInt32 v20 = v3[5];
    v3 += 5;
    Swift::Int v19 = v20;
    sub_100210AD0(576478242, 0xE400000000000000, (uint64_t)(v3 - 3), v20);
    if (v22)
    {
      v23._countAndFlagsBits = 576478242;
      v23._object = (void *)0xE400000000000000;
      Swift::Int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v19);
    }
    Swift::Int v7 = v21;
    int v13 = *v3 + v21;
    if (!__CFADD__(*v3, v21)) {
      goto LABEL_30;
    }
    __break(1u);
  }
  v31._countAndFlagsBits = 34;
  v31._object = (void *)0xE100000000000000;
  sub_1005E1E30(v31);
  sub_1005E1A20();
  v32._countAndFlagsBits = 34;
  v32._object = (void *)0xE100000000000000;
  sub_1005E1E30(v32);
  Swift::UInt32 v25 = v3[5];
  v3 += 5;
  Swift::Int v24 = v25;
  swift_bridgeObjectRetain();
  sub_100210AD0(0, 0xE000000000000000, (uint64_t)(v3 - 3), v25);
  Swift::Int v7 = v26;
  char v28 = v27;
  swift_bridgeObjectRelease();
  if (v28)
  {
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    Swift::Int v7 = ByteBuffer._setStringSlowpath(_:at:)(v29, v24);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v13 = *v3 + v7;
  if (!__CFADD__(*v3, v7))
  {
LABEL_30:
    *uint64_t v3 = v13;
    return v7;
  }
  __break(1u);
  return result;
}

unint64_t sub_100282888()
{
  unint64_t result = qword_100711058;
  if (!qword_100711058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711058);
  }
  return result;
}

unint64_t sub_1002828D8()
{
  unint64_t result = qword_100711060;
  if (!qword_100711060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711060);
  }
  return result;
}

uint64_t destroy for MailboxInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MailboxInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MailboxInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MailboxInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MailboxInfo()
{
  return &type metadata for MailboxInfo;
}

ValueMetadata *type metadata accessor for MailboxInfo.Attribute()
{
  return &type metadata for MailboxInfo.Attribute;
}

void sub_100282B50(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(v2 + 12);
  sub_1001F5364(a1, a2, v2, *(_DWORD *)(v2 + 12));
  if ((v6 & 0x100000000) != 0) {
    LODWORD(v6) = sub_1001F80B4(a1, a2, v5);
  }
  int v7 = *(_DWORD *)(v2 + 12);
  BOOL v8 = __CFADD__(v7, v6);
  int v9 = v7 + v6;
  if (v8) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v2 + 12) = v9;
  }
}

uint64_t sub_100282BCC(uint64_t a1)
{
  uint64_t v3 = *(unsigned int *)(v1 + 12);
  uint64_t result = sub_100201A34(a1, v1, *(_DWORD *)(v1 + 12));
  if ((result & 0x100000000) != 0) {
    uint64_t result = sub_1001F81B4(a1, v3);
  }
  int v5 = *(_DWORD *)(v1 + 12);
  BOOL v6 = __CFADD__(v5, result);
  int v7 = v5 + result;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = result;
    *(_DWORD *)(v1 + 12) = v7;
  }
  return result;
}

uint64_t sub_100282C38(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1005E1D10(*(void *)(a1 + 16));
  sub_100284838(a1, v3);
  swift_bridgeObjectRelease();
  return v3[0];
}

uint64_t static MailboxName.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a2 == a4) {
    return sub_100219B44(a1, a3);
  }
  else {
    return 0;
  }
}

uint64_t static MailboxPath.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  else {
    return (BYTE4(a2) == BYTE4(a4)) & sub_100219B44(a1, a3);
  }
}

uint64_t MailboxPath.pathSeparator.getter(uint64_t a1, uint64_t a2)
{
  if (BYTE4(a2)) {
    return sub_1005E1D80();
  }
  else {
    return 0;
  }
}

BOOL static Activity.MailboxStatus.Info.FetchProgress.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL sub_100282DA4(uint64_t *a1, uint64_t *a2)
{
  return static Activity.MailboxStatus.Info.FetchProgress.__derived_struct_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t MailboxToRename.mailbox.getter()
{
  return swift_bridgeObjectRetain();
}

NIOIMAPCore2::MailboxPath __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MailboxPath.init(name:pathSeparator:)(NIOIMAPCore2::MailboxName name, Swift::String_optional pathSeparator)
{
  Swift::UInt32 value = name._hashValue._value;
  rawValue = name.bytes._rawValue;
  if (!pathSeparator.value._object) {
    goto LABEL_5;
  }
  if ((sub_1005E19E0() & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100283EA8();
    sub_10020DD10();
    sub_100284BDC(v7, 0xD000000000000029);
    swift_willThrow();
    goto LABEL_8;
  }
  __int16 v4 = sub_1005E19E0();
  swift_bridgeObjectRelease();
  if ((v4 & 0x100) != 0) {
LABEL_5:
  }
    unsigned __int8 v5 = 0;
  else {
    unsigned __int8 v5 = v4;
  }
  unint64_t v6 = value | ((unint64_t)v5 << 32);
LABEL_8:
  BOOL v8 = rawValue;
  result.name._hashValue._Swift::UInt32 value = v6;
  result._pathSeparator = BYTE4(v6);
  result.name.bytes._rawValue = v8;
  return result;
}

void MailboxPath.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = HIDWORD(a3);
  sub_1005E3410(a3 | ((unint64_t)a3 << 32));
  sub_1005E3420(v3);
}

Swift::Int MailboxPath.hashValue.getter(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = HIDWORD(a2);
  sub_1005E33F0();
  sub_1005E3410(v2 | ((unint64_t)v2 << 32));
  sub_1005E3420(v3);
  return sub_1005E3470();
}

Swift::Int sub_100282F50(uint64_t a1)
{
  return MailboxPath.hashValue.getter(a1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32));
}

void sub_100282F60(uint64_t a1, uint64_t a2)
{
  MailboxPath.hash(into:)(a1, a2, *(unsigned int *)(v2 + 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 12) << 32));
}

Swift::Int sub_100282F70()
{
  uint64_t v1 = *(unsigned int *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 12);
  sub_1005E33F0();
  sub_1005E3410(v1 | (v1 << 32));
  sub_1005E3420(v2);
  return sub_1005E3470();
}

uint64_t sub_100282FCC(uint64_t a1, uint64_t a2)
{
  return static MailboxPath.__derived_struct_equals(_:_:)(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32));
}

uint64_t MailboxPath.displayStringComponents(omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  MailboxPath.pathSeparator.getter(a1, a3 & 0xFFFFFFFFFFLL);
  if (!v5)
  {
    sub_10000566C(&qword_100710668);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1005F6670;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = sub_1001F6FAC(v11, (uint64_t (*)(void))j_j__malloc_0, (uint64_t)j_j__realloc_0, (uint64_t)j_j__free_0);
    unint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_1002D09F0(v12, v14, v16 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    swift_release();
    *(void *)(v10 + 32) = v18;
    *(void *)(v10 + 40) = v20;
    return v10;
  }
  swift_bridgeObjectRetain();
  __int16 v6 = sub_1005E19E0();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 0x100) == 0)
  {
    LOBYTE(v22) = v6;
    __chkstk_darwin(result);
    v21[2] = &v22;
    swift_bridgeObjectRetain();
    sub_1002843AC(0x7FFFFFFFFFFFFFFFLL, v4 & 1, (uint64_t (*)(char *))sub_100201AAC, (uint64_t)v21, a2);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t)sub_1002834EC(v9, a2);
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_10028326C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  uint64_t v9 = qword_10070FB10;
  swift_unknownObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  unint64_t v10 = qword_100761858;
  uint64_t v11 = HIDWORD(qword_100761858);
  if (HIDWORD(qword_100761858) < qword_100761858)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (dword_100761860 - (byte_100761866 | ((unsigned __int16)word_100761864 << 8)) < HIDWORD(qword_100761858))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v28 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v29 = qword_100761858;
  int v30 = dword_100761860;
  unsigned __int16 v31 = word_100761864;
  unsigned __int8 v32 = byte_100761866;
  uint64_t v33 = qword_100761858;
  unint64_t v34 = HIDWORD(qword_100761858);
  swift_retain();
  sub_100284870(v5, v6, v7, v8, (uint64_t)&v28, v11);
  uint64_t v13 = v3;
  if ((v12 & 0x100000000) != 0) {
    sub_1001F85F0(v5, v6, v7, v8, v11);
  }
  unsigned int v14 = v12;
  swift_unknownObjectRelease();
  unint64_t v15 = v11 + v14;
  if (v15 < v10) {
    goto LABEL_18;
  }
  if (v30 - (v32 | (v31 << 8)) < v15)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  ByteBuffer.getSlice(at:length:)(v10, v15 - v10);
  if (v16)
  {
    uint64_t v19 = v16;
    unint64_t v20 = v17;
    uint64_t v21 = v18;
    swift_release();
    sub_1002D09F0(v19, v20, v21 & 0xFFFFFFFFFFFFFFLL);
    if (!v13)
    {
      uint64_t v24 = v22;
      unint64_t v25 = v23;
      swift_release();
      goto LABEL_15;
    }
    if (HIDWORD(v20) >= v20)
    {
      if (v21 - (BYTE6(v21) | (WORD2(v21) << 8)) >= HIDWORD(v20))
      {
        uint64_t v29 = v20;
        int v30 = v21;
        unsigned __int16 v31 = WORD2(v21);
        unsigned __int8 v32 = BYTE6(v21);
        uint64_t v33 = v20;
        unint64_t v34 = HIDWORD(v20);
        uint64_t v26 = 0;
        unint64_t v27 = 0xE000000000000000;
        uint64_t v28 = v19;
        swift_retain();
        sub_1005E1D10(HIDWORD(v20) - v20);
        sub_1001FF5EC((uint64_t)&v28, &v26);
        swift_release();
        swift_errorRelease();
        swift_release();
        uint64_t v24 = v26;
        unint64_t v25 = v27;
LABEL_15:
        *a2 = v24;
        a2[1] = v25;
        return;
      }
      goto LABEL_21;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
}

void *sub_1002834EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_100212BB0();
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v8 = (long long *)(a1 + 48);
    while (1)
    {
      long long v9 = *v8;
      v16[0] = *(v8 - 1);
      v16[1] = v9;
      swift_unknownObjectRetain();
      sub_10028326C((uint64_t *)v16, v17);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      uint64_t v10 = a2;
      swift_unknownObjectRelease();
      uint64_t v11 = v17[0];
      uint64_t v12 = v17[1];
      uint64_t v18 = v7;
      unint64_t v13 = v7[2];
      if (v13 >= v7[3] >> 1)
      {
        sub_100212BB0();
        uint64_t v7 = v18;
      }
      v7[2] = v13 + 1;
      unsigned int v14 = &v7[2 * v13];
      v14[4] = v11;
      v14[5] = v12;
      v8 += 2;
      --v5;
      a2 = v10;
      if (!v5)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

unint64_t static MailboxPath.makeRootMailbox(displayName:pathSeparator:)(Swift::Int a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = v4;
  uint64_t v9 = a1;
  if ((a2 & 0x1000000000000000) != 0)
  {
    a1 = sub_1005E1E80();
    if (a1 > 1000)
    {
      Swift::Int v10 = sub_1005E1E80();
LABEL_4:
      sub_100284968();
      sub_10020DD10();
      *uint64_t v11 = 1000;
      v11[1] = v10;
LABEL_10:
      swift_willThrow();
      return v5;
    }
  }
  else if ((a2 & 0x2000000000000000) == 0)
  {
    Swift::Int v10 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFuLL) > 0x3E8) {
      goto LABEL_4;
    }
  }
  if (a4)
  {
    uint64_t v28 = a3;
    unint64_t v29 = (unint64_t)a4;
    __chkstk_darwin(a1);
    v27[2] = &v28;
    if (sub_100284230(sub_1002848FC, (uint64_t)v27, v9, a2))
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0xE000000000000000;
      sub_1005E2C80(34);
      v32._countAndFlagsBits = v9;
      v32._object = (void *)a2;
      sub_1005E1E30(v32);
      sub_100284BEC((uint64_t)" cannot contain the separator ");
      sub_1005E1A20();
      unint64_t v5 = v28;
      unint64_t v12 = v29;
      sub_10028491C();
      sub_10020DD10();
      *unint64_t v13 = v5;
      v13[1] = v12;
      goto LABEL_10;
    }
  }
  uint64_t v14 = sub_1002D1188(v9, a2);
  unsigned int v16 = v15;
  unint64_t v18 = v17;
  unint64_t v19 = HIDWORD(v15);
  swift_beginAccess();
  v20._rawValue = (void *)sub_1001F9054(*(void *)(v14 + 24) + ((v18 >> 24) & 0xFFFF00 | BYTE6(v18)) + v16, v19 - v16);
  NIOIMAPCore2::MailboxName v30 = MailboxName.init(_:)(v20);
  rawValue = v30.bytes._rawValue;
  Swift::UInt32 value = v30._hashValue._value;
  swift_bridgeObjectRetain();
  v31.bytes._rawValue = rawValue;
  v31._hashValue._Swift::UInt32 value = value;
  v23.value._countAndFlagsBits = a3;
  v23.value._object = a4;
  unint64_t v24 = (unint64_t)MailboxPath.init(name:pathSeparator:)(v31, v23);
  if (!v25) {
    unint64_t v5 = v24;
  }
  swift_release();
  return v5;
}

unint64_t MailboxName.init(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  swift_beginAccess();
  v7._rawValue = (void *)sub_1001F9054(*(void *)(a1 + 24) + ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)) + v4, v6 - v4);
  unint64_t v8 = (unint64_t)MailboxName.init(_:)(v7);
  swift_release();
  return v8;
}

NIOIMAPCore2::MailboxPath __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MailboxPath.makeSubMailbox(displayName:)(Swift::String displayName)
{
  unint64_t object = (unint64_t)displayName._object;
  uint64_t countAndFlagsBits = displayName._countAndFlagsBits;
  uint64_t v4 = MailboxPath.pathSeparator.getter(displayName._countAndFlagsBits, v1 & 0xFFFFFFFFFFLL);
  if (!v5)
  {
    sub_100283EA8();
    sub_10020DD10();
    sub_100284BDC(v11, 0xD00000000000002BLL);
    goto LABEL_5;
  }
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  uint64_t v39 = v4;
  unint64_t v40 = v5;
  __chkstk_darwin(v4);
  v38[2] = &v39;
  if (sub_100284230(sub_100284BA4, (uint64_t)v38, countAndFlagsBits, object))
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    sub_1005E2C80(34);
    v54._uint64_t countAndFlagsBits = countAndFlagsBits;
    v54._unint64_t object = (void *)object;
    sub_1005E1E30(v54);
    sub_100284BEC((uint64_t)" cannot contain the separator ");
    sub_1005E1A20();
    swift_bridgeObjectRelease();
    uint64_t v8 = v39;
    unint64_t v9 = v40;
    sub_10028491C();
    sub_10020DD10();
    *Swift::Int v10 = v8;
    v10[1] = v9;
LABEL_5:
    swift_willThrow();
    goto LABEL_18;
  }
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = sub_1001F6FAC(v13, (uint64_t (*)(void))j_j__malloc_0, (uint64_t)j_j__realloc_0, (uint64_t)j_j__free_0);
  unint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v47 = v14;
  unint64_t v48 = v16;
  int v49 = v18;
  unsigned __int16 v50 = WORD2(v18);
  unsigned __int8 v51 = BYTE6(v18);
  swift_bridgeObjectRetain();
  sub_1001F5364(v6, v7, (uint64_t)&v47, HIDWORD(v16));
  if ((v19 & 0x100000000) != 0) {
    int v20 = sub_1001F80B4(v6, v7, HIDWORD(v16));
  }
  else {
    int v20 = v19;
  }
  uint64_t v21 = (void *)swift_bridgeObjectRelease();
  if (__CFADD__(HIDWORD(v48), v20))
  {
    __break(1u);
    goto LABEL_20;
  }
  HIDWORD(v48) += v20;
  uint64_t v41 = sub_1002D1188(countAndFlagsBits, object);
  int v42 = v22;
  int v43 = v23;
  int v44 = v24;
  __int16 v45 = v25;
  char v46 = v26;
  ByteBuffer.writeBuffer(_:)();
  unint64_t object = v48;
  uint64_t v27 = HIDWORD(v48);
  uint64_t v28 = (HIDWORD(v48) - v48);
  if (v28 <= 0x3E8)
  {
    uint64_t v30 = v47;
    uint64_t v31 = v50;
    uint64_t v32 = v51;
    swift_beginAccess();
    v33._rawValue = (void *)sub_1001F9054(*(void *)(v30 + 24) + (v32 | (v31 << 8)) + object, v27 - object);
    NIOIMAPCore2::MailboxName v52 = MailboxName.init(_:)(v33);
    unint64_t object = (unint64_t)v52.bytes._rawValue;
    Swift::UInt32 value = v52._hashValue._value;
    if ((sub_1005E19E0() & 0x100) == 0)
    {
      __int16 v35 = sub_1005E19E0();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unint64_t v36 = (unint64_t)v35 << 32;
      if ((v35 & 0x100) != 0) {
        unint64_t v36 = 0;
      }
      unint64_t v12 = v36 | value;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100283EA8();
    sub_10020DD10();
    sub_100284BDC(v37, 0xD000000000000029);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100284968();
    sub_10020DD10();
    *unint64_t v29 = 1000;
    v29[1] = v28;
  }
  swift_willThrow();
  swift_release();
  swift_release();
LABEL_18:
  uint64_t v21 = (void *)object;
LABEL_20:
  result.name._hashValue._Swift::UInt32 value = v12;
  result._pathSeparator = BYTE4(v12);
  result.name.bytes._rawValue = v21;
  return result;
}

uint64_t sub_100283CF8()
{
  uint64_t v0 = ByteBufferAllocator.buffer(string:)(0x584F424E49, 0xE500000000000000, (uint64_t)j_j__malloc_0, (uint64_t)j_j__realloc_0, (uint64_t)j_j__free_0);
  unsigned int v2 = v1;
  unint64_t v4 = v3;
  unint64_t v5 = HIDWORD(v1);
  swift_beginAccess();
  v6._rawValue = (void *)sub_1001F9054(*(void *)(v0 + 24) + ((v4 >> 24) & 0xFFFF00 | BYTE6(v4)) + v2, v5 - v2);
  NIOIMAPCore2::MailboxName v9 = MailboxName.init(_:)(v6);
  rawValue = v9.bytes._rawValue;
  LODWORD(v4) = v9._hashValue._value;
  uint64_t result = swift_release();
  static MailboxName.inbox = (uint64_t)rawValue;
  dword_100761EC0 = v4;
  return result;
}

uint64_t *MailboxName.inbox.unsafeMutableAddressor()
{
  if (qword_10070FCE0 != -1) {
    swift_once();
  }
  return &static MailboxName.inbox;
}

uint64_t static MailboxName.inbox.getter()
{
  if (qword_10070FCE0 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

unint64_t MailboxName.hashValue.getter(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)a2 << 32);
}

unint64_t MailboxName.HashValue.value.getter(unsigned int a1)
{
  return a1 | ((unint64_t)a1 << 32);
}

unint64_t sub_100283EA8()
{
  unint64_t result = qword_100711070;
  if (!qword_100711070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711070);
  }
  return result;
}

#error "100283FFC: call analysis failed (funcsize=83)"

uint64_t sub_100284048()
{
  if (qword_10070FCE0 != -1) {
    uint64_t result = swift_once();
  }
  qword_100711068 = dword_100761EC0 | ((unint64_t)dword_100761EC0 << 32);
  return result;
}

NIOIMAPCore2::MailboxName __swiftcall MailboxName.init(_:)(Swift::OpaquePointer a1)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_100284BC8();
  char v4 = sub_1002220CC(v2, v3, (uint64_t)a1._rawValue);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100284BC8();
    a1._rawValue = sub_10028479C(v5, v6);
  }
  sub_1005E3480();
  sub_1005E3400();
  memcpy(__dst, v10, sizeof(__dst));
  Swift::Int v7 = sub_1005E3460();
  Swift::UInt32 v8 = HIDWORD(v7) ^ v7;
  rawValue = a1._rawValue;
  result.bytes._rawValue = rawValue;
  result._hashValue._Swift::UInt32 value = v8;
  return result;
}

unsigned char *sub_100284154@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & 0xDF;
  return result;
}

void MailboxName.hash(into:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

unint64_t sub_100284190(uint64_t a1)
{
  return MailboxName.hashValue.getter(a1, *(_DWORD *)(v1 + 8));
}

void sub_100284198(uint64_t a1, uint64_t a2)
{
  MailboxName.hash(into:)(a1, a2, *(_DWORD *)(v2 + 8));
}

Swift::Int sub_1002841A0()
{
  uint64_t v1 = *(unsigned int *)(v0 + 8);
  sub_1005E33F0();
  sub_1005E3410(v1 | (v1 << 32));
  return sub_1005E3470();
}

uint64_t sub_1002841E4(uint64_t a1, uint64_t a2)
{
  return static MailboxName.== infix(_:_:)(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

uint64_t MailboxName.debugDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_100282C38(v0);
}

uint64_t sub_100284228()
{
  return MailboxName.debugDescription.getter();
}

uint64_t sub_100284230(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a4) & 0xF;
  v13[2] = a3;
  v13[3] = a4;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  v13[4] = 0;
  v13[5] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1005E1E70();
  if (v8)
  {
    uint64_t v9 = v8;
    while (1)
    {
      v13[0] = v7;
      v13[1] = v9;
      char v10 = a1(v13);
      swift_bridgeObjectRelease();
      if (v4 || (v10 & 1) != 0) {
        break;
      }
      uint64_t v7 = sub_1005E1E70();
      uint64_t v9 = v11;
      if (!v11) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
}

void *sub_100284300(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000566C(&qword_10070FEE0);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100284368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_1005E3290() & 1;
  }
}

void sub_1002843AC(uint64_t a1, char a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5)
{
  if (a1 < 0)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = _swiftEmptyArrayStorage;
  uint64_t v31 = v8 + 16;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v9;
  *(void *)(v9 + 16) = 0;
  unint64_t v11 = *(void *)(a5 + 16);
  if (!a1 || !v11)
  {
    sub_1002846D8(*(void *)(a5 + 16), v9, a2 & 1, v8, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
LABEL_45:
    swift_release();
    swift_release();
    return;
  }
  uint64_t v29 = a1;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v33 = a5 + 32;
  unint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v30 = v9;
  while (1)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v12 >= *(void *)(a5 + 16)) {
      goto LABEL_47;
    }
    char v35 = *(unsigned char *)(v33 + v12);
    char v16 = a3(&v35);
    if (v5)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    if ((v16 & 1) == 0)
    {
      if (__OFADD__(v12++, 1)) {
        goto LABEL_48;
      }
      goto LABEL_28;
    }
    if (v13 != v12 || (a2 & 1) == 0) {
      break;
    }
    *(void *)(v10 + 16) = ++v12;
LABEL_27:
    unint64_t v13 = v12;
    unint64_t v14 = v12;
LABEL_28:
    if (v12 == v11) {
      goto LABEL_33;
    }
  }
  if ((uint64_t)v12 < (uint64_t)v13) {
    goto LABEL_49;
  }
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_50;
  }
  unint64_t v18 = *(void *)(a5 + 16);
  if (v18 < v13 || v18 < v12) {
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100232850();
    unint64_t v15 = v22;
  }
  unint64_t v20 = v15[2];
  if (v20 >= v15[3] >> 1)
  {
    sub_100232850();
    unint64_t v15 = v23;
  }
  v15[2] = v20 + 1;
  uint64_t v21 = &v15[4 * v20];
  v21[4] = a5;
  void v21[5] = v33;
  v21[6] = v13;
  v21[7] = (2 * v12) | 1;
  uint64_t v10 = v30;
  *(void *)uint64_t v31 = v15;
  *(void *)(v30 + 16) = ++v12;
  if (v15[2] != v29) {
    goto LABEL_27;
  }
  unint64_t v14 = v12;
  unint64_t v13 = v12;
LABEL_33:
  if (v13 == v11 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRetain();
    goto LABEL_45;
  }
  if ((uint64_t)v11 < (uint64_t)v14) {
    goto LABEL_53;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  unint64_t v24 = *(void *)(a5 + 16);
  if (v24 >= v14 && v24 >= v11)
  {
    sub_1002D2164();
    uint64_t v26 = *(void *)(*(void *)v31 + 16);
    sub_1002D2220(v26);
    uint64_t v27 = *(void *)v31;
    *(void *)(v27 + 16) = v26 + 1;
    uint64_t v28 = (void *)(v27 + 32 * v26);
    v28[4] = a5;
    v28[5] = v33;
    v28[6] = v14;
    v28[7] = (2 * v11) | 1;
    *(void *)uint64_t v31 = v27;
    goto LABEL_44;
  }
LABEL_55:
  __break(1u);
}

uint64_t sub_1002846D8(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a2 + 16);
  int v6 = (v5 == result) & a3;
  if (v6 == 1) {
    return v6 ^ 1u;
  }
  if ((uint64_t)v5 > result)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v8 = *(void *)(a5 + 16);
  if (v8 >= v5 && (uint64_t)v8 >= result)
  {
    uint64_t v10 = (uint64_t *)(a4 + 16);
    uint64_t v11 = (2 * result) | 1;
    swift_bridgeObjectRetain();
    sub_1002D2164();
    uint64_t v12 = *(void *)(*v10 + 16);
    sub_1002D2220(v12);
    uint64_t v13 = *v10;
    *(void *)(v13 + 16) = v12 + 1;
    unint64_t v14 = (void *)(v13 + 32 * v12);
    v14[4] = a5;
    v14[5] = a5 + 32;
    v14[6] = v5;
    v14[7] = v11;
    *uint64_t v10 = v13;
    return v6 ^ 1u;
  }
LABEL_12:
  __break(1u);
  return result;
}

void *sub_10028479C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = sub_100284300(v2, 0);
      NIOIMAPCore2::MailboxName result = (void *)sub_1005E2C90();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_1005E1E80();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100284838(uint64_t a1, uint64_t *a2)
{
  return 0;
}

void sub_100284870(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, Swift::UInt32 a6)
{
  if (__OFSUB__(a4 >> 1, a3)) {
    __break(1u);
  }
  else {
    ByteBuffer._setBytes(_:at:)(a2 + a3, a2 + (a4 >> 1), a6);
  }
}

uint64_t sub_1002848D0(uint64_t *a1, uint64_t *a2)
{
  return sub_100284368(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_1002848FC(uint64_t *a1)
{
  return sub_1002848D0(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_10028491C()
{
  unint64_t result = qword_100711078;
  if (!qword_100711078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711078);
  }
  return result;
}

unint64_t sub_100284968()
{
  unint64_t result = qword_100711080;
  if (!qword_100711080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711080);
  }
  return result;
}

unint64_t sub_1002849B8()
{
  unint64_t result = qword_100711088;
  if (!qword_100711088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711088);
  }
  return result;
}

unint64_t sub_100284A08()
{
  unint64_t result = qword_100711090;
  if (!qword_100711090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711090);
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxTooBigError()
{
  return &type metadata for MailboxTooBigError;
}

ValueMetadata *type metadata accessor for InvalidMailboxNameError()
{
  return &type metadata for InvalidMailboxNameError;
}

ValueMetadata *type metadata accessor for InvalidPathSeparatorError()
{
  return &type metadata for InvalidPathSeparatorError;
}

void *initializeWithTake for MailboxPath(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MailboxPath(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 13))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for MailboxPath()
{
  return &type metadata for MailboxPath;
}

uint64_t initializeWithTake for MailboxName(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MailboxName(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 12))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for MailboxName()
{
  return &type metadata for MailboxName;
}

ValueMetadata *type metadata accessor for MailboxName.HashValue()
{
  return &type metadata for MailboxName.HashValue;
}

uint64_t sub_100284B5C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100284B94()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100284BA4(uint64_t *a1)
{
  return sub_1002848FC(a1) & 1;
}

uint64_t sub_100284BC8()
{
  return 0x584F424E49;
}

void sub_100284BDC(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

void sub_100284BEC(uint64_t a1@<X8>)
{
  v2._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v2._unint64_t object = (void *)((a1 - 32) | 0x8000000000000000);
  sub_1005E1E30(v2);
}

void static MailboxPatterns.__derived_enum_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x100000000000000) != 0)
  {
    if ((a6 & 0x100000000000000) != 0)
    {
      sub_10021A1B4();
    }
  }
  else if ((a6 & 0x100000000000000) == 0)
  {
    sub_1001F33AC(a1, a2, a3, 0);
    uint64_t v12 = sub_1002852D8();
    sub_1001F33AC(v12, v13, v14, v15);
    static ByteBuffer.== infix(_:_:)(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL, a4, a5, a6 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v16 = sub_1002852D8();
    sub_1001F33B8(v16, v17, v18, v19);
    sub_1001F33B8(a1, a2, a3, 0);
  }
}

void MailboxPatterns.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x100000000000000) != 0)
  {
    sub_1005E3410(1uLL);
    Swift::UInt v5 = *(void *)(a2 + 16);
    sub_1005E3410(v5);
    if (v5)
    {
      uint64_t v6 = a2 + 54;
      do
      {
        v6 += 24;
        sub_1001F969C();
        sub_1005E3400();
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    sub_1005E3410(0);
    sub_1001F969C();
    sub_1002852B8();
    sub_1005E3400();
  }
}

Swift::Int MailboxPatterns.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005E33F0();
  if ((a3 & 0x100000000000000) != 0)
  {
    sub_1005E3410(1uLL);
    Swift::UInt v5 = *(void *)(a1 + 16);
    sub_1005E3410(v5);
    if (v5)
    {
      uint64_t v6 = a1 + 54;
      do
      {
        v6 += 24;
        sub_1001F969C();
        sub_1005E3400();
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    sub_1005E3410(0);
    sub_1001F969C();
    sub_1002852B8();
    sub_1005E3400();
  }
  return sub_1005E3470();
}

Swift::Int sub_100284EA8()
{
  return MailboxPatterns.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)(*(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 23) << 56));
}

void sub_100284EDC(uint64_t a1)
{
  MailboxPatterns.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)(*(unsigned __int16 *)(v1 + 20) | (*(unsigned __int8 *)(v1 + 22) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 23) << 56));
}

Swift::Int sub_100284F10()
{
  uint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 23);
  sub_1005E33F0();
  if (v2)
  {
    sub_1005E3410(1uLL);
    Swift::UInt v3 = *(void *)(v1 + 16);
    sub_1005E3410(v3);
    if (v3)
    {
      uint64_t v4 = v1 + 54;
      do
      {
        v4 += 24;
        swift_beginAccess();
        sub_1005E3400();
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    sub_1005E3410(0);
    swift_beginAccess();
    sub_1005E3400();
  }
  return sub_1005E3470();
}

unint64_t sub_100285038()
{
  unint64_t result = qword_100711098;
  if (!qword_100711098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711098);
  }
  return result;
}

void sub_100285084(uint64_t a1, uint64_t a2)
{
}

uint64_t destroy for OptionValueComp(uint64_t a1)
{
  return sub_1001F33B8(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32), *(unsigned char *)(a1 + 23));
}

uint64_t _s12NIOIMAPCore215OptionValueCompOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 23);
  int v7 = *(unsigned __int8 *)(a2 + 22);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 20) | (v7 << 16);
  sub_1001F33AC(*(void *)a2, v4, v5 | (v8 << 32), v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 23) = v6;
  return a1;
}

uint64_t assignWithCopy for OptionValueComp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 23);
  int v7 = *(unsigned __int8 *)(a2 + 22);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 20) | (v7 << 16);
  sub_1001F33AC(*(void *)a2, v4, v5 | (v8 << 32), v6);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32);
  char v12 = *(unsigned char *)(a1 + 23);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  *(unsigned char *)(a1 + 23) = v6;
  sub_1001F33B8(v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for OptionValueComp(uint64_t a1, long long *a2)
{
  char v3 = *((unsigned char *)a2 + 23);
  long long v4 = *a2;
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t v5 = a2 + 1;
  int v6 = v7;
  LOWORD(v7) = *((_WORD *)v5 + 2);
  char v8 = *((unsigned char *)v5 + 6);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32);
  char v12 = *(unsigned char *)(a1 + 23);
  *(_OWORD *)a1 = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 20) = v7;
  *(unsigned char *)(a1 + 22) = v8;
  *(unsigned char *)(a1 + 23) = v3;
  sub_1001F33B8(v9, v10, v11, v12);
  return a1;
}

ValueMetadata *type metadata accessor for MailboxPatterns()
{
  return &type metadata for MailboxPatterns;
}

uint64_t sub_1002852B8()
{
  return *(void *)(v1 + 24) + ((v2 >> 24) & 0xFFFF00 | BYTE6(v2)) + v0;
}

uint64_t sub_1002852D8()
{
  return v0;
}

uint64_t static MailboxUIDValidity.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8 = a1 == a4 && a2 == a5;
  if (v8 || (v9 = sub_1005E3290(), uint64_t result = 0, (v9 & 1) != 0))
  {
    if ((a3 & 0x100000000) != 0)
    {
      if ((a6 & 0x100000000) != 0) {
        return 1;
      }
    }
    else if ((a6 & 0x100000000) == 0 && a3 == a6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t MailboxUIDValidity.uidValidity.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 | ((HIDWORD(a3) & 1) << 32);
}

uint64_t MailboxUIDValidity.uidValidity.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

NIOIMAPCore2::MailboxUIDValidity __swiftcall MailboxUIDValidity.init(encodeMailbox:uidValidity:)(NIOIMAPCore2::EncodedMailbox encodeMailbox, NIOIMAPCore2::UIDValidity_optional uidValidity)
{
  unint64_t v2 = uidValidity.value.rawValue | ((unint64_t)uidValidity.is_nil << 32);
  result.encodedMailbox = encodeMailbox;
  result.uidValidity = (NIOIMAPCore2::UIDValidity_optional)v2;
  return result;
}

void MailboxUIDValidity.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x100000000) != 0)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    sub_1005E3440(a4);
  }
}

Swift::Int MailboxUIDValidity.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) != 0)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    sub_1005E3440(a3);
  }
  return sub_1005E3470();
}

Swift::Int sub_1002854A0()
{
  return MailboxUIDValidity.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32));
}

void sub_1002854C4(uint64_t a1)
{
  MailboxUIDValidity.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32));
}

Swift::Int sub_1002854E8()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    sub_1005E3440(v1);
  }
  return sub_1005E3470();
}

uint64_t sub_100285580(uint64_t a1, uint64_t a2)
{
  return static MailboxUIDValidity.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32));
}

unint64_t sub_1002855C8()
{
  unint64_t result = qword_1007110A0;
  if (!qword_1007110A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110A0);
  }
  return result;
}

uint64_t sub_100285618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MailboxUIDValidity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 initializeWithTake for MailboxUIDValidity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MailboxUIDValidity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxUIDValidity(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 21))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MailboxUIDValidity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MailboxUIDValidity()
{
  return &type metadata for MailboxUIDValidity;
}

uint64_t MechanismBase64.base64.getter()
{
  return swift_retain();
}

uint64_t MechanismBase64.init(mechanism:base64:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_DWORD *)(a6 + 32) = a5;
  *(unsigned char *)(a6 + 38) = BYTE6(a5);
  *(_WORD *)(a6 + 36) = WORD2(a5);
  return result;
}

void MechanismBase64.hash(into:)()
{
  long long v1 = *v0;
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  sub_10002A77C((uint64_t)&v1);
  if (*((void *)v0 + 2))
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
}

uint64_t static MechanismBase64.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = sub_1005E3290(), uint64_t result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a2 + 16);
    if (v7)
    {
      if (v8)
      {
        unint64_t v9 = *(void *)(a1 + 24);
        unint64_t v10 = *(unsigned int *)(a1 + 32) | ((unint64_t)(*(unsigned __int16 *)(a1 + 36) | (*(unsigned __int8 *)(a1 + 38) << 16)) << 32);
        uint64_t v11 = *(void *)(a2 + 24);
        unint64_t v12 = *(unsigned int *)(a2 + 32) | ((unint64_t)(*(unsigned __int16 *)(a2 + 36) | (*(unsigned __int8 *)(a2 + 38) << 16)) << 32);
        unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFLL;
        swift_retain();
        swift_retain();
        LOBYTE(v13) = static ByteBuffer.== infix(_:_:)(v7, v9, v13, v8, v11, v14);
        swift_release();
        swift_release();
        if (v13) {
          return 1;
        }
      }
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int MechanismBase64.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_100285A0C()
{
  return sub_1005E3470();
}

unint64_t sub_100285A50()
{
  unint64_t result = qword_1007110A8;
  if (!qword_1007110A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110A8);
  }
  return result;
}

uint64_t destroy for MechanismBase64()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MechanismBase64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MechanismBase64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  return a1;
}

__n128 initializeWithTake for MechanismBase64(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 31) = *(void *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MechanismBase64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  return a1;
}

uint64_t getEnumTagSinglePayload for MechanismBase64(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 39))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MechanismBase64(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 38) = 0;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 39) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 39) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MechanismBase64()
{
  return &type metadata for MechanismBase64;
}

void sub_100285CD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 8;
  Swift::Int v3 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(34, 0xE100000000000000, v2, *(_DWORD *)(v1 + 20));
  if (v5)
  {
    v6._uint64_t countAndFlagsBits = 34;
    v6._unint64_t object = (void *)0xE100000000000000;
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v6, v3);
  }
  Swift::Int v7 = v4;
  int v8 = *(_DWORD *)(v1 + 20);
  Swift::Int v9 = (v8 + v4);
  if (__CFADD__(v8, v4))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)(v1 + 20) = v9;
  uint64_t v10 = sub_1005E1CD0();
  unint64_t v12 = (void *)v11;
  sub_100210AD0(v10, v11, v2, v9);
  if (v14)
  {
    v15._uint64_t countAndFlagsBits = v10;
    v15._unint64_t object = v12;
    Swift::Int v13 = ByteBuffer._setStringSlowpath(_:at:)(v15, v9);
  }
  Swift::Int v16 = v13;
  swift_bridgeObjectRelease();
  int v17 = *(_DWORD *)(v1 + 20);
  Swift::Int v18 = (v17 + v16);
  if (__CFADD__(v17, v16)) {
    goto LABEL_14;
  }
  *(_DWORD *)(v1 + 20) = v18;
  BOOL v19 = __OFADD__(v7, v16);
  Swift::Int v20 = v7 + v16;
  if (v19)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_100210AD0(34, 0xE100000000000000, v2, v17 + v16);
  if (v22)
  {
    v23._uint64_t countAndFlagsBits = 34;
    v23._unint64_t object = (void *)0xE100000000000000;
    Swift::Int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v18);
  }
  int v24 = *(_DWORD *)(v1 + 20);
  BOOL v25 = __CFADD__(v24, v21);
  int v26 = v24 + v21;
  if (v25) {
    goto LABEL_16;
  }
  *(_DWORD *)(v1 + 20) = v26;
  if (__OFADD__(v20, v21)) {
LABEL_17:
  }
    __break(1u);
}

uint64_t Media.MediaType.sub.getter()
{
  return sub_10022C948();
}

uint64_t Media.MediaType.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100287088();
  return swift_bridgeObjectRelease();
}

Swift::Int Media.MediaType.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_100285F50()
{
  return Media.MediaType.hashValue.getter();
}

uint64_t sub_100285F5C()
{
  return Media.MediaType.hash(into:)();
}

NIOIMAPCore2::Media::MediaType __swiftcall Media.MediaType.init(topLevel:sub:)(Swift::String topLevel, Swift::String sub)
{
  uint64_t countAndFlagsBits = sub._countAndFlagsBits;
  unint64_t object = topLevel._object;
  uint64_t v4 = sub_1005E1CB0();
  Swift::String v6 = v5;
  swift_bridgeObjectRelease();
  sub_10022C948();
  sub_1005E1CB0();
  sub_10028704C();
  uint64_t v7 = v4;
  int v8 = v6;
  uint64_t v9 = countAndFlagsBits;
  uint64_t v10 = object;
  result.sub.stringValue._unint64_t object = v10;
  result.sub.stringValue._uint64_t countAndFlagsBits = v9;
  result.topLevel.stringValue._unint64_t object = v8;
  result.topLevel.stringValue._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t sub_100285FD4()
{
  sub_1005E1CB0();
  sub_10028704C();
  return v0;
}

uint64_t sub_10028600C()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.multipart = result;
  unk_100761ED0 = v1;
  return result;
}

uint64_t *Media.TopLevelType.multipart.unsafeMutableAddressor()
{
  if (qword_10070FCF0 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.multipart;
}

uint64_t static Media.TopLevelType.multipart.getter()
{
  return sub_100235C2C(&qword_10070FCF0);
}

uint64_t sub_1002860BC()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.text = result;
  unk_100761EE0 = v1;
  return result;
}

uint64_t *Media.TopLevelType.text.unsafeMutableAddressor()
{
  if (qword_10070FCF8 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.text;
}

uint64_t static Media.TopLevelType.text.getter()
{
  return sub_100235C2C(&qword_10070FCF8);
}

uint64_t sub_100286160()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.application = result;
  unk_100761EF0 = v1;
  return result;
}

uint64_t *Media.TopLevelType.application.unsafeMutableAddressor()
{
  if (qword_10070FD00 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.application;
}

uint64_t static Media.TopLevelType.application.getter()
{
  return sub_100235C2C(&qword_10070FD00);
}

uint64_t sub_100286214()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.audio = result;
  unk_100761F00 = v1;
  return result;
}

uint64_t *Media.TopLevelType.audio.unsafeMutableAddressor()
{
  if (qword_10070FD08 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.audio;
}

uint64_t static Media.TopLevelType.audio.getter()
{
  return sub_100235C2C(&qword_10070FD08);
}

uint64_t sub_1002862BC()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.image = result;
  unk_100761F10 = v1;
  return result;
}

uint64_t *Media.TopLevelType.image.unsafeMutableAddressor()
{
  if (qword_10070FD10 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.image;
}

uint64_t static Media.TopLevelType.image.getter()
{
  return sub_100235C2C(&qword_10070FD10);
}

uint64_t sub_100286364()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.message = result;
  unk_100761F20 = v1;
  return result;
}

uint64_t *Media.TopLevelType.message.unsafeMutableAddressor()
{
  if (qword_10070FD18 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.message;
}

uint64_t static Media.TopLevelType.message.getter()
{
  return sub_100235C2C(&qword_10070FD18);
}

uint64_t sub_100286410()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.video = result;
  unk_100761F30 = v1;
  return result;
}

uint64_t *Media.TopLevelType.video.unsafeMutableAddressor()
{
  if (qword_10070FD20 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.video;
}

uint64_t static Media.TopLevelType.video.getter()
{
  return sub_100235C2C(&qword_10070FD20);
}

uint64_t sub_1002864B8()
{
  uint64_t result = sub_1005E1CB0();
  static Media.TopLevelType.font = result;
  unk_100761F40 = v1;
  return result;
}

uint64_t *Media.TopLevelType.font.unsafeMutableAddressor()
{
  if (qword_10070FD28 != -1) {
    swift_once();
  }
  return &static Media.TopLevelType.font;
}

uint64_t static Media.TopLevelType.font.getter()
{
  return sub_100235C2C(&qword_10070FD28);
}

uint64_t sub_100286564()
{
  return Media.TopLevelType.debugDescription.getter();
}

uint64_t sub_10028656C()
{
  return Media.Subtype.hashValue.getter(*v0, v0[1]);
}

uint64_t sub_100286574(uint64_t a1)
{
  return Media.Subtype.hash(into:)(a1, *v1, v1[1]);
}

uint64_t sub_10028657C@<X0>(Swift::String *a1@<X0>, NIOIMAPCore2::Media::Subtype *a2@<X8>)
{
  NIOIMAPCore2::Media::Subtype v4 = Media.Subtype.init(_:)(*a1);
  uint64_t result = v4.stringValue._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t sub_1002865AC()
{
  uint64_t result = sub_1005E1CB0();
  static Media.Subtype.alternative = result;
  unk_100761F50 = v1;
  return result;
}

uint64_t *Media.Subtype.alternative.unsafeMutableAddressor()
{
  if (qword_10070FD30 != -1) {
    swift_once();
  }
  return &static Media.Subtype.alternative;
}

uint64_t static Media.Subtype.alternative.getter()
{
  return sub_100235C2C(&qword_10070FD30);
}

uint64_t sub_100286660()
{
  uint64_t result = sub_1005E1CB0();
  static Media.Subtype.related = result;
  unk_100761F60 = v1;
  return result;
}

uint64_t *Media.Subtype.related.unsafeMutableAddressor()
{
  if (qword_10070FD38 != -1) {
    swift_once();
  }
  return &static Media.Subtype.related;
}

uint64_t static Media.Subtype.related.getter()
{
  return sub_100235C2C(&qword_10070FD38);
}

uint64_t sub_10028670C()
{
  uint64_t result = sub_1005E1CB0();
  static Media.Subtype.mixed = result;
  unk_100761F70 = v1;
  return result;
}

uint64_t *Media.Subtype.mixed.unsafeMutableAddressor()
{
  if (qword_10070FD40 != -1) {
    swift_once();
  }
  return &static Media.Subtype.mixed;
}

uint64_t static Media.Subtype.mixed.getter()
{
  return sub_100235C2C(&qword_10070FD40);
}

uint64_t sub_1002867B4()
{
  uint64_t result = sub_100287068();
  static Media.Subtype.rfc822 = result;
  unk_100761F80 = v1;
  return result;
}

uint64_t *Media.Subtype.rfc822.unsafeMutableAddressor()
{
  if (qword_10070FD48 != -1) {
    swift_once();
  }
  return &static Media.Subtype.rfc822;
}

uint64_t static Media.Subtype.rfc822.getter()
{
  return sub_100235C2C(&qword_10070FD48);
}

uint64_t _s12NIOIMAPCore25MediaO7SubtypeV4hash4intoys6HasherVz_tF_0()
{
  swift_bridgeObjectRetain();
  sub_100287088();
  return swift_bridgeObjectRelease();
}

Swift::Int _s12NIOIMAPCore25MediaO7SubtypeV9hashValueSivg_0()
{
  return sub_1005E3470();
}

uint64_t BodyStructure.mediaType.getter()
{
  sub_10013AE3C(v0, (uint64_t)v20);
  sub_10013AE3C((uint64_t)v20, (uint64_t)v25);
  sub_10013AE3C(v0, (uint64_t)v21);
  if (sub_10013AEAC((uint64_t)v21) == 1)
  {
    uint64_t v18 = v0;
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v21);
    sub_10013AE3C((uint64_t)v25, (uint64_t)v19);
    uint64_t v1 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v19);
    uint64_t v2 = *(void *)(v1 + 24);
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = *(void *)(v1 + 40);
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 56);
    uint64_t v7 = *(void *)(v1 + 64);
    uint64_t v17 = *(void *)(v1 + 72);
    uint64_t v8 = *(void *)(v1 + 80);
    long long v16 = *(_OWORD *)(v1 + 88);
    uint64_t v10 = *(void *)(v1 + 104);
    uint64_t v9 = *(void *)(v1 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100136C1C(v2, v3, v4, v5, v6, v7, v17, v8, v16, *((uint64_t *)&v16 + 1), v10, v9);
    if (qword_10070FCF0 != -1) {
      swift_once();
    }
    uint64_t v11 = static Media.TopLevelType.multipart;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100286C18(v18, sub_100061440);
  }
  else
  {
    unint64_t v12 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v21);
    memcpy(__dst, v12, sizeof(__dst));
    sub_100232248(__dst, &v23);
    sub_100232248(&v23, &v24);
    if (v24 >> 62)
    {
      if (v24 >> 62 == 1)
      {
        v24 &= 0x3FFFFFFFFFFFFFFFuLL;
        sub_10013AE3C((uint64_t)v25, (uint64_t)v19);
        uint64_t v13 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v19);
        sub_10022C168(v13);
        if (qword_10070FD18 != -1) {
          swift_once();
        }
        uint64_t v11 = static Media.TopLevelType.message;
        sub_100287068();
        swift_bridgeObjectRetain();
        sub_100286C18(v0, sub_100061440);
      }
      else
      {
        v24 &= 0x3FFFFFFFFFFFFFFFuLL;
        sub_100286C18(v0, sub_100136870);
        sub_100286C8C((uint64_t)&v23);
        uint64_t v14 = qword_10070FCF8;
        swift_bridgeObjectRetain();
        if (v14 != -1) {
          swift_once();
        }
        uint64_t v11 = static Media.TopLevelType.text;
        swift_bridgeObjectRetain();
        sub_100286C18(v0, sub_100061440);
        sub_100286CBC((uint64_t)&v23);
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v24 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v11;
}

uint64_t sub_100286C18(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

uint64_t sub_100286C8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100286CBC(uint64_t a1)
{
  return a1;
}

unint64_t sub_100286CF0()
{
  unint64_t result = qword_1007110B0;
  if (!qword_1007110B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110B0);
  }
  return result;
}

unint64_t sub_100286D40()
{
  unint64_t result = qword_1007110B8;
  if (!qword_1007110B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110B8);
  }
  return result;
}

unint64_t sub_100286D90()
{
  unint64_t result = qword_1007110C0;
  if (!qword_1007110C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110C0);
  }
  return result;
}

unint64_t sub_100286DE0()
{
  unint64_t result = qword_1007110C8;
  if (!qword_1007110C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110C8);
  }
  return result;
}

unint64_t sub_100286E30()
{
  unint64_t result = qword_1007110D0;
  if (!qword_1007110D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110D0);
  }
  return result;
}

unint64_t sub_100286E80()
{
  unint64_t result = qword_1007110D8;
  if (!qword_1007110D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110D8);
  }
  return result;
}

unint64_t sub_100286ED0()
{
  unint64_t result = qword_1007110E0;
  if (!qword_1007110E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110E0);
  }
  return result;
}

void type metadata accessor for Media()
{
}

void type metadata accessor for Media.MediaType()
{
}

void type metadata accessor for Media.TopLevelType()
{
}

void type metadata accessor for Media.Subtype()
{
}

uint64_t sub_100286F4C()
{
  uint64_t v1 = v0;
  v12._uint64_t countAndFlagsBits = sub_1005E1CD0();
  sub_1005E1E30(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 34;
  v13._unint64_t object = (void *)0xE100000000000000;
  sub_1005E1E30(v13);
  Swift::Int v2 = *(unsigned int *)(v0 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(34, 0xE100000000000000, v0 + 8, v2);
  Swift::Int v4 = v3;
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 34;
    v7._unint64_t object = (void *)0xE100000000000000;
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v7, v2);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(v1 + 20);
  BOOL v10 = __CFADD__(v9, v4);
  int v11 = v9 + v4;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 20) = v11;
    return v4;
  }
  return result;
}

uint64_t sub_10028704C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100287068()
{
  return sub_1005E1CB0();
}

uint64_t sub_100287088()
{
  return sub_1005E1DB0();
}

uint64_t GmailLabel.init(mailboxName:)(uint64_t a1)
{
  sub_1001F6FAC(a1, (uint64_t (*)(void))j_j__malloc_0, (uint64_t)j_j__realloc_0, (uint64_t)j_j__free_0);
  sub_1002872D8();
  return v1;
}

uint64_t GmailLabel.init(useAttribute:)(uint64_t a1, uint64_t a2)
{
  ByteBufferAllocator.buffer(string:)(a1, a2, (uint64_t)j_j__malloc_0, (uint64_t)j_j__realloc_0, (uint64_t)j_j__free_0);
  sub_1002872D8();
  return v2;
}

Swift::String __swiftcall GmailLabel.makeDisplayString()()
{
  sub_1002D09F0(v0, v1, v2 & 0xFFFFFFFFFFFFFFLL);
  result._unint64_t object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

unint64_t sub_10028727C()
{
  unint64_t result = qword_1007110E8;
  if (!qword_1007110E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for GmailLabel()
{
  return &type metadata for GmailLabel;
}

uint64_t sub_1002872D8()
{
  return swift_bridgeObjectRelease();
}

void MessageAttribute.hash(into:)(uint64_t a1)
{
  sub_100288FF8(v1, __src);
  sub_100288FF8(__src, v40);
  sub_100288FF8(v1, v38);
  switch(sub_10028900C((uint64_t)v38))
  {
    case 1u:
      Swift::Int v4 = (const void *)sub_100289074((uint64_t)v38);
      memcpy(__dst, v4, 0x78uLL);
      sub_10022C2A8();
      sub_100288FF8(v40, v35);
      sub_100289074((uint64_t)v35);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Envelope.hash(into:)();
      goto LABEL_35;
    case 2u:
      Swift::UInt64 v5 = *(void *)sub_100289074((uint64_t)v38);
      Swift::UInt v6 = 2;
      goto LABEL_17;
    case 3u:
      Swift::UInt32 v7 = *(_DWORD *)sub_100289074((uint64_t)v38);
      sub_1005E3410(3uLL);
      sub_1005E3440(v7);
      return;
    case 4u:
      Swift::UInt v8 = *(void *)sub_100289074((uint64_t)v38);
      sub_1005E3410(4uLL);
      Swift::UInt v9 = v8;
      goto LABEL_44;
    case 5u:
      BOOL v10 = (const void *)sub_100289074((uint64_t)v38);
      memcpy(v35, v10, 0xB2uLL);
      sub_1005E3410(5uLL);
      sub_10013A988((uint64_t)v35, (uint64_t)v36);
      if (sub_10013AE98((uint64_t)v36) == 1)
      {
        sub_10022C2A8();
      }
      else
      {
        sub_10022C290();
        sub_10013AE3C((uint64_t)v36, (uint64_t)v34);
        if (sub_10013AEAC((uint64_t)v34) == 1)
        {
          uint64_t v24 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v34);
          v39[0] = sub_100289A50(v24);
          *(void *)&v39[1] = v25;
          sub_1002898B4(v26);
          sub_10022C2A8();
          sub_100288FF8(v40, __dst);
          uint64_t v27 = (__n128 *)sub_100289074((uint64_t)__dst);
          sub_100289874(v27);
          BodyStructure.Multipart.hash(into:)(a1);
        }
        else
        {
          uint64_t v30 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v34);
          memcpy(v39, v30, sizeof(v39));
          sub_10022C290();
          sub_100288FF8(v40, __dst);
          uint64_t v31 = (__n128 *)sub_100289074((uint64_t)__dst);
          sub_100289874(v31);
          BodyStructure.Singlepart.hash(into:)(a1);
        }
      }
      sub_1005E3420(BYTE1(v35[22]));
      goto LABEL_35;
    case 6u:
      int v11 = (uint64_t *)sub_100289074((uint64_t)v38);
      uint64_t v12 = *v11;
      Swift::UInt v13 = v11[1];
      sub_1005E3410(6uLL);
      sub_100226C94(a1, v12);
      goto LABEL_32;
    case 7u:
      uint64_t v14 = sub_100289074((uint64_t)v38);
      sub_100289018(v14, (uint64_t)__dst);
      sub_1005E3410(7uLL);
      sub_100289018((uint64_t)__dst, (uint64_t)v35);
      uint64_t v15 = v35[0];
      char v16 = v35[4];
      int v17 = LOBYTE(v35[4]) >> 6;
      if (!v17)
      {
        LOBYTE(v35[4]) &= 0x3Fu;
        Swift::UInt v13 = v35[1];
        char v28 = v35[2];
        sub_10022C290();
        sub_100226C94(a1, v15);
        if ((v28 & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_27;
      }
      if (v17 == 1)
      {
        LOBYTE(v35[4]) &= 0x3Fu;
        uint64_t v18 = v35[1];
        Swift::UInt v13 = v35[3];
        char v19 = v35[2];
        sub_10022C2A8();
        sub_100226C94(a1, v15);
        sub_10013B5CC(v18, v19);
        SectionSpecifier.Kind.hash(into:)(a1, v18, v19);
        sub_10013B5E0(v18, v19);
        if ((v16 & 1) == 0)
        {
LABEL_31:
          sub_1005E3420(1u);
LABEL_32:
          Swift::UInt v9 = v13;
          goto LABEL_44;
        }
LABEL_27:
        sub_1005E3420(0);
        return;
      }
      uint64_t v29 = v35[2] | v35[3];
      if (LOBYTE(v35[4]) != 128 || v29 | v35[0] | v35[1])
      {
        BOOL v32 = LOBYTE(v35[4]) == 128 && v35[0] == 1;
        if (!v32 || v29 | v35[1]) {
          Swift::UInt v9 = 4;
        }
        else {
          Swift::UInt v9 = 3;
        }
      }
      else
      {
        Swift::UInt v9 = 2;
      }
LABEL_44:
      sub_1005E3410(v9);
      return;
    case 8u:
      Swift::UInt64 v5 = *(void *)sub_100289074((uint64_t)v38);
      Swift::UInt v6 = 8;
      goto LABEL_17;
    case 9u:
      Swift::UInt64 v5 = *(void *)sub_100289074((uint64_t)v38);
      Swift::UInt v6 = 9;
      goto LABEL_17;
    case 0xAu:
      Swift::UInt64 v5 = *(void *)sub_100289074((uint64_t)v38);
      Swift::UInt v6 = 10;
LABEL_17:
      sub_1005E3410(v6);
      sub_1005E3450(v5);
      return;
    case 0xBu:
      uint64_t v20 = *(void *)sub_100289074((uint64_t)v38);
      sub_1005E3410(0xBuLL);
      Swift::UInt v21 = *(void *)(v20 + 16);
      sub_1005E3410(v21);
      if (v21)
      {
        uint64_t v22 = v20 + 54;
        do
        {
          v22 += 24;
          swift_beginAccess();
          sub_1005E3400();
          --v21;
        }
        while (v21);
      }
      return;
    case 0xCu:
      uint64_t v23 = *(void *)(sub_100289074((uint64_t)v38) + 8);
      sub_1005E3410(0xCuLL);
      if (!v23) {
        goto LABEL_27;
      }
      sub_1005E3420(1u);
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
LABEL_35:
      sub_100289084(v1);
      return;
    default:
      uint64_t v3 = *(void *)sub_100289074((uint64_t)v38);
      sub_10022C290();
      sub_10022A804(a1, v3);
      return;
  }
}

uint64_t static MessageAttribute.__derived_enum_equals(_:_:)(__n128 *a1, __n128 *__src)
{
  sub_100288FF8(__src, __srca);
  sub_100288FF8(__srca, v53);
  sub_100288FF8(a1, v50);
  switch(sub_10028900C((uint64_t)v50))
  {
    case 1u:
      Swift::UInt32 v7 = (const void *)sub_100289074((uint64_t)v50);
      memcpy(__dst, v7, 0x78uLL);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 1) {
        goto LABEL_52;
      }
      Swift::UInt v8 = (const void *)sub_100289074((uint64_t)v49);
      memcpy(v45, v8, 0x78uLL);
      sub_100289084(a1);
      sub_100289084(__src);
      char v9 = static Envelope.__derived_struct_equals(_:_:)(__dst, (uint64_t)v45);
      sub_100289084(__src);
      sub_100289084(a1);
      return v9 & 1;
    case 2u:
      uint64_t v10 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) == 2) {
        goto LABEL_28;
      }
      goto LABEL_52;
    case 3u:
      int v11 = *(_DWORD *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 3) {
        goto LABEL_52;
      }
      BOOL v12 = *(_DWORD *)sub_100289074((uint64_t)v49) == v11;
      goto LABEL_29;
    case 4u:
      uint64_t v10 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 4) {
        goto LABEL_52;
      }
      goto LABEL_28;
    case 5u:
      Swift::UInt v13 = (const void *)sub_100289074((uint64_t)v50);
      memcpy(__dst, v13, 0xB2uLL);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 5) {
        goto LABEL_52;
      }
      uint64_t v14 = (const void *)sub_100289074((uint64_t)v49);
      memcpy(v45, v14, 0xB2uLL);
      sub_10013A988((uint64_t)__dst, (uint64_t)v46);
      if (sub_10013AE98((uint64_t)v46) == 1)
      {
        sub_10013A988((uint64_t)v45, (uint64_t)v44);
        if (sub_10013AE98((uint64_t)v44) == 1)
        {
          sub_100288FF8(v53, v43);
          uint64_t v15 = (__n128 *)sub_100289074((uint64_t)v43);
          sub_100289874(v15);
LABEL_16:
          char v9 = BYTE1(__dst[22]) ^ v45[177] ^ 1;
          return v9 & 1;
        }
        sub_100289084(a1);
      }
      else
      {
        sub_10013A988((uint64_t)v45, (uint64_t)v43);
        if (sub_10013AE98((uint64_t)v43) == 1) {
          goto LABEL_52;
        }
        sub_10013AE3C((uint64_t)v46, (uint64_t)v44);
        if (sub_10013AEAC((uint64_t)v44) == 1)
        {
          uint64_t v31 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v44);
          v51[0] = sub_100289A50(v31);
          *(void *)&v51[1] = v32;
          sub_1002898B4(v33);
          sub_10013AE3C((uint64_t)v43, (uint64_t)v42);
          if (sub_10013AEAC((uint64_t)v42) != 1) {
            goto LABEL_52;
          }
          uint64_t v34 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v42);
          v52[0] = sub_100289A50(v34);
          *(void *)&v52[1] = v35;
          *(_OWORD *)((char *)&v52[1] + 8) = *(_OWORD *)(v36 + 24);
          *(_OWORD *)((char *)&v52[2] + 8) = *(_OWORD *)(v36 + 40);
          *(_OWORD *)((char *)&v52[3] + 8) = *(_OWORD *)(v36 + 56);
          *(_OWORD *)((char *)&v52[4] + 8) = *(_OWORD *)(v36 + 72);
          *(_OWORD *)((char *)&v52[5] + 8) = *(_OWORD *)(v36 + 88);
          *(_OWORD *)((char *)&v52[6] + 8) = *(_OWORD *)(v36 + 104);
          sub_100289084(a1);
          sub_100289084(__src);
          BOOL v37 = static BodyStructure.Multipart.__derived_struct_equals(_:_:)(v51, v52);
        }
        else
        {
          uint64_t v39 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v44);
          memcpy(v51, v39, sizeof(v51));
          sub_10013AE3C((uint64_t)v43, (uint64_t)v42);
          if (sub_10013AEAC((uint64_t)v42) == 1) {
            goto LABEL_52;
          }
          unint64_t v40 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v42);
          memcpy(v52, v40, sizeof(v52));
          sub_100289084(a1);
          sub_100289084(__src);
          static BodyStructure.Singlepart.__derived_struct_equals(_:_:)();
        }
        BOOL v41 = v37;
        sub_100289084(__src);
        sub_100289084(a1);
        if (v41) {
          goto LABEL_16;
        }
      }
      goto LABEL_52;
    case 6u:
      uint64_t v16 = sub_100289074((uint64_t)v50);
      int v17 = *(void **)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 6) {
        goto LABEL_52;
      }
      uint64_t v19 = sub_100289074((uint64_t)v49);
      uint64_t v20 = *(void *)(v19 + 8);
      if ((_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(v17, *(void **)v19) & 1) == 0) {
        goto LABEL_52;
      }
      BOOL v12 = v18 == v20;
      goto LABEL_29;
    case 7u:
      uint64_t v21 = sub_100289074((uint64_t)v50);
      sub_100289018(v21, (uint64_t)__dst);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 7) {
        goto LABEL_52;
      }
      uint64_t v22 = sub_100289074((uint64_t)v49);
      sub_100289018(v22, (uint64_t)v45);
      char v6 = static StreamingKind.__derived_enum_equals(_:_:)((uint64_t)__dst, (uint64_t)v45);
      goto LABEL_34;
    case 8u:
      uint64_t v23 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 8) {
        goto LABEL_52;
      }
      uint64_t v24 = *(void *)sub_100289074((uint64_t)v49);
      if ((v24 | v23) < 0)
      {
        __break(1u);
        JUMPOUT(0x100287F50);
      }
      BOOL v12 = v24 == v23;
      goto LABEL_29;
    case 9u:
      uint64_t v10 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 9) {
        goto LABEL_52;
      }
      goto LABEL_28;
    case 0xAu:
      uint64_t v10 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 10) {
        goto LABEL_52;
      }
LABEL_28:
      BOOL v12 = v10 == *(void *)sub_100289074((uint64_t)v49);
LABEL_29:
      char v9 = v12;
      return v9 & 1;
    case 0xBu:
      sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 11) {
        goto LABEL_52;
      }
      sub_100289074((uint64_t)v49);
      sub_10021B064();
      goto LABEL_34;
    case 0xCu:
      uint64_t v25 = (uint64_t *)sub_100289074((uint64_t)v50);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49) != 12) {
        goto LABEL_52;
      }
      char v28 = (void *)sub_100289074((uint64_t)v49);
      uint64_t v29 = v28[1];
      if (!v26)
      {
        if (v29) {
          goto LABEL_52;
        }
        sub_100288FF8(v53, __dst);
        sub_100289074((uint64_t)__dst);
        swift_bridgeObjectRetain();
        goto LABEL_50;
      }
      if (v29)
      {
        BOOL v30 = v27 == *v28 && v26 == v29;
        if (v30 || (sub_1005E3290() & 1) != 0)
        {
LABEL_50:
          char v9 = 1;
          return v9 & 1;
        }
      }
LABEL_52:
      char v9 = 0;
      return v9 & 1;
    default:
      uint64_t v4 = *(void *)sub_100289074((uint64_t)v50);
      sub_100288FF8(__src, v49);
      if (sub_10028900C((uint64_t)v49)) {
        goto LABEL_52;
      }
      Swift::UInt64 v5 = (uint64_t *)sub_100289074((uint64_t)v49);
      char v6 = sub_10021E990(v4, *v5);
LABEL_34:
      char v9 = v6;
      return v9 & 1;
  }
}

Swift::Int MessageAttribute.hashValue.getter()
{
  sub_1005E33F0();
  MessageAttribute.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_100287FC4()
{
  sub_100288FF8(v0, __dst);
  return MessageAttribute.hashValue.getter();
}

void sub_100287FFC(uint64_t a1)
{
  sub_100288FF8(v1, __dst);
  MessageAttribute.hash(into:)(a1);
}

Swift::Int sub_10028803C()
{
  sub_100288FF8(v0, __dst);
  sub_1005E33F0();
  MessageAttribute.hash(into:)((uint64_t)&v2);
  return sub_1005E3470();
}

uint64_t sub_100288098(void *a1, void *a2)
{
  sub_100288FF8(a1, v4);
  sub_100288FF8(a2, __dst);
  return static MessageAttribute.__derived_enum_equals(_:_:)(v4, __dst) & 1;
}

void MessageAttribute.debugDescription.getter()
{
  sub_100289084(v0);
  sub_1002117E0();
}

uint64_t sub_100288128(__n128 *a1)
{
  uint64_t v2 = v1;
  sub_100288FF8(a1, __src);
  sub_100288FF8(__src, v71);
  sub_100288FF8(a1, v69);
  switch(sub_10028900C((uint64_t)v69))
  {
    case 1u:
      Swift::UInt64 v5 = (const void *)sub_100289074((uint64_t)v69);
      memcpy(__dst, v5, 0x78uLL);
      Swift::Int v65 = *(unsigned int *)(v1 + 20);
      sub_100288FF8(v71, v67);
      sub_100289074((uint64_t)v67);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1002899BC();
      sub_100210AD0(v6, v7, v1 + 8, v65);
      if (v8)
      {
        v9._uint64_t countAndFlagsBits = sub_1002899BC();
        ByteBuffer._setStringSlowpath(_:at:)(v9, v65);
      }
      sub_100254260();
      if (v11) {
        goto LABEL_44;
      }
      *(_DWORD *)(v1 + 20) = v10;
      sub_10026C7F0((uint64_t)__dst);
      uint64_t v13 = v12;
      sub_100289084(a1);
      return v13;
    case 2u:
      uint64_t v15 = *(void *)sub_100289074((uint64_t)v69);
      Swift::Int v16 = *(unsigned int *)(v1 + 20);
      uint64_t v17 = sub_10028995C();
      sub_100210AD0(v17, v18, v1 + 8, v16);
      if (v19)
      {
        v20._uint64_t countAndFlagsBits = sub_10028995C();
        ByteBuffer._setStringSlowpath(_:at:)(v20, v16);
      }
      sub_100254260();
      if (v11) {
        goto LABEL_45;
      }
      *(_DWORD *)(v1 + 20) = v21;
      sub_100267F58(v15);
      return v22;
    case 3u:
      int v23 = *(_DWORD *)sub_100289074((uint64_t)v69);
      v67[0] = 541346133;
      v67[1] = 0xE400000000000000;
      LODWORD(__dst[0]) = v23;
      v72._uint64_t countAndFlagsBits = sub_1005E3230();
      char object = (char)v72._object;
      uint64_t v14 = v67;
      sub_1005E1E30(v72);
      swift_bridgeObjectRelease();
      sub_1002899D8();
      sub_10021333C();
      sub_1002899F4();
      if (object) {
        uint64_t v14 = (void *)sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (!v11) {
        goto LABEL_19;
      }
      __break(1u);
LABEL_16:
      uint64_t v26 = *(void *)sub_100289074((uint64_t)v69);
      strcpy((char *)v67, "RFC822.SIZE ");
      BYTE5(v67[1]) = 0;
      HIWORD(v67[1]) = -5120;
      __dst[0] = v26;
      v73._uint64_t countAndFlagsBits = sub_1005E3230();
      char v27 = (char)v73._object;
      uint64_t v14 = v67;
      sub_1005E1E30(v73);
      swift_bridgeObjectRelease();
      sub_1002899D8();
      sub_10021333C();
      sub_1002899F4();
      if (v27) {
        uint64_t v14 = (void *)sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (v11) {
        goto LABEL_46;
      }
LABEL_19:
      *(_DWORD *)(v2 + 20) = v25;
      return (uint64_t)v14;
    case 4u:
      goto LABEL_16;
    case 5u:
      char v28 = (const void *)sub_100289074((uint64_t)v69);
      memcpy(__dst, v28, 0xB2uLL);
      sub_10013A988((uint64_t)__dst, (uint64_t)v70);
      char v29 = BYTE1(__dst[22]);
      sub_100288FF8(v71, v67);
      BOOL v30 = (__n128 *)sub_100289074((uint64_t)v67);
      sub_100289874(v30);
      sub_100288704(v70, v29);
      uint64_t v14 = v31;
      sub_100289084(a1);
      return (uint64_t)v14;
    case 6u:
      uint64_t v32 = (void *)sub_100289074((uint64_t)v69);
      return sub_100288B00(*v32, v32[1]);
    case 7u:
      uint64_t v33 = sub_100289074((uint64_t)v69);
      sub_100289018(v33, (uint64_t)v67);
      sub_100288D9C((uint64_t)v67);
      return v4;
    case 8u:
      sub_100289074((uint64_t)v69);
      sub_1002705AC();
      return v4;
    case 9u:
    case 0xAu:
      uint64_t v34 = sub_100289074((uint64_t)v69);
      sub_100289A5C(v34);
      sub_100288E6C();
      return v4;
    case 0xBu:
      sub_100289074((uint64_t)v69);
      sub_100288F24();
      return v4;
    case 0xCu:
      uint64_t v36 = (unint64_t *)sub_100289074((uint64_t)v69);
      unint64_t v37 = *v36;
      unint64_t v38 = v36[1];
      Swift::Int v39 = *(unsigned int *)(v1 + 20);
      uint64_t v40 = sub_100289A10();
      Swift::Int v41 = 0;
      sub_100210AD0(v40, v42, v1 + 8, v39);
      if (v44)
      {
        v45._uint64_t countAndFlagsBits = sub_100289A10();
        Swift::Int v43 = ByteBuffer._setStringSlowpath(_:at:)(v45, v39);
      }
      Swift::Int v46 = v43;
      int v47 = *(_DWORD *)(v1 + 20);
      Swift::Int v48 = (v47 + v43);
      if (__CFADD__(v47, v43)) {
        goto LABEL_47;
      }
      *(_DWORD *)(v1 + 20) = v48;
      uint64_t v49 = sub_10023C410();
      sub_100210AD0(v49, v50, v51, v48);
      if (v53)
      {
        v54._uint64_t countAndFlagsBits = 32;
        v54._char object = (void *)0xE100000000000000;
        Swift::Int v52 = ByteBuffer._setStringSlowpath(_:at:)(v54, v48);
      }
      int v55 = *(_DWORD *)(v1 + 20);
      Swift::Int v56 = (v55 + v52);
      if (__CFADD__(v55, v52)) {
        goto LABEL_48;
      }
      *(_DWORD *)(v1 + 20) = v56;
      BOOL v57 = __OFADD__(v46, v52);
      Swift::Int v58 = v46 + v52;
      if (v57) {
        goto LABEL_49;
      }
      if (v38)
      {
        swift_bridgeObjectRetain();
        Swift::Int v41 = sub_10025DCBC(v37, v38);
        sub_100289084(a1);
      }
      else
      {
        uint64_t v59 = sub_100289A70();
        sub_100210AD0(v59, v60, v61, v56);
        if (v62)
        {
          v63._uint64_t countAndFlagsBits = 4999502;
          v63._char object = (void *)0xE300000000000000;
          ByteBuffer._setStringSlowpath(_:at:)(v63, v56);
        }
        sub_100254260();
        if (v11) {
          goto LABEL_50;
        }
        *(_DWORD *)(v1 + 20) = v64;
      }
      uint64_t v14 = (void *)(v58 + v41);
      if (__OFADD__(v58, v41))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        JUMPOUT(0x100288698);
      }
      return (uint64_t)v14;
    default:
      sub_100289074((uint64_t)v69);
      sub_100288D04();
      return v4;
  }
}

void sub_1002886CC()
{
  sub_100288FF8(v0, __dst);
  MessageAttribute.debugDescription.getter();
}

void sub_100288704(__n128 *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 8;
  Swift::Int v7 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(1497648962, 0xE400000000000000, v6, v7);
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = 1497648962;
    v10._char object = (void *)0xE400000000000000;
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v7);
  }
  Swift::Int v11 = v8;
  int v12 = *(_DWORD *)(v3 + 20);
  Swift::Int v13 = (v12 + v8);
  if (__CFADD__(v12, v8))
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_DWORD *)(v3 + 20) = v13;
  if (a2)
  {
    uint64_t v14 = sub_1002899A0();
    sub_100210AD0(v14, v15, v6, v13);
    if (v17)
    {
      v18._uint64_t countAndFlagsBits = sub_1002899A0();
      Swift::Int v16 = ByteBuffer._setStringSlowpath(_:at:)(v18, v13);
    }
    int v19 = *(_DWORD *)(v3 + 20);
    if (__CFADD__(v19, v16)) {
      goto LABEL_43;
    }
    *(_DWORD *)(v3 + 20) = v19 + v16;
  }
  else
  {
    Swift::Int v16 = 0;
  }
  Swift::Int v20 = v11 + v16;
  if (__OFADD__(v11, v16)) {
    goto LABEL_39;
  }
  sub_100289940(32);
  if (v22) {
    Swift::Int v21 = sub_10026B440(32);
  }
  int v23 = *(_DWORD *)(v3 + 20);
  if (__CFADD__(v23, v21)) {
    goto LABEL_40;
  }
  *(_DWORD *)(v3 + 20) = v23 + v21;
  Swift::Int v24 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  sub_10013A988((uint64_t)a1, (uint64_t)v76);
  if (sub_10013AE98((uint64_t)v76) != 1)
  {
LABEL_25:
    sub_10013AE3C((uint64_t)v76, (uint64_t)v75);
    sub_1001F95B8((uint64_t)v75);
    sub_100289940(40);
    if (v36) {
      Swift::Int v35 = sub_10026B440(40);
    }
    Swift::Int v37 = v35;
    int v38 = *(_DWORD *)(v3 + 20);
    BOOL v32 = __CFADD__(v38, v35);
    int v39 = v38 + v35;
    if (v32) {
      goto LABEL_46;
    }
    *(_DWORD *)(v3 + 20) = v39;
    sub_10013AE3C((uint64_t)v75, (uint64_t)v74);
    if (sub_10013AEAC((uint64_t)v74) == 1)
    {
      Swift::Int v66 = v24;
      uint64_t v40 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v74);
      __dst[0] = sub_100289A50(v40);
      *(void *)&__dst[1] = v41;
      *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v42 + 24);
      *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v42 + 40);
      *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v42 + 56);
      *(_OWORD *)((char *)&__dst[4] + 8) = *(_OWORD *)(v42 + 72);
      *(_OWORD *)((char *)&__dst[5] + 8) = *(_OWORD *)(v42 + 88);
      *(_OWORD *)((char *)&__dst[6] + 8) = *(_OWORD *)(v42 + 104);
      sub_10013AE3C((uint64_t)v75, (uint64_t)v73);
      uint64_t v43 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v73);
      uint64_t v44 = *(void *)(v43 + 24);
      Swift::Int v71 = v37;
      Swift::String v72 = a1;
      uint64_t v45 = *(void *)(v43 + 32);
      uint64_t v46 = *(void *)(v43 + 40);
      uint64_t v47 = *(void *)(v43 + 48);
      uint64_t v48 = *(void *)(v43 + 64);
      uint64_t v69 = *(void *)(v43 + 72);
      uint64_t v70 = *(void *)(v43 + 56);
      uint64_t v68 = *(void *)(v43 + 80);
      long long v67 = *(_OWORD *)(v43 + 88);
      uint64_t v49 = *(void *)(v43 + 104);
      uint64_t v50 = *(void *)(v43 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v51 = v45;
      a1 = v72;
      sub_100136C1C(v44, v51, v46, v47, v70, v48, v69, v68, v67, *((uint64_t *)&v67 + 1), v49, v50);
      sub_10023A17C((uint64_t *)__dst);
      uint64_t v53 = v52;
      sub_100289874(v72);
      Swift::Int v54 = v71 + v53;
      if (__OFADD__(v71, v53))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      Swift::Int v24 = v66;
    }
    else
    {
      int v55 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v74);
      memcpy(__dst, v55, sizeof(__dst));
      sub_10013AE3C((uint64_t)v75, (uint64_t)v73);
      uint64_t v56 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v73);
      sub_10022C168(v56);
      sub_10023C6E4();
      uint64_t v58 = v57;
      sub_100289874(a1);
      BOOL v59 = __OFADD__(v37, v58);
      Swift::Int v54 = v37 + v58;
      if (v59)
      {
LABEL_50:
        __break(1u);
        return;
      }
    }
    Swift::Int v60 = *(unsigned int *)(v3 + 20);
    sub_100210AD0(41, 0xE100000000000000, v6, *(_DWORD *)(v3 + 20));
    if (v62)
    {
      v63._uint64_t countAndFlagsBits = 41;
      v63._char object = (void *)0xE100000000000000;
      Swift::Int v61 = ByteBuffer._setStringSlowpath(_:at:)(v63, v60);
    }
    Swift::Int v64 = v61;
    sub_100289874(a1);
    sub_1001F4120();
    if (v32) {
      goto LABEL_47;
    }
    *(_DWORD *)(v3 + 20) = v65;
    Swift::Int v34 = v54 + v64;
    if (__OFADD__(v54, v64))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    goto LABEL_36;
  }
  sub_100289940(40);
  if (v26) {
    Swift::Int v25 = sub_10026B440(40);
  }
  Swift::Int v27 = v25;
  int v28 = *(_DWORD *)(v3 + 20);
  if (__CFADD__(v28, v25)) {
    goto LABEL_44;
  }
  *(_DWORD *)(v3 + 20) = v28 + v25;
  sub_100289940(41);
  if (v30) {
    Swift::Int v29 = sub_10026B440(41);
  }
  int v31 = *(_DWORD *)(v3 + 20);
  BOOL v32 = __CFADD__(v31, v29);
  int v33 = v31 + v29;
  if (v32) {
    goto LABEL_45;
  }
  *(_DWORD *)(v3 + 20) = v33;
  Swift::Int v34 = v27 + v29;
  if (__OFADD__(v27, v29))
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_36:
  if (__OFADD__(v24, v34))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
}

#error "100288BD4: call analysis failed (funcsize=129)"

void sub_100288D04()
{
  uint64_t v1 = v0;
  Swift::Int v2 = *(unsigned int *)(v0 + 20);
  uint64_t v3 = sub_100289A3C();
  sub_100210AD0(v3, v4, v0 + 8, v2);
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = sub_100289A3C();
    Swift::Int v5 = ByteBuffer._setStringSlowpath(_:at:)(v7, v2);
  }
  Swift::Int v8 = v5;
  int v9 = *(_DWORD *)(v1 + 20);
  BOOL v10 = __CFADD__(v9, v5);
  int v11 = v9 + v5;
  if (v10)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(v1 + 20) = v11;
  uint64_t v12 = sub_100289918();
  if (__OFADD__(v8, sub_1001E8CEC(v12, v13, v14, v15, v16, v17, v18, v19))) {
LABEL_7:
  }
    __break(1u);
}

void sub_100288D9C(uint64_t a1)
{
  sub_10034EB88(a1);
  uint64_t v3 = v2;
  Swift::Int v4 = *(unsigned int *)(v1 + 20);
  uint64_t v5 = sub_10023C410();
  sub_100210AD0(v5, v6, v7, v4);
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = 32;
    v10._char object = (void *)0xE100000000000000;
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v4);
  }
  int v11 = *(_DWORD *)(v1 + 20);
  Swift::Int v12 = (v11 + v8);
  if (__CFADD__(v11, v8))
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(v1 + 20) = v12;
  BOOL v13 = __OFADD__(v3, v8);
  Swift::Int v14 = v3 + v8;
  if (v13)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v15 = sub_100289A70();
  sub_100210AD0(v15, v16, v17, v12);
  if (v19)
  {
    v20._uint64_t countAndFlagsBits = 4999502;
    v20._char object = (void *)0xE300000000000000;
    Swift::Int v18 = ByteBuffer._setStringSlowpath(_:at:)(v20, v12);
  }
  int v21 = *(_DWORD *)(v1 + 20);
  BOOL v22 = __CFADD__(v21, v18);
  int v23 = v21 + v18;
  if (v22) {
    goto LABEL_12;
  }
  *(_DWORD *)(v1 + 20) = v23;
  if (__OFADD__(v14, v18)) {
LABEL_13:
  }
    __break(1u);
}

void sub_100288E6C()
{
  v4._uint64_t countAndFlagsBits = sub_1005E3230();
  char object = (char)v4._object;
  sub_1005E1E30(v4);
  swift_bridgeObjectRelease();
  sub_1002899D8();
  sub_10021333C();
  sub_1002899F4();
  if (object) {
    sub_100213390();
  }
  swift_bridgeObjectRelease();
  sub_1001F4120();
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v0 + 20) = v2;
  }
}

void sub_100288F24()
{
  Swift::Int v1 = *(unsigned int *)(v0 + 20);
  uint64_t v2 = sub_1002703F4();
  sub_100210AD0(v2, v3, v0 + 8, v1);
  if (v5)
  {
    v6._uint64_t countAndFlagsBits = sub_1002703F4();
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v6, v1);
  }
  Swift::Int v7 = v4;
  int v8 = *(_DWORD *)(v0 + 20);
  Swift::Int v9 = (v8 + v4);
  if (__CFADD__(v8, v4))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v0 + 20) = v9;
  uint64_t v10 = sub_10023C410();
  sub_100210AD0(v10, v11, v12, v9);
  if (v14)
  {
    v15._uint64_t countAndFlagsBits = 32;
    v15._char object = (void *)0xE100000000000000;
    Swift::Int v13 = ByteBuffer._setStringSlowpath(_:at:)(v15, v9);
  }
  int v16 = *(_DWORD *)(v0 + 20);
  BOOL v17 = __CFADD__(v16, v13);
  int v18 = v16 + v13;
  if (v17) {
    goto LABEL_11;
  }
  *(_DWORD *)(v0 + 20) = v18;
  Swift::Int v19 = v7 + v13;
  if (__OFADD__(v7, v13))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = sub_100289918();
  if (__OFADD__(v19, sub_1001EA768(v20))) {
LABEL_13:
  }
    __break(1u);
}

void *sub_100288FF8(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0xB2uLL);
}

uint64_t sub_10028900C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 176) >> 12;
}

uint64_t sub_100289018(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100289074(uint64_t result)
{
  *(_WORD *)(result + 176) &= 0xFFFu;
  return result;
}

uint64_t sub_100289084(__n128 *a1)
{
  sub_1002898E8(a1);
  sub_100289A28();
  v2();
  return v1;
}

void sub_1002890C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  switch(a23 >> 12)
  {
    case 0:
    case 6:
    case 0xB:
    case 0xC:
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRetain();
      break;
    case 5:
      sub_10013AEB4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        a23);
      break;
    case 7:
      sub_1002892B4(a1, a2, a3, a4, a5);
      break;
    default:
      return;
  }
}

void sub_1002892B4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >> 6 == 1)
  {
    swift_bridgeObjectRetain();
    sub_10013B5CC(a2, a3);
  }
  else if (!(a5 >> 6))
  {
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_10028931C()
{
  unint64_t result = qword_1007110F0;
  if (!qword_1007110F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007110F0);
  }
  return result;
}

void destroy for MessageAttribute(uint64_t a1)
{
  sub_100212EB0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176));
}

uint64_t initializeWithCopy for MessageAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  unsigned __int16 v26 = *(_WORD *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  sub_1002890C4(*(void *)a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = v26;
  return a1;
}

uint64_t assignWithCopy for MessageAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v30 = *(void *)(a2 + 72);
  uint64_t v31 = *(void *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 104);
  uint64_t v35 = *(void *)(a2 + 112);
  uint64_t v36 = *(void *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 128);
  uint64_t v38 = *(void *)(a2 + 136);
  uint64_t v39 = *(void *)(a2 + 144);
  uint64_t v40 = *(void *)(a2 + 152);
  uint64_t v41 = *(void *)(a2 + 160);
  uint64_t v42 = *(void *)(a2 + 168);
  unsigned __int16 v43 = *(_WORD *)(a2 + 176);
  sub_1002890C4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  uint64_t v26 = *(void *)(a1 + 160);
  uint64_t v27 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  unsigned __int16 v28 = *(_WORD *)(a1 + 176);
  *(_WORD *)(a1 + 176) = v43;
  sub_100212EB0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    v27,
    v28);
  return a1;
}

void *initializeWithTake for MessageAttribute(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB2uLL);
}

uint64_t assignWithTake for MessageAttribute(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 176);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  uint64_t v18 = *(void *)(a1 + 160);
  uint64_t v19 = *(void *)(a1 + 168);
  unsigned __int16 v20 = *(_WORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  long long v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  long long v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = v3;
  sub_100212EB0(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    v19,
    v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageAttribute(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x74 && *(unsigned char *)(a1 + 178))
    {
      unsigned int v2 = *(_DWORD *)a1 + 115;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int16 *)(a1 + 176) >> 5) & 0x70 | (*(unsigned __int16 *)(a1 + 176) >> 12)) ^ 0x7F;
      if (v2 >= 0x73) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

void storeEnumTagSinglePayload for MessageAttribute(char *a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x73)
  {
    *((void *)a1 + 21) = 0;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *((_WORD *)a1 + 88) = 0;
    *(void *)a1 = a2 - 116;
    if (a3 >= 0x74) {
      a1[178] = 1;
    }
  }
  else
  {
    if (a3 >= 0x74) {
      a1[178] = 0;
    }
    if (a2)
    {
      unsigned int v4 = (((-a2 >> 4) & 7) - 8 * a2) << 9;
      bzero(a1, 0xB0uLL);
      *((_WORD *)a1 + 88) = v4;
    }
  }
}

uint64_t sub_100289850(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 176) = *(_WORD *)(result + 176) & 0x1FF | (a2 << 12);
  return result;
}

ValueMetadata *type metadata accessor for MessageAttribute()
{
  return &type metadata for MessageAttribute;
}

uint64_t sub_100289874(__n128 *a1)
{
  sub_1002898E8(a1);
  sub_100289A28();
  v2();
  return v1;
}

__n128 sub_1002898B4(uint64_t a1)
{
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v1 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)(a1 + 88);
  __n128 result = *(__n128 *)(a1 + 104);
  *(__n128 *)(v1 + 104) = result;
  return result;
}

__n128 sub_1002898E8(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_100289918()
{
  return v0;
}

void sub_100289940(uint64_t a1)
{
  sub_100210AD0(a1, 0xE100000000000000, v2, v1);
}

uint64_t sub_10028995C()
{
  return 0x4C414E5245544E49;
}

uint64_t sub_100289980()
{
  return 0x532E5952414E4942;
}

uint64_t sub_1002899A0()
{
  return 0x5255544355525453;
}

uint64_t sub_1002899BC()
{
  return 0x45504F4C45564E45;
}

uint64_t sub_1002899D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002899F4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100289A10()
{
  return 0x57454956455250;
}

uint64_t sub_100289A3C()
{
  return 0x205347414C46;
}

__n128 sub_100289A50(uint64_t a1)
{
  return *(__n128 *)a1;
}

uint64_t sub_100289A5C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100289A70()
{
  return 4999502;
}

void MessageData.hash(into:)()
{
  uint64_t v3 = sub_10000566C(&qword_10070FD90);
  uint64_t v4 = sub_100224550(v3);
  __chkstk_darwin(v4);
  sub_1002677E8();
  type metadata accessor for MessageData();
  sub_1001F3BBC();
  __chkstk_darwin(v5);
  sub_100224490();
  sub_10028A664(v1, (uint64_t)v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10028A6C8((uint64_t)v2, v0);
      Swift::UInt v7 = 1;
      goto LABEL_5;
    case 2u:
      sub_10028A6C8((uint64_t)v2, v0);
      Swift::UInt v7 = 2;
LABEL_5:
      sub_1005E3410(v7);
      sub_10000566C(&qword_100710538);
      sub_10022AAC0();
      sub_1005E19C0();
      sub_1001F3A28(v0, &qword_10070FD90);
      return;
    case 3u:
      uint64_t v8 = *v2;
      sub_1005E3410(3uLL);
      sub_1005E3410(*(void *)(v8 + 16));
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = v8 + 54;
        do
        {
          v10 += 24;
          swift_beginAccess();
          sub_1005E3400();
          --v9;
        }
        while (v9);
      }
      goto LABEL_16;
    case 4u:
      uint64_t v11 = *v2;
      sub_1005E3410(4uLL);
      sub_1005E3410(*(void *)(v11 + 16));
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v15 = v11;
        do
        {
          uint64_t v14 = *(void *)(v11 + v13 + 56);
          swift_beginAccess();
          sub_1005E3400();
          if (v14)
          {
            sub_1005E3420(1u);
            swift_beginAccess();
            sub_1005E3400();
          }
          else
          {
            sub_1005E3420(0);
          }
          v13 += 48;
          --v12;
          uint64_t v11 = v15;
        }
        while (v12);
      }
LABEL_16:
      swift_bridgeObjectRelease();
      break;
    default:
      Swift::UInt32 v6 = *(_DWORD *)v2;
      sub_1005E3410(0);
      sub_1005E3440(v6);
      break;
  }
}

uint64_t static MessageData.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000566C(&qword_10070FD90);
  uint64_t v6 = sub_100224550(v5);
  __chkstk_darwin(v6);
  sub_100224A54();
  uint64_t v40 = v7 - v8;
  __chkstk_darwin(v9);
  uint64_t v39 = (uint64_t)&v39 - v10;
  type metadata accessor for MessageData();
  sub_1001F3BBC();
  __chkstk_darwin(v11);
  sub_100224A54();
  uint64_t v14 = (uint64_t *)(v12 - v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  long long v21 = (char *)&v39 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  long long v24 = (char *)&v39 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (_DWORD *)((char *)&v39 - v25);
  uint64_t v27 = sub_10000566C(&qword_1007110F8);
  uint64_t v28 = sub_100224550(v27);
  __chkstk_darwin(v28);
  sub_1002677E8();
  uint64_t v30 = (uint64_t *)(v2 + *(int *)(v29 + 56));
  sub_10028A664(a1, v2);
  sub_10028A664(a2, (uint64_t)v30);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10028A664(v2, (uint64_t)v24);
      if (sub_10028B0D8() == 1)
      {
        uint64_t v32 = v39;
        sub_10028A6C8((uint64_t)v30, v39);
        sub_100223B18();
        char v31 = sub_1005E35A0();
        sub_1001F3A28(v32, &qword_10070FD90);
        uint64_t v33 = (uint64_t)v24;
        goto LABEL_8;
      }
      uint64_t v37 = (uint64_t)v24;
      goto LABEL_18;
    case 2u:
      sub_10028A664(v2, (uint64_t)v21);
      if (sub_10028B0D8() == 2)
      {
        uint64_t v34 = v40;
        sub_10028A6C8((uint64_t)v30, v40);
        sub_100223B18();
        char v31 = sub_1005E35A0();
        sub_1001F3A28(v34, &qword_10070FD90);
        uint64_t v33 = (uint64_t)v21;
LABEL_8:
        sub_1001F3A28(v33, &qword_10070FD90);
        goto LABEL_14;
      }
      uint64_t v37 = (uint64_t)v21;
LABEL_18:
      sub_1001F3A28(v37, &qword_10070FD90);
      goto LABEL_19;
    case 3u:
      sub_10028A664(v2, (uint64_t)v18);
      if (sub_10028B0D8() != 3) {
        goto LABEL_15;
      }
      sub_10021A1B4();
      goto LABEL_13;
    case 4u:
      sub_10028A664(v2, (uint64_t)v14);
      uint64_t v36 = *v14;
      if (sub_10028B0D8() == 4)
      {
        char v35 = sub_10022169C(v36, *v30);
LABEL_13:
        char v31 = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_14:
        sub_10028A730(v2);
      }
      else
      {
LABEL_15:
        swift_bridgeObjectRelease();
LABEL_19:
        sub_1001F3A28(v2, &qword_1007110F8);
        char v31 = 0;
      }
      return v31 & 1;
    default:
      sub_10028A664(v2, (uint64_t)v26);
      if (sub_10028B0D8()) {
        goto LABEL_19;
      }
      char v31 = *(_DWORD *)v30 == *v26;
      goto LABEL_14;
  }
}

Swift::Int MessageData.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_10028A168()
{
  return sub_1005E3470();
}

uint64_t sub_10028A1A8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000566C(&qword_1007109E8);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10000566C(&qword_10070FD90);
  uint64_t v7 = sub_100224550(v6);
  __chkstk_darwin(v7);
  sub_100224A54();
  Swift::Int v10 = v8 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v88 - v12;
  type metadata accessor for MessageData();
  sub_1001F3BBC();
  __chkstk_darwin(v14);
  sub_100224490();
  sub_10028A664(a1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_8;
    case 2u:
      goto LABEL_14;
    case 3u:
      goto LABEL_20;
    case 4u:
      goto LABEL_26;
    default:
      uint64_t v15 = sub_1002BA570();
      Swift::Int v16 = *(unsigned int *)(v3 + 20);
      uint64_t v17 = sub_10028B0F0();
      uint64_t v2 = 0;
      sub_100210AD0(v17, v18, v3 + 8, v16);
      if (v20)
      {
        v21._uint64_t countAndFlagsBits = sub_10028B0F0();
        Swift::Int v19 = ByteBuffer._setStringSlowpath(_:at:)(v21, v16);
      }
      int v22 = *(_DWORD *)(v3 + 20);
      BOOL v23 = __CFADD__(v22, v19);
      int v24 = v22 + v19;
      if (v23)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      *(_DWORD *)(v3 + 20) = v24;
      BOOL v25 = __OFADD__(v15, v19);
      uint64_t result = v15 + v19;
      if (!v25) {
        return result;
      }
      __break(1u);
LABEL_8:
      sub_10028A6C8(v2, (uint64_t)v13);
      Swift::Int v10 = *(unsigned int *)(v3 + 20);
      uint64_t v27 = sub_10028B0A4();
      sub_100210AD0(v27, v28, v3 + 8, v10);
      if (v30)
      {
        v31._uint64_t countAndFlagsBits = sub_10028B0A4();
        Swift::Int v29 = ByteBuffer._setStringSlowpath(_:at:)(v31, v10);
      }
      uint64_t v2 = v29;
      int v32 = *(_DWORD *)(v3 + 20);
      BOOL v23 = __CFADD__(v32, v29);
      int v33 = v32 + v29;
      if (v23) {
        goto LABEL_32;
      }
      *(_DWORD *)(v3 + 20) = v33;
      sub_10000566C(&qword_100710538);
      uint64_t v34 = sub_1005E3600();
      sub_10028B050(v34, v35, v36, v37, v38, v39, v40, v41, (uint64_t)sub_1002D08D8, 0, v88, v89, v90, v91, v92, v93, v94, v95, v96,
        v97,
        v98,
        v99);
      uint64_t v42 = sub_10028B084();
      v43(v42);
      sub_1001F3A28((uint64_t)v13, &qword_10070FD90);
      uint64_t result = v2 + v3;
      if (!__OFADD__(v2, v3)) {
        return result;
      }
      __break(1u);
LABEL_14:
      sub_10028A6C8(v2, v10);
      Swift::Int v44 = *(unsigned int *)(v3 + 20);
      sub_100210AD0(0xD000000000000013, 0x80000001005E6330, v3 + 8, *(_DWORD *)(v3 + 20));
      if (v46)
      {
        v47._uint64_t countAndFlagsBits = 0xD000000000000013;
        v47._char object = (void *)0x80000001005E6330;
        Swift::Int v45 = ByteBuffer._setStringSlowpath(_:at:)(v47, v44);
      }
      Swift::Int v48 = v45;
      int v49 = *(_DWORD *)(v3 + 20);
      BOOL v23 = __CFADD__(v49, v45);
      int v50 = v49 + v45;
      if (v23) {
        goto LABEL_33;
      }
      *(_DWORD *)(v3 + 20) = v50;
      sub_10000566C(&qword_100710538);
      uint64_t v51 = sub_1005E3600();
      sub_10028B050(v51, v52, v53, v54, v55, v56, v57, v58, (uint64_t)sub_1002D08D8, 0, v88, v89, v90, v91, v92, v93, v94, v95, v96,
        v97,
        v98,
        v99);
      uint64_t v59 = sub_10028B084();
      v60(v59);
      sub_1001F3A28(v10, &qword_10070FD90);
      uint64_t result = v48 + v3;
      if (!__OFADD__(v48, v3)) {
        return result;
      }
      __break(1u);
LABEL_20:
      Swift::Int v61 = *(unsigned int *)(v3 + 20);
      uint64_t v62 = sub_1002546D8();
      sub_100210AD0(v62, v63, v3 + 8, v61);
      if (v65)
      {
        v66._uint64_t countAndFlagsBits = sub_1002546D8();
        Swift::Int v64 = ByteBuffer._setStringSlowpath(_:at:)(v66, v61);
      }
      Swift::Int v67 = v64;
      int v68 = *(_DWORD *)(v3 + 20);
      BOOL v23 = __CFADD__(v68, v64);
      int v69 = v68 + v64;
      if (v23) {
        goto LABEL_34;
      }
      *(_DWORD *)(v3 + 20) = v69;
      sub_10028B108();
      uint64_t v3 = sub_1001E9624(v70, v71, v72, v73, v74, v75, v76, 0, v3);
      swift_bridgeObjectRelease();
      uint64_t result = v67 + v3;
      if (!__OFADD__(v67, v3)) {
        return result;
      }
      __break(1u);
LABEL_26:
      Swift::Int v77 = *(unsigned int *)(v3 + 20);
      uint64_t v78 = sub_10028B0C0();
      sub_100210AD0(v78, v79, v3 + 8, v77);
      if (v81)
      {
        v82._uint64_t countAndFlagsBits = sub_10028B0C0();
        Swift::Int v80 = ByteBuffer._setStringSlowpath(_:at:)(v82, v77);
      }
      Swift::Int v83 = v80;
      int v84 = *(_DWORD *)(v3 + 20);
      BOOL v23 = __CFADD__(v84, v80);
      int v85 = v84 + v80;
      if (v23) {
        goto LABEL_35;
      }
      *(_DWORD *)(v3 + 20) = v85;
      sub_10028B108();
      sub_1001EFB14();
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      uint64_t result = v83 + v87;
      if (__OFADD__(v83, v87))
      {
LABEL_36:
        __break(1u);
        JUMPOUT(0x10028A608);
      }
      return result;
  }
}

uint64_t type metadata accessor for MessageData()
{
  uint64_t result = qword_100711178;
  if (!qword_100711178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028A664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028A6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_10070FD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028A730(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessageData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10028A790()
{
  unint64_t result = qword_100711100;
  if (!qword_100711100)
  {
    type metadata accessor for MessageData();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711100);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MessageData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v7 = sub_10000566C(&qword_100710538);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_7;
      case 3u:
      case 4u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for MessageData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
    case 2:
      uint64_t v3 = sub_10000566C(&qword_100710538);
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 3:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

{
  unsigned int v2;
  unsigned int v3;
  uint64_t vars8;

  uint64_t v2 = *(unsigned __int8 *)(a1 + 192);
  if (v2 <= 0xFD) {
    sub_100061440(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160),
  }
      *(void *)(a1 + 168),
      *(void *)(a1 + 176),
      *(void *)(a1 + 184),
      v2 & 1);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned __int8 *)(a1 + 384);
  if (v3 <= 0xFD) {
    sub_100061440(*(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(void *)(a1 + 240), *(void *)(a1 + 248), *(void *)(a1 + 256), *(void *)(a1 + 264), *(void *)(a1 + 272), *(void *)(a1 + 280), *(void *)(a1 + 288), *(void *)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352),
  }
      *(void *)(a1 + 360),
      *(void *)(a1 + 368),
      *(void *)(a1 + 376),
      v3 & 1);
  if (*(void *)(a1 + 432))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MessageData(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v6 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_5;
    case 3u:
    case 4u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for MessageData(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10028A730((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v6 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_6;
      case 3u:
      case 4u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for MessageData(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = sub_10000566C(&qword_100710538);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MessageData(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10028A730((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_10028AFA8()
{
  sub_10027AC38();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_10028B050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1002C247C(v22, 0, 0xE000000000000000, 44, 0xE100000000000000, 0, 0xE000000000000000, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22);
}

uint64_t sub_10028B084()
{
  return v0;
}

uint64_t sub_10028B0A4()
{
  return 0x44454853494E4156;
}

uint64_t sub_10028B0C0()
{
  return 0x48435445464C5255;
}

uint64_t sub_10028B0D8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_10028B0F0()
{
  return 0x45474E5550584520;
}

unint64_t sub_10028B120()
{
  unint64_t result = qword_1007111B0;
  if (!qword_1007111B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111B0);
  }
  return result;
}

unint64_t sub_10028B170()
{
  unint64_t result = qword_1007111B8;
  if (!qword_1007111B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111B8);
  }
  return result;
}

unint64_t sub_10028B1C0()
{
  unint64_t result = qword_1007111C0;
  if (!qword_1007111C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageID()
{
  return &type metadata for MessageID;
}

uint64_t MessagePath.iUID.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t MessagePath.iUID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t MessagePath.range.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t MessagePath.range.setter(uint64_t result, uint64_t a2, __int16 a3)
{
  *(void *)(v3 + 48) = result;
  *(void *)(v3 + 56) = a2;
  *(unsigned char *)(v3 + 64) = a3;
  *(unsigned char *)(v3 + 65) = HIBYTE(a3) & 1;
  return result;
}

uint64_t MessagePath.init(mailboxReference:iUID:section:range:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 20) = BYTE4(a3) & 1;
  *(_DWORD *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(unsigned char *)(a9 + 64) = a10;
  *(unsigned char *)(a9 + 65) = a11 & 1;
  return result;
}

void MessagePath.hash(into:)()
{
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v0;
  *(void *)&v4[13] = *(void *)(v0 + 13);
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  if (v4[20] == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    sub_1005E3440(*(Swift::UInt32 *)&v4[16]);
  }
  sub_10002A77C((uint64_t)v4);
  sub_1005E3440(*(_DWORD *)(v0 + 24));
  if (*(void *)(v0 + 40))
  {
    sub_1005E3420(1u);
    swift_bridgeObjectRetain();
    sub_1005E1DB0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1005E3420(0);
  }
  if (*(unsigned char *)(v0 + 65) == 1
    || (char v1 = *(unsigned char *)(v0 + 64),
        Swift::UInt v2 = *(void *)(v0 + 48),
        Swift::UInt v3 = *(void *)(v0 + 56),
        sub_1005E3420(1u),
        sub_1005E3410(v2),
        (v1 & 1) != 0))
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    sub_1005E3410(v3);
  }
}

uint64_t static MessagePath.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 20);
  int v6 = *(_DWORD *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 20);
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v9 = sub_1005E3290();
    uint64_t result = 0;
    if ((v9 & 1) == 0) {
      return result;
    }
  }
  if (v5)
  {
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v7 & 1) != 0 || v4 != v6) {
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 24) != *(_DWORD *)(a1 + 24)) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a2 + 40);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  BOOL v13 = *(void *)(a1 + 32) == *(void *)(a2 + 32) && v11 == v12;
  if (v13 || (v14 = sub_1005E3290(), uint64_t result = 0, (v14 & 1) != 0))
  {
LABEL_21:
    if (*(unsigned char *)(a1 + 65))
    {
      if ((*(unsigned char *)(a2 + 65) & 1) == 0) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 65) & 1) != 0 {
           || (static ByteRange.__derived_struct_equals(_:_:)(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64) & 1, *(void *)(a2 + 48), *(void *)(a2 + 56), *(unsigned char *)(a2 + 64) & 1) & 1) == 0)
    }
    {
      return 0;
    }
    return 1;
  }
  return result;
}

Swift::Int MessagePath.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_10028B514()
{
  return sub_1005E3470();
}

void sub_10028B554(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)uint64_t v52 = *(_OWORD *)a1;
  *(void *)&v52[13] = *(void *)(a1 + 13);
  Swift::String v4 = *(Swift::String *)v52;
  uint64_t v5 = v1 + 8;
  Swift::Int v6 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(*(uint64_t *)v52, *(unint64_t *)&v52[8], v1 + 8, v6);
  Swift::Int v8 = v7;
  char v10 = v9;
  sub_10002A77C((uint64_t)v52);
  if (v10) {
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v4, v6);
  }
  int v11 = *(_DWORD *)(v1 + 20);
  Swift::Int v12 = (v11 + v8);
  if (__CFADD__(v11, v8))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(_DWORD *)(v2 + 20) = v12;
  if (v52[20])
  {
    Swift::Int v13 = 0;
  }
  else
  {
    uint64_t v14 = sub_10026BD08();
    sub_100210AD0(v14, v15, v2 + 8, v12);
    if (v17)
    {
      v18._uint64_t countAndFlagsBits = sub_10026BD08();
      Swift::Int v16 = ByteBuffer._setStringSlowpath(_:at:)(v18, v12);
    }
    Swift::Int v19 = v16;
    int v20 = *(_DWORD *)(v2 + 20);
    BOOL v21 = __CFADD__(v20, v16);
    int v22 = v20 + v16;
    if (v21) {
      goto LABEL_34;
    }
    *(_DWORD *)(v2 + 20) = v22;
    uint64_t v23 = sub_1002BA570();
    Swift::Int v13 = v19 + v23;
    if (__OFADD__(v19, v23))
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  Swift::Int v24 = v8 + v13;
  if (__OFADD__(v8, v13)) {
    goto LABEL_29;
  }
  uint64_t v25 = sub_1002BE504();
  Swift::Int v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  Swift::Int v27 = *(unsigned int *)(v2 + 20);
  unint64_t v28 = *(void **)(a1 + 40);
  if (v28)
  {
    Swift::Int v51 = v24 + v25;
    uint64_t v29 = *(void *)(a1 + 32);
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    v53._uint64_t countAndFlagsBits = v29;
    v53._char object = v28;
    sub_1005E1E30(v53);
    swift_bridgeObjectRetain();
    sub_100210AD0(0x4F49544345533B2FLL, 0xEA00000000003D4ELL, v2 + 8, v27);
    Swift::Int v31 = v30;
    char v33 = v32;
    swift_bridgeObjectRelease();
    if (v33)
    {
      v35._uint64_t countAndFlagsBits = 0x4F49544345533B2FLL;
      v35._char object = (void *)0xEA00000000003D4ELL;
      uint64_t v34 = v2 + 8;
      Swift::Int v31 = ByteBuffer._setStringSlowpath(_:at:)(v35, v27);
    }
    else
    {
      uint64_t v34 = v2 + 8;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int v36 = *(_DWORD *)(v2 + 20);
    LODWORD(v27) = v36 + v31;
    if (__CFADD__(v36, v31)) {
      goto LABEL_33;
    }
    *(_DWORD *)(v2 + 20) = v27;
    uint64_t v5 = v34;
    Swift::Int v26 = v51;
  }
  else
  {
    Swift::Int v31 = 0;
  }
  Swift::Int v37 = v26 + v31;
  if (__OFADD__(v26, v31)) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 65))
  {
    Swift::Int v38 = 0;
  }
  else
  {
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = *(void *)(a1 + 56);
    char v41 = *(unsigned char *)(a1 + 64);
    uint64_t v42 = sub_10028BAF0();
    sub_100210AD0(v42, v43, v5, v27);
    if (v45)
    {
      v46._uint64_t countAndFlagsBits = sub_10028BAF0();
      Swift::Int v44 = ByteBuffer._setStringSlowpath(_:at:)(v46, v27);
    }
    Swift::Int v47 = v44;
    int v48 = *(_DWORD *)(v2 + 20);
    BOOL v21 = __CFADD__(v48, v44);
    int v49 = v48 + v44;
    if (v21) {
      goto LABEL_36;
    }
    *(_DWORD *)(v2 + 20) = v49;
    uint64_t v50 = sub_100240BC8(v39, v40, v41 & 1);
    Swift::Int v38 = v47 + v50;
    if (__OFADD__(v47, v50))
    {
LABEL_37:
      __break(1u);
      return;
    }
  }
  if (__OFADD__(v37, v38)) {
    goto LABEL_32;
  }
}

unint64_t sub_10028B84C()
{
  unint64_t result = qword_1007111C8;
  if (!qword_1007111C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111C8);
  }
  return result;
}

uint64_t destroy for MessagePath()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MessagePath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessagePath(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

void *initializeWithTake for MessagePath(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x42uLL);
}

uint64_t assignWithTake for MessagePath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagePath(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 66))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagePath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 66) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagePath()
{
  return &type metadata for MessagePath;
}

uint64_t sub_10028BAF0()
{
  return 0x4149545241503B2FLL;
}

uint64_t String.init(_:)()
{
  sub_1001F969C();
  uint64_t v0 = sub_1005E1D70();
  swift_release();
  return v0;
}

uint64_t QuotaRoot.hash(into:)()
{
  return sub_1005E3400();
}

uint64_t sub_10028BBE8()
{
  return QuotaRoot.hash(into:)();
}

unint64_t sub_10028BC08()
{
  unint64_t result = qword_1007111D0;
  if (!qword_1007111D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111D0);
  }
  return result;
}

unint64_t sub_10028BC58()
{
  unint64_t result = qword_1007111D8;
  if (!qword_1007111D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111D8);
  }
  return result;
}

unint64_t sub_10028BCAC()
{
  unint64_t result = qword_1007111E0;
  if (!qword_1007111E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007111E0);
  }
  return result;
}

uint64_t sub_10028BCF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MetadataEntryName.init(_:)(*a1, a1[1]);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_WORD *)(a2 + 20) = v7;
  *(unsigned char *)(a2 + 22) = v8;
  return result;
}

ValueMetadata *type metadata accessor for MetadataEntryName()
{
  return &type metadata for MetadataEntryName;
}

void MetadataOption.hash(into:)(uint64_t a1)
{
  sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  int v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MetadataOption();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1002244A8();
  sub_10028C538(v1, (uint64_t)v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1005E3410(1uLL);
      sub_1005E1DB0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100271024((uint64_t)v2, (uint64_t)v6);
      sub_1005E3410(2uLL);
      sub_1005E1DB0();
      sub_100266530(a1);
      sub_1001F3A28((uint64_t)v6, &qword_10070FE48);
    }
  }
  else
  {
    Swift::UInt v9 = *v2;
    sub_1005E3410(0);
    sub_1005E3410(v9);
  }
}

uint64_t static MetadataOption.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  __chkstk_darwin(v5 - 8);
  sub_100254978();
  type metadata accessor for MetadataOption();
  sub_1001F3BBC();
  uint64_t v7 = __chkstk_darwin(v6);
  Swift::UInt v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  Swift::Int v12 = (char *)&v23 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v23 - v13);
  uint64_t v15 = sub_10000566C(&qword_100710510);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  Swift::String v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v19 = &v18[*(int *)(v16 + 56)];
  sub_10028C538(a1, (uint64_t)v18);
  sub_10028C538(a2, (uint64_t)v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_10028C538((uint64_t)v18, (uint64_t)v14);
    if (!swift_getEnumCaseMultiPayload())
    {
      char v21 = *v14 == *(void *)v19;
      goto LABEL_9;
    }
LABEL_11:
    sub_1001F3A28((uint64_t)v18, &qword_100710510);
    char v21 = 0;
    return v21 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_10028C538((uint64_t)v18, (uint64_t)v9);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_100271024((uint64_t)v19, (uint64_t)v2);
      char v21 = sub_10026624C(v9, v2);
      sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
      sub_1001F3A28((uint64_t)v9, &qword_10070FE48);
      goto LABEL_9;
    }
    sub_1001F3A28((uint64_t)v9, &qword_10070FE48);
    goto LABEL_11;
  }
  sub_10028C538((uint64_t)v18, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() != 1) {
    goto LABEL_11;
  }
  char v21 = sub_1001E5F40(*v12, *v19);
LABEL_9:
  sub_10028C59C((uint64_t)v18);
  return v21 & 1;
}

Swift::Int MetadataOption.hashValue.getter()
{
  sub_1005E33F0();
  MetadataOption.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_10028C1B4()
{
  sub_1005E33F0();
  MetadataOption.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_10028C1F4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002244A8();
  type metadata accessor for MetadataOption();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_100254978();
  sub_10028C538(a1, v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v40 = 0x20455A495358414DLL;
    unint64_t v41 = 0xE800000000000000;
    v49._uint64_t countAndFlagsBits = sub_1005E3230();
    sub_1005E1E30(v49);
    swift_bridgeObjectRelease();
    Swift::Int v10 = *(unsigned int *)(v1 + 20);
    swift_bridgeObjectRetain();
    sub_100210AD0(0x20455A495358414DLL, 0xE800000000000000, v1 + 8, v10);
    Swift::Int v9 = v11;
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      v14._uint64_t countAndFlagsBits = 0x20455A495358414DLL;
      v14._char object = (void *)0xE800000000000000;
      Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v14, v10);
    }
    uint64_t result = swift_bridgeObjectRelease();
    int v16 = *(_DWORD *)(v3 + 20);
    BOOL v17 = __CFADD__(v16, v9);
    int v18 = v16 + v9;
    if (!v17)
    {
      *(_DWORD *)(v3 + 20) = v18;
      return v9;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 1) {
    return sub_1002AB88C(*(unsigned char *)v1);
  }
  sub_100271024(v1, (uint64_t)v2);
  uint64_t v19 = *v2;
  int v20 = (void *)v2[1];
  Swift::Int v21 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(v19, (unint64_t)v20, v1 + 8, v21);
  uint64_t v23 = v22;
  char v25 = v24;
  uint64_t result = swift_bridgeObjectRelease();
  if (v25)
  {
    v26._uint64_t countAndFlagsBits = v19;
    v26._char object = v20;
    uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v26, v21);
    uint64_t v23 = result;
  }
  int v27 = *(_DWORD *)(v3 + 20);
  BOOL v17 = __CFADD__(v27, v23);
  int v28 = v27 + v23;
  if (v17)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v3 + 20) = v28;
  int v29 = *(_DWORD *)(v3 + 1);
  char v30 = *(unsigned char *)(v3 + 5);
  unint64_t v31 = *(void *)(v3 + 8);
  int v32 = *(_DWORD *)(v3 + 16);
  int v33 = *(_DWORD *)(v3 + 24);
  __int16 v34 = *(_WORD *)(v3 + 28);
  char v35 = *(unsigned char *)(v3 + 30);
  uint64_t v36 = *(void *)(v3 + 32);
  LOBYTE(v40) = *(unsigned char *)v3;
  BYTE5(v40) = v30;
  *(_DWORD *)((char *)&v40 + 1) = v29;
  unint64_t v41 = v31;
  int v42 = v32;
  int v43 = v28;
  int v44 = v33;
  __int16 v45 = v34;
  char v46 = v35;
  uint64_t v47 = v36;
  uint64_t v37 = (uint64_t)v2 + *(int *)(v5 + 52);
  long long v48 = *(_OWORD *)(v3 + 40);
  swift_retain();
  swift_retain();
  uint64_t v38 = sub_1001F2CA0(v37, (uint64_t)&v40, v3);
  swift_release();
  uint64_t result = swift_release();
  BOOL v39 = __OFADD__(v23, v38);
  Swift::Int v9 = v23 + v38;
  if (!v39)
  {
    sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
    return v9;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10028C4CC(uint64_t a1)
{
  return sub_10028C1F4(a1);
}

uint64_t type metadata accessor for MetadataOption()
{
  uint64_t result = qword_100711260;
  if (!qword_100711260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028C538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetadataOption();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028C59C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetadataOption();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028C5F8()
{
  return sub_10028CAEC(&qword_1007111E8, (void (*)(uint64_t))type metadata accessor for MetadataOption);
}

void *assignWithCopy for MetadataOption(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10028C59C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (void *)((char *)a1 + v6);
      uint64_t v8 = (void *)((char *)a2 + v6);
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v7 = *v8;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *assignWithTake for MetadataOption(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10028C59C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
          swift_storeEnumTagMultiPayload();
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_10028CA4C()
{
  sub_100267264();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_10028CAEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void MetadataResponse.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10028CC70(v2, (uint64_t)v11);
  uint64_t v4 = v12;
  if (v12 < 0)
  {
    v12 &= ~0x8000000000000000;
    uint64_t v8 = v11[0];
    sub_1005E3410(1uLL);
    Swift::UInt v9 = *(void *)(v8 + 16);
    sub_1005E3410(v9);
    if (v9)
    {
      uint64_t v10 = v8 + 54;
      do
      {
        v10 += 24;
        swift_beginAccess();
        sub_1005E3400();
        --v9;
      }
      while (v9);
    }
    sub_1005E3410(v4 | ((unint64_t)v4 << 32));
  }
  else
  {
    uint64_t v5 = v11[0];
    uint64_t v6 = v11[1];
    uint64_t v7 = v13;
    sub_1005E3410(0);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1002254E8(a1, v5, v6, v4);
    sub_1005E3410(v7 | (v7 << 32));
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_10028CC70(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_DWORD *)(a2 + 32) = *((_DWORD *)a1 + 8);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t static MetadataResponse.__derived_enum_equals(_:_:)(long long *a1, long long *a2)
{
  sub_10028CC70(a1, (uint64_t)v20);
  unsigned int v3 = v21;
  if (v21 < 0)
  {
    v21 &= ~0x8000000000000000;
    uint64_t v11 = v20[1];
    sub_10028CC70(a2, (uint64_t)v16);
    unsigned int v12 = v17;
    if (v17 < 0)
    {
      v17 &= ~0x8000000000000000;
      uint64_t v13 = v16[1];
      sub_10021B064();
      if ((v14 & 1) != 0
        && (v3 | ((unint64_t)v3 << 32)) == (v12 | ((unint64_t)v12 << 32))
        && (sub_100219B44(v11, v13) & 1) != 0)
      {
        char v10 = 1;
        return v10 & 1;
      }
    }
LABEL_13:
    char v10 = 0;
    return v10 & 1;
  }
  uint64_t v4 = v22;
  uint64_t v5 = v23;
  sub_10028CC70(a2, (uint64_t)v16);
  if (v17 < 0) {
    goto LABEL_13;
  }
  uint64_t v6 = v18;
  uint64_t v7 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100221CD0();
  if ((v8 & 1) == 0 || (sub_100222DD0(), (v9 & 1) == 0))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_13;
  }
  if ((v5 | (v5 << 32)) == (v7 | (v7 << 32))) {
    char v10 = sub_100219B44(v4, v6);
  }
  else {
    char v10 = 0;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v10 & 1;
}

Swift::Int MetadataResponse.hashValue.getter()
{
  sub_1005E33F0();
  sub_10028CC70(v0, (uint64_t)v10);
  uint64_t v1 = v11;
  if (v11 < 0)
  {
    v11 &= ~0x8000000000000000;
    uint64_t v5 = v10[0];
    sub_1005E3410(1uLL);
    Swift::UInt v6 = *(void *)(v5 + 16);
    sub_1005E3410(v6);
    if (v6)
    {
      uint64_t v7 = v5 + 54;
      do
      {
        v7 += 24;
        swift_beginAccess();
        sub_1005E3400();
        --v6;
      }
      while (v6);
    }
    sub_1005E3410(v1 | ((unint64_t)v1 << 32));
  }
  else
  {
    uint64_t v2 = v10[0];
    uint64_t v3 = v10[1];
    uint64_t v4 = v12;
    sub_1005E3410(0);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1002254E8((uint64_t)v9, v2, v3, v1);
    sub_1005E3410(v4 | (v4 << 32));
    swift_release();
    swift_release();
    swift_release();
  }
  return sub_1005E3470();
}

Swift::Int sub_10028CFB0()
{
  sub_10028CC70(v0, (uint64_t)v2);
  return MetadataResponse.hashValue.getter();
}

void sub_10028CFE8(uint64_t a1)
{
  sub_10028CC70(v1, (uint64_t)v3);
  MetadataResponse.hash(into:)(a1);
}

Swift::Int sub_10028D028()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 32);
  sub_1005E33F0();
  if (v3 < 0)
  {
    sub_1005E3410(1uLL);
    Swift::UInt v5 = *(void *)(v1 + 16);
    sub_1005E3410(v5);
    if (v5)
    {
      uint64_t v6 = v1 + 54;
      do
      {
        v6 += 24;
        swift_beginAccess();
        sub_1005E3400();
        --v5;
      }
      while (v5);
    }
    sub_1005E3410(v3 | ((unint64_t)v3 << 32));
  }
  else
  {
    sub_1005E3410(0);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1002254E8((uint64_t)v8, v1, v2, v3);
    sub_1005E3410(v4 | (v4 << 32));
    swift_release();
    swift_release();
    swift_release();
  }
  return sub_1005E3470();
}

uint64_t sub_10028D160(long long *a1, long long *a2)
{
  sub_10028CC70(a1, (uint64_t)v4);
  sub_10028CC70(a2, (uint64_t)v5);
  return static MetadataResponse.__derived_enum_equals(_:_:)(v4, v5) & 1;
}

void sub_10028D1AC(long long *a1)
{
  uint64_t v2 = v1;
  sub_10028CC70(a1, (uint64_t)&v46);
  uint64_t v3 = v47;
  if (v47 < 0) {
    goto LABEL_13;
  }
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 20);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v5 = sub_10028D7D8();
  sub_100210AD0(v5, v6, v2 + 8, v4);
  if (v8)
  {
    v9._uint64_t countAndFlagsBits = sub_10028D7B8();
    Swift::Int v7 = ByteBuffer._setStringSlowpath(_:at:)(v9, v10);
  }
  Swift::Int v11 = v7;
  int v12 = *(_DWORD *)(v2 + 20);
  BOOL v13 = __CFADD__(v12, v7);
  int v14 = v12 + v7;
  if (v13)
  {
    __break(1u);
    goto LABEL_24;
  }
  *(_DWORD *)(v2 + 20) = v14;
  uint64_t v15 = swift_bridgeObjectRetain();
  Swift::Int v16 = sub_10025E538(v15);
  swift_bridgeObjectRelease();
  Swift::Int v17 = v11 + v16;
  if (__OFADD__(v11, v16))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  Swift::Int v18 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(32, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v20)
  {
    v21._uint64_t countAndFlagsBits = 32;
    v21._char object = (void *)0xE100000000000000;
    Swift::Int v19 = ByteBuffer._setStringSlowpath(_:at:)(v21, v18);
  }
  int v22 = *(_DWORD *)(v2 + 20);
  BOOL v13 = __CFADD__(v22, v19);
  int v23 = v22 + v19;
  if (v13) {
    goto LABEL_25;
  }
  *(_DWORD *)(v2 + 20) = v23;
  Swift::Int v24 = v17 + v19;
  if (__OFADD__(v17, v19))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_1001F225C();
  uint64_t v2 = v25;
  swift_release();
  swift_release();
  swift_release();
  if (!__OFADD__(v24, v2)) {
    return;
  }
  __break(1u);
LABEL_13:
  uint64_t v47 = v3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v26 = v46;
  Swift::UInt32 v27 = *(_DWORD *)(v2 + 20);
  uint64_t v28 = sub_10028D7D8();
  sub_100210AD0(v28, v29, v2 + 8, v27);
  if (v31)
  {
    v32._uint64_t countAndFlagsBits = sub_10028D7B8();
    Swift::Int v30 = ByteBuffer._setStringSlowpath(_:at:)(v32, v33);
  }
  Swift::Int v34 = v30;
  int v35 = *(_DWORD *)(v2 + 20);
  BOOL v13 = __CFADD__(v35, v30);
  int v36 = v35 + v30;
  if (v13) {
    goto LABEL_27;
  }
  *(_DWORD *)(v2 + 20) = v36;
  uint64_t v37 = swift_bridgeObjectRetain();
  Swift::Int v38 = sub_10025E538(v37);
  swift_bridgeObjectRelease();
  Swift::Int v39 = v34 + v38;
  if (__OFADD__(v34, v38))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  Swift::Int v40 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(32, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v42)
  {
    v43._uint64_t countAndFlagsBits = 32;
    v43._char object = (void *)0xE100000000000000;
    Swift::Int v41 = ByteBuffer._setStringSlowpath(_:at:)(v43, v40);
  }
  int v44 = *(_DWORD *)(v2 + 20);
  BOOL v13 = __CFADD__(v44, v41);
  int v45 = v44 + v41;
  if (v13) {
    goto LABEL_29;
  }
  *(_DWORD *)(v2 + 20) = v45;
  if (__OFADD__(v39, v41))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (__OFADD__(v39 + v41, sub_1001EB2F0(v26, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 0, v2)))
  {
LABEL_31:
    __break(1u);
  }
}

unint64_t sub_10028D440()
{
  unint64_t result = qword_100711298;
  if (!qword_100711298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711298);
  }
  return result;
}

uint64_t sub_10028D48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for MetadataResponse(uint64_t *a1)
{
  return sub_10028D508(*a1, a1[1], a1[2]);
}

uint64_t sub_10028D508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t initializeWithCopy for MetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 32);
  sub_10028D48C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for MetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 32);
  sub_10028D48C(*(void *)a2, v4, v5);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v7;
  sub_10028D508(v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for MetadataResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MetadataResponse(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 32) = v3;
  sub_10028D508(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xF && *(unsigned char *)(a1 + 36))
    {
      unsigned int v2 = *(_DWORD *)a1 + 14;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 16) >> 60) >> 3) & 0xFFFFFFF1 | (2 * ((*(void *)(a1 + 16) >> 60) & 7))) ^ 0xF;
      if (v2 >= 0xE) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for MetadataResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 15;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 1) & 7) - 8 * a2) << 60;
      *(void *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
    }
  }
  return result;
}

uint64_t sub_10028D778(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t sub_10028D784(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10028D794(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFFFLL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for MetadataResponse()
{
  return &type metadata for MetadataResponse;
}

uint64_t sub_10028D7B8()
{
  return 0x415441444154454DLL;
}

uint64_t sub_10028D7D8()
{
  return 0x415441444154454DLL;
}

void MetadataValue.hash(into:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_10028DBCC();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
}

uint64_t static MetadataValue.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if (a4)
    {
      unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v10 = a6 & 0xFFFFFFFFFFFFFFLL;
      swift_retain();
      uint64_t v11 = swift_retain();
      LOBYTE(a5) = static ByteBuffer.== infix(_:_:)(v11, a2, v9, a4, a5, v10);
      swift_release();
      swift_release();
      if (a5) {
        return 1;
      }
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

Swift::Int MetadataValue.hashValue.getter(uint64_t a1)
{
  if (a1)
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_10028DBCC();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
  return sub_1005E3470();
}

Swift::Int sub_10028D988()
{
  return MetadataValue.hashValue.getter(*v0);
}

void sub_10028D9A4(uint64_t a1)
{
  MetadataValue.hash(into:)(a1, *v1);
}

Swift::Int sub_10028D9C0()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  if (v1)
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
  return sub_1005E3470();
}

uint64_t sub_10028DA74(uint64_t a1, uint64_t a2)
{
  return static MetadataValue.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)(*(unsigned __int16 *)(a2 + 20) | (*(unsigned __int8 *)(a2 + 22) << 16)) << 32));
}

unint64_t sub_10028DAB4()
{
  unint64_t result = qword_1007112A0;
  if (!qword_1007112A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112A0);
  }
  return result;
}

void sub_10028DB00(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  *(void *)((char *)a1 + 15) = 0;
}

uint64_t getEnumTagSinglePayload for MetadataValue(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 23))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 23) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 23) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetadataValue()
{
  return &type metadata for MetadataValue;
}

uint64_t sub_10028DBCC()
{
  return *(void *)(v2 + 24) + ((v1 >> 24) & 0xFFFF00 | BYTE6(v1)) + v0;
}

uint64_t sub_10028DBEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005E3230();
  uint64_t v4 = (void *)v3;
  Swift::Int v5 = *(unsigned int *)(v0 + 20);
  sub_100210AD0(v2, v3, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v7)
  {
    v8._uint64_t countAndFlagsBits = v2;
    v8._char object = v4;
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v5);
  }
  Swift::Int v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  int v11 = *(_DWORD *)(v1 + 20);
  BOOL v12 = __CFADD__(v11, v9);
  int v13 = v11 + v9;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 20) = v13;
    return v9;
  }
  return result;
}

NIOIMAPCore2::ModificationSequenceValue __swiftcall ModificationSequenceValue.init(_:)(NIOIMAPCore2::ModificationSequenceValue result)
{
  if ((result.value & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t ModificationSequenceValue.init<A>(exactly:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5 = *(void (**)(void))(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = __chkstk_darwin(AssociatedTypeWitness - 8);
  Swift::Int v60 = &v54[-v7];
  uint64_t v62 = *(void *)(a2 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v59 = &v54[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = &v54[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v63 = &v54[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  char v20 = &v54[-v19];
  __chkstk_darwin(v18);
  int v22 = &v54[-v21];
  char v23 = sub_1001FE4A0();
  uint64_t v57 = v10;
  uint64_t v58 = v5;
  if (v23)
  {
    if (sub_1001FE620() < 64)
    {
      uint64_t v24 = v62;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  char v25 = sub_1001FE4A0();
  uint64_t v26 = sub_1001FE620();
  if ((v25 & 1) == 0)
  {
    uint64_t v24 = v62;
    if (v26 >= 64) {
      goto LABEL_10;
    }
LABEL_9:
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v24 + 16))(v22, a1, a2);
    uint64_t v30 = sub_10028E684();
    uint64_t v31 = sub_10028E608();
    ((void (*)(uint64_t))v5)(v31);
    if ((v30 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if (v26 > 64)
  {
LABEL_6:
    unint64_t v64 = 0;
    unint64_t v27 = sub_1001FDDDC();
    sub_10028E660(v27, (uint64_t)&type metadata for Int, v27);
    char v28 = sub_10028E63C();
    uint64_t v24 = v62;
    uint64_t v29 = sub_10028E608();
    ((void (*)(uint64_t))v5)(v29);
    if ((v28 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  sub_10028E69C();
  sub_1005E3340();
  sub_1005E3250();
  int v55 = sub_10028E63C();
  uint64_t v46 = v62;
  Swift::Int v5 = *(void (**)(void))(v62 + 8);
  sub_10028E5C8();
  v5();
  uint64_t v47 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v56 = a1;
  v47(v20, a1, a2);
  if (v55)
  {
    sub_10028E5C8();
    v5();
    a1 = v56;
  }
  else
  {
    uint64_t v50 = sub_10028E684();
    sub_10028E5C8();
    v5();
    a1 = v56;
    uint64_t v24 = v62;
    if ((v50 & 0x8000000000000000) == 0)
    {
LABEL_10:
      Swift::String v32 = *(void (**)(void))(v24 + 16);
      sub_10028E6B8();
      v32();
      char v33 = sub_1001FE4A0();
      sub_10028E6B8();
      v32();
      if (v33)
      {
        uint64_t v56 = a1;
        sub_10028E69C();
        sub_1005E3340();
        sub_1005E3250();
        sub_10028E624();
        char v34 = sub_1005E1AA0();
        int v35 = *(void (**)(void))(v24 + 8);
        sub_10028E5C8();
        v35();
        sub_10028E5C8();
        v35();
        if (v34)
        {
          sub_10028E5C8();
          v35();
          a1 = v56;
LABEL_34:
          ((void (*)(uint64_t, uint64_t))v35)(a1, a2);
          return 0;
        }
        a1 = v56;
      }
      else
      {
        int v35 = *(void (**)(void))(v24 + 8);
        ((void (*)(unsigned char *, uint64_t))v35)(v15, a2);
      }
      uint64_t v36 = sub_1001FE620();
      uint64_t v37 = v59;
      sub_10028E6B8();
      v32();
      if (v36 <= 63)
      {
        uint64_t v38 = sub_10028E5E8();
        ((void (*)(uint64_t))v35)(v38);
        goto LABEL_18;
      }
      unint64_t v64 = -1;
      char v41 = sub_1001FE4A0();
      uint64_t v42 = sub_1001FE620();
      if (v41)
      {
        if (v42 <= 64)
        {
          sub_10028E69C();
          sub_1005E3340();
          sub_1005E3250();
          sub_10028E624();
          LODWORD(AssociatedTypeWitness) = sub_1005E1A90();
          uint64_t v43 = v62;
          sub_10028E5D8();
          v35();
          unint64_t v44 = v64;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 32))(v57, v37, a2);
          if (AssociatedTypeWitness)
          {
            unint64_t v45 = sub_10028E684();
            sub_10028E5D8();
            v35();
            if (v44 < v45) {
              goto LABEL_33;
            }
          }
          else
          {
            sub_10028E5D8();
            v35();
          }
          goto LABEL_18;
        }
      }
      else if (v42 < 65)
      {
        unint64_t v51 = sub_10028E684();
        uint64_t v52 = sub_10028E5E8();
        ((void (*)(uint64_t))v35)(v52);
        if (v64 < v51)
        {
LABEL_33:
          ((void (*)(unsigned char *, uint64_t))v35)(v63, a2);
          goto LABEL_34;
        }
LABEL_18:
        Swift::Int v39 = v63;
        uint64_t v40 = sub_10028E684();
        ((void (*)(unsigned char *, uint64_t))v35)(v39, a2);
        ((void (*)(uint64_t, uint64_t))v35)(a1, a2);
        if ((v40 & 0x8000000000000000) == 0) {
          return v40;
        }
        return 0;
      }
      unint64_t v48 = sub_100209370();
      sub_10028E660(v48, (uint64_t)&type metadata for UInt64, v48);
      char v49 = sub_1005E1AA0();
      sub_10028E5D8();
      v35();
      sub_10028E5D8();
      v35();
      if (v49) {
        goto LABEL_33;
      }
      goto LABEL_18;
    }
  }
LABEL_13:
  ((void (*)(uint64_t, uint64_t))v5)(a1, a2);
  return 0;
}

uint64_t ModificationSequenceValue.debugDescription.getter()
{
  return sub_1005E3230();
}

uint64_t sub_10028E384()
{
  return ModificationSequenceValue.debugDescription.getter();
}

uint64_t BinaryInteger.init(_:)()
{
  return sub_1005E2A60();
}

{
  sub_1002091D8();
  return sub_1005E2A60();
}

BOOL static ModificationSequenceValue.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL static ModificationSequenceValue.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

Swift::Int64 __swiftcall ModificationSequenceValue.distance(to:)(Swift::Int64 to)
{
  if ((v1 | to) < 0) {
    __break(1u);
  }
  else {
    to -= v1;
  }
  return to;
}

NIOIMAPCore2::ModificationSequenceValue __swiftcall ModificationSequenceValue.advanced(by:)(NIOIMAPCore2::ModificationSequenceValue by)
{
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  BOOL v2 = __OFADD__(v1, by.value);
  by.value += v1;
  if (v2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((by.value & 0x8000000000000000) != 0) {
LABEL_7:
  }
    __break(1u);
  return by;
}

unint64_t sub_10028E43C()
{
  unint64_t result = qword_1007112A8;
  if (!qword_1007112A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112A8);
  }
  return result;
}

void *sub_10028E488()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_10028E498()
{
  unint64_t result = qword_1007112B0;
  if (!qword_1007112B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112B0);
  }
  return result;
}

void *sub_10028E4E4()
{
  return &protocol witness table for Int64;
}

void *sub_10028E4F0()
{
  return &protocol witness table for Int64;
}

Swift::Int64 sub_10028E4FC@<X0>(NIOIMAPCore2::ModificationSequenceValue *a1@<X0>, Swift::Int64 *a2@<X8>)
{
  Swift::Int64 result = ModificationSequenceValue.distance(to:)((NIOIMAPCore2::ModificationSequenceValue)a1->value);
  *a2 = result;
  return result;
}

NIOIMAPCore2::ModificationSequenceValue sub_10028E52C@<X0>(Swift::Int64 *a1@<X0>, NIOIMAPCore2::ModificationSequenceValue *a2@<X8>)
{
  result.Swift::UInt32 value = ModificationSequenceValue.advanced(by:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

void *sub_10028E55C(void *a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  return sub_1002C9B10(a1, a2, a3 & 1, *a4, *a5, *a6);
}

BOOL sub_10028E588(unint64_t *a1, unint64_t *a2)
{
  return static ModificationSequenceValue.< infix(_:_:)(*a1, *a2);
}

BOOL sub_10028E594(unint64_t *a1, unint64_t *a2)
{
  return static ModificationSequenceValue.<= infix(_:_:)(*a1, *a2);
}

BOOL sub_10028E5A0(unint64_t *a1, unint64_t *a2)
{
  return sub_1002C977C(*a1, *a2);
}

BOOL sub_10028E5AC(unint64_t *a1, unint64_t *a2)
{
  return sub_1002C9954(*a1, *a2);
}

ValueMetadata *type metadata accessor for ModificationSequenceValue()
{
  return &type metadata for ModificationSequenceValue;
}

uint64_t sub_10028E5E8()
{
  return v0;
}

uint64_t sub_10028E608()
{
  return v0;
}

uint64_t sub_10028E624()
{
  return v0;
}

uint64_t sub_10028E63C()
{
  return sub_1005E1AA0();
}

uint64_t sub_10028E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 88, a2, a3, v3, v4);
}

uint64_t sub_10028E684()
{
  return sub_1005E2A20();
}

uint64_t sub_10028E69C()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_10028E6C8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1001EF820();
  }
  else
  {
    Swift::Int v2 = *(unsigned int *)(v1 + 20);
    sub_100210AD0(4999502, 0xE300000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
    if (v4)
    {
      v5._uint64_t countAndFlagsBits = 4999502;
      v5._char object = (void *)0xE300000000000000;
      int v3 = ByteBuffer._setStringSlowpath(_:at:)(v5, v2);
    }
    int v6 = *(_DWORD *)(v1 + 20);
    BOOL v7 = __CFADD__(v6, v3);
    int v8 = v6 + v3;
    if (v7) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v1 + 20) = v8;
    }
  }
}

uint64_t sub_10028E778(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = result;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    uint64_t v8 = a4 + 32;
    uint64_t v9 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    NIOIMAPCore2::ModificationSequenceValue result = swift_retain();
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while (v9 != v11)
    {
      char v12 = *(unsigned char *)(a3 + v10 + 54);
      __int16 v13 = *(_WORD *)(a3 + v10 + 52);
      int v14 = *(_DWORD *)(a3 + v10 + 48);
      uint64_t v15 = *(void *)(v8 + 8 * v11);
      v17[0] = *(void *)(a3 + v10 + 32);
      v17[1] = *(void *)(a3 + v10 + 40);
      int v18 = v14;
      __int16 v19 = v13;
      char v20 = v12;
      uint64_t v21 = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10028F6DC(&v22, (uint64_t)v17, a5);
      if (v5)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      swift_bridgeObjectRelease();
      NIOIMAPCore2::ModificationSequenceValue result = swift_release();
      ++v11;
      v10 += 24;
      if (v6 == v11)
      {
        swift_release();
        swift_release();
        swift_release();
        return v22;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_10028E8DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 8;
  sub_100210AD0(40, 0xE100000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v6) {
    Swift::Int v5 = sub_10026B440(40);
  }
  Swift::Int v7 = v5;
  int v8 = *(_DWORD *)(v1 + 20);
  BOOL v9 = __CFADD__(v8, v5);
  int v10 = v8 + v5;
  if (v9)
  {
    __break(1u);
    goto LABEL_29;
  }
  *(_DWORD *)(v1 + 20) = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  if (v12 < v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v13 = *(_DWORD *)(a1 + 16);
  int v14 = *(unsigned __int16 *)(a1 + 20);
  int v15 = *(unsigned __int8 *)(a1 + 22);
  if (v13 - (v15 | (v14 << 8)) < v12)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v44 = *(void *)a1;
  int v45 = v11;
  int v46 = v12;
  int v47 = v13;
  __int16 v48 = v14;
  char v49 = v15;
  uint64_t v50 = v11;
  uint64_t v51 = v12;
  swift_retain();
  Swift::Int v16 = sub_10025E0BC(&v44);
  swift_release();
  Swift::Int v17 = v7 + v16;
  if (__OFADD__(v7, v16))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  sub_100210AD0(32, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v19) {
    Swift::Int v18 = sub_10026B440(32);
  }
  int v20 = *(_DWORD *)(v2 + 20);
  Swift::Int v21 = (v20 + v18);
  if (__CFADD__(v20, v18)) {
    goto LABEL_32;
  }
  *(_DWORD *)(v2 + 20) = v21;
  Swift::Int v22 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sub_10028F224(a1 + 24, (uint64_t)v43);
  sub_10028F224((uint64_t)v43, (uint64_t)v52);
  if (!v52[1])
  {
LABEL_18:
    sub_100210AD0(4999502, 0xE300000000000000, v4, v21);
    if (v33)
    {
      v34._uint64_t countAndFlagsBits = 4999502;
      v34._char object = (void *)0xE300000000000000;
      Swift::Int v32 = ByteBuffer._setStringSlowpath(_:at:)(v34, v21);
    }
    int v35 = *(_DWORD *)(v2 + 20);
    BOOL v9 = __CFADD__(v35, v32);
    int v36 = v35 + v32;
    if (v9) {
      goto LABEL_38;
    }
    *(_DWORD *)(v2 + 20) = v36;
    Swift::Int v31 = v22 + v32;
    if (__OFADD__(v22, v32))
    {
LABEL_39:
      __break(1u);
      return;
    }
    goto LABEL_22;
  }
  v53._uint64_t countAndFlagsBits = 34;
  v53._char object = (void *)0xE100000000000000;
  sub_1005E1E30(v53);
  sub_1005E1A20();
  v54._uint64_t countAndFlagsBits = 34;
  v54._char object = (void *)0xE100000000000000;
  sub_1005E1E30(v54);
  swift_bridgeObjectRetain();
  sub_100210AD0(0, 0xE000000000000000, v4, v21);
  Swift::Int v24 = v23;
  char v26 = v25;
  swift_bridgeObjectRelease();
  if (v26)
  {
    v27._uint64_t countAndFlagsBits = 0;
    v27._char object = (void *)0xE000000000000000;
    Swift::Int v24 = ByteBuffer._setStringSlowpath(_:at:)(v27, v21);
  }
  swift_bridgeObjectRelease();
  int v28 = *(_DWORD *)(v2 + 20);
  BOOL v9 = __CFADD__(v28, v24);
  int v29 = v28 + v24;
  if (v9) {
    goto LABEL_37;
  }
  *(_DWORD *)(v2 + 20) = v29;
  BOOL v30 = __OFADD__(v22, v24);
  Swift::Int v31 = v22 + v24;
  if (v30)
  {
    __break(1u);
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v37 = sub_10028E778(0, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v2);
  Swift::Int v38 = v31 + v37;
  if (__OFADD__(v31, v37))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_100210AD0(41, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v40) {
    Swift::Int v39 = sub_10026B440(41);
  }
  int v41 = *(_DWORD *)(v2 + 20);
  BOOL v9 = __CFADD__(v41, v39);
  int v42 = v41 + v39;
  if (v9) {
    goto LABEL_35;
  }
  *(_DWORD *)(v2 + 20) = v42;
  if (__OFADD__(v38, v39))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
}

uint64_t NamespaceDescription.responseExtensions.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t NamespaceDescription.responseExtensions.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  v3[5] = a1;
  v3[6] = a2;
  v3[7] = a3;
  return result;
}

uint64_t NamespaceDescription.init(string:char:responseExtensions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 16) = a3;
  *(_WORD *)(a9 + 20) = WORD2(a3);
  *(unsigned char *)(a9 + 22) = BYTE6(a3);
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  return result;
}

uint64_t NamespaceDescription.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  sub_1005E3400();
  if (v2[4])
  {
    sub_1005E3420(1u);
    sub_1005E1A10();
  }
  else
  {
    sub_1005E3420(0);
  }
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100225DA0(a1, v4, v5, v6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t static NamespaceDescription.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48)))return 0; {
  uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)(a1 + 24) == *(void *)(a2 + 24) && v4 == v5;
  if (v6 || (v7 = sub_1005E3290(), uint64_t result = 0, (v7 & 1) != 0))
  {
LABEL_11:
    sub_100221CD0();
    if (v9)
    {
      sub_100222BC0();
      if (v10) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int NamespaceDescription.hashValue.getter()
{
  sub_1005E33F0();
  NamespaceDescription.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_10028EEA8()
{
  sub_1005E33F0();
  NamespaceDescription.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

unint64_t sub_10028EEEC()
{
  unint64_t result = qword_1007112B8;
  if (!qword_1007112B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112B8);
  }
  return result;
}

uint64_t destroy for NamespaceDescription()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NamespaceDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NamespaceDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NamespaceDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NamespaceDescription(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NamespaceDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NamespaceDescription()
{
  return &type metadata for NamespaceDescription;
}

uint64_t sub_10028F224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007112C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static NamespaceResponse.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((sub_100220C64(a1, a4) & 1) == 0 || (sub_100220C64(a2, a5) & 1) == 0) {
    return 0;
  }
  return sub_100220C64(a3, a6);
}

void sub_10028F308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v3 + 8;
  Swift::Int v9 = *(unsigned int *)(v3 + 20);
  uint64_t v10 = sub_10028F69C();
  sub_100210AD0(v10, v11, v8, v9);
  if (v13)
  {
    v14._uint64_t countAndFlagsBits = sub_10028F69C();
    Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v9);
  }
  Swift::Int v15 = v12;
  int v16 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v16, v12);
  int v18 = v16 + v12;
  if (v17)
  {
    __break(1u);
    goto LABEL_17;
  }
  *(_DWORD *)(v4 + 20) = v18;
  sub_10028E6C8(a1);
  Swift::Int v20 = v15 + v19;
  if (__OFADD__(v15, v19))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_10028F6B8();
  if (v22) {
    Swift::Int v21 = sub_1002407BC();
  }
  int v23 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v23, v21);
  int v24 = v23 + v21;
  if (v17) {
    goto LABEL_18;
  }
  *(_DWORD *)(v4 + 20) = v24;
  BOOL v25 = __OFADD__(v20, v21);
  Swift::Int v26 = v20 + v21;
  if (v25)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sub_10028E6C8(a2);
  Swift::Int v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10028F6B8();
  if (v30) {
    Swift::Int v29 = sub_1002407BC();
  }
  int v31 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v31, v29);
  int v32 = v31 + v29;
  if (v17) {
    goto LABEL_21;
  }
  *(_DWORD *)(v4 + 20) = v32;
  Swift::Int v33 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_10028E6C8(a3);
  if (__OFADD__(v33, v34)) {
LABEL_23:
  }
    __break(1u);
}

uint64_t NamespaceResponse.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  sub_10022A2BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC(a1, a4);
  return swift_bridgeObjectRelease();
}

Swift::Int NamespaceResponse.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v7, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v7, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v7, a3);
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

Swift::Int sub_10028F570()
{
  return NamespaceResponse.hashValue.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_10028F57C(uint64_t a1)
{
  return NamespaceResponse.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_10028F588()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10022A2BC((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_10028F620(uint64_t *a1, uint64_t *a2)
{
  return static NamespaceResponse.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

unint64_t sub_10028F640()
{
  unint64_t result = qword_1007112C8;
  if (!qword_1007112C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NamespaceResponse()
{
  return &type metadata for NamespaceResponse;
}

uint64_t sub_10028F69C()
{
  return 0x43415053454D414ELL;
}

void sub_10028F6B8()
{
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 20);
  sub_100210AD0(32, 0xE100000000000000, v1, v3);
}

void sub_10028F6DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  int v43 = *(_DWORD *)(a2 + 16);
  int v7 = *(unsigned __int16 *)(a2 + 20);
  int v8 = *(unsigned __int8 *)(a2 + 22);
  uint64_t v33 = *(void *)(a2 + 24);
  uint64_t v9 = a3 + 8;
  Swift::Int v10 = *(unsigned int *)(a3 + 20);
  sub_100210AD0(32, 0xE100000000000000, a3 + 8, v10);
  uint64_t v34 = v9;
  if (v12)
  {
    v13._uint64_t countAndFlagsBits = 32;
    v13._char object = (void *)0xE100000000000000;
    Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v13, v10);
  }
  Swift::Int v14 = v11;
  int v15 = *(_DWORD *)(a3 + 20);
  BOOL v16 = __CFADD__(v15, v11);
  int v17 = v15 + v11;
  int v18 = v43;
  if (v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)(a3 + 20) = v17;
  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v18 - (v8 | (v7 << 8)) < v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v35 = v4;
  int v36 = v6;
  int v37 = v5;
  int v38 = v18;
  __int16 v39 = v7;
  char v40 = v8;
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  swift_retain();
  Swift::Int v19 = sub_10025E0BC(&v35);
  swift_release();
  Swift::Int v20 = v14 + v19;
  if (__OFADD__(v14, v19))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v21 = *(unsigned int *)(a3 + 20);
  sub_100210AD0(32, 0xE100000000000000, v34, *(_DWORD *)(a3 + 20));
  if (v23)
  {
    v24._uint64_t countAndFlagsBits = 32;
    v24._char object = (void *)0xE100000000000000;
    Swift::Int v22 = ByteBuffer._setStringSlowpath(_:at:)(v24, v21);
  }
  int v25 = *(_DWORD *)(a3 + 20);
  BOOL v16 = __CFADD__(v25, v22);
  int v26 = v25 + v22;
  if (v16) {
    goto LABEL_18;
  }
  *(_DWORD *)(a3 + 20) = v26;
  BOOL v27 = __OFADD__(v20, v22);
  Swift::Int v28 = v20 + v22;
  if (v27)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v29 = sub_1001E9624(v33, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, a3);
  Swift::Int v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  BOOL v27 = __OFADD__(*a1, v30);
  Swift::Int v31 = *a1 + v30;
  if (!v27)
  {
    *a1 = v31;
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t static NetworkMessagePath.__derived_struct_equals(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a1[1];
  v12[0] = *a1;
  v12[1] = v4;
  v13[0] = a1[2];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v5 = a2[1];
  v10[0] = *a2;
  v10[1] = v5;
  v11[0] = a2[2];
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a2 + 41);
  if (static IMAPServer.__derived_struct_equals(_:_:)((uint64_t)v12, (uint64_t)v10))
  {
    memcpy(__dst, a1 + 4, 0x42uLL);
    memcpy(v8, a2 + 4, 0x42uLL);
    char v6 = static MessagePath.__derived_struct_equals(_:_:)((uint64_t)__dst, (uint64_t)v8);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t NetworkMessagePath.messagePath.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10028F960(v1 + 64, a1);
}

uint64_t sub_10028F960(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NetworkMessagePath.messagePath.setter(uint64_t a1)
{
  return sub_10028F9C4(a1, v1 + 64);
}

uint64_t sub_10028F9C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 NetworkMessagePath.init(server:messagePath:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2->n128_u64[0];
  uint64_t v4 = a2->n128_i64[1];
  int v5 = a2[1].n128_i32[0];
  int v6 = a2[1].n128_i32[2];
  char v7 = a2[4].n128_i8[0];
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 56) & 1;
  char v15 = a2[1].n128_u8[4] & 1;
  char v12 = a2[4].n128_u8[1] & 1;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v8;
  *(void *)(a3 + 48) = v10;
  *(unsigned char *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v3;
  *(void *)(a3 + 72) = v4;
  *(_DWORD *)(a3 + 80) = v5;
  *(unsigned char *)(a3 + 84) = v15;
  *(_DWORD *)(a3 + 88) = v6;
  __n128 result = a2[2];
  __n128 v14 = a2[3];
  *(__n128 *)(a3 + 96) = result;
  *(__n128 *)(a3 + 112) = v14;
  *(unsigned char *)(a3 + 128) = v7;
  *(unsigned char *)(a3 + 129) = v12;
  return result;
}

uint64_t NetworkMessagePath.hash(into:)(uint64_t a1)
{
  long long v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  v7[0] = v1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)v1 + 41);
  sub_1002747F4((uint64_t *)v6);
  IMAPServer.hash(into:)(a1);
  sub_100274834((uint64_t *)v6);
  memcpy(__dst, v1 + 4, 0x42uLL);
  sub_1002748C4((uint64_t)__dst);
  MessagePath.hash(into:)();
  return sub_1002748FC((uint64_t)__dst);
}

Swift::Int NetworkMessagePath.hashValue.getter()
{
  sub_1005E33F0();
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  v6[0] = v0[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 41);
  sub_1002747F4((uint64_t *)v5);
  IMAPServer.hash(into:)((uint64_t)&v3);
  sub_100274834((uint64_t *)v5);
  memcpy(__dst, v0 + 4, 0x42uLL);
  sub_1002748C4((uint64_t)__dst);
  MessagePath.hash(into:)();
  sub_1002748FC((uint64_t)__dst);
  return sub_1005E3470();
}

Swift::Int sub_10028FBD8()
{
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  v6[0] = v0[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 41);
  memcpy(__dst, v0 + 4, 0x42uLL);
  sub_1005E33F0();
  sub_1002747F4((uint64_t *)v5);
  IMAPServer.hash(into:)((uint64_t)&v3);
  sub_100274834((uint64_t *)v5);
  sub_1002748C4((uint64_t)__dst);
  MessagePath.hash(into:)();
  sub_1002748FC((uint64_t)__dst);
  return sub_1005E3470();
}

unint64_t sub_10028FC78()
{
  unint64_t result = qword_1007112D0;
  if (!qword_1007112D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112D0);
  }
  return result;
}

uint64_t destroy for NetworkMessagePath(uint64_t a1)
{
  if (*(void *)(a1 + 8) != 1)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 24) != 1) {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NetworkMessagePath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    int v6 = (_OWORD *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *v6;
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)v6;
      *(void *)(a1 + 24) = v7;
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NetworkMessagePath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v4 == 1)
    {
      sub_100274F10(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_15;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(void *)(a1 + 24) == 1)
    {
      if (v8 != 1) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v8 != 1)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      sub_100274EBC(a1 + 16);
    }
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }
  if (v4 != 1)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      goto LABEL_15;
    }
LABEL_10:
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_15:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v10 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v10;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v11 = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v11;
  return a1;
}

void *initializeWithTake for NetworkMessagePath(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x82uLL);
}

uint64_t assignWithTake for NetworkMessagePath(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    sub_100274F10(a1);
LABEL_4:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_10;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v6 = (void *)(a2 + 16);
  if (*(void *)(a1 + 24) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (v7 != 1)
    {
      *(void *)(a1 + 16) = *v6;
      *(void *)(a1 + 24) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_100274EBC(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_10:
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkMessagePath(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 130))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkMessagePath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 128) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 130) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 130) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkMessagePath()
{
  return &type metadata for NetworkMessagePath;
}

unint64_t sub_1002901B4()
{
  unint64_t result = qword_1007112D8;
  if (!qword_1007112D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkPath()
{
  return &type metadata for NetworkPath;
}

#error "100290290: call analysis failed (funcsize=151)"

void MailboxFilter.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      Swift::UInt v5 = 4;
      goto LABEL_5;
    case 2:
      Swift::UInt v5 = 7;
      goto LABEL_5;
    case 3:
      switch(a2)
      {
        case 1:
          Swift::UInt v6 = 1;
          break;
        case 2:
          Swift::UInt v6 = 2;
          break;
        case 3:
          Swift::UInt v6 = 5;
          break;
        case 4:
          Swift::UInt v6 = 6;
          break;
        default:
          Swift::UInt v6 = 0;
          break;
      }
      sub_1005E3410(v6);
      return;
    default:
      Swift::UInt v5 = 3;
LABEL_5:
      sub_1005E3410(v5);
      sub_100226C50(a1, a2);
      return;
  }
}

uint64_t static MailboxFilter.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 == 1) {
        return _s12NIOIMAPCore29MailboxesV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a3);
      }
      return 0;
    case 2:
      if (a4 == 2) {
        return _s12NIOIMAPCore29MailboxesV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a3);
      }
      return 0;
    case 3:
      switch(a1)
      {
        case 1:
          if (a4 != 3 || a3 != 1) {
            return 0;
          }
          break;
        case 2:
          if (a4 != 3 || a3 != 2) {
            return 0;
          }
          break;
        case 3:
          if (a4 != 3 || a3 != 3) {
            return 0;
          }
          break;
        case 4:
          if (a4 != 3 || a3 != 4) {
            return 0;
          }
          break;
        default:
          if (a4 != 3 || a3 != 0) {
            return 0;
          }
          break;
      }
      return 1;
    default:
      if (a4) {
        return 0;
      }
      else {
        return _s12NIOIMAPCore29MailboxesV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a3);
      }
  }
}

Swift::Int MailboxFilter.hashValue.getter(uint64_t a1, char a2)
{
  sub_1005E33F0();
  switch(a2)
  {
    case 1:
      Swift::UInt v4 = 4;
      goto LABEL_5;
    case 2:
      Swift::UInt v4 = 7;
      goto LABEL_5;
    case 3:
      switch(a1)
      {
        case 1:
          Swift::UInt v5 = 1;
          break;
        case 2:
          Swift::UInt v5 = 2;
          break;
        case 3:
          Swift::UInt v5 = 5;
          break;
        case 4:
          Swift::UInt v5 = 6;
          break;
        default:
          Swift::UInt v5 = 0;
          break;
      }
      sub_1005E3410(v5);
      return sub_1005E3470();
    default:
      Swift::UInt v4 = 3;
LABEL_5:
      sub_1005E3410(v4);
      sub_100226C50((uint64_t)v7, a1);
      return sub_1005E3470();
  }
}

Swift::Int sub_1002907BC()
{
  return MailboxFilter.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_1002907C8(uint64_t a1)
{
  MailboxFilter.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1002907D4()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int8 *)(v0 + 8);
  sub_1005E33F0();
  switch(v2)
  {
    case 1:
      Swift::UInt v3 = 4;
      goto LABEL_5;
    case 2:
      Swift::UInt v3 = 7;
      goto LABEL_5;
    case 3:
      switch(v1)
      {
        case 1:
          Swift::UInt v4 = 1;
          break;
        case 2:
          Swift::UInt v4 = 2;
          break;
        case 3:
          Swift::UInt v4 = 5;
          break;
        case 4:
          Swift::UInt v4 = 6;
          break;
        default:
          Swift::UInt v4 = 0;
          break;
      }
      sub_1005E3410(v4);
      return sub_1005E3470();
    default:
      Swift::UInt v3 = 3;
LABEL_5:
      sub_1005E3410(v3);
      sub_100226C50((uint64_t)v6, v1);
      return sub_1005E3470();
  }
}

uint64_t sub_1002908EC(uint64_t a1, uint64_t a2)
{
  return static MailboxFilter.__derived_enum_equals(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

unint64_t sub_100290908()
{
  unint64_t result = qword_1007112E0;
  if (!qword_1007112E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112E0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MailboxFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1001F38D4(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MailboxFilter(uint64_t a1)
{
  return sub_1001F38E8(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for MailboxFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1001F38D4(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1001F38E8(v5, v6);
  return a1;
}

uint64_t assignWithTake for MailboxFilter(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_1001F38E8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MailboxFilter(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MailboxFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100290AC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_100290ADC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MailboxFilter()
{
  return &type metadata for MailboxFilter;
}

void sub_100290B08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,Swift::String a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_1001ED654(a1, 0, 0, 32, 0, 0, 0, 1, v41, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41);
}

void sub_100290B38(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v3, v2);
}

uint64_t sub_100290B54()
{
  return 0x2D65657274627573;
}

uint64_t sub_100290B74()
{
  return 0x65786F626C69616DLL;
}

uint64_t sub_100290B90()
{
  return 0x6269726373627573;
}

uint64_t sub_100290BAC()
{
  return 0x64657463656C6573;
}

uint64_t sub_100290BC4()
{
  return 0x7365786F626E69;
}

void sub_100290BDC(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_100290C04()
{
  return 0x6C616E6F73726570;
}

uint64_t sub_100290C28()
{
  return 0x2065657274627573;
}

NIOIMAPCore2::Mailboxes_optional __swiftcall Mailboxes.init(_:)(NIOIMAPCore2::Mailboxes_optional result)
{
  if (!*((void *)result.value.content._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

void Mailboxes.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  sub_1005E3410(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(a2 + 40);
    do
    {
      unsigned int v5 = *v4;
      v4 += 4;
      sub_1005E3410(v5 | ((unint64_t)v5 << 32));
      --v3;
    }
    while (v3);
  }
}

Swift::Int Mailboxes.hashValue.getter(uint64_t a1)
{
  sub_1005E33F0();
  sub_100226C50((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_100290D04()
{
  return Mailboxes.hashValue.getter(*v0);
}

void sub_100290D0C(uint64_t a1)
{
  Mailboxes.hash(into:)(a1, *v1);
}

Swift::Int sub_100290D14()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  Mailboxes.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

uint64_t sub_100290D58(void *a1, void *a2)
{
  return static Mailboxes.__derived_struct_equals(_:_:)(*a1, *a2);
}

unint64_t sub_100290D68()
{
  unint64_t result = qword_1007112E8;
  if (!qword_1007112E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Mailboxes()
{
  return &type metadata for Mailboxes;
}

void sub_100290DC4(void *a1)
{
  uint64_t v2 = v1;
  sub_1002676E0((uint64_t)a1, (uint64_t)v68);
  sub_1002676E0((uint64_t)v68, (uint64_t)&v75);
  uint64_t v4 = v75;
  if ((v79 & 1) == 0)
  {
LABEL_15:
    uint64_t v29 = v76;
    Swift::Int v30 = *(unsigned int *)(v1 + 20);
    swift_bridgeObjectRetain();
    sub_100210AD0(v4, (unint64_t)v29, v1 + 8, v30);
    Swift::Int v28 = v31;
    char v33 = v32;
    sub_100291764((uint64_t)v68);
    if (v33)
    {
      v34._uint64_t countAndFlagsBits = v4;
      v34._char object = v29;
      Swift::Int v28 = ByteBuffer._setStringSlowpath(_:at:)(v34, v30);
    }
    int v35 = *(_DWORD *)(v1 + 20);
    BOOL v26 = __CFADD__(v35, v28);
    unsigned int v27 = v35 + v28;
    if (!v26)
    {
      *(_DWORD *)(v1 + 20) = v27;
      goto LABEL_19;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unsigned int v5 = v76;
  uint64_t v67 = v77;
  unsigned __int8 v6 = v78;
  Swift::Int v7 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(v4, (unint64_t)v5, v1 + 8, v7);
  Swift::Int v9 = v8;
  char v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    v12._uint64_t countAndFlagsBits = v4;
    v12._char object = v5;
    Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v12, v7);
  }
  int v13 = *(_DWORD *)(v1 + 20);
  Swift::Int v14 = (v13 + v9);
  if (__CFADD__(v13, v9))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  *(_DWORD *)(v1 + 20) = v14;
  sub_100210AD0(45, 0xE100000000000000, v1 + 8, v13 + v9);
  if (v16)
  {
    v17._uint64_t countAndFlagsBits = 45;
    v17._char object = (void *)0xE100000000000000;
    Swift::Int v15 = ByteBuffer._setStringSlowpath(_:at:)(v17, v14);
  }
  int v18 = *(_DWORD *)(v1 + 20);
  Swift::Int v19 = (v18 + v15);
  if (__CFADD__(v18, v15)) {
    goto LABEL_40;
  }
  *(_DWORD *)(v1 + 20) = v19;
  uint64_t v4 = v9 + v15;
  if (__OFADD__(v9, v15))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  sub_100210AD0(v67, (unint64_t)v6, v1 + 8, v19);
  Swift::Int v21 = v20;
  char v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    v24._uint64_t countAndFlagsBits = v67;
    v24._char object = v6;
    Swift::Int v21 = ByteBuffer._setStringSlowpath(_:at:)(v24, v19);
  }
  int v25 = *(_DWORD *)(v1 + 20);
  BOOL v26 = __CFADD__(v25, v21);
  unsigned int v27 = v25 + v21;
  if (v26) {
    goto LABEL_42;
  }
  *(_DWORD *)(v1 + 20) = v27;
  Swift::Int v28 = v4 + v21;
  if (__OFADD__(v4, v21))
  {
    __break(1u);
    goto LABEL_15;
  }
LABEL_19:
  unint64_t v36 = a1[7];
  if (HIBYTE(v36) == 255) {
    return;
  }
  uint64_t v38 = a1[5];
  unint64_t v37 = a1[6];
  Swift::Int v39 = v27;
  sub_10029179C();
  sub_1001F33AC(v40, v41, v42, v43);
  sub_100210AD0(32, 0xE100000000000000, v2 + 8, v39);
  if (v45)
  {
    v46._uint64_t countAndFlagsBits = 32;
    v46._char object = (void *)0xE100000000000000;
    Swift::Int v44 = ByteBuffer._setStringSlowpath(_:at:)(v46, v39);
  }
  int v47 = *(_DWORD *)(v2 + 20);
  Swift::Int v48 = (v47 + v44);
  if (__CFADD__(v47, v44)) {
    goto LABEL_44;
  }
  *(_DWORD *)(v2 + 20) = v48;
  Swift::Int v49 = v28 + v44;
  if (__OFADD__(v28, v44))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  sub_100210AD0(40, 0xE100000000000000, v2 + 8, v48);
  if (v51)
  {
    v52._uint64_t countAndFlagsBits = 40;
    v52._char object = (void *)0xE100000000000000;
    Swift::Int v50 = ByteBuffer._setStringSlowpath(_:at:)(v52, v48);
  }
  Swift::Int v53 = v50;
  int v54 = *(_DWORD *)(v2 + 20);
  BOOL v26 = __CFADD__(v54, v50);
  int v55 = v54 + v50;
  if (v26) {
    goto LABEL_46;
  }
  *(_DWORD *)(v2 + 20) = v55;
  if ((v36 & 0x100000000000000) != 0)
  {
    sub_1001ECCA8(v38, 0, 0xE000000000000000, 32, (void *)0xE100000000000000, 0, (void *)0xE000000000000000, 1, v2);
    uint64_t v57 = v56;
  }
  else
  {
    if (HIDWORD(v37) < v37)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v36 - (BYTE6(v36) | (WORD2(v36) << 8)) < HIDWORD(v37))
    {
LABEL_52:
      __break(1u);
      return;
    }
    v69[0] = v38;
    v69[1] = v37;
    int v70 = v36;
    __int16 v71 = WORD2(v36);
    char v72 = BYTE6(v36);
    uint64_t v73 = v37;
    unint64_t v74 = HIDWORD(v37);
    sub_10029179C();
    sub_1001F33AC(v58, v59, v60, 0);
    uint64_t v57 = v2;
    sub_10025E0BC(v69);
    sub_1002917A8();
  }
  Swift::Int v61 = v53 + v57;
  if (__OFADD__(v53, v57)) {
    goto LABEL_47;
  }
  Swift::Int v62 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(41, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v63)
  {
    v64._uint64_t countAndFlagsBits = 41;
    v64._char object = (void *)0xE100000000000000;
    uint64_t v57 = v2 + 8;
    ByteBuffer._setStringSlowpath(_:at:)(v64, v62);
  }
  sub_1002917A8();
  int v65 = *(_DWORD *)(v2 + 20);
  BOOL v26 = __CFADD__(v65, v57);
  int v66 = v65 + v57;
  if (v26) {
    goto LABEL_48;
  }
  *(_DWORD *)(v2 + 20) = v66;
  if (__OFADD__(v61, v57))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (__OFADD__(v49, v61 + v57))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
}

uint64_t OptionExtensionKind.hash(into:)()
{
  sub_1002676E0(v0, (uint64_t)&v2);
  if (v3)
  {
    sub_1005E3410(1uLL);
    sub_1005E1DB0();
    sub_10029179C();
  }
  else
  {
    sub_1005E3410(0);
  }
  return sub_1005E1DB0();
}

uint64_t static OptionExtensionKind.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1002676E0(a1, (uint64_t)v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  if (v20)
  {
    uint64_t v5 = v19[2];
    uint64_t v6 = v19[3];
    sub_1002676E0(a2, (uint64_t)&v14);
    if (v18 == 1)
    {
      uint64_t v7 = v16;
      uint64_t v8 = v17;
      BOOL v9 = v3 == v14 && v4 == v15;
      if (v9 || (sub_1005E3290() & 1) != 0)
      {
        BOOL v10 = v5 == v7 && v6 == v8;
        if (v10 || (sub_10029179C(), (sub_1005E3290() & 1) != 0))
        {
LABEL_21:
          char v11 = 1;
          return v11 & 1;
        }
      }
    }
    goto LABEL_15;
  }
  sub_1002676E0(a2, (uint64_t)&v14);
  if (v18)
  {
LABEL_15:
    char v11 = 0;
    return v11 & 1;
  }
  if (v3 == v14 && v4 == v15) {
    goto LABEL_21;
  }
  char v11 = sub_1005E3290();
  return v11 & 1;
}

Swift::Int OptionExtensionKind.hashValue.getter()
{
  sub_1005E33F0();
  sub_1002676E0(v0, (uint64_t)&v2);
  if (v3)
  {
    sub_1005E3410(1uLL);
    sub_1005E1DB0();
    sub_10029179C();
  }
  else
  {
    sub_1005E3410(0);
  }
  sub_1005E1DB0();
  return sub_1005E3470();
}

Swift::Int sub_1002913D0()
{
  sub_1002676E0(v0, (uint64_t)v2);
  return OptionExtensionKind.hashValue.getter();
}

uint64_t sub_100291408()
{
  sub_1002676E0(v0, (uint64_t)v2);
  return OptionExtensionKind.hash(into:)();
}

Swift::Int sub_100291448()
{
  char v1 = *(unsigned char *)(v0 + 32);
  sub_1005E33F0();
  if (v1)
  {
    sub_1005E3410(1uLL);
    sub_1005E1DB0();
  }
  else
  {
    sub_1005E3410(0);
  }
  sub_1005E1DB0();
  return sub_1005E3470();
}

unint64_t sub_1002914E8()
{
  unint64_t result = qword_1007112F0;
  if (!qword_1007112F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112F0);
  }
  return result;
}

uint64_t sub_100291534(uint64_t a1, uint64_t a2)
{
  sub_1002676E0(a1, (uint64_t)v4);
  sub_1002676E0(a2, (uint64_t)v5);
  return static OptionExtensionKind.__derived_enum_equals(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t destroy for OptionExtensionKind(uint64_t a1)
{
  return sub_1001F3480(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for OptionExtensionKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1001F33C4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for OptionExtensionKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1001F33C4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_1001F3480(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for OptionExtensionKind(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_1001F3480(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionExtensionKind(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionExtensionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100291740(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100291748(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for OptionExtensionKind()
{
  return &type metadata for OptionExtensionKind;
}

uint64_t sub_100291764(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002917A8()
{
  return sub_1001F34D0(v2, v0, v1);
}

void OptionValueComp.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x100000000000000) != 0)
  {
    sub_1005E3410(1uLL);
    sub_100228B20(a1, a2);
  }
  else
  {
    sub_1005E3410(0);
    swift_beginAccess();
    sub_10025DB24();
    sub_1005E3400();
  }
}

void static OptionValueComp.__derived_enum_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 0x100000000000000) != 0)
  {
    if ((a6 & 0x100000000000000) != 0)
    {
      sub_10021AEB0();
    }
  }
  else if ((a6 & 0x100000000000000) == 0)
  {
    sub_1001F33AC(a1, a2, a3, 0);
    uint64_t v12 = sub_1002852D8();
    sub_1001F33AC(v12, v13, v14, v15);
    static ByteBuffer.== infix(_:_:)(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL, a4, a5, a6 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v16 = sub_1002852D8();
    sub_1001F33B8(v16, v17, v18, v19);
    sub_1001F33B8(a1, a2, a3, 0);
  }
}

Swift::Int OptionValueComp.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005E33F0();
  if ((a3 & 0x100000000000000) != 0)
  {
    sub_1005E3410(1uLL);
    sub_100228B20((uint64_t)v6, a1);
  }
  else
  {
    sub_1005E3410(0);
    swift_beginAccess();
    sub_10025DB24();
    sub_1005E3400();
  }
  return sub_1005E3470();
}

Swift::Int sub_1002919D8()
{
  return OptionValueComp.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)(*(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 23) << 56));
}

void sub_100291A0C(uint64_t a1)
{
  OptionValueComp.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)(*(unsigned __int16 *)(v1 + 20) | (*(unsigned __int8 *)(v1 + 22) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 23) << 56));
}

Swift::Int sub_100291A40()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 23);
  sub_1005E33F0();
  if (v2)
  {
    sub_1005E3410(1uLL);
    sub_100228B20((uint64_t)v4, v1);
  }
  else
  {
    sub_1005E3410(0);
    swift_beginAccess();
    sub_1005E3400();
  }
  return sub_1005E3470();
}

void sub_100291B04(uint64_t a1, uint64_t a2)
{
}

void sub_100291B88(uint64_t a1@<X8>)
{
  OptionValueComp.init(arrayLiteral:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 22) = v4;
  *(_WORD *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 23) = v6 & 1;
}

unint64_t sub_100291BD0()
{
  unint64_t result = qword_1007112F8;
  if (!qword_1007112F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007112F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionValueComp()
{
  return &type metadata for OptionValueComp;
}

uint64_t static PartialRange.__derived_enum_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4)
{
  return (((a4 & 1) == 0) ^ a2) & (a3 == a1);
}

void sub_100291C48(unint64_t a1, char a2)
{
  uint64_t v3 = v2;
  LODWORD(v4) = a1;
  unint64_t v5 = HIDWORD(a1);
  if (a2) {
    goto LABEL_9;
  }
  sub_1002BA628(a1);
  uint64_t v7 = v6;
  Swift::Int v4 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(58, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = 58;
    v10._char object = (void *)0xE100000000000000;
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v4);
  }
  int v11 = *(_DWORD *)(v2 + 20);
  BOOL v12 = __CFADD__(v11, v8);
  int v13 = v11 + v8;
  if (v12)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(_DWORD *)(v2 + 20) = v13;
  Swift::Int v14 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_1002BA628(v5);
  if (!__OFADD__(v14, v15)) {
    return;
  }
  __break(1u);
LABEL_9:
  Swift::Int v16 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(45, 0xE100000000000000, v3 + 8, *(_DWORD *)(v3 + 20));
  if (v18)
  {
    v19._uint64_t countAndFlagsBits = 45;
    v19._char object = (void *)0xE100000000000000;
    Swift::Int v17 = ByteBuffer._setStringSlowpath(_:at:)(v19, v16);
  }
  Swift::Int v20 = v17;
  int v21 = *(_DWORD *)(v3 + 20);
  BOOL v12 = __CFADD__(v21, v17);
  int v22 = v21 + v17;
  if (v12) {
    goto LABEL_21;
  }
  *(_DWORD *)(v3 + 20) = v22;
  sub_1002BA628(v4);
  Swift::Int v24 = v20 + v23;
  if (__OFADD__(v20, v23))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  Swift::Int v25 = *(unsigned int *)(v3 + 20);
  sub_100210AD0(11578, 0xE200000000000000, v3 + 8, *(_DWORD *)(v3 + 20));
  if (v27)
  {
    v28._uint64_t countAndFlagsBits = 11578;
    v28._char object = (void *)0xE200000000000000;
    Swift::Int v26 = ByteBuffer._setStringSlowpath(_:at:)(v28, v25);
  }
  int v29 = *(_DWORD *)(v3 + 20);
  BOOL v12 = __CFADD__(v29, v26);
  int v30 = v29 + v26;
  if (v12) {
    goto LABEL_23;
  }
  *(_DWORD *)(v3 + 20) = v30;
  Swift::Int v31 = v24 + v26;
  if (__OFADD__(v24, v26))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1002BA628(v5);
  if (__OFADD__(v31, v32)) {
LABEL_25:
  }
    __break(1u);
}

void PartialRange.hash(into:)(uint64_t a1, unint64_t a2, char a3)
{
  Swift::UInt32 v3 = a2;
  unint64_t v4 = HIDWORD(a2);
  sub_1005E3410(a3 & 1);
  sub_1005E3440(v3);
  sub_1005E3440(v4);
}

Swift::Int PartialRange.hashValue.getter(uint64_t a1, char a2)
{
  return sub_1005E3470();
}

Swift::Int sub_100291E98()
{
  return PartialRange.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_100291EA4(uint64_t a1)
{
  PartialRange.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_100291EB0()
{
  Swift::UInt32 v2 = *(_DWORD *)v0;
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 8);
  sub_1005E33F0();
  sub_1005E3410(v3);
  sub_1005E3440(v2);
  sub_1005E3440(v1);
  return sub_1005E3470();
}

uint64_t sub_100291F18(uint64_t a1, uint64_t a2)
{
  return static PartialRange.__derived_enum_equals(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

unint64_t sub_100291F38()
{
  unint64_t result = qword_100711300;
  if (!qword_100711300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711300);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialRange(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PartialRange(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for PartialRange()
{
  return &type metadata for PartialRange;
}

uint64_t SearchReturnData.Partial.messageNumbers.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SearchReturnData.Partial() + 20);
  return sub_100292074(v3, a1);
}

uint64_t type metadata accessor for SearchReturnData.Partial()
{
  uint64_t result = qword_100711368;
  if (!qword_100711368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100292074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SearchReturnData.Partial.messageNumbers.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SearchReturnData.Partial() + 20);
  return sub_100292120(a1, v3);
}

uint64_t sub_100292120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::UInt32 (__swiftcall *SearchReturnData.Partial.messageNumbers.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t SearchReturnData.Partial.hash(into:)()
{
  Swift::UInt32 v2 = *(_DWORD *)v0;
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  sub_1005E3410(*(unsigned __int8 *)(v0 + 8));
  sub_1005E3440(v2);
  sub_1005E3440(v1);
  type metadata accessor for SearchReturnData.Partial();
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  return sub_1005E19C0();
}

uint64_t static SearchReturnData.Partial.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)a2 == *(void *)a1) {
      int v2 = *(unsigned __int8 *)(a2 + 8);
    }
    else {
      int v2 = 0;
    }
    if (v2 != 1) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a2 == *(void *)a1) {
      char v4 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  type metadata accessor for SearchReturnData.Partial();
  sub_100223B18();
  return sub_1005E35A0();
}

Swift::Int SearchReturnData.Partial.hashValue.getter()
{
  sub_1005E33F0();
  Swift::UInt32 v2 = *(_DWORD *)v0;
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  sub_1005E3410(*(unsigned __int8 *)(v0 + 8));
  sub_1005E3440(v2);
  sub_1005E3440(v1);
  type metadata accessor for SearchReturnData.Partial();
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  sub_1005E19C0();
  return sub_1005E3470();
}

Swift::Int sub_100292394()
{
  return sub_1005E3470();
}

unint64_t sub_1002923D8()
{
  unint64_t result = qword_100711308;
  if (!qword_100711308)
  {
    type metadata accessor for SearchReturnData.Partial();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711308);
  }
  return result;
}

void *_s7PartialVwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_10000566C(&qword_100710538);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ResponseCodeAppend(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_10000566C(&qword_100710538);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t _s7PartialVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t _s7PartialVwca(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t _s7PartialVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s7PartialVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t _s7PartialVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002927A0);
}

uint64_t sub_1002927A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_100710528);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return getEnumTagSinglePayload for ClientCommand(v9, a2, v8);
  }
}

uint64_t _s7PartialVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100292838);
}

uint64_t sub_100292838(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = sub_10000566C(&qword_100710528);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return storeEnumTagSinglePayload for ClientCommand(v8, a2, a2, v7);
  }
  return result;
}

void sub_1002928B8()
{
  sub_10027AC38();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

Swift::Int QuotaLimit.hashValue.getter(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  return sub_1005E3470();
}

Swift::Int sub_1002929C8()
{
  return QuotaLimit.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

unint64_t sub_1002929D8()
{
  unint64_t result = qword_1007113A0;
  if (!qword_1007113A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuotaLimit()
{
  return &type metadata for QuotaLimit;
}

uint64_t Environment.unreconciledMessageCount.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

void QuotaResource.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5)
{
}

BOOL static QuotaResource.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6)
  {
    if (a3 != a7) {
      return 0;
    }
    return a4 == a8;
  }
  char v13 = sub_1005E3290();
  BOOL result = 0;
  if ((v13 & 1) != 0 && a3 == a7) {
    return a4 == a8;
  }
  return result;
}

Swift::Int QuotaResource.hashValue.getter(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  return sub_1005E3470();
}

Swift::Int sub_100292BB8()
{
  return QuotaResource.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100292BC4(uint64_t a1)
{
  QuotaResource.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_100292BD0()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(void *)(v0 + 24);
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  sub_1005E3410(v1);
  sub_1005E3410(v2);
  return sub_1005E3470();
}

unint64_t sub_100292C58()
{
  unint64_t result = qword_1007113A8;
  if (!qword_1007113A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113A8);
  }
  return result;
}

BOOL sub_100292CA4(uint64_t *a1, uint64_t *a2)
{
  return static QuotaResource.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t initializeWithCopy for QuotaResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for QuotaResource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for QuotaResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for QuotaResource()
{
  return &type metadata for QuotaResource;
}

void sub_100292DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100212BF0();
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v6 = a2 + 8;
    uint64_t v7 = a1 + 56;
    uint64_t v29 = a2 + 8;
    uint64_t v26 = a2;
    while (1)
    {
      Swift::String v28 = v5;
      uint64_t v8 = *(void *)(v7 - 24);
      uint64_t v9 = *(void **)(v7 - 16);
      Swift::Int v10 = *(unsigned int *)(a2 + 20);
      swift_bridgeObjectRetain();
      sub_100210AD0(v8, (unint64_t)v9, v6, v10);
      if (v12)
      {
        v13._uint64_t countAndFlagsBits = v8;
        v13._char object = v9;
        Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v13, v10);
      }
      int v14 = *(_DWORD *)(a2 + 20);
      uint64_t v15 = a2;
      Swift::Int v16 = (v14 + v11);
      if (__CFADD__(v14, v11)) {
        break;
      }
      Swift::Int v27 = v11;
      *(_DWORD *)(v15 + 20) = v16;
      v30._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1005E1E30(v30);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 32;
      v31._char object = (void *)0xE100000000000000;
      sub_1005E1E30(v31);
      v32._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1005E1E30(v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_100210AD0(32, 0xE100000000000000, v29, v16);
      Swift::Int v18 = v17;
      char v20 = v19;
      swift_bridgeObjectRelease();
      if (v20)
      {
        v21._uint64_t countAndFlagsBits = 32;
        v21._char object = (void *)0xE100000000000000;
        Swift::Int v18 = ByteBuffer._setStringSlowpath(_:at:)(v21, v16);
      }
      swift_bridgeObjectRelease();
      a2 = v26;
      int v22 = *(_DWORD *)(v26 + 20);
      BOOL v23 = __CFADD__(v22, v18);
      int v24 = v22 + v18;
      if (v23) {
        goto LABEL_15;
      }
      *(_DWORD *)(v26 + 20) = v24;
      swift_bridgeObjectRelease();
      if (__OFADD__(v27, v18)) {
        goto LABEL_16;
      }
      uint64_t v5 = v28;
      unint64_t v25 = v28[2];
      if (v25 >= v28[3] >> 1)
      {
        sub_100212BF0();
        uint64_t v5 = v28;
      }
      v7 += 32;
      _OWORD v5[2] = v25 + 1;
      v5[v25 + 4] = v27 + v18;
      --v3;
      uint64_t v6 = v29;
      if (!v3) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void sub_100293000(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = v4 + 8;
  Swift::Int v11 = *(unsigned int *)(v4 + 20);
  uint64_t v12 = sub_1002932A4();
  sub_100210AD0(v12, v13, v10, v11);
  if (v15)
  {
    v16._uint64_t countAndFlagsBits = sub_1002932A4();
    Swift::Int v14 = ByteBuffer._setStringSlowpath(_:at:)(v16, v11);
  }
  Swift::Int v17 = v14;
  int v18 = *(_DWORD *)(v5 + 20);
  if (__CFADD__(v18, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_DWORD *)(v5 + 20) = v18 + v14;
  if (HIDWORD(a2) < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3 - (BYTE6(a3) | (WORD2(a3) << 8)) < HIDWORD(a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v30[0] = a1;
  v30[1] = a2;
  int v31 = a3;
  __int16 v32 = WORD2(a3);
  char v33 = BYTE6(a3);
  uint64_t v34 = a2;
  unint64_t v35 = HIDWORD(a2);
  swift_retain();
  Swift::Int v19 = sub_10025E0BC(v30);
  swift_release();
  Swift::Int v20 = v17 + v19;
  if (__OFADD__(v17, v19))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  Swift::Int v21 = *(unsigned int *)(v5 + 20);
  sub_100210AD0(32, 0xE100000000000000, v10, *(_DWORD *)(v5 + 20));
  if (v23)
  {
    v24._uint64_t countAndFlagsBits = 32;
    v24._char object = (void *)0xE100000000000000;
    Swift::Int v22 = ByteBuffer._setStringSlowpath(_:at:)(v24, v21);
  }
  int v25 = *(_DWORD *)(v5 + 20);
  BOOL v26 = __CFADD__(v25, v22);
  int v27 = v25 + v22;
  if (v26) {
    goto LABEL_17;
  }
  *(_DWORD *)(v5 + 20) = v27;
  Swift::Int v28 = v20 + v22;
  if (__OFADD__(v20, v22))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_100293180(a4);
  if (__OFADD__(v28, v29)) {
LABEL_19:
  }
    __break(1u);
}

void sub_100293180(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 8;
  Swift::Int v5 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(40, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v7)
  {
    v8._uint64_t countAndFlagsBits = 40;
    v8._char object = (void *)0xE100000000000000;
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v5);
  }
  Swift::Int v9 = v6;
  int v10 = *(_DWORD *)(v2 + 20);
  BOOL v11 = __CFADD__(v10, v6);
  int v12 = v10 + v6;
  if (v11)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_DWORD *)(v2 + 20) = v12;
  sub_100292DA8(a1, v2);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = 0;
    Swift::String v16 = (uint64_t *)(v13 + 32);
    while (1)
    {
      uint64_t v17 = *v16++;
      BOOL v18 = __OFADD__(v15, v17);
      v15 += v17;
      if (v18) {
        break;
      }
      if (!--v14) {
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v15 = 0;
LABEL_10:
  swift_bridgeObjectRelease();
  BOOL v18 = __OFADD__(v9, v15);
  Swift::Int v19 = v9 + v15;
  if (v18) {
    goto LABEL_18;
  }
  Swift::Int v20 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(41, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
  if (v22)
  {
    v23._uint64_t countAndFlagsBits = 41;
    v23._char object = (void *)0xE100000000000000;
    Swift::Int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v20);
  }
  int v24 = *(_DWORD *)(v2 + 20);
  BOOL v11 = __CFADD__(v24, v21);
  int v25 = v24 + v21;
  if (v11) {
    goto LABEL_19;
  }
  *(_DWORD *)(v2 + 20) = v25;
  if (__OFADD__(v19, v21)) {
LABEL_20:
  }
    __break(1u);
}

uint64_t sub_1002932A4()
{
  return 0x2041544F5551;
}

void QuotaRoot.init(_:)(uint64_t a1, unint64_t a2)
{
  if (qword_10070FB10 != -1) {
    swift_once();
  }
  unint64_t v4 = qword_100761858;
  uint64_t v5 = HIDWORD(qword_100761858);
  if (HIDWORD(qword_100761858) < qword_100761858)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (dword_100761860 - (byte_100761866 | ((unsigned __int16)word_100761864 << 8)) < HIDWORD(qword_100761858))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10[0] = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  v10[1] = qword_100761858;
  int v11 = dword_100761860;
  unsigned __int16 v12 = word_100761864;
  unsigned __int8 v13 = byte_100761866;
  uint64_t v14 = qword_100761858;
  uint64_t v15 = HIDWORD(qword_100761858);
  swift_retain();
  sub_1001F5364(a1, a2, (uint64_t)v10, v5);
  if ((v6 & 0x100000000) != 0) {
    unsigned int v7 = sub_1001F80B4(a1, a2, v5);
  }
  else {
    unsigned int v7 = v6;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = v5 + v7;
  if (v8 < v4) {
    goto LABEL_14;
  }
  if (v11 - (v13 | (v12 << 8)) < v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  ByteBuffer.getSlice(at:length:)(v4, v8 - v4);
  if (v9)
  {
    swift_release();
    return;
  }
LABEL_16:
  __break(1u);
}

uint64_t String.init(_:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
  }
  else if (a3 - (BYTE6(a3) | (WORD2(a3) << 8)) >= HIDWORD(a2))
  {
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    v5[0] = result;
    v5[1] = a2;
    int v6 = a3;
    __int16 v7 = WORD2(a3);
    char v8 = BYTE6(a3);
    uint64_t v9 = a2;
    unint64_t v10 = HIDWORD(a2);
    return sub_1002934A8((uint64_t)v5);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002934A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000811BC(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 20);
  uint64_t v51 = a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 22);
  sub_100232920();
  uint64_t v10 = v9;
  uint64_t v11 = (void *)(v4 + 24);
  sub_1001F969C();
  uint64_t v12 = v6;
  uint64_t v13 = v3;
  uint64_t v14 = v10;
  unsigned int v15 = 0;
  unsigned __int8 v16 = 0;
  uint64_t v17 = (v5 - v6);
  uint64_t v18 = v8 | (v7 << 8);
  uint64_t v19 = -v6;
  int v20 = -65793;
  int v21 = -16843009;
  int v22 = 1;
  int v23 = 49376;
  int v24 = 32960;
  int v25 = 16843009;
  int v26 = -255;
  uint64_t v27 = v13;
  uint64_t v53 = v6;
  uint64_t v54 = v13;
  uint64_t v52 = -v6;
  while (1)
  {
    LODWORD(v56) = v15;
    BYTE4(v56) = v16;
    if (!v16) {
      break;
    }
    if ((v15 & 0x80) == 0)
    {
      uint64_t v46 = v14;
      sub_1002102E0();
      int v47 = UnsafeExtractedAttachment.part.modify();
      sub_10035061C(0);
      ((void (*)(void *, void))v47)(v55, 0);
      int v26 = -255;
      int v25 = 16843009;
      int v24 = 32960;
      int v23 = 49376;
      int v22 = 1;
      int v21 = -16843009;
      int v20 = -65793;
      uint64_t v19 = v52;
      uint64_t v12 = v53;
      uint64_t v13 = v54;
      uint64_t v14 = v46;
      unsigned int v31 = (v15 + 1);
      goto LABEL_44;
    }
LABEL_14:
    if (v27 != v2)
    {
      uint64_t v32 = v27;
      do
      {
        if (v27 < v13 || v32 >= v2)
        {
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        if (v27 < v12) {
          goto LABEL_58;
        }
        if (v19 + v32 >= v17) {
          goto LABEL_59;
        }
        uint64_t v34 = v32 + 1;
        unsigned int v15 = (*(unsigned __int8 *)(*v11 + v18 + v32) << v16) | ((v26 << v16) - 1) & v15;
        v16 += 8;
        if (v16 >= 0x20u)
        {
          uint64_t v27 = v32 + 1;
          goto LABEL_29;
        }
        ++v32;
      }
      while (v2 != v34);
      uint64_t v27 = v2;
      if (v16) {
        goto LABEL_29;
      }
LABEL_57:
      v55[0] = 0;
      v55[1] = 0xE000000000000000;
      uint64_t v56 = v14;
      sub_10000566C(&qword_1007113B8);
      sub_100293AD8();
      sub_1005E1D50();
      swift_bridgeObjectRelease();
      sub_1000811E8(v51);
      sub_1000811E8(v51);
      return v55[0];
    }
    uint64_t v27 = v2;
LABEL_29:
    if ((v15 & v23) == v24)
    {
      if ((v15 & 0x1E) == 0) {
        goto LABEL_41;
      }
      unsigned int v35 = 16;
    }
    else if ((v15 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v15 & 0x200F) == 0 || (v15 & 0x200F) == 0x200D) {
        goto LABEL_41;
      }
      unsigned int v35 = 24;
    }
    else
    {
      if ((v15 & 0xC0C0C0F8) != 0x808080F0 || (v15 & 0x3007) == 0 || __rev16(v15 & 0x3007) > 0x400)
      {
LABEL_41:
        uint64_t v37 = v14;
        sub_1005E3510();
        sub_100293B2C();
        int v26 = v38;
        uint64_t v13 = v54;
        uint64_t v14 = v37;
        int v36 = 0;
        unsigned int v35 = 8 * v39;
        goto LABEL_42;
      }
      unsigned int v35 = 32;
    }
    int v36 = 1;
LABEL_42:
    LODWORD(v56) = (unint64_t)v15 >> (v35 & 0x38);
    BYTE4(v56) = v16 - v35;
    if (!v36) {
      goto LABEL_63;
    }
    unsigned int v31 = ((v22 << ((v35 >> 1) & 0x1C) << ((v35 >> 1) & 0x1C)) - 1) & (v15 + v25);
LABEL_44:
    uint64_t v40 = 4 - (__clz(v31) >> 3);
    unsigned int v41 = v31 - 1;
    unsigned int v42 = (((v31 - 257) & 0x1F) << 6) | ((v31 - 257) >> 8) & 0x3F;
    if (v40 == 3) {
      unsigned int v43 = ((v31 + v20) >> 2) & 0xFC0 | ((v31 + v20) >> 16) & 0x3F | (((v31 + v20) & 0xF) << 12);
    }
    else {
      unsigned int v43 = ((v31 + v21) >> 10) & 0xFC0 | ((v31 + v21) >> 24) & 0x3F | ((((v31 + v21) >> 8) & 0x3F) << 12) & 0xFFE3FFFF | (((v31 + v21) & 7) << 18);
    }
    if (v40 == 2) {
      unsigned int v43 = v42;
    }
    if (v40 == 1) {
      unsigned int v44 = v41;
    }
    else {
      unsigned int v44 = v43;
    }
    unsigned int v15 = v56;
    unsigned __int8 v16 = BYTE4(v56);
    unint64_t v45 = *(void *)(v14 + 16);
    if (v45 >= *(void *)(v14 + 24) >> 1)
    {
      sub_100232920();
      sub_100293B2C();
      int v26 = v48;
      uint64_t v13 = v54;
      uint64_t v14 = v49;
    }
    *(void *)(v14 + 16) = v45 + 1;
    *(_DWORD *)(v14 + 4 * v45 + 32) = v44;
  }
  if (v27 == v2) {
    goto LABEL_57;
  }
  if (v27 >= v13 && v27 < v2)
  {
    if (v27 < v12) {
      goto LABEL_61;
    }
    if (v27 - v12 >= v17) {
      goto LABEL_62;
    }
    int v29 = *(char *)(*v11 + v18 + v27);
    int v30 = *(unsigned __int8 *)(*v11 + v18 + v27++);
    if ((v29 & 0x80000000) == 0)
    {
      unsigned int v31 = v30 + 1;
      goto LABEL_44;
    }
    unsigned int v15 = v15 & 0xFFFFFF00 | v30;
    unsigned __int8 v16 = 8;
    goto LABEL_14;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  sub_1000811E8(v51);
  swift_bridgeObjectRelease();
  sub_1000811E8(v51);
  return 0;
}

uint64_t QuotaRoot.debugDescription.getter(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (HIDWORD(a2) > a3 - (BYTE6(a3) | (WORD2(a3) << 8)))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v6[0] = result;
  v6[1] = a2;
  int v7 = a3;
  __int16 v8 = WORD2(a3);
  char v9 = BYTE6(a3);
  uint64_t v10 = a2;
  unint64_t v11 = HIDWORD(a2);
  swift_retain();
  uint64_t v3 = sub_1002934A8((uint64_t)v6);
  if (v4) {
    return v3;
  }
  sub_1001F969C();
  swift_retain();
  uint64_t v5 = sub_1005E1D70();
  swift_release();
  return v5;
}

unint64_t sub_100293A60()
{
  unint64_t result = qword_1007113B0;
  if (!qword_1007113B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113B0);
  }
  return result;
}

uint64_t sub_100293AAC()
{
  return QuotaRoot.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48));
}

ValueMetadata *type metadata accessor for QuotaRoot()
{
  return &type metadata for QuotaRoot;
}

unint64_t sub_100293AD8()
{
  unint64_t result = qword_1007113C0;
  if (!qword_1007113C0)
  {
    sub_10000744C(&qword_1007113B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113C0);
  }
  return result;
}

void sub_100293B54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = v5 + 8;
  Swift::Int v11 = *(unsigned int *)(v5 + 20);
  uint64_t v12 = sub_100293CE4();
  sub_100210AD0(v12, v13, v10, v11);
  if (v15)
  {
    v16._uint64_t countAndFlagsBits = sub_100293CE4();
    Swift::Int v14 = ByteBuffer._setStringSlowpath(_:at:)(v16, v11);
  }
  Swift::Int v17 = v14;
  int v18 = *(_DWORD *)(v6 + 20);
  BOOL v19 = __CFADD__(v18, v14);
  int v20 = v18 + v14;
  if (v19)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_DWORD *)(v6 + 20) = v20;
  uint64_t v21 = swift_bridgeObjectRetain();
  Swift::Int v22 = sub_10025E538(v21);
  swift_bridgeObjectRelease();
  Swift::Int v23 = v17 + v22;
  if (__OFADD__(v17, v22))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  Swift::Int v24 = *(unsigned int *)(v6 + 20);
  sub_100210AD0(32, 0xE100000000000000, v10, *(_DWORD *)(v6 + 20));
  if (v26)
  {
    v27._uint64_t countAndFlagsBits = 32;
    v27._char object = (void *)0xE100000000000000;
    Swift::Int v25 = ByteBuffer._setStringSlowpath(_:at:)(v27, v24);
  }
  int v28 = *(_DWORD *)(v6 + 20);
  BOOL v19 = __CFADD__(v28, v25);
  int v29 = v28 + v25;
  if (v19) {
    goto LABEL_15;
  }
  *(_DWORD *)(v6 + 20) = v29;
  Swift::Int v30 = v23 + v25;
  if (__OFADD__(v23, v25))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (HIDWORD(a4) < a4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a5 - (BYTE6(a5) | (WORD2(a5) << 8)) < HIDWORD(a4))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v32[0] = a3;
  v32[1] = a4;
  int v33 = a5;
  __int16 v34 = WORD2(a5);
  char v35 = BYTE6(a5);
  uint64_t v36 = a4;
  unint64_t v37 = HIDWORD(a4);
  swift_retain();
  Swift::Int v31 = sub_10025E0BC(v32);
  swift_release();
  if (__OFADD__(v30, v31)) {
LABEL_19:
  }
    __break(1u);
}

uint64_t sub_100293CE4()
{
  return 0x4F4F5241544F5551;
}

void RelativeIMAPURL.hash(into:)(uint64_t a1)
{
  sub_100293E58(v1, v10);
  int v3 = sub_100293E6C((uint64_t)v10);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
      memcpy(__dst, v4, sizeof(__dst));
      sub_1005E3410(1uLL);
      sub_1001E5424((uint64_t)__dst, (uint64_t)v8);
      sub_1001E5424((uint64_t)v8, (uint64_t)v9);
      sub_100295150((uint64_t)v9);
      if (v5)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1001E5424((uint64_t)v8, (uint64_t)v7);
        sub_100217504((uint64_t)v7, (uint64_t)v11);
        sub_1005E3420(1u);
        sub_1002949E0(__dst);
        URLCommand.hash(into:)();
      }
      sub_1002947F8(v1);
    }
    else
    {
      sub_1005E3410(2uLL);
    }
  }
  else
  {
    uint64_t v6 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
    memcpy(v11, v6, sizeof(v11));
    sub_1005E3410(0);
    IMAPURL.hash(into:)(a1);
  }
}

void *sub_100293E58(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x101uLL);
}

uint64_t sub_100293E6C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 256) <= 1u) {
    return *(unsigned __int8 *)(a1 + 256);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

BOOL static RelativeIMAPURL.__derived_enum_equals(_:_:)(__n128 *a1, __n128 *__src)
{
  sub_100293E58(__src, __srca);
  sub_100293E58(__srca, v34);
  sub_100293E58(a1, v27);
  int v4 = sub_100293E6C((uint64_t)v27);
  if (!v4)
  {
    __int16 v8 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v27);
    memcpy(v28, v8, sizeof(v28));
    sub_100293E58(__src, v26);
    if (sub_100293E6C((uint64_t)v26)) {
      return 0;
    }
    char v9 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v26);
    memcpy(__dst, v9, sizeof(__dst));
    v29[0] = v28[0];
    v29[1] = v28[1];
    v30[0] = v28[2];
    *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)&v28[2] + 9);
    long long v10 = v9[1];
    v31[0] = *v9;
    v31[1] = v10;
    v32[0] = v9[2];
    *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v9 + 41);
    if ((static IMAPServer.__derived_struct_equals(_:_:)((uint64_t)v29, (uint64_t)v31) & 1) == 0) {
      return 0;
    }
    sub_1001E5424((uint64_t)&v28[4], (uint64_t)v21);
    sub_1001E5424((uint64_t)&__dst[64], (uint64_t)v22);
    sub_1001E5424((uint64_t)v21, (uint64_t)v23);
    sub_100295150((uint64_t)v23);
    if (v12)
    {
      sub_1001E5424((uint64_t)v22, (uint64_t)v19);
      sub_100295150((uint64_t)v19);
      if (v12) {
        return 1;
      }
    }
    else
    {
      sub_1001E5424((uint64_t)v22, (uint64_t)v18);
      sub_100295150((uint64_t)v18);
      if (!v14)
      {
        sub_1001E5424((uint64_t)v21, (uint64_t)v16);
        sub_100217504((uint64_t)v16, (uint64_t)v33);
        sub_1001E5424((uint64_t)v22, (uint64_t)v17);
        sub_100217504((uint64_t)v17, (uint64_t)v19);
        sub_1002949E0(v21);
        sub_1002949E0(v22);
        BOOL v15 = static URLCommand.__derived_enum_equals(_:_:)((uint64_t)v33, (uint64_t)v19);
        sub_1002949E0(v22);
        sub_1002949E0(v21);
        return v15;
      }
    }
    sub_1001E5424((uint64_t)v21, (uint64_t)v19);
    sub_1001E5424((uint64_t)v22, (uint64_t)v20);
    sub_1002949E0(v21);
    sub_1002949E0(v22);
    goto LABEL_25;
  }
  if (v4 == 1)
  {
    char v5 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v27);
    memcpy(__dst, v5, 0xC0uLL);
    sub_100293E58(__src, v26);
    if (sub_100293E6C((uint64_t)v26) == 1)
    {
      uint64_t v6 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v26);
      memcpy(v33, v6, sizeof(v33));
      sub_1001E5424((uint64_t)__dst, (uint64_t)v21);
      sub_1001E5424((uint64_t)v33, (uint64_t)v22);
      sub_1001E5424((uint64_t)v21, (uint64_t)v23);
      sub_100295150((uint64_t)v23);
      if (v12)
      {
        sub_1001E5424((uint64_t)v22, (uint64_t)v28);
        sub_100295150((uint64_t)v28);
        if (v12)
        {
          sub_100293E58(v34, v19);
          int v7 = (__n128 *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v19);
          sub_1002949E0(v7);
          return 1;
        }
      }
      else
      {
        sub_1001E5424((uint64_t)v22, (uint64_t)v18);
        sub_100295150((uint64_t)v18);
        if (!v12)
        {
          sub_1001E5424((uint64_t)v21, (uint64_t)v16);
          sub_100217504((uint64_t)v16, (uint64_t)v28);
          sub_1001E5424((uint64_t)v22, (uint64_t)v17);
          sub_100217504((uint64_t)v17, (uint64_t)v19);
          sub_1002947F8(__src);
          sub_1002947F8(a1);
          BOOL v13 = static URLCommand.__derived_enum_equals(_:_:)((uint64_t)v28, (uint64_t)v19);
          sub_1002947F8(__src);
          sub_1002947F8(a1);
          return v13;
        }
      }
      sub_1001E5424((uint64_t)v21, (uint64_t)v19);
      sub_1001E5424((uint64_t)v22, (uint64_t)v20);
      sub_1002947F8(__src);
      sub_1002947F8(a1);
LABEL_25:
      sub_100217C70((uint64_t)v19);
    }
  }
  else
  {
    sub_100293E58(__src, v19);
    if (sub_100293E6C((uint64_t)v19) == 2) {
      return 1;
    }
  }
  return 0;
}

Swift::Int RelativeIMAPURL.hashValue.getter()
{
  sub_1005E33F0();
  sub_100293E58(v0, v10);
  int v1 = sub_100293E6C((uint64_t)v10);
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v2 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
      memcpy(__dst, v2, sizeof(__dst));
      sub_1005E3410(1uLL);
      sub_1001E5424((uint64_t)__dst, (uint64_t)v7);
      sub_1001E5424((uint64_t)v7, (uint64_t)v8);
      sub_100295150((uint64_t)v8);
      if (v3)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1001E5424((uint64_t)v7, (uint64_t)v6);
        sub_100217504((uint64_t)v6, (uint64_t)v11);
        sub_1005E3420(1u);
        sub_1002949E0(__dst);
        URLCommand.hash(into:)();
      }
      sub_1002947F8(v0);
    }
    else
    {
      sub_1005E3410(2uLL);
    }
  }
  else
  {
    int v4 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
    memcpy(v11, v4, sizeof(v11));
    sub_1005E3410(0);
    IMAPURL.hash(into:)((uint64_t)v9);
  }
  return sub_1005E3470();
}

Swift::Int sub_100294440()
{
  sub_100293E58(v0, __dst);
  return RelativeIMAPURL.hashValue.getter();
}

void sub_100294478(uint64_t a1)
{
  sub_100293E58(v1, __dst);
  RelativeIMAPURL.hash(into:)(a1);
}

Swift::Int sub_1002944C0()
{
  sub_100293E58(v0, __src);
  sub_1005E33F0();
  sub_100293E58(__src, v10);
  int v1 = sub_100293E6C((uint64_t)v10);
  if (v1)
  {
    if (v1 == 1)
    {
      uint64_t v2 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
      sub_1005E3410(1uLL);
      sub_1001E5424(v2, (uint64_t)v6);
      if (sub_1002174E0((uint64_t)v6) == 1)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1001E5424(v2, (uint64_t)v5);
        sub_100217504((uint64_t)v5, (uint64_t)__dst);
        sub_1005E3420(1u);
        sub_1002949E0((__n128 *)v2);
        URLCommand.hash(into:)();
      }
      sub_1002947F8(__src);
    }
    else
    {
      sub_1005E3410(2uLL);
    }
  }
  else
  {
    char v3 = (const void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v10);
    memcpy(__dst, v3, sizeof(__dst));
    sub_1005E3410(0);
    IMAPURL.hash(into:)((uint64_t)v7);
  }
  return sub_1005E3470();
}

BOOL sub_100294620(void *a1, void *a2)
{
  sub_100293E58(a1, v4);
  sub_100293E58(a2, __dst);
  return static RelativeIMAPURL.__derived_enum_equals(_:_:)(v4, __dst);
}

uint64_t sub_10029466C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33 = a21;
  uint64_t v34 = a22;
  uint64_t v35 = a19;
  uint64_t v36 = a20;
  uint64_t v38 = a17;
  uint64_t v37 = a18;
  uint64_t v39 = a9;
  if (a33 != 1)
  {
    if (a33) {
      return result;
    }
    uint64_t v46 = a16;
    uint64_t v44 = a14;
    uint64_t v45 = a15;
    uint64_t v42 = a12;
    uint64_t v43 = a13;
    uint64_t v40 = a10;
    unint64_t v41 = a11;
    sub_100274874(result, a2, a3, a4);
    swift_bridgeObjectRelease();
    a22 = a30;
    a21 = a29;
    LOBYTE(a20) = a28;
    a19 = a27;
    a18 = a26;
    a16 = a24;
    a17 = a25;
    a14 = v34;
    a15 = a23;
    a12 = v36;
    a13 = v33;
    a10 = v37;
    a11 = v35;
    a9 = v38;
    unint64_t result = v39;
    a2 = v40;
    a3 = v41;
    a4 = v42;
    a5 = v43;
    a6 = v44;
    a7 = v45;
    a8 = v46;
  }
  return sub_100217184(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1002947F8(__n128 *a1)
{
  sub_100295124(a1);
  sub_100295168();
  v2();
  return v1;
}

uint64_t sub_100294854(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33 = a21;
  uint64_t v34 = a22;
  uint64_t v35 = a19;
  uint64_t v36 = a20;
  uint64_t v38 = a17;
  uint64_t v37 = a18;
  uint64_t v39 = a9;
  if (a33 != 1)
  {
    if (a33) {
      return result;
    }
    uint64_t v46 = a16;
    uint64_t v44 = a14;
    uint64_t v45 = a15;
    uint64_t v42 = a12;
    uint64_t v43 = a13;
    uint64_t v40 = a10;
    unint64_t v41 = a11;
    sub_1002747A4(result, a2, a3, a4);
    swift_bridgeObjectRetain();
    a22 = a30;
    a21 = a29;
    LOBYTE(a20) = a28;
    a19 = a27;
    a18 = a26;
    a16 = a24;
    a17 = a25;
    a14 = v34;
    a15 = a23;
    a12 = v36;
    a13 = v33;
    a10 = v37;
    a11 = v35;
    a9 = v38;
    unint64_t result = v39;
    a2 = v40;
    a3 = v41;
    a4 = v42;
    a5 = v43;
    a6 = v44;
    a7 = v45;
    a8 = v46;
  }
  return sub_100217A34(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1002949E0(__n128 *a1)
{
  sub_100295124(a1);
  sub_100295168();
  v2();
  return v1;
}

unint64_t sub_100294A28()
{
  unint64_t result = qword_1007113C8;
  if (!qword_1007113C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113C8);
  }
  return result;
}

uint64_t destroy for RelativeIMAPURL(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 208);
  return sub_10029466C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160),
           *(void *)(a1 + 168),
           *(void *)(a1 + 176),
           *(void *)(a1 + 184),
           *(void *)(a1 + 192),
           *(void *)(a1 + 200),
           v2,
           SBYTE8(v2),
           *(void *)(a1 + 224),
           *(void *)(a1 + 232),
           *(void *)(a1 + 240),
           *(void *)(a1 + 248),
           *(unsigned char *)(a1 + 256));
}

uint64_t initializeWithCopy for RelativeIMAPURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  uint64_t v30 = *(void *)(a2 + 208);
  uint64_t v31 = *(void *)(a2 + 216);
  uint64_t v32 = *(void *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  uint64_t v34 = *(void *)(a2 + 240);
  uint64_t v35 = *(void *)(a2 + 248);
  char v36 = *(unsigned char *)(a2 + 256);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  sub_100294854(*(void *)a2, v8, v9, v10, v11, v3, v4, v5, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v30;
  *(void *)(a1 + 216) = v31;
  *(void *)(a1 + 224) = v32;
  *(void *)(a1 + 232) = v33;
  *(void *)(a1 + 240) = v34;
  *(void *)(a1 + 248) = v35;
  *(unsigned char *)(a1 + 256) = v36;
  return a1;
}

uint64_t assignWithCopy for RelativeIMAPURL(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *(void *)a2;
  uint64_t v58 = *(void *)(a2 + 8);
  uint64_t v55 = *(void *)(a2 + 24);
  unint64_t v56 = *(void *)(a2 + 16);
  uint64_t v54 = *(void *)(a2 + 32);
  uint64_t v35 = *(void *)(a2 + 72);
  uint64_t v36 = *(void *)(a2 + 80);
  uint64_t v37 = *(void *)(a2 + 88);
  uint64_t v38 = *(void *)(a2 + 96);
  uint64_t v39 = *(void *)(a2 + 104);
  uint64_t v40 = *(void *)(a2 + 112);
  uint64_t v41 = *(void *)(a2 + 120);
  uint64_t v42 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 176);
  uint64_t v43 = *(void *)(a2 + 136);
  uint64_t v44 = *(void *)(a2 + 184);
  uint64_t v45 = *(void *)(a2 + 192);
  uint64_t v46 = *(void *)(a2 + 200);
  uint64_t v47 = *(void *)(a2 + 208);
  uint64_t v48 = *(void *)(a2 + 216);
  uint64_t v49 = *(void *)(a2 + 224);
  uint64_t v50 = *(void *)(a2 + 232);
  uint64_t v51 = *(void *)(a2 + 240);
  uint64_t v52 = *(void *)(a2 + 248);
  char v53 = *(unsigned char *)(a2 + 256);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  sub_100294854(*(void *)a2, v58, v56, v55, v54, v9, v10, v11, v8, v35, v36, v37, v38, v39, v40, v41, v42, v43, v3,
    v4,
    v5,
    v6,
    v7,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v57;
  *(void *)(a1 + 8) = v58;
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v56;
  *(void *)(a1 + 24) = v55;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v54;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v35;
  *(void *)(a1 + 80) = v36;
  *(void *)(a1 + 88) = v37;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v38;
  *(void *)(a1 + 104) = v39;
  *(void *)(a1 + 112) = v40;
  *(void *)(a1 + 120) = v41;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v42;
  *(void *)(a1 + 136) = v43;
  *(void *)(a1 + 144) = v3;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 152) = v4;
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 176) = v7;
  *(void *)(a1 + 184) = v44;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 192) = v45;
  *(void *)(a1 + 200) = v46;
  *(void *)(a1 + 208) = v47;
  *(void *)(a1 + 216) = v48;
  long long v30 = *(_OWORD *)(a1 + 224);
  *(void *)(a1 + 224) = v49;
  *(void *)(a1 + 232) = v50;
  uint64_t v31 = *(void *)(a1 + 240);
  uint64_t v32 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v51;
  *(void *)(a1 + 248) = v52;
  char v33 = *(unsigned char *)(a1 + 256);
  *(unsigned char *)(a1 + 256) = v53;
  sub_10029466C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    SBYTE8(v29),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    v32,
    v33);
  return a1;
}

void *initializeWithTake for RelativeIMAPURL(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x101uLL);
}

uint64_t assignWithTake for RelativeIMAPURL(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 256);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a1 + 192);
  long long v22 = *(_OWORD *)(a1 + 208);
  long long v23 = *(_OWORD *)(a1 + 224);
  uint64_t v24 = *(void *)(a1 + 240);
  uint64_t v25 = *(void *)(a1 + 248);
  char v26 = *(unsigned char *)(a1 + 256);
  long long v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v27;
  long long v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v28;
  long long v29 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v29;
  long long v30 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v30;
  long long v31 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v31;
  long long v32 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v32;
  long long v33 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v33;
  long long v34 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v34;
  *(unsigned char *)(a1 + 256) = v4;
  sub_10029466C(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    SBYTE8(v22),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    v25,
    v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for RelativeIMAPURL(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 257))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 256);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RelativeIMAPURL(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 256) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 257) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 257) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 256) = -(char)a2;
    }
  }
  return result;
}

void sub_1002950D4(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)a1 = a2 - 2;
    bzero((void *)(a1 + 8), 0xF8uLL);
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(a1 + 256) = a2;
}

ValueMetadata *type metadata accessor for RelativeIMAPURL()
{
  return &type metadata for RelativeIMAPURL;
}

__n128 sub_100295124(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_100295150(uint64_t a1)
{
  return sub_1002174E0(a1);
}

void ApplePushService.hash(into:)(uint64_t a1, Swift::UInt a2, unsigned int a3, uint64_t a4, char a5)
{
  if (a5)
  {
    sub_1005E3410(1uLL);
    sub_1005E3410(a2);
    sub_1005E1DB0();
  }
  else
  {
    sub_1005E3410(0);
    sub_1005E3410(a3 | ((unint64_t)a3 << 32));
  }
}

uint64_t static ApplePushService.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a4 & 1) == 0) {
    return (a8 & 1) == 0 && a2 == a6 && (sub_100219B44(a1, a5) & 1) != 0;
  }
  if ((a8 & 1) == 0 || a1 != a5) {
    return 0;
  }
  if (a2 == a6 && a3 == a7) {
    return 1;
  }
  return sub_1005E3290();
}

Swift::Int ApplePushService.hashValue.getter(Swift::UInt a1, unsigned int a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  sub_1005E33F0();
  ApplePushService.hash(into:)((uint64_t)v9, a1, a2, a3, v7);
  return sub_1005E3470();
}

Swift::Int sub_1002952EC()
{
  return ApplePushService.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_1002952FC(uint64_t a1)
{
  ApplePushService.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

Swift::Int sub_10029530C()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  sub_1005E33F0();
  ApplePushService.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  return sub_1005E3470();
}

unint64_t sub_100295370()
{
  unint64_t result = qword_1007113D0;
  if (!qword_1007113D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113D0);
  }
  return result;
}

uint64_t sub_1002953BC(uint64_t a1, uint64_t a2)
{
  return static ApplePushService.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_1002953E0()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ApplePushService()
{
  return sub_100295400();
}

uint64_t sub_100295400()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ApplePushService(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  sub_1002953E0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ApplePushService(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  sub_1002953E0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_100295400();
  return a1;
}

uint64_t assignWithTake for ApplePushService(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  sub_100295400();
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplePushService(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for ApplePushService()
{
  return &type metadata for ApplePushService;
}

void sub_10029557C(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  sub_100210AD0(0xD000000000000012, 0x80000001005E6440, v4 + 8, *(_DWORD *)(v4 + 20));
  Swift::Int v11 = v10;
  if (a4) {
    goto LABEL_13;
  }
  if (v9) {
    Swift::Int v11 = sub_100296214();
  }
  int v12 = *(_DWORD *)(v4 + 20);
  BOOL v13 = __CFADD__(v12, v11);
  int v14 = v12 + v11;
  if (v13)
  {
    __break(1u);
    goto LABEL_34;
  }
  *(_DWORD *)(v4 + 20) = v14;
  unint64_t v15 = sub_1002961FC();
  Swift::Int v17 = sub_10025DCBC(v15, v16);
  BOOL v18 = __OFADD__(v11, v17);
  v11 += v17;
  if (v18)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_1002960DC();
  if (v19) {
    sub_100296120();
  }
  sub_100296250();
  if (v13) {
    goto LABEL_35;
  }
  *(_DWORD *)(v4 + 20) = v21;
  Swift::Int v22 = v11 + v20;
  if (__OFADD__(v11, v20))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v23 = swift_bridgeObjectRetain();
  sub_10025E538(v23);
  sub_10029625C();
  sub_100295400();
  if (!__OFADD__(v22, v4)) {
    return;
  }
  __break(1u);
LABEL_13:
  if (v9) {
    Swift::Int v11 = sub_100296214();
  }
  int v24 = *(_DWORD *)(v4 + 20);
  BOOL v13 = __CFADD__(v24, v11);
  int v25 = v24 + v11;
  if (v13) {
    goto LABEL_37;
  }
  *(_DWORD *)(v4 + 20) = v25;
  unint64_t v26 = sub_1002961B0();
  Swift::Int v28 = sub_10025DCBC(v26, v27);
  BOOL v18 = __OFADD__(v11, v28);
  Swift::Int v29 = v11 + v28;
  if (v18)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_1002960DC();
  if (v30) {
    sub_100296120();
  }
  sub_100296250();
  if (v13) {
    goto LABEL_39;
  }
  *(_DWORD *)(v4 + 20) = v32;
  Swift::Int v33 = v29 + v31;
  if (__OFADD__(v29, v31))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v34 = sub_1005E3230();
  Swift::Int v36 = sub_10025DCBC(v34, v35);
  swift_bridgeObjectRelease();
  Swift::Int v37 = v33 + v36;
  if (__OFADD__(v33, v36))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  sub_1002960DC();
  if (v38) {
    sub_100296120();
  }
  sub_100296250();
  if (v13) {
    goto LABEL_42;
  }
  *(_DWORD *)(v5 + 20) = v40;
  BOOL v18 = __OFADD__(v37, v39);
  Swift::Int v41 = v37 + v39;
  if (v18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v42 = sub_1002961D0();
  Swift::Int v44 = sub_10025DCBC(v42, v43);
  BOOL v18 = __OFADD__(v41, v44);
  Swift::Int v45 = v41 + v44;
  if (v18)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  sub_1002960DC();
  if (v46) {
    sub_100296120();
  }
  sub_100296250();
  if (v13) {
    goto LABEL_45;
  }
  *(_DWORD *)(v5 + 20) = v48;
  Swift::Int v49 = v45 + v47;
  if (__OFADD__(v45, v47))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  sub_10025DCBC(a2, a3);
  sub_10029625C();
  sub_100295400();
  if (__OFADD__(v49, v5)) {
LABEL_47:
  }
    __break(1u);
}

void sub_1002957CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void (*a8)()@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_100296100();
    sub_100296184(v15, v16, v17, v18, v19, v20, v21, v22, v133, v137, v142, v146, v151, v156, v160, a5, a6, v172, v176,
      v180,
      v184,
      v188,
      v193,
      v197,
      v201,
      v205);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    v152 = a8;
    v157 = a7;
    uint64_t v28 = v27;
    swift_retain();
    uint64_t v29 = sub_1002961FC();
    uint64_t v34 = ByteBufferAllocator.buffer(string:)(v29, v30, v31, v32, v33);
    uint64_t v161 = v26 & 0xFFFFFFFFFFFFFFLL;
    BOOL v37 = static ByteBuffer.== infix(_:_:)(v34, v36, v35 & 0xFFFFFFFFFFFFFFLL, v28, v24, v26 & 0xFFFFFFFFFFFFFFLL);
    swift_release();
    swift_release();
    if (v37)
    {
      sub_100296100();
      sub_100296158(v38, v39, v40, v41, v42, v43, v44, v45, v134, v138, v143, v147, a8, v157, v161, v165, v169, v173, v177,
        v181,
        v185,
        v189,
        v194,
        v198,
        v202,
        v206);
      uint64_t v47 = v46;
      unsigned int v49 = v48;
      unint64_t v51 = v50;
      BOOL v192 = v37;
      unint64_t v52 = HIDWORD(v48);
      swift_beginAccess();
      v53._rawValue = (void *)sub_1001F9054(*(void *)(v47 + 24) + ((v51 >> 24) & 0xFFFF00 | BYTE6(v51)) + v49, v52 - v49);
      NIOIMAPCore2::MailboxName v209 = MailboxName.init(_:)(v53);
      rawValue = v209.bytes._rawValue;
      LODWORD(v56) = v209._hashValue._value;
      swift_release();
      swift_release();
      uint64_t v55 = 0;
      uint64_t v56 = v56;
LABEL_4:
      *(void *)uint64_t v153 = rawValue;
      *(void *)(v153 + 8) = v56;
      *(void *)(v153 + 16) = v55;
      *(unsigned char *)(v153 + 24) = !v192;
      type metadata accessor for ResponsePayload();
      swift_storeEnumTagMultiPayload();
      return;
    }
    HIDWORD(v189) = v37;
    swift_retain();
    uint64_t v57 = sub_1002961B0();
    uint64_t v62 = ByteBufferAllocator.buffer(string:)(v57, v58, v59, v60, v61);
    BOOL v65 = static ByteBuffer.== infix(_:_:)(v62, v64, v63 & 0xFFFFFFFFFFFFFFLL, v28, v24, v161);
    swift_release();
    swift_release();
    if (!v65)
    {
      sub_1005E2C80(43);
      swift_bridgeObjectRelease();
      v210._uint64_t countAndFlagsBits = ByteBuffer.description.getter();
      sub_1005E1E30(v210);
      swift_bridgeObjectRelease();
      sub_100296090();
      swift_allocError();
      *uint64_t v67 = 0xD000000000000029;
      v67[1] = 0x80000001005E6390;
      v67[2] = 0xD000000000000020;
      v67[3] = 0x80000001005E63C0;
      v67[4] = 66;
      swift_willThrow();
LABEL_8:
      swift_release();
      return;
    }
    sub_100296100();
    sub_100308D44(a1, a2, a3, a4, v165, v169, (uint64_t)v157, v66, v134, v138, v143, v147, v152, v157, v161, v165, v169, v173, v177,
      v181,
      v185,
      v189,
      v194,
      v198,
      v202,
      v206);
    uint64_t v69 = (uint64_t)"SHSERVICE response type: ";
    uint64_t v71 = v70;
    uint64_t v73 = sub_10031E368(v70, v72, v68 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 49);
    uint64_t v75 = v74;
    uint64_t v162 = v71;
    uint64_t v76 = HIBYTE(v74) & 0xF;
    uint64_t v77 = v73 & 0xFFFFFFFFFFFFLL;
    if ((v75 & 0x2000000000000000) != 0) {
      uint64_t v78 = v76;
    }
    else {
      uint64_t v78 = v73 & 0xFFFFFFFFFFFFLL;
    }
    if (!v78)
    {
      swift_bridgeObjectRelease();
LABEL_69:
      sub_100296090();
      swift_allocError();
      *char v131 = 0x1000000000000019;
      v131[1] = 0x80000001005E63F0;
      v131[2] = 0xD000000000000020;
      v131[3] = v69 | 0x8000000000000000;
      v131[4] = 51;
      swift_willThrow();
      swift_release();
      goto LABEL_8;
    }
    if ((v75 & 0x1000000000000000) != 0)
    {
      char v144 = v75;
      uint64_t v148 = sub_1002368D0(v73, v75, 10);
      LOBYTE(v71) = v132;
      goto LABEL_56;
    }
    if ((v75 & 0x2000000000000000) == 0)
    {
      if ((v73 & 0x1000000000000000) != 0) {
        char v79 = (unsigned __int8 *)((v75 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        char v79 = (unsigned __int8 *)sub_1005E2D30();
      }
      uint64_t v148 = (uint64_t)sub_1002368A0(v79, v77);
      uint64_t v69 = (uint64_t)"SHSERVICE response type: ";
      LOBYTE(v71) = v80 & 1;
LABEL_56:
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0 && (v148 & 0x8000000000000000) == 0)
      {
        sub_100296100();
        sub_100296184(v95, v96, v97, v98, v99, v100, v101, v102, v135, v139, v144, v148, v154, v158, v162, v166, v170, v174, v178,
          v182,
          v186,
          v190,
          v195,
          v199,
          v203,
          v207);
        uint64_t v140 = v104;
        unint64_t v145 = v103;
        uint64_t v106 = v105;
        uint64_t v107 = sub_1002961D0();
        uint64_t v112 = ByteBufferAllocator.buffer(string:)(v107, v108, v109, v110, v111);
        unint64_t v113 = v140 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v141 = v106;
        LOBYTE(v106) = static ByteBuffer.== infix(_:_:)(v106, v145, v113, v112, v115, v114 & 0xFFFFFFFFFFFFFFLL);
        swift_release();
        if (v106)
        {
          sub_100296100();
          sub_100296158(v116, v117, v118, v119, v120, v121, v122, v123, v69, v141, v145, v149, v155, v159, v163, v167, v171, v175, v179,
            v183,
            v187,
            v191,
            v196,
            v200,
            v204,
            v208);
          uint64_t v56 = sub_10031E368(v128, v129, v127 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, v136 | 0x8000000000000000, 62);
          uint64_t v55 = v130;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          rawValue = v150;
          goto LABEL_4;
        }
        sub_1005E2C80(38);
        swift_bridgeObjectRelease();
        v211._uint64_t countAndFlagsBits = ByteBuffer.description.getter();
        sub_1005E1E30(v211);
        swift_bridgeObjectRelease();
        v212._uint64_t countAndFlagsBits = 10322146;
        v212._char object = (void *)0xA300000000000000;
        sub_1005E1E30(v212);
        sub_100296090();
        swift_allocError();
        *int v124 = 0x1000000000000021;
        v124[1] = 0x80000001005E6410;
        v124[2] = 0xD000000000000020;
        v124[3] = v69 | 0x8000000000000000;
        v124[4] = 57;
        swift_willThrow();
        swift_release();
        swift_release();
        goto LABEL_8;
      }
      goto LABEL_69;
    }
    uint64_t v174 = v73;
    uint64_t v178 = v75 & 0xFFFFFFFFFFFFFFLL;
    if (v73 == 43)
    {
      if (!v76) {
        goto LABEL_73;
      }
      char v81 = "SHSERVICE response type: ";
      if (v76 == 1) {
        goto LABEL_41;
      }
      sub_100237288();
      if (!v86 & v85) {
        goto LABEL_41;
      }
      uint64_t v148 = v88;
      if (v87 != 2)
      {
        sub_100237288();
        if (!v86 & v85) {
          goto LABEL_41;
        }
        sub_100296238();
        if (v89 != 3)
        {
          while (1)
          {
            sub_100237298();
            if (!v86 & v85) {
              goto LABEL_41;
            }
            sub_100296140();
            if (!v86) {
              goto LABEL_41;
            }
            uint64_t v148 = v91 + v90;
            if (__OFADD__(v91, v90)) {
              goto LABEL_41;
            }
            sub_1002961EC();
            if (v86) {
              goto LABEL_55;
            }
          }
        }
      }
    }
    else
    {
      if (v73 == 45)
      {
        if (v76)
        {
          char v81 = "SHSERVICE response type: ";
          if (v76 != 1)
          {
            sub_100237288();
            if (!(!v86 & v85))
            {
              if (v83 == 2)
              {
                LOBYTE(v71) = 0;
                uint64_t v148 = -(uint64_t)v84;
LABEL_55:
                uint64_t v69 = (uint64_t)v81;
                goto LABEL_56;
              }
              if ((v82 - 48) <= 9u)
              {
                uint64_t v148 = -10 * v84 - (v82 - 48);
                if (v83 == 3) {
                  goto LABEL_54;
                }
                while (1)
                {
                  sub_100237298();
                  if (!v86 & v85) {
                    break;
                  }
                  sub_100296140();
                  if (!v86) {
                    break;
                  }
                  uint64_t v148 = v126 - v125;
                  if (__OFSUB__(v126, v125)) {
                    break;
                  }
                  sub_1002961EC();
                  if (v86) {
                    goto LABEL_55;
                  }
                }
              }
            }
          }
LABEL_41:
          uint64_t v148 = 0;
          LOBYTE(v71) = 1;
          goto LABEL_55;
        }
        __break(1u);
LABEL_73:
        __break(1u);
        return;
      }
      char v81 = "SHSERVICE response type: ";
      if (!v76 || (v73 - 48) > 9u) {
        goto LABEL_41;
      }
      uint64_t v148 = (v73 - 48);
      if (v76 != 1)
      {
        sub_100237288();
        if (!v86 & v85) {
          goto LABEL_41;
        }
        sub_100296238();
        if (v92 != 2)
        {
          while (1)
          {
            sub_100237298();
            if (!v86 & v85) {
              goto LABEL_41;
            }
            sub_100296140();
            if (!v86) {
              goto LABEL_41;
            }
            uint64_t v148 = v94 + v93;
            if (__OFADD__(v94, v93)) {
              goto LABEL_41;
            }
            sub_1002961EC();
            if (v86) {
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_54:
    LOBYTE(v71) = 0;
    goto LABEL_55;
  }
}

unint64_t sub_100296090()
{
  unint64_t result = qword_1007113D8;
  if (!qword_1007113D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113D8);
  }
  return result;
}

void sub_1002960DC()
{
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 20);
  sub_100210AD0(32, 0xE100000000000000, v1, v3);
}

void sub_100296100()
{
  sub_10031E2BC(v0, v1, v2);
}

Swift::Int sub_100296120()
{
  uint64_t v2 = 32;
  unint64_t v3 = 0xE100000000000000;
  return ByteBuffer._setStringSlowpath(_:at:)(*(Swift::String *)&v2, v0);
}

void sub_100296158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void (*a13)(), void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100308D44(v26, v27, v28, v29, a16, a17, (uint64_t)a14, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_100296184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void (*a13)(), void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100308D44(v26, v27, v28, v30, a16, a17, v29, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

uint64_t sub_1002961B0()
{
  return 0x737265762D737061;
}

uint64_t sub_1002961D0()
{
  return 0x69706F742D737061;
}

uint64_t sub_1002961FC()
{
  return 0x786F626C69616DLL;
}

Swift::Int sub_100296214()
{
  unint64_t v4 = 0xD000000000000012;
  unint64_t v3 = v1 | 0x8000000000000000;
  return ByteBuffer._setStringSlowpath(_:at:)(*(Swift::String *)&v4, v0);
}

uint64_t sub_10029625C()
{
  return v0;
}

uint64_t ContinuationRequest.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    sub_1005E3410(1uLL);
    swift_beginAccess();
    return sub_1005E3400();
  }
  else
  {
    sub_1005E3410(0);
    sub_1002965E4(a2);
    swift_bridgeObjectRetain();
    ResponseText.hash(into:)(a1, a2);
    sub_100212D94(a2);
    return swift_bridgeObjectRelease();
  }
}

BOOL static ContinuationRequest.__derived_enum_equals(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a4)
  {
    if (a8)
    {
      unint64_t v17 = sub_1002968D8();
      sub_10029667C(v17, v18, v19, v20);
      sub_10029667C(a5, a6, a7, 1);
      static ByteBuffer.== infix(_:_:)(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL, a5, a6, a7 & 0xFFFFFFFFFFFFFFLL);
      unint64_t v21 = sub_1002968C4();
      sub_1002966C8(v21, v22, v23, 1);
      unint64_t v24 = sub_1002968D8();
      sub_1002966C8(v24, v25, v26, v27);
      return v8 & 1;
    }
    return 0;
  }
  if (a8) {
    return 0;
  }
  unint64_t v15 = a5 & 0xF000000000000007;
  if ((~a1 & 0xF000000000000007) != 0)
  {
    if (v15 == 0xF000000000000007) {
      return 0;
    }
    sub_1002968EC();
    sub_10029690C();
    sub_1002965E4(a5);
    sub_1002965E4(a1);
    static ResponseTextCode.__derived_enum_equals(_:_:)();
    char v8 = v28;
    sub_100212D94(a5);
    sub_100212D94(a1);
    if ((v8 & 1) == 0)
    {
      sub_1002966C8(a5, a6, a7, 0);
      sub_1002968A8(a1);
      return 0;
    }
  }
  else
  {
    if (v15 != 0xF000000000000007) {
      return 0;
    }
    sub_1002968EC();
    sub_10029690C();
  }
  if (a2 != a6 || a3 != a7)
  {
    sub_1005E3290();
    unint64_t v30 = sub_1002968C4();
    sub_1002966C8(v30, v31, v32, 0);
    sub_1002968A8(a1);
    return (v8 & 1) != 0;
  }
  sub_1002968A8(a5);
  sub_1002968A8(a1);
  return 1;
}

Swift::Int ContinuationRequest.hashValue.getter(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  sub_1005E33F0();
  ContinuationRequest.hash(into:)((uint64_t)v9, a1, a2, a3, v7);
  return sub_1005E3470();
}

Swift::Int sub_100296540()
{
  return ContinuationRequest.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100296550(uint64_t a1)
{
  return ContinuationRequest.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

Swift::Int sub_100296560()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  sub_1005E33F0();
  ContinuationRequest.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  return sub_1005E3470();
}

BOOL sub_1002965C0(uint64_t a1, uint64_t a2)
{
  return static ContinuationRequest.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

unint64_t sub_1002965E4(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return sub_1002965F8(result);
  }
  return result;
}

unint64_t sub_1002965F8(unint64_t result)
{
  switch((result >> 59) & 0x1E | (result >> 2) & 1)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      unint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10029667C(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_retain();
  }
  else
  {
    sub_1002965E4(a1);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1002966C8(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_release();
  }
  else
  {
    sub_100212D94(a1);
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_100296718()
{
  unint64_t result = qword_1007113E0;
  if (!qword_1007113E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113E0);
  }
  return result;
}

uint64_t destroy for ContinuationRequest(uint64_t a1)
{
  return sub_1002966C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for ContinuationRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10029667C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ContinuationRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10029667C(*(void *)a2, v4, v5, v6);
  unint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_1002966C8(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ContinuationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  sub_1002966C8(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for ContinuationRequest()
{
  return &type metadata for ContinuationRequest;
}

uint64_t sub_1002968A8(unint64_t a1)
{
  return sub_1002966C8(a1, v2, v1, 0);
}

uint64_t sub_1002968C4()
{
  return v0;
}

uint64_t sub_1002968D8()
{
  return v0;
}

uint64_t sub_1002968EC()
{
  return sub_10029667C(v2, v1, v0, 0);
}

uint64_t sub_10029690C()
{
  return sub_10029667C(v2, v1, v0, 0);
}

void static ExtendedSearchResponse.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  char v25 = *(unsigned char *)(a1 + 32);
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *(void *)(a2 + 8);
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t v29 = *(void *)(a2 + 24);
  char v30 = *(unsigned char *)(a2 + 32);
  if (!v22)
  {
    if (!v27) {
      goto LABEL_7;
    }
LABEL_6:
    sub_1000E872C(*(void *)a1, v22);
    uint64_t v31 = sub_100298B04();
    sub_1000E872C(v31, v32);
    sub_100298B34();
    uint64_t v33 = sub_100298B04();
    sub_1000E8770(v33, v34);
LABEL_8:
    sub_100298B94();
    return;
  }
  if (!v27) {
    goto LABEL_6;
  }
  v44[0] = *(void *)a1;
  v44[1] = v22;
  v44[2] = v24;
  v44[3] = v23;
  char v45 = v25 & 1;
  v46[0] = v26;
  v46[1] = v27;
  v46[2] = v28;
  v46[3] = v29;
  char v47 = v30 & 1;
  char v43 = static SearchCorrelator.__derived_struct_equals(_:_:)((uint64_t)v44, (uint64_t)v46);
  sub_100298B58();
  sub_100298B58();
  sub_1000E872C(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100298B34();
  if ((v43 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  if (*(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33)) {
    goto LABEL_8;
  }
  sub_100298B94();
  sub_100219718(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_100296AA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 8;
  Swift::Int v5 = *(unsigned int *)(v1 + 20);
  uint64_t v6 = sub_1002547FC();
  sub_100210AD0(v6, v7, v4, v5);
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = sub_1002547FC();
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v5);
  }
  Swift::Int v11 = v8;
  int v12 = *(_DWORD *)(v2 + 20);
  BOOL v13 = __CFADD__(v12, v8);
  int v14 = v12 + v8;
  if (v13)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(_DWORD *)(v2 + 20) = v14;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    uint64_t v42 = v4;
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    v43[0] = *(void *)a1;
    v43[1] = v15;
    v43[2] = v17;
    v43[3] = v16;
    char v44 = *(unsigned char *)(a1 + 32) & 1;
    swift_retain();
    swift_retain();
    uint64_t v18 = sub_100298C28();
    sub_1000E872C(v18, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002ABE20((uint64_t)v43);
    uint64_t v21 = v20;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_100298C28();
    uint64_t v4 = v42;
    sub_1000E8770(v22, v23);
  }
  else
  {
    uint64_t v21 = 0;
  }
  Swift::Int v24 = v11 + v21;
  if (__OFADD__(v11, v21)) {
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 33) == 1)
  {
    Swift::Int v25 = *(unsigned int *)(v2 + 20);
    sub_100210AD0(1145656608, 0xE400000000000000, v4, *(_DWORD *)(v2 + 20));
    if (v27)
    {
      v28._uint64_t countAndFlagsBits = 1145656608;
      v28._char object = (void *)0xE400000000000000;
      Swift::Int v26 = ByteBuffer._setStringSlowpath(_:at:)(v28, v25);
    }
    int v29 = *(_DWORD *)(v2 + 20);
    BOOL v13 = __CFADD__(v29, v26);
    int v30 = v29 + v26;
    if (v13) {
      goto LABEL_30;
    }
    *(_DWORD *)(v2 + 20) = v30;
  }
  else
  {
    Swift::Int v26 = 0;
  }
  BOOL v31 = __OFADD__(v24, v26);
  Swift::Int v32 = v24 + v26;
  if (v31) {
    goto LABEL_26;
  }
  if (*(void *)(*(void *)(a1 + 40) + 16))
  {
    Swift::Int v33 = *(unsigned int *)(v2 + 20);
    sub_100210AD0(32, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
    if (v35)
    {
      v36._uint64_t countAndFlagsBits = 32;
      v36._char object = (void *)0xE100000000000000;
      Swift::Int v34 = ByteBuffer._setStringSlowpath(_:at:)(v36, v33);
    }
    int v37 = *(_DWORD *)(v2 + 20);
    BOOL v13 = __CFADD__(v37, v34);
    int v38 = v37 + v34;
    if (v13) {
      goto LABEL_29;
    }
    *(_DWORD *)(v2 + 20) = v38;
  }
  else
  {
    Swift::Int v34 = 0;
  }
  Swift::Int v39 = v32 + v34;
  if (!__OFADD__(v32, v34))
  {
    uint64_t v40 = swift_bridgeObjectRetain();
    uint64_t v41 = sub_1002C2AB4(v40, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 0, sub_100298314, 0);
    swift_bridgeObjectRelease();
    if (!__OFADD__(v39, v41))
    {
      sub_100298B94();
      return;
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t ExtendedSearchResponse.correlator.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100298978(v1, a1, &qword_1007113E8);
}

uint64_t ExtendedSearchResponse.correlator.setter(uint64_t a1)
{
  return sub_100298338(a1, v1);
}

uint64_t ExtendedSearchResponse.kind.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ExtendedSearchResponse.kind.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result & 1;
  return result;
}

Swift::UInt32 (__swiftcall *ExtendedSearchResponse.kind.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

void __swiftcall ExtendedSearchResponse.init(correlator:kind:returnData:)(NIOIMAPCore2::ExtendedSearchResponse *__return_ptr retstr, NIOIMAPCore2::SearchCorrelator_optional *correlator, NIOIMAPCore2::ExtendedSearchResponse::Kind kind, Swift::OpaquePointer returnData)
{
  NIOIMAPCore2::ExtendedSearchResponse::Kind v6 = kind & 1;
  sub_1002989D0((uint64_t)correlator, (uint64_t)v9, &qword_1007113E8);
  Swift::Bool v7 = v10;
  long long v8 = v9[1];
  retstr->correlator.value.tag = (Swift::String)v9[0];
  *(_OWORD *)&retstr->correlator.value.mailbox.value.bytes._rawValue = v8;
  retstr->correlator.value.uidValidity.is_nil = v7;
  retstr->kind = v6;
  retstr->returnData = returnData;
}

uint64_t ExtendedSearchResponse.hash(into:)()
{
  if (*(void *)(v0 + 8))
  {
    sub_1005E3420(1u);
    uint64_t v1 = sub_100298BB0();
    sub_1000E872C(v1, v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    SearchCorrelator.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100298BB0();
    sub_1000E8770(v3, v4);
  }
  else
  {
    sub_1005E3420(0);
  }
  sub_1005E3410(*(unsigned __int8 *)(v0 + 33));
  swift_bridgeObjectRetain();
  sub_100229C38();
  return swift_bridgeObjectRelease();
}

Swift::Int ExtendedSearchResponse.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_100296F10()
{
  return sub_1005E3470();
}

uint64_t ExtendedSearchResponse.matchedUIDs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000566C(&qword_100710528);
  __chkstk_darwin(v3 - 8);
  sub_100298AE8();
  if (v4 == 1)
  {
    sub_10029703C(v1);
    sub_10000566C(&qword_100710538);
    sub_10023C3DC();
    uint64_t v5 = sub_100298C70();
    v6(v5);
    uint64_t v7 = sub_10000566C(&qword_10070FD90);
    return storeEnumTagSinglePayload for ClientCommand(a1, 0, 1, v7);
  }
  else
  {
    sub_10000566C(&qword_10070FD90);
    uint64_t v9 = sub_100298B7C();
    return storeEnumTagSinglePayload for ClientCommand(v9, v10, v11, v12);
  }
}

uint64_t sub_10029703C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000566C(&qword_100710528);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v70 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v78 = (uint64_t)&v68 - v8;
  __chkstk_darwin(v7);
  uint64_t v73 = (uint64_t)&v68 - v9;
  uint64_t v80 = sub_10000566C(&qword_100710520);
  __chkstk_darwin(v80);
  uint64_t v79 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for SearchReturnData();
  uint64_t v11 = *(void *)(v84 - 8);
  uint64_t v12 = __chkstk_darwin(v84);
  int v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v68 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v68 - v20;
  uint64_t v22 = sub_10000566C(&qword_100711400);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v72 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v71 = (uint64_t)&v68 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  int v29 = (char *)&v68 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v75 = (char *)&v68 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v34 = __chkstk_darwin(v33);
  Swift::String v36 = (char *)&v68 - v35;
  __chkstk_darwin(v34);
  uint64_t v76 = a1;
  uint64_t v77 = (char *)&v68 - v39;
  uint64_t v40 = *(void *)(v2 + 40);
  uint64_t v85 = v40;
  unint64_t v41 = *(void *)(v40 + 16);
  char v81 = v14;
  unint64_t v83 = v41;
  if (!v41)
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = 1;
    uint64_t v49 = (uint64_t)v77;
    uint64_t v50 = v11;
    goto LABEL_19;
  }
  uint64_t v68 = v38;
  uint64_t v69 = v37;
  uint64_t v42 = v40 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v74 = v11;
  uint64_t v43 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  unint64_t v44 = 0;
  while (1)
  {
    sub_1002983A0(v42, (uint64_t)v21);
    sub_1002983A0((uint64_t)v21, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      swift_bridgeObjectRetain();
      sub_100298404((uint64_t)v19);
      goto LABEL_7;
    }
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v19, 1, v80) == 1)
    {
      swift_bridgeObjectRetain();
      sub_100007A48((uint64_t)v19, &qword_100710530);
LABEL_7:
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v36, 1, 1, v4);
      goto LABEL_9;
    }
    uint64_t v45 = v79;
    sub_1002989D0((uint64_t)v19, v79, &qword_100710520);
    sub_1002989D0(v45, (uint64_t)v36, &qword_100710528);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v36, 0, 1, v4);
    swift_bridgeObjectRetain();
LABEL_9:
    sub_100298404((uint64_t)v21);
    sub_10001D550((uint64_t)&v85);
    int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)v36, 1, v4);
    uint64_t result = sub_100007A48((uint64_t)v36, &qword_100711400);
    if (EnumTagSingle != 1) {
      break;
    }
    ++v44;
    v42 += v43;
    unint64_t v41 = v83;
    if (v83 == v44)
    {
      uint64_t v48 = 1;
      a1 = v76;
      uint64_t v49 = (uint64_t)v77;
LABEL_15:
      int v14 = v81;
      uint64_t v50 = v74;
      goto LABEL_19;
    }
  }
  unint64_t v41 = v83;
  uint64_t v49 = (uint64_t)v77;
  if (v83 == v44)
  {
    uint64_t v48 = 1;
    a1 = v76;
    goto LABEL_15;
  }
  int v14 = v81;
  uint64_t v50 = v74;
  if (v44 >= v83)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v51 = v68;
  sub_100297984(v42, v68);
  uint64_t v52 = v69;
  sub_100298978(v51, v69, &qword_100711400);
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v52, 1, v4);
  a1 = v76;
  if (result == 1)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v53 = v52;
  uint64_t v54 = v73;
  sub_1002989D0(v53, v73, &qword_100710528);
  sub_100007A48(v51, &qword_100711400);
  sub_1002989D0(v54, v49, &qword_100710528);
  uint64_t v48 = 0;
LABEL_19:
  storeEnumTagSinglePayload for ClientCommand(v49, v48, 1, v4);
  sub_10001D550((uint64_t)&v85);
  if (getEnumTagSinglePayload for ClientCommand(v49, 1, v4) != 1) {
    return sub_1002989D0(v49, a1, &qword_100710528);
  }
  if (!v41)
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = 1;
    uint64_t v63 = (uint64_t)v75;
    goto LABEL_35;
  }
  uint64_t v55 = v40 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  uint64_t v56 = *(void *)(v50 + 72);
  swift_bridgeObjectRetain();
  unint64_t v57 = 0;
  uint64_t v58 = v82;
  while (1)
  {
    sub_1002983A0(v55, v58);
    sub_1002983A0(v58, (uint64_t)v14);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v59 = (uint64_t)&v14[*(int *)(sub_10000566C(&qword_100710550) + 48)];
      uint64_t v60 = v78;
      sub_1002989D0(v59, v78, &qword_100710528);
      sub_1002989D0(v60, (uint64_t)v29, &qword_100710528);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v29, 0, 1, v4);
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_100298404((uint64_t)v14);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v29, 1, 1, v4);
    }
    sub_100298404(v82);
    sub_10001D550((uint64_t)&v85);
    int v61 = getEnumTagSinglePayload for ClientCommand((uint64_t)v29, 1, v4);
    uint64_t result = sub_100007A48((uint64_t)v29, &qword_100711400);
    if (v61 != 1) {
      break;
    }
    ++v57;
    v55 += v56;
    int v14 = v81;
    if (v83 == v57)
    {
      uint64_t v62 = 1;
      uint64_t v63 = (uint64_t)v75;
      a1 = v76;
      uint64_t v49 = (uint64_t)v77;
      goto LABEL_35;
    }
  }
  uint64_t v63 = (uint64_t)v75;
  if (v83 == v57)
  {
    uint64_t v62 = 1;
    a1 = v76;
    uint64_t v49 = (uint64_t)v77;
    goto LABEL_35;
  }
  uint64_t v49 = (uint64_t)v77;
  if (v57 >= v83)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v64 = v71;
  sub_100297B00(v55, v71);
  uint64_t v65 = v72;
  sub_100298978(v64, v72, &qword_100711400);
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v65, 1, v4);
  if (result == 1)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  uint64_t v66 = v65;
  uint64_t v67 = v70;
  sub_1002989D0(v66, v70, &qword_100710528);
  sub_100007A48(v64, &qword_100711400);
  sub_1002989D0(v67, v63, &qword_100710528);
  uint64_t v62 = 0;
  a1 = v76;
LABEL_35:
  storeEnumTagSinglePayload for ClientCommand(v63, v62, 1, v4);
  sub_10001D550((uint64_t)&v85);
  if (getEnumTagSinglePayload for ClientCommand(v63, 1, v4) == 1)
  {
    sub_100223B18();
    sub_1005E3680();
    sub_100007A48(v63, &qword_100711400);
  }
  else
  {
    sub_1002989D0(v63, a1, &qword_100710528);
  }
  return sub_100007A48(v49, &qword_100711400);
}

uint64_t ExtendedSearchResponse.matchedSequenceNumbers.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000566C(&qword_100710528);
  __chkstk_darwin(v3 - 8);
  sub_100298AE8();
  if (v4)
  {
    sub_10000566C(&qword_100710A00);
    uint64_t v5 = sub_100298B7C();
    return storeEnumTagSinglePayload for ClientCommand(v5, v6, v7, v8);
  }
  else
  {
    sub_10029703C(v1);
    sub_10000566C(&qword_100710538);
    sub_10023C3DC();
    uint64_t v10 = sub_100298C70();
    v11(v10);
    uint64_t v12 = sub_10000566C(&qword_100710A00);
    return storeEnumTagSinglePayload for ClientCommand(a1, 0, 1, v12);
  }
}

uint64_t sub_100297984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchReturnData();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000566C(&qword_100710520);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002983A0(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v6, 1, v7) != 1)
    {
      sub_1002989D0((uint64_t)v6, (uint64_t)v9, &qword_100710520);
      sub_1002989D0((uint64_t)v9, a2, &qword_100710528);
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    sub_100007A48((uint64_t)v6, &qword_100710530);
  }
  else
  {
    sub_100298404((uint64_t)v6);
  }
  uint64_t v10 = 1;
LABEL_7:
  uint64_t v11 = sub_10000566C(&qword_100710528);
  return storeEnumTagSinglePayload for ClientCommand(a2, v10, 1, v11);
}

uint64_t sub_100297B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchReturnData();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002983A0(a1, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v7 = sub_10000566C(&qword_100710550);
    sub_1002989D0((uint64_t)&v6[*(int *)(v7 + 48)], a2, &qword_100710528);
    uint64_t v8 = 0;
  }
  else
  {
    sub_100298404((uint64_t)v6);
    uint64_t v8 = 1;
  }
  uint64_t v9 = sub_10000566C(&qword_100710528);
  return storeEnumTagSinglePayload for ClientCommand(a2, v8, 1, v9);
}

void ExtendedSearchResponse.count.getter()
{
  sub_1001FE5B4();
  type metadata accessor for SearchReturnData();
  sub_100298A28();
  __chkstk_darwin(v5);
  sub_100298A48();
  __chkstk_darwin(v6);
  sub_100298AA0();
  __chkstk_darwin(v7);
  sub_100298A8C();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - v9;
  sub_100298AC8();
  if (v0)
  {
    uint64_t v12 = v3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    unint64_t v14 = 0;
    while (1)
    {
      sub_100298BE0();
      sub_100298C10();
      if (sub_100298BF8() == 3) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_100298404(v2);
      sub_100298404((uint64_t)v10);
      sub_10001D550((uint64_t)&v16);
      ++v14;
      v12 += v13;
      if (v0 == v14) {
        goto LABEL_11;
      }
    }
    sub_100298404((uint64_t)v10);
    if (v0 == v14)
    {
LABEL_11:
      sub_10001D550((uint64_t)&v16);
      goto LABEL_12;
    }
    if (v14 >= v0)
    {
      __break(1u);
    }
    else
    {
      sub_100298BC8();
      sub_100298C58();
      if (sub_100298B1C() == 3)
      {
        sub_100298404(v1);
        goto LABEL_11;
      }
    }
    sub_100298404(v4);
    sub_100298404(v1);
    __break(1u);
  }
  else
  {
LABEL_12:
    sub_1001FE57C();
  }
}

void ExtendedSearchResponse.minUID.getter()
{
  sub_1001FE5B4();
  type metadata accessor for SearchReturnData();
  sub_100298A28();
  __chkstk_darwin(v5);
  sub_100298A48();
  __chkstk_darwin(v6);
  sub_100298AA0();
  __chkstk_darwin(v7);
  sub_100298A8C();
  __chkstk_darwin(v8);
  sub_100298C40();
  if (!v9 || (sub_100298AC8(), !v0))
  {
LABEL_10:
    sub_100298C84();
LABEL_11:
    sub_100298AB4(v10);
    sub_1001FE57C();
    return;
  }
  sub_100298A64();
  while (1)
  {
    sub_100298BE0();
    sub_100298C10();
    if (!sub_100298BF8()) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_100298404(v2);
    sub_100298404(v3);
    sub_10001D550((uint64_t)&v11);
    sub_100298AD8();
    if (v9)
    {
      sub_10001D550((uint64_t)&v11);
      goto LABEL_10;
    }
  }
  sub_100298404(v3);
  sub_100298BC8();
  sub_100298C58();
  if (!sub_100298B1C())
  {
    sub_100298C90();
    sub_10001D550((uint64_t)&v11);
    unsigned __int8 v10 = 0;
    goto LABEL_11;
  }
  sub_100298404(v4);
  sub_100298404(v1);
  __break(1u);
}

void ExtendedSearchResponse.minSequenceNumber.getter()
{
  sub_1001FE5B4();
  type metadata accessor for SearchReturnData();
  sub_100298A28();
  __chkstk_darwin(v5);
  sub_100298A48();
  __chkstk_darwin(v6);
  sub_100298AA0();
  __chkstk_darwin(v7);
  sub_100298A8C();
  __chkstk_darwin(v8);
  sub_100298CA8();
  if ((v9 & 1) != 0 || (sub_100298AC8(), !v0))
  {
LABEL_9:
    sub_100298C84();
LABEL_10:
    sub_100298AB4(v11);
    sub_1001FE57C();
    return;
  }
  sub_100298A64();
  while (1)
  {
    sub_100298BE0();
    sub_100298C10();
    if (!sub_100298BF8()) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_100298404(v2);
    sub_100298404(v3);
    sub_10001D550((uint64_t)&v12);
    sub_100298AD8();
    if (v10)
    {
      sub_10001D550((uint64_t)&v12);
      goto LABEL_9;
    }
  }
  sub_100298404(v3);
  sub_100298BC8();
  sub_100298C58();
  if (!sub_100298B1C())
  {
    sub_100298C90();
    sub_10001D550((uint64_t)&v12);
    unsigned __int8 v11 = 0;
    goto LABEL_10;
  }
  sub_100298404(v4);
  sub_100298404(v1);
  __break(1u);
}

void ExtendedSearchResponse.maxUID.getter()
{
  sub_1001FE5B4();
  type metadata accessor for SearchReturnData();
  sub_100298A28();
  __chkstk_darwin(v5);
  sub_100298A48();
  __chkstk_darwin(v6);
  sub_100298AA0();
  __chkstk_darwin(v7);
  sub_100298A8C();
  __chkstk_darwin(v8);
  sub_100298C40();
  if (!v9 || (sub_100298AC8(), !v0))
  {
LABEL_10:
    sub_100298C84();
LABEL_11:
    sub_100298AB4(v10);
    sub_1001FE57C();
    return;
  }
  sub_100298A64();
  while (1)
  {
    sub_100298BE0();
    sub_100298C10();
    if (sub_100298BF8() == 1) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_100298404(v2);
    sub_100298404(v3);
    sub_10001D550((uint64_t)&v11);
    sub_100298AD8();
    if (v9)
    {
      sub_10001D550((uint64_t)&v11);
      goto LABEL_10;
    }
  }
  sub_100298404(v3);
  sub_100298BC8();
  sub_100298C58();
  if (sub_100298B1C() == 1)
  {
    sub_100298C90();
    sub_10001D550((uint64_t)&v11);
    unsigned __int8 v10 = 0;
    goto LABEL_11;
  }
  sub_100298404(v4);
  sub_100298404(v1);
  __break(1u);
}

void ExtendedSearchResponse.maxSequenceNumber.getter()
{
  sub_1001FE5B4();
  type metadata accessor for SearchReturnData();
  sub_100298A28();
  __chkstk_darwin(v5);
  sub_100298A48();
  __chkstk_darwin(v6);
  sub_100298AA0();
  __chkstk_darwin(v7);
  sub_100298A8C();
  __chkstk_darwin(v8);
  sub_100298CA8();
  if ((v9 & 1) != 0 || (sub_100298AC8(), !v0))
  {
LABEL_9:
    sub_100298C84();
LABEL_10:
    sub_100298AB4(v11);
    sub_1001FE57C();
    return;
  }
  sub_100298A64();
  while (1)
  {
    sub_100298BE0();
    sub_100298C10();
    if (sub_100298BF8() == 1) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_100298404(v2);
    sub_100298404(v3);
    sub_10001D550((uint64_t)&v12);
    sub_100298AD8();
    if (v10)
    {
      sub_10001D550((uint64_t)&v12);
      goto LABEL_9;
    }
  }
  sub_100298404(v3);
  sub_100298BC8();
  sub_100298C58();
  if (sub_100298B1C() == 1)
  {
    sub_100298C90();
    sub_10001D550((uint64_t)&v12);
    unsigned __int8 v11 = 0;
    goto LABEL_10;
  }
  sub_100298404(v4);
  sub_100298404(v1);
  __break(1u);
}

uint64_t *sub_100298314(uint64_t *a1)
{
  return sub_1002AFF2C(a1);
}

uint64_t sub_100298338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007113E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002983A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchReturnData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100298404(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchReturnData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100298464()
{
  unint64_t result = qword_1007113F0;
  if (!qword_1007113F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113F0);
  }
  return result;
}

unint64_t sub_1002984B4()
{
  unint64_t result = qword_1007113F8;
  if (!qword_1007113F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007113F8);
  }
  return result;
}

uint64_t destroy for ExtendedSearchResponse(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtendedSearchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = v5;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtendedSearchResponse(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      int v5 = *((_DWORD *)a2 + 7);
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      *(_DWORD *)(a1 + 28) = v5;
    }
    else
    {
      sub_1002986F4(a1);
      char v7 = *((unsigned char *)a2 + 32);
      long long v8 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 32) = v7;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    int v6 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_DWORD *)(a1 + 28) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *a2;
    long long v10 = a2[1];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v10;
  }
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002986F4(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ExtendedSearchResponse(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    sub_1002986F4(a1);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  int v5 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = v5;
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtendedSearchResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtendedSearchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtendedSearchResponse()
{
  return &type metadata for ExtendedSearchResponse;
}

unsigned char *storeEnumTagSinglePayload for ExtendedSearchResponse.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100298940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtendedSearchResponse.Kind()
{
  return &type metadata for ExtendedSearchResponse.Kind;
}

uint64_t sub_100298978(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000566C(a3);
  sub_10023C3DC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1002989D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000566C(a3);
  sub_10023C3DC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_100298A64()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_100298AB4@<X0>(unsigned __int8 a1@<W8>)
{
  *(unsigned char *)(v2 - 92) = a1;
  return v1 | ((unint64_t)a1 << 32);
}

void sub_100298AC8()
{
  *(void *)(v1 - 88) = *(void *)(v0 + 40);
}

uint64_t sub_100298B04()
{
  return v0;
}

uint64_t sub_100298B1C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_100298B34()
{
  return sub_1000E8770(v1, v0);
}

uint64_t sub_100298B58()
{
  return sub_1000E872C(v1, v0);
}

uint64_t sub_100298B7C()
{
  return v0;
}

uint64_t sub_100298BB0()
{
  return v0;
}

uint64_t sub_100298BC8()
{
  return sub_1002983A0(v1, v0);
}

uint64_t sub_100298BE0()
{
  return sub_1002983A0(v1, v0);
}

uint64_t sub_100298BF8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_100298C10()
{
  return sub_1002983A0(v1, v0);
}

uint64_t sub_100298C28()
{
  return v0;
}

uint64_t sub_100298C58()
{
  return sub_1002983A0(v0, v1);
}

uint64_t sub_100298C70()
{
  return v0;
}

uint64_t sub_100298C90()
{
  return sub_100298404(v0);
}

uint64_t static StreamingKind.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_100289018(a1, (uint64_t)&v35);
  int v3 = (void *)v35;
  unsigned __int8 v4 = v39;
  int v5 = v39 >> 6;
  if (!v5)
  {
    v39 &= 0x3Fu;
    uint64_t v13 = v36;
    char v14 = v37;
    sub_100289018(a2, (uint64_t)&v32);
    if (v34 > 0x3Fu) {
      return 0;
    }
    uint64_t v15 = v32.i64[1];
    __int8 v16 = v33.i8[0];
    if ((_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(v3, v32.i64[0]) & 1) == 0) {
      return 0;
    }
    if (v14)
    {
      if ((v16 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v13 == v15) {
        char v26 = v16;
      }
      else {
        char v26 = 1;
      }
      if (v26) {
        return 0;
      }
    }
    return 1;
  }
  if (v5 != 1)
  {
    BOOL v17 = v39 == 128 && (v37 | v38 | v35 | v36) == 0;
    if (v17)
    {
      sub_100289018(a2, (uint64_t)&v32);
      sub_1002A0910();
      if (!v17) {
        return 0;
      }
      if (v22 != 128) {
        return 0;
      }
      int8x16_t v23 = vorrq_s8(v32, v33);
      return !*(void *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    }
    if (v39 == 128 && v35 == 1 && (v37 | v38 | v36) == 0)
    {
      sub_100289018(a2, (uint64_t)&v32);
      sub_1002A0910();
      if (!v17) {
        return 0;
      }
      if (v24 != 128 || v32.i64[0] != 1) {
        return 0;
      }
    }
    else
    {
      sub_100289018(a2, (uint64_t)&v32);
      sub_1002A0910();
      if (!v17) {
        return 0;
      }
      if (v20 != 128 || v32.i64[0] != 2) {
        return 0;
      }
    }
    return !(v33.i64[0] | v33.i64[1] | v32.i64[1]);
  }
  v39 &= 0x3Fu;
  uint64_t v6 = v36;
  int v7 = v37;
  uint64_t v8 = v38;
  sub_100289018(a2, (uint64_t)&v32);
  unsigned __int8 v9 = v34;
  if ((v34 & 0xC0) != 0x40) {
    return 0;
  }
  v34 &= 0x3Fu;
  uint64_t v10 = v32.i64[1];
  int v11 = v33.u8[0];
  uint64_t v12 = v33.i64[1];
  if ((_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(v3, v32.i64[0]) & 1) == 0) {
    return 0;
  }
  if (!v7)
  {
    if (v11) {
      return 0;
    }
    goto LABEL_52;
  }
  if (v7 == 1)
  {
    if (v11 != 1) {
      return 0;
    }
LABEL_52:
    sub_100219898();
    if ((v27 & 1) == 0) {
      return 0;
    }
LABEL_73:
    if ((v4 & 1) == 0) {
      return (v9 & 1) == 0 && v8 == v12;
    }
    return (v9 & 1) != 0;
  }
  switch(v6)
  {
    case 1:
      if (v11 != 2 || v10 != 1) {
        return 0;
      }
      goto LABEL_73;
    case 2:
      if (v11 != 2 || v10 != 2) {
        return 0;
      }
      goto LABEL_73;
    case 3:
      if (v11 != 2 || v10 != 3) {
        return 0;
      }
      goto LABEL_73;
    default:
      uint64_t result = 0;
      if (v11 == 2 && !v10) {
        goto LABEL_73;
      }
      break;
  }
  return result;
}

uint64_t ResponseOrContinuationRequest.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Response(0);
  uint64_t v7 = sub_100224550(v6);
  __chkstk_darwin(v7);
  sub_1002677E8();
  type metadata accessor for ResponseOrContinuationRequest(0);
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_100224490();
  sub_10029BEB8(v4, v3, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10029C030(v3, v1, (void (*)(void))type metadata accessor for Response);
    sub_1005E3410(1uLL);
    Response.hash(into:)();
    return sub_10029BE60(v1, (void (*)(void))type metadata accessor for Response);
  }
  else
  {
    unint64_t v10 = *(void *)v3;
    uint64_t v11 = *(void *)(v3 + 8);
    uint64_t v12 = *(void *)(v3 + 16);
    char v13 = *(unsigned char *)(v3 + 24);
    sub_1005E3410(0);
    ContinuationRequest.hash(into:)(a1, v10, v11, v12, v13);
    return sub_1002966C8(v10, v11, v12, v13);
  }
}

void static ResponseOrContinuationRequest.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1001FE5B4();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for Response(0);
  uint64_t v29 = sub_100224550(v28);
  __chkstk_darwin(v29);
  sub_100254978();
  type metadata accessor for ResponseOrContinuationRequest(0);
  sub_1001F3BBC();
  uint64_t v31 = __chkstk_darwin(v30);
  int8x16_t v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  unint64_t v35 = (char *)&a9 - v34;
  uint64_t v36 = sub_10000566C(&qword_100711408);
  uint64_t v37 = sub_100224550(v36);
  __chkstk_darwin(v37);
  sub_1002677E8();
  uint64_t v39 = v20 + *(int *)(v38 + 56);
  sub_10029BEB8(v27, v20, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
  sub_10029BEB8(v25, v39, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10029BEB8(v20, (uint64_t)v33, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_10029C030(v39, v21, (void (*)(void))type metadata accessor for Response);
      static Response.__derived_enum_equals(_:_:)();
      sub_10029BE60(v21, (void (*)(void))type metadata accessor for Response);
      sub_10029BE60((uint64_t)v33, (void (*)(void))type metadata accessor for Response);
LABEL_9:
      sub_10029BE60(v20, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
      goto LABEL_10;
    }
    sub_10029BE60((uint64_t)v33, (void (*)(void))type metadata accessor for Response);
  }
  else
  {
    sub_10029BEB8(v20, (uint64_t)v35, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
    unint64_t v40 = *(void *)v35;
    unint64_t v41 = *((void *)v35 + 1);
    uint64_t v42 = *((void *)v35 + 2);
    char v43 = v35[24];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      unint64_t v44 = *(void *)v39;
      uint64_t v45 = *(void *)(v39 + 8);
      uint64_t v46 = *(void *)(v39 + 16);
      char v47 = *(unsigned char *)(v39 + 24);
      static ContinuationRequest.__derived_enum_equals(_:_:)(v40, v41, v42, v43, v44, v45, v46, v47);
      sub_1002966C8(v44, v45, v46, v47);
      sub_1002A0964();
      goto LABEL_9;
    }
    sub_1002A0964();
  }
  sub_1001F3A28(v20, &qword_100711408);
LABEL_10:
  sub_1001FE57C();
}

void static Response.__derived_enum_equals(_:_:)()
{
  sub_1001FE5B4();
  uint64_t v59 = v0;
  uint64_t v60 = (char *)v1;
  uint64_t v2 = type metadata accessor for ResponsePayload();
  uint64_t v3 = sub_100224550(v2);
  __chkstk_darwin(v3);
  uint64_t v58 = (uint64_t)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Response(0);
  sub_1001F3BBC();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (unint64_t *)((char *)v57 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  char v14 = (char *)v57 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  BOOL v17 = (char *)v57 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v57 - v18;
  uint64_t v20 = sub_10000566C(&qword_100711410);
  uint64_t v21 = sub_100224550(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = &v24[*(int *)(v22 + 56)];
  sub_10029BEB8(v59, (uint64_t)v24, (void (*)(void))type metadata accessor for Response);
  sub_10029BEB8((uint64_t)v60, (uint64_t)v25, (void (*)(void))type metadata accessor for Response);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10029BEB8((uint64_t)v24, (uint64_t)v17, (void (*)(void))type metadata accessor for Response);
      sub_100288FF8(v17, v61);
      if (sub_1002A08F8() == 1)
      {
        sub_100288FF8(v25, v62);
        static FetchResponse.__derived_enum_equals(_:_:)();
        sub_10029C20C((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
        sub_10029C20C((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
        goto LABEL_26;
      }
      sub_10029C20C((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
      goto LABEL_24;
    case 2u:
      uint64_t v60 = v24;
      sub_10029BEB8((uint64_t)v24, (uint64_t)v14, (void (*)(void))type metadata accessor for Response);
      uint64_t v28 = *(void *)v14;
      uint64_t v27 = *((void *)v14 + 1);
      unint64_t v30 = *((void *)v14 + 2);
      uint64_t v29 = *((void *)v14 + 3);
      uint64_t v31 = *((void *)v14 + 4);
      int v32 = v14[40];
      if (sub_1002A08F8() != 2)
      {
        swift_bridgeObjectRelease();
        unint64_t v50 = sub_1002A0920();
        sub_10029BF18(v50, v51, v52, v32);
        uint64_t v24 = v60;
        goto LABEL_24;
      }
      LODWORD(v59) = v32;
      uint64_t v33 = *((void *)v25 + 3);
      char v34 = v25[40];
      BOOL v35 = v28 == *(void *)v25 && v27 == *((void *)v25 + 1);
      if (v35 || (unint64_t v36 = *((void *)v25 + 2), v37 = *((void *)v25 + 4), (sub_1005E3290() & 1) != 0))
      {
        unint64_t v38 = sub_1002A0920();
        uint64_t v58 = v31;
        unsigned __int8 v39 = v59;
        unint64_t v41 = v40;
        uint64_t v43 = v42;
        v57[3] = static TaggedResponse.State.__derived_enum_equals(_:_:)(v38, v44, v45, v59, v40, v33, v42, v34);
        swift_bridgeObjectRelease();
        sub_10029BF18(v41, v33, v43, v34);
        swift_bridgeObjectRelease();
        sub_10029BF18(v30, v29, v58, v39);
        uint64_t v46 = (uint64_t)v60;
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_10029BF18(v36, v33, v37, v34);
        swift_bridgeObjectRelease();
        unint64_t v54 = sub_1002A0920();
        sub_10029BF18(v54, v55, v56, v59);
        uint64_t v46 = (uint64_t)v60;
      }
LABEL_19:
      sub_10029BE60(v46, (void (*)(void))type metadata accessor for Response);
      goto LABEL_27;
    case 3u:
      sub_10029BEB8((uint64_t)v24, (uint64_t)v11, (void (*)(void))type metadata accessor for Response);
      unint64_t v47 = *v11;
      uint64_t v48 = v11[2];
      if (sub_1002A08F8() == 3)
      {
        unint64_t v49 = *(void *)v25;
        static ResponseText.__derived_struct_equals(_:_:)(v47, v11[1], v48, *(void *)v25, *((void *)v25 + 1), *((void *)v25 + 2));
        sub_100212D94(v49);
        swift_bridgeObjectRelease();
        sub_100212D94(v47);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      sub_100212D94(v47);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    case 4u:
      sub_10029BEB8((uint64_t)v24, (uint64_t)v8, (void (*)(void))type metadata accessor for Response);
      uint64_t v26 = *(void *)v8;
      if (sub_1002A08F8() == 4)
      {
        static ByteBuffer.== infix(_:_:)(v26, *((void *)v8 + 1), *((unsigned int *)v8 + 4) | ((unint64_t)v8[22] << 48) | ((unint64_t)*((unsigned __int16 *)v8 + 10) << 32), *(void *)v25, *((void *)v25 + 1), *((unsigned int *)v25 + 4) | ((unint64_t)*((unsigned __int16 *)v25 + 10) << 32) | ((unint64_t)v25[22] << 48));
        swift_release();
        swift_release();
        goto LABEL_26;
      }
      swift_release();
      goto LABEL_24;
    case 5u:
      if (sub_1002A08F8() != 5) {
        goto LABEL_24;
      }
      uint64_t v46 = (uint64_t)v24;
      goto LABEL_19;
    default:
      sub_10029BEB8((uint64_t)v24, (uint64_t)v19, (void (*)(void))type metadata accessor for Response);
      if (sub_1002A08F8())
      {
        sub_10029BE60((uint64_t)v19, (void (*)(void))type metadata accessor for ResponsePayload);
LABEL_24:
        sub_1001F3A28((uint64_t)v24, &qword_100711410);
      }
      else
      {
        uint64_t v53 = v58;
        sub_10029C030((uint64_t)v25, v58, (void (*)(void))type metadata accessor for ResponsePayload);
        static ResponsePayload.__derived_enum_equals(_:_:)((unint64_t)v19, v53);
        sub_10029BE60(v53, (void (*)(void))type metadata accessor for ResponsePayload);
        sub_10029BE60((uint64_t)v19, (void (*)(void))type metadata accessor for ResponsePayload);
LABEL_26:
        sub_10029BE60((uint64_t)v24, (void (*)(void))type metadata accessor for Response);
      }
LABEL_27:
      sub_1001FE57C();
      return;
  }
}

Swift::Int ResponseOrContinuationRequest.hashValue.getter()
{
  return sub_10029A108((void (*)(unsigned char *))ResponseOrContinuationRequest.hash(into:));
}

Swift::Int sub_100299A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10029A170(a1, a2, a3, (void (*)(unsigned char *))ResponseOrContinuationRequest.hash(into:));
}

uint64_t Response.tag.getter()
{
  type metadata accessor for Response(0);
  sub_1001F3BBC();
  __chkstk_darwin(v2);
  sub_1002677E8();
  sub_10029BEB8(v1, v0, (void (*)(void))type metadata accessor for Response);
  uint64_t v3 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v3 = *(void *)v0;
      sub_10029BF18(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
      break;
    case 5u:
      return v3;
    default:
      sub_10029BE60(v0, (void (*)(void))type metadata accessor for Response);
      uint64_t v3 = 0;
      break;
  }
  return v3;
}

void Response.hash(into:)()
{
  sub_1001FE5B4();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for ResponsePayload();
  uint64_t v5 = sub_100224550(v4);
  __chkstk_darwin(v5);
  sub_100224490();
  type metadata accessor for Response(0);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_100254978();
  sub_10029BEB8((uint64_t)v0, (uint64_t)v0, (void (*)(void))type metadata accessor for Response);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100288FF8(v0, v12);
      sub_1005E3410(1uLL);
      FetchResponse.hash(into:)();
      sub_10029C20C((uint64_t)v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
      break;
    case 2u:
      unint64_t v7 = v0[2];
      uint64_t v8 = v0[3];
      uint64_t v9 = v0[4];
      unsigned __int8 v10 = *((unsigned char *)v0 + 40);
      sub_1005E3410(2uLL);
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      swift_bridgeObjectRelease();
      sub_10029C090(v7, v8, v9, v10);
      UntaggedStatus.hash(into:)(v3, v7, v8, v9, v10);
      sub_1002A0944();
      swift_bridgeObjectRelease();
      sub_1002A0944();
      break;
    case 3u:
      unint64_t v11 = *v0;
      sub_1005E3410(3uLL);
      ResponseText.hash(into:)(v3, v11);
      sub_100212D94(v11);
      swift_bridgeObjectRelease();
      break;
    case 4u:
      sub_1005E3410(4uLL);
      swift_beginAccess();
      sub_10025DC0C();
      swift_release();
      break;
    case 5u:
      sub_1005E3410(5uLL);
      break;
    default:
      sub_10029C030((uint64_t)v0, v1, (void (*)(void))type metadata accessor for ResponsePayload);
      sub_1005E3410(0);
      ResponsePayload.hash(into:)(v3);
      sub_10029BE60(v1, (void (*)(void))type metadata accessor for ResponsePayload);
      break;
  }
  sub_1001FE57C();
}

void static FetchResponse.__derived_enum_equals(_:_:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = (uint64_t)v2;
  sub_100288FF8(v2, __dst);
  switch(sub_10029C0D8((uint64_t)__dst))
  {
    case 1u:
      sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(v1, v32);
      if (sub_10029C0D8((uint64_t)v32) == 1) {
        goto LABEL_12;
      }
      break;
    case 2u:
      uint64_t v4 = (void *)sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(v4, v32);
      sub_100288FF8(v1, v27);
      if (sub_10029C0D8((uint64_t)v27) == 2)
      {
        uint64_t v5 = (void *)sub_10029C1C4((uint64_t)v27);
        sub_100288FF8(v5, __src);
        sub_10029C20C(v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029C0F4);
        sub_10029C20C((uint64_t)v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029C0F4);
        static MessageAttribute.__derived_enum_equals(_:_:)(v32, __src);
        goto LABEL_10;
      }
      break;
    case 3u:
      uint64_t v6 = sub_10029C1C4((uint64_t)__dst);
      uint64_t v7 = *(void *)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      char v11 = *(unsigned char *)(v6 + 32);
      sub_100288FF8(v1, v32);
      if (sub_10029C0D8((uint64_t)v32) == 3)
      {
        uint64_t v12 = sub_10029C1C4((uint64_t)v32);
        char v13 = *(unsigned char *)(v12 + 32);
        v27[0] = v7;
        v27[1] = v8;
        v27[2] = v9;
        v27[3] = v10;
        char v28 = v11;
        __n128 v14 = *(__n128 *)(v12 + 16);
        __src[0] = *(__n128 *)v12;
        __src[1] = v14;
        char v30 = v13;
        static StreamingKind.__derived_enum_equals(_:_:)((uint64_t)v27, (uint64_t)__src);
      }
      break;
    case 4u:
      uint64_t v15 = sub_10029C1C4((uint64_t)__dst);
      uint64_t v16 = *(void *)v15;
      unint64_t v17 = *(void *)(v15 + 8);
      uint64_t v18 = *(unsigned int *)(v15 + 16);
      uint64_t v19 = *(unsigned __int16 *)(v15 + 20);
      uint64_t v20 = *(unsigned __int8 *)(v15 + 22);
      sub_100288FF8(v1, v32);
      if (sub_10029C0D8((uint64_t)v32) == 4)
      {
        uint64_t v21 = sub_10029C1C4((uint64_t)v32);
        uint64_t v25 = *(void *)(v21 + 8);
        uint64_t v26 = *(void *)v21;
        uint64_t v24 = *(unsigned int *)(v21 + 16);
        uint64_t v22 = *(unsigned __int16 *)(v21 + 20);
        uint64_t v23 = *(unsigned __int8 *)(v21 + 22);
        sub_10029C20C(v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029C0F4);
        sub_10029C20C((uint64_t)v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029C0F4);
        static ByteBuffer.== infix(_:_:)(v16, v17, v18 | (v19 << 32) | (v20 << 48), v26, v25, v24 | (v22 << 32) | (v23 << 48));
LABEL_10:
        sub_10029C20C((uint64_t)v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
        sub_10029C20C(v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
      }
      break;
    case 5u:
    case 6u:
      sub_100288FF8(v1, v32);
      sub_10029C0D8((uint64_t)v32);
      break;
    default:
      sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(v1, v32);
      if (!sub_10029C0D8((uint64_t)v32)) {
LABEL_12:
      }
        sub_10029C1C4((uint64_t)v32);
      break;
  }
  sub_1001FE57C();
}

Swift::Int Response.hashValue.getter()
{
  return sub_10029A108((void (*)(unsigned char *))Response.hash(into:));
}

Swift::Int sub_10029A108(void (*a1)(unsigned char *))
{
  sub_1005E33F0();
  a1(v3);
  return sub_1005E3470();
}

Swift::Int sub_10029A158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10029A170(a1, a2, a3, (void (*)(unsigned char *))Response.hash(into:));
}

Swift::Int sub_10029A170(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_1005E33F0();
  a4(v6);
  return sub_1005E3470();
}

uint64_t Response.debugDescription.getter()
{
  return sub_10034F2F4(0, (uint64_t (*)(char *))sub_10029C1D4);
}

uint64_t static Response.descriptionWithoutPII<A>(_:)()
{
  return sub_10034F2F4(1, (uint64_t (*)(char *))sub_10029C200);
}

uint64_t sub_10029A23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v239 = a2;
  uint64_t v5 = type metadata accessor for ResponsePayload();
  __chkstk_darwin(v5 - 8);
  uint64_t v233 = (uint64_t)&v225 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = type metadata accessor for Response(0);
  uint64_t v7 = __chkstk_darwin(v235);
  uint64_t v9 = (void *)((char *)&v225 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  char v11 = (char *)&v225 - v10;
  uint64_t v12 = sub_10000566C(&qword_100711588);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v234 = (char *)&v225 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v225 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v227 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v20 = (char *)&v225 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v239, a3);
  uint64_t v21 = (uint64_t)v11;
  sub_1005E1F60();
  uint64_t v22 = (uint64_t)v234;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v237 = v20;
  uint64_t v238 = AssociatedTypeWitness;
  uint64_t v24 = v235;
  uint64_t v25 = AssociatedConformanceWitness;
  sub_1005E2950();
  if (getEnumTagSinglePayload for ClientCommand(v22, 1, v24) != 1)
  {
    uint64_t v27 = a1 + 8;
    uint64_t v226 = (uint64_t)v240 + 3;
    long long v225 = xmmword_1005F69B0;
    v230 = v9;
    v232 = v11;
    uint64_t v236 = v25;
    uint64_t v239 = a1 + 8;
    while (1)
    {
      sub_10029C030(v22, v21, (void (*)(void))type metadata accessor for Response);
      sub_10029BEB8(v21, (uint64_t)v9, (void (*)(void))type metadata accessor for Response);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_100288FF8(v9, v242);
          sub_100288FF8(v242, &v243);
          switch(sub_10029C0D8((uint64_t)&v243))
          {
            case 1u:
              uint64_t v156 = v27;
              int v157 = *(_DWORD *)sub_10029C1C4((uint64_t)&v243);
              Swift::Int v158 = *(unsigned int *)(a1 + 20);
              sub_100210AD0(8234, 0xE200000000000000, v156, *(_DWORD *)(a1 + 20));
              if (v160)
              {
                v161._uint64_t countAndFlagsBits = 8234;
                v161._char object = (void *)0xE200000000000000;
                int v159 = ByteBuffer._setStringSlowpath(_:at:)(v161, v158);
              }
              int v162 = *(_DWORD *)(a1 + 20);
              Swift::Int v163 = (v162 + v159);
              if (__CFADD__(v162, v159)) {
                goto LABEL_137;
              }
              *(_DWORD *)(a1 + 20) = v163;
              if (v157 == -1)
              {
                uint64_t v27 = v239;
                sub_100210AD0(42, 0xE100000000000000, v239, v163);
                if (v217)
                {
                  v218._uint64_t countAndFlagsBits = 42;
                  v218._char object = (void *)0xE100000000000000;
                  int v216 = ByteBuffer._setStringSlowpath(_:at:)(v218, v163);
                }
                int v219 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v219, v216);
                Swift::UInt32 v172 = v219 + v216;
                if (v33) {
                  goto LABEL_146;
                }
              }
              else
              {
                LODWORD(v240[0]) = v157;
                uint64_t v164 = sub_1005E3230();
                uint64_t v166 = (void *)v165;
                sub_100210AD0(v164, v165, v239, v163);
                if (v168)
                {
                  v169._uint64_t countAndFlagsBits = v164;
                  v169._char object = v166;
                  int v167 = ByteBuffer._setStringSlowpath(_:at:)(v169, v163);
                }
                int v170 = v167;
                swift_bridgeObjectRelease();
                uint64_t v24 = v235;
                int v171 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v171, v170);
                Swift::UInt32 v172 = v171 + v170;
                uint64_t v22 = (uint64_t)v234;
                if (v33) {
                  goto LABEL_141;
                }
                uint64_t v27 = v239;
              }
              *(_DWORD *)(a1 + 20) = v172;
              Swift::Int v220 = v172;
              sub_100210AD0(0x4354454644495520, 0xEB00000000282048, v27, v172);
              if (v222)
              {
                v223._uint64_t countAndFlagsBits = 0x4354454644495520;
                v223._char object = (void *)0xEB00000000282048;
                int v221 = ByteBuffer._setStringSlowpath(_:at:)(v223, v220);
              }
              int v224 = *(_DWORD *)(a1 + 20);
              BOOL v33 = __CFADD__(v224, v221);
              int v62 = v224 + v221;
              if (!v33) {
                goto LABEL_65;
              }
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
              goto LABEL_142;
            case 2u:
              uint64_t v173 = (void *)sub_10029C1C4((uint64_t)&v243);
              sub_100288FF8(v173, v245);
              unint64_t v174 = *(unsigned int *)(a1 + 1) | ((unint64_t)*(unsigned __int8 *)(a1 + 5) << 32);
              if ((v174 & 0x8000000000) == 0) {
                goto LABEL_147;
              }
              if (*(_DWORD *)(a1 + 1))
              {
                Swift::Int v203 = *(unsigned int *)(a1 + 20);
                sub_100288FF8(v242, v240);
                uint64_t v204 = sub_10029C1C4((uint64_t)v240);
                sub_10029C20C(v204, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1002890C4);
                sub_100210AD0(32, 0xE100000000000000, v27, v203);
                if (v206)
                {
                  v207._uint64_t countAndFlagsBits = 32;
                  v207._char object = (void *)0xE100000000000000;
                  int v205 = ByteBuffer._setStringSlowpath(_:at:)(v207, v203);
                }
                int v208 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v208, v205);
                int v209 = v208 + v205;
                if (v33) {
                  goto LABEL_144;
                }
                *(_DWORD *)(a1 + 20) = v209;
              }
              else
              {
                *(unsigned char *)(a1 + 5) = 0x80;
                *(_DWORD *)(a1 + 1) = v174 & 0x100 | 1;
                sub_100288FF8(v242, v240);
                uint64_t v175 = sub_10029C1C4((uint64_t)v240);
                sub_10029C20C(v175, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1002890C4);
              }
              sub_100288128(v245);
              sub_10029C20C((uint64_t)v242, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
              sub_10029C20C((uint64_t)v242, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
              break;
            case 3u:
              uint64_t v176 = sub_10029C1C4((uint64_t)&v243);
              char v177 = *(unsigned char *)(v176 + 32);
              long long v178 = *(_OWORD *)(v176 + 16);
              v246[0] = *(_OWORD *)v176;
              v246[1] = v178;
              char v247 = v177;
              unint64_t v179 = *(unsigned int *)(a1 + 1) | ((unint64_t)*(unsigned __int8 *)(a1 + 5) << 32);
              if ((v179 & 0x8000000000) == 0) {
                goto LABEL_148;
              }
              if (*(_DWORD *)(a1 + 1))
              {
                Swift::Int v210 = *(unsigned int *)(a1 + 20);
                sub_100210AD0(32, 0xE100000000000000, v27, *(_DWORD *)(a1 + 20));
                if (v212)
                {
                  v213._uint64_t countAndFlagsBits = 32;
                  v213._char object = (void *)0xE100000000000000;
                  int v211 = ByteBuffer._setStringSlowpath(_:at:)(v213, v210);
                }
                int v214 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v214, v211);
                int v215 = v214 + v211;
                if (v33) {
                  goto LABEL_145;
                }
                *(_DWORD *)(a1 + 20) = v215;
              }
              else
              {
                *(unsigned char *)(a1 + 5) = 0x80;
                *(_DWORD *)(a1 + 1) = v179 & 0x100 | 1;
              }
              sub_10034FD94((uint64_t)v246);
              sub_10029C20C((uint64_t)v242, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
              break;
            case 4u:
              uint64_t v180 = sub_10029C1C4((uint64_t)&v243);
              uint64_t v181 = *(unsigned int *)(v180 + 8);
              uint64_t v182 = *(unsigned int *)(v180 + 12);
              if (*(unsigned char *)a1 == 1)
              {
                *(void *)&v240[0] = 91;
                *((void *)&v240[0] + 1) = 0xE100000000000000;
                uint64_t v241 = (v182 - v181);
                v257._uint64_t countAndFlagsBits = sub_1005E3230();
                sub_1005E1E30(v257);
                swift_bridgeObjectRelease();
                v258._uint64_t countAndFlagsBits = 0x5D736574796220;
                v258._char object = (void *)0xE700000000000000;
                sub_1005E1E30(v258);
                Swift::String v183 = (Swift::String)v240[0];
                Swift::Int v184 = *(unsigned int *)(a1 + 20);
                uint64_t v185 = v239;
                sub_100210AD0(*(uint64_t *)&v240[0], *((unint64_t *)&v240[0] + 1), v239, *(_DWORD *)(a1 + 20));
                if (v187) {
                  Swift::Int v186 = ByteBuffer._setStringSlowpath(_:at:)(v183, v184);
                }
                unint64_t v231 = v186;
                swift_bridgeObjectRelease();
                uint64_t v22 = (uint64_t)v234;
                uint64_t v27 = v185;
                sub_10029C20C((uint64_t)v242, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
                int v188 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v188, v231);
                int v62 = v188 + v231;
                if (v33)
                {
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
                  JUMPOUT(0x10029B2F4);
                }
LABEL_65:
                *(_DWORD *)(a1 + 20) = v62;
              }
              else
              {
                uint64_t v193 = *(unsigned __int8 *)(v180 + 22);
                uint64_t v194 = *(unsigned __int16 *)(v180 + 20);
                uint64_t v195 = *(void *)v180;
                Swift::UInt32 v196 = *(_DWORD *)(a1 + 20);
                swift_beginAccess();
                uint64_t v197 = *(void *)(v195 + 24) + (v193 | (v194 << 8));
                uint64_t v198 = v197 + v182;
                uint64_t v27 = v239;
                ByteBuffer._setBytes(_:at:)(v197 + v181, v198, v196);
                int v200 = v199;
                sub_10029C20C((uint64_t)v242, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
                int v201 = *(_DWORD *)(a1 + 20);
                BOOL v33 = __CFADD__(v201, v200);
                int v202 = v201 + v200;
                if (v33) {
                  goto LABEL_143;
                }
                *(_DWORD *)(a1 + 20) = v202;
                uint64_t v9 = v230;
                uint64_t v21 = (uint64_t)v232;
                uint64_t v22 = (uint64_t)v234;
              }
              break;
            case 5u:
              break;
            case 6u:
              unint64_t v189 = *(unsigned int *)(a1 + 1) | (unint64_t)((uint64_t)*(char *)(a1 + 5) << 32);
              if ((v189 & 0x8000000000000000) == 0) {
                goto LABEL_149;
              }
              *(unsigned char *)(a1 + 5) = 0x80;
              *(_DWORD *)(a1 + 1) = v189 & 0x100;
              Swift::UInt32 v190 = *(_DWORD *)(a1 + 20);
              v240[0] = v225;
              ByteBuffer._setBytes(_:at:)((uint64_t)v240, v226, v190);
              int v191 = *(_DWORD *)(a1 + 20);
              BOOL v33 = __CFADD__(v191, v192);
              int v62 = v191 + v192;
              if (!v33) {
                goto LABEL_65;
              }
              goto LABEL_138;
            default:
              uint64_t v41 = v27;
              int v42 = *(_DWORD *)sub_10029C1C4((uint64_t)&v243);
              Swift::Int v43 = *(unsigned int *)(a1 + 20);
              sub_100210AD0(8234, 0xE200000000000000, v41, *(_DWORD *)(a1 + 20));
              if (v45)
              {
                v46._uint64_t countAndFlagsBits = 8234;
                v46._char object = (void *)0xE200000000000000;
                int v44 = ByteBuffer._setStringSlowpath(_:at:)(v46, v43);
              }
              int v47 = *(_DWORD *)(a1 + 20);
              Swift::Int v48 = (v47 + v44);
              if (__CFADD__(v47, v44)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 20) = v48;
              LODWORD(v240[0]) = v42;
              uint64_t v49 = sub_1005E3230();
              uint64_t v51 = (void *)v50;
              sub_100210AD0(v49, v50, v239, v48);
              if (v53)
              {
                v54._uint64_t countAndFlagsBits = v49;
                v54._char object = v51;
                int v52 = ByteBuffer._setStringSlowpath(_:at:)(v54, v48);
              }
              int v55 = v52;
              swift_bridgeObjectRelease();
              uint64_t v24 = v235;
              int v56 = *(_DWORD *)(a1 + 20);
              BOOL v33 = __CFADD__(v56, v55);
              Swift::Int v57 = (v56 + v55);
              uint64_t v22 = (uint64_t)v234;
              if (v33) {
                goto LABEL_139;
              }
              *(_DWORD *)(a1 + 20) = v57;
              uint64_t v27 = v239;
              sub_100210AD0(0x2820484354454620, 0xE800000000000000, v239, v57);
              if (v59)
              {
                v60._uint64_t countAndFlagsBits = 0x2820484354454620;
                v60._char object = (void *)0xE800000000000000;
                int v58 = ByteBuffer._setStringSlowpath(_:at:)(v60, v57);
              }
              int v61 = *(_DWORD *)(a1 + 20);
              BOOL v33 = __CFADD__(v61, v58);
              int v62 = v61 + v58;
              if (!v33) {
                goto LABEL_65;
              }
              goto LABEL_140;
          }
LABEL_75:
          sub_10029BE60(v21, (void (*)(void))type metadata accessor for Response);
          sub_1005E2950();
          if (getEnumTagSinglePayload for ClientCommand(v22, 1, v24) == 1) {
            return (*(uint64_t (**)(char *, uint64_t))(v227 + 8))(v237, v238);
          }
          break;
        case 2u:
          uint64_t v63 = *v9;
          unint64_t v64 = v9[1];
          unint64_t v65 = v9[2];
          uint64_t v228 = v9[3];
          unint64_t v229 = v65;
          unint64_t v231 = v9[4];
          char v66 = *((unsigned char *)v9 + 40);
          uint64_t v243 = v63;
          v244 = (void *)v64;
          swift_bridgeObjectRetain();
          v256._uint64_t countAndFlagsBits = 32;
          v256._char object = (void *)0xE100000000000000;
          sub_1005E1E30(v256);
          uint64_t v67 = v243;
          uint64_t v68 = v244;
          uint64_t v69 = v27;
          Swift::Int v70 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(v243, (unint64_t)v244, v69, *(_DWORD *)(a1 + 20));
          if (v72)
          {
            v73._uint64_t countAndFlagsBits = v67;
            v73._char object = v68;
            int v71 = ByteBuffer._setStringSlowpath(_:at:)(v73, v70);
          }
          int v74 = v71;
          swift_bridgeObjectRelease();
          uint64_t v27 = v69;
          int v75 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v75, v74);
          int v76 = v75 + v74;
          if (v33) {
            goto LABEL_122;
          }
          *(_DWORD *)(a1 + 20) = v76;
          uint64_t v78 = v228;
          unint64_t v77 = v229;
          sub_1002A86A0(v229, v228, v231, v66);
          Swift::Int v79 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(2573, 0xE200000000000000, v69, *(_DWORD *)(a1 + 20));
          if (v81)
          {
            v82._uint64_t countAndFlagsBits = 2573;
            v82._char object = (void *)0xE200000000000000;
            int v80 = ByteBuffer._setStringSlowpath(_:at:)(v82, v79);
          }
          int v83 = v80;
          swift_bridgeObjectRelease();
          uint64_t v22 = (uint64_t)v234;
          sub_10029BF18(v77, v78, v231, v66);
          int v84 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v84, v83);
          int v85 = v84 + v83;
          uint64_t v24 = v235;
          if (v33) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 20) = v85;
          uint64_t v9 = v230;
          goto LABEL_74;
        case 3u:
          unint64_t v87 = *v9;
          uint64_t v86 = v9[1];
          unsigned __int8 v88 = (void *)v9[2];
          Swift::Int v89 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(8234, 0xE200000000000000, v27, *(_DWORD *)(a1 + 20));
          if (v91)
          {
            v92._uint64_t countAndFlagsBits = 8234;
            v92._char object = (void *)0xE200000000000000;
            int v90 = ByteBuffer._setStringSlowpath(_:at:)(v92, v89);
          }
          int v93 = *(_DWORD *)(a1 + 20);
          Swift::Int v94 = (v93 + v90);
          if (__CFADD__(v93, v90)) {
            goto LABEL_123;
          }
          *(_DWORD *)(a1 + 20) = v94;
          swift_bridgeObjectRetain();
          sub_1002965E4(v87);
          sub_100210AD0(541415746, 0xE400000000000000, v239, v94);
          if (v96)
          {
            v97._uint64_t countAndFlagsBits = 541415746;
            v97._char object = (void *)0xE400000000000000;
            int v95 = ByteBuffer._setStringSlowpath(_:at:)(v97, v94);
          }
          int v98 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v98, v95);
          int v99 = v98 + v95;
          if (v33) {
            goto LABEL_128;
          }
          *(_DWORD *)(a1 + 20) = v99;
          if ((~v87 & 0xF000000000000007) != 0)
          {
            uint64_t v243 = v87;
            sub_1002A4AA4(&v243, a1);
          }
          uint64_t v100 = sub_1005E1DC0();
          unint64_t v231 = v87;
          if (v100 < 1)
          {
            uint64_t v101 = (void *)0xE100000000000000;
            uint64_t v86 = 32;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v101 = v88;
          }
          Swift::Int v142 = *(unsigned int *)(a1 + 20);
          swift_bridgeObjectRetain();
          sub_100210AD0(v86, (unint64_t)v101, v239, v142);
          int v144 = v143;
          char v146 = v145;
          swift_bridgeObjectRelease();
          if (v146)
          {
            v147._uint64_t countAndFlagsBits = v86;
            v147._char object = v101;
            int v144 = ByteBuffer._setStringSlowpath(_:at:)(v147, v142);
          }
          swift_bridgeObjectRelease();
          sub_100212D94(v231);
          swift_bridgeObjectRelease();
          int v148 = *(_DWORD *)(a1 + 20);
          Swift::Int v149 = (v148 + v144);
          uint64_t v24 = v235;
          uint64_t v9 = v230;
          if (__CFADD__(v148, v144)) {
            goto LABEL_133;
          }
          *(_DWORD *)(a1 + 20) = v149;
          sub_100210AD0(2573, 0xE200000000000000, v239, v149);
          if (v151)
          {
            v152._uint64_t countAndFlagsBits = 2573;
            v152._char object = (void *)0xE200000000000000;
            int v150 = ByteBuffer._setStringSlowpath(_:at:)(v152, v149);
          }
          int v153 = v150;
          sub_100212D94(v231);
          swift_bridgeObjectRelease();
          int v154 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v154, v153);
          int v155 = v154 + v153;
          if (v33) {
            goto LABEL_135;
          }
          *(_DWORD *)(a1 + 20) = v155;
          uint64_t v22 = (uint64_t)v234;
          uint64_t v27 = v239;
LABEL_74:
          uint64_t v21 = (uint64_t)v232;
          goto LABEL_75;
        case 4u:
          uint64_t v102 = *((unsigned int *)v9 + 2);
          uint64_t v103 = *((unsigned int *)v9 + 3);
          if (v103 < v102) {
            goto LABEL_124;
          }
          int v104 = *((_DWORD *)v9 + 4);
          int v105 = *((unsigned __int16 *)v9 + 10);
          int v106 = *((unsigned __int8 *)v9 + 22);
          if (v104 - (v106 | (v105 << 8)) < v103) {
            goto LABEL_129;
          }
          uint64_t v248 = *v9;
          int v249 = v102;
          int v250 = v103;
          int v251 = v104;
          __int16 v252 = v105;
          char v253 = v106;
          uint64_t v254 = v102;
          uint64_t v255 = v103;
          swift_retain();
          uint64_t v107 = sub_1001E6610(&v248);
          swift_release();
          Swift::Int v108 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(8235, 0xE200000000000000, v27, *(_DWORD *)(a1 + 20));
          if (v110)
          {
            v111._uint64_t countAndFlagsBits = 8235;
            v111._char object = (void *)0xE200000000000000;
            int v109 = ByteBuffer._setStringSlowpath(_:at:)(v111, v108);
          }
          int v112 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v112, v109);
          int v113 = v112 + v109;
          if (v33) {
            goto LABEL_131;
          }
          *(_DWORD *)(a1 + 20) = v113;
          sub_100254F34((uint64_t)v107);
          swift_bridgeObjectRelease();
          Swift::Int v114 = *(unsigned int *)(a1 + 20);
          uint64_t v115 = v239;
          sub_100210AD0(2573, 0xE200000000000000, v239, *(_DWORD *)(a1 + 20));
          if (v117)
          {
            v118._uint64_t countAndFlagsBits = 2573;
            v118._char object = (void *)0xE200000000000000;
            int v116 = ByteBuffer._setStringSlowpath(_:at:)(v118, v114);
          }
          int v119 = v116;
          swift_release();
          uint64_t v27 = v115;
          int v120 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v120, v119);
          int v121 = v120 + v119;
          if (v33) {
            goto LABEL_134;
          }
          *(_DWORD *)(a1 + 20) = v121;
          uint64_t v24 = v235;
          goto LABEL_75;
        case 5u:
          Swift::Int v122 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(8235, 0xE200000000000000, v27, *(_DWORD *)(a1 + 20));
          if (v124)
          {
            v125._uint64_t countAndFlagsBits = 8235;
            v125._char object = (void *)0xE200000000000000;
            int v123 = ByteBuffer._setStringSlowpath(_:at:)(v125, v122);
          }
          int v126 = *(_DWORD *)(a1 + 20);
          Swift::Int v127 = (v126 + v123);
          if (__CFADD__(v126, v123)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 20) = v127;
          uint64_t v128 = sub_1005E1DC0();
          if (v128 <= 0) {
            uint64_t v129 = 32;
          }
          else {
            uint64_t v129 = 0x676E696C6469;
          }
          if (v128 <= 0) {
            uint64_t v130 = (void *)0xE100000000000000;
          }
          else {
            uint64_t v130 = (void *)0xE600000000000000;
          }
          swift_bridgeObjectRetain();
          sub_100210AD0(v129, (unint64_t)v130, v27, v127);
          int v132 = v131;
          char v134 = v133;
          swift_bridgeObjectRelease();
          if (v134)
          {
            v135._uint64_t countAndFlagsBits = v129;
            v135._char object = v130;
            int v132 = ByteBuffer._setStringSlowpath(_:at:)(v135, v127);
          }
          swift_bridgeObjectRelease();
          uint64_t v22 = (uint64_t)v234;
          uint64_t v24 = v235;
          int v136 = *(_DWORD *)(a1 + 20);
          Swift::Int v137 = (v136 + v132);
          uint64_t v21 = (uint64_t)v232;
          if (__CFADD__(v136, v132)) {
            goto LABEL_130;
          }
          *(_DWORD *)(a1 + 20) = v137;
          uint64_t v27 = v239;
          sub_100210AD0(2573, 0xE200000000000000, v239, v137);
          if (v139)
          {
            v140._uint64_t countAndFlagsBits = 2573;
            v140._char object = (void *)0xE200000000000000;
            int v138 = ByteBuffer._setStringSlowpath(_:at:)(v140, v137);
          }
          int v141 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v141, v138);
          int v62 = v141 + v138;
          if (!v33) {
            goto LABEL_65;
          }
          goto LABEL_132;
        default:
          sub_10029C030((uint64_t)v9, v233, (void (*)(void))type metadata accessor for ResponsePayload);
          Swift::Int v28 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(8234, 0xE200000000000000, v27, *(_DWORD *)(a1 + 20));
          if (v30)
          {
            v31._uint64_t countAndFlagsBits = 8234;
            v31._char object = (void *)0xE200000000000000;
            int v29 = ByteBuffer._setStringSlowpath(_:at:)(v31, v28);
          }
          int v32 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v32, v29);
          int v34 = v32 + v29;
          if (v33) {
            goto LABEL_121;
          }
          *(_DWORD *)(a1 + 20) = v34;
          sub_1002A2648();
          Swift::Int v35 = *(unsigned int *)(a1 + 20);
          sub_100210AD0(2573, 0xE200000000000000, v27, *(_DWORD *)(a1 + 20));
          if (v37)
          {
            v38._uint64_t countAndFlagsBits = 2573;
            v38._char object = (void *)0xE200000000000000;
            int v36 = ByteBuffer._setStringSlowpath(_:at:)(v38, v35);
          }
          int v39 = *(_DWORD *)(a1 + 20);
          BOOL v33 = __CFADD__(v39, v36);
          int v40 = v39 + v36;
          if (v33) {
            goto LABEL_126;
          }
          *(_DWORD *)(a1 + 20) = v40;
          sub_10029BE60(v233, (void (*)(void))type metadata accessor for ResponsePayload);
          goto LABEL_75;
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v227 + 8))(v237, v238);
}

void FetchResponse.hash(into:)()
{
  sub_1001FE5B4();
  uint64_t v2 = v1;
  sub_100288FF8(v0, __dst);
  sub_100288FF8(__dst, __src);
  sub_100288FF8(v0, v20);
  switch(sub_10029C0D8((uint64_t)v20))
  {
    case 1u:
      Swift::UInt32 v3 = *(_DWORD *)sub_10029C1C4((uint64_t)v20);
      Swift::UInt v4 = 1;
      goto LABEL_4;
    case 2u:
      uint64_t v5 = (void *)sub_10029C1C4((uint64_t)v20);
      sub_100288FF8(v5, v21);
      sub_1005E3410(2uLL);
      sub_100288FF8(__src, v18);
      uint64_t v6 = sub_10029C1C4((uint64_t)v18);
      sub_10029C20C(v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_1002890C4);
      MessageAttribute.hash(into:)(v2);
      sub_10029C20C((uint64_t)v0, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10029BF60);
      goto LABEL_31;
    case 3u:
      uint64_t v7 = sub_10029C1C4((uint64_t)v20);
      uint64_t v9 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v11 = *(void *)(v7 + 16);
      Swift::UInt v10 = *(void *)(v7 + 24);
      unsigned int v12 = *(unsigned __int8 *)(v7 + 32);
      Swift::UInt v13 = *(void *)(v7 + 40);
      sub_1005E3410(3uLL);
      if (!(v12 >> 6))
      {
        sub_1005E3410(0);
        sub_100226C94(v2, v9);
        if ((v11 & 1) == 0)
        {
          sub_1005E3420(1u);
          Swift::UInt v14 = v8;
          goto LABEL_28;
        }
LABEL_15:
        sub_1005E3420(0);
        goto LABEL_29;
      }
      if (v12 >> 6 != 1)
      {
        if (v11 | v8 | v9 | v10 || v12 != 128)
        {
          if (v12 == 128 && v9 == 1 && (v11 | v8 | v10) == 0) {
            Swift::UInt v14 = 3;
          }
          else {
            Swift::UInt v14 = 4;
          }
        }
        else
        {
          Swift::UInt v14 = 2;
        }
        goto LABEL_28;
      }
      sub_1005E3410(1uLL);
      sub_100226C94(v2, v9);
      sub_10013B5CC(v8, v11);
      SectionSpecifier.Kind.hash(into:)(v2, v8, v11);
      sub_10013B5E0(v8, v11);
      if (v12) {
        goto LABEL_15;
      }
      sub_1005E3420(1u);
      Swift::UInt v14 = v10;
LABEL_28:
      sub_1005E3410(v14);
LABEL_29:
      Swift::UInt v15 = v13;
LABEL_30:
      sub_1005E3410(v15);
LABEL_31:
      sub_1001FE57C();
      return;
    case 4u:
      sub_10029C1C4((uint64_t)v20);
      sub_1005E3410(4uLL);
      swift_beginAccess();
      sub_10025DC0C();
      goto LABEL_31;
    case 5u:
      Swift::UInt v15 = 5;
      goto LABEL_30;
    case 6u:
      Swift::UInt v15 = 6;
      goto LABEL_30;
    default:
      Swift::UInt32 v3 = *(_DWORD *)sub_10029C1C4((uint64_t)v20);
      Swift::UInt v4 = 0;
LABEL_4:
      sub_1005E3410(v4);
      sub_1005E3440(v3);
      goto LABEL_31;
  }
}

Swift::Int FetchResponse.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_10029B630()
{
  sub_100288FF8(v0, __dst);
  return FetchResponse.hashValue.getter();
}

void sub_10029B668()
{
  sub_100288FF8(v0, __dst);
  FetchResponse.hash(into:)();
}

Swift::Int sub_10029B6A8()
{
  sub_100288FF8(v0, __dst);
  sub_1005E33F0();
  FetchResponse.hash(into:)();
  return sub_1005E3470();
}

uint64_t sub_10029B704(void *a1, void *a2)
{
  sub_100288FF8(a1, &v5);
  sub_100288FF8(a2, __dst);
  static FetchResponse.__derived_enum_equals(_:_:)();
  return v3 & 1;
}

void StreamingKind.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100289018(v2, (uint64_t)&v19);
  uint64_t v4 = v19;
  int v5 = v23;
  int v6 = v23 >> 6;
  if (v6)
  {
    if (v6 != 1)
    {
      sub_1002A0930();
      BOOL v15 = v15 && v14 == 0;
      if (v15)
      {
        Swift::UInt v11 = 2;
      }
      else
      {
        uint64_t v16 = v13 | v12;
        if (v5 == 128 && v4 == 1 && v16 == 0) {
          Swift::UInt v11 = 3;
        }
        else {
          Swift::UInt v11 = 4;
        }
      }
      goto LABEL_21;
    }
    v23 &= 0x3Fu;
    uint64_t v7 = v20;
    Swift::UInt v8 = v22;
    char v9 = v21;
    sub_1005E3410(1uLL);
    sub_100226C94(a1, v4);
    sub_10013B5CC(v7, v9);
    SectionSpecifier.Kind.hash(into:)(a1, v7, v9);
    sub_10013B5E0(v7, v9);
    if (v5)
    {
LABEL_4:
      sub_1005E3420(0);
      return;
    }
  }
  else
  {
    v23 &= 0x3Fu;
    Swift::UInt v8 = v20;
    int v10 = v21;
    sub_1005E3410(0);
    sub_100226C94(a1, v4);
    if (v10 == 1) {
      goto LABEL_4;
    }
  }
  sub_1005E3420(1u);
  Swift::UInt v11 = v8;
LABEL_21:
  sub_1005E3410(v11);
}

Swift::Int StreamingKind.hashValue.getter()
{
  sub_1005E33F0();
  sub_100289018(v0, (uint64_t)&v18);
  uint64_t v1 = v18;
  int v2 = v22;
  int v3 = v22 >> 6;
  if (!v3)
  {
    v22 &= 0x3Fu;
    Swift::UInt v5 = v19;
    char v7 = v20;
    sub_1005E3410(0);
    sub_100226C94((uint64_t)v17, v1);
    if (v7) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  if (v3 != 1)
  {
    sub_1002A0930();
    BOOL v12 = v12 && v11 == 0;
    if (v12)
    {
      Swift::UInt v8 = 2;
    }
    else
    {
      uint64_t v13 = v10 | v9;
      if (v2 == 128 && v1 == 1 && v13 == 0) {
        Swift::UInt v8 = 3;
      }
      else {
        Swift::UInt v8 = 4;
      }
    }
    goto LABEL_21;
  }
  v22 &= 0x3Fu;
  uint64_t v4 = v19;
  Swift::UInt v5 = v21;
  char v6 = v20;
  sub_1005E3410(1uLL);
  sub_100226C94((uint64_t)v17, v1);
  sub_10013B5CC(v4, v6);
  SectionSpecifier.Kind.hash(into:)((uint64_t)v17, v4, v6);
  sub_10013B5E0(v4, v6);
  if ((v2 & 1) == 0)
  {
LABEL_6:
    sub_1005E3420(1u);
    Swift::UInt v8 = v5;
LABEL_21:
    sub_1005E3410(v8);
    return sub_1005E3470();
  }
LABEL_4:
  sub_1005E3420(0);
  return sub_1005E3470();
}

Swift::Int sub_10029B9EC()
{
  sub_100289018(v0, (uint64_t)v2);
  return StreamingKind.hashValue.getter();
}

void sub_10029BA24(uint64_t a1)
{
  sub_100289018(v1, (uint64_t)v3);
  StreamingKind.hash(into:)(a1);
}

Swift::Int sub_10029BA64()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  unsigned int v5 = *(unsigned __int8 *)(v0 + 32);
  sub_1005E33F0();
  if (v5 >> 6)
  {
    if (v5 >> 6 != 1)
    {
      if (v4 | v1 | v2 | v3 || v5 != 128)
      {
        if (v5 == 128 && v2 == 1 && (v4 | v1 | v3) == 0) {
          Swift::UInt v6 = 3;
        }
        else {
          Swift::UInt v6 = 4;
        }
      }
      else
      {
        Swift::UInt v6 = 2;
      }
      goto LABEL_20;
    }
    sub_1005E3410(1uLL);
    sub_100226C94((uint64_t)v10, v2);
    sub_10013B5CC(v1, v4);
    SectionSpecifier.Kind.hash(into:)((uint64_t)v10, v1, v4);
    sub_10013B5E0(v1, v4);
    if ((v5 & 1) == 0)
    {
      sub_1005E3420(1u);
      Swift::UInt v6 = v3;
LABEL_20:
      sub_1005E3410(v6);
      return sub_1005E3470();
    }
  }
  else
  {
    sub_1005E3410(0);
    sub_100226C94((uint64_t)v10, v2);
    if ((v4 & 1) == 0)
    {
      sub_1005E3420(1u);
      Swift::UInt v6 = v1;
      goto LABEL_20;
    }
  }
  sub_1005E3420(0);
  return sub_1005E3470();
}

uint64_t sub_10029BBB0(uint64_t a1, uint64_t a2)
{
  sub_100289018(a1, (uint64_t)v4);
  sub_100289018(a2, (uint64_t)v5);
  return static StreamingKind.__derived_enum_equals(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

void *StreamingKind.sectionSpecifier.getter()
{
  sub_100289018(v0, (uint64_t)v6);
  sub_100289018(v0, (uint64_t)v7);
  uint64_t v1 = v7[0];
  int v2 = v9 >> 6;
  if (v2)
  {
    if (v2 == 1)
    {
      v9 &= 0x3Fu;
      uint64_t v3 = v7[1];
      unsigned __int8 v4 = v8;
      swift_bridgeObjectRetain();
      sub_10013B5CC(v3, v4);
    }
    else
    {
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return (void *)v1;
}

uint64_t StreamingKind.offset.getter()
{
  sub_100289018(v0, (uint64_t)v3);
  int v1 = v4 >> 6;
  if (!v1) {
    return v3[1];
  }
  if (v1 == 1) {
    return v3[3];
  }
  return 0;
}

void StreamingKind.debugDescription.getter()
{
  sub_10029C280(v0);
  sub_1002118A8();
}

void sub_10029BDB4()
{
  sub_100289018(v0, (uint64_t)v1);
  StreamingKind.debugDescription.getter();
}

uint64_t type metadata accessor for Response(uint64_t a1)
{
  return sub_10029BE2C(a1, qword_100711550);
}

{
  return sub_10003B314(a1, qword_100713710);
}

uint64_t type metadata accessor for ResponseOrContinuationRequest(uint64_t a1)
{
  return sub_10029BE2C(a1, qword_1007114A8);
}

uint64_t sub_10029BE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10029BE60(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10029BEB8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

unint64_t sub_10029BF18(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u)
  {
    sub_100212D94(result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10029BF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  int v24 = (a23 >> 9) & 7;
  switch(v24)
  {
    case 4:
      swift_release();
      break;
    case 3:
      sub_100212DE0(a1, a2, a3, a4, a5);
      break;
    case 2:
      unsigned __int16 v25 = a23 & 0xF1FF;
      sub_100212EB0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        v25);
      break;
  }
}

uint64_t sub_10029C030(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_10029C090(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u)
  {
    sub_1002965E4(result);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10029C0D8(uint64_t a1)
{
  unsigned int v1 = (*(unsigned __int16 *)(a1 + 176) >> 9) & 7;
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

void sub_10029C0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  int v24 = (a23 >> 9) & 7;
  switch(v24)
  {
    case 4:
      swift_retain();
      break;
    case 3:
      sub_1002892B4(a1, a2, a3, a4, a5);
      break;
    case 2:
      unsigned __int16 v25 = a23 & 0xF1FF;
      sub_1002890C4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        v25);
      break;
  }
}

uint64_t sub_10029C1C4(uint64_t result)
{
  *(_WORD *)(result + 176) &= 0xF1FFu;
  return result;
}

uint64_t sub_10029C1D4()
{
  return ResponseEncodeBuffer.writeResponse(_:)(*(void *)(v0 + 16));
}

uint64_t sub_10029C200(uint64_t a1)
{
  return sub_10029A23C(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t sub_10029C20C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

uint64_t sub_10029C280(uint64_t a1)
{
  return a1;
}

uint64_t sub_10029C2B8()
{
  return sub_10029C348(&qword_100711418, (void (*)(uint64_t))type metadata accessor for ResponseOrContinuationRequest);
}

uint64_t sub_10029C300()
{
  return sub_10029C348(&qword_100711420, (void (*)(uint64_t))type metadata accessor for Response);
}

uint64_t sub_10029C348(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10029C394()
{
  unint64_t result = qword_100711428;
  if (!qword_100711428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711428);
  }
  return result;
}

unint64_t sub_10029C3E4()
{
  unint64_t result = qword_100711430;
  if (!qword_100711430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711430);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ResponseOrContinuationRequest(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Response(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for ResponsePayload();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v32 = *(void *)a2;
              uint64_t v33 = *(void *)(a2 + 8);
              uint64_t v34 = *(void *)(a2 + 16);
              uint64_t v35 = *(void *)(a2 + 32);
              uint64_t v36 = *(void *)(a2 + 40);
              uint64_t v61 = v35;
              uint64_t v37 = *(void *)(a2 + 56);
              uint64_t v63 = *(void *)(a2 + 64);
              uint64_t v65 = *(void *)(a2 + 72);
              uint64_t v67 = *(void *)(a2 + 80);
              uint64_t v69 = *(void *)(a2 + 88);
              uint64_t v71 = *(void *)(a2 + 96);
              uint64_t v73 = *(void *)(a2 + 104);
              uint64_t v75 = *(void *)(a2 + 112);
              unsigned __int8 v77 = *(unsigned char *)(a2 + 120);
              uint64_t v38 = *(void *)a2;
              uint64_t v39 = *(void *)(a2 + 24);
              uint64_t v40 = *(void *)(a2 + 48);
              sub_100280BDC(v38, v33, v34, v39, v35, v36, v40, v37, v63, v65, v67, v69, v71, v73, v75, v77);
              *(void *)a1 = v32;
              *(void *)(a1 + 8) = v33;
              *(void *)(a1 + 16) = v34;
              *(void *)(a1 + 24) = v39;
              *(void *)(a1 + 32) = v61;
              *(void *)(a1 + 40) = v36;
              *(void *)(a1 + 48) = v40;
              *(void *)(a1 + 56) = v37;
              *(void *)(a1 + 64) = v63;
              *(void *)(a1 + 72) = v65;
              *(void *)(a1 + 80) = v67;
              *(void *)(a1 + 88) = v69;
              *(void *)(a1 + 96) = v71;
              *(void *)(a1 + 104) = v73;
              *(void *)(a1 + 112) = v75;
              *(unsigned char *)(a1 + 120) = v77;
              break;
            case 2u:
              uint64_t v41 = type metadata accessor for MessageData();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                case 2u:
                  uint64_t v42 = sub_10000566C(&qword_100710538);
                  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
                  goto LABEL_26;
                case 3u:
                case 4u:
                  *(void *)a1 = *(void *)a2;
                  swift_bridgeObjectRetain();
LABEL_26:
                  swift_storeEnumTagMultiPayload();
                  break;
                default:
                  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v41 - 8) + 64));
                  break;
              }
              break;
            case 3u:
            case 4u:
              *(void *)a1 = *(void *)a2;
              swift_bridgeObjectRetain();
              break;
            case 5u:
              uint64_t v43 = *(void *)(a2 + 8);
              *(void *)a1 = *(void *)a2;
              *(void *)(a1 + 8) = v43;
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              swift_retain();
              swift_retain();
              swift_retain();
              break;
            case 6u:
              *(void *)a1 = *(void *)a2;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(void *)(a1 + 24) = *(void *)(a2 + 24);
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
              *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 7u:
              *(void *)a1 = *(void *)a2;
              *(void *)(a1 + 8) = *(void *)(a2 + 8);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
              *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
              *(void *)(a1 + 24) = *(void *)(a2 + 24);
              swift_retain();
              swift_bridgeObjectRetain();
              break;
            case 8u:
              uint64_t v44 = *(void *)a2;
              uint64_t v45 = *(void *)(a2 + 8);
              uint64_t v46 = *(void *)(a2 + 16);
              uint64_t v47 = *(void *)(a2 + 24);
              int v48 = *(_DWORD *)(a2 + 32);
              sub_10028D48C(v44, v45, v46);
              *(void *)a1 = v44;
              *(void *)(a1 + 8) = v45;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = v47;
              *(_DWORD *)(a1 + 32) = v48;
              break;
            case 9u:
              uint64_t v49 = *(void *)a2;
              uint64_t v50 = *(void *)(a2 + 8);
              uint64_t v51 = *(void *)(a2 + 16);
              char v52 = *(unsigned char *)(a2 + 24);
              sub_1002953E0();
              *(void *)a1 = v49;
              *(void *)(a1 + 8) = v50;
              *(void *)(a1 + 16) = v51;
              *(unsigned char *)(a1 + 24) = v52;
              break;
            default:
              unint64_t v7 = *(void *)a2;
              uint64_t v8 = *(void *)(a2 + 8);
              uint64_t v9 = *(void *)(a2 + 16);
              unsigned __int8 v10 = *(unsigned char *)(a2 + 24);
              sub_10029CBFC(v7, v8, v9, v10);
              *(void *)a1 = v7;
              *(void *)(a1 + 8) = v8;
              *(void *)(a1 + 16) = v9;
              *(unsigned char *)(a1 + 24) = v10;
              break;
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_28;
        case 1u:
          uint64_t v16 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 24);
          uint64_t v54 = *(void *)(a2 + 64);
          uint64_t v55 = *(void *)(a2 + 72);
          uint64_t v56 = *(void *)(a2 + 80);
          uint64_t v57 = *(void *)(a2 + 88);
          uint64_t v58 = *(void *)(a2 + 96);
          uint64_t v59 = *(void *)(a2 + 104);
          uint64_t v60 = *(void *)(a2 + 112);
          uint64_t v62 = *(void *)(a2 + 120);
          uint64_t v64 = *(void *)(a2 + 128);
          uint64_t v66 = *(void *)(a2 + 136);
          uint64_t v68 = *(void *)(a2 + 144);
          uint64_t v70 = *(void *)(a2 + 152);
          uint64_t v72 = *(void *)(a2 + 160);
          uint64_t v74 = *(void *)(a2 + 168);
          unsigned __int16 v76 = *(_WORD *)(a2 + 176);
          uint64_t v18 = *(void *)a2;
          uint64_t v19 = *(void *)(a2 + 8);
          uint64_t v20 = *(void *)(a2 + 32);
          uint64_t v21 = *(void *)(a2 + 40);
          uint64_t v22 = *(void *)(a2 + 48);
          uint64_t v23 = *(void *)(a2 + 56);
          sub_10029C0F4(v18, v19, v16, v17, v20, v21, v22, v23, v54, v55, v56, v57, v58, v59, v60, v62, v64, v66, v68,
            v70,
            v72,
            v74,
            v76);
          *(void *)a1 = v18;
          *(void *)(a1 + 8) = v19;
          *(void *)(a1 + 16) = v16;
          *(void *)(a1 + 24) = v17;
          *(void *)(a1 + 32) = v20;
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v22;
          *(void *)(a1 + 56) = v23;
          *(void *)(a1 + 64) = v54;
          *(void *)(a1 + 72) = v55;
          *(void *)(a1 + 80) = v56;
          *(void *)(a1 + 88) = v57;
          *(void *)(a1 + 96) = v58;
          *(void *)(a1 + 104) = v59;
          *(void *)(a1 + 112) = v60;
          *(void *)(a1 + 120) = v62;
          *(void *)(a1 + 128) = v64;
          *(void *)(a1 + 136) = v66;
          *(void *)(a1 + 144) = v68;
          *(void *)(a1 + 152) = v70;
          *(void *)(a1 + 160) = v72;
          *(void *)(a1 + 168) = v74;
          *(_WORD *)(a1 + 176) = v76;
          goto LABEL_28;
        case 2u:
          uint64_t v24 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v24;
          unint64_t v25 = *(void *)(a2 + 16);
          uint64_t v26 = *(void *)(a2 + 24);
          uint64_t v27 = *(void *)(a2 + 32);
          unsigned __int8 v28 = *(unsigned char *)(a2 + 40);
          swift_bridgeObjectRetain();
          sub_10029C090(v25, v26, v27, v28);
          *(void *)(a1 + 16) = v25;
          *(void *)(a1 + 24) = v26;
          *(void *)(a1 + 32) = v27;
          *(unsigned char *)(a1 + 40) = v28;
          goto LABEL_28;
        case 3u:
          uint64_t v29 = *(void *)a2;
          if ((~*(void *)a2 & 0xF000000000000007) != 0) {
            sub_1002965F8(*(void *)a2);
          }
          uint64_t v31 = *(void *)(a2 + 8);
          uint64_t v30 = *(void *)(a2 + 16);
          *(void *)a1 = v29;
          *(void *)(a1 + 8) = v31;
          *(void *)(a1 + 16) = v30;
          swift_bridgeObjectRetain();
          goto LABEL_28;
        case 4u:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
          swift_retain();
LABEL_28:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
    }
    else
    {
      unint64_t v12 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
      char v15 = *(unsigned char *)(a2 + 24);
      sub_10029667C(v12, v13, v14, v15);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v15;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unint64_t sub_10029CBFC(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    sub_1002965E4(result);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for ResponseOrContinuationRequest(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Response(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        type metadata accessor for ResponsePayload();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            unint64_t v10 = *(void *)a1;
            uint64_t v11 = *(void *)(a1 + 8);
            uint64_t v12 = *(void *)(a1 + 16);
            unsigned __int8 v13 = *(unsigned char *)(a1 + 24);
            sub_10029CFCC(v10, v11, v12, v13);
            break;
          case 1u:
            sub_100280A34(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
            break;
          case 2u:
            type metadata accessor for MessageData();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
              case 2u:
                uint64_t v14 = sub_10000566C(&qword_100710538);
                char v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
                v15(a1, v14);
                break;
              case 3u:
              case 4u:
                goto LABEL_14;
              default:
                return;
            }
            break;
          case 3u:
          case 4u:
            goto LABEL_14;
          case 5u:
            swift_release();
            swift_release();
            goto LABEL_17;
          case 6u:
            swift_bridgeObjectRelease();
            goto LABEL_17;
          case 7u:
            swift_release();
            goto LABEL_14;
          case 8u:
            uint64_t v16 = *(void *)a1;
            uint64_t v17 = *(void *)(a1 + 8);
            uint64_t v18 = *(void *)(a1 + 16);
            sub_10028D508(v16, v17, v18);
            break;
          case 9u:
            sub_100295400();
            break;
          default:
            return;
        }
        break;
      case 1u:
        sub_10029BF60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
          *(void *)(a1 + 152),
          *(void *)(a1 + 160),
          *(void *)(a1 + 168),
          *(_WORD *)(a1 + 176));
        break;
      case 2u:
        swift_bridgeObjectRelease();
        unint64_t v6 = *(void *)(a1 + 16);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        unsigned __int8 v9 = *(unsigned char *)(a1 + 40);
        sub_10029BF18(v6, v7, v8, v9);
        break;
      case 3u:
        if ((~*(void *)a1 & 0xF000000000000007) != 0) {
          sub_100212D10(*(void *)a1);
        }
LABEL_14:
        swift_bridgeObjectRelease();
        break;
      case 4u:
LABEL_17:
        swift_release();
        break;
      default:
        return;
    }
  }
  else
  {
    unint64_t v2 = *(void *)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    char v5 = *(unsigned char *)(a1 + 24);
    sub_1002966C8(v2, v3, v4, v5);
  }
}

unint64_t sub_10029CFCC(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    sub_100212D94(result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ResponseOrContinuationRequest(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Response(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        type metadata accessor for ResponsePayload();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v29 = *(void *)a2;
            uint64_t v30 = *(void *)(a2 + 8);
            uint64_t v31 = *(void *)(a2 + 16);
            uint64_t v32 = *(void *)(a2 + 32);
            uint64_t v33 = *(void *)(a2 + 40);
            uint64_t v58 = v32;
            uint64_t v34 = *(void *)(a2 + 56);
            uint64_t v60 = *(void *)(a2 + 64);
            uint64_t v62 = *(void *)(a2 + 72);
            uint64_t v64 = *(void *)(a2 + 80);
            uint64_t v66 = *(void *)(a2 + 88);
            uint64_t v68 = *(void *)(a2 + 96);
            uint64_t v70 = *(void *)(a2 + 104);
            uint64_t v72 = *(void *)(a2 + 112);
            unsigned __int8 v74 = *(unsigned char *)(a2 + 120);
            uint64_t v35 = *(void *)a2;
            uint64_t v36 = *(void *)(a2 + 24);
            uint64_t v37 = *(void *)(a2 + 48);
            sub_100280BDC(v35, v30, v31, v36, v32, v33, v37, v34, v60, v62, v64, v66, v68, v70, v72, v74);
            *(void *)a1 = v29;
            *(void *)(a1 + 8) = v30;
            *(void *)(a1 + 16) = v31;
            *(void *)(a1 + 24) = v36;
            *(void *)(a1 + 32) = v58;
            *(void *)(a1 + 40) = v33;
            *(void *)(a1 + 48) = v37;
            *(void *)(a1 + 56) = v34;
            *(void *)(a1 + 64) = v60;
            *(void *)(a1 + 72) = v62;
            *(void *)(a1 + 80) = v64;
            *(void *)(a1 + 88) = v66;
            *(void *)(a1 + 96) = v68;
            *(void *)(a1 + 104) = v70;
            *(void *)(a1 + 112) = v72;
            *(unsigned char *)(a1 + 120) = v74;
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for MessageData();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
              case 2u:
                uint64_t v39 = sub_10000566C(&qword_100710538);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
                goto LABEL_24;
              case 3u:
              case 4u:
                *(void *)a1 = *(void *)a2;
                swift_bridgeObjectRetain();
LABEL_24:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v38 - 8) + 64));
                break;
            }
            break;
          case 3u:
          case 4u:
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
            break;
          case 5u:
            uint64_t v40 = *(void *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = v40;
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            break;
          case 6u:
            *(void *)a1 = *(void *)a2;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            break;
          case 8u:
            uint64_t v41 = *(void *)a2;
            uint64_t v42 = *(void *)(a2 + 8);
            uint64_t v43 = *(void *)(a2 + 16);
            uint64_t v44 = *(void *)(a2 + 24);
            int v45 = *(_DWORD *)(a2 + 32);
            sub_10028D48C(v41, v42, v43);
            *(void *)a1 = v41;
            *(void *)(a1 + 8) = v42;
            *(void *)(a1 + 16) = v43;
            *(void *)(a1 + 24) = v44;
            *(_DWORD *)(a1 + 32) = v45;
            break;
          case 9u:
            uint64_t v46 = *(void *)a2;
            uint64_t v47 = *(void *)(a2 + 8);
            uint64_t v48 = *(void *)(a2 + 16);
            char v49 = *(unsigned char *)(a2 + 24);
            sub_1002953E0();
            *(void *)a1 = v46;
            *(void *)(a1 + 8) = v47;
            *(void *)(a1 + 16) = v48;
            *(unsigned char *)(a1 + 24) = v49;
            break;
          default:
            unint64_t v5 = *(void *)a2;
            uint64_t v6 = *(void *)(a2 + 8);
            uint64_t v7 = *(void *)(a2 + 16);
            unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
            sub_10029CBFC(v5, v6, v7, v8);
            *(void *)a1 = v5;
            *(void *)(a1 + 8) = v6;
            *(void *)(a1 + 16) = v7;
            *(unsigned char *)(a1 + 24) = v8;
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      case 1u:
        uint64_t v13 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v51 = *(void *)(a2 + 64);
        uint64_t v52 = *(void *)(a2 + 72);
        uint64_t v53 = *(void *)(a2 + 80);
        uint64_t v54 = *(void *)(a2 + 88);
        uint64_t v55 = *(void *)(a2 + 96);
        uint64_t v56 = *(void *)(a2 + 104);
        uint64_t v57 = *(void *)(a2 + 112);
        uint64_t v59 = *(void *)(a2 + 120);
        uint64_t v61 = *(void *)(a2 + 128);
        uint64_t v63 = *(void *)(a2 + 136);
        uint64_t v65 = *(void *)(a2 + 144);
        uint64_t v67 = *(void *)(a2 + 152);
        uint64_t v69 = *(void *)(a2 + 160);
        uint64_t v71 = *(void *)(a2 + 168);
        unsigned __int16 v73 = *(_WORD *)(a2 + 176);
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 32);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = *(void *)(a2 + 48);
        uint64_t v20 = *(void *)(a2 + 56);
        sub_10029C0F4(v15, v16, v13, v14, v17, v18, v19, v20, v51, v52, v53, v54, v55, v56, v57, v59, v61, v63, v65,
          v67,
          v69,
          v71,
          v73);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v13;
        *(void *)(a1 + 24) = v14;
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 40) = v18;
        *(void *)(a1 + 48) = v19;
        *(void *)(a1 + 56) = v20;
        *(void *)(a1 + 64) = v51;
        *(void *)(a1 + 72) = v52;
        *(void *)(a1 + 80) = v53;
        *(void *)(a1 + 88) = v54;
        *(void *)(a1 + 96) = v55;
        *(void *)(a1 + 104) = v56;
        *(void *)(a1 + 112) = v57;
        *(void *)(a1 + 120) = v59;
        *(void *)(a1 + 128) = v61;
        *(void *)(a1 + 136) = v63;
        *(void *)(a1 + 144) = v65;
        *(void *)(a1 + 152) = v67;
        *(void *)(a1 + 160) = v69;
        *(void *)(a1 + 168) = v71;
        *(_WORD *)(a1 + 176) = v73;
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v21 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v21;
        unint64_t v22 = *(void *)(a2 + 16);
        uint64_t v23 = *(void *)(a2 + 24);
        uint64_t v24 = *(void *)(a2 + 32);
        unsigned __int8 v25 = *(unsigned char *)(a2 + 40);
        swift_bridgeObjectRetain();
        sub_10029C090(v22, v23, v24, v25);
        *(void *)(a1 + 16) = v22;
        *(void *)(a1 + 24) = v23;
        *(void *)(a1 + 32) = v24;
        *(unsigned char *)(a1 + 40) = v25;
        goto LABEL_26;
      case 3u:
        uint64_t v26 = *(void *)a2;
        if ((~*(void *)a2 & 0xF000000000000007) != 0) {
          sub_1002965F8(*(void *)a2);
        }
        uint64_t v28 = *(void *)(a2 + 8);
        uint64_t v27 = *(void *)(a2 + 16);
        *(void *)a1 = v26;
        *(void *)(a1 + 8) = v28;
        *(void *)(a1 + 16) = v27;
        swift_bridgeObjectRetain();
        goto LABEL_26;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
        swift_retain();
LABEL_26:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v4 - 8) + 64));
        break;
    }
  }
  else
  {
    unint64_t v9 = *(void *)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    char v12 = *(unsigned char *)(a2 + 24);
    sub_10029667C(v9, v10, v11, v12);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v11;
    *(unsigned char *)(a1 + 24) = v12;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ResponseOrContinuationRequest(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10029BE60(a1, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Response(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for ResponsePayload();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v27 = *(void *)a2;
              uint64_t v28 = *(void *)(a2 + 8);
              uint64_t v29 = *(void *)(a2 + 16);
              uint64_t v30 = *(void *)(a2 + 32);
              uint64_t v31 = *(void *)(a2 + 40);
              uint64_t v57 = v30;
              uint64_t v32 = *(void *)(a2 + 56);
              uint64_t v59 = *(void *)(a2 + 64);
              uint64_t v61 = *(void *)(a2 + 72);
              uint64_t v63 = *(void *)(a2 + 80);
              uint64_t v65 = *(void *)(a2 + 88);
              uint64_t v67 = *(void *)(a2 + 96);
              uint64_t v69 = *(void *)(a2 + 104);
              uint64_t v71 = *(void *)(a2 + 112);
              unsigned __int8 v73 = *(unsigned char *)(a2 + 120);
              uint64_t v33 = *(void *)a2;
              uint64_t v34 = *(void *)(a2 + 24);
              uint64_t v35 = *(void *)(a2 + 48);
              sub_100280BDC(v33, v28, v29, v34, v30, v31, v35, v32, v59, v61, v63, v65, v67, v69, v71, v73);
              *(void *)a1 = v27;
              *(void *)(a1 + 8) = v28;
              *(void *)(a1 + 16) = v29;
              *(void *)(a1 + 24) = v34;
              *(void *)(a1 + 32) = v57;
              *(void *)(a1 + 40) = v31;
              *(void *)(a1 + 48) = v35;
              *(void *)(a1 + 56) = v32;
              *(void *)(a1 + 64) = v59;
              *(void *)(a1 + 72) = v61;
              *(void *)(a1 + 80) = v63;
              *(void *)(a1 + 88) = v65;
              *(void *)(a1 + 96) = v67;
              *(void *)(a1 + 104) = v69;
              *(void *)(a1 + 112) = v71;
              *(unsigned char *)(a1 + 120) = v73;
              break;
            case 2u:
              uint64_t v36 = type metadata accessor for MessageData();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                case 2u:
                  uint64_t v37 = sub_10000566C(&qword_100710538);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
                  goto LABEL_25;
                case 3u:
                case 4u:
                  *(void *)a1 = *(void *)a2;
                  swift_bridgeObjectRetain();
LABEL_25:
                  swift_storeEnumTagMultiPayload();
                  break;
                default:
                  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v36 - 8) + 64));
                  break;
              }
              break;
            case 3u:
            case 4u:
              *(void *)a1 = *(void *)a2;
              swift_bridgeObjectRetain();
              break;
            case 5u:
              *(void *)a1 = *(void *)a2;
              *(void *)(a1 + 8) = *(void *)(a2 + 8);
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              swift_retain();
              swift_retain();
              swift_retain();
              break;
            case 6u:
              *(void *)a1 = *(void *)a2;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
              int v38 = *(_DWORD *)(a2 + 32);
              *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
              *(_DWORD *)(a1 + 32) = v38;
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 7u:
              *(void *)a1 = *(void *)a2;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
              int v39 = *(_DWORD *)(a2 + 16);
              *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
              *(_DWORD *)(a1 + 16) = v39;
              *(void *)(a1 + 24) = *(void *)(a2 + 24);
              swift_retain();
              swift_bridgeObjectRetain();
              break;
            case 8u:
              uint64_t v40 = *(void *)a2;
              uint64_t v41 = *(void *)(a2 + 8);
              uint64_t v42 = *(void *)(a2 + 16);
              uint64_t v43 = *(void *)(a2 + 24);
              int v44 = *(_DWORD *)(a2 + 32);
              sub_10028D48C(v40, v41, v42);
              *(void *)a1 = v40;
              *(void *)(a1 + 8) = v41;
              *(void *)(a1 + 16) = v42;
              *(void *)(a1 + 24) = v43;
              *(_DWORD *)(a1 + 32) = v44;
              break;
            case 9u:
              uint64_t v45 = *(void *)a2;
              uint64_t v46 = *(void *)(a2 + 8);
              uint64_t v47 = *(void *)(a2 + 16);
              char v48 = *(unsigned char *)(a2 + 24);
              sub_1002953E0();
              *(void *)a1 = v45;
              *(void *)(a1 + 8) = v46;
              *(void *)(a1 + 16) = v47;
              *(unsigned char *)(a1 + 24) = v48;
              break;
            default:
              unint64_t v5 = *(void *)a2;
              uint64_t v6 = *(void *)(a2 + 8);
              uint64_t v7 = *(void *)(a2 + 16);
              unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
              sub_10029CBFC(v5, v6, v7, v8);
              *(void *)a1 = v5;
              *(void *)(a1 + 8) = v6;
              *(void *)(a1 + 16) = v7;
              *(unsigned char *)(a1 + 24) = v8;
              break;
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_27;
        case 1u:
          uint64_t v13 = *(void *)(a2 + 16);
          uint64_t v14 = *(void *)(a2 + 24);
          uint64_t v50 = *(void *)(a2 + 64);
          uint64_t v51 = *(void *)(a2 + 72);
          uint64_t v52 = *(void *)(a2 + 80);
          uint64_t v53 = *(void *)(a2 + 88);
          uint64_t v54 = *(void *)(a2 + 96);
          uint64_t v55 = *(void *)(a2 + 104);
          uint64_t v56 = *(void *)(a2 + 112);
          uint64_t v58 = *(void *)(a2 + 120);
          uint64_t v60 = *(void *)(a2 + 128);
          uint64_t v62 = *(void *)(a2 + 136);
          uint64_t v64 = *(void *)(a2 + 144);
          uint64_t v66 = *(void *)(a2 + 152);
          uint64_t v68 = *(void *)(a2 + 160);
          uint64_t v70 = *(void *)(a2 + 168);
          unsigned __int16 v72 = *(_WORD *)(a2 + 176);
          uint64_t v15 = *(void *)a2;
          uint64_t v16 = *(void *)(a2 + 8);
          uint64_t v17 = *(void *)(a2 + 32);
          uint64_t v18 = *(void *)(a2 + 40);
          uint64_t v19 = *(void *)(a2 + 48);
          uint64_t v20 = *(void *)(a2 + 56);
          sub_10029C0F4(v15, v16, v13, v14, v17, v18, v19, v20, v50, v51, v52, v53, v54, v55, v56, v58, v60, v62, v64,
            v66,
            v68,
            v70,
            v72);
          *(void *)a1 = v15;
          *(void *)(a1 + 8) = v16;
          *(void *)(a1 + 16) = v13;
          *(void *)(a1 + 24) = v14;
          *(void *)(a1 + 32) = v17;
          *(void *)(a1 + 40) = v18;
          *(void *)(a1 + 48) = v19;
          *(void *)(a1 + 56) = v20;
          *(void *)(a1 + 64) = v50;
          *(void *)(a1 + 72) = v51;
          *(void *)(a1 + 80) = v52;
          *(void *)(a1 + 88) = v53;
          *(void *)(a1 + 96) = v54;
          *(void *)(a1 + 104) = v55;
          *(void *)(a1 + 112) = v56;
          *(void *)(a1 + 120) = v58;
          *(void *)(a1 + 128) = v60;
          *(void *)(a1 + 136) = v62;
          *(void *)(a1 + 144) = v64;
          *(void *)(a1 + 152) = v66;
          *(void *)(a1 + 160) = v68;
          *(void *)(a1 + 168) = v70;
          *(_WORD *)(a1 + 176) = v72;
          goto LABEL_27;
        case 2u:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          unint64_t v21 = *(void *)(a2 + 16);
          uint64_t v22 = *(void *)(a2 + 24);
          uint64_t v23 = *(void *)(a2 + 32);
          unsigned __int8 v24 = *(unsigned char *)(a2 + 40);
          swift_bridgeObjectRetain();
          sub_10029C090(v21, v22, v23, v24);
          *(void *)(a1 + 16) = v21;
          *(void *)(a1 + 24) = v22;
          *(void *)(a1 + 32) = v23;
          *(unsigned char *)(a1 + 40) = v24;
          goto LABEL_27;
        case 3u:
          uint64_t v25 = *(void *)a2;
          if ((~*(void *)a2 & 0xF000000000000007) != 0) {
            sub_1002965F8(*(void *)a2);
          }
          *(void *)a1 = v25;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          swift_bridgeObjectRetain();
          goto LABEL_27;
        case 4u:
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          int v26 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
          *(_DWORD *)(a1 + 16) = v26;
          swift_retain();
LABEL_27:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v4 - 8) + 64));
          break;
      }
    }
    else
    {
      unint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      char v12 = *(unsigned char *)(a2 + 24);
      sub_10029667C(v9, v10, v11, v12);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = v11;
      *(unsigned char *)(a1 + 24) = v12;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ResponseOrContinuationRequest(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Response(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for ResponsePayload();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v8 = type metadata accessor for MessageData();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          uint64_t v10 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ResponseOrContinuationRequest(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10029BE60((uint64_t)a1, (void (*)(void))type metadata accessor for ResponseOrContinuationRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Response(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = type metadata accessor for ResponsePayload();
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          uint64_t v8 = type metadata accessor for MessageData();
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
          {
            uint64_t v10 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10029E3B0()
{
  uint64_t result = type metadata accessor for Response(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for Response(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        type metadata accessor for ResponsePayload();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v28 = *(void *)a2;
            uint64_t v29 = *(void *)(a2 + 8);
            uint64_t v30 = *(void *)(a2 + 16);
            uint64_t v31 = *(void *)(a2 + 24);
            uint64_t v32 = *(void *)(a2 + 32);
            uint64_t v33 = *(void *)(a2 + 56);
            uint64_t v56 = *(void *)(a2 + 40);
            uint64_t v58 = *(void *)(a2 + 64);
            uint64_t v60 = *(void *)(a2 + 72);
            uint64_t v62 = *(void *)(a2 + 80);
            uint64_t v64 = *(void *)(a2 + 88);
            uint64_t v66 = *(void *)(a2 + 96);
            uint64_t v68 = *(void *)(a2 + 104);
            uint64_t v70 = *(void *)(a2 + 112);
            unsigned __int8 v72 = *(unsigned char *)(a2 + 120);
            uint64_t v34 = *(void *)a2;
            uint64_t v35 = *(void *)(a2 + 48);
            sub_100280BDC(v34, v29, v30, v31, v32, v56, v35, v33, v58, v60, v62, v64, v66, v68, v70, v72);
            *(void *)a1 = v28;
            *(void *)(a1 + 8) = v29;
            *(void *)(a1 + 16) = v30;
            *(void *)(a1 + 24) = v31;
            *(void *)(a1 + 32) = v32;
            *(void *)(a1 + 40) = v56;
            *(void *)(a1 + 48) = v35;
            *(void *)(a1 + 56) = v33;
            *(void *)(a1 + 64) = v58;
            *(void *)(a1 + 72) = v60;
            *(void *)(a1 + 80) = v62;
            *(void *)(a1 + 88) = v64;
            *(void *)(a1 + 96) = v66;
            *(void *)(a1 + 104) = v68;
            *(void *)(a1 + 112) = v70;
            *(unsigned char *)(a1 + 120) = v72;
            break;
          case 2u:
            uint64_t v36 = type metadata accessor for MessageData();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
              case 2u:
                uint64_t v37 = sub_10000566C(&qword_100710538);
                (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
                goto LABEL_24;
              case 3u:
              case 4u:
                *(void *)a1 = *(void *)a2;
                swift_bridgeObjectRetain();
LABEL_24:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v36 - 8) + 64));
                break;
            }
            break;
          case 3u:
          case 4u:
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
            break;
          case 5u:
            uint64_t v38 = *(void *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = v38;
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            break;
          case 6u:
            *(void *)a1 = *(void *)a2;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            break;
          case 8u:
            uint64_t v39 = *(void *)a2;
            uint64_t v40 = *(void *)(a2 + 8);
            uint64_t v41 = *(void *)(a2 + 16);
            uint64_t v42 = *(void *)(a2 + 24);
            int v43 = *(_DWORD *)(a2 + 32);
            sub_10028D48C(v39, v40, v41);
            *(void *)a1 = v39;
            *(void *)(a1 + 8) = v40;
            *(void *)(a1 + 16) = v41;
            *(void *)(a1 + 24) = v42;
            *(_DWORD *)(a1 + 32) = v43;
            break;
          case 9u:
            uint64_t v44 = *(void *)a2;
            uint64_t v45 = *(void *)(a2 + 8);
            uint64_t v46 = *(void *)(a2 + 16);
            char v47 = *(unsigned char *)(a2 + 24);
            sub_1002953E0();
            *(void *)a1 = v44;
            *(void *)(a1 + 8) = v45;
            *(void *)(a1 + 16) = v46;
            *(unsigned char *)(a1 + 24) = v47;
            break;
          default:
            unint64_t v7 = *(void *)a2;
            uint64_t v8 = *(void *)(a2 + 8);
            uint64_t v9 = *(void *)(a2 + 16);
            unsigned __int8 v10 = *(unsigned char *)(a2 + 24);
            sub_10029CBFC(v7, v8, v9, v10);
            *(void *)a1 = v7;
            *(void *)(a1 + 8) = v8;
            *(void *)(a1 + 16) = v9;
            *(unsigned char *)(a1 + 24) = v10;
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      case 1u:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v13 = *(void *)(a2 + 32);
        uint64_t v14 = *(void *)(a2 + 40);
        uint64_t v49 = *(void *)(a2 + 64);
        uint64_t v50 = *(void *)(a2 + 72);
        uint64_t v51 = *(void *)(a2 + 80);
        uint64_t v52 = *(void *)(a2 + 88);
        uint64_t v53 = *(void *)(a2 + 96);
        uint64_t v54 = *(void *)(a2 + 104);
        uint64_t v55 = *(void *)(a2 + 112);
        uint64_t v57 = *(void *)(a2 + 120);
        uint64_t v59 = *(void *)(a2 + 128);
        uint64_t v61 = *(void *)(a2 + 136);
        uint64_t v63 = *(void *)(a2 + 144);
        uint64_t v65 = *(void *)(a2 + 152);
        uint64_t v67 = *(void *)(a2 + 160);
        uint64_t v69 = *(void *)(a2 + 168);
        unsigned __int16 v71 = *(_WORD *)(a2 + 176);
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 16);
        uint64_t v18 = *(void *)(a2 + 48);
        uint64_t v19 = *(void *)(a2 + 56);
        sub_10029C0F4(v15, v16, v17, v12, v13, v14, v18, v19, v49, v50, v51, v52, v53, v54, v55, v57, v59, v61, v63,
          v65,
          v67,
          v69,
          v71);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = v13;
        *(void *)(a1 + 40) = v14;
        *(void *)(a1 + 48) = v18;
        *(void *)(a1 + 56) = v19;
        *(void *)(a1 + 64) = v49;
        *(void *)(a1 + 72) = v50;
        *(void *)(a1 + 80) = v51;
        *(void *)(a1 + 88) = v52;
        *(void *)(a1 + 96) = v53;
        *(void *)(a1 + 104) = v54;
        *(void *)(a1 + 112) = v55;
        *(void *)(a1 + 120) = v57;
        *(void *)(a1 + 128) = v59;
        *(void *)(a1 + 136) = v61;
        *(void *)(a1 + 144) = v63;
        *(void *)(a1 + 152) = v65;
        *(void *)(a1 + 160) = v67;
        *(void *)(a1 + 168) = v69;
        *(_WORD *)(a1 + 176) = v71;
        goto LABEL_26;
      case 2u:
        uint64_t v20 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v20;
        unint64_t v21 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        uint64_t v23 = *(void *)(a2 + 32);
        unsigned __int8 v24 = *(unsigned char *)(a2 + 40);
        swift_bridgeObjectRetain();
        sub_10029C090(v21, v22, v23, v24);
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
        *(void *)(a1 + 32) = v23;
        *(unsigned char *)(a1 + 40) = v24;
        goto LABEL_26;
      case 3u:
        uint64_t v25 = *(void *)a2;
        if ((~*(void *)a2 & 0xF000000000000007) != 0) {
          sub_1002965F8(*(void *)a2);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v26 = *(void *)(a2 + 16);
        *(void *)a1 = v25;
        *(void *)(a1 + 8) = v27;
        *(void *)(a1 + 16) = v26;
        swift_bridgeObjectRetain();
        goto LABEL_26;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
        swift_retain();
LABEL_26:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for Response(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for ResponsePayload();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          unint64_t v6 = *(void *)a1;
          uint64_t v7 = *(void *)(a1 + 8);
          uint64_t v8 = *(void *)(a1 + 16);
          unsigned __int8 v9 = *(unsigned char *)(a1 + 24);
          sub_10029CFCC(v6, v7, v8, v9);
          break;
        case 1u:
          sub_100280A34(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
          break;
        case 2u:
          type metadata accessor for MessageData();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
            case 2u:
              uint64_t v10 = sub_10000566C(&qword_100710538);
              uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
              v11(a1, v10);
              break;
            case 3u:
            case 4u:
              goto LABEL_10;
            default:
              return;
          }
          break;
        case 3u:
        case 4u:
          goto LABEL_10;
        case 5u:
          swift_release();
          swift_release();
          goto LABEL_13;
        case 6u:
          swift_bridgeObjectRelease();
          goto LABEL_13;
        case 7u:
          swift_release();
          goto LABEL_10;
        case 8u:
          uint64_t v12 = *(void *)a1;
          uint64_t v13 = *(void *)(a1 + 8);
          uint64_t v14 = *(void *)(a1 + 16);
          sub_10028D508(v12, v13, v14);
          break;
        case 9u:
          sub_100295400();
          break;
        default:
          return;
      }
      break;
    case 1u:
      sub_10029BF60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
        *(void *)(a1 + 152),
        *(void *)(a1 + 160),
        *(void *)(a1 + 168),
        *(_WORD *)(a1 + 176));
      break;
    case 2u:
      swift_bridgeObjectRelease();
      unint64_t v2 = *(void *)(a1 + 16);
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      unsigned __int8 v5 = *(unsigned char *)(a1 + 40);
      sub_10029BF18(v2, v3, v4, v5);
      break;
    case 3u:
      if ((~*(void *)a1 & 0xF000000000000007) != 0) {
        sub_100212D10(*(void *)a1);
      }
LABEL_10:
      swift_bridgeObjectRelease();
      break;
    case 4u:
LABEL_13:
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for ResponsePayload();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v32 = *(void *)a2;
          uint64_t v33 = *(void *)(a2 + 8);
          uint64_t v34 = *(void *)(a2 + 16);
          uint64_t v35 = *(void *)(a2 + 24);
          uint64_t v36 = *(void *)(a2 + 32);
          uint64_t v37 = *(void *)(a2 + 40);
          uint64_t v38 = *(void *)(a2 + 48);
          uint64_t v61 = *(void *)(a2 + 64);
          uint64_t v63 = *(void *)(a2 + 72);
          uint64_t v65 = *(void *)(a2 + 80);
          uint64_t v67 = *(void *)(a2 + 88);
          uint64_t v69 = *(void *)(a2 + 96);
          uint64_t v71 = *(void *)(a2 + 104);
          uint64_t v73 = *(void *)(a2 + 112);
          unsigned __int8 v75 = *(unsigned char *)(a2 + 120);
          uint64_t v39 = *(void *)a2;
          uint64_t v40 = *(void *)(a2 + 56);
          sub_100280BDC(v39, v33, v34, v35, v36, v37, v38, v40, v61, v63, v65, v67, v69, v71, v73, v75);
          *(void *)a1 = v32;
          *(void *)(a1 + 8) = v33;
          *(void *)(a1 + 16) = v34;
          *(void *)(a1 + 24) = v35;
          *(void *)(a1 + 32) = v36;
          *(void *)(a1 + 40) = v37;
          *(void *)(a1 + 48) = v38;
          *(void *)(a1 + 56) = v40;
          *(void *)(a1 + 64) = v61;
          *(void *)(a1 + 72) = v63;
          *(void *)(a1 + 80) = v65;
          *(void *)(a1 + 88) = v67;
          *(void *)(a1 + 96) = v69;
          *(void *)(a1 + 104) = v71;
          *(void *)(a1 + 112) = v73;
          *(unsigned char *)(a1 + 120) = v75;
          break;
        case 2u:
          uint64_t v41 = type metadata accessor for MessageData();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
            case 2u:
              uint64_t v42 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
              goto LABEL_22;
            case 3u:
            case 4u:
              *(void *)a1 = *(void *)a2;
              swift_bridgeObjectRetain();
LABEL_22:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v41 - 8) + 64));
              break;
          }
          break;
        case 3u:
        case 4u:
          *(void *)a1 = *(void *)a2;
          swift_bridgeObjectRetain();
          break;
        case 5u:
          uint64_t v43 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v43;
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          break;
        case 6u:
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 7u:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          break;
        case 8u:
          uint64_t v44 = *(void *)a2;
          uint64_t v45 = *(void *)(a2 + 8);
          uint64_t v46 = *(void *)(a2 + 16);
          uint64_t v47 = *(void *)(a2 + 24);
          int v48 = *(_DWORD *)(a2 + 32);
          sub_10028D48C(v44, v45, v46);
          *(void *)a1 = v44;
          *(void *)(a1 + 8) = v45;
          *(void *)(a1 + 16) = v46;
          *(void *)(a1 + 24) = v47;
          *(_DWORD *)(a1 + 32) = v48;
          break;
        case 9u:
          uint64_t v49 = *(void *)a2;
          uint64_t v50 = *(void *)(a2 + 8);
          uint64_t v51 = *(void *)(a2 + 16);
          char v52 = *(unsigned char *)(a2 + 24);
          sub_1002953E0();
          *(void *)a1 = v49;
          *(void *)(a1 + 8) = v50;
          *(void *)(a1 + 16) = v51;
          *(unsigned char *)(a1 + 24) = v52;
          break;
        default:
          unint64_t v6 = *(void *)a2;
          uint64_t v7 = *(void *)(a2 + 8);
          uint64_t v8 = *(void *)(a2 + 16);
          unsigned __int8 v9 = *(unsigned char *)(a2 + 24);
          sub_10029CBFC(v6, v7, v8, v9);
          *(void *)a1 = v6;
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v8;
          *(unsigned char *)(a1 + 24) = v9;
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_24;
    case 1u:
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 40);
      uint64_t v16 = *(void *)(a2 + 48);
      uint64_t v17 = *(void *)(a2 + 56);
      uint64_t v54 = *(void *)(a2 + 72);
      uint64_t v55 = *(void *)(a2 + 80);
      uint64_t v56 = *(void *)(a2 + 88);
      uint64_t v57 = *(void *)(a2 + 96);
      uint64_t v58 = *(void *)(a2 + 104);
      uint64_t v59 = *(void *)(a2 + 112);
      uint64_t v60 = *(void *)(a2 + 120);
      uint64_t v62 = *(void *)(a2 + 128);
      uint64_t v64 = *(void *)(a2 + 136);
      uint64_t v66 = *(void *)(a2 + 144);
      uint64_t v68 = *(void *)(a2 + 152);
      uint64_t v70 = *(void *)(a2 + 160);
      uint64_t v72 = *(void *)(a2 + 168);
      unsigned __int16 v74 = *(_WORD *)(a2 + 176);
      uint64_t v18 = *(void *)(a2 + 64);
      uint64_t v19 = v10;
      uint64_t v20 = v11;
      uint64_t v21 = v14;
      uint64_t v22 = v16;
      uint64_t v23 = v17;
      sub_10029C0F4(v10, v11, v12, v13, v14, v15, v16, v17, v18, v54, v55, v56, v57, v58, v59, v60, v62, v64, v66,
        v68,
        v70,
        v72,
        v74);
      *(void *)a1 = v19;
      *(void *)(a1 + 8) = v20;
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v23;
      *(void *)(a1 + 64) = v18;
      *(void *)(a1 + 72) = v54;
      *(void *)(a1 + 80) = v55;
      *(void *)(a1 + 88) = v56;
      *(void *)(a1 + 96) = v57;
      *(void *)(a1 + 104) = v58;
      *(void *)(a1 + 112) = v59;
      *(void *)(a1 + 120) = v60;
      *(void *)(a1 + 128) = v62;
      *(void *)(a1 + 136) = v64;
      *(void *)(a1 + 144) = v66;
      *(void *)(a1 + 152) = v68;
      *(void *)(a1 + 160) = v70;
      *(void *)(a1 + 168) = v72;
      *(_WORD *)(a1 + 176) = v74;
      goto LABEL_24;
    case 2u:
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v24;
      unint64_t v25 = *(void *)(a2 + 16);
      uint64_t v26 = *(void *)(a2 + 24);
      uint64_t v27 = *(void *)(a2 + 32);
      unsigned __int8 v28 = *(unsigned char *)(a2 + 40);
      swift_bridgeObjectRetain();
      sub_10029C090(v25, v26, v27, v28);
      *(void *)(a1 + 16) = v25;
      *(void *)(a1 + 24) = v26;
      *(void *)(a1 + 32) = v27;
      *(unsigned char *)(a1 + 40) = v28;
      goto LABEL_24;
    case 3u:
      uint64_t v29 = *(void *)a2;
      if ((~*(void *)a2 & 0xF000000000000007) != 0) {
        sub_1002965F8(*(void *)a2);
      }
      uint64_t v31 = *(void *)(a2 + 8);
      uint64_t v30 = *(void *)(a2 + 16);
      *(void *)a1 = v29;
      *(void *)(a1 + 8) = v31;
      *(void *)(a1 + 16) = v30;
      swift_bridgeObjectRetain();
      goto LABEL_24;
    case 4u:
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
      swift_retain();
LABEL_24:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10029BE60(a1, (void (*)(void))type metadata accessor for Response);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        type metadata accessor for ResponsePayload();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v30 = *(void *)a2;
            uint64_t v31 = *(void *)(a2 + 8);
            uint64_t v32 = *(void *)(a2 + 16);
            uint64_t v33 = *(void *)(a2 + 24);
            uint64_t v34 = *(void *)(a2 + 32);
            uint64_t v35 = *(void *)(a2 + 40);
            uint64_t v36 = *(void *)(a2 + 48);
            uint64_t v60 = *(void *)(a2 + 64);
            uint64_t v62 = *(void *)(a2 + 72);
            uint64_t v64 = *(void *)(a2 + 80);
            uint64_t v66 = *(void *)(a2 + 88);
            uint64_t v68 = *(void *)(a2 + 96);
            uint64_t v70 = *(void *)(a2 + 104);
            uint64_t v72 = *(void *)(a2 + 112);
            unsigned __int8 v74 = *(unsigned char *)(a2 + 120);
            uint64_t v37 = *(void *)a2;
            uint64_t v38 = *(void *)(a2 + 56);
            sub_100280BDC(v37, v31, v32, v33, v34, v35, v36, v38, v60, v62, v64, v66, v68, v70, v72, v74);
            *(void *)a1 = v30;
            *(void *)(a1 + 8) = v31;
            *(void *)(a1 + 16) = v32;
            *(void *)(a1 + 24) = v33;
            *(void *)(a1 + 32) = v34;
            *(void *)(a1 + 40) = v35;
            *(void *)(a1 + 48) = v36;
            *(void *)(a1 + 56) = v38;
            *(void *)(a1 + 64) = v60;
            *(void *)(a1 + 72) = v62;
            *(void *)(a1 + 80) = v64;
            *(void *)(a1 + 88) = v66;
            *(void *)(a1 + 96) = v68;
            *(void *)(a1 + 104) = v70;
            *(void *)(a1 + 112) = v72;
            *(unsigned char *)(a1 + 120) = v74;
            break;
          case 2u:
            uint64_t v39 = type metadata accessor for MessageData();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
              case 2u:
                uint64_t v40 = sub_10000566C(&qword_100710538);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
                goto LABEL_23;
              case 3u:
              case 4u:
                *(void *)a1 = *(void *)a2;
                swift_bridgeObjectRetain();
LABEL_23:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v39 - 8) + 64));
                break;
            }
            break;
          case 3u:
          case 4u:
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
            break;
          case 5u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            break;
          case 6u:
            *(void *)a1 = *(void *)a2;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
            int v41 = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
            *(_DWORD *)(a1 + 32) = v41;
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
            int v42 = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
            *(_DWORD *)(a1 + 16) = v42;
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            break;
          case 8u:
            uint64_t v43 = *(void *)a2;
            uint64_t v44 = *(void *)(a2 + 8);
            uint64_t v45 = *(void *)(a2 + 16);
            uint64_t v46 = *(void *)(a2 + 24);
            int v47 = *(_DWORD *)(a2 + 32);
            sub_10028D48C(v43, v44, v45);
            *(void *)a1 = v43;
            *(void *)(a1 + 8) = v44;
            *(void *)(a1 + 16) = v45;
            *(void *)(a1 + 24) = v46;
            *(_DWORD *)(a1 + 32) = v47;
            break;
          case 9u:
            uint64_t v48 = *(void *)a2;
            uint64_t v49 = *(void *)(a2 + 8);
            uint64_t v50 = *(void *)(a2 + 16);
            char v51 = *(unsigned char *)(a2 + 24);
            sub_1002953E0();
            *(void *)a1 = v48;
            *(void *)(a1 + 8) = v49;
            *(void *)(a1 + 16) = v50;
            *(unsigned char *)(a1 + 24) = v51;
            break;
          default:
            unint64_t v6 = *(void *)a2;
            uint64_t v7 = *(void *)(a2 + 8);
            uint64_t v8 = *(void *)(a2 + 16);
            unsigned __int8 v9 = *(unsigned char *)(a2 + 24);
            sub_10029CBFC(v6, v7, v8, v9);
            *(void *)a1 = v6;
            *(void *)(a1 + 8) = v7;
            *(void *)(a1 + 16) = v8;
            *(unsigned char *)(a1 + 24) = v9;
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_25;
      case 1u:
        uint64_t v10 = *(void *)a2;
        uint64_t v11 = *(void *)(a2 + 8);
        uint64_t v12 = *(void *)(a2 + 16);
        uint64_t v13 = *(void *)(a2 + 24);
        uint64_t v14 = *(void *)(a2 + 32);
        uint64_t v15 = *(void *)(a2 + 40);
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v53 = *(void *)(a2 + 72);
        uint64_t v54 = *(void *)(a2 + 80);
        uint64_t v55 = *(void *)(a2 + 88);
        uint64_t v56 = *(void *)(a2 + 96);
        uint64_t v57 = *(void *)(a2 + 104);
        uint64_t v58 = *(void *)(a2 + 112);
        uint64_t v59 = *(void *)(a2 + 120);
        uint64_t v61 = *(void *)(a2 + 128);
        uint64_t v63 = *(void *)(a2 + 136);
        uint64_t v65 = *(void *)(a2 + 144);
        uint64_t v67 = *(void *)(a2 + 152);
        uint64_t v69 = *(void *)(a2 + 160);
        uint64_t v71 = *(void *)(a2 + 168);
        unsigned __int16 v73 = *(_WORD *)(a2 + 176);
        uint64_t v18 = *(void *)(a2 + 64);
        uint64_t v19 = v10;
        uint64_t v20 = v11;
        uint64_t v21 = v14;
        uint64_t v22 = v16;
        uint64_t v23 = v17;
        sub_10029C0F4(v10, v11, v12, v13, v14, v15, v16, v17, v18, v53, v54, v55, v56, v57, v58, v59, v61, v63, v65,
          v67,
          v69,
          v71,
          v73);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v12;
        *(void *)(a1 + 24) = v13;
        *(void *)(a1 + 32) = v21;
        *(void *)(a1 + 40) = v15;
        *(void *)(a1 + 48) = v22;
        *(void *)(a1 + 56) = v23;
        *(void *)(a1 + 64) = v18;
        *(void *)(a1 + 72) = v53;
        *(void *)(a1 + 80) = v54;
        *(void *)(a1 + 88) = v55;
        *(void *)(a1 + 96) = v56;
        *(void *)(a1 + 104) = v57;
        *(void *)(a1 + 112) = v58;
        *(void *)(a1 + 120) = v59;
        *(void *)(a1 + 128) = v61;
        *(void *)(a1 + 136) = v63;
        *(void *)(a1 + 144) = v65;
        *(void *)(a1 + 152) = v67;
        *(void *)(a1 + 160) = v69;
        *(void *)(a1 + 168) = v71;
        *(_WORD *)(a1 + 176) = v73;
        goto LABEL_25;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        unint64_t v24 = *(void *)(a2 + 16);
        uint64_t v25 = *(void *)(a2 + 24);
        uint64_t v26 = *(void *)(a2 + 32);
        unsigned __int8 v27 = *(unsigned char *)(a2 + 40);
        swift_bridgeObjectRetain();
        sub_10029C090(v24, v25, v26, v27);
        *(void *)(a1 + 16) = v24;
        *(void *)(a1 + 24) = v25;
        *(void *)(a1 + 32) = v26;
        *(unsigned char *)(a1 + 40) = v27;
        goto LABEL_25;
      case 3u:
        uint64_t v28 = *(void *)a2;
        if ((~*(void *)a2 & 0xF000000000000007) != 0) {
          sub_1002965F8(*(void *)a2);
        }
        *(void *)a1 = v28;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_25;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        int v29 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
        *(_DWORD *)(a1 + 16) = v29;
        swift_retain();
LABEL_25:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for Response(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for ResponsePayload();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v7 = type metadata accessor for MessageData();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v9 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UntaggedResponse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 18 || EnumCaseMultiPayload == 17)
    {
      uint64_t v8 = sub_10000566C(&qword_100712FE0);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Response(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10029BE60((uint64_t)a1, (void (*)(void))type metadata accessor for Response);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for ResponsePayload();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v7 = type metadata accessor for MessageData();
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          uint64_t v9 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100381FF4((uint64_t)a1, type metadata accessor for Response);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UntaggedResponse(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 18 || EnumCaseMultiPayload == 17)
      {
        uint64_t v8 = sub_10000566C(&qword_100712FE0);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1002A00C4()
{
  uint64_t result = type metadata accessor for ResponsePayload();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void destroy for FetchResponse(uint64_t a1)
{
  sub_10029BF60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176));
}

uint64_t initializeWithCopy for FetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  unsigned __int16 v26 = *(_WORD *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  sub_10029C0F4(*(void *)a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = v26;
  return a1;
}

uint64_t assignWithCopy for FetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v30 = *(void *)(a2 + 72);
  uint64_t v31 = *(void *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 104);
  uint64_t v35 = *(void *)(a2 + 112);
  uint64_t v36 = *(void *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 128);
  uint64_t v38 = *(void *)(a2 + 136);
  uint64_t v39 = *(void *)(a2 + 144);
  uint64_t v40 = *(void *)(a2 + 152);
  uint64_t v41 = *(void *)(a2 + 160);
  uint64_t v42 = *(void *)(a2 + 168);
  unsigned __int16 v43 = *(_WORD *)(a2 + 176);
  sub_10029C0F4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  uint64_t v26 = *(void *)(a1 + 160);
  uint64_t v27 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  unsigned __int16 v28 = *(_WORD *)(a1 + 176);
  *(_WORD *)(a1 + 176) = v43;
  sub_10029BF60(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    v27,
    v28);
  return a1;
}

uint64_t assignWithTake for FetchResponse(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 176);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  uint64_t v18 = *(void *)(a1 + 160);
  uint64_t v19 = *(void *)(a1 + 168);
  unsigned __int16 v20 = *(_WORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  long long v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  long long v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = v3;
  sub_10029BF60(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    v19,
    v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 3 && *(unsigned char *)(a1 + 178))
    {
      int v2 = *(_DWORD *)a1 + 2;
    }
    else
    {
      unsigned int v3 = *(unsigned __int16 *)(a1 + 176);
      if ((~(v3 >> 9) & 6) != 0) {
        int v2 = -1;
      }
      else {
        int v2 = ~(v3 >> 9) & 7;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void storeEnumTagSinglePayload for FetchResponse(char *a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *((void *)a1 + 21) = 0;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *((_WORD *)a1 + 88) = 0;
    *(void *)a1 = a2 - 3;
    if (a3 >= 3) {
      a1[178] = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      a1[178] = 0;
    }
    if (a2)
    {
      __int16 v4 = (-512 * a2) & 0xE00;
      bzero(a1, 0xB0uLL);
      *((_WORD *)a1 + 88) = v4;
    }
  }
}

void sub_1002A0648(uint64_t a1, unsigned int a2)
{
  if (a2 < 5)
  {
    __int16 v3 = *(_WORD *)(a1 + 176) & 0xF1FF | ((a2 & 7) << 9);
  }
  else
  {
    *(void *)a1 = a2 - 5;
    bzero((void *)(a1 + 8), 0xA8uLL);
    __int16 v3 = 2560;
  }
  *(_WORD *)(a1 + 176) = v3;
}

ValueMetadata *type metadata accessor for FetchResponse()
{
  return &type metadata for FetchResponse;
}

void destroy for StreamingKind(uint64_t a1)
{
}

uint64_t initializeWithCopy for StreamingKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1002892B4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for StreamingKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1002892B4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_100212DE0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for StreamingKind(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_100212DE0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingKind(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 16) >> 2;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingKind(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 4 * -a2;
      *(void *)(result + 24) = 0;
      *(unsigned char *)(result + 32) = 0;
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1002A087C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1002A089C(uint64_t result)
{
  *(unsigned char *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_1002A08AC(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 32) & 1 | ((_BYTE)a2 << 6);
    *(void *)(result + 16) &= 3uLL;
    *(unsigned char *)(result + 32) = v2;
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingKind()
{
  return &type metadata for StreamingKind;
}

uint64_t sub_1002A08F8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1002A0920()
{
  return v0;
}

unint64_t sub_1002A0944()
{
  return sub_10029BF18(v0, v1, v2, v3);
}

uint64_t sub_1002A0964()
{
  return sub_1002966C8(v0, v1, v2, v3);
}

uint64_t UIDValidityWith.uidValidity.getter()
{
  return *v0;
}

uint64_t ResponseCodeAppend.uids.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseCodeAppend() + 20);
  return sub_1002A0A18(v3, a1);
}

uint64_t type metadata accessor for ResponseCodeAppend()
{
  uint64_t result = qword_1007115F0;
  if (!qword_1007115F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002A0A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ResponseCodeAppend.uids.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseCodeAppend() + 20);
  return sub_1002A0AC4(a1, v3);
}

uint64_t sub_1002A0AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::UInt32 (__swiftcall *ResponseCodeAppend.uids.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t ResponseCodeAppend.init(uidValidity:uids:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (uint64_t)a3 + *(int *)(type metadata accessor for ResponseCodeAppend() + 20);
  return sub_1002A0BC0(a2, v4);
}

uint64_t sub_1002A0BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ResponseCodeAppend.hash(into:)()
{
  sub_1005E3440(*v0);
  type metadata accessor for ResponseCodeAppend();
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  return sub_1005E19C0();
}

uint64_t static ResponseCodeAppend.__derived_struct_equals(_:_:)(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  type metadata accessor for ResponseCodeAppend();
  sub_100223B18();
  return sub_1005E35A0();
}

Swift::Int ResponseCodeAppend.hashValue.getter()
{
  sub_1005E33F0();
  sub_1005E3440(*v0);
  type metadata accessor for ResponseCodeAppend();
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  sub_1005E19C0();
  return sub_1005E3470();
}

Swift::Int sub_1002A0D98()
{
  sub_1005E33F0();
  sub_1005E3440(*v0);
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  sub_1005E19C0();
  return sub_1005E3470();
}

uint64_t sub_1002A0E18(_DWORD *a1)
{
  uint64_t v2 = v1;
  uint64_t v22 = sub_10000566C(&qword_1007109E8);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = 0x4955444E45505041;
  uint64_t v26 = (void *)0xEA00000000002044;
  HIDWORD(v24) = *a1;
  v33._uint64_t countAndFlagsBits = sub_1005E3230();
  sub_1005E1E30(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 32;
  v34._char object = (void *)0xE100000000000000;
  sub_1005E1E30(v34);
  uint64_t v7 = v25;
  long long v8 = v26;
  Swift::Int v9 = *(unsigned int *)(v2 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(v7, (unint64_t)v8, v2 + 8, v9);
  Swift::Int v11 = v10;
  char v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    v14._uint64_t countAndFlagsBits = v7;
    v14._char object = v8;
    Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v14, v9);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v16 = *(_DWORD *)(v2 + 20);
  BOOL v17 = __CFADD__(v16, v11);
  int v18 = v16 + v11;
  if (v17)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(v2 + 20) = v18;
  type metadata accessor for ResponseCodeAppend();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  sub_1002C247C((uint64_t)v6, 0, 0xE000000000000000, 44, 0xE100000000000000, 0, 0xE000000000000000, 0, (uint64_t)sub_1002D08D8, 0, v21, v22, v23, v24, v25, (uint64_t)v26, v27, v28, v29,
    v30,
    v31,
    v32);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
  uint64_t result = v11 + v20;
  if (__OFADD__(v11, v20)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

unint64_t sub_1002A1040()
{
  unint64_t result = qword_100711590;
  if (!qword_100711590)
  {
    type metadata accessor for ResponseCodeAppend();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711590);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResponseCodeAppend(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_10000566C(&qword_100710538);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_DWORD *initializeWithCopy for ResponseCodeAppend(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for ResponseCodeAppend(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for ResponseCodeAppend(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for ResponseCodeAppend(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseCodeAppend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A1374);
}

uint64_t sub_1002A1374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_10000566C(&qword_1007108C0);
  return getEnumTagSinglePayload for ClientCommand(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ResponseCodeAppend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A13D8);
}

uint64_t sub_1002A13D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_10000566C(&qword_1007108C0);
  return storeEnumTagSinglePayload for ClientCommand(v5, a2, a2, v6);
}

void sub_1002A142C()
{
  sub_10027AC38();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void ResponseCodeCopy.hash(into:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4)
{
  sub_1005E3440(a2);
  sub_10022A7B8(a1, a3);
  sub_10022A7B8(a1, a4);
}

void static ResponseCodeCopy.__derived_struct_equals(_:_:)(int a1, int32x2_t *a2, int32x2_t *a3, int a4, int32x2_t *a5, int32x2_t *a6)
{
  if (a1 == a4)
  {
    sub_100220BEC(a2, a5);
    if (v8)
    {
      sub_100220BEC(a3, a6);
    }
  }
}

Swift::Int ResponseCodeCopy.hashValue.getter(Swift::UInt32 a1, uint64_t a2, uint64_t a3)
{
  sub_1005E33F0();
  sub_1005E3440(a1);
  sub_10022A7B8((uint64_t)v7, a2);
  sub_10022A7B8((uint64_t)v7, a3);
  return sub_1005E3470();
}

Swift::Int sub_1002A15F8()
{
  return ResponseCodeCopy.hashValue.getter(*(_DWORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_1002A1604(uint64_t a1)
{
  ResponseCodeCopy.hash(into:)(a1, *(_DWORD *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_1002A1610()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  sub_1005E33F0();
  sub_1005E3440(v1);
  sub_10022A7B8((uint64_t)v5, v2);
  sub_10022A7B8((uint64_t)v5, v3);
  return sub_1005E3470();
}

void sub_1002A1678(uint64_t a1, uint64_t a2)
{
}

#error "1002A1790: call analysis failed (funcsize=98)"

unint64_t sub_1002A182C()
{
  unint64_t result = qword_100711628;
  if (!qword_100711628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711628);
  }
  return result;
}

uint64_t sub_1002A187C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionCommandIDSet(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConnectionCommandIDSet(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResponseCodeCopy()
{
  return &type metadata for ResponseCodeCopy;
}

uint64_t sub_1002A197C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, long long a20,uint64_t a21,Swift::String a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  return sub_1001EFE08(a1, 0, 0, 44, 0, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43);
}

void sub_1002A19A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 8;
  Swift::Int v3 = *(unsigned int *)(v0 + 20);
  sub_100210AD0(8234, 0xE200000000000000, v2, v3);
  if (v5)
  {
    v6._uint64_t countAndFlagsBits = 8234;
    v6._char object = (void *)0xE200000000000000;
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v6, v3);
  }
  Swift::Int v7 = v4;
  int v8 = *(_DWORD *)(v1 + 20);
  BOOL v9 = __CFADD__(v8, v4);
  int v10 = v8 + v4;
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(v1 + 20) = v10;
  Swift::Int v11 = sub_1002A2648();
  Swift::Int v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Swift::Int v13 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(2573, 0xE200000000000000, v2, *(_DWORD *)(v1 + 20));
  if (v15)
  {
    v16._uint64_t countAndFlagsBits = 2573;
    v16._char object = (void *)0xE200000000000000;
    Swift::Int v14 = ByteBuffer._setStringSlowpath(_:at:)(v16, v13);
  }
  int v17 = *(_DWORD *)(v1 + 20);
  BOOL v9 = __CFADD__(v17, v14);
  int v18 = v17 + v14;
  if (v9) {
    goto LABEL_12;
  }
  *(_DWORD *)(v1 + 20) = v18;
  if (__OFADD__(v12, v14)) {
LABEL_13:
  }
    __break(1u);
}

void sub_1002A1A9C(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v3 + 8;
  Swift::Int v9 = *(unsigned int *)(v3 + 20);
  sub_100210AD0(8234, 0xE200000000000000, v8, v9);
  if (v11)
  {
    v12._uint64_t countAndFlagsBits = 8234;
    v12._char object = (void *)0xE200000000000000;
    Swift::Int v10 = ByteBuffer._setStringSlowpath(_:at:)(v12, v9);
  }
  Swift::Int v13 = v10;
  int v14 = *(_DWORD *)(v4 + 20);
  Swift::Int v15 = (v14 + v10);
  if (__CFADD__(v14, v10))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v4 + 20) = v15;
  swift_bridgeObjectRetain();
  sub_1002965E4(a1);
  sub_100210AD0(541415746, 0xE400000000000000, v8, v15);
  if (v17)
  {
    v18._uint64_t countAndFlagsBits = 541415746;
    v18._char object = (void *)0xE400000000000000;
    Swift::Int v16 = ByteBuffer._setStringSlowpath(_:at:)(v18, v15);
  }
  Swift::Int v19 = v16;
  int v20 = *(_DWORD *)(v4 + 20);
  BOOL v21 = __CFADD__(v20, v16);
  int v22 = v20 + v16;
  if (v21) {
    goto LABEL_15;
  }
  *(_DWORD *)(v4 + 20) = v22;
  uint64_t v23 = sub_1002A4994(a1, a2, a3);
  sub_100212D94(a1);
  swift_bridgeObjectRelease();
  Swift::Int v24 = v19 + v23;
  if (__OFADD__(v19, v23))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  Swift::Int v25 = v13 + v24;
  if (__OFADD__(v13, v24))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v26 = *(unsigned int *)(v4 + 20);
  sub_100210AD0(2573, 0xE200000000000000, v8, *(_DWORD *)(v4 + 20));
  if (v28)
  {
    v29._uint64_t countAndFlagsBits = 2573;
    v29._char object = (void *)0xE200000000000000;
    Swift::Int v27 = ByteBuffer._setStringSlowpath(_:at:)(v29, v26);
  }
  int v30 = *(_DWORD *)(v4 + 20);
  BOOL v21 = __CFADD__(v30, v27);
  int v31 = v30 + v27;
  if (v21) {
    goto LABEL_18;
  }
  *(_DWORD *)(v4 + 20) = v31;
  if (__OFADD__(v25, v27)) {
LABEL_19:
  }
    __break(1u);
}

uint64_t static ResponsePayload.__derived_enum_equals(_:_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v94 = a1;
  uint64_t v95 = a2;
  uint64_t v2 = type metadata accessor for MessageData();
  uint64_t v3 = sub_100224550(v2);
  __chkstk_darwin(v3);
  uint64_t v89 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResponsePayload();
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  int v93 = (unint64_t *)((char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F475C();
  __chkstk_darwin(v8);
  int v90 = (long long *)((char *)&v88 - v9);
  sub_1001F475C();
  __chkstk_darwin(v10);
  uint64_t v92 = (uint64_t)&v88 - v11;
  sub_1001F475C();
  uint64_t v13 = __chkstk_darwin(v12);
  Swift::Int v15 = (uint64_t *)((char *)&v88 - v14);
  uint64_t v16 = __chkstk_darwin(v13);
  Swift::String v18 = (char *)&v88 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  BOOL v21 = (char *)&v88 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  Swift::Int v24 = (char *)&v88 - v23;
  __chkstk_darwin(v22);
  uint64_t v91 = (uint64_t)&v88 - v25;
  sub_1001F475C();
  uint64_t v27 = __chkstk_darwin(v26);
  Swift::String v29 = (uint64_t *)((char *)&v88 - v28);
  __chkstk_darwin(v27);
  int v31 = (unint64_t *)((char *)&v88 - v30);
  uint64_t v32 = sub_10000566C(&qword_100711630);
  uint64_t v33 = sub_100224550(v32);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v88 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (uint64_t)&v36[*(int *)(v34 + 56)];
  sub_1002A254C(v94, (uint64_t)v36);
  uint64_t v38 = v95;
  uint64_t v95 = v37;
  sub_1002A254C(v38, v37);
  char v96 = v36;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v41 = sub_1002A4538();
      sub_1002A254C(v41, (uint64_t)v29);
      sub_10027F540(v29, v97);
      if (sub_1002A4644() == 1)
      {
        sub_10027F540(v15, v98);
        char v42 = static MailboxData.__derived_enum_equals(_:_:)(v97, v98);
        sub_1002A3004((uint64_t)v98);
        sub_1002A3004((uint64_t)v97);
        goto LABEL_27;
      }
      sub_1002A3004((uint64_t)v97);
      goto LABEL_38;
    case 2u:
      uint64_t v43 = sub_1002A4538();
      uint64_t v44 = v91;
      sub_1002A254C(v43, v91);
      if (sub_1002A4644() == 2)
      {
        uint64_t v45 = v89;
        sub_1002A2FA0((uint64_t)v15, v89);
        char v42 = static MessageData.__derived_enum_equals(_:_:)(v44, v45);
        sub_1002A2F48(v45, (void (*)(void))type metadata accessor for MessageData);
        sub_1002A2F48(v44, (void (*)(void))type metadata accessor for MessageData);
        goto LABEL_27;
      }
      sub_1002A2F48(v44, (void (*)(void))type metadata accessor for MessageData);
      goto LABEL_38;
    case 3u:
      uint64_t v46 = sub_1002A4538();
      sub_1002A254C(v46, (uint64_t)v24);
      if (sub_1002A451C() != 3) {
        goto LABEL_33;
      }
      goto LABEL_11;
    case 4u:
      uint64_t v47 = sub_1002A4538();
      sub_1002A254C(v47, (uint64_t)v21);
      if (sub_1002A451C() != 4) {
        goto LABEL_33;
      }
LABEL_11:
      sub_10021B068();
      char v42 = v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    case 5u:
      uint64_t v49 = sub_1002A4538();
      sub_1002A254C(v49, (uint64_t)v18);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        swift_release();
        swift_release();
        goto LABEL_36;
      }
      sub_100221B3C();
      if (v50)
      {
        char v51 = sub_100222EF4();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (v51)
        {
          sub_1002A2F48((uint64_t)v96, (void (*)(void))type metadata accessor for ResponsePayload);
          char v42 = 1;
          return v42 & 1;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v87 = (uint64_t)v96;
      goto LABEL_48;
    case 6u:
      uint64_t v64 = sub_1002A4538();
      sub_1002A254C(v64, (uint64_t)v15);
      uint64_t v65 = *v15;
      uint64_t v66 = v15[2];
      unint64_t v67 = v15[3];
      uint64_t v68 = *((unsigned int *)v15 + 8);
      uint64_t v69 = *((unsigned __int16 *)v15 + 18);
      uint64_t v70 = *((unsigned __int8 *)v15 + 38);
      uint64_t v71 = v95;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        swift_bridgeObjectRelease();
LABEL_36:
        swift_release();
        goto LABEL_38;
      }
      unint64_t v94 = v67;
      uint64_t v72 = *((unsigned int *)v15 + 2);
      uint64_t v73 = *(void *)v71;
      uint64_t v74 = *(void *)(v71 + 16);
      if ((v72 | (v72 << 32)) != (*(unsigned int *)(v71 + 8) | ((unint64_t)*(unsigned int *)(v71 + 8) << 32))) {
        goto LABEL_45;
      }
      uint64_t v75 = *(void *)(v71 + 24);
      uint64_t v92 = *(unsigned int *)(v71 + 32);
      int v93 = (unint64_t *)v75;
      uint64_t v91 = *(unsigned __int16 *)(v71 + 36);
      uint64_t v76 = *(unsigned __int8 *)(v71 + 38);
      char v77 = sub_100219B44(v65, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v77)
      {
        char v42 = static ByteBuffer.== infix(_:_:)(v66, v94, v68 | (v69 << 32) | (v70 << 48), v74, (uint64_t)v93, v92 | (v91 << 32) | (v76 << 48));
        swift_release();
        swift_release();
        goto LABEL_42;
      }
      swift_release();
      swift_release();
      uint64_t v36 = v96;
      goto LABEL_47;
    case 7u:
      uint64_t v52 = sub_1002A4538();
      uint64_t v53 = v92;
      sub_1002A254C(v52, v92);
      uint64_t v54 = *(void *)v53;
      if (sub_1002A451C() != 7)
      {
        swift_release();
LABEL_33:
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      if (static ByteBuffer.== infix(_:_:)(v54, *(void *)(v53 + 8), *(unsigned int *)(v53 + 16) | ((unint64_t)*(unsigned __int8 *)(v53 + 22) << 48) | ((unint64_t)*(unsigned __int16 *)(v53 + 20) << 32), *v29, v29[1], *((unsigned int *)v29 + 4) | ((unint64_t)*((unsigned __int16 *)v29 + 10) << 32) | ((unint64_t)*((unsigned __int8 *)v29 + 22) << 48)))
      {
        char v42 = sub_10021B174();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_27;
      }
LABEL_45:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_47:
      uint64_t v87 = (uint64_t)v36;
LABEL_48:
      sub_1002A2F48(v87, (void (*)(void))type metadata accessor for ResponsePayload);
      goto LABEL_39;
    case 8u:
      uint64_t v78 = sub_1002A4538();
      Swift::Int v79 = v90;
      sub_1002A254C(v78, (uint64_t)v90);
      sub_10028CC70(v79, (uint64_t)v97);
      if (sub_1002A4644() != 8)
      {
        sub_1002A2610((uint64_t *)v97);
        goto LABEL_38;
      }
      sub_10028CC70(v79, (uint64_t)v98);
      char v42 = static MetadataResponse.__derived_enum_equals(_:_:)(v97, v98);
      sub_1002A2610((uint64_t *)v98);
      sub_1002A2610((uint64_t *)v97);
LABEL_27:
      uint64_t v63 = (uint64_t)v36;
      goto LABEL_28;
    case 9u:
      uint64_t v55 = (uint64_t)v96;
      uint64_t v56 = v93;
      sub_1002A254C((uint64_t)v96, (uint64_t)v93);
      if (sub_1002A451C() == 9)
      {
        uint64_t v57 = v56[1];
        unint64_t v94 = *v56;
        uint64_t v58 = sub_1002A45F4();
        char v42 = static ApplePushService.__derived_enum_equals(_:_:)(v58, v59, v60, v61, v62, v57, v5, (char)v31);
        sub_1002A4594();
        sub_100295400();
        uint64_t v63 = v55;
        goto LABEL_28;
      }
      sub_1002A4594();
      uint64_t v36 = (char *)v55;
      goto LABEL_38;
    default:
      uint64_t v39 = sub_1002A4538();
      sub_1002A254C(v39, (uint64_t)v31);
      unint64_t v40 = *v31;
      if (sub_1002A451C())
      {
        sub_1002A45B0(v40);
LABEL_38:
        sub_1002A25B0((uint64_t)v36);
LABEL_39:
        char v42 = 0;
      }
      else
      {
        unint64_t v81 = *v29;
        uint64_t v82 = v29[1];
        unint64_t v83 = sub_1002A45F4();
        char v42 = static UntaggedStatus.__derived_enum_equals(_:_:)(v83, v84, v85, v86, v81, v82, v5, (char)v31);
        sub_10029CFCC(v81, v82, v5, v31);
        sub_1002A45B0(v40);
LABEL_42:
        uint64_t v63 = (uint64_t)v96;
LABEL_28:
        sub_1002A2F48(v63, (void (*)(void))type metadata accessor for ResponsePayload);
      }
      return v42 & 1;
  }
}

uint64_t type metadata accessor for ResponsePayload()
{
  uint64_t result = qword_1007116B0;
  if (!qword_1007116B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002A254C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResponsePayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A25B0(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100711630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1002A2610(uint64_t *a1)
{
  return a1;
}

Swift::Int sub_1002A2648()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for MessageData();
  uint64_t v4 = sub_100224550(v3);
  __chkstk_darwin(v4);
  sub_1002A45CC();
  sub_1001F3BBC();
  __chkstk_darwin(v5);
  sub_1002A4568(v6, v64);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10027F540(v0, __dst);
      Swift::Int v11 = sub_100280134(__dst);
      sub_1002A3004((uint64_t)__dst);
      return v11;
    case 2u:
      sub_1002A2FA0((uint64_t)v0, v1);
      Swift::Int v11 = sub_10028A1A8(v1);
      sub_1002A2F48(v1, (void (*)(void))type metadata accessor for MessageData);
      return v11;
    case 3u:
      sub_1002464B4(*(void *)v0);
      Swift::Int v11 = v12;
      goto LABEL_29;
    case 4u:
      uint64_t v13 = *(void *)v0;
      uint64_t v14 = (uint64_t)(v0 + 2);
      Swift::Int v15 = v2[5];
      uint64_t v16 = sub_1002A4610();
      sub_100210AD0(v16, v17, (uint64_t)(v2 + 2), v15);
      uint64_t v67 = v14;
      if (v19)
      {
        v20._uint64_t countAndFlagsBits = sub_1002A4610();
        Swift::Int v18 = ByteBuffer._setStringSlowpath(_:at:)(v20, v15);
      }
      Swift::Int v21 = v18;
      Swift::UInt32 v22 = v2[5];
      Swift::UInt32 v23 = v22 + v18;
      if (__CFADD__(v22, v18)) {
        goto LABEL_39;
      }
      v2[5] = v23;
      uint64_t v24 = *(void *)(v13 + 16);
      if (v24)
      {
        Swift::Int v65 = v18;
        swift_bridgeObjectRetain();
        Swift::Int v25 = 0;
        uint64_t v66 = v2;
        uint64_t v26 = (void **)(v13 + 40);
        while (1)
        {
          uint64_t v28 = (uint64_t)*(v26 - 1);
          uint64_t v27 = *v26;
          swift_bridgeObjectRetain();
          sub_100210AD0(32, 0xE100000000000000, v14, v23);
          if (v30)
          {
            v31._uint64_t countAndFlagsBits = 32;
            v31._char object = (void *)0xE100000000000000;
            Swift::Int v29 = ByteBuffer._setStringSlowpath(_:at:)(v31, v23);
          }
          Swift::UInt32 v32 = v2[5];
          Swift::Int v33 = v32 + v29;
          if (__CFADD__(v32, v29)) {
            break;
          }
          v2[5] = v33;
          Swift::Int v34 = v25 + v29;
          if (__OFADD__(v25, v29)) {
            goto LABEL_36;
          }
          swift_bridgeObjectRetain();
          sub_100210AD0(v28, (unint64_t)v27, v67, v33);
          Swift::Int v36 = v35;
          char v38 = v37;
          swift_bridgeObjectRelease();
          if (v38)
          {
            v39._uint64_t countAndFlagsBits = v28;
            v39._char object = v27;
            Swift::Int v36 = ByteBuffer._setStringSlowpath(_:at:)(v39, v33);
          }
          swift_bridgeObjectRelease();
          uint64_t v2 = v66;
          Swift::UInt32 v40 = v66[5];
          Swift::UInt32 v23 = v40 + v36;
          if (__CFADD__(v40, v36)) {
            goto LABEL_37;
          }
          v66[5] = v23;
          BOOL v41 = __OFADD__(v34, v36);
          Swift::Int v25 = v34 + v36;
          if (v41) {
            goto LABEL_38;
          }
          v26 += 4;
          --v24;
          uint64_t v14 = v67;
          if (!v24)
          {
            swift_bridgeObjectRelease();
            Swift::Int v21 = v65;
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      Swift::Int v25 = 0;
LABEL_33:
      swift_bridgeObjectRelease();
      Swift::Int v11 = v21 + v25;
      if (__OFADD__(v21, v25))
      {
LABEL_42:
        __break(1u);
        JUMPOUT(0x1002A2AA0);
      }
      return v11;
    case 5u:
      uint64_t v42 = *(void *)v0;
      uint64_t v43 = *((void *)v0 + 1);
      uint64_t v44 = *((void *)v0 + 2);
      char v45 = *(unsigned char *)v0;
      *(unsigned char *)uint64_t v0 = 0;
      Swift::Int v46 = v0[5];
      sub_100210AD0(2114633, 0xE300000000000000, (uint64_t)(v0 + 2), v0[5]);
      if (v48)
      {
        v49._uint64_t countAndFlagsBits = 2114633;
        v49._char object = (void *)0xE300000000000000;
        Swift::Int v47 = ByteBuffer._setStringSlowpath(_:at:)(v49, v46);
      }
      Swift::Int v50 = v47;
      Swift::UInt32 v51 = v0[5];
      BOOL v52 = __CFADD__(v51, v47);
      Swift::UInt32 v53 = v51 + v47;
      if (v52) {
        goto LABEL_40;
      }
      v0[5] = v53;
      sub_100275BF8(v42, v43, v44);
      Swift::Int v11 = v50 + v54;
      if (__OFADD__(v50, v54)) {
        goto LABEL_41;
      }
      *(unsigned char *)uint64_t v2 = v45;
      swift_release();
      swift_release();
LABEL_27:
      swift_release();
      return v11;
    case 6u:
      sub_100293B54(*(void *)v0, v0[2], *((void *)v0 + 2), *((void *)v0 + 3), v0[8] | ((unint64_t)*((unsigned __int16 *)v0 + 18) << 32) | ((unint64_t)*((unsigned __int8 *)v0+ 38) << 48));
      Swift::Int v11 = v55;
      swift_bridgeObjectRelease();
      goto LABEL_27;
    case 7u:
      sub_100293000(*(void *)v0, *((void *)v0 + 1), v0[4] | ((unint64_t)*((unsigned __int16 *)v0 + 10) << 32) | ((unint64_t)*((unsigned __int8 *)v0+ 22) << 48), *((void *)v0 + 3));
      Swift::Int v11 = v56;
      swift_release();
LABEL_29:
      swift_bridgeObjectRelease();
      return v11;
    case 8u:
      sub_10028CC70((long long *)v0, (uint64_t)__dst);
      sub_10028D1AC(__dst);
      Swift::Int v11 = v57;
      sub_1002A2610((uint64_t *)__dst);
      return v11;
    case 9u:
      uint64_t v58 = sub_1002A4544();
      sub_10029557C(v58, v59, v60, v61);
      Swift::Int v11 = v62;
      sub_1002A4594();
      return v11;
    default:
      unint64_t v7 = sub_1002A4544();
      Swift::Int v11 = sub_1002A8F0C(v7, v8, v9, v10);
      sub_1002A45B0(v1);
      return v11;
  }
}

unint64_t ResponsePayload.hash(into:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for MessageData();
  uint64_t v5 = sub_100224550(v4);
  __chkstk_darwin(v5);
  sub_1002A45CC();
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002A4568(v7, v37);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10027F540(v1, __dst);
      sub_1005E3410(1uLL);
      MailboxData.hash(into:)(a1);
      return sub_1002A3004((uint64_t)__dst);
    case 2u:
      sub_1002A2FA0((uint64_t)v1, v2);
      sub_1005E3410(2uLL);
      MessageData.hash(into:)();
      return sub_1002A2F48(v2, (void (*)(void))type metadata accessor for MessageData);
    case 3u:
      uint64_t v15 = *v1;
      Swift::UInt v16 = 3;
      goto LABEL_7;
    case 4u:
      uint64_t v15 = *v1;
      Swift::UInt v16 = 4;
LABEL_7:
      sub_1005E3410(v16);
      sub_100228800(a1, v15);
      return swift_bridgeObjectRelease();
    case 5u:
      sub_1005E3410(5uLL);
      sub_1002A4678();
      sub_100225638();
      swift_release();
      swift_release();
      goto LABEL_11;
    case 6u:
      uint64_t v17 = *((unsigned int *)v1 + 2);
      sub_1005E3410(6uLL);
      sub_1005E3410(v17 | (v17 << 32));
      swift_bridgeObjectRelease();
      sub_1002A4628();
      sub_1005E3400();
      goto LABEL_11;
    case 7u:
      uint64_t v18 = v1[3];
      sub_1005E3410(7uLL);
      sub_1002A4628();
      sub_1005E3400();
      sub_10022AA48(a1, v18);
      swift_bridgeObjectRelease();
LABEL_11:
      unint64_t result = swift_release();
      break;
    case 8u:
      uint64_t v19 = *v1;
      uint64_t v20 = v1[1];
      uint64_t v21 = v1[2];
      uint64_t v22 = *((unsigned int *)v1 + 8);
      sub_1005E3410(8uLL);
      if (v21 < 0)
      {
        sub_1005E3410(1uLL);
        sub_1005E3410(*(void *)(v19 + 16));
        uint64_t v35 = *(void *)(v19 + 16);
        if (v35)
        {
          uint64_t v36 = v19 + 54;
          do
          {
            v36 += 24;
            sub_1002A4628();
            sub_1005E3400();
            --v35;
          }
          while (v35);
        }
        sub_1005E3410(v21 | ((unint64_t)v21 << 32));
        uint64_t v27 = v19;
        uint64_t v28 = v20;
        uint64_t v29 = v21;
      }
      else
      {
        sub_1005E3410(0);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v23 = sub_1002A4678();
        sub_1002254E8(v23, v24, v25, v26);
        sub_1005E3410(v22 | (v22 << 32));
        swift_release();
        swift_release();
        swift_release();
        uint64_t v27 = v19;
        uint64_t v28 = v20;
        uint64_t v29 = v21;
      }
      unint64_t result = sub_10028D508(v27, v28, v29);
      break;
    case 9u:
      sub_1005E3410(9uLL);
      uint64_t v30 = sub_1002A4660();
      ApplePushService.hash(into:)(v30, v31, v32, v33, v34);
      unint64_t result = sub_1002A4594();
      break;
    default:
      unint64_t v8 = *v1;
      sub_1005E3410(0);
      uint64_t v9 = sub_1002A4660();
      UntaggedStatus.hash(into:)(v9, v10, v11, v12, v13);
      unint64_t result = sub_1002A45B0(v8);
      break;
  }
  return result;
}

Swift::Int ResponsePayload.hashValue.getter()
{
  sub_1005E33F0();
  ResponsePayload.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002A2F08()
{
  sub_1005E33F0();
  ResponsePayload.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_1002A2F48(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1002A2FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A3004(uint64_t a1)
{
  return a1;
}

unint64_t sub_1002A306C()
{
  unint64_t result = qword_100711638;
  if (!qword_100711638)
  {
    type metadata accessor for ResponsePayload();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711638);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ResponsePayload(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v15 = *(void *)(a2 + 32);
        uint64_t v16 = *(void *)(a2 + 40);
        uint64_t v17 = *(void *)(a2 + 48);
        uint64_t v33 = *(void *)(a2 + 64);
        uint64_t v34 = *(void *)(a2 + 72);
        uint64_t v35 = *(void *)(a2 + 80);
        uint64_t v36 = *(void *)(a2 + 88);
        uint64_t v37 = *(void *)(a2 + 96);
        uint64_t v38 = *(void *)(a2 + 104);
        uint64_t v39 = *(void *)(a2 + 112);
        unsigned __int8 v40 = *(unsigned char *)(a2 + 120);
        uint64_t v18 = *(void *)a2;
        uint64_t v19 = *(void *)(a2 + 56);
        sub_100280BDC(v18, v12, v13, v14, v15, v16, v17, v19, v33, v34, v35, v36, v37, v38, v39, v40);
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = v13;
        *(void *)(a1 + 24) = v14;
        *(void *)(a1 + 32) = v15;
        *(void *)(a1 + 40) = v16;
        *(void *)(a1 + 48) = v17;
        *(void *)(a1 + 56) = v19;
        *(void *)(a1 + 64) = v33;
        *(void *)(a1 + 72) = v34;
        *(void *)(a1 + 80) = v35;
        *(void *)(a1 + 88) = v36;
        *(void *)(a1 + 96) = v37;
        *(void *)(a1 + 104) = v38;
        *(void *)(a1 + 112) = v39;
        *(unsigned char *)(a1 + 120) = v40;
        break;
      case 2u:
        uint64_t v20 = type metadata accessor for MessageData();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
          case 2u:
            uint64_t v21 = sub_10000566C(&qword_100710538);
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
            goto LABEL_16;
          case 3u:
          case 4u:
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
LABEL_16:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v20 - 8) + 64));
            break;
        }
        break;
      case 3u:
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v22 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 7u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      case 8u:
        uint64_t v23 = *(void *)a2;
        uint64_t v24 = *(void *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 24);
        int v27 = *(_DWORD *)(a2 + 32);
        sub_10028D48C(v23, v24, v25);
        *(void *)a1 = v23;
        *(void *)(a1 + 8) = v24;
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = v26;
        *(_DWORD *)(a1 + 32) = v27;
        break;
      case 9u:
        uint64_t v28 = *(void *)a2;
        uint64_t v29 = *(void *)(a2 + 8);
        uint64_t v30 = *(void *)(a2 + 16);
        char v31 = *(unsigned char *)(a2 + 24);
        sub_1002953E0();
        *(void *)a1 = v28;
        *(void *)(a1 + 8) = v29;
        *(void *)(a1 + 16) = v30;
        *(unsigned char *)(a1 + 24) = v31;
        break;
      default:
        unint64_t v6 = *(void *)a2;
        uint64_t v7 = *(void *)(a2 + 8);
        uint64_t v8 = *(void *)(a2 + 16);
        unsigned __int8 v9 = *(unsigned char *)(a2 + 24);
        sub_10029CBFC(v6, v7, v8, v9);
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v8;
        *(unsigned char *)(a1 + 24) = v9;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unint64_t destroy for ResponsePayload(uint64_t a1)
{
  unint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      unint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      unsigned __int8 v6 = *(unsigned char *)(a1 + 24);
      return sub_10029CFCC(v3, v4, v5, v6);
    case 1:
      return sub_100280A34(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
    case 2:
      type metadata accessor for MessageData();
      unint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 1:
        case 2:
          uint64_t v7 = sub_10000566C(&qword_100710538);
          uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
          unint64_t result = v8(a1, v7);
          break;
        case 3:
        case 4:
          goto LABEL_16;
        default:
          return result;
      }
      return result;
    case 3:
    case 4:
      goto LABEL_16;
    case 5:
      swift_release();
      swift_release();
      goto LABEL_12;
    case 6:
      swift_bridgeObjectRelease();
LABEL_12:
      unint64_t result = swift_release();
      break;
    case 7:
      swift_release();
LABEL_16:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    case 8:
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 16);
      unint64_t result = sub_10028D508(v9, v10, v11);
      break;
    case 9:
      unint64_t result = sub_100295400();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ResponsePayload(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 48);
      uint64_t v30 = *(void *)(a2 + 64);
      uint64_t v31 = *(void *)(a2 + 72);
      uint64_t v32 = *(void *)(a2 + 80);
      uint64_t v33 = *(void *)(a2 + 88);
      uint64_t v34 = *(void *)(a2 + 96);
      uint64_t v35 = *(void *)(a2 + 104);
      uint64_t v36 = *(void *)(a2 + 112);
      unsigned __int8 v37 = *(unsigned char *)(a2 + 120);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *(void *)(a2 + 56);
      sub_100280BDC(v15, v9, v10, v11, v12, v13, v14, v16, v30, v31, v32, v33, v34, v35, v36, v37);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v16;
      *(void *)(a1 + 64) = v30;
      *(void *)(a1 + 72) = v31;
      *(void *)(a1 + 80) = v32;
      *(void *)(a1 + 88) = v33;
      *(void *)(a1 + 96) = v34;
      *(void *)(a1 + 104) = v35;
      *(void *)(a1 + 112) = v36;
      *(unsigned char *)(a1 + 120) = v37;
      break;
    case 2u:
      uint64_t v17 = type metadata accessor for MessageData();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          uint64_t v18 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
          goto LABEL_14;
        case 3u:
        case 4u:
          *(void *)a1 = *(void *)a2;
          swift_bridgeObjectRetain();
LABEL_14:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v17 - 8) + 64));
          break;
      }
      break;
    case 3u:
    case 4u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      break;
    case 5u:
      uint64_t v19 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 6u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 7u:
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      break;
    case 8u:
      uint64_t v20 = *(void *)a2;
      uint64_t v21 = *(void *)(a2 + 8);
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a2 + 24);
      int v24 = *(_DWORD *)(a2 + 32);
      sub_10028D48C(v20, v21, v22);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v22;
      *(void *)(a1 + 24) = v23;
      *(_DWORD *)(a1 + 32) = v24;
      break;
    case 9u:
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      uint64_t v27 = *(void *)(a2 + 16);
      char v28 = *(unsigned char *)(a2 + 24);
      sub_1002953E0();
      *(void *)a1 = v25;
      *(void *)(a1 + 8) = v26;
      *(void *)(a1 + 16) = v27;
      *(unsigned char *)(a1 + 24) = v28;
      break;
    default:
      unint64_t v4 = *(void *)a2;
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
      sub_10029CBFC(v4, v5, v6, v7);
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6;
      *(unsigned char *)(a1 + 24) = v7;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ResponsePayload(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1002A2F48(a1, (void (*)(void))type metadata accessor for ResponsePayload);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v8 = *(void *)a2;
        uint64_t v9 = *(void *)(a2 + 8);
        uint64_t v10 = *(void *)(a2 + 16);
        uint64_t v11 = *(void *)(a2 + 24);
        uint64_t v12 = *(void *)(a2 + 32);
        uint64_t v13 = *(void *)(a2 + 40);
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v31 = *(void *)(a2 + 64);
        uint64_t v32 = *(void *)(a2 + 72);
        uint64_t v33 = *(void *)(a2 + 80);
        uint64_t v34 = *(void *)(a2 + 88);
        uint64_t v35 = *(void *)(a2 + 96);
        uint64_t v36 = *(void *)(a2 + 104);
        uint64_t v37 = *(void *)(a2 + 112);
        unsigned __int8 v38 = *(unsigned char *)(a2 + 120);
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = *(void *)(a2 + 56);
        sub_100280BDC(v15, v9, v10, v11, v12, v13, v14, v16, v31, v32, v33, v34, v35, v36, v37, v38);
        *(void *)a1 = v8;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v14;
        *(void *)(a1 + 56) = v16;
        *(void *)(a1 + 64) = v31;
        *(void *)(a1 + 72) = v32;
        *(void *)(a1 + 80) = v33;
        *(void *)(a1 + 88) = v34;
        *(void *)(a1 + 96) = v35;
        *(void *)(a1 + 104) = v36;
        *(void *)(a1 + 112) = v37;
        *(unsigned char *)(a1 + 120) = v38;
        break;
      case 2u:
        uint64_t v17 = type metadata accessor for MessageData();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
          case 2u:
            uint64_t v18 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
            goto LABEL_15;
          case 3u:
          case 4u:
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
LABEL_15:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v17 - 8) + 64));
            break;
        }
        break;
      case 3u:
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        int v19 = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
        *(_DWORD *)(a1 + 32) = v19;
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 7u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        int v20 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
        *(_DWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        break;
      case 8u:
        uint64_t v21 = *(void *)a2;
        uint64_t v22 = *(void *)(a2 + 8);
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = *(void *)(a2 + 24);
        int v25 = *(_DWORD *)(a2 + 32);
        sub_10028D48C(v21, v22, v23);
        *(void *)a1 = v21;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = v23;
        *(void *)(a1 + 24) = v24;
        *(_DWORD *)(a1 + 32) = v25;
        break;
      case 9u:
        uint64_t v26 = *(void *)a2;
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v28 = *(void *)(a2 + 16);
        char v29 = *(unsigned char *)(a2 + 24);
        sub_1002953E0();
        *(void *)a1 = v26;
        *(void *)(a1 + 8) = v27;
        *(void *)(a1 + 16) = v28;
        *(unsigned char *)(a1 + 24) = v29;
        break;
      default:
        unint64_t v4 = *(void *)a2;
        uint64_t v5 = *(void *)(a2 + 8);
        uint64_t v6 = *(void *)(a2 + 16);
        unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
        sub_10029CBFC(v4, v5, v6, v7);
        *(void *)a1 = v4;
        *(void *)(a1 + 8) = v5;
        *(void *)(a1 + 16) = v6;
        *(unsigned char *)(a1 + 24) = v7;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ResponsePayload(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for MessageData();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ResponsePayload(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002A2F48((uint64_t)a1, (void (*)(void))type metadata accessor for ResponsePayload);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for MessageData();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002A4440()
{
  uint64_t result = type metadata accessor for MessageData();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1002A451C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1002A4538()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_1002A4544()
{
  return *(void *)v0;
}

uint64_t sub_1002A4568@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return sub_1002A254C(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_1002A4594()
{
  return sub_100295400();
}

unint64_t sub_1002A45B0(unint64_t a1)
{
  return sub_10029CFCC(a1, v1, v2, v3);
}

uint64_t sub_1002A45CC()
{
  return type metadata accessor for ResponsePayload();
}

uint64_t sub_1002A45F4()
{
  return v0;
}

uint64_t sub_1002A4610()
{
  return 0x44454C42414E45;
}

uint64_t sub_1002A4628()
{
  return swift_beginAccess();
}

uint64_t sub_1002A4644()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1002A4660()
{
  return v0;
}

uint64_t sub_1002A4678()
{
  return v0;
}

uint64_t static ResponseText.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = a4 & 0xF000000000000007;
  if ((~a1 & 0xF000000000000007) != 0)
  {
    if (v10 == 0xF000000000000007) {
      return 0;
    }
    sub_1002965E4(a4);
    sub_1002965E4(a1);
    static ResponseTextCode.__derived_enum_equals(_:_:)();
    char v14 = v13;
    sub_100212D94(a4);
    sub_100212D94(a1);
    if ((v14 & 1) == 0) {
      return 0;
    }
  }
  else if (v10 != 0xF000000000000007)
  {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  return sub_1005E3290();
}

unint64_t ResponseText.code.getter(unint64_t a1)
{
  return a1;
}

unint64_t ResponseText.code.setter(unint64_t a1)
{
  unint64_t result = sub_100212D94(*v1);
  unint64_t *v1 = a1;
  return result;
}

uint64_t Mailbox.accountID.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ResponseText.hash(into:)(uint64_t a1, unint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0)
  {
    sub_1005E3420(1u);
    sub_1002965F8(a2);
    ResponseTextCode.hash(into:)();
    sub_100212D94(a2);
  }
  else
  {
    sub_1005E3420(0);
  }
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int ResponseText.hashValue.getter(unint64_t a1)
{
  sub_1005E33F0();
  ResponseText.hash(into:)((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_1002A4908()
{
  return ResponseText.hashValue.getter(*v0);
}

uint64_t sub_1002A4914(uint64_t a1)
{
  return ResponseText.hash(into:)(a1, *v1);
}

Swift::Int sub_1002A4920()
{
  unint64_t v1 = *v0;
  sub_1005E33F0();
  ResponseText.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

uint64_t sub_1002A4978(uint64_t a1, uint64_t a2)
{
  return static ResponseText.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sub_1002A4994(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = 0;
  if ((~a1 & 0xF000000000000007) != 0)
  {
    uint64_t v19 = a1;
    sub_1002A4AA4(&v19, v4);
    uint64_t v7 = v8;
  }
  if (sub_1005E1DC0() < 1)
  {
    a3 = (void *)0xE100000000000000;
    a2 = 32;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  Swift::Int v9 = *(unsigned int *)(v4 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(a2, (unint64_t)a3, v4 + 8, v9);
  Swift::Int v11 = v10;
  char v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    v14._uint64_t countAndFlagsBits = a2;
    v14._char object = a3;
    Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v14, v9);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v16 = *(_DWORD *)(v4 + 20);
  BOOL v17 = __CFADD__(v16, v11);
  int v18 = v16 + v11;
  if (v17)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v4 + 20) = v18;
  uint64_t result = v7 + v11;
  if (__OFADD__(v7, v11)) {
LABEL_12:
  }
    __break(1u);
  return result;
}

void sub_1002A4AA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  Swift::Int v5 = *(unsigned int *)(a2 + 20);
  sub_100210AD0(91, 0xE100000000000000, a2 + 8, v5);
  if (v7)
  {
    v14._uint64_t countAndFlagsBits = 91;
    v14._char object = (void *)0xE100000000000000;
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v14, v5);
  }
  Swift::Int v15 = v6;
  int v16 = *(_DWORD *)(a2 + 20);
  BOOL v17 = __CFADD__(v16, v6);
  int v18 = v16 + v6;
  if (v17)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 20) = v18;
  sub_1002A5118(*a1, v7, v8, v9, v10, v11, v12, v13, v27, v28, v29, v30);
  Swift::Int v20 = v15 + v19;
  if (__OFADD__(v15, v19))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Swift::Int v21 = *(unsigned int *)(a2 + 20);
  sub_100210AD0(8285, 0xE200000000000000, v4, *(_DWORD *)(a2 + 20));
  if (v23)
  {
    v24._uint64_t countAndFlagsBits = 8285;
    v24._char object = (void *)0xE200000000000000;
    Swift::Int v22 = ByteBuffer._setStringSlowpath(_:at:)(v24, v21);
  }
  int v25 = *(_DWORD *)(a2 + 20);
  BOOL v17 = __CFADD__(v25, v22);
  int v26 = v25 + v22;
  if (v17) {
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 20) = v26;
  if (__OFADD__(v20, v22)) {
LABEL_13:
  }
    __break(1u);
}

void ResponseText.debugDescription.getter(unint64_t a1)
{
  sub_1002965E4(a1);
  swift_bridgeObjectRetain();
  sub_100211970();
}

void sub_1002A4BF0()
{
  ResponseText.debugDescription.getter(*v0);
}

unint64_t sub_1002A4C00()
{
  unint64_t result = qword_1007116E8;
  if (!qword_1007116E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007116E8);
  }
  return result;
}

uint64_t destroy for ResponseText(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if ((~v1 & 0xF000000000000007) != 0) {
    sub_100212D10(v1);
  }
  return swift_bridgeObjectRelease();
}

unint64_t *_s12NIOIMAPCore212ResponseTextVwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0) {
    sub_1002965F8(*a2);
  }
  unint64_t v6 = a2[1];
  unint64_t v5 = a2[2];
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t *assignWithCopy for ResponseText(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a2 & 0xF000000000000007;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    if (v5 == 0xF000000000000007)
    {
      sub_1002A4DA0((uint64_t)a1);
      *a1 = *a2;
    }
    else
    {
      sub_1002965F8(*a2);
      unint64_t v6 = *a1;
      *a1 = v4;
      sub_100212D10(v6);
    }
  }
  else
  {
    if (v5 != 0xF000000000000007) {
      sub_1002965F8(*a2);
    }
    *a1 = v4;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002A4DA0(uint64_t a1)
{
  return a1;
}

unint64_t *assignWithTake for ResponseText(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if ((~v4 & 0xF000000000000007) != 0)
  {
    if ((~v5 & 0xF000000000000007) != 0)
    {
      *a1 = v5;
      sub_100212D10(v4);
      goto LABEL_6;
    }
    sub_1002A4DA0((uint64_t)a1);
  }
  *a1 = v5;
LABEL_6:
  unint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResponseText()
{
  return &type metadata for ResponseText;
}

uint64_t sub_1002A4E78(uint64_t a1)
{
  return sub_1002A4EC8(a1, &unk_1007104C8, &qword_1007104D8, sub_1002A7840);
}

uint64_t sub_1002A4EA0(uint64_t a1)
{
  return sub_1002A4EC8(a1, &unk_1007108C0, &qword_1007108C8, sub_1002D08D8);
}

#error "1002A50A0: call analysis failed (funcsize=133)"

uint64_t sub_1002A50F0(uint64_t a1)
{
  return sub_1002A4EC8(a1, &unk_100710520, &qword_100710530, sub_1002A7840);
}

void sub_1002A5118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1001FE5B4();
  uint64_t v16 = v12;
  unint64_t v18 = v17;
  uint64_t v19 = sub_10000566C(&qword_100710530);
  uint64_t v20 = sub_100224550(v19);
  __chkstk_darwin(v20);
  sub_1002244C0();
  uint64_t v21 = type metadata accessor for ResponseCodeAppend();
  uint64_t v22 = sub_100224550(v21);
  __chkstk_darwin(v22);
  sub_1001F40C0();
  int v25 = (_DWORD *)(v24 - v23);
  switch((v18 >> 59) & 0x1E | (v18 >> 2) & 1)
  {
    case 1uLL:
      sub_1002A7B14();
      sub_1001FE57C();
      sub_1002464B4(v28);
      return;
    case 2uLL:
      sub_1002A7C4C();
      uint64_t v30 = sub_1002A7900();
      int v25 = 0;
      sub_100210AD0(v30, v31, v14, v15);
      if (v32)
      {
        v33._uint64_t countAndFlagsBits = sub_1002A7900();
        unint64_t v18 = v14;
        ByteBuffer._setStringSlowpath(_:at:)(v33, v15);
      }
      sub_1002A7864();
      if (v35)
      {
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
        goto LABEL_248;
      }
      *(_DWORD *)(v16 + 20) = v34;
      sub_10028B108();
      if (!__OFADD__(v18, sub_1001EE1A8(v36, v37, v38, v39, v40, v41, v42, 1, v16, v272, SHIDWORD(v272), v273, v274, v275, v277, v278, *(uint64_t *)&v279[0],
                *((uint64_t *)&v279[0] + 1),
                *(uint64_t *)&v279[1],
                *(long long *)((char *)&v279[1] + 8),
                *((uint64_t *)&v279[2] + 1),
                *(uint64_t *)&v279[3],
                *(Swift::String *)((char *)&v279[3] + 8),
                *((uint64_t *)&v279[4] + 1),
                *(uint64_t *)&v279[5],
                *((uint64_t *)&v279[5] + 1),
                *(uint64_t *)&v279[6],
                *((uint64_t *)&v279[6] + 1),
                *(uint64_t *)&v279[7],
                *((uint64_t *)&v279[7] + 1),
                *(uint64_t *)&v279[8],
                *((uint64_t *)&v279[8] + 1),
                *(uint64_t *)&v279[9],
                *((uint64_t *)&v279[9] + 1),
                *(uint64_t *)&v279[10],
                *((uint64_t *)&v279[10] + 1),
                *(uint64_t *)&v279[11],
                *((uint64_t *)&v279[11] + 1),
                *(uint64_t *)&v279[12],
                *((uint64_t *)&v279[12] + 1),
                *(uint64_t *)&v279[13])))
        goto LABEL_237;
      __break(1u);
LABEL_14:
      Swift::Int v43 = *(unsigned int *)(v16 + 20);
      uint64_t v44 = sub_1002A7BAC();
      sub_1002A7884(v44, v45, v16 + 8);
      if (v46)
      {
        v47._uint64_t countAndFlagsBits = sub_1002A7BAC();
        ByteBuffer._setStringSlowpath(_:at:)(v47, v43);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_239;
      }
      uint64_t v49 = sub_1002A7BF4(v48);
      if (!__OFADD__(v25, sub_1002C9B08(v49))) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_20:
      Swift::Int v50 = *(unsigned int *)(v16 + 20);
      uint64_t v51 = sub_1002A7A14();
      sub_1002A7884(v51, v52, v16 + 8);
      if (v53)
      {
        v54._uint64_t countAndFlagsBits = sub_1002A7A14();
        ByteBuffer._setStringSlowpath(_:at:)(v54, v50);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_240;
      }
      sub_1002A7BF4(v55);
      if (!__OFADD__(v25, sub_1002BA570())) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_26:
      Swift::Int v56 = *(unsigned int *)(v16 + 20);
      uint64_t v57 = sub_1002A7C64();
      sub_1002A7884(v57, v58, v16 + 8);
      if (v59)
      {
        v60._uint64_t countAndFlagsBits = sub_1002A7C64();
        ByteBuffer._setStringSlowpath(_:at:)(v60, v56);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_241;
      }
      sub_1002A7BF4(v61);
      if (!__OFADD__(v25, sub_1002BA570())) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_32:
      sub_1002A7B14();
      sub_1001FE57C();
      sub_10028F308(v62, v63, v64);
      return;
    case 3uLL:
      goto LABEL_14;
    case 4uLL:
      goto LABEL_20;
    case 5uLL:
      goto LABEL_26;
    case 6uLL:
      goto LABEL_32;
    case 7uLL:
      uint64_t v66 = sub_1002A7D68();
      sub_1002A74F0(v66, (uint64_t)v25);
      sub_1002A0E18(v25);
      sub_1002A7554((uint64_t)v25);
      goto LABEL_237;
    case 8uLL:
      sub_1002A7B14();
      sub_1001FE57C();
      sub_1002A1694(v67, v68, v69, v70, v71, v72, v73, v74, a9, a10, a11, a12);
      return;
    case 9uLL:
      sub_1002A7B14();
      uint64_t v76 = v75[2];
      char v77 = (void *)v75[3];
      uint64_t v78 = (void *)v75[5];
      uint64_t v276 = v75[4];
      Swift::Int v79 = *(unsigned int *)(v16 + 20);
      swift_bridgeObjectRetain();
      sub_100210AD0(v76, (unint64_t)v77, v16 + 8, v79);
      Swift::Int v81 = v80;
      char v83 = v82;
      swift_bridgeObjectRelease();
      if (v83)
      {
        v84._uint64_t countAndFlagsBits = v76;
        v84._char object = v77;
        Swift::Int v81 = ByteBuffer._setStringSlowpath(_:at:)(v84, v79);
      }
      int v85 = *(_DWORD *)(v16 + 20);
      Swift::Int v86 = (v85 + v81);
      if (__CFADD__(v85, v81)) {
        goto LABEL_242;
      }
      *(_DWORD *)(v16 + 20) = v86;
      if (v78)
      {
        *(void *)&v279[0] = 32;
        *((void *)&v279[0] + 1) = 0xE100000000000000;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v280._uint64_t countAndFlagsBits = v276;
        v280._char object = v78;
        sub_1005E1E30(v280);
        swift_bridgeObjectRetain();
        sub_100210AD0(32, 0xE100000000000000, v16 + 8, v86);
        Swift::Int v88 = v87;
        char v90 = v89;
        swift_bridgeObjectRelease();
        if (v90)
        {
          v91._uint64_t countAndFlagsBits = 32;
          v91._char object = (void *)0xE100000000000000;
          Swift::Int v88 = ByteBuffer._setStringSlowpath(_:at:)(v91, v86);
        }
        int v92 = *(_DWORD *)(v16 + 20);
        BOOL v35 = __CFADD__(v92, v88);
        int v93 = v92 + v88;
        if (v35)
        {
LABEL_248:
          __break(1u);
          goto LABEL_249;
        }
        *(_DWORD *)(v16 + 20) = v93;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_84:
        Swift::Int v88 = 0;
      }
      if (!__OFADD__(v81, v88)) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_88:
      uint64_t v143 = sub_1002A7990();
      sub_100290BDC(v143, v144);
      if (v145)
      {
        uint64_t v146 = sub_1002A7990();
        sub_1002A789C(v146, v147);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_93:
      sub_1002A78B4();
      uint64_t v148 = sub_1002A7D54();
      sub_100290BDC(v148, v149);
      if (v150)
      {
        uint64_t v151 = sub_1002A7D54();
        sub_1002A789C(v151, v152);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_98:
      sub_1002A78B4();
      uint64_t v153 = sub_1002A7B54();
      sub_100290BDC(v153, v154);
      if (v155)
      {
        uint64_t v156 = sub_1002A7B54();
        sub_1002A789C(v156, v157);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_103:
      sub_1002A78B4();
      uint64_t v158 = sub_1002A7ADC();
      sub_100290BDC(v158, v159);
      if (v160)
      {
        uint64_t v161 = sub_1002A7ADC();
        sub_1002A789C(v161, v162);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_108:
      sub_1002A78B4();
      uint64_t v163 = sub_1002A7BDC();
      sub_100290BDC(v163, v164);
      if (v165)
      {
        uint64_t v166 = sub_1002A7BDC();
        sub_1002A789C(v166, v167);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_113:
      uint64_t v168 = sub_1002A79F4();
      sub_100290BDC(v168, v169);
      if (v170)
      {
        uint64_t v171 = sub_1002A79F4();
        sub_1002A789C(v171, v172);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_118:
      sub_1002A78B4();
      uint64_t v173 = sub_1002A7BC4();
      sub_100290BDC(v173, v174);
      if (v175)
      {
        uint64_t v176 = sub_1002A7BC4();
        sub_1002A789C(v176, v177);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_123:
      unsigned __int16 v178 = sub_1002A7A94();
      uint64_t v179 = sub_1002A7CCC(v178);
      sub_100290BDC(v179, v180);
      if (v181)
      {
        uint64_t v182 = sub_1002A7CCC(0x4F4Eu);
        sub_1002A789C(v182, v183);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_128:
      sub_1002A78B4();
      uint64_t v184 = sub_1002A7CB8();
      sub_100290BDC(v184, v185);
      if (v186)
      {
        uint64_t v187 = sub_1002A7CB8();
        sub_1002A789C(v187, v188);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_133:
      unsigned __int16 v189 = sub_1002A7A94();
      uint64_t v190 = sub_1002A7CA4(v189);
      sub_100290BDC(v190, v191);
      if (v192)
      {
        uint64_t v193 = sub_1002A7CA4(0x4F4Eu);
        sub_1002A789C(v193, v194);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_138:
      sub_1002A78B4();
      sub_100290BDC(0xD000000000000010, 0x80000001005E6500);
      if (v195) {
        sub_1002A789C(0xD000000000000010, 0x80000001005E6500);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_143:
      sub_1002A78B4();
      sub_100290BDC(0xD000000000000012, 0x80000001005E64E0);
      if (v196) {
        sub_1002A789C(0xD000000000000012, 0x80000001005E64E0);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_148:
      sub_1002A78B4();
      uint64_t v197 = sub_1002A7A74();
      sub_100290BDC(v197, v198);
      if (v199)
      {
        uint64_t v200 = sub_1002A7A74();
        sub_1002A789C(v200, v201);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_153:
      sub_1002A78B4();
      sub_100290BDC(0xD000000000000014, 0x80000001005E64A0);
      if (v202) {
        sub_1002A789C(0xD000000000000014, 0x80000001005E64A0);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_158:
      sub_1002A78B4();
      sub_100290BDC(0xD000000000000013, 0x80000001005E6480);
      if (v203) {
        sub_1002A789C(0xD000000000000013, 0x80000001005E6480);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_163:
      uint64_t v204 = sub_1002A7C34();
      sub_100290BDC(v204, v205);
      if (v206)
      {
        uint64_t v207 = sub_1002A7C34();
        sub_1002A789C(v207, v208);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_168:
      sub_1002A78B4();
      uint64_t v209 = sub_1002A7924();
      sub_100290BDC(v209, v210);
      if (v211)
      {
        uint64_t v212 = sub_1002A7924();
        sub_1002A789C(v212, v213);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_173:
      sub_1002A78B4();
      uint64_t v214 = sub_1002A7A44();
      sub_100290BDC(v214, v215);
      if (v216)
      {
        uint64_t v217 = sub_1002A7A44();
        sub_1002A789C(v217, v218);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_178:
      uint64_t v219 = sub_1002A7A94();
      sub_100290BDC(v219 & 0xFFFF00000000FFFFLL | 0x4D5245500000, 0xE600000000000000);
      if (v220) {
        sub_1002A789C(0x4D5245504F4ELL, 0xE600000000000000);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_183:
      sub_1002A78B4();
      uint64_t v221 = sub_1002A7D20();
      sub_100290BDC(v221, v222);
      if (v223)
      {
        uint64_t v224 = sub_1002A7D20();
        sub_1002A789C(v224, v225);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_188:
      uint64_t v226 = sub_1002A7948();
      sub_100290BDC(v226, v227);
      if (v228)
      {
        uint64_t v229 = sub_1002A7948();
        sub_1002A789C(v229, v230);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_193:
      sub_1002A78B4();
      uint64_t v231 = sub_1002A7C04();
      sub_100290BDC(v231, v232);
      if (v233)
      {
        uint64_t v234 = sub_1002A7C04();
        sub_1002A789C(v234, v235);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_198:
      sub_1002A7C1C();
      uint64_t v236 = sub_1002A7B94();
      sub_100290BDC(v236, v237);
      if (v238)
      {
        uint64_t v239 = sub_1002A7B94();
        sub_1002A789C(v239, v240);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_203:
      sub_1002A7C1C();
      uint64_t v241 = sub_1002A7B7C();
      sub_100290BDC(v241, v242);
      if (v243)
      {
        uint64_t v244 = sub_1002A7B7C();
        sub_1002A789C(v244, v245);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_208:
      sub_1002A78B4();
      uint64_t v246 = sub_1002A7C90();
      sub_100290BDC(v246, v247);
      if (v248)
      {
        uint64_t v249 = sub_1002A7C90();
        sub_1002A789C(v249, v250);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_213:
      sub_1002A78B4();
      uint64_t v251 = sub_1002A7C7C();
      sub_100290BDC(v251, v252);
      if (v253)
      {
        uint64_t v254 = sub_1002A7C7C();
        sub_1002A789C(v254, v255);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_218:
      sub_1002A78B4();
      uint64_t v256 = sub_1002A7B3C();
      sub_100290BDC(v256, v257);
      if (v258)
      {
        uint64_t v259 = sub_1002A7B3C();
        sub_1002A789C(v259, v260);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_223:
      uint64_t v261 = sub_1002A79B4();
      sub_100290BDC(v261, v262);
      if (v263)
      {
        uint64_t v264 = sub_1002A79B4();
        sub_1002A789C(v264, v265);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_228:
      sub_1002A78B4();
      sub_100290BDC(0xD000000000000011, 0x80000001005E6460);
      if (v266) {
        sub_1002A789C(0xD000000000000011, 0x80000001005E6460);
      }
      sub_1002A7864();
      if (!v35) {
        goto LABEL_236;
      }
      __break(1u);
LABEL_233:
      uint64_t v267 = sub_1002A79D4();
      sub_100290BDC(v267, v268);
      if (v269)
      {
        uint64_t v270 = sub_1002A79D4();
        sub_1002A789C(v270, v271);
      }
      sub_1002A7864();
      if (!v35)
      {
LABEL_236:
        *(_DWORD *)(v16 + 20) = v142;
LABEL_237:
        sub_1001FE57C();
        return;
      }
LABEL_249:
      __break(1u);
      JUMPOUT(0x1002A5E40);
    case 0xAuLL:
      uint64_t v94 = sub_1002A7D68();
      sub_1001F36E4(v94, v13, &qword_100710530);
      Swift::Int v95 = *(unsigned int *)(v16 + 20);
      uint64_t v96 = sub_1002A7AA4();
      sub_1002A7884(v96, v97, v16 + 8);
      if (v98)
      {
        v99._uint64_t countAndFlagsBits = sub_1002A7AA4();
        ByteBuffer._setStringSlowpath(_:at:)(v99, v95);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_246;
      }
      *(_DWORD *)(v16 + 20) = v100;
      uint64_t v101 = sub_1002A4EC8(v13, &unk_100710520, &qword_100710530, sub_1002A7840);
      sub_1001F3A28(v13, &qword_100710530);
      if (!__OFADD__(v25, v101)) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_53:
      Swift::Int v102 = *(unsigned int *)(v16 + 20);
      uint64_t v103 = sub_1002A796C();
      sub_1002A7884(v103, v104, v16 + 8);
      if (v105)
      {
        v106._uint64_t countAndFlagsBits = sub_1002A796C();
        ByteBuffer._setStringSlowpath(_:at:)(v106, v102);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_243;
      }
      *(_DWORD *)(v16 + 20) = v107;
      if (!__OFADD__(v25, sub_10028DBEC())) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_59:
      sub_1002A7B20();
      sub_1005E2C80(23);
      swift_bridgeObjectRelease();
      *(void *)&v279[0] = 0xD000000000000015;
      *((void *)&v279[0] + 1) = 0x80000001005E6540;
      v281._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1005E1E30(v281);
      swift_bridgeObjectRelease();
      sub_1002A7D00();
      sub_100254428();
      int v109 = v108;
      char v111 = v110;
      swift_bridgeObjectRelease();
      if (v111) {
        int v109 = sub_1002545A0();
      }
      int v112 = *(_DWORD *)(v16 + 20);
      BOOL v35 = __CFADD__(v112, v109);
      int v113 = v112 + v109;
      if (v35)
      {
        __break(1u);
LABEL_64:
        sub_1002A7B20();
        sub_1005E2C80(19);
        swift_bridgeObjectRelease();
        *(void *)&v279[0] = 0xD000000000000011;
        *((void *)&v279[0] + 1) = 0x80000001005E6520;
        v282._uint64_t countAndFlagsBits = sub_1005E3230();
        sub_1005E1E30(v282);
        swift_bridgeObjectRelease();
        sub_1002A7D00();
        sub_100254428();
        int v115 = v114;
        char v117 = v116;
        swift_bridgeObjectRelease();
        if (v117) {
          int v115 = sub_1002545A0();
        }
        int v118 = *(_DWORD *)(v16 + 20);
        BOOL v35 = __CFADD__(v118, v115);
        int v113 = v118 + v115;
        if (v35) {
          goto LABEL_247;
        }
      }
      *(_DWORD *)(v16 + 20) = v113;
      swift_bridgeObjectRelease();
      goto LABEL_237;
    case 0xBuLL:
      goto LABEL_53;
    case 0xCuLL:
      goto LABEL_59;
    case 0xDuLL:
      goto LABEL_64;
    case 0xEuLL:
      sub_1002A7C4C();
      sub_100210AD0(0xD000000000000010, 0x80000001005E64C0, v14, v15);
      if (v119)
      {
        v120._uint64_t countAndFlagsBits = 0xD000000000000010;
        v120._char object = (void *)0x80000001005E64C0;
        unint64_t v18 = v14;
        ByteBuffer._setStringSlowpath(_:at:)(v120, v15);
      }
      sub_1002A7864();
      if (v35) {
        goto LABEL_244;
      }
      *(_DWORD *)(v16 + 20) = v121;
      sub_10028B108();
      sub_1001F03E4(v122, v123, v124, v125, v126, v127, v128, 0, v16);
      BOOL v130 = __OFADD__(v18, v129);
      v18 += v129;
      if (!v130) {
        goto LABEL_237;
      }
      __break(1u);
LABEL_74:
      memcpy(v279, (const void *)((v18 & 0xFFFFFFFFFFFFFFBLL) + 16), sizeof(v279));
      Swift::Int v131 = *(unsigned int *)(v16 + 20);
      uint64_t v132 = sub_1002A7AC0();
      sub_100210AD0(v132, v133, v16 + 8, v131);
      if (v134)
      {
        v135._uint64_t countAndFlagsBits = sub_1002A7AC0();
        ByteBuffer._setStringSlowpath(_:at:)(v135, v131);
      }
      sub_1002A78E0();
      if (v35) {
        goto LABEL_245;
      }
      *(_DWORD *)(v16 + 20) = v136;
      sub_100276D6C(v279);
      goto LABEL_237;
    case 0xFuLL:
      goto LABEL_74;
    case 0x10uLL:
      switch(__ROR8__(v18, 3) ^ 0x1000000000000000)
      {
        case 1:
          goto LABEL_88;
        case 2:
          goto LABEL_93;
        case 3:
          goto LABEL_98;
        case 4:
          goto LABEL_103;
        case 5:
          goto LABEL_108;
        case 6:
          goto LABEL_113;
        case 7:
          goto LABEL_118;
        case 8:
          goto LABEL_123;
        case 9:
          goto LABEL_128;
        case 0xALL:
          goto LABEL_133;
        case 0xBLL:
          goto LABEL_138;
        case 0xCLL:
          goto LABEL_143;
        case 0xDLL:
          goto LABEL_148;
        case 0xELL:
          goto LABEL_153;
        case 0xFLL:
          goto LABEL_158;
        case 0x10:
          goto LABEL_163;
        case 0x11:
          goto LABEL_168;
        case 0x12:
          goto LABEL_173;
        case 0x13:
          goto LABEL_178;
        case 0x14:
          goto LABEL_183;
        case 0x15:
          goto LABEL_188;
        case 0x16:
          goto LABEL_193;
        case 0x17:
          goto LABEL_198;
        case 0x18:
          goto LABEL_203;
        case 0x19:
          goto LABEL_208;
        case 0x1ALL:
          goto LABEL_213;
        case 0x1BLL:
          goto LABEL_218;
        case 0x1CLL:
          goto LABEL_223;
        case 0x1DLL:
          goto LABEL_228;
        case 0x1ELL:
          goto LABEL_233;
        default:
          Swift::Int v81 = *(unsigned int *)(v16 + 20);
          uint64_t v137 = sub_1002A7D80();
          sub_100290BDC(v137, v138);
          if (v139)
          {
            uint64_t v140 = sub_1002A7D80();
            sub_1002A789C(v140, v141);
          }
          sub_1002A7864();
          if (!v35) {
            goto LABEL_236;
          }
          __break(1u);
          break;
      }
      goto LABEL_84;
    default:
      sub_1001FE57C();
      sub_1002A7334(v26);
      return;
  }
}

void ResponseTextCode.hash(into:)()
{
  sub_1001FE5B4();
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000566C(&qword_100710520);
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1002244A8();
  uint64_t v8 = sub_10000566C(&qword_100710530);
  uint64_t v9 = sub_100224550(v8);
  __chkstk_darwin(v9);
  sub_100224A54();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  sub_1002A7D34();
  sub_1001F3BBC();
  __chkstk_darwin(v14);
  sub_1001F40C0();
  unint64_t v17 = (Swift::UInt32 *)(v16 - v15);
  switch((v3 >> 59) & 0x1E | (v3 >> 2) & 1)
  {
    case 1uLL:
      sub_1002A78F0();
      sub_1005E3410(3uLL);
      sub_1002A7B6C();
      sub_1001FE57C();
      sub_100228800(v21, v22);
      return;
    case 2uLL:
      sub_1002A78F0();
      sub_1005E3410(5uLL);
      sub_1002A7B6C();
      sub_1001FE57C();
      sub_10022A71C(v24, v25);
      return;
    case 3uLL:
      sub_1002A7A64();
      Swift::UInt v27 = 9;
      goto LABEL_14;
    case 4uLL:
      sub_1002A7A64();
      Swift::UInt v27 = 10;
      goto LABEL_14;
    case 5uLL:
      sub_1002A7A64();
      Swift::UInt v27 = 11;
LABEL_14:
      sub_1005E3410(v27);
      sub_1005E3440(v0);
      goto LABEL_75;
    case 6uLL:
      sub_1002A7B14();
      uint64_t v38 = v37[2];
      uint64_t v39 = v37[3];
      uint64_t v40 = v37[4];
      sub_1005E3410(0xCuLL);
      swift_bridgeObjectRetain();
      sub_10022A2BC(v5, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_10022A2BC(v5, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_10022A2BC(v5, v40);
      goto LABEL_31;
    case 7uLL:
      uint64_t v28 = sub_1002A7D68();
      sub_1002A74F0(v28, (uint64_t)v17);
      sub_1005E3410(0xDuLL);
      sub_1005E3440(*v17);
      sub_10000566C(&qword_100710538);
      sub_10022AAC0();
      sub_1005E19C0();
      sub_1002A7554((uint64_t)v17);
      goto LABEL_75;
    case 8uLL:
      sub_1002A7A64();
      uint64_t v43 = *(void *)(v42 + 24);
      sub_1005E3410(0xEuLL);
      sub_1005E3440(v0);
      sub_10022A7B8(v5, v43);
      sub_1001FE57C();
      sub_10022A7B8(v44, v45);
      return;
    case 9uLL:
      sub_1002A7B14();
      uint64_t v30 = *(void *)(v29 + 40);
      sub_1005E3410(0x11uLL);
      sub_1005E1DB0();
      if (v30)
      {
        sub_1005E3420(1u);
        swift_bridgeObjectRetain();
        sub_1005E1DB0();
LABEL_31:
        sub_1001FE57C();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1005E3420(0);
LABEL_75:
        sub_1001FE57C();
      }
      return;
    case 0xAuLL:
      uint64_t v47 = sub_1002A7D68();
      sub_1001F36E4(v47, v1, &qword_100710530);
      sub_1005E3410(0x15uLL);
      sub_1001F36E4(v1, v12, &qword_100710530);
      if (getEnumTagSinglePayload for ClientCommand(v12, 1, v6) == 1)
      {
        sub_1005E3410(1uLL);
      }
      else
      {
        sub_10025406C(v12, v0, &qword_100710520);
        sub_1005E3410(0);
        sub_10000566C(&qword_100710538);
        sub_10022AAC0();
        sub_1005E19C0();
        sub_1001F3A28(v0, &qword_100710520);
      }
      sub_1001F3A28(v1, &qword_100710530);
      goto LABEL_75;
    case 0xBuLL:
      sub_1002A78F0();
      sub_1005E3410(0x16uLL);
      sub_1005E3450(v0);
      goto LABEL_75;
    case 0xCuLL:
      sub_1002A78F0();
      Swift::UInt v31 = 23;
      goto LABEL_40;
    case 0xDuLL:
      sub_1002A78F0();
      Swift::UInt v31 = 24;
LABEL_40:
      sub_1005E3410(v31);
      Swift::UInt v36 = v0;
      goto LABEL_74;
    case 0xEuLL:
      uint64_t v32 = *(void *)((v3 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      sub_1005E3410(0x1BuLL);
      sub_1005E3410(*(void *)(v32 + 16));
      uint64_t v33 = *(void *)(v32 + 16);
      if (v33)
      {
        uint64_t v34 = v32 + 64;
        do
        {
          uint64_t v35 = *(void *)(v34 - 16);
          swift_retain();
          swift_bridgeObjectRetain_n();
          sub_1005E1DB0();
          swift_bridgeObjectRelease();
          if (v35)
          {
            sub_1005E3420(1u);
            swift_beginAccess();
            sub_1005E3400();
          }
          else
          {
            sub_1005E3420(0);
          }
          swift_release();
          swift_bridgeObjectRelease();
          v34 += 40;
          --v33;
        }
        while (v33);
      }
      goto LABEL_75;
    case 0xFuLL:
      memcpy(v48, (const void *)((v3 & 0xFFFFFFFFFFFFFFBLL) + 16), sizeof(v48));
      sub_1005E3410(0x1CuLL);
      IMAPURL.hash(into:)(v5);
      goto LABEL_75;
    case 0x10uLL:
      switch(__ROR8__(v3, 3) ^ 0x1000000000000000)
      {
        case 1:
          Swift::UInt v36 = 1;
          break;
        case 2:
          Swift::UInt v36 = 4;
          break;
        case 3:
          Swift::UInt v36 = 6;
          break;
        case 4:
          Swift::UInt v36 = 7;
          break;
        case 5:
          Swift::UInt v36 = 8;
          break;
        case 6:
          Swift::UInt v36 = 15;
          break;
        case 7:
          Swift::UInt v36 = 16;
          break;
        case 8:
          Swift::UInt v36 = 18;
          break;
        case 9:
          Swift::UInt v36 = 19;
          break;
        case 0xALL:
          Swift::UInt v36 = 20;
          break;
        case 0xBLL:
          Swift::UInt v36 = 25;
          break;
        case 0xCLL:
          Swift::UInt v36 = 26;
          break;
        case 0xDLL:
          Swift::UInt v36 = 29;
          break;
        case 0xELL:
          Swift::UInt v36 = 30;
          break;
        case 0xFLL:
          Swift::UInt v36 = 31;
          break;
        case 0x10:
          Swift::UInt v36 = 32;
          break;
        case 0x11:
          Swift::UInt v36 = 33;
          break;
        case 0x12:
          Swift::UInt v36 = 34;
          break;
        case 0x13:
          Swift::UInt v36 = 35;
          break;
        case 0x14:
          Swift::UInt v36 = 36;
          break;
        case 0x15:
          Swift::UInt v36 = 37;
          break;
        case 0x16:
          Swift::UInt v36 = 38;
          break;
        case 0x17:
          Swift::UInt v36 = 39;
          break;
        case 0x18:
          Swift::UInt v36 = 40;
          break;
        case 0x19:
          Swift::UInt v36 = 41;
          break;
        case 0x1ALL:
          Swift::UInt v36 = 42;
          break;
        case 0x1BLL:
          Swift::UInt v36 = 43;
          break;
        case 0x1CLL:
          Swift::UInt v36 = 44;
          break;
        case 0x1DLL:
          Swift::UInt v36 = 45;
          break;
        case 0x1ELL:
          Swift::UInt v36 = 46;
          break;
        default:
          Swift::UInt v36 = 0;
          break;
      }
LABEL_74:
      sub_1005E3410(v36);
      goto LABEL_75;
    default:
      sub_1005E3410(2uLL);
      sub_1002A7B6C();
      sub_1001FE57C();
      sub_100226FB4(v18, v19);
      return;
  }
}

void static ResponseTextCode.__derived_enum_equals(_:_:)()
{
  sub_1001FE5B4();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = sub_10000566C(&qword_100710530);
  uint64_t v6 = sub_100224550(v5);
  __chkstk_darwin(v6);
  sub_100224A54();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  sub_1002A7D34();
  sub_1001F3BBC();
  __chkstk_darwin(v11);
  sub_100224A54();
  uint64_t v14 = (_DWORD *)(v12 - v13);
  __chkstk_darwin(v15);
  unint64_t v17 = (_DWORD *)((char *)v71 - v16);
  switch((v4 >> 59) & 0x1E | (v4 >> 2) & 1)
  {
    case 1uLL:
      sub_1002A7874();
      if (v20 != 1) {
        goto LABEL_67;
      }
      sub_1002A78C0();
      sub_1001FE57C();
      sub_10021B068();
      return;
    case 2uLL:
      sub_1002A7874();
      if (v22 != 2) {
        goto LABEL_67;
      }
      sub_1002A78C0();
      sub_1001FE57C();
      sub_100221400(v23, v24);
      return;
    case 3uLL:
    case 5uLL:
LABEL_61:
      sub_1002A7874();
      goto LABEL_67;
    case 4uLL:
      sub_1002A7874();
      if (v26 == 4) {
        sub_1002A7A34();
      }
      goto LABEL_67;
    case 6uLL:
      sub_1002A7874();
      if (v27 == 6)
      {
        sub_1002A7A34();
        uint64_t v30 = v28[3];
        uint64_t v29 = v28[4];
        uint64_t v32 = (uint64_t *)(v2 & v31);
        uint64_t v33 = v32[3];
        uint64_t v34 = v32[4];
        if (sub_100220C64(v28[2], v32[2]) & 1) != 0 && (sub_100220C64(v30, v33)) {
          sub_100220C64(v29, v34);
        }
      }
      goto LABEL_67;
    case 7uLL:
      sub_1002A7874();
      if (v35 == 7)
      {
        uint64_t v36 = sub_1002A7CE0();
        uint64_t v37 = swift_projectBox();
        sub_1002A74F0(v36, (uint64_t)v17);
        sub_1002A74F0(v37, (uint64_t)v14);
        if (*v17 == *v14)
        {
          sub_100223B18();
          sub_1005E35A0();
        }
        sub_1002A7554((uint64_t)v14);
        sub_1002A7554((uint64_t)v17);
      }
      goto LABEL_67;
    case 8uLL:
      sub_1002A7874();
      if (v38 == 8)
      {
        uint64_t v39 = v2 & 0xFFFFFFFFFFFFFFBLL;
        if (*(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x10) == *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x10))
        {
          uint64_t v40 = *(int32x2_t **)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
          uint64_t v41 = *(int32x2_t **)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
          uint64_t v42 = *(int32x2_t **)(v39 + 32);
          sub_100220BEC(v40, *(int32x2_t **)(v39 + 24));
          if (v43) {
            sub_100220BEC(v41, v42);
          }
        }
      }
      goto LABEL_67;
    case 9uLL:
      sub_1002A7874();
      if (v44 == 9)
      {
        sub_1002A7A34();
        uint64_t v47 = v45[4];
        uint64_t v46 = v45[5];
        uint64_t v49 = (void *)(v2 & v48);
        uint64_t v51 = v49[4];
        uint64_t v50 = v49[5];
        BOOL v52 = v45[2] == v49[2] && v45[3] == v49[3];
        if (v52 || (sub_1005E3290()) && v46 && v50 && (v47 != v51 || v46 != v50)) {
          sub_1005E3290();
        }
      }
      goto LABEL_67;
    case 0xAuLL:
      sub_1002A7874();
      if (v54 == 10)
      {
        uint64_t v55 = sub_1002A7CE0();
        uint64_t v56 = swift_projectBox();
        sub_1001F36E4(v55, v0, &qword_100710530);
        sub_1001F36E4(v56, v9, &qword_100710530);
        sub_10024AB60(v0, v9, v57, v58, v59, v60, v61, v62, v71[0], v71[1], v71[2], v71[3], v71[4], v71[5], v71[6], v71[7], v71[8], v71[9], v71[10],
          v71[11]);
        sub_1001F3A28(v9, &qword_100710530);
        sub_1001F3A28(v0, &qword_100710530);
      }
      goto LABEL_67;
    case 0xBuLL:
      sub_1002A7874();
      if (v63 != 11
        || ((*(void *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x10) | *(void *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x10)) & 0x8000000000000000) == 0)
      {
        goto LABEL_67;
      }
      __break(1u);
LABEL_46:
      sub_1002A7874();
      if (v64 == 12) {
LABEL_49:
      }
        sub_1002A7A34();
      goto LABEL_67;
    case 0xCuLL:
      goto LABEL_46;
    case 0xDuLL:
      sub_1002A7874();
      if (v65 == 13) {
        goto LABEL_49;
      }
      goto LABEL_67;
    case 0xEuLL:
      sub_1002A7874();
      if (v66 != 14) {
        goto LABEL_67;
      }
      sub_1002A78C0();
      sub_1001FE57C();
      sub_1002214FC();
      return;
    case 0xFuLL:
      long long v68 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      v80[0] = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v80[1] = v68;
      v81[0] = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
      *(_OWORD *)((char *)v81 + 9) = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFFFBLL) + 0x39);
      sub_10025406C((v4 & 0xFFFFFFFFFFFFFFBLL) + 80, (uint64_t)v78, &qword_10070FD88);
      sub_1002A7874();
      if (v69 != 15) {
        goto LABEL_67;
      }
      long long v70 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      v82[0] = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      v82[1] = v70;
      v83[0] = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
      *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFFFBLL) + 0x39);
      sub_10025406C((v2 & 0xFFFFFFFFFFFFFFBLL) + 80, (uint64_t)v77, &qword_10070FD88);
      if ((static IMAPServer.__derived_struct_equals(_:_:)((uint64_t)v80, (uint64_t)v82) & 1) == 0) {
        goto LABEL_67;
      }
      sub_10025406C((uint64_t)v78, (uint64_t)v76, &qword_10070FD88);
      if (sub_1002174E0((uint64_t)v76) == 1)
      {
        sub_10025406C((uint64_t)v77, (uint64_t)v74, &qword_10070FD88);
        if (sub_1002174E0((uint64_t)v74) == 1) {
          goto LABEL_67;
        }
        goto LABEL_65;
      }
      sub_10025406C((uint64_t)v77, (uint64_t)v73, &qword_10070FD88);
      if (sub_1002174E0((uint64_t)v73) == 1)
      {
LABEL_65:
        sub_10025406C((uint64_t)v78, (uint64_t)v74, &qword_10070FD88);
        sub_10025406C((uint64_t)v77, (uint64_t)&v75, &qword_10070FD88);
        sub_1002A75B0(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217A34);
        sub_1002A75B0(v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217A34);
        sub_100217C70((uint64_t)v74);
        goto LABEL_67;
      }
      sub_10025406C((uint64_t)v78, (uint64_t)v71, &qword_10070FD88);
      sub_100217504((uint64_t)v71, (uint64_t)v79);
      sub_10025406C((uint64_t)v77, (uint64_t)v72, &qword_10070FD88);
      sub_100217504((uint64_t)v72, (uint64_t)v74);
      sub_1002A75B0(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217A34);
      sub_1002A75B0(v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217A34);
      static URLCommand.__derived_enum_equals(_:_:)((uint64_t)v79, (uint64_t)v74);
      sub_1002A75B0(v77, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217184);
      sub_1002A75B0(v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100217184);
LABEL_67:
      sub_1001FE57C();
      return;
    case 0x10uLL:
      switch(__ROR8__(v4, 3) ^ 0x1000000000000000)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xALL:
        case 0xCLL:
        case 0xDLL:
        case 0xELL:
        case 0xFLL:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x14:
        case 0x16:
        case 0x18:
        case 0x19:
        case 0x1ALL:
        case 0x1CLL:
        case 0x1DLL:
        case 0x1ELL:
          sub_1002A784C();
          break;
        case 0xBLL:
        case 0x13:
        case 0x15:
        case 0x17:
        case 0x1BLL:
          sub_1002A7874();
          break;
        default:
          goto LABEL_61;
      }
      goto LABEL_67;
    default:
      sub_1002A7874();
      if (v18) {
        goto LABEL_67;
      }
      sub_1001FE57C();
      sub_100219898();
      return;
  }
}

Swift::Int ResponseTextCode.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002A7064()
{
  return ResponseTextCode.hashValue.getter();
}

void sub_1002A706C()
{
}

Swift::Int sub_1002A7074()
{
  return sub_1005E3470();
}

void sub_1002A70B8()
{
}

uint64_t static ResponseTextCode.modified(_:)(uint64_t a1)
{
  return sub_1002A7264(a1, &qword_1007108C0, &qword_10070FD90);
}

{
  return sub_1002A7264(a1, &qword_1007104C8, &qword_100710A00);
}

uint64_t sub_1002A70D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = sub_10000566C(a2);
  uint64_t v12 = sub_100224550(v11);
  __chkstk_darwin(v12);
  sub_1002244C0();
  uint64_t v13 = sub_10000566C(&qword_100710528);
  uint64_t v14 = sub_100224550(v13);
  __chkstk_darwin(v14);
  sub_100224A7C();
  uint64_t v15 = sub_10000566C(&qword_1007116F8);
  uint64_t v16 = sub_100224550(v15);
  __chkstk_darwin(v16);
  uint64_t v17 = sub_100254744();
  sub_1001F36E4(v17, v4, a2);
  sub_10000566C(&qword_100710538);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v6, v4);
  sub_10024E2B8(v6, v5);
  uint64_t v19 = sub_10000566C(&qword_100710520);
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v5, 1, v19);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1001F3A28(a1, a3);
    return sub_10025406C(v5, a4, &qword_100710520);
  }
  return result;
}

uint64_t sub_1002A7264(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = sub_10000566C(a2);
  uint64_t v8 = sub_100224550(v7);
  __chkstk_darwin(v8);
  sub_1002244A8();
  sub_10000566C(&qword_100710530);
  uint64_t v9 = swift_allocBox();
  uint64_t v11 = v10;
  sub_1001F36E4(a1, v3, a2);
  sub_1002A70D8(v3, a3, a2, v11);
  uint64_t v12 = sub_10000566C(&qword_100710520);
  storeEnumTagSinglePayload for ClientCommand(v11, 0, 1, v12);
  return v9 | 0x5000000000000000;
}

void sub_1002A7334(uint64_t a1)
{
  uint64_t v3 = sub_1002A7AF8();
  sub_100290BDC(v3, v4);
  if (v5)
  {
    uint64_t v6 = sub_1002A7AF8();
    sub_1002A789C(v6, v7);
  }
  sub_1002A7864();
  if (v9)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  *(_DWORD *)(v1 + 20) = v8;
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    swift_retain();
    sub_1002A73F0(v1, a1);
    uint64_t v11 = v10;
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (__OFADD__(v1, v11)) {
    goto LABEL_10;
  }
}

void sub_1002A73F0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = *(unsigned int *)(a1 + 20);
  sub_100210AD0(32, 0xE100000000000000, a1 + 8, v4);
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 32;
    v7._char object = (void *)0xE100000000000000;
    Swift::Int v5 = ByteBuffer._setStringSlowpath(_:at:)(v7, v4);
  }
  int v8 = *(_DWORD *)(a1 + 20);
  BOOL v9 = __CFADD__(v8, v5);
  int v10 = v8 + v5;
  if (v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 20) = v10;
  if (__OFADD__(v5, sub_1001EBE14(a2, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, a1)))
  {
LABEL_7:
    __break(1u);
  }
}

uint64_t ResponseTextCode.debugDescription.getter(unint64_t a1)
{
  sub_1002965F8(a1);
  return sub_100211A6C(a1);
}

uint64_t sub_1002A74E8()
{
  return ResponseTextCode.debugDescription.getter(*v0);
}

uint64_t sub_1002A74F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResponseCodeAppend();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A7554(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResponseCodeAppend();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1002A75B0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

unint64_t sub_1002A7628()
{
  unint64_t result = qword_1007116F0;
  if (!qword_1007116F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007116F0);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for ResponseTextCode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1002965F8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ResponseTextCode(unint64_t *a1)
{
  return sub_100212D10(*a1);
}

unint64_t *assignWithCopy for ResponseTextCode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1002965F8(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100212D10(v4);
  return a1;
}

unint64_t *assignWithTake for ResponseTextCode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100212D10(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseTextCode(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x70 && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 111;
    }
    else
    {
      unsigned int v2 = ((((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(void *)a1 & 3))) ^ 0x7F;
      if (v2 >= 0x6F) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ResponseTextCode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x6F)
  {
    *(void *)unint64_t result = a2 - 112;
    if (a3 >= 0x70) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x70) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1002A77C4(void *a1)
{
  unsigned int v1 = (*a1 >> 59) & 0x1E | (*a1 >> 2) & 1;
  if (v1 <= 0xF) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 16;
  }
}

void *sub_1002A77E8(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFBuLL;
  return result;
}

unint64_t *sub_1002A77FC(unint64_t *result, uint64_t a2)
{
  if (a2 < 0x10) {
    unint64_t v2 = (a2 << 59) & 0x7000000000000000 | (4 * (a2 & 1)) | *result & 0xFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v2 = (8 * (a2 - 16)) | 0x8000000000000000;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ResponseTextCode()
{
  return &type metadata for ResponseTextCode;
}

void sub_1002A7840(unint64_t *a1, uint64_t a2)
{
}

void sub_1002A7884(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100210AD0(a1, a2, a3, v3);
}

Swift::Int sub_1002A789C(uint64_t a1, uint64_t a2)
{
  return ByteBuffer._setStringSlowpath(_:at:)(*(Swift::String *)&a1, v2);
}

uint64_t sub_1002A78C0()
{
  return *(void *)((v0 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
}

uint64_t sub_1002A7900()
{
  return 0x4E454E414D524550;
}

uint64_t sub_1002A7924()
{
  return 0x5259434156495250;
}

uint64_t sub_1002A7948()
{
  return 0x4945474E55505845;
}

uint64_t sub_1002A796C()
{
  return 0x4D54534548474948;
}

uint64_t sub_1002A7990()
{
  return 0x4559444145524C41;
}

uint64_t sub_1002A79B4()
{
  return 0x54534958454E4F4ELL;
}

uint64_t sub_1002A79D4()
{
  return 0x4955514552444955;
}

uint64_t sub_1002A79F4()
{
  return 0x5453544F4E444955;
}

uint64_t sub_1002A7A14()
{
  return 0x44494C4156444955;
}

uint64_t sub_1002A7A44()
{
  return 0x41544341544E4F43;
}

uint64_t sub_1002A7A74()
{
  return 0x414C494156414E55;
}

uint64_t sub_1002A7A94()
{
  return 20302;
}

uint64_t sub_1002A7AA4()
{
  return 0x4445494649444F4DLL;
}

uint64_t sub_1002A7AC0()
{
  return 0x4C41525245464552;
}

uint64_t sub_1002A7ADC()
{
  return 0x4952572D44414552;
}

uint64_t sub_1002A7AF8()
{
  return 0x5352414843444142;
}

void sub_1002A7B20()
{
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0xE000000000000000;
}

uint64_t sub_1002A7B3C()
{
  return 0x544F55515245564FLL;
}

uint64_t sub_1002A7B54()
{
  return 0x4C4E4F2D44414552;
}

uint64_t sub_1002A7B6C()
{
  return v0;
}

uint64_t sub_1002A7B7C()
{
  return 0x5542544E45494C43;
}

uint64_t sub_1002A7B94()
{
  return 0x5542524556524553;
}

uint64_t sub_1002A7BAC()
{
  return 0x205458454E444955;
}

uint64_t sub_1002A7BC4()
{
  return 0x52545441455355;
}

uint64_t sub_1002A7BDC()
{
  return 0x5441455243595254;
}

uint64_t sub_1002A7BF4@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v1 + 20) = a1;
  return v2;
}

uint64_t sub_1002A7C04()
{
  return 0x4954505552524F43;
}

uint64_t sub_1002A7C34()
{
  return 0x44455249505845;
}

uint64_t sub_1002A7C64()
{
  return 0x204E4545534E55;
}

uint64_t sub_1002A7C7C()
{
  return 0x54494D494CLL;
}

uint64_t sub_1002A7C90()
{
  return 0x544F4E4E4143;
}

uint64_t sub_1002A7CA4(unsigned __int16 a1)
{
  return a1 | 0x514553444F4D0000;
}

uint64_t sub_1002A7CB8()
{
  return 0x4445534F4C43;
}

uint64_t sub_1002A7CCC(unsigned __int16 a1)
{
  return a1 | 0x4445564153540000;
}

uint64_t sub_1002A7CE0()
{
  return swift_projectBox();
}

uint64_t sub_1002A7D00()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002A7D20()
{
  return 0x4553554E49;
}

uint64_t sub_1002A7D34()
{
  return type metadata accessor for ResponseCodeAppend();
}

uint64_t sub_1002A7D54()
{
  return 0x4553524150;
}

uint64_t sub_1002A7D68()
{
  return swift_projectBox();
}

uint64_t sub_1002A7D80()
{
  return 0x5452454C41;
}

BOOL static TaggedResponse.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (sub_1005E3290() & 1) == 0) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  char v12 = *(unsigned char *)(a1 + 40);
  return static TaggedResponse.State.__derived_enum_equals(_:_:)(v5, v6, v7, v12, v8, v9, v10, v11);
}

uint64_t TaggedResponse.state.getter()
{
  return sub_1002381C4();
}

unint64_t TaggedResponse.state.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t result = sub_10029BF18(*(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(unsigned char *)(v4 + 40));
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(unsigned char *)(v4 + 40) = a4;
  return result;
}

uint64_t TaggedResponse.init(tag:state:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 40) = a6;
  return result;
}

unint64_t TaggedResponse.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 40);
  unint64_t v7 = sub_1002A845C();
  sub_10029C090(v7, v8, v9, v10);
  UntaggedStatus.hash(into:)(a1, v3, v4, v5, v6);
  unint64_t v11 = sub_1002A845C();
  return sub_10029BF18(v11, v12, v13, v14);
}

Swift::Int TaggedResponse.hashValue.getter()
{
  sub_1005E33F0();
  unint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  sub_1002A8430();
  UntaggedStatus.hash(into:)((uint64_t)v9, v2, v3, v1, v0);
  unint64_t v4 = sub_1002381C4();
  sub_10029BF18(v4, v5, v6, v7);
  return sub_1005E3470();
}

Swift::Int sub_1002A7FD0()
{
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 40);
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  sub_10029C090(v1, v2, v3, v4);
  UntaggedStatus.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  sub_10029BF18(v1, v2, v3, v4);
  return sub_1005E3470();
}

void sub_1002A8088(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::String v21 = *(Swift::String *)a1;
  Swift::String v20 = v21;
  sub_100057B18((uint64_t)&v21);
  v22._uint64_t countAndFlagsBits = 32;
  v22._char object = (void *)0xE100000000000000;
  sub_1005E1E30(v22);
  Swift::Int v4 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(v20._countAndFlagsBits, (unint64_t)v20._object, v1 + 8, v4);
  Swift::Int v6 = v5;
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8) {
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v20, v4);
  }
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(v1 + 20);
  BOOL v10 = __CFADD__(v9, v6);
  int v11 = v9 + v6;
  if (v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_DWORD *)(v1 + 20) = v11;
  sub_1002A86A0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  Swift::Int v13 = v6 + v12;
  if (__OFADD__(v6, v12))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Swift::Int v14 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(2573, 0xE200000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v16)
  {
    v17._uint64_t countAndFlagsBits = 2573;
    v17._char object = (void *)0xE200000000000000;
    Swift::Int v15 = ByteBuffer._setStringSlowpath(_:at:)(v17, v14);
  }
  int v18 = *(_DWORD *)(v2 + 20);
  BOOL v10 = __CFADD__(v18, v15);
  int v19 = v18 + v15;
  if (v10) {
    goto LABEL_12;
  }
  *(_DWORD *)(v2 + 20) = v19;
  if (__OFADD__(v13, v15)) {
LABEL_13:
  }
    __break(1u);
}

unint64_t sub_1002A81DC()
{
  unint64_t result = qword_100711700;
  if (!qword_100711700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711700);
  }
  return result;
}

unint64_t destroy for TaggedResponse(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 40);
  return sub_10029BF18(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for TaggedResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_10029C090(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for TaggedResponse(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  sub_10029C090(v4, v5, v6, v2);
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  sub_10029BF18(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for TaggedResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TaggedResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  sub_10029BF18(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TaggedResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for TaggedResponse()
{
  return &type metadata for TaggedResponse;
}

unint64_t sub_1002A8430()
{
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  unsigned __int8 v5 = *(unsigned char *)(v0 + 40);
  return sub_10029C090(v2, v3, v4, v5);
}

uint64_t sub_1002A845C()
{
  return v0;
}

BOOL static TaggedResponse.State.__derived_enum_equals(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (!a4)
  {
    if (a8) {
      return 0;
    }
    sub_1002A8D34();
    if (v21)
    {
      if (v18 != v17) {
        return 0;
      }
      sub_1002A8EAC();
      sub_1002A8E0C();
    }
    else
    {
      if (v18 == v17) {
        return 0;
      }
      sub_1002A8EAC();
      sub_1002A8E0C();
      sub_1002A8C5C();
      sub_1002A8DA0();
      if ((v8 & 1) == 0)
      {
        sub_1002A8DEC();
        sub_1002A8CDC();
        goto LABEL_50;
      }
    }
    if (a2 != a6 || a3 != a7)
    {
      char v25 = sub_1002A8CB8();
      sub_1002A8DEC();
      sub_1002A8CDC();
LABEL_40:
      sub_10029BF18(v26, v27, v28, v29);
      return (v25 & 1) != 0;
    }
    sub_1002A8CDC();
    sub_10029BF18(v39, v40, v41, v42);
    sub_1002A8CDC();
LABEL_45:
    sub_10029BF18(v35, v36, v37, v38);
    return 1;
  }
  if (a4 != 1)
  {
    if (a8 != 2) {
      return 0;
    }
    sub_1002A8D34();
    if (v21)
    {
      if (v20 != v19) {
        return 0;
      }
      sub_1002A8EEC();
      sub_1002A8E8C();
      goto LABEL_28;
    }
    if (v20 == v19) {
      return 0;
    }
    sub_1002A8EEC();
    sub_1002A8E8C();
    sub_1002A8C5C();
    sub_1002A8DA0();
    if (v8)
    {
LABEL_28:
      if (a2 != a6 || a3 != a7)
      {
        char v25 = sub_1002A8CB8();
        sub_1002A8E6C();
        sub_1002A8CEC();
        goto LABEL_40;
      }
      sub_1002A8CEC();
      sub_10029BF18(v31, v32, v33, v34);
      sub_1002A8CEC();
      goto LABEL_45;
    }
    sub_1002A8E6C();
    sub_1002A8CEC();
LABEL_50:
    sub_10029BF18(v43, v44, v45, v46);
    return 0;
  }
  if (a8 != 1) {
    return 0;
  }
  sub_1002A8D34();
  if (!v21)
  {
    if (v16 != v15)
    {
      sub_1002A8ECC();
      sub_1002A8E4C();
      sub_1002A8C5C();
      sub_1002A8DA0();
      if (v8) {
        goto LABEL_20;
      }
      sub_1002A8E2C();
      unint64_t v43 = a1;
      uint64_t v44 = a2;
      uint64_t v45 = a3;
      unsigned __int8 v46 = 1;
      goto LABEL_50;
    }
    return 0;
  }
  if (v16 != v15) {
    return 0;
  }
  sub_1002A8ECC();
  sub_1002A8E4C();
LABEL_20:
  BOOL v21 = a2 == a6 && a3 == a7;
  if (!v21)
  {
    char v22 = sub_1002A8CB8();
    uint64_t v23 = 1;
    sub_1002A8E2C();
    sub_1002A8DD0(a1);
    if (v22) {
      return v23;
    }
    return 0;
  }
  uint64_t v23 = 1;
  sub_1002A8DD0(a5);
  sub_1002A8DD0(a1);
  return v23;
}

void sub_1002A86A0(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 2116431;
    sub_1002A8D84();
    sub_1002965E4(a1);
    sub_1002A8CFC(2117454, 0xE300000000000000);
    if (v8)
    {
      v9._uint64_t countAndFlagsBits = 2117454;
      v9._char object = (void *)0xE300000000000000;
      ByteBuffer._setStringSlowpath(_:at:)(v9, v6);
    }
    sub_1002A8D74();
    if (v11)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    sub_1002A8C94(v10);
    sub_1002A8D44();
    if (!__OFADD__(2116431, v4)) {
      return;
    }
    __break(1u);
  }
  sub_1002A8D84();
  sub_1002965E4(a1);
  sub_1002A8CFC(2116431, 0xE300000000000000);
  if (v12)
  {
    v13._uint64_t countAndFlagsBits = 2116431;
    v13._char object = (void *)0xE300000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v13, v6);
  }
  sub_1002A8D74();
  if (v11) {
    goto LABEL_21;
  }
  sub_1002A8C94(v14);
  sub_1002A8D44();
  if (!__OFADD__(v5, v4)) {
    return;
  }
  __break(1u);
LABEL_15:
  sub_1002A8D84();
  sub_1002965E4(a1);
  sub_1002A8CFC(541344066, 0xE400000000000000);
  if (v15)
  {
    v16._uint64_t countAndFlagsBits = 541344066;
    v16._char object = (void *)0xE400000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v16, v6);
  }
  sub_1002A8D74();
  if (v11) {
    goto LABEL_22;
  }
  sub_1002A8C94(v17);
  sub_1002A8D44();
  if (__OFADD__(v5, v4)) {
LABEL_23:
  }
    __break(1u);
}

unint64_t sub_1002A87FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = sub_1005E1CB0();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  BOOL v7 = v4 == 27503 && v6 == 0xE200000000000000;
  if (v7
    || (sub_1002A8D18() & 1) != 0
    || (v4 == 28526 ? (BOOL v9 = v6 == 0xE200000000000000) : (BOOL v9 = 0), v9 || (sub_1002A8D18() & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else if (v4 == 6578530 && v6 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = sub_1002A8D18();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      sub_100212D94(a3);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return a3;
}

uint64_t UntaggedStatus.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  sub_1005E3410(a5);
  sub_1002965E4(a2);
  swift_bridgeObjectRetain();
  ResponseText.hash(into:)(a1, a2);
  sub_100212D94(a2);
  return swift_bridgeObjectRelease();
}

Swift::Int UntaggedStatus.hashValue.getter(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  sub_1005E33F0();
  UntaggedStatus.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return sub_1005E3470();
}

Swift::Int sub_1002A8A1C()
{
  return UntaggedStatus.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1002A8A2C(uint64_t a1)
{
  return UntaggedStatus.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

Swift::Int sub_1002A8A3C()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 24);
  sub_1005E33F0();
  UntaggedStatus.hash(into:)((uint64_t)v6, v1, v2, v3, v4);
  return sub_1005E3470();
}

unint64_t sub_1002A8AA0()
{
  unint64_t result = qword_100711708;
  if (!qword_100711708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711708);
  }
  return result;
}

BOOL sub_1002A8AEC(uint64_t a1, uint64_t a2)
{
  return static TaggedResponse.State.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

unint64_t _s5StateOwxx(uint64_t a1)
{
  return sub_10029BF18(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t _s5StateOwcp(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10029C090(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t _s5StateOwca(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10029C090(*(void *)a2, v4, v5, v6);
  unint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10029BF18(v7, v8, v9, v10);
  return a1;
}

uint64_t _s5StateOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10029BF18(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_1002A8C44(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TaggedResponse.State()
{
  return &type metadata for TaggedResponse.State;
}

void sub_1002A8C5C()
{
  sub_1002965E4(v1);
  sub_1002965E4(v0);
  static ResponseTextCode.__derived_enum_equals(_:_:)();
}

uint64_t sub_1002A8C94@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v3 + 20) = a1;
  return sub_1002A4994(v2, v4, v1);
}

uint64_t sub_1002A8CB8()
{
  return sub_1005E3290();
}

void sub_1002A8CFC(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_1002A8D18()
{
  return sub_1005E3290();
}

uint64_t sub_1002A8D44()
{
  sub_100212D94(v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A8D84()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_1002A8DA0()
{
  sub_100212D94(v1);
  return sub_100212D94(v0);
}

unint64_t sub_1002A8DD0(unint64_t a1)
{
  return sub_10029BF18(a1, v2, v1, 1u);
}

unint64_t sub_1002A8DEC()
{
  return sub_10029BF18(v1, v2, v0, 0);
}

unint64_t sub_1002A8E0C()
{
  return sub_10029C090(v1, v2, v0, 0);
}

unint64_t sub_1002A8E2C()
{
  return sub_10029BF18(v1, v2, v0, 1u);
}

unint64_t sub_1002A8E4C()
{
  return sub_10029C090(v1, v2, v0, 1u);
}

unint64_t sub_1002A8E6C()
{
  return sub_10029BF18(v1, v2, v0, 2u);
}

unint64_t sub_1002A8E8C()
{
  return sub_10029C090(v1, v2, v0, 2u);
}

unint64_t sub_1002A8EAC()
{
  return sub_10029C090(v2, v1, v0, 0);
}

unint64_t sub_1002A8ECC()
{
  return sub_10029C090(v2, v1, v0, 1u);
}

unint64_t sub_1002A8EEC()
{
  return sub_10029C090(v2, v1, v0, 2u);
}

uint64_t sub_1002A8F0C(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_14;
    case 3:
      goto LABEL_20;
    case 4:
      goto LABEL_26;
    default:
      sub_1002A8D84();
      sub_1002965E4(a1);
      sub_1002A8CFC(2116431, 0xE300000000000000);
      if (v8)
      {
        v9._uint64_t countAndFlagsBits = 2116431;
        v9._char object = (void *)0xE300000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v9, v6);
      }
      sub_1002A8D74();
      if (v11)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      sub_1002A8C94(v10);
      sub_1002A8D44();
      uint64_t result = v5 + v4;
      if (!__OFADD__(v5, v4)) {
        return result;
      }
      __break(1u);
LABEL_8:
      uint64_t v5 = 2116431;
      sub_1002A8D84();
      sub_1002965E4(a1);
      sub_1002A8CFC(2117454, 0xE300000000000000);
      if (v13)
      {
        v14._uint64_t countAndFlagsBits = 2117454;
        v14._char object = (void *)0xE300000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v14, v6);
      }
      sub_1002A8D74();
      if (v11) {
        goto LABEL_32;
      }
      sub_1002A8C94(v15);
      sub_1002A8D44();
      uint64_t result = v4 + 2116431;
      if (!__OFADD__(2116431, v4)) {
        return result;
      }
      __break(1u);
LABEL_14:
      sub_1002A8D84();
      sub_1002965E4(a1);
      sub_1002A8CFC(541344066, 0xE400000000000000);
      if (v16)
      {
        v17._uint64_t countAndFlagsBits = 541344066;
        v17._char object = (void *)0xE400000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v17, v6);
      }
      sub_1002A8D74();
      if (v11) {
        goto LABEL_33;
      }
      sub_1002A8C94(v18);
      sub_1002A8D44();
      uint64_t result = v5 + v4;
      if (!__OFADD__(v5, v4)) {
        return result;
      }
      __break(1u);
LABEL_20:
      sub_1002A8D84();
      sub_1002965E4(a1);
      uint64_t v19 = sub_1002A9960();
      sub_1002A8CFC(v19, v20);
      if (v21)
      {
        v22._uint64_t countAndFlagsBits = sub_1002A9960();
        ByteBuffer._setStringSlowpath(_:at:)(v22, v6);
      }
      sub_1002A8D74();
      if (v11) {
        goto LABEL_34;
      }
      sub_1002A8C94(v23);
      sub_1002A8D44();
      uint64_t result = v5 + v4;
      if (!__OFADD__(v5, v4)) {
        return result;
      }
      __break(1u);
LABEL_26:
      sub_1002A8D84();
      sub_1002965E4(a1);
      sub_1002A8CFC(541415746, 0xE400000000000000);
      if (v24)
      {
        v25._uint64_t countAndFlagsBits = 541415746;
        v25._char object = (void *)0xE400000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v25, v6);
      }
      sub_1002A8D74();
      if (v11) {
        goto LABEL_35;
      }
      sub_1002A8C94(v26);
      sub_1002A8D44();
      uint64_t result = v5 + v4;
      if (__OFADD__(v5, v4))
      {
LABEL_36:
        __break(1u);
        JUMPOUT(0x1002A9114);
      }
      return result;
  }
}

uint64_t static UntaggedStatus.__derived_enum_equals(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a4)
  {
    case 1:
      if (a8 != 1) {
        return 0;
      }
      sub_1002A8D34();
      if (v25)
      {
        if (v18 != v17) {
          return 0;
        }
        sub_1002A9AB8();
        sub_1002A99F8();
      }
      else
      {
        if (v18 == v17) {
          return 0;
        }
        sub_1002A9AB8();
        sub_1002A99F8();
        sub_1002A8C5C();
        sub_1002A8DA0();
        if ((v8 & 1) == 0)
        {
          sub_1002A9A18();
          unint64_t v67 = a1;
          uint64_t v68 = a2;
          uint64_t v69 = a3;
          unsigned __int8 v70 = 1;
          goto LABEL_77;
        }
      }
      BOOL v25 = a2 == a6 && a3 == a7;
      if (v25)
      {
        uint64_t v27 = 1;
        unint64_t v48 = sub_1001F435C();
        sub_10029CFCC(v48, v49, v50, 1u);
        sub_1002A9AD8();
      }
      else
      {
        char v26 = sub_1002A8CB8();
        uint64_t v27 = 1;
        sub_1002A9A18();
        sub_1002A9AD8();
        if ((v26 & 1) == 0) {
          return 0;
        }
      }
      return v27;
    case 2:
      if (a8 != 2) {
        return 0;
      }
      sub_1002A8D34();
      if (v25)
      {
        if (v20 != v19) {
          return 0;
        }
        sub_1002A9A98();
        sub_1002A99D8();
      }
      else
      {
        if (v20 == v19) {
          return 0;
        }
        sub_1002A9A98();
        sub_1002A99D8();
        sub_1002A8C5C();
        sub_1002A8DA0();
        if ((v8 & 1) == 0)
        {
          sub_10029CFCC(a5, a6, a7, 2u);
          sub_1002A8CEC();
          goto LABEL_77;
        }
      }
      if (a2 != a6 || a3 != a7)
      {
        sub_1002A8CB8();
        unint64_t v29 = sub_1002A992C();
        sub_10029CFCC(v29, v30, v31, 2u);
        sub_1002A8CEC();
        goto LABEL_63;
      }
      unint64_t v51 = sub_1001F435C();
      sub_10029CFCC(v51, v52, v53, 2u);
      sub_1002A8CEC();
      goto LABEL_70;
    case 3:
      if (a8 != 3) {
        return 0;
      }
      sub_1002A8D34();
      if (v25)
      {
        if (v22 != v21) {
          return 0;
        }
        sub_1002A9A78();
        sub_1002A99B8();
      }
      else
      {
        if (v22 == v21) {
          return 0;
        }
        sub_1002A9A78();
        sub_1002A99B8();
        sub_1002A8C5C();
        sub_1002A8DA0();
        if ((v8 & 1) == 0)
        {
          sub_10029CFCC(a5, a6, a7, 3u);
          sub_1002A9950();
          goto LABEL_77;
        }
      }
      if (a2 != a6 || a3 != a7)
      {
        sub_1002A8CB8();
        unint64_t v37 = sub_1002A992C();
        sub_10029CFCC(v37, v38, v39, 3u);
        sub_1002A9950();
        goto LABEL_63;
      }
      unint64_t v58 = sub_1001F435C();
      sub_10029CFCC(v58, v59, v60, 3u);
      sub_1002A9950();
      goto LABEL_70;
    case 4:
      if (a8 != 4) {
        return 0;
      }
      sub_1002A8D34();
      if (v25)
      {
        if (v24 != v23) {
          return 0;
        }
        sub_1002A9A58();
        sub_1002A9998();
      }
      else
      {
        if (v24 == v23) {
          return 0;
        }
        sub_1002A9A58();
        sub_1002A9998();
        sub_1002A8C5C();
        sub_1002A8DA0();
        if ((v8 & 1) == 0)
        {
          sub_10029CFCC(a5, a6, a7, 4u);
          sub_1002A9940();
          goto LABEL_77;
        }
      }
      if (a2 != a6 || a3 != a7)
      {
        sub_1002A8CB8();
        unint64_t v41 = sub_1002A992C();
        sub_10029CFCC(v41, v42, v43, 4u);
        sub_1002A9940();
        goto LABEL_63;
      }
      unint64_t v61 = sub_1001F435C();
      sub_10029CFCC(v61, v62, v63, 4u);
      sub_1002A9940();
      goto LABEL_70;
    default:
      if (a8) {
        return 0;
      }
      sub_1002A8D34();
      if (v25)
      {
        if (v16 == v15)
        {
          sub_1002A9A38();
          sub_1002A9978();
          goto LABEL_58;
        }
      }
      else if (v16 != v15)
      {
        sub_1002A9A38();
        sub_1002A9978();
        sub_1002A8C5C();
        sub_1002A8DA0();
        if ((v8 & 1) == 0)
        {
          sub_10029CFCC(a5, a6, a7, 0);
          sub_1002A8CDC();
LABEL_77:
          sub_10029CFCC(v67, v68, v69, v70);
          return 0;
        }
LABEL_58:
        if (a2 == a6 && a3 == a7)
        {
          unint64_t v64 = sub_1001F435C();
          sub_10029CFCC(v64, v65, v66, 0);
          sub_1002A8CDC();
LABEL_70:
          sub_10029CFCC(v54, v55, v56, v57);
        }
        else
        {
          sub_1002A8CB8();
          unint64_t v45 = sub_1002A992C();
          sub_10029CFCC(v45, v46, v47, 0);
          sub_1002A8CDC();
LABEL_63:
          sub_10029CFCC(v32, v33, v34, v35);
          if ((v8 & 1) == 0) {
            return 0;
          }
        }
        return 1;
      }
      return 0;
  }
}

unint64_t sub_1002A94EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = sub_1005E1CB0();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  BOOL v7 = v4 == 27503 && v6 == 0xE200000000000000;
  if (v7
    || (sub_1002A9914() & 1) != 0
    || (v4 == 28526 ? (BOOL v9 = v6 == 0xE200000000000000) : (BOOL v9 = 0),
        v9
     || (sub_1002A9914() & 1) != 0
     || (v4 == 6578530 ? (BOOL v10 = v6 == 0xE300000000000000) : (BOOL v10 = 0),
         v10
      || (sub_1002A9914() & 1) != 0
      || (v4 == 0x68747561657270 ? (BOOL v11 = v6 == 0xE700000000000000) : (BOOL v11 = 0), v11 || (sub_1002A9914() & 1) != 0))))
  {
    swift_bridgeObjectRelease();
  }
  else if (v4 == 6650210 && v6 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = sub_1002A9914();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      sub_100212D94(a3);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return a3;
}

unint64_t sub_1002A96D8()
{
  unint64_t result = qword_100711710;
  if (!qword_100711710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711710);
  }
  return result;
}

uint64_t sub_1002A9724(uint64_t a1, uint64_t a2)
{
  return static UntaggedStatus.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

unint64_t destroy for UntaggedStatus(uint64_t a1)
{
  return sub_10029CFCC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for UntaggedStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10029CBFC(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for UntaggedStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_10029CBFC(*(void *)a2, v4, v5, v6);
  unint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10029CFCC(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for UntaggedStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10029CFCC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UntaggedStatus(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UntaggedStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UntaggedStatus()
{
  return &type metadata for UntaggedStatus;
}

uint64_t sub_1002A9914()
{
  return sub_1005E3290();
}

uint64_t sub_1002A992C()
{
  return v0;
}

uint64_t sub_1002A9960()
{
  return 0x2048545541455250;
}

unint64_t sub_1002A9978()
{
  return sub_10029CBFC(v1, v2, v0, 0);
}

unint64_t sub_1002A9998()
{
  return sub_10029CBFC(v1, v2, v0, 4u);
}

unint64_t sub_1002A99B8()
{
  return sub_10029CBFC(v1, v2, v0, 3u);
}

unint64_t sub_1002A99D8()
{
  return sub_10029CBFC(v1, v2, v0, 2u);
}

unint64_t sub_1002A99F8()
{
  return sub_10029CBFC(v1, v2, v0, 1u);
}

unint64_t sub_1002A9A18()
{
  return sub_10029CFCC(v1, v2, v0, 1u);
}

unint64_t sub_1002A9A38()
{
  return sub_10029CBFC(v2, v1, v0, 0);
}

unint64_t sub_1002A9A58()
{
  return sub_10029CBFC(v2, v1, v0, 4u);
}

unint64_t sub_1002A9A78()
{
  return sub_10029CBFC(v2, v1, v0, 3u);
}

unint64_t sub_1002A9A98()
{
  return sub_10029CBFC(v2, v1, v0, 2u);
}

unint64_t sub_1002A9AB8()
{
  return sub_10029CBFC(v2, v1, v0, 1u);
}

unint64_t sub_1002A9AD8()
{
  return sub_10029CFCC(v2, v1, v0, 1u);
}

void ReturnOption.hash(into:)(uint64_t a1)
{
  unint64_t v2 = v1;
  sub_10027B4F8(v2, &v20);
  uint64_t v4 = v21;
  uint64_t v5 = v22;
  unint64_t v19 = v23;
  sub_10027B4F8(v2, v24);
  uint64_t v6 = *(void *)&v24[0];
  if ((unint64_t)v25 >> 62)
  {
    if ((unint64_t)v25 >> 62 == 1)
    {
      *(void *)&long long v25 = v25 & 0x3FFFFFFFFFFFFFFFLL;
      v27[0] = v24[0];
      v27[1] = v24[1];
      long long v28 = v25;
      long long v29 = v26;
      sub_1005E3410(3uLL);
      sub_1002676E0((uint64_t)v27, (uint64_t)v30);
      sub_1002676E0((uint64_t)v30, (uint64_t)&v31);
      if (v32)
      {
        sub_1005E3410(1uLL);
        sub_1002AA498();
        sub_1001F3404(v4, v5, v19);
        sub_1005E1DB0();
      }
      else
      {
        sub_1005E3410(0);
        sub_1002AA498();
        sub_1001F3404(v4, v5, v19);
      }
      sub_1005E1DB0();
      unint64_t v15 = *((void *)&v29 + 1);
      if (HIBYTE(*((void *)&v29 + 1)) == 255)
      {
        sub_1005E3420(0);
      }
      else
      {
        uint64_t v18 = *((void *)&v28 + 1);
        uint64_t v17 = v29;
        sub_1005E3420(1u);
        if ((v15 & 0x100000000000000) != 0)
        {
          sub_1005E3410(1uLL);
          swift_bridgeObjectRetain();
          sub_100228B20(a1, v18);
          sub_1001F34D0(v18, v17, v15);
        }
        else
        {
          sub_1005E3410(0);
          swift_beginAccess();
          sub_1005E3400();
        }
      }
      sub_1002AA120(v2, (void (*)(void, void, void, void, void, void, void, void))sub_1001F34E8);
    }
    else
    {
      sub_1002AA480();
      uint64_t v13 = v10 | v11 | v12;
      if (v7 != 0x8000000000000000 || v9 | v6 | v8 | v13)
      {
        BOOL v16 = v7 == 0x8000000000000000 && v6 == 1;
        if (!v16 || v9 | v8 | v13) {
          Swift::UInt v14 = 4;
        }
        else {
          Swift::UInt v14 = 1;
        }
      }
      else
      {
        Swift::UInt v14 = 0;
      }
      sub_1005E3410(v14);
    }
  }
  else
  {
    *(void *)&long long v25 = v25 & 0x3FFFFFFFFFFFFFFFLL;
    sub_1005E3410(2uLL);
    sub_100228898(a1, v6);
  }
}

uint64_t static ReturnOption.__derived_enum_equals(_:_:)(long long *a1, long long *a2)
{
  sub_10027B4F8(a1, v29);
  uint64_t v4 = *(void *)&v29[0];
  if (!((unint64_t)v30 >> 62))
  {
    *(void *)&long long v30 = v30 & 0x3FFFFFFFFFFFFFFFLL;
    sub_10027B4F8(a2, &v32);
    if (!(*(void *)v34 >> 62))
    {
      char v5 = sub_10021CE30(v4, v32);
      return v5 & 1;
    }
    goto LABEL_40;
  }
  if ((unint64_t)v30 >> 62 != 1)
  {
    sub_1002AA480();
    uint64_t v12 = v9 | v10 | v11;
    BOOL v13 = v6 == 0x8000000000000000 && (v8 | v4 | v7 | v12) == 0;
    if (v13)
    {
      sub_1002AA458();
      if (!v13) {
        goto LABEL_40;
      }
      if (v18 != 0x8000000000000000) {
        goto LABEL_40;
      }
      int8x16_t v19 = vorrq_s8(*(int8x16_t *)&v34[8], v33);
      int8x16_t v20 = vextq_s8(v19, v19, 8uLL);
      if (*(void *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | *(void *)&v34[24] | *((void *)&v32 + 1) | (unint64_t)v32) {
        goto LABEL_40;
      }
LABEL_39:
      char v5 = 1;
      return v5 & 1;
    }
    BOOL v14 = v6 == 0x8000000000000000 && v4 == 1;
    if (!v14 || v8 | v7 | v12)
    {
      sub_1002AA458();
      if (!v13) {
        goto LABEL_40;
      }
      sub_1002AA4BC();
      if (v22) {
        goto LABEL_40;
      }
      if (v21 != 0x8000000000000000 || (void)v32 != 2) {
        goto LABEL_40;
      }
    }
    else
    {
      sub_1002AA458();
      if (!v13) {
        goto LABEL_40;
      }
      sub_1002AA4BC();
      if (v16) {
        goto LABEL_40;
      }
      if (v15 != 0x8000000000000000 || (void)v32 != 1) {
        goto LABEL_40;
      }
    }
    if (!(v33.i64[0] | v33.i64[1] | *((void *)&v32 + 1))) {
      goto LABEL_39;
    }
LABEL_40:
    char v5 = 0;
    return v5 & 1;
  }
  *(void *)&long long v30 = v30 & 0x3FFFFFFFFFFFFFFFLL;
  long long v32 = v29[0];
  int8x16_t v33 = (int8x16_t)v29[1];
  *(_OWORD *)uint64_t v34 = v30;
  *(_OWORD *)&v34[16] = v31;
  sub_10027B4F8(a2, v25);
  if ((unint64_t)v26 >> 62 != 1) {
    goto LABEL_40;
  }
  *(void *)&long long v26 = v26 & 0x3FFFFFFFFFFFFFFFLL;
  v28[0] = v25[0];
  v28[1] = v25[1];
  v28[2] = v26;
  v28[3] = v27;
  sub_1002AA120(a1, (void (*)(void, void, void, void, void, void, void, void))sub_1001F3560);
  sub_1002AA120(a2, (void (*)(void, void, void, void, void, void, void, void))sub_1001F3560);
  char v5 = sub_100266050(&v32, v28);
  sub_1002AA120(a2, (void (*)(void, void, void, void, void, void, void, void))sub_1001F34E8);
  sub_1002AA120(a1, (void (*)(void, void, void, void, void, void, void, void))sub_1001F34E8);
  return v5 & 1;
}

Swift::Int ReturnOption.hashValue.getter()
{
  sub_1005E33F0();
  ReturnOption.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002AA008()
{
  sub_10027B4F8(v0, v2);
  return ReturnOption.hashValue.getter();
}

void sub_1002AA040(uint64_t a1)
{
  sub_10027B4F8(v1, v3);
  ReturnOption.hash(into:)(a1);
}

Swift::Int sub_1002AA080()
{
  sub_10027B4F8(v0, v3);
  sub_1005E33F0();
  ReturnOption.hash(into:)((uint64_t)v2);
  return sub_1005E3470();
}

uint64_t sub_1002AA0D4(long long *a1, long long *a2)
{
  sub_10027B4F8(a1, v4);
  sub_10027B4F8(a2, v5);
  return static ReturnOption.__derived_enum_equals(_:_:)(v4, v5) & 1;
}

void *sub_1002AA120(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

unint64_t sub_1002AA168()
{
  unint64_t result = qword_100711718;
  if (!qword_100711718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711718);
  }
  return result;
}

uint64_t destroy for ReturnOption(uint64_t a1)
{
  return sub_1001F34E8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

uint64_t *initializeWithCopy for ReturnOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  sub_1001F3560(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for ReturnOption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  sub_1001F3560(*a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  unint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  uint64_t v17 = a1[6];
  unint64_t v18 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  sub_1001F34E8(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t *assignWithTake for ReturnOption(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  unint64_t v10 = a1[7];
  long long v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v11;
  long long v12 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v12;
  sub_1001F34E8(v3, v5, v4, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReturnOption(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 32) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ReturnOption(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 2 * -a2;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1002AA3E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1002AA404(uint64_t result)
{
  *(void *)(result + 32) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1002AA414(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[4] = result[4] & 1 | (a2 << 62);
  }
  else
  {
    *double result = (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = 0x8000000000000000;
    result[5] = 0;
    result[6] = 0;
    result[7] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReturnOption()
{
  return &type metadata for ReturnOption;
}

_OWORD *sub_1002AA458()
{
  return sub_10027B4F8(v0, (_OWORD *)(v1 - 112));
}

uint64_t sub_1002AA498()
{
  return sub_1001F33C4(v4, v3, v2, v1, v0 & 1);
}

uint64_t RumpAuthenticatedURL.authenticatedURLRump.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10022D090(v1 + 136, a1);
}

uint64_t RumpAuthenticatedURL.authenticatedURLRump.setter(uint64_t a1)
{
  return sub_10022D0F4(a1, v1 + 136);
}

__n128 RumpAuthenticatedURL.init(authenticatedURL:authenticatedURLRump:)@<Q0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  char v7 = *(unsigned char *)(a2 + 57);
  char v8 = *(unsigned char *)(a2 + 80);
  memcpy((void *)a3, __src, 0x82uLL);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 136) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 152) = v9;
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(a2 + 32);
  *(void *)(a3 + 184) = v5;
  *(unsigned char *)(a3 + 192) = v6;
  *(unsigned char *)(a3 + 193) = v7 & 1;
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a3 + 200) = result;
  *(unsigned char *)(a3 + 216) = v8;
  return result;
}

uint64_t RumpAuthenticatedURL.hash(into:)(uint64_t a1)
{
  memcpy(__dst, v1, 0x82uLL);
  long long v3 = v1[1];
  v11[0] = *v1;
  v11[1] = v3;
  v12[0] = v1[2];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v1 + 41);
  sub_100274744(__dst);
  sub_1002747F4((uint64_t *)v11);
  IMAPServer.hash(into:)(a1);
  sub_100274834((uint64_t *)v11);
  memcpy(v10, &__dst[8], 0x42uLL);
  sub_1002748C4((uint64_t)v10);
  MessagePath.hash(into:)();
  sub_1002748FC((uint64_t)v10);
  sub_100274934(__dst);
  memcpy(v7, (char *)v1 + 136, sizeof(v7));
  if (v7[57] == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    _OWORD v12[2] = *(_OWORD *)v7;
    v12[3] = *(_OWORD *)&v7[16];
    v12[4] = *(_OWORD *)&v7[32];
    uint64_t v13 = *(void *)&v7[48];
    char v14 = v7[56] & 1;
    sub_1005E3420(1u);
    Expire.hash(into:)();
  }
  sub_10022D53C((__n128 *)&v7[64], &v8);
  sub_10022D53C(&v8, &v15);
  if (!v16)
  {
    Swift::UInt v4 = 0;
    goto LABEL_8;
  }
  if (v16 == 1)
  {
    Swift::UInt v4 = 1;
LABEL_8:
    sub_1005E3410(v4);
    sub_10022D5CC((uint64_t)v7);
    sub_1005E1DB0();
    return sub_10022D598((uint64_t)v7);
  }
  if (*(_OWORD *)&v15 == 0) {
    Swift::UInt v5 = 2;
  }
  else {
    Swift::UInt v5 = 3;
  }
  sub_1005E3410(v5);
  return sub_10022D598((uint64_t)v7);
}

BOOL static RumpAuthenticatedURL.__derived_struct_equals(_:_:)(char *__src, _OWORD *a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v10, a2, sizeof(v10));
  long long v4 = *((_OWORD *)__src + 1);
  v16[0] = *(_OWORD *)__src;
  v16[1] = v4;
  v17[0] = *((_OWORD *)__src + 2);
  *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)(__src + 41);
  long long v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  v13[0] = a2[2];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)a2 + 41);
  if ((static IMAPServer.__derived_struct_equals(_:_:)((uint64_t)v16, (uint64_t)v12) & 1) != 0
    && (memcpy(v15, &__dst[64], 0x42uLL),
        memcpy(v11, &v10[64], 0x42uLL),
        (static MessagePath.__derived_struct_equals(_:_:)((uint64_t)v15, (uint64_t)v11) & 1) != 0))
  {
    memcpy(v9, __src + 136, 0x51uLL);
    memcpy(v8, (char *)a2 + 136, 0x51uLL);
    return static AuthenticatedURLRump.__derived_struct_equals(_:_:)((uint64_t)v9, (uint64_t)v8);
  }
  else
  {
    return 0;
  }
}

Swift::Int RumpAuthenticatedURL.hashValue.getter()
{
  sub_1005E33F0();
  RumpAuthenticatedURL.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002AA884()
{
  sub_1005E33F0();
  RumpAuthenticatedURL.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

unint64_t sub_1002AA8C4()
{
  unint64_t result = qword_100711720;
  if (!qword_100711720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711720);
  }
  return result;
}

uint64_t destroy for RumpAuthenticatedURL(uint64_t a1)
{
  if (*(void *)(a1 + 8) != 1)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 24) != 1) {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v3 = *(void *)(a1 + 208);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 216);
  return sub_1002173AC(v2, v3, v4);
}

uint64_t initializeWithCopy for RumpAuthenticatedURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    char v6 = (_OWORD *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *v6;
    }
    else
    {
      *(void *)(a1 + 16) = *(void *)v6;
      *(void *)(a1 + 24) = v7;
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 200);
  uint64_t v12 = *(void *)(a2 + 208);
  unsigned __int8 v13 = *(unsigned char *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100217C58(v11, v12, v13);
  *(void *)(a1 + 200) = v11;
  *(void *)(a1 + 208) = v12;
  *(unsigned char *)(a1 + 216) = v13;
  return a1;
}

uint64_t assignWithCopy for RumpAuthenticatedURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v4 == 1)
    {
      sub_100274F10(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_15;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(void *)(a1 + 24) == 1)
    {
      if (v8 != 1) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v8 != 1)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      sub_100274EBC(a1 + 16);
    }
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }
  if (v4 != 1)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      goto LABEL_15;
    }
LABEL_10:
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_15:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v10 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v10;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v11 = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 136) = v12;
  uint64_t v15 = *(void *)(a2 + 200);
  uint64_t v16 = *(void *)(a2 + 208);
  unsigned __int8 v17 = *(unsigned char *)(a2 + 216);
  sub_100217C58(v15, v16, v17);
  uint64_t v18 = *(void *)(a1 + 200);
  uint64_t v19 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = v15;
  *(void *)(a1 + 208) = v16;
  unsigned __int8 v20 = *(unsigned char *)(a1 + 216);
  *(unsigned char *)(a1 + 216) = v17;
  sub_1002173AC(v18, v19, v20);
  return a1;
}

void *initializeWithTake for RumpAuthenticatedURL(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD9uLL);
}

uint64_t assignWithTake for RumpAuthenticatedURL(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    sub_100274F10(a1);
LABEL_4:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_10;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v6 = (void *)(a2 + 16);
  if (*(void *)(a1 + 24) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (v7 != 1)
    {
      *(void *)(a1 + 16) = *v6;
      *(void *)(a1 + 24) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_100274EBC(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_10:
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 178) = *(_OWORD *)(a2 + 178);
  char v11 = *(unsigned char *)(a2 + 216);
  uint64_t v12 = *(void *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  unsigned __int8 v14 = *(unsigned char *)(a1 + 216);
  *(unsigned char *)(a1 + 216) = v11;
  sub_1002173AC(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RumpAuthenticatedURL(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 217))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RumpAuthenticatedURL(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 216) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 217) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 217) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RumpAuthenticatedURL()
{
  return &type metadata for RumpAuthenticatedURL;
}

void sub_1002AAEEC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 < v2)
  {
    __break(1u);
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  int v6 = *(unsigned __int16 *)(a1 + 20);
  int v7 = *(unsigned __int8 *)(a1 + 22);
  if (v5 - (v7 | (v6 << 8)) < v3)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = v1;
  uint64_t v27 = *(void *)a1;
  int v28 = v2;
  int v29 = v3;
  int v30 = v5;
  __int16 v31 = v6;
  char v32 = v7;
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  swift_retain();
  Swift::Int v9 = sub_10025E0BC(&v27);
  swift_release();
  uint64_t v10 = v1 + 8;
  Swift::Int v11 = *(unsigned int *)(v8 + 20);
  sub_100210AD0(32, 0xE100000000000000, v10, *(_DWORD *)(v8 + 20));
  if (v13)
  {
    v14._uint64_t countAndFlagsBits = 32;
    v14._char object = (void *)0xE100000000000000;
    Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v11);
  }
  int v15 = *(_DWORD *)(v8 + 20);
  Swift::Int v16 = (v15 + v12);
  if (__CFADD__(v15, v12)) {
    goto LABEL_14;
  }
  *(_DWORD *)(v8 + 20) = v16;
  Swift::Int v17 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v26 = *(_OWORD *)(a1 + 24);
  Swift::String v18 = (Swift::String)v26;
  swift_bridgeObjectRetain();
  sub_100210AD0(v26, *((unint64_t *)&v26 + 1), v10, v16);
  Swift::Int v20 = v19;
  char v22 = v21;
  sub_10002A77C((uint64_t)&v26);
  if (v22) {
    Swift::Int v20 = ByteBuffer._setStringSlowpath(_:at:)(v18, v16);
  }
  int v23 = *(_DWORD *)(v8 + 20);
  BOOL v24 = __CFADD__(v23, v20);
  int v25 = v23 + v20;
  if (v24) {
    goto LABEL_16;
  }
  *(_DWORD *)(v8 + 20) = v25;
  if (__OFADD__(v17, v20)) {
LABEL_17:
  }
    __break(1u);
}

uint64_t RumpURLAndMechanism.init(urlRump:mechanism:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(_DWORD *)(a6 + 16) = a3;
  *(_WORD *)(a6 + 20) = WORD2(a3);
  *(unsigned char *)(a6 + 22) = BYTE6(a3);
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

uint64_t RumpURLAndMechanism.hash(into:)()
{
  swift_beginAccess();
  sub_1005E3400();
  long long v2 = *(_OWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  return sub_10002A77C((uint64_t)&v2);
}

uint64_t static RumpURLAndMechanism.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48)))return 0; {
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
  }
    return 1;
  return sub_1005E3290();
}

Swift::Int RumpURLAndMechanism.hashValue.getter()
{
  sub_1005E33F0();
  swift_beginAccess();
  sub_1005E3400();
  long long v2 = *(_OWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  sub_10002A77C((uint64_t)&v2);
  return sub_1005E3470();
}

Swift::Int sub_1002AB290()
{
  return sub_1005E3470();
}

unint64_t sub_1002AB348()
{
  unint64_t result = qword_100711728;
  if (!qword_100711728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711728);
  }
  return result;
}

uint64_t destroy for RumpURLAndMechanism()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RumpURLAndMechanism(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RumpURLAndMechanism(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RumpURLAndMechanism(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RumpURLAndMechanism()
{
  return &type metadata for RumpURLAndMechanism;
}

Swift::Int sub_1002AB534()
{
  sub_1002ABDE0();
  sub_1005E3440(v0);
  return sub_1005E3470();
}

Swift::Int sub_1002AB570(char a1)
{
  return sub_1002AB6F8(0, a1);
}

Swift::Int sub_1002AB57C()
{
  sub_1002ABDE0();
  MailboxAttribute.rawValue.getter(v0);
  sub_1002ABDFC();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

Swift::Int sub_1002AB5C0()
{
  return sub_1002AB5CC();
}

Swift::Int sub_1002AB5CC()
{
  return sub_1005E3470();
}

Swift::Int sub_1002AB658(uint64_t a1, Swift::UInt32 a2)
{
  return sub_1005E3470();
}

Swift::Int sub_1002AB69C()
{
  return sub_1005E3470();
}

Swift::Int sub_1002AB6F8(uint64_t a1, char a2)
{
  if (a2) {
    sub_1001E8A40();
  }
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

Swift::Int sub_1002AB76C(uint64_t a1, char a2)
{
  return sub_1005E3470();
}

uint64_t static ScopeOption.__derived_struct_equals(_:_:)(char a1, char a2)
{
  if (a1)
  {
    sub_1001E8A40();
    if (v2) {
      uint64_t v4 = 49;
    }
    else {
      uint64_t v4 = 0x7974696E69666E69;
    }
    if (v2) {
      unint64_t v5 = v3;
    }
    else {
      unint64_t v5 = 0xE800000000000000;
    }
  }
  else
  {
    unint64_t v5 = 0xE100000000000000;
    uint64_t v4 = 48;
  }
  if (a2)
  {
    sub_1001E8A40();
    if (v6) {
      uint64_t v8 = 49;
    }
    else {
      uint64_t v8 = 0x7974696E69666E69;
    }
    if (v6) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = 0xE800000000000000;
    }
  }
  else
  {
    unint64_t v9 = 0xE100000000000000;
    uint64_t v8 = 48;
  }
  if (v4 == v8 && v5 == v9) {
    char v11 = 1;
  }
  else {
    char v11 = sub_1005E3290();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_1002AB88C(char a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    sub_1001E8A40();
    if (v3) {
      v5._uint64_t countAndFlagsBits = 49;
    }
    else {
      v5._uint64_t countAndFlagsBits = 0x7974696E69666E69;
    }
    if (v3) {
      char v6 = v4;
    }
    else {
      char v6 = (void *)0xE800000000000000;
    }
  }
  else
  {
    char v6 = (void *)0xE100000000000000;
    v5._uint64_t countAndFlagsBits = 48;
  }
  v5._char object = v6;
  sub_1005E1E30(v5);
  swift_bridgeObjectRelease();
  Swift::Int v7 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(0x204854504544, 0xE600000000000000, v1 + 8, v7);
  Swift::Int v9 = v8;
  char v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    v12._uint64_t countAndFlagsBits = 0x204854504544;
    v12._char object = (void *)0xE600000000000000;
    Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v12, v7);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v14 = *(_DWORD *)(v2 + 20);
  BOOL v15 = __CFADD__(v14, v9);
  int v16 = v14 + v9;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v2 + 20) = v16;
    return v9;
  }
  return result;
}

void *ScopeOption.zero.unsafeMutableAddressor()
{
  return &static ScopeOption.zero;
}

void *ScopeOption.one.unsafeMutableAddressor()
{
  return &static ScopeOption.one;
}

void *ScopeOption.infinity.unsafeMutableAddressor()
{
  return &static ScopeOption.infinity;
}

uint64_t sub_1002AB9C8(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1006CCE70;
  v6._char object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1002ABA14(char a1)
{
  if (!a1) {
    return 48;
  }
  sub_1001E8A40();
  if (v1) {
    return 49;
  }
  else {
    return 0x7974696E69666E69;
  }
}

uint64_t sub_1002ABA58(char *a1, char *a2)
{
  return sub_1001E5F40(*a1, *a2);
}

Swift::Int sub_1002ABA64()
{
  return sub_1002AB5C0();
}

uint64_t sub_1002ABA6C()
{
  return sub_100235894();
}

Swift::Int sub_1002ABA74()
{
  return sub_1002AB5CC();
}

uint64_t sub_1002ABA7C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002AB9C8(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1002ABAAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002ABA14(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ScopeOption.hash(into:)(uint64_t a1, char a2)
{
  if (a2) {
    sub_1001E8A40();
  }
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int ScopeOption.hashValue.getter()
{
  sub_1002ABDE0();
  if (v0) {
    sub_1001E8A40();
  }
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

Swift::Int sub_1002ABBC4()
{
  return ScopeOption.hashValue.getter();
}

uint64_t sub_1002ABBCC(uint64_t a1)
{
  return ScopeOption.hash(into:)(a1, *v1);
}

Swift::Int sub_1002ABBD4()
{
  char v1 = *v0;
  sub_1005E33F0();
  ScopeOption.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

unint64_t sub_1002ABC1C()
{
  unint64_t result = qword_100711730;
  if (!qword_100711730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711730);
  }
  return result;
}

uint64_t sub_1002ABC68(char *a1, char *a2)
{
  return static ScopeOption.__derived_struct_equals(_:_:)(*a1, *a2);
}

ValueMetadata *type metadata accessor for ScopeOption()
{
  return &type metadata for ScopeOption;
}

unsigned char *_s12NIOIMAPCore211ScopeOptionV8_BackingOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002ABD58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScopeOption._Backing()
{
  return &type metadata for ScopeOption._Backing;
}

unint64_t sub_1002ABD94()
{
  unint64_t result = qword_100711738;
  if (!qword_100711738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711738);
  }
  return result;
}

uint64_t sub_1002ABDE0()
{
  return sub_1005E33F0();
}

uint64_t sub_1002ABDFC()
{
  return sub_1005E1DB0();
}

void sub_1002ABE20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 8;
  Swift::UInt32 v5 = *(_DWORD *)(v1 + 20);
  uint64_t v6 = sub_1002AC534();
  sub_100210AD0(v6, v7, v4, v5);
  if (v9)
  {
    uint64_t v10 = sub_1002AC534();
    Swift::Int v8 = sub_10026D8F8(v10, v11);
  }
  Swift::Int v12 = v8;
  int v13 = *(_DWORD *)(v2 + 20);
  if (__CFADD__(v13, v8))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_DWORD *)(v2 + 20) = v13 + v8;
  uint64_t v14 = *(void *)a1;
  unint64_t v15 = *(void *)(a1 + 8);
  swift_bridgeObjectRetain();
  sub_10026D910(v14, v15);
  Swift::Int v17 = v16;
  char v19 = v18;
  swift_bridgeObjectRelease();
  if (v19) {
    Swift::Int v17 = sub_10026D8F8(v14, v15);
  }
  int v20 = *(_DWORD *)(v2 + 20);
  if (__CFADD__(v20, v17)) {
    goto LABEL_34;
  }
  *(_DWORD *)(v2 + 20) = v20 + v17;
  BOOL v21 = __OFADD__(v12, v17);
  Swift::Int v22 = v12 + v17;
  if (v21)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  sub_10026D910(34, 0xE100000000000000);
  if (v24) {
    Swift::Int v23 = sub_10026D8F8(34, 0xE100000000000000);
  }
  int v25 = *(_DWORD *)(v2 + 20);
  if (__CFADD__(v25, v23)) {
    goto LABEL_36;
  }
  *(_DWORD *)(v2 + 20) = v25 + v23;
  Swift::Int v26 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!*(void *)(a1 + 16))
  {
LABEL_19:
    Swift::Int v39 = 0;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  uint64_t v27 = sub_1002AC518();
  sub_10026D910(v27, v28);
  if (v30)
  {
    uint64_t v31 = sub_1002AC518();
    Swift::Int v29 = sub_10026D8F8(v31, v32);
  }
  Swift::Int v33 = v29;
  int v34 = *(_DWORD *)(v2 + 20);
  BOOL v35 = __CFADD__(v34, v29);
  int v36 = v34 + v29;
  if (v35) {
    goto LABEL_42;
  }
  *(_DWORD *)(v2 + 20) = v36;
  uint64_t v37 = swift_bridgeObjectRetain();
  Swift::Int v38 = sub_10025E538(v37);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease_n();
  Swift::Int v39 = v33 + v38;
  if (__OFADD__(v33, v38))
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  Swift::Int v40 = v26 + v39;
  if (__OFADD__(v26, v39))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    Swift::Int v41 = 0;
  }
  else
  {
    uint64_t v42 = sub_1002AC4F4();
    sub_10026D910(v42, v43);
    if (v45)
    {
      uint64_t v46 = sub_1002AC4F4();
      Swift::Int v44 = sub_10026D8F8(v46, v47);
    }
    Swift::Int v48 = v44;
    int v49 = *(_DWORD *)(v2 + 20);
    BOOL v35 = __CFADD__(v49, v44);
    int v50 = v49 + v44;
    if (v35) {
      goto LABEL_43;
    }
    *(_DWORD *)(v2 + 20) = v50;
    uint64_t v51 = sub_1002BA570();
    Swift::Int v41 = v48 + v51;
    if (__OFADD__(v48, v51))
    {
LABEL_44:
      __break(1u);
      return;
    }
  }
  Swift::Int v52 = v40 + v41;
  if (__OFADD__(v40, v41)) {
    goto LABEL_39;
  }
  sub_10026D910(41, 0xE100000000000000);
  if (v54) {
    Swift::Int v53 = sub_10026D8F8(41, 0xE100000000000000);
  }
  int v55 = *(_DWORD *)(v2 + 20);
  BOOL v35 = __CFADD__(v55, v53);
  int v56 = v55 + v53;
  if (v35) {
    goto LABEL_40;
  }
  *(_DWORD *)(v2 + 20) = v56;
  if (__OFADD__(v52, v53))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
}

uint64_t MailboxOfInterest.name.setter(uint64_t a1, int a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(_DWORD *)(v2 + 24) = a2;
  return result;
}

unint64_t SearchCorrelator.uidValidity.getter()
{
  return *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int8 *)(v0 + 32) << 32);
}

void __swiftcall SearchCorrelator.init(tag:mailbox:uidValidity:)(NIOIMAPCore2::SearchCorrelator *__return_ptr retstr, Swift::String tag, NIOIMAPCore2::MailboxName_optional mailbox, NIOIMAPCore2::UIDValidity_optional uidValidity)
{
  retstr->tag = tag;
  retstr->mailbox = mailbox;
  retstr->uidValidity.value.rawValue = uidValidity.value.rawValue;
  retstr->uidValidity.is_nil = uidValidity.is_nil;
}

void SearchCorrelator.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(unsigned int *)(v0 + 24);
    sub_1005E3420(1u);
    sub_1005E3410(v1 | (v1 << 32));
  }
  else
  {
    sub_1005E3420(0);
  }
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    Swift::UInt32 v2 = *(_DWORD *)(v0 + 28);
    sub_1005E3420(1u);
    sub_1005E3440(v2);
  }
}

uint64_t static SearchCorrelator.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = sub_1005E3290(), uint64_t result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a2 + 16);
    if (v7)
    {
      if (!v8
        || (*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32)) != (*(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a2 + 24) << 32))
        || (sub_100219B44(v7, v8) & 1) == 0)
      {
        return 0;
      }
    }
    else if (v8)
    {
      return 0;
    }
    char v9 = *(unsigned char *)(a2 + 32);
    if (*(unsigned char *)(a1 + 32))
    {
      if ((*(unsigned char *)(a2 + 32) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
        char v9 = 1;
      }
      if (v9) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

Swift::Int SearchCorrelator.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002AC2A8()
{
  return sub_1005E3470();
}

unint64_t sub_1002AC2EC()
{
  unint64_t result = qword_100711740;
  if (!qword_100711740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711740);
  }
  return result;
}

uint64_t initializeWithCopy for SearchCorrelator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SearchCorrelator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  int v4 = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v4;
  return a1;
}

uint64_t assignWithTake for SearchCorrelator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCorrelator(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MailboxesSelectionUsage.Element(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchCorrelator()
{
  return &type metadata for SearchCorrelator;
}

uint64_t sub_1002AC4F4()
{
  return 0x494C415644495520;
}

uint64_t sub_1002AC518()
{
  return 0x584F424C49414D20;
}

uint64_t sub_1002AC534()
{
  return 0x22204741542820;
}

BOOL static IUID.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return a2 == a1;
}

void static SearchKey.__derived_enum_equals(_:_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007104D8);
  uint64_t v5 = sub_100224550(v4);
  __chkstk_darwin(v5);
  sub_100224A54();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v137 - v10;
  uint64_t v12 = sub_10000566C(&qword_1007108C8);
  uint64_t v13 = sub_100224550(v12);
  __chkstk_darwin(v13);
  sub_100224A54();
  uint64_t v16 = v14 - v15;
  __chkstk_darwin(v17);
  char v19 = (char *)&v137 - v18;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      sub_1002AF3A0();
      if (v34 == 1) {
        goto LABEL_60;
      }
      goto LABEL_87;
    case 2uLL:
      sub_1002AF3A0();
      if (v35 != 2) {
        goto LABEL_87;
      }
      goto LABEL_23;
    case 3uLL:
      sub_1002AF3A0();
      if (v36 != 3) {
        goto LABEL_87;
      }
      goto LABEL_23;
    case 4uLL:
      sub_1002AF3A0();
      if (v37 != 4) {
        goto LABEL_87;
      }
      goto LABEL_23;
    case 5uLL:
      sub_1002AF3A0();
      if (v38 != 5) {
        goto LABEL_87;
      }
      goto LABEL_26;
    case 6uLL:
      sub_1002AF3A0();
      if (v39 != 6) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 7uLL:
      sub_1002AF3A0();
      if (v40 != 7) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 8uLL:
      sub_1002AF3A0();
      if (v41 != 8) {
        goto LABEL_87;
      }
      goto LABEL_23;
    case 9uLL:
      sub_1002AF3A0();
      if (v42 != 9) {
        goto LABEL_87;
      }
      goto LABEL_23;
    case 0xAuLL:
      sub_1002AF3A0();
      if (v43 != 10) {
        goto LABEL_87;
      }
LABEL_23:
      sub_1002AF4C0();
      uint64_t v46 = *(void *)(v44 + 16);
      unint64_t v45 = *(void *)(v44 + 24);
      uint64_t v48 = a2 & v47;
      uint64_t v49 = *(void *)(v48 + 16);
      uint64_t v50 = *(void *)(v48 + 24);
      unint64_t v51 = *(unsigned int *)(v44 + 32) | ((unint64_t)*(unsigned __int8 *)(v44 + 38) << 48) | ((unint64_t)*(unsigned __int16 *)(v44 + 36) << 32);
      unint64_t v52 = *(unsigned int *)(v48 + 32) | ((unint64_t)*(unsigned __int16 *)(v48 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v48 + 38) << 48);
      swift_retain();
      swift_retain();
      static ByteBuffer.== infix(_:_:)(v46, v45, v51, v49, v50, v52);
      goto LABEL_24;
    case 0xBuLL:
      sub_1002AF3A0();
      if (v53 == 11)
      {
LABEL_26:
        sub_1002AF664();
        uint64_t v54 = sub_1005E1CD0();
        uint64_t v56 = v55;
        if (v54 == sub_1005E1CD0() && v56 == v57)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          sub_1005E3290();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_87;
    case 0xCuLL:
      sub_1002AF3A0();
      if (v59 != 12) {
        goto LABEL_87;
      }
      uint64_t v60 = a1 & 0xFFFFFFFFFFFFFFBLL;
      uint64_t v61 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v62 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v63 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      unint64_t v138 = *(void *)(v60 + 40);
      uint64_t v64 = *(unsigned int *)(v60 + 48);
      uint64_t v65 = *(unsigned __int16 *)(v60 + 52);
      uint64_t v66 = *(unsigned __int8 *)(v60 + 54);
      uint64_t v67 = *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x20);
      uint64_t v68 = *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x28);
      uint64_t v69 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x30);
      uint64_t v70 = *(unsigned __int16 *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x34);
      uint64_t v71 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x36);
      BOOL v72 = v61 == *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x10)
         && v62 == *(void *)((a2 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      if (!v72 && (sub_1005E3290() & 1) == 0) {
        goto LABEL_87;
      }
      swift_retain();
      swift_retain();
      static ByteBuffer.== infix(_:_:)(v63, v138, v64 | (v65 << 32) | (v66 << 48), v67, v68, v69 | (v70 << 32) | (v71 << 48));
      swift_release();
      goto LABEL_38;
    case 0xDuLL:
      sub_1002AF3A0();
      if (v73 != 13) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0xEuLL:
      sub_1002AF3A0();
      if (v74 == 14)
      {
        sub_1002AF4C0();
        unint64_t v76 = *(void *)(v75 + 16);
        unint64_t v78 = *(void *)((a2 & v77) + 0x10);
        sub_1002238FC(v76);
        sub_1002238FC(v78);
        static SearchKey.__derived_enum_equals(_:_:)(v76, v78);
        sub_1002239B4(v78);
        sub_1002239B4(v76);
      }
      goto LABEL_87;
    case 0xFuLL:
      sub_1002AF3A0();
      if (v79 == 15)
      {
        sub_1002AF4C0();
        unint64_t v81 = *(void *)(v80 + 16);
        unint64_t v82 = *(void *)(v80 + 24);
        uint64_t v84 = a2 & v83;
        unint64_t v85 = *(void *)(v84 + 16);
        unint64_t v86 = *(void *)(v84 + 24);
        sub_1002238FC(v81);
        sub_1002238FC(v85);
        sub_1002238FC(v82);
        sub_1002238FC(v86);
        if (static SearchKey.__derived_enum_equals(_:_:)(v81, v85)) {
          static SearchKey.__derived_enum_equals(_:_:)(v82, v86);
        }
        sub_1002AF740();
      }
      goto LABEL_87;
    case 0x10uLL:
      sub_1002AF3A0();
      if (v87 != 16) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0x11uLL:
      sub_1002AF3A0();
      if (v88 != 17) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0x12uLL:
      sub_1002AF3A0();
      if (v89 == 18) {
        goto LABEL_60;
      }
      goto LABEL_87;
    case 0x13uLL:
      sub_1002AF3A0();
      if (v90 != 19) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0x14uLL:
      sub_1002AF3A0();
      if (v91 != 20) {
        goto LABEL_87;
      }
      uint64_t v92 = sub_1002AF83C();
      uint64_t v93 = swift_projectBox();
      sub_1001F36E4(v92, (uint64_t)v19, &qword_1007108C8);
      sub_1001F36E4(v93, v16, &qword_1007108C8);
      sub_10024A958((uint64_t)v19, v16, v94, v95, v96, v97, v98, v99, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147,
        v148);
      sub_1001F3A28(v16, &qword_1007108C8);
      uint64_t v100 = (uint64_t)v19;
      uint64_t v101 = &qword_1007108C8;
      goto LABEL_63;
    case 0x15uLL:
      sub_1002AF3A0();
      if (v102 != 21) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0x16uLL:
      sub_1002AF3A0();
      if (v103 == 22) {
        goto LABEL_60;
      }
      goto LABEL_87;
    case 0x17uLL:
      sub_1002AF3A0();
      if (v104 != 23) {
        goto LABEL_87;
      }
      uint64_t v105 = sub_1002AF83C();
      uint64_t v106 = swift_projectBox();
      sub_1001F36E4(v105, (uint64_t)v11, &qword_1007104D8);
      sub_1001F36E4(v106, v8, &qword_1007104D8);
      sub_10024A974((uint64_t)v11, v8, v107, v108, v109, v110, v111, v112, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147,
        v148);
      sub_1001F3A28(v8, &qword_1007104D8);
      uint64_t v100 = (uint64_t)v11;
      uint64_t v101 = &qword_1007104D8;
LABEL_63:
      sub_1001F3A28(v100, v101);
      goto LABEL_87;
    case 0x18uLL:
      sub_1002AF3A0();
      if (v113 != 24) {
        goto LABEL_87;
      }
      sub_1002AF4C0();
      sub_1001FE57C();
      sub_10021B294(v114, v115);
      return;
    case 0x19uLL:
      sub_1002AF3A0();
      if (v117 != 25) {
        goto LABEL_87;
      }
      goto LABEL_60;
    case 0x1AuLL:
      sub_1002AF3A0();
      if (v136 == 26) {
LABEL_60:
      }
        sub_1002AF4C0();
      goto LABEL_87;
    case 0x1BuLL:
      sub_1002AF3A0();
      if (v118 != 27) {
        goto LABEL_87;
      }
      uint64_t v119 = sub_1002AF664();
      if (v119 == *(void *)(v121 + 16) && v120 == *(void *)(v121 + 24)) {
        goto LABEL_87;
      }
      sub_1001FE57C();
      sub_1005E3290();
      break;
    case 0x1CuLL:
      sub_1002AF3A0();
      if (v124 == 28)
      {
        sub_1002AF4C0();
        uint64_t v127 = v125[4];
        uint64_t v126 = v125[5];
        uint64_t v129 = v125[2];
        uint64_t v128 = v125[3];
        Swift::Int v131 = (void *)(a2 & v130);
        uint64_t v132 = v131[2];
        uint64_t v133 = v131[3];
        uint64_t v134 = v131[4];
        uint64_t v135 = v131[5];
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        static SearchModificationSequence.__derived_struct_equals(_:_:)(v129, v128, v127, v126, v132, v133, v134, v135);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
LABEL_24:
        swift_release();
        swift_release();
      }
      goto LABEL_87;
    case 0x1DuLL:
      switch(__ROR8__(a1 + 0x1FFFFFFFFFFFFFFCLL, 3))
      {
        case 5:
        case 9:
        case 0xALL:
        case 0xBLL:
        case 0xDLL:
          sub_1002AF3A0();
          break;
        default:
          sub_1002AF3E8();
          break;
      }
      goto LABEL_87;
    default:
      sub_1002AF3A0();
      if (!v20)
      {
        uint64_t v21 = *(unsigned __int8 *)(a1 + 38);
        uint64_t v22 = *(unsigned __int16 *)(a1 + 36);
        uint64_t v23 = *(unsigned int *)(a1 + 32);
        unint64_t v26 = a1 + 16;
        uint64_t v24 = *(void *)(a1 + 16);
        unint64_t v25 = *(void *)(v26 + 8);
        uint64_t v27 = *(void *)(a2 + 16);
        uint64_t v28 = *(void *)(a2 + 24);
        uint64_t v29 = *(unsigned int *)(a2 + 32);
        uint64_t v30 = *(unsigned __int16 *)(a2 + 36);
        uint64_t v31 = *(unsigned __int8 *)(a2 + 38);
        unint64_t v32 = v23 | (v21 << 48) | (v22 << 32);
        unint64_t v33 = v29 | (v30 << 32) | (v31 << 48);
        swift_retain();
        swift_retain();
        static ByteBuffer.== infix(_:_:)(v24, v25, v32, v27, v28, v33);
        swift_release();
LABEL_38:
        swift_release();
      }
LABEL_87:
      sub_1001FE57C();
      break;
  }
}

uint64_t sub_1002ACEC4(unint64_t a1)
{
  unint64_t v2 = (a1 >> 59) & 0x1E | (a1 >> 2) & 1;
  uint64_t result = 0;
  switch(v2)
  {
    case 1uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 0xBuLL:
    case 0xDuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
      return result;
    case 0xEuLL:
      unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      sub_1002238FC(v4);
      char v5 = sub_1002ACEC4(v4);
      sub_1002239B4(v4);
      uint64_t result = v5 & 1;
      break;
    case 0xFuLL:
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFFBLL;
      unint64_t v8 = *(void *)(v6 + 16);
      unint64_t v7 = *(void *)(v6 + 24);
      sub_1002238FC(v8);
      sub_1002238FC(v7);
      if (sub_1002ACEC4(v8))
      {
        sub_1002239B4(v8);
        sub_1002239B4(v7);
        goto LABEL_2;
      }
      char v14 = sub_1002ACEC4(v7);
      sub_1002239B4(v8);
      sub_1002239B4(v7);
      uint64_t result = v14 & 1;
      break;
    case 0x18uLL:
      uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v10; ++i)
        {
          unint64_t v12 = *(void *)(v9 + 8 * i + 32);
          sub_1002238FC(v12);
          char v13 = sub_1002ACEC4(v12);
          sub_1002239B4(v12);
          if (v13)
          {
            swift_bridgeObjectRelease();
            goto LABEL_2;
          }
        }
        swift_bridgeObjectRelease();
      }
      uint64_t result = 0;
      break;
    default:
LABEL_2:
      uint64_t result = 1;
      break;
  }
  return result;
}

void SearchKey.hash(into:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007104C8);
  sub_1001F3BBC();
  __chkstk_darwin(v5);
  sub_1001F40C0();
  unint64_t v8 = v7 - v6;
  uint64_t v9 = sub_10000566C(&qword_1007104D8);
  uint64_t v10 = sub_100224550(v9);
  __chkstk_darwin(v10);
  sub_100224A54();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = &v50[-v15];
  uint64_t v17 = sub_10000566C(&qword_1007108C0);
  sub_1001F3BBC();
  __chkstk_darwin(v18);
  sub_1001F40C0();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = sub_10000566C(&qword_1007108C8);
  uint64_t v23 = sub_100224550(v22);
  __chkstk_darwin(v23);
  sub_100224A54();
  uint64_t v26 = v24 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = &v50[-v28];
  switch((a2 >> 59) & 0x1E | (a2 >> 2) & 1)
  {
    case 1uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 15;
      goto LABEL_29;
    case 2uLL:
      sub_1002AF42C();
      Swift::UInt v31 = 16;
      goto LABEL_13;
    case 3uLL:
      sub_1002AF42C();
      Swift::UInt v31 = 17;
      goto LABEL_13;
    case 4uLL:
      sub_1002AF42C();
      Swift::UInt v31 = 18;
      goto LABEL_13;
    case 5uLL:
      sub_1002AF570();
      Swift::UInt v32 = 19;
      goto LABEL_16;
    case 6uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 20;
      goto LABEL_29;
    case 7uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 21;
      goto LABEL_29;
    case 8uLL:
      sub_1002AF42C();
      Swift::UInt v31 = 22;
      goto LABEL_13;
    case 9uLL:
      sub_1002AF42C();
      Swift::UInt v31 = 23;
      goto LABEL_13;
    case 0xAuLL:
      sub_1002AF42C();
      Swift::UInt v31 = 24;
LABEL_13:
      sub_1005E3410(v31);
      sub_1002AF77C();
      goto LABEL_14;
    case 0xBuLL:
      sub_1002AF570();
      Swift::UInt v32 = 25;
LABEL_16:
      sub_1005E3410(v32);
      sub_1005E1CD0();
      sub_1005E1DB0();
      sub_1001FE57C();
      swift_bridgeObjectRelease();
      return;
    case 0xCuLL:
      sub_1002AF46C();
      sub_1005E3410(0x1AuLL);
      swift_retain();
      sub_100246674();
      sub_1005E1DB0();
      sub_1002AF77C();
      sub_1005E3400();
      swift_release();
      goto LABEL_55;
    case 0xDuLL:
      sub_1002AF538();
      Swift::UInt v34 = 27;
      goto LABEL_53;
    case 0xEuLL:
      sub_1002AF538();
      sub_1005E3410(0x1CuLL);
      sub_1002238FC(v8);
      SearchKey.hash(into:)(a1, v8);
      goto LABEL_23;
    case 0xFuLL:
      sub_1002AF570();
      sub_1005E3410(0x1DuLL);
      sub_1002238FC(v8);
      sub_1002238FC(a2);
      SearchKey.hash(into:)(a1, v8);
      SearchKey.hash(into:)(a1, a2);
      sub_1002239B4(v8);
LABEL_23:
      sub_1001FE57C();
      sub_1002239B4(v35);
      return;
    case 0x10uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 30;
      goto LABEL_29;
    case 0x11uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 31;
      goto LABEL_29;
    case 0x12uLL:
      sub_1002AF46C();
      Swift::UInt v30 = 32;
LABEL_29:
      sub_1005E3410(v30);
      sub_1005E3410(v8);
      sub_1005E3410(a2);
      Swift::UInt v37 = (Swift::UInt)v16;
      goto LABEL_54;
    case 0x13uLL:
      sub_1002AF538();
      Swift::UInt v34 = 33;
      goto LABEL_53;
    case 0x14uLL:
      uint64_t v38 = swift_projectBox();
      sub_1001F36E4(v38, (uint64_t)v29, &qword_1007108C8);
      sub_1005E3410(0x22uLL);
      sub_1001F36E4((uint64_t)v29, v26, &qword_1007108C8);
      if (getEnumTagSinglePayload for ClientCommand(v26, 1, v17) == 1)
      {
        sub_1005E3410(1uLL);
      }
      else
      {
        sub_10025406C(v26, v21, &qword_1007108C0);
        sub_1005E3410(0);
        sub_10000566C(&qword_100710538);
        sub_10022AAC0();
        sub_1005E19C0();
        sub_1001F3A28(v21, &qword_1007108C0);
      }
      uint64_t v48 = &qword_1007108C8;
      uint64_t v49 = (uint64_t)v29;
      goto LABEL_60;
    case 0x15uLL:
      sub_1002AF888();
      Swift::UInt v39 = 35;
      goto LABEL_35;
    case 0x16uLL:
      sub_1002AF888();
      Swift::UInt v39 = 36;
LABEL_35:
      sub_1005E3410(v39);
      if (a2)
      {
LABEL_36:
        Swift::UInt v37 = 1;
LABEL_54:
        sub_1005E3410(v37);
      }
      else
      {
        sub_1005E3410(0);
        sub_1005E3440(v8);
      }
LABEL_55:
      sub_1001FE57C();
      return;
    case 0x17uLL:
      uint64_t v40 = swift_projectBox();
      sub_1001F36E4(v40, (uint64_t)v16, &qword_1007104D8);
      sub_1005E3410(0x25uLL);
      sub_1001F36E4((uint64_t)v16, v13, &qword_1007104D8);
      if (getEnumTagSinglePayload for ClientCommand(v13, 1, v4) == 1)
      {
        sub_1005E3410(1uLL);
      }
      else
      {
        sub_10025406C(v13, v8, &qword_1007104C8);
        sub_1005E3410(0);
        sub_10000566C(&qword_100710538);
        sub_10022AAC0();
        sub_1005E19C0();
        sub_1001F3A28(v8, &qword_1007104C8);
      }
      uint64_t v48 = &qword_1007104D8;
      uint64_t v49 = (uint64_t)v16;
LABEL_60:
      sub_1001F3A28(v49, v48);
      goto LABEL_55;
    case 0x18uLL:
      sub_1002AF538();
      sub_1005E3410(0x26uLL);
      sub_1001FE57C();
      sub_100226BF8(v41, v42);
      return;
    case 0x19uLL:
      sub_1002AF538();
      Swift::UInt v34 = 39;
      goto LABEL_53;
    case 0x1AuLL:
      sub_1002AF538();
      Swift::UInt v34 = 40;
LABEL_53:
      sub_1005E3410(v34);
      Swift::UInt v37 = v8;
      goto LABEL_54;
    case 0x1BuLL:
      sub_1002AF570();
      sub_1005E3410(0x29uLL);
      sub_100246674();
      sub_1001FE57C();
      sub_1005E1DB0();
      return;
    case 0x1CuLL:
      sub_1002AF570();
      Swift::UInt64 v46 = *(void *)(v45 + 40);
      sub_1005E3410(0x2AuLL);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100246674();
      sub_100225404();
      sub_1005E3450(v46);
      swift_release();
      swift_release();
      sub_1001FE57C();
      swift_release();
      return;
    case 0x1DuLL:
      switch(__ROR8__(a2 + 0x1FFFFFFFFFFFFFFCLL, 3))
      {
        case 1:
          goto LABEL_36;
        case 2:
          Swift::UInt v37 = 2;
          break;
        case 3:
          Swift::UInt v37 = 3;
          break;
        case 4:
          Swift::UInt v37 = 4;
          break;
        case 5:
          Swift::UInt v37 = 5;
          break;
        case 6:
          Swift::UInt v37 = 6;
          break;
        case 7:
          Swift::UInt v37 = 7;
          break;
        case 8:
          Swift::UInt v37 = 8;
          break;
        case 9:
          Swift::UInt v37 = 9;
          break;
        case 0xALL:
          Swift::UInt v37 = 10;
          break;
        case 0xBLL:
          Swift::UInt v37 = 11;
          break;
        case 0xCLL:
          Swift::UInt v37 = 12;
          break;
        case 0xDLL:
          Swift::UInt v37 = 13;
          break;
        default:
          Swift::UInt v37 = 0;
          break;
      }
      goto LABEL_54;
    default:
      sub_1005E3410(0xEuLL);
      sub_1002AF77C();
LABEL_14:
      sub_1005E3400();
      goto LABEL_55;
  }
}

Swift::Int SearchKey.hashValue.getter(unint64_t a1)
{
  sub_1005E33F0();
  SearchKey.hash(into:)((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_1002AD904()
{
  return SearchKey.hashValue.getter(*v0);
}

void sub_1002AD90C(uint64_t a1)
{
  SearchKey.hash(into:)(a1, *v1);
}

Swift::Int sub_1002AD914()
{
  unint64_t v1 = *v0;
  sub_1005E33F0();
  SearchKey.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

void sub_1002AD958(unint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_1002AD964(unint64_t a1)
{
  uint64_t v1 = 1;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 0xEuLL:
      unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      sub_1002238FC(v3);
      uint64_t v4 = sub_1002AD964(v3);
      a1 = sub_1002239B4(v3);
      uint64_t v1 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_6;
      }
      break;
    case 0xFuLL:
LABEL_6:
      unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      sub_1002238FC(v5);
      sub_1002238FC(v6);
      uint64_t v7 = sub_1002AD964(v5);
      uint64_t v8 = sub_1002AD964(v6);
      sub_1002239B4(v6);
      a1 = sub_1002239B4(v5);
      uint64_t v1 = v7 + v8;
      if (__OFADD__(v7, v8))
      {
        __break(1u);
        goto LABEL_9;
      }
      break;
    case 0x18uLL:
LABEL_9:
      uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = 0;
        uint64_t v1 = 0;
        do
        {
          unint64_t v12 = *(void *)(v9 + 8 * v11 + 32);
          sub_1002238FC(v12);
          uint64_t v13 = sub_1002AD964(v12);
          sub_1002239B4(v12);
          BOOL v14 = __OFADD__(v1, v13);
          v1 += v13;
          if (v14)
          {
            __break(1u);
            JUMPOUT(0x1002ADABCLL);
          }
          ++v11;
        }
        while (v10 != v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v1 = 0;
      }
      break;
    default:
      return v1;
  }
  return v1;
}

void sub_1002ADB34(unint64_t a1)
{
  uint64_t v5 = v1;
  Swift::Int v7 = 0;
  uint64_t v8 = sub_10000566C(&qword_1007104D8);
  uint64_t v9 = sub_100224550(v8);
  __chkstk_darwin(v9);
  sub_1001F40C0();
  unint64_t v12 = v11 - v10;
  uint64_t v13 = sub_10000566C(&qword_1007108C8);
  uint64_t v14 = sub_100224550(v13);
  __chkstk_darwin(v14);
  sub_1001F40C0();
  uint64_t v17 = v16 - v15;
  switch((a1 >> 59) & 0x1E | (a1 >> 2) & 1)
  {
    case 1uLL:
      sub_1002AF5C4();
      uint64_t v23 = sub_1002AF604();
      sub_1002AF548(v23, v24);
      if (v25)
      {
        v26._uint64_t countAndFlagsBits = sub_1002AF604();
        ByteBuffer._setStringSlowpath(_:at:)(v26, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_325;
      }
      sub_1002AF448(v27);
      goto LABEL_252;
    case 2uLL:
      sub_1002AF3B0();
      sub_10027E150(0x2059444F42, 0xE500000000000000);
      if (v28) {
        sub_1002AF6F4(1497648962);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_326;
      }
      sub_1002AF5E0(v29);
      if (!v22) {
        goto LABEL_348;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_349;
      }
      goto LABEL_37;
    case 3uLL:
      sub_1002AF3B0();
      sub_10027E150(2114371, 0xE300000000000000);
      if (v30)
      {
        v31._uint64_t countAndFlagsBits = 2114371;
        v31._char object = (void *)0xE300000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v31, v12);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_327;
      }
      sub_1002AF5E0(v32);
      if (!v22) {
        goto LABEL_350;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_351;
      }
      goto LABEL_37;
    case 4uLL:
      sub_1002AF3B0();
      sub_10027E150(0x204D4F5246, 0xE500000000000000);
      if (v33) {
        sub_1002AF6F4(1297044038);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_328;
      }
      sub_1002AF5E0(v34);
      if (!v22) {
        goto LABEL_352;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_353;
      }
      goto LABEL_37;
    case 5uLL:
      uint64_t v35 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v36 = *(void **)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      Swift::Int v37 = *(unsigned int *)(v5 + 20);
      uint64_t v38 = sub_1002AF6DC();
      sub_1002AF548(v38, v39);
      if (v41)
      {
        v42._uint64_t countAndFlagsBits = sub_1002AF6DC();
        Swift::Int v40 = ByteBuffer._setStringSlowpath(_:at:)(v42, v37);
      }
      Swift::Int v43 = v40;
      int v44 = *(_DWORD *)(v5 + 20);
      Swift::Int v45 = (v44 + v40);
      if (__CFADD__(v44, v40)) {
        goto LABEL_329;
      }
      *(_DWORD *)(v5 + 20) = v45;
      swift_bridgeObjectRetain();
      sub_1002AF548(v35, (unint64_t)v36);
      Swift::Int v7 = v46;
      char v48 = v47;
      swift_bridgeObjectRelease();
      if (v48)
      {
        v49._uint64_t countAndFlagsBits = v35;
        v49._char object = v36;
        Swift::Int v7 = ByteBuffer._setStringSlowpath(_:at:)(v49, v45);
      }
      int v50 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v50, v7);
      int v51 = v50 + v7;
      if (v22) {
        goto LABEL_354;
      }
      *(_DWORD *)(v5 + 20) = v51;
      a1 = v43 + v7;
      if (!__OFADD__(v43, v7)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_47:
      uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      Swift::Int v3 = *(unsigned int *)(v5 + 20);
      sub_1002AF548(2117199, 0xE300000000000000);
      if (v52)
      {
        v53._uint64_t countAndFlagsBits = 2117199;
        v53._char object = (void *)0xE300000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v53, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_330;
      }
      if (!__OFADD__(v7, sub_1002AF448(v54))) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_53:
      sub_1002AF5C4();
      uint64_t v55 = sub_1002AF800();
      sub_1002AF548(v55, v56);
      if (v57)
      {
        v58._uint64_t countAndFlagsBits = sub_1002AF800();
        ByteBuffer._setStringSlowpath(_:at:)(v58, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_331;
      }
      if (!__OFADD__(v7, sub_1002AF448(v59))) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_59:
      sub_1002AF3B0();
      uint64_t v60 = sub_1002AF634();
      sub_10027E150(v60, v61);
      if (v62)
      {
        v63._uint64_t countAndFlagsBits = sub_1002AF634();
        ByteBuffer._setStringSlowpath(_:at:)(v63, v12);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_332;
      }
      sub_1002AF5E0(v64);
      if (!v22) {
        goto LABEL_355;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_356;
      }
      sub_1002AF400();
      sub_1002AF580();
      sub_1002AF480();
      if (!__OFADD__(v7, v5)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_69:
      sub_1002AF3B0();
      sub_10027E150(0x2054584554, 0xE500000000000000);
      if (v65) {
        sub_1002AF6F4(1415071060);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_333;
      }
      sub_1002AF5E0(v66);
      if (!v22) {
        goto LABEL_357;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_358;
      }
      sub_1002AF400();
      sub_1002AF580();
      sub_1002AF480();
      if (!__OFADD__(v7, v5)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_79:
      sub_1002A78F0();
      uint64_t v68 = *(unsigned int *)(v67 + 24);
      uint64_t v69 = *(unsigned int *)(v67 + 28);
      int v70 = *(_DWORD *)(v67 + 32);
      int v71 = *(unsigned __int16 *)(v67 + 36);
      int v282 = *(unsigned __int8 *)(v67 + 38);
      Swift::Int v72 = *(unsigned int *)(v5 + 20);
      swift_retain();
      sub_10027E150(2117460, 0xE300000000000000);
      if (v73)
      {
        v74._uint64_t countAndFlagsBits = 2117460;
        v74._char object = (void *)0xE300000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v74, v72);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_334;
      }
      *(_DWORD *)(v5 + 20) = v75;
      if (v69 < v68) {
        goto LABEL_359;
      }
      if (v70 - (v282 | (v71 << 8)) < v69) {
        goto LABEL_360;
      }
      uint64_t v286 = v17;
      unint64_t v287 = __PAIR64__(v69, v68);
      int v288 = v70;
      __int16 v289 = v71;
      char v290 = v282;
      uint64_t v291 = v68;
      uint64_t v292 = v69;
      swift_retain();
      sub_1002AF580();
      sub_1002AF480();
      a1 = v7 + v5;
      if (!__OFADD__(v7, v5)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_87:
      uint64_t v76 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      uint64_t v77 = *(void **)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      Swift::Int v78 = *(unsigned int *)(v5 + 20);
      uint64_t v79 = sub_1002AF710();
      sub_1002AF548(v79, v80);
      if (v82)
      {
        v83._uint64_t countAndFlagsBits = sub_1002AF710();
        Swift::Int v81 = ByteBuffer._setStringSlowpath(_:at:)(v83, v78);
      }
      Swift::Int v84 = v81;
      int v85 = *(_DWORD *)(v5 + 20);
      Swift::Int v86 = (v85 + v81);
      if (__CFADD__(v85, v81)) {
        goto LABEL_335;
      }
      *(_DWORD *)(v5 + 20) = v86;
      swift_bridgeObjectRetain();
      sub_1002AF548(v76, (unint64_t)v77);
      Swift::Int v88 = v87;
      char v90 = v89;
      swift_bridgeObjectRelease();
      if (v90)
      {
        v91._uint64_t countAndFlagsBits = v76;
        v91._char object = v77;
        Swift::Int v88 = ByteBuffer._setStringSlowpath(_:at:)(v91, v86);
      }
      int v92 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v92, v88);
      int v93 = v92 + v88;
      if (v22) {
        goto LABEL_361;
      }
      *(_DWORD *)(v5 + 20) = v93;
      if (!__OFADD__(v84, v88)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_96:
      sub_1002A7B14();
      Swift::Int v3 = *(void *)(v94 + 16);
      unint64_t v95 = *(void *)(v94 + 24);
      uint64_t v17 = *(void *)(v94 + 32);
      uint64_t v96 = *(unsigned int *)(v94 + 40);
      uint64_t v97 = *(unsigned int *)(v94 + 44);
      int v281 = *(unsigned __int16 *)(v94 + 52);
      int v283 = *(_DWORD *)(v94 + 48);
      int v280 = *(unsigned __int8 *)(v94 + 54);
      Swift::Int v98 = *(unsigned int *)(v5 + 20);
      swift_retain();
      uint64_t v99 = sub_1002AF6AC();
      sub_100210AD0(v99, v100, v5 + 8, v98);
      if (v102)
      {
        v103._uint64_t countAndFlagsBits = sub_1002AF6AC();
        Swift::Int v101 = ByteBuffer._setStringSlowpath(_:at:)(v103, v98);
      }
      Swift::Int v104 = v101;
      int v105 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v105, v101);
      int v106 = v105 + v101;
      if (v22) {
        goto LABEL_336;
      }
      *(_DWORD *)(v5 + 20) = v106;
      swift_bridgeObjectRetain();
      Swift::Int v107 = sub_10025DCBC(v3, v95);
      swift_bridgeObjectRelease();
      Swift::Int v108 = v104 + v107;
      if (__OFADD__(v104, v107)) {
        goto LABEL_362;
      }
      sub_1001F3E58(32);
      if (v109) {
        sub_1001F3E3C(32);
      }
      sub_1001F4888();
      if (v22) {
        goto LABEL_363;
      }
      *(_DWORD *)(v5 + 20) = v111;
      Swift::Int v7 = v108 + v110;
      if (__OFADD__(v108, v110)) {
        goto LABEL_364;
      }
      if (v97 < v96) {
        goto LABEL_365;
      }
      if (v283 - (v280 | (v281 << 8)) < v97) {
        goto LABEL_366;
      }
      uint64_t v286 = v17;
      unint64_t v287 = __PAIR64__(v97, v96);
      int v288 = v283;
      __int16 v289 = v281;
      char v290 = v280;
      uint64_t v291 = v96;
      uint64_t v292 = v97;
      swift_retain();
      sub_1002AF580();
      sub_1002AF480();
      if (!__OFADD__(v7, v5)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_109:
      sub_1002AF598();
      sub_1002AF7E0(v112);
      v293._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1002AF7C8(v293);
      swift_bridgeObjectRelease();
      sub_1002AF4E8();
      sub_1002AF508();
      sub_1002899F4();
      if (v7) {
        sub_100213390();
      }
      sub_1001F4120();
      if (!v22) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_114:
      sub_1002A78F0();
      uint64_t v2 = v5 + 8;
      Swift::Int v114 = *(unsigned int *)(v5 + 20);
      sub_1002238FC(v17);
      sub_100210AD0(542396238, 0xE400000000000000, v5 + 8, v114);
      if (v116)
      {
        v117._uint64_t countAndFlagsBits = 542396238;
        v117._char object = (void *)0xE400000000000000;
        Swift::Int v115 = ByteBuffer._setStringSlowpath(_:at:)(v117, v114);
      }
      unint64_t v12 = v115;
      int v118 = *(_DWORD *)(v5 + 20);
      if (__CFADD__(v118, v115)) {
        goto LABEL_337;
      }
      *(_DWORD *)(v5 + 20) = v118 + v115;
      if (sub_1002AD964(v17) < 2)
      {
LABEL_215:
        uint64_t v5 = sub_1002AF5EC();
        sub_1002239B4(v17);
LABEL_216:
        if (!__OFADD__(v12, v5)) {
          goto LABEL_252;
        }
        __break(1u);
        goto LABEL_219;
      }
      sub_1001F3E74(40);
      if (v120) {
        Swift::Int v119 = sub_1001F3E20(40);
      }
      Swift::Int v121 = v119;
      int v122 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v122, v119);
      int v123 = v122 + v119;
      if (v22) {
        goto LABEL_370;
      }
      *(_DWORD *)(v5 + 20) = v123;
      uint64_t v124 = sub_1002AF5EC();
      BOOL v125 = __OFADD__(v121, v124);
      Swift::Int v3 = v121 + v124;
      if (v125)
      {
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
LABEL_373:
        __break(1u);
        goto LABEL_374;
      }
      a1 = *(unsigned int *)(v5 + 20);
      sub_1001F3E74(41);
      if (v126) {
        sub_1001F3E20(41);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_372;
      }
      *(_DWORD *)(v5 + 20) = v127;
      sub_1002239B4(v17);
      uint64_t v5 = v3 + v7;
      if (!__OFADD__(v3, v7)) {
        goto LABEL_216;
      }
      __break(1u);
LABEL_128:
      uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      unint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x18);
      uint64_t v2 = v5 + 8;
      Swift::Int v128 = *(unsigned int *)(v5 + 20);
      sub_1002238FC(v17);
      sub_1002238FC(v12);
      sub_100210AD0(2118223, 0xE300000000000000, v5 + 8, v128);
      if (v130)
      {
        v131._uint64_t countAndFlagsBits = 2118223;
        v131._char object = (void *)0xE300000000000000;
        Swift::Int v129 = ByteBuffer._setStringSlowpath(_:at:)(v131, v128);
      }
      Swift::Int v3 = v129;
      int v132 = *(_DWORD *)(v5 + 20);
      if (__CFADD__(v132, v129)) {
        goto LABEL_338;
      }
      *(_DWORD *)(v5 + 20) = v132 + v129;
      if (sub_1002AD964(v17) < 2)
      {
LABEL_219:
        uint64_t v143 = sub_1002AF5EC();
        goto LABEL_220;
      }
      sub_1001F3E74(40);
      if (v134) {
        Swift::Int v133 = sub_1001F3E20(40);
      }
      Swift::Int v135 = v133;
      int v136 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v136, v133);
      int v137 = v136 + v133;
      if (v22) {
        goto LABEL_373;
      }
      *(_DWORD *)(v5 + 20) = v137;
      uint64_t v138 = sub_1002AF5EC();
      BOOL v125 = __OFADD__(v135, v138);
      Swift::Int v139 = v135 + v138;
      if (v125)
      {
LABEL_374:
        __break(1u);
LABEL_375:
        __break(1u);
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
        goto LABEL_378;
      }
      sub_1001F3E74(41);
      if (v140) {
        sub_1001F3E20(41);
      }
      sub_1001F4888();
      if (v22) {
        goto LABEL_375;
      }
      *(_DWORD *)(v5 + 20) = v142;
      BOOL v125 = __OFADD__(v139, v141);
      uint64_t v143 = v139 + v141;
      if (!v125)
      {
LABEL_220:
        BOOL v125 = __OFADD__(v3, v143);
        Swift::Int v206 = v3 + v143;
        if (!v125)
        {
          sub_1001F3E74(32);
          if (v208) {
            Swift::Int v207 = sub_1001F3E20(32);
          }
          int v209 = *(_DWORD *)(v5 + 20);
          if (!__CFADD__(v209, v207))
          {
            *(_DWORD *)(v5 + 20) = v209 + v207;
            Swift::Int v4 = v206 + v207;
            if (!__OFADD__(v206, v207))
            {
              if (sub_1002AD964(v12) < 2) {
                goto LABEL_244;
              }
              sub_1001F3E74(40);
              if (v211) {
                Swift::Int v210 = sub_1001F3E20(40);
              }
              Swift::Int v212 = v210;
              int v213 = *(_DWORD *)(v5 + 20);
              BOOL v22 = __CFADD__(v213, v210);
              int v214 = v213 + v210;
              if (!v22)
              {
                *(_DWORD *)(v5 + 20) = v214;
                uint64_t v215 = v5;
                uint64_t v216 = sub_1002ADB34(v12);
                Swift::Int v217 = v212 + v216;
                if (!__OFADD__(v212, v216))
                {
                  Swift::Int v218 = *(unsigned int *)(v5 + 20);
                  sub_100210AD0(41, 0xE100000000000000, v2, *(_DWORD *)(v5 + 20));
                  if (v219)
                  {
                    v220._uint64_t countAndFlagsBits = 41;
                    v220._char object = (void *)0xE100000000000000;
                    uint64_t v215 = v2;
                    ByteBuffer._setStringSlowpath(_:at:)(v220, v218);
                  }
                  sub_1002541AC();
                  if (!v22)
                  {
                    *(_DWORD *)(v5 + 20) = v221;
                    sub_1002239B4(v12);
                    sub_1002239B4(v17);
                    uint64_t v5 = v217 + v215;
                    if (!__OFADD__(v217, v215))
                    {
LABEL_245:
                      if (!__OFADD__(v4, v5)) {
                        goto LABEL_252;
                      }
                      __break(1u);
LABEL_248:
                      sub_1002704BC();
                      sub_1002AF4D0(10536, 0xE200000000000000);
                      if (v222) {
                        sub_1002543C4(10536, 0xE200000000000000);
                      }
                      sub_1002541AC();
                      if (!v22)
                      {
LABEL_251:
                        *(_DWORD *)(v5 + 20) = v205;
                        goto LABEL_252;
                      }
                      goto LABEL_381;
                    }
                    __break(1u);
                    goto LABEL_236;
                  }
LABEL_380:
                  __break(1u);
LABEL_381:
                  __break(1u);
LABEL_382:
                  __break(1u);
                  goto LABEL_383;
                }
LABEL_379:
                __break(1u);
                goto LABEL_380;
              }
LABEL_378:
              __break(1u);
              goto LABEL_379;
            }
            goto LABEL_369;
          }
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
          goto LABEL_371;
        }
LABEL_367:
        __break(1u);
        goto LABEL_368;
      }
      __break(1u);
LABEL_142:
      unsigned int v144 = sub_1002AF49C();
      uint64_t v145 = sub_1002AF694(v144);
      sub_1002AF548(v145, v146);
      if (v147)
      {
        v148._uint64_t countAndFlagsBits = sub_1002AF694(0x544E4553u);
        ByteBuffer._setStringSlowpath(_:at:)(v148, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_339;
      }
      if (!__OFADD__(v7, sub_1002AF448(v149))) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_148:
      unsigned int v150 = sub_1002AF49C();
      sub_1002AF548(v150 | 0x204E4F00000000, 0xE700000000000000);
      if (v151)
      {
        v152._uint64_t countAndFlagsBits = 0x204E4F544E4553;
        v152._char object = (void *)0xE700000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v152, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_340;
      }
      if (!__OFADD__(v7, sub_1002AF448(v153))) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_154:
      unsigned int v154 = sub_1002AF49C();
      uint64_t v155 = sub_1002AF828(v154);
      sub_1002AF548(v155, v156);
      if (v157)
      {
        v158._uint64_t countAndFlagsBits = sub_1002AF828(0x544E4553u);
        ByteBuffer._setStringSlowpath(_:at:)(v158, v3);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_341;
      }
      if (!__OFADD__(v7, sub_1002AF448(v159))) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_160:
      sub_1002AF598();
      sub_1002AF7E0(v160);
      v294._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1002AF7C8(v294);
      swift_bridgeObjectRelease();
      sub_1002AF4E8();
      sub_1002AF508();
      sub_1002899F4();
      if (v7) {
        sub_100213390();
      }
      sub_1001F4120();
      if (!v22)
      {
LABEL_206:
        *(_DWORD *)(v5 + 20) = v113;
LABEL_207:
        swift_bridgeObjectRelease();
        goto LABEL_252;
      }
      __break(1u);
LABEL_165:
      uint64_t v161 = swift_projectBox();
      sub_1001F36E4(v161, v17, &qword_1007108C8);
      Swift::Int v162 = *(unsigned int *)(v5 + 20);
      sub_10027E150(541346133, 0xE400000000000000);
      if (v163)
      {
        v164._uint64_t countAndFlagsBits = 541346133;
        v164._char object = (void *)0xE400000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v164, v162);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_342;
      }
      *(_DWORD *)(v5 + 20) = v165;
      uint64_t v5 = sub_1002A4EA0(v17);
      sub_1001F3A28(v17, &qword_1007108C8);
      a1 = v7 + v5;
      if (!__OFADD__(v7, v5)) {
        goto LABEL_252;
      }
      __break(1u);
LABEL_171:
      unint64_t v12 = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
      Swift::Int v4 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFBLL) + 0x14);
      Swift::Int v166 = *(unsigned int *)(v5 + 20);
      uint64_t v167 = sub_1002AF61C();
      sub_1002AF85C(v167, v168);
      if (v170)
      {
        v171._uint64_t countAndFlagsBits = sub_1002AF61C();
        Swift::Int v169 = ByteBuffer._setStringSlowpath(_:at:)(v171, v166);
      }
      uint64_t v17 = v169;
      int v172 = *(_DWORD *)(v5 + 20);
      Swift::Int v173 = (v172 + v169);
      if (!__CFADD__(v172, v169))
      {
        *(_DWORD *)(v5 + 20) = v173;
        if (!v4)
        {
LABEL_236:
          uint64_t v176 = sub_1002C9B08(v12);
LABEL_237:
          if (!__OFADD__(v17, v176)) {
            goto LABEL_252;
          }
          __break(1u);
LABEL_240:
          uint64_t v190 = sub_1002C9B08(v12);
LABEL_241:
          if (!__OFADD__(v17, v190)) {
            goto LABEL_252;
          }
          __break(1u);
LABEL_244:
          uint64_t v5 = sub_1002ADB34(v12);
          sub_1002239B4(v12);
          sub_1002239B4(v17);
          goto LABEL_245;
        }
        sub_1002AF85C(36, 0xE100000000000000);
        if (v174)
        {
          v175._uint64_t countAndFlagsBits = 36;
          v175._char object = (void *)0xE100000000000000;
          ByteBuffer._setStringSlowpath(_:at:)(v175, v173);
        }
        sub_1001F4888();
        if (!v22)
        {
          *(_DWORD *)(v5 + 20) = v177;
          goto LABEL_237;
        }
        goto LABEL_376;
      }
      goto LABEL_343;
    case 6uLL:
      goto LABEL_47;
    case 7uLL:
      goto LABEL_53;
    case 8uLL:
      goto LABEL_59;
    case 9uLL:
      goto LABEL_69;
    case 0xAuLL:
      goto LABEL_79;
    case 0xBuLL:
      goto LABEL_87;
    case 0xCuLL:
      goto LABEL_96;
    case 0xDuLL:
      goto LABEL_109;
    case 0xEuLL:
      goto LABEL_114;
    case 0xFuLL:
      goto LABEL_128;
    case 0x10uLL:
      goto LABEL_142;
    case 0x11uLL:
      goto LABEL_148;
    case 0x12uLL:
      goto LABEL_154;
    case 0x13uLL:
      goto LABEL_160;
    case 0x14uLL:
      goto LABEL_165;
    case 0x15uLL:
      goto LABEL_171;
    case 0x16uLL:
      sub_1002A7B14();
      unint64_t v12 = *(unsigned int *)(v178 + 16);
      int v179 = *(unsigned __int8 *)(v178 + 20);
      Swift::Int v180 = *(unsigned int *)(v5 + 20);
      uint64_t v181 = sub_1002AF5A8();
      sub_1002AF85C(v181, v182);
      if (v184)
      {
        v185._uint64_t countAndFlagsBits = sub_1002AF5A8();
        Swift::Int v183 = ByteBuffer._setStringSlowpath(_:at:)(v185, v180);
      }
      uint64_t v17 = v183;
      int v186 = *(_DWORD *)(v5 + 20);
      Swift::Int v187 = (v186 + v183);
      if (__CFADD__(v186, v183)) {
        goto LABEL_344;
      }
      *(_DWORD *)(v5 + 20) = v187;
      if (!v179) {
        goto LABEL_240;
      }
      sub_1002AF85C(36, 0xE100000000000000);
      if (v188)
      {
        v189._uint64_t countAndFlagsBits = 36;
        v189._char object = (void *)0xE100000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v189, v187);
      }
      sub_1001F4888();
      if (v22) {
        goto LABEL_377;
      }
      *(_DWORD *)(v5 + 20) = v191;
      goto LABEL_241;
    case 0x17uLL:
      uint64_t v192 = swift_projectBox();
      sub_1001F36E4(v192, v12, &qword_1007104D8);
      sub_1002A4E78(v12);
      sub_1001F3A28(v12, &qword_1007104D8);
      goto LABEL_252;
    case 0x18uLL:
      sub_1002A78F0();
      uint64_t v193 = *(void *)(v17 + 16);
      if (!v193) {
        goto LABEL_248;
      }
      if (v193 != 1)
      {
        uint64_t v285 = 0;
        swift_bridgeObjectRetain();
        uint64_t v223 = 0;
        while (1)
        {
          uint64_t v224 = v223 + 1;
          if (__OFADD__(v223, 1)) {
            break;
          }
          unint64_t v225 = *(void *)(v17 + 8 * v223 + 32);
          uint64_t v286 = v223;
          unint64_t v287 = v225;
          sub_1002238FC(v225);
          sub_1002AEF78(&v285, &v286, v5, v17, &v284);
          sub_1002239B4(v225);
          uint64_t v285 = v284;
          ++v223;
          if (v224 == v193) {
            goto LABEL_207;
          }
        }
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
LABEL_328:
        __break(1u);
LABEL_329:
        __break(1u);
LABEL_330:
        __break(1u);
LABEL_331:
        __break(1u);
LABEL_332:
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
LABEL_341:
        __break(1u);
LABEL_342:
        __break(1u);
LABEL_343:
        __break(1u);
LABEL_344:
        __break(1u);
LABEL_345:
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
LABEL_348:
        __break(1u);
LABEL_349:
        __break(1u);
LABEL_350:
        __break(1u);
LABEL_351:
        __break(1u);
LABEL_352:
        __break(1u);
LABEL_353:
        __break(1u);
LABEL_354:
        __break(1u);
LABEL_355:
        __break(1u);
LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
        goto LABEL_367;
      }
      sub_100306A14(0, 1, v17);
      unint64_t v194 = *(void *)(v17 + 32);
      sub_1002238FC(v194);
      if (sub_1002AD964(v194) < 2)
      {
        sub_1002AF5EC();
        sub_1002239B4(v194);
        goto LABEL_252;
      }
      sub_1001F3E58(40);
      if (v196) {
        Swift::Int v195 = sub_1001F3E3C(40);
      }
      int v197 = *(_DWORD *)(v5 + 20);
      BOOL v22 = __CFADD__(v197, v195);
      int v198 = v197 + v195;
      if (v22) {
        goto LABEL_382;
      }
      *(_DWORD *)(v5 + 20) = v198;
      if (__OFADD__(v195, sub_1002AF5EC()))
      {
LABEL_383:
        __break(1u);
        goto LABEL_384;
      }
      sub_1001F3E58(41);
      if (v199) {
        sub_1001F3E3C(41);
      }
      sub_100254260();
      if (v22)
      {
LABEL_384:
        __break(1u);
        JUMPOUT(0x1002AEEC8);
      }
      *(_DWORD *)(v5 + 20) = v200;
      sub_1002239B4(v194);
LABEL_252:
      sub_1001FE57C();
      return;
    case 0x19uLL:
      sub_1002AF598();
      sub_1002AF7E0(v201);
      v295._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1002AF7C8(v295);
      swift_bridgeObjectRelease();
      sub_1002AF4E8();
      sub_1002AF508();
      sub_1002899F4();
      sub_1001F4120();
      if (!v22) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_202:
      sub_1002AF598();
      sub_1002AF7E0(v202);
      v296._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1002AF7C8(v296);
      swift_bridgeObjectRelease();
      sub_1002AF4E8();
      sub_1002AF508();
      sub_1002899F4();
      sub_1001F4120();
      if (!v22) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_205:
      sub_1002A7B14();
      Swift::String v297 = *(Swift::String *)(v203 + 16);
      uint64_t v286 = 0x205245544C4946;
      unint64_t v287 = 0xE700000000000000;
      sub_1005E1E30(v297);
      sub_1002AF4E8();
      sub_1002AF508();
      sub_1002899F4();
      sub_1001F4120();
      if (!v22) {
        goto LABEL_206;
      }
      goto LABEL_345;
    case 0x1AuLL:
      goto LABEL_202;
    case 0x1BuLL:
      goto LABEL_205;
    case 0x1CuLL:
      sub_1002A7B14();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1002AF914();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_252;
    case 0x1DuLL:
      switch(__ROR8__(a1 + 0x1FFFFFFFFFFFFFFCLL, 3))
      {
        case 1:
          sub_1002704BC();
          uint64_t v226 = sub_1002AF7B0();
          sub_1002AF4D0(v226, v227);
          if (v228)
          {
            uint64_t v229 = sub_1002AF7B0();
            sub_1002543C4(v229, v230);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_263:
          sub_1002704BC();
          uint64_t v231 = sub_1002AF798();
          sub_1002AF4D0(v231, v232);
          if (v233)
          {
            uint64_t v234 = sub_1002AF798();
            sub_1002543C4(v234, v235);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_268:
          sub_1002704BC();
          uint64_t v236 = sub_1002AF728();
          sub_1002AF4D0(v236, v237);
          if (v238)
          {
            uint64_t v239 = sub_1002AF728();
            sub_1002543C4(v239, v240);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_273:
          sub_1002704BC();
          sub_1002AF4D0(5719374, 0xE300000000000000);
          if (v241) {
            sub_1002543C4(5719374, 0xE300000000000000);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_278:
          sub_1002704BC();
          sub_1002AF4D0(4475983, 0xE300000000000000);
          if (v242) {
            sub_1002543C4(4475983, 0xE300000000000000);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_283:
          sub_1002704BC();
          uint64_t v243 = sub_1002AF874();
          sub_1002AF4D0(v243, v244);
          if (v245)
          {
            uint64_t v246 = sub_1002AF874();
            sub_1002543C4(v246, v247);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_288:
          sub_1002704BC();
          sub_1002AF4D0(1313162579, 0xE400000000000000);
          if (v248) {
            sub_1002543C4(1313162579, 0xE400000000000000);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_293:
          unsigned __int16 v249 = sub_1002AF560();
          uint64_t v250 = sub_1002AF6C4(v249);
          sub_1002AF4D0(v250, v251);
          if (v252)
          {
            uint64_t v253 = sub_1002AF6C4(0x4E55u);
            sub_1002543C4(v253, v254);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_298:
          unsigned __int16 v255 = sub_1002AF560();
          uint64_t v256 = sub_1002AF67C(v255);
          sub_1002AF4D0(v256, v257);
          if (v258)
          {
            uint64_t v259 = sub_1002AF67C(0x4E55u);
            sub_1002543C4(v259, v260);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_303:
          unsigned __int16 v261 = sub_1002AF560();
          uint64_t v262 = sub_1002AF64C(v261);
          sub_1002AF4D0(v262, v263);
          if (v264)
          {
            uint64_t v265 = sub_1002AF64C(0x4E55u);
            sub_1002543C4(v265, v266);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_308:
          uint64_t v267 = sub_1002AF560();
          sub_1002AF4D0(v267 & 0xFFFF00000000FFFFLL | 0x4E4545530000, 0xE600000000000000);
          if (v268) {
            sub_1002543C4(0x4E4545534E55, 0xE600000000000000);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_313:
          sub_1002704BC();
          uint64_t v269 = sub_1002AF814();
          sub_1002AF4D0(v269, v270);
          if (v271)
          {
            uint64_t v272 = sub_1002AF814();
            sub_1002543C4(v272, v273);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
LABEL_318:
          unsigned __int16 v274 = sub_1002AF560();
          uint64_t v275 = sub_1002AF7EC(v274);
          sub_1002AF4D0(v275, v276);
          if (v277)
          {
            uint64_t v278 = sub_1002AF7EC(0x4E55u);
            sub_1002543C4(v278, v279);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
          break;
        case 2:
          goto LABEL_263;
        case 3:
          goto LABEL_268;
        case 4:
          goto LABEL_273;
        case 5:
          goto LABEL_278;
        case 6:
          goto LABEL_283;
        case 7:
          goto LABEL_288;
        case 8:
          goto LABEL_293;
        case 9:
          goto LABEL_298;
        case 0xALL:
          goto LABEL_303;
        case 0xBLL:
          goto LABEL_308;
        case 0xCLL:
          goto LABEL_313;
        case 0xDLL:
          goto LABEL_318;
        default:
          sub_1002704BC();
          sub_1002AF4D0(5000257, 0xE300000000000000);
          if (v204) {
            sub_1002543C4(5000257, 0xE300000000000000);
          }
          sub_1002541AC();
          if (!v22) {
            goto LABEL_251;
          }
          __break(1u);
          goto LABEL_215;
      }
      goto LABEL_323;
    default:
      Swift::Int v18 = *(unsigned int *)(v5 + 20);
      swift_retain();
      sub_10027E150(541279042, 0xE400000000000000);
      if (v19)
      {
        v20._uint64_t countAndFlagsBits = 541279042;
        v20._char object = (void *)0xE400000000000000;
        ByteBuffer._setStringSlowpath(_:at:)(v20, v18);
      }
      sub_100254260();
      if (v22) {
        goto LABEL_324;
      }
      sub_1002AF5E0(v21);
      if (!v22) {
        goto LABEL_346;
      }
      sub_1002AF528();
      if (!v22) {
        goto LABEL_347;
      }
LABEL_37:
      sub_1002AF400();
      sub_1002AF580();
      sub_1002AF480();
      goto LABEL_252;
  }
}

void sub_1002AEF78(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  sub_1002238FC(v8);
  if (sub_1002AD964(v8) < 2) {
    goto LABEL_12;
  }
  Swift::Int v10 = *(unsigned int *)(a3 + 20);
  sub_100210AD0(40, 0xE100000000000000, a3 + 8, *(_DWORD *)(a3 + 20));
  if (v12)
  {
    v13._uint64_t countAndFlagsBits = 40;
    v13._char object = (void *)0xE100000000000000;
    Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v13, v10);
  }
  Swift::Int v14 = v11;
  int v15 = *(_DWORD *)(a3 + 20);
  BOOL v16 = __CFADD__(v15, v11);
  int v17 = v15 + v11;
  if (v16)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(_DWORD *)(a3 + 20) = v17;
  uint64_t v18 = sub_1002ADB34(v8);
  BOOL v19 = __OFADD__(v14, v18);
  Swift::Int v20 = v14 + v18;
  if (!v19)
  {
    Swift::Int v21 = *(unsigned int *)(a3 + 20);
    sub_100210AD0(41, 0xE100000000000000, a3 + 8, *(_DWORD *)(a3 + 20));
    if (v23)
    {
      v24._uint64_t countAndFlagsBits = 41;
      v24._char object = (void *)0xE100000000000000;
      Swift::Int v22 = ByteBuffer._setStringSlowpath(_:at:)(v24, v21);
    }
    int v25 = *(_DWORD *)(a3 + 20);
    BOOL v16 = __CFADD__(v25, v22);
    int v26 = v25 + v22;
    if (v16) {
      goto LABEL_26;
    }
    *(_DWORD *)(a3 + 20) = v26;
    BOOL v19 = __OFADD__(v20, v22);
    uint64_t v27 = v20 + v22;
    if (!v19) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_12:
    uint64_t v27 = sub_1002ADB34(v8);
LABEL_13:
    BOOL v19 = __OFADD__(v7, v27);
    uint64_t v28 = v7 + v27;
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (v9 >= *(void *)(a4 + 16) - 1)
      {
        swift_retain();
        swift_retain();
        Swift::Int v33 = 0;
      }
      else
      {
        Swift::Int v29 = *(unsigned int *)(a3 + 20);
        swift_retain();
        swift_retain();
        sub_100210AD0(32, 0xE100000000000000, a3 + 8, v29);
        if (v31)
        {
          v32._uint64_t countAndFlagsBits = 32;
          v32._char object = (void *)0xE100000000000000;
          Swift::Int v30 = ByteBuffer._setStringSlowpath(_:at:)(v32, v29);
        }
        Swift::Int v33 = v30;
        int v34 = *(_DWORD *)(a3 + 20);
        BOOL v16 = __CFADD__(v34, v30);
        int v35 = v34 + v30;
        if (v16) {
          goto LABEL_27;
        }
        *(_DWORD *)(a3 + 20) = v35;
      }
      sub_1002239B4(v8);
      swift_release();
      swift_release();
      if (!__OFADD__(v28, v33))
      {
        *a5 = v28 + v33;
        return;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

Swift::Int64 __swiftcall MessageIdentificationShiftWrapper.distance(to:)(NIOIMAPCore2::MessageIdentificationShiftWrapper to)
{
  return to.rawValue - (unint64_t)v1;
}

unint64_t sub_1002AF190()
{
  unint64_t result = qword_100711748;
  if (!qword_100711748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711748);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for SearchKey(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1002238FC(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for SearchKey(unint64_t *a1)
{
  return sub_1002239B4(*a1);
}

unint64_t *assignWithCopy for SearchKey(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1002238FC(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1002239B4(v4);
  return a1;
}

unint64_t *assignWithTake for SearchKey(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1002239B4(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchKey(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x63 && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 98;
    }
    else
    {
      unsigned int v2 = ((((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7) >> 2) & 0xFFFFFF9F | (32 * (*(void *)a1 & 3))) ^ 0x7F;
      if (v2 >= 0x62) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SearchKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x62)
  {
    *(void *)unint64_t result = a2 - 99;
    if (a3 >= 0x63) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x63) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 5) & 3 | (4 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1002AF32C(void *a1)
{
  unsigned int v1 = (*a1 >> 59) & 0x1E | (*a1 >> 2) & 1;
  if (v1 <= 0x1C) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 29;
  }
}

unint64_t *sub_1002AF350(unint64_t *result, uint64_t a2)
{
  if (a2 < 0x1D) {
    unint64_t v2 = (a2 << 59) & 0xF000000000000000 | (4 * (a2 & 1)) | *result & 0xFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v2 = (8 * (a2 - 29)) | 0xE000000000000004;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SearchKey()
{
  return &type metadata for SearchKey;
}

uint64_t sub_1002AF3B0()
{
  return swift_retain();
}

uint64_t sub_1002AF400()
{
  *(void *)(v6 - 120) = v0;
  *(_DWORD *)(v6 - 112) = v1;
  *(_DWORD *)(v6 - 108) = v2;
  *(_DWORD *)(v6 - 104) = v3;
  *(_WORD *)(v6 - 100) = v4;
  *(unsigned char *)(v6 - 98) = v5;
  *(void *)(v6 - 96) = v1;
  *(void *)(v6 - 88) = v2;
  return swift_retain();
}

uint64_t sub_1002AF448@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v1 + 20) = a1;
  return sub_100267A80(v2, v3);
}

uint64_t sub_1002AF480()
{
  return swift_release_n();
}

uint64_t sub_1002AF49C()
{
  return 1414415699;
}

void sub_1002AF4D0(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_1002AF4E8()
{
  return swift_bridgeObjectRetain();
}

void sub_1002AF508()
{
  sub_100210AD0(v1, v0, v2, v3);
}

void sub_1002AF548(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_1002AF560()
{
  return 20053;
}

Swift::Int sub_1002AF580()
{
  return sub_10025E0BC((uint64_t *)(v0 - 120));
}

uint64_t sub_1002AF5A8()
{
  return 0x524F464542444955;
}

void sub_1002AF5E0(int a1@<W8>)
{
  *(_DWORD *)(v1 + 20) = a1;
}

uint64_t sub_1002AF5EC()
{
  return sub_1002ADB34(v0);
}

uint64_t sub_1002AF604()
{
  return 0x2045524F464542;
}

uint64_t sub_1002AF61C()
{
  return 0x5245544641444955;
}

uint64_t sub_1002AF634()
{
  return 0x205443454A425553;
}

uint64_t sub_1002AF64C(unsigned __int16 a1)
{
  return a1 | 0x454747414C460000;
}

uint64_t sub_1002AF664()
{
  return *(void *)((v0 & 0xFFFFFFFFFFFFFFBLL) + 0x10);
}

uint64_t sub_1002AF67C(unsigned __int16 a1)
{
  return a1 | 0x4554454C45440000;
}

uint64_t sub_1002AF694(unsigned int a1)
{
  return a1 | 0x4F46454200000000;
}

uint64_t sub_1002AF6AC()
{
  return 0x20524544414548;
}

uint64_t sub_1002AF6C4(unsigned __int16 a1)
{
  return a1 | 0x524557534E410000;
}

uint64_t sub_1002AF6DC()
{
  return 0x2044524F5759454BLL;
}

Swift::Int sub_1002AF6F4(uint64_t a1)
{
  unint64_t v3 = a1 & 0xFFFF0000FFFFFFFFLL | 0x2000000000;
  unint64_t v4 = 0xE500000000000000;
  return ByteBuffer._setStringSlowpath(_:at:)(*(Swift::String *)&v3, v1);
}

uint64_t sub_1002AF710()
{
  return 0x524F5759454B4E55;
}

uint64_t sub_1002AF728()
{
  return 0x44454747414C46;
}

unint64_t sub_1002AF740()
{
  sub_1002239B4(v3);
  sub_1002239B4(v2);
  sub_1002239B4(v0);
  return sub_1002239B4(v1);
}

uint64_t sub_1002AF77C()
{
  return swift_beginAccess();
}

uint64_t sub_1002AF798()
{
  return 0x444554454C4544;
}

uint64_t sub_1002AF7B0()
{
  return 0x4445524557534E41;
}

void sub_1002AF7C8(Swift::String a1)
{
  sub_1005E1E30(a1);
}

void sub_1002AF7E0(uint64_t a1@<X8>)
{
  *(void *)(v3 - 120) = v1;
  *(void *)(v3 - 112) = v2;
  *(void *)(v3 - 136) = a1;
}

uint64_t sub_1002AF7EC(unsigned __int16 a1)
{
  return a1 | 0x54464152440000;
}

uint64_t sub_1002AF800()
{
  return 0x2045434E4953;
}

uint64_t sub_1002AF814()
{
  return 0x5446415244;
}

uint64_t sub_1002AF828(unsigned int a1)
{
  return a1 | 0x434E495300000000;
}

uint64_t sub_1002AF83C()
{
  return swift_projectBox();
}

void sub_1002AF85C(uint64_t a1, unint64_t a2)
{
  sub_100210AD0(a1, a2, v2, v3);
}

uint64_t sub_1002AF874()
{
  return 0x544E45434552;
}

uint64_t static SearchModificationSequence.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100221B3C();
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t result = sub_100222314();
  if ((result & 1) == 0) {
    return 0;
  }
  if (((a8 | a4) & 0x8000000000000000) == 0) {
    return a8 == a4;
  }
  __break(1u);
  return result;
}

void sub_1002AF914()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 8;
  Swift::Int v3 = *(unsigned int *)(v1 + 20);
  uint64_t v4 = sub_100270508();
  sub_100210AD0(v4, v5, v2, v3);
  if (v7)
  {
    v8._uint64_t countAndFlagsBits = sub_100270508();
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v3);
  }
  Swift::Int v9 = v6;
  int v10 = *(_DWORD *)(v1 + 20);
  BOOL v11 = __CFADD__(v10, v6);
  int v12 = v10 + v6;
  if (v11)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v1 + 20) = v12;
  sub_1001F21EC();
  Swift::Int v14 = v9 + v13;
  if (__OFADD__(v9, v13))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Swift::Int v15 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(32, 0xE100000000000000, v2, *(_DWORD *)(v1 + 20));
  if (v17)
  {
    v18._uint64_t countAndFlagsBits = 32;
    v18._char object = (void *)0xE100000000000000;
    Swift::Int v16 = ByteBuffer._setStringSlowpath(_:at:)(v18, v15);
  }
  int v19 = *(_DWORD *)(v1 + 20);
  BOOL v11 = __CFADD__(v19, v16);
  int v20 = v19 + v16;
  if (v11) {
    goto LABEL_13;
  }
  *(_DWORD *)(v1 + 20) = v20;
  if (__OFADD__(v14, v16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFADD__(v14 + v16, sub_10028DBEC())) {
LABEL_15:
  }
    __break(1u);
}

void SearchModificationSequence.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::UInt64 a5)
{
}

Swift::Int SearchModificationSequence.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt64 a4)
{
  return sub_1005E3470();
}

Swift::Int sub_1002AFB84()
{
  return SearchModificationSequence.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1002AFB90(uint64_t a1)
{
  SearchModificationSequence.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_1002AFB9C()
{
  Swift::UInt64 v1 = *(void *)(v0 + 24);
  sub_1005E33F0();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100225404();
  swift_release();
  swift_release();
  swift_release();
  sub_1005E3450(v1);
  return sub_1005E3470();
}

uint64_t sub_1002AFC38(uint64_t *a1, uint64_t *a2)
{
  return static SearchModificationSequence.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void sub_1002AFC54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = a1[2];
  Swift::Int v6 = (void *)a1[3];
  uint64_t v7 = a2 + 8;
  uint64_t v8 = sub_1002AFF18();
  sub_100210AD0(v8, v9, v10, v11);
  if (v13) {
    Swift::Int v12 = sub_100238EC0();
  }
  Swift::Int v14 = v12;
  int v15 = *(_DWORD *)(a2 + 20);
  BOOL v16 = __CFADD__(v15, v12);
  int v17 = v15 + v12;
  if (v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 20) = v17;
  sub_10026BEAC(v3, v4);
  Swift::Int v19 = v14 + v18;
  if (__OFADD__(v14, v18))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v20 = sub_1002AFF18();
  sub_100210AD0(v20, v21, v22, v23);
  if (v25) {
    Swift::Int v24 = sub_100238EC0();
  }
  int v26 = *(_DWORD *)(a2 + 20);
  Swift::Int v27 = (v26 + v24);
  if (__CFADD__(v26, v24)) {
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 20) = v27;
  Swift::Int v28 = v19 + v24;
  if (__OFADD__(v19, v24))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  sub_100210AD0(v5, (unint64_t)v6, v7, v27);
  Swift::Int v30 = v29;
  char v32 = v31;
  swift_bridgeObjectRelease();
  if (v32)
  {
    v33._uint64_t countAndFlagsBits = v5;
    v33._char object = v6;
    Swift::Int v30 = ByteBuffer._setStringSlowpath(_:at:)(v33, v27);
  }
  int v34 = *(_DWORD *)(a2 + 20);
  BOOL v16 = __CFADD__(v34, v30);
  int v35 = v34 + v30;
  if (v16) {
    goto LABEL_18;
  }
  *(_DWORD *)(a2 + 20) = v35;
  if (__OFADD__(v28, v30)) {
LABEL_19:
  }
    __break(1u);
}

unint64_t sub_1002AFD94()
{
  unint64_t result = qword_100711750;
  if (!qword_100711750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711750);
  }
  return result;
}

void *initializeWithCopy for SearchModificationSequence(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchModificationSequence(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for SearchModificationSequence(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for SearchModificationSequence()
{
  return &type metadata for SearchModificationSequence;
}

uint64_t sub_1002AFF18()
{
  return 32;
}

uint64_t *sub_1002AFF2C(uint64_t *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_10000566C(&qword_10070FE78);
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1001F40C0();
  uint64_t v10 = (uint64_t *)(v9 - v8);
  uint64_t v11 = sub_10000566C(&qword_1007109E8);
  uint64_t v87 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001F40C0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_10000566C(&qword_100710528);
  uint64_t v16 = sub_100224550(v15);
  __chkstk_darwin(v16);
  sub_1002244A8();
  uint64_t v17 = sub_10000566C(&qword_100710530);
  uint64_t v18 = sub_100224550(v17);
  __chkstk_darwin(v18);
  sub_1001F40C0();
  uint64_t v21 = v20 - v19;
  type metadata accessor for SearchReturnData();
  sub_1001F3BBC();
  __chkstk_darwin(v22);
  sub_100224490();
  sub_1002983A0((uint64_t)a1, object);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_7;
    case 2u:
      goto LABEL_12;
    case 3u:
      goto LABEL_18;
    case 4u:
      goto LABEL_23;
    case 5u:
      unint64_t v34 = *(void *)object;
      char v35 = *(unsigned char *)(object + 8);
      uint64_t v36 = sub_10000566C(&qword_100710550);
      sub_10025406C(object + *(int *)(v36 + 48), v3, &qword_100710528);
      uint64_t v10 = (uint64_t *)(v4 + 8);
      Swift::Int v37 = *(unsigned int *)(v4 + 20);
      uint64_t v38 = sub_1002B2500();
      uint64_t object = 0;
      sub_100210AD0(v38, v39, v4 + 8, v37);
      if (v41)
      {
        v42._uint64_t countAndFlagsBits = sub_1002B2500();
        Swift::Int v40 = ByteBuffer._setStringSlowpath(_:at:)(v42, v37);
      }
      Swift::Int v43 = v40;
      int v44 = *(_DWORD *)(v4 + 20);
      BOOL v24 = __CFADD__(v44, v40);
      int v45 = v44 + v40;
      if (v24) {
        goto LABEL_62;
      }
      *(_DWORD *)(v4 + 20) = v45;
      sub_100291C48(v34, v35);
      Swift::Int v47 = v43 + v46;
      if (__OFADD__(v43, v46)) {
        goto LABEL_63;
      }
      Swift::Int v48 = *(unsigned int *)(v4 + 20);
      sub_100210AD0(32, 0xE100000000000000, v4 + 8, *(_DWORD *)(v4 + 20));
      if (v50)
      {
        v51._uint64_t countAndFlagsBits = 32;
        v51._uint64_t object = (void *)0xE100000000000000;
        Swift::Int v49 = ByteBuffer._setStringSlowpath(_:at:)(v51, v48);
      }
      int v52 = *(_DWORD *)(v4 + 20);
      uint64_t v6 = (v52 + v49);
      if (__CFADD__(v52, v49)) {
        goto LABEL_64;
      }
      *(_DWORD *)(v4 + 20) = v6;
      Swift::Int v53 = v47 + v49;
      if (__OFADD__(v47, v49)) {
        goto LABEL_65;
      }
      sub_10000566C(&qword_100710538);
      if ((sub_1005E3630() & 1) == 0)
      {
        sub_1005E3600();
        sub_1002C247C(v14, 0, 0xE000000000000000, 44, 0xE100000000000000, 0, 0xE000000000000000, 0, (uint64_t)sub_1002A7840, 0, v86, v87, v89, v90, v91, v92, v93, v94, v95,
          v96,
          v97,
          v98);
        uint64_t v78 = v77;
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v14, v11);
        Swift::Int v59 = v53 + v78;
        if (__OFADD__(v53, v78))
        {
LABEL_72:
          __break(1u);
          JUMPOUT(0x1002B068CLL);
        }
        Swift::UInt32 v58 = *(_DWORD *)(v4 + 20);
LABEL_54:
        Swift::Int v79 = v58;
        sub_100210AD0(41, 0xE100000000000000, v4 + 8, v58);
        if (v81)
        {
          v82._uint64_t countAndFlagsBits = 41;
          v82._uint64_t object = (void *)0xE100000000000000;
          Swift::Int v80 = ByteBuffer._setStringSlowpath(_:at:)(v82, v79);
        }
        Swift::Int v83 = v80;
        sub_1001F4120();
        if (v24) {
          goto LABEL_70;
        }
        *(_DWORD *)(v4 + 20) = v84;
        sub_1001F3A28(v3, &qword_100710528);
        BOOL v85 = __OFADD__(v59, v83);
        a1 = (uint64_t *)(v59 + v83);
        if (!v85) {
          return a1;
        }
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      sub_100210AD0(4999502, 0xE300000000000000, v4 + 8, v6);
      if (v55)
      {
        v56._uint64_t countAndFlagsBits = 4999502;
        v56._uint64_t object = (void *)0xE300000000000000;
        Swift::Int v54 = ByteBuffer._setStringSlowpath(_:at:)(v56, v6);
      }
      int v57 = *(_DWORD *)(v4 + 20);
      BOOL v24 = __CFADD__(v57, v54);
      Swift::UInt32 v58 = v57 + v54;
      if (v24) {
        goto LABEL_71;
      }
      *(_DWORD *)(v4 + 20) = v58;
      Swift::Int v59 = v53 + v54;
      if (!__OFADD__(v53, v54)) {
        goto LABEL_54;
      }
      __break(1u);
LABEL_43:
      sub_10025406C(object, (uint64_t)v10, &qword_10070FE78);
      uint64_t v60 = *v10;
      unint64_t v61 = (void *)v10[1];
      Swift::Int v62 = *(unsigned int *)(v4 + 20);
      swift_bridgeObjectRetain();
      sub_100210AD0(v60, (unint64_t)v61, v4 + 8, v62);
      Swift::Int v64 = v63;
      char v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        v67._uint64_t countAndFlagsBits = v60;
        v67._uint64_t object = v61;
        Swift::Int v64 = ByteBuffer._setStringSlowpath(_:at:)(v67, v62);
      }
      int v68 = *(_DWORD *)(v4 + 20);
      Swift::Int v69 = (v68 + v64);
      if (__CFADD__(v68, v64))
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      *(_DWORD *)(v4 + 20) = v69;
      sub_100210AD0(32, 0xE100000000000000, v4 + 8, v68 + v64);
      if (v71)
      {
        v72._uint64_t countAndFlagsBits = 32;
        v72._uint64_t object = (void *)0xE100000000000000;
        Swift::Int v70 = ByteBuffer._setStringSlowpath(_:at:)(v72, v69);
      }
      int v73 = *(_DWORD *)(v4 + 20);
      BOOL v24 = __CFADD__(v73, v70);
      int v74 = v73 + v70;
      if (v24) {
        goto LABEL_67;
      }
      *(_DWORD *)(v4 + 20) = v74;
      Swift::Int v75 = v64 + v70;
      if (__OFADD__(v64, v70))
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      sub_1002BD220((uint64_t)v10 + *(int *)(v6 + 52));
      a1 = (uint64_t *)(v75 + v76);
      if (__OFADD__(v75, v76))
      {
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      sub_1001F3A28((uint64_t)v10, &qword_10070FE78);
      return a1;
    case 6u:
      goto LABEL_43;
    default:
      uint64_t object = *(unsigned int *)object;
      sub_1002B251C();
      v99._uint64_t countAndFlagsBits = 542001485;
      v99._uint64_t object = (void *)0xE400000000000000;
      sub_1005E1E30(v99);
      sub_1005E2E90();
      sub_1002B24C8();
      sub_10021333C();
      sub_1002899F4();
      if (object) {
        a1 = (uint64_t *)sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (!v24) {
        goto LABEL_26;
      }
      __break(1u);
LABEL_7:
      uint64_t object = *(unsigned int *)object;
      sub_1002B251C();
      v100._uint64_t countAndFlagsBits = 542654797;
      v100._uint64_t object = (void *)0xE400000000000000;
      sub_1005E1E30(v100);
      sub_1005E2E90();
      sub_1002B24C8();
      sub_10021333C();
      sub_1002899F4();
      if (object) {
        a1 = (uint64_t *)sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (!v24) {
        goto LABEL_26;
      }
      __break(1u);
LABEL_12:
      sub_10025406C(object, v21, &qword_100710530);
      Swift::Int v25 = *(unsigned int *)(v4 + 20);
      sub_100210AD0(541871169, 0xE400000000000000, v4 + 8, *(_DWORD *)(v4 + 20));
      if (v27)
      {
        v28._uint64_t countAndFlagsBits = 541871169;
        v28._uint64_t object = (void *)0xE400000000000000;
        Swift::Int v26 = ByteBuffer._setStringSlowpath(_:at:)(v28, v25);
      }
      Swift::Int v29 = v26;
      int v30 = *(_DWORD *)(v4 + 20);
      BOOL v24 = __CFADD__(v30, v26);
      int v31 = v30 + v26;
      if (v24) {
        goto LABEL_60;
      }
      *(_DWORD *)(v4 + 20) = v31;
      uint64_t v4 = sub_1002A50F0(v21);
      sub_1001F3A28(v21, &qword_100710530);
      a1 = (uint64_t *)(v29 + v4);
      if (!__OFADD__(v29, v4)) {
        return a1;
      }
      __break(1u);
LABEL_18:
      uint64_t v91 = 0x20544E554F43;
      uint64_t v92 = 0xE600000000000000;
      v101._uint64_t countAndFlagsBits = sub_1005E3230();
      uint64_t object = (uint64_t)v101._object;
      a1 = &v91;
      sub_1005E1E30(v101);
      swift_bridgeObjectRelease();
      sub_1002B24C8();
      sub_10021333C();
      sub_1002899F4();
      if (object) {
        a1 = (uint64_t *)sub_100213390();
      }
      swift_bridgeObjectRelease();
      sub_1001F4120();
      if (v24)
      {
        __break(1u);
LABEL_23:
        unint64_t v32 = *(void *)object;
        sub_1002B251C();
        v102._uint64_t countAndFlagsBits = 0x20514553444F4DLL;
        v102._uint64_t object = (void *)0xE700000000000000;
        sub_1005E1E30(v102);
        sub_1005E2E90();
        sub_1002B24C8();
        sub_10021333C();
        sub_1002899F4();
        if (v32) {
          a1 = (uint64_t *)sub_100213390();
        }
        swift_bridgeObjectRelease();
        sub_1001F4120();
        if (v24) {
          goto LABEL_61;
        }
      }
LABEL_26:
      *(_DWORD *)(v4 + 20) = v23;
      return a1;
  }
}

void SearchReturnData.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v2;
  v35[1] = sub_10000566C(&qword_10070FE78);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002244A8();
  uint64_t v7 = sub_10000566C(&qword_100710528);
  uint64_t v8 = sub_100224550(v7);
  __chkstk_darwin(v8);
  sub_1002677E8();
  uint64_t v9 = sub_10000566C(&qword_100710520);
  sub_1001F3BBC();
  __chkstk_darwin(v10);
  sub_1001F40C0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_10000566C(&qword_100710530);
  uint64_t v15 = sub_100224550(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v35 - v19;
  type metadata accessor for SearchReturnData();
  sub_1001F3BBC();
  __chkstk_darwin(v21);
  sub_1001F40C0();
  uint64_t v24 = v23 - v22;
  sub_1002983A0(v4, v23 - v22);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Swift::UInt32 v25 = *(_DWORD *)v24;
      Swift::UInt v26 = 1;
      goto LABEL_5;
    case 2u:
      sub_10025406C(v24, (uint64_t)v20, &qword_100710530);
      sub_1005E3410(2uLL);
      sub_1002B10FC((uint64_t)v20, (uint64_t)v18);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v18, 1, v9) == 1)
      {
        sub_1005E3410(1uLL);
      }
      else
      {
        sub_10025406C((uint64_t)v18, v13, &qword_100710520);
        sub_1005E3410(0);
        sub_10000566C(&qword_100710538);
        sub_10022AAC0();
        sub_1005E19C0();
        sub_1001F3A28(v13, &qword_100710520);
      }
      unint64_t v34 = &qword_100710530;
      uint64_t v33 = (uint64_t)v20;
      goto LABEL_13;
    case 3u:
      Swift::UInt v28 = *(void *)v24;
      sub_1005E3410(3uLL);
      sub_1005E3410(v28);
      return;
    case 4u:
      Swift::UInt64 v27 = *(void *)v24;
      sub_1005E3410(4uLL);
      sub_1005E3450(v27);
      return;
    case 5u:
      Swift::UInt32 v30 = *(_DWORD *)v24;
      Swift::UInt32 v29 = *(_DWORD *)(v24 + 4);
      Swift::UInt v31 = *(unsigned __int8 *)(v24 + 8);
      uint64_t v32 = sub_10000566C(&qword_100710550);
      sub_10025406C(v24 + *(int *)(v32 + 48), v1, &qword_100710528);
      sub_1005E3410(5uLL);
      sub_1005E3410(v31);
      sub_1005E3440(v30);
      sub_1005E3440(v29);
      sub_10000566C(&qword_100710538);
      sub_10022AAC0();
      sub_1005E19C0();
      uint64_t v33 = v1;
      unint64_t v34 = &qword_100710528;
      goto LABEL_13;
    case 6u:
      sub_10025406C(v24, v3, &qword_10070FE78);
      sub_1005E3410(6uLL);
      sub_1005E1DB0();
      ParameterValue.hash(into:)(a1);
      uint64_t v33 = v3;
      unint64_t v34 = &qword_10070FE78;
LABEL_13:
      sub_1001F3A28(v33, v34);
      break;
    default:
      Swift::UInt32 v25 = *(_DWORD *)v24;
      Swift::UInt v26 = 0;
LABEL_5:
      sub_1005E3410(v26);
      sub_1005E3440(v25);
      break;
  }
}

uint64_t type metadata accessor for SearchReturnData()
{
  uint64_t result = qword_1007117D8;
  if (!qword_1007117D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static SearchReturnData.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v70 = sub_10000566C(&qword_10070FE78);
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  sub_1001F40C0();
  int v73 = (void *)(v6 - v5);
  uint64_t v7 = sub_10000566C(&qword_100710528);
  uint64_t v8 = sub_100224550(v7);
  __chkstk_darwin(v8);
  sub_1001F3FE0();
  uint64_t v71 = v9;
  __chkstk_darwin(v10);
  uint64_t v72 = (uint64_t)&v69 - v11;
  uint64_t v12 = sub_10000566C(&qword_100710530);
  uint64_t v13 = sub_100224550(v12);
  __chkstk_darwin(v13);
  sub_100224490();
  type metadata accessor for SearchReturnData();
  sub_1001F3BBC();
  __chkstk_darwin(v14);
  sub_1001F3FE0();
  int v74 = (void *)v15;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v69 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (uint64_t *)((char *)&v69 - v21);
  uint64_t v23 = __chkstk_darwin(v20);
  Swift::UInt32 v25 = (uint64_t *)((char *)&v69 - v24);
  uint64_t v26 = __chkstk_darwin(v23);
  Swift::UInt v28 = (char *)&v69 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  Swift::UInt v31 = (int *)((char *)&v69 - v30);
  __chkstk_darwin(v29);
  uint64_t v33 = (int *)((char *)&v69 - v32);
  uint64_t v34 = sub_10000566C(&qword_100711758);
  uint64_t v35 = sub_100224550(v34);
  __chkstk_darwin(v35);
  sub_1002677E8();
  uint64_t v37 = v2 + *(int *)(v36 + 56);
  sub_1002983A0(v75, v2);
  sub_1002983A0(v76, v37);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1002983A0(v2, (uint64_t)v31);
      if (sub_1002B24E8() != 1) {
        goto LABEL_34;
      }
      int v38 = *(_DWORD *)v37;
      int v39 = *v31;
      goto LABEL_6;
    case 2u:
      sub_1002983A0(v2, (uint64_t)v28);
      if (sub_1002B24E8() == 2)
      {
        sub_10025406C(v37, v3, &qword_100710530);
        sub_10024AB60((uint64_t)v28, v3, v41, v42, v43, v44, v45, v46, v69, v70, v71, v72, (uint64_t)v73, (uint64_t)v74, v75, v76, v77, v78, v79,
          v80);
        char v48 = v47;
        sub_1001F3A28(v3, &qword_100710530);
        uint64_t v49 = (uint64_t)v28;
        char v50 = &qword_100710530;
        goto LABEL_20;
      }
      Swift::Int v64 = &qword_100710530;
      uint64_t v65 = (uint64_t)v28;
      goto LABEL_33;
    case 3u:
      sub_1002983A0(v2, (uint64_t)v25);
      if (sub_1002B24E8() != 3) {
        goto LABEL_34;
      }
      BOOL v40 = *v25 == *(void *)v37;
      goto LABEL_14;
    case 4u:
      sub_1002983A0(v2, (uint64_t)v22);
      uint64_t v51 = *v22;
      if (sub_1002B24E8() != 4) {
        goto LABEL_34;
      }
      if ((*(void *)v37 | v51) < 0)
      {
        __break(1u);
        JUMPOUT(0x1002B1058);
      }
      BOOL v40 = *(void *)v37 == v51;
      goto LABEL_14;
    case 5u:
      sub_1002983A0(v2, (uint64_t)v19);
      uint64_t v52 = *(int *)(sub_10000566C(&qword_100710550) + 48);
      uint64_t v53 = (uint64_t)&v19[v52];
      if (sub_1002B24E8() != 5)
      {
        Swift::Int v64 = &qword_100710528;
        uint64_t v65 = (uint64_t)&v19[v52];
        goto LABEL_33;
      }
      int v54 = v19[8];
      uint64_t v55 = *(void *)v19;
      uint64_t v56 = *(void *)v37;
      char v57 = *(unsigned char *)(v37 + 8);
      uint64_t v58 = v72;
      sub_10025406C(v53, v72, &qword_100710528);
      uint64_t v59 = v37 + v52;
      uint64_t v60 = v71;
      sub_10025406C(v59, v71, &qword_100710528);
      if ((static PartialRange.__derived_enum_equals(_:_:)(v55, v54, v56, v57) & 1) == 0)
      {
        Swift::String v67 = &qword_100710528;
        sub_1001F3A28(v60, &qword_100710528);
        uint64_t v68 = v58;
        goto LABEL_39;
      }
      sub_100223B18();
      char v48 = sub_1005E35A0();
      sub_1001F3A28(v60, &qword_100710528);
      uint64_t v49 = v58;
      char v50 = &qword_100710528;
LABEL_20:
      sub_1001F3A28(v49, v50);
LABEL_21:
      sub_100298404(v2);
      return v48 & 1;
    case 6u:
      unint64_t v61 = v74;
      sub_1002983A0(v2, (uint64_t)v74);
      if (sub_1002B24E8() == 6)
      {
        Swift::Int v62 = v73;
        sub_10025406C(v37, (uint64_t)v73, &qword_10070FE78);
        BOOL v63 = *v61 == *v62 && v61[1] == v62[1];
        if (v63 || (sub_1005E3290())
          && (static ParameterValue.__derived_enum_equals(_:_:)((char *)v61 + *(int *)(v70 + 52), (char *)v62 + *(int *)(v70 + 52)) & 1) != 0)
        {
          sub_1001F3A28((uint64_t)v62, &qword_10070FE78);
          sub_1001F3A28((uint64_t)v61, &qword_10070FE78);
          sub_100298404(v2);
          char v48 = 1;
          return v48 & 1;
        }
        Swift::String v67 = &qword_10070FE78;
        sub_1001F3A28((uint64_t)v62, &qword_10070FE78);
        uint64_t v68 = (uint64_t)v61;
LABEL_39:
        sub_1001F3A28(v68, v67);
        sub_100298404(v2);
      }
      else
      {
        Swift::Int v64 = &qword_10070FE78;
        uint64_t v65 = (uint64_t)v61;
LABEL_33:
        sub_1001F3A28(v65, v64);
LABEL_34:
        sub_1001F3A28(v2, &qword_100711758);
      }
      char v48 = 0;
      return v48 & 1;
    default:
      sub_1002983A0(v2, (uint64_t)v33);
      if (sub_1002B24E8()) {
        goto LABEL_34;
      }
      int v38 = *(_DWORD *)v37;
      int v39 = *v33;
LABEL_6:
      BOOL v40 = v38 == v39;
LABEL_14:
      char v48 = v40;
      goto LABEL_21;
  }
}

Swift::Int SearchReturnData.hashValue.getter()
{
  sub_1005E33F0();
  SearchReturnData.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002B10BC()
{
  sub_1005E33F0();
  SearchReturnData.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_1002B10FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B1164()
{
  return sub_1002B2480(&qword_100711760, (void (*)(uint64_t))type metadata accessor for SearchReturnData);
}

void *initializeBufferWithCopyOfBuffer for SearchReturnData(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        uint64_t v12 = *(int *)(sub_10000566C(&qword_10070FE78) + 52);
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        type metadata accessor for ParameterValue();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v13 = *v14;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v19 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v19))
          {
            uint64_t v20 = sub_10000566C(&qword_1007104D8);
            memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
          }
          else
          {
            uint64_t v22 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v13, v14, v22);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v19);
          }
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_18;
      case 5:
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v15 = *(int *)(sub_10000566C(&qword_100710550) + 48);
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        uint64_t v8 = sub_10000566C(&qword_100710520);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v8))
        {
          uint64_t v9 = sub_10000566C(&qword_100710530);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v21 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v8);
        }
        goto LABEL_18;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for SearchReturnData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 6)
  {
    if (result == 5)
    {
      a1 += *(int *)(sub_10000566C(&qword_100710550) + 48);
LABEL_13:
      uint64_t v5 = sub_10000566C(&qword_100710538);
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      return v6(a1, v5);
    }
    if (result != 2) {
      return result;
    }
    uint64_t v3 = &qword_100710520;
LABEL_11:
    uint64_t v4 = sub_10000566C(v3);
    uint64_t result = getEnumTagSinglePayload for ClientCommand(a1, 1, v4);
    if (result) {
      return result;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  a1 += *(int *)(sub_10000566C(&qword_10070FE78) + 52);
  type metadata accessor for ParameterValue();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v3 = &qword_1007104C8;
    goto LABEL_11;
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SearchReturnData(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      uint64_t v10 = *(int *)(sub_10000566C(&qword_10070FE78) + 52);
      uint64_t v11 = (void *)((char *)a1 + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      type metadata accessor for ParameterValue();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v11 = *v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v17 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v12, 1, v17))
        {
          uint64_t v18 = sub_10000566C(&qword_1007104D8);
          memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          uint64_t v20 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v11, v12, v20);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v11, 0, 1, v17);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_16;
    case 5:
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v13 = *(int *)(sub_10000566C(&qword_100710550) + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      uint64_t v7 = sub_10000566C(&qword_100710520);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = sub_10000566C(&qword_100710530);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v19 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
      }
      goto LABEL_16;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for SearchReturnData(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100298404((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v9 = *(int *)(sub_10000566C(&qword_10070FE78) + 52);
        uint64_t v10 = (void *)((char *)a1 + v9);
        uint64_t v11 = (void *)((char *)a2 + v9);
        type metadata accessor for ParameterValue();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v10 = *v11;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v17 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v17))
          {
            uint64_t v18 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
          }
          else
          {
            uint64_t v20 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v10, v11, v20);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v17);
          }
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      case 5:
        uint64_t v12 = *a2;
        *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
        *a1 = v12;
        uint64_t v13 = *(int *)(sub_10000566C(&qword_100710550) + 48);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
LABEL_17:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        uint64_t v7 = sub_10000566C(&qword_100710520);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
        {
          uint64_t v8 = sub_10000566C(&qword_100710530);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v19 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
        }
        goto LABEL_17;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for SearchReturnData(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v9 = *(int *)(sub_10000566C(&qword_10070FE78) + 52);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for ParameterValue();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v18 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v18))
        {
          uint64_t v19 = sub_10000566C(&qword_1007104D8);
          memcpy(v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          uint64_t v20 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v10, v11, v20);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v18);
        }
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_16;
    case 5:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      uint64_t v13 = *(int *)(sub_10000566C(&qword_100710550) + 48);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
LABEL_16:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      uint64_t v7 = sub_10000566C(&qword_100710520);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = sub_10000566C(&qword_100710530);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v17 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
      }
      goto LABEL_16;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for SearchReturnData(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100298404((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v9 = *(int *)(sub_10000566C(&qword_10070FE78) + 52);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for ParameterValue();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          uint64_t v18 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v18))
          {
            uint64_t v19 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
          }
          else
          {
            uint64_t v20 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v10, v11, v20);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v18);
          }
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_17;
      case 5:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        uint64_t v13 = *(int *)(sub_10000566C(&qword_100710550) + 48);
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
LABEL_17:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        uint64_t v7 = sub_10000566C(&qword_100710520);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
        {
          uint64_t v8 = sub_10000566C(&qword_100710530);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v17 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
        }
        goto LABEL_17;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1002B2178()
{
  uint64_t v6 = (char *)&value witness table for Builtin.Int32 + 64;
  uint64_t v7 = (char *)&value witness table for Builtin.Int32 + 64;
  sub_1002B2368(319, &qword_1007117E8, (uint64_t (*)(void))sub_1002B231C, (uint64_t)&type metadata for UnknownMessageIdentifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LastCommandSet);
  if (v1 <= 0x3F)
  {
    uint64_t v8 = *(void *)(v0 - 8) + 64;
    uint64_t v9 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v10 = (char *)&value witness table for Builtin.Int64 + 64;
    sub_1002B2368(319, (unint64_t *)&qword_100710FE8, (uint64_t (*)(void))sub_100223B18, (uint64_t)&type metadata for MessageIdentificationShiftWrapper, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for RangeSet);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v11 = &v5;
      sub_1002B23D0();
      if (v4 <= 0x3F)
      {
        uint64_t v12 = *(void *)(v3 - 8) + 64;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

unint64_t sub_1002B231C()
{
  unint64_t result = qword_1007117F0;
  if (!qword_1007117F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007117F0);
  }
  return result;
}

void sub_1002B2368(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1002B23D0()
{
  if (!qword_1007117F8)
  {
    type metadata accessor for ParameterValue();
    sub_1002B2480((unint64_t *)&unk_100710C28, (void (*)(uint64_t))type metadata accessor for ParameterValue);
    unint64_t v0 = type metadata accessor for KeyValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007117F8);
    }
  }
}

uint64_t sub_1002B2480(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B24C8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B24E8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1002B2500()
{
  return 0x204C414954524150;
}

void sub_1002B251C()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
}

void sub_1002B252C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = v1;
    uint64_t v4 = v1 + 8;
    Swift::Int v5 = *(unsigned int *)(v1 + 20);
    uint64_t v6 = sub_1002B3CC4();
    sub_100210AD0(v6, v7, v4, v5);
    if (v9)
    {
      v10._uint64_t countAndFlagsBits = sub_1002B3CC4();
      Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v5);
    }
    Swift::Int v11 = v8;
    int v12 = *(_DWORD *)(v2 + 20);
    BOOL v13 = __CFADD__(v12, v8);
    int v14 = v12 + v8;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v2 + 20) = v14;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v15 = sub_1002C2A48(a1, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 0, sub_1002B2FD8, 0);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      Swift::Int v16 = v11 + v15;
      if (!__OFADD__(v11, v15))
      {
        Swift::Int v17 = *(unsigned int *)(v2 + 20);
        sub_100210AD0(41, 0xE100000000000000, v4, *(_DWORD *)(v2 + 20));
        if (v19)
        {
          v20._uint64_t countAndFlagsBits = 41;
          v20._uint64_t object = (void *)0xE100000000000000;
          Swift::Int v18 = ByteBuffer._setStringSlowpath(_:at:)(v20, v17);
        }
        int v21 = *(_DWORD *)(v2 + 20);
        BOOL v13 = __CFADD__(v21, v18);
        int v22 = v21 + v18;
        if (!v13)
        {
          *(_DWORD *)(v2 + 20) = v22;
          if (__OFADD__(v16, v18)) {
            __break(1u);
          }
          return;
        }
LABEL_15:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
}

void SearchReturnOption.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchReturnOption();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_1002244A8();
  sub_1002B2894(v3, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100271024(v2, (uint64_t)v7);
      sub_1005E3410(6uLL);
      sub_1005E1DB0();
      sub_100266530(a1);
      sub_1001F3A28((uint64_t)v7, &qword_10070FE48);
      return;
    case 2u:
      Swift::UInt v12 = 0;
      goto LABEL_9;
    case 3u:
      Swift::UInt v12 = 1;
      goto LABEL_9;
    case 4u:
      Swift::UInt v12 = 2;
      goto LABEL_9;
    case 5u:
      Swift::UInt v12 = 3;
      goto LABEL_9;
    case 6u:
      Swift::UInt v12 = 4;
LABEL_9:
      sub_1005E3410(v12);
      break;
    default:
      Swift::UInt32 v10 = *(_DWORD *)v2;
      Swift::UInt32 v9 = *(_DWORD *)(v2 + 4);
      char v11 = *(unsigned char *)(v2 + 8);
      sub_1005E3410(5uLL);
      sub_1005E3410((v11 & 1) != 0);
      sub_1005E3440(v10);
      sub_1005E3440(v9);
      break;
  }
}

uint64_t type metadata accessor for SearchReturnOption()
{
  uint64_t result = qword_1007118A0;
  if (!qword_1007118A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002B2894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchReturnOption();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL static SearchReturnOption.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10000566C(&qword_10070FE48);
  __chkstk_darwin();
  sub_100254978();
  type metadata accessor for SearchReturnOption();
  sub_1001F3BBC();
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - v7;
  sub_10000566C(&qword_100710500);
  uint64_t v9 = __chkstk_darwin();
  char v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)&v11[*(int *)(v9 + 56)];
  sub_1002B2894(a1, (uint64_t)v11);
  sub_1002B2894(a2, v12);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1002B2894((uint64_t)v11, (uint64_t)v6);
      if (sub_1002B3CAC() != 1)
      {
        sub_1001F3A28((uint64_t)v6, &qword_10070FE48);
        goto LABEL_19;
      }
      sub_100271024(v12, (uint64_t)v2);
      BOOL v14 = sub_10026624C(v6, v2);
      sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
      sub_1001F3A28((uint64_t)v6, &qword_10070FE48);
      sub_1002B2FFC((uint64_t)v11);
      return v14;
    case 2u:
      if (sub_1002B3CAC() == 2) {
        goto LABEL_17;
      }
      goto LABEL_19;
    case 3u:
      if (sub_1002B3CAC() != 3) {
        goto LABEL_19;
      }
      goto LABEL_17;
    case 4u:
      if (sub_1002B3CAC() != 4) {
        goto LABEL_19;
      }
      goto LABEL_17;
    case 5u:
      if (sub_1002B3CAC() != 5) {
        goto LABEL_19;
      }
      goto LABEL_17;
    case 6u:
      if (sub_1002B3CAC() == 6) {
        goto LABEL_17;
      }
      goto LABEL_19;
    default:
      sub_1002B2894((uint64_t)v11, (uint64_t)v8);
      uint64_t v13 = *(void *)v8;
      if (sub_1002B3CAC())
      {
LABEL_19:
        sub_1001F3A28((uint64_t)v11, &qword_100710500);
        return 0;
      }
      if (v8[8])
      {
        if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
          goto LABEL_24;
        }
      }
      else if (*(unsigned char *)(v12 + 8))
      {
        goto LABEL_24;
      }
      if (static FetchedWindow.__derived_struct_equals(_:_:)(v13, *(void *)v12))
      {
LABEL_17:
        sub_1002B2FFC((uint64_t)v11);
        return 1;
      }
LABEL_24:
      sub_1002B2FFC((uint64_t)v11);
      return 0;
  }
}

Swift::Int SearchReturnOption.hashValue.getter()
{
  sub_1005E33F0();
  SearchReturnOption.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002B2C00()
{
  sub_1005E33F0();
  SearchReturnOption.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_1002B2C40(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002244A8();
  type metadata accessor for SearchReturnOption();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_100254978();
  sub_1002B2894(a1, v1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_8;
    case 2u:
      sub_1002704BC();
      sub_1002541D8(5130573, 0xE300000000000000);
      if (v40) {
        sub_1002543C4(5130573, 0xE300000000000000);
      }
      sub_1002541AC();
      if (!v16) {
        goto LABEL_36;
      }
      __break(1u);
LABEL_18:
      sub_1002704BC();
      sub_1002541D8(5783885, 0xE300000000000000);
      if (v42) {
        sub_1002543C4(5783885, 0xE300000000000000);
      }
      sub_1002541AC();
      if (v16)
      {
        __break(1u);
LABEL_23:
        sub_1002704BC();
        sub_1002541D8(5000257, 0xE300000000000000);
        if (v43) {
          sub_1002543C4(5000257, 0xE300000000000000);
        }
        sub_1002541AC();
        if (v16)
        {
          __break(1u);
LABEL_28:
          sub_1002704BC();
          uint64_t v44 = sub_1002B3CE0();
          sub_1002541D8(v44, v45);
          if (v46)
          {
            uint64_t v47 = sub_1002B3CE0();
            sub_1002543C4(v47, v48);
          }
          sub_1002541AC();
          if (v16)
          {
            __break(1u);
LABEL_33:
            sub_1002704BC();
            sub_1002541D8(1163280723, 0xE400000000000000);
            if (v49) {
              sub_1002543C4(1163280723, 0xE400000000000000);
            }
            sub_1002541AC();
            if (v16) {
              goto LABEL_41;
            }
          }
        }
      }
LABEL_36:
      *(_DWORD *)(v1 + 20) = v41;
      return v1;
    case 3u:
      goto LABEL_18;
    case 4u:
      goto LABEL_23;
    case 5u:
      goto LABEL_28;
    case 6u:
      goto LABEL_33;
    default:
      uint64_t v2 = *(uint64_t **)v1;
      uint64_t v5 = *(unsigned __int8 *)(v1 + 8);
      Swift::Int v8 = *(unsigned int *)(v1 + 20);
      uint64_t v9 = sub_100271D6C();
      sub_100210AD0(v9, v10, v1 + 8, v8);
      if (v12)
      {
        v13._uint64_t countAndFlagsBits = sub_100271D6C();
        Swift::Int v11 = ByteBuffer._setStringSlowpath(_:at:)(v13, v8);
      }
      Swift::Int v14 = v11;
      int v15 = *(_DWORD *)(v1 + 20);
      BOOL v16 = __CFADD__(v15, v11);
      int v17 = v15 + v11;
      if (v16)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      *(_DWORD *)(v1 + 20) = v17;
      sub_100291C48((unint64_t)v2, v5);
      uint64_t v1 = v14 + v18;
      if (!__OFADD__(v14, v18)) {
        return v1;
      }
      __break(1u);
LABEL_8:
      sub_100271024(v1, (uint64_t)v2);
      uint64_t v19 = *v2;
      Swift::String v20 = (void *)v2[1];
      Swift::Int v21 = *(unsigned int *)(v3 + 20);
      swift_bridgeObjectRetain();
      sub_100210AD0(v19, (unint64_t)v20, v3 + 8, v21);
      Swift::Int v23 = v22;
      char v25 = v24;
      swift_bridgeObjectRelease();
      if (v25)
      {
        v26._uint64_t countAndFlagsBits = v19;
        v26._uint64_t object = v20;
        Swift::Int v23 = ByteBuffer._setStringSlowpath(_:at:)(v26, v21);
      }
      int v27 = *(_DWORD *)(v3 + 20);
      BOOL v16 = __CFADD__(v27, v23);
      int v28 = v27 + v23;
      if (v16) {
        goto LABEL_39;
      }
      *(_DWORD *)(v3 + 20) = v28;
      int v29 = *(_DWORD *)(v3 + 1);
      char v30 = *(unsigned char *)(v3 + 5);
      uint64_t v31 = *(void *)(v3 + 8);
      int v32 = *(_DWORD *)(v3 + 16);
      int v33 = *(_DWORD *)(v3 + 24);
      __int16 v34 = *(_WORD *)(v3 + 28);
      char v35 = *(unsigned char *)(v3 + 30);
      uint64_t v36 = *(void *)(v3 + 32);
      char v51 = *(unsigned char *)v3;
      char v53 = v30;
      int v52 = v29;
      uint64_t v54 = v31;
      int v55 = v32;
      int v56 = v28;
      int v57 = v33;
      __int16 v58 = v34;
      char v59 = v35;
      uint64_t v60 = v36;
      uint64_t v37 = (uint64_t)v2 + *(int *)(v5 + 52);
      long long v61 = *(_OWORD *)(v3 + 40);
      swift_retain();
      swift_retain();
      uint64_t v38 = sub_1001F2CE8(v37, (uint64_t)&v51, v3);
      swift_release();
      swift_release();
      BOOL v39 = __OFADD__(v23, v38);
      uint64_t v1 = v23 + v38;
      if (v39)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x1002B2FBCLL);
      }
      sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
      return v1;
  }
}

uint64_t sub_1002B2FD8(uint64_t a1)
{
  return sub_1002B2C40(a1);
}

uint64_t sub_1002B2FFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchReturnOption();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B3058()
{
  return sub_1002B3C64(&qword_100711828, (void (*)(uint64_t))type metadata accessor for SearchReturnOption);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchReturnOption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      uint64_t v8 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v9 = (uint64_t *)((char *)a1 + v8);
      unint64_t v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v11 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v10, 1, v11))
      {
        uint64_t v12 = sub_10000566C(&qword_10070FE28);
        memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v9 = *v10;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v14 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v10, 1, v14))
          {
            uint64_t v15 = sub_10000566C(&qword_1007104D8);
            memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
          }
          else
          {
            uint64_t v16 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v9, v10, v16);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v9, 0, 1, v14);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v9, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for SearchReturnOption(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v4 = type metadata accessor for ParameterValue();
    uint64_t result = getEnumTagSinglePayload for ClientCommand(v3, 1, v4);
    if (!result)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v5 = sub_10000566C(&qword_1007104C8);
        uint64_t result = getEnumTagSinglePayload for ClientCommand(v3, 1, v5);
        if (!result)
        {
          uint64_t v6 = sub_10000566C(&qword_100710538);
          uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
          return v7(v3, v6);
        }
      }
    }
  }
  return result;
}

void *initializeWithCopy for SearchReturnOption(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
    uint64_t v7 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for ParameterValue();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_10000566C(&qword_10070FE28);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v8 = *v9;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v12 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v12))
        {
          uint64_t v13 = sub_10000566C(&qword_1007104D8);
          memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          uint64_t v14 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v12);
        }
      }
      swift_storeEnumTagMultiPayload();
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for SearchReturnOption(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002B2FFC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (void *)((char *)a1 + v6);
      uint64_t v8 = (void *)((char *)a2 + v6);
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v7 = *v8;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *initializeWithTake for SearchReturnOption(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for ParameterValue();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
    {
      uint64_t v10 = sub_10000566C(&qword_10070FE28);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v11 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
        {
          uint64_t v12 = sub_10000566C(&qword_1007104D8);
          memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          uint64_t v13 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
        }
        swift_storeEnumTagMultiPayload();
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for SearchReturnOption(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002B2FFC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
          swift_storeEnumTagMultiPayload();
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1002B3BD0()
{
  sub_100267264();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1002B3C64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B3CAC()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1002B3CC4()
{
  return 0x204E525554455220;
}

uint64_t sub_1002B3CE0()
{
  return 0x544E554F43;
}

void sub_1002B3CF4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = *(unsigned int *)(a2 + 20);
  sub_100210AD0(32, 0xE100000000000000, a2 + 8, v4);
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 32;
    v7._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v5 = ByteBuffer._setStringSlowpath(_:at:)(v7, v4);
  }
  Swift::Int v8 = v5;
  int v9 = *(_DWORD *)(a2 + 20);
  BOOL v10 = __CFADD__(v9, v5);
  int v11 = v9 + v5;
  if (v10)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(a2 + 20) = v11;
  sub_1002BD220(a1);
  if (__OFADD__(v8, v12)) {
LABEL_7:
  }
    __break(1u);
}

NIOIMAPCore2::SectionSpecifier::Part __swiftcall SectionSpecifier.Part.dropLast()()
{
  return (NIOIMAPCore2::SectionSpecifier::Part)sub_1002B3E64(v0, sub_100230B4C);
}

NIOIMAPCore2::SectionSpecifier::Part __swiftcall SectionSpecifier.Part.appending(_:)(Swift::Int a1)
{
  v2.array._rawValue = v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100232524();
    v2.array._rawValue = v6;
  }
  unint64_t v4 = *((void *)v2.array._rawValue + 2);
  if (v4 >= *((void *)v2.array._rawValue + 3) >> 1)
  {
    sub_100232524();
    v2.array._rawValue = v7;
  }
  *((void *)v2.array._rawValue + 2) = v4 + 1;
  *((void *)v2.array._rawValue + v4 + 4) = a1;
  return v2;
}

NIOIMAPCore2::SectionSpecifier::Part __swiftcall SectionSpecifier.Part.dropFirst()()
{
  return (NIOIMAPCore2::SectionSpecifier::Part)sub_1002B3E64(v0, sub_1001FB054);
}

void *sub_1002B3E64(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2 = a2(1, a1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  swift_bridgeObjectRetain();
  return sub_10022EC44(v2, v4, v6, v8);
}

BOOL static SectionSpecifier.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, char a6)
{
  if ((_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a4) & 1) == 0) {
    return 0;
  }
  if (a3)
  {
    if (a3 != 1)
    {
      switch(a2)
      {
        case 1:
          sub_1002B56AC();
          return v12 && a5 == 1;
        case 2:
          sub_1002B56AC();
          return v12 && a5 == 2;
        case 3:
          sub_1002B56AC();
          return v12 && a5 == 3;
        default:
          sub_1002B56AC();
          return v12 && !a5;
      }
    }
    if (a6 != 1) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  sub_10022C948();
  sub_100219898();
  return (v10 & 1) != 0;
}

void sub_1002B3FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (uint64_t)(v3 + 8);
  Swift::Int v9 = *((unsigned int *)v4 + 5);
  sub_100210AD0(91, 0xE100000000000000, v8, *((_DWORD *)v4 + 5));
  if (v11)
  {
    v12._uint64_t countAndFlagsBits = 91;
    v12._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v10 = ByteBuffer._setStringSlowpath(_:at:)(v12, v9);
  }
  Swift::Int v13 = v10;
  int v14 = *((_DWORD *)v4 + 5);
  BOOL v15 = __CFADD__(v14, v10);
  int v16 = v14 + v10;
  if (v15)
  {
    __break(1u);
    goto LABEL_11;
  }
  *((_DWORD *)v4 + 5) = v16;
  int v17 = *(_DWORD *)(v4 + 1);
  char v18 = v4[5];
  uint64_t v19 = *((void *)v4 + 1);
  int v20 = *((_DWORD *)v4 + 4);
  int v21 = *((_DWORD *)v4 + 6);
  __int16 v22 = *((_WORD *)v4 + 14);
  char v23 = v4[30];
  uint64_t v24 = *((void *)v4 + 4);
  char v32 = *v4;
  char v34 = v18;
  int v33 = v17;
  uint64_t v35 = v19;
  int v36 = v20;
  int v37 = v16;
  int v38 = v21;
  __int16 v39 = v22;
  char v40 = v23;
  uint64_t v41 = v24;
  long long v42 = *(_OWORD *)(v4 + 40);
  swift_retain();
  swift_retain();
  uint64_t v25 = sub_1001F2E70(a1, a2, a3, &v32, v4);
  swift_release();
  swift_release();
  Swift::Int v26 = v13 + v25;
  if (__OFADD__(v13, v25))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Swift::Int v27 = *((unsigned int *)v4 + 5);
  sub_100210AD0(93, 0xE100000000000000, v8, *((_DWORD *)v4 + 5));
  if (v28)
  {
    v29._uint64_t countAndFlagsBits = 93;
    v29._uint64_t object = (void *)0xE100000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v29, v27);
  }
  sub_1001F4888();
  if (v15) {
    goto LABEL_12;
  }
  *((_DWORD *)v4 + 5) = v31;
  if (__OFADD__(v26, v30)) {
LABEL_13:
  }
    __break(1u);
}

uint64_t SectionSpecifier.init(part:kind:)(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (*(void *)(result + 16)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = a3 >= 2u;
  }
  if (v3 && a2 == 2) {
    __break(1u);
  }
  return result;
}

uint64_t SectionSpecifier.kind.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a2;
}

uint64_t SectionSpecifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_100226C94(a1, a2);
  sub_10013B5CC(a3, a4);
  SectionSpecifier.Kind.hash(into:)(a1, a3, a4);
  return sub_10013B5E0(a3, a4);
}

void static SectionSpecifier.Kind.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1 && a4 == 1) {
      goto LABEL_8;
    }
  }
  else if (!a4)
  {
LABEL_8:
    sub_100219898();
  }
}

Swift::Int SectionSpecifier.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  sub_1005E33F0();
  sub_100226C94((uint64_t)v7, a1);
  sub_10013B5CC(a2, a3);
  SectionSpecifier.Kind.hash(into:)((uint64_t)v7, a2, a3);
  sub_10013B5E0(a2, a3);
  return sub_1005E3470();
}

Swift::Int sub_1002B4354()
{
  return SectionSpecifier.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1002B4360(uint64_t a1)
{
  return SectionSpecifier.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_1002B436C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  sub_1005E33F0();
  sub_100226C94((uint64_t)v5, v1);
  sub_10013B5CC(v2, v3);
  SectionSpecifier.Kind.hash(into:)((uint64_t)v5, v2, v3);
  sub_10013B5E0(v2, v3);
  return sub_1005E3470();
}

uint64_t sub_1002B43E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B4958(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static SectionSpecifier.__derived_struct_equals(_:_:));
}

void sub_1002B43FC()
{
  static SectionSpecifier.complete = (uint64_t)&_swiftEmptyArrayStorage;
  unk_100761F90 = 0;
  byte_100761F98 = 2;
}

uint64_t *SectionSpecifier.complete.unsafeMutableAddressor()
{
  if (qword_10070FD50 != -1) {
    swift_once();
  }
  return &static SectionSpecifier.complete;
}

uint64_t static SectionSpecifier.complete.getter()
{
  if (qword_10070FD50 != -1) {
    swift_once();
  }
  sub_1002B567C();
  return sub_1002B5630();
}

void sub_1002B44CC()
{
  static SectionSpecifier.header = (uint64_t)&_swiftEmptyArrayStorage;
  *(void *)algn_100761FA8 = 1;
  byte_100761FB0 = 2;
}

uint64_t *SectionSpecifier.header.unsafeMutableAddressor()
{
  if (qword_10070FD58 != -1) {
    swift_once();
  }
  return &static SectionSpecifier.header;
}

uint64_t static SectionSpecifier.header.getter()
{
  if (qword_10070FD58 != -1) {
    swift_once();
  }
  sub_1002B567C();
  return sub_1002B5630();
}

void sub_1002B45A0()
{
  static SectionSpecifier.text = (uint64_t)&_swiftEmptyArrayStorage;
  unk_100761FC0 = 3;
  byte_100761FC8 = 2;
}

uint64_t *SectionSpecifier.text.unsafeMutableAddressor()
{
  if (qword_10070FD60 != -1) {
    swift_once();
  }
  return &static SectionSpecifier.text;
}

uint64_t static SectionSpecifier.text.getter()
{
  if (qword_10070FD60 != -1) {
    swift_once();
  }
  sub_1002B567C();
  return sub_1002B5630();
}

uint64_t static SectionSpecifier.headerFields(_:)()
{
  return sub_10022C948();
}

uint64_t static SectionSpecifier.headerFieldsNot(_:)()
{
  return sub_10022C948();
}

BOOL static SectionSpecifier.< infix(_:_:)(void *a1, uint64_t a2, unsigned __int8 a3, void *a4, unint64_t a5, unsigned __int8 a6)
{
  if (_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a4))
  {
    if (a3 > 1u)
    {
      BOOL result = 1;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          BOOL result = a6 != 2 || (a5 & 0xFFFFFFFFFFFFFFFDLL) != 0;
          break;
        case 3:
          BOOL result = 0;
          break;
        default:
          if (a5) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = a6 == 2;
          }
          BOOL result = !v14;
          break;
      }
    }
    else
    {
      return a6 > 1u && a5 > 2;
    }
  }
  else
  {
    return static SectionSpecifier.Part.< infix(_:_:)((BOOL)a1, (uint64_t)a4);
  }
  return result;
}

BOOL static SectionSpecifier.Kind.< infix(_:_:)(uint64_t a1, unsigned __int8 a2, unint64_t a3, unsigned __int8 a4)
{
  if (a2 <= 1u) {
    return a4 > 1u && a3 > 2;
  }
  BOOL result = 1;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      BOOL result = a4 != 2 || (a3 & 0xFFFFFFFFFFFFFFFDLL) != 0;
      break;
    case 3:
      BOOL result = 0;
      break;
    default:
      if (a3) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = a4 == 2;
      }
      BOOL result = !v7;
      break;
  }
  return result;
}

BOOL static SectionSpecifier.Part.< infix(_:_:)(BOOL result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 >= v2) {
    uint64_t v4 = *(void *)(result + 16);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (!v4) {
    return v2 < v3;
  }
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v5 == v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v4 - 1;
    while (v8 != v7)
    {
      uint64_t v5 = *(void *)(result + 40 + 8 * v7);
      uint64_t v6 = *(void *)(a2 + 40 + 8 * v7++);
      if (v5 != v6) {
        goto LABEL_12;
      }
    }
    return v2 < v3;
  }
  unint64_t v7 = 0;
LABEL_12:
  if (v7 < v2) {
    return v5 < v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B4958(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static SectionSpecifier.< infix(_:_:));
}

uint64_t sub_1002B4910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B4958(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1002C3750);
}

uint64_t sub_1002B4928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B4958(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1002C9788);
}

uint64_t sub_1002B4940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B4958(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1002C9960);
}

uint64_t sub_1002B4958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t SectionSpecifier.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  sub_10013B5CC(a2, a3);
  return sub_100211B34(a1, a2, a3);
}

uint64_t sub_1002B49D8()
{
  return SectionSpecifier.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

void SectionSpecifier.Part.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  sub_1005E3410(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt *)(a2 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      sub_1005E3410(v5);
      --v3;
    }
    while (v3);
  }
}

Swift::Int SectionSpecifier.Part.hashValue.getter(uint64_t a1)
{
  sub_1005E33F0();
  sub_100226C94((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_1002B4A7C()
{
  return SectionSpecifier.Part.hashValue.getter(*v0);
}

void sub_1002B4A84(uint64_t a1)
{
  SectionSpecifier.Part.hash(into:)(a1, *v1);
}

Swift::Int sub_1002B4A8C()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  SectionSpecifier.Part.hash(into:)((uint64_t)v3, v1);
  return sub_1005E3470();
}

uint64_t sub_1002B4AD0(void *a1, void *a2)
{
  return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*a1, *a2);
}

void SectionSpecifier.Kind.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    Swift::UInt v3 = 2;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    Swift::UInt v3 = 3;
LABEL_5:
    sub_1005E3410(v3);
    uint64_t v4 = sub_10022C948();
    sub_100226FB4(v4, v5);
    return;
  }
  switch(a2)
  {
    case 1:
      Swift::UInt v6 = 1;
      break;
    case 2:
      Swift::UInt v6 = 4;
      break;
    case 3:
      Swift::UInt v6 = 5;
      break;
    default:
      Swift::UInt v6 = 0;
      break;
  }
  sub_1005E3410(v6);
}

Swift::Int SectionSpecifier.Kind.hashValue.getter(uint64_t a1, char a2)
{
  sub_1005E33F0();
  SectionSpecifier.Kind.hash(into:)((uint64_t)v5, a1, a2);
  return sub_1005E3470();
}

Swift::Int sub_1002B4BE4()
{
  return SectionSpecifier.Kind.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_1002B4BF0(uint64_t a1)
{
  SectionSpecifier.Kind.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1002B4BFC()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  sub_1005E33F0();
  SectionSpecifier.Kind.hash(into:)((uint64_t)v4, v1, v2);
  return sub_1005E3470();
}

void sub_1002B4C48(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1002B4C60(BOOL *a1, uint64_t *a2)
{
  return static SectionSpecifier.Part.< infix(_:_:)(*a1, *a2);
}

BOOL sub_1002B4C6C(uint64_t *a1, BOOL *a2)
{
  return sub_1002C3718(*a1, *a2);
}

BOOL sub_1002B4C78(BOOL *a1, uint64_t *a2)
{
  return sub_1002C9874(*a1, *a2);
}

BOOL sub_1002B4C84(uint64_t *a1, BOOL *a2)
{
  return sub_1002C9938(*a1, *a2);
}

uint64_t SectionSpecifier.Part.debugDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return sub_100211CBC(v0);
}

uint64_t sub_1002B4CB8()
{
  return SectionSpecifier.Part.debugDescription.getter();
}

BOOL sub_1002B4CC0(uint64_t a1, uint64_t a2)
{
  return static SectionSpecifier.Kind.< infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_1002B4CD8(uint64_t a1, uint64_t a2)
{
  return sub_1002C384C(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_1002B4CF0(uint64_t a1, uint64_t a2)
{
  return sub_1002C9894(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_1002B4D08(uint64_t a1, uint64_t a2)
{
  return sub_1002C9A64(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

Swift::Bool __swiftcall SectionSpecifier.Part.isSubPart(of:)(NIOIMAPCore2::SectionSpecifier::Part of)
{
  unint64_t v2 = *((void *)of.array._rawValue + 2);
  unint64_t v3 = v1[2];
  if (v2 >= v3) {
    return 0;
  }
  uint64_t v4 = v1;
  if (_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(of.array._rawValue, v1)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  if (v4[4] != *((void *)of.array._rawValue + 4)) {
    return 0;
  }
  if (v2 == 1 || v3 == 1) {
    return 1;
  }
  uint64_t v8 = v4 + 5;
  Swift::Int v9 = (uint64_t *)((char *)of.array._rawValue + 40);
  unint64_t v10 = v2 - 2;
  unint64_t v11 = v3 - 2;
  do
  {
    unint64_t v12 = v10;
    uint64_t v14 = *v8++;
    uint64_t v13 = v14;
    uint64_t v15 = *v9++;
    Swift::Bool result = v13 == v15;
    if (v13 != v15) {
      break;
    }
    if (!v11) {
      break;
    }
    unint64_t v10 = v12 - 1;
    --v11;
  }
  while (v12);
  return result;
}

Swift::Bool __swiftcall SectionSpecifier.Part.isChildPart(of:)(NIOIMAPCore2::SectionSpecifier::Part of)
{
  uint64_t v2 = *((void *)of.array._rawValue + 2);
  if (*(void *)(v1 + 16) != v2 + 1) {
    return 0;
  }
  uint64_t rawValue = (uint64_t)of.array._rawValue;
  uint64_t v4 = sub_100200720(1, v1);
  LOBYTE(rawValue) = sub_1002B4E68(rawValue, rawValue + 32, 0, (2 * v2) | 1, v4, v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  return rawValue & 1;
}

uint64_t sub_1002B4E68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int64_t v11 = a4 >> 1;
  uint64_t v12 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  int64_t v8 = a8 >> 1;
  uint64_t v9 = (a8 >> 1) - a7;
  if (__OFSUB__(a8 >> 1, a7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v12 != v9)
  {
    LOBYTE(v12) = 0;
    return v12 & 1;
  }
  if (!v12 || (unint64_t v10 = (uint64_t *)(a2 + 8 * a3), v10 == (uint64_t *)(a6 + 8 * a7)))
  {
    LOBYTE(v12) = 1;
    return v12 & 1;
  }
  LOBYTE(v12) = v11 == a3;
  if (v11 != a3)
  {
    uint64_t v9 = a7;
    if (v11 > a3) {
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  uint64_t v14 = a7;
  uint64_t v9 = a7;
  while ((v12 & 1) == 0 && v8 != v9)
  {
    if (v14 < a7 || v9 >= v8)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 != *(void *)(a6 + 8 * v9)) {
      return v12 & 1;
    }
    uint64_t v13 = 0;
    ++v9;
    LOBYTE(v12) = 1;
    if (a3 != v11)
    {
      if (a3 >= v11) {
        goto LABEL_27;
      }
      LOBYTE(v12) = 0;
      unint64_t v10 = (uint64_t *)(a2 + 8 * a3);
LABEL_15:
      ++a3;
      uint64_t v13 = *v10;
      uint64_t v14 = v9;
    }
  }
  return v12 & 1;
}

Swift::Int sub_1002B4F40(Swift::Int a1, char a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v7 = 0;
  if (a3)
  {
    Swift::Int v8 = *(unsigned int *)(v3 + 20);
    sub_100210AD0(46, 0xE100000000000000, v3 + 8, *(_DWORD *)(v3 + 20));
    if (v10)
    {
      v11._uint64_t countAndFlagsBits = 46;
      v11._uint64_t object = (void *)0xE100000000000000;
      Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v11, v8);
    }
    Swift::Int v7 = v9;
    int v12 = *(_DWORD *)(v3 + 20);
    BOOL v13 = __CFADD__(v12, v9);
    int v14 = v12 + v9;
    if (v13)
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 20) = v14;
  }
  if (!a2) {
    goto LABEL_15;
  }
  if (a2 != 1) {
    goto LABEL_22;
  }
  Swift::Int v15 = *(unsigned int *)(v3 + 20);
  sub_100210AD0(0xD000000000000012, 0x80000001005E6560, v3 + 8, *(_DWORD *)(v3 + 20));
  if (v16)
  {
    v17._uint64_t countAndFlagsBits = 0xD000000000000012;
    v17._uint64_t object = (void *)0x80000001005E6560;
    ByteBuffer._setStringSlowpath(_:at:)(v17, v15);
  }
  sub_1001F4888();
  if (v13) {
    goto LABEL_41;
  }
  *(_DWORD *)(v3 + 20) = v19;
  Swift::Int v20 = v7 + v18;
  if (__OFADD__(v7, v18))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v21 = sub_1002B55FC();
  a1 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_15:
    Swift::Int v22 = *(unsigned int *)(v4 + 20);
    uint64_t v23 = sub_1002B5658();
    sub_100210AD0(v23, v24, v4 + 8, v22);
    if (v25)
    {
      v26._uint64_t countAndFlagsBits = sub_1002B5658();
      ByteBuffer._setStringSlowpath(_:at:)(v26, v22);
    }
    sub_1001F4888();
    if (!v13)
    {
      *(_DWORD *)(v4 + 20) = v28;
      Swift::Int v29 = v7 + v27;
      if (!__OFADD__(v7, v27))
      {
        uint64_t v30 = sub_1002B55FC();
        a1 = v29 + v30;
        if (!__OFADD__(v29, v30)) {
          return a1;
        }
        __break(1u);
LABEL_22:
        switch(a1)
        {
          case 1:
            Swift::Int v31 = *(unsigned int *)(v4 + 20);
            uint64_t v32 = sub_1002B5698();
            sub_100210AD0(v32, v33, v4 + 8, v31);
            if (v34)
            {
              v35._uint64_t countAndFlagsBits = sub_1002B5698();
              ByteBuffer._setStringSlowpath(_:at:)(v35, v31);
            }
            sub_1001F4888();
            if (v13) {
              goto LABEL_45;
            }
            *(_DWORD *)(v4 + 20) = v37;
            a1 = v7 + v36;
            if (!__OFADD__(v7, v36)) {
              return a1;
            }
            __break(1u);
LABEL_29:
            Swift::Int v38 = *(unsigned int *)(v4 + 20);
            sub_100210AD0(1162692941, 0xE400000000000000, v4 + 8, *(_DWORD *)(v4 + 20));
            if (v39)
            {
              v40._uint64_t countAndFlagsBits = 1162692941;
              v40._uint64_t object = (void *)0xE400000000000000;
              ByteBuffer._setStringSlowpath(_:at:)(v40, v38);
            }
            sub_1001F4888();
            if (v13) {
              goto LABEL_46;
            }
            *(_DWORD *)(v4 + 20) = v42;
            a1 = v7 + v41;
            if (!__OFADD__(v7, v41)) {
              return a1;
            }
            __break(1u);
LABEL_35:
            Swift::Int v43 = *(unsigned int *)(v4 + 20);
            sub_100210AD0(1415071060, 0xE400000000000000, v4 + 8, *(_DWORD *)(v4 + 20));
            if (v44)
            {
              v45._uint64_t countAndFlagsBits = 1415071060;
              v45._uint64_t object = (void *)0xE400000000000000;
              ByteBuffer._setStringSlowpath(_:at:)(v45, v43);
            }
            sub_1001F4888();
            if (v13) {
              goto LABEL_47;
            }
            *(_DWORD *)(v4 + 20) = v47;
            a1 = v7 + v46;
            if (!__OFADD__(v7, v46)) {
              return a1;
            }
            goto LABEL_48;
          case 2:
            goto LABEL_29;
          case 3:
            goto LABEL_35;
          default:
            return a1;
        }
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      JUMPOUT(0x1002B51D0);
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  return a1;
}

unint64_t sub_1002B51E4()
{
  unint64_t result = qword_1007118D8;
  if (!qword_1007118D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007118D8);
  }
  return result;
}

unint64_t sub_1002B5234()
{
  unint64_t result = qword_1007118E0;
  if (!qword_1007118E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007118E0);
  }
  return result;
}

unint64_t sub_1002B5284()
{
  unint64_t result = qword_1007118E8;
  if (!qword_1007118E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007118E8);
  }
  return result;
}

uint64_t destroy for SectionSpecifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 16);
  return sub_10013B5E0(v2, v3);
}

uint64_t _s12NIOIMAPCore216SectionSpecifierVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_10013B5CC(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SectionSpecifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[1];
  LOBYTE(v2) = *((unsigned char *)v2 + 16);
  sub_10013B5CC(v4, v2);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = (_BYTE)v2;
  sub_10013B5E0(v5, v6);
  return a1;
}

uint64_t assignWithTake for SectionSpecifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_10013B5E0(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionSpecifier(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionSpecifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SectionSpecifier()
{
}

void type metadata accessor for SectionSpecifier.Part()
{
}

uint64_t initializeBufferWithCopyOfBuffer for SectionSpecifier.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10013B5CC(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for SectionSpecifier.Kind(uint64_t a1)
{
  return sub_10013B5E0(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for SectionSpecifier.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10013B5CC(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_10013B5E0(v5, v6);
  return a1;
}

uint64_t assignWithTake for SectionSpecifier.Kind(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_10013B5E0(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionSpecifier.Kind(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

void type metadata accessor for SectionSpecifier.Kind()
{
}

uint64_t sub_1002B55FC()
{
  return sub_1001EE658(v1, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, v0);
}

uint64_t sub_1002B5630()
{
  sub_10013B5CC(v1, v2);
  return v0;
}

uint64_t sub_1002B5658()
{
  return 0x462E524544414548;
}

uint64_t sub_1002B567C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B5698()
{
  return 0x524544414548;
}

void sub_1002B56B8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    Swift::Int v4 = *(unsigned int *)(v1 + 20);
    sub_1002BA54C();
    if (v5)
    {
      v6._uint64_t countAndFlagsBits = 32;
      v6._uint64_t object = (void *)0xE100000000000000;
      ByteBuffer._setStringSlowpath(_:at:)(v6, v4);
    }
    sub_100254260();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v1 + 20) = v7;
      if (__OFADD__(v2, sub_1002C282C(a1, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, sub_1002B6908, 0)))
      {
        __break(1u);
      }
    }
  }
}

uint64_t QResyncParameter.knownUIDs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for QResyncParameter(0);
  return sub_1002B58A0(v1 + *(int *)(v3 + 24), a1, &qword_10070FE58);
}

uint64_t type metadata accessor for QResyncParameter(uint64_t a1)
{
  return sub_10029BE2C(a1, (uint64_t *)&unk_100711968);
}

uint64_t QResyncParameter.knownUIDs.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for QResyncParameter(0);
  return sub_1002B5930(a1, v1 + *(int *)(v3 + 24), &qword_10070FE58);
}

Swift::UInt32 (__swiftcall *QResyncParameter.knownUIDs.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t QResyncParameter.sequenceMatchData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for QResyncParameter(0);
  return sub_1002B58A0(v1 + *(int *)(v3 + 28), a1, &qword_10070FE50);
}

uint64_t sub_1002B58A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10023C43C(a1, a2, a3);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v3, v4);
  return v3;
}

uint64_t QResyncParameter.sequenceMatchData.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for QResyncParameter(0);
  return sub_1002B5930(a1, v1 + *(int *)(v3 + 28), &qword_10070FE50);
}

uint64_t sub_1002B5930(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10023C43C(a1, a2, a3);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v3, v4);
  return v3;
}

Swift::UInt32 (__swiftcall *QResyncParameter.sequenceMatchData.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t QResyncParameter.init(uidValidity:modificationSequenceValue:knownUIDs:sequenceMatchData:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for QResyncParameter(0);
  uint64_t v11 = a5 + *(int *)(v10 + 24);
  uint64_t v12 = sub_10000566C(&qword_10070FD90);
  storeEnumTagSinglePayload for ClientCommand(v11, 1, 1, v12);
  uint64_t v13 = a5 + *(int *)(v10 + 28);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  storeEnumTagSinglePayload for ClientCommand(v13, 1, 1, matched);
  *(_DWORD *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  sub_1002B5930(a3, v11, &qword_10070FE58);
  return sub_1002B5930(a4, v13, &qword_10070FE50);
}

void QResyncParameter.hash(into:)()
{
  uint64_t v3 = sub_10000566C(&qword_10070FD90);
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  sub_1002244A8();
  uint64_t v5 = sub_10000566C(&qword_10070FE58);
  uint64_t v6 = sub_100224550(v5);
  __chkstk_darwin(v6);
  sub_100224A7C();
  sub_1005E3440(*(_DWORD *)v0);
  sub_1005E3450(*(void *)(v0 + 8));
  uint64_t v7 = type metadata accessor for QResyncParameter(0);
  sub_1002B58A0(v0 + *(int *)(v7 + 24), v2, &qword_10070FE58);
  sub_100207FC4(v2, 1, v3);
  if (v8)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1002B716C(v2, v1, &qword_10070FD90);
    sub_1005E3420(1u);
    sub_10000566C(&qword_100710538);
    sub_10022AAC0();
    sub_1005E19C0();
    sub_1001F3A28(v1, &qword_10070FD90);
  }
  sub_1002673D4();
}

#error "1002B6134: call analysis failed (funcsize=359)"

Swift::Int QResyncParameter.hashValue.getter()
{
  return sub_1002B6858((void (*)(unsigned char *))QResyncParameter.hash(into:));
}

Swift::Int sub_1002B6254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B68C0(a1, a2, a3, (void (*)(unsigned char *))QResyncParameter.hash(into:));
}

void SelectParameter.hash(into:)()
{
  sub_1001FE5B4();
  uint64_t v6 = v5;
  uint64_t v7 = sub_10000566C(&qword_10070FD90);
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_100208054();
  uint64_t v18 = v9;
  uint64_t v10 = sub_10000566C(&qword_10070FE58);
  uint64_t v11 = sub_100224550(v10);
  __chkstk_darwin(v11);
  sub_100224A7C();
  uint64_t v12 = type metadata accessor for QResyncParameter(0);
  sub_1001F3BBC();
  __chkstk_darwin(v13);
  sub_1002244C0();
  sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v14);
  sub_100224260();
  type metadata accessor for SelectParameter(0);
  sub_1001F3BBC();
  __chkstk_darwin(v15);
  sub_100254960();
  sub_1002B705C(v0, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1002B70C0(v4, v1, (void (*)(void))type metadata accessor for QResyncParameter);
      sub_1005E3410(1uLL);
      sub_1005E3440(*(_DWORD *)v1);
      sub_1005E3450(*(void *)(v1 + 8));
      sub_1002B58A0(v1 + *(int *)(v12 + 24), v2, &qword_10070FE58);
      sub_100207FC4(v2, 1, v7);
      if (v17)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1002B716C(v2, v18, &qword_10070FD90);
        sub_1005E3420(1u);
        sub_10000566C(&qword_100710538);
        sub_10022AAC0();
        sub_1005E19C0();
        sub_1001F3A28(v18, &qword_10070FD90);
      }
      sub_1002673D4();
      sub_1002B7114(v1, (void (*)(void))type metadata accessor for QResyncParameter);
    }
    else
    {
      sub_1005E3410(2uLL);
    }
  }
  else
  {
    sub_1002B716C(v4, v3, &qword_10070FE48);
    sub_1005E3410(0);
    sub_1005E1DB0();
    sub_100266530(v6);
    sub_1001F3A28(v3, &qword_10070FE48);
  }
  sub_1001FE57C();
}

void static SelectParameter.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1001FE5B4();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = type metadata accessor for QResyncParameter(0);
  uint64_t v28 = sub_100224550(v27);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000566C(&qword_10070FE48);
  uint64_t v32 = sub_100224550(v31);
  __chkstk_darwin(v32);
  char v34 = (uint64_t *)((char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SelectParameter(0);
  sub_1001F3BBC();
  __chkstk_darwin(v35);
  sub_100224A54();
  uint64_t v38 = v36 - v37;
  __chkstk_darwin(v39);
  uint64_t v41 = (uint64_t *)((char *)&a9 - v40);
  uint64_t v42 = sub_10000566C(&qword_1007104F0);
  uint64_t v43 = sub_100224550(v42);
  __chkstk_darwin(v43);
  sub_1002677E8();
  uint64_t v45 = v20 + *(int *)(v44 + 56);
  sub_1002B705C(v26, v20);
  sub_1002B705C(v24, v45);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1002B705C(v20, v38);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_1002B70C0(v45, (uint64_t)v30, (void (*)(void))type metadata accessor for QResyncParameter);
        static QResyncParameter.__derived_struct_equals(_:_:)(v38, v30);
        sub_1002B7114((uint64_t)v30, (void (*)(void))type metadata accessor for QResyncParameter);
        sub_1002B7114(v38, (void (*)(void))type metadata accessor for QResyncParameter);
LABEL_12:
        sub_1002B7114(v20, (void (*)(void))type metadata accessor for SelectParameter);
        goto LABEL_13;
      }
      sub_1002B7114(v38, (void (*)(void))type metadata accessor for QResyncParameter);
    }
    else if (swift_getEnumCaseMultiPayload() == 2)
    {
      goto LABEL_12;
    }
  }
  else
  {
    sub_1002B705C(v20, (uint64_t)v41);
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1002B716C(v45, (uint64_t)v34, &qword_10070FE48);
      sub_10026624C(v41, v34);
      sub_1001F3A28((uint64_t)v34, &qword_10070FE48);
      sub_1001F3A28((uint64_t)v41, &qword_10070FE48);
      goto LABEL_12;
    }
    sub_1001F3A28((uint64_t)v41, &qword_10070FE48);
  }
  sub_1001F3A28(v20, &qword_1007104F0);
LABEL_13:
  sub_1001FE57C();
}

Swift::Int SelectParameter.hashValue.getter()
{
  return sub_1002B6858((void (*)(unsigned char *))SelectParameter.hash(into:));
}

Swift::Int sub_1002B6858(void (*a1)(unsigned char *))
{
  sub_1005E33F0();
  a1(v3);
  return sub_1005E3470();
}

Swift::Int sub_1002B68A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B68C0(a1, a2, a3, (void (*)(unsigned char *))SelectParameter.hash(into:));
}

Swift::Int sub_1002B68C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_1005E33F0();
  a4(v6);
  return sub_1005E3470();
}

void sub_1002B6908()
{
}

void sub_1002B692C()
{
  sub_1001FE5B4();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002244A8();
  uint64_t v7 = type metadata accessor for QResyncParameter(0);
  uint64_t v8 = sub_100224550(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (_DWORD *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SelectParameter(0);
  sub_1001F3BBC();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B705C(v4, (uint64_t)v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1002B70C0((uint64_t)v13, (uint64_t)v10, (void (*)(void))type metadata accessor for QResyncParameter);
      sub_1002B6C10(v10);
      sub_1002B7114((uint64_t)v10, (void (*)(void))type metadata accessor for QResyncParameter);
LABEL_13:
      sub_1001FE57C();
      return;
    }
    Swift::Int v36 = *(unsigned int *)(v2 + 20);
    uint64_t v37 = sub_1002BA530();
    sub_100210AD0(v37, v38, v2 + 8, v36);
    if (v40)
    {
      v41._uint64_t countAndFlagsBits = sub_1002BA530();
      int v39 = ByteBuffer._setStringSlowpath(_:at:)(v41, v36);
    }
    int v42 = *(_DWORD *)(v2 + 20);
    BOOL v24 = __CFADD__(v42, v39);
    int v43 = v42 + v39;
    if (!v24)
    {
      *(_DWORD *)(v2 + 20) = v43;
      goto LABEL_13;
    }
  }
  else
  {
    sub_1002B716C((uint64_t)v13, (uint64_t)v1, &qword_10070FE48);
    uint64_t v15 = *v1;
    char v16 = (void *)v1[1];
    Swift::Int v17 = *(unsigned int *)(v2 + 20);
    swift_bridgeObjectRetain();
    sub_100210AD0(v15, (unint64_t)v16, v2 + 8, v17);
    Swift::Int v19 = v18;
    char v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      v22._uint64_t countAndFlagsBits = v15;
      v22._uint64_t object = v16;
      Swift::Int v19 = ByteBuffer._setStringSlowpath(_:at:)(v22, v17);
    }
    int v23 = *(_DWORD *)(v2 + 20);
    BOOL v24 = __CFADD__(v23, v19);
    int v25 = v23 + v19;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v2 + 20) = v25;
      int v26 = *(_DWORD *)(v2 + 1);
      char v27 = *(unsigned char *)(v2 + 5);
      uint64_t v28 = *(void *)(v2 + 8);
      int v29 = *(_DWORD *)(v2 + 16);
      int v30 = *(_DWORD *)(v2 + 24);
      __int16 v31 = *(_WORD *)(v2 + 28);
      char v32 = *(unsigned char *)(v2 + 30);
      uint64_t v33 = *(void *)(v2 + 32);
      char v45 = *(unsigned char *)v2;
      char v47 = v27;
      int v46 = v26;
      uint64_t v48 = v28;
      int v49 = v29;
      int v50 = v25;
      int v51 = v30;
      __int16 v52 = v31;
      char v53 = v32;
      uint64_t v54 = v33;
      uint64_t v34 = (uint64_t)v1 + *(int *)(v5 + 52);
      long long v55 = *(_OWORD *)(v2 + 40);
      swift_retain();
      swift_retain();
      uint64_t v35 = sub_1001F2CA0(v34, (uint64_t)&v45, v2);
      swift_release();
      swift_release();
      if (!__OFADD__(v19, v35))
      {
        sub_1001F3A28((uint64_t)v1, &qword_10070FE48);
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1002B6C10(_DWORD *a1)
{
  uint64_t v2 = v1;
  v33[0]._uint64_t countAndFlagsBits = 0x20434E5953455251;
  v33[0]._uint64_t object = (void *)0xE900000000000028;
  LODWORD(v31[0]) = *a1;
  v35._uint64_t countAndFlagsBits = sub_1005E3230();
  sub_1005E1E30(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 32;
  v36._uint64_t object = (void *)0xE100000000000000;
  sub_1005E1E30(v36);
  Swift::Int v4 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(0x20434E5953455251, 0xE900000000000028, v1 + 8, v4);
  Swift::Int v6 = v5;
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8) {
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v33[0], v4);
  }
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(v1 + 20);
  BOOL v10 = __CFADD__(v9, v6);
  int v11 = v9 + v6;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_DWORD *)(v1 + 20) = v11;
  uint64_t v12 = sub_10028DBEC();
  BOOL v13 = __OFADD__(v6, v12);
  Swift::Int v14 = v6 + v12;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Swift::String v15 = *(Swift::String *)(v1 + 16);
  v33[0] = *(Swift::String *)v1;
  v33[1] = v15;
  v33[2] = *(Swift::String *)(v1 + 32);
  uint64_t v34 = *(void *)(v1 + 48);
  uint64_t v16 = type metadata accessor for QResyncParameter(0);
  uint64_t v17 = (uint64_t)a1 + *(int *)(v16 + 24);
  sub_100269888((uint64_t)v33);
  uint64_t v18 = sub_1001F3084(v17, (uint64_t)v33, v2);
  sub_1002698C0((uint64_t)v33);
  BOOL v13 = __OFADD__(v14, v18);
  Swift::Int v19 = v14 + v18;
  if (v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v20 = *(_OWORD *)(v2 + 32);
  uint64_t v32 = *(void *)(v2 + 48);
  long long v21 = *(_OWORD *)v2;
  v31[1] = *(_OWORD *)(v2 + 16);
  _OWORD v31[2] = v20;
  v31[0] = v21;
  uint64_t v22 = (uint64_t)a1 + *(int *)(v16 + 28);
  sub_100269888((uint64_t)v31);
  uint64_t v23 = sub_1001F31B8(v22, (uint64_t)v31, v2);
  sub_1002698C0((uint64_t)v31);
  Swift::Int v24 = v19 + v23;
  if (__OFADD__(v19, v23))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  Swift::Int v25 = *(unsigned int *)(v2 + 20);
  sub_100210AD0(41, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
  if (v27)
  {
    v28._uint64_t countAndFlagsBits = 41;
    v28._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v26 = ByteBuffer._setStringSlowpath(_:at:)(v28, v25);
  }
  int v29 = *(_DWORD *)(v2 + 20);
  BOOL v10 = __CFADD__(v29, v26);
  int v30 = v29 + v26;
  if (v10) {
    goto LABEL_16;
  }
  *(_DWORD *)(v2 + 20) = v30;
  if (__OFADD__(v24, v26)) {
LABEL_17:
  }
    __break(1u);
}

void sub_1002B6E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007109E8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1002244C0();
  Swift::Int v6 = *(unsigned int *)(a2 + 20);
  sub_100210AD0(32, 0xE100000000000000, a2 + 8, *(_DWORD *)(a2 + 20));
  if (v7)
  {
    v8._uint64_t countAndFlagsBits = 32;
    v8._uint64_t object = (void *)0xE100000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v8, v6);
  }
  sub_100254260();
  if (v10)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    *(_DWORD *)(a2 + 20) = v9;
    sub_10000566C(&qword_100710538);
    sub_1005E3600();
    sub_1002C247C(v2, 0, 0xE000000000000000, 44, 0xE100000000000000, 0, 0xE000000000000000, 0, (uint64_t)sub_1002D08D8, 0, v11, v12, v13, v14, v15, v16, v17, v18, v19,
      v20,
      vars0,
      vars8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  }
}

void sub_1002B6FB8(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = *(unsigned int *)(a2 + 20);
  sub_1002BA54C();
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 32;
    v7._uint64_t object = (void *)0xE100000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v7, v5);
  }
  sub_100254260();
  if (v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(a2 + 20) = v8;
  sub_1002BB1A4(a1);
  if (__OFADD__(v2, v10)) {
LABEL_7:
  }
    __break(1u);
}

uint64_t type metadata accessor for SelectParameter(uint64_t a1)
{
  return sub_10029BE2C(a1, qword_100711A28);
}

uint64_t sub_1002B705C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SelectParameter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B70C0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1001F3BBC();
  uint64_t v4 = sub_1001F4A1C();
  v5(v4);
  return a2;
}

uint64_t sub_1002B7114(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1002B716C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10023C43C(a1, a2, a3);
  sub_1001F3BBC();
  uint64_t v4 = sub_1001F4A1C();
  v5(v4);
  return v3;
}

uint64_t sub_1002B71B0()
{
  return sub_1002B7240(&qword_100711900, (void (*)(uint64_t))type metadata accessor for QResyncParameter);
}

uint64_t sub_1002B71F8()
{
  return sub_1002B7240(&qword_100711908, (void (*)(uint64_t))type metadata accessor for SelectParameter);
}

uint64_t sub_1002B7240(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for QResyncParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(a3 + 24);
    int v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = sub_10000566C(&qword_10070FD90);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_10000566C(&qword_10070FE58);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v8, v9, v13);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v10);
    }
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t matched = type metadata accessor for SequenceMatchData();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, matched))
    {
      uint64_t v18 = sub_10000566C(&qword_10070FE50);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v19))
      {
        uint64_t v20 = sub_10000566C(&qword_1007108C8);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v21 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v15, v16, v21);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v19);
      }
      uint64_t v22 = *(int *)(matched + 20);
      uint64_t v23 = &v15[v22];
      Swift::Int v24 = &v16[v22];
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v24, 1, v19))
      {
        uint64_t v25 = sub_10000566C(&qword_1007108C8);
        memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v26 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v23, v24, v26);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v23, 0, 1, v19);
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, matched);
    }
  }
  return v4;
}

uint64_t destroy for QResyncParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_10000566C(&qword_10070FD90);
  if (!getEnumTagSinglePayload for ClientCommand(v4, 1, v5))
  {
    uint64_t v6 = sub_10000566C(&qword_100710538);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v7, 1, matched);
  if (!result)
  {
    uint64_t v10 = sub_10000566C(&qword_1007108C0);
    if (!getEnumTagSinglePayload for ClientCommand(v7, 1, v10))
    {
      uint64_t v11 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v7, v11);
    }
    uint64_t v12 = v7 + *(int *)(matched + 20);
    uint64_t result = getEnumTagSinglePayload for ClientCommand(v12, 1, v10);
    if (!result)
    {
      uint64_t v13 = sub_10000566C(&qword_100710538);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      return v14(v12, v13);
    }
  }
  return result;
}

uint64_t initializeWithCopy for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000566C(&qword_10070FD90);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10000566C(&qword_10070FE58);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_10000566C(&qword_100710538);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, matched))
  {
    uint64_t v16 = sub_10000566C(&qword_10070FE50);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = sub_10000566C(&qword_1007108C0);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v17))
    {
      uint64_t v18 = sub_10000566C(&qword_1007108C8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v13, v14, v19);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v17);
    }
    uint64_t v20 = *(int *)(matched + 20);
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v22, 1, v17))
    {
      uint64_t v23 = sub_10000566C(&qword_1007108C8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v21, v22, v24);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v21, 0, 1, v17);
    }
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, matched);
  }
  return a1;
}

uint64_t assignWithCopy for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000566C(&qword_10070FD90);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)v7, 1, v9);
  int v11 = getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9);
  if (EnumTagSingle)
  {
    if (!v11)
    {
      uint64_t v12 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    sub_1001F3A28((uint64_t)v7, &qword_10070FD90);
LABEL_6:
    uint64_t v13 = sub_10000566C(&qword_10070FE58);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v25 = sub_10000566C(&qword_100710538);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 24))(v7, v8, v25);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  int v18 = getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, matched);
  int v19 = getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, matched);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v20))
      {
        uint64_t v21 = sub_10000566C(&qword_1007108C8);
        memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v30 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v15, v16, v30);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v20);
      }
      uint64_t v31 = *(int *)(matched + 20);
      uint64_t v32 = &v15[v31];
      uint64_t v33 = &v16[v31];
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v33, 1, v20))
      {
        uint64_t v34 = sub_10000566C(&qword_1007108C8);
        memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v32, v33, v35);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v32, 0, 1, v20);
      }
      uint64_t v36 = (uint64_t)v15;
      uint64_t v37 = matched;
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_1002B7114((uint64_t)v15, (void (*)(void))type metadata accessor for SequenceMatchData);
LABEL_13:
    size_t v22 = *(void *)(*(void *)(sub_10000566C(&qword_10070FE50) - 8) + 64);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    goto LABEL_14;
  }
  uint64_t v26 = sub_10000566C(&qword_1007108C0);
  int v27 = getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, v26);
  int v28 = getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v26);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v46 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 24))(v15, v16, v46);
      goto LABEL_29;
    }
    sub_1001F3A28((uint64_t)v15, &qword_1007108C0);
    goto LABEL_28;
  }
  if (v28)
  {
LABEL_28:
    uint64_t v39 = sub_10000566C(&qword_1007108C8);
    memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v29 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v15, v16, v29);
  storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v26);
LABEL_29:
  uint64_t v40 = *(int *)(matched + 20);
  uint64_t v41 = (uint64_t)&v15[v40];
  uint64_t v42 = (uint64_t)&v16[v40];
  int v43 = getEnumTagSinglePayload for ClientCommand(v41, 1, v26);
  int v44 = getEnumTagSinglePayload for ClientCommand(v42, 1, v26);
  if (v43)
  {
    if (!v44)
    {
      uint64_t v45 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v41, v42, v45);
      uint64_t v36 = v41;
      uint64_t v37 = v26;
LABEL_24:
      storeEnumTagSinglePayload for ClientCommand(v36, 0, 1, v37);
      return a1;
    }
  }
  else
  {
    if (!v44)
    {
      uint64_t v47 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v41, v42, v47);
      return a1;
    }
    sub_1001F3A28(v41, &qword_1007108C0);
  }
  size_t v22 = *(void *)(*(void *)(sub_10000566C(&qword_1007108C8) - 8) + 64);
  uint64_t v23 = (void *)v41;
  uint64_t v24 = (const void *)v42;
LABEL_14:
  memcpy(v23, v24, v22);
  return a1;
}

uint64_t initializeWithTake for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000566C(&qword_10070FD90);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10000566C(&qword_10070FE58);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = sub_10000566C(&qword_100710538);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, matched))
  {
    uint64_t v16 = sub_10000566C(&qword_10070FE50);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = sub_10000566C(&qword_1007108C0);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v17))
    {
      uint64_t v18 = sub_10000566C(&qword_1007108C8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v13, v14, v19);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v17);
    }
    uint64_t v20 = *(int *)(matched + 20);
    uint64_t v21 = &v13[v20];
    size_t v22 = &v14[v20];
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v22, 1, v17))
    {
      uint64_t v23 = sub_10000566C(&qword_1007108C8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v21, 0, 1, v17);
    }
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, matched);
  }
  return a1;
}

uint64_t assignWithTake for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  int v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000566C(&qword_10070FD90);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)v7, 1, v9);
  int v11 = getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9);
  if (EnumTagSingle)
  {
    if (!v11)
    {
      uint64_t v12 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    sub_1001F3A28((uint64_t)v7, &qword_10070FD90);
LABEL_6:
    uint64_t v13 = sub_10000566C(&qword_10070FE58);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v25 = sub_10000566C(&qword_100710538);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 40))(v7, v8, v25);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  int v18 = getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, matched);
  int v19 = getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, matched);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v20))
      {
        uint64_t v21 = sub_10000566C(&qword_1007108C8);
        memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v30 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v15, v16, v30);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v20);
      }
      uint64_t v31 = *(int *)(matched + 20);
      uint64_t v32 = &v15[v31];
      uint64_t v33 = &v16[v31];
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v33, 1, v20))
      {
        uint64_t v34 = sub_10000566C(&qword_1007108C8);
        memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v32, v33, v35);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v32, 0, 1, v20);
      }
      uint64_t v36 = (uint64_t)v15;
      uint64_t v37 = matched;
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    sub_1002B7114((uint64_t)v15, (void (*)(void))type metadata accessor for SequenceMatchData);
LABEL_13:
    size_t v22 = *(void *)(*(void *)(sub_10000566C(&qword_10070FE50) - 8) + 64);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    goto LABEL_14;
  }
  uint64_t v26 = sub_10000566C(&qword_1007108C0);
  int v27 = getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, v26);
  int v28 = getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v26);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v46 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 40))(v15, v16, v46);
      goto LABEL_29;
    }
    sub_1001F3A28((uint64_t)v15, &qword_1007108C0);
    goto LABEL_28;
  }
  if (v28)
  {
LABEL_28:
    uint64_t v39 = sub_10000566C(&qword_1007108C8);
    memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v29 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v15, v16, v29);
  storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v26);
LABEL_29:
  uint64_t v40 = *(int *)(matched + 20);
  uint64_t v41 = (uint64_t)&v15[v40];
  uint64_t v42 = (uint64_t)&v16[v40];
  int v43 = getEnumTagSinglePayload for ClientCommand(v41, 1, v26);
  int v44 = getEnumTagSinglePayload for ClientCommand(v42, 1, v26);
  if (v43)
  {
    if (!v44)
    {
      uint64_t v45 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(v41, v42, v45);
      uint64_t v36 = v41;
      uint64_t v37 = v26;
LABEL_24:
      storeEnumTagSinglePayload for ClientCommand(v36, 0, 1, v37);
      return a1;
    }
  }
  else
  {
    if (!v44)
    {
      uint64_t v47 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 40))(v41, v42, v47);
      return a1;
    }
    sub_1001F3A28(v41, &qword_1007108C0);
  }
  size_t v22 = *(void *)(*(void *)(sub_10000566C(&qword_1007108C8) - 8) + 64);
  uint64_t v23 = (void *)v41;
  uint64_t v24 = (const void *)v42;
LABEL_14:
  memcpy(v23, v24, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B87D4);
}

uint64_t sub_1002B87D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000566C(&qword_10070FE58);
  sub_1002BA518();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(int *)(a3 + 24);
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_10070FE50);
    uint64_t v9 = *(int *)(a3 + 28);
  }
  return getEnumTagSinglePayload for ClientCommand(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for QResyncParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B886C);
}

uint64_t sub_1002B886C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_10000566C(&qword_10070FE58);
  sub_1002BA518();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(int *)(a4 + 24);
  }
  else
  {
    uint64_t v10 = sub_10000566C(&qword_10070FE50);
    uint64_t v11 = *(int *)(a4 + 28);
  }
  return storeEnumTagSinglePayload for ClientCommand(a1 + v11, a2, a2, v10);
}

void sub_1002B88F8()
{
  sub_1002B89DC();
  if (v0 <= 0x3F)
  {
    sub_1002B8A38();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1002B89DC()
{
  if (!qword_100711978)
  {
    sub_10000744C(&qword_10070FD90);
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100711978);
    }
  }
}

void sub_1002B8A38()
{
  if (!qword_100711980)
  {
    type metadata accessor for SequenceMatchData();
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100711980);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SelectParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      a1[1] = a2[1];
      uint64_t v15 = type metadata accessor for QResyncParameter(0);
      uint64_t v16 = *(int *)(v15 + 24);
      uint64_t v17 = (char *)a1 + v16;
      int v18 = (char *)a2 + v16;
      uint64_t v19 = sub_10000566C(&qword_10070FD90);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = sub_10000566C(&qword_10070FE58);
        memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v21 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v17, v18, v21);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v17, 0, 1, v19);
      }
      uint64_t v22 = *(int *)(v15 + 28);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t matched = type metadata accessor for SequenceMatchData();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v24, 1, matched))
      {
        uint64_t v26 = sub_10000566C(&qword_10070FE50);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v27 = sub_10000566C(&qword_1007108C0);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v24, 1, v27))
        {
          uint64_t v28 = sub_10000566C(&qword_1007108C8);
          memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v31 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v23, v24, v31);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v23, 0, 1, v27);
        }
        uint64_t v32 = *(int *)(matched + 20);
        uint64_t v33 = &v23[v32];
        uint64_t v34 = &v24[v32];
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v34, 1, v27))
        {
          uint64_t v35 = sub_10000566C(&qword_1007108C8);
          memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          uint64_t v36 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v33, v34, v36);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v33, 0, 1, v27);
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v23, 0, 1, matched);
      }
      goto LABEL_27;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v10 = (uint64_t *)((char *)a1 + v9);
      uint64_t v11 = (uint64_t *)((char *)a2 + v9);
      uint64_t v12 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = sub_10000566C(&qword_10070FE28);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v10 = *v11;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v29 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v29))
          {
            uint64_t v30 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v30 - 8) + 64));
          }
          else
          {
            uint64_t v37 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16))(v10, v11, v37);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v29);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v12);
      }
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for SelectParameter(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v4 = type metadata accessor for ParameterValue();
    uint64_t result = getEnumTagSinglePayload for ClientCommand(v3, 1, v4);
    if (result) {
      return result;
    }
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      return swift_bridgeObjectRelease();
    }
    uint64_t v14 = sub_10000566C(&qword_1007104C8);
    uint64_t v13 = v3;
    goto LABEL_15;
  }
  uint64_t v5 = type metadata accessor for QResyncParameter(0);
  uint64_t v6 = a1 + *(int *)(v5 + 24);
  uint64_t v7 = sub_10000566C(&qword_10070FD90);
  if (!getEnumTagSinglePayload for ClientCommand(v6, 1, v7))
  {
    uint64_t v8 = sub_10000566C(&qword_100710538);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  uint64_t v9 = a1 + *(int *)(v5 + 28);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v9, 1, matched);
  if (!result)
  {
    uint64_t v11 = sub_10000566C(&qword_1007108C0);
    if (!getEnumTagSinglePayload for ClientCommand(v9, 1, v11))
    {
      uint64_t v12 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
    }
    uint64_t v3 = v9 + *(int *)(matched + 20);
    uint64_t v13 = v3;
    uint64_t v14 = v11;
LABEL_15:
    uint64_t result = getEnumTagSinglePayload for ClientCommand(v13, 1, v14);
    if (!result)
    {
      uint64_t v15 = sub_10000566C(&qword_100710538);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
      return v16(v3, v15);
    }
  }
  return result;
}

void *initializeWithCopy for SelectParameter(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v13 = type metadata accessor for QResyncParameter(0);
    uint64_t v14 = *(int *)(v13 + 24);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_10000566C(&qword_10070FD90);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = sub_10000566C(&qword_10070FE58);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v15, v16, v19);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v20 = *(int *)(v13 + 28);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t matched = type metadata accessor for SequenceMatchData();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v22, 1, matched))
    {
      uint64_t v24 = sub_10000566C(&qword_10070FE50);
      memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v25 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v22, 1, v25))
      {
        uint64_t v26 = sub_10000566C(&qword_1007108C8);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v29 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v21, v22, v29);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v21, 0, 1, v25);
      }
      uint64_t v30 = *(int *)(matched + 20);
      uint64_t v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v32, 1, v25))
      {
        uint64_t v33 = sub_10000566C(&qword_1007108C8);
        memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v34 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v31, v32, v34);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v31, 0, 1, v25);
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v21, 0, 1, matched);
    }
    goto LABEL_25;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    uint64_t v8 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for ParameterValue();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_10000566C(&qword_10070FE28);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v9 = *v10;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v27 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v10, 1, v27))
        {
          uint64_t v28 = sub_10000566C(&qword_1007104D8);
          memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v35 = sub_10000566C(&qword_100710538);
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v9, v10, v35);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v9, 0, 1, v27);
        }
      }
      swift_storeEnumTagMultiPayload();
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v9, 0, 1, v11);
    }
LABEL_25:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for SelectParameter(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002B7114((uint64_t)a1, (void (*)(void))type metadata accessor for SelectParameter);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      a1[1] = a2[1];
      uint64_t v12 = type metadata accessor for QResyncParameter(0);
      uint64_t v13 = *(int *)(v12 + 24);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_10000566C(&qword_10070FD90);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = sub_10000566C(&qword_10070FE58);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v18 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v14, v15, v18);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v14, 0, 1, v16);
      }
      uint64_t v19 = *(int *)(v12 + 28);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t matched = type metadata accessor for SequenceMatchData();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, matched))
      {
        uint64_t v23 = sub_10000566C(&qword_10070FE50);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = sub_10000566C(&qword_1007108C0);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, v24))
        {
          uint64_t v25 = sub_10000566C(&qword_1007108C8);
          memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v28 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v20, v21, v28);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, v24);
        }
        uint64_t v29 = *(int *)(matched + 20);
        uint64_t v30 = &v20[v29];
        uint64_t v31 = &v21[v29];
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v31, 1, v24))
        {
          uint64_t v32 = sub_10000566C(&qword_1007108C8);
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          uint64_t v33 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v30, v31, v33);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v30, 0, 1, v24);
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, matched);
      }
      goto LABEL_26;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v7 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v8 = (void *)((char *)a1 + v7);
      uint64_t v9 = (void *)((char *)a2 + v7);
      uint64_t v10 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = sub_10000566C(&qword_10070FE28);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v8 = *v9;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v26 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v26))
          {
            uint64_t v27 = sub_10000566C(&qword_1007104D8);
            memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
          }
          else
          {
            uint64_t v34 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v8, v9, v34);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v26);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v10);
      }
LABEL_26:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for SelectParameter(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v12 = type metadata accessor for QResyncParameter(0);
    uint64_t v13 = *(int *)(v12 + 24);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_10000566C(&qword_10070FD90);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = sub_10000566C(&qword_10070FE58);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v14, v15, v18);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = *(int *)(v12 + 28);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t matched = type metadata accessor for SequenceMatchData();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, matched))
    {
      uint64_t v23 = sub_10000566C(&qword_10070FE50);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, v24))
      {
        uint64_t v25 = sub_10000566C(&qword_1007108C8);
        memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v28 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v20, v21, v28);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, v24);
      }
      uint64_t v29 = *(int *)(matched + 20);
      uint64_t v30 = &v20[v29];
      uint64_t v31 = &v21[v29];
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v31, 1, v24))
      {
        uint64_t v32 = sub_10000566C(&qword_1007108C8);
        memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        uint64_t v33 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v30, v31, v33);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v30, 0, 1, v24);
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, matched);
    }
LABEL_26:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for ParameterValue();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_10000566C(&qword_10070FE28);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v26 = sub_10000566C(&qword_1007104C8);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v26))
        {
          uint64_t v27 = sub_10000566C(&qword_1007104D8);
          memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          uint64_t v34 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v8, v9, v34);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v26);
        }
        swift_storeEnumTagMultiPayload();
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v10);
    }
    goto LABEL_26;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithTake for SelectParameter(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002B7114((uint64_t)a1, (void (*)(void))type metadata accessor for SelectParameter);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      a1[1] = a2[1];
      uint64_t v12 = type metadata accessor for QResyncParameter(0);
      uint64_t v13 = *(int *)(v12 + 24);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_10000566C(&qword_10070FD90);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = sub_10000566C(&qword_10070FE58);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v18 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v14, v15, v18);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v14, 0, 1, v16);
      }
      uint64_t v19 = *(int *)(v12 + 28);
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t matched = type metadata accessor for SequenceMatchData();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, matched))
      {
        uint64_t v23 = sub_10000566C(&qword_10070FE50);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = sub_10000566C(&qword_1007108C0);
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v21, 1, v24))
        {
          uint64_t v25 = sub_10000566C(&qword_1007108C8);
          memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v28 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v20, v21, v28);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, v24);
        }
        uint64_t v29 = *(int *)(matched + 20);
        uint64_t v30 = &v20[v29];
        uint64_t v31 = &v21[v29];
        if (getEnumTagSinglePayload for ClientCommand((uint64_t)v31, 1, v24))
        {
          uint64_t v32 = sub_10000566C(&qword_1007108C8);
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          uint64_t v33 = sub_10000566C(&qword_100710538);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v30, v31, v33);
          storeEnumTagSinglePayload for ClientCommand((uint64_t)v30, 0, 1, v24);
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v20, 0, 1, matched);
      }
LABEL_27:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v7 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = sub_10000566C(&qword_10070FE28);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          uint64_t v26 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, v26))
          {
            uint64_t v27 = sub_10000566C(&qword_1007104D8);
            memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
          }
          else
          {
            uint64_t v34 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v8, v9, v34);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v26);
          }
          swift_storeEnumTagMultiPayload();
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v8, 0, 1, v10);
      }
      goto LABEL_27;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1002BA454()
{
  sub_100267264();
  if (v0 <= 0x3F)
  {
    type metadata accessor for QResyncParameter(319);
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

uint64_t sub_1002BA530()
{
  return 0x524F5453444E4F43;
}

void sub_1002BA54C()
{
  sub_100210AD0(32, 0xE100000000000000, v0, v1);
}

uint64_t sub_1002BA570()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005E3230();
  uint64_t v4 = (void *)v3;
  Swift::Int v5 = *(unsigned int *)(v0 + 20);
  sub_100210AD0(v2, v3, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v7)
  {
    v8._uint64_t countAndFlagsBits = v2;
    v8._uint64_t object = v4;
    Swift::Int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v5);
  }
  Swift::Int v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  int v11 = *(_DWORD *)(v1 + 20);
  BOOL v12 = __CFADD__(v11, v9);
  int v13 = v11 + v9;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 20) = v13;
    return v9;
  }
  return result;
}

void sub_1002BA628(int a1)
{
  uint64_t v2 = v1;
  if (a1 != -1)
  {
    uint64_t v3 = sub_1005E3230();
    Swift::Int v5 = (void *)v4;
    uint64_t v2 = v1 + 5;
    Swift::Int v6 = v1[5];
    sub_100210AD0(v3, v4, (uint64_t)(v1 + 2), v1[5]);
    if (v8)
    {
      v9._uint64_t countAndFlagsBits = v3;
      v9._uint64_t object = v5;
      int v7 = ByteBuffer._setStringSlowpath(_:at:)(v9, v6);
    }
    int v10 = v7;
    swift_bridgeObjectRelease();
    int v11 = *v2 + v10;
    if (!__CFADD__(*v2, v10)) {
      goto LABEL_10;
    }
    __break(1u);
  }
  Swift::UInt32 v13 = v2[5];
  v2 += 5;
  Swift::Int v12 = v13;
  sub_100210AD0(42, 0xE100000000000000, (uint64_t)(v2 - 3), v13);
  if (v15)
  {
    v16._uint64_t countAndFlagsBits = 42;
    v16._uint64_t object = (void *)0xE100000000000000;
    int v14 = ByteBuffer._setStringSlowpath(_:at:)(v16, v12);
  }
  int v11 = *v2 + v14;
  if (!__CFADD__(*v2, v14))
  {
LABEL_10:
    _DWORD *v2 = v11;
    return;
  }
  __break(1u);
}

void CredentialsRequestID.hash(into:)(uint64_t a1, Swift::UInt32 a2)
{
}

uint64_t sub_1002BA75C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_1005E3290();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1002BA7E4()
{
  return 0x65756C6156776172;
}

uint64_t sub_1002BA800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002BA75C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002BA82C()
{
  return variable initialization expression of Cache._idna();
}

IMAP2Persistence::CredentialsRequestID sub_1002BA848@<W0>(unsigned char *a1@<X8>)
{
  result.underlying = CredentialsRequestID.init()().underlying;
  *a1 = result.underlying & 1;
  return result;
}

uint64_t sub_1002BA874(uint64_t a1)
{
  unint64_t v2 = sub_1002BA9F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002BA8B0(uint64_t a1)
{
  unint64_t v2 = sub_1002BA9F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SequenceNumber.encode(to:)(void *a1)
{
  uint64_t v2 = sub_10000566C(&qword_100711A60);
  sub_10022C254();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  int v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003BCDC(a1, a1[3]);
  sub_1002BA9F0();
  sub_1005E3500();
  sub_1005E31E0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

unint64_t sub_1002BA9F0()
{
  unint64_t result = qword_100711A68;
  if (!qword_100711A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A68);
  }
  return result;
}

Swift::Int CredentialsRequestID.hashValue.getter(Swift::UInt32 a1)
{
  return sub_1005E3470();
}

uint64_t SequenceNumber.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000566C(&qword_100711A70);
  sub_10022C254();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)sub_10003BCDC(a1, a1[3]);
  sub_1002BA9F0();
  sub_1005E34E0();
  if (!v1)
  {
    uint64_t v9 = sub_1005E3100();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  }
  _s13IMAP2Behavior4TaskOwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1002BABAC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int sub_1002BABB4()
{
  return CredentialsRequestID.hashValue.getter(*v0);
}

void sub_1002BABBC(uint64_t a1)
{
  CredentialsRequestID.hash(into:)(a1, *v1);
}

uint64_t sub_1002BABC4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = SequenceNumber.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002BABF0(void *a1)
{
  return SequenceNumber.encode(to:)(a1);
}

uint64_t sub_1002BAC0C()
{
  return sub_1002C9B90(*v0);
}

uint64_t sub_1002BAC14@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t result = String.init(_:)(*(NIOIMAPCore2::Media::Subtype *)(&a2 - 1))._countAndFlagsBits;
  *a3 = result;
  return result;
}

Swift::Int64 sub_1002BAC40@<X0>(NIOIMAPCore2::MessageIdentificationShiftWrapper *a1@<X0>, Swift::Int64 *a2@<X8>)
{
  Swift::Int64 result = j___s12NIOIMAPCore233MessageIdentificationShiftWrapperV8distance2tos5Int64VAC_tF((NIOIMAPCore2::MessageIdentificationShiftWrapper)a1->rawValue);
  *a2 = result;
  return result;
}

uint64_t sub_1002BAC70@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1002C9C18(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1002BACA0(uint64_t a1, uint64_t a2, char a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  return sub_1002C9B0C(a1, a2, a3 & 1, *a4, *a5, *a6);
}

BOOL sub_1002BACCC(int *a1, int *a2)
{
  return static IUID.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_1002BACD8(unsigned int *a1, unsigned int *a2)
{
  return j___s16IMAP2Persistence8ChangeIDV1loiySbAC_ACtFZ(*a1, *a2);
}

uint64_t sub_1002BACE4(unsigned int *a1, unsigned int *a2)
{
  return sub_1002CA4CC(*a1, *a2);
}

BOOL sub_1002BACF0(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C992C(*a1, *a2);
}

BOOL sub_1002BACFC(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C9AFC(*a1, *a2);
}

unint64_t sub_1002BAD08(void *a1)
{
  a1[1] = sub_1002BAD58();
  a1[2] = sub_1002BADA4();
  a1[3] = sub_1002BADF0();
  a1[4] = sub_1002BAE3C();
  a1[5] = sub_1002BAE88();
  unint64_t result = sub_1002BAED4();
  a1[6] = result;
  return result;
}

unint64_t sub_1002BAD58()
{
  unint64_t result = qword_100711A78;
  if (!qword_100711A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A78);
  }
  return result;
}

unint64_t sub_1002BADA4()
{
  unint64_t result = qword_100711A80;
  if (!qword_100711A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A80);
  }
  return result;
}

unint64_t sub_1002BADF0()
{
  unint64_t result = qword_100711A88;
  if (!qword_100711A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A88);
  }
  return result;
}

unint64_t sub_1002BAE3C()
{
  unint64_t result = qword_100711A90;
  if (!qword_100711A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A90);
  }
  return result;
}

unint64_t sub_1002BAE88()
{
  unint64_t result = qword_100711A98;
  if (!qword_100711A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711A98);
  }
  return result;
}

unint64_t sub_1002BAED4()
{
  unint64_t result = qword_100711AA0;
  if (!qword_100711AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AA0);
  }
  return result;
}

unint64_t sub_1002BAF24()
{
  unint64_t result = qword_100711AA8;
  if (!qword_100711AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AA8);
  }
  return result;
}

void *sub_1002BAF70()
{
  return &protocol witness table for UInt32;
}

unint64_t sub_1002BAF80()
{
  unint64_t result = qword_100711AB0;
  if (!qword_100711AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SequenceNumber()
{
  return &type metadata for SequenceNumber;
}

unsigned char *storeEnumTagSinglePayload for SequenceNumber.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002BB07CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SequenceNumber.CodingKeys()
{
  return &type metadata for SequenceNumber.CodingKeys;
}

unint64_t sub_1002BB0B8()
{
  unint64_t result = qword_100711AB8;
  if (!qword_100711AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AB8);
  }
  return result;
}

unint64_t sub_1002BB108()
{
  unint64_t result = qword_100711AC0;
  if (!qword_100711AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AC0);
  }
  return result;
}

unint64_t sub_1002BB158()
{
  unint64_t result = qword_100711AC8;
  if (!qword_100711AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AC8);
  }
  return result;
}

void sub_1002BB1A4(uint64_t a1)
{
  uint64_t v3 = v1 + 8;
  sub_100210AD0(40, 0xE100000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v5) {
    Swift::Int v4 = sub_10026B440(40);
  }
  Swift::Int v6 = v4;
  int v7 = *(_DWORD *)(v1 + 20);
  BOOL v8 = __CFADD__(v7, v4);
  int v9 = v7 + v4;
  if (v8)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(v1 + 20) = v9;
  uint64_t v10 = sub_1002A4EA0(a1);
  BOOL v11 = __OFADD__(v6, v10);
  Swift::Int v12 = v6 + v10;
  if (v11)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100210AD0(32, 0xE100000000000000, v3, *(_DWORD *)(v1 + 20));
  if (v14) {
    Swift::Int v13 = sub_10026B440(32);
  }
  int v15 = *(_DWORD *)(v1 + 20);
  BOOL v8 = __CFADD__(v15, v13);
  int v16 = v15 + v13;
  if (v8) {
    goto LABEL_17;
  }
  *(_DWORD *)(v1 + 20) = v16;
  BOOL v11 = __OFADD__(v12, v13);
  Swift::Int v17 = v12 + v13;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t matched = type metadata accessor for SequenceMatchData();
  uint64_t v19 = sub_1002A4EA0(a1 + *(int *)(matched + 20));
  Swift::Int v20 = v17 + v19;
  if (__OFADD__(v17, v19))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_100210AD0(41, 0xE100000000000000, v3, *(_DWORD *)(v1 + 20));
  if (v22) {
    Swift::Int v21 = sub_10026B440(41);
  }
  int v23 = *(_DWORD *)(v1 + 20);
  BOOL v8 = __CFADD__(v23, v21);
  int v24 = v23 + v21;
  if (v8) {
    goto LABEL_20;
  }
  *(_DWORD *)(v1 + 20) = v24;
  if (__OFADD__(v20, v21)) {
LABEL_21:
  }
    __break(1u);
}

uint64_t SequenceMatchData.knownSequenceSet.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002BB2F4(v1, a1);
}

uint64_t sub_1002BB2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SequenceMatchData.knownSequenceSet.setter(uint64_t a1)
{
  return sub_1002BB364(a1, v1);
}

uint64_t sub_1002BB364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SequenceMatchData.knownUidSet.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SequenceMatchData() + 20);
  return sub_1002BB2F4(v3, a1);
}

uint64_t type metadata accessor for SequenceMatchData()
{
  uint64_t result = qword_100711B30;
  if (!qword_100711B30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SequenceMatchData.knownUidSet.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SequenceMatchData() + 20);
  return sub_1002BB364(a1, v3);
}

Swift::UInt32 (__swiftcall *SequenceMatchData.knownUidSet.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t SequenceMatchData.init(knownSequenceSet:knownUidSet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001FDF0(a1, a3, &qword_1007108C8);
  uint64_t matched = type metadata accessor for SequenceMatchData();
  return sub_10001FDF0(a2, a3 + *(int *)(matched + 20), &qword_1007108C8);
}

void SequenceMatchData.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000566C(&qword_1007108C0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000566C(&qword_1007108C8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  BOOL v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1002BB2F4(v1, (uint64_t)&v12 - v9);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v10, 1, v2) == 1)
  {
    sub_1005E3410(1uLL);
  }
  else
  {
    sub_10001FDF0((uint64_t)v10, (uint64_t)v4, &qword_1007108C0);
    sub_1005E3410(0);
    sub_10000566C(&qword_100710538);
    sub_10022AAC0();
    sub_1005E19C0();
    sub_1002BB74C((uint64_t)v4);
  }
  uint64_t matched = type metadata accessor for SequenceMatchData();
  sub_1002BB2F4(v1 + *(int *)(matched + 20), (uint64_t)v8);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v2) == 1)
  {
    sub_1005E3410(1uLL);
  }
  else
  {
    sub_10001FDF0((uint64_t)v8, (uint64_t)v4, &qword_1007108C0);
    sub_1005E3410(0);
    sub_10000566C(&qword_100710538);
    sub_10022AAC0();
    sub_1005E19C0();
    sub_1002BB74C((uint64_t)v4);
  }
}

uint64_t sub_1002BB74C(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_1007108C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

#error "1002BB7C4: call analysis failed (funcsize=24)"

Swift::Int SequenceMatchData.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002BB854()
{
  return sub_1005E3470();
}

unint64_t sub_1002BB894()
{
  unint64_t result = qword_100711AD0;
  if (!qword_100711AD0)
  {
    type metadata accessor for SequenceMatchData();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711AD0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SequenceMatchData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10000566C(&qword_1007108C0);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_10000566C(&qword_1007108C8);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      uint64_t v10 = sub_10000566C(&qword_100710538);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    Swift::Int v13 = (char *)a2 + v11;
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v13, 1, v7))
    {
      uint64_t v14 = sub_10000566C(&qword_1007108C8);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v12, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for SequenceMatchData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C0);
  if (!getEnumTagSinglePayload for ClientCommand(a1, 1, v4))
  {
    uint64_t v5 = sub_10000566C(&qword_100710538);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = sub_10000566C(&qword_100710538);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v6, v8);
  }
  return result;
}

char *initializeWithCopy for SequenceMatchData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000566C(&qword_1007108C0);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_10000566C(&qword_1007108C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_100710538);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v6))
  {
    uint64_t v12 = sub_10000566C(&qword_1007108C8);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_10000566C(&qword_100710538);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for SequenceMatchData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000566C(&qword_1007108C0);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)a1, 1, v6);
  int v8 = getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6);
  if (EnumTagSingle)
  {
    if (!v8)
    {
      uint64_t v9 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_1002BB74C((uint64_t)a1);
LABEL_6:
    uint64_t v10 = sub_10000566C(&qword_1007108C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v19 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(a1, a2, v19);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = getEnumTagSinglePayload for ClientCommand((uint64_t)&a1[v11], 1, v6);
  int v15 = getEnumTagSinglePayload for ClientCommand((uint64_t)v13, 1, v6);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v20 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24))(v12, v13, v20);
      return a1;
    }
    sub_1002BB74C((uint64_t)v12);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_10000566C(&qword_1007108C8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  uint64_t v16 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v13, v16);
  storeEnumTagSinglePayload for ClientCommand((uint64_t)v12, 0, 1, v6);
  return a1;
}

char *initializeWithTake for SequenceMatchData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000566C(&qword_1007108C0);
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_10000566C(&qword_1007108C8);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_100710538);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v6))
  {
    uint64_t v12 = sub_10000566C(&qword_1007108C8);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_10000566C(&qword_100710538);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for SequenceMatchData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000566C(&qword_1007108C0);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)a1, 1, v6);
  int v8 = getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6);
  if (EnumTagSingle)
  {
    if (!v8)
    {
      uint64_t v9 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_1002BB74C((uint64_t)a1);
LABEL_6:
    uint64_t v10 = sub_10000566C(&qword_1007108C8);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v19 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(a1, a2, v19);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = getEnumTagSinglePayload for ClientCommand((uint64_t)&a1[v11], 1, v6);
  int v15 = getEnumTagSinglePayload for ClientCommand((uint64_t)v13, 1, v6);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v20 = sub_10000566C(&qword_100710538);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v12, v13, v20);
      return a1;
    }
    sub_1002BB74C((uint64_t)v12);
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v17 = sub_10000566C(&qword_1007108C8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  uint64_t v16 = sub_10000566C(&qword_100710538);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v12, v13, v16);
  storeEnumTagSinglePayload for ClientCommand((uint64_t)v12, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SequenceMatchData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002BC37C);
}

uint64_t sub_1002BC37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C8);
  return getEnumTagSinglePayload for ClientCommand(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SequenceMatchData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002BC3DC);
}

uint64_t sub_1002BC3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007108C8);
  return storeEnumTagSinglePayload for ClientCommand(a1, a2, a2, v4);
}

void sub_1002BC42C()
{
  sub_1002BC4B8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1002BC4B8()
{
  if (!qword_1007109A8)
  {
    sub_100253F88();
    unint64_t CommandSet = type metadata accessor for LastCommandSet();
    if (!v1) {
      atomic_store(CommandSet, (unint64_t *)&qword_1007109A8);
    }
  }
}

unint64_t sub_1002BC518()
{
  unint64_t result = qword_100711B68;
  if (!qword_100711B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711B68);
  }
  return result;
}

ValueMetadata *type metadata accessor for SortData()
{
  return &type metadata for SortData;
}

void sub_1002BC574(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002244A8();
  type metadata accessor for StoreModifier();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_100254978();
  sub_1002BC958(a1, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100271024(v1, (uint64_t)v2);
    uint64_t v8 = *v2;
    uint64_t v9 = (void *)v2[1];
    Swift::Int v10 = *(unsigned int *)(v1 + 20);
    swift_bridgeObjectRetain();
    sub_100210AD0(v8, (unint64_t)v9, v1 + 8, v10);
    Swift::Int v12 = v11;
    char v14 = v13;
    swift_bridgeObjectRelease();
    if (v14)
    {
      v15._uint64_t countAndFlagsBits = v8;
      v15._uint64_t object = v9;
      Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v15, v10);
    }
    int v16 = *(_DWORD *)(v3 + 20);
    BOOL v17 = __CFADD__(v16, v12);
    int v18 = v16 + v12;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v3 + 20) = v18;
      int v19 = *(_DWORD *)(v3 + 1);
      char v20 = *(unsigned char *)(v3 + 5);
      uint64_t v21 = *(void *)(v3 + 8);
      int v22 = *(_DWORD *)(v3 + 16);
      int v23 = *(_DWORD *)(v3 + 24);
      __int16 v24 = *(_WORD *)(v3 + 28);
      char v25 = *(unsigned char *)(v3 + 30);
      uint64_t v26 = *(void *)(v3 + 32);
      char v37 = *(unsigned char *)v3;
      char v39 = v20;
      int v38 = v19;
      uint64_t v40 = v21;
      int v41 = v22;
      int v42 = v18;
      int v43 = v23;
      __int16 v44 = v24;
      char v45 = v25;
      uint64_t v46 = v26;
      uint64_t v27 = (uint64_t)v2 + *(int *)(v5 + 52);
      long long v47 = *(_OWORD *)(v3 + 40);
      swift_retain();
      swift_retain();
      uint64_t v28 = sub_1001F2CA0(v27, (uint64_t)&v37, v3);
      swift_release();
      swift_release();
      if (!__OFADD__(v12, v28))
      {
        sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
        return;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  Swift::Int v29 = *(unsigned int *)(v1 + 20);
  uint64_t v30 = sub_1002BD1FC();
  sub_100210AD0(v30, v31, v1 + 8, v29);
  if (v33)
  {
    v34._uint64_t countAndFlagsBits = sub_1002BD1FC();
    Swift::Int v32 = ByteBuffer._setStringSlowpath(_:at:)(v34, v29);
  }
  int v35 = *(_DWORD *)(v1 + 20);
  BOOL v17 = __CFADD__(v35, v32);
  int v36 = v35 + v32;
  if (v17)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)(v1 + 20) = v36;
  if (__OFADD__(v32, sub_10028DBEC())) {
LABEL_15:
  }
    __break(1u);
}

void StoreModifier.hash(into:)(uint64_t a1)
{
  sub_10000566C(&qword_10070FE48);
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StoreModifier();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1002244A8();
  sub_1002BC958(v1, (uint64_t)v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100271024((uint64_t)v2, (uint64_t)v6);
    sub_1005E3410(1uLL);
    sub_1005E1DB0();
    sub_100266530(a1);
    sub_1001F3A28((uint64_t)v6, &qword_10070FE48);
  }
  else
  {
    Swift::UInt64 v8 = *v2;
    sub_1005E3410(0);
    sub_1005E3450(v8);
  }
}

uint64_t type metadata accessor for StoreModifier()
{
  uint64_t result = qword_100711BE8;
  if (!qword_100711BE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BC958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StoreModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static StoreModifier.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000566C(&qword_10070FE48);
  __chkstk_darwin(v5 - 8);
  sub_100254978();
  type metadata accessor for StoreModifier();
  sub_1001F3BBC();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  Swift::Int v11 = (uint64_t *)((char *)&v20 - v10);
  uint64_t v12 = sub_10000566C(&qword_100710508);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  Swift::String v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = &v15[*(int *)(v13 + 56)];
  sub_1002BC958(a1, (uint64_t)v15);
  sub_1002BC958(a2, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1002BC958((uint64_t)v15, (uint64_t)v9);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_100271024((uint64_t)v16, (uint64_t)v2);
      BOOL v17 = sub_10026624C(v9, v2);
      sub_1001F3A28((uint64_t)v2, &qword_10070FE48);
      sub_1001F3A28((uint64_t)v9, &qword_10070FE48);
LABEL_7:
      sub_1002BCC6C((uint64_t)v15);
      return v17;
    }
    sub_1001F3A28((uint64_t)v9, &qword_10070FE48);
LABEL_9:
    sub_1001F3A28((uint64_t)v15, &qword_100710508);
    return 0;
  }
  sub_1002BC958((uint64_t)v15, (uint64_t)v11);
  uint64_t v18 = *v11;
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1) {
    goto LABEL_9;
  }
  if (((*(void *)v16 | v18) & 0x8000000000000000) == 0)
  {
    BOOL v17 = *(void *)v16 == v18;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

Swift::Int StoreModifier.hashValue.getter()
{
  sub_1005E33F0();
  StoreModifier.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002BCC2C()
{
  sub_1005E33F0();
  StoreModifier.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_1002BCC6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StoreModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002BCCC8()
{
  return sub_1002BD1B4(&qword_100711B70, (void (*)(uint64_t))type metadata accessor for StoreModifier);
}

void *assignWithCopy for StoreModifier(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002BCC6C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (void *)((char *)a1 + v6);
      uint64_t v8 = (void *)((char *)a2 + v6);
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          *uint64_t v7 = *v8;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
        }
        swift_storeEnumTagMultiPayload();
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *assignWithTake for StoreModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002BCC6C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10000566C(&qword_10070FE48) + 52);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for ParameterValue();
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v9))
      {
        uint64_t v10 = sub_10000566C(&qword_10070FE28);
        memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v11 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v11))
          {
            uint64_t v12 = sub_10000566C(&qword_1007104D8);
            memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          }
          else
          {
            uint64_t v13 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v11);
          }
          swift_storeEnumTagMultiPayload();
        }
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1002BD11C()
{
  sub_100267264();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1002BD1B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002BD1FC()
{
  return 0x45474E4148434E55;
}

void sub_1002BD220(uint64_t a1)
{
  uint64_t v3 = sub_10000566C(&qword_1007104D8);
  uint64_t v4 = sub_100224550(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ParameterValue();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_100254978();
  sub_1001F3974(a1, v1);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10025406C(v1, (uint64_t)v6, &qword_1007104D8);
    sub_1002A4E78((uint64_t)v6);
    sub_1001F3A28((uint64_t)v6, &qword_1007104D8);
    return;
  }
  uint64_t v8 = *(void *)v1;
  Swift::Int v9 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(40, 0xE100000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v11)
  {
    v12._uint64_t countAndFlagsBits = 40;
    v12._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v10 = ByteBuffer._setStringSlowpath(_:at:)(v12, v9);
  }
  Swift::Int v13 = v10;
  int v14 = *(_DWORD *)(v1 + 20);
  BOOL v15 = __CFADD__(v14, v10);
  int v16 = v14 + v10;
  if (v15)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_DWORD *)(v1 + 20) = v16;
  if (*(void *)(v8 + 16))
  {
    swift_retain();
    swift_retain();
    uint64_t v17 = sub_1001EE658(v8, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, v1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
  }
  BOOL v18 = __OFADD__(v13, v17);
  Swift::Int v19 = v13 + v17;
  if (v18) {
    goto LABEL_16;
  }
  Swift::Int v20 = *(unsigned int *)(v1 + 20);
  sub_100210AD0(41, 0xE100000000000000, v1 + 8, *(_DWORD *)(v1 + 20));
  if (v22)
  {
    v23._uint64_t countAndFlagsBits = 41;
    v23._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v20);
  }
  int v24 = *(_DWORD *)(v1 + 20);
  BOOL v15 = __CFADD__(v24, v21);
  int v25 = v24 + v21;
  if (v15) {
    goto LABEL_17;
  }
  *(_DWORD *)(v1 + 20) = v25;
  if (__OFADD__(v19, v21)) {
LABEL_18:
  }
    __break(1u);
}

uint64_t ParameterValue.hash(into:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000566C(&qword_1007104C8);
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_1002677E8();
  uint64_t v7 = sub_10000566C(&qword_1007104D8);
  uint64_t v8 = sub_100224550(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  char v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::Int v13 = (char *)&v19 - v12;
  type metadata accessor for ParameterValue();
  sub_1001F3BBC();
  __chkstk_darwin(v14);
  int v16 = (uint64_t *)((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F3974(v3, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v16;
    sub_1005E3410(1uLL);
    sub_100226FB4(a1, v17);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10025406C((uint64_t)v16, (uint64_t)v13, &qword_1007104D8);
    sub_1005E3410(0);
    sub_1002BD968((uint64_t)v13, (uint64_t)v11);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v5) == 1)
    {
      sub_1005E3410(1uLL);
    }
    else
    {
      sub_10025406C((uint64_t)v11, v1, &qword_1007104C8);
      sub_1005E3410(0);
      sub_10000566C(&qword_100710538);
      sub_10022AAC0();
      sub_1005E19C0();
      sub_1001F3A28(v1, &qword_1007104C8);
    }
    return sub_1001F3A28((uint64_t)v13, &qword_1007104D8);
  }
}

uint64_t type metadata accessor for ParameterValue()
{
  uint64_t result = qword_100711C98;
  if (!qword_100711C98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

#error "1002BD898: call analysis failed (funcsize=130)"

Swift::Int ParameterValue.hashValue.getter()
{
  sub_1005E33F0();
  ParameterValue.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002BD928()
{
  sub_1005E33F0();
  ParameterValue.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

uint64_t sub_1002BD968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007104D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BD9D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ParameterValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002BDA30()
{
  unint64_t result = qword_100711C20;
  if (!qword_100711C20)
  {
    type metadata accessor for ParameterValue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711C20);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ParameterValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = sub_10000566C(&qword_1007104D8);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v9 = sub_10000566C(&qword_100710538);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v7);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ParameterValue(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = sub_10000566C(&qword_1007104C8);
    uint64_t result = getEnumTagSinglePayload for ClientCommand(a1, 1, v3);
    if (!result)
    {
      uint64_t v4 = sub_10000566C(&qword_100710538);
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      return v5(a1, v4);
    }
  }
  return result;
}

void *initializeWithCopy for ParameterValue(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = sub_10000566C(&qword_1007104C8);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = sub_10000566C(&qword_1007104D8);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v4);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ParameterValue(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1002BD9D0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_10000566C(&qword_1007104D8);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v4);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ParameterValue(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_10000566C(&qword_1007104C8);
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6))
    {
      uint64_t v7 = sub_10000566C(&qword_1007104D8);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = sub_10000566C(&qword_100710538);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ParameterValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002BD9D0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_10000566C(&qword_1007104D8);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = sub_10000566C(&qword_100710538);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_1002BE144()
{
  sub_1002BE1D8();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_1002BE1D8()
{
  if (!qword_100710998)
  {
    sub_100253EDC();
    unint64_t CommandSet = type metadata accessor for LastCommandSet();
    if (!v1) {
      atomic_store(CommandSet, (unint64_t *)&qword_100710998);
    }
  }
}

void sub_1002BE234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Swift::Int v7 = *(unsigned int *)(v3 + 20);
    uint64_t v8 = sub_10023C490();
    sub_100210AD0(v8, v9, v3 + 8, v7);
    if (v11)
    {
      v12._uint64_t countAndFlagsBits = sub_10023C490();
      Swift::Int v10 = ByteBuffer._setStringSlowpath(_:at:)(v12, v7);
    }
    int v13 = *(_DWORD *)(v3 + 20);
    BOOL v14 = __CFADD__(v13, v10);
    int v15 = v13 + v10;
    if (v14)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v3 + 20) = v15;
      if (__OFADD__(v10, sub_1001F2294(a1, a2, a3, 0, 0xE000000000000000, 32, 0xE100000000000000, 0, 0xE000000000000000, 1, v3)))
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1002BE318(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  Swift::Int v6 = *(unsigned int *)(v1 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(v4, (unint64_t)v5, v1 + 8, v6);
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
    v12._uint64_t countAndFlagsBits = v4;
    v12._uint64_t object = v5;
    uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v12, v6);
    uint64_t v8 = result;
  }
  int v13 = *(_DWORD *)(v2 + 20);
  BOOL v14 = __CFADD__(v13, v8);
  int v15 = v13 + v8;
  if (v14)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(v2 + 20) = v15;
  int v16 = *(_DWORD *)(v2 + 1);
  char v17 = *(unsigned char *)(v2 + 5);
  uint64_t v18 = *(void *)(v2 + 8);
  int v19 = *(_DWORD *)(v2 + 16);
  int v20 = *(_DWORD *)(v2 + 24);
  __int16 v21 = *(_WORD *)(v2 + 28);
  char v22 = *(unsigned char *)(v2 + 30);
  uint64_t v23 = *(void *)(v2 + 32);
  char v26 = *(unsigned char *)v2;
  char v28 = v17;
  int v27 = v16;
  uint64_t v29 = v18;
  int v30 = v19;
  int v31 = v15;
  int v32 = v20;
  __int16 v33 = v21;
  char v34 = v22;
  uint64_t v35 = v23;
  long long v36 = *(_OWORD *)(v2 + 40);
  uint64_t v24 = (uint64_t)a1 + *(int *)(sub_10000566C(&qword_10070FE48) + 52);
  swift_retain();
  swift_retain();
  uint64_t v25 = sub_1001F2CA0(v24, (uint64_t)&v26, v2);
  swift_release();
  swift_release();
  uint64_t result = v8 + v25;
  if (__OFADD__(v8, v25)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void sub_1002BE46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  Swift::Int v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = sub_10023C490();
  sub_100210AD0(v6, v7, v4, v5);
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = sub_10023C490();
    Swift::Int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v5);
  }
  Swift::Int v11 = v8;
  int v12 = *(_DWORD *)(a2 + 20);
  BOOL v13 = __CFADD__(v12, v8);
  int v14 = v12 + v8;
  if (v13)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(a2 + 20) = v14;
  sub_1002BD220(a1);
  if (__OFADD__(v11, v15)) {
LABEL_7:
  }
    __break(1u);
}

uint64_t sub_1002BE504()
{
  uint64_t v1 = v0;
  v12._uint64_t countAndFlagsBits = 0x3D4449553B2FLL;
  v12._uint64_t object = (void *)0xE600000000000000;
  sub_1005E1E30(v12);
  sub_1005E2E90();
  Swift::Int v2 = *(unsigned int *)(v0 + 20);
  swift_bridgeObjectRetain();
  sub_100210AD0(0, 0xE000000000000000, v0 + 8, v2);
  Swift::Int v4 = v3;
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 0;
    v7._uint64_t object = (void *)0xE000000000000000;
    Swift::Int v4 = ByteBuffer._setStringSlowpath(_:at:)(v7, v2);
  }
  uint64_t result = swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(v1 + 20);
  BOOL v10 = __CFADD__(v9, v4);
  int v11 = v9 + v4;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 20) = v11;
    return v4;
  }
  return result;
}

unint64_t sub_1002BE60C()
{
  unint64_t result = qword_100711CD0;
  if (!qword_100711CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711CD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidUID()
{
  return &type metadata for InvalidUID;
}

ValueMetadata *type metadata accessor for IUID()
{
  return &type metadata for IUID;
}

uint64_t sub_1002BE678(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  char v5 = v3;
  sub_1001FE450();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_1002244D8();
  (*(void (**)(uint64_t))(v11 + 80))(0xFFFFFFFFLL);
  char v12 = sub_1005E1BC0();
  (*(void (**)(uint64_t, Swift::Int))(v9 + 8))(v4, a2);
  if (v12)
  {
    Swift::UInt32 v13 = v5[5];
    v5 += 5;
    a2 = v13;
    a3 = 0;
    sub_100210AD0(42, 0xE100000000000000, (uint64_t)(v5 - 3), v13);
    if (v15)
    {
      v16._uint64_t countAndFlagsBits = 42;
      v16._uint64_t object = (void *)0xE100000000000000;
      Swift::Int v14 = ByteBuffer._setStringSlowpath(_:at:)(v16, a2);
    }
    Swift::Int v17 = v14;
    int v18 = *v5 + v14;
    if (!__CFADD__(*v5, v14)) {
      goto LABEL_10;
    }
    __break(1u);
  }
  (*(void (**)(Swift::Int, uint64_t))(a3 + 56))(a2, a3);
  uint64_t v19 = sub_1005E3230();
  __int16 v21 = (void *)v20;
  Swift::UInt32 v23 = v5[5];
  v5 += 5;
  Swift::Int v22 = v23;
  sub_100210AD0(v19, v20, (uint64_t)(v5 - 3), v23);
  if (v25)
  {
    v26._uint64_t countAndFlagsBits = v19;
    v26._uint64_t object = v21;
    Swift::Int v24 = ByteBuffer._setStringSlowpath(_:at:)(v26, v22);
  }
  Swift::Int v17 = v24;
  uint64_t result = swift_bridgeObjectRelease();
  int v18 = *v5 + v17;
  if (!__CFADD__(*v5, v17))
  {
LABEL_10:
    *char v5 = v18;
    return v17;
  }
  __break(1u);
  return result;
}

#error "1002BE86C: call analysis failed (funcsize=15)"

uint64_t MessageIdentifier.init(integerLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

unint64_t MessageIdentifier.distance(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56);
  unsigned int v6 = v5(a2, a3);
  return v6 - (unint64_t)v5(a2, a3);
}

uint64_t MessageIdentifier.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005E28C0();
  uint64_t result = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v13 - v8;
  if (a1 > 0xFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = a1 + (*(unsigned int (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
    unint64_t v10 = sub_1002BF24C();
    MessageIdentifier.init<A>(exactly:)((uint64_t)&v14, a2, (uint64_t)&type metadata for Int64, a3, v10, (uint64_t)v9);
    uint64_t result = getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, a2);
    if (result != 1)
    {
      sub_1001F9720();
      uint64_t v11 = sub_1002BFCC4();
      return v12(v11);
    }
  }
  __break(1u);
  return result;
}

BOOL static MessageIdentifier.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002BFBA8(a1, a2, a3);
  v4(v5);
  uint64_t v6 = sub_1002BFC6C();
  return v3 < v4(v6);
}

BOOL static MessageIdentifier.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002BFBA8(a1, a2, a3);
  v4(v5);
  uint64_t v6 = sub_1002BFC6C();
  return v4(v6) >= v3;
}

uint64_t static MessageIdentifier.min.getter(uint64_t a1, uint64_t a2)
{
  return sub_1002BFC1C(1, a2, a2, a2 + 80, *(uint64_t (**)(uint64_t, uint64_t))(a2 + 80));
}

uint64_t static MessageIdentifier.max.getter(uint64_t a1, uint64_t a2)
{
  return sub_1002BFC1C(0xFFFFFFFFLL, a2, a2, a2 + 80, *(uint64_t (**)(uint64_t, uint64_t))(a2 + 80));
}

uint64_t MessageIdentifier.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v64 = a2;
  uint64_t v62 = *(void *)(*(void *)(a5 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1001F9720();
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v55 - v10;
  sub_1001FE450();
  uint64_t v66 = v11;
  uint64_t v13 = __chkstk_darwin(v12);
  char v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  BOOL v63 = (char *)&v55 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v55 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  Swift::UInt32 v23 = (char *)&v55 - v22;
  __chkstk_darwin(v21);
  char v25 = (char *)&v55 - v24;
  char v26 = sub_1002BFCA8();
  uint64_t v27 = sub_1005E2A30();
  uint64_t v65 = a1;
  int v57 = v15;
  if (v26)
  {
    if (v27 > 64) {
      goto LABEL_3;
    }
  }
  else if (v27 > 63)
  {
LABEL_3:
    uint64_t v67 = 0;
    unint64_t v28 = sub_1001FDDDC();
    sub_1002BFBF8(v28, (uint64_t)&type metadata for Int, v28);
    char v29 = sub_1002BFBD4();
    uint64_t v30 = v66;
    int v31 = *(void (**)(void))(v66 + 8);
    sub_1002BFC3C();
    v31();
    if (v29)
    {
      uint64_t v58 = a6;
      uint64_t v32 = v30;
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v38 = v64;
    goto LABEL_13;
  }
  uint64_t v33 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v25, a1, a3);
  uint64_t v34 = sub_1002BFCDC();
  int v31 = *(void (**)(void))(v33 + 8);
  sub_1002BFC3C();
  v31();
  if (v34 <= 0) {
    goto LABEL_12;
  }
  uint64_t v58 = a6;
  uint64_t v32 = v66;
LABEL_8:
  uint64_t v35 = *(void (**)(void))(v32 + 16);
  sub_1002BFC98();
  v35();
  char v36 = sub_1002BFCA8();
  sub_1002BFC98();
  v35();
  if ((v36 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v31)(v20, a3);
LABEL_15:
    uint64_t v40 = sub_1005E2A30();
    int v41 = v63;
    sub_1002BFC98();
    v35();
    if (v40 <= 31)
    {
      uint64_t v42 = sub_1002BFC4C();
      ((void (*)(uint64_t))v31)(v42);
LABEL_17:
      uint64_t v38 = v64;
      a6 = v58;
      goto LABEL_18;
    }
    LODWORD(v67) = -1;
    char v45 = sub_1002BFCA8();
    uint64_t v46 = sub_1005E2A30();
    if (v45)
    {
      if (v46 <= 32)
      {
        swift_getAssociatedConformanceWitness();
        sub_1005E3340();
        sub_1005E3250();
        LODWORD(v62) = sub_1005E1A90();
        uint64_t v50 = v66;
        sub_1002BFC88();
        v31();
        unsigned int v51 = v67;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v57, v41, a3);
        if ((v62 & 1) == 0)
        {
          sub_1002BFC88();
          v31();
          goto LABEL_17;
        }
        unsigned int v52 = sub_1002BFCDC();
        sub_1002BFC88();
        v31();
        uint64_t v38 = v64;
        a6 = v58;
        if (v51 < v52) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v47 = sub_1002091D8();
        sub_1002BFBF8(v47, (uint64_t)&type metadata for UInt32, v47);
        char v48 = sub_1002BFBD4();
        sub_1002BFC2C();
        v31();
        sub_1002BFC2C();
        v31();
        uint64_t v38 = v64;
        a6 = v58;
        if (v48) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v38 = v64;
      a6 = v58;
      if (v46 < 33)
      {
        unsigned int v53 = sub_1002BFCDC();
        uint64_t v54 = sub_1002BFC4C();
        ((void (*)(uint64_t))v31)(v54);
        if (v67 < v53) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v49 = sub_1002091D8();
        sub_1002BFBF8(v49, (uint64_t)&type metadata for UInt32, v49);
        LODWORD(v62) = sub_1002BFBD4();
        sub_1002BFC2C();
        v31();
        sub_1002BFC2C();
        v31();
        if (v62) {
          goto LABEL_11;
        }
      }
    }
LABEL_18:
    uint64_t v43 = sub_1002BFCDC();
    ((void (*)(char *, uint64_t))v31)(v23, a3);
    (*(void (**)(uint64_t, uint64_t))(v59 + 80))(v43, v38);
    ((void (*)(uint64_t, uint64_t))v31)(v65, a3);
    uint64_t v39 = 0;
    return storeEnumTagSinglePayload for ClientCommand(a6, v39, 1, v38);
  }
  long long v55 = v23;
  int v56 = v31;
  swift_getAssociatedConformanceWitness();
  sub_1005E3340();
  Swift::UInt32 v23 = v55;
  int v31 = v56;
  sub_1005E3250();
  char v37 = sub_1005E1AA0();
  sub_1002BFC3C();
  v31();
  sub_1002BFC3C();
  v31();
  if ((v37 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v38 = v64;
  a6 = v58;
LABEL_11:
  ((void (*)(char *, uint64_t))v31)(v23, a3);
LABEL_13:
  ((void (*)(uint64_t, uint64_t))v31)(v65, a3);
  uint64_t v39 = 1;
  return storeEnumTagSinglePayload for ClientCommand(a6, v39, 1, v38);
}

uint64_t sub_1002BF124(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1005E28C0();
  uint64_t result = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v13 - v8;
  if (a1 == -1)
  {
    __break(1u);
  }
  else
  {
    int v14 = a1 + 1;
    unint64_t v10 = sub_1002091D8();
    MessageIdentifier.init<A>(exactly:)((uint64_t)&v14, a2, (uint64_t)&type metadata for UInt32, a3, v10, (uint64_t)v9);
    uint64_t result = getEnumTagSinglePayload for ClientCommand((uint64_t)v9, 1, a2);
    if (result != 1)
    {
      sub_1001F9720();
      uint64_t v11 = sub_1002BFCC4();
      return v12(v11);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002BF21C()
{
  return sub_1002BE678(v0[4], v0[2], v0[3]);
}

unint64_t sub_1002BF24C()
{
  unint64_t result = qword_100711CD8;
  if (!qword_100711CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711CD8);
  }
  return result;
}

uint64_t sub_1002BF298(uint64_t a1)
{
  unint64_t v2 = sub_1002BF408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002BF2D4(uint64_t a1)
{
  unint64_t v2 = sub_1002BF408();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UnknownMessageIdentifier.encode(to:)(void *a1)
{
  uint64_t v3 = sub_10000566C(&qword_100711CE0);
  sub_1001FE450();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_1002244D8();
  sub_10003BCDC(a1, a1[3]);
  sub_1002BF408();
  sub_1005E3500();
  sub_1005E31E0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

unint64_t sub_1002BF408()
{
  unint64_t result = qword_100711CE8;
  if (!qword_100711CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711CE8);
  }
  return result;
}

uint64_t UnknownMessageIdentifier.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000566C(&qword_100711CF0);
  sub_1001FE450();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)sub_10003BCDC(a1, a1[3]);
  sub_1002BF408();
  sub_1005E34E0();
  if (!v1)
  {
    uint64_t v9 = sub_1005E3100();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  }
  _s13IMAP2Behavior4TaskOwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1002BF580@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = UnknownMessageIdentifier.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002BF5AC(void *a1)
{
  return UnknownMessageIdentifier.encode(to:)(a1);
}

uint64_t sub_1002BF5C8()
{
  return sub_1002C9BD4(*v0);
}

uint64_t sub_1002BF5D0@<X0>(IMAP2Persistence::CredentialsRequestID *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)a1->underlying);
  *a2 = result;
  return result;
}

Swift::Int64 sub_1002BF5FC@<X0>(NIOIMAPCore2::MessageIdentificationShiftWrapper *a1@<X0>, Swift::Int64 *a2@<X8>)
{
  Swift::Int64 result = MessageIdentificationShiftWrapper.distance(to:)((NIOIMAPCore2::MessageIdentificationShiftWrapper)a1->rawValue);
  *a2 = result;
  return result;
}

BOOL sub_1002BF62C(unsigned int *a1, unsigned int *a2)
{
  return static ChangeID.< infix(_:_:)(*a1, *a2);
}

BOOL sub_1002BF638(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C9C58(*a1, *a2);
}

uint64_t sub_1002BF644(unsigned int *a1, unsigned int *a2)
{
  return sub_1002CA4C0(*a1, *a2);
}

uint64_t sub_1002BF650(unsigned int *a1, unsigned int *a2)
{
  return sub_1002CA4C4(*a1, *a2);
}

uint64_t BinaryInteger.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  sub_1002091D8();
  sub_1005E2A60();
  sub_1001F9720();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
}

unint64_t sub_1002BF71C(void *a1)
{
  a1[1] = sub_1002BF76C();
  a1[2] = sub_1002BF7B8();
  a1[3] = sub_1002BF804();
  a1[4] = sub_1002BF850();
  a1[5] = sub_1002BF89C();
  unint64_t result = sub_1002BF8E8();
  a1[6] = result;
  return result;
}

unint64_t sub_1002BF76C()
{
  unint64_t result = qword_100711CF8;
  if (!qword_100711CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711CF8);
  }
  return result;
}

unint64_t sub_1002BF7B8()
{
  unint64_t result = qword_100711D00;
  if (!qword_100711D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D00);
  }
  return result;
}

unint64_t sub_1002BF804()
{
  unint64_t result = qword_100711D08;
  if (!qword_100711D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D08);
  }
  return result;
}

unint64_t sub_1002BF850()
{
  unint64_t result = qword_100711D10;
  if (!qword_100711D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D10);
  }
  return result;
}

unint64_t sub_1002BF89C()
{
  unint64_t result = qword_100711D18;
  if (!qword_100711D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D18);
  }
  return result;
}

unint64_t sub_1002BF8E8()
{
  unint64_t result = qword_100711D20;
  if (!qword_100711D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D20);
  }
  return result;
}

unint64_t sub_1002BF938()
{
  unint64_t result = qword_100711D28;
  if (!qword_100711D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D28);
  }
  return result;
}

unint64_t sub_1002BF988()
{
  unint64_t result = qword_100711D30;
  if (!qword_100711D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D30);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownMessageIdentifier()
{
  return &type metadata for UnknownMessageIdentifier;
}

unsigned char *storeEnumTagSinglePayload for UnknownMessageIdentifier.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002BFA80);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownMessageIdentifier.CodingKeys()
{
  return &type metadata for UnknownMessageIdentifier.CodingKeys;
}

unint64_t sub_1002BFABC()
{
  unint64_t result = qword_100711D38;
  if (!qword_100711D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D38);
  }
  return result;
}

unint64_t sub_1002BFB0C()
{
  unint64_t result = qword_100711D40;
  if (!qword_100711D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D40);
  }
  return result;
}

unint64_t sub_1002BFB5C()
{
  unint64_t result = qword_100711D48;
  if (!qword_100711D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100711D48);
  }
  return result;
}

uint64_t sub_1002BFBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1002BFBD4()
{
  return sub_1005E1AA0();
}

uint64_t sub_1002BFBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 88, a2, a3, v3, v4);
}

uint64_t sub_1002BFC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  return a5(a1, v5);
}

uint64_t sub_1002BFC4C()
{
  return v0;
}

uint64_t sub_1002BFC6C()
{
  return v0;
}

uint64_t sub_1002BFCA8()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_1002BFCC4()
{
  return v0;
}

uint64_t sub_1002BFCDC()
{
  return sub_1005E2A20();
}

uint64_t static MessageIdentifierRange.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, a3, *(void *)(*(void *)(a4 + 48) + 8));
}

void sub_1002BFD00()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  Swift::Int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_1002BE678(v6, v4, v2);
  sub_1005E1BA0();
  swift_retain();
  swift_retain();
  uint64_t v9 = 0;
  if (sub_1005E1AA0())
  {
    sub_1002C1864(v1, v7, v5, v3);
    uint64_t v9 = v10;
  }
  swift_release();
  swift_release();
  if (__OFADD__(v8, v9)) {
    __break(1u);
  }
  else {
    sub_1001FE57C();
  }
}

uint64_t MessageIdentifierRange.range.getter()
{
  sub_1002C243C();
  sub_1001F3BBC();
  uint64_t v0 = sub_100240798();
  return v1(v0);
}

uint64_t MessageIdentifierRange.range.setter()
{
  sub_1002C2330();
  sub_1001F3BBC();
  Swift::Int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40);
  return v4(v1, v0, v2);
}

uint64_t MessageIdentifierRange.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005E1BA0();
  sub_1001F3BBC();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  return v6(a2, a1, v4);
}

void MessageIdentifierRange.init(_:)()
{
  sub_1001FE5B4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1002C22B4();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1001F3FE0();
  sub_1001F475C();
  __chkstk_darwin(v8);
  sub_10022C49C();
  sub_1001FE450();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100224A54();
  __chkstk_darwin(v12);
  sub_1002C245C();
  sub_1001FE450();
  __chkstk_darwin(v13);
  sub_1002C2234(v14, v32);
  uint64_t v16 = __chkstk_darwin(v15);
  sub_1002C2368(v16, v17, v18, v19, v20, v21, v22, v23, v33);
  static MessageIdentifier.min.getter(v4, v2);
  uint64_t v24 = (void (*)(void))v10[2];
  sub_1002C2404();
  v24();
  sub_1005E1AC0();
  sub_1002C23BC();
  sub_1005E3010();
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v25 + 8))(v6);
  if (v0)
  {
    char v26 = (void (*)(void))v10[4];
    sub_1002C2224();
    v26();
    sub_1002C2224();
    v26();
    sub_1002C2404();
    v24();
    sub_1002C2404();
    v24();
    sub_1002C2224();
    v26();
    uint64_t v27 = (void (*)(void))v10[1];
    sub_1002C2254();
    v27();
    sub_1002C2224();
    v26();
    sub_1002C2224();
    v26();
    sub_1002C2224();
    v26();
    sub_1002C2254();
    v27();
    uint64_t v28 = sub_1002C22D0();
    v29(v28);
    uint64_t v30 = sub_100240798();
    MessageIdentifierRange.init(_:)(v30, v31);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  void (*v38)(void);
  void (*v39)(void);
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_1001FE5B4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v49 = v7;
  uint64_t v50 = sub_1002C22B4();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_1001F3FE0();
  uint64_t v46 = v9;
  sub_1001F475C();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v44 - v11;
  sub_1001FE450();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100224A54();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  sub_1002C245C();
  sub_1001FE450();
  unint64_t v47 = v21;
  char v48 = v20;
  __chkstk_darwin(v20);
  sub_1002C2234(v22, v44[0]);
  uint64_t v24 = __chkstk_darwin(v23);
  sub_1002C2368(v24, v25, v26, v27, v28, v29, v30, v31, v44[0]);
  char v45 = (void (*)(void))v14[2];
  sub_1002C2404();
  v32();
  v44[3] = v2;
  static MessageIdentifier.max.getter(v4, v2);
  sub_1005E1AC0();
  sub_1002C23BC();
  sub_1005E2EB0();
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v33 + 8))(v6);
  if (v0)
  {
    uint64_t v34 = v46;
    uint64_t v35 = *(int *)(v50 + 48);
    v44[1] = v18;
    char v36 = (uint64_t)&v12[v35];
    char v37 = (void (*)(void))v14[4];
    sub_1002C2224();
    v37();
    v44[2] = v36;
    sub_1002C2224();
    v37();
    uint64_t v38 = v45;
    ((void (*)(uint64_t, char *, uint64_t))v45)(v34, v12, v4);
    sub_1002C22E8();
    v38();
    sub_1002C2224();
    v37();
    uint64_t v39 = (void (*)(void))v14[1];
    sub_1002C2254();
    v39();
    sub_1002C2224();
    v37();
    sub_1002C2224();
    v37();
    sub_1002C2224();
    v37();
    sub_1002C2254();
    v39();
    uint64_t v40 = sub_1002C22D0();
    v41(v40);
    uint64_t v42 = sub_100240798();
    MessageIdentifierRange.init(_:)(v42, v43);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  void (*v14)(void);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v2 = sub_1002C22B4();
  sub_1001F3BBC();
  __chkstk_darwin(v3);
  sub_100224A54();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  sub_10022C49C();
  sub_1005E1BA0();
  sub_1001FE450();
  __chkstk_darwin(v8);
  sub_1001F3FE0();
  sub_1001F475C();
  __chkstk_darwin(v9);
  sub_10022C49C();
  if (sub_1005E1AC0())
  {
    sub_1001FE450();
    uint64_t v11 = v10;
    uint64_t v21 = v10;
    uint64_t v13 = *(void (**)(void))(v12 + 16);
    sub_1002C2358();
    v13();
    uint64_t v14 = *(void (**)(void))(v11 + 32);
    sub_1002C22F8();
    v14();
    uint64_t v15 = v6 + *(int *)(v2 + 48);
    sub_1002C2358();
    v13();
    sub_1002C2358();
    v13();
    sub_1002C22F8();
    v14();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v16(v15, v1);
    sub_1002C22F8();
    v14();
    sub_1002C22F8();
    v14();
    sub_1002C22F8();
    v14();
    uint64_t v17 = sub_100240798();
    ((void (*)(uint64_t))v16)(v17);
    sub_1002C2308();
    v18();
    uint64_t v19 = sub_100240798();
    MessageIdentifierRange.init(_:)(v19, v20);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t MessageIdentifierRange.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = sub_1005E1BA0();
  uint64_t v5 = *(void *)(v3 + 40);
  return ClosedRange<>.hash(into:)(a1, v4, v5);
}

Swift::Int MessageIdentifierRange.hashValue.getter(uint64_t a1)
{
  sub_1005E33F0();
  MessageIdentifierRange.hash(into:)((uint64_t)v3, a1);
  return sub_1005E3470();
}

Swift::Int sub_1002C056C(uint64_t a1, uint64_t a2)
{
  sub_1005E33F0();
  MessageIdentifierRange.hash(into:)((uint64_t)v4, a2);
  return sub_1005E3470();
}

uint64_t sub_1002C05B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MessageIdentifierRange.__derived_struct_equals(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

#error "1002C05F0: call analysis failed (funcsize=16)"

void MessageIdentifierRange.init(integerLiteral:)(uint64_t a1)
{
  __chkstk_darwin(a1);
  sub_1001F40C0();
  MessageIdentifier.init(integerLiteral:)(v1, v2, v3);
  MessageIdentifierRange.init(_:)();
}

void sub_1002C0904(unsigned int *a1)
{
}

void static MessageIdentifierRange.all.getter()
{
  sub_1001FE5B4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1002C239C();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_10022C58C();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v36 - v10;
  sub_1001FE450();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100224A54();
  __chkstk_darwin(v15);
  sub_1002C2294();
  sub_1001FE450();
  uint64_t v41 = v17;
  uint64_t v42 = v16;
  __chkstk_darwin(v16);
  uint64_t v40 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v28 = sub_1002C2314(v20, v21, v22, v23, v24, v25, v26, v27, v36[0]);
  static MessageIdentifier.min.getter(v28, v2);
  static MessageIdentifier.max.getter(v4, v2);
  if (sub_1002C2424())
  {
    char v29 = &v11[*(int *)(v7 + 48)];
    uint64_t v37 = v6;
    uint64_t v38 = v2;
    uint64_t v30 = (void (*)(void))v13[4];
    sub_1002C2284();
    v30();
    sub_1002C2284();
    v30();
    uint64_t v31 = v0 + *(int *)(v7 + 48);
    v36[1] = v7;
    uint64_t v32 = (void (*)(uint64_t, char *, uint64_t))v13[2];
    v32(v0, v11, v4);
    v32(v31, v29, v4);
    sub_1002C2284();
    v30();
    uint64_t v33 = (void (*)(uint64_t, uint64_t))v13[1];
    v33(v31, v4);
    sub_1002C23D0();
    sub_1002C2284();
    v30();
    sub_1002C2284();
    v30();
    sub_1002C2284();
    v30();
    v33(v0, v4);
    uint64_t v34 = v39;
    sub_1002C2308();
    v35();
    MessageIdentifierRange.init(_:)(v34, v37);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

void static MessageIdentifier.... prefix(_:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v32[7] = v6;
  uint64_t v7 = sub_1002C22B4();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_100224A54();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v32 - v13;
  sub_1001FE450();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_1001F40C0();
  uint64_t v18 = sub_1002C2294();
  sub_1001FE450();
  v32[8] = v19;
  __chkstk_darwin(v20);
  sub_1002C2234(v21, v32[0]);
  __chkstk_darwin(v22);
  sub_10022C49C();
  v32[3] = v1;
  v32[4] = v23;
  static MessageIdentifier.min.getter(v3, v1);
  v32[6] = v5;
  if (sub_1002C2424())
  {
    v32[9] = (uint64_t)&v14[*(int *)(v7 + 48)];
    uint64_t v24 = v16;
    uint64_t v25 = *(void (**)(void))(v16 + 32);
    sub_1002C2214();
    v25();
    v32[1] = v7;
    _OWORD v32[2] = v18;
    uint64_t v26 = *(void (**)(void))(v24 + 16);
    sub_1002C2274();
    v26();
    uint64_t v27 = v11 + *(int *)(v7 + 48);
    sub_1002C2274();
    v26();
    sub_1002C2274();
    v26();
    sub_1002C2214();
    v25();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v28(v27, v3);
    sub_1002C2214();
    v25();
    sub_1002C2214();
    v25();
    sub_1002C2214();
    v25();
    v28(v11, v3);
    sub_1002C2308();
    v29();
    uint64_t v30 = sub_100240798();
    MessageIdentifierRange.init(_:)(v30, v31);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

void static MessageIdentifier.... postfix(_:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  v37[8] = v2;
  uint64_t v3 = sub_1002C22B4();
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  sub_1002C2234(v5, v37[0]);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v37 - v7;
  sub_1001FE450();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1001F40C0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_1002C2294();
  sub_1001FE450();
  v37[9] = v16;
  __chkstk_darwin(v17);
  v37[7] = (uint64_t)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v28 = sub_1002C2314(v20, v21, v22, v23, v24, v25, v26, v27, v37[0]);
  static MessageIdentifier.max.getter(v28, v1);
  if (sub_1002C2424())
  {
    uint64_t v29 = *(int *)(v3 + 48);
    v37[0] = v14;
    v37[1] = (uint64_t)&v8[v29];
    v37[3] = v15;
    v37[4] = v1;
    uint64_t v30 = (void (*)(void))v10[2];
    sub_1002C2274();
    v30();
    v37[2] = (uint64_t)v8;
    uint64_t v31 = (void (*)(void))v10[4];
    sub_1002C2214();
    v31();
    sub_1002C2274();
    v30();
    sub_1002C2274();
    v30();
    sub_1002C2214();
    v31();
    uint64_t v32 = (void (*)(void))v10[1];
    sub_1002C2254();
    v32();
    sub_1002C2214();
    v31();
    sub_1002C2214();
    v31();
    sub_1002C2214();
    v31();
    sub_1002C2254();
    v32();
    uint64_t v33 = sub_1002C22D0();
    v34(v33);
    uint64_t v35 = sub_100240798();
    MessageIdentifierRange.init(_:)(v35, v36);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

void static MessageIdentifier.... infix(_:_:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  v21[7] = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1001F3BBC();
  __chkstk_darwin(v4);
  sub_10022C58C();
  __chkstk_darwin(v5);
  v21[4] = v1;
  uint64_t v6 = sub_1002C2294();
  sub_1001FE450();
  v21[3] = v7;
  __chkstk_darwin(v8);
  void v21[5] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  __chkstk_darwin(v10);
  sub_10022C49C();
  v21[6] = v11;
  if (sub_1002C2424())
  {
    sub_1001FE450();
    uint64_t v13 = v12;
    v21[1] = TupleTypeMetadata2;
    uint64_t v15 = *(void (**)(void))(v14 + 16);
    v21[2] = v6;
    sub_1002C22E8();
    v15();
    sub_1002C22E8();
    v15();
    sub_1002C22E8();
    v15();
    sub_1002C22E8();
    v15();
    uint64_t v16 = *(void (**)(void))(v13 + 32);
    sub_1002C2214();
    v16();
    uint64_t v17 = *(void (**)(void))(v13 + 8);
    sub_1002C2254();
    v17();
    sub_1002C23D0();
    sub_1002C2214();
    v16();
    sub_1002C2214();
    v16();
    sub_1002C2214();
    v16();
    sub_1002C2254();
    v17();
    sub_1002C2308();
    v18();
    uint64_t v19 = sub_100240798();
    MessageIdentifierRange.init(_:)(v19, v20);
    sub_1001FE57C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t MessageIdentifierRange.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t MessageIdentifierRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = v2 + *(int *)(sub_1005E1BA0() + 36);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v6(a2, v5, v4);
}

uint64_t MessageIdentifierRange.count.getter()
{
  return sub_1005E2470();
}

uint64_t MessageIdentifierRange.isEmpty.getter()
{
  uint64_t v0 = sub_1002C243C();
  return ClosedRange.isEmpty.getter(v0);
}

void MessageIdentifierRange.clamped(to:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v50 = v6;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v53 = sub_1002C239C();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_1001F3FE0();
  uint64_t v44 = v9;
  sub_1001F475C();
  __chkstk_darwin(v10);
  sub_10022C49C();
  uint64_t v43 = v11;
  sub_1001FE450();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_1001F3FE0();
  uint64_t v52 = v15;
  sub_1001F475C();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v49 = *(void *)(v3 + 24);
  uint64_t v19 = sub_1005E1BA0();
  sub_1001FE450();
  uint64_t v47 = v20;
  __chkstk_darwin(v21);
  sub_1001F3FE0();
  uint64_t v46 = v22;
  sub_1001F475C();
  __chkstk_darwin(v23);
  sub_10022C49C();
  uint64_t v45 = v24;
  char v25 = sub_1002C237C();
  unsigned int v51 = v18;
  if (v25)
  {
    uint64_t v26 = (void (*)(void))v13[2];
    uint64_t v27 = v18;
    uint64_t v28 = v5;
  }
  else
  {
    uint64_t v29 = v5 + *(int *)(v19 + 36);
    char v30 = sub_1002C23E4();
    uint64_t v26 = (void (*)(void))v13[2];
    if (v30)
    {
      uint64_t v27 = v51;
      uint64_t v28 = v29;
    }
    else
    {
      uint64_t v27 = v51;
      uint64_t v28 = v1;
    }
  }
  uint64_t v31 = v26;
  ((void (*)(char *, uint64_t, uint64_t))v26)(v27, v28, v7);
  uint64_t v48 = v19;
  uint64_t v32 = (void (*)(uint64_t, uint64_t, uint64_t))(v5 + *(int *)(v19 + 36));
  if ((sub_1002C23E4() & 1) == 0) {
    sub_1002C237C();
  }
  sub_1002C2410();
  v31();
  uint64_t v33 = v53;
  uint64_t v34 = v43;
  uint64_t v35 = v43 + *(int *)(v53 + 48);
  uint64_t v36 = (void (*)(void))v13[4];
  sub_1002C2264();
  v36();
  uint64_t v42 = v35;
  sub_1002C2264();
  v36();
  uint64_t v37 = v44;
  uint64_t v38 = v44 + *(int *)(v33 + 48);
  v32(v44, v34, v7);
  v32(v38, v35, v7);
  sub_1002C2264();
  v36();
  uint64_t v39 = (void (*)(uint64_t, uint64_t))v13[1];
  v39(v38, v7);
  sub_1002C2264();
  v36();
  sub_1002C2264();
  v36();
  sub_1002C2264();
  v36();
  v39(v37, v7);
  uint64_t v40 = v45;
  sub_1002C2308();
  v41();
  MessageIdentifierRange.init(_:)(v40, v50);
  sub_1001FE57C();
}

uint64_t MessageIdentifierRange.overlaps(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1002C1818(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&ClosedRange.overlaps(_:));
}

uint64_t MessageIdentifierRange.contains(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1002C1818(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&ClosedRange.contains(_:));
}

uint64_t sub_1002C1818(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = sub_1002C2330();
  return a3(v3, v4);
}

void sub_1002C1864(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4)
{
  Swift::Int v8 = *(unsigned int *)(a1 + 20);
  sub_100210AD0(58, 0xE100000000000000, a1 + 8, v8);
  if (v10)
  {
    v11._uint64_t countAndFlagsBits = 58;
    v11._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v11, v8);
  }
  Swift::Int v12 = v9;
  int v13 = *(_DWORD *)(a1 + 20);
  BOOL v14 = __CFADD__(v13, v9);
  int v15 = v13 + v9;
  if (v14)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 20) = v15;
  uint64_t v16 = sub_1005E1BA0();
  if (__OFADD__(v12, sub_1002BE678(a2 + *(int *)(v16 + 36), a3, a4))) {
LABEL_7:
  }
    __break(1u);
}

void sub_1002C1934()
{
}

unint64_t sub_1002C1964()
{
  unint64_t result = qword_100711D50[0];
  if (!qword_100711D50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100711D50);
  }
  return result;
}

uint64_t sub_1002C19B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C19CC()
{
  uint64_t result = sub_1005E1BA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1002C1A64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = ~(unint64_t)v8;
  uint64_t v11 = v7 + v8;
  unint64_t v12 = (v11 & v10) + v7;
  int v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v17(a1, a2, v5);
    v17((uint64_t *)(((unint64_t)v4 + v11) & v10), (uint64_t *)(((unint64_t)a2 + v11) & v10), v5);
  }
  return v4;
}

uint64_t sub_1002C1B70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);
  return v7(v4, v3);
}

unint64_t sub_1002C1C0C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t sub_1002C1CA0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t sub_1002C1D34(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t sub_1002C1DC8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_1002C1E5C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  int v7 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_19;
  }
  unint64_t v8 = ((*(void *)(*(void *)(v4 - 8) + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(void *)(*(void *)(v4 - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v6) {
        return getEnumTagSinglePayload for ClientCommand((uint64_t)a1, v6, v4);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v8 | v12) + 1;
}

void sub_1002C1FBC(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  size_t v11 = v10 + v9;
  char v12 = 8 * (v10 + v9);
  BOOL v13 = a3 >= v8;
  int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v11 < 4)
    {
      int v17 = (v16 >> v12) + 1;
      if (v11)
      {
        int v19 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v11] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v17;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v11] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1002C21D4);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        storeEnumTagSinglePayload for ClientCommand((uint64_t)a1, a2, v8, v6);
      }
      return;
  }
}

uint64_t type metadata accessor for MessageIdentifierRange()
{
  return sub_1000DAF2C();
}

void sub_1002C2234(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1002C2294()
{
  return sub_1005E1BA0();
}

uint64_t sub_1002C22B4()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_1002C22D0()
{
  return v0;
}

uint64_t sub_1002C2314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v11 - 112) = (char *)&a9 - v9;
  return v10;
}

uint64_t sub_1002C2330()
{
  return sub_1005E1BA0();
}

void sub_1002C2368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 128) = (char *)&a9 - v9;
}

uint64_t sub_1002C237C()
{
  return sub_1005E1A90();
}

uint64_t sub_1002C239C()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_1002C23BC()
{
  return 0;
}

uint64_t sub_1002C23D0()
{
  return v0;
}

uint64_t sub_1002C23E4()
{
  return sub_1005E1AA0();
}

uint64_t sub_1002C2424()
{
  return sub_1005E1AC0();
}

uint64_t sub_1002C243C()
{
  return sub_1005E1BA0();
}

uint64_t sub_1002C245C()
{
  return sub_1005E1BA0();
}

void sub_1002C247C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1001FE5B4();
  uint64_t v24 = v22;
  int v26 = v25;
  uint64_t v80 = v27;
  char v81 = v28;
  uint64_t v82 = v29;
  uint64_t v83 = v30;
  uint64_t v32 = v31;
  uint64_t v78 = v33;
  uint64_t v35 = v34;
  uint64_t v84 = 0;
  uint64_t v36 = sub_10000566C(&qword_100711F68);
  uint64_t v37 = sub_100224550(v36);
  __chkstk_darwin(v37);
  sub_1002244C0();
  Swift::Int v38 = *(unsigned int *)(v24 + 20);
  swift_retain();
  swift_retain();
  uint64_t v85 = sub_10000566C(&qword_1007109E8);
  uint64_t v86 = v35;
  uint64_t v79 = sub_100253FD4(&qword_1007109F8);
  if (sub_1005E23B0() < 1)
  {
    swift_release();
    swift_release();
    Swift::Int v40 = 0;
    uint64_t v46 = 0;
    char v44 = v26;
    if ((v26 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v77 = v26;
    swift_bridgeObjectRetain();
    sub_100210AD0(v78, (unint64_t)v32, v24 + 8, v38);
    Swift::Int v40 = v39;
    char v42 = v41;
    swift_bridgeObjectRelease();
    if (v42)
    {
      v43._uint64_t countAndFlagsBits = v78;
      v43._uint64_t object = v32;
      Swift::Int v40 = ByteBuffer._setStringSlowpath(_:at:)(v43, v38);
    }
    swift_release();
    swift_release();
    char v44 = v77;
    int v45 = *(_DWORD *)(v24 + 20);
    LODWORD(v38) = v45 + v40;
    if (__CFADD__(v45, v40)) {
      goto LABEL_33;
    }
    *(_DWORD *)(v24 + 20) = v38;
    if ((v44 & 1) == 0)
    {
      uint64_t v46 = 0;
      goto LABEL_12;
    }
  }
  sub_100210AD0(40, 0xE100000000000000, v24 + 8, v38);
  if (v47)
  {
    v48._uint64_t countAndFlagsBits = 40;
    v48._uint64_t object = (void *)0xE100000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v48, v38);
  }
  sub_1001F4888();
  if (v50) {
    goto LABEL_35;
  }
  *(_DWORD *)(v24 + 20) = v49;
LABEL_12:
  BOOL v51 = __OFADD__(v40, v46);
  Swift::Int v52 = v40 + v46;
  if (v51)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v53 = v86;
  sub_1001F9720();
  sub_100208380();
  uint64_t v55 = v54();
  __chkstk_darwin(v55);
  v76[2] = a21;
  v76[3] = a22;
  v76[4] = v24;
  v76[5] = v53;
  v76[6] = v82;
  v76[7] = v83;
  uint64_t v56 = sub_1002C31A0(0, (void (*)(uint64_t *__return_ptr, uint64_t *, void *))sub_1002C82E0, (uint64_t)v76);
  sub_1002C88A4(v23, &qword_100711F68);
  BOOL v51 = __OFADD__(v52, v56);
  Swift::Int v57 = v52 + v56;
  if (v51)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v44)
  {
    Swift::Int v58 = *(unsigned int *)(v24 + 20);
    uint64_t v59 = sub_1002C8B18();
    sub_100210AD0(v59, v60, v24 + 8, v58);
    long long v61 = v81;
    if (v62)
    {
      v63._uint64_t countAndFlagsBits = sub_1002C8B18();
      ByteBuffer._setStringSlowpath(_:at:)(v63, v58);
    }
    sub_1001F4888();
    uint64_t v66 = v80;
    if (v50) {
      goto LABEL_36;
    }
    *(_DWORD *)(v24 + 20) = v65;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v66 = v80;
    long long v61 = v81;
  }
  Swift::Int v67 = v57 + v64;
  if (!__OFADD__(v57, v64))
  {
    Swift::Int v68 = *(unsigned int *)(v24 + 20);
    swift_retain();
    swift_retain();
    if (sub_1005E23B0() < 1)
    {
      swift_release();
      swift_release();
      Swift::Int v70 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_100210AD0(v66, (unint64_t)v61, v24 + 8, v68);
      Swift::Int v70 = v69;
      char v72 = v71;
      swift_bridgeObjectRelease();
      if (v72)
      {
        v73._uint64_t countAndFlagsBits = v66;
        v73._uint64_t object = v61;
        Swift::Int v70 = ByteBuffer._setStringSlowpath(_:at:)(v73, v68);
      }
      swift_release();
      swift_release();
      int v74 = *(_DWORD *)(v24 + 20);
      BOOL v50 = __CFADD__(v74, v70);
      int v75 = v74 + v70;
      if (v50) {
        goto LABEL_34;
      }
      *(_DWORD *)(v24 + 20) = v75;
    }
    if (!__OFADD__(v67, v70))
    {
      sub_1001FE57C();
      return;
    }
    goto LABEL_32;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

#error "1002C2888: call analysis failed (funcsize=23)"

#error "1002C28F4: call analysis failed (funcsize=23)"

#error "1002C2960: call analysis failed (funcsize=23)"

#error "1002C29CC: call analysis failed (funcsize=23)"

#error "1002C2A38: call analysis failed (funcsize=23)"

#error "1002C2AA4: call analysis failed (funcsize=23)"

#error "1002C2B10: call analysis failed (funcsize=23)"

void sub_1002C2B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t *__return_ptr, uint64_t *, uint64_t),uint64_t *a24,uint64_t (*a25)(void),uint64_t a26)
{
  sub_1001FE5B4();
  uint64_t v30 = v26;
  uint64_t v81 = v31;
  uint64_t v82 = v32;
  uint64_t v84 = v33;
  uint64_t v85 = v34;
  uint64_t v87 = v35;
  uint64_t v36 = v26 + 8;
  Swift::Int v37 = *(unsigned int *)(v36 + 12);
  uint64_t v83 = v35;
  uint64_t v38 = *(void *)(v35 + 16);
  int v86 = v29;
  if (v38)
  {
    Swift::Int v39 = v28;
    uint64_t v40 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_100210AD0(v40, (unint64_t)v39, v36, v37);
    Swift::Int v42 = v41;
    char v44 = v43;
    swift_bridgeObjectRelease();
    if (v44)
    {
      v45._uint64_t countAndFlagsBits = v40;
      v45._uint64_t object = v39;
      Swift::Int v42 = ByteBuffer._setStringSlowpath(_:at:)(v45, v37);
    }
    swift_release();
    swift_release();
    int v46 = *(_DWORD *)(v30 + 20);
    LODWORD(v37) = v46 + v42;
    char v47 = v86;
    if (__CFADD__(v46, v42)) {
      goto LABEL_33;
    }
    *(_DWORD *)(v30 + 20) = v37;
    if ((v47 & 1) == 0)
    {
      uint64_t v48 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    Swift::Int v42 = 0;
    uint64_t v48 = 0;
    if ((v29 & 1) == 0) {
      goto LABEL_12;
    }
  }
  sub_100210AD0(40, 0xE100000000000000, v36, v37);
  if (v49)
  {
    v50._uint64_t countAndFlagsBits = 40;
    v50._uint64_t object = (void *)0xE100000000000000;
    ByteBuffer._setStringSlowpath(_:at:)(v50, v37);
  }
  sub_1001F4888();
  if (v52) {
    goto LABEL_35;
  }
  *(_DWORD *)(v30 + 20) = v51;
LABEL_12:
  uint64_t v80 = v36;
  Swift::Int v53 = v42 + v48;
  if (__OFADD__(v42, v48))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v54 = v83;
  __chkstk_darwin(v48);
  v79[2] = v56;
  v79[3] = v55;
  v79[4] = v30;
  v79[5] = &v87;
  v79[6] = v84;
  v79[7] = v85;
  swift_bridgeObjectRetain();
  uint64_t v57 = sub_1002C3504(0, a23, (uint64_t)v79, v54, a24, a25, a26);
  swift_bridgeObjectRelease();
  Swift::Int v58 = v53 + v57;
  if (__OFADD__(v53, v57))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v86)
  {
    Swift::Int v59 = *(unsigned int *)(v30 + 20);
    uint64_t v60 = sub_1002C8B18();
    uint64_t v61 = v80;
    sub_100210AD0(v60, v62, v80, v59);
    uint64_t v63 = v81;
    uint64_t v64 = v82;
    if (v65)
    {
      v66._uint64_t countAndFlagsBits = sub_1002C8B18();
      ByteBuffer._setStringSlowpath(_:at:)(v66, v59);
    }
    sub_1001F4888();
    if (v52) {
      goto LABEL_36;
    }
    *(_DWORD *)(v30 + 20) = v68;
  }
  else
  {
    uint64_t v67 = 0;
    uint64_t v63 = v81;
    uint64_t v64 = v82;
    uint64_t v61 = v80;
  }
  Swift::Int v69 = v58 + v67;
  if (!__OFADD__(v58, v67))
  {
    if (*(void *)(v87 + 16))
    {
      Swift::Int v70 = *(unsigned int *)(v30 + 20);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_100210AD0(v63, (unint64_t)v64, v61, v70);
      Swift::Int v72 = v71;
      uint64_t v73 = v63;
      char v75 = v74;
      swift_bridgeObjectRelease();
      if (v75)
      {
        v76._uint64_t countAndFlagsBits = v73;
        v76._uint64_t object = v64;
        Swift::Int v72 = ByteBuffer._setStringSlowpath(_:at:)(v76, v70);
      }
      swift_release();
      swift_release();
      int v77 = *(_DWORD *)(v30 + 20);
      BOOL v52 = __CFADD__(v77, v72);
      int v78 = v77 + v72;
      if (v52) {
        goto LABEL_34;
      }
      *(_DWORD *)(v30 + 20) = v78;
    }
    else
    {
      Swift::Int v72 = 0;
    }
    if (!__OFADD__(v69, v72))
    {
      sub_1001FE57C();
      return;
    }
    goto LABEL_32;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1002C2E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v24 = a3;
  uint64_t result = a4(&v24, a6);
  if (__OFADD__(a1, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v23 = a1 + result;
  swift_retain();
  swift_retain();
  sub_10000566C(&qword_1007109E8);
  sub_100253FD4(&qword_1007109F8);
  uint64_t result = sub_1005E23B0();
  if (__OFSUB__(result, 1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result - 1 <= a2)
  {
    uint64_t v16 = 0;
  }
  else
  {
    Swift::Int v14 = *(unsigned int *)(a6 + 20);
    swift_bridgeObjectRetain();
    sub_100210AD0(a8, (unint64_t)a9, a6 + 8, v14);
    uint64_t v16 = v15;
    char v18 = v17;
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      v19._uint64_t countAndFlagsBits = a8;
      v19._uint64_t object = a9;
      uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v19, v14);
      uint64_t v16 = result;
    }
    int v20 = *(_DWORD *)(a6 + 20);
    BOOL v21 = __CFADD__(v20, v16);
    int v22 = v20 + v16;
    if (v21) {
      goto LABEL_14;
    }
    *(_DWORD *)(a6 + 20) = v22;
  }
  swift_release();
  swift_release();
  uint64_t result = v23 + v16;
  if (__OFADD__(v23, v16))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C2F94(uint64_t a1, uint64_t *a2, uint64_t (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, void (*a10)(void), void (*a11)(void))
{
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a6;
  uint64_t v15 = sub_10000566C(a9);
  __chkstk_darwin(v15);
  sub_100224260();
  a10(0);
  sub_100207F00();
  __chkstk_darwin(v16);
  char v18 = (char *)v36 - v17;
  uint64_t v19 = *a2;
  sub_1002C87C0();
  sub_1002C8810();
  uint64_t result = a3(v18, a5);
  uint64_t v21 = a1 + result;
  if (__OFADD__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v19 >= *(void *)(v39 + 16) - 1)
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v39 = a1 + result;
    uint64_t v22 = *(void *)(a5 + 8);
    uint64_t v23 = *(void *)(a5 + 32);
    Swift::Int v24 = *(unsigned int *)(a5 + 20);
    int v25 = v38;
    swift_bridgeObjectRetain();
    uint64_t v36[2] = v22;
    swift_retain();
    v36[1] = v23;
    swift_retain();
    uint64_t v26 = v37;
    uint64_t v27 = v40;
    sub_100210AD0(v37, (unint64_t)v25, a5 + 8, v24);
    uint64_t v29 = v28;
    char v31 = v30;
    uint64_t v40 = v27;
    uint64_t result = swift_bridgeObjectRelease();
    if (v31)
    {
      v32._uint64_t countAndFlagsBits = v26;
      v32._uint64_t object = v25;
      uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v32, v24);
      uint64_t v29 = result;
    }
    int v33 = *(_DWORD *)(a5 + 20);
    BOOL v34 = __CFADD__(v33, v29);
    int v35 = v33 + v29;
    uint64_t v21 = v39;
    if (v34) {
      goto LABEL_12;
    }
    *(_DWORD *)(a5 + 20) = v35;
    swift_release();
    swift_release();
  }
  sub_1002C88F4((uint64_t)v18, a11);
  uint64_t result = v21 + v29;
  if (__OFADD__(v21, v29))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C31A0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *, void *), uint64_t a3)
{
  void (*v29)(uint64_t *__return_ptr, uint64_t *, void *);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void v34[4];
  uint64_t v35;

  uint64_t v29 = a2;
  char v30 = a3;
  uint64_t v6 = sub_10000566C(&qword_1007109E8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000566C(&qword_100711F68);
  __chkstk_darwin(v10 - 8);
  char v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000566C(&qword_100711F70);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v35 = a1;
  sub_1002C8304(v3, (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
  sub_100253FD4(&qword_1007109F0);
  Swift::String v32 = v9;
  sub_1005E1F60();
  char v31 = *(int *)(v14 + 44);
  *(void *)&v16[v31] = 0;
  uint64_t v17 = &v16[*(int *)(sub_10000566C(&qword_1007109E0) + 36)];
  sub_100253FD4(&qword_1007109F8);
  uint64_t v18 = *(void *)v17;
  sub_1005E23E0();
  if (v18 == v34[0])
  {
LABEL_6:
    sub_1002C88A4((uint64_t)v16, &qword_100711F70);
    return a1;
  }
  else
  {
    uint64_t v28 = (void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v19 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    while (1)
    {
      int v20 = (void (*)(void *, void))sub_1005E24D0();
      uint64_t v22 = *v21;
      v20(v34, 0);
      uint64_t v23 = v32;
      (*v28)(v32, v16, v6);
      sub_1005E23F0();
      uint64_t result = (*v19)(v23, v6);
      uint64_t v25 = *(void *)&v16[v31];
      if (__OFADD__(v25, 1)) {
        break;
      }
      *(void *)&v16[v31] = v25 + 1;
      v34[0] = v25;
      v34[1] = v22;
      v29(&v33, &v35, v34);
      if (!v4)
      {
        a1 = v33;
        int v35 = v33;
        uint64_t v26 = *(void *)v17;
        sub_1005E23E0();
        if (v26 != v34[0]) {
          continue;
        }
      }
      goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C3504(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *, uint64_t), uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t a7)
{
  void (*v32)(uint64_t *__return_ptr, uint64_t *, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  int v33 = a5;
  BOOL v34 = a7;
  uint64_t v9 = v7;
  Swift::String v32 = a2;
  uint64_t v31 = sub_10000566C(a5);
  sub_1001F3BBC();
  __chkstk_darwin(v12);
  sub_1001F3FE0();
  uint64_t v30 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v29 = (char *)&v26 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v26 - v17);
  uint64_t v36 = a1;
  uint64_t v19 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  uint64_t v28 = v19;
  uint64_t v26 = a4;
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a6(0) - 8);
    uint64_t v22 = a4 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v27 = *(void *)(v21 + 72);
    do
    {
      sub_1002C87C0();
      *uint64_t v18 = v20;
      sub_1002C8810();
      uint64_t v23 = v30;
      Swift::Int v24 = v33;
      sub_1002C8858();
      v32(&v35, &v36, v23);
      sub_1002C88A4(v23, v24);
      if (v9) {
        break;
      }
      ++v20;
      a1 = v35;
      uint64_t v36 = v35;
      v22 += v27;
    }
    while (v28 != v20);
  }
  swift_bridgeObjectRelease();
  return a1;
}

BOOL sub_1002C3718(uint64_t a1, BOOL a2)
{
  return !static SectionSpecifier.Part.< infix(_:_:)(a2, a1);
}

BOOL sub_1002C3744(unsigned int a1, unsigned int a2)
{
  return a1 <= a2;
}

BOOL sub_1002C3750(void *a1, unint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5, unsigned __int8 a6)
{
  if (_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a1))
  {
    if (a6 > 1u)
    {
      BOOL v13 = 1;
      switch(a5)
      {
        case 1:
          return !v13;
        case 2:
          BOOL v13 = a3 != 2 || (a2 & 0xFFFFFFFFFFFFFFFDLL) != 0;
          break;
        case 3:
          BOOL v13 = 0;
          break;
        default:
          if (a2) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = a3 == 2;
          }
          BOOL v13 = !v15;
          break;
      }
    }
    else
    {
      BOOL v13 = a3 > 1u && a2 > 2;
    }
  }
  else
  {
    BOOL v13 = static SectionSpecifier.Part.< infix(_:_:)((BOOL)a4, (uint64_t)a1);
  }
  return !v13;
}

BOOL sub_1002C384C(unint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 > 1u)
  {
    BOOL v5 = 1;
    switch(a3)
    {
      case 1:
        return !v5;
      case 2:
        BOOL v5 = a2 != 2 || (a1 & 0xFFFFFFFFFFFFFFFDLL) != 0;
        break;
      case 3:
        BOOL v5 = 0;
        break;
      default:
        if (a1) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = a2 == 2;
        }
        BOOL v5 = !v7;
        break;
    }
  }
  else
  {
    BOOL v5 = a2 > 1u && a1 > 2;
  }
  return !v5;
}

BOOL sub_1002C38E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a2 < (unint64_t)a1;
  if ((a1 & 0x100000000000000) != 0) {
    BOOL v2 = 0;
  }
  BOOL v3 = a2 < (unint64_t)a1;
  if ((a1 & 0x100000000000000) == 0) {
    BOOL v3 = 1;
  }
  if ((a2 & 0x100000000000000) == 0) {
    BOOL v3 = v2;
  }
  return !v3;
}

uint64_t static MessageIdentifierSet.__derived_struct_equals(_:_:)()
{
  sub_1002C8B24();
  sub_100223B18();
  sub_10022C948();
  return sub_1005E35A0();
}

uint64_t MessageIdentifierSet.init()()
{
  sub_100223B18();
  return sub_1005E3680();
}

uint64_t MessageIdentifierSet.isEmpty.getter()
{
  sub_10000566C(&qword_100710538);
  return sub_1005E3630();
}

void static MessageIdentifierSet.all.getter()
{
  sub_1002C8B24();
  uint64_t v0 = type metadata accessor for MessageIdentifierRange();
  sub_100224550(v0);
  sub_100207F00();
  __chkstk_darwin(v1);
  sub_10022C948();
  static MessageIdentifierRange.all.getter();
  MessageIdentifierSet.init(_:)();
}

void MessageIdentifierSet.init(_:)()
{
  sub_1001FE5B4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10000566C(&qword_100710538);
  sub_1001FE450();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002244A8();
  uint64_t v12 = type metadata accessor for MessageIdentifierRange();
  sub_1001FE450();
  uint64_t v14 = v13;
  sub_100207F00();
  __chkstk_darwin(v15);
  sub_1002C8A7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v1, v5, v12);
  Range<>.init<A>(_:)(v1, v3);
  sub_100223B18();
  sub_1005E36A0();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v7, v0, v8);
  sub_1001FE57C();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  sub_1001FE5B4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v18 = v5;
  sub_1001FE450();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_1002C8A7C();
  uint64_t v17 = sub_10000566C(&qword_100710538);
  sub_1001FE450();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1002244C0();
  uint64_t v12 = *(void (**)(uint64_t))(v7 + 16);
  uint64_t v13 = sub_1002C8A88();
  v12(v13);
  uint64_t v14 = sub_1002C4260();
  uint64_t v15 = sub_1002C8A88();
  v12(v15);
  uint64_t v16 = sub_1002C4260();
  if (v16 == -1)
  {
    __break(1u);
  }
  else if (v14 <= v16 + 1)
  {
    sub_100223B18();
    sub_1005E36A0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v18, v0, v17);
    sub_1001FE57C();
    return;
  }
  __break(1u);
}

uint64_t MessageIdentifierSet._ranges.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10000566C(&qword_100710538);
  sub_1001F3BBC();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t MessageIdentifierSet._ranges.setter()
{
  sub_10000566C(&qword_100710538);
  sub_1001F3BBC();
  uint64_t v0 = sub_10022C948();
  return v1(v0);
}

uint64_t sub_1002C3C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t MessageIdentifierSet.init<A>(_:)()
{
  MessageIdentifierSet.init()();
  sub_1005E2020();
  sub_1001F9720();
  sub_1002080D4();
  return v0();
}

void sub_1002C3DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for MessageIdentifierRange();
  __chkstk_darwin(v5);
  uint64_t v7 = &v12[-v6 - 8];
  (*(void (**)(unsigned char *, uint64_t))(v8 + 16))(&v12[-v6 - 8], a1);
  Range<>.init<A>(_:)((uint64_t)v7, a3);
  unint64_t v13 = v9;
  if (HIDWORD(v9) != v9)
  {
    sub_10000566C(&qword_100710538);
    uint64_t v10 = (void (*)(unsigned char *, void))sub_1005E3620();
    sub_10000566C(&qword_1007109E8);
    sub_1005E35D0();
    v10(v12, 0);
  }
}

void Range<>.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  sub_1001FE450();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1002244C0();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v8(v2, a1, a2);
  unsigned int v9 = sub_1002C4260();
  uint64_t v10 = sub_1005E1BA0();
  v8(v2, a1 + *(int *)(v10 + 36), a2);
  int v11 = sub_1002C4260();
  unsigned int v12 = v11 + 1;
  if (v11 == -1)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for MessageIdentifierRange();
    sub_1001F3BBC();
    sub_1002080D4();
    v13();
    if (v9 <= v12)
    {
      sub_100208130();
      return;
    }
  }
  __break(1u);
}

void sub_1002C403C(uint64_t a1)
{
  sub_1002C3DB0(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

unint64_t sub_1002C4060(unint64_t result)
{
  unint64_t v3 = result;
  if (HIDWORD(result) != result)
  {
    sub_10000566C(&qword_100710538);
    uint64_t v1 = (uint64_t (*)(unsigned char *, void))sub_1005E3620();
    sub_10000566C(&qword_1007109E8);
    sub_1005E35D0();
    return v1(v2, 0);
  }
  return result;
}

uint64_t sub_1002C4260()
{
  sub_1002C8B24();
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 56))(v1, v0);
  sub_1001F9720();
  uint64_t v3 = sub_1002C89A0();
  v4(v3);
  uint64_t result = (v2 - 1);
  if (!v2) {
    __break(1u);
  }
  return result;
}

NIOIMAPCore2::MessageIdentificationShiftWrapper __swiftcall MessageIdentificationShiftWrapper.advanced(by:)(Swift::Int64 by)
{
  BOOL v2 = __OFADD__(by, v1);
  unint64_t v3 = by + v1;
  if (v2)
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0)
  {
    if (!HIDWORD(v3)) {
      return (NIOIMAPCore2::MessageIdentificationShiftWrapper)v3;
    }
    goto LABEL_7;
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return (NIOIMAPCore2::MessageIdentificationShiftWrapper)v3;
}

uint64_t MessageIdentifierSet.hash(into:)()
{
  sub_10000566C(&qword_100710538);
  sub_10022AAC0();
  return sub_1005E19C0();
}

Swift::Int MessageIdentifierSet.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002C439C()
{
  return sub_1005E3470();
}

NIOIMAPCore2::MessageIdentificationShiftWrapper sub_1002C43DC@<W0>(Swift::Int64 *a1@<X0>, NIOIMAPCore2::MessageIdentificationShiftWrapper *a2@<X8>)
{
  result.uint64_t rawValue = MessageIdentificationShiftWrapper.advanced(by:)(*a1).rawValue;
  a2->uint64_t rawValue = result.rawValue;
  return result;
}

_DWORD *sub_1002C440C(_DWORD *a1, uint64_t a2, char a3, unsigned int *a4, unsigned int *a5, uint64_t *a6)
{
  return sub_1002C9B34(a1, a2, a3 & 1, *a4, *a5, *a6);
}

BOOL sub_1002C4438(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C4444(*a1, *a2);
}

BOOL sub_1002C4444(unsigned int a1, unsigned int a2)
{
  return a2 > a1;
}

BOOL sub_1002C4450(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C3744(*a1, *a2);
}

BOOL sub_1002C445C(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C9770(*a1, *a2);
}

BOOL sub_1002C4468(unsigned int *a1, unsigned int *a2)
{
  return sub_1002C9948(*a1, *a2);
}

uint64_t sub_1002C4474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v7(v6, a1, a2);
  unsigned int v8 = sub_1002C4260();
  v7(v6, a1, a2);
  uint64_t result = sub_1002C4260();
  uint64_t v10 = (result + 1);
  if (result == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
    if (v8 <= v10) {
      return v8 | (unint64_t)(v10 << 32);
    }
  }
  __break(1u);
  return result;
}

void sub_1002C45B8()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v30 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_100224A54();
  __chkstk_darwin(v9);
  sub_1001FE450();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100224A54();
  __chkstk_darwin(v13);
  sub_1005E1BA0();
  sub_1001FE450();
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  __chkstk_darwin(v14);
  sub_1001F3FE0();
  uint64_t v27 = v16;
  __chkstk_darwin(v17);
  uint64_t v26 = (char *)v25 - v18;
  sub_1002BF124(v5, v3, v1);
  if (HIDWORD(v5))
  {
    sub_1002BF124(HIDWORD(v5) - 1, v3, v1);
    if (sub_1005E1AC0())
    {
      v25[1] = TupleTypeMetadata2;
      _OWORD v25[2] = v1;
      uint64_t v19 = (void (*)(void))v11[4];
      sub_1002C2284();
      v19();
      sub_1002C2284();
      v19();
      uint64_t v20 = (void (*)(void))v11[2];
      sub_1002C8B44();
      v20();
      sub_1002C8B44();
      v20();
      uint64_t v21 = v27;
      sub_1002C2284();
      v19();
      uint64_t v22 = (void (*)(void))v11[1];
      sub_1002C8964();
      v22();
      sub_1002C2284();
      v19();
      sub_1002C2284();
      v19();
      uint64_t v23 = v29;
      sub_1002C2284();
      v19();
      sub_1002C8964();
      v22();
      uint64_t v24 = (uint64_t)v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v26, v21, v23);
      MessageIdentifierRange.init(_:)(v24, v30);
      sub_1001FE57C();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MessageIdentifierSet.min()()
{
  sub_1001FE5B4();
  sub_1002C89D8(v2);
  sub_1001FE450();
  v21[1] = v4;
  v21[2] = v3;
  sub_100207F00();
  __chkstk_darwin(v5);
  v21[0] = (char *)v21 - v6;
  type metadata accessor for MessageIdentifierSet.RangeView();
  sub_1001FE450();
  sub_100207F00();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_1002C8A54();
  sub_1005E28C0();
  sub_1001FE450();
  sub_100207F00();
  __chkstk_darwin(v9);
  sub_1002C8AA0();
  swift_getWitnessTable();
  sub_1002C8B64();
  sub_1005E2480();
  sub_1002C8964();
  v10();
  if (getEnumTagSinglePayload for ClientCommand(v1, 1, v8) == 1)
  {
    uint64_t v11 = sub_1002C8B00();
    v12(v11);
    uint64_t v13 = 1;
    uint64_t v14 = v22;
  }
  else
  {
    uint64_t v15 = sub_1002C89B0();
    v16(v15);
    sub_1001F9720();
    sub_1002080D4();
    v17();
    sub_1001F9720();
    uint64_t v18 = v22;
    sub_100208380();
    v19();
    sub_1002C8964();
    v20();
    uint64_t v13 = 0;
    uint64_t v14 = v18;
  }
  storeEnumTagSinglePayload for ClientCommand(v14, v13, 1, v0);
  sub_1001FE57C();
}

uint64_t type metadata accessor for MessageIdentifierSet.RangeView()
{
  return sub_1000DAF2C();
}

uint64_t MessageIdentifierSet.ranges.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000566C(&qword_1007109E8);
  uint64_t v4 = sub_100224550(v3);
  __chkstk_darwin(v4);
  sub_1002244A8();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  return sub_1002C4EE4(v1, a1);
}

void MessageIdentifierSet.max()()
{
  sub_1001FE5B4();
  sub_1002C89D8(v2);
  sub_1001FE450();
  v21[1] = v4;
  v21[2] = v3;
  sub_100207F00();
  __chkstk_darwin(v5);
  v21[0] = (char *)v21 - v6;
  type metadata accessor for MessageIdentifierSet.RangeView();
  sub_1001FE450();
  sub_100207F00();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_1002C8A54();
  sub_1005E28C0();
  sub_1001FE450();
  sub_100207F00();
  __chkstk_darwin(v9);
  sub_1002C8AA0();
  swift_getWitnessTable();
  sub_1002C8B64();
  sub_1005E1A40();
  sub_1002C8964();
  v10();
  if (getEnumTagSinglePayload for ClientCommand(v1, 1, v8) == 1)
  {
    uint64_t v11 = sub_1002C8B00();
    v12(v11);
    uint64_t v13 = 1;
    uint64_t v14 = v22;
  }
  else
  {
    uint64_t v15 = sub_1002C89B0();
    v16(v15);
    sub_1001F9720();
    sub_1002080D4();
    v17();
    sub_1001F9720();
    uint64_t v18 = v22;
    sub_100208380();
    v19();
    sub_1002C8964();
    v20();
    uint64_t v13 = 0;
    uint64_t v14 = v18;
  }
  storeEnumTagSinglePayload for ClientCommand(v14, v13, 1, v0);
  sub_1001FE57C();
}

BOOL MessageIdentifierSet.isContiguous.getter()
{
  sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  __chkstk_darwin(v0);
  sub_1001F40C0();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  uint64_t v1 = sub_1005E35C0();
  sub_1002C8964();
  v2();
  return v1 < 2;
}

uint64_t MessageIdentifierSet.RangeView.startIndex.getter()
{
  sub_10000566C(&qword_1007109E8);
  return sub_1005E35B0();
}

uint64_t MessageIdentifierSet.RangeView.endIndex.getter()
{
  sub_10000566C(&qword_1007109E8);
  return sub_1005E35E0();
}

void MessageIdentifierSet.RangeView.subscript.getter()
{
}

uint64_t sub_1002C4EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000566C(&qword_1007109E8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t sub_1002C4F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, a4, &protocol witness table for Int);
}

uint64_t sub_1002C4F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, a4, &protocol witness table for Int);
}

uint64_t sub_1002C4F70()
{
  swift_getWitnessTable();
  return sub_1005E2350();
}

void *sub_1002C4FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C54CC(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(before:));
}

uint64_t sub_1002C4FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002C507C()
{
  swift_getWitnessTable();
  return sub_1005E2330();
}

uint64_t sub_1002C5100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002C5174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MessageIdentifierSet.RangeView.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002C519C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MessageIdentifierSet.RangeView.endIndex.getter();
  *a1 = result;
  return result;
}

void (*sub_1002C51C4(uint64_t **a1))(void *)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  _OWORD v2[4] = (uint64_t)sub_1002C5238(v2);
  return sub_1002C5234;
}

void (*sub_1002C5238(uint64_t *a1))(void *)
{
  uint64_t v2 = type metadata accessor for MessageIdentifierRange();
  *a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  MessageIdentifierSet.RangeView.subscript.getter();
  return sub_1002C52F8;
}

uint64_t sub_1002C5300(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, &protocol witness table for Int);
}

void sub_1002C5374(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1002C5390(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002C5400(uint64_t a1)
{
  sub_10000566C(&qword_1007109E8);
  sub_100253FD4(&qword_1007109F8);
  sub_1005E2390();
  sub_1005E23E0();
  sub_1005E23A0();
  uint64_t result = a1 + 1;
  if (__OFADD__(a1, 1)) {
    __break(1u);
  }
  return result;
}

void *sub_1002C54B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C54CC(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(after:));
}

void *sub_1002C54CC(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))
{
  sub_1001FCE50();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, v5, v4, WitnessTable, &protocol witness table for Int);
  *uint64_t v5 = v9;
  return result;
}

uint64_t sub_1002C5540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = MessageIdentifierSet.RangeView.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = sub_1005E2EA0();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_1002C5628(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_1002C567C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

void MessageIdentifierSet.RangeView.init(arrayLiteral:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MessageIdentifierSet();
  sub_1001FE450();
  uint64_t v6 = v5;
  sub_100207F00();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v10 - v8;
  v10[1] = a1;
  type metadata accessor for MessageIdentifierRange();
  sub_1005E21F0();
  swift_getWitnessTable();
  MessageIdentifierSet.init<A>(_:)();
  MessageIdentifierSet.ranges.getter(a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  sub_100208130();
}

uint64_t type metadata accessor for MessageIdentifierSet()
{
  return sub_1000DAF2C();
}

void sub_1002C5804(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static MessageIdentifierSet.RangeView.== infix(_:_:)()
{
  return sub_1005E2040() & 1;
}

uint64_t sub_1002C58CC()
{
  return static MessageIdentifierSet.RangeView.== infix(_:_:)();
}

void MessageIdentifierSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1002C595C(a1, a2, a3, (uint64_t)&type metadata accessor for ClosedRange, (uint64_t)MessageIdentifierRange.init(_:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  sub_1002C595C(a1, a2, a3, (uint64_t)&type metadata accessor for PartialRangeThrough, (uint64_t)MessageIdentifierRange.init(_:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  sub_1002C595C(a1, a2, a3, (uint64_t)&type metadata accessor for PartialRangeFrom, (uint64_t)MessageIdentifierRange.init(_:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_1002C595C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1001FE5B4();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30(0);
  sub_1001FE450();
  uint64_t v33 = v32;
  sub_100207F00();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&a9 - v35;
  uint64_t v37 = type metadata accessor for MessageIdentifierRange();
  sub_100224550(v37);
  sub_100207F00();
  __chkstk_darwin(v38);
  sub_1002C8A7C();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v29, v31);
  v23(v36, v27, v25);
  MessageIdentifierSet.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v29, v31);
  sub_1001FE57C();
}

void MessageIdentifierSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1001FE5B4();
  uint64_t v13 = v12;
  sub_1001FE450();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for MessageIdentifierRange();
  sub_100224550(v19);
  sub_100207F00();
  __chkstk_darwin(v20);
  sub_1002C8A7C();
  sub_1005E2570();
  if (sub_1005E2560())
  {
    MessageIdentifierSet.init()();
    sub_1001F9720();
    sub_1001FE57C();
    v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
  }
  else
  {
    v30[1] = -1;
    sub_1005E2980();
    static MessageIdentifier.... infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
    MessageIdentifierSet.init(_:)();
    sub_1001F9720();
    sub_1002080D4();
    v29();
    sub_1001FE57C();
  }
}

#error "1002C5C9C: call analysis failed (funcsize=16)"

uint64_t sub_1002C5CAC()
{
  return MessageIdentifierSet.writeIntoBuffer(_:)();
}

uint64_t sub_1002C5CEC()
{
  return sub_1002C5CAC();
}

uint64_t MessageIdentifierSet.writeIntoBuffer(_:)()
{
  sub_1001FCE50();
  uint64_t v2 = sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1002244C0();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  sub_1002C247C(v1, 0, 0xE000000000000000, 44, 0xE100000000000000, 0, 0xE000000000000000, 0, (uint64_t)sub_1002C7A64, (uint64_t)var50, var50[0], var50[1], *(void *)(v0 + 16), *(void *)(v0 + 24), var50[4], var50[5], var50[6], var50[7], var50[8],
    var50[9],
    var50[10],
    var50[11]);
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  return v7;
}

uint64_t MessageIdentifierSet.init(arrayLiteral:)()
{
  return MessageIdentifierSet.init<A>(_:)();
}

uint64_t sub_1002C5E88()
{
  return MessageIdentifierSet.init(arrayLiteral:)();
}

uint64_t MessageIdentifierSet.startIndex.getter(uint64_t a1)
{
  return sub_1002C5EC4(a1, (uint64_t (*)(uint64_t))&RangeSet.Ranges.startIndex.getter);
}

uint64_t MessageIdentifierSet.endIndex.getter(uint64_t a1)
{
  return sub_1002C5EC4(a1, (uint64_t (*)(uint64_t))&RangeSet.Ranges.endIndex.getter);
}

uint64_t sub_1002C5EC4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1002244A8();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  uint64_t v8 = a2(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
  return v8;
}

void MessageIdentifierSet.index(after:)()
{
}

void MessageIdentifierSet.index(_:offsetBy:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000566C(&qword_1007109E8);
  __chkstk_darwin(v6);
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      uint64_t v8 = (void (**)(uint64_t))(v7 + 8);
      while (1)
      {
        sub_10000566C(&qword_100710538);
        sub_1005E3600();
        uint64_t v9 = sub_1005E35E0();
        uint64_t v10 = *v8;
        uint64_t v11 = sub_1002C8A04();
        v10(v11);
        if (v5 >= v9) {
          break;
        }
        sub_1005E3600();
        sub_1002C8A34();
        uint64_t v12 = sub_1002C8A04();
        v10(v12);
        if (__OFADD__(v3, v1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v3 + v1 < (uint64_t)(v28 - (unint64_t)v27)) {
          goto LABEL_31;
        }
        sub_1005E3600();
        sub_100253FD4(&qword_1007109F8);
        sub_1005E2390();
        sub_1005E23E0();
        sub_1002C8AE8();
        sub_1005E23A0();
        uint64_t v13 = sub_1002C8970();
        v10(v13);
        sub_1005E3600();
        sub_1002C8A34();
        uint64_t v14 = sub_1002C8A04();
        v10(v14);
        int64_t v15 = v28 - (unint64_t)v27;
        if ((v15 ^ v3) < 0)
        {
          if (v3 >= 0) {
            uint64_t v18 = v3;
          }
          else {
            uint64_t v18 = -v3;
          }
          if (v15 < 0) {
            int64_t v15 = v27 - (unint64_t)v28;
          }
          uint64_t v17 = v15 + v18;
          if (v17 < 0) {
            goto LABEL_36;
          }
          if (v3 >= 0) {
            uint64_t v17 = -v17;
          }
        }
        else
        {
          BOOL v16 = __OFSUB__(v15, v3);
          uint64_t v17 = v15 - v3;
          if (v16) {
            goto LABEL_34;
          }
        }
        BOOL v16 = __OFSUB__(v1, v17);
        v1 -= v17;
        if (v16) {
          goto LABEL_33;
        }
        uint64_t v3 = 0;
        ++v5;
        if (v1 <= 0) {
          goto LABEL_31;
        }
      }
      if (__OFADD__(v3, v1)) {
        goto LABEL_38;
      }
    }
LABEL_31:
    sub_1001FE57C();
    return;
  }
  uint64_t v19 = v3 + v1;
  if (!__OFADD__(v3, v1))
  {
    if (v19 < 0)
    {
      uint64_t v20 = (void (**)(uint64_t))(v7 + 8);
      while (1)
      {
        sub_10000566C(&qword_100710538);
        sub_1005E3600();
        uint64_t v21 = sub_1005E35B0();
        uint64_t v22 = *v20;
        uint64_t v23 = sub_1002C8970();
        v22(v23);
        if (v21 >= v5) {
          break;
        }
        sub_1005E3600();
        --v5;
        sub_100253FD4(&qword_1007109F8);
        sub_1005E2390();
        sub_1005E23E0();
        sub_1002C8AE8();
        sub_1005E23A0();
        uint64_t v24 = sub_1002C8970();
        v22(v24);
        sub_1005E3600();
        sub_1002C8A34();
        uint64_t v25 = sub_1002C8970();
        v22(v25);
        unint64_t v26 = v28 - (unint64_t)v27;
        BOOL v16 = __OFADD__(v19, v26);
        v19 += v26;
        if (v16)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        if ((v19 & 0x8000000000000000) == 0) {
          goto LABEL_31;
        }
      }
    }
    goto LABEL_31;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void MessageIdentifierSet.index(before:)()
{
}

void MessageIdentifierSet.distance(from:to:)()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100224260();
  BOOL v15 = v11 < v7;
  if (v11 == v7)
  {
    if ((v5 ^ v9) < 0) {
      goto LABEL_15;
    }
    BOOL v15 = v5 < v9;
    if (!__OFSUB__(v5, v9)) {
      goto LABEL_23;
    }
    __break(1u);
  }
  if (v15)
  {
    uint64_t v25 = v3;
    sub_10000566C(&qword_100710538);
    sub_1005E3600();
    sub_1005E35F0();
    BOOL v16 = *(void (**)(void))(v13 + 8);
    sub_1002C8964();
    v16();
    unint64_t v17 = v27 - (unint64_t)v26;
    BOOL v18 = __OFSUB__(v17, v9);
    uint64_t v9 = v17 - v9;
    if (v18)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    sub_1005E3600();
    uint64_t v19 = sub_1002C5400(v11);
    sub_1002C8964();
    v16();
    uint64_t v20 = v19;
    uint64_t v3 = v1;
    if (!__OFADD__(v9, MessageIdentifierSet.distance(from:to:)(v20, 0, v7, v5, v25))) {
      goto LABEL_23;
    }
    __break(1u);
  }
  if (!__OFSUB__(0, MessageIdentifierSet.distance(from:to:)(v7, v5, v11, v9, v3))) {
    goto LABEL_23;
  }
  __break(1u);
LABEL_15:
  if (v9 >= 0) {
    uint64_t v21 = v9;
  }
  else {
    uint64_t v21 = -v9;
  }
  if (v5 >= 0) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = -v5;
  }
  BOOL v23 = __CFADD__(v21, v22);
  uint64_t v24 = v21 + v22;
  if (v23) {
    goto LABEL_25;
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
LABEL_23:
    sub_1001FE57C();
    return;
  }
LABEL_26:
  __break(1u);
}

void MessageIdentifierSet.subscript.getter()
{
  sub_1001FE5B4();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1002C8A7C();
  uint64_t v8 = *(void *)(v3 + 16);
  sub_1001FE450();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100224260();
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  sub_1005E35F0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  sub_1002BF124(v12, v8, *(void *)(v3 + 24));
  sub_1005E2980();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  sub_1001FE57C();
}

void MessageIdentifierSet.count.getter()
{
  sub_1001FE5B4();
  uint64_t v0 = sub_10000566C(&qword_1007109E0);
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0);
  sub_1001F40C0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_10000566C(&qword_1007109E8);
  sub_1001FE450();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100224A54();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v26 - v13;
  sub_10000566C(&qword_100710538);
  sub_1005E3600();
  BOOL v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v26[1] = v14;
  unsigned int v27 = v15;
  v15(v11, (uint64_t)v14, v5);
  sub_100253FD4(&qword_1007109F0);
  sub_1005E1F60();
  BOOL v16 = (uint64_t *)(v4 + *(int *)(v1 + 44));
  sub_100253FD4(&qword_1007109F8);
  uint64_t v17 = 0;
  uint64_t v28 = v7 + 16;
  while (1)
  {
    uint64_t v18 = *v16;
    sub_1005E23E0();
    if (v18 == v29) {
      break;
    }
    uint64_t v19 = (void (*)(uint64_t *, void))sub_1005E24D0();
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    v19(&v29, 0);
    v27(v11, v4, v5);
    sub_1005E23F0();
    sub_1002C8964();
    v23();
    BOOL v24 = __OFADD__(v17, v22 - v21);
    v17 += v22 - v21;
    if (v24)
    {
      __break(1u);
      break;
    }
  }
  sub_1002C88A4(v4, &qword_1007109E0);
  sub_1002C8964();
  v25();
  sub_1001FE57C();
}

void sub_1002C6890(void *a1@<X8>)
{
  MessageIdentifierSet.index(before:)();
  *a1 = v2;
  a1[1] = v3;
}

void sub_1002C68C0(void *a1)
{
  MessageIdentifierSet.index(before:)();
  *a1 = v2;
  a1[1] = v3;
}

void sub_1002C68F0(void *a1@<X8>)
{
  MessageIdentifierSet.index(_:offsetBy:)();
  *a1 = v2;
  a1[1] = v3;
}

void sub_1002C6928()
{
}

uint64_t sub_1002C6940@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MessageIdentifierSet.startIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1002C6968@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MessageIdentifierSet.endIndex.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void (*sub_1002C6990(void *a1, uint64_t *a2, uint64_t a3))(void *)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1002C6A00(v6, *a2, a2[1], a3);
  return sub_1002C5234;
}

void (*sub_1002C6A00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *)
{
  uint64_t v4 = *(void *)(a4 + 16);
  *a1 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  a1[1] = v5;
  a1[2] = malloc(*(void *)(v5 + 64));
  MessageIdentifierSet.subscript.getter();
  return sub_1002C52F8;
}

void sub_1002C6ACC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

uint64_t sub_1002C6ADC()
{
  swift_getWitnessTable();
  return sub_1005E1A50();
}

void sub_1002C6B60(void *a1@<X8>)
{
  MessageIdentifierSet.index(after:)();
  *a1 = v2;
  a1[1] = v3;
}

void sub_1002C6B94(void *a1)
{
  MessageIdentifierSet.index(after:)();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002C6BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v7 = MessageIdentifierSet.startIndex.getter(v6);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = sub_1005E2EA0();
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(result + 36));
  *uint64_t v11 = v7;
  v11[1] = v9;
  return result;
}

uint64_t sub_1002C6CB8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_1002C6D0C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

BOOL static MessageIdentifierSet.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3) {
    return a2 < a4;
  }
  else {
    return a1 < a3;
  }
}

BOOL static MessageIdentifierSet.Index.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3) {
    return a4 < a2;
  }
  else {
    return a3 < a1;
  }
}

BOOL sub_1002C6D94(uint64_t *a1, uint64_t *a2)
{
  return static MessageIdentifierSet.Index.< infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL sub_1002C6DB0(uint64_t *a1, uint64_t *a2)
{
  return static MessageIdentifierSet.Index.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t MessageIdentifierSet.contains(_:)()
{
  sub_1001FE450();
  __chkstk_darwin(v1);
  sub_1002244A8();
  (*(void (**)(uint64_t))(v2 + 16))(v0);
  sub_1002C4260();
  sub_10000566C(&qword_100710538);
  return sub_1005E3640() & 1;
}

void MessageIdentifierSet.union(_:)()
{
}

void MessageIdentifierSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
}

void MessageIdentifierSet.symmetricDifference(_:)()
{
}

void sub_1002C6EC4()
{
  sub_1001FE5B4();
  uint64_t v1 = v0;
  uint64_t v16 = v2;
  uint64_t v3 = sub_10000566C(&qword_100710538);
  sub_1001FE450();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100224A54();
  uint64_t v9 = v7 - v8;
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v15 - v12;
  uint64_t v14 = *(void (**)(void))(v5 + 16);
  sub_1002C8B44();
  v14();
  sub_1002C8B44();
  v14();
  v1(v9, v3);
  sub_1002C3C90((uint64_t)v13, v16);
  sub_1001FE57C();
}

void MessageIdentifierSet.insert(_:)()
{
  sub_1001FE5B4();
  sub_1001FCE50();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1001FE450();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_1001F40C0();
  uint64_t v7 = v6 - v5;
  char v8 = MessageIdentifierSet.contains(_:)();
  uint64_t v9 = *(void (**)(void))(v3 + 16);
  if ((v8 & 1) == 0)
  {
    sub_1002C8B50();
    v9();
    unint64_t v10 = sub_1002C4474(v7, v1);
    sub_1002C4060(v10);
  }
  sub_1002C8B50();
  v9();
  sub_1001FE57C();
}

void MessageIdentifierSet.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  sub_1001FE450();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  if (sub_1002C8AC4())
  {
    uint64_t v7 = *(void (**)(void))(v5 + 16);
    sub_1002C8A24();
    v7();
    sub_1002C4474(v2, v3);
    sub_10000566C(&qword_100710538);
    sub_1005E3610();
    sub_1002C8A24();
    v7();
    uint64_t v8 = sub_1002C8BA0();
    storeEnumTagSinglePayload for ClientCommand(v8, v9, v10, v11);
    sub_100208130();
  }
  else
  {
    sub_1002C8B8C();
    sub_100208130();
    storeEnumTagSinglePayload for ClientCommand(v12, v13, v14, v15);
  }
}

void MessageIdentifierSet.update(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  sub_1001FE450();
  __chkstk_darwin(v4);
  if (sub_1002C8AC4())
  {
    sub_1002C8A24();
    v5();
    sub_1002C8BA0();
    sub_100208130();
    storeEnumTagSinglePayload for ClientCommand(v6, v7, v8, v9);
  }
  else
  {
    sub_1002C8A24();
    v11();
    unint64_t v12 = sub_1002C4474(v2, v3);
    sub_1002C4060(v12);
    uint64_t v13 = sub_1002C8B8C();
    storeEnumTagSinglePayload for ClientCommand(v13, v14, v15, v16);
    sub_100208130();
  }
}

uint64_t MessageIdentifierSet.formUnion(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1002C7318(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&RangeSet.formUnion(_:));
}

uint64_t MessageIdentifierSet.formIntersection(_:)()
{
  sub_10000566C(&qword_100710538);
  uint64_t v0 = sub_1002C8A18();
  return RangeSet.formIntersection(_:)(v0);
}

uint64_t MessageIdentifierSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1002C7318(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&RangeSet.formSymmetricDifference(_:));
}

uint64_t sub_1002C7318(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = sub_10000566C(&qword_100710538);
  sub_1001FE450();
  __chkstk_darwin(v7);
  sub_1002244C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a1, v6);
  return a3(v3, v6);
}

void MessageIdentifierSet.subtracting(_:)(uint64_t a1, uint64_t a2)
{
}

void sub_1002C73DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  sub_1001FCE50();
  uint64_t v7 = v6;
  uint64_t v8 = sub_10000566C(&qword_100710538);
  sub_1001FE450();
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v12, v3, v8);
  a3(v4, v8);
  sub_1002C3C90((uint64_t)v14, v7);
  sub_100208130();
}

uint64_t MessageIdentifierSet.isSubset(of:)()
{
  sub_10000566C(&qword_100710538);
  sub_1002C8A18();
  return sub_1005E3650();
}

uint64_t MessageIdentifierSet.isSuperset(of:)()
{
  sub_10000566C(&qword_100710538);
  uint64_t v0 = sub_1002C8A18();
  return RangeSet.isSuperset(of:)(v0);
}

uint64_t MessageIdentifierSet.subtract(_:)()
{
  sub_10000566C(&qword_100710538);
  sub_1002C8A18();
  return sub_1005E3660();
}

uint64_t MessageIdentifierSet.isStrictSuperset(of:)()
{
  sub_10000566C(&qword_100710538);
  uint64_t v0 = sub_1002C8A18();
  return RangeSet.isStrictSuperset(of:)(v0);
}

uint64_t MessageIdentifierSet.isStrictSubset(of:)()
{
  sub_10000566C(&qword_100710538);
  uint64_t v0 = sub_1002C8A18();
  return RangeSet.isStrictSubset(of:)(v0);
}

uint64_t sub_1002C761C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7664(a1, a2, a3, MessageIdentifierSet.union(_:));
}

uint64_t sub_1002C7634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7888(a1, a2, a3, (void (*)(void))MessageIdentifierSet.intersection(_:));
}

uint64_t sub_1002C764C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7664(a1, a2, a3, MessageIdentifierSet.symmetricDifference(_:));
}

uint64_t sub_1002C7664(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1001F9720();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v4, a2);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1, a2);
}

uint64_t sub_1002C76F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MessageIdentifierSet.insert(_:)();
  char v6 = v5;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8))(a2);
  return v6 & 1;
}

uint64_t sub_1002C7764(uint64_t a1, uint64_t a2)
{
  MessageIdentifierSet.update(with:)(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

uint64_t sub_1002C77D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7804(a1, a2, a3, (void (*)(void))MessageIdentifierSet.formUnion(_:));
}

uint64_t sub_1002C77EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7804(a1, a2, a3, (void (*)(void))MessageIdentifierSet.formSymmetricDifference(_:));
}

uint64_t sub_1002C7804(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1001F9720();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  return v7(a1, a2);
}

uint64_t sub_1002C7870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7888(a1, a2, a3, (void (*)(void))MessageIdentifierSet.subtracting(_:));
}

uint64_t sub_1002C7888(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1001F9720();
  uint64_t v4 = sub_10022C948();
  return v5(v4);
}

uint64_t _s12NIOIMAPCore220MessageIdentifierSetVA2A3UIDVRszrlEyACyAEGACyAA07UnknownbC0VGcfC_0()
{
  sub_10000566C(&qword_100710538);
  sub_1001F3BBC();
  uint64_t v0 = sub_10022C948();
  return v1(v0);
}

uint64_t sub_1002C7958()
{
  uint64_t v0 = type metadata accessor for MessageIdentifierRange();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - v2;
  sub_1002C45B8();
  sub_1002BFD00();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t sub_1002C7A64()
{
  return sub_1002C7958();
}

uint64_t sub_1002C7A6C()
{
  return swift_getWitnessTable();
}

unint64_t sub_1002C7A8C()
{
  unint64_t result = qword_100711DD8[0];
  if (!qword_100711DD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100711DD8);
  }
  return result;
}

uint64_t sub_1002C7ADC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7AF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7B5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7B78()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7BDC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7BF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7C14()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7C30()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7C94()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7CF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7D14()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7D30()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002C7D4C()
{
  return swift_getWitnessTable();
}

void sub_1002C7D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1002C7D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7F50(a1, a2, a3, &qword_100710538);
}

uint64_t sub_1002C7D94(uint64_t a1, uint64_t a2)
{
  return sub_1002C7FB0(a1, a2, &qword_100710538);
}

uint64_t sub_1002C7DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8014(a1, a2, a3, &qword_100710538);
}

uint64_t sub_1002C7DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8068(a1, a2, a3, &qword_100710538);
}

uint64_t sub_1002C7DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C80BC(a1, a2, a3, &qword_100710538);
}

uint64_t sub_1002C7DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8110(a1, a2, a3, &qword_100710538);
}

uint64_t sub_1002C7DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C7DE4);
}

uint64_t sub_1002C7DE4()
{
  sub_1002C8B24();
  uint64_t v2 = sub_10000566C(&qword_100710538);
  return getEnumTagSinglePayload for ClientCommand(v1, v0, v2);
}

uint64_t sub_1002C7E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C7E40);
}

uint64_t sub_1002C7E40()
{
  sub_1002C8B24();
  sub_10000566C(&qword_100710538);
  uint64_t v0 = sub_1002C8B78();
  return storeEnumTagSinglePayload for ClientCommand(v0, v1, v2, v3);
}

ValueMetadata *type metadata accessor for MessageIdentificationShiftWrapper()
{
  return &type metadata for MessageIdentificationShiftWrapper;
}

void sub_1002C7E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002C7EB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t))
{
  sub_1002C8208(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1002C7F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C7F50(a1, a2, a3, &qword_1007109E8);
}

uint64_t sub_1002C7F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002C8984(a1, a2, a3, a4);
  sub_1001F3BBC();
  uint64_t v4 = sub_10022C948();
  return v5(v4);
}

uint64_t sub_1002C7FA4(uint64_t a1, uint64_t a2)
{
  return sub_1002C7FB0(a1, a2, &qword_1007109E8);
}

uint64_t sub_1002C7FB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10000566C(a3);
  sub_1001F3BBC();
  uint64_t v3 = sub_1002C8A18();
  return v4(v3);
}

uint64_t sub_1002C8008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8014(a1, a2, a3, &qword_1007109E8);
}

uint64_t sub_1002C8014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002C8984(a1, a2, a3, a4);
  sub_1001F3BBC();
  uint64_t v5 = sub_1002C89A0();
  v6(v5);
  return v4;
}

uint64_t sub_1002C805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8068(a1, a2, a3, &qword_1007109E8);
}

uint64_t sub_1002C8068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002C8984(a1, a2, a3, a4);
  sub_1001F3BBC();
  uint64_t v5 = sub_1002C89A0();
  v6(v5);
  return v4;
}

uint64_t sub_1002C80B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C80BC(a1, a2, a3, &qword_1007109E8);
}

uint64_t sub_1002C80BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002C8984(a1, a2, a3, a4);
  sub_1001F3BBC();
  uint64_t v5 = sub_1002C89A0();
  v6(v5);
  return v4;
}

uint64_t sub_1002C8104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C8110(a1, a2, a3, &qword_1007109E8);
}

uint64_t sub_1002C8110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002C8984(a1, a2, a3, a4);
  sub_1001F3BBC();
  uint64_t v5 = sub_1002C89A0();
  v6(v5);
  return v4;
}

uint64_t sub_1002C8158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C816C);
}

uint64_t sub_1002C816C()
{
  sub_1002C8B24();
  uint64_t v2 = sub_10000566C(&qword_1007109E8);
  return getEnumTagSinglePayload for ClientCommand(v1, v0, v2);
}

uint64_t sub_1002C81B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C81C8);
}

uint64_t sub_1002C81C8()
{
  sub_1002C8B24();
  sub_10000566C(&qword_1007109E8);
  uint64_t v0 = sub_1002C8B78();
  return storeEnumTagSinglePayload for ClientCommand(v0, v1, v2, v3);
}

void sub_1002C8208(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_100223B18();
    unint64_t v7 = a3(a1, &type metadata for MessageIdentificationShiftWrapper, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t type metadata accessor for MessageIdentifierSet.Index()
{
  return sub_1000DAF2C();
}

uint64_t sub_1002C8284@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2E10(*a1, *a2, a2[1], a3, a4, a5, a6, a7, a8);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C82E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002C8284(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void **)(v3 + 56), a3);
}

uint64_t sub_1002C8304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100711F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C836C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711F88, (void (*)(void))type metadata accessor for SelectParameter, (void (*)(void))type metadata accessor for SelectParameter);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C83D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711F90, (void (*)(void))type metadata accessor for FetchModifier, (void (*)(void))type metadata accessor for FetchModifier);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C8444@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, qword_100711FA8, (void (*)(void))type metadata accessor for MetadataOption, (void (*)(void))type metadata accessor for MetadataOption);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C84B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711F80, (void (*)(void))type metadata accessor for CreateParameter, (void (*)(void))type metadata accessor for CreateParameter);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C851C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711F98, (void (*)(void))type metadata accessor for StoreModifier, (void (*)(void))type metadata accessor for StoreModifier);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C8588@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711FA0, (void (*)(void))type metadata accessor for SearchReturnOption, (void (*)(void))type metadata accessor for SearchReturnOption);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C85F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_1002C2F94(*a1, a2, a3, a4, a5, *a6, a7, a8, &qword_100711F78, (void (*)(void))type metadata accessor for SearchReturnData, (void (*)(void))type metadata accessor for SearchReturnData);
  if (!v9) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_1002C8660(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C85F4);
}

uint64_t sub_1002C868C(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C84B0);
}

uint64_t sub_1002C86B8(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C836C);
}

uint64_t sub_1002C86E4(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C83D8);
}

uint64_t sub_1002C8710(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C851C);
}

uint64_t sub_1002C873C(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C8588);
}

uint64_t sub_1002C8768(uint64_t a1, uint64_t a2)
{
  return sub_1002C8794(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_1002C8444);
}

uint64_t sub_1002C8794(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t sub_1002C87C0()
{
  uint64_t v1 = sub_1002C8B30();
  v2(v1);
  sub_1001F3BBC();
  sub_100208380();
  v3();
  return v0;
}

uint64_t sub_1002C8810()
{
  uint64_t v1 = sub_1002C8B30();
  v2(v1);
  sub_1001F3BBC();
  uint64_t v3 = sub_1001F4A1C();
  v4(v3);
  return v0;
}

uint64_t sub_1002C8858()
{
  sub_1002C8B24();
  sub_10000566C(v1);
  sub_1001F3BBC();
  uint64_t v2 = sub_1001F4A1C();
  v3(v2);
  return v0;
}

uint64_t sub_1002C88A4(uint64_t a1, uint64_t *a2)
{
  sub_10000566C(a2);
  sub_1001F3BBC();
  sub_1002080D4();
  v3();
  return a1;
}

uint64_t sub_1002C88F4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1001F3BBC();
  sub_1002080D4();
  v3();
  return a1;
}

uint64_t sub_1002C8970()
{
  return v0;
}

uint64_t sub_1002C8984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_10000566C(a4);
}

uint64_t sub_1002C89A0()
{
  return v0;
}

uint64_t sub_1002C89B0()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_1002C89D8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 88) = a1;
  return sub_1005E1BA0();
}

uint64_t sub_1002C8A04()
{
  return v0;
}

uint64_t sub_1002C8A18()
{
  return v0;
}

uint64_t sub_1002C8A34()
{
  return sub_1005E35F0();
}

uint64_t sub_1002C8A54()
{
  return type metadata accessor for MessageIdentifierRange();
}

uint64_t sub_1002C8A88()
{
  return v0;
}

uint64_t sub_1002C8AA0()
{
  return MessageIdentifierSet.ranges.getter(v0);
}

uint64_t sub_1002C8AC4()
{
  return MessageIdentifierSet.contains(_:)();
}

uint64_t sub_1002C8AE8()
{
  uint64_t v1 = *(void *)(v0 - 120);
  *(void *)(v0 - 104) = *(void *)(v0 - 112);
  *(void *)(v0 - 96) = v1;
  return v0 - 88;
}

uint64_t sub_1002C8B00()
{
  return v0;
}

uint64_t sub_1002C8B18()
{
  return 41;
}

uint64_t sub_1002C8B30()
{
  return 0;
}

uint64_t sub_1002C8B64()
{
  return v0;
}

uint64_t sub_1002C8B78()
{
  return v0;
}

uint64_t sub_1002C8B8C()
{
  return v0;
}

uint64_t sub_1002C8BA0()
{
  return v0;
}

uint64_t MessageIdentifierSetNonEmpty.init(set:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MessageIdentifierSetNonEmpty();
  sub_10022C254();
  uint64_t v6 = v5;
  sub_100207F00();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = type metadata accessor for MessageIdentifierSet();
  MessageIdentifierSet.count.getter();
  uint64_t v11 = *(void *)(v10 - 8);
  if (v12 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    return storeEnumTagSinglePayload for ClientCommand(a2, 1, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v9, v4);
    return storeEnumTagSinglePayload for ClientCommand(a2, 0, 1, v4);
  }
}

uint64_t type metadata accessor for MessageIdentifierSetNonEmpty()
{
  return sub_1000DAF2C();
}

uint64_t MessageIdentifierSetNonEmpty.init(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MessageIdentifierRange();
  sub_10022C254();
  uint64_t v6 = v5;
  sub_100207F00();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for MessageIdentifierSet();
  sub_10022C254();
  uint64_t v12 = v11;
  sub_100207F00();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v4);
  MessageIdentifierSet.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v15, v10);
}

uint64_t MessageIdentifierSetNonEmpty.writeIntoBuffer(_:)()
{
  sub_1002C9750();
  return MessageIdentifierSet.writeIntoBuffer(_:)();
}

uint64_t static MessageIdentifierSetNonEmpty.all.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MessageIdentifierSet();
  sub_100207F00();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v5 = type metadata accessor for MessageIdentifierSetNonEmpty();
  sub_1005E28C0();
  sub_100207F00();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v10 - v7;
  static MessageIdentifierSet.all.getter();
  MessageIdentifierSetNonEmpty.init(set:)((uint64_t)v4, (uint64_t)v8);
  uint64_t result = getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, v8, v5);
  }
  __break(1u);
  return result;
}

uint64_t MessageIdentifierSetNonEmpty.set.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MessageIdentifierSet();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t MessageIdentifierSetNonEmpty.hash(into:)()
{
  sub_1002C9750();
  return MessageIdentifierSet.hash(into:)();
}

Swift::Int MessageIdentifierSetNonEmpty.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002C910C()
{
  return sub_1005E3470();
}

uint64_t sub_1002C9150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MessageIdentifierSetNonEmpty.__derived_struct_equals(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t MessageIdentifierSetNonEmpty.debugDescription.getter()
{
  uint64_t v0 = type metadata accessor for MessageIdentifierSet();
  return MessageIdentifierSet.debugDescription.getter(v0);
}

uint64_t MessageIdentifierSetNonEmpty.init(arrayLiteral:)()
{
  type metadata accessor for MessageIdentifierRange();
  uint64_t result = sub_1005E2180();
  if (result < 1)
  {
    __break(1u);
  }
  else
  {
    sub_1005E21F0();
    swift_getWitnessTable();
    return MessageIdentifierSet.init<A>(_:)();
  }
  return result;
}

uint64_t sub_1002C9244()
{
  return MessageIdentifierSetNonEmpty.init(arrayLiteral:)();
}

uint64_t MessageIdentifierSetNonEmpty.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C9280(a1, (void (*)(uint64_t))MessageIdentifierSet.min(), a2);
}

uint64_t MessageIdentifierSetNonEmpty.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C9280(a1, (void (*)(uint64_t))MessageIdentifierSet.max(), a2);
}

uint64_t sub_1002C9280@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_1005E28C0();
  sub_100207F00();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = type metadata accessor for MessageIdentifierSet();
  a2(v9);
  uint64_t result = getEnumTagSinglePayload for ClientCommand((uint64_t)v8, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a3, v8, v5);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C936C()
{
  return swift_getWitnessTable();
}

void sub_1002C9388()
{
  sub_10027AC38();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1002C9414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_1002C9484(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100710538);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_1002C94EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002C9554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002C95BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002C9624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002C968C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C96A0);
}

uint64_t sub_1002C96A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageIdentifierSet();
  return getEnumTagSinglePayload for ClientCommand(a1, a2, v4);
}

uint64_t sub_1002C96EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C9700);
}

uint64_t sub_1002C9700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageIdentifierSet();
  return storeEnumTagSinglePayload for ClientCommand(a1, a2, a2, v4);
}

uint64_t sub_1002C9750()
{
  return type metadata accessor for MessageIdentifierSet();
}

BOOL sub_1002C9770(unsigned int a1, unsigned int a2)
{
  return a2 <= a1;
}

BOOL sub_1002C977C(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_1002C9788(void *a1, uint64_t a2, unsigned __int8 a3, void *a4, unint64_t a5, unsigned __int8 a6)
{
  if (_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a4))
  {
    if (a3 > 1u)
    {
      BOOL v13 = 1;
      switch(a2)
      {
        case 1:
          return !v13;
        case 2:
          sub_1002CA4D0();
          if (v18 == 2) {
            BOOL v13 = v17;
          }
          else {
            BOOL v13 = v16;
          }
          break;
        case 3:
          BOOL v13 = 0;
          break;
        default:
          if (a5) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = a6 == 2;
          }
          BOOL v13 = !v15;
          break;
      }
    }
    else
    {
      BOOL v13 = a6 > 1u && a5 > 2;
    }
  }
  else
  {
    BOOL v13 = static SectionSpecifier.Part.< infix(_:_:)((BOOL)a1, (uint64_t)a4);
  }
  return !v13;
}

BOOL sub_1002C9874(BOOL a1, uint64_t a2)
{
  return !static SectionSpecifier.Part.< infix(_:_:)(a1, a2);
}

BOOL sub_1002C9894(uint64_t a1, unsigned __int8 a2, unint64_t a3, unsigned __int8 a4)
{
  if (a2 > 1u)
  {
    BOOL v5 = 1;
    switch(a1)
    {
      case 1:
        return !v5;
      case 2:
        BOOL v5 = a4 != 2 || (a3 & 0xFFFFFFFFFFFFFFFDLL) != 0;
        break;
      case 3:
        BOOL v5 = 0;
        break;
      default:
        if (a3) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = a4 == 2;
        }
        BOOL v5 = !v7;
        break;
    }
  }
  else
  {
    BOOL v5 = a4 > 1u && a3 > 2;
  }
  return !v5;
}

BOOL sub_1002C992C(unsigned int a1, unsigned int a2)
{
  return a1 >= a2;
}

BOOL sub_1002C9938(uint64_t a1, BOOL a2)
{
  return static SectionSpecifier.Part.< infix(_:_:)(a2, a1);
}

BOOL sub_1002C9948(unsigned int a1, unsigned int a2)
{
  return a1 > a2;
}

BOOL sub_1002C9954(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_1002C9960(void *a1, unint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5, unsigned __int8 a6)
{
  if (_s12NIOIMAPCore216SectionSpecifierV4PartV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a1))
  {
    if (a6 > 1u)
    {
      uint64_t result = 1;
      switch(a5)
      {
        case 1:
          return result;
        case 2:
          sub_1002CA4D0();
          if (v17 == 2) {
            uint64_t result = v16;
          }
          else {
            uint64_t result = v15;
          }
          break;
        case 3:
          uint64_t result = 0;
          break;
        default:
          if (a2) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = a3 == 2;
          }
          uint64_t result = !v14;
          break;
      }
    }
    else
    {
      return a3 > 1u && a2 > 2;
    }
  }
  else
  {
    return static SectionSpecifier.Part.< infix(_:_:)((BOOL)a4, (uint64_t)a1);
  }
  return result;
}

BOOL sub_1002C9A64(unint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return a2 > 1u && a1 > 2;
  }
  BOOL v5 = 1;
  switch(a3)
  {
    case 1:
      return v5;
    case 2:
      BOOL v5 = a2 != 2 || (a1 & 0xFFFFFFFFFFFFFFFDLL) != 0;
      break;
    case 3:
      BOOL v5 = 0;
      break;
    default:
      if (a1) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = a2 == 2;
      }
      BOOL v5 = !v7;
      break;
  }
  return v5;
}

BOOL sub_1002C9AFC(unsigned int a1, unsigned int a2)
{
  return a2 < a1;
}

void *sub_1002C9B10(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = a4 + a6;
  if (__OFADD__(a4, a6))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    *uint64_t result = v6;
    return (void *)variable initialization expression of Cache._idna();
  }
LABEL_7:
  __break(1u);
  return result;
}

_DWORD *sub_1002C9B34(_DWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a6 + a4;
  if (__OFADD__(a6, a4))
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!HIDWORD(v6))
  {
    *uint64_t result = v6;
    return (_DWORD *)variable initialization expression of Cache._idna();
  }
LABEL_7:
  __break(1u);
  return result;
}

_DWORD *sub_1002C9B5C(_DWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (a6 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = a6 + a4;
  if (v6 < 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (!HIDWORD(v6))
  {
    *uint64_t result = v6;
    return (_DWORD *)variable initialization expression of Cache._idna();
  }
LABEL_7:
  __break(1u);
  return result;
}

#error "1002C9BC4: call analysis failed (funcsize=16)"

#error "1002C9C08: call analysis failed (funcsize=16)"

uint64_t sub_1002C9C1C(uint64_t result, unsigned int a2)
{
  if (result > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_6;
  }
  result += a2;
  if (result < 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (HIDWORD(result)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

BOOL static ChangeID.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL sub_1002C9C58(unsigned int a1, unsigned int a2)
{
  return a2 >= a1;
}

void sub_1002C9C64(uint64_t a1, int a2)
{
}

uint64_t sub_1002C9C8C(uint64_t a1)
{
  unint64_t v2 = sub_1002C9E08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C9CC8(uint64_t a1)
{
  unint64_t v2 = sub_1002C9E08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UID.encode(to:)(void *a1)
{
  uint64_t v2 = sub_10000566C(&qword_100712030);
  sub_10022C254();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003BCDC(a1, a1[3]);
  sub_1002C9E08();
  sub_1005E3500();
  sub_1005E31E0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

unint64_t sub_1002C9E08()
{
  unint64_t result = qword_100712038;
  if (!qword_100712038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712038);
  }
  return result;
}

uint64_t UID.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000566C(&qword_100712040);
  sub_10022C254();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)sub_10003BCDC(a1, a1[3]);
  sub_1002C9E08();
  sub_1005E34E0();
  if (!v1)
  {
    uint64_t v9 = sub_1005E3100();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  }
  _s13IMAP2Behavior4TaskOwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1002C9F7C(void *a1)
{
  a1[1] = sub_1002C9FCC();
  a1[2] = sub_1002CA018();
  a1[3] = sub_1002CA064();
  a1[4] = sub_1002CA0B0();
  a1[5] = sub_1002CA0FC();
  unint64_t result = sub_1002CA148();
  a1[6] = result;
  return result;
}

unint64_t sub_1002C9FCC()
{
  unint64_t result = qword_100712048;
  if (!qword_100712048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712048);
  }
  return result;
}

unint64_t sub_1002CA018()
{
  unint64_t result = qword_100712050;
  if (!qword_100712050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712050);
  }
  return result;
}

unint64_t sub_1002CA064()
{
  unint64_t result = qword_100712058;
  if (!qword_100712058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712058);
  }
  return result;
}

unint64_t sub_1002CA0B0()
{
  unint64_t result = qword_100712060;
  if (!qword_100712060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712060);
  }
  return result;
}

unint64_t sub_1002CA0FC()
{
  unint64_t result = qword_100712068;
  if (!qword_100712068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712068);
  }
  return result;
}

unint64_t sub_1002CA148()
{
  unint64_t result = qword_100712070;
  if (!qword_100712070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712070);
  }
  return result;
}

unint64_t sub_1002CA198()
{
  unint64_t result = qword_100712078;
  if (!qword_100712078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712078);
  }
  return result;
}

uint64_t sub_1002CA1E4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = UID.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002CA210(void *a1)
{
  return UID.encode(to:)(a1);
}

unint64_t sub_1002CA230()
{
  unint64_t result = qword_100712080;
  if (!qword_100712080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712080);
  }
  return result;
}

uint64_t sub_1002CA27C@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1002C9C1C(*a1, *v2);
  *a2 = result;
  return result;
}

_DWORD *sub_1002CA2AC(_DWORD *a1, uint64_t a2, char a3, unsigned int *a4, unsigned int *a5, uint64_t *a6)
{
  return sub_1002C9B5C(a1, a2, a3 & 1, *a4, *a5, *a6);
}

ValueMetadata *type metadata accessor for UID()
{
  return &type metadata for UID;
}

{
  return &type metadata for UID;
}

unsigned char *storeEnumTagSinglePayload for UID.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002CA384);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UID.CodingKeys()
{
  return &type metadata for UID.CodingKeys;
}

unint64_t sub_1002CA3C0()
{
  unint64_t result = qword_100712088;
  if (!qword_100712088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712088);
  }
  return result;
}

unint64_t sub_1002CA410()
{
  unint64_t result = qword_100712090;
  if (!qword_100712090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712090);
  }
  return result;
}

unint64_t sub_1002CA460()
{
  unint64_t result = qword_100712098;
  if (!qword_100712098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712098);
  }
  return result;
}

void sub_1002CA4AC(uint64_t a1, int *a2)
{
}

void sub_1002CA4B4(uint64_t a1)
{
  sub_1002CA4AC(a1, *(int **)(v1 + 16));
}

unint64_t UIDValidity.init<A>(exactly:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v60 = (char *)&v56 - v6;
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v63 = (char *)&v56 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unsigned int v15 = (char *)&v56 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  int v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v56 - v19;
  char v21 = sub_1001FE4A0();
  uint64_t v22 = sub_1005E2A30();
  Swift::Int v59 = v10;
  if (v21)
  {
    if (v22 > 64) {
      goto LABEL_3;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v20, a1, a2);
    uint64_t v28 = sub_10028E684();
    uint64_t v25 = *(void (**)(uint64_t))(v7 + 8);
    uint64_t v29 = sub_1002CAB8C();
    v25(v29);
    if (v28 <= 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (v22 <= 63) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v65 = 0;
  unint64_t v23 = sub_1001FDDDC();
  sub_10028E660(v23, (uint64_t)&type metadata for Int, v23);
  char v24 = sub_1005E1AA0();
  uint64_t v25 = *(void (**)(uint64_t))(v7 + 8);
  uint64_t v26 = sub_1002CAB8C();
  v25(v26);
  if ((v24 & 1) == 0)
  {
LABEL_4:
    uint64_t v27 = a1;
LABEL_24:
    ((void (*)(uint64_t, uint64_t))v25)(v27, a2);
    uint64_t v43 = 0;
    unsigned __int8 v42 = 1;
    goto LABEL_25;
  }
LABEL_7:
  uint64_t v64 = a1;
  uint64_t v30 = v7;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v31(v18, a1, a2);
  char v32 = sub_1001FE4A0();
  uint64_t v33 = sub_1002CABB8();
  ((void (*)(uint64_t))v31)(v33);
  uint64_t v58 = v30;
  if (v32)
  {
    uint64_t v56 = v25;
    uint64_t v57 = v18;
    sub_1002CABD0();
    sub_1005E3340();
    uint64_t v25 = v56;
    int v18 = v57;
    sub_1005E3250();
    sub_1002CABA0();
    char v34 = sub_1005E1AA0();
    uint64_t v35 = sub_1002CAB8C();
    v25(v35);
    ((void (*)(char *, uint64_t))v25)(v15, a2);
    if (v34)
    {
      uint64_t v36 = v64;
LABEL_23:
      ((void (*)(char *, uint64_t))v25)(v18, a2);
      uint64_t v27 = v36;
      goto LABEL_24;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))v25)(v15, a2);
  }
  uint64_t v37 = sub_1005E2A30();
  uint64_t v38 = v63;
  uint64_t v39 = sub_1002CABB8();
  ((void (*)(uint64_t))v31)(v39);
  if (v37 <= 31)
  {
    uint64_t v40 = sub_1002CAB68();
    v25(v40);
    uint64_t v36 = v64;
    goto LABEL_13;
  }
  LODWORD(v65) = -1;
  char v44 = sub_1001FE4A0();
  uint64_t v45 = sub_1005E2A30();
  if (v44)
  {
    if (v45 <= 32)
    {
      uint64_t v57 = v18;
      sub_1002CABD0();
      sub_1005E3340();
      sub_1005E3250();
      sub_1002CABA0();
      char v46 = sub_1005E1A90();
      uint64_t v47 = v58;
      sub_10028E5C8();
      ((void (*)(void))v25)();
      unsigned int v48 = v65;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v59, v38, a2);
      if (v46)
      {
        unsigned int v49 = sub_10028E684();
        sub_10028E5C8();
        ((void (*)(void))v25)();
        BOOL v50 = v48 >= v49;
        uint64_t v36 = v64;
        int v18 = v57;
        if (!v50) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_10028E5C8();
        ((void (*)(void))v25)();
        uint64_t v36 = v64;
        int v18 = v57;
      }
      goto LABEL_13;
    }
LABEL_20:
    unint64_t v51 = sub_1002091D8();
    sub_10028E660(v51, (uint64_t)&type metadata for UInt32, v51);
    char v52 = sub_1005E1AA0();
    sub_10028E5C8();
    ((void (*)(void))v25)();
    sub_10028E5C8();
    ((void (*)(void))v25)();
    uint64_t v36 = v64;
    if (v52) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v45 >= 33) {
    goto LABEL_20;
  }
  unsigned int v53 = sub_10028E684();
  uint64_t v54 = sub_1002CAB68();
  v25(v54);
  uint64_t v36 = v64;
  if (v65 < v53) {
    goto LABEL_23;
  }
LABEL_13:
  unsigned int v41 = sub_10028E684();
  ((void (*)(char *, uint64_t))v25)(v18, a2);
  ((void (*)(uint64_t, uint64_t))v25)(v36, a2);
  unsigned __int8 v42 = 0;
  uint64_t v43 = v41;
LABEL_25:
  LOBYTE(v65) = v42;
  return v43 | ((unint64_t)v42 << 32);
}

NIOIMAPCore2::UIDValidity __swiftcall UIDValidity.init(integerLiteral:)(NIOIMAPCore2::UIDValidity integerLiteral)
{
  if (!integerLiteral.rawValue) {
    __break(1u);
  }
  return integerLiteral;
}

NIOIMAPCore2::UIDValidity sub_1002CAA78@<W0>(Swift::UInt32 *a1@<X0>, Swift::UInt32 *a2@<X8>)
{
  Swift::UInt32 v3 = *a1;
  result.uint64_t rawValue = UIDValidity.init(integerLiteral:)(*a1).rawValue;
  *a2 = v3;
  return result;
}

unint64_t sub_1002CAB0C()
{
  unint64_t result = qword_1007120A0;
  if (!qword_1007120A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIDValidity()
{
  return &type metadata for UIDValidity;
}

uint64_t sub_1002CAB68()
{
  return v0;
}

uint64_t sub_1002CAB8C()
{
  return v0;
}

uint64_t sub_1002CABA0()
{
  return v0;
}

uint64_t sub_1002CABB8()
{
  return v0;
}

uint64_t sub_1002CABD0()
{
  return swift_getAssociatedConformanceWitness();
}

const char *URLAuthenticationMechanism.internal.unsafeMutableAddressor()
{
  return "INTERNAL";
}

uint64_t static URLAuthenticationMechanism.internal.getter()
{
  return 0x4C414E5245544E49;
}

unint64_t sub_1002CAC18()
{
  unint64_t result = qword_1007120A8;
  if (!qword_1007120A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for URLAuthenticationMechanism()
{
  return &type metadata for URLAuthenticationMechanism;
}

void URLCommand.hash(into:)()
{
  sub_100217504(v0, (uint64_t)v26);
  int v1 = sub_100277BE0((uint64_t)v26);
  uint64_t v2 = sub_100277BEC((uint64_t)v26);
  if (v1 == 1)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    int v4 = *(_DWORD *)(v2 + 16);
    char v5 = *(unsigned char *)(v2 + 20);
    int v6 = *(_DWORD *)(v2 + 24);
    char v7 = *(unsigned char *)(v2 + 64);
    char v8 = *(unsigned char *)(v2 + 65);
    uint64_t v9 = *(void *)(v2 + 72);
    uint64_t v10 = *(void *)(v2 + 80);
    uint64_t v11 = *(void *)(v2 + 88);
    uint64_t v24 = *(void *)(v2 + 104);
    uint64_t v25 = *(void *)(v2 + 96);
    uint64_t v22 = *(void *)(v2 + 120);
    uint64_t v23 = *(void *)(v2 + 112);
    uint64_t v12 = *(void *)(v2 + 136);
    uint64_t v13 = *(void *)(v2 + 144);
    uint64_t v14 = *(void *)(v2 + 152);
    uint64_t v15 = *(void *)(v2 + 168);
    uint64_t v20 = *(void *)(v2 + 160);
    uint64_t v21 = *(void *)(v2 + 128);
    uint64_t v16 = *(void *)(v2 + 184);
    uint64_t v19 = *(void *)(v2 + 176);
    uint64_t v40 = *(void *)v2;
    uint64_t v41 = v3;
    int v42 = v4;
    char v43 = v5 & 1;
    int v44 = v6;
    long long v17 = *(_OWORD *)(v2 + 48);
    long long v45 = *(_OWORD *)(v2 + 32);
    long long v46 = v17;
    char v47 = v7;
    char v48 = v8 & 1;
    sub_1005E3410(1uLL);
    MessagePath.hash(into:)();
    if (v15)
    {
      *(void *)&long long v27 = v9;
      *((void *)&v27 + 1) = v10;
      *(void *)&long long v28 = v11;
      *((void *)&v28 + 1) = v25;
      uint64_t v29 = v24;
      uint64_t v30 = v23;
      uint64_t v31 = v22;
      __int16 v32 = v21 & 0x1FF;
      uint64_t v33 = v12;
      uint64_t v34 = v13;
      char v35 = v14;
      uint64_t v36 = v20;
      uint64_t v37 = v15;
      uint64_t v38 = v19;
      uint64_t v39 = v16;
      sub_1005E3420(1u);
      sub_100217C58(v12, v13, v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AuthenticatedURL.hash(into:)();
      sub_100217350(v9, v10, v11, v25, v24, v23, v22, v21, v12, v13, v14, v20, v15);
    }
    else
    {
      sub_1005E3420(0);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)(v2 + 16);
    long long v27 = *(_OWORD *)v2;
    long long v28 = v18;
    uint64_t v29 = *(void *)(v2 + 32);
    sub_1005E3410(0);
    EncodedSearchQuery.hash(into:)();
  }
}

BOOL static URLCommand.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_100217504(a1, (uint64_t)v113);
  int v3 = sub_100277BE0((uint64_t)v113);
  uint64_t v4 = sub_100277BEC((uint64_t)v113);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  int v7 = *(_DWORD *)(v4 + 16);
  char v8 = *(unsigned char *)(v4 + 20);
  uint64_t v9 = *(void *)(v4 + 32);
  if (v3 != 1)
  {
    uint64_t v41 = *(void *)(v4 + 24);
    sub_100217504(a2, (uint64_t)&v82);
    int v42 = sub_100277BE0((uint64_t)&v82);
    uint64_t v43 = sub_100277BEC((uint64_t)&v82);
    if (v42 == 1) {
      return 0;
    }
    int v44 = *(_DWORD *)(v43 + 16);
    char v45 = *(unsigned char *)(v43 + 20);
    uint64_t v47 = *(void *)(v43 + 24);
    uint64_t v46 = *(void *)(v43 + 32);
    BOOL v48 = v5 == *(void *)v43 && v6 == *(void *)(v43 + 8);
    if (!v48 && (sub_1005E3290() & 1) == 0) {
      return 0;
    }
    if (v8)
    {
      if ((v45 & 1) == 0) {
        return 0;
      }
    }
    else if ((v45 & 1) != 0 || v7 != v44)
    {
      return 0;
    }
    if (v9)
    {
      if (!v46) {
        return 0;
      }
      if (v41 == v47 && v9 == v46) {
        return 1;
      }
      return (sub_1005E3290() & 1) != 0;
    }
    return !v46;
  }
  uint64_t v72 = *(void *)(v4 + 8);
  uint64_t v74 = *(void *)v4;
  char v76 = *(unsigned char *)(v4 + 20);
  int v78 = *(_DWORD *)(v4 + 16);
  uint64_t v80 = *(void *)(v4 + 32);
  int v65 = *(_DWORD *)(v4 + 24);
  uint64_t v69 = *(void *)(v4 + 48);
  uint64_t v70 = *(void *)(v4 + 40);
  uint64_t v68 = *(void *)(v4 + 56);
  char v66 = *(unsigned char *)(v4 + 65);
  char v67 = *(unsigned char *)(v4 + 64);
  uint64_t v59 = *(void *)(v4 + 72);
  uint64_t v60 = *(void *)(v4 + 80);
  uint64_t v61 = *(void *)(v4 + 88);
  uint64_t v62 = *(void *)(v4 + 96);
  uint64_t v10 = *(void *)(v4 + 120);
  uint64_t v63 = *(void *)(v4 + 104);
  uint64_t v64 = *(void *)(v4 + 112);
  uint64_t v11 = *(void *)(v4 + 128);
  uint64_t v12 = *(void *)(v4 + 136);
  uint64_t v14 = *(void *)(v4 + 144);
  uint64_t v13 = *(void *)(v4 + 152);
  uint64_t v15 = *(void *)(v4 + 160);
  uint64_t v16 = *(void *)(v4 + 168);
  uint64_t v17 = *(void *)(v4 + 176);
  uint64_t v18 = *(void *)(v4 + 184);
  sub_100217504(a2, (uint64_t)v112);
  if (sub_100277BE0((uint64_t)v112) != 1)
  {
    sub_100277BEC((uint64_t)v112);
    return 0;
  }
  uint64_t v54 = v13;
  uint64_t v55 = v14;
  uint64_t v56 = v12;
  uint64_t v57 = v10;
  uint64_t v58 = v11;
  uint64_t v19 = v16;
  uint64_t v52 = v18;
  uint64_t v53 = v15;
  uint64_t v51 = v17;
  uint64_t v20 = sub_100277BEC((uint64_t)v112);
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  int v23 = *(_DWORD *)(v20 + 16);
  v119[0] = v74;
  v119[1] = v72;
  char v24 = *(unsigned char *)(v20 + 20);
  int v25 = *(_DWORD *)(v20 + 24);
  int v120 = v78;
  char v26 = *(unsigned char *)(v20 + 64);
  char v121 = v76 & 1;
  char v27 = *(unsigned char *)(v20 + 65);
  int v122 = v65;
  uint64_t v123 = v80;
  uint64_t v29 = *(void *)(v20 + 72);
  uint64_t v28 = *(void *)(v20 + 80);
  uint64_t v124 = v70;
  uint64_t v125 = v69;
  uint64_t v31 = *(void *)(v20 + 88);
  uint64_t v30 = *(void *)(v20 + 96);
  uint64_t v126 = v68;
  char v127 = v67;
  uint64_t v32 = *(void *)(v20 + 104);
  uint64_t v81 = *(void *)(v20 + 112);
  char v128 = v66 & 1;
  v129[0] = v21;
  v129[1] = v22;
  uint64_t v34 = *(void *)(v20 + 120);
  uint64_t v33 = *(void *)(v20 + 128);
  int v130 = v23;
  uint64_t v77 = *(void *)(v20 + 144);
  uint64_t v79 = *(void *)(v20 + 136);
  char v131 = v24 & 1;
  int v132 = v25;
  uint64_t v35 = *(void *)(v20 + 152);
  uint64_t v36 = *(void *)(v20 + 160);
  char v135 = v26;
  char v136 = v27 & 1;
  uint64_t v37 = *(void *)(v20 + 168);
  uint64_t v71 = *(void *)(v20 + 176);
  long long v38 = *(_OWORD *)(v20 + 48);
  uint64_t v73 = *(void *)(v20 + 184);
  uint64_t v75 = v35;
  long long v133 = *(_OWORD *)(v20 + 32);
  long long v134 = v38;
  if (static MessagePath.__derived_struct_equals(_:_:)((uint64_t)v119, (uint64_t)v129))
  {
    if (v19)
    {
      if (v37)
      {
        v114[0] = v59;
        v114[1] = v60;
        v114[2] = v61;
        v114[3] = v62;
        v114[4] = v63;
        v114[5] = v64;
        v114[6] = v57;
        __int16 v115 = v58 & 0x1FF;
        uint64_t v116 = v56;
        uint64_t v117 = v55;
        char v118 = v54;
        uint64_t v82 = v29;
        uint64_t v83 = v28;
        uint64_t v84 = v31;
        uint64_t v85 = v30;
        uint64_t v86 = v32;
        uint64_t v87 = v81;
        uint64_t v88 = v34;
        LOWORD(v89) = v33 & 0x1FF;
        uint64_t v90 = v79;
        uint64_t v91 = v77;
        LOBYTE(v92) = v75;
        if (!static AuthenticatedURLRump.__derived_struct_equals(_:_:)((uint64_t)v114, (uint64_t)&v82)) {
          return 0;
        }
        BOOL v39 = v53 == v36 && v19 == v37;
        if (!v39 && (sub_1005E3290() & 1) == 0) {
          return 0;
        }
        if (v51 == v71 && v52 == v73) {
          return 1;
        }
        return (sub_1005E3290() & 1) != 0;
      }
LABEL_41:
      uint64_t v82 = v59;
      uint64_t v83 = v60;
      uint64_t v84 = v61;
      uint64_t v85 = v62;
      uint64_t v86 = v63;
      uint64_t v87 = v64;
      uint64_t v88 = v57;
      uint64_t v89 = v58;
      uint64_t v90 = v56;
      uint64_t v91 = v55;
      uint64_t v92 = v54;
      uint64_t v93 = v53;
      uint64_t v94 = v19;
      uint64_t v95 = v51;
      uint64_t v96 = v52;
      uint64_t v97 = v29;
      uint64_t v98 = v28;
      uint64_t v99 = v31;
      uint64_t v100 = v30;
      uint64_t v101 = v32;
      uint64_t v102 = v81;
      uint64_t v103 = v34;
      uint64_t v104 = v33;
      uint64_t v105 = v79;
      uint64_t v106 = v77;
      uint64_t v107 = v75;
      uint64_t v108 = v36;
      uint64_t v109 = v37;
      uint64_t v110 = v71;
      uint64_t v111 = v73;
      sub_100217BFC(v59, v60, v61, v62, v63, v64, v57, v58, v56, v55, v54, v53, v19);
      sub_100217BFC(v29, v28, v31, v30, v32, v81, v34, v33, v79, v77, v75, v36, v37);
      sub_1002CB2DC((uint64_t)&v82);
      return 0;
    }
    if (v37) {
      goto LABEL_41;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1002CB2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 176);
  long long v12 = *(_OWORD *)(a1 + 200);
  long long v13 = *(_OWORD *)(a1 + 184);
  long long v11 = *(_OWORD *)(a1 + 216);
  sub_100217350(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
  sub_100217350(v2, v3, v4, v5, v6, v7, v8, v9, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11);
  return a1;
}

Swift::Int URLCommand.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002CB3FC()
{
  sub_100217504(v0, (uint64_t)&v2);
  return URLCommand.hashValue.getter();
}

void sub_1002CB434()
{
  sub_100217504(v0, (uint64_t)&v1);
  URLCommand.hash(into:)();
}

Swift::Int sub_1002CB474()
{
  sub_100217504(v0, (uint64_t)v2);
  sub_1005E33F0();
  URLCommand.hash(into:)();
  return sub_1005E3470();
}

unint64_t sub_1002CB4D4()
{
  unint64_t result = qword_1007120B0;
  if (!qword_1007120B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120B0);
  }
  return result;
}

BOOL sub_1002CB520(uint64_t a1, uint64_t a2)
{
  sub_100217504(a1, (uint64_t)v4);
  sub_100217504(a2, (uint64_t)v5);
  return static URLCommand.__derived_enum_equals(_:_:)((uint64_t)v4, (uint64_t)v5);
}

uint64_t destroy for URLCommand(uint64_t *a1)
{
  return sub_100217220(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
           a1[19],
           a1[20],
           a1[21]);
}

uint64_t *initializeWithCopy for URLCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v5 = a2[7];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  uint64_t v6 = a2[8];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  sub_100217AD0(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  a1[5] = v3;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  return a1;
}

uint64_t assignWithCopy for URLCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v5 = a2[7];
  uint64_t v28 = a2[9];
  uint64_t v29 = a2[10];
  uint64_t v30 = a2[11];
  uint64_t v31 = a2[12];
  uint64_t v32 = a2[13];
  uint64_t v33 = a2[14];
  uint64_t v34 = a2[15];
  uint64_t v35 = a2[16];
  uint64_t v36 = a2[17];
  uint64_t v37 = a2[18];
  uint64_t v38 = a2[19];
  uint64_t v39 = a2[20];
  uint64_t v40 = a2[21];
  uint64_t v41 = a2[22];
  uint64_t v42 = a2[23];
  uint64_t v6 = a2[8];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  sub_100217AD0(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v3;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v30;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v31;
  *(void *)(a1 + 104) = v32;
  *(void *)(a1 + 112) = v33;
  *(void *)(a1 + 120) = v34;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v35;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  long long v26 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(void *)(a1 + 176) = v41;
  *(void *)(a1 + 184) = v42;
  sub_100217220(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    BYTE8(v25),
    v26,
    *((uint64_t *)&v26 + 1));
  return a1;
}

uint64_t assignWithTake for URLCommand(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 128);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v22;
  long long v23 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v23;
  sub_100217220(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
    BYTE8(v16),
    v17,
    *((uint64_t *)&v17 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for URLCommand(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 192))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unsigned int v2 = (*(void *)(a1 + 16) >> 33) & 0x7FFFFFFF | ((*(_DWORD *)(a1 + 64) >> 9) << 31);
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for URLCommand(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 184) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = (unint64_t)-a2 << 33;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 512;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(void *)(a1 + 184) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1002CBA4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 64) & 0x1FFLL | (a2 << 63);
  *(void *)(result + 16) &= 0x1FFFFFFFFuLL;
  *(void *)(result + 64) = v2;
  return result;
}

ValueMetadata *type metadata accessor for URLCommand()
{
  return &type metadata for URLCommand;
}

void sub_1002CBA7C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 < v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  int v6 = *(unsigned __int16 *)(a1 + 20);
  int v7 = *(unsigned __int8 *)(a1 + 22);
  if (v5 - (v7 | (v6 << 8)) < v3)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1;
  uint64_t v34 = *(void *)a1;
  int v35 = v2;
  int v36 = v3;
  int v37 = v5;
  __int16 v38 = v6;
  char v39 = v7;
  uint64_t v40 = v2;
  uint64_t v41 = v3;
  swift_retain();
  Swift::Int v9 = sub_10025E0BC(&v34);
  swift_release();
  uint64_t v10 = v1 + 8;
  Swift::Int v11 = *(unsigned int *)(v8 + 20);
  sub_100210AD0(32, 0xE100000000000000, v10, *(_DWORD *)(v8 + 20));
  if (v13)
  {
    v14._uint64_t countAndFlagsBits = 32;
    v14._uint64_t object = (void *)0xE100000000000000;
    Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v11);
  }
  int v15 = *(_DWORD *)(v8 + 20);
  Swift::Int v16 = (v15 + v12);
  if (__CFADD__(v15, v12)) {
    goto LABEL_19;
  }
  *(_DWORD *)(v8 + 20) = v16;
  Swift::Int v17 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(void *)(a1 + 24))
  {
    unint64_t v18 = *(void *)(a1 + 32);
    if (HIDWORD(v18) < v18)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    int v19 = *(unsigned __int16 *)(a1 + 44) | (*(unsigned __int8 *)(a1 + 46) << 16);
    unsigned int v20 = *(_DWORD *)(a1 + 40);
    if (HIDWORD(v18) > v20 - (((v20 | ((*(void *)&v19 & 0xFFFFFFuLL) << 32)) >> 48) | ((unsigned __int16)v19 << 8)))
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return;
    }
    v28[0] = *(void *)(a1 + 24);
    v28[1] = v18;
    unsigned int v29 = v20;
    __int16 v30 = v19;
    char v31 = BYTE2(v19);
    uint64_t v32 = v18;
    unint64_t v33 = HIDWORD(v18);
    swift_retain();
    Swift::Int v21 = sub_10025E0BC(v28);
    swift_release();
  }
  else
  {
    sub_100210AD0(4999502, 0xE300000000000000, v10, v16);
    if (v23)
    {
      v24._uint64_t countAndFlagsBits = 4999502;
      v24._uint64_t object = (void *)0xE300000000000000;
      Swift::Int v22 = ByteBuffer._setStringSlowpath(_:at:)(v24, v16);
    }
    Swift::Int v21 = v22;
    int v25 = *(_DWORD *)(v8 + 20);
    BOOL v26 = __CFADD__(v25, v22);
    int v27 = v25 + v22;
    if (v26) {
      goto LABEL_24;
    }
    *(_DWORD *)(v8 + 20) = v27;
  }
  if (__OFADD__(v17, v21))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

uint64_t URLFetchData.data.getter()
{
  return swift_retain();
}

uint64_t URLFetchData.init(url:data:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 16) = a3;
  *(_WORD *)(a7 + 20) = WORD2(a3);
  *(unsigned char *)(a7 + 22) = BYTE6(a3);
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(_DWORD *)(a7 + 40) = a6;
  *(unsigned char *)(a7 + 46) = BYTE6(a6);
  *(_WORD *)(a7 + 44) = WORD2(a6);
  return result;
}

void URLFetchData.hash(into:)()
{
  swift_beginAccess();
  sub_1005E3400();
  if (*(void *)(v0 + 24))
  {
    sub_1005E3420(1u);
    swift_beginAccess();
    sub_1005E3400();
  }
  else
  {
    sub_1005E3420(0);
  }
}

uint64_t static URLFetchData.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static ByteBuffer.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48)))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a2 + 24);
    if (v4)
    {
      if (v5)
      {
        unint64_t v6 = *(void *)(a1 + 32);
        unint64_t v7 = *(unsigned int *)(a1 + 40) | ((unint64_t)(*(unsigned __int16 *)(a1 + 44) | (*(unsigned __int8 *)(a1 + 46) << 16)) << 32);
        uint64_t v8 = *(void *)(a2 + 32);
        unint64_t v9 = *(unsigned int *)(a2 + 40) | ((unint64_t)(*(unsigned __int16 *)(a2 + 44) | (*(unsigned __int8 *)(a2 + 46) << 16)) << 32);
        unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFLL;
        swift_retain();
        swift_retain();
        LOBYTE(v10) = static ByteBuffer.== infix(_:_:)(v4, v6, v10, v5, v8, v11);
        swift_release();
        swift_release();
        if (v10) {
          return 1;
        }
      }
    }
    else if (!v5)
    {
      return 1;
    }
  }
  return 0;
}

Swift::Int URLFetchData.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002CBF08()
{
  return sub_1005E3470();
}

unint64_t sub_1002CBF48()
{
  unint64_t result = qword_1007120B8;
  if (!qword_1007120B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120B8);
  }
  return result;
}

uint64_t destroy for URLFetchData()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for URLFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 43);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for URLFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  return a1;
}

__n128 initializeWithTake for URLFetchData(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for URLFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLFetchData(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 47))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for URLFetchData()
{
  return &type metadata for URLFetchData;
}

void URLFetchType.hash(into:)()
{
  sub_1002CC474(v0, __dst);
  char v1 = v29;
  switch(v29 >> 14)
  {
    case 1:
      sub_1002CCDFC();
      Swift::UInt32 v15 = __dst[0];
      Swift::UInt v16 = v23;
      Swift::UInt v17 = v24;
      Swift::UInt v7 = v25;
      char v18 = v26;
      int v19 = BYTE1(v26);
      sub_1005E3410(1uLL);
      sub_1005E3440(v15);
      if (v16)
      {
        sub_1005E3420(1u);
        swift_bridgeObjectRetain();
        sub_1005E1DB0();
        sub_1002CC994((uint64_t)v0);
        if (v19) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_1005E3420(0);
        if (v19) {
          goto LABEL_23;
        }
      }
      sub_1005E3420(1u);
      sub_1005E3410(v17);
      if (v18) {
        goto LABEL_23;
      }
      goto LABEL_18;
    case 2:
      sub_1002CCDFC();
      Swift::UInt v8 = v23;
      Swift::UInt v7 = v24;
      char v9 = v25;
      int v10 = BYTE1(v25);
      sub_1005E3410(2uLL);
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      sub_1002CC994((uint64_t)v0);
      if (v10 == 1) {
        goto LABEL_23;
      }
      sub_1005E3420(1u);
      sub_1005E3410(v8);
      if (v9) {
        goto LABEL_23;
      }
LABEL_18:
      sub_1005E3420(1u);
      Swift::UInt v14 = v7;
      goto LABEL_22;
    case 3:
      sub_1002CCDFC();
      Swift::UInt v12 = __dst[0];
      Swift::UInt v11 = __dst[1];
      char v13 = v23;
      sub_1005E3410(3uLL);
      sub_1005E3410(v12);
      if (v13) {
        goto LABEL_23;
      }
      sub_1005E3420(1u);
      Swift::UInt v14 = v11;
      goto LABEL_22;
    default:
      sub_1002CCDFC();
      Swift::UInt32 v2 = v23;
      int v3 = BYTE4(v23);
      Swift::UInt32 v4 = v24;
      uint64_t v5 = v26;
      Swift::UInt v20 = v28;
      Swift::UInt v21 = v27;
      int v6 = HIBYTE(v29);
      sub_1005E3410(0);
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      swift_bridgeObjectRelease();
      if (v3 == 1)
      {
        sub_1005E3420(0);
      }
      else
      {
        sub_1005E3420(1u);
        sub_1005E3440(v2);
      }
      sub_1005E3440(v4);
      if (v5)
      {
        sub_1005E3420(1u);
        swift_bridgeObjectRetain();
        sub_1005E1DB0();
        swift_bridgeObjectRelease();
        if (v6) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_1005E3420(0);
        if (v6)
        {
LABEL_23:
          sub_1005E3420(0);
          return;
        }
      }
      sub_1005E3420(1u);
      sub_1005E3410(v21);
      if (v1) {
        goto LABEL_23;
      }
      sub_1005E3420(1u);
      Swift::UInt v14 = v20;
LABEL_22:
      sub_1005E3410(v14);
      return;
  }
}

void *sub_1002CC474(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x42uLL);
}

uint64_t static URLFetchType.__derived_enum_equals(_:_:)(void *a1, void *__src)
{
  sub_1002CC474(__src, __dst);
  sub_1002CC474(a1, &v79);
  char v4 = v87;
  switch(v87 >> 14)
  {
    case 1:
      sub_1002CCE08();
      int v24 = v79;
      uint64_t v25 = v80;
      uint64_t v26 = v81;
      uint64_t v27 = v82;
      uint64_t v28 = v83;
      char v29 = v84;
      char v30 = BYTE1(v84);
      sub_1002CC474(__src, &v70);
      if ((v78 & 0xC000) != 0x4000) {
        return 0;
      }
      v78 &= 0x3FFFu;
      if (v70 != v24) {
        return 0;
      }
      uint64_t v31 = v74;
      char v32 = v75;
      char v33 = BYTE1(v75);
      if (!v26)
      {
        if (v72) {
          return 0;
        }
        uint64_t v68 = v73;
        swift_bridgeObjectRetain();
        goto LABEL_63;
      }
      if (!v72) {
        return 0;
      }
      uint64_t v68 = v73;
      BOOL v34 = v25 == v71 && v26 == v72;
      if (v34 || (sub_1005E3290(), uint64_t result = sub_100224874(), (v35 & 1) != 0))
      {
LABEL_63:
        if (v30) {
          return (v33 & 1) != 0;
        }
        if (v33) {
          return 0;
        }
        char v54 = v29 & 1;
        char v55 = v32 & 1;
        uint64_t v56 = v27;
        uint64_t v57 = v28;
        uint64_t v58 = v68;
        uint64_t v59 = v31;
        goto LABEL_74;
      }
      return result;
    case 2:
      sub_1002CCE08();
      uint64_t v36 = v79;
      uint64_t v37 = v80;
      uint64_t v39 = v81;
      uint64_t v38 = v82;
      char v40 = v83;
      char v41 = BYTE1(v83);
      sub_1002CC474(__src, &v70);
      if ((v78 & 0xC000) != 0x8000) {
        return 0;
      }
      v78 &= 0x3FFFu;
      uint64_t v43 = v72;
      uint64_t v42 = v73;
      char v44 = v74;
      char v45 = BYTE1(v74);
      if (v36 != v70 || v37 != v71)
      {
        sub_1005E3290();
        uint64_t result = sub_100224874();
        if ((v47 & 1) == 0) {
          return result;
        }
      }
      if (v41)
      {
        if (v45) {
          return 1;
        }
      }
      else if ((v45 & 1) == 0 && v39 == v43)
      {
        if (v40)
        {
          if (v44) {
            return 1;
          }
        }
        else if ((v44 & 1) == 0 && v38 == v42)
        {
          return 1;
        }
      }
      return 0;
    case 3:
      sub_1002CCE08();
      uint64_t v49 = v79;
      uint64_t v48 = v80;
      char v50 = v81;
      sub_1002CC474(__src, &v70);
      if (v78 < 0xC000u || v49 != v70) {
        return 0;
      }
      if (v50)
      {
        if (v72) {
          return 1;
        }
      }
      else if ((v72 & 1) == 0 && v48 == v71)
      {
        return 1;
      }
      return 0;
    default:
      sub_1002CCE08();
      uint64_t v66 = v80;
      uint64_t v67 = v79;
      int v5 = v81;
      char v6 = BYTE4(v81);
      int v7 = v82;
      uint64_t v9 = v83;
      uint64_t v8 = v84;
      uint64_t v10 = v85;
      uint64_t v11 = v86;
      char v12 = HIBYTE(v87);
      sub_1002CC474(__src, &v70);
      char v13 = v78;
      if ((v78 & 0xC000) != 0) {
        return 0;
      }
      int v65 = v7;
      uint64_t v64 = v8;
      uint64_t v62 = v11;
      uint64_t v63 = v10;
      int v14 = v72;
      int v15 = BYTE4(v72);
      int v16 = v73;
      uint64_t v18 = v74;
      uint64_t v17 = v75;
      uint64_t v60 = v77;
      uint64_t v61 = v76;
      char v19 = HIBYTE(v78);
      if (v67 != v70 || v66 != v71)
      {
        sub_1005E3290();
        uint64_t result = sub_100224874();
        if ((v22 & 1) == 0) {
          return result;
        }
      }
      if (v6)
      {
        if (v16 == v65) {
          int v23 = v15;
        }
        else {
          int v23 = 0;
        }
        if (v23 != 1) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v15) {
          return result;
        }
        if (v5 != v14 || v16 != v65) {
          return result;
        }
      }
      if (v64)
      {
        if (v17)
        {
          if (v9 != v18 || v64 != v17)
          {
            sub_1005E3290();
            uint64_t result = sub_100224874();
            if ((v53 & 1) == 0) {
              return result;
            }
          }
LABEL_67:
          if (v12)
          {
            if ((v19 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            if (v19) {
              return 0;
            }
            char v54 = v4 & 1;
            char v55 = v13 & 1;
            uint64_t v57 = v62;
            uint64_t v56 = v63;
            uint64_t v59 = v60;
            uint64_t v58 = v61;
LABEL_74:
            if ((static ByteRange.__derived_struct_equals(_:_:)(v56, v57, v54, v58, v59, v55) & 1) == 0) {
              return 0;
            }
          }
          return 1;
        }
      }
      else if (!v17)
      {
        goto LABEL_67;
      }
      return 0;
  }
}

Swift::Int URLFetchType.hashValue.getter()
{
  return sub_1005E3470();
}

Swift::Int sub_1002CC87C()
{
  sub_1002CC474(v0, __dst);
  return URLFetchType.hashValue.getter();
}

void sub_1002CC8B4()
{
  sub_1002CC474(v0, __dst);
  URLFetchType.hash(into:)();
}

Swift::Int sub_1002CC8F4()
{
  sub_1002CC474(v0, __dst);
  sub_1005E33F0();
  URLFetchType.hash(into:)();
  return sub_1005E3470();
}

uint64_t sub_1002CC948(void *a1, void *a2)
{
  sub_1002CC474(a1, v4);
  sub_1002CC474(a2, __dst);
  return static URLFetchType.__derived_enum_equals(_:_:)(v4, __dst) & 1;
}

uint64_t sub_1002CC994(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002CC9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  int v9 = a9 >> 14;
  if (v9 != 2 && v9 != 1)
  {
    if (v9) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1002CCA54()
{
  unint64_t result = qword_1007120C0;
  if (!qword_1007120C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120C0);
  }
  return result;
}

uint64_t sub_1002CCAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  int v9 = a9 >> 14;
  if (v9 != 2 && v9 != 1)
  {
    if (v9) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for URLFetchType(uint64_t a1)
{
  return sub_1002CC9E0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(_WORD *)(a1 + 64));
}

uint64_t initializeWithCopy for URLFetchType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int16 v11 = *(_WORD *)(a2 + 64);
  sub_1002CCAA0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for URLFetchType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int16 v11 = *(_WORD *)(a2 + 64);
  sub_1002CCAA0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int16 v20 = *(_WORD *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_WORD *)(a1 + 64) = v11;
  sub_1002CC9E0(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for URLFetchType(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int16 v12 = *(_WORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_WORD *)(a1 + 64) = v3;
  sub_1002CC9E0(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLFetchType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7D && *(unsigned char *)(a1 + 66))
    {
      unsigned int v2 = *(_DWORD *)a1 + 124;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int16 *)(a1 + 64) >> 7) & 0x7C | (*(unsigned __int16 *)(a1 + 64) >> 14)) ^ 0x7F;
      if (v2 >= 0x7C) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for URLFetchType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_WORD *)(result + 64) = (((-a2 >> 2) & 0x1F) - 32 * (_WORD)a2) << 9;
    }
  }
  return result;
}

uint64_t sub_1002CCDBC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 64) >> 14;
}

uint64_t sub_1002CCDC8(uint64_t result)
{
  *(_WORD *)(result + 64) &= 0x3FFFu;
  return result;
}

uint64_t sub_1002CCDD8(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 64) = *(_WORD *)(result + 64) & 0x1FF | (a2 << 14);
  return result;
}

ValueMetadata *type metadata accessor for URLFetchType()
{
  return &type metadata for URLFetchType;
}

void sub_1002CCE08()
{
  *(_WORD *)(v1 - 96) = v0 & 0x3FFF;
}

unint64_t sub_1002CCE18()
{
  unint64_t result = qword_1007120C8;
  if (!qword_1007120C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for URLMessageSection()
{
  return &type metadata for URLMessageSection;
}

const char *UseAttribute.all.unsafeMutableAddressor()
{
  return "\\All";
}

uint64_t static UseAttribute.all.getter()
{
  return 1819033948;
}

const char *UseAttribute.archive.unsafeMutableAddressor()
{
  return "\\Archive";
}

uint64_t static UseAttribute.archive.getter()
{
  return 0x657669686372415CLL;
}

const char *UseAttribute.drafts.unsafeMutableAddressor()
{
  return "\\Drafts";
}

uint64_t static UseAttribute.drafts.getter()
{
  return 0x7374666172445CLL;
}

const char *UseAttribute.flagged.unsafeMutableAddressor()
{
  return "\\Flagged";
}

uint64_t static UseAttribute.flagged.getter()
{
  return 0x64656767616C465CLL;
}

const char *UseAttribute.junk.unsafeMutableAddressor()
{
  return "\\Junk";
}

uint64_t static UseAttribute.junk.getter()
{
  return 0x6B6E754A5CLL;
}

const char *UseAttribute.sent.unsafeMutableAddressor()
{
  return "\\Sent";
}

uint64_t static UseAttribute.sent.getter()
{
  return 0x746E65535CLL;
}

const char *UseAttribute.trash.unsafeMutableAddressor()
{
  return "\\Trash";
}

uint64_t static UseAttribute.trash.getter()
{
  return 0x68736172545CLL;
}

unint64_t sub_1002CCF60()
{
  unint64_t result = qword_1007120D0;
  if (!qword_1007120D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UseAttribute()
{
  return &type metadata for UseAttribute;
}

uint64_t sub_1002CCFBC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = v4 + 8;
  if (a2)
  {
    Swift::Int v11 = *(unsigned int *)(v5 + 20);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100210AD0(a1, (unint64_t)a2, v8, v11);
    if (v13)
    {
      v14._uint64_t countAndFlagsBits = a1;
      v14._uint64_t object = a2;
      Swift::Int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v11);
    }
    Swift::Int v15 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    int v17 = *(_DWORD *)(v5 + 20);
    BOOL v18 = __CFADD__(v17, v15);
    int v19 = v17 + v15;
    if (v18) {
      goto LABEL_13;
    }
    *(_DWORD *)(v5 + 20) = v19;
  }
  else
  {
    Swift::Int v15 = 0;
  }
  if (a4 == (void *)1)
  {
    uint64_t v20 = 0;
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_1001F3264(a3, (uint64_t)a4);
    sub_100277E50(a3, a4);
    uint64_t v20 = v21;
    swift_release();
    swift_release();
    sub_1001F3278(a3, (uint64_t)a4);
  }
  uint64_t result = v15 + v20;
  if (__OFADD__(v15, v20))
  {
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t UserAuthenticationMechanism.authenticationMechanism.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3;
}

void UserAuthenticationMechanism.init(encodedUser:authenticationMechanism:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2 && a4 == 1) {
    __break(1u);
  }
}

void UserAuthenticationMechanism.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    sub_1005E3420(1u);
    swift_bridgeObjectRetain();
    sub_1005E1DB0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1005E3420(0);
  }
  if (a5 == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1005E3420(1u);
    if (a5)
    {
      sub_1005E3410(1uLL);
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      uint64_t v7 = a4;
      uint64_t v8 = a5;
    }
    else
    {
      sub_1005E3410(0);
      uint64_t v7 = a4;
      uint64_t v8 = 0;
    }
    sub_1001F3278(v7, v8);
  }
}

uint64_t static UserAuthenticationMechanism.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!a6) {
    return 0;
  }
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = sub_1005E3290(), uint64_t result = 0, (v13 & 1) != 0))
  {
LABEL_10:
    if (a4 == 1)
    {
      if (a8 == 1) {
        return 1;
      }
    }
    else if (a8 != 1)
    {
      if (a4)
      {
        if (a8)
        {
          BOOL v15 = a3 == a7 && a4 == a8;
          if (v15 || (sub_1005E3290() & 1) != 0) {
            return 1;
          }
        }
      }
      else if (!a8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int UserAuthenticationMechanism.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005E33F0();
  UserAuthenticationMechanism.hash(into:)((uint64_t)v9, a1, a2, a3, a4);
  return sub_1005E3470();
}

Swift::Int sub_1002CD380()
{
  return UserAuthenticationMechanism.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void sub_1002CD38C(uint64_t a1)
{
  UserAuthenticationMechanism.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_1002CD398()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  sub_1005E33F0();
  UserAuthenticationMechanism.hash(into:)((uint64_t)v6, v1, v2, v4, v3);
  return sub_1005E3470();
}

unint64_t sub_1002CD3F8()
{
  unint64_t result = qword_1007120D8;
  if (!qword_1007120D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120D8);
  }
  return result;
}

uint64_t sub_1002CD444(uint64_t *a1, uint64_t *a2)
{
  return static UserAuthenticationMechanism.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t destroy for UserAuthenticationMechanism(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 24);
  if (result != 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for UserAuthenticationMechanism(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 2;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)v4;
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for UserAuthenticationMechanism(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  if (a1[3] != 1)
  {
    if (v4 != 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100274EBC((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for UserAuthenticationMechanism(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2 + 2;
  if (a1[3] != 1)
  {
    uint64_t v6 = a2[3];
    if (v6 != 1)
    {
      a1[2] = *v5;
      a1[3] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100274EBC((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for UserAuthenticationMechanism(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UserAuthenticationMechanism()
{
  return &type metadata for UserAuthenticationMechanism;
}

void *IMAPDefaults.lineLengthLimit.unsafeMutableAddressor()
{
  return &static IMAPDefaults.lineLengthLimit;
}

uint64_t static IMAPDefaults.lineLengthLimit.getter()
{
  return 0x2000;
}

void *IMAPDefaults.literalSizeLimit.unsafeMutableAddressor()
{
  return &static IMAPDefaults.literalSizeLimit;
}

uint64_t static IMAPDefaults.literalSizeLimit.getter()
{
  return 4096;
}

void *IMAPDefaults.bodySizeLimit.unsafeMutableAddressor()
{
  return &static IMAPDefaults.bodySizeLimit;
}

uint64_t static MailboxSelectionUsage.Priority.max.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

ValueMetadata *type metadata accessor for IMAPDefaults()
{
  return &type metadata for IMAPDefaults;
}

void sub_1002CD710(unint64_t a1, uint64_t (*a2)(void))
{
  unsigned int v4 = a1;
  unint64_t v5 = HIDWORD(a1);
  uint64_t v6 = a2();
  Swift::Int v7 = 0;
  if (v4 < v5)
  {
    Swift::Int v8 = *(unsigned int *)(v2 + 20);
    sub_100210AD0(58, 0xE100000000000000, v2 + 8, *(_DWORD *)(v2 + 20));
    if (v10)
    {
      v11._uint64_t countAndFlagsBits = 58;
      v11._uint64_t object = (void *)0xE100000000000000;
      Swift::Int v9 = ByteBuffer._setStringSlowpath(_:at:)(v11, v8);
    }
    Swift::Int v12 = v9;
    int v13 = *(_DWORD *)(v2 + 20);
    BOOL v14 = __CFADD__(v13, v9);
    int v15 = v13 + v9;
    if (v14) {
      goto LABEL_9;
    }
    *(_DWORD *)(v2 + 20) = v15;
    uint64_t v16 = ((uint64_t (*)(unint64_t))a2)(v5);
    Swift::Int v7 = v12 + v16;
    if (__OFADD__(v12, v16))
    {
LABEL_10:
      __break(1u);
      return;
    }
  }
  if (__OFADD__(v6, v7))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
}

void sub_1002CD7E8(uint64_t a1, unint64_t a2, void (*a3)(unint64_t))
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  a3(a2);
  if (v4 < v6)
  {
    Swift::Int v7 = *(unsigned int *)(a1 + 20);
    sub_100210AD0(58, 0xE100000000000000, a1 + 8, *(_DWORD *)(a1 + 20));
    if (v9)
    {
      v10._uint64_t countAndFlagsBits = 58;
      v10._uint64_t object = (void *)0xE100000000000000;
      int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v7);
    }
    int v11 = *(_DWORD *)(a1 + 20);
    BOOL v12 = __CFADD__(v11, v8);
    int v13 = v11 + v8;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(a1 + 20) = v13;
      a3(v6);
    }
  }
}

unint64_t sub_1002CD89C(unint64_t result)
{
  uint64_t v1 = (result + 1);
  if (result == -1)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!HIDWORD(result))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 <= HIDWORD(result)) {
    return result & 0xFFFFFFFF00000000 | v1;
  }
LABEL_7:
  __break(1u);
  return result;
}

#error "1002CD9B4: call analysis failed (funcsize=68)"

void sub_1002CD9EC(unint64_t a1, uint64_t a2)
{
}

void sub_1002CDA04(unint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v4 = sub_1002CD89C(a1);
  sub_1002CD710(v4, a3);
}

uint64_t OSLogInterpolation.appendInterpolation(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1002CDB0C(a1, a2, (uint64_t)&unk_1006D3FA0, (uint64_t)sub_1001D745C);
}

{
  return sub_1002CDB0C(a1, a2, (uint64_t)&unk_1006D3FC8, (uint64_t)sub_1001D6F30);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CE0B4(a1, a2, (uint64_t)&unk_1006D4090, (uint64_t)sub_1002CE06C);
}

{
  return sub_1002CE0B4(a1, a2, (uint64_t)&unk_1006D40B8, (uint64_t)sub_1002CE2A4);
}

{
  return sub_1002CDB0C(a1, a2, (uint64_t)&unk_1006D40E0, (uint64_t)sub_1002CE2F4);
}

{
  return sub_1002CDB0C(a1, a2, (uint64_t)&unk_1006D4108, (uint64_t)sub_1002CE33C);
}

{
  return sub_1002CE444(a1, a2, (uint64_t)&unk_1006D4130, (uint64_t)sub_1002CE38C);
}

{
  return sub_1002CE444(a1, a2, (uint64_t)&unk_1006D4158, (uint64_t)sub_1002CE614);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CEE00(a1, a2, "[", (uint64_t)&unk_1006D41A8, (uint64_t)sub_1002CE70C, "]");
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CEE00(a1, a2, "{", (uint64_t)&unk_1006D4298, (uint64_t)sub_1002CEFB8, "}");
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CEE00(a1, a2, "[", (uint64_t)&unk_1006D42E8, (uint64_t)sub_1002D0940, "]");
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CDD4C(a1, a2);
}

{
  return sub_1002CF3D8(a1, a2);
}

{
  return sub_1002CF3D8(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v40[2];
  uint64_t (**v41)(void);
  uint64_t (**v42)(void);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;

  char v44 = a1;
  char v47 = sub_1005E0D00();
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  char v45 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1005E0D20();
  __chkstk_darwin(v5 - 8);
  Swift::Int v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = sub_1005E0E30();
  __chkstk_darwin(v8 - 8);
  Swift::String v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v68);
  swift_bridgeObjectRelease();
  uint64_t v43 = a2;
  swift_retain();
  int v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v64 = sub_1005E0E40();
  int v65 = v12;
  uint64_t v66 = v13;
  uint64_t v67 = v14;
  int v15 = v64;
  uint64_t v16 = v12;
  int v17 = BYTE1(v12);
  BOOL v18 = BYTE2(v12);
  int v19 = v13;
  uint64_t v20 = v14;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v58 = v15;
  uint64_t v59 = v16;
  uint64_t v60 = v17;
  uint64_t v61 = v18;
  uint64_t v62 = v19;
  uint64_t v63 = v20;
  sub_1005E0DC0();
  uint64_t v42 = &type metadata accessor for OSLogPrivacy;
  uint64_t v21 = (uint64_t)v7;
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  char v41 = &type metadata accessor for OSLogStringAlignment;
  sub_1002CDA8C((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v19);
  swift_release();
  v69._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v69);
  swift_bridgeObjectRelease();
  char v22 = v43;
  swift_retain();
  int v23 = swift_allocObject();
  *(void *)(v23 + 16) = v44;
  *(void *)(v23 + 24) = v22;
  int v24 = v23;
  v70._uint64_t countAndFlagsBits = sub_1005E1D90("{", 1uLL, 1);
  sub_1005E0E10(v70);
  swift_bridgeObjectRelease();
  v40[1] = v24;
  swift_retain();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1002CFD40;
  *(void *)(v25 + 24) = v24;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  char v54 = sub_1005E0E40();
  char v55 = v26;
  uint64_t v56 = v27;
  uint64_t v57 = v28;
  char v29 = v54;
  char v30 = v26;
  LOBYTE(v24) = BYTE1(v26);
  LOBYTE(v7) = BYTE2(v26);
  uint64_t v31 = v27;
  char v32 = v28;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v48 = v29;
  uint64_t v49 = v30;
  char v50 = v24;
  uint64_t v51 = (char)v7;
  uint64_t v52 = v31;
  char v53 = v32;
  sub_1005E0DD0();
  sub_1002CDA8C(v21, (uint64_t (*)(void))v42);
  sub_1002CDA8C((uint64_t)v10, (uint64_t (*)(void))v41);
  sub_10003E960(v31);
  swift_release();
  v71._uint64_t countAndFlagsBits = sub_1005E1D90("}", 1uLL, 1);
  sub_1005E0E10(v71);
  swift_bridgeObjectRelease();
  swift_release();
  v72._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v72);
  swift_bridgeObjectRelease();
  char v33 = v43;
  swift_retain();
  BOOL v34 = swift_allocObject();
  *(void *)(v34 + 16) = v44;
  *(void *)(v34 + 24) = v33;
  swift_retain();
  char v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_1002D04D4;
  *(void *)(v35 + 24) = v34;
  sub_1005E0E20();
  uint64_t v36 = v46;
  uint64_t v37 = v45;
  uint64_t v38 = v47;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v45, enum case for OSLogPrivacy._MailMask.mailbox(_:), v47);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  sub_1005E0DB0();
  sub_1002CDA8C(v21, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  swift_release();
  v73._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v73);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;

  unint64_t v4 = sub_1005E0D20();
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v7 = sub_1005E0E30();
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31._uint64_t countAndFlagsBits = sub_1005E1D90("{", 1uLL, 1);
  sub_1005E0E10(v31);
  swift_bridgeObjectRelease();
  swift_retain();
  Swift::String v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v27 = sub_1005E0E40();
  uint64_t v28 = v11;
  char v29 = v12;
  char v30 = v13;
  BOOL v14 = v27;
  int v15 = v11 & 1;
  uint64_t v16 = BYTE1(v11) & 1;
  int v17 = BYTE2(v11) & 1;
  BOOL v18 = v12;
  int v19 = v13;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v21 = v14;
  char v22 = v15;
  int v23 = v16;
  int v24 = v17;
  uint64_t v25 = v18;
  uint64_t v26 = v19;
  sub_1005E0DD0();
  sub_1002CDA8C((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v18);
  swift_release();
  v32._uint64_t countAndFlagsBits = sub_1005E1D90("}", 1uLL, 1);
  sub_1005E0E10(v32);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void v30[2];
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;

  char v33 = a1;
  uint64_t v36 = sub_1005E0D00();
  char v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  BOOL v34 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1005E0D20();
  __chkstk_darwin(v5 - 8);
  uint64_t v31 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v7 = sub_1005E0E30();
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v47);
  swift_bridgeObjectRelease();
  char v32 = a2;
  swift_retain();
  Swift::String v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  int v11 = v10;
  v48._uint64_t countAndFlagsBits = sub_1005E1D90("{", 1uLL, 1);
  sub_1005E0E10(v48);
  swift_bridgeObjectRelease();
  v30[1] = v11;
  swift_retain();
  BOOL v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1002D0504;
  *(void *)(v12 + 24) = v11;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v43 = sub_1005E0E40();
  char v44 = v13;
  char v45 = v14;
  uint64_t v46 = v15;
  uint64_t v16 = v43;
  int v17 = v13;
  BOOL v18 = BYTE1(v13);
  int v19 = BYTE2(v13);
  uint64_t v20 = v14;
  uint64_t v21 = v15;
  sub_10018A5D4();
  char v22 = (uint64_t)v31;
  sub_1002CFCF0();
  uint64_t v37 = v16;
  uint64_t v38 = v17;
  uint64_t v39 = v18;
  char v40 = v19;
  char v41 = v20;
  uint64_t v42 = v21;
  sub_1005E0DD0();
  sub_1002CDA8C(v22, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v20);
  swift_release();
  v49._uint64_t countAndFlagsBits = sub_1005E1D90("}", 1uLL, 1);
  sub_1005E0E10(v49);
  swift_bridgeObjectRelease();
  swift_release();
  int v23 = v32;
  swift_retain();
  int v24 = swift_allocObject();
  *(void *)(v24 + 16) = v33;
  *(void *)(v24 + 24) = v23;
  swift_retain();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1002D050C;
  *(void *)(v25 + 24) = v24;
  sub_1005E0E20();
  uint64_t v26 = v35;
  uint64_t v27 = v34;
  uint64_t v28 = v36;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, enum case for OSLogPrivacy._MailMask.mailbox(_:), v36);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  sub_1005E0DB0();
  sub_1002CDA8C(v22, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  swift_release();
  v50._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v50);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  sub_1005E0D20();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v25 = sub_1005E0E40();
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  BOOL v12 = v25;
  int v13 = v9 & 1;
  BOOL v14 = BYTE1(v9) & 1;
  int v15 = BYTE2(v9) & 1;
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  sub_1002CFCF0();
  int v19 = v12;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  char v22 = v15;
  int v23 = v16;
  int v24 = v17;
  sub_1005E0DC0();
  sub_1002CDA8C((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  return swift_release();
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;

  uint64_t v26 = a1;
  sub_1005E0D20();
  __chkstk_darwin();
  int v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v37);
  swift_bridgeObjectRelease();
  uint64_t v25 = a2;
  swift_retain();
  Swift::Int v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10035AEF0;
  *(void *)(v8 + 24) = v7;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  char v33 = sub_1005E0E40();
  BOOL v34 = v9;
  char v35 = v10;
  uint64_t v36 = v11;
  BOOL v12 = v33;
  int v13 = v9;
  BOOL v14 = BYTE1(v9);
  int v15 = BYTE2(v9);
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  BOOL v18 = (uint64_t)v24;
  sub_1002CFCF0();
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  char v29 = v14;
  char v30 = v15;
  uint64_t v31 = v16;
  char v32 = v17;
  sub_1005E0DC0();
  sub_1002CDA8C(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  swift_release();
  swift_release();
  v38._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v38);
  swift_bridgeObjectRelease();
  int v19 = v25;
  swift_retain();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v26;
  *(void *)(v20 + 24) = v19;
  swift_retain();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10035AF28;
  *(void *)(v21 + 24) = v20;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  v39._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v39);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void v41[3];
  char *v42;
  uint64_t (**v43)(void);
  uint64_t (**v44)(void);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;

  unint64_t v3 = a1;
  uint64_t v46 = a1;
  uint64_t v49 = sub_1005E0D00();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin();
  char v47 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v42 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  Swift::Int v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v70);
  swift_bridgeObjectRelease();
  char v45 = a2;
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  char v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100188DC4;
  *(void *)(v9 + 24) = v8;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v66 = sub_1005E0E40();
  uint64_t v67 = v10;
  uint64_t v68 = v11;
  uint64_t v69 = v12;
  int v13 = v66;
  BOOL v14 = v10;
  int v15 = BYTE1(v10);
  LOBYTE(v3) = BYTE2(v10);
  uint64_t v16 = v11;
  int v17 = v12;
  sub_10018A5D4();
  BOOL v18 = (uint64_t)v42;
  sub_1002CFCF0();
  uint64_t v60 = v13;
  uint64_t v61 = v14;
  uint64_t v62 = v15;
  uint64_t v63 = v3;
  uint64_t v64 = v16;
  int v65 = v17;
  sub_1005E0DC0();
  uint64_t v43 = &type metadata accessor for OSLogPrivacy;
  sub_1002CDA8C(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  char v44 = &type metadata accessor for OSLogStringAlignment;
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  swift_release();
  swift_release();
  v71._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v71);
  swift_bridgeObjectRelease();
  int v19 = v45;
  swift_retain();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v46;
  *(void *)(v20 + 16) = v46;
  *(void *)(v20 + 24) = v19;
  swift_retain();
  char v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10035B70C;
  *(void *)(v22 + 24) = v20;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  int v23 = v18;
  sub_1002CDA8C(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  v72._uint64_t countAndFlagsBits = sub_1005E1D90("] [", 3uLL, 1);
  sub_1005E0E10(v72);
  swift_bridgeObjectRelease();
  int v24 = v45;
  swift_retain();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v21;
  *(void *)(v25 + 24) = v24;
  v73._uint64_t countAndFlagsBits = sub_1005E1D90("{", 1uLL, 1);
  sub_1005E0E10(v73);
  swift_bridgeObjectRelease();
  v41[2] = v25;
  swift_retain();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_100188DE4;
  *(void *)(v26 + 24) = v25;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v56 = sub_1005E0E40();
  uint64_t v57 = v27;
  uint64_t v58 = v28;
  uint64_t v59 = v29;
  char v30 = v56;
  LOBYTE(v18) = v27;
  uint64_t v31 = BYTE1(v27);
  LOBYTE(v25) = BYTE2(v27);
  char v32 = v28;
  char v33 = v29;
  sub_10018A5D4();
  sub_1002CFCF0();
  char v50 = v30;
  uint64_t v51 = v18;
  uint64_t v52 = v31;
  char v53 = v25;
  char v54 = v32;
  char v55 = v33;
  sub_1005E0DD0();
  sub_1002CDA8C(v23, (uint64_t (*)(void))v43);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))v44);
  sub_10003E960(v32);
  swift_release();
  v74._uint64_t countAndFlagsBits = sub_1005E1D90("}", 1uLL, 1);
  sub_1005E0E10(v74);
  swift_bridgeObjectRelease();
  swift_release();
  v75._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v75);
  swift_bridgeObjectRelease();
  BOOL v34 = v45;
  swift_retain();
  char v35 = swift_allocObject();
  *(void *)(v35 + 16) = v46;
  *(void *)(v35 + 24) = v34;
  swift_retain();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = sub_10035BAB0;
  *(void *)(v36 + 24) = v35;
  sub_1005E0E20();
  uint64_t v37 = v48;
  uint64_t v38 = v47;
  uint64_t v39 = v49;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, enum case for OSLogPrivacy._MailMask.mailbox(_:), v49);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  sub_1005E0DB0();
  sub_1002CDA8C(v23, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  swift_release();
  v76._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v76);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;

  sub_1005E0D20();
  __chkstk_darwin();
  char v22 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v33);
  swift_bridgeObjectRelease();
  swift_retain();
  Swift::Int v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10035BB4C;
  *(void *)(v8 + 24) = v7;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  char v29 = sub_1005E0E40();
  char v30 = v9;
  uint64_t v31 = v10;
  char v32 = v11;
  BOOL v12 = v29;
  int v13 = v9 & 1;
  BOOL v14 = BYTE1(v9) & 1;
  int v15 = BYTE2(v9) & 1;
  uint64_t v16 = v10;
  int v17 = v11;
  BOOL v18 = (uint64_t)v6;
  sub_10018A5D4();
  int v19 = (uint64_t)v22;
  sub_1002CFCF0();
  int v23 = v12;
  int v24 = v13;
  uint64_t v25 = v14;
  uint64_t v26 = v15;
  uint64_t v27 = v16;
  uint64_t v28 = v17;
  sub_1005E0DC0();
  sub_1002CDA8C(v19, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C(v18, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  swift_release();
  swift_release();
  v34._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v34);
  return swift_bridgeObjectRelease();
}

{
  return sub_10036A6F4(a1, a2);
}

{
  return sub_10036A6F4(a1, a2);
}

{
  return sub_10036A6F4(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;

  uint64_t v26 = a1;
  sub_1005E0D20();
  __chkstk_darwin();
  int v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v37);
  swift_bridgeObjectRelease();
  uint64_t v25 = a2;
  swift_retain();
  Swift::Int v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10036AD14;
  *(void *)(v8 + 24) = v7;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  char v33 = sub_1005E0E40();
  BOOL v34 = v9;
  char v35 = v10;
  uint64_t v36 = v11;
  BOOL v12 = v33;
  int v13 = v9;
  BOOL v14 = BYTE1(v9);
  int v15 = BYTE2(v9);
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  BOOL v18 = (uint64_t)v24;
  sub_1002CFCF0();
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  char v29 = v14;
  char v30 = v15;
  uint64_t v31 = v16;
  char v32 = v17;
  sub_1005E0DC0();
  sub_10036C0B8(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_10036C0B8((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  swift_release();
  swift_release();
  v38._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v38);
  swift_bridgeObjectRelease();
  int v19 = v25;
  swift_retain();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v26;
  *(void *)(v20 + 24) = v19;
  swift_retain();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10036BACC;
  *(void *)(v21 + 24) = v20;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_10036C0B8((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10036C0B8(v18, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  v39._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v39);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;

  sub_1005E0D20();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29._uint64_t countAndFlagsBits = sub_1005E1D90("C", 1uLL, 1);
  sub_1005E0E10(v29);
  swift_bridgeObjectRelease();
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v25 = sub_1002CE3B4();
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  BOOL v12 = v25;
  int v13 = v9 & 1;
  BOOL v14 = BYTE1(v9) & 1;
  int v15 = BYTE2(v9) & 1;
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  sub_1002CFCF0();
  int v19 = v12;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  char v22 = v15;
  int v23 = v16;
  int v24 = v17;
  sub_1005E0DF0();
  sub_10036C0B8((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_10036C0B8((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  return swift_release();
}

{
  return sub_10036AF9C(a1, a2, "C: ");
}

{
  return sub_10036AF9C(a1, a2, "S: ");
}

{
  return sub_10036A6F4(a1, a2);
}

{
  return sub_10040D9F8(a1, a2, (uint64_t)&unk_1006F0A68, (uint64_t)&unk_1006F0A90, (uint64_t)sub_100410C90);
}

{
  return sub_10040D9F8(a1, a2, (uint64_t)&unk_1006F0AB8, (uint64_t)&unk_1006F0AE0, (uint64_t)sub_100411ECC);
}

{
  return sub_10040D9F8(a1, a2, (uint64_t)&unk_1006F0CE8, (uint64_t)&unk_1006F0D10, (uint64_t)sub_100410DF0);
}

{
  return sub_10040D9F8(a1, a2, (uint64_t)&unk_1006F0D38, (uint64_t)&unk_1006F0D60, (uint64_t)sub_100410E04);
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_1005E0CF0();
  uint64_t v25 = sub_1002CE3B4();
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  BOOL v12 = v25;
  int v13 = v9 & 1;
  BOOL v14 = BYTE1(v9) & 1;
  int v15 = BYTE2(v9) & 1;
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  int v19 = v12;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  char v22 = v15;
  int v23 = v16;
  int v24 = v17;
  sub_1005E0DE0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_10003E960(v16);
  return swift_release();
}

{
  return sub_10040EA90(a1, a2);
}

{
  return sub_10040EA90(a1, a2);
}

{
  return sub_10040EF9C(a1, a2, (uint64_t)&unk_1006F0E00, (uint64_t)sub_100411084);
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;

  sub_1005E0D20();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11._uint64_t countAndFlagsBits = sub_1005E1D90("{", 1uLL, 1);
  sub_1005E0E10(v11);
  swift_bridgeObjectRelease();
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_10018A5D4();
  sub_1002CFCF0();
  sub_1005E0DB0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  v12._uint64_t countAndFlagsBits = sub_1005E1D90("}", 1uLL, 1);
  sub_1005E0E10(v12);
  return swift_bridgeObjectRelease();
}

{
  return sub_10040EF9C(a1, a2, (uint64_t)&unk_1006F0E50, (uint64_t)sub_1004110B4);
}

{
  return sub_10040D9F8(a1, a2, (uint64_t)&unk_1006F0EA0, (uint64_t)&unk_1006F0EC8, (uint64_t)sub_100411120);
}

{
  return sub_10040EA90(a1, a2);
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  sub_1005E0D20();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v25 = sub_1005E0E40();
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  BOOL v12 = v25;
  int v13 = v9 & 1;
  BOOL v14 = BYTE1(v9) & 1;
  int v15 = BYTE2(v9) & 1;
  uint64_t v16 = v10;
  int v17 = v11;
  sub_10018A5D4();
  sub_1002CFCF0();
  int v19 = v12;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  char v22 = v15;
  int v23 = v16;
  int v24 = v17;
  sub_1005E0DE0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v16);
  return swift_release();
}

{
  return sub_100410824(a1, a2);
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  Swift::Int v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  int v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  char v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100411300;
  *(void *)(v9 + 24) = v8;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  return swift_release();
}

{
  return sub_100410824(a1, a2);
}

{
  return sub_10040EA90(a1, a2);
}

{
  return sub_10040EA90(a1, a2);
}

{
  return sub_10040EA90(a1, a2);
}

{
  return sub_10040EA90(a1, a2);
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  sub_1005E0E30();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = sub_1005E0CC0();
  Swift::Int v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  char v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  int v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  BOOL v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OSLogPrivacy.Mask.hash(_:), v6);
  sub_1005E0D10();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1005DBFB8((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1005DBFB8((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  return swift_release();
}

uint64_t sub_1002CDA54()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002CDA8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002CDB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[1] = a4;
  uint64_t v6 = sub_1005E0D20();
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005E0E30();
  __chkstk_darwin(v9 - 8);
  int v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v29 = sub_1002CE3B4();
  int v30 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t v16 = v29;
  char v17 = v13 & 1;
  char v18 = BYTE1(v13) & 1;
  char v19 = BYTE2(v13) & 1;
  uint64_t v20 = v14;
  uint64_t v21 = v15;
  sub_10018A5D4();
  sub_1002CFCF0();
  v23[2] = v16;
  char v24 = v17;
  char v25 = v18;
  char v26 = v19;
  uint64_t v27 = v20;
  uint64_t v28 = v21;
  sub_1005E0DE0();
  sub_1002CDA8C((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v20);
  return swift_release();
}

uint64_t sub_1002CDCFC()
{
  return sub_1002CDEA4(*(void *)(v0 + 16), *(void *)(v0 + 24), sub_1002D0938);
}

uint64_t sub_1002CDD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005E0E30();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005E0D20();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  return swift_release();
}

#error "1002CDED8: call analysis failed (funcsize=18)"

uint64_t sub_1002CDF0C()
{
  return sub_1002CDF64(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_10070FD90, sub_1002D0948);
}

#error "1002CDFE4: call analysis failed (funcsize=43)"

uint64_t sub_1002CE014()
{
  return sub_1002CDF64(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_1007108C0, sub_1002D0870);
}

uint64_t sub_1002CE06C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002CE0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[1] = a4;
  uint64_t v6 = sub_1005E0D20();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005E0E30();
  __chkstk_darwin(v9 - 8);
  int v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v29 = sub_1005E0E50();
  int v30 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t v16 = v29;
  char v17 = v13 & 1;
  char v18 = BYTE1(v13) & 1;
  char v19 = BYTE2(v13) & 1;
  uint64_t v20 = v14;
  uint64_t v21 = v15;
  sub_10018A5D4();
  sub_1002CFCF0();
  v23[2] = v16;
  char v24 = v17;
  char v25 = v18;
  char v26 = v19;
  uint64_t v27 = v20;
  uint64_t v28 = v21;
  sub_1005E0DE0();
  sub_1002CDA8C((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v20);
  return swift_release();
}

uint64_t sub_1002CE2A4()
{
  uint64_t result = (*(uint64_t (**)(void))(v0 + 16))();
  if ((result & (unint64_t)&_mh_execute_header) != 0) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t sub_1002CE2F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002CE33C()
{
  uint64_t result = (*(uint64_t (**)(void))(v0 + 16))();
  if ((result & (unint64_t)&_mh_execute_header) != 0) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t sub_1002CE38C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002CE3B4()
{
  return sub_1005E0E60();
}

uint64_t sub_1002CE444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[1] = a4;
  uint64_t v6 = sub_1005E0D20();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1005E0E30();
  __chkstk_darwin(v9 - 8);
  int v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v29 = sub_1002CE3B4();
  int v30 = v13;
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t v16 = v29;
  char v17 = v13 & 1;
  char v18 = BYTE1(v13) & 1;
  char v19 = BYTE2(v13) & 1;
  uint64_t v20 = v14;
  uint64_t v21 = v15;
  sub_10018A5D4();
  sub_1002CFCF0();
  v23[2] = v16;
  char v24 = v17;
  char v25 = v18;
  char v26 = v19;
  uint64_t v27 = v20;
  uint64_t v28 = v21;
  sub_1005E0DF0();
  sub_1002CDA8C((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v20);
  return swift_release();
}

uint64_t sub_1002CE614()
{
  uint64_t result = (*(uint64_t (**)(void))(v0 + 16))();
  if (v2) {
    return 0;
  }
  return result;
}

uint64_t sub_1002CE664(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return sub_100211B34(v1, v2, v3);
}

uint64_t sub_1002CE69C()
{
  return sub_1002CE664(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CE6D4(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return sub_100211CBC(v1);
}

uint64_t sub_1002CE70C()
{
  return sub_1002CE6D4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CE734(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_100212B90();
    uint64_t v3 = 0;
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v27 = v2;
    uint64_t v28 = v1;
    while (1)
    {
      uint64_t v41 = 91;
      uint64_t v42 = 0xE100000000000000;
      uint64_t v5 = qword_10070FB10;
      swift_bridgeObjectRetain_n();
      if (v5 != -1) {
        swift_once();
      }
      uint64_t v6 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
      int v7 = dword_100761860;
      __int16 v8 = word_100761864;
      char v9 = byte_100761866;
      swift_retain();
      uint64_t v10 = qword_100761858;
      sub_10020E5E8((uint64_t)_swiftEmptyArrayStorage);
      LOBYTE(v35) = 0;
      BYTE5(v35) = 0;
      *(_DWORD *)((char *)&v35 + 1) = 65537;
      uint64_t v36 = v6;
      _._uint64_t countAndFlagsBits = v10;
      LODWORD(_._object) = v7;
      WORD2(_._object) = v8;
      BYTE6(_._object) = v9;
      *(void *)uint64_t v38 = v11;
      uint64_t v39 = v12;
      uint64_t v40 = v13;
      int v14 = swift_bridgeObjectRetain();
      sub_1001EDA24(v14, 0, 0, 46, 0, 0, 0, 0, (uint64_t)&v35, v27, v28, SHIDWORD(v28), v29, v30, v31, v32, v33, (uint64_t)v34, v35,
        v36,
        _,
        v38[0],
        v39,
        v40,
        v41,
        v42,
        (uint64_t)v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits_low = LODWORD(_._countAndFlagsBits);
      if (HIDWORD(_._countAndFlagsBits) < LODWORD(_._countAndFlagsBits)) {
        break;
      }
      unsigned int v17 = BYTE6(_._object) | (WORD2(_._object) << 8);
      if (LODWORD(_._object) - v17 < HIDWORD(_._countAndFlagsBits)) {
        goto LABEL_14;
      }
      uint64_t v18 = v36;
      Swift::Int v19 = HIDWORD(_._countAndFlagsBits) - (unint64_t)LODWORD(_._countAndFlagsBits);
      uint64_t v33 = 0;
      BOOL v34 = (void *)0xE000000000000000;
      swift_retain();
      sub_1005E1D10(v19);
      swift_beginAccess();
      sub_1003502F8(*(void *)(v18 + 24) + v17 + countAndFlagsBits_low, v19, &v33);
      swift_release();
      uint64_t v21 = v33;
      uint64_t v20 = v34;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v53._uint64_t countAndFlagsBits = v21;
      v53._uint64_t object = v20;
      sub_1005E1E30(v53);
      swift_bridgeObjectRelease();
      v54._uint64_t countAndFlagsBits = 93;
      v54._uint64_t object = (void *)0xE100000000000000;
      sub_1005E1E30(v54);
      swift_bridgeObjectRelease();
      uint64_t v22 = v41;
      uint64_t v23 = v42;
      uint64_t v43 = v4;
      unint64_t v24 = v4[2];
      if (v24 >= v4[3] >> 1)
      {
        sub_100212B90();
        uint64_t v4 = v43;
      }
      ++v3;
      long long v4[2] = v24 + 1;
      char v25 = &v4[2 * v24];
      v25[4] = v22;
      v25[5] = v23;
      if (v27 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = _swiftEmptyArrayStorage;
LABEL_12:
    uint64_t v35 = (uint64_t)v4;
    sub_10000566C(&qword_1007120E8);
    sub_1002D081C();
    uint64_t v26 = sub_1005E1A80();
    swift_bridgeObjectRelease();
    return v26;
  }
  return result;
}

uint64_t sub_1002CEA44()
{
  return sub_1002CE734(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CEA6C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002CEAB4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t OSLogInterpolation.appendInterpolation(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = sub_1005E0E30();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005E0D20();
  __chkstk_darwin(v5 - 8);
  int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_retain();
  uint64_t v9 = a1(v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v9;
  v16[3] = v11;
  v16[4] = v13;
  v16[5] = v15;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  v20._uint64_t countAndFlagsBits = sub_1005E1D90("/", 1uLL, 1);
  sub_1005E0E10(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v17 = (void *)swift_allocObject();
  _OWORD v17[2] = v9;
  v17[3] = v11;
  v17[4] = v13;
  v17[5] = v15;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;

  sub_1005E0E30();
  __chkstk_darwin();
  char v25 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_retain();
  uint64_t v6 = a1(v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  LOBYTE(a1) = v11;
  sub_10036B53C(v6, v7, v9, v11, v26);
  uint64_t v23 = v26[0];
  uint64_t v12 = v26[1];
  uint64_t v13 = v26[2];
  uint64_t v14 = v27;
  unint64_t v24 = v27;
  uint64_t v15 = v28;
  sub_10036BC08(v6, v8, v10, a1);
  swift_release();
  swift_bridgeObjectRetain();
  sub_10036BCE8(v13);
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_allocObject();
  unsigned int v17 = v23;
  _OWORD v16[2] = v23;
  v16[3] = v12;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = v15;
  sub_1005E0CF0();
  uint64_t v18 = (uint64_t)v25;
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_10036C0B8(v18, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10036C0B8((uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  v29._uint64_t countAndFlagsBits = sub_1005E1D90(" ", 1uLL, 1);
  sub_1005E0E10(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10036BCE8(v13);
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v12;
  void v19[4] = v13;
  v19[5] = v24;
  v19[6] = v15;
  swift_retain();
  Swift::String v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_10036BDDC;
  *(void *)(v20 + 24) = v19;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_10036C0B8(v18, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10036C0B8((uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10036BC50(v13);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;

  uint64_t v2 = sub_1005E0D00();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  int v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_retain();
  uint64_t v11 = a1(v10);
  uint64_t v13 = v12;
  uint64_t v21 = v12;
  uint64_t v15 = v14;
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v11;
  v16[3] = v13;
  v16[4] = v15;
  swift_retain();
  unsigned int v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10036BE8C;
  *(void *)(v17 + 24) = v16;
  sub_1005E0E20();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OSLogPrivacy._MailMask.mailbox(_:), v2);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1005E0DB0();
  sub_10036C0B8((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_10036C0B8((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  swift_release();
  v22._uint64_t countAndFlagsBits = sub_1005E1D90(" (", 2uLL, 1);
  sub_1005E0E10(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v11;
  v18[3] = v21;
  v18[4] = v15;
  sub_1005E0E20();
  sub_1005E0CD0();
  swift_retain();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_10036BFE8;
  *(void *)(v19 + 24) = v18;
  sub_1005E0DB0();
  swift_release();
  sub_10036C0B8((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_10036C0B8((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  v23._uint64_t countAndFlagsBits = sub_1005E1D90(")", 1uLL, 1);
  sub_1005E0E10(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  int v10;
  char v11;
  char v12;
  char v13;
  unsigned __int8 v14;
  unsigned char *v15;
  char v16;
  char v17;
  uint64_t v18;
  void (*v19)(char *, void, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  char v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  unsigned char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char *v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(void);
  unsigned char *v42;
  char v43;
  uint64_t v44;
  unsigned char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t (**v64)(void);
  int v65;
  uint64_t (**v66)(void);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, void, uint64_t);
  char *v72;
  uint64_t v73;
  unsigned __int8 v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;

  Swift::String v53 = v1;
  sub_1005E0E30();
  __chkstk_darwin();
  uint64_t v72 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v58 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_1005E0D90();
  uint64_t v69 = *(void *)(v56 - 8);
  __chkstk_darwin();
  char v55 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_retain();
  uint64_t v73 = a1(v6);
  uint64_t v74 = v7;
  uint64_t v8 = v73;
  int v65 = v73;
  uint64_t v9 = BYTE1(v73);
  uint64_t v62 = BYTE1(v73);
  uint64_t v68 = BYTE2(v73);
  uint64_t v10 = BYTE3(v73);
  uint64_t v11 = BYTE4(v73);
  uint64_t v59 = BYTE4(v73);
  uint64_t v12 = BYTE5(v73);
  uint64_t v60 = BYTE5(v73);
  uint64_t v13 = BYTE6(v73);
  uint64_t v61 = BYTE6(v73);
  uint64_t v57 = HIBYTE(v73);
  uint64_t v14 = v7;
  uint64_t v63 = v7;
  swift_release();
  v75._uint64_t countAndFlagsBits = sub_1005E1D90("FlagsUpdate(unread: ", 0x14uLL, 1);
  sub_1005E0E10(v75);
  swift_bridgeObjectRelease();
  uint64_t v15 = (unsigned char *)swift_allocObject();
  v15[16] = v8;
  v15[17] = v9;
  uint64_t v16 = v68;
  v15[18] = v68;
  v15[19] = v10;
  v15[20] = v11;
  v15[21] = v12;
  v15[22] = v13;
  unsigned int v17 = v57;
  v15[23] = v57;
  v15[24] = v14;
  uint64_t v18 = v69;
  uint64_t v19 = *(void (**)(char *, void, uint64_t))(v69 + 104);
  uint64_t v70 = v69 + 104;
  uint64_t v71 = v19;
  Swift::String v20 = v55;
  uint64_t v21 = v56;
  v19(v55, enum case for OSLogBoolFormat.answer(_:), v56);
  uint64_t v22 = (uint64_t)v58;
  sub_1002CFCF0();
  sub_1005E0E00();
  uint64_t v64 = &type metadata accessor for OSLogPrivacy;
  sub_100411508(v22, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  Swift::String v54 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v69 = v18 + 8;
  v54(v20, v21);
  swift_release();
  v76._uint64_t countAndFlagsBits = sub_1005E1D90(", deleted: ", 0xBuLL, 1);
  sub_1005E0E10(v76);
  swift_bridgeObjectRelease();
  uint64_t v23 = (unsigned char *)swift_allocObject();
  LOBYTE(v18) = v65;
  v23[16] = v65;
  v23[17] = v62;
  v23[18] = v16;
  v23[19] = v10;
  uint64_t v67 = v10;
  unint64_t v24 = v59;
  v23[20] = v59;
  char v25 = v60;
  v23[21] = v60;
  v23[22] = v61;
  v23[23] = v17;
  v23[24] = v63;
  v71(v20, enum case for OSLogBoolFormat.answer(_:), v21);
  uint64_t v26 = (uint64_t)v58;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v26, (uint64_t (*)(void))v64);
  uint64_t v27 = v54;
  v54(v20, v21);
  swift_release();
  v77._uint64_t countAndFlagsBits = sub_1005E1D90(", answered: ", 0xCuLL, 1);
  sub_1005E0E10(v77);
  swift_bridgeObjectRelease();
  uint64_t v28 = (unsigned char *)swift_allocObject();
  _OWORD v28[16] = v18;
  LOBYTE(v18) = v62;
  v28[17] = v62;
  v28[18] = v68;
  v28[19] = v10;
  v28[20] = v24;
  v28[21] = v25;
  LOBYTE(v10) = v61;
  v28[22] = v61;
  uint64_t v29 = v57;
  v28[23] = v57;
  v28[24] = v63;
  uint64_t v30 = v21;
  v71(v20, enum case for OSLogBoolFormat.answer(_:), v21);
  uint64_t v31 = (uint64_t)v58;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v31, (uint64_t (*)(void))v64);
  v27(v20, v30);
  swift_release();
  v78._uint64_t countAndFlagsBits = sub_1005E1D90(", draft: ", 9uLL, 1);
  sub_1005E0E10(v78);
  swift_bridgeObjectRelease();
  uint64_t v32 = (unsigned char *)swift_allocObject();
  LOBYTE(v22) = v65;
  v32[16] = v65;
  v32[17] = v18;
  v32[18] = v68;
  v32[19] = v67;
  LOBYTE(v27) = v59;
  v32[20] = v59;
  v32[21] = v60;
  v32[22] = v10;
  v32[23] = v29;
  v32[24] = v63;
  uint64_t v33 = v30;
  v71(v20, enum case for OSLogBoolFormat.answer(_:), v30);
  BOOL v34 = (uint64_t)v58;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v34, (uint64_t (*)(void))v64);
  v54(v20, v33);
  swift_release();
  v79._uint64_t countAndFlagsBits = sub_1005E1D90(", forwarded: ", 0xDuLL, 1);
  sub_1005E0E10(v79);
  swift_bridgeObjectRelease();
  uint64_t v35 = (unsigned char *)swift_allocObject();
  v35[16] = v22;
  v35[17] = v18;
  uint64_t v36 = v68;
  v35[18] = v68;
  LOBYTE(v18) = v67;
  v35[19] = v67;
  v35[20] = (_BYTE)v27;
  v35[21] = v60;
  uint64_t v37 = v61;
  v35[22] = v61;
  LOBYTE(v22) = v57;
  void v35[23] = v57;
  v35[24] = v63;
  uint64_t v38 = v34;
  sub_1005E0CF0();
  uint64_t v39 = (uint64_t)v72;
  sub_1005E0E20();
  swift_retain();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = sub_10040D900;
  *(void *)(v40 + 24) = v35;
  sub_1005E0DB0();
  swift_release();
  uint64_t v66 = &type metadata accessor for OSLogStringAlignment;
  sub_100411508(v39, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  uint64_t v41 = v64;
  sub_100411508(v38, (uint64_t (*)(void))v64);
  swift_release();
  v80._uint64_t countAndFlagsBits = sub_1005E1D90(", redirected: ", 0xEuLL, 1);
  sub_1005E0E10(v80);
  swift_bridgeObjectRelease();
  uint64_t v42 = (unsigned char *)swift_allocObject();
  v42[16] = v65;
  LOBYTE(v31) = v62;
  v42[17] = v62;
  v42[18] = v36;
  v42[19] = v18;
  uint64_t v43 = v59;
  v42[20] = v59;
  LOBYTE(v18) = v60;
  v42[21] = v60;
  v42[22] = v37;
  v42[23] = v22;
  LOBYTE(v22) = v63;
  v42[24] = v63;
  sub_1005E0CF0();
  sub_1005E0E20();
  swift_retain();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = sub_100410BF8;
  *(void *)(v44 + 24) = v42;
  sub_1005E0DB0();
  swift_release();
  sub_100411508(v39, (uint64_t (*)(void))v66);
  sub_100411508(v38, (uint64_t (*)(void))v41);
  swift_release();
  v81._uint64_t countAndFlagsBits = sub_1005E1D90(", junk: ", 8uLL, 1);
  sub_1005E0E10(v81);
  swift_bridgeObjectRelease();
  uint64_t v45 = (unsigned char *)swift_allocObject();
  v45[16] = v65;
  v45[17] = v31;
  v45[18] = v68;
  v45[19] = v67;
  v45[20] = v43;
  v45[21] = v18;
  LOBYTE(v41) = v61;
  v45[22] = v61;
  uint64_t v46 = v57;
  v45[23] = v57;
  v45[24] = v22;
  swift_retain();
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = sub_100410C88;
  *(void *)(v47 + 24) = v45;
  sub_1005E0CF0();
  sub_1005E0E20();
  swift_retain();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = sub_100410C90;
  *(void *)(v48 + 24) = v47;
  sub_1005E0DB0();
  swift_release();
  sub_100411508(v39, (uint64_t (*)(void))v66);
  sub_100411508(v38, (uint64_t (*)(void))v64);
  swift_release();
  swift_release();
  v82._uint64_t countAndFlagsBits = sub_1005E1D90(", label: ", 9uLL, 1);
  sub_1005E0E10(v82);
  swift_bridgeObjectRelease();
  uint64_t v49 = (unsigned char *)swift_allocObject();
  v49[16] = v65;
  v49[17] = v62;
  v49[18] = v68;
  v49[19] = v67;
  v49[20] = v59;
  v49[21] = v60;
  v49[22] = (_BYTE)v41;
  v49[23] = v46;
  v49[24] = v63;
  swift_retain();
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = sub_100410CA4;
  *(void *)(v50 + 24) = v49;
  sub_1005E0CF0();
  sub_1005E0E20();
  swift_retain();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_100410CAC;
  *(void *)(v51 + 24) = v50;
  sub_1005E0DB0();
  swift_release();
  sub_100411508(v39, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_100411508(v38, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  v83._uint64_t countAndFlagsBits = sub_1005E1D90(")", 1uLL, 1);
  sub_1005E0E10(v83);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  unsigned char *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  unsigned char *v22;
  char v23;
  void (*v24)(char *, void, uint64_t);
  uint64_t v25;
  unsigned char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t (**v30)(void);
  unsigned char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  unsigned char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(void);
  unsigned char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t (**v57)(void);
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  void (*v67)(char *, void, uint64_t);
  int v68;
  void (*v69)(char *, uint64_t);
  int v70;
  char *v71;
  uint64_t v72;
  char v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;

  Swift::String v54 = v1;
  sub_1005E0E30();
  __chkstk_darwin();
  uint64_t v71 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v55 = sub_1005E0D90();
  uint64_t v66 = *(void *)(v55 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = swift_retain();
  uint64_t v72 = a1(v7);
  uint64_t v73 = v8 & 1;
  uint64_t v9 = v72;
  uint64_t v10 = BYTE1(v72);
  uint64_t v11 = BYTE2(v72);
  uint64_t v59 = BYTE2(v72);
  uint64_t v68 = BYTE3(v72);
  uint64_t v12 = BYTE4(v72);
  uint64_t v62 = BYTE4(v72);
  uint64_t v58 = BYTE5(v72);
  uint64_t v60 = BYTE6(v72);
  uint64_t v13 = HIBYTE(v72);
  uint64_t v63 = HIBYTE(v72);
  uint64_t v14 = v8 & 1;
  uint64_t v70 = v8 & 1;
  swift_release();
  v74._uint64_t countAndFlagsBits = sub_1005E1D90("Flags(unread: ", 0xEuLL, 1);
  sub_1005E0E10(v74);
  swift_bridgeObjectRelease();
  uint64_t v15 = (unsigned char *)swift_allocObject();
  v15[16] = v9;
  LODWORD(a1) = v9;
  v15[17] = v10;
  v15[18] = v11;
  uint64_t v16 = v68;
  v15[19] = v68;
  v15[20] = v12;
  unsigned int v17 = v58;
  v15[21] = v58;
  v15[22] = v60;
  v15[23] = v13;
  v15[24] = v14;
  uint64_t v18 = v66;
  uint64_t v67 = *(void (**)(char *, void, uint64_t))(v66 + 104);
  uint64_t v61 = v66 + 104;
  uint64_t v19 = v55;
  v67(v6, enum case for OSLogBoolFormat.answer(_:), v55);
  Swift::String v20 = (uint64_t)v56;
  sub_1002CFCF0();
  sub_1005E0E00();
  uint64_t v57 = &type metadata accessor for OSLogPrivacy;
  sub_100411508(v20, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v66 = v18 + 8;
  uint64_t v69 = v21;
  v21(v6, v19);
  swift_release();
  v75._uint64_t countAndFlagsBits = sub_1005E1D90(", deleted: ", 0xBuLL, 1);
  sub_1005E0E10(v75);
  swift_bridgeObjectRelease();
  uint64_t v22 = (unsigned char *)swift_allocObject();
  int v65 = (int)a1;
  v22[16] = (_BYTE)a1;
  uint64_t v64 = v10;
  v22[17] = v10;
  LOBYTE(a1) = v59;
  v22[18] = v59;
  v22[19] = v16;
  v22[20] = v62;
  v22[21] = v17;
  uint64_t v23 = v60;
  v22[22] = v60;
  v22[23] = v63;
  v22[24] = v70;
  unint64_t v24 = v67;
  v67(v6, enum case for OSLogBoolFormat.answer(_:), v19);
  char v25 = (uint64_t)v56;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v25, (uint64_t (*)(void))v57);
  v69(v6, v19);
  swift_release();
  v76._uint64_t countAndFlagsBits = sub_1005E1D90(", answered: ", 0xCuLL, 1);
  sub_1005E0E10(v76);
  swift_bridgeObjectRelease();
  uint64_t v26 = (unsigned char *)swift_allocObject();
  v26[16] = v65;
  v26[17] = v10;
  v26[18] = (_BYTE)a1;
  v26[19] = v68;
  LOBYTE(v10) = v62;
  v26[20] = v62;
  LOBYTE(a1) = v58;
  v26[21] = v58;
  v26[22] = v23;
  uint64_t v27 = v63;
  v26[23] = v63;
  v26[24] = v70;
  v24(v6, enum case for OSLogBoolFormat.answer(_:), v19);
  uint64_t v28 = v56;
  sub_1002CFCF0();
  sub_1005E0E00();
  uint64_t v29 = (uint64_t)v28;
  uint64_t v30 = v57;
  sub_100411508(v29, (uint64_t (*)(void))v57);
  v69(v6, v19);
  swift_release();
  v77._uint64_t countAndFlagsBits = sub_1005E1D90(", draft: ", 9uLL, 1);
  sub_1005E0E10(v77);
  swift_bridgeObjectRelease();
  uint64_t v31 = (unsigned char *)swift_allocObject();
  v31[16] = v65;
  LOBYTE(v25) = v64;
  v31[17] = v64;
  v31[18] = v59;
  v31[19] = v68;
  v31[20] = v10;
  v31[21] = (_BYTE)a1;
  v31[22] = v60;
  v31[23] = v27;
  uint64_t v32 = v70;
  v31[24] = v70;
  uint64_t v33 = v55;
  v67(v6, enum case for OSLogBoolFormat.answer(_:), v55);
  BOOL v34 = (uint64_t)v56;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v34, (uint64_t (*)(void))v30);
  uint64_t v35 = v33;
  uint64_t v36 = v69;
  v69(v6, v35);
  swift_release();
  v78._uint64_t countAndFlagsBits = sub_1005E1D90(", forwarded: ", 0xDuLL, 1);
  sub_1005E0E10(v78);
  swift_bridgeObjectRelease();
  uint64_t v37 = (unsigned char *)swift_allocObject();
  v37[16] = v65;
  v37[17] = v25;
  LOBYTE(a1) = v59;
  v37[18] = v59;
  LOBYTE(v10) = v68;
  v37[19] = v68;
  v37[20] = v62;
  v37[21] = v58;
  LOBYTE(v30) = v60;
  v37[22] = v60;
  v37[23] = v63;
  v37[24] = v32;
  uint64_t v38 = v55;
  v67(v6, enum case for OSLogBoolFormat.answer(_:), v55);
  sub_1002CFCF0();
  sub_1005E0E00();
  uint64_t v39 = v34;
  uint64_t v40 = v57;
  sub_100411508(v39, (uint64_t (*)(void))v57);
  v36(v6, v38);
  swift_release();
  v79._uint64_t countAndFlagsBits = sub_1005E1D90(", redirected: ", 0xEuLL, 1);
  sub_1005E0E10(v79);
  swift_bridgeObjectRelease();
  uint64_t v41 = (unsigned char *)swift_allocObject();
  LOBYTE(v38) = v65;
  v41[16] = v65;
  v41[17] = v25;
  v41[18] = (_BYTE)a1;
  v41[19] = v10;
  LOBYTE(v10) = v62;
  v41[20] = v62;
  v41[21] = v58;
  v41[22] = (_BYTE)v30;
  LOBYTE(v30) = v63;
  v41[23] = v63;
  v41[24] = v70;
  uint64_t v42 = v55;
  v67(v6, enum case for OSLogBoolFormat.answer(_:), v55);
  uint64_t v43 = (uint64_t)v56;
  sub_1002CFCF0();
  sub_1005E0E00();
  sub_100411508(v43, (uint64_t (*)(void))v40);
  v36(v6, v42);
  swift_release();
  v80._uint64_t countAndFlagsBits = sub_1005E1D90(", junk: ", 8uLL, 1);
  sub_1005E0E10(v80);
  swift_bridgeObjectRelease();
  uint64_t v44 = (unsigned char *)swift_allocObject();
  v44[16] = v38;
  v44[17] = v64;
  LOBYTE(v43) = v59;
  v44[18] = v59;
  LOBYTE(v38) = v68;
  v44[19] = v68;
  v44[20] = v10;
  v44[21] = v58;
  LOBYTE(v42) = v60;
  v44[22] = v60;
  v44[23] = (_BYTE)v30;
  LOBYTE(v40) = v70;
  v44[24] = v70;
  swift_retain();
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_100411E24;
  *(void *)(v45 + 24) = v44;
  uint64_t v46 = (uint64_t)v56;
  sub_1005E0CF0();
  uint64_t v47 = (uint64_t)v71;
  sub_1005E0E20();
  swift_retain();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = sub_100410DF0;
  *(void *)(v48 + 24) = v45;
  sub_1005E0DB0();
  swift_release();
  sub_100411508(v47, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_100411508(v46, (uint64_t (*)(void))v57);
  swift_release();
  swift_release();
  v81._uint64_t countAndFlagsBits = sub_1005E1D90(", label: ", 9uLL, 1);
  sub_1005E0E10(v81);
  swift_bridgeObjectRelease();
  uint64_t v49 = (unsigned char *)swift_allocObject();
  v49[16] = v65;
  v49[17] = v64;
  v49[18] = v43;
  v49[19] = v38;
  v49[20] = v62;
  v49[21] = v58;
  v49[22] = v42;
  v49[23] = v63;
  v49[24] = (_BYTE)v40;
  swift_retain();
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = sub_100411E28;
  *(void *)(v50 + 24) = v49;
  sub_1005E0CF0();
  sub_1005E0E20();
  swift_retain();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_100410E04;
  *(void *)(v51 + 24) = v50;
  sub_1005E0DB0();
  swift_release();
  sub_100411508(v47, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_100411508(v46, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  swift_release();
  v82._uint64_t countAndFlagsBits = sub_1005E1D90(")", 1uLL, 1);
  sub_1005E0E10(v82);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;

  uint64_t v2 = v1;
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  int v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_retain();
  Swift::String v54 = a1(v8);
  uint64_t v9 = v54;
  uint64_t v33 = v54;
  uint64_t v10 = HIDWORD(v54);
  uint64_t v32 = HIDWORD(v54);
  swift_release();
  v55._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v55);
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = v9;
  *(_DWORD *)(v11 + 20) = v10;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v50 = sub_1005E0E40();
  uint64_t v51 = v12;
  uint64_t v52 = v13;
  Swift::String v53 = v14;
  uint64_t v15 = v50;
  uint64_t v16 = v12;
  unsigned int v17 = BYTE1(v12);
  uint64_t v18 = BYTE2(v12);
  uint64_t v19 = v13;
  Swift::String v20 = v14;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v44 = v15;
  uint64_t v45 = v16;
  uint64_t v46 = v17;
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  uint64_t v31 = v2;
  sub_1005E0DC0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v19);
  swift_release();
  v56._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v56);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = v33;
  *(_DWORD *)(v21 + 20) = v32;
  swift_retain();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10041122C;
  *(void *)(v22 + 24) = v21;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v40 = sub_1005E0E40();
  uint64_t v41 = v23;
  uint64_t v42 = v24;
  uint64_t v43 = v25;
  uint64_t v26 = v40;
  LOBYTE(v15) = v23 & 1;
  LOBYTE(v2) = BYTE1(v23) & 1;
  uint64_t v27 = BYTE2(v23) & 1;
  uint64_t v28 = v24;
  uint64_t v29 = v25;
  sub_10018A5D4();
  sub_1002CFCF0();
  BOOL v34 = v26;
  uint64_t v35 = v15;
  uint64_t v36 = v2;
  uint64_t v37 = v27;
  uint64_t v38 = v28;
  uint64_t v39 = v29;
  sub_1005E0DE0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v28);
  swift_release();
  swift_release();
  v57._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v57);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;

  uint64_t v40 = v1;
  uint64_t v47 = sub_1005E0D00();
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v45 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0D20();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E0E30();
  __chkstk_darwin();
  int v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_retain();
  uint64_t v68 = a1(v8);
  uint64_t v69 = v9;
  uint64_t v70 = v10;
  uint64_t v11 = v68;
  uint64_t v42 = v68;
  uint64_t v12 = HIDWORD(v68);
  uint64_t v43 = HIDWORD(v68);
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v44 = v10;
  swift_release();
  v71._uint64_t countAndFlagsBits = sub_1005E1D90("[", 1uLL, 1);
  sub_1005E0E10(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = v11;
  *(_DWORD *)(v15 + 20) = v12;
  *(void *)(v15 + 24) = v13;
  *(_DWORD *)(v15 + 32) = v14;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  uint64_t v64 = sub_1005E0E40();
  int v65 = v16;
  uint64_t v66 = v17;
  uint64_t v67 = v18;
  uint64_t v19 = v64;
  Swift::String v20 = v16;
  uint64_t v21 = BYTE1(v16);
  LOBYTE(v14) = BYTE2(v16);
  uint64_t v22 = v17;
  uint64_t v23 = v18;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v58 = v19;
  uint64_t v59 = v20;
  uint64_t v60 = v21;
  uint64_t v61 = v14;
  uint64_t v62 = v22;
  uint64_t v63 = v23;
  sub_1005E0DC0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v22);
  swift_release();
  v72._uint64_t countAndFlagsBits = sub_1005E1D90("-", 1uLL, 1);
  sub_1005E0E10(v72);
  swift_bridgeObjectRelease();
  uint64_t v41 = v13;
  swift_bridgeObjectRetain();
  unint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = v42;
  *(_DWORD *)(v24 + 20) = v43;
  *(void *)(v24 + 24) = v13;
  *(_DWORD *)(v24 + 32) = v44;
  swift_retain();
  char v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_100411E2C;
  *(void *)(v25 + 24) = v24;
  variable initialization expression of Engine.isProcessingUpdates();
  variable initialization expression of Engine.isProcessingUpdates();
  Swift::String v54 = sub_1005E0E40();
  char v55 = v26;
  uint64_t v56 = v27;
  uint64_t v57 = v28;
  uint64_t v29 = v54;
  LOBYTE(v19) = v26 & 1;
  uint64_t v30 = BYTE1(v26) & 1;
  LOBYTE(v13) = BYTE2(v26) & 1;
  uint64_t v31 = v27;
  uint64_t v32 = v28;
  sub_10018A5D4();
  sub_1002CFCF0();
  uint64_t v48 = v29;
  uint64_t v49 = v19;
  uint64_t v50 = v30;
  uint64_t v51 = v13;
  uint64_t v52 = v31;
  Swift::String v53 = v32;
  sub_1005E0DE0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_10003E960(v31);
  swift_release();
  swift_release();
  v73._uint64_t countAndFlagsBits = sub_1005E1D90("] [", 3uLL, 1);
  sub_1005E0E10(v73);
  swift_bridgeObjectRelease();
  uint64_t v33 = v41;
  swift_bridgeObjectRetain();
  BOOL v34 = swift_allocObject();
  *(unsigned char *)(v34 + 16) = v42;
  *(_DWORD *)(v34 + 20) = v43;
  *(void *)(v34 + 24) = v33;
  *(_DWORD *)(v34 + 32) = v44;
  sub_1005E0E20();
  uint64_t v35 = v46;
  uint64_t v36 = v45;
  uint64_t v37 = v47;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v45, enum case for OSLogPrivacy._MailMask.mailbox(_:), v47);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  sub_1005E0DB0();
  sub_100411508((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_100411508((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  swift_release();
  v74._uint64_t countAndFlagsBits = sub_1005E1D90("]", 1uLL, 1);
  sub_1005E0E10(v74);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CED90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002CEE00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10 = sub_1005E0E30();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1005E0D20();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19._uint64_t countAndFlagsBits = sub_1005E1D90(a3, 1uLL, 1);
  sub_1005E0E10(v19);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  sub_1005E0CF0();
  sub_10018A5D4();
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v12, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  sub_1002CDA8C((uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  swift_release();
  v20._uint64_t countAndFlagsBits = sub_1005E1D90(a6, 1uLL, 1);
  sub_1005E0E10(v20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CEFB8()
{
  return sub_1002CF194(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CEFF4(uint64_t (*a1)(void))
{
  uint64_t v1 = *(void *)(a1() + 16);
  if (v1)
  {
    sub_100212B90();
    uint64_t v2 = 0;
    do
    {
      sub_10000566C(&qword_1007120F8);
      uint64_t v3 = sub_1005E1CA0();
      uint64_t v5 = v4;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      if (v6 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100212B90();
      }
      ++v2;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      int v7 = &_swiftEmptyArrayStorage[2 * v6];
      v7[4] = v3;
      v7[5] = v5;
    }
    while (v1 != v2);
  }
  swift_bridgeObjectRelease();
  sub_10000566C(&qword_1007120E8);
  sub_1002D081C();
  uint64_t v8 = sub_1005E1A80();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1002CF15C()
{
  return sub_1002CEFF4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CF194(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_100212B90();
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_100212B90();
      }
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      long long v8[4] = v5;
      v8[5] = v4;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  sub_10000566C(&qword_1007120E8);
  sub_1002D081C();
  uint64_t v9 = sub_1005E1A80();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1002CF2F8(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return sub_100211A6C(v1);
}

uint64_t sub_1002CF330()
{
  return sub_1002CF2F8(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1002CF358(void (*a1)(void))
{
  a1();
  sub_100211970();
}

void sub_1002CF390()
{
  sub_1002CF358(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1002CF3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005E0D00();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1005E0D20();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1005E0E30();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_1005E0E20();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OSLogPrivacy._MailMask.mailbox(_:), v4);
  sub_1005E0CE0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1005E0DB0();
  sub_1002CDA8C((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for OSLogPrivacy);
  sub_1002CDA8C((uint64_t)v13, (uint64_t (*)(void))&type metadata accessor for OSLogStringAlignment);
  return swift_release();
}

uint64_t sub_1002CF5F0(uint64_t (*a1)(void))
{
  if (a1()) {
    return sub_1005E1CC0();
  }
  else {
    return 8425698;
  }
}

uint64_t sub_1002CF64C()
{
  return sub_1002CF5F0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t EngineMailboxLoggerID.counter.getter(unsigned int a1)
{
  return HIWORD(a1);
}

NIOIMAPCore2::EngineMailboxLoggerID __swiftcall EngineMailboxLoggerID.init(engine:counter:mailbox:)(Swift::UInt8 engine, NIOIMAPCore2::MailboxLoggingCounter counter, NIOIMAPCore2::MailboxName mailbox)
{
  uint64_t v3 = engine | (*(_DWORD *)&counter << 16);
  uint64_t rawValue = mailbox.bytes._rawValue;
  Swift::UInt32 value = mailbox._hashValue._value;
  result.mailbox.bytes._uint64_t rawValue = rawValue;
  result.engine = v3;
  result.counter = *(NIOIMAPCore2::MailboxLoggingCounter *)((char *)&v3 + 2);
  *(_DWORD *)result.gap4 = HIDWORD(v3);
  result.mailbox._hashValue._Swift::UInt32 value = value;
  return result;
}

uint64_t sub_1002CFCB0(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002CFCE8()
{
  return sub_1002CFCB0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002CFCF0()
{
  return sub_1005E0CD0();
}

uint64_t sub_1002CFD08(uint64_t (*a1)(void))
{
  unsigned int v1 = a1();
  swift_bridgeObjectRelease();
  return HIWORD(v1);
}

uint64_t sub_1002CFD40()
{
  return sub_1002CFD08(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002D0474(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002D04AC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002D04D4()
{
  (*(void (**)(void))(v0 + 16))();
  return v1;
}

uint64_t sub_1002D0504()
{
  return sub_1002D0474(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002D050C()
{
  (*(void (**)(void))(v0 + 16))();
  return v1;
}

uint64_t RemoteMailbox.Attributes.rawValue.setter(uint64_t result)
{
  _WORD *v1 = result;
  return result;
}

void MailboxLoggingCounter.hash(into:)(uint64_t a1, Swift::UInt16 a2)
{
}

BOOL static MailboxLoggingCounter.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

Swift::Int MailboxLoggingCounter.hashValue.getter(Swift::UInt16 a1)
{
  return sub_1005E3470();
}

Swift::Int sub_1002D05C4()
{
  return MailboxLoggingCounter.hashValue.getter(*v0);
}

void sub_1002D05CC(uint64_t a1)
{
  MailboxLoggingCounter.hash(into:)(a1, *v1);
}

unint64_t sub_1002D05D8()
{
  unint64_t result = qword_1007120E0;
  if (!qword_1007120E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120E0);
  }
  return result;
}

BOOL sub_1002D0624(__int16 *a1, __int16 *a2)
{
  return static MailboxLoggingCounter.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_1002D0634(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  sub_1002D09D0(a1, a2);
  return a1;
}

uint64_t assignWithCopy for EngineMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for EngineMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for EngineMailboxLoggerID()
{
}

_WORD *sub_1002D0734(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  sub_1002D09D0((uint64_t)a1, (uint64_t)a2);
  return a1;
}

uint64_t assignWithCopy for MailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for MailboxLoggerID()
{
}

void type metadata accessor for MailboxLoggingCounter()
{
}

unint64_t sub_1002D081C()
{
  unint64_t result = qword_1007120F0;
  if (!qword_1007120F0)
  {
    sub_10000744C(&qword_1007120E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007120F0);
  }
  return result;
}

uint64_t sub_1002D0870(uint64_t a1)
{
  return sub_1002CD8CC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002D0878(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_10070FD90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1002D08D8(unint64_t *a1, uint64_t a2)
{
}

void sub_1002D0908(uint64_t a1, unint64_t *a2)
{
}

void sub_1002D0938(uint64_t a1)
{
  sub_1002D0908(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1002D09D0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 16);
  return swift_bridgeObjectRetain();
}

void sub_1002D09F0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  LODWORD(v4) = a2;
  unint64_t v6 = HIDWORD(a2);
  int v7 = HIDWORD(a2) - a2;
  sub_1005E1D10((HIDWORD(a2) - a2));
  if (!v7) {
    return;
  }
  uint64_t v8 = v4;
  uint64_t v63 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  swift_retain();
  uint64_t v62 = (void *)(a1 + 24);
  swift_beginAccess();
  int v59 = v6;
  while (1)
  {
    BOOL v9 = __CFADD__(v4, 1);
    uint64_t v4 = (v4 + 1);
    if (v9) {
      goto LABEL_81;
    }
    uint64_t v10 = *v62 + v63;
    unsigned int v11 = *(unsigned __int8 *)(v10 + v8);
    if (v11 != 38)
    {
      unsigned int v13 = ((v11 >> 6) & 0xFFFFC0FF | ((v11 & 0x3F) << 8)) + 33217;
      if ((v11 & 0x80) == 0) {
        unsigned int v13 = v11 + 1;
      }
      uint64_t v64 = (v13 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v13) >> 3)) & 7)));
      v65._uint64_t countAndFlagsBits = sub_1005E1D80();
      sub_1005E1E20(v65);
      goto LABEL_57;
    }
    if (v4 == v6) {
      break;
    }
    if (*(unsigned char *)(v10 + v4) != 45)
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v14 = (v4 + 1);
        if (v4 == -1) {
          break;
        }
        int v15 = *(unsigned __int8 *)(*v62 + v63 + v4);
        if (v15 == 44)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002D1D2C();
            uint64_t v12 = v20;
          }
          unint64_t v16 = v12[2];
          unint64_t v17 = v16 + 1;
          if (v16 >= v12[3] >> 1)
          {
            sub_1002D1D2C();
            uint64_t v12 = v21;
          }
          LOBYTE(v15) = 47;
        }
        else
        {
          if (v15 == 45)
          {
            LODWORD(v4) = v14;
            goto LABEL_30;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002D1D2C();
            uint64_t v12 = v19;
          }
          unint64_t v16 = v12[2];
          unint64_t v17 = v16 + 1;
          if (v16 >= v12[3] >> 1)
          {
            sub_1002D1D2C();
            uint64_t v12 = v18;
          }
        }
        _OWORD v12[2] = v17;
        *((unsigned char *)v12 + v16 + 32) = v15;
        uint64_t v4 = v14;
        if (v14 == v6)
        {
          LODWORD(v4) = v6;
          goto LABEL_30;
        }
      }
      __break(1u);
      goto LABEL_79;
    }
    BOOL v9 = __CFADD__(v4, 1);
    LODWORD(v4) = v4 + 1;
    if (v9) {
      goto LABEL_84;
    }
    if (v4 > v6) {
      goto LABEL_85;
    }
    v66._uint64_t countAndFlagsBits = 38;
    v66._uint64_t object = (void *)0xE100000000000000;
    sub_1005E1E30(v66);
LABEL_58:
    uint64_t v8 = v4;
    if (v4 == v6)
    {
      swift_release();
      return;
    }
  }
  LODWORD(v4) = v6;
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_30:
  unint64_t v22 = v12[2];
  if ((v22 & 3) == 0)
  {
    if (v22) {
      goto LABEL_39;
    }
    BOOL v34 = _swiftEmptyArrayStorage;
LABEL_52:
    swift_bridgeObjectRelease();
    unint64_t v35 = v34[2];
    if (v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1002D1C40();
      swift_allocError();
      *uint64_t v51 = v35;
      swift_willThrow();
      swift_release();
      return;
    }
    if (v35 > 1)
    {
      uint64_t v41 = 32;
      uint64_t v36 = _swiftEmptyArrayStorage;
      unint64_t v42 = v34[2];
      uint64_t v61 = v34;
      while (v41 - 31 < v42)
      {
        uint64_t v43 = (char *)v34 + v41;
        __int16 v44 = *((unsigned __int8 *)v34 + v41);
        __int16 v45 = v43[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10023278C();
          uint64_t v36 = v48;
        }
        unint64_t v46 = v36[2];
        if (v46 >= v36[3] >> 1)
        {
          sub_10023278C();
          uint64_t v36 = v49;
        }
        uint64_t v36[2] = v46 + 1;
        *((_WORD *)v36 + v46 + 16) = v45 | (v44 << 8);
        if (v41 - 30 == v35)
        {
          LODWORD(v6) = v59;
          goto LABEL_55;
        }
        LODWORD(v6) = v59;
        BOOL v34 = v61;
        unint64_t v42 = v61[2];
        if (v41 - 30 >= v42) {
          goto LABEL_80;
        }
        uint64_t v47 = v41 - 29;
        v41 += 2;
        if (v47 == v35) {
          goto LABEL_55;
        }
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    uint64_t v36 = _swiftEmptyArrayStorage;
LABEL_55:
    swift_bridgeObjectRelease();
    uint64_t v64 = (uint64_t)v36;
    sub_10000566C(&qword_100712108);
    sub_1002D1C8C();
    sub_1002D1CE0();
    uint64_t v37 = sub_1005E1CF0();
    if (!v38) {
      goto LABEL_87;
    }
    uint64_t v39 = v37;
    uint64_t v40 = v38;
    swift_bridgeObjectRelease();
    v67._uint64_t countAndFlagsBits = v39;
    v67._uint64_t object = v40;
    sub_1005E1E30(v67);
LABEL_57:
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1002D1D2C();
    uint64_t v12 = v50;
  }
  unint64_t v23 = v12[2];
  do
  {
    unint64_t v22 = v23 + 1;
    if (v23 >= v12[3] >> 1)
    {
      sub_1002D1D2C();
      uint64_t v12 = v24;
    }
    _OWORD v12[2] = v22;
    *((unsigned char *)v12 + v23++ + 32) = 61;
  }
  while ((v22 & 3) != 0);
LABEL_39:
  if (__OFADD__(v22, 3)) {
    goto LABEL_82;
  }
  uint64_t v25 = 3 * ((v22 + 3) >> 2);
  uint64_t v26 = sub_1005E2150();
  *(void *)(v26 + 16) = v25;
  uint64_t v64 = 0;
  if ((v22 & 3) != 0)
  {
    sub_1001E8434();
    swift_allocError();
    *uint64_t v52 = 256;
    swift_willThrow();
    goto LABEL_76;
  }
  if (qword_10070FAD0 != -1) {
    swift_once();
  }
  uint64_t v27 = static Base64.decoding0;
  uint64_t v28 = qword_10070FAD8;
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v29 = static Base64.decoding1;
  uint64_t v30 = qword_10070FAE0;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = static Base64.decoding2;
  uint64_t v32 = qword_10070FAE8;
  swift_bridgeObjectRetain();
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v60 = (void *)v26;
  uint64_t v57 = v26 + 32;
  uint64_t v33 = *(void *)(v27 + 16);
  uint64_t v56 = *(void *)(v29 + 16);
  uint64_t v55 = *(void *)(v31 + 16);
  uint64_t v53 = *(void *)(static Base64.decoding3 + 16);
  uint64_t v54 = static Base64.decoding3 + 32;
  swift_bridgeObjectRetain();
  sub_1001E75B8(v27 + 32, v33, v29 + 32, v56, v31 + 32, v55, v54, v53, (v22 >> 2) - 1, (uint64_t)(v12 + 4), v22, v57, v25, &v64);
  if (!v58)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25 < v64) {
      goto LABEL_83;
    }
    LODWORD(v6) = v59;
    BOOL v34 = v60;
    v60[2] = v64;
    goto LABEL_52;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = (uint64_t)v60;
LABEL_76:
  if (v25 >= v64)
  {
    *(void *)(v26 + 16) = v64;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
}

uint64_t sub_1002D1188(int64_t a1, unint64_t a2)
{
  if (qword_10070FB10 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    int v4 = dword_100761860;
    int v5 = (unsigned __int16)word_100761864;
    int v6 = byte_100761866;
    uint64_t v82 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
    uint64_t v83 = qword_100761858;
    int v84 = dword_100761860;
    __int16 v85 = word_100761864;
    char v86 = byte_100761866;
    if ((a2 & 0x1000000000000000) != 0)
    {
      Swift::Int v7 = sub_1005E1E80();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      Swift::Int v7 = HIBYTE(a2) & 0xF;
    }
    else
    {
      Swift::Int v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v7 <= v4 - (v6 | (v5 << 8)))
    {
      swift_retain();
    }
    else
    {
      swift_retain();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        ByteBuffer._ensureAvailableCapacity(_:at:)(v7, 0);
      }
      else
      {
        char v8 = static ByteBuffer.CopyBytesError.negativeLength.getter();
        ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v7, v8 & 1);
      }
    }
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(a2) & 0xF;
    }
    if (!v9) {
      return v82;
    }
    uint64_t v10 = 0;
    uint64_t v77 = (void *)a2;
    unint64_t v78 = 4 * v9;
    unint64_t v11 = 15;
    uint64_t v76 = (void *)a1;
    while (1)
    {
      uint64_t v12 = sub_1005E1F30();
      if (v12 == 2573 && v13 == 0xE200000000000000) {
        goto LABEL_31;
      }
      unint64_t v15 = v12;
      unint64_t v16 = v13;
      if ((sub_1005E3290() & 1) != 0 || (sub_1005E1A00() & 1) == 0) {
        goto LABEL_31;
      }
      unint64_t v17 = sub_1002D1934(v15, v16);
      if ((v17 & 0x100000000) != 0)
      {
        __break(1u);
LABEL_110:
        __break(1u);
      }
      if ((v17 & 0xFFFFFF80) != 0)
      {
LABEL_31:
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v18 = sub_1002D1934(v15, v16);
        if ((v18 & 0x100000000) != 0) {
          goto LABEL_110;
        }
        int v19 = v18;
        uint64_t v20 = swift_bridgeObjectRelease();
        if ((v19 & 0xFFFFFF00) != 0) {
          goto LABEL_104;
        }
        if (v19 - 32 <= 0x5E)
        {
          LOBYTE(v87[0]) = v19;
          sub_1002D1D44(v20, v21, HIDWORD(v83));
          Swift::UInt32 v24 = HIDWORD(v83) + v22;
          if (__CFADD__(HIDWORD(v83), v22)) {
            goto LABEL_105;
          }
          HIDWORD(v83) += v22;
          if (v19 == 38)
          {
            LOBYTE(v87[0]) = 45;
            sub_1002D1D44(v22, v23, v24);
            if (__CFADD__(HIDWORD(v83), v25)) {
              goto LABEL_106;
            }
            HIDWORD(v83) += v25;
          }
          unint64_t v11 = sub_1005E1DD0();
          goto LABEL_97;
        }
      }
      uint64_t v75 = v10;
      uint64_t v26 = _swiftEmptyArrayStorage;
      if (v78 > v11 >> 14)
      {
        while (1)
        {
          uint64_t v27 = sub_1005E1F30();
          unint64_t v29 = v28;
          uint64_t v81 = v27;
          __int16 v30 = sub_1005E19E0();
          if ((v30 & 0x100) == 0 && v30 - 127 >= 0xFFFFFFA1) {
            break;
          }
          uint64_t v31 = v81 & 0xFFFFFFFFFFFFLL;
          if ((v29 & 0x2000000000000000) != 0) {
            uint64_t v31 = HIBYTE(v29) & 0xF;
          }
          uint64_t v80 = v31;
          if (v31)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            if ((v29 & 0x1000000000000000) == 0)
            {
              if ((v29 & 0x2000000000000000) != 0) {
                goto LABEL_40;
              }
LABEL_45:
              if ((v81 & 0x1000000000000000) == 0) {
                sub_1005E2D30();
              }
              goto LABEL_47;
            }
            while (1)
            {
              unsigned int v35 = sub_1005E2C70();
LABEL_48:
              char v37 = v35;
              v34 += v36;
              BOOL v38 = v35 < 0x10000;
              if (v35 >= 0x10000)
              {
                uint64_t v32 = sub_1005E3550();
                __int16 v49 = sub_1005E3550();
                char v37 = v49;
                LOBYTE(v39) = HIBYTE(v49);
                uint64_t v33 = BYTE1(v32);
              }
              else
              {
                unsigned int v39 = v35 >> 8;
              }
              uint64_t v40 = v32;
              uint64_t v41 = v33;
              do
              {
                BOOL v42 = v38;
                uint64_t v33 = v41;
                uint64_t v32 = v40;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1002325F4();
                  uint64_t v26 = v46;
                }
                unint64_t v43 = v26[2];
                unint64_t v44 = v26[3] >> 1;
                unint64_t v45 = v43 + 1;
                if (v44 <= v43)
                {
                  sub_1002325F4();
                  uint64_t v26 = v47;
                  unint64_t v44 = v47[3] >> 1;
                }
                void v26[2] = v45;
                *((unsigned char *)v26 + v43 + 32) = v39;
                if ((uint64_t)v44 < (uint64_t)(v43 + 2))
                {
                  sub_1002325F4();
                  uint64_t v26 = v48;
                }
                uint64_t v40 = 0;
                uint64_t v41 = 0;
                void v26[2] = v43 + 2;
                *((unsigned char *)v26 + v45 + 32) = v37;
                BOOL v38 = 1;
                char v37 = v32;
                LOBYTE(v39) = v33;
              }
              while (!v42);
              if (v34 >= v80) {
                break;
              }
              if ((v29 & 0x1000000000000000) == 0)
              {
                if ((v29 & 0x2000000000000000) == 0) {
                  goto LABEL_45;
                }
LABEL_40:
                v87[0] = v81;
                v87[1] = v29 & 0xFFFFFFFFFFFFFFLL;
LABEL_47:
                unsigned int v35 = sub_1005E2D40();
                goto LABEL_48;
              }
            }
            a1 = (int64_t)v76;
            a2 = (unint64_t)v77;
          }
          swift_bridgeObjectRelease();
          unint64_t v11 = sub_1005E1DD0();
          if (v78 <= v11 >> 14) {
            goto LABEL_64;
          }
        }
        swift_bridgeObjectRelease();
      }
LABEL_64:
      uint64_t v50 = v26[2];
      if (__OFADD__(v50, 2)) {
        break;
      }
      unint64_t v51 = (v50 + 2) / 3uLL;
      if ((v51 - 0x2000000000000000) >> 62 != 3) {
        goto LABEL_100;
      }
      unint64_t v79 = v11;
      uint64_t v52 = 4 * v51;
      swift_bridgeObjectRetain();
      uint64_t v10 = v75;
      sub_1001E6870((uint64_t)(v26 + 4), v50, v52, 0, v87);
      uint64_t v53 = v87[0];
      if (v87[0])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v54 = swift_bridgeObjectRetain();
        sub_1001E6550(v54);
        uint64_t v53 = v55;
        swift_bridgeObjectRelease_n();
      }
      a2 = *(void *)(v53 + 16);
      if (a2)
      {
        v87[0] = _swiftEmptyArrayStorage;
        sub_100212BD0();
        a1 = 0;
        uint64_t v56 = (void *)v87[0];
        uint64_t v57 = *(void *)(v87[0] + 16);
        do
        {
          unint64_t v58 = v57 + a1;
          if (*(unsigned char *)(v53 + a1 + 32) == 47) {
            char v59 = 44;
          }
          else {
            char v59 = *(unsigned char *)(v53 + a1 + 32);
          }
          v87[0] = v56;
          unint64_t v60 = v58 + 1;
          if (v58 >= v56[3] >> 1)
          {
            sub_1002D1D60();
            uint64_t v56 = (void *)v87[0];
          }
          v56[2] = v60;
          *((unsigned char *)v56 + v57 + a1++ + 32) = v59;
        }
        while (a2 != a1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v56 = _swiftEmptyArrayStorage;
      }
      uint64_t v61 = v56[2];
      if (v61)
      {
        a2 = (unint64_t)(v56 + 4);
        uint64_t v62 = _swiftEmptyArrayStorage;
        do
        {
          unsigned int v63 = *(unsigned __int8 *)a2++;
          a1 = v63;
          if (v63 != 61)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v87[0] = v62;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100212BD0();
              uint64_t v62 = (void *)v87[0];
            }
            unint64_t v65 = v62[2];
            if (v65 >= v62[3] >> 1)
            {
              sub_1002D1D60();
              uint64_t v62 = (void *)v87[0];
            }
            v62[2] = v65 + 1;
            *((unsigned char *)v62 + v65 + 32) = a1;
          }
          --v61;
        }
        while (v61);
      }
      else
      {
        uint64_t v62 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v87[0]) = 38;
      ByteBuffer._setBytes(_:at:)((uint64_t)v87, (uint64_t)v87 + 1, HIDWORD(v83));
      uint64_t v67 = (HIDWORD(v83) + v66);
      if (__CFADD__(HIDWORD(v83), v66)) {
        goto LABEL_101;
      }
      HIDWORD(v83) += v66;
      uint64_t v68 = sub_100201A34((uint64_t)v62, (uint64_t)&v82, v67);
      if ((v68 & 0x100000000) != 0) {
        int v69 = sub_1001F81B4(v62, v67);
      }
      else {
        int v69 = v68;
      }
      uint64_t v70 = swift_release();
      a1 = (int64_t)v76;
      a2 = (unint64_t)v77;
      unint64_t v11 = v79;
      Swift::UInt32 v72 = HIDWORD(v83) + v69;
      if (__CFADD__(HIDWORD(v83), v69)) {
        goto LABEL_102;
      }
      HIDWORD(v83) += v69;
      LOBYTE(v87[0]) = 45;
      sub_1002D1D44(v70, v71, v72);
      if (__CFADD__(HIDWORD(v83), v73)) {
        goto LABEL_103;
      }
      HIDWORD(v83) += v73;
LABEL_97:
      if (v78 <= v11 >> 14) {
        return v82;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }
}

void type metadata accessor for ModifiedUTF7()
{
}

void type metadata accessor for ModifiedUTF7.OddByteCountError()
{
}

void type metadata accessor for ModifiedUTF7.EncodingRoundtripError()
{
}

unint64_t sub_1002D1934(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_1002D1A14(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = sub_1005E2C70();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        sub_1005E2D30();
      }
      unsigned int v5 = sub_1005E2D40();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_1002D1A14(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_1002D1AB4(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_1002D1B24(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_1002D1AB4(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_100272294(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002D1B24(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      _OWORD v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v8 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v12 = result >> 16;
          uint64_t v6 = sub_1005E2D30();
          unint64_t v5 = v12;
        }
        if (v5 != v7 && (*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v8 = v5 - 1;
            int v9 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
          }
          while (v9 == 128);
          return v8 << 16;
        }
      }
      unint64_t v8 = v5;
      return v8 << 16;
    }
    uint64_t v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v10)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

unint64_t sub_1002D1C40()
{
  unint64_t result = qword_100712100;
  if (!qword_100712100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712100);
  }
  return result;
}

unint64_t sub_1002D1C8C()
{
  unint64_t result = qword_100712110;
  if (!qword_100712110)
  {
    sub_10000744C(&qword_100712108);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712110);
  }
  return result;
}

unint64_t sub_1002D1CE0()
{
  unint64_t result = qword_100712118;
  if (!qword_100712118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712118);
  }
  return result;
}

void sub_1002D1D2C()
{
  sub_1002325F4();
}

void sub_1002D1D44(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  ByteBuffer._setBytes(_:at:)(v4 - 104, v3, a3);
}

void sub_1002D1D60()
{
  sub_100212BD0();
}

uint64_t String.init(buffer:)()
{
  swift_beginAccess();
  uint64_t v0 = sub_1005E1D70();
  swift_release();
  return v0;
}

uint64_t ByteToMessageDecoder.wrapInboundOut<A>(_:)(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Response(0);
  return swift_dynamicCast();
}

uint64_t ChannelHandlerContext.responses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ChannelHandlerContext.responses.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ChannelHandlerContext.responses.modify())()
{
  return j__swift_endAccess_0;
}

uint64_t ChannelHandlerContext.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t ChannelHandlerContext.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t ChannelHandlerContext.fireChannelRead(_:)(uint64_t a1)
{
  swift_beginAccess();
  sub_1002D21AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10023292C);
  uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 16);
  sub_1002D2444(v3, (uint64_t (*)(BOOL))sub_10023292C);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v4 + 16) = v3 + 1;
  uint64_t v5 = *(void *)(type metadata accessor for Response(0) - 8);
  return sub_1002D2238(a1, v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v3);
}

uint64_t ChannelHandlerContext.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ChannelHandlerContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1002D214C()
{
  return sub_1002D21AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1002326BC);
}

uint64_t sub_1002D2164()
{
  return sub_1002D21AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100232850);
}

uint64_t sub_1002D217C()
{
  return sub_1002D21AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100232960);
}

uint64_t sub_1002D2194()
{
  return sub_1002D21AC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100232974);
}

uint64_t sub_1002D21AC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_1002D2208(uint64_t a1)
{
  return sub_1002D2444(a1, (uint64_t (*)(BOOL))sub_1002326BC);
}

uint64_t sub_1002D2220(uint64_t a1)
{
  return sub_1002D2444(a1, (uint64_t (*)(BOOL))sub_100232850);
}

uint64_t sub_1002D2238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002D22A0()
{
  unint64_t result = qword_100712120;
  if (!qword_100712120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712120);
  }
  return result;
}

uint64_t type metadata accessor for ChannelHandlerContext()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DecodingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D23DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DecodingState()
{
  return &type metadata for DecodingState;
}

uint64_t sub_1002D2414(uint64_t a1)
{
  return sub_1002D2444(a1, (uint64_t (*)(BOOL))sub_100232960);
}

uint64_t sub_1002D242C(uint64_t a1)
{
  return sub_1002D2444(a1, (uint64_t (*)(BOOL))sub_100232974);
}

uint64_t sub_1002D2444(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    unint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ByteToMessageDecoderError.PayloadTooLargeError()
{
  return &type metadata for ByteToMessageDecoderError.PayloadTooLargeError;
}

uint64_t SynchronizedCommand.commandPart.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SynchronizedCommand() + 20);
  return sub_1002D2528(v3, a1);
}

uint64_t type metadata accessor for SynchronizedCommand()
{
  uint64_t result = qword_100712230;
  if (!qword_100712230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002D2528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710AE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SynchronizedCommand.commandPart.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SynchronizedCommand() + 20);
  return sub_1002D25D4(a1, v3);
}

uint64_t sub_1002D25D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100710AE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::UInt32 (__swiftcall *SynchronizedCommand.commandPart.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t SynchronizedCommand.init(_:numberOfSynchronisingLiterals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (uint64_t)a3 + *(int *)(type metadata accessor for SynchronizedCommand() + 20);
  uint64_t v7 = type metadata accessor for CommandStreamPart();
  storeEnumTagSinglePayload for ClientCommand(v6, 1, 1, v7);
  uint64_t result = sub_1002D25D4(a1, v6);
  *a3 = a2;
  return result;
}

void SynchronizedCommand.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for CommandStreamPart();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  sub_1002677E8();
  uint64_t v8 = sub_10000566C(&qword_100710AE8);
  __chkstk_darwin(v8 - 8);
  sub_100224490();
  sub_1005E3410(*v4);
  uint64_t v9 = type metadata accessor for SynchronizedCommand();
  sub_1002D2528((uint64_t)v4 + *(int *)(v9 + 20), v3);
  if (getEnumTagSinglePayload for ClientCommand(v3, 1, v6) == 1)
  {
    sub_1005E3420(0);
  }
  else
  {
    sub_1002DB3B0(v3, v1, (void (*)(void))type metadata accessor for CommandStreamPart);
    sub_1005E3420(1u);
    CommandStreamPart.hash(into:)(a1);
    sub_1002DB358(v1, (void (*)(void))type metadata accessor for CommandStreamPart);
  }
}

BOOL static SynchronizedCommand.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  type metadata accessor for CommandStreamPart();
  sub_1001F3BBC();
  __chkstk_darwin(v6);
  sub_100224490();
  uint64_t v7 = sub_10000566C(&qword_1007121C8);
  sub_1001F3BBC();
  __chkstk_darwin(v8);
  sub_1002677E8();
  uint64_t v9 = sub_10000566C(&qword_100710AE8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v23 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v23 - v16;
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v18 = type metadata accessor for SynchronizedCommand();
  sub_1002D2528((uint64_t)a1 + *(int *)(v18 + 20), (uint64_t)v17);
  sub_1002D2528((uint64_t)a2 + *(int *)(v18 + 20), (uint64_t)v15);
  uint64_t v19 = v2 + *(int *)(v7 + 48);
  sub_1002D2528((uint64_t)v17, v2);
  sub_1002D2528((uint64_t)v15, v19);
  sub_100279E80(v2);
  if (v20)
  {
    sub_1001F3A28((uint64_t)v15, &qword_100710AE8);
    sub_1001F3A28((uint64_t)v17, &qword_100710AE8);
    sub_100279E80(v19);
    if (v20)
    {
      sub_1001F3A28(v2, &qword_100710AE8);
      return 1;
    }
    goto LABEL_10;
  }
  sub_1002D2528(v2, (uint64_t)v12);
  sub_100279E80(v19);
  if (v20)
  {
    sub_1001F3A28((uint64_t)v15, &qword_100710AE8);
    sub_1001F3A28((uint64_t)v17, &qword_100710AE8);
    sub_1002DB358((uint64_t)v12, (void (*)(void))type metadata accessor for CommandStreamPart);
LABEL_10:
    sub_1001F3A28(v2, &qword_1007121C8);
    return 0;
  }
  sub_1002DB3B0(v19, v3, (void (*)(void))type metadata accessor for CommandStreamPart);
  BOOL v21 = static CommandStreamPart.__derived_enum_equals(_:_:)((uint64_t)v12, v3);
  sub_1002DB358(v3, (void (*)(void))type metadata accessor for CommandStreamPart);
  sub_1001F3A28((uint64_t)v15, &qword_100710AE8);
  sub_1001F3A28((uint64_t)v17, &qword_100710AE8);
  sub_1002DB358((uint64_t)v12, (void (*)(void))type metadata accessor for CommandStreamPart);
  sub_1001F3A28(v2, &qword_100710AE8);
  return v21;
}

Swift::Int SynchronizedCommand.hashValue.getter()
{
  sub_1005E33F0();
  SynchronizedCommand.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

Swift::Int sub_1002D2B54()
{
  sub_1005E33F0();
  SynchronizedCommand.hash(into:)((uint64_t)v1);
  return sub_1005E3470();
}

void sub_1002D2B94(uint64_t a1, Swift::UInt a2, char a3)
{
  switch(a3)
  {
    case 1:
      sub_1005E3410(5uLL);
      sub_1005E3420(a2 & 1);
      return;
    case 2:
      Swift::UInt v4 = 6;
      goto LABEL_5;
    case 3:
      switch(a2)
      {
        case 1uLL:
          Swift::UInt v5 = 1;
          break;
        case 2uLL:
          Swift::UInt v5 = 2;
          break;
        case 3uLL:
          Swift::UInt v5 = 4;
          break;
        case 4uLL:
          Swift::UInt v5 = 7;
          break;
        default:
          Swift::UInt v5 = 0;
          break;
      }
      goto LABEL_6;
    default:
      Swift::UInt v4 = 3;
LABEL_5:
      sub_1005E3410(v4);
      Swift::UInt v5 = a2;
LABEL_6:
      sub_1005E3410(v5);
      return;
  }
}

uint64_t sub_1002D2C78(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 != 1) {
        goto LABEL_29;
      }
      char v4 = ((a1 & 1) == 0) ^ a3;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_29;
      }
      goto LABEL_7;
    case 3:
      switch(a1)
      {
        case 1:
          if (a4 != 3 || a3 != 1) {
            goto LABEL_29;
          }
          break;
        case 2:
          if (a4 != 3 || a3 != 2) {
            goto LABEL_29;
          }
          break;
        case 3:
          if (a4 != 3 || a3 != 3) {
            goto LABEL_29;
          }
          break;
        case 4:
          if (a4 != 3 || a3 != 4) {
            goto LABEL_29;
          }
          break;
        default:
          if (a4 != 3 || a3 != 0) {
            goto LABEL_29;
          }
          break;
      }
      char v4 = 1;
      break;
    default:
      if (a4) {
LABEL_29:
      }
        char v4 = 0;
      else {
LABEL_7:
      }
        char v4 = a1 == a3;
      break;
  }
  return v4 & 1;
}

Swift::Int sub_1002D2D94(Swift::UInt a1, char a2)
{
  sub_1005E33F0();
  sub_1002D2B94((uint64_t)v5, a1, a2);
  return sub_1005E3470();
}

Swift::Int sub_1002D2DE4()
{
  return sub_1002D2D94(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_1002D2DF0(uint64_t a1)
{
  sub_1002D2B94(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1002D2DFC()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  sub_1005E33F0();
  sub_1002D2B94((uint64_t)v4, v1, v2);
  return sub_1005E3470();
}

uint64_t sub_1002D2E48(uint64_t a1, uint64_t a2)
{
  return sub_1002D2C78(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t CommandParser.init(bufferLimit:literalSizeLimit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = ListID.description.getter;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a2;
  *(void *)(a3 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a3 + 32) = result;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 48) = 3;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 80) = 1;
  return result;
}

void CommandParser.parseCommandStream(buffer:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for SynchronizedCommand();
  sub_1001F3BBC();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000566C(&qword_100710AE8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v57 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v46 - v13;
  type metadata accessor for CommandStreamPart();
  sub_1001F3BBC();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(unsigned int *)(a1 + 8);
  uint64_t v19 = *(unsigned int *)(a1 + 12);
  if (v19 == v20)
  {
    uint64_t v21 = a2;
    uint64_t v22 = 1;
    uint64_t v23 = v6;
LABEL_3:
    storeEnumTagSinglePayload for ClientCommand(v21, v22, 1, v23);
    return;
  }
  uint64_t v48 = v18;
  __int16 v49 = (uint64_t *)v9;
  uint64_t v51 = v6;
  uint64_t v52 = v16;
  uint64_t v50 = a2;
  uint64_t v24 = v2;
  unint64_t v25 = v20 | (v19 << 32);
  unint64_t v26 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48);
  uint64_t v27 = swift_retain();
  SynchronizingLiteralParser.parseContinuationsNecessary(_:)(v27, v25, v26);
  if (v3)
  {
    swift_release();
    return;
  }
  uint64_t v30 = v28;
  uint64_t v46 = v24;
  uint64_t v47 = v29;
  ByteBuffer.getSlice(at:length:)(v20, v28);
  if (v31)
  {
    v53[0] = v31;
    v53[1] = v32;
    int v54 = v33;
    __int16 v55 = WORD2(v33);
    char v56 = BYTE6(v33);
    sub_1002D32B0(v46, (uint64_t)v53, v30, a1, (uint64_t)v14);
    uint64_t v34 = v52;
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v52) == 1)
    {
      sub_1001F3A28((uint64_t)v14, &qword_100710AE8);
      uint64_t v36 = v50;
      uint64_t v35 = v51;
      char v37 = v49;
      if (v47 < 1)
      {
        swift_release();
        swift_release();
        uint64_t v21 = v36;
        uint64_t v22 = 1;
        goto LABEL_12;
      }
      uint64_t v38 = v57;
      uint64_t v39 = v47;
      sub_1002DB46C(v57);
      uint64_t v40 = (uint64_t)v37 + *(int *)(v35 + 20);
      sub_1002DB46C(v40);
      sub_1002D25D4(v38, v40);
      *char v37 = v39;
      sub_1002DB3B0((uint64_t)v37, v36, (void (*)(void))type metadata accessor for SynchronizedCommand);
      swift_release();
      swift_release();
      uint64_t v21 = v36;
    }
    else
    {
      uint64_t v41 = (uint64_t)v48;
      sub_1002DB3B0((uint64_t)v14, (uint64_t)v48, (void (*)(void))type metadata accessor for CommandStreamPart);
      uint64_t v42 = v57;
      sub_1002DB2F8(v41, v57, (void (*)(void))type metadata accessor for CommandStreamPart);
      storeEnumTagSinglePayload for ClientCommand(v42, 0, 1, v34);
      uint64_t v35 = v51;
      unint64_t v43 = v49;
      uint64_t v44 = (uint64_t)v49 + *(int *)(v51 + 20);
      sub_1002DB46C(v44);
      sub_1002D25D4(v42, v44);
      *unint64_t v43 = v47;
      uint64_t v45 = v50;
      sub_1002DB3B0((uint64_t)v43, v50, (void (*)(void))type metadata accessor for SynchronizedCommand);
      swift_release();
      sub_1002DB358(v41, (void (*)(void))type metadata accessor for CommandStreamPart);
      swift_release();
      uint64_t v21 = v45;
    }
    uint64_t v22 = 0;
LABEL_12:
    uint64_t v23 = v35;
    goto LABEL_3;
  }
  __break(1u);
}

uint64_t sub_1002D32B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v9 = sub_10000566C(&qword_100710AE8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int v14 = *(_DWORD *)(a2 + 16);
  __int16 v15 = *(_WORD *)(a2 + 20);
  char v16 = *(unsigned char *)(a2 + 22);
  swift_retain();
  sub_1002D354C(a2, 1, 100, a1, (uint64_t)v11);
  if (!v5)
  {
    uint64_t v19 = a1;
    uint64_t v20 = v34;
    swift_endAccess();
    swift_release();
    uint64_t v21 = type metadata accessor for CommandStreamPart();
    if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v21) == 1)
    {
      sub_1001F3A28((uint64_t)v11, &qword_100710AE8);
      uint64_t v22 = v35;
      uint64_t v23 = 1;
      return storeEnumTagSinglePayload for ClientCommand(v22, v23, 1, v21);
    }
    uint64_t v24 = v35;
    sub_1002DB3B0((uint64_t)v11, v35, (void (*)(void))type metadata accessor for CommandStreamPart);
    uint64_t result = swift_beginAccess();
    uint64_t v25 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 8));
    BOOL v31 = __OFSUB__(a3, v25);
    uint64_t v26 = a3 - v25;
    if (v31)
    {
      __break(1u);
    }
    else
    {
      int v27 = *(_DWORD *)(v20 + 8);
      BOOL v28 = __CFADD__(v27, v26);
      unsigned int v29 = v27 + v26;
      if (!v28)
      {
        if (*(_DWORD *)(v20 + 12) >= v29)
        {
          *(_DWORD *)(v20 + 8) = v29;
          uint64_t v30 = *(void *)(v19 + 56);
          BOOL v31 = __OFSUB__(v30, v26);
          uint64_t v32 = v30 - v26;
          if (v32 < 0 == v31)
          {
            if (!v31)
            {
              *(void *)(v19 + 56) = v32;
              uint64_t v22 = v24;
              uint64_t v23 = 0;
              return storeEnumTagSinglePayload for ClientCommand(v22, v23, 1, v21);
            }
LABEL_19:
            __break(1u);
            return result;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 16) = v14;
  *(_WORD *)(a2 + 20) = v15;
  *(unsigned char *)(a2 + 22) = v16;
  swift_willThrow();
  swift_endAccess();
  swift_release();
  uint64_t v36 = v5;
  swift_errorRetain();
  sub_10000566C(qword_100710378);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v17 = type metadata accessor for CommandStreamPart();
    storeEnumTagSinglePayload for ClientCommand(v35, 1, 1, v17);
  }
  return swift_errorRelease();
}

void sub_1002D354C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int64_t v7 = *(void *)(a4 + 40);
  switch(*(unsigned char *)(a4 + 48))
  {
    case 1:
      sub_1002D3B0C(a5);
      goto LABEL_5;
    case 2:
      sub_1002D3BF0(a1, a2, a3, v7, a5);
      goto LABEL_5;
    case 3:
      switch(v7)
      {
        case 1:
          sub_10031E1C0();
          if (v5) {
            return;
          }
          sub_10032964C();
          *(void *)(a4 + 40) = 0;
          *(unsigned char *)(a4 + 48) = 3;
          type metadata accessor for CommandStreamPart();
          break;
        case 2:
          sub_1002D3834(a1, a2, a3, a5);
          goto LABEL_5;
        case 3:
          *(void *)(a4 + 40) = 2;
          *(unsigned char *)(a4 + 48) = 3;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          *(_OWORD *)(a5 + 32) = 0u;
          *(void *)(a5 + 48) = 0;
          char v9 = -64;
          goto LABEL_14;
        case 4:
          *(void *)(a4 + 40) = 1;
          *(unsigned char *)(a4 + 48) = 1;
          *(void *)a5 = 0;
          *(void *)(a5 + 8) = 0;
          *(void *)(a5 + 16) = 0x200000000000000;
          *(_OWORD *)(a5 + 24) = 0u;
          *(_OWORD *)(a5 + 40) = 0u;
          char v9 = -96;
LABEL_14:
          *(unsigned char *)(a5 + 56) = v9;
          type metadata accessor for CommandStreamPart();
          break;
        default:
          sub_1002D3794(a1);
          goto LABEL_5;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_16;
    default:
      sub_1002D3A64(a1, a2, a3, v7, a5);
LABEL_5:
      if (!v5)
      {
LABEL_16:
        uint64_t v10 = type metadata accessor for CommandStreamPart();
        storeEnumTagSinglePayload for ClientCommand(a5, 0, 1, v10);
      }
      return;
  }
}

uint64_t sub_1002D3794(uint64_t a1)
{
  return sub_100308E74((uint64_t)sub_1002DB2A4, (uint64_t)v4, (uint64_t)sub_1002DB2C0, (uint64_t)v3, (uint64_t)sub_1002DB2DC, (uint64_t)v2, a1);
}

uint64_t sub_1002D3834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1002DB608(a1, a2, a3, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), (uint64_t)v18);
  if (v5)
  {
    swift_errorRetain();
    sub_10000566C(qword_100710378);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      sub_10032964C();
      swift_release();
      *(void *)(v4 + 40) = 0;
      *(unsigned char *)(v4 + 48) = 3;
      *(void *)a4 = 2;
      *(_OWORD *)(a4 + 8) = 0u;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(unsigned char *)(a4 + 56) = -64;
      type metadata accessor for CommandStreamPart();
      swift_storeEnumTagMultiPayload();
    }
    return swift_errorRelease();
  }
  else
  {
    sub_1002DB410((uint64_t)v18, (uint64_t)&v19);
    char v7 = v25;
    if (v25 < 0)
    {
      v25 &= ~0x80u;
      uint64_t v13 = v19;
      uint64_t v14 = v20;
      uint64_t v15 = v21;
      uint64_t v16 = v22;
      *(void *)(v4 + 40) = 0;
      *(unsigned char *)(v4 + 48) = 1;
      *(void *)a4 = v13;
      *(void *)(a4 + 8) = v14;
      *(void *)(a4 + 16) = v15;
      *(void *)(a4 + 24) = v16;
      *(_OWORD *)(a4 + 32) = v23;
      *(void *)(a4 + 48) = 0;
      *(unsigned char *)(a4 + 56) = 96;
    }
    else
    {
      uint64_t v8 = v19;
      uint64_t v9 = v20;
      uint64_t v10 = v21;
      uint64_t v11 = v22;
      uint64_t v12 = v24;
      *(void *)(v4 + 40) = v24;
      *(unsigned char *)(v4 + 48) = 0;
      *(void *)a4 = v8;
      *(void *)(a4 + 8) = v9;
      *(void *)(a4 + 16) = v10;
      *(void *)(a4 + 24) = v11;
      *(_OWORD *)(a4 + 32) = v23;
      *(void *)(a4 + 48) = v12;
      *(unsigned char *)(a4 + 56) = v7 & 1 | 0x20;
    }
    type metadata accessor for CommandStreamPart();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_1002D3A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1003295A8(a1, a2, a3, a4);
  if (!v6)
  {
    uint64_t v12 = (HIDWORD(v10) - v10);
    if (v12 == a4)
    {
      uint64_t v13 = 3;
      char v14 = 3;
    }
    else
    {
      BOOL v15 = __OFSUB__(a4, v12);
      uint64_t v13 = a4 - v12;
      if (v15)
      {
        __break(1u);
        return result;
      }
      char v14 = 0;
    }
    *(void *)(v5 + 40) = v13;
    *(unsigned char *)(v5 + 48) = v14;
    *(void *)a5 = result;
    *(void *)(a5 + 8) = v10;
    *(void *)(a5 + 16) = v11 & 0xFFFFFFFFFFFFFFLL;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(unsigned char *)(a5 + 56) = 64;
    type metadata accessor for CommandStreamPart();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

void sub_1002D3B0C(uint64_t a1@<X8>)
{
  sub_1002DB704();
  if (!v2)
  {
    if (HIBYTE(v6))
    {
      if (HIBYTE(v6) == 1)
      {
        *(void *)(v1 + 40) = v4;
        *(unsigned char *)(v1 + 48) = 2;
        *(void *)a1 = v4;
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        char v7 = -96;
      }
      else
      {
        *(void *)(v1 + 40) = 2;
        *(unsigned char *)(v1 + 48) = 3;
        *(void *)a1 = 1;
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        char v7 = -64;
      }
    }
    else
    {
      *(void *)(v1 + 40) = 1;
      *(unsigned char *)(v1 + 48) = 1;
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6 & 0xFFFFFFFFFFFFFFLL;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      char v7 = 0x80;
    }
    *(unsigned char *)(a1 + 56) = v7;
    type metadata accessor for CommandStreamPart();
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_1002D3BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1003295A8(a1, a2, a3, a4);
  if (!v6)
  {
    uint64_t v12 = (HIDWORD(v10) - v10);
    if (v12 == a4)
    {
      char v13 = 3;
      uint64_t v14 = 4;
    }
    else
    {
      BOOL v15 = __OFSUB__(a4, v12);
      uint64_t v14 = a4 - v12;
      if (v15)
      {
        __break(1u);
        return result;
      }
      char v13 = 2;
    }
    *(void *)(v5 + 40) = v14;
    *(unsigned char *)(v5 + 48) = v13;
    *(void *)a5 = result;
    *(void *)(a5 + 8) = v10;
    *(void *)(a5 + 16) = v11 & 0xFFFFFFFFFFFFFFLL | 0x100000000000000;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(unsigned char *)(a5 + 56) = -96;
    type metadata accessor for CommandStreamPart();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1002D3C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v27 = type metadata accessor for Command();
  __chkstk_darwin(v27);
  uint64_t v26 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaggedCommand();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(a4 + 24);
  swift_retain();
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v17 = v13;
  uint64_t v18 = v31;
  sub_1002E2028(a1, a2, a3, v17, v14, v15, v16);
  uint64_t result = swift_release();
  if (!v18)
  {
    uint64_t v20 = (uint64_t)v12;
    uint64_t v21 = v10;
    uint64_t v22 = (uint64_t)v26;
    uint64_t v23 = v28;
    sub_10032964C();
    sub_1002DB2F8(v20 + *(int *)(v21 + 20), v22, (void (*)(void))type metadata accessor for Command);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1002DB358(v22, (void (*)(void))type metadata accessor for Command);
    if (EnumCaseMultiPayload == 45)
    {
      *(void *)(a4 + 40) = 1;
      *(unsigned char *)(a4 + 48) = 3;
    }
    sub_1002DB3B0(v20, v23, (void (*)(void))type metadata accessor for TaggedCommand);
    type metadata accessor for CommandStreamPart();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1002D3EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void (**)())(a4 + 16);
  uint64_t v14 = *(void *)(a4 + 24);
  swift_retain();
  sub_1002DB488(a1, a2, a3, v11, v12, v13, v14, a5);
  uint64_t result = swift_release();
  if (!v5)
  {
    *(void *)(a4 + 40) = 2;
    *(unsigned char *)(a4 + 48) = 3;
  }
  return result;
}

uint64_t sub_1002D3F84@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  sub_100308E48();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_release();
  if (!v1)
  {
    sub_10032964C();
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 20) = WORD2(v8);
    *(unsigned char *)(a1 + 22) = BYTE6(v8);
    type metadata accessor for CommandStreamPart();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

unint64_t sub_1002D4084()
{
  unint64_t result = qword_1007121D0;
  if (!qword_1007121D0)
  {
    type metadata accessor for SynchronizedCommand();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007121D0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SynchronizedCommand(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v3;
  }
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (uint64_t *)((char *)a1 + v5);
  uint64_t v7 = (uint64_t *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for CommandStreamPart();
  if (!getEnumTagSinglePayload for ClientCommand((uint64_t)v7, 1, v8))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *uint64_t v6 = *v7;
      v6[1] = v7[1];
      *((_DWORD *)v6 + 4) = *((_DWORD *)v7 + 4);
      *(_DWORD *)((char *)v6 + 19) = *(_DWORD *)((char *)v7 + 19);
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = *v7;
      uint64_t v18 = v7[1];
      uint64_t v19 = v7[2];
      uint64_t v20 = v7[3];
      __int16 v115 = v3;
      uint64_t v21 = v8;
      uint64_t v22 = v7[4];
      uint64_t v23 = v7[5];
      uint64_t v24 = v7[6];
      unsigned __int8 v25 = *((unsigned char *)v7 + 56);
      sub_100258158(v17, v18, v19, v20, v22, v23, v24, v25);
      *uint64_t v6 = v17;
      v6[1] = v18;
      void v6[2] = v19;
      v6[3] = v20;
      v6[4] = v22;
      void v6[5] = v23;
      uint64_t v8 = v21;
      uint64_t v3 = v115;
      v6[6] = v24;
      *((unsigned char *)v6 + 56) = v25;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_75:
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v6, 0, 1, v8);
        return v3;
      }
      uint64_t v12 = v7[1];
      *uint64_t v6 = *v7;
      v6[1] = v12;
      uint64_t v13 = *(int *)(type metadata accessor for TaggedCommand() + 20);
      uint64_t v14 = (uint64_t)v6 + v13;
      uint64_t v15 = (uint64_t)v7 + v13;
      uint64_t v16 = type metadata accessor for Command();
      swift_bridgeObjectRetain();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 2u:
        case 7u:
        case 8u:
        case 0x20u:
          *(void *)uint64_t v14 = *(void *)v15;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 1u:
        case 9u:
        case 0xAu:
        case 0x1Bu:
          *(void *)uint64_t v14 = *(void *)v15;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 3u:
          uint64_t v113 = v8;
          if (*(void *)(v15 + 64))
          {
            uint64_t v26 = *(unsigned __int8 *)(v15 + 32);
            if (v26 == 255)
            {
              long long v27 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
              *(_OWORD *)(v14 + 16) = v27;
              long long v28 = *(_OWORD *)(v15 + 48);
              *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
              *(_OWORD *)(v14 + 48) = v28;
            }
            else
            {
              char v96 = v26 & 1;
              uint64_t v97 = *(void *)v15;
              uint64_t v98 = *(void *)(v15 + 8);
              uint64_t v100 = *(void *)(v15 + 16);
              uint64_t v99 = *(void *)(v15 + 24);
              sub_1001F33C4(*(void *)v15, v98, v100, v99, v26 & 1);
              *(void *)uint64_t v14 = v97;
              *(void *)(v14 + 8) = v98;
              *(void *)(v14 + 16) = v100;
              *(void *)(v14 + 24) = v99;
              *(unsigned char *)(v14 + 32) = v96;
              unint64_t v101 = *(void *)(v15 + 56);
              if (HIBYTE(v101) == 255)
              {
                *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
                *(void *)(v14 + 56) = *(void *)(v15 + 56);
              }
              else
              {
                uint64_t v103 = *(void *)(v15 + 40);
                uint64_t v104 = *(void *)(v15 + 48);
                sub_1001F33AC(v103, v104, *(void *)(v15 + 56), HIBYTE(v101) & 1);
                *(void *)(v14 + 40) = v103;
                *(void *)(v14 + 48) = v104;
                *(unsigned char *)(v14 + 62) = BYTE6(v101);
                *(_WORD *)(v14 + 60) = WORD2(v101);
                *(_DWORD *)(v14 + 56) = v101;
                *(unsigned char *)(v14 + 63) = HIBYTE(v101) & 1;
              }
            }
            *(void *)(v14 + 64) = *(void *)(v15 + 64);
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy((void *)v14, (const void *)v15, 0x48uLL);
          }
          unsigned int v106 = *(_DWORD *)(v15 + 104);
          uint64_t v105 = v15 + 104;
          *(void *)(v14 + 72) = *(void *)(v105 - 32);
          *(_DWORD *)(v14 + 80) = *(_DWORD *)(v105 - 24);
          uint64_t v107 = *(void *)(v105 - 16);
          uint64_t v108 = *(void *)(v105 - 8);
          int v109 = *(unsigned __int8 *)(v105 + 6);
          uint64_t v110 = *(unsigned __int16 *)(v105 + 4) | (v109 << 16);
          char v111 = *(unsigned char *)(v105 + 7);
          swift_bridgeObjectRetain();
          sub_1001F33AC(v107, v108, v106 | (unint64_t)(v110 << 32), v111);
          *(void *)(v14 + 88) = v107;
          *(void *)(v14 + 96) = v108;
          *(unsigned char *)(v14 + 110) = v109;
          *(_WORD *)(v14 + 108) = v110;
          *(_DWORD *)(v14 + 104) = v106;
          *(unsigned char *)(v14 + 111) = v111;
          *(void *)(v14 + 112) = *(void *)(v105 + 8);
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          uint64_t v8 = v113;
          break;
        case 4u:
          uint64_t v29 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v29;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
          uint64_t v30 = *(void *)(v15 + 32);
          uint64_t v114 = v8;
          uint64_t v116 = *(unsigned int *)(v15 + 40);
          int v31 = *(unsigned __int8 *)(v15 + 46);
          uint64_t v32 = *(unsigned __int16 *)(v15 + 44) | (v31 << 16);
          uint64_t v112 = *(void *)(v15 + 24);
          char v33 = *(unsigned char *)(v15 + 47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1001F33AC(v112, v30, v116 | (v32 << 32), v33);
          *(void *)(v14 + 24) = v112;
          *(void *)(v14 + 32) = v30;
          *(unsigned char *)(v14 + 46) = v31;
          *(_WORD *)(v14 + 44) = v32;
          *(_DWORD *)(v14 + 40) = v116;
          *(unsigned char *)(v14 + 47) = v33;
          uint64_t v8 = v114;
          *(void *)(v14 + 48) = *(void *)(v15 + 48);
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 5u:
          *(void *)uint64_t v14 = *(void *)v15;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          *(void *)(v14 + 24) = *(void *)(v15 + 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
          *(_DWORD *)(v14 + 35) = *(_DWORD *)(v15 + 35);
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_73;
        case 6u:
          *(void *)uint64_t v14 = *(void *)v15;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          *(_DWORD *)(v14 + 24) = *(_DWORD *)(v15 + 24);
          uint64_t v34 = *(void *)(v15 + 40);
          *(void *)(v14 + 32) = *(void *)(v15 + 32);
          *(void *)(v14 + 40) = v34;
          *(void *)(v14 + 48) = *(void *)(v15 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_73;
        case 0xBu:
          uint64_t v35 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v35;
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          *(void *)(v14 + 24) = *(void *)(v15 + 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
          *(_DWORD *)(v14 + 35) = *(_DWORD *)(v15 + 35);
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_73;
        case 0xCu:
          uint64_t v36 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v36;
          uint64_t v37 = *(void *)(v15 + 16);
          uint64_t v38 = *(void *)(v15 + 24);
          *(void *)(v14 + 16) = v37;
          *(void *)(v14 + 24) = v38;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0xDu:
        case 0x21u:
        case 0x22u:
          *(void *)uint64_t v14 = *(void *)v15;
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0xEu:
          uint64_t v39 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v39)) {
            goto LABEL_23;
          }
          goto LABEL_54;
        case 0xFu:
          uint64_t v41 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v41))
          {
            uint64_t v42 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            uint64_t v72 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v14, v15, v72);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v41);
          }
          uint64_t v73 = sub_10000566C(&qword_1007108F8);
          *(void *)(v14 + *(int *)(v73 + 48)) = *(void *)(v15 + *(int *)(v73 + 48));
          *(void *)(v14 + *(int *)(v73 + 64)) = *(void *)(v15 + *(int *)(v73 + 64));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x10u:
          uint64_t v43 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v43))
          {
            uint64_t v44 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v44 - 8) + 64));
          }
          else
          {
            uint64_t v74 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(v14, v15, v74);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v43);
          }
          uint64_t v75 = sub_10000566C(&qword_1007108F0);
          *(void *)(v14 + *(int *)(v75 + 48)) = *(void *)(v15 + *(int *)(v75 + 48));
          uint64_t v76 = *(int *)(v75 + 64);
          uint64_t v77 = (void *)(v14 + v76);
          unint64_t v78 = (uint64_t *)(v15 + v76);
          uint64_t v79 = *v78;
          uint64_t v80 = v78[1];
          swift_bridgeObjectRetain();
          MailboxPriorityInfo.mailboxPriorityOrder.getter();
          *uint64_t v77 = v79;
          v77[1] = v80;
          goto LABEL_73;
        case 0x11u:
        case 0x17u:
          uint64_t v45 = *(void *)v15;
          sub_1002238FC(*(void *)v15);
          uint64_t v47 = *(void *)(v15 + 8);
          uint64_t v46 = *(void *)(v15 + 16);
          *(void *)uint64_t v14 = v45;
          *(void *)(v14 + 8) = v47;
          uint64_t v48 = *(void *)(v15 + 24);
          *(void *)(v14 + 16) = v46;
          *(void *)(v14 + 24) = v48;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x12u:
          uint64_t v39 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v39))
          {
LABEL_23:
            uint64_t v40 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
LABEL_54:
            uint64_t v68 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v14, v15, v68);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v39);
          }
          uint64_t v69 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
          uint64_t v70 = v14 + v69;
          uint64_t v71 = v15 + v69;
          *(void *)uint64_t v70 = *(void *)v71;
          *(_DWORD *)(v70 + 8) = *(_DWORD *)(v71 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x13u:
          uint64_t v49 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v49;
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_73;
        case 0x14u:
          uint64_t v50 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v50)) {
            goto LABEL_33;
          }
          goto LABEL_61;
        case 0x15u:
          uint64_t v50 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v50))
          {
LABEL_33:
            uint64_t v51 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
LABEL_61:
            uint64_t v81 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 16))(v14, v15, v81);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v50);
          }
          uint64_t v82 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
          uint64_t v83 = v14 + v82;
          uint64_t v84 = v15 + v82;
          *(void *)uint64_t v83 = *(void *)v84;
          *(_DWORD *)(v83 + 8) = *(_DWORD *)(v84 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x16u:
          uint64_t v52 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v52))
          {
            uint64_t v53 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            uint64_t v85 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v14, v15, v85);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v52);
          }
          uint64_t v86 = sub_10000566C(&qword_1007108D8);
          *(void *)(v14 + *(int *)(v86 + 48)) = *(void *)(v15 + *(int *)(v86 + 48));
          *(void *)(v14 + *(int *)(v86 + 64)) = *(void *)(v15 + *(int *)(v86 + 64));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x18u:
          uint64_t v54 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v54))
          {
            uint64_t v55 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            uint64_t v87 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v14, v15, v87);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v54);
          }
          uint64_t v88 = sub_10000566C(&qword_1007108D0);
          *(void *)(v14 + *(int *)(v88 + 48)) = *(void *)(v15 + *(int *)(v88 + 48));
          uint64_t v89 = *(int *)(v88 + 64);
          uint64_t v90 = (void *)(v14 + v89);
          uint64_t v91 = (uint64_t *)(v15 + v89);
          uint64_t v92 = *v91;
          uint64_t v93 = v91[1];
          swift_bridgeObjectRetain();
          MailboxPriorityInfo.mailboxPriorityOrder.getter();
          *uint64_t v90 = v92;
          v90[1] = v93;
          goto LABEL_73;
        case 0x19u:
          uint64_t v56 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v15, 1, v56))
          {
            uint64_t v57 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v57 - 8) + 64));
          }
          else
          {
            uint64_t v94 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(v14, v15, v94);
            storeEnumTagSinglePayload for ClientCommand(v14, 0, 1, v56);
          }
          goto LABEL_73;
        case 0x1Au:
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = *(void *)(v15 + 8);
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v14 + 19) = *(_DWORD *)(v15 + 19);
          swift_retain();
          goto LABEL_73;
        case 0x1Cu:
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = *(void *)(v15 + 8);
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v14 + 19) = *(_DWORD *)(v15 + 19);
          *(void *)(v14 + 24) = *(void *)(v15 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x1Du:
          uint64_t v58 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v58;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
          *(void *)(v14 + 24) = *(void *)(v15 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x1Eu:
          *(void *)uint64_t v14 = *(void *)v15;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
          uint64_t v59 = *(void *)(v15 + 24);
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          *(void *)(v14 + 24) = v59;
          *(void *)(v14 + 32) = *(void *)(v15 + 32);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_73;
        case 0x1Fu:
          uint64_t v60 = *(void *)v15;
          sub_1002238FC(*(void *)v15);
          uint64_t v61 = *(void *)(v15 + 32);
          uint64_t v63 = *(void *)(v15 + 8);
          uint64_t v62 = *(void *)(v15 + 16);
          *(void *)uint64_t v14 = v60;
          *(void *)(v14 + 8) = v63;
          uint64_t v64 = *(void *)(v15 + 24);
          *(void *)(v14 + 16) = v62;
          *(void *)(v14 + 24) = v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v61)
          {
            *(void *)(v14 + 32) = v61;
            uint64_t v65 = *(void *)(v15 + 48);
            swift_bridgeObjectRetain();
            if (v65)
            {
              *(void *)(v14 + 40) = *(void *)(v15 + 40);
              *(void *)(v14 + 48) = v65;
              *(void *)(v14 + 56) = *(void *)(v15 + 56);
              swift_retain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
              *(void *)(v14 + 56) = *(void *)(v15 + 56);
            }
          }
          else
          {
            long long v95 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
            *(_OWORD *)(v14 + 48) = v95;
          }
          goto LABEL_73;
        case 0x23u:
          uint64_t v66 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v66;
          swift_bridgeObjectRetain();
          goto LABEL_73;
        case 0x24u:
          uint64_t v67 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v67;
          *(void *)(v14 + 16) = *(void *)(v15 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_73:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v16 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_75;
  }
  uint64_t v9 = sub_10000566C(&qword_100710AE8);
  memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  return v3;
}

uint64_t destroy for SynchronizedCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for CommandStreamPart();
  uint64_t result = getEnumTagSinglePayload for ClientCommand(v2, 1, v3);
  if (result) {
    return result;
  }
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2) {
    goto LABEL_7;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = v2 + *(int *)(type metadata accessor for TaggedCommand() + 20);
    type metadata accessor for Command();
    uint64_t result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
      case 2:
      case 7:
      case 8:
      case 12:
      case 32:
      case 36:
        goto LABEL_54;
      case 1:
      case 9:
      case 10:
      case 13:
      case 27:
      case 33:
      case 34:
      case 35:
        goto LABEL_55;
      case 3:
        if (*(void *)(v5 + 64))
        {
          uint64_t v19 = *(unsigned __int8 *)(v5 + 32);
          if (v19 != 255)
          {
            sub_1001F3480(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), v19 & 1);
            unint64_t v20 = *(void *)(v5 + 56);
            if (HIBYTE(v20) != 255) {
              sub_1001F33B8(*(void *)(v5 + 40), *(void *)(v5 + 48), v20, HIBYTE(v20) & 1);
            }
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        sub_1001F33B8(*(void *)(v5 + 88), *(void *)(v5 + 96), *(unsigned int *)(v5 + 104) | ((unint64_t)(*(unsigned __int16 *)(v5 + 108) | (*(unsigned __int8 *)(v5 + 110) << 16)) << 32), *(unsigned char *)(v5 + 111));
        goto LABEL_55;
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1001F33B8(*(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned int *)(v5 + 40) | ((unint64_t)(*(unsigned __int16 *)(v5 + 44) | (*(unsigned __int8 *)(v5 + 46) << 16)) << 32), *(unsigned char *)(v5 + 47));
        goto LABEL_55;
      case 5:
      case 11:
        swift_bridgeObjectRelease();
        break;
      case 6:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        break;
      case 14:
      case 18:
        uint64_t v14 = sub_10000566C(&qword_1007104C8);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v14))
        {
          uint64_t v15 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v5, v15);
        }
        uint64_t v16 = &qword_1007108E8;
        goto LABEL_20;
      case 15:
        uint64_t v21 = sub_10000566C(&qword_1007104C8);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v21))
        {
          uint64_t v22 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v5, v22);
        }
        uint64_t v23 = &qword_1007108F8;
        goto LABEL_41;
      case 16:
        uint64_t v24 = sub_10000566C(&qword_1007104C8);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v24))
        {
          uint64_t v25 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v5, v25);
        }
        uint64_t v26 = &qword_1007108F0;
        goto LABEL_45;
      case 17:
      case 23:
        sub_1002239B4(*(void *)v5);
        goto LABEL_54;
      case 19:
        swift_release();
        swift_release();
        break;
      case 20:
      case 21:
        uint64_t v17 = sub_10000566C(&qword_1007108C0);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v17))
        {
          uint64_t v18 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v5, v18);
        }
        uint64_t v16 = &qword_1007108E0;
LABEL_20:
        sub_10000566C(v16);
        goto LABEL_55;
      case 22:
        uint64_t v27 = sub_10000566C(&qword_1007108C0);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v27))
        {
          uint64_t v28 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v5, v28);
        }
        uint64_t v23 = &qword_1007108D8;
LABEL_41:
        sub_10000566C(v23);
        swift_bridgeObjectRelease();
        goto LABEL_55;
      case 24:
        uint64_t v29 = sub_10000566C(&qword_1007108C0);
        if (!getEnumTagSinglePayload for ClientCommand(v5, 1, v29))
        {
          uint64_t v30 = sub_10000566C(&qword_100710538);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v5, v30);
        }
        uint64_t v26 = &qword_1007108D0;
LABEL_45:
        sub_10000566C(v26);
        swift_bridgeObjectRelease();
        return sub_10024EEEC();
      case 25:
        uint64_t v31 = sub_10000566C(&qword_1007108C0);
        uint64_t result = getEnumTagSinglePayload for ClientCommand(v5, 1, v31);
        if (!result)
        {
          uint64_t v32 = sub_10000566C(&qword_100710538);
          char v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
          return v33(v5, v32);
        }
        return result;
      case 26:
        break;
      case 28:
        swift_release();
        goto LABEL_55;
      case 29:
        swift_bridgeObjectRelease();
LABEL_54:
        swift_bridgeObjectRelease();
LABEL_55:
        return swift_bridgeObjectRelease();
      case 30:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        break;
      case 31:
        sub_1002239B4(*(void *)v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = *(void *)(v5 + 32);
        if (!result) {
          return result;
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (!*(void *)(v5 + 48)) {
          return result;
        }
        swift_release();
        swift_release();
        break;
      default:
        return result;
    }
LABEL_7:
    return swift_release();
  }
  uint64_t v6 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  unsigned __int8 v13 = *(unsigned char *)(v2 + 56);
  return sub_100255FEC(v6, v7, v8, v9, v10, v11, v12, v13);
}

void *initializeWithCopy for SynchronizedCommand(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (void *)((char *)a2 + v4);
  uint64_t v7 = type metadata accessor for CommandStreamPart();
  if (!getEnumTagSinglePayload for ClientCommand((uint64_t)v6, 1, v7))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *uint64_t v5 = *v6;
      v5[1] = v6[1];
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      *(_DWORD *)((char *)v5 + 19) = *(_DWORD *)((char *)v6 + 19);
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = *v6;
      uint64_t v16 = v6[1];
      uint64_t v17 = v6[2];
      uint64_t v18 = v6[3];
      uint64_t v113 = v3;
      uint64_t v19 = v7;
      uint64_t v20 = v6[4];
      uint64_t v21 = v6[5];
      uint64_t v22 = v6[6];
      unsigned __int8 v23 = *((unsigned char *)v6 + 56);
      sub_100258158(v15, v16, v17, v18, v20, v21, v22, v23);
      *uint64_t v5 = v15;
      v5[1] = v16;
      void v5[2] = v17;
      v5[3] = v18;
      long long v5[4] = v20;
      v5[5] = v21;
      uint64_t v7 = v19;
      uint64_t v3 = v113;
      v5[6] = v22;
      *((unsigned char *)v5 + 56) = v23;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_73:
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v5, 0, 1, v7);
        return v3;
      }
      uint64_t v10 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v10;
      uint64_t v11 = *(int *)(type metadata accessor for TaggedCommand() + 20);
      uint64_t v12 = (uint64_t)v5 + v11;
      uint64_t v13 = (uint64_t)v6 + v11;
      uint64_t v14 = type metadata accessor for Command();
      swift_bridgeObjectRetain();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
        case 2u:
        case 7u:
        case 8u:
        case 0x20u:
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 1u:
        case 9u:
        case 0xAu:
        case 0x1Bu:
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 3u:
          uint64_t v111 = v7;
          if (*(void *)(v13 + 64))
          {
            uint64_t v24 = *(unsigned __int8 *)(v13 + 32);
            if (v24 == 255)
            {
              long long v25 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
              *(_OWORD *)(v12 + 16) = v25;
              long long v26 = *(_OWORD *)(v13 + 48);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
              *(_OWORD *)(v12 + 48) = v26;
            }
            else
            {
              char v94 = v24 & 1;
              uint64_t v95 = *(void *)v13;
              uint64_t v96 = *(void *)(v13 + 8);
              uint64_t v98 = *(void *)(v13 + 16);
              uint64_t v97 = *(void *)(v13 + 24);
              sub_1001F33C4(*(void *)v13, v96, v98, v97, v24 & 1);
              *(void *)uint64_t v12 = v95;
              *(void *)(v12 + 8) = v96;
              *(void *)(v12 + 16) = v98;
              *(void *)(v12 + 24) = v97;
              *(unsigned char *)(v12 + 32) = v94;
              unint64_t v99 = *(void *)(v13 + 56);
              if (HIBYTE(v99) == 255)
              {
                *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
                *(void *)(v12 + 56) = *(void *)(v13 + 56);
              }
              else
              {
                uint64_t v101 = *(void *)(v13 + 40);
                uint64_t v102 = *(void *)(v13 + 48);
                sub_1001F33AC(v101, v102, *(void *)(v13 + 56), HIBYTE(v99) & 1);
                *(void *)(v12 + 40) = v101;
                *(void *)(v12 + 48) = v102;
                *(unsigned char *)(v12 + 62) = BYTE6(v99);
                *(_WORD *)(v12 + 60) = WORD2(v99);
                *(_DWORD *)(v12 + 56) = v99;
                *(unsigned char *)(v12 + 63) = HIBYTE(v99) & 1;
              }
            }
            *(void *)(v12 + 64) = *(void *)(v13 + 64);
            swift_bridgeObjectRetain();
          }
          else
          {
            memcpy((void *)v12, (const void *)v13, 0x48uLL);
          }
          unsigned int v104 = *(_DWORD *)(v13 + 104);
          uint64_t v103 = v13 + 104;
          *(void *)(v12 + 72) = *(void *)(v103 - 32);
          *(_DWORD *)(v12 + 80) = *(_DWORD *)(v103 - 24);
          uint64_t v105 = *(void *)(v103 - 16);
          uint64_t v106 = *(void *)(v103 - 8);
          int v107 = *(unsigned __int8 *)(v103 + 6);
          uint64_t v108 = *(unsigned __int16 *)(v103 + 4) | (v107 << 16);
          char v109 = *(unsigned char *)(v103 + 7);
          swift_bridgeObjectRetain();
          sub_1001F33AC(v105, v106, v104 | (unint64_t)(v108 << 32), v109);
          *(void *)(v12 + 88) = v105;
          *(void *)(v12 + 96) = v106;
          *(unsigned char *)(v12 + 110) = v107;
          *(_WORD *)(v12 + 108) = v108;
          *(_DWORD *)(v12 + 104) = v104;
          *(unsigned char *)(v12 + 111) = v109;
          *(void *)(v12 + 112) = *(void *)(v103 + 8);
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          uint64_t v7 = v111;
          break;
        case 4u:
          uint64_t v27 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v27;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
          uint64_t v28 = *(void *)(v13 + 32);
          uint64_t v112 = v7;
          uint64_t v114 = *(unsigned int *)(v13 + 40);
          int v29 = *(unsigned __int8 *)(v13 + 46);
          uint64_t v30 = *(unsigned __int16 *)(v13 + 44) | (v29 << 16);
          uint64_t v110 = *(void *)(v13 + 24);
          char v31 = *(unsigned char *)(v13 + 47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1001F33AC(v110, v28, v114 | (v30 << 32), v31);
          *(void *)(v12 + 24) = v110;
          *(void *)(v12 + 32) = v28;
          *(unsigned char *)(v12 + 46) = v29;
          *(_WORD *)(v12 + 44) = v30;
          *(_DWORD *)(v12 + 40) = v114;
          *(unsigned char *)(v12 + 47) = v31;
          uint64_t v7 = v112;
          *(void *)(v12 + 48) = *(void *)(v13 + 48);
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 5u:
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          *(void *)(v12 + 24) = *(void *)(v13 + 24);
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v12 + 35) = *(_DWORD *)(v13 + 35);
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_71;
        case 6u:
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
          uint64_t v32 = *(void *)(v13 + 40);
          *(void *)(v12 + 32) = *(void *)(v13 + 32);
          *(void *)(v12 + 40) = v32;
          *(void *)(v12 + 48) = *(void *)(v13 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_71;
        case 0xBu:
          uint64_t v33 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v33;
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          *(void *)(v12 + 24) = *(void *)(v13 + 24);
          *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v12 + 35) = *(_DWORD *)(v13 + 35);
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_71;
        case 0xCu:
          uint64_t v34 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v34;
          uint64_t v35 = *(void *)(v13 + 16);
          uint64_t v36 = *(void *)(v13 + 24);
          *(void *)(v12 + 16) = v35;
          *(void *)(v12 + 24) = v36;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0xDu:
        case 0x21u:
        case 0x22u:
          *(void *)uint64_t v12 = *(void *)v13;
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0xEu:
          uint64_t v37 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v37)) {
            goto LABEL_21;
          }
          goto LABEL_52;
        case 0xFu:
          uint64_t v39 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v39))
          {
            uint64_t v40 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            uint64_t v70 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v12, v13, v70);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v39);
          }
          uint64_t v71 = sub_10000566C(&qword_1007108F8);
          *(void *)(v12 + *(int *)(v71 + 48)) = *(void *)(v13 + *(int *)(v71 + 48));
          *(void *)(v12 + *(int *)(v71 + 64)) = *(void *)(v13 + *(int *)(v71 + 64));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x10u:
          uint64_t v41 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v41))
          {
            uint64_t v42 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            uint64_t v72 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v12, v13, v72);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v41);
          }
          uint64_t v73 = sub_10000566C(&qword_1007108F0);
          *(void *)(v12 + *(int *)(v73 + 48)) = *(void *)(v13 + *(int *)(v73 + 48));
          uint64_t v74 = *(int *)(v73 + 64);
          uint64_t v75 = (void *)(v12 + v74);
          uint64_t v76 = (uint64_t *)(v13 + v74);
          uint64_t v77 = *v76;
          uint64_t v78 = v76[1];
          swift_bridgeObjectRetain();
          MailboxPriorityInfo.mailboxPriorityOrder.getter();
          *uint64_t v75 = v77;
          v75[1] = v78;
          goto LABEL_71;
        case 0x11u:
        case 0x17u:
          uint64_t v43 = *(void *)v13;
          sub_1002238FC(*(void *)v13);
          uint64_t v45 = *(void *)(v13 + 8);
          uint64_t v44 = *(void *)(v13 + 16);
          *(void *)uint64_t v12 = v43;
          *(void *)(v12 + 8) = v45;
          uint64_t v46 = *(void *)(v13 + 24);
          *(void *)(v12 + 16) = v44;
          *(void *)(v12 + 24) = v46;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x12u:
          uint64_t v37 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v37))
          {
LABEL_21:
            uint64_t v38 = sub_10000566C(&qword_1007104D8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v38 - 8) + 64));
          }
          else
          {
LABEL_52:
            uint64_t v66 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v12, v13, v66);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v37);
          }
          uint64_t v67 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
          uint64_t v68 = v12 + v67;
          uint64_t v69 = v13 + v67;
          *(void *)uint64_t v68 = *(void *)v69;
          *(_DWORD *)(v68 + 8) = *(_DWORD *)(v69 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x13u:
          uint64_t v47 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v47;
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_71;
        case 0x14u:
          uint64_t v48 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v48)) {
            goto LABEL_31;
          }
          goto LABEL_59;
        case 0x15u:
          uint64_t v48 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v48))
          {
LABEL_31:
            uint64_t v49 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v49 - 8) + 64));
          }
          else
          {
LABEL_59:
            uint64_t v79 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v12, v13, v79);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v48);
          }
          uint64_t v80 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
          uint64_t v81 = v12 + v80;
          uint64_t v82 = v13 + v80;
          *(void *)uint64_t v81 = *(void *)v82;
          *(_DWORD *)(v81 + 8) = *(_DWORD *)(v82 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x16u:
          uint64_t v50 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v50))
          {
            uint64_t v51 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
            uint64_t v83 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(v12, v13, v83);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v50);
          }
          uint64_t v84 = sub_10000566C(&qword_1007108D8);
          *(void *)(v12 + *(int *)(v84 + 48)) = *(void *)(v13 + *(int *)(v84 + 48));
          *(void *)(v12 + *(int *)(v84 + 64)) = *(void *)(v13 + *(int *)(v84 + 64));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x18u:
          uint64_t v52 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v52))
          {
            uint64_t v53 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            uint64_t v85 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v12, v13, v85);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v52);
          }
          uint64_t v86 = sub_10000566C(&qword_1007108D0);
          *(void *)(v12 + *(int *)(v86 + 48)) = *(void *)(v13 + *(int *)(v86 + 48));
          uint64_t v87 = *(int *)(v86 + 64);
          uint64_t v88 = (void *)(v12 + v87);
          uint64_t v89 = (uint64_t *)(v13 + v87);
          uint64_t v90 = *v89;
          uint64_t v91 = v89[1];
          swift_bridgeObjectRetain();
          MailboxPriorityInfo.mailboxPriorityOrder.getter();
          *uint64_t v88 = v90;
          v88[1] = v91;
          goto LABEL_71;
        case 0x19u:
          uint64_t v54 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand(v13, 1, v54))
          {
            uint64_t v55 = sub_10000566C(&qword_1007108C8);
            memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            uint64_t v92 = sub_10000566C(&qword_100710538);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16))(v12, v13, v92);
            storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v54);
          }
          goto LABEL_71;
        case 0x1Au:
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = *(void *)(v13 + 8);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v12 + 19) = *(_DWORD *)(v13 + 19);
          swift_retain();
          goto LABEL_71;
        case 0x1Cu:
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = *(void *)(v13 + 8);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v12 + 19) = *(_DWORD *)(v13 + 19);
          *(void *)(v12 + 24) = *(void *)(v13 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x1Du:
          uint64_t v56 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v56;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)(v12 + 24) = *(void *)(v13 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x1Eu:
          *(void *)uint64_t v12 = *(void *)v13;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v57 = *(void *)(v13 + 24);
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          *(void *)(v12 + 24) = v57;
          *(void *)(v12 + 32) = *(void *)(v13 + 32);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          goto LABEL_71;
        case 0x1Fu:
          uint64_t v58 = *(void *)v13;
          sub_1002238FC(*(void *)v13);
          uint64_t v59 = *(void *)(v13 + 32);
          uint64_t v61 = *(void *)(v13 + 8);
          uint64_t v60 = *(void *)(v13 + 16);
          *(void *)uint64_t v12 = v58;
          *(void *)(v12 + 8) = v61;
          uint64_t v62 = *(void *)(v13 + 24);
          *(void *)(v12 + 16) = v60;
          *(void *)(v12 + 24) = v62;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v59)
          {
            *(void *)(v12 + 32) = v59;
            uint64_t v63 = *(void *)(v13 + 48);
            swift_bridgeObjectRetain();
            if (v63)
            {
              *(void *)(v12 + 40) = *(void *)(v13 + 40);
              *(void *)(v12 + 48) = v63;
              *(void *)(v12 + 56) = *(void *)(v13 + 56);
              swift_retain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
              *(void *)(v12 + 56) = *(void *)(v13 + 56);
            }
          }
          else
          {
            long long v93 = *(_OWORD *)(v13 + 48);
            *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
            *(_OWORD *)(v12 + 48) = v93;
          }
          goto LABEL_71;
        case 0x23u:
          uint64_t v64 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v64;
          swift_bridgeObjectRetain();
          goto LABEL_71;
        case 0x24u:
          uint64_t v65 = *(void *)(v13 + 8);
          *(void *)uint64_t v12 = *(void *)v13;
          *(void *)(v12 + 8) = v65;
          *(void *)(v12 + 16) = *(void *)(v13 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_71:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v14 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_73;
  }
  uint64_t v8 = sub_10000566C(&qword_100710AE8);
  memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  return v3;
}

void *assignWithCopy for SynchronizedCommand(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (uint64_t)a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for CommandStreamPart();
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand(v6, 1, v8);
  int v10 = getEnumTagSinglePayload for ClientCommand(v7, 1, v8);
  if (EnumTagSingle)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(void *)uint64_t v6 = *(void *)v7;
        *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
        *(_DWORD *)(v6 + 12) = *(_DWORD *)(v7 + 12);
        int v22 = *(_DWORD *)(v7 + 16);
        *(_DWORD *)(v6 + 19) = *(_DWORD *)(v7 + 19);
        *(_DWORD *)(v6 + 16) = v22;
        swift_retain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v23 = *(void *)v7;
        uint64_t v24 = *(void *)(v7 + 8);
        uint64_t v25 = *(void *)(v7 + 16);
        uint64_t v26 = *(void *)(v7 + 24);
        uint64_t v27 = *(void *)(v7 + 32);
        uint64_t v28 = *(void *)(v7 + 40);
        int v200 = v4;
        uint64_t v29 = v8;
        uint64_t v30 = *(void *)(v7 + 48);
        unsigned __int8 v31 = *(unsigned char *)(v7 + 56);
        sub_100258158(v23, v24, v25, v26, v27, v28, v30, v31);
        *(void *)uint64_t v6 = v23;
        *(void *)(v6 + 8) = v24;
        *(void *)(v6 + 16) = v25;
        *(void *)(v6 + 24) = v26;
        *(void *)(v6 + 32) = v27;
        *(void *)(v6 + 40) = v28;
        *(void *)(v6 + 48) = v30;
        uint64_t v8 = v29;
        uint64_t v4 = v200;
        *(unsigned char *)(v6 + 56) = v31;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy((void *)v6, (const void *)v7, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_127:
          storeEnumTagSinglePayload for ClientCommand(v6, 0, 1, v8);
          return v4;
        }
        *(void *)uint64_t v6 = *(void *)v7;
        *(void *)(v6 + 8) = *(void *)(v7 + 8);
        uint64_t v12 = *(int *)(type metadata accessor for TaggedCommand() + 20);
        uint64_t v13 = v6 + v12;
        uint64_t v14 = v7 + v12;
        uint64_t v15 = type metadata accessor for Command();
        swift_bridgeObjectRetain();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 2u:
          case 7u:
          case 8u:
          case 0x20u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 1u:
          case 9u:
          case 0xAu:
          case 0x1Bu:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 3u:
            uint64_t v198 = v8;
            if (*(void *)(v14 + 64))
            {
              uint64_t v41 = *(unsigned __int8 *)(v14 + 32);
              if (v41 == 255)
              {
                long long v42 = *(_OWORD *)v14;
                long long v43 = *(_OWORD *)(v14 + 16);
                long long v44 = *(_OWORD *)(v14 + 48);
                *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
                *(_OWORD *)(v13 + 48) = v44;
                *(_OWORD *)uint64_t v13 = v42;
                *(_OWORD *)(v13 + 16) = v43;
              }
              else
              {
                char v134 = v41 & 1;
                uint64_t v135 = *(void *)v14;
                uint64_t v136 = *(void *)(v14 + 8);
                uint64_t v137 = *(void *)(v14 + 16);
                uint64_t v138 = *(void *)(v14 + 24);
                sub_1001F33C4(*(void *)v14, v136, v137, v138, v41 & 1);
                *(void *)uint64_t v13 = v135;
                *(void *)(v13 + 8) = v136;
                *(void *)(v13 + 16) = v137;
                *(void *)(v13 + 24) = v138;
                *(unsigned char *)(v13 + 32) = v134;
                unint64_t v139 = *(void *)(v14 + 56);
                if (HIBYTE(v139) == 255)
                {
                  long long v140 = *(_OWORD *)(v14 + 40);
                  *(void *)(v13 + 56) = *(void *)(v14 + 56);
                  *(_OWORD *)(v13 + 40) = v140;
                }
                else
                {
                  uint64_t v141 = *(void *)(v14 + 40);
                  uint64_t v142 = *(void *)(v14 + 48);
                  sub_1001F33AC(v141, v142, *(void *)(v14 + 56), HIBYTE(v139) & 1);
                  *(void *)(v13 + 40) = v141;
                  *(void *)(v13 + 48) = v142;
                  *(unsigned char *)(v13 + 62) = BYTE6(v139);
                  *(_WORD *)(v13 + 60) = WORD2(v139);
                  *(_DWORD *)(v13 + 56) = v139;
                  *(unsigned char *)(v13 + 63) = HIBYTE(v139) & 1;
                }
              }
              *(void *)(v13 + 64) = *(void *)(v14 + 64);
              swift_bridgeObjectRetain();
            }
            else
            {
              memcpy((void *)v13, (const void *)v14, 0x48uLL);
            }
            *(void *)(v13 + 72) = *(void *)(v14 + 72);
            *(_DWORD *)(v13 + 80) = *(_DWORD *)(v14 + 80);
            unsigned int v144 = *(_DWORD *)(v14 + 104);
            uint64_t v143 = v14 + 104;
            uint64_t v145 = *(void *)(v143 - 16);
            uint64_t v146 = *(void *)(v143 - 8);
            int v147 = *(unsigned __int8 *)(v143 + 6);
            uint64_t v148 = *(unsigned __int16 *)(v143 + 4) | (v147 << 16);
            char v149 = *(unsigned char *)(v143 + 7);
            swift_bridgeObjectRetain();
            sub_1001F33AC(v145, v146, v144 | (unint64_t)(v148 << 32), v149);
            *(void *)(v13 + 88) = v145;
            *(void *)(v13 + 96) = v146;
            *(unsigned char *)(v13 + 110) = v147;
            *(_WORD *)(v13 + 108) = v148;
            *(_DWORD *)(v13 + 104) = v144;
            *(unsigned char *)(v13 + 111) = v149;
            *(void *)(v13 + 112) = *(void *)(v143 + 8);
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
            uint64_t v8 = v198;
            break;
          case 4u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v14 + 16);
            unsigned int v46 = *(_DWORD *)(v14 + 40);
            uint64_t v45 = v14 + 40;
            uint64_t v199 = v8;
            uint64_t v47 = *(void *)(v45 - 16);
            uint64_t v48 = *(void *)(v45 - 8);
            int v49 = *(unsigned __int8 *)(v45 + 6);
            uint64_t v196 = *(unsigned __int16 *)(v45 + 4) | (v49 << 16);
            char v50 = *(unsigned char *)(v45 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1001F33AC(v47, v48, v46 | (unint64_t)(v196 << 32), v50);
            *(void *)(v13 + 24) = v47;
            *(void *)(v13 + 32) = v48;
            *(unsigned char *)(v13 + 46) = v49;
            *(_WORD *)(v13 + 44) = v196;
            *(_DWORD *)(v13 + 40) = v46;
            *(unsigned char *)(v13 + 47) = v50;
            uint64_t v8 = v199;
            *(void *)(v13 + 48) = *(void *)(v45 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 5u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
            int v51 = *(_DWORD *)(v14 + 32);
            *(_DWORD *)(v13 + 35) = *(_DWORD *)(v14 + 35);
            *(_DWORD *)(v13 + 32) = v51;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_125;
          case 6u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
            *(void *)(v13 + 32) = *(void *)(v14 + 32);
            *(void *)(v13 + 40) = *(void *)(v14 + 40);
            *(void *)(v13 + 48) = *(void *)(v14 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_125;
          case 0xBu:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v13 + 28) = *(_DWORD *)(v14 + 28);
            int v52 = *(_DWORD *)(v14 + 32);
            *(_DWORD *)(v13 + 35) = *(_DWORD *)(v14 + 35);
            *(_DWORD *)(v13 + 32) = v52;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_125;
          case 0xCu:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0xDu:
          case 0x21u:
          case 0x22u:
            *(void *)uint64_t v13 = *(void *)v14;
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0xEu:
            uint64_t v53 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v53)) {
              goto LABEL_34;
            }
            goto LABEL_105;
          case 0xFu:
            uint64_t v55 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v55))
            {
              uint64_t v56 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v56 - 8) + 64));
            }
            else
            {
              uint64_t v109 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v13, v14, v109);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v55);
            }
            uint64_t v110 = sub_10000566C(&qword_1007108F8);
            *(void *)(v13 + *(int *)(v110 + 48)) = *(void *)(v14 + *(int *)(v110 + 48));
            *(void *)(v13 + *(int *)(v110 + 64)) = *(void *)(v14 + *(int *)(v110 + 64));
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x10u:
            uint64_t v57 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v57))
            {
              uint64_t v58 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v58 - 8) + 64));
            }
            else
            {
              uint64_t v111 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 16))(v13, v14, v111);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v57);
            }
            uint64_t v112 = sub_10000566C(&qword_1007108F0);
            *(void *)(v13 + *(int *)(v112 + 48)) = *(void *)(v14 + *(int *)(v112 + 48));
            uint64_t v113 = *(int *)(v112 + 64);
            uint64_t v114 = (void *)(v13 + v113);
            __int16 v115 = (uint64_t *)(v14 + v113);
            uint64_t v116 = *v115;
            uint64_t v117 = v115[1];
            swift_bridgeObjectRetain();
            MailboxPriorityInfo.mailboxPriorityOrder.getter();
            *uint64_t v114 = v116;
            v114[1] = v117;
            goto LABEL_125;
          case 0x11u:
          case 0x17u:
            uint64_t v59 = *(void *)v14;
            sub_1002238FC(*(void *)v14);
            *(void *)uint64_t v13 = v59;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x12u:
            uint64_t v53 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v53))
            {
LABEL_34:
              uint64_t v54 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v54 - 8) + 64));
            }
            else
            {
LABEL_105:
              uint64_t v105 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v13, v14, v105);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v53);
            }
            uint64_t v106 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
            uint64_t v107 = v13 + v106;
            uint64_t v108 = v14 + v106;
            *(void *)uint64_t v107 = *(void *)v108;
            *(_DWORD *)(v107 + 8) = *(_DWORD *)(v108 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x13u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_125;
          case 0x14u:
            uint64_t v60 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v60)) {
              goto LABEL_44;
            }
            goto LABEL_112;
          case 0x15u:
            uint64_t v60 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v60))
            {
LABEL_44:
              uint64_t v61 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v61 - 8) + 64));
            }
            else
            {
LABEL_112:
              uint64_t v118 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 16))(v13, v14, v118);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v60);
            }
            uint64_t v119 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
            uint64_t v120 = v13 + v119;
            uint64_t v121 = v14 + v119;
            *(void *)uint64_t v120 = *(void *)v121;
            *(_DWORD *)(v120 + 8) = *(_DWORD *)(v121 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x16u:
            uint64_t v62 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v62))
            {
              uint64_t v63 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v63 - 8) + 64));
            }
            else
            {
              uint64_t v122 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 16))(v13, v14, v122);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v62);
            }
            uint64_t v123 = sub_10000566C(&qword_1007108D8);
            *(void *)(v13 + *(int *)(v123 + 48)) = *(void *)(v14 + *(int *)(v123 + 48));
            *(void *)(v13 + *(int *)(v123 + 64)) = *(void *)(v14 + *(int *)(v123 + 64));
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x18u:
            uint64_t v64 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v64))
            {
              uint64_t v65 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v65 - 8) + 64));
            }
            else
            {
              uint64_t v124 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 16))(v13, v14, v124);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v64);
            }
            uint64_t v125 = sub_10000566C(&qword_1007108D0);
            *(void *)(v13 + *(int *)(v125 + 48)) = *(void *)(v14 + *(int *)(v125 + 48));
            uint64_t v126 = *(int *)(v125 + 64);
            char v127 = (void *)(v13 + v126);
            char v128 = (uint64_t *)(v14 + v126);
            uint64_t v129 = *v128;
            uint64_t v130 = v128[1];
            swift_bridgeObjectRetain();
            MailboxPriorityInfo.mailboxPriorityOrder.getter();
            *char v127 = v129;
            v127[1] = v130;
            goto LABEL_125;
          case 0x19u:
            uint64_t v66 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v14, 1, v66))
            {
              uint64_t v67 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              uint64_t v131 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 16))(v13, v14, v131);
              storeEnumTagSinglePayload for ClientCommand(v13, 0, 1, v66);
            }
            goto LABEL_125;
          case 0x1Au:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
            int v68 = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v13 + 19) = *(_DWORD *)(v14 + 19);
            *(_DWORD *)(v13 + 16) = v68;
            swift_retain();
            goto LABEL_125;
          case 0x1Cu:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
            int v69 = *(_DWORD *)(v14 + 16);
            *(_DWORD *)(v13 + 19) = *(_DWORD *)(v14 + 19);
            *(_DWORD *)(v13 + 16) = v69;
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x1Du:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v14 + 16);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x1Eu:
            *(void *)uint64_t v13 = *(void *)v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            *(void *)(v13 + 32) = *(void *)(v14 + 32);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_125;
          case 0x1Fu:
            uint64_t v70 = *(void *)v14;
            sub_1002238FC(*(void *)v14);
            *(void *)uint64_t v13 = v70;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            uint64_t v71 = *(void *)(v14 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v71)
            {
              *(void *)(v13 + 32) = v71;
              uint64_t v72 = *(void *)(v14 + 48);
              swift_bridgeObjectRetain();
              if (v72)
              {
                *(void *)(v13 + 40) = *(void *)(v14 + 40);
                *(void *)(v13 + 48) = *(void *)(v14 + 48);
                *(void *)(v13 + 56) = *(void *)(v14 + 56);
                swift_retain();
                swift_retain();
                swift_retain();
                goto LABEL_125;
              }
              int v132 = (_OWORD *)(v13 + 40);
              long long v133 = *(_OWORD *)(v14 + 40);
              *(void *)(v13 + 56) = *(void *)(v14 + 56);
            }
            else
            {
              int v132 = (_OWORD *)(v13 + 32);
              long long v133 = *(_OWORD *)(v14 + 32);
              *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
            }
            *int v132 = v133;
LABEL_125:
            swift_storeEnumTagMultiPayload();
            break;
          case 0x23u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_125;
          case 0x24u:
            *(void *)uint64_t v13 = *(void *)v14;
            *(void *)(v13 + 8) = *(void *)(v14 + 8);
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_125;
          default:
            memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v15 - 8) + 64));
            break;
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_127;
    }
  }
  else
  {
    if (!v10)
    {
      if (v4 == a2) {
        return v4;
      }
      sub_1002DB358(v6, (void (*)(void))type metadata accessor for CommandStreamPart);
      int v17 = swift_getEnumCaseMultiPayload();
      if (v17 == 2)
      {
        *(void *)uint64_t v6 = *(void *)v7;
        *(_DWORD *)(v6 + 8) = *(_DWORD *)(v7 + 8);
        *(_DWORD *)(v6 + 12) = *(_DWORD *)(v7 + 12);
        int v32 = *(_DWORD *)(v7 + 16);
        *(_DWORD *)(v6 + 19) = *(_DWORD *)(v7 + 19);
        *(_DWORD *)(v6 + 16) = v32;
        swift_retain();
      }
      else if (v17 == 1)
      {
        uint64_t v33 = *(void *)v7;
        uint64_t v34 = *(void *)(v7 + 8);
        uint64_t v35 = *(void *)(v7 + 16);
        uint64_t v36 = *(void *)(v7 + 24);
        uint64_t v37 = *(void *)(v7 + 32);
        uint64_t v38 = *(void *)(v7 + 40);
        uint64_t v39 = *(void *)(v7 + 48);
        unsigned __int8 v40 = *(unsigned char *)(v7 + 56);
        sub_100258158(v33, v34, v35, v36, v37, v38, v39, v40);
        *(void *)uint64_t v6 = v33;
        *(void *)(v6 + 8) = v34;
        *(void *)(v6 + 16) = v35;
        *(void *)(v6 + 24) = v36;
        *(void *)(v6 + 32) = v37;
        *(void *)(v6 + 40) = v38;
        *(void *)(v6 + 48) = v39;
        *(unsigned char *)(v6 + 56) = v40;
      }
      else
      {
        if (v17)
        {
          size_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
          goto LABEL_11;
        }
        *(void *)uint64_t v6 = *(void *)v7;
        *(void *)(v6 + 8) = *(void *)(v7 + 8);
        uint64_t v18 = *(int *)(type metadata accessor for TaggedCommand() + 20);
        uint64_t v19 = v6 + v18;
        uint64_t v20 = v7 + v18;
        uint64_t v21 = type metadata accessor for Command();
        swift_bridgeObjectRetain();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 2u:
          case 7u:
          case 8u:
          case 0x20u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 1u:
          case 9u:
          case 0xAu:
          case 0x1Bu:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 3u:
            if (*(void *)(v20 + 64))
            {
              uint64_t v73 = *(unsigned __int8 *)(v20 + 32);
              if (v73 == 255)
              {
                long long v74 = *(_OWORD *)v20;
                long long v75 = *(_OWORD *)(v20 + 16);
                long long v76 = *(_OWORD *)(v20 + 48);
                *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
                *(_OWORD *)(v19 + 48) = v76;
                *(_OWORD *)uint64_t v19 = v74;
                *(_OWORD *)(v19 + 16) = v75;
              }
              else
              {
                char v179 = v73 & 1;
                uint64_t v180 = *(void *)v20;
                uint64_t v181 = *(void *)(v20 + 8);
                uint64_t v183 = *(void *)(v20 + 16);
                uint64_t v182 = *(void *)(v20 + 24);
                sub_1001F33C4(*(void *)v20, v181, v183, v182, v73 & 1);
                *(void *)uint64_t v19 = v180;
                *(void *)(v19 + 8) = v181;
                *(void *)(v19 + 16) = v183;
                *(void *)(v19 + 24) = v182;
                *(unsigned char *)(v19 + 32) = v179;
                unint64_t v184 = *(void *)(v20 + 56);
                if (HIBYTE(v184) == 255)
                {
                  long long v185 = *(_OWORD *)(v20 + 40);
                  *(void *)(v19 + 56) = *(void *)(v20 + 56);
                  *(_OWORD *)(v19 + 40) = v185;
                }
                else
                {
                  uint64_t v187 = *(void *)(v20 + 40);
                  uint64_t v188 = *(void *)(v20 + 48);
                  sub_1001F33AC(v187, v188, *(void *)(v20 + 56), HIBYTE(v184) & 1);
                  *(void *)(v19 + 40) = v187;
                  *(void *)(v19 + 48) = v188;
                  *(unsigned char *)(v19 + 62) = BYTE6(v184);
                  *(_WORD *)(v19 + 60) = WORD2(v184);
                  *(_DWORD *)(v19 + 56) = v184;
                  *(unsigned char *)(v19 + 63) = HIBYTE(v184) & 1;
                }
              }
              *(void *)(v19 + 64) = *(void *)(v20 + 64);
              swift_bridgeObjectRetain();
            }
            else
            {
              memcpy((void *)v19, (const void *)v20, 0x48uLL);
            }
            *(void *)(v19 + 72) = *(void *)(v20 + 72);
            *(_DWORD *)(v19 + 80) = *(_DWORD *)(v20 + 80);
            unsigned int v190 = *(_DWORD *)(v20 + 104);
            uint64_t v189 = v20 + 104;
            uint64_t v191 = *(void *)(v189 - 16);
            uint64_t v192 = *(void *)(v189 - 8);
            int v193 = *(unsigned __int8 *)(v189 + 6);
            uint64_t v194 = *(unsigned __int16 *)(v189 + 4) | (v193 << 16);
            char v195 = *(unsigned char *)(v189 + 7);
            swift_bridgeObjectRetain();
            sub_1001F33AC(v191, v192, v190 | (unint64_t)(v194 << 32), v195);
            *(void *)(v19 + 88) = v191;
            *(void *)(v19 + 96) = v192;
            *(unsigned char *)(v19 + 110) = v193;
            *(_WORD *)(v19 + 108) = v194;
            *(_DWORD *)(v19 + 104) = v190;
            *(unsigned char *)(v19 + 111) = v195;
            *(void *)(v19 + 112) = *(void *)(v189 + 8);
            swift_bridgeObjectRetain();
            swift_storeEnumTagMultiPayload();
            break;
          case 4u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(_DWORD *)(v19 + 16) = *(_DWORD *)(v20 + 16);
            unsigned int v78 = *(_DWORD *)(v20 + 40);
            uint64_t v77 = v20 + 40;
            uint64_t v79 = *(void *)(v77 - 16);
            uint64_t v80 = *(void *)(v77 - 8);
            int v81 = *(unsigned __int8 *)(v77 + 6);
            uint64_t v197 = *(unsigned __int16 *)(v77 + 4) | (v81 << 16);
            char v82 = *(unsigned char *)(v77 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1001F33AC(v79, v80, v78 | (unint64_t)(v197 << 32), v82);
            *(void *)(v19 + 24) = v79;
            *(void *)(v19 + 32) = v80;
            *(unsigned char *)(v19 + 46) = v81;
            *(_WORD *)(v19 + 44) = v197;
            *(_DWORD *)(v19 + 40) = v78;
            *(unsigned char *)(v19 + 47) = v82;
            *(void *)(v19 + 48) = *(void *)(v77 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 5u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(_DWORD *)(v19 + 24) = *(_DWORD *)(v20 + 24);
            *(_DWORD *)(v19 + 28) = *(_DWORD *)(v20 + 28);
            int v83 = *(_DWORD *)(v20 + 32);
            *(_DWORD *)(v19 + 35) = *(_DWORD *)(v20 + 35);
            *(_DWORD *)(v19 + 32) = v83;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_152;
          case 6u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(_DWORD *)(v19 + 24) = *(_DWORD *)(v20 + 24);
            *(void *)(v19 + 32) = *(void *)(v20 + 32);
            *(void *)(v19 + 40) = *(void *)(v20 + 40);
            *(void *)(v19 + 48) = *(void *)(v20 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_152;
          case 0xBu:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(_DWORD *)(v19 + 24) = *(_DWORD *)(v20 + 24);
            *(_DWORD *)(v19 + 28) = *(_DWORD *)(v20 + 28);
            int v84 = *(_DWORD *)(v20 + 32);
            *(_DWORD *)(v19 + 35) = *(_DWORD *)(v20 + 35);
            *(_DWORD *)(v19 + 32) = v84;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_152;
          case 0xCu:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0xDu:
          case 0x21u:
          case 0x22u:
            *(void *)uint64_t v19 = *(void *)v20;
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0xEu:
            uint64_t v85 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v85)) {
              goto LABEL_74;
            }
            goto LABEL_132;
          case 0xFu:
            uint64_t v87 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v87))
            {
              uint64_t v88 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v88 - 8) + 64));
            }
            else
            {
              uint64_t v154 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 16))(v19, v20, v154);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v87);
            }
            uint64_t v155 = sub_10000566C(&qword_1007108F8);
            *(void *)(v19 + *(int *)(v155 + 48)) = *(void *)(v20 + *(int *)(v155 + 48));
            *(void *)(v19 + *(int *)(v155 + 64)) = *(void *)(v20 + *(int *)(v155 + 64));
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x10u:
            uint64_t v89 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v89))
            {
              uint64_t v90 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v90 - 8) + 64));
            }
            else
            {
              uint64_t v156 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 16))(v19, v20, v156);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v89);
            }
            uint64_t v157 = sub_10000566C(&qword_1007108F0);
            *(void *)(v19 + *(int *)(v157 + 48)) = *(void *)(v20 + *(int *)(v157 + 48));
            uint64_t v158 = *(int *)(v157 + 64);
            int v159 = (void *)(v19 + v158);
            uint64_t v160 = (uint64_t *)(v20 + v158);
            uint64_t v161 = *v160;
            uint64_t v162 = v160[1];
            swift_bridgeObjectRetain();
            MailboxPriorityInfo.mailboxPriorityOrder.getter();
            void *v159 = v161;
            v159[1] = v162;
            goto LABEL_152;
          case 0x11u:
          case 0x17u:
            uint64_t v91 = *(void *)v20;
            sub_1002238FC(*(void *)v20);
            *(void *)uint64_t v19 = v91;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x12u:
            uint64_t v85 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v85))
            {
LABEL_74:
              uint64_t v86 = sub_10000566C(&qword_1007104D8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v86 - 8) + 64));
            }
            else
            {
LABEL_132:
              uint64_t v150 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 16))(v19, v20, v150);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v85);
            }
            uint64_t v151 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
            uint64_t v152 = v19 + v151;
            uint64_t v153 = v20 + v151;
            *(void *)uint64_t v152 = *(void *)v153;
            *(_DWORD *)(v152 + 8) = *(_DWORD *)(v153 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x13u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_152;
          case 0x14u:
            uint64_t v92 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v92)) {
              goto LABEL_84;
            }
            goto LABEL_139;
          case 0x15u:
            uint64_t v92 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v92))
            {
LABEL_84:
              uint64_t v93 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v93 - 8) + 64));
            }
            else
            {
LABEL_139:
              uint64_t v163 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 16))(v19, v20, v163);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v92);
            }
            uint64_t v164 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
            uint64_t v165 = v19 + v164;
            uint64_t v166 = v20 + v164;
            *(void *)uint64_t v165 = *(void *)v166;
            *(_DWORD *)(v165 + 8) = *(_DWORD *)(v166 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x16u:
            uint64_t v94 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v94))
            {
              uint64_t v95 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v95 - 8) + 64));
            }
            else
            {
              uint64_t v167 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 16))(v19, v20, v167);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v94);
            }
            uint64_t v168 = sub_10000566C(&qword_1007108D8);
            *(void *)(v19 + *(int *)(v168 + 48)) = *(void *)(v20 + *(int *)(v168 + 48));
            *(void *)(v19 + *(int *)(v168 + 64)) = *(void *)(v20 + *(int *)(v168 + 64));
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x18u:
            uint64_t v96 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v96))
            {
              uint64_t v97 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v97 - 8) + 64));
            }
            else
            {
              uint64_t v169 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 16))(v19, v20, v169);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v96);
            }
            uint64_t v170 = sub_10000566C(&qword_1007108D0);
            *(void *)(v19 + *(int *)(v170 + 48)) = *(void *)(v20 + *(int *)(v170 + 48));
            uint64_t v171 = *(int *)(v170 + 64);
            int v172 = (void *)(v19 + v171);
            Swift::Int v173 = (uint64_t *)(v20 + v171);
            uint64_t v174 = *v173;
            uint64_t v175 = v173[1];
            swift_bridgeObjectRetain();
            MailboxPriorityInfo.mailboxPriorityOrder.getter();
            *int v172 = v174;
            v172[1] = v175;
            goto LABEL_152;
          case 0x19u:
            uint64_t v98 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand(v20, 1, v98))
            {
              uint64_t v99 = sub_10000566C(&qword_1007108C8);
              memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v99 - 8) + 64));
            }
            else
            {
              uint64_t v176 = sub_10000566C(&qword_100710538);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 16))(v19, v20, v176);
              storeEnumTagSinglePayload for ClientCommand(v19, 0, 1, v98);
            }
            goto LABEL_152;
          case 0x1Au:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(_DWORD *)(v19 + 12) = *(_DWORD *)(v20 + 12);
            int v100 = *(_DWORD *)(v20 + 16);
            *(_DWORD *)(v19 + 19) = *(_DWORD *)(v20 + 19);
            *(_DWORD *)(v19 + 16) = v100;
            swift_retain();
            goto LABEL_152;
          case 0x1Cu:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(_DWORD *)(v19 + 12) = *(_DWORD *)(v20 + 12);
            int v101 = *(_DWORD *)(v20 + 16);
            *(_DWORD *)(v19 + 19) = *(_DWORD *)(v20 + 19);
            *(_DWORD *)(v19 + 16) = v101;
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x1Du:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(_DWORD *)(v19 + 16) = *(_DWORD *)(v20 + 16);
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x1Eu:
            *(void *)uint64_t v19 = *(void *)v20;
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            *(void *)(v19 + 32) = *(void *)(v20 + 32);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            goto LABEL_152;
          case 0x1Fu:
            uint64_t v102 = *(void *)v20;
            sub_1002238FC(*(void *)v20);
            *(void *)uint64_t v19 = v102;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            *(void *)(v19 + 24) = *(void *)(v20 + 24);
            uint64_t v103 = *(void *)(v20 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v103)
            {
              *(void *)(v19 + 32) = v103;
              uint64_t v104 = *(void *)(v20 + 48);
              swift_bridgeObjectRetain();
              if (v104)
              {
                *(void *)(v19 + 40) = *(void *)(v20 + 40);
                *(void *)(v19 + 48) = *(void *)(v20 + 48);
                *(void *)(v19 + 56) = *(void *)(v20 + 56);
                swift_retain();
                swift_retain();
                swift_retain();
                goto LABEL_152;
              }
              int v177 = (_OWORD *)(v19 + 40);
              long long v178 = *(_OWORD *)(v20 + 40);
              *(void *)(v19 + 56) = *(void *)(v20 + 56);
            }
            else
            {
              int v177 = (_OWORD *)(v19 + 32);
              long long v178 = *(_OWORD *)(v20 + 32);
              *(_OWORD *)(v19 + 48) = *(_OWORD *)(v20 + 48);
            }
            *int v177 = v178;
LABEL_152:
            swift_storeEnumTagMultiPayload();
            break;
          case 0x23u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_152;
          case 0x24u:
            *(void *)uint64_t v19 = *(void *)v20;
            *(void *)(v19 + 8) = *(void *)(v20 + 8);
            *(void *)(v19 + 16) = *(void *)(v20 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_152;
          default:
            memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v21 - 8) + 64));
            break;
        }
      }
      swift_storeEnumTagMultiPayload();
      return v4;
    }
    sub_1002DB358(v6, (void (*)(void))type metadata accessor for CommandStreamPart);
  }
  size_t v16 = *(void *)(*(void *)(sub_10000566C(&qword_100710AE8) - 8) + 64);
LABEL_11:
  memcpy((void *)v6, (const void *)v7, v16);
  return v4;
}

void *initializeWithTake for SynchronizedCommand(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  uint64_t v7 = type metadata accessor for CommandStreamPart();
  if (getEnumTagSinglePayload for ClientCommand((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_10000566C(&qword_100710AE8);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      *uint64_t v5 = *v6;
      uint64_t v9 = *(int *)(type metadata accessor for TaggedCommand() + 20);
      int v10 = (char *)v5 + v9;
      uint64_t v11 = (char *)v6 + v9;
      uint64_t v12 = type metadata accessor for Command();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0xEu:
          uint64_t v13 = sub_10000566C(&qword_1007104C8);
          if (!getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v13)) {
            goto LABEL_25;
          }
          goto LABEL_7;
        case 0xFu:
          uint64_t v15 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v15))
          {
            uint64_t v16 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
          }
          else
          {
            uint64_t v31 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v10, v11, v31);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v15);
          }
          uint64_t v32 = sub_10000566C(&qword_1007108F8);
          *(void *)&v10[*(int *)(v32 + 48)] = *(void *)&v11[*(int *)(v32 + 48)];
          *(void *)&v10[*(int *)(v32 + 64)] = *(void *)&v11[*(int *)(v32 + 64)];
          goto LABEL_40;
        case 0x10u:
          uint64_t v17 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v17))
          {
            uint64_t v18 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
          }
          else
          {
            uint64_t v33 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v10, v11, v33);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v17);
          }
          uint64_t v34 = sub_10000566C(&qword_1007108F0);
          *(void *)&v10[*(int *)(v34 + 48)] = *(void *)&v11[*(int *)(v34 + 48)];
          *(_OWORD *)&v10[*(int *)(v34 + 64)] = *(_OWORD *)&v11[*(int *)(v34 + 64)];
          goto LABEL_40;
        case 0x12u:
          uint64_t v13 = sub_10000566C(&qword_1007104C8);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v13))
          {
LABEL_7:
            uint64_t v14 = sub_10000566C(&qword_1007104D8);
            memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
          }
          else
          {
LABEL_25:
            uint64_t v27 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v10, v11, v27);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v13);
          }
          uint64_t v28 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
          uint64_t v29 = &v10[v28];
          uint64_t v30 = &v11[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          *((_DWORD *)v29 + 2) = *((_DWORD *)v30 + 2);
          goto LABEL_40;
        case 0x14u:
          uint64_t v19 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v19)) {
            goto LABEL_16;
          }
          goto LABEL_32;
        case 0x15u:
          uint64_t v19 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v19))
          {
LABEL_16:
            uint64_t v20 = sub_10000566C(&qword_1007108C8);
            memcpy(v10, v11, *(void *)(*(void *)(v20 - 8) + 64));
          }
          else
          {
LABEL_32:
            uint64_t v35 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v10, v11, v35);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v19);
          }
          uint64_t v36 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
          uint64_t v37 = &v10[v36];
          uint64_t v38 = &v11[v36];
          *(void *)uint64_t v37 = *(void *)v38;
          *((_DWORD *)v37 + 2) = *((_DWORD *)v38 + 2);
          goto LABEL_40;
        case 0x16u:
          uint64_t v21 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v21))
          {
            uint64_t v22 = sub_10000566C(&qword_1007108C8);
            memcpy(v10, v11, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            uint64_t v39 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v10, v11, v39);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v21);
          }
          uint64_t v40 = sub_10000566C(&qword_1007108D8);
          *(void *)&v10[*(int *)(v40 + 48)] = *(void *)&v11[*(int *)(v40 + 48)];
          *(void *)&v10[*(int *)(v40 + 64)] = *(void *)&v11[*(int *)(v40 + 64)];
          goto LABEL_40;
        case 0x18u:
          uint64_t v23 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v23))
          {
            uint64_t v24 = sub_10000566C(&qword_1007108C8);
            memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64));
          }
          else
          {
            uint64_t v41 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v10, v11, v41);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v23);
          }
          uint64_t v42 = sub_10000566C(&qword_1007108D0);
          *(void *)&v10[*(int *)(v42 + 48)] = *(void *)&v11[*(int *)(v42 + 48)];
          *(_OWORD *)&v10[*(int *)(v42 + 64)] = *(_OWORD *)&v11[*(int *)(v42 + 64)];
          goto LABEL_40;
        case 0x19u:
          uint64_t v25 = sub_10000566C(&qword_1007108C0);
          if (getEnumTagSinglePayload for ClientCommand((uint64_t)v11, 1, v25))
          {
            uint64_t v26 = sub_10000566C(&qword_1007108C8);
            memcpy(v10, v11, *(void *)(*(void *)(v26 - 8) + 64));
          }
          else
          {
            uint64_t v43 = sub_10000566C(&qword_100710538);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v10, v11, v43);
            storeEnumTagSinglePayload for ClientCommand((uint64_t)v10, 0, 1, v25);
          }
LABEL_40:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    storeEnumTagSinglePayload for ClientCommand((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for SynchronizedCommand(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (_OWORD *)((char *)a1 + v5);
  uint64_t v7 = (_OWORD *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for CommandStreamPart();
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand((uint64_t)v6, 1, v8);
  int v10 = getEnumTagSinglePayload for ClientCommand((uint64_t)v7, 1, v8);
  if (EnumTagSingle)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        *uint64_t v6 = *v7;
        uint64_t v12 = *(int *)(type metadata accessor for TaggedCommand() + 20);
        uint64_t v13 = (char *)v6 + v12;
        uint64_t v14 = (char *)v7 + v12;
        uint64_t v15 = type metadata accessor for Command();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0xEu:
            uint64_t v16 = sub_10000566C(&qword_1007104C8);
            if (!getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v16)) {
              goto LABEL_35;
            }
            goto LABEL_14;
          case 0xFu:
            uint64_t v24 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v24))
            {
              uint64_t v25 = sub_10000566C(&qword_1007104D8);
              memcpy(v13, v14, *(void *)(*(void *)(v25 - 8) + 64));
            }
            else
            {
              uint64_t v52 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v13, v14, v52);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v24);
            }
            uint64_t v53 = sub_10000566C(&qword_1007108F8);
            *(void *)&v13[*(int *)(v53 + 48)] = *(void *)&v14[*(int *)(v53 + 48)];
            *(void *)&v13[*(int *)(v53 + 64)] = *(void *)&v14[*(int *)(v53 + 64)];
            goto LABEL_67;
          case 0x10u:
            uint64_t v26 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v26))
            {
              uint64_t v27 = sub_10000566C(&qword_1007104D8);
              memcpy(v13, v14, *(void *)(*(void *)(v27 - 8) + 64));
            }
            else
            {
              uint64_t v54 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v13, v14, v54);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v26);
            }
            uint64_t v55 = sub_10000566C(&qword_1007108F0);
            *(void *)&v13[*(int *)(v55 + 48)] = *(void *)&v14[*(int *)(v55 + 48)];
            *(_OWORD *)&v13[*(int *)(v55 + 64)] = *(_OWORD *)&v14[*(int *)(v55 + 64)];
            goto LABEL_67;
          case 0x12u:
            uint64_t v16 = sub_10000566C(&qword_1007104C8);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v16))
            {
LABEL_14:
              uint64_t v17 = sub_10000566C(&qword_1007104D8);
              memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
            }
            else
            {
LABEL_35:
              uint64_t v36 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v13, v14, v36);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v16);
            }
            uint64_t v37 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
            uint64_t v38 = &v13[v37];
            uint64_t v39 = &v14[v37];
            *(void *)uint64_t v38 = *(void *)v39;
            *((_DWORD *)v38 + 2) = *((_DWORD *)v39 + 2);
            goto LABEL_67;
          case 0x14u:
            uint64_t v28 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v28)) {
              goto LABEL_26;
            }
            goto LABEL_59;
          case 0x15u:
            uint64_t v28 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v28))
            {
LABEL_26:
              uint64_t v29 = sub_10000566C(&qword_1007108C8);
              memcpy(v13, v14, *(void *)(*(void *)(v29 - 8) + 64));
            }
            else
            {
LABEL_59:
              uint64_t v56 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 32))(v13, v14, v56);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v28);
            }
            uint64_t v57 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
            uint64_t v58 = &v13[v57];
            uint64_t v59 = &v14[v57];
            *(void *)uint64_t v58 = *(void *)v59;
            *((_DWORD *)v58 + 2) = *((_DWORD *)v59 + 2);
            goto LABEL_67;
          case 0x16u:
            uint64_t v30 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v30))
            {
              uint64_t v31 = sub_10000566C(&qword_1007108C8);
              memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64));
            }
            else
            {
              uint64_t v60 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v13, v14, v60);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v30);
            }
            uint64_t v61 = sub_10000566C(&qword_1007108D8);
            *(void *)&v13[*(int *)(v61 + 48)] = *(void *)&v14[*(int *)(v61 + 48)];
            *(void *)&v13[*(int *)(v61 + 64)] = *(void *)&v14[*(int *)(v61 + 64)];
            goto LABEL_67;
          case 0x18u:
            uint64_t v32 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v32))
            {
              uint64_t v33 = sub_10000566C(&qword_1007108C8);
              memcpy(v13, v14, *(void *)(*(void *)(v33 - 8) + 64));
            }
            else
            {
              uint64_t v62 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v13, v14, v62);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v32);
            }
            uint64_t v63 = sub_10000566C(&qword_1007108D0);
            *(void *)&v13[*(int *)(v63 + 48)] = *(void *)&v14[*(int *)(v63 + 48)];
            *(_OWORD *)&v13[*(int *)(v63 + 64)] = *(_OWORD *)&v14[*(int *)(v63 + 64)];
            goto LABEL_67;
          case 0x19u:
            uint64_t v34 = sub_10000566C(&qword_1007108C0);
            if (getEnumTagSinglePayload for ClientCommand((uint64_t)v14, 1, v34))
            {
              uint64_t v35 = sub_10000566C(&qword_1007108C8);
              memcpy(v13, v14, *(void *)(*(void *)(v35 - 8) + 64));
            }
            else
            {
              uint64_t v64 = sub_10000566C(&qword_100710538);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v13, v14, v64);
              storeEnumTagSinglePayload for ClientCommand((uint64_t)v13, 0, 1, v34);
            }
LABEL_67:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload();
      }
      storeEnumTagSinglePayload for ClientCommand((uint64_t)v6, 0, 1, v8);
      return a1;
    }
    goto LABEL_7;
  }
  if (v10)
  {
    sub_1002DB358((uint64_t)v6, (void (*)(void))type metadata accessor for CommandStreamPart);
LABEL_7:
    size_t v11 = *(void *)(*(void *)(sub_10000566C(&qword_100710AE8) - 8) + 64);
LABEL_8:
    memcpy(v6, v7, v11);
    return a1;
  }
  if (a1 == a2) {
    return a1;
  }
  sub_1002DB358((uint64_t)v6, (void (*)(void))type metadata accessor for CommandStreamPart);
  if (swift_getEnumCaseMultiPayload())
  {
    size_t v11 = *(void *)(*(void *)(v8 - 8) + 64);
    goto LABEL_8;
  }
  *uint64_t v6 = *v7;
  uint64_t v18 = *(int *)(type metadata accessor for TaggedCommand() + 20);
  uint64_t v19 = (char *)v6 + v18;
  uint64_t v20 = (char *)v7 + v18;
  uint64_t v21 = type metadata accessor for Command();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0xEu:
      uint64_t v22 = sub_10000566C(&qword_1007104C8);
      if (!getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v22)) {
        goto LABEL_71;
      }
      goto LABEL_17;
    case 0xFu:
      uint64_t v40 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v40))
      {
        uint64_t v41 = sub_10000566C(&qword_1007104D8);
        memcpy(v19, v20, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v70 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32))(v19, v20, v70);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v40);
      }
      uint64_t v71 = sub_10000566C(&qword_1007108F8);
      *(void *)&v19[*(int *)(v71 + 48)] = *(void *)&v20[*(int *)(v71 + 48)];
      *(void *)&v19[*(int *)(v71 + 64)] = *(void *)&v20[*(int *)(v71 + 64)];
      goto LABEL_86;
    case 0x10u:
      uint64_t v42 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v42))
      {
        uint64_t v43 = sub_10000566C(&qword_1007104D8);
        memcpy(v19, v20, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v72 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32))(v19, v20, v72);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v42);
      }
      uint64_t v73 = sub_10000566C(&qword_1007108F0);
      *(void *)&v19[*(int *)(v73 + 48)] = *(void *)&v20[*(int *)(v73 + 48)];
      *(_OWORD *)&v19[*(int *)(v73 + 64)] = *(_OWORD *)&v20[*(int *)(v73 + 64)];
      goto LABEL_86;
    case 0x12u:
      uint64_t v22 = sub_10000566C(&qword_1007104C8);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v22))
      {
LABEL_17:
        uint64_t v23 = sub_10000566C(&qword_1007104D8);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
LABEL_71:
        uint64_t v66 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v19, v20, v66);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v22);
      }
      uint64_t v67 = *(int *)(sub_10000566C(&qword_1007108E8) + 48);
      int v68 = &v19[v67];
      int v69 = &v20[v67];
      *(void *)int v68 = *(void *)v69;
      *((_DWORD *)v68 + 2) = *((_DWORD *)v69 + 2);
      goto LABEL_86;
    case 0x14u:
      uint64_t v44 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v44)) {
        goto LABEL_45;
      }
      goto LABEL_78;
    case 0x15u:
      uint64_t v44 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v44))
      {
LABEL_45:
        uint64_t v45 = sub_10000566C(&qword_1007108C8);
        memcpy(v19, v20, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
LABEL_78:
        uint64_t v74 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32))(v19, v20, v74);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v44);
      }
      uint64_t v75 = *(int *)(sub_10000566C(&qword_1007108E0) + 48);
      long long v76 = &v19[v75];
      uint64_t v77 = &v20[v75];
      *(void *)long long v76 = *(void *)v77;
      *((_DWORD *)v76 + 2) = *((_DWORD *)v77 + 2);
      goto LABEL_86;
    case 0x16u:
      uint64_t v46 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v46))
      {
        uint64_t v47 = sub_10000566C(&qword_1007108C8);
        memcpy(v19, v20, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        uint64_t v78 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32))(v19, v20, v78);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v46);
      }
      uint64_t v79 = sub_10000566C(&qword_1007108D8);
      *(void *)&v19[*(int *)(v79 + 48)] = *(void *)&v20[*(int *)(v79 + 48)];
      *(void *)&v19[*(int *)(v79 + 64)] = *(void *)&v20[*(int *)(v79 + 64)];
      goto LABEL_86;
    case 0x18u:
      uint64_t v48 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v48))
      {
        uint64_t v49 = sub_10000566C(&qword_1007108C8);
        memcpy(v19, v20, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        uint64_t v80 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 32))(v19, v20, v80);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v48);
      }
      uint64_t v81 = sub_10000566C(&qword_1007108D0);
      *(void *)&v19[*(int *)(v81 + 48)] = *(void *)&v20[*(int *)(v81 + 48)];
      *(_OWORD *)&v19[*(int *)(v81 + 64)] = *(_OWORD *)&v20[*(int *)(v81 + 64)];
      goto LABEL_86;
    case 0x19u:
      uint64_t v50 = sub_10000566C(&qword_1007108C0);
      if (getEnumTagSinglePayload for ClientCommand((uint64_t)v20, 1, v50))
      {
        uint64_t v51 = sub_10000566C(&qword_1007108C8);
        memcpy(v19, v20, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        uint64_t v82 = sub_10000566C(&qword_100710538);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v19, v20, v82);
        storeEnumTagSinglePayload for ClientCommand((uint64_t)v19, 0, 1, v50);
      }
LABEL_86:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizedCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DAE98);
}

uint64_t sub_1002DAE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_10000566C(&qword_100710AE8);
  return getEnumTagSinglePayload for ClientCommand(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SynchronizedCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DAEFC);
}

uint64_t sub_1002DAEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_10000566C(&qword_100710AE8);
  return storeEnumTagSinglePayload for ClientCommand(v5, a2, a2, v6);
}

void sub_1002DAF50()
{
  sub_1002DAFEC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1002DAFEC()
{
  if (!qword_100712240)
  {
    type metadata accessor for CommandStreamPart();
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100712240);
    }
  }
}

uint64_t destroy for CommandParser()
{
  return swift_release();
}

uint64_t initializeWithCopy for CommandParser(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CommandParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  return a1;
}

uint64_t assignWithTake for CommandParser(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandParser(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 81))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandParser()
{
  return &type metadata for CommandParser;
}

ValueMetadata *type metadata accessor for CommandParser.Mode()
{
  return &type metadata for CommandParser.Mode;
}

unint64_t sub_1002DB258()
{
  unint64_t result = qword_100712270;
  if (!qword_100712270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712270);
  }
  return result;
}

uint64_t sub_1002DB2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002D3C9C(a1, a2, a3, *(void *)(v4 + 16), a4);
}

uint64_t sub_1002DB2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002D3EDC(a1, a2, a3, *(void *)(v4 + 16), a4);
}

uint64_t sub_1002DB2DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002D3F84(a1);
}

uint64_t sub_1002DB2F8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1002DB358(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1002DB3B0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1001F3BBC();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1002DB410(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002DB46C(uint64_t a1)
{
  return storeEnumTagSinglePayload for ClientCommand(a1, 1, 1, v1);
}

uint64_t sub_1002DB488@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)()@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v9 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v19 = a3;
      return swift_willThrow();
    }
    uint64_t v15 = result;
    uint64_t v17 = *(void *)result;
    uint64_t v18 = *(void *)(result + 8);
    __int16 v21 = *(_WORD *)(result + 20);
    int v22 = *(_DWORD *)(result + 16);
    char v20 = *(unsigned char *)(result + 22);
    swift_retain();
    sub_1002DB7F8(v15, v9, a3, a4, a5, a6, a7, a8);
    if (v8)
    {
      swift_release();
      *(void *)uint64_t v15 = v17;
      *(void *)(v15 + 8) = v18;
      *(_DWORD *)(v15 + 16) = v22;
      *(_WORD *)(v15 + 20) = v21;
      *(unsigned char *)(v15 + 22) = v20;
      return swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_1002DB5BC()
{
  unint64_t result = qword_100712278;
  if (!qword_100712278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712278);
  }
  return result;
}

double sub_1002DB608@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v24 = sub_1002DC3C4;
  uint64_t v25 = &v26;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v16 = sub_1002DC400;
  uint64_t v17 = &v18;
  sub_10033C7D0(v31, sub_1002DC3E4, v23, sub_1002DC90C, v15, a1, a2, a3, 0xD000000000000020, 0x80000001005E63C0, 87);
  if (!v8)
  {
    uint64_t v11 = v32;
    char v12 = v33;
    double result = *(double *)v31;
    long long v13 = v31[1];
    long long v14 = v31[2];
    *(_OWORD *)a8 = v31[0];
    *(_OWORD *)(a8 + 16) = v13;
    *(_OWORD *)(a8 + 32) = v14;
    *(void *)(a8 + 48) = v11;
    *(unsigned char *)(a8 + 56) = v12;
  }
  return result;
}

void sub_1002DB704()
{
}

void sub_1002DB7F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)()@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031F474(a1, a2, a3);
  if (!v8)
  {
    uint64_t v31 = sub_10031E368(v17, v18, v19 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 2317);
    uint64_t v33 = v20;
    swift_release();
    sub_10031E1C0();
    sub_100308D44(a1, a2, a3, a4, a5, (uint64_t)a6, a7, v21, v31, v33, a4, a5, a6, v35, v36, v37, v38, a7, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46);
    uint64_t v23 = v22;
    unsigned int v25 = v24;
    unint64_t v27 = v26;
    unint64_t v28 = HIDWORD(v24);
    swift_beginAccess();
    v29._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v23 + 24) + ((v27 >> 24) & 0xFFFF00 | BYTE6(v27)) + v25, v28 - v25);
    NIOIMAPCore2::MailboxName v47 = MailboxName.init(_:)(v29);
    uint64_t rawValue = v47.bytes._rawValue;
    LODWORD(v27) = v47._hashValue._value;
    swift_release();
    *(void *)a8 = v32;
    *(void *)(a8 + 8) = v34;
    *(void *)(a8 + 16) = rawValue;
    *(void *)(a8 + 24) = v27;
    type metadata accessor for CommandStreamPart();
    *(void *)(a8 + 40) = 0;
    *(void *)(a8 + 48) = 0;
    *(void *)(a8 + 32) = 0;
    *(unsigned char *)(a8 + 56) = 0;
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002DB9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (a2 + 1 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v9 = a3;
      goto LABEL_6;
    }
    sub_1002DC964();
    uint64_t v5 = sub_1002DC9A8();
    sub_100338020(v5, v6, v7, v8, 0x7EuLL, 0xE100000000000000, 0);
    if (v3)
    {
      swift_release();
      sub_1002DC990();
LABEL_6:
      swift_willThrow();
      return;
    }
    swift_release();
  }
}

void sub_1002DBA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002DBA98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_retain();
  uint64_t v9 = sub_1002DC944();
  sub_10031FCA4(v9);
  if (!v4)
  {
    sub_10031E2BC(a1, a2, a3);
    swift_retain();
    sub_1002DC944();
    sub_10031FA68();
    *(void *)a4 = v12;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = v14;
    *(void *)(a4 + 24) = v15;
    *(void *)(a4 + 32) = v16;
    *(void *)(a4 + 40) = v17;
    *(void *)(a4 + 48) = v10;
    *(unsigned char *)(a4 + 56) = v11 & 1;
  }
}

__n128 sub_1002DBC5C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  swift_retain();
  sub_10031FC00(v23, a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    unint64_t v18 = v23[1];
    unint64_t v19 = v24;
    unint64_t v20 = v25;
    unint64_t v21 = v27;
    unsigned __int8 v22 = v28;
    __n128 result = v26;
    a8->n128_u64[0] = v23[0];
    a8->n128_u64[1] = v18;
    a8[1].n128_u64[0] = v19;
    a8[1].n128_u64[1] = v20;
    a8[2] = result;
    a8[3].n128_u64[0] = v21;
    a8[3].n128_u8[8] = v22;
  }
  return result;
}

__n128 sub_1002DBD14@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  swift_retain();
  sub_10031FD9C(a1, a2);
  if (!v3)
  {
    __n128 result = v12;
    a3->n128_u64[0] = v8;
    a3->n128_u64[1] = v9;
    a3[1].n128_u64[0] = v10;
    a3[1].n128_u64[1] = v11;
    a3[2] = v12;
    a3[3].n128_u64[0] = 0;
    a3[3].n128_u8[8] = 0x80;
  }
  return result;
}

void *sub_1002DBDC8@<X0>(void *(*a1)(void *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  __n128 result = a1(v5);
  if (!v2) {
    return (void *)sub_1002DB410((uint64_t)v5, a2);
  }
  return result;
}

void sub_1002DBE18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  swift_retain();
  sub_1002DC924();
  sub_100329B34();
  if (!v8)
  {
    uint64_t v30 = a8;
    if (v17) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = _swiftEmptyArrayStorage;
    }
    swift_retain();
    sub_1002DC924();
    uint64_t v19 = sub_100329C98();
    int v25 = v20;
    uint64_t v26 = v19;
    unint64_t v27 = v18;
    uint64_t v28 = 0;
    *(void *)&long long v29 = _swiftEmptyArrayStorage;
    *((void *)&v29 + 1) = _swiftEmptyArrayStorage;
    __chkstk_darwin(v19);
    _OWORD v24[2] = a4;
    v24[3] = a5;
    v24[4] = a6;
    v24[5] = a7;
    sub_10031E504(a1, a2, a3, (uint64_t)sub_1002DC488, (uint64_t)v24, (uint64_t)&v28);
    uint64_t v21 = v28;
    unsigned __int8 v22 = v30;
    uint64_t v23 = v26;
    *uint64_t v30 = v27;
    v22[1] = v23;
    *((unsigned char *)v22 + 16) = v25 & 1;
    v22[3] = v21;
    *((_OWORD *)v22 + 2) = v29;
  }
}

void sub_1002DBFA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8) {
    sub_100309DC4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

#error "1002DC0BC: call analysis failed (funcsize=46)"

uint64_t *sub_1002DC0E4(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0 || (sub_10031E2BC((uint64_t)a1, a2, a3), !v4))
  {
    sub_10031E1C0();
    if (!v4)
    {
      unint64_t v9 = sub_10032D3F0(a1, a2, a3, 1);
      uint64_t v5 = v9;
      if (((unint64_t)v9 & 0x8000000000000000) != 0)
      {
        sub_100296090();
        swift_allocError();
        *unint64_t v11 = 0xD000000000000011;
        v11[1] = 0x80000001005E65D0;
        _OWORD v11[2] = 0xD000000000000020;
        v11[3] = 0x80000001005E63C0;
        _OWORD v11[4] = 167;
        swift_willThrow();
      }
      else
      {
        sub_100329954();
        sub_10031E1C0();
        sub_10032964C();
      }
    }
  }
  return v5;
}

void sub_1002DC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (a2 + 1 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *unint64_t v9 = a3;
      goto LABEL_6;
    }
    sub_1002DC964();
    uint64_t v5 = sub_1002DC9A8();
    sub_100338020(v5, v6, v7, v8, 0x2BuLL, 0xE100000000000000, 0);
    if (v3)
    {
      swift_release();
      sub_1002DC990();
LABEL_6:
      swift_willThrow();
      return;
    }
    swift_release();
  }
}

uint64_t sub_1002DC33C()
{
  return 0;
}

uint64_t sub_1002DC37C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002DC33C();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
  }
  return result;
}

double sub_1002DC3C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  *(void *)&double result = sub_1002DBD14(a1, a2, a3).n128_u64[0];
  return result;
}

void *sub_1002DC3E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DBDC8(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

double sub_1002DC400@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  *(void *)&double result = sub_1002DBC5C(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4).n128_u64[0];
  return result;
}

uint64_t sub_1002DC420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007104A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1002DC488(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1002DBFA8(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4);
}

uint64_t sub_1002DC4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DC518(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_1002DC028);
}

uint64_t sub_1002DC4D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002DC544(a1);
}

uint64_t sub_1002DC4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DC518(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_1002DC0E4);
}

uint64_t sub_1002DC518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a4(a1, a2, a3, *(unsigned __int8 *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48));
}

uint64_t sub_1002DC544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

uint64_t sub_1002DC594()
{
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t _s23AppendOrCatenateMessageOwxx()
{
  return sub_1002DC60C();
}

uint64_t sub_1002DC60C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _s23AppendOrCatenateMessageOwcp(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  char v10 = *((unsigned char *)a2 + 56);
  sub_1002DC594();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t _s23AppendOrCatenateMessageOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  char v10 = *((unsigned char *)a2 + 56);
  sub_1002DC594();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  sub_1002DC60C();
  return a1;
}

uint64_t _s23AppendOrCatenateMessageOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = v4;
  sub_1002DC60C();
  return a1;
}

uint64_t _s23AppendOrCatenateMessageOwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 57))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 16) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double _s23AppendOrCatenateMessageOwst(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 56) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 2 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(unsigned char *)(a1 + 56) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1002DC8AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 7;
}

uint64_t sub_1002DC8B8(uint64_t result)
{
  *(unsigned char *)(result + 56) &= ~0x80u;
  return result;
}

int8x16_t sub_1002DC8C8(int8x16_t *a1, char a2)
{
  __int8 v2 = a1[3].i8[8] & 1 | (a2 << 7);
  a1[1].i64[0] &= 1uLL;
  int8x16_t result = vandq_s8(a1[2], (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFF8uLL));
  a1[2] = result;
  a1[3].i8[8] = v2;
  return result;
}

ValueMetadata *_s23AppendOrCatenateMessageOMa()
{
  return &_s23AppendOrCatenateMessageON;
}

void *sub_1002DC90C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DC3E4(a1);
}

uint64_t sub_1002DC924()
{
  return v0;
}

uint64_t sub_1002DC944()
{
  return v0;
}

uint64_t sub_1002DC964()
{
  return swift_retain();
}

void sub_1002DC990()
{
  *(void *)uint64_t v0 = v1;
  *(void *)(v0 + 8) = v5;
  *(_DWORD *)(v0 + 16) = v2;
  *(_WORD *)(v0 + 20) = v3;
  *(unsigned char *)(v0 + 22) = v4;
}

uint64_t sub_1002DC9A8()
{
  return v0;
}

uint64_t sub_1002DC9BC()
{
  sub_1002E1CA8();
  uint64_t v2 = v1;
  sub_1002DCAA8();
  if (v0)
  {
    swift_retain();
    uint64_t v3 = sub_1002DC944();
    sub_1003203D8(v3);
    swift_errorRelease();
    sub_10013A988((uint64_t)v6, (uint64_t)v5);
    sub_10013A988((uint64_t)v5, (uint64_t)v8);
  }
  else
  {
    sub_10013AE3C((uint64_t)v7, (uint64_t)v5);
    sub_10013AE3C((uint64_t)v5, (uint64_t)v6);
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v6);
    sub_10013A988((uint64_t)v6, (uint64_t)v8);
  }
  return sub_10013A988((uint64_t)v8, v2);
}

void *sub_1002DCAA8()
{
  sub_1002E1FA8();
  sub_1002E1F6C();
  sub_1002E1E00();
  int8x16_t result = sub_10033C7D0(v10, v2, v3, v4, v5, v6, v7, v8, v9, 0x80000001005E63C0, 56);
  if (!v1)
  {
    sub_10013AE3C((uint64_t)v13, (uint64_t)v12);
    return (void *)sub_10013AE3C((uint64_t)v12, v0);
  }
  return result;
}

void sub_1002DCB84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_1002DCCA0(a1, a2, a3, a4, a5, a6, a7, __src);
    sub_10031E1C0();
    memcpy(v17, __src, 0xB0uLL);
    sub_1002E18C8((uint64_t)v17);
    sub_10013AE3C((uint64_t)v17, a8);
  }
}

void *sub_1002DCCA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v28 = sub_1002E18D0;
  long long v29 = &v30;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  int v20 = sub_1002E1904;
  uint64_t v21 = &v22;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  __n128 v12 = sub_1002E1920;
  uint64_t v13 = &v14;
  int8x16_t result = sub_100309048(__src, sub_1002E18EC, v27, sub_1002E18EC, v19, sub_1002E18EC, v11, a1, a2, a3, 0xD000000000000020, 0x80000001005E63C0, 438);
  if (!v8) {
    return memcpy(a8, __src, 0xB0uLL);
  }
  return result;
}

void sub_1002DCDCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    swift_retain();
    sub_10032047C(&v31, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v17 = v31;
    uint64_t v21 = v32;
    uint64_t v18 = v33;
    uint64_t v24 = v34;
    uint64_t v25 = v35;
    uint64_t v26 = v36;
    uint64_t v27 = v37;
    uint64_t v28 = v38;
    uint64_t v29 = v39;
    uint64_t v30 = v40;
    uint64_t v46 = v41;
    uint64_t v19 = v44;
    uint64_t v22 = v43;
    uint64_t v23 = v42;
    uint64_t v20 = v45;
    sub_10031E1C0();
    uint64_t v31 = v17;
    uint64_t v32 = v21;
    uint64_t v33 = v18;
    uint64_t v34 = v24;
    uint64_t v35 = v25;
    uint64_t v36 = v26;
    uint64_t v37 = v27;
    uint64_t v38 = v28;
    uint64_t v39 = v29;
    uint64_t v40 = v30;
    uint64_t v41 = v46;
    uint64_t v42 = v23;
    uint64_t v43 = v22;
    uint64_t v44 = v19;
    uint64_t v45 = v20;
    sub_1002E157C((uint64_t)&v31);
    sub_10013AE3C((uint64_t)&v31, a8);
  }
}

void *sub_1002DCFA4@<X0>(void *(*a1)(void *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  int8x16_t result = a1(v5);
  if (!v2) {
    return (void *)sub_10013AE3C((uint64_t)v5, a2);
  }
  return result;
}

void sub_1002DCFF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10031E1C0();
  uint64_t v9 = v4;
  if (v4) {
    return;
  }
  if (__OFADD__(a2, 1)) {
    goto LABEL_92;
  }
  if (a2 + 1 >= a3)
  {
LABEL_72:
    sub_1002DB5BC();
    sub_10020DD10();
    *uint64_t v48 = a3;
    goto LABEL_75;
  }
  uint64_t v81 = a2 + 1;
  uint64_t v77 = a2;
  uint64_t v79 = a3;
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v10 < v11)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v12 = 0;
  uint64_t v84 = 1;
  uint64_t v78 = a4;
  while (2)
  {
    uint64_t v85 = *(unsigned __int16 *)(a1 + 20);
    uint64_t v82 = *(unsigned int *)(a1 + 16);
    uint64_t v83 = *(unsigned __int8 *)(a1 + 22);
    uint64_t v13 = v83 | (v85 << 8);
    if ((int)v82 - (int)v13 < v10) {
      goto LABEL_95;
    }
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)a1;
    unint64_t v16 = v10 - v11;
    if (v10 == v11)
    {
      int v49 = v11;
LABEL_74:
      sub_1002E1490();
      sub_10020DD10();
      swift_retain();
      swift_willThrow();
      uint64_t v50 = swift_release();
      *(void *)a1 = v15;
      *(_DWORD *)(a1 + 8) = v11;
      *(_DWORD *)(a1 + 12) = v49;
      sub_1002E1F08(v50, v51, v52, v53, v54, v55, v56, v57, v76, v77, v78, v79, v80, v81, v82, SHIDWORD(v82), v83, v84, v85);
      goto LABEL_75;
    }
    uint64_t v90 = v9;
    int v17 = v11;
    unsigned int v88 = v10;
    unint64_t v18 = v10;
    swift_beginAccess();
    unint64_t v19 = 0;
    while (1)
    {
      if (v11 + v19 >= v18)
      {
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      if (v19 >= v16) {
        goto LABEL_91;
      }
      unsigned int v20 = *(unsigned __int8 *)(*(void *)(v15 + 24) + v11 + v13 + v19);
      BOOL v21 = v20 > 0x29 || ((1 << v20) & 0x30400000000) == 0;
      if (!v21 || v20 == 123) {
        break;
      }
      if (v18 - v11 == ++v19)
      {
        int v49 = v88;
        goto LABEL_74;
      }
    }
    if ((uint64_t)(v18 - v19) < v11) {
      goto LABEL_100;
    }
    Swift::UInt32 v22 = v13 + v11;
    if (__CFADD__(v13, v11)) {
      goto LABEL_101;
    }
    if (HIBYTE(v22))
    {
      swift_retain();
      unint64_t v80 = v80 & 0xFF00000000000000 | v82 | (v85 << 32) | (v83 << 48);
      ByteBuffer._copyIntoByteBufferWithSliceIndex0_slowPath(index:length:)(v11, v19, v15);
      unint64_t v24 = v23;
      swift_release();
      swift_release();
      unint64_t v25 = HIDWORD(v24);
    }
    else
    {
      _UInt24.init(_:)(v22);
      LODWORD(v24) = 0;
      LODWORD(v25) = v19;
    }
    unsigned int v26 = v17 + v19;
    if (__CFADD__(v17, v19))
    {
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    *(_DWORD *)(a1 + 8) = v26;
    if (v88 == v26) {
      goto LABEL_77;
    }
    a3 = v26 + 1;
    if (v26 == -1) {
      goto LABEL_103;
    }
    uint64_t v12 = v14 + (v25 - v24) + 1;
    LODWORD(v27) = *(unsigned __int8 *)(*(void *)(v15 + 24) + v13 + v26);
    *(_DWORD *)(a1 + 8) = a3;
    switch(v27)
    {
      case '""':
        char v30 = 1;
        uint64_t v9 = v90;
LABEL_42:
        if (v12 >= 200000)
        {
LABEL_78:
          sub_100296090();
          uint64_t v58 = sub_10020DD10();
          sub_1002E1E50(v58, v59);
          v60[2] = v61;
          v60[3] = 0x80000001005E63C0;
          uint64_t v62 = 86;
LABEL_85:
          v60[4] = v62;
          goto LABEL_75;
        }
        while (2)
        {
          if (v30)
          {
            uint64_t v34 = *(unsigned int *)(a1 + 8);
            unint64_t v33 = *(unsigned int *)(a1 + 12);
            if (v33 < v34) {
              goto LABEL_93;
            }
            uint64_t v35 = *(unsigned int *)(a1 + 16);
            uint64_t v36 = *(unsigned __int16 *)(a1 + 20);
            uint64_t v37 = *(unsigned __int8 *)(a1 + 22);
            uint64_t v38 = v37 | (v36 << 8);
            if ((int)v35 - (int)v38 >= v33)
            {
              uint64_t v89 = v12;
              uint64_t v39 = *(void *)a1;
              if (v33 != v34)
              {
                uint64_t v91 = v9;
                unint64_t v27 = (v33 - v34);
                uint64_t v86 = (void *)(v39 + 24);
                uint64_t v87 = *(unsigned __int16 *)(a1 + 20);
                swift_beginAccess();
                unint64_t v40 = 0;
                while (1)
                {
                  if (v34 + v40 >= v33)
                  {
                    __break(1u);
LABEL_83:
                    __break(1u);
                    goto LABEL_84;
                  }
                  if (v40 >= v27) {
                    goto LABEL_83;
                  }
                  int v41 = *(unsigned __int8 *)(*(void *)(v39 + 24) + v34 + v38 + v40);
                  if (v41 == 34 || v41 == 92) {
                    break;
                  }
                  if (v33 - v34 == ++v40)
                  {
                    LOWORD(v36) = v87;
                    goto LABEL_73;
                  }
                }
                if ((uint64_t)(v33 - v40) < v34) {
                  goto LABEL_96;
                }
                Swift::UInt32 v42 = v38 + v34;
                if (!__CFADD__(v38, v34))
                {
                  if (HIBYTE(v42))
                  {
                    swift_retain();
                    unint64_t v76 = v76 & 0xFF00000000000000 | v35 | (v87 << 32) | (v37 << 48);
                    ByteBuffer._copyIntoByteBufferWithSliceIndex0_slowPath(index:length:)(v34, v40, v39);
                    unint64_t v44 = v43;
                    swift_release();
                    swift_release();
                    unint64_t v45 = HIDWORD(v44);
                  }
                  else
                  {
                    _UInt24.init(_:)(v42);
                    LODWORD(v44) = 0;
                    LODWORD(v45) = v40;
                  }
                  unsigned int v46 = v34 + v40;
                  if (!__CFADD__(v34, v40))
                  {
                    *(_DWORD *)(a1 + 8) = v46;
                    if (v33 == v46) {
                      goto LABEL_77;
                    }
                    unsigned int v47 = v46 + 1;
                    if (v46 != -1)
                    {
                      uint64_t v12 = v89 + (v45 - v44) + 1;
                      a3 = *(unsigned __int8 *)(*v86 + v38 + v46);
                      *(_DWORD *)(a1 + 8) = v47;
                      if (a3 != 92)
                      {
                        uint64_t v9 = v91;
                        if (a3 != 34)
                        {
                          unint64_t v92 = 0;
                          unint64_t v93 = 0xE000000000000000;
                          sub_1005E2C80(50);
                          swift_bridgeObjectRelease();
                          sub_1002E1FC8();
                          char v94 = a3;
                          v95._uint64_t countAndFlagsBits = sub_1005E3230();
                          sub_1005E1E30(v95);
                          swift_bridgeObjectRelease();
                          v96._uint64_t object = (void *)0x80000001005E6650;
                          v96._uint64_t countAndFlagsBits = 0xD000000000000020;
                          sub_1005E1E30(v96);
                          unint64_t v63 = v92;
                          unint64_t v64 = v93;
                          sub_100296090();
                          sub_10020DD10();
                          *uint64_t v60 = v63;
                          v60[1] = v64;
                          v60[2] = 0xD000000000000020;
                          v60[3] = 0x80000001005E63C0;
                          uint64_t v62 = 135;
                          goto LABEL_85;
                        }
                        char v30 = 0;
                        goto LABEL_68;
                      }
                      uint64_t v9 = v91;
                      if (v33 == v47) {
                        goto LABEL_77;
                      }
                      if (v46 != -2)
                      {
                        *(_DWORD *)(a1 + 8) = v46 + 2;
                        ++v12;
                        char v30 = 1;
LABEL_68:
                        if (v12 < 200000) {
                          continue;
                        }
                        goto LABEL_78;
                      }
LABEL_104:
                      __break(1u);
LABEL_105:
                      __break(1u);
LABEL_106:
                      __break(1u);
                      return;
                    }
                    goto LABEL_99;
                  }
LABEL_98:
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  __break(1u);
                  goto LABEL_102;
                }
LABEL_97:
                __break(1u);
                goto LABEL_98;
              }
              LODWORD(v33) = *(_DWORD *)(a1 + 8);
LABEL_73:
              sub_1002E1490();
              sub_10020DD10();
              swift_retain();
              swift_willThrow();
              swift_release();
              *(void *)a1 = v39;
              *(_DWORD *)(a1 + 8) = v34;
              *(_DWORD *)(a1 + 12) = v33;
              *(_DWORD *)(a1 + 16) = v35;
              *(_WORD *)(a1 + 20) = v36;
              *(unsigned char *)(a1 + 22) = v37;
LABEL_75:
              swift_willThrow();
              return;
            }
            goto LABEL_94;
          }
          break;
        }
        uint64_t v11 = *(unsigned int *)(a1 + 8);
        unsigned int v10 = *(_DWORD *)(a1 + 12);
        if (v10 >= v11) {
          continue;
        }
        goto LABEL_71;
      case '(':
        BOOL v31 = __OFADD__(v84++, 1);
        uint64_t v9 = v90;
        if (v31) {
          goto LABEL_105;
        }
LABEL_41:
        char v30 = 0;
        goto LABEL_42;
      case ')':
        uint64_t v32 = v84 - 1;
        if (__OFSUB__(v84, 1)) {
          goto LABEL_106;
        }
        --v84;
        uint64_t v9 = v90;
        if (v32 <= 0)
        {
          sub_100234FB0(&v92);
          sub_10013A988((uint64_t)&v92, v78);
          return;
        }
        goto LABEL_41;
    }
  }
  if (v27 != 123)
  {
LABEL_84:
    unint64_t v92 = 0;
    unint64_t v93 = 0xE000000000000000;
    sub_1005E2C80(36);
    swift_bridgeObjectRelease();
    sub_1002E1FC8();
    char v94 = v27;
    v97._uint64_t countAndFlagsBits = sub_1005E3230();
    sub_1005E1E30(v97);
    swift_bridgeObjectRelease();
    v98._uint64_t countAndFlagsBits = 0xD000000000000012;
    v98._uint64_t object = (void *)0x80000001005E6610;
    sub_1005E1E30(v98);
    unint64_t v65 = v92;
    unint64_t v66 = v93;
    sub_100296090();
    sub_10020DD10();
    *uint64_t v60 = v65;
    v60[1] = v66;
    v60[2] = 0xD000000000000020;
    v60[3] = 0x80000001005E63C0;
    uint64_t v62 = 118;
    goto LABEL_85;
  }
  swift_retain();
  sub_100337A24(a1, v81, v79, 1, &v92);
  swift_release();
  unint64_t v28 = v92;
  if ((v92 & 0x8000000000000000) != 0)
  {
    sub_100296090();
    uint64_t v67 = sub_10020DD10();
    sub_1002E1E50(v67, v68);
    uint64_t v69[2] = v70;
    v69[3] = 0x80000001005E63C0;
    v69[4] = 167;
  }
  else
  {
    unint64_t v29 = (200000 - v12) & ~((200000 - v12) >> 63);
    if (v29 >= v92)
    {
      a3 = *(unsigned int *)(a1 + 16);
      swift_retain();
      sub_100338020(a1, v81, v79, 0, 0x7DuLL, 0xE100000000000000, 0);
      swift_release();
      sub_10032964C();
      uint64_t v9 = 0;
      if (ByteBuffer.readSlice(length:)(v28))
      {
        swift_release();
        char v30 = 0;
        goto LABEL_42;
      }
LABEL_77:
      sub_1002E1490();
      sub_10020DD10();
      goto LABEL_75;
    }
    sub_1002E14DC();
    sub_10020DD10();
    *uint64_t v71 = v28;
    v71[1] = v29;
  }
  swift_willThrow();
  sub_100296090();
  uint64_t v72 = sub_10020DD10();
  sub_1002E1E50(v72, v73);
  v74[2] = v75;
  v74[3] = 0x80000001005E63C0;
  v74[4] = 103;
  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_1002DD998()
{
  sub_1002E1F6C();
  sub_1002E1DF0();
  sub_1002E1CC4();
  return sub_10033C940(v0, v1, v2, v3);
}

uint64_t sub_1002DDA38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (uint64_t)sub_10032D3F0(a1, a2, a3, 1);
  if (!v3 && result < 0)
  {
    sub_100296090();
    sub_10020DD10();
    *uint64_t v5 = 0xD000000000000011;
    v5[1] = 0x80000001005E65D0;
    return sub_1002E1EC4(v5, 0xD000000000000020);
  }
  return result;
}

uint64_t sub_1002DDACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1002E1DF0();
  sub_1002E1CC4();
  uint64_t result = sub_10033C8F0(v6, v7, v8, v9);
  if (!v4)
  {
    uint64_t v13 = result;
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    uint64_t v16 = HIBYTE(v12) & 1;
    sub_100223C54(result, v11, v12, HIBYTE(v12) & 1);
    sub_1002D217C();
    uint64_t v17 = *(void *)(*a4 + 16);
    sub_1002D2414(v17);
    uint64_t v18 = *a4;
    *(void *)(v18 + 16) = v17 + 1;
    uint64_t v19 = v18 + 24 * v17;
    *(void *)(v19 + 32) = v13;
    *(void *)(v19 + 40) = v14;
    *(unsigned char *)(v19 + 54) = BYTE6(v15);
    *(_WORD *)(v19 + 52) = WORD2(v15);
    *(_DWORD *)(v19 + 48) = v15;
    *(unsigned char *)(v19 + 55) = v16;
    uint64_t result = sub_10022C15C(v13, v14, v15, v16);
    *a4 = v18;
  }
  return result;
}

void sub_1002DDC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1002E1EEC();
  sub_10031E1C0();
  if (!v8)
  {
    sub_1002E2008();
    sub_1002DE7D4();
    uint64_t v97 = a5;
    uint64_t v98 = a7;
    uint64_t v99 = a8;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1002E1D38();
      if (a2 + 1 < a3)
      {
        sub_1002E1FF0();
        sub_1002E1E20();
        sub_100337E64();
        uint64_t v27 = a2 + 2;
        uint64_t v94 = a2 + 1;
        uint64_t v95 = a2 + 3;
        uint64_t v87 = a2 + 4;
        uint64_t v84 = 0x80000001005E63C0;
        uint64_t v85 = 0x80000001005E65D0;
        uint64_t v100 = a3;
        uint64_t v101 = a6;
        uint64_t v96 = a2;
        uint64_t v109 = a4;
        for (i = a2 + 2; ; uint64_t v27 = i)
        {
          uint64_t v28 = *(void *)a1;
          LODWORD(v117) = *(_DWORD *)(a1 + 16);
          int v116 = *(unsigned __int16 *)(a1 + 20);
          int v115 = *(unsigned __int8 *)(a1 + 22);
          uint64_t v118 = v28;
          uint64_t v114 = a5;
          uint64_t v110 = &v84;
          uint64_t v111 = &v84;
          if (v27 >= a3)
          {
            sub_1002DB5BC();
            sub_10020DD10();
            *unint64_t v33 = a3;
            swift_retain();
            swift_retain();
          }
          else
          {
            uint64_t v29 = *(void *)a1;
            a2 = *(unsigned int *)(a1 + 8);
            a5 = *(unsigned int *)(a1 + 16);
            if (v95 < a3)
            {
              LODWORD(v112) = *(_DWORD *)(a1 + 8);
              swift_retain_n();
              swift_retain();
              swift_retain();
              uint64_t v30 = sub_1002E1E20();
              sub_100338020(v30, v31, v32, 0, 0x4C494EuLL, 0xE300000000000000, 0);
              swift_release();
              swift_release_n();
              a2 = 0;
              uint64_t v55 = 0;
              a5 = 0;
              char v56 = 0;
LABEL_55:
              uint64_t v77 = *v109;
              sub_100223C54(a2, v55, a5, v56);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v117 = a2;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_100232960();
                uint64_t v77 = v82;
              }
              unint64_t v79 = *(void *)(v77 + 16);
              if (v79 >= *(void *)(v77 + 24) >> 1)
              {
                sub_100232960();
                uint64_t v77 = v83;
              }
              *(void *)(v77 + 16) = v79 + 1;
              uint64_t v80 = v77 + 24 * v79;
              uint64_t v81 = v117;
              *(void *)(v80 + 32) = v117;
              *(void *)(v80 + 40) = v55;
              *(unsigned char *)(v80 + 54) = BYTE6(a5);
              *(_WORD *)(v80 + 52) = WORD2(a5);
              *(_DWORD *)(v80 + 48) = a5;
              *(unsigned char *)(v80 + 55) = v56;
              sub_10022C15C(v81, v55, a5, v56);
              swift_release_n();
              swift_release();
              *uint64_t v109 = v77;
              a2 = v96;
              a6 = v101;
              goto LABEL_60;
            }
            sub_1002DB5BC();
            sub_10020DD10();
            *uint64_t v34 = a3;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_willThrow();
            swift_release();
            *(void *)a1 = v29;
            sub_1002E1FDC();
            sub_1002E1FBC();
            a6 = v101;
            uint64_t v28 = v118;
          }
          swift_willThrow();
          sub_1002E1D60();
          uint64_t v35 = sub_10000566C(qword_100710378);
          sub_1002E1CDC();
          int v36 = swift_dynamicCast();
          uint64_t v112 = v35;
          if (v36)
          {
            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            sub_1002E1D60();
            sub_1002E1CDC();
            if ((swift_dynamicCast() & 1) == 0)
            {
              swift_errorRelease();
              goto LABEL_40;
            }
            swift_errorRelease();
            swift_bridgeObjectRelease();
            uint64_t v28 = v118;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          if (i < a3) {
            break;
          }
          sub_1002DB5BC();
          uint64_t v51 = sub_10020DD10();
          sub_1002E1E80(v51, v52);
LABEL_39:
          swift_willThrow();
LABEL_40:
          swift_release();
          *(void *)a1 = v28;
          sub_1002E1E60();
          swift_willThrow();
          sub_1002E1D60();
          sub_1002E1CDC();
          if (swift_dynamicCast())
          {
            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            sub_1002E1D60();
            sub_1002E1CDC();
            if ((swift_dynamicCast() & 1) == 0)
            {
              swift_errorRelease();
              goto LABEL_49;
            }
            swift_errorRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          uint64_t v66 = *(void *)a1;
          a5 = *(unsigned int *)(a1 + 8);
          int v67 = *(_DWORD *)(a1 + 12);
          LODWORD(v110) = *(_DWORD *)(a1 + 16);
          __int16 v68 = *(_WORD *)(a1 + 20);
          char v69 = *(unsigned char *)(a1 + 22);
          a2 = v100;
          uint64_t v70 = i;
          if (i >= v100)
          {
            sub_1002DB5BC();
            sub_10020DD10();
            *uint64_t v71 = a2;
            swift_retain();
            int v72 = (int)v110;
            swift_willThrow();
          }
          else
          {
            sub_1002E1F54();
            sub_100337A24(a1, v70, a2, 1, (unint64_t *)&v119);
            swift_release();
            a2 = v119;
            if ((v119 & 0x8000000000000000) == 0)
            {
              swift_release();
              uint64_t v55 = 0;
              a5 = 0;
              char v56 = 1;
              a3 = v100;
              goto LABEL_55;
            }
            sub_100296090();
            sub_10020DD10();
            uint64_t v74 = v85;
            *uint64_t v75 = 0xD000000000000011;
            v75[1] = v74;
            uint64_t v76 = v84;
            v75[2] = 0xD000000000000020;
            v75[3] = v76;
            v75[4] = 167;
            swift_willThrow();
            int v72 = (int)v110;
          }
          swift_release();
          *(void *)a1 = v66;
          *(_DWORD *)(a1 + 8) = a5;
          *(_DWORD *)(a1 + 12) = v67;
          *(_DWORD *)(a1 + 16) = v72;
          *(_WORD *)(a1 + 20) = v68;
          *(unsigned char *)(a1 + 22) = v69;
          swift_willThrow();
          a3 = v100;
          a6 = v101;
          sub_1002E1FBC();
LABEL_49:
          sub_1002E1D60();
          sub_1002E1CDC();
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_release();
            swift_errorRelease();
            goto LABEL_6;
          }
          swift_errorRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)a1 = v118;
          sub_1002E1E60();
          swift_retain();
          uint64_t v73 = sub_1002E2008();
          sub_1002DDC20(v73);
          swift_release();
          swift_errorRelease();
          swift_release_n();
LABEL_60:
          sub_1002E1D38();
          sub_1002E1FF0();
          sub_100337E64();
        }
        uint64_t v37 = *(void *)a1;
        uint64_t v38 = *(void *)(a1 + 8);
        int v39 = *(_DWORD *)(a1 + 16);
        LODWORD(v90) = *(unsigned __int16 *)(a1 + 20);
        HIDWORD(v90) = v39;
        HIDWORD(v89) = *(unsigned __int8 *)(a1 + 22);
        unint64_t v40 = (void *)sub_1002E1F90();
        unsigned int v88 = &v84;
        uint64_t v42 = v97;
        uint64_t v41 = v98;
        v40[2] = v97;
        v40[3] = a6;
        uint64_t v43 = v99;
        unint64_t v92 = v40;
        v40[4] = v41;
        v40[5] = v43;
        unint64_t v44 = (void *)sub_1002E1F90();
        v44[2] = v42;
        v44[3] = a6;
        void v44[4] = v41;
        v44[5] = v43;
        uint64_t v91 = v44;
        sub_1002E1F54();
        uint64_t v93 = v37;
        if (v95 >= a3)
        {
          sub_1002DB5BC();
          uint64_t v53 = sub_10020DD10();
          sub_1002E1E80(v53, v54);
          sub_1002E1F54();
          swift_retain();
        }
        else
        {
          sub_1002E1D78();
          if (v45 != v46)
          {
            swift_retain_n();
            sub_1002E1F54();
            swift_retain();
            uint64_t v47 = sub_1002E1E20();
            sub_100313B54(v47, v48, v49, v50);
            swift_release();
            swift_release_n();
            sub_1002E1E30();
LABEL_54:
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v55 = a2 | (a3 << 32);
            a5 |= (a6 << 32) | (v42 << 48);
            char v56 = 0;
            a3 = v100;
            a2 = v117;
            goto LABEL_55;
          }
          sub_1002DB5BC();
          uint64_t v57 = sub_10020DD10();
          sub_1002E1E80(v57, v58);
          swift_retain_n();
          swift_retain();
          swift_retain();
          swift_willThrow();
          swift_release();
          sub_1002E1F3C();
          a3 = v100;
          a6 = v101;
          sub_1002E1FBC();
        }
        swift_willThrow();
        sub_1002E1D60();
        sub_1002E1CDC();
        char v59 = swift_dynamicCast();
        uint64_t v42 = (uint64_t)v109;
        if (v59)
        {
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          sub_1002E1D60();
          sub_1002E1CDC();
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_errorRelease();
LABEL_38:
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            *(void *)a1 = v93;
            *(void *)(a1 + 8) = v38;
            *(_DWORD *)(a1 + 16) = HIDWORD(v90);
            *(_WORD *)(a1 + 20) = v90;
            *(unsigned char *)(a1 + 22) = BYTE4(v89);
            uint64_t v28 = v118;
            goto LABEL_39;
          }
          swift_errorRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        if (v95 >= a3)
        {
          sub_1002DB5BC();
          uint64_t v61 = sub_10020DD10();
          sub_1002E1E80(v61, v62);
        }
        else
        {
          sub_1002E1D78();
          if (v45 != v46)
          {
            sub_1002E1F54();
            swift_retain();
            uint64_t v60 = sub_1002E1E20();
            sub_100310A5C(v60);
            swift_release();
            swift_release_n();
            sub_1002E1E30();
            swift_release();
            goto LABEL_54;
          }
          sub_1002DB5BC();
          uint64_t v63 = sub_10020DD10();
          sub_1002E1E80(v63, v64);
          uint64_t v65 = v101;
          swift_retain();
          swift_retain();
          swift_willThrow();
          swift_release();
          swift_release();
          sub_1002E1F3C();
          a3 = v100;
          sub_1002E1FBC();
          a6 = v65;
        }
        swift_willThrow();
        goto LABEL_38;
      }
      sub_1002DB5BC();
      uint64_t v17 = sub_10020DD10();
      sub_1002E1E80(v17, v18);
      sub_1002E1FF0();
      swift_willThrow();
LABEL_6:
      sub_1002E1D60();
      sub_10000566C(qword_100710378);
      if (swift_dynamicCast())
      {
        swift_release();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = swift_bridgeObjectRelease();
        sub_1002E1CEC(v19, v20, v21, v22, v23, v24, v25, v26, v84, v85, v86, v87, (uint64_t)v88, v89, v90, (uint64_t)v91, (uint64_t)v92, v93, v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108);
        swift_errorRelease();
        sub_1002E1EEC();
        sub_10031E1C0();
        swift_release();
      }
      else
      {
        swift_release_n();
        swift_errorRelease();
      }
    }
  }
}

uint64_t sub_1002DE7D4()
{
  sub_1002E1CA8();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  __int16 v12 = *((_WORD *)v2 + 10);
  int v13 = *((_DWORD *)v2 + 4);
  char v11 = *((unsigned char *)v2 + 22);
  swift_retain();
  uint64_t v5 = sub_1002DC944();
  sub_1002DDACC(v5, v6, v7, v8);
  if (!v0) {
    return swift_release();
  }
  swift_errorRetain();
  sub_10000566C(qword_100710378);
  if (swift_dynamicCast())
  {
    swift_release();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 8) = v4;
    *(_DWORD *)(v1 + 16) = v13;
    *(_WORD *)(v1 + 20) = v12;
    *(unsigned char *)(v1 + 22) = v11;
    swift_retain();
    uint64_t v9 = sub_1002DC944();
    sub_1002DDC20(v9);
  }
  swift_release();
  return swift_errorRelease();
}

void sub_1002DE920()
{
  sub_1002E1CA8();
  uint64_t v21 = v4;
  uint64_t v24 = v5;
  uint64_t v6 = sub_100309F9C();
  if (!v0)
  {
    uint64_t v7 = v6;
    if (v6)
    {
      swift_retain();
      sub_1002E201C();
      uint64_t v20 = sub_10031E368(v8, v9, v10, v11, v12, 198);
      uint64_t v14 = v13;
      swift_release_n();
      uint64_t v7 = v20;
    }
    else
    {
      uint64_t v14 = 0;
    }
    swift_retain();
    sub_100329CE0(v3, v2, v1, v22);
    uint64_t v15 = v23;
    long long v16 = v22[0];
    long long v17 = v22[1];
    long long v18 = v22[2];
    long long v19 = v22[3];
    *(void *)uint64_t v21 = v7;
    *(void *)(v21 + 8) = v14;
    *(_OWORD *)(v21 + 16) = v16;
    *(_OWORD *)(v21 + 32) = v17;
    *(_OWORD *)(v21 + 48) = v18;
    *(_OWORD *)(v21 + 64) = v19;
    *(void *)(v21 + 80) = v15;
  }
}

void sub_1002DEA50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13 = sub_1002DEB54(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v21 = v15;
    uint64_t v22 = v14;
    uint64_t v25 = v13;
    swift_retain();
    sub_100329CE0(a2, a3, a5, v23);
    uint64_t v16 = v24;
    long long v17 = v23[0];
    long long v18 = v23[1];
    long long v19 = v23[2];
    long long v20 = v23[3];
    *(void *)a8 = v25;
    *(void *)(a8 + 8) = v22;
    *(void *)(a8 + 16) = v21;
    *(_OWORD *)(a8 + 24) = v17;
    *(_OWORD *)(a8 + 40) = v18;
    *(_OWORD *)(a8 + 56) = v19;
    *(_OWORD *)(a8 + 72) = v20;
    *(void *)(a8 + 88) = v16;
  }
}

uint64_t sub_1002DEB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1002E1F24(a1, a2, a3, a4, a5, a6, a7);
  sub_1002E1F6C();
  sub_1002E1DF0();
  sub_1002E1CC4();
  uint64_t result = sub_10033CA84(v8, v9);
  if (v7) {
    return v11;
  }
  return result;
}

uint64_t sub_1002DEC00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t result = sub_1002DEB54((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v43 = v19;
    uint64_t v44 = v18;
    uint64_t v45 = result;
    sub_1002E1D18();
    if (sub_1002E1DC0())
    {
      swift_retain();
      sub_1002E201C();
      uint64_t v41 = sub_10031E368(v20, v21, v22, v23, v24, 227);
      uint64_t v42 = v25;
      sub_1002E1F78();
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    sub_1002E1D18();
    if (sub_1002E1DC0())
    {
      swift_retain();
      sub_1002E201C();
      uint64_t v39 = sub_10031E368(v26, v27, v28, v29, v30, 231);
      uint64_t v40 = v31;
      sub_1002E1F78();
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    sub_1002E1D18();
    uint64_t v32 = sub_1002DEF00((uint64_t)a1, a2, a3, a4, a5, a6, a7);
    uint64_t v34 = v33;
    sub_1002E1D18();
    uint64_t result = (uint64_t)sub_10032D3F0(a1, a2, a3, 1);
    if (result < 0)
    {
      sub_100296090();
      uint64_t v35 = sub_10020DD10();
      sub_1002E1E50(v35, v36);
      sub_1002E1EC4(v37, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      *a8 = v45;
      a8[1] = v44;
      a8[2] = v43;
      a8[3] = v41;
      a8[4] = v42;
      a8[5] = v39;
      a8[6] = v40;
      a8[7] = v32;
      a8[8] = v34;
      a8[9] = result;
    }
  }
  return result;
}

uint64_t sub_1002DEF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10000566C(&qword_100712290);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F6710;
  *(void *)(inited + 32) = sub_1002DF9CC;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = sub_1002DF9F8;
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 64) = sub_1002DFA24;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 80) = sub_1002DFA50;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 96) = sub_1002DFA7C;
  *(void *)(inited + 104) = 0;
  uint64_t v15 = (void *)sub_1002E1F90();
  v15[2] = a4;
  v15[3] = a5;
  _OWORD v15[4] = a6;
  v15[5] = a7;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1002E19D0;
  *(void *)(v16 + 24) = v15;
  *(void *)(inited + 112) = sub_1002E1A24;
  *(void *)(inited + 120) = v16;
  long long v17 = (void *)sub_1002E1F90();
  _OWORD v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_1002E1A3C;
  *(void *)(v18 + 24) = v17;
  *(void *)(inited + 128) = sub_1002E1A24;
  *(void *)(inited + 136) = v18;
  sub_1002E1FF0();
  uint64_t v19 = sub_10033D66C(inited, a1, a2, a3, 0xD000000000000020, 0x80000001005E63C0, 313);
  swift_setDeallocating();
  sub_10034A020();
  return v19;
}

uint64_t sub_1002DF0F0()
{
  sub_1002E1FA8();
  sub_1002E1F6C();
  sub_1002E1E00();
  uint64_t result = sub_10033C990(v2, v3, v4, v5, v6);
  if (!v1) {
    return sub_1002374B8((uint64_t)v8, v0);
  }
  return result;
}

double sub_1002DF1B8@<D0>(uint64_t a1@<X8>)
{
  sub_10031E1C0();
  if (!v1)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1002DF20C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_10030A038();
    sub_10031E368(v18, v19, v17 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 257);
    uint64_t v26 = sub_1005E1CB0();
    uint64_t v27 = v20;
    swift_bridgeObjectRelease();
    sub_10031E2BC(a1, a2, a3);
    uint64_t v21 = sub_1002DEB54(a1, a2, a3, a4, a5, a6, a7);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    sub_10031E1C0();
    swift_release();
    *a8 = v26;
    a8[1] = v27;
    a8[2] = v21;
    a8[3] = v23;
    a8[4] = v25;
  }
}

void *sub_1002DF400@<X0>(void *(*a1)(void *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  double result = a1(v5);
  if (!v2) {
    return (void *)sub_1002374B8((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1002DF450()
{
  sub_10030A038();
  if (!v0)
  {
    sub_10031E368(v2, v3, v4 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 278);
    uint64_t v1 = sub_1005E1CD0();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1002DF4F4()
{
  uint64_t v1 = sub_1005E1CD0();
  sub_10031E1C0();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10031E1C0();
    sub_10031E1C0();
  }
  return v1;
}

uint64_t sub_1002DF5E4()
{
  uint64_t v1 = sub_1005E1CD0();
  sub_10031E1C0();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10031E1C0();
    sub_10031E1C0();
  }
  return v1;
}

uint64_t sub_1002DF6D4()
{
  uint64_t v1 = sub_1005E1CD0();
  sub_10031E1C0();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10031E1C0();
    sub_10031E1C0();
  }
  return v1;
}

uint64_t sub_1002DF7CC()
{
  uint64_t v1 = sub_1005E1CD0();
  sub_10031E1C0();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10031E1C0();
    sub_10031E1C0();
  }
  return v1;
}

uint64_t sub_1002DF8C4()
{
  uint64_t v1 = sub_1005E1CD0();
  sub_10031E1C0();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10031E1C0();
    sub_10031E1C0();
  }
  return v1;
}

uint64_t sub_1002DF9CC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002DFAA8(a1, a2, (uint64_t (*)(uint64_t, void, void))sub_1002DF4F4, a3);
}

uint64_t sub_1002DF9F8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002DFAA8(a1, a2, (uint64_t (*)(uint64_t, void, void))sub_1002DF5E4, a3);
}

uint64_t sub_1002DFA24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002DFAA8(a1, a2, (uint64_t (*)(uint64_t, void, void))sub_1002DF6D4, a3);
}

uint64_t sub_1002DFA50@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002DFAA8(a1, a2, (uint64_t (*)(uint64_t, void, void))sub_1002DF7CC, a3);
}

uint64_t sub_1002DFA7C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002DFAA8(a1, a2, (uint64_t (*)(uint64_t, void, void))sub_1002DF8C4, a3);
}

uint64_t sub_1002DFAA8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t, void, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, *a2, a2[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_1002DFAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1002E1F24(a1, a2, a3, a4, a5, a6, a7);
  sub_1002E1F6C();
  sub_1002E1DF0();
  sub_1002E1CC4();
  return sub_10033CB54(v7, v8, v9, v10);
}

void *sub_1002DFB80()
{
  uint64_t v2 = sub_100309F9C();
  if (!v0)
  {
    uint64_t v6 = v2;
    if (v2)
    {
      unint64_t v7 = v3;
      uint64_t v8 = v4;
      sub_10000566C(&qword_100710668);
      uint64_t v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_1005F6670;
      *(void *)(v1 + 32) = sub_10031E368(v6, v7, v8 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 330);
      *(void *)(v1 + 40) = v9;
      swift_release();
    }
    else
    {
      return _swiftEmptyArrayStorage;
    }
  }
  return (void *)v1;
}

void sub_1002DFC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E1C0();
  if (!v7)
  {
    sub_10030A038();
    uint64_t v16 = v15;
    unint64_t v24 = v18;
    uint64_t v25 = v17;
    sub_10000566C(&qword_100710668);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1005F6670;
    uint64_t v19 = sub_10031E368(v25, v24, v16 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 337);
    uint64_t v20 = v23;
    *(void *)(v23 + 32) = v19;
    *(void *)(v20 + 40) = v21;
    uint64_t v26 = v20;
    __chkstk_darwin();
    v22[2] = a4;
    v22[3] = a5;
    _OWORD v22[4] = a6;
    v22[5] = a7;
    sub_10031E530(a1, a2, a3, (uint64_t)sub_1002E16BC, (uint64_t)v22, (uint64_t)&v26);
    sub_10031E1C0();
    swift_release();
  }
}

void sub_1002DFE7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v4)
  {
    sub_10030A038();
    uint64_t v9 = sub_10031E368(v7, v8, v6 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 343);
    uint64_t v11 = v10;
    swift_release();
    *a4 = v9;
    a4[1] = v11;
  }
}

void sub_1002DFF68()
{
  sub_10031E1C0();
  if (!v0) {
    sub_10031A88C((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_1002DFFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10030A038();
  if (!v3)
  {
    sub_10031E368(v7, v8, v9 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 366);
    uint64_t v22 = v10;
    sub_10031E2BC(a1, a2, a3);
    sub_10030A138();
    unint64_t v14 = HIDWORD(v12);
    if (HIDWORD(v12) < v12)
    {
      __break(1u);
    }
    else if (v13 - (BYTE6(v13) | (WORD2(v13) << 8)) >= v14)
    {
      v16[0] = v11;
      v16[1] = v12;
      int v17 = v13;
      __int16 v18 = WORD2(v13);
      char v19 = BYTE6(v13);
      uint64_t v20 = v12;
      unint64_t v21 = HIDWORD(v12);
      v15[0] = 0;
      v15[1] = 0xE000000000000000;
      sub_1005E1D10(v14 - v12);
      sub_1001FF5EC((uint64_t)v16, v15);
      swift_release();
      swift_release();
      return;
    }
    __break(1u);
  }
}

void sub_1002E016C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E1C0();
  if (!v7)
  {
    v20[0] = 0;
    v20[1] = _swiftEmptyArrayStorage;
    void v20[2] = _swiftEmptyArrayStorage;
    sub_1002DFFC4(a1, a2, a3);
    sub_1002E9CA4(v17, v18, v15, v16);
    __chkstk_darwin();
    v19[2] = a4;
    v19[3] = a5;
    void v19[4] = a6;
    v19[5] = a7;
    sub_10031E55C(a1, a2, a3, (uint64_t)sub_1002E17B4, (uint64_t)v19, (uint64_t)v20);
    sub_10031E1C0();
  }
}

void sub_1002E0324(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10031E2BC(a3, a4, a5);
  if (!v5)
  {
    sub_1002DFFC4(a3, a4, a5);
    *a1 = v11;
    a1[1] = v12;
    *a2 = v13;
    a2[1] = v14;
  }
}

void *sub_1002E03B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  uint64_t result = (void *)sub_10032120C(a1);
  if (!v8)
  {
    uint64_t v36 = v19;
    uint64_t v37 = result;
    uint64_t v38 = v20;
    uint64_t v45 = v18;
    sub_10031E2BC(a1, a2, a3);
    swift_retain();
    sub_100320AE4(&v39, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v33 = *((void *)&v39 + 1);
    uint64_t v34 = v39;
    uint64_t v31 = *((void *)&v40 + 1);
    uint64_t v32 = v40;
    uint64_t v35 = v41;
    long long v21 = v42;
    uint64_t v30 = *((void *)&v41 + 1);
    long long v22 = v43;
    swift_retain();
    sub_10032A13C(a1, a2);
    long long v28 = v40;
    long long v29 = v39;
    long long v26 = v42;
    long long v27 = v41;
    long long v25 = v43;
    uint64_t v23 = v44;
    uint64_t result = (void *)swift_allocObject();
    uint64_t v24 = v45;
    result[2] = v37;
    result[3] = v24;
    result[4] = v36;
    result[5] = v38;
    *(void *)a8 = result;
    *(void *)(a8 + 8) = v34;
    *(void *)(a8 + 16) = v33;
    *(void *)(a8 + 24) = v32;
    *(void *)(a8 + 32) = v31;
    *(void *)(a8 + 40) = v35;
    *(void *)(a8 + 48) = v30;
    *(_OWORD *)(a8 + 56) = v21;
    *(_OWORD *)(a8 + 72) = v22;
    *(_OWORD *)(a8 + 88) = v29;
    *(_OWORD *)(a8 + 104) = v28;
    *(_OWORD *)(a8 + 120) = v27;
    *(_OWORD *)(a8 + 136) = v26;
    *(_OWORD *)(a8 + 152) = v25;
    *(void *)(a8 + 168) = v23;
  }
  return result;
}

void sub_1002E0628(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  sub_10030A238();
  if (!v8)
  {
    uint64_t v51 = v17;
    uint64_t v52 = v18;
    uint64_t v62 = a8;
    sub_10031E2BC((uint64_t)a1, a2, a3);
    swift_retain();
    sub_100320AE4(__src, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v46 = __src[1];
    uint64_t v47 = __src[0];
    uint64_t v44 = __src[3];
    uint64_t v45 = __src[2];
    uint64_t v48 = __src[4];
    uint64_t v49 = __src[6];
    uint64_t v42 = __src[7];
    uint64_t v43 = __src[5];
    uint64_t v19 = __src[9];
    uint64_t v50 = __src[8];
    sub_10031E2BC((uint64_t)a1, a2, a3);
    uint64_t v41 = v19;
    swift_retain();
    sub_1003212BC(__src, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v29 = __src[0];
    uint64_t v39 = __src[1];
    uint64_t v40 = __src[2];
    uint64_t v28 = __src[3];
    int v27 = BYTE6(__src[4]);
    int v25 = WORD2(__src[4]);
    uint64_t v26 = LODWORD(__src[4]);
    uint64_t v37 = __src[6];
    uint64_t v38 = __src[5];
    uint64_t v35 = __src[8];
    uint64_t v36 = __src[7];
    uint64_t v33 = __src[10];
    uint64_t v34 = __src[9];
    uint64_t v30 = __src[11];
    uint64_t v20 = __src[13];
    uint64_t v31 = __src[14];
    uint64_t v32 = __src[12];
    sub_10031E2BC((uint64_t)a1, a2, a3);
    sub_1002DCAA8(v61, a1, a2, a3, a4, a5, a6, a7);
    sub_10013AE3C((uint64_t)v61, (uint64_t)v60);
    sub_10031E2BC((uint64_t)a1, a2, a3);
    uint64_t v24 = sub_10032D3F0(a1, a2, a3, 1);
    if (((unint64_t)v24 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      swift_allocError();
      *long long v21 = 0xD000000000000011;
      v21[1] = 0x80000001005E65D0;
      v21[2] = 0xD000000000000020;
      void v21[3] = 0x80000001005E63C0;
      v21[4] = 167;
      swift_willThrow();
      sub_1002E1AF0((uint64_t)v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __src[0] = v51;
      __src[1] = v52;
      __n128 __src[2] = v29;
      __src[3] = v39;
      __src[4] = v40;
      __src[5] = v28;
      LODWORD(__src[6]) = v26;
      BYTE6(__src[6]) = (v26 | ((unint64_t)(v25 | (v27 << 16)) << 32)) >> 48;
      WORD2(__src[6]) = (v26 | ((unint64_t)(v25 | (v27 << 16)) << 32)) >> 32;
      __src[7] = v38;
      __src[8] = v37;
      __src[9] = v36;
      __src[10] = v35;
      __src[11] = v34;
      __src[12] = v33;
      __src[13] = v30;
      __src[14] = v32;
      __src[15] = v20;
      __n128 __src[16] = v31;
      sub_10013AE3C((uint64_t)v60, (uint64_t)&__src[17]);
      __src[40] = v24;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002E1AF0((uint64_t)v61);
      sub_10032A13C((uint64_t)a1, a2);
      uint64_t v22 = swift_allocObject();
      sub_1002E1AF0((uint64_t)v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      memcpy((void *)(v22 + 16), __src, 0x148uLL);
      uint64_t v23 = v62;
      *uint64_t v62 = v22 | 0x4000000000000000;
      v23[1] = v47;
      void v23[2] = v46;
      void v23[3] = v45;
      _OWORD v23[4] = v44;
      v23[5] = v48;
      v23[6] = v43;
      v23[7] = v49;
      v23[8] = v42;
      v23[9] = v50;
      v23[10] = v41;
      *(_OWORD *)(v23 + 11) = v53;
      *(_OWORD *)(v23 + 13) = v54;
      *(_OWORD *)(v23 + 15) = v55;
      *(_OWORD *)(v23 + 17) = v56;
      *(_OWORD *)(v23 + 19) = v57;
      v23[21] = v58;
    }
  }
}

uint64_t sub_1002E0D48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  uint64_t result = sub_100321360(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v37 = result;
    uint64_t v44 = v18;
    sub_10031E2BC((uint64_t)a1, a2, a3);
    swift_retain();
    sub_100320AE4(&v38, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v34 = *((void *)&v38 + 1);
    uint64_t v35 = v38;
    uint64_t v32 = *((void *)&v39 + 1);
    uint64_t v33 = v39;
    uint64_t v36 = v40;
    long long v19 = v41;
    uint64_t v31 = *((void *)&v40 + 1);
    long long v20 = v42;
    sub_10031E2BC((uint64_t)a1, a2, a3);
    long long v21 = sub_10032D3F0(a1, a2, a3, 1);
    if (((unint64_t)v21 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      swift_allocError();
      *uint64_t v22 = 0xD000000000000011;
      v22[1] = 0x80000001005E65D0;
      v22[2] = 0xD000000000000020;
      v22[3] = 0x80000001005E63C0;
      _OWORD v22[4] = 167;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = v21;
      swift_retain();
      sub_10032A13C((uint64_t)a1, a2);
      long long v28 = v39;
      long long v29 = v38;
      long long v26 = v41;
      long long v27 = v40;
      long long v25 = v42;
      uint64_t v23 = v43;
      uint64_t result = swift_allocObject();
      uint64_t v24 = v44;
      *(void *)(result + 16) = v37;
      *(void *)(result + 24) = v24;
      *(void *)(result + 32) = v30;
      *(void *)a8 = result | 0x8000000000000000;
      *(void *)(a8 + 8) = v35;
      *(void *)(a8 + 16) = v34;
      *(void *)(a8 + 24) = v33;
      *(void *)(a8 + 32) = v32;
      *(void *)(a8 + 40) = v36;
      *(void *)(a8 + 48) = v31;
      *(_OWORD *)(a8 + 56) = v19;
      *(_OWORD *)(a8 + 72) = v20;
      *(_OWORD *)(a8 + 88) = v29;
      *(_OWORD *)(a8 + 104) = v28;
      *(_OWORD *)(a8 + 120) = v27;
      *(_OWORD *)(a8 + 136) = v26;
      *(_OWORD *)(a8 + 152) = v25;
      *(void *)(a8 + 168) = v23;
    }
  }
  return result;
}

void sub_1002E107C()
{
  sub_1002E1EA8();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v35 = v7;
  uint64_t v36 = v8;
  *(void *)&long long v37 = v9;
  *((void *)&v37 + 1) = v10;
  uint64_t v13 = sub_10032CFD8(v3, v11, v12, (uint64_t)sub_1002E1588, (uint64_t)v34, (uint64_t)&type metadata for BodyStructure);
  if (!v0)
  {
    uint64_t v47 = v13;
    sub_10031E2BC(v4, v2, v1);
    sub_1002E1D9C();
    sub_10030A3C4();
    uint64_t v30 = v14;
    uint64_t v32 = v15;
    swift_retain();
    uint64_t v16 = sub_1002E1D9C();
    sub_10032A2B8(v16, v17, v18, v19, v20, v21, v22, v23, v30, v32, v34[0], v34[1], v35, v36, v37, v38, v39, v40, v41,
      v42,
      *((uint64_t *)&v42 + 1),
      v43,
      *((uint64_t *)&v43 + 1),
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53);
    long long v24 = v38;
    long long v25 = v39;
    long long v26 = v40;
    long long v27 = v41;
    long long v28 = v42;
    long long v29 = v43;
    *(void *)uint64_t v6 = v47;
    *(void *)(v6 + 8) = v31;
    *(void *)(v6 + 16) = v33;
    *(_OWORD *)(v6 + 24) = v24;
    *(_OWORD *)(v6 + 40) = v25;
    *(_OWORD *)(v6 + 56) = v26;
    *(_OWORD *)(v6 + 72) = v27;
    *(_OWORD *)(v6 + 88) = v28;
    *(_OWORD *)(v6 + 104) = v29;
  }
}

uint64_t sub_1002E11A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (v8) {
    swift_errorRelease();
  }
  sub_1002DCAA8(v18, a1, a2, a3, a4, a5, a6, a7);
  return sub_10013AE3C((uint64_t)v18, a8);
}

void sub_1002E1254()
{
  sub_1002E1EA8();
  sub_100309F9C();
  if (!v0)
  {
    swift_retain();
    sub_1002E201C();
    sub_10031E368(v1, v2, v3, v4, v5, 467);
    swift_release_n();
    swift_retain();
    uint64_t v6 = sub_10032D0C8();
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = 0;
      uint64_t v9 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v10 = *(void *)(v6 + 8 * v8 + 32);
        uint64_t v11 = *(void *)(v10 + 16);
        uint64_t v12 = v9[2];
        if (__OFADD__(v12, v11)) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!swift_isUniquelyReferenced_nonNull_native() || v12 + v11 > v9[3] >> 1)
        {
          sub_100232960();
          uint64_t v9 = v13;
        }
        if (*(void *)(v10 + 16))
        {
          if ((v9[3] >> 1) - v9[2] < v11) {
            goto LABEL_19;
          }
          swift_arrayInitWithCopy();
          if (v11)
          {
            uint64_t v14 = v9[2];
            BOOL v15 = __OFADD__(v14, v11);
            uint64_t v16 = v14 + v11;
            if (v15) {
              goto LABEL_20;
            }
            _OWORD v9[2] = v16;
          }
        }
        else if (v11)
        {
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v7 == ++v8)
        {
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
LABEL_16:
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t sub_1002E1490()
{
  unint64_t result = qword_100712280;
  if (!qword_100712280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712280);
  }
  return result;
}

unint64_t sub_1002E14DC()
{
  unint64_t result = qword_100712288;
  if (!qword_100712288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712288);
  }
  return result;
}

void sub_1002E1528()
{
  sub_1002E1C9C();
  sub_1002DCB84(v0, v1, v2, v3, v4, v5, v6, v7);
}

void *sub_1002E1544@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DCFA4(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

void sub_1002E1560()
{
  sub_1002E1C9C();
  sub_1002DCDCC(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002E157C(uint64_t result)
{
  *(unsigned char *)(result + 176) = 1;
  return result;
}

uint64_t sub_1002E1588()
{
  sub_1002E1C9C();
  return sub_1002E11A0(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002E15A4()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E15DC()
{
  return sub_1002DD998();
}

uint64_t sub_1002E15F8()
{
  sub_1002E1C9C();
  return sub_1002DDA38(v0, v1, v2);
}

uint64_t sub_1002E1614()
{
  return sub_10032CF5C();
}

uint64_t sub_1002E1630()
{
  return sub_100312DA0();
}

uint64_t sub_1002E164C()
{
  return sub_100312DF4();
}

void sub_1002E1668()
{
  sub_1002E1C9C();
  sub_1002DFC64(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002E1684()
{
  return sub_10032CFA8();
}

void *sub_1002E16A0()
{
  return sub_1002DFB80();
}

void sub_1002E16BC()
{
  sub_1002E1C9C();
  sub_1002DFE7C(v0, v1, v2, v3);
}

double sub_1002E16D8()
{
  sub_1002E1C9C();
  return sub_1002DF1B8(v0);
}

void *sub_1002E16F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DF400(*(void *(**)(void *__return_ptr))(v1 + 16), a1);
}

void sub_1002E1710()
{
  sub_1002E1C9C();
  sub_1002DF20C(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002E172C()
{
  sub_1002E1C9C();
  sub_1002E016C(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002E1748@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002E177C(a1);
}

void sub_1002E1760()
{
}

uint64_t sub_1002E177C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

void sub_1002E17B4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1002E17E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 136);
  long long v6 = *(_OWORD *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 168);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000615E4(v12, v11, v2, v3, v10, v9, v8, v7, v6, *((uint64_t *)&v6 + 1), v4);
  return a1;
}

uint64_t sub_1002E18C8(uint64_t result)
{
  *(unsigned char *)(result + 176) = 0;
  return result;
}

void sub_1002E18D0()
{
  sub_1002E1C9C();
  sub_1002E0628(v0, v1, v2, v3, v4, v5, v6, v7);
}

void *sub_1002E18EC@<X0>(void *a1@<X8>)
{
  return sub_1002E193C(a1);
}

uint64_t sub_1002E1904()
{
  sub_1002E1C9C();
  return sub_1002E0D48(v0, v1, v2, v3, v4, v5, v6, v7);
}

void *sub_1002E1920()
{
  sub_1002E1C9C();
  return sub_1002E03B8(v0, v1, v2, v3, v4, v5, v6, v7);
}

void *sub_1002E193C@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(void *__return_ptr))(v1 + 16))(v5);
  if (!v2) {
    return memcpy(a1, v5, 0xB0uLL);
  }
  return result;
}

uint64_t sub_1002E1990()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E19D0()
{
  return sub_1002DF450();
}

uint64_t sub_1002E19EC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E1A24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002E1A7C(a1, a2, a3);
}

uint64_t sub_1002E1A3C()
{
  return 0;
}

uint64_t sub_1002E1A7C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(a1, *a2, a2[1]);
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

uint64_t sub_1002E1AB8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002E1AF0(uint64_t a1)
{
  sub_100289A28();
  v2();
  return a1;
}

uint64_t sub_1002E1B58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v24 = *(unsigned char *)(v0 + 328);
  sub_100289A28();
  sub_100061440(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20,
    v21,
    v22,
    v23,
    v24);
  return _swift_deallocObject(v0, 344, 7);
}

void *sub_1002E1C3C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E1544(a1);
}

uint64_t sub_1002E1C54()
{
  return sub_1002E1614();
}

uint64_t sub_1002E1C6C()
{
  return sub_1002E1684();
}

void *sub_1002E1C84@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E16F4(a1);
}

uint64_t sub_1002E1CDC()
{
  return v0 - 160;
}

void sub_1002E1CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,__int16 a29,__int16 a30,int a31,int a32,int a33)
{
  *(void *)uint64_t v33 = v34;
  *(_DWORD *)(v33 + 8) = a33;
  *(_DWORD *)(v33 + 12) = a32;
  *(_DWORD *)(v33 + 16) = a31;
  *(_WORD *)(v33 + 20) = a30;
  *(unsigned char *)(v33 + 22) = a28;
}

void sub_1002E1D18()
{
  sub_10031E2BC(v2, v1, v0);
}

uint64_t sub_1002E1D60()
{
  *(void *)(v1 - 72) = v0;
  return swift_errorRetain();
}

uint64_t sub_1002E1D9C()
{
  return v0;
}

uint64_t sub_1002E1DC0()
{
  return sub_100309F9C();
}

uint64_t sub_1002E1E20()
{
  return v0;
}

uint64_t sub_1002E1E30()
{
  *(void *)(v1 - 176) = *(void *)(v1 - 160);
  return v0;
}

void sub_1002E1E50(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = (v3 - 32) | 0x8000000000000000;
}

void sub_1002E1E60()
{
  *(void *)(v0 + 8) = v2;
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(v1 - 176);
  *(_WORD *)(v0 + 20) = *(_DWORD *)(v1 - 180);
  *(unsigned char *)(v0 + 22) = *(_DWORD *)(v1 - 184);
}

void sub_1002E1E80(uint64_t a1, void *a2)
{
  *a2 = v2;
}

void sub_1002E1E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12)
{
  *(void *)uint64_t v13 = v16;
  *(_DWORD *)(v13 + 8) = v14;
  *(_DWORD *)(v13 + 12) = v15;
  *(_DWORD *)(v13 + 16) = v17;
  *(_WORD *)(v13 + 20) = a12;
  *(unsigned char *)(v13 + 22) = v12;
}

uint64_t sub_1002E1EC4@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  a1[2] = a2;
  a1[3] = (v2 - 32) | 0x8000000000000000;
  a1[4] = 167;
  return swift_willThrow();
}

void sub_1002E1F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, uint64_t a18, __int16 a19)
{
  *(_DWORD *)(v19 + 16) = a15;
  *(_WORD *)(v19 + 20) = a19;
  *(unsigned char *)(v19 + 22) = a17;
}

void sub_1002E1F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 - 32) = a4;
  *(void *)(v7 - 24) = a5;
  *(void *)(v7 - 16) = a6;
  *(void *)(v7 - 8) = a7;
}

void sub_1002E1F3C()
{
  *(void *)uint64_t v1 = v4;
  *(_DWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 12) = v3;
  *(_DWORD *)(v1 + 16) = v5;
  *(_WORD *)(v1 + 20) = v6;
  *(unsigned char *)(v1 + 22) = v0;
}

uint64_t sub_1002E1F54()
{
  return swift_retain_n();
}

uint64_t sub_1002E1F78()
{
  return swift_release_n();
}

uint64_t sub_1002E1F90()
{
  return swift_allocObject();
}

void sub_1002E1FDC()
{
  *(_DWORD *)(v2 + 8) = v0;
  *(_DWORD *)(v2 + 12) = v1;
  *(_DWORD *)(v2 + 16) = v3;
  *(_WORD *)(v2 + 20) = v4;
  *(unsigned char *)(v2 + 22) = v5;
}

uint64_t sub_1002E1FF0()
{
  return swift_retain_n();
}

uint64_t sub_1002E2008()
{
  return v0;
}

uint64_t sub_1002E2028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1002E3690(a1, a2, a3, a4, a5, a6, a7, sub_1002E2054);
}

void sub_1002E2054(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  *(void *)&long long v31 = a7;
  *(void *)&long long v30 = a6;
  uint64_t v15 = type metadata accessor for Command();
  __chkstk_darwin(v15 - 8);
  int v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031F474(a1, a2, a3);
  if (!v8)
  {
    uint64_t v27 = a4;
    uint64_t v28 = a5;
    long long v29 = v17;
    uint64_t v25 = sub_10031E368(v18, v19, v20 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 2317);
    uint64_t v26 = v21;
    swift_release();
    sub_10031E2BC(a1, a2, a3);
    sub_1002E22D8();
    uint64_t v22 = type metadata accessor for TaggedCommand();
    sub_1002609CC((uint64_t)v29, (uint64_t)a8 + *(int *)(v22 + 20));
    uint64_t v23 = v26;
    *a8 = v25;
    a8[1] = v23;
  }
}

unint64_t sub_1002E228C()
{
  unint64_t result = qword_100712298;
  if (!qword_100712298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712298);
  }
  return result;
}

uint64_t sub_1002E22D8()
{
  sub_10000566C(&qword_1007122A0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1005F69C0;
  *(void *)(v1 + 32) = 0x494C494241504143;
  *(void *)(v1 + 40) = 0xEA00000000005954;
  *(void *)(v1 + 48) = sub_1002E3058;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0x54554F474F4CLL;
  *(void *)(v1 + 72) = 0xE600000000000000;
  *(void *)(v1 + 80) = sub_1002E307C;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 1347374926;
  *(void *)(v1 + 104) = 0xE400000000000000;
  *(void *)(v1 + 112) = sub_1002E30A0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0x534C545452415453;
  *(void *)(v1 + 136) = 0xE800000000000000;
  *(void *)(v1 + 144) = sub_1002E30C4;
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0x4B43454843;
  *(void *)(v1 + 168) = 0xE500000000000000;
  *(void *)(v1 + 176) = sub_1002E30E8;
  *(void *)(v1 + 184) = 0;
  *(void *)(v1 + 192) = 0x45534F4C43;
  *(void *)(v1 + 200) = 0xE500000000000000;
  *(void *)(v1 + 208) = sub_1002E310C;
  *(void *)(v1 + 216) = 0;
  *(void *)(v1 + 224) = 0x45474E55505845;
  *(void *)(v1 + 232) = 0xE700000000000000;
  *(void *)(v1 + 240) = sub_1002E3130;
  *(void *)(v1 + 248) = 0;
  *(void *)(v1 + 256) = 0x5443454C45534E55;
  *(void *)(v1 + 264) = 0xE800000000000000;
  *(void *)(v1 + 272) = sub_1002E3154;
  *(void *)(v1 + 280) = 0;
  *(void *)(v1 + 288) = 1162626121;
  *(void *)(v1 + 296) = 0xE400000000000000;
  *(void *)(v1 + 304) = sub_1002E3178;
  *(void *)(v1 + 312) = 0;
  *(void *)(v1 + 320) = 0x43415053454D414ELL;
  *(void *)(v1 + 328) = 0xE900000000000045;
  *(void *)(v1 + 336) = sub_1002E319C;
  *(void *)(v1 + 344) = 0;
  uint64_t v2 = (void *)sub_1002E1F90();
  sub_1002E8404(v2);
  uint64_t v3 = sub_1002E8414();
  *(void *)(v3 + 16) = sub_1002E3240;
  *(void *)(v3 + 24) = v0;
  *(void *)(v1 + 352) = 17481;
  *(void *)(v1 + 360) = 0xE200000000000000;
  *(void *)(v1 + 368) = sub_1002E326C;
  *(void *)(v1 + 376) = v3;
  __int16 v4 = (void *)sub_1002E1F90();
  sub_1002E8404(v4);
  uint64_t v5 = sub_1002E8414();
  *(void *)(v5 + 16) = sub_1002E33BC;
  *(void *)(v5 + 24) = v0;
  *(void *)(v1 + 384) = 0x454C42414E45;
  *(void *)(v1 + 392) = 0xE600000000000000;
  *(void *)(v1 + 400) = sub_1002E83EC;
  *(void *)(v1 + 408) = v5;
  __int16 v6 = (void *)sub_1002E1F90();
  sub_1002E8404(v6);
  uint64_t v7 = sub_1002E8414();
  *(void *)(v7 + 16) = sub_1002E3408;
  *(void *)(v7 + 24) = v0;
  *(void *)(v1 + 416) = 0x444154454D544547;
  *(void *)(v1 + 424) = 0xEB00000000415441;
  *(void *)(v1 + 432) = sub_1002E83EC;
  *(void *)(v1 + 440) = v7;
  uint64_t v8 = (void *)sub_1002E1F90();
  sub_1002E8404(v8);
  uint64_t v9 = sub_1002E8414();
  *(void *)(v9 + 16) = sub_1002E3438;
  *(void *)(v9 + 24) = v0;
  *(void *)(v1 + 448) = 0x444154454D544553;
  *(void *)(v1 + 456) = 0xEB00000000415441;
  *(void *)(v1 + 464) = sub_1002E83EC;
  *(void *)(v1 + 472) = v9;
  uint64_t v10 = (void *)sub_1002E1F90();
  sub_1002E8404(v10);
  uint64_t v11 = sub_1002E8414();
  *(void *)(v11 + 16) = sub_1002E3468;
  *(void *)(v11 + 24) = v0;
  *(void *)(v1 + 480) = 0x59454B5445534552;
  *(void *)(v1 + 488) = 0xE800000000000000;
  *(void *)(v1 + 496) = sub_1002E83EC;
  *(void *)(v1 + 504) = v11;
  char v12 = (void *)sub_1002E1F90();
  sub_1002E8404(v12);
  uint64_t v13 = sub_1002E8414();
  *(void *)(v13 + 16) = sub_1002E3498;
  *(void *)(v13 + 24) = v0;
  *(void *)(v1 + 512) = 0x55414C52554E4547;
  *(void *)(v1 + 520) = 0xEA00000000004854;
  *(void *)(v1 + 528) = sub_1002E83EC;
  *(void *)(v1 + 536) = v13;
  int v14 = (void *)sub_1002E1F90();
  sub_1002E8404(v14);
  uint64_t v15 = sub_1002E8414();
  *(void *)(v15 + 16) = sub_1002E355C;
  *(void *)(v15 + 24) = v0;
  *(void *)(v1 + 544) = 0x48435445464C5255;
  *(void *)(v1 + 552) = 0xE800000000000000;
  *(void *)(v1 + 560) = sub_1002E83EC;
  *(void *)(v1 + 568) = v15;
  uint64_t v16 = (void *)sub_1002E1F90();
  sub_1002E8404(v16);
  uint64_t v17 = sub_1002E8414();
  *(void *)(v17 + 16) = sub_1002E35A8;
  *(void *)(v17 + 24) = v0;
  *(void *)(v1 + 576) = 1498435395;
  *(void *)(v1 + 584) = 0xE400000000000000;
  *(void *)(v1 + 592) = sub_1002E83EC;
  *(void *)(v1 + 600) = v17;
  uint64_t v18 = (void *)sub_1002E1F90();
  sub_1002E8404(v18);
  uint64_t v19 = sub_1002E8414();
  *(void *)(v19 + 16) = sub_1002E35D8;
  *(void *)(v19 + 24) = v0;
  *(void *)(v1 + 608) = 0x4554454C4544;
  *(void *)(v1 + 616) = 0xE600000000000000;
  *(void *)(v1 + 624) = sub_1002E83EC;
  *(void *)(v1 + 632) = v19;
  uint64_t v20 = (void *)sub_1002E1F90();
  sub_1002E8404(v20);
  uint64_t v21 = sub_1002E8414();
  *(void *)(v21 + 16) = sub_1002E3630;
  *(void *)(v21 + 24) = v0;
  *(void *)(v1 + 640) = 1163284301;
  *(void *)(v1 + 648) = 0xE400000000000000;
  *(void *)(v1 + 656) = sub_1002E83EC;
  *(void *)(v1 + 664) = v21;
  uint64_t v22 = (void *)sub_1002E1F90();
  sub_1002E8404(v22);
  uint64_t v23 = sub_1002E8414();
  *(void *)(v23 + 16) = sub_1002E3660;
  *(void *)(v23 + 24) = v0;
  *(void *)(v1 + 672) = 0x484352414553;
  *(void *)(v1 + 680) = 0xE600000000000000;
  *(void *)(v1 + 688) = sub_1002E83EC;
  *(void *)(v1 + 696) = v23;
  uint64_t v24 = (void *)sub_1002E1F90();
  sub_1002E8404(v24);
  uint64_t v25 = sub_1002E8414();
  *(void *)(v25 + 16) = sub_1002E38E0;
  *(void *)(v25 + 24) = v0;
  *(void *)(v1 + 704) = 0x48435241455345;
  *(void *)(v1 + 712) = 0xE700000000000000;
  *(void *)(v1 + 720) = sub_1002E83EC;
  *(void *)(v1 + 728) = v25;
  uint64_t v26 = (void *)sub_1002E1F90();
  sub_1002E8404(v26);
  uint64_t v27 = sub_1002E8414();
  *(void *)(v27 + 16) = sub_1002E38FC;
  *(void *)(v27 + 24) = v0;
  *(void *)(v1 + 736) = 0x45524F5453;
  *(void *)(v1 + 744) = 0xE500000000000000;
  *(void *)(v1 + 752) = sub_1002E83EC;
  *(void *)(v1 + 760) = v27;
  uint64_t v28 = (void *)sub_1002E1F90();
  sub_1002E8404(v28);
  uint64_t v29 = sub_1002E8414();
  *(void *)(v29 + 16) = sub_1002E392C;
  *(void *)(v29 + 24) = v0;
  *(void *)(v1 + 768) = 0x454E494D415845;
  *(void *)(v1 + 776) = 0xE700000000000000;
  *(void *)(v1 + 784) = sub_1002E83EC;
  *(void *)(v1 + 792) = v29;
  long long v30 = (void *)sub_1002E1F90();
  sub_1002E8404(v30);
  uint64_t v31 = sub_1002E8414();
  *(void *)(v31 + 16) = sub_1002E395C;
  *(void *)(v31 + 24) = v0;
  *(void *)(v1 + 800) = 1414744396;
  *(void *)(v1 + 808) = 0xE400000000000000;
  *(void *)(v1 + 816) = sub_1002E83EC;
  *(void *)(v1 + 824) = v31;
  uint64_t v32 = (void *)sub_1002E1F90();
  sub_1002E8404(v32);
  uint64_t v33 = sub_1002E8414();
  *(void *)(v33 + 16) = sub_1002E398C;
  *(void *)(v33 + 24) = v0;
  *(void *)(v1 + 832) = 1112888140;
  *(void *)(v1 + 840) = 0xE400000000000000;
  *(void *)(v1 + 848) = sub_1002E83EC;
  *(void *)(v1 + 856) = v33;
  uint64_t v34 = (void *)sub_1002E1F90();
  sub_1002E8404(v34);
  uint64_t v35 = sub_1002E8414();
  *(void *)(v35 + 16) = sub_1002E39F4;
  *(void *)(v35 + 24) = v0;
  *(void *)(v1 + 864) = 0x454D414E4552;
  *(void *)(v1 + 872) = 0xE600000000000000;
  *(void *)(v1 + 880) = sub_1002E83EC;
  *(void *)(v1 + 888) = v35;
  uint64_t v36 = (void *)sub_1002E1F90();
  sub_1002E8404(v36);
  uint64_t v37 = sub_1002E8414();
  *(void *)(v37 + 16) = sub_1002E3A24;
  *(void *)(v37 + 24) = v0;
  *(void *)(v1 + 896) = 0x5443454C4553;
  *(void *)(v1 + 904) = 0xE600000000000000;
  *(void *)(v1 + 912) = sub_1002E83EC;
  *(void *)(v1 + 920) = v37;
  long long v38 = (void *)sub_1002E1F90();
  sub_1002E8404(v38);
  uint64_t v39 = sub_1002E8414();
  *(void *)(v39 + 16) = sub_1002E3C1C;
  *(void *)(v39 + 24) = v0;
  *(void *)(v1 + 928) = 0x535554415453;
  *(void *)(v1 + 936) = 0xE600000000000000;
  *(void *)(v1 + 944) = sub_1002E83EC;
  *(void *)(v1 + 952) = v39;
  long long v40 = (void *)sub_1002E1F90();
  sub_1002E8404(v40);
  uint64_t v41 = sub_1002E8414();
  *(void *)(v41 + 16) = sub_1002E3C4C;
  *(void *)(v41 + 24) = v0;
  *(void *)(v1 + 960) = 0x4249524353425553;
  *(void *)(v1 + 968) = 0xE900000000000045;
  *(void *)(v1 + 976) = sub_1002E83EC;
  *(void *)(v1 + 984) = v41;
  long long v42 = (void *)sub_1002E1F90();
  sub_1002E8404(v42);
  uint64_t v43 = sub_1002E8414();
  *(void *)(v43 + 16) = sub_1002E3C7C;
  *(void *)(v43 + 24) = v0;
  *(void *)(v1 + 992) = 0x5243534255534E55;
  *(void *)(v1 + 1000) = 0xEB00000000454249;
  *(void *)(v1 + 1008) = sub_1002E83EC;
  *(void *)(v1 + 1016) = v43;
  uint64_t v44 = (void *)sub_1002E1F90();
  sub_1002E8404(v44);
  uint64_t v45 = sub_1002E8414();
  *(void *)(v45 + 16) = sub_1002E3CAC;
  *(void *)(v45 + 24) = v0;
  *(void *)(v1 + 1024) = 4475221;
  *(void *)(v1 + 1032) = 0xE300000000000000;
  *(void *)(v1 + 1040) = sub_1002E83EC;
  *(void *)(v1 + 1048) = v45;
  uint64_t v46 = (void *)sub_1002E1F90();
  sub_1002E8404(v46);
  uint64_t v47 = sub_1002E8414();
  *(void *)(v47 + 16) = sub_1002E402C;
  *(void *)(v47 + 24) = v0;
  *(void *)(v1 + 1056) = 0x4843544546;
  *(void *)(v1 + 1064) = 0xE500000000000000;
  *(void *)(v1 + 1072) = sub_1002E83EC;
  *(void *)(v1 + 1080) = v47;
  uint64_t v48 = (void *)sub_1002E1F90();
  sub_1002E8404(v48);
  uint64_t v49 = sub_1002E8414();
  *(void *)(v49 + 16) = sub_1002E4048;
  *(void *)(v49 + 24) = v0;
  *(void *)(v1 + 1088) = 0x4E49474F4CLL;
  *(void *)(v1 + 1096) = 0xE500000000000000;
  *(void *)(v1 + 1104) = sub_1002E83EC;
  *(void *)(v1 + 1112) = v49;
  uint64_t v50 = (void *)sub_1002E1F90();
  sub_1002E8404(v50);
  uint64_t v51 = sub_1002E8414();
  *(void *)(v51 + 16) = sub_1002E4078;
  *(void *)(v51 + 24) = v0;
  strcpy((char *)(v1 + 1120), "AUTHENTICATE");
  *(unsigned char *)(v1 + 1133) = 0;
  *(_WORD *)(v1 + 1134) = -5120;
  *(void *)(v1 + 1136) = sub_1002E83EC;
  *(void *)(v1 + 1144) = v51;
  uint64_t v52 = (void *)sub_1002E1F90();
  sub_1002E8404(v52);
  uint64_t v53 = sub_1002E8414();
  *(void *)(v53 + 16) = sub_1002E40A8;
  *(void *)(v53 + 24) = v0;
  *(void *)(v1 + 1152) = 0x455441455243;
  *(void *)(v1 + 1160) = 0xE600000000000000;
  *(void *)(v1 + 1168) = sub_1002E83EC;
  *(void *)(v1 + 1176) = v53;
  long long v54 = (void *)sub_1002E1F90();
  sub_1002E8404(v54);
  uint64_t v55 = sub_1002E8414();
  *(void *)(v55 + 16) = sub_1002E40D8;
  *(void *)(v55 + 24) = v0;
  *(void *)(v1 + 1184) = 0x41544F5551544547;
  *(void *)(v1 + 1192) = 0xE800000000000000;
  *(void *)(v1 + 1200) = sub_1002E83EC;
  *(void *)(v1 + 1208) = v55;
  long long v56 = (void *)sub_1002E1F90();
  sub_1002E8404(v56);
  uint64_t v57 = sub_1002E8414();
  *(void *)(v57 + 16) = sub_1002E4300;
  *(void *)(v57 + 24) = v0;
  *(void *)(v1 + 1216) = 0x41544F5551544553;
  *(void *)(v1 + 1224) = 0xE800000000000000;
  *(void *)(v1 + 1232) = sub_1002E83EC;
  *(void *)(v1 + 1240) = v57;
  uint64_t v58 = (void *)sub_1002E1F90();
  sub_1002E8404(v58);
  uint64_t v59 = sub_1002E8414();
  *(void *)(v59 + 16) = sub_1002E4330;
  *(void *)(v59 + 24) = v0;
  strcpy((char *)(v1 + 1248), "GETQUOTAROOT");
  *(unsigned char *)(v1 + 1261) = 0;
  *(_WORD *)(v1 + 1262) = -5120;
  *(void *)(v1 + 1264) = sub_1002E83EC;
  *(void *)(v1 + 1272) = v59;
  uint64_t v60 = (void *)sub_1002E1F90();
  sub_1002E8404(v60);
  uint64_t v61 = sub_1002E8414();
  *(void *)(v61 + 16) = sub_1002E4510;
  *(void *)(v61 + 24) = v0;
  *(void *)(v1 + 1280) = 0x53534552504D4F43;
  *(void *)(v1 + 1288) = 0xE800000000000000;
  *(void *)(v1 + 1296) = sub_1002E83EC;
  *(void *)(v1 + 1304) = v61;
  swift_retain_n();
  sub_10000566C(&qword_1007122A8);
  sub_1005E1980();
  sub_1002FA200();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E3058()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E307C()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E30A0()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E30C4()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E30E8()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E310C()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E3130()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E3154()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E3178()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E319C()
{
  return sub_1002E31C0();
}

uint64_t sub_1002E31C0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1002E3208()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E3240()
{
  return sub_1002E4104();
}

uint64_t sub_1002E326C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(a1, *a2, a2[1]);
}

void sub_1002E329C()
{
  sub_1002E84C4();
  uint64_t v4 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    uint64_t v5 = v2;
    if (v4 >= v2)
    {
      sub_1002DB5BC();
      sub_10020DD10();
      *uint64_t v10 = v5;
    }
    else
    {
      sub_1002E8580();
      uint64_t v13 = v6;
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      __int16 v15 = *((_WORD *)v7 + 10);
      int v16 = *((_DWORD *)v7 + 4);
      char v14 = *((unsigned char *)v7 + 22);
      swift_retain();
      sub_10031E2BC(v1, v4, v5);
      if (!v0)
      {
        sub_1002E8564();
        *uint64_t v13 = sub_10030A8D0();
        v13[1] = v11;
        _OWORD v13[2] = v12;
        type metadata accessor for Command();
        sub_1002E85AC();
        swift_storeEnumTagMultiPayload();
        swift_release();
        goto LABEL_8;
      }
      swift_release();
      *(void *)uint64_t v1 = v8;
      *(void *)(v1 + 8) = v9;
      *(_DWORD *)(v1 + 16) = v16;
      *(_WORD *)(v1 + 20) = v15;
      *(unsigned char *)(v1 + 22) = v14;
    }
    swift_willThrow();
LABEL_8:
    sub_1002E84E4();
    return;
  }
  __break(1u);
}

uint64_t sub_1002E33BC()
{
  sub_1002E1C9C();
  return sub_1002E34E4(v0, v1, v2, v3, v4, v5, v6, (uint64_t)sub_1002E8240, v7, (uint64_t)&type metadata for Capability);
}

uint64_t sub_1002E3408()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3438()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3468()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3498()
{
  sub_1002E1C9C();
  return sub_1002E34E4(v0, v1, v2, v3, v4, v5, v6, (uint64_t)sub_1002E8224, v7, (uint64_t)&type metadata for RumpURLAndMechanism);
}

uint64_t sub_1002E34E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  _OWORD v13[2] = a4;
  v13[3] = a5;
  void v13[4] = a6;
  v13[5] = a7;
  uint64_t result = sub_10032CFD8(a1, a2, a3, a8, (uint64_t)v13, a10);
  if (!v10)
  {
    *a9 = result;
    type metadata accessor for Command();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1002E355C()
{
  sub_1002E1C9C();
  return sub_1002E34E4(v0, v1, v2, v3, v4, v5, v6, (uint64_t)sub_1002E8208, v7, (uint64_t)&type metadata for ByteBuffer);
}

uint64_t sub_1002E35A8()
{
  return sub_1002E4260();
}

uint64_t sub_1002E35D8()
{
  return sub_1002E3608();
}

uint64_t sub_1002E3608()
{
  sub_1002E1C9C();
  return v0();
}

uint64_t sub_1002E3630()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3660()
{
  return sub_1002E4260();
}

#error "1002E36DC: call analysis failed (funcsize=39)"

uint64_t sub_1002E3730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a7;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t result = sub_10032A58C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1002E81EC, (uint64_t)v35);
  if (!v8)
  {
    uint64_t v29 = result;
    uint64_t v31 = v18;
    uint64_t v33 = v19;
    uint64_t v41 = v20;
    uint64_t v27 = a8;
    swift_retain_n();
    uint64_t v21 = (void *)sub_10032A620();
    swift_release();
    if (!v21) {
      uint64_t v21 = _swiftEmptyArrayStorage;
    }
    sub_10031E2BC(a1, a2, a3);
    sub_10030121C(a1, a2, a3, a4, a5, a6, a7, v22, v27, v29, v31, v33, v35[0], v35[1], v36, v37, v38, v39, v40, v41);
    *uint64_t v28 = v24;
    v28[1] = v23;
    uint64_t v28[2] = v25;
    v28[3] = v21;
    _OWORD v28[4] = v30;
    v28[5] = v32;
    uint64_t v26 = v41;
    v28[6] = v34;
    v28[7] = v26;
    type metadata accessor for Command();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_1002E38E0()
{
  sub_1002E1C9C();
  return sub_1002E3730(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002E38FC()
{
  return sub_1002E4260();
}

uint64_t sub_1002E392C()
{
  return sub_1002E3608();
}

uint64_t sub_1002E395C()
{
  return sub_1002E4260();
}

uint64_t sub_1002E398C()
{
  return sub_1002E4260();
}

uint64_t sub_1002E39BC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E39F4()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3A24()
{
  return sub_1002E3608();
}

void sub_1002E3A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= a3)
    {
      sub_1002DB5BC();
      sub_10020DD10();
      *uint64_t v32 = a3;
    }
    else
    {
      sub_1002E85B8();
      uint64_t v7 = v6;
      uint64_t v43 = v8;
      uint64_t v9 = *(void *)v6;
      uint64_t v10 = *(void *)(v6 + 8);
      LODWORD(v46) = *(unsigned __int16 *)(v6 + 20);
      HIDWORD(v46) = *(_DWORD *)(v6 + 16);
      LODWORD(v45) = v11;
      HIDWORD(v45) = *(unsigned __int8 *)(v6 + 22);
      swift_retain();
      sub_10031E2BC(v7, v4, a3);
      if (!v3)
      {
        uint64_t v12 = sub_1002E8504();
        sub_100308D44(v12, v13, v14, v15, v16, v17, v18, v19, v33, v35, v38, v41, v43, v45, v46, v47, v48, v49, v50,
          v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57);
        unint64_t v39 = HIDWORD(v21);
        uint64_t v42 = v20;
        unint64_t v34 = v22;
        unsigned int v36 = v21;
        swift_beginAccess();
        v23._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v42 + 24) + ((v34 >> 24) & 0xFFFF00 | BYTE6(v34)) + v36, v39 - v36);
        NIOIMAPCore2::MailboxName v58 = MailboxName.init(_:)(v23);
        uint64_t rawValue = v58.bytes._rawValue;
        Swift::UInt32 value = v58._hashValue._value;
        swift_release();
        uint64_t v24 = sub_1002E8504();
        uint64_t v31 = sub_1002E4F0C(v24, v25, v26, v27, v28, v29, v30);
        *(void *)uint64_t v44 = rawValue;
        *(_DWORD *)(v44 + 8) = value;
        *(void *)(v44 + 16) = v31;
        type metadata accessor for Command();
        swift_storeEnumTagMultiPayload();
        swift_release();
        return;
      }
      swift_release();
      *(void *)uint64_t v7 = v9;
      *(void *)(v7 + 8) = v10;
      *(_DWORD *)(v7 + 16) = HIDWORD(v46);
      *(_WORD *)(v7 + 20) = v46;
      *(unsigned char *)(v7 + 22) = BYTE4(v45);
    }
    swift_willThrow();
  }
}

uint64_t sub_1002E3C1C()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3C4C()
{
  return sub_1002E3608();
}

uint64_t sub_1002E3C7C()
{
  return sub_1002E3608();
}

uint64_t sub_1002E3CAC()
{
  return sub_1002E4260();
}

uint64_t sub_1002E3CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v41 = a8;
  uint64_t v16 = sub_10000566C(&qword_1007104D8);
  uint64_t result = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v20 = __OFADD__(a2, 1);
  uint64_t v21 = a2 + 1;
  if (v20)
  {
    __break(1u);
    return result;
  }
  if (v21 >= a3)
  {
    sub_1002DB5BC();
    swift_allocError();
    *uint64_t v26 = a3;
    return swift_willThrow();
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  int v24 = *(_DWORD *)(a1 + 16);
  int v38 = *(unsigned __int16 *)(a1 + 20);
  int v39 = v24;
  int v37 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v40 = v22;
  swift_retain();
  sub_10031E2BC(a1, v21, a3);
  if (v8)
  {
    uint64_t v27 = v40;
    swift_release();
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v23;
    *(_DWORD *)(a1 + 16) = v39;
    *(_WORD *)(a1 + 20) = v38;
    *(unsigned char *)(a1 + 22) = v37;
    return swift_willThrow();
  }
  unsigned int v36 = &v35;
  __chkstk_darwin(v25);
  *(&v35 - 4) = a4;
  *(&v35 - 3) = a5;
  unint64_t v33 = 0x80000001005E63C0;
  uint64_t v34 = 122;
  sub_10033CBF4((uint64_t)sub_1002E7FCC, (uint64_t)(&v35 - 6), (uint64_t)sub_100300094);
  sub_10031E2BC(a1, v21, a3);
  unsigned int v36 = (uint64_t *)sub_1002EE584(a1, v21, a3, a4, a5, a6, a7);
  swift_retain_n();
  uint64_t v28 = (void *)sub_10032AA48();
  swift_release();
  if (!v28) {
    uint64_t v28 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = sub_10000566C(&qword_1007108F8);
  uint64_t v30 = *(int *)(v29 + 48);
  uint64_t v31 = *(int *)(v29 + 64);
  uint64_t v32 = v41;
  sub_10025406C((uint64_t)v19, v41, &qword_1007104D8);
  *(void *)(v32 + v30) = v36;
  *(void *)(v32 + v31) = v28;
  type metadata accessor for Command();
  swift_storeEnumTagMultiPayload();
  return swift_release();
}

uint64_t sub_1002E402C()
{
  sub_1002E1C9C();
  return sub_1002E3CDC(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002E4048()
{
  return sub_1002E4260();
}

uint64_t sub_1002E4078()
{
  return sub_1002E4260();
}

uint64_t sub_1002E40A8()
{
  return sub_1002E4260();
}

uint64_t sub_1002E40D8()
{
  return sub_1002E4104();
}

uint64_t sub_1002E4104()
{
  sub_1002E1C9C();
  return v0();
}

#error "1002E41A4: call analysis failed (funcsize=77)"

#error "1002E42AC: call analysis failed (funcsize=39)"

uint64_t sub_1002E4300()
{
  return sub_1002E4260();
}

uint64_t sub_1002E4330()
{
  return sub_1002E3608();
}

void sub_1002E4360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v8 >= a3)
    {
      sub_1002DB5BC();
      sub_10020DD10();
      *uint64_t v16 = a3;
    }
    else
    {
      sub_1002E85B8();
      uint64_t v11 = v10;
      uint64_t v27 = v12;
      uint64_t v13 = *(void *)(v10 + 8);
      int v14 = *(_DWORD *)(v10 + 16);
      HIDWORD(v30) = *(unsigned __int16 *)(v10 + 20);
      LODWORD(v30) = *(unsigned __int8 *)(v10 + 22);
      uint64_t v31 = *(void (**)())v10;
      swift_retain();
      sub_10031E2BC(v11, v8, a3);
      if (!v4)
      {
        sub_100308D44(v11, v8, a3, v3, v7, v6, v5, v15, v26, v27, v29, v30, v31, v32, v33, v34, v35, v36, v37,
          v38,
          v39,
          v40,
          v41,
          v42,
          v43,
          v44);
        uint64_t v18 = v17;
        unsigned int v20 = v19;
        unint64_t v22 = v21;
        unint64_t v23 = HIDWORD(v19);
        swift_beginAccess();
        v24._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v18 + 24) + ((v22 >> 24) & 0xFFFF00 | BYTE6(v22)) + v20, v23 - v20);
        NIOIMAPCore2::MailboxName v45 = MailboxName.init(_:)(v24);
        uint64_t rawValue = v45.bytes._rawValue;
        LODWORD(v22) = v45._hashValue._value;
        swift_release();
        *(void *)uint64_t v28 = rawValue;
        *(_DWORD *)(v28 + 8) = v22;
        type metadata accessor for Command();
        sub_1002E85AC();
        swift_storeEnumTagMultiPayload();
        swift_release();
        return;
      }
      swift_release();
      *(void *)uint64_t v11 = v31;
      *(void *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 16) = v14;
      *(_WORD *)(v11 + 20) = WORD2(v30);
      *(unsigned char *)(v11 + 22) = v30;
    }
    swift_willThrow();
  }
}

uint64_t sub_1002E4510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_1002E452C(a1, a2, a3, *(void (**)(uint64_t))(v4 + 16), a4);
}

uint64_t sub_1002E452C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v6 >= a3)
    {
      sub_1002DB5BC();
      sub_10020DD10();
      *unsigned int v20 = a3;
    }
    else
    {
      uint64_t v8 = result;
      uint64_t v9 = *(void *)result;
      uint64_t v10 = *(void *)(result + 8);
      int v11 = *(_DWORD *)(result + 16);
      __int16 v12 = *(_WORD *)(result + 20);
      char v13 = *(unsigned char *)(result + 22);
      swift_retain();
      sub_10031E2BC(v8, v6, a3);
      if (!v5)
      {
        sub_10031F63C(v8, v6, a3);
        sub_1002E8598();
        uint64_t v19 = sub_10031E368(v14, v15, v16, v17, v18, 107);
        a4(v19);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v21 = sub_1005E1CD0();
        uint64_t v23 = v22;
        swift_bridgeObjectRelease();
        *a5 = v21;
        a5[1] = v23;
        type metadata accessor for Command();
        swift_storeEnumTagMultiPayload();
        return swift_release();
      }
      swift_release();
      *(void *)uint64_t v8 = v9;
      *(void *)(v8 + 8) = v10;
      *(_DWORD *)(v8 + 16) = v11;
      *(_WORD *)(v8 + 20) = v12;
      *(unsigned char *)(v8 + 22) = v13;
    }
    return swift_willThrow();
  }
  return result;
}

#error "1002E4738: call analysis failed (funcsize=40)"

#error "1002E47E8: call analysis failed (funcsize=82)"

void sub_1002E48C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v5)
  {
    sub_10030A634(a1, a2, a3, a4);
    uint64_t v16 = sub_1005E1CD0();
    uint64_t v17 = v10;
    swift_bridgeObjectRelease();
    swift_retain();
    sub_10032A668();
    *(void *)a5 = v16;
    *(void *)(a5 + 8) = v17;
    *(void *)(a5 + 16) = v11;
    *(void *)(a5 + 24) = v12;
    *(_DWORD *)(a5 + 32) = v13;
    *(unsigned char *)(a5 + 38) = v14;
    *(_WORD *)(a5 + 36) = v15;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E49F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v16, v24, v25, v26, v28, v30, v32, v34, v36, v38, v40, v42,
      a8,
      v47,
      v49,
      v51,
      v53,
      v55,
      v57);
    uint64_t v27 = a6;
    uint64_t v29 = a7;
    swift_beginAccess();
    uint64_t v17 = sub_1005E1D70();
    uint64_t v19 = v18;
    swift_release();
    sub_10031E1C0();
    sub_100308D44(a1, a2, a3, a4, a5, v27, v29, v20, a4, a5, v27, v29, v31, v33, v35, v37, v39, v41, v43,
      v45,
      v48,
      v50,
      v52,
      v54,
      v56,
      v58);
    swift_beginAccess();
    uint64_t v21 = sub_1005E1D70();
    uint64_t v23 = v22;
    swift_release();
    *uint64_t v46 = v17;
    v46[1] = v19;
    v46[2] = v21;
    v46[3] = v23;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E4BCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)()@<X6>, void *a8@<X8>)
{
  uint64_t v37 = a8;
  uint64_t v38 = a3;
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, v38, a4, a5, a6, (uint64_t)a7, v15, v32[6], v33, (char)v34, v35, v36, v37, v38, v39, v40, v41, v42,
      v43[0],
      v43[1],
      v43[2],
      v43[3],
      v43[4],
      v43[5],
      v43[6]);
    unsigned int v17 = v16;
    unint64_t v19 = v18;
    uint64_t v35 = a5;
    uint64_t v36 = a7;
    unint64_t v20 = HIDWORD(v16);
    uint64_t v22 = v21;
    swift_beginAccess();
    v23._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v22 + 24) + ((v19 >> 24) & 0xFFFF00 | BYTE6(v19)) + v17, v20 - v17);
    NIOIMAPCore2::MailboxName v44 = MailboxName.init(_:)(v23);
    uint64_t rawValue = v44.bytes._rawValue;
    Swift::UInt32 value = v44._hashValue._value;
    swift_release();
    sub_10031E1C0();
    HIDWORD(v33) = value;
    uint64_t v34 = rawValue;
    sub_10000566C(&qword_100710728);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1005F6670;
    uint64_t v28 = v35;
    uint64_t v27 = v36;
    uint64_t v29 = sub_10030A774(a1, a2, v38);
    *(unsigned char *)(v26 + 32) = v29;
    v43[0] = v26;
    __chkstk_darwin(v29);
    _OWORD v32[2] = a4;
    v32[3] = v28;
    v32[4] = a6;
    v32[5] = v27;
    sub_10031E828(a1, a2, v38, (uint64_t)sub_1002E8118, (uint64_t)v32, (uint64_t)v43);
    sub_10031E1C0();
    uint64_t v30 = v43[0];
    uint64_t v31 = v37;
    *uint64_t v37 = v34;
    *((_DWORD *)v31 + 2) = HIDWORD(v33);
    _OWORD v31[2] = v30;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E4E6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  sub_10031E1C0();
  if (!v4) {
    *a4 = sub_10030A774(a1, a2, a3);
  }
}

void *sub_1002E4F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_retain();
  uint64_t result = (void *)sub_100321F98(a1, a2, a3, a4, a5, a6, a7);
  if (v7)
  {
    swift_errorRetain();
    sub_10000566C(qword_100710378);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      return _swiftEmptyArrayStorage;
    }
    else
    {
      return (void *)swift_errorRelease();
    }
  }
  return result;
}

void sub_1002E500C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v16, v42, v45, v48, v49, v51, v53, v56, v58, v60, v62, v64,
      v66,
      v68,
      a8,
      v73,
      v75,
      v77,
      v79);
    unsigned int v18 = v17;
    uint64_t v50 = a6;
    uint64_t v52 = (void (*)())a7;
    unint64_t v54 = HIDWORD(v17);
    uint64_t v20 = v19;
    unint64_t v22 = v21;
    swift_beginAccess();
    v23._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v20 + 24) + ((v22 >> 24) & 0xFFFF00 | BYTE6(v22)) + v18, v54 - v18);
    NIOIMAPCore2::MailboxName v81 = MailboxName.init(_:)(v23);
    uint64_t rawValue = v81.bytes._rawValue;
    LODWORD(v22) = v81._hashValue._value;
    swift_release();
    sub_10031E1C0();
    HIDWORD(v46) = v22;
    sub_100308D44(a1, a2, a3, a4, a5, v50, (uint64_t)v52, v25, v43, v46, a4, v50, v52, rawValue, v57, v59, v61, v63, v65,
      v67,
      v69,
      v71,
      v74,
      v76,
      v78,
      v80);
    LODWORD(rawValue) = v26;
    unint64_t v28 = v27;
    unint64_t v44 = HIDWORD(v26);
    uint64_t v30 = v29;
    swift_beginAccess();
    v31._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v30 + 24) + ((v28 >> 24) & 0xFFFF00 | BYTE6(v28)) + rawValue, v44 - rawValue);
    NIOIMAPCore2::MailboxName v82 = MailboxName.init(_:)(v31);
    uint64_t v32 = v82.bytes._rawValue;
    Swift::UInt32 value = v82._hashValue._value;
    swift_release();
    swift_retain_n();
    sub_10032A694();
    uint64_t v37 = v34;
    uint64_t v38 = v35;
    uint64_t v39 = v36;
    swift_release();
    if (!v38)
    {
      uint64_t v37 = sub_10031AB74((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v38 = v40;
      uint64_t v39 = v41;
    }
    *(void *)uint64_t v72 = v55;
    *(_DWORD *)(v72 + 8) = v47;
    *(void *)(v72 + 16) = v32;
    *(_DWORD *)(v72 + 24) = value;
    *(void *)(v72 + 32) = v37;
    *(void *)(v72 + 40) = v38;
    *(void *)(v72 + 48) = v39;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E52A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v16, v32, v33, v35, v36, v38, v40, v41, v42, v43, a8, v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53);
    unsigned int v18 = v17;
    uint64_t v34 = a4;
    uint64_t v37 = a6;
    uint64_t v39 = a7;
    unint64_t v19 = HIDWORD(v17);
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    swift_beginAccess();
    v24._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v21 + 24) + ((v23 >> 24) & 0xFFFF00 | BYTE6(v23)) + v18, v19 - v18);
    NIOIMAPCore2::MailboxName v54 = MailboxName.init(_:)(v24);
    uint64_t rawValue = v54.bytes._rawValue;
    LODWORD(v23) = v54._hashValue._value;
    swift_release();
    sub_10031E2BC(a1, a2, a3);
    uint64_t v26 = sub_1002F24AC(a1, a2, a3, v34, a5, v37, v39);
    *(void *)uint64_t v45 = rawValue;
    *(_DWORD *)(v45 + 8) = v23;
    *(void *)(v45 + 16) = v26;
    *(_DWORD *)(v45 + 24) = v27;
    *(_DWORD *)(v45 + 28) = v28;
    *(_DWORD *)(v45 + 32) = v29;
    *(_WORD *)(v45 + 36) = v30;
    *(unsigned char *)(v45 + 38) = v31;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E542C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v12 = sub_10000566C(&qword_1007104D8);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031E2BC(a1, a2, a3);
  if (!v6)
  {
    uint64_t v33 = a6;
    unint64_t v34 = (unint64_t)&v31;
    __chkstk_darwin(v15);
    *(&v31 - 4) = v35;
    *(&v31 - 3) = a5;
    unint64_t v29 = 0x80000001005E63C0;
    uint64_t v30 = 122;
    sub_10033CBF4((uint64_t)sub_1002E828C, (uint64_t)(&v31 - 6), (uint64_t)sub_100300094);
    unint64_t v34 = (unint64_t)"SHSERVICE response type: ";
    swift_retain();
    uint64_t v16 = sub_10032A6C0();
    if (v16) {
      unint64_t v17 = (void *)v16;
    }
    else {
      unint64_t v17 = _swiftEmptyArrayStorage;
    }
    sub_10031E2BC(a1, a2, a3);
    uint64_t v32 = v17;
    uint64_t v19 = __chkstk_darwin(v18);
    *(&v31 - 4) = v35;
    *(&v31 - 3) = a5;
    __chkstk_darwin(v19);
    *(&v31 - 4) = v20;
    *(&v31 - 3) = a5;
    unint64_t v29 = v34 | 0x8000000000000000;
    uint64_t v30 = 2275;
    uint64_t v22 = sub_10033CBA4((uint64_t)sub_1002E82A4, v21, (uint64_t)sub_1002E82BC, (uint64_t)(&v31 - 6));
    uint64_t v24 = v23;
    uint64_t v25 = sub_10000566C(&qword_1007108F0);
    uint64_t v26 = *(int *)(v25 + 48);
    uint64_t v27 = v33;
    int v28 = (uint64_t *)(v33 + *(int *)(v25 + 64));
    sub_10025406C((uint64_t)v14, v33, &qword_1007104D8);
    *(void *)(v27 + v26) = v32;
    *int v28 = v22;
    v28[1] = v24;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

#error "1002E590C: call analysis failed (funcsize=150)"

#error "1002E5B9C: call analysis failed (funcsize=154)"

void sub_1002E5C84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v15, v25, v28, a8, v32, v33, v34, v35, a7, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      vars0,
      vars8);
    unsigned int v17 = v16;
    unint64_t v19 = v18;
    unint64_t v26 = HIDWORD(v16);
    uint64_t v29 = v20;
    swift_beginAccess();
    v21._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v29 + 24) + ((v19 >> 24) & 0xFFFF00 | BYTE6(v19)) + v17, v26 - v17);
    NIOIMAPCore2::MailboxName v47 = MailboxName.init(_:)(v21);
    uint64_t rawValue = v47.bytes._rawValue;
    Swift::UInt32 value = v47._hashValue._value;
    swift_release();
    swift_retain_n();
    uint64_t v23 = sub_10032A76C();
    swift_release();
    uint64_t v24 = _swiftEmptyArrayStorage;
    if (v23) {
      uint64_t v24 = (void *)v23;
    }
    *(void *)uint64_t v31 = rawValue;
    *(_DWORD *)(v31 + 8) = value;
    *(void *)(v31 + 16) = v24;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E5E14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v5)
  {
    sub_10030A634(a1, a2, a3, a4);
    uint64_t v12 = v11;
    unint64_t v14 = v13;
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_100240DB8(61, 0xE100000000000000, v12, v14);
    char v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)a5 = v12;
    *(void *)(a5 + 8) = v14;
    *(void *)(a5 + 16) = v15;
    *(unsigned char *)(a5 + 24) = v17 & 1;
  }
}

void sub_1002E5EF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    swift_retain();
    sub_10032A7B4();
    unint64_t v19 = _swiftEmptyArrayStorage;
    if (v17) {
      unint64_t v19 = v17;
    }
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v18, v25, v26, v28, v31, v34, v36, v37, v38, v39, (uint64_t)v19, v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48);
    unint64_t v32 = HIDWORD(v21);
    uint64_t v35 = v20;
    unint64_t v27 = v22;
    unsigned int v29 = v21;
    swift_beginAccess();
    v23._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v35 + 24) + ((v27 >> 24) & 0xFFFF00 | BYTE6(v27)) + v29, v32 - v29);
    NIOIMAPCore2::MailboxName v49 = MailboxName.init(_:)(v23);
    uint64_t rawValue = v49.bytes._rawValue;
    Swift::UInt32 value = v49._hashValue._value;
    swift_release();
    sub_10031E2BC(a1, a2, a3);
    uint64_t v24 = sub_1002EA824(a1, a2, a3, a4, a5, a6, a7);
    *(void *)a8 = v40;
    *(void *)(a8 + 8) = rawValue;
    *(_DWORD *)(a8 + 16) = value;
    *(void *)(a8 + 24) = v24;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E60D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v16, v29, v31, v33, v35, v36, v37, v38, a8, v41, v42, v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      vars0,
      vars8);
    unsigned int v18 = v17;
    uint64_t v30 = a4;
    uint64_t v32 = a6;
    uint64_t v34 = a7;
    unint64_t v19 = HIDWORD(v17);
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    swift_beginAccess();
    v24._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v21 + 24) + ((v23 >> 24) & 0xFFFF00 | BYTE6(v23)) + v18, v19 - v18);
    NIOIMAPCore2::MailboxName v51 = MailboxName.init(_:)(v24);
    uint64_t rawValue = v51.bytes._rawValue;
    LODWORD(v23) = v51._hashValue._value;
    swift_release();
    sub_10031E2BC(a1, a2, a3);
    swift_retain();
    uint64_t v26 = sub_10032269C(a1, a2, a3, v30, a5, v32, v34);
    *(void *)uint64_t v40 = rawValue;
    *(_DWORD *)(v40 + 8) = v23;
    *(void *)(v40 + 16) = v26;
    *(void *)(v40 + 24) = v27;
    *(void *)(v40 + 32) = v28;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_1002E6250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  uint64_t v16 = sub_1003226C8(a1, a2, a3, a4, a5, a6, a7);
  if (v8)
  {
    swift_errorRetain();
    sub_10000566C(qword_100710378);
    if (!swift_dynamicCast()) {
      return swift_errorRelease();
    }
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v18 = 0;
    int v19 = 0;
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v18 = v16;
    int v22 = v17;
    swift_retain();
    uint64_t v20 = (void *)sub_10032D0F4();
    int v19 = v22;
  }
  *(void *)a8 = v18;
  *(_DWORD *)(a8 + 8) = v19;
  *(void *)(a8 + 16) = v20;
  type metadata accessor for Command();
  return swift_storeEnumTagMultiPayload();
}

#error "1002E644C: call analysis failed (funcsize=64)"

double sub_1002E64DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    swift_retain();
    sub_100322778(v23, a1, a2, a3, a4, a5, a6, a7);
    int v18 = v24;
    __int16 v19 = v25;
    char v20 = v26;
    uint64_t v21 = v27;
    uint64_t v22 = v28;
    double result = *(double *)&v23[1];
    *(void *)a8 = v23[0];
    *(double *)(a8 + 8) = result;
    *(_DWORD *)(a8 + 16) = v18;
    *(_WORD *)(a8 + 20) = v19;
    *(unsigned char *)(a8 + 22) = v20;
    *(void *)(a8 + 24) = v21;
    *(void *)(a8 + 32) = v22;
  }
  return result;
}

uint64_t sub_1002E65A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  swift_retain();
  uint64_t result = sub_10032A620();
  if (!v8)
  {
    uint64_t v28 = result;
    sub_10031E2BC(a1, a2, a3);
    sub_10030121C(a1, a2, a3, a4, a5, a6, a7, v18, v27, v28, v30, v31, v32, v33, v34, v35, v36, v37, vars0, vars8);
    uint64_t v22 = v19;
    uint64_t v23 = v20;
    uint64_t v24 = v21;
    if (v29)
    {
      sub_100219B48();
      __int16 v25 = v29;
      if (v26)
      {
        swift_bridgeObjectRelease();
        sub_10000566C(&qword_100710720);
        type metadata accessor for SearchReturnOption();
        __int16 v25 = (void *)swift_allocObject();
        *((_OWORD *)v25 + 1) = xmmword_1005F6670;
        swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      __int16 v25 = _swiftEmptyArrayStorage;
    }
    *a8 = v24;
    a8[1] = v22;
    a8[2] = v23;
    a8[3] = v25;
    type metadata accessor for Command();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

void sub_1002E6780(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  sub_10032A7E0(a1, a2);
  if (!v8)
  {
    sub_10031E2BC(a1, a2, a3);
    sub_100308D44(a1, a2, a3, a4, a5, a6, a7, v17, v31, v32, v34, v36, v38, v59, v51, v53, v55, v57, a8,
      a3,
      a4,
      a6,
      a7,
      v52,
      v54,
      v56);
    unsigned int v19 = v18;
    unint64_t v39 = HIDWORD(v18);
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    swift_beginAccess();
    v24._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v21 + 24) + ((v23 >> 24) & 0xFFFF00 | BYTE6(v23)) + v19, v39 - v19);
    NIOIMAPCore2::MailboxName v60 = MailboxName.init(_:)(v24);
    uint64_t rawValue = v60.bytes._rawValue;
    Swift::UInt32 value = v60._hashValue._value;
    swift_release();
    sub_10031E2BC(a1, a2, a3);
    uint64_t v33 = sub_1002F32A8(a1, a2, a3, a4, a5, v46, v47);
    uint64_t v35 = v27;
    uint64_t v37 = v28;
    swift_retain();
    sub_10032A948();
    uint64_t v30 = _swiftEmptyArrayStorage;
    if (v29) {
      uint64_t v30 = v29;
    }
    *(void *)uint64_t v45 = v41;
    *(void *)(v45 + 8) = v48;
    *(void *)(v45 + 16) = v42;
    *(void *)(v45 + 24) = v49;
    *(void *)(v45 + 32) = v43;
    *(void *)(v45 + 40) = v50;
    *(void *)(v45 + 48) = v44;
    *(void *)(v45 + 56) = v58;
    *(void *)(v45 + 64) = v40;
    *(void *)(v45 + 72) = rawValue;
    *(_DWORD *)(v45 + 80) = value;
    *(void *)(v45 + 88) = v33;
    *(void *)(v45 + 96) = v35;
    *(_DWORD *)(v45 + 104) = v37;
    *(unsigned char *)(v45 + 110) = BYTE6(v37);
    *(_WORD *)(v45 + 108) = WORD2(v37);
    *(unsigned char *)(v45 + 111) = HIBYTE(v37) & 1;
    *(void *)(v45 + 112) = v30;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

#error "1002E6BE8: call analysis failed (funcsize=138)"

#error "1002E6E1C: call analysis failed (funcsize=134)"

uint64_t sub_1002E6F18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v48 = a8;
  uint64_t v49 = a7;
  uint64_t v15 = sub_10000566C(&qword_1007108C0);
  sub_1001F3BBC();
  uint64_t result = __chkstk_darwin(v16);
  unsigned int v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v20 = __OFADD__(a2, 1);
  uint64_t v21 = a2 + 1;
  if (v20)
  {
    __break(1u);
    return result;
  }
  if (v21 >= a3)
  {
    sub_1002DB5BC();
    sub_10020DD10();
    *uint64_t v35 = a3;
    return swift_willThrow();
  }
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  int v24 = *((_DWORD *)a1 + 4);
  int v45 = *((unsigned __int16 *)a1 + 10);
  int v46 = v24;
  int v44 = *((unsigned __int8 *)a1 + 22);
  uint64_t v47 = v22;
  swift_retain();
  sub_10031E1C0();
  if (v8)
  {
    uint64_t v34 = v47;
    swift_release();
    *a1 = v34;
    a1[1] = v23;
    *((_DWORD *)a1 + 4) = v46;
    *((_WORD *)a1 + 10) = v45;
    *((unsigned char *)a1 + 22) = v44;
    return swift_willThrow();
  }
  uint64_t v25 = sub_1002E8528();
  sub_100307D5C(v25, v26, v27);
  uint64_t v28 = sub_1002E8528();
  sub_10031E2BC(v28, v29, v30);
  uint64_t v31 = sub_1002E8528();
  uint64_t v43 = a4;
  uint64_t v42 = sub_1002EE584(v31, v32, v33, a4, a5, a6, v49);
  swift_retain_n();
  sub_1002E8528();
  uint64_t v36 = (void *)sub_10032AA48();
  swift_release();
  if (!v36) {
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  uint64_t v37 = sub_10000566C(&qword_1007108D8);
  uint64_t v38 = *(int *)(v37 + 48);
  uint64_t v39 = *(int *)(v37 + 64);
  uint64_t v40 = v48;
  sub_10025406C((uint64_t)v19, v48, &qword_1007108C0);
  storeEnumTagSinglePayload for ClientCommand(v40, 0, 1, v15);
  *(void *)(v40 + v38) = v42;
  *(void *)(v40 + v39) = v36;
  type metadata accessor for Command();
  swift_storeEnumTagMultiPayload();
  return swift_release();
}

void sub_1002E71EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v22 = a8;
  uint64_t v15 = type metadata accessor for Command();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031E1C0();
  if (!v8)
  {
    sub_1002E3690(a1, a2, a3, a4, a5, a6, v23, sub_1002E65A0);
    if (swift_getEnumCaseMultiPayload() == 17)
    {
      uint64_t v18 = *((void *)v17 + 2);
      uint64_t v19 = *((void *)v17 + 3);
      BOOL v20 = v22;
      *uint64_t v22 = *(_OWORD *)v17;
      *((void *)v20 + 2) = v18;
      *((void *)v20 + 3) = v19;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      sub_10024EFF4((uint64_t)v17);
      sub_1005E2F20();
      __break(1u);
    }
  }
}

#error "1002E73F8: call analysis failed (funcsize=39)"

void sub_1002E744C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v34 = a7;
  uint64_t v33 = sub_10000566C(&qword_1007108C0);
  __chkstk_darwin(v33);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031E1C0();
  if (!v7)
  {
    sub_100307D5C(a1, a2, a3);
    swift_retain();
    uint64_t v16 = sub_10032A6C0();
    uint64_t v32 = a6;
    if (v16) {
      uint64_t v17 = (void *)v16;
    }
    else {
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    sub_10031E2BC(a1, a2, a3);
    uint64_t v30 = (uint64_t)&v30;
    uint64_t v31 = v17;
    uint64_t v19 = __chkstk_darwin(v18);
    *(&v30 - 4) = a4;
    *(&v30 - 3) = a5;
    __chkstk_darwin(v19);
    *(&v30 - 4) = a4;
    *(&v30 - 3) = a5;
    unint64_t v28 = 0x80000001005E63C0;
    uint64_t v29 = 2275;
    uint64_t v21 = sub_10033CBA4((uint64_t)sub_1002E80E0, v20, (uint64_t)sub_1002E80FC, (uint64_t)(&v30 - 6));
    uint64_t v23 = v22;
    uint64_t v24 = sub_10000566C(&qword_1007108D0);
    uint64_t v25 = *(int *)(v24 + 48);
    uint64_t v26 = v34;
    uint64_t v27 = (uint64_t *)(v34 + *(int *)(v24 + 64));
    sub_10025406C((uint64_t)v15, v34, &qword_1007108C0);
    storeEnumTagSinglePayload for ClientCommand(v26, 0, 1, v33);
    *(void *)(v26 + v25) = v31;
    *uint64_t v27 = v21;
    v27[1] = v23;
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E775C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v15 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10000566C(&qword_1007108C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10031E1C0();
  if (!v5)
  {
    sub_100307D5C(a1, a2, a3);
    uint64_t v12 = v14;
    sub_10025406C((uint64_t)v11, v14, &qword_1007108C0);
    storeEnumTagSinglePayload for ClientCommand(v12, 0, 1, v9);
    type metadata accessor for Command();
    swift_storeEnumTagMultiPayload();
  }
}

void sub_1002E78C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v7)
  {
    sub_10000566C(&qword_1007122B0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005F6720;
    uint64_t v28 = a3;
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = a4;
    v16[3] = a5;
    v16[4] = a6;
    v16[5] = a7;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_1002E7FE8;
    *(void *)(v17 + 24) = v16;
    *(void *)(inited + 32) = sub_1002E83EC;
    *(void *)(inited + 40) = v17;
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a4;
    v18[3] = a5;
    v18[4] = a6;
    v18[5] = a7;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1002E8018;
    *(void *)(v19 + 24) = v18;
    *(void *)(inited + 48) = sub_1002E83EC;
    *(void *)(inited + 56) = v19;
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = a4;
    void v20[3] = a5;
    v20[4] = a6;
    v20[5] = a7;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1002E8048;
    *(void *)(v21 + 24) = v20;
    *(void *)(inited + 64) = sub_1002E83EC;
    *(void *)(inited + 72) = v21;
    uint64_t v22 = (void *)swift_allocObject();
    v22[2] = a4;
    v22[3] = a5;
    _OWORD v22[4] = a6;
    v22[5] = a7;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_1002E8064;
    *(void *)(v23 + 24) = v22;
    *(void *)(inited + 80) = sub_1002E83EC;
    *(void *)(inited + 88) = v23;
    uint64_t v24 = (void *)swift_allocObject();
    _OWORD v24[2] = a4;
    v24[3] = a5;
    v24[4] = a6;
    v24[5] = a7;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_1002E8094;
    *(void *)(v25 + 24) = v24;
    *(void *)(inited + 96) = sub_1002E83EC;
    *(void *)(inited + 104) = v25;
    uint64_t v26 = (void *)swift_allocObject();
    void v26[2] = a4;
    v26[3] = a5;
    void v26[4] = a6;
    v26[5] = a7;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_1002E80C4;
    *(void *)(v27 + 24) = v26;
    *(void *)(inited + 112) = sub_1002E83EC;
    *(void *)(inited + 120) = v27;
    swift_retain_n();
    sub_10033DBD0(inited, a1, a2, v28, 0xD000000000000020, 0x80000001005E63C0, 456);
    swift_setDeallocating();
    sub_10034A020();
  }
}

void sub_1002E7BE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_1002E8538();
    uint64_t v28 = a8;
    sub_10000566C(&qword_100710730);
    type metadata accessor for SelectParameter(0);
    uint64_t v17 = swift_allocObject();
    uint64_t v29 = &v28;
    *(_OWORD *)(v17 + 16) = xmmword_1005F6670;
    uint64_t v18 = v17;
    uint64_t v19 = __chkstk_darwin(v17);
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    uint64_t v26 = a6;
    uint64_t v27 = a7;
    __chkstk_darwin(v19);
    v22[2] = a4;
    v22[3] = a5;
    _OWORD v22[4] = a6;
    v22[5] = a7;
    uint64_t v21 = sub_100308E74((uint64_t)sub_1002E8134, v20, (uint64_t)sub_1003155BC, 0, (uint64_t)sub_1002E8150, (uint64_t)v22, a1);
    uint64_t v29 = &v28;
    uint64_t v30 = v18;
    __chkstk_darwin(v21);
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    uint64_t v26 = a6;
    uint64_t v27 = a7;
    sub_10031E9AC(a1, a2, a3, (uint64_t)sub_1002E816C, (uint64_t)&v23, (uint64_t)&v30);
    sub_1002E8538();
    *uint64_t v28 = v30;
  }
}

void sub_1002E7E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v7)
  {
    uint64_t v14 = __chkstk_darwin(v13);
    v16[8] = a4;
    v16[9] = a5;
    v16[10] = a6;
    v16[11] = a7;
    __chkstk_darwin(v14);
    void v16[2] = a4;
    v16[3] = a5;
    v16[4] = a6;
    v16[5] = a7;
    sub_100308E74((uint64_t)sub_1002E825C, v15, (uint64_t)sub_1003155BC, 0, (uint64_t)sub_1002E8274, (uint64_t)v16, a1);
  }
}

uint64_t sub_1002E7FCC()
{
  sub_1002E1C9C();
  return sub_1002FFFC4(v0);
}

uint64_t sub_1002E7FE8()
{
  return sub_1002E73AC();
}

uint64_t sub_1002E8018()
{
  return sub_1002E73AC();
}

uint64_t sub_1002E8048()
{
  sub_1002E1C9C();
  return sub_1002E6F18(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002E8064()
{
  return sub_1002E73AC();
}

uint64_t sub_1002E8094()
{
  return sub_1002E73AC();
}

void sub_1002E80C4()
{
  sub_1002E1C9C();
  sub_1002E775C(v0, v1, v2, v3, v4);
}

uint64_t sub_1002E80E0()
{
  return sub_100316CF8();
}

uint64_t sub_1002E80FC()
{
  return sub_100316D48();
}

void sub_1002E8118()
{
  sub_1002E1C9C();
  sub_1002E4E6C(v0, v1, v2, v3);
}

void sub_1002E8134()
{
}

void sub_1002E8150()
{
}

void sub_1002E816C()
{
  sub_1002E1C9C();
  sub_1002E7E90(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002E8188(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a5 != -1)
  {
    sub_1001F3480(result, a2, a3, a4, a5 & 1);
    return sub_1001F34D0(a6, a7, a8);
  }
  return result;
}

void sub_1002E81EC()
{
}

uint64_t sub_1002E8208()
{
  return sub_1002E46D8();
}

double sub_1002E8224()
{
  sub_1002E1C9C();
  return sub_1002E64DC(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002E8240()
{
  sub_1002E1C9C();
  sub_1002E5E14(v0, v1, v2, v3, v4);
}

void sub_1002E825C()
{
}

void sub_1002E8274()
{
}

uint64_t sub_1002E828C()
{
  return sub_1002E7FCC();
}

uint64_t sub_1002E82A4()
{
  return sub_1002E80E0();
}

uint64_t sub_1002E82BC()
{
  return sub_1002E80FC();
}

uint64_t sub_1002E83EC(uint64_t a1, void *a2)
{
  return sub_1002E326C(a1, a2);
}

void *sub_1002E8404(void *result)
{
  result[2] = v4;
  result[3] = v3;
  result[4] = v2;
  result[5] = v1;
  return result;
}

uint64_t sub_1002E8414()
{
  return swift_allocObject();
}

uint64_t sub_1002E842C()
{
  return swift_retain();
}

void sub_1002E8478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  *(void *)uint64_t v15 = a15;
  *(void *)(v15 + 8) = v16;
  *(_DWORD *)(v15 + 16) = a14;
  *(_WORD *)(v15 + 20) = a13;
  *(unsigned char *)(v15 + 22) = a11;
}

uint64_t sub_1002E84A0()
{
  return v0;
}

uint64_t sub_1002E8504()
{
  return v0;
}

uint64_t sub_1002E8528()
{
  return v0;
}

void sub_1002E8538()
{
  sub_10031E1C0();
}

uint64_t sub_1002E85AC()
{
  return v0;
}

uint64_t sub_1002E85CC()
{
  sub_1002E98D0();
  uint64_t v5 = (void *)swift_allocObject();
  void v5[2] = v4;
  v5[3] = v3;
  long long v5[4] = v2;
  void v5[5] = v0;
  swift_retain();
  sub_1002E9924();
  uint64_t v8 = sub_10033CA84(v6, v7);
  swift_release();
  if (v1) {
    return v9;
  }
  else {
    return v8;
  }
}

uint64_t sub_1002E86E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_retain();
  uint64_t result = sub_100322E50(a1, a2, a3, a4, a5, a6, a7);
  if (v7) {
    return v16;
  }
  return result;
}

uint64_t sub_1002E8770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_retain();
  uint64_t result = sub_100322F40(a1, a2, a3, a4, a5, a6, a7);
  if (v7) {
    return v16;
  }
  return result;
}

uint64_t *sub_1002E87F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10032D3F0(a1, a2, a3, 1);
  uint64_t v6 = v4;
  if (!v3)
  {
    if (((unint64_t)v4 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      sub_10020DD10();
      *uint64_t v7 = 0xD000000000000011;
      v7[1] = 0x80000001005E65D0;
      void v7[2] = 0xD000000000000020;
      v7[3] = 0x80000001005E63C0;
      uint64_t v8 = 167;
      goto LABEL_6;
    }
    if (v5 > 2)
    {
      sub_1005E2C80(29);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1005E1E30(v10);
      swift_bridgeObjectRelease();
      sub_100296090();
      sub_10020DD10();
      *uint64_t v7 = 0xD00000000000001BLL;
      v7[1] = 0x80000001005E6780;
      void v7[2] = 0xD000000000000020;
      v7[3] = 0x80000001005E63C0;
      uint64_t v8 = 48;
LABEL_6:
      sub_1002E9998((uint64_t)v7, v8);
    }
  }
  return v6;
}

uint64_t sub_1002E8954()
{
  sub_1002E98D0();
  uint64_t v4 = (void *)swift_allocObject();
  long long v4[2] = v3;
  v4[3] = v2;
  long long v4[4] = v1;
  v4[5] = v0;
  swift_retain();
  sub_1002E9924();
  uint64_t v9 = sub_10033CB54(v5, v6, v7, v8);
  swift_release();
  return v9;
}

void sub_1002E8A5C()
{
  sub_100329980();
  if (!v0) {
    sub_10030A9A0();
  }
}

uint64_t sub_1002E8ADC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= a3)
    {
      sub_1002DB5BC();
      sub_10020DD10();
      *uint64_t v12 = a3;
      return swift_willThrow();
    }
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)(result + 8);
    int v9 = *(_DWORD *)(result + 16);
    __int16 v10 = *(_WORD *)(result + 20);
    char v11 = *(unsigned char *)(result + 22);
    swift_retain();
    sub_100338020(v6, v4, a3, 0, 0x20uLL, 0xE100000000000000, 0);
    if (v3)
    {
      swift_release();
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v8;
      *(_DWORD *)(v6 + 16) = v9;
      *(_WORD *)(v6 + 20) = v10;
      *(unsigned char *)(v6 + 22) = v11;
      return swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1002E8BCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v12 = a3;
      return swift_willThrow();
    }
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)(result + 8);
    int v9 = *(_DWORD *)(result + 16);
    __int16 v10 = *(_WORD *)(result + 20);
    char v11 = *(unsigned char *)(result + 22);
    swift_retain();
    sub_10031A308((uint64_t *)v6, v4, a3, 2, &v13);
    if (v3)
    {
      swift_release();
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v8;
      *(_DWORD *)(v6 + 16) = v9;
      *(_WORD *)(v6 + 20) = v10;
      *(unsigned char *)(v6 + 22) = v11;
      return swift_willThrow();
    }
    swift_release();
    return v13;
  }
  return result;
}

uint64_t sub_1002E8CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10031F694(a1, a2, a3);
  if (!v3)
  {
    uint64_t v8 = sub_10031E368(v5, v6, v7 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 78);
    __int16 v10 = v9;
    sub_1005E1CB0();
    uint64_t v4 = sub_100267BF0();
    char v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      sub_1005E2C80(21);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = v8;
      v15._uint64_t object = v10;
      sub_1005E1E30(v15);
      swift_bridgeObjectRelease();
      sub_100296090();
      sub_10020DD10();
      *uint64_t v13 = 0xD000000000000013;
      v13[1] = 0x80000001005E6740;
      _OWORD v13[2] = 0xD000000000000020;
      v13[3] = 0x80000001005E63C0;
      sub_1002E9998((uint64_t)v13, 80);
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return v4;
}

void sub_1002E8E1C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Swift::Int *a4@<X8>)
{
  uint64_t v8 = sub_1002E87F8(a1, a2, a3);
  if (!v4)
  {
    Swift::Int v9 = (Swift::Int)v8;
    sub_1002E98F4();
    uint64_t month = sub_1002E8CC8((uint64_t)a1, a2, a3);
    sub_1002E98F4();
    sub_10030AAF4();
    NIOIMAPCore2::IMAPCalendarDay_optional v19 = IMAPCalendarDay.init(year:month:day:)(v10, month, v9);
    if (v19.is_nil)
    {
      sub_1005E2C80(32);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = sub_1002E997C();
      sub_1005E1E30(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 32;
      v15._uint64_t object = (void *)0xE100000000000000;
      sub_1005E1E30(v15);
      v16._uint64_t countAndFlagsBits = sub_1002E997C();
      sub_1005E1E30(v16);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 32;
      v17._uint64_t object = (void *)0xE100000000000000;
      sub_1005E1E30(v17);
      v18._uint64_t countAndFlagsBits = sub_1002E997C();
      sub_1005E1E30(v18);
      swift_bridgeObjectRelease();
      sub_100296090();
      sub_10020DD10();
      *char v11 = 0xD000000000000018;
      v11[1] = 0x80000001005E6760;
      _OWORD v11[2] = 0xD000000000000020;
      v11[3] = 0x80000001005E63C0;
      sub_1002E9998((uint64_t)v11, 94);
    }
    else
    {
      *a4 = v19.value.year;
      a4[1] = v19.value.month;
      a4[2] = v19.value.day;
    }
  }
}

void sub_1002E9020(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NIOIMAPCore2::ServerMessageDate *a4@<X8>)
{
  sub_1002E987C();
  if (!v4)
  {
    sub_1002E9944();
    Swift::Int v9 = sub_1002E8954();
    sub_1002E987C();
    Swift::Int v36 = sub_1002E8CC8(a1, a2, a3);
    sub_1002E987C();
    sub_1002E9944();
    sub_10030AAF4();
    Swift::Int v31 = v10;
    sub_1002E987C();
    sub_1002E98A4();
    Swift::Int v30 = v11;
    sub_1002E987C();
    sub_1002E98A4();
    Swift::Int v29 = v12;
    sub_1002E987C();
    sub_1002E98A4();
    Swift::Int v28 = v13;
    sub_1002E987C();
    v27[1] = v27;
    __chkstk_darwin(v14);
    sub_1002E9964();
    *(void *)(v15 - 16) = v30;
    uint64_t v17 = __chkstk_darwin(v16);
    v26[6] = sub_1002E9520;
    v26[7] = v18;
    __chkstk_darwin(v17);
    sub_1002E9964();
    *(void *)(v19 - 16) = v20;
    __chkstk_darwin(v21);
    void v26[2] = sub_1002E9714;
    v26[3] = v23;
    Swift::Int v24 = sub_10033CB54((uint64_t)sub_1002E954C, v22, (uint64_t)sub_1002E9864, (uint64_t)v26);
    sub_1002E987C();
    ServerMessageDate.Components.init(year:month:day:hour:minute:second:timeZoneMinutes:)(&v32, v31, v36, v9, v30, v29, v28, v24);
    sub_100268474((uint64_t)&v32, (uint64_t)&v33);
    if (v34 == 1)
    {
      sub_100296090();
      sub_10020DD10();
      *uint64_t v25 = 0xD000000000000016;
      v25[1] = 0x80000001005E6700;
      _OWORD v25[2] = 0xD000000000000020;
      void v25[3] = 0x80000001005E63C0;
      sub_1002E9998((uint64_t)v25, 159);
    }
    else
    {
      NIOIMAPCore2::ServerMessageDate::Components v35 = v33;
      a4->uint64_t rawValue = ServerMessageDate.init(_:)(&v35).rawValue;
    }
  }
}

unint64_t sub_1002E933C(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0 && (a1 % 0x64 <= 0x3C ? (BOOL v2 = a2 <= 24) : (BOOL v2 = 0), v2)) {
    return a1 % 0x64 + 60 * ((uint64_t)(a1 - a1 % 0x64) / 100);
  }
  else {
    return 0;
  }
}

void sub_1002E9380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_10030AAF4();
    sub_1002E933C(v10, a8);
    if (v11)
    {
      sub_1005E2C80(32);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = sub_1005E3230();
      sub_1005E1E30(v13);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = 0x64656C69616620;
      v14._uint64_t object = (void *)0xE700000000000000;
      sub_1005E1E30(v14);
      sub_100296090();
      swift_allocError();
      *Swift::Int v12 = 0xD000000000000017;
      v12[1] = 0x80000001005E6720;
      _OWORD v12[2] = 0xD000000000000020;
      v12[3] = 0x80000001005E63C0;
      v12[4] = 134;
      swift_willThrow();
    }
  }
}

uint64_t sub_1002E9520()
{
  return sub_1002E9740();
}

uint64_t sub_1002E954C()
{
  return sub_10032D2D8();
}

void sub_1002E9568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_10030AAF4();
    unint64_t v11 = sub_1002E933C(v10, a8);
    if ((v12 & 1) == 0)
    {
      if (!__OFSUB__(0, v11)) {
        return;
      }
      __break(1u);
    }
    sub_1005E2C80(32);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = sub_1005E3230();
    sub_1005E1E30(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0x64656C69616620;
    v15._uint64_t object = (void *)0xE700000000000000;
    sub_1005E1E30(v15);
    sub_100296090();
    swift_allocError();
    *Swift::String v13 = 0xD000000000000017;
    v13[1] = 0x80000001005E6720;
    _OWORD v13[2] = 0xD000000000000020;
    v13[3] = 0x80000001005E63C0;
    void v13[4] = 143;
    swift_willThrow();
  }
}

uint64_t sub_1002E9714()
{
  return sub_1002E9740();
}

uint64_t sub_1002E9740()
{
  sub_1002E1C9C();
  return v0();
}

void sub_1002E9768()
{
}

uint64_t sub_1002E9784()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E97BC()
{
  sub_1002E1C9C();
  return sub_1002E8BCC(v0, v1, v2);
}

uint64_t sub_1002E97D8()
{
  sub_1002E1C9C();
  return sub_1002E8770(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002E97F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002E9828(a1);
}

uint64_t sub_1002E980C()
{
  sub_1002E1C9C();
  return sub_1002E86E8(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002E9828@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
  }
  return result;
}

uint64_t sub_1002E9864()
{
  return sub_1002E954C();
}

void sub_1002E987C()
{
  sub_10031E1C0();
}

void sub_1002E98A4()
{
  sub_10030AA50();
}

void sub_1002E98F4()
{
  sub_10031E1C0();
}

uint64_t sub_1002E9944()
{
  return v0;
}

uint64_t sub_1002E997C()
{
  return sub_1005E3230();
}

uint64_t sub_1002E9998@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 32) = a2;
  return swift_willThrow();
}

void sub_1002E99B0()
{
  sub_1001FE5B4();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for ParameterValue();
  sub_10022C254();
  uint64_t v50 = v9;
  __chkstk_darwin(v10);
  uint64_t v48 = (uint64_t)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  __chkstk_darwin(v12);
  uint64_t v49 = (uint64_t)v46 - v13;
  sub_1001F475C();
  __chkstk_darwin(v14);
  v46[1] = (uint64_t)v46 - v15;
  sub_1001F475C();
  uint64_t v17 = __chkstk_darwin(v16);
  sub_1002ECF10(v17, v18, v19, v20, v21, v22, v23, v24, v46[0]);
  sub_10000566C(&qword_1007122B8);
  sub_1002ECE88();
  __chkstk_darwin(v25);
  sub_1002ECD8C();
  swift_retain();
  sub_100338C40((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1002ECD74, (uint64_t)&v51, v2);
  sub_1002ECF38();
  swift_release();
  sub_1002ECEA8();
  sub_1000079E4(v7, v1, &qword_10070FE28);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand(v1, 1, v8);
  if (v3)
  {
    if (EnumTagSingle == 1)
    {
      swift_bridgeObjectRelease();
      sub_100007A48(v7, &qword_10070FE28);
LABEL_18:
      sub_1001FE57C();
      return;
    }
    uint64_t v30 = v49;
    sub_1002ECB38(v1, v49);
    sub_1002ECEF0();
    sub_1001F3974(v30, v48);
    uint64_t v33 = *(void *)(v0 + 16);
    NIOIMAPCore2::ServerMessageDate::Components_optional v32 = (uint64_t *)(v0 + 16);
    uint64_t v31 = v33;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *NIOIMAPCore2::ServerMessageDate::Components_optional v32 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002ECED0();
      uint64_t v31 = *v32;
    }
    sub_1002ECEC0();
    if (v36)
    {
      sub_100212B70(v35 > 1, 0, 1);
      uint64_t v31 = *v32;
    }
    uint64_t v37 = sub_1002ECDD0();
    sub_1002ECB38(v37, v38);
    swift_bridgeObjectRelease();
    *NIOIMAPCore2::ServerMessageDate::Components_optional v32 = v31;
    sub_100007A48(v7, &qword_10070FE28);
    uint64_t v29 = v30;
LABEL_17:
    sub_1002BD9D0(v29);
    goto LABEL_18;
  }
  if (EnumTagSingle == 1)
  {
    sub_1002EB1BC(0, v5);
    swift_bridgeObjectRelease();
    unint64_t v27 = sub_1002ECF24();
    sub_1002EB79C(v27, v28);
    swift_bridgeObjectRelease();
    sub_100007A48(v7, &qword_10070FE28);
    uint64_t v29 = v5;
    goto LABEL_17;
  }
  uint64_t v39 = v47;
  sub_1002ECB38(v1, v47);
  uint64_t v40 = *(void *)(v0 + 16);
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 16) = v40;
  if ((v41 & 1) == 0)
  {
    sub_100338D2C();
    uint64_t v40 = v42;
    *(void *)(v0 + 16) = v42;
  }
  if (*(void *)(v40 + 16))
  {
    uint64_t v43 = sub_1002ECE1C();
    sub_1002ECB9C(v43, v44);
    uint64_t v45 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v45;
    sub_100007A48(v7, &qword_10070FE28);
    uint64_t v29 = v39;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1002E9CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = v4[1];
  v25[0] = a3;
  v25[1] = a4;
  _OWORD v24[2] = v9;
  v24[3] = v10;
  v24[4] = v25;
  swift_retain();
  swift_retain();
  unint64_t v11 = (unint64_t)sub_100338C40((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1002ECC00, (uint64_t)v24, v10);
  char v13 = v12;
  unint64_t v15 = v14;
  swift_release();
  swift_release();
  if (v13)
  {
    if (a2)
    {
      swift_bridgeObjectRetain();
      sub_100339928(a3, a4, v15);
      uint64_t v21 = v4[2];
      v4 += 2;
      uint64_t v20 = v21;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v4 = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002ECE78();
        sub_100212BB0();
        uint64_t v20 = *v4;
      }
      unint64_t v15 = *(void *)(v20 + 16);
      unint64_t v16 = v15 + 1;
      if (v15 < *(void *)(v20 + 24) >> 1) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else
  {
    if (a2)
    {
      unint64_t v16 = v4[2];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100338CE4();
        unint64_t v16 = v17;
      }
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v11 < *(void *)(v16 + 16))
      {
        unint64_t v18 = v16 + 16 * v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v18 + 32) = a1;
        *(void *)(v18 + 40) = a2;
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease();
        long long v4[2] = v16;
        return result;
      }
      __break(1u);
LABEL_17:
      sub_100212BB0();
      uint64_t v20 = *v4;
LABEL_12:
      *(void *)(v20 + 16) = v16;
      uint64_t v23 = v20 + 16 * v15;
      *(void *)(v23 + 32) = a1;
      *(void *)(v23 + 40) = a2;
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v4 = v20;
      return result;
    }
    sub_1002EB1BC(v11, v15);
    swift_bridgeObjectRelease();
    sub_1002EB888(v11);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E9EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11 = *v6;
  uint64_t v10 = v6[1];
  v33[0] = a4;
  v33[1] = a5;
  int v34 = a6;
  __int16 v35 = WORD2(a6);
  char v36 = BYTE6(a6);
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  NIOIMAPCore2::ServerMessageDate::Components_optional v32 = v33;
  swift_retain();
  swift_retain();
  unint64_t v13 = (unint64_t)sub_100338C40((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1002ECAE8, (uint64_t)v29, v10);
  unint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_release();
  swift_release();
  if (v15)
  {
    if (a1 != 1)
    {
      swift_retain();
      sub_100339AA8(a4, a5, a6 & 0xFFFFFFFFFFFFFFLL, v17);
      uint64_t v24 = v6[2];
      v6 += 2;
      uint64_t v23 = v24;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v6 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002ECE78();
        sub_100212C30();
        uint64_t v23 = *v6;
      }
      unint64_t v15 = *(void *)(v23 + 16);
      unint64_t v19 = v15 + 1;
      if (v15 < *(void *)(v23 + 24) >> 1) {
        goto LABEL_16;
      }
      goto LABEL_19;
    }
    return swift_release();
  }
  if (a1 == 1)
  {
    sub_1002EB37C(v13, v17);
    swift_release();
    sub_1002EB910(v13);
    swift_release();
    return swift_release();
  }
  unint64_t v19 = v6[2];
  swift_retain();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  if ((v20 & 1) == 0)
  {
    sub_100338DAC();
    unint64_t v19 = v21;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(void *)(v19 + 16))
  {
    unint64_t v22 = v19 + 24 * v13;
    swift_retain();
    swift_release();
    *(void *)(v22 + 32) = a1;
    *(void *)(v22 + 40) = a2;
    *(unsigned char *)(v22 + 54) = BYTE6(a3);
    *(_WORD *)(v22 + 52) = WORD2(a3);
    *(_DWORD *)(v22 + 48) = a3;
    swift_release();
    sub_1002ECB08(a1);
    uint64_t result = sub_1002ECB08(a1);
    void v6[2] = v19;
    return result;
  }
  __break(1u);
LABEL_19:
  sub_100212C30();
  uint64_t v23 = *v6;
LABEL_16:
  *(void *)(v23 + 16) = v19;
  uint64_t v26 = v23 + 24 * v15;
  *(void *)(v26 + 32) = a1;
  *(void *)(v26 + 40) = a2;
  *(unsigned char *)(v26 + 54) = BYTE6(a3);
  *(_WORD *)(v26 + 52) = WORD2(a3);
  *(_DWORD *)(v26 + 48) = a3;
  swift_release();
  sub_1002ECB08(a1);
  uint64_t result = sub_1002ECB08(a1);
  *uint64_t v6 = v23;
  return result;
}

void sub_1002EA144()
{
  sub_1001FE5B4();
  unint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = HIDWORD(v4);
  unint64_t v56 = HIDWORD(v2);
  unint64_t v57 = HIWORD(v2);
  uint64_t v58 = v9;
  uint64_t v10 = type metadata accessor for ParameterValue();
  sub_10022C254();
  uint64_t v54 = v11;
  __chkstk_darwin();
  uint64_t v52 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v50 - v13;
  sub_1001F475C();
  __chkstk_darwin();
  uint64_t v50 = (uint64_t)&v50 - v14;
  sub_1001F475C();
  __chkstk_darwin();
  uint64_t v51 = (uint64_t)&v50 - v15;
  sub_10000566C(&qword_1007122B8);
  sub_1002ECE88();
  __chkstk_darwin();
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v0;
  uint64_t v19 = v0[1];
  uint64_t v55 = v0;
  unint64_t v20 = v5;
  uint64_t v59 = v7;
  uint64_t v61 = v7;
  int v62 = v5;
  int v63 = v8;
  int v64 = v3;
  __int16 v65 = v56;
  char v66 = v57;
  v60[2] = v18;
  v60[3] = v19;
  v60[4] = &v61;
  swift_retain();
  swift_retain();
  unint64_t v21 = (unint64_t)sub_100338C40((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1002ECB18, (uint64_t)v60, v19);
  LOBYTE(v5) = v22;
  uint64_t v24 = v23;
  swift_release();
  uint64_t v25 = v58;
  swift_release();
  uint64_t v26 = (uint64_t)&v17[*(int *)(v1 + 56)];
  *(void *)uint64_t v17 = v21;
  v17[8] = v5 & 1;
  sub_1000079E4(v25, v26, &qword_10070FE28);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand(v26, 1, v10);
  if (v5)
  {
    if (EnumTagSingle == 1)
    {
      swift_release();
      sub_100007A48(v25, &qword_10070FE28);
LABEL_19:
      sub_1001FE57C();
      return;
    }
    uint64_t v30 = v53;
    sub_1002ECB38(v26, v53);
    unint64_t v31 = v20;
    NIOIMAPCore2::ServerMessageDate::Components_optional v32 = v55;
    sub_100339AD4(v59, v31, v3 & 0xFFFFFFFFFFFFFFLL, v24);
    uint64_t v33 = v52;
    sub_1001F3974(v30, v52);
    uint64_t v36 = v32[2];
    __int16 v35 = v32 + 2;
    uint64_t v34 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *__int16 v35 = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002ECED0();
      uint64_t v34 = *v35;
    }
    sub_1002ECEC0();
    if (v39)
    {
      sub_100212B70(v38 > 1, v21, 1);
      uint64_t v34 = *v35;
    }
    *(void *)(v34 + 16) = v21;
    sub_1002ECE40();
    sub_1002ECB38(v33, v40 + v41 * v26);
    swift_release();
    *__int16 v35 = v34;
    sub_100007A48(v25, &qword_10070FE28);
    uint64_t v29 = v30;
LABEL_18:
    sub_1002BD9D0(v29);
    goto LABEL_19;
  }
  if (EnumTagSingle == 1)
  {
    sub_1002EB58C(v21, v24);
    swift_release();
    uint64_t v28 = v50;
    sub_1002EB79C(v21, v50);
    swift_release();
    sub_100007A48(v25, &qword_10070FE28);
    uint64_t v29 = v28;
    goto LABEL_18;
  }
  uint64_t v42 = v51;
  sub_1002ECB38(v26, v51);
  uint64_t v43 = v55;
  uint64_t v44 = v55[2];
  char v45 = swift_isUniquelyReferenced_nonNull_native();
  v43[2] = v44;
  if ((v45 & 1) == 0)
  {
    sub_100338D2C();
    uint64_t v44 = v46;
    v43[2] = v46;
  }
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v21 < *(void *)(v44 + 16))
  {
    sub_1002ECE40();
    sub_1002ECB9C(v42, v47 + v48 * v21);
    uint64_t v49 = v43[2];
    swift_release();
    v43[2] = v49;
    sub_100007A48(v25, &qword_10070FE28);
    uint64_t v29 = v42;
    goto LABEL_18;
  }
  __break(1u);
}

void sub_1002EA508()
{
  sub_1001FE5B4();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10000566C(&qword_10070FE28);
  sub_10022C254();
  uint64_t v50 = v9;
  __chkstk_darwin(v10);
  uint64_t v48 = (uint64_t)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001F475C();
  __chkstk_darwin(v12);
  uint64_t v49 = (uint64_t)v46 - v13;
  sub_1001F475C();
  __chkstk_darwin(v14);
  v46[1] = (uint64_t)v46 - v15;
  sub_1001F475C();
  uint64_t v17 = __chkstk_darwin(v16);
  sub_1002ECF10(v17, v18, v19, v20, v21, v22, v23, v24, v46[0]);
  sub_10000566C(&qword_1007122C0);
  sub_1002ECE88();
  __chkstk_darwin(v25);
  sub_1002ECD8C();
  swift_retain();
  sub_100338C40((void *(*)(uint64_t *__return_ptr, uint64_t, void))sub_1002ECD74, (uint64_t)&v51, v2);
  sub_1002ECF38();
  swift_release();
  sub_1002ECEA8();
  sub_1000079E4(v7, v1, &qword_1007122C8);
  int EnumTagSingle = getEnumTagSinglePayload for ClientCommand(v1, 1, v8);
  if (v3)
  {
    if (EnumTagSingle == 1)
    {
      swift_bridgeObjectRelease();
      unint64_t v27 = &qword_1007122C8;
      uint64_t v28 = v7;
    }
    else
    {
      uint64_t v31 = v49;
      sub_1002ECC20(v1, v49);
      sub_1002ECEF0();
      sub_1000079E4(v31, v48, &qword_10070FE28);
      uint64_t v34 = *(void *)(v0 + 16);
      uint64_t v33 = (uint64_t *)(v0 + 16);
      uint64_t v32 = v34;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v33 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002ECE78();
        sub_100212C10();
        uint64_t v32 = *v33;
      }
      sub_1002ECEC0();
      if (v36)
      {
        sub_100212C10();
        uint64_t v32 = *v33;
      }
      uint64_t v37 = sub_1002ECDD0();
      sub_1002ECC20(v37, v38);
      swift_bridgeObjectRelease();
      *uint64_t v33 = v32;
      sub_100007A48(v7, &qword_1007122C8);
      unint64_t v27 = &qword_10070FE28;
      uint64_t v28 = v31;
    }
    goto LABEL_17;
  }
  if (EnumTagSingle == 1)
  {
    sub_1002EB1BC(0, v5);
    swift_bridgeObjectRelease();
    unint64_t v29 = sub_1002ECF24();
    sub_1002EBA64(v29, v30);
    swift_bridgeObjectRelease();
    sub_100007A48(v7, &qword_1007122C8);
    unint64_t v27 = &qword_10070FE28;
    uint64_t v28 = v5;
LABEL_17:
    sub_100007A48(v28, v27);
    sub_1001FE57C();
    return;
  }
  uint64_t v39 = v47;
  sub_1002ECC20(v1, v47);
  uint64_t v40 = *(void *)(v0 + 16);
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 16) = v40;
  if ((v41 & 1) == 0)
  {
    sub_100338EB0();
    uint64_t v40 = v42;
    *(void *)(v0 + 16) = v42;
  }
  if (*(void *)(v40 + 16))
  {
    uint64_t v43 = sub_1002ECE1C();
    sub_1002ECC88(v43, v44);
    uint64_t v45 = *(void *)(v0 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v45;
    sub_100007A48(v7, &qword_1007122C8);
    unint64_t v27 = &qword_10070FE28;
    uint64_t v28 = v39;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1002EA824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v17 = sub_1002ECCF0;
  uint64_t v18 = &v19;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v9 = sub_1002ECD24;
  uint64_t v10 = &v11;
  return sub_10033CB54((uint64_t)sub_1002ECD0C, (uint64_t)v16, (uint64_t)sub_1002ECD0C, (uint64_t)v8);
}

void sub_1002EA8EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_1002ECE5C();
  sub_10031E1C0();
  if (!v8)
  {
    uint64_t v52 = a8;
    uint64_t v53 = 0;
    *(void *)&long long v54 = _swiftEmptyArrayStorage;
    *((void *)&v54 + 1) = _swiftEmptyArrayStorage;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else
    {
      if (a2 + 1 >= a3)
      {
        sub_1002DB5BC();
        swift_allocError();
        *uint64_t v38 = a3;
        swift_retain();
      }
      else
      {
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void *)(a1 + 8);
        LODWORD(v50) = *(_DWORD *)(a1 + 16);
        LODWORD(v49) = *(unsigned __int16 *)(a1 + 20);
        LODWORD(v48) = *(unsigned __int8 *)(a1 + 22);
        swift_retain();
        swift_retain();
        uint64_t v19 = sub_1002ECDF8();
        sub_100308D44(v19, v20, v21, v22, v23, v24, v25, v26, v44[6], v45, v46, v47, v48, v49, v50, v17, (uint64_t)v52, v53, v54,
          *((uint64_t *)&v54 + 1),
          v55,
          v56,
          v57,
          v58,
          v59,
          v60);
        if (!v17)
        {
          uint64_t v45 = v29;
          unint64_t v46 = v28;
          uint64_t v47 = v27;
          sub_10031E2BC(a1, a2 + 1, a3);
          uint64_t v30 = sub_1002ECDF8();
          uint64_t v37 = sub_10030AB98(v30, v31, v32, v33, v34, v35, v36);
          uint64_t v40 = v39;
          uint64_t v49 = v41;
          uint64_t v50 = v37;
          swift_release();
          swift_release();
          uint64_t v51 = v40 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v48 = (void (*)())(v45 & 0xFFFFFFFFFFFFFFLL);
          swift_retain();
          swift_retain();
          uint64_t v42 = sub_1002E9EB0(v50, (uint64_t)v49, v40 & 0xFFFFFFFFFFFFFFLL, v47, v46, v45 & 0xFFFFFFFFFFFFFFLL);
          __chkstk_darwin(v42);
          v44[2] = a4;
          v44[3] = a5;
          void v44[4] = a6;
          v44[5] = a7;
          sub_10031E9D8(a1, a2, a3, (uint64_t)sub_1002EB0FC, (uint64_t)v44, (uint64_t)&v53);
          sub_1002ECE5C();
          sub_10031E1C0();
          swift_release();
          swift_release();
          uint64_t v43 = v52;
          *uint64_t v52 = v53;
          *(_OWORD *)(v43 + 1) = v54;
          return;
        }
        swift_release();
        *(void *)a1 = v51;
        *(void *)(a1 + 8) = v18;
        *(_DWORD *)(a1 + 16) = v50;
        *(_WORD *)(a1 + 20) = (_WORD)v49;
        *(unsigned char *)(a1 + 22) = (_BYTE)v48;
      }
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
}

void sub_1002EAC18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    BOOL v17 = __OFADD__(a2, 1);
    uint64_t v18 = a2 + 1;
    if (v17)
    {
      __break(1u);
    }
    else if (v18 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v23 = a3;
      swift_retain();
      swift_willThrow();
      swift_release();
    }
    else
    {
      HIDWORD(v38) = *(unsigned __int16 *)(a1 + 20);
      LODWORD(v39) = *(_DWORD *)(a1 + 16);
      LODWORD(v38) = *(unsigned __int8 *)(a1 + 22);
      swift_retain();
      swift_retain();
      sub_100308D44(a1, v18, a3, a4, a5, a6, a7, v19, v29, v30, v32, v34, v36, a8, v38, v39, v40, v41, v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49);
      uint64_t v31 = v20;
      uint64_t v33 = v21;
      uint64_t v35 = v22;
      sub_10031E2BC(a1, v18, a3);
      uint64_t v24 = sub_10030AB98(a1, v18, a3, a4, a5, a6, a7);
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      swift_release();
      swift_release();
      *(void *)uint64_t v37 = v35;
      *(void *)(v37 + 8) = v31;
      *(_DWORD *)(v37 + 16) = v33;
      *(_WORD *)(v37 + 20) = WORD2(v33);
      *(unsigned char *)(v37 + 22) = BYTE6(v33);
      *(void *)(v37 + 24) = v24;
      *(void *)(v37 + 32) = v26;
      *(_DWORD *)(v37 + 40) = v28;
      *(unsigned char *)(v37 + 46) = BYTE6(v28);
      *(_WORD *)(v37 + 44) = WORD2(v28);
    }
  }
}

#error "1002EAEBC: call analysis failed (funcsize=57)"

#error "1002EAFCC: call analysis failed (funcsize=111)"

uint64_t sub_1002EB0E4()
{
  return sub_1002E46D8();
}

void sub_1002EB0FC()
{
  sub_1002E1C9C();
  sub_1002EAC18(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002EB118()
{
  return 7105633;
}

uint64_t sub_1002EB154()
{
  return 1986622064;
}

uint64_t sub_1002EB190()
{
  return static EntryKindResponse.shared.getter();
}

void sub_1002EB1BC(int64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + 1;
  uint64_t v6 = *(void *)(v2[1] + 16);
  uint64_t v7 = *v3;
  if (!*v3)
  {
    if (v6)
    {
      sub_1002EB888(a1);
      return;
    }
    goto LABEL_12;
  }
  swift_beginAccess();
  if ((*(void *)(v7 + 16) & 0x3FLL) == (*(void *)(v7 + 24) & 0x3FLL))
  {
    if (!v6) {
      goto LABEL_12;
    }
  }
  else if (v6 <= sub_1005E0BB0())
  {
LABEL_12:
    sub_1002EB888(a1);
    uint64_t v11 = *v5;
    if (v7)
    {
      swift_beginAccess();
      uint64_t v12 = *(void *)(v7 + 24) & 0x3FLL;
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v12 || *(void *)(v11 + 16) >= 0x10uLL)
    {
      uint64_t v13 = sub_1005E0BD0();
      sub_100339EC4(v13, v12);
    }
    else
    {
      swift_release();
      *uint64_t v3 = 0;
    }
    return;
  }
  sub_100339E0C();
  uint64_t v9 = *v3;
  if (*v3)
  {
    swift_retain();
    sub_1002EBB54(a2, (void *)(v9 + 16), v9 + 32, (uint64_t)v3);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v10 = v3[1];
      swift_retain();
      sub_1002EBF68(a1, a1 + 1, v10, (void *)(v9 + 16));
      swift_release();
      swift_release();
      sub_1002EB888(a1);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1002EB37C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + 1;
  uint64_t v6 = *(void *)(v2[1] + 16);
  uint64_t v7 = *v3;
  if (!*v3)
  {
    if (!v6) {
      goto LABEL_13;
    }
LABEL_12:
    sub_1002EB9B4();
    return v12;
  }
  swift_beginAccess();
  if ((*(void *)(v7 + 16) & 0x3FLL) == (*(void *)(v7 + 24) & 0x3FLL))
  {
    if (!v6) {
      goto LABEL_13;
    }
  }
  else if (v6 <= sub_1005E0BB0())
  {
LABEL_13:
    sub_1002EB9B4();
    uint64_t v13 = v14;
    uint64_t v15 = *v5;
    if (v7)
    {
      swift_beginAccess();
      uint64_t v16 = *(void *)(v7 + 24) & 0x3FLL;
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (v16 || *(void *)(v15 + 16) >= 0x10uLL)
    {
      sub_1005E0BD0();
      sub_100339EFC();
    }
    else
    {
      swift_release();
      *uint64_t v3 = 0;
    }
    return v13;
  }
  unint64_t result = sub_100339E0C();
  uint64_t v10 = *v3;
  if (*v3)
  {
    unint64_t result = sub_1002EBD34(a2, (void *)(v10 + 16), v10 + 32, (uint64_t)v3);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v11 = v3[1];
      swift_retain();
      swift_retain();
      sub_1002EC408(a1, a1 + 1, v11, (void *)(v10 + 16));
      swift_release();
      swift_release();
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1002EB58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + 1;
  uint64_t v6 = *(void *)(v2[1] + 16);
  uint64_t v7 = *v3;
  if (!*v3)
  {
    if (!v6) {
      goto LABEL_13;
    }
LABEL_12:
    sub_1002EB9B4();
    return v12;
  }
  swift_beginAccess();
  if ((*(void *)(v7 + 16) & 0x3FLL) == (*(void *)(v7 + 24) & 0x3FLL))
  {
    if (!v6) {
      goto LABEL_13;
    }
  }
  else if (v6 <= sub_1005E0BB0())
  {
LABEL_13:
    sub_1002EB9B4();
    uint64_t v13 = v14;
    uint64_t v15 = *v5;
    if (v7)
    {
      swift_beginAccess();
      uint64_t v16 = *(void *)(v7 + 24) & 0x3FLL;
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (v16 || *(void *)(v15 + 16) >= 0x10uLL)
    {
      sub_1005E0BD0();
      sub_100339EFC();
    }
    else
    {
      swift_release();
      *uint64_t v3 = 0;
    }
    return v13;
  }
  unint64_t result = sub_100339E0C();
  uint64_t v10 = *v3;
  if (*v3)
  {
    unint64_t result = sub_1002EBD34(a2, (void *)(v10 + 16), v10 + 32, (uint64_t)v3);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v11 = v3[1];
      swift_retain();
      swift_retain();
      sub_1002EC408(a1, a1 + 1, v11, (void *)(v10 + 16));
      swift_release();
      swift_release();
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1002EB79C(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100338D2C();
    uint64_t v5 = v6;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = *(void *)(type metadata accessor for ParameterValue() - 8);
    uint64_t v9 = *(void *)(v8 + 72);
    uint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
    sub_1002ECB38(v10, a2);
    sub_100232374(v10 + v9, v7 - 1 - a1, v10);
    *(void *)(v5 + 16) = v7 - 1;
    uint64_t *v2 = v5;
  }
}

void sub_1002EB888(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100338CE4();
    uint64_t v3 = v4;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    sub_10023232C((char *)(v3 + 16 * a1 + 48), v5 - 1 - a1, (char *)(v3 + 16 * a1 + 32));
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
  }
}

void sub_1002EB910(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100338DAC();
    uint64_t v3 = v4;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    sub_100234FE0(v3 + 24 * a1 + 56, v5 - 1 - a1);
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
  }
}

void sub_1002EB9B4()
{
  sub_1001FE5B4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v7 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = v4(v7);
  }
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= v6)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    v2(v7 + 24 * v6 + 56, v8 - 1 - v6);
    *(void *)(v7 + 16) = v9;
    uint64_t *v0 = v7;
    sub_1001FE57C();
  }
}

void sub_1002EBA64(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100338EB0();
    uint64_t v5 = v6;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = *(void *)(sub_10000566C(&qword_10070FE28) - 8);
    sub_1002ECC20(v5+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * a1, a2);
    sub_10023238C();
    *(void *)(v5 + 16) = v7 - 1;
    uint64_t *v2 = v5;
  }
}

unint64_t sub_1002EBB54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v17 = sub_1005E0B40();
  sub_1005E0B90();
  if (v17)
  {
    uint64_t v7 = a1;
    uint64_t v8 = sub_1005E0B50();
    while (1)
    {
      unint64_t result = sub_1005E0B70();
      if (v10)
      {
LABEL_26:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (result >= *(void *)(*(void *)(a4 + 8) + 16)) {
        goto LABEL_24;
      }
      sub_1005E33F0();
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      Swift::Int v11 = sub_1005E3470();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v12 = 1 << *a2;
      if (__OFSUB__(v12, 1)) {
        goto LABEL_25;
      }
      uint64_t v13 = (v12 - 1) & v11;
      if (v6 >= v8)
      {
        if (v13 >= v8 && v6 >= v13)
        {
LABEL_18:
          sub_1005E0B70();
          sub_1005E0B60();
          uint64_t v6 = v7;
        }
      }
      else if (v13 >= v8 || v6 >= v13)
      {
        goto LABEL_18;
      }
      sub_1005E0B90();
      uint64_t v7 = a1;
    }
  }
  return sub_1005E0B60();
}

unint64_t sub_1002EBD34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v16 = sub_1005E0B40();
  sub_1005E0B90();
  if (v16)
  {
    uint64_t v7 = a1;
    uint64_t v8 = sub_1005E0B50();
    while (1)
    {
      unint64_t result = sub_1005E0B70();
      if (v10)
      {
LABEL_26:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (result >= *(void *)(*(void *)(a4 + 8) + 16)) {
        goto LABEL_24;
      }
      sub_1005E33F0();
      swift_beginAccess();
      sub_1005E3400();
      unint64_t result = sub_1005E3470();
      uint64_t v11 = 1 << *a2;
      if (__OFSUB__(v11, 1)) {
        goto LABEL_25;
      }
      uint64_t v12 = (v11 - 1) & result;
      if (v6 >= v8)
      {
        if (v12 >= v8 && v6 >= v12)
        {
LABEL_18:
          sub_1005E0B70();
          sub_1005E0B60();
          uint64_t v6 = v7;
        }
      }
      else if (v12 >= v8 || v6 >= v12)
      {
        goto LABEL_18;
      }
      sub_1005E0B90();
      uint64_t v7 = a1;
    }
  }
  return sub_1005E0B60();
}

void sub_1002EBF68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v4 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    if ((uint64_t)(v8 - v4) / 2 <= a1)
    {
      uint64_t v12 = a2;
      BOOL v13 = __OFSUB__(v8, a2);
      uint64_t v14 = v8 - a2;
      if (v13)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (v14 >= sub_1005E0BA0() / 3)
      {
        sub_1005E0B40();
        uint64_t v27 = sub_1005E0B70();
        if ((v28 & 1) == 0 && v27 >= v12)
        {
          if (__OFSUB__(v27, v4))
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          sub_1005E0B80();
        }
        sub_1005E0B90();
      }
      else
      {
        sub_10024104C(v12, a3);
        if (v15 != v16 >> 1)
        {
          uint64_t v17 = v15;
          unint64_t v18 = v16 >> 1;
          if (v15 >= (uint64_t)(v16 >> 1))
          {
LABEL_61:
            __break(1u);
            return;
          }
          do
          {
            sub_1005E33F0();
            swift_bridgeObjectRetain();
            sub_1005E1DB0();
            sub_1005E3470();
            if (__OFSUB__(1 << *a4, 1)) {
              goto LABEL_52;
            }
            if (sub_1005E0B40())
            {
              while (1)
              {
                uint64_t v19 = sub_1005E0B70();
                if ((v20 & 1) == 0 && v19 == v12) {
                  break;
                }
                sub_1005E0B90();
              }
            }
            if (__OFSUB__(v12, v4)) {
              goto LABEL_53;
            }
            sub_1005E0B80();
            swift_bridgeObjectRelease();
            BOOL v13 = __OFADD__(v12++, 1);
            if (v13) {
              goto LABEL_54;
            }
          }
          while (++v17 != v18);
        }
        swift_unknownObjectRelease();
      }
    }
    else
    {
      if (sub_1005E0BA0() / 3 <= a1)
      {
        sub_1005E0B40();
        uint64_t v21 = sub_1005E0B70();
        if ((v22 & 1) == 0 && v21 < a1)
        {
          if (__OFADD__(v21, v4))
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          sub_1005E0B80();
        }
        sub_1005E0B90();
      }
      else
      {
        if (a1 < 0)
        {
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        if (v8 < a1)
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (a1)
        {
          swift_retain();
          uint64_t v9 = 0;
          while (1)
          {
            sub_1005E33F0();
            swift_bridgeObjectRetain();
            sub_1005E1DB0();
            sub_1005E3470();
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (sub_1005E0B40())
            {
              while (1)
              {
                uint64_t v10 = sub_1005E0B70();
                if ((v11 & 1) == 0 && v10 == v9) {
                  break;
                }
                sub_1005E0B90();
              }
            }
            if (__OFADD__(v9, v4)) {
              goto LABEL_49;
            }
            ++v9;
            sub_1005E0B80();
            swift_bridgeObjectRelease();
            if (v9 == a1)
            {
              swift_release();
              goto LABEL_37;
            }
          }
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
      }
LABEL_37:
      uint64_t v23 = a4[1];
      if (__OFSUB__(v23 >> 6, v4))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v24 = 1 << *a4;
      BOOL v13 = __OFSUB__(v24, 1);
      uint64_t v25 = v24 - 1;
      if (v13)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v26 = (v25 & (((v23 >> 6) - v4) >> 63)) + (v23 >> 6) - v4;
      if (v26 < v25) {
        uint64_t v25 = 0;
      }
      a4[1] = a4[1] & 0x3FLL | ((v26 - v25) << 6);
    }
  }
}

void sub_1002EC408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v4 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    if ((uint64_t)(v8 - v4) / 2 <= a1)
    {
      uint64_t v12 = a2;
      if (__OFSUB__(v8, a2))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if ((uint64_t)(v8 - a2) >= sub_1005E0BA0() / 3)
      {
        sub_1005E0B40();
        uint64_t v22 = sub_1005E0B70();
        if ((v23 & 1) == 0 && v22 >= v12)
        {
          if (__OFSUB__(v22, v4))
          {
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          sub_1005E0B80();
        }
        sub_1005E0B90();
        return;
      }
      sub_10024104C(v12, a3);
      if (v13 != v14 >> 1)
      {
        uint64_t v24 = v13;
        unint64_t v27 = v14 >> 1;
        if (v13 >= (uint64_t)(v14 >> 1))
        {
LABEL_62:
          __break(1u);
          return;
        }
        while (1)
        {
          sub_1005E33F0();
          swift_beginAccess();
          sub_1005E3400();
          sub_1005E3470();
          if (__OFSUB__(1 << *a4, 1)) {
            goto LABEL_53;
          }
          if (sub_1005E0B40())
          {
            while (1)
            {
              uint64_t v25 = sub_1005E0B70();
              if ((v26 & 1) == 0 && v25 == v12) {
                break;
              }
              sub_1005E0B90();
            }
          }
          if (__OFSUB__(v12, v4)) {
            goto LABEL_54;
          }
          sub_1005E0B80();
          BOOL v19 = __OFADD__(v12++, 1);
          if (v19) {
            goto LABEL_55;
          }
          if (++v24 == v27)
          {
            swift_unknownObjectRelease();
            return;
          }
        }
      }
      swift_unknownObjectRelease();
    }
    else
    {
      if (sub_1005E0BA0() / 3 <= a1)
      {
        sub_1005E0B40();
        uint64_t v15 = sub_1005E0B70();
        if ((v16 & 1) == 0 && v15 < a1)
        {
          if (__OFADD__(v15, v4))
          {
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          sub_1005E0B80();
        }
        sub_1005E0B90();
      }
      else
      {
        if (a1 < 0)
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (v8 < a1)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        if (a1)
        {
          uint64_t v9 = 0;
          while (1)
          {
            sub_1005E33F0();
            swift_beginAccess();
            sub_1005E3400();
            sub_1005E3470();
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (sub_1005E0B40())
            {
              while (1)
              {
                uint64_t v10 = sub_1005E0B70();
                if ((v11 & 1) == 0 && v10 == v9) {
                  break;
                }
                sub_1005E0B90();
              }
            }
            if (__OFADD__(v9, v4)) {
              goto LABEL_50;
            }
            ++v9;
            sub_1005E0B80();
            if (v9 == a1) {
              goto LABEL_28;
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
      }
LABEL_28:
      uint64_t v17 = a4[1];
      if (__OFSUB__(v17 >> 6, v4))
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v18 = 1 << *a4;
      BOOL v19 = __OFSUB__(v18, 1);
      uint64_t v20 = v18 - 1;
      if (v19)
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v21 = (v20 & (((v17 >> 6) - v4) >> 63)) + (v17 >> 6) - v4;
      if (v21 < v20) {
        uint64_t v20 = 0;
      }
      a4[1] = a4[1] & 0x3FLL | ((v21 - v20) << 6);
    }
  }
}

uint64_t sub_1002EC8F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = *((unsigned int *)a4 + 2);
  int v7 = *((_DWORD *)a4 + 4);
  uint64_t v8 = *((unsigned __int16 *)a4 + 10);
  uint64_t v9 = *((unsigned __int8 *)a4 + 22);
  if (a3)
  {
    uint64_t v10 = a5;
    swift_retain();
    sub_10033A50C();
    uint64_t v12 = v11;
    char v14 = v13;
    uint64_t v5 = v15;
    unint64_t result = swift_release();
    a5 = v10;
    char v16 = v14 & 1;
  }
  else if (a2)
  {
    uint64_t v30 = a5;
    uint64_t v12 = 0;
    uint64_t v17 = (*((_DWORD *)a4 + 3) - v6);
    uint64_t v36 = *a4;
    char v32 = (void *)(*a4 + 24);
    int v33 = *((unsigned __int16 *)a4 + 10);
    uint64_t v18 = (unsigned __int8 *)(result + 22);
    uint64_t v31 = (v9 | (v8 << 8)) + v6;
    int v35 = *((_DWORD *)a4 + 4);
    while (1)
    {
      uint64_t v19 = *(unsigned int *)(v18 - 14);
      uint64_t v20 = *(unsigned int *)(v18 - 10);
      if (v20 - v19 == v17)
      {
        uint64_t v21 = *(void *)(v18 - 22);
        uint64_t v22 = *((unsigned __int16 *)v18 - 1);
        uint64_t v23 = *v18;
        BOOL v24 = *(_DWORD *)(v18 - 6) == v7 && v22 == v8;
        BOOL v25 = v24 && v23 == v9;
        if (v25 && v21 == v36) {
          break;
        }
        uint64_t v27 = v9;
        uint64_t v28 = v17;
        swift_beginAccess();
        uint64_t v29 = (const void *)(*(void *)(v21 + 24) + (v23 | (v22 << 8)) + v19);
        swift_beginAccess();
        unint64_t result = memcmp(v29, (const void *)(*v32 + v31), v20 - v19);
        uint64_t v17 = v28;
        uint64_t v9 = v27;
        LODWORD(v8) = v33;
        uint64_t v5 = a2;
        int v7 = v35;
        if (!result) {
          break;
        }
      }
      v18 += 24;
      if (v5 == ++v12)
      {
        uint64_t v5 = 0;
        uint64_t v12 = 0;
        char v16 = 1;
        goto LABEL_21;
      }
    }
    uint64_t v5 = 0;
    char v16 = 0;
LABEL_21:
    a5 = v30;
  }
  else
  {
    uint64_t v12 = 0;
    char v16 = 1;
  }
  *(void *)a5 = v12;
  *(unsigned char *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v5;
  return result;
}

uint64_t sub_1002ECAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EC8F4(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 32), a3);
}

uint64_t sub_1002ECB08(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1002ECB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10033A930(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 32), a3);
}

uint64_t sub_1002ECB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParameterValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ParameterValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10033A770(a1, a2, *(void *)(v3 + 16), *(uint64_t **)(v3 + 32), a3);
}

uint64_t sub_1002ECC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_10070FE28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_10070FE28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECCF0()
{
  return sub_1002EAE34();
}

uint64_t sub_1002ECD0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002ECD40(a1);
}

uint64_t sub_1002ECD24()
{
  return sub_1002EAF1C();
}

uint64_t sub_1002ECD40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1002ECD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002ECC00(a1, a2, a3);
}

uint64_t sub_1002ECD8C()
{
  uint64_t v6 = *v1;
  uint64_t v5 = v1[1];
  *(void *)(v3 - 192) = v2;
  *(void *)(v3 - 96) = v2;
  *(void *)(v3 - 88) = v0;
  *(void *)(v3 - 152) = v0;
  *(void *)(v3 - 128) = v6;
  *(void *)(v3 - 120) = v5;
  *(void *)(v3 - 112) = v3 - 96;
  return swift_retain();
}

uint64_t sub_1002ECDD0()
{
  *(void *)(v0 + 16) = v1;
  return v2;
}

uint64_t sub_1002ECDF8()
{
  return v0;
}

uint64_t sub_1002ECE1C()
{
  return v0;
}

uint64_t sub_1002ECE78()
{
  return 0;
}

void sub_1002ECEA8()
{
  *(void *)uint64_t v1 = v0;
  *(unsigned char *)(v1 + 8) = v2 & 1;
}

void sub_1002ECED0()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_100212B70(0, v2, 1);
}

uint64_t sub_1002ECEF0()
{
  uint64_t v3 = *(void *)(v1 - 192);
  uint64_t v4 = *(void *)(v1 - 152);
  return sub_100339928(v3, v4, v0);
}

void sub_1002ECF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 184) = (char *)&a9 - v9;
}

uint64_t sub_1002ECF24()
{
  return v0;
}

uint64_t sub_1002ECF38()
{
  return swift_release();
}

void sub_1002ECF58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return;
  }
  uint64_t v96 = swift_bridgeObjectRetain();
  uint64_t v3 = v96 + 64;
  int v106 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v4 = *(void *)(v3 - 24);
    uint64_t v143 = *(void *)(v3 - 32);
    uint64_t v144 = *(void *)(v3 - 8);
    unint64_t v5 = *(unsigned int *)(v3 + 32) | ((unint64_t)(*(unsigned __int16 *)(v3 + 36) | (*(unsigned __int8 *)(v3 + 38) << 16)) << 32);
    uint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = *(unsigned int *)(v3 + 56) | ((unint64_t)(*(unsigned __int16 *)(v3 + 60) | (*(unsigned __int8 *)(v3 + 62) << 16)) << 32);
    unint64_t v136 = *(unsigned int *)(v3 + 8) | ((unint64_t)(*(unsigned __int16 *)(v3 + 12) | (*(unsigned __int8 *)(v3 + 14) << 16)) << 32);
    unint64_t v140 = HIDWORD(v136);
    uint64_t v141 = *(void *)(v3 + 24);
    unint64_t v139 = HIWORD(v136);
    if (*(void *)(v3 + 40)) {
      break;
    }
    if (v6)
    {
      uint64_t v145 = *(void *)v3;
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100232E10();
        uint64_t v2 = v89;
      }
      unint64_t v31 = v2[2];
      uint64_t v32 = v141;
      if (v31 >= v2[3] >> 1)
      {
        sub_100232E10();
        uint64_t v32 = v141;
        uint64_t v2 = v90;
      }
      v2[2] = v31 + 1;
      int v33 = &v2[7 * v31];
      v33[4] = v6;
      v33[5] = v32;
      *((_DWORD *)v33 + 12) = v5;
      *((_WORD *)v33 + 26) = WORD2(v5);
      *((unsigned char *)v33 + 54) = BYTE6(v5);
      v33[7] = v144;
      v33[8] = v145;
      *((unsigned char *)v33 + 78) = BYTE6(v136);
      *((_WORD *)v33 + 38) = WORD2(v136);
      *((_DWORD *)v33 + 18) = v136;
      v33[10] = _swiftEmptyArrayStorage;
      swift_release();
      swift_release();
      swift_release_n();
      goto LABEL_35;
    }
    uint64_t v132 = 0;
    if (!v2[2]) {
      goto LABEL_29;
    }
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v35 = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002EE2D4();
      int v35 = v91;
    }
    uint64_t v36 = v35[2];
    if (!v36) {
      goto LABEL_46;
    }
    uint64_t v37 = v35 + 4;
    uint64_t v38 = (uint64_t)&v35[7 * v36 - 3];
    uint64_t v39 = *(void *)v38;
    int v134 = *(_DWORD *)(v38 + 12);
    LODWORD(v139) = *(_DWORD *)(v38 + 16);
    LOWORD(v140) = *(_WORD *)(v38 + 20);
    char v142 = *(unsigned char *)(v38 + 22);
    uint64_t v146 = v35;
    unint64_t v40 = *(unsigned int *)(v38 + 40) | ((unint64_t)(*(unsigned __int16 *)(v38 + 44) | (*(unsigned __int8 *)(v38 + 46) << 16)) << 32);
    uint64_t v35[2] = v36 - 1;
    if (v36 == 1)
    {
      uint64_t v74 = swift_allocObject();
      sub_1002EE3CC(v74, v75, v76, v77, v78, v79, v80, v81, v96, v99, v103, (uint64_t)v106, v111, v116, v119, v124, v1, v134, 0,
        SWORD2(v40),
        0,
        v139,
        SHIDWORD(v139),
        v140,
        SHIDWORD(v140),
        v142);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v1 = v131;
        NIOIMAPCore2::MailboxName v82 = v110;
      }
      else
      {
        sub_1002EE508();
        NIOIMAPCore2::MailboxName v82 = v94;
        uint64_t v1 = v131;
      }
      uint64_t v2 = v146;
      unint64_t v83 = v82[2];
      if (v83 >= v82[3] >> 1)
      {
        sub_1002EE544();
        NIOIMAPCore2::MailboxName v82 = v95;
      }
      _OWORD v82[2] = v83 + 1;
      int v106 = v82;
      v82[v83 + 4] = v4 | 0x8000000000000000;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v41 = swift_allocObject();
      sub_1002EE3CC(v41, v42, v43, v44, v45, v46, v47, v48, v96, v99, v103, (uint64_t)v106, v111, v116, v119, v124, v1, v134, 0,
        SWORD2(v40),
        0,
        v139,
        SHIDWORD(v139),
        v140,
        SHIDWORD(v140),
        v142);
      uint64_t v49 = &v37[7 * v36];
      uint64_t v50 = *(v49 - 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      char v51 = swift_isUniquelyReferenced_nonNull_native();
      *(v49 - 8) = v50;
      uint64_t v124 = v39;
      if ((v51 & 1) == 0)
      {
        sub_1002EE4E4();
        sub_1002EE564(v92);
      }
      uint64_t v1 = v129;
      unint64_t v52 = *(void *)(v50 + 16);
      if (v52 >= *(void *)(v50 + 24) >> 1)
      {
        sub_100232EF0();
        sub_1002EE564(v93);
      }
      *(void *)(v50 + 16) = v52 + 1;
      *(void *)(v50 + 8 * v52 + 32) = v4 | 0x8000000000000000;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v2 = v146;
    }
LABEL_35:
    v3 += 96;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  uint64_t v132 = *(void *)(v3 + 16);
  if (!v2[2])
  {
LABEL_29:
    uint64_t v130 = v1;
    uint64_t v53 = *(void *)v3;
    uint64_t v122 = *(void *)(v3 + 48);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v143;
    *(void *)(v54 + 24) = v4;
    uint64_t v55 = sub_1002EE52C(v54);
    *(void *)(v55 + 40) = v56;
    *(void *)(v55 + 48) = v53;
    uint64_t v64 = sub_1002EE570(v55, v57, v58, v59, v60, v61, v62, v63, v96, v99, v103, (uint64_t)v106, HIWORD(v5), HIDWORD(v5), v122, HIWORD(v7), v130, v132, v136,
            SBYTE6(v136),
            0,
            SWORD2(v136));
    *(_DWORD *)(v64 + 56) = v138;
    *(void *)(v64 + 64) = v135;
    *(void *)(v64 + 72) = v141;
    sub_1002EE470(v64, v65, v66, v67, v68, v69, v70, v71, v98, v102, v105, v108, v113, v115, v118, v123, v126);
    *(_WORD *)(v54 + 108) = WORD2(v7);
    *(_DWORD *)(v54 + 104) = v7;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v72 = v109;
    }
    else
    {
      sub_1002EE508();
      uint64_t v72 = v87;
    }
    unint64_t v73 = v72[2];
    if (v73 >= v72[3] >> 1)
    {
      sub_1002EE544();
      uint64_t v72 = v88;
    }
    v72[2] = v73 + 1;
    int v106 = v72;
    v72[v73 + 4] = v54;
    swift_release();
    swift_release();
    goto LABEL_34;
  }
  uint64_t v100 = v2[2];
  uint64_t v127 = v1;
  uint64_t v8 = *(void *)v3;
  uint64_t v120 = *(void *)(v3 + 48);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v143;
  *(void *)(v9 + 24) = v4;
  uint64_t v10 = sub_1002EE52C(v9);
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = v8;
  uint64_t v19 = sub_1002EE570(v10, v12, v13, v14, v15, v16, v17, v18, v96, v100, HIDWORD(v7), (uint64_t)v106, HIWORD(v5), HIDWORD(v5), v120, HIWORD(v7), v127, v6, v136,
          SBYTE6(v136),
          0,
          SWORD2(v136));
  *(_DWORD *)(v19 + 56) = v137;
  *(void *)(v19 + 64) = v133;
  *(void *)(v19 + 72) = v141;
  sub_1002EE470(v19, v20, v21, v22, v23, v24, v25, v26, v97, v101, v104, v107, v112, v114, v117, v121, v125);
  *(_WORD *)(v9 + 108) = v103;
  *(_DWORD *)(v9 + 104) = v7;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1002EE2D4();
    uint64_t v2 = v84;
  }
  if (v99 <= v2[2])
  {
    uint64_t v27 = &v2[7 * v99 - 7];
    uint64_t v28 = v27[10];
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    v27[10] = v28;
    if ((v29 & 1) == 0)
    {
      sub_1002EE4E4();
      sub_1002EE564(v85);
    }
    unint64_t v30 = *(void *)(v28 + 16);
    if (v30 >= *(void *)(v28 + 24) >> 1)
    {
      sub_100232EF0();
      sub_1002EE564(v86);
    }
    *(void *)(v28 + 16) = v30 + 1;
    *(void *)(v28 + 8 * v30 + 32) = v9;
    swift_release();
    swift_release();
LABEL_34:
    swift_release();
    swift_release();
    uint64_t v1 = v128;
    goto LABEL_35;
  }
  __break(1u);
LABEL_46:
  __break(1u);
}

double sub_1002ED640@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  sub_1003237D8(&v33, a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    __int16 v18 = v35;
    int v19 = v34;
    __int16 v20 = v39;
    __int16 v21 = v43;
    int v22 = v38;
    int v23 = v42;
    __int16 v24 = v47;
    int v25 = v46;
    double result = *(double *)&v33;
    long long v26 = v37;
    long long v27 = v41;
    long long v28 = v45;
    char v29 = v36;
    char v30 = v40;
    char v31 = v44;
    char v32 = v48;
    *(_OWORD *)a8 = v33;
    *(unsigned char *)(a8 + 22) = v29;
    *(_WORD *)(a8 + 20) = v18;
    *(_DWORD *)(a8 + 16) = v19;
    *(_OWORD *)(a8 + 24) = v26;
    *(unsigned char *)(a8 + 46) = v30;
    *(_WORD *)(a8 + 44) = v20;
    *(_DWORD *)(a8 + 40) = v22;
    *(_OWORD *)(a8 + 48) = v27;
    *(unsigned char *)(a8 + 70) = v31;
    *(_WORD *)(a8 + 68) = v21;
    *(_DWORD *)(a8 + 64) = v23;
    *(_OWORD *)(a8 + 72) = v28;
    *(unsigned char *)(a8 + 94) = v32;
    *(_WORD *)(a8 + 92) = v24;
    *(_DWORD *)(a8 + 88) = v25;
  }
  return result;
}

uint64_t sub_1002ED768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  _OWORD v12[5] = a7;
  int v25 = sub_1002EE230;
  long long v26 = v12;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v17 = sub_1002EE250;
  __int16 v18 = &v19;
  swift_retain();
  uint64_t v13 = sub_10033CB54((uint64_t)sub_1002ECD0C, (uint64_t)v24, (uint64_t)sub_1002ECD0C, (uint64_t)v16);
  swift_release();
  if (!v7)
  {
    sub_1002ECF58(v13);
    a6 = v14;
    swift_bridgeObjectRelease();
  }
  return a6;
}

void *sub_1002ED8BC(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 1;
  if (!__OFADD__(a2, 1))
  {
    if (v4 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v12 = a3;
    }
    else
    {
      uint64_t v6 = (uint64_t)result;
      uint64_t v7 = *result;
      uint64_t v8 = result[1];
      int v9 = *((_DWORD *)result + 4);
      __int16 v10 = *((_WORD *)result + 10);
      char v11 = *((unsigned char *)result + 22);
      swift_retain();
      sub_100338020(v6, v4, a3, 0, 0x6C696EuLL, 0xE300000000000000, 0);
      if (!v3)
      {
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      swift_release();
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v8;
      *(_DWORD *)(v6 + 16) = v9;
      *(_WORD *)(v6 + 20) = v10;
      *(unsigned char *)(v6 + 22) = v11;
    }
    swift_willThrow();
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002ED9C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E1C0();
  if (!v7)
  {
    __chkstk_darwin();
    void v16[2] = a4;
    v16[3] = a5;
    v16[4] = a6;
    v16[5] = a7;
    a7 = sub_10032CFD8(a1, a2, a3, (uint64_t)sub_1002EE330, (uint64_t)v16, (uint64_t)&type metadata for EmailAddress);
    sub_10031E1C0();
  }
  return a7;
}

void sub_1002EDAEC(uint64_t a1@<X8>)
{
  sub_1003299AC();
  if (!v1)
  {
    sub_1002EE370();
    uint64_t v3 = sub_1002EE39C();
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    uint64_t v25 = v3;
    sub_1002EE370();
    uint64_t v6 = sub_1002EE39C();
    uint64_t v20 = v7;
    uint64_t v21 = v8;
    uint64_t v22 = v6;
    sub_1002EE370();
    uint64_t v9 = sub_1002EE39C();
    uint64_t v17 = v10;
    uint64_t v18 = v11;
    uint64_t v19 = v9;
    sub_1002EE370();
    uint64_t v12 = sub_1002EE39C();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    sub_1002EE370();
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v23;
    *(_DWORD *)(a1 + 16) = v24;
    *(unsigned char *)(a1 + 22) = BYTE6(v24);
    *(_WORD *)(a1 + 20) = WORD2(v24);
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v20;
    *(_DWORD *)(a1 + 40) = v21;
    *(unsigned char *)(a1 + 46) = BYTE6(v21);
    *(_WORD *)(a1 + 44) = WORD2(v21);
    *(void *)(a1 + 48) = v19;
    *(void *)(a1 + 56) = v17;
    *(_DWORD *)(a1 + 64) = v18;
    *(unsigned char *)(a1 + 70) = BYTE6(v18);
    *(_WORD *)(a1 + 68) = WORD2(v18);
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v14;
    *(_DWORD *)(a1 + 88) = v16;
    *(unsigned char *)(a1 + 94) = BYTE6(v16);
    *(_WORD *)(a1 + 92) = WORD2(v16);
  }
}

void sub_1002EDCA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = __OFADD__(a2, 1);
  uint64_t v5 = a2 + 1;
  if (v4)
  {
    __break(1u);
    return;
  }
  if (v5 >= a3)
  {
    sub_1002DB5BC();
    swift_allocError();
    *uint64_t v13 = a3;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    int v10 = *((_DWORD *)a1 + 4);
    __int16 v11 = *((_WORD *)a1 + 10);
    char v12 = *((unsigned char *)a1 + 22);
    sub_100337E64();
    if (!v3) {
      return;
    }
    *a1 = v8;
    a1[1] = v9;
    *((_DWORD *)a1 + 4) = v10;
    *((_WORD *)a1 + 10) = v11;
    *((unsigned char *)a1 + 22) = v12;
  }
  swift_willThrow();
}

uint64_t sub_1002EDD68()
{
  uint64_t v2 = sub_100309F9C();
  if (!v1)
  {
    if (v2)
    {
      uint64_t v0 = sub_10031E368(v2, v3, v4 & 0xFFFFFFFFFFFFFFLL, 0xD000000000000020, 0x80000001005E63C0, 97);
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

void sub_1002EDE00(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  sub_1002EE4C8();
  sub_10031E1C0();
  if (!v3)
  {
    uint64_t v158 = a3;
    uint64_t v7 = 0;
    uint64_t v10 = sub_100309F9C();
    uint64_t v149 = a2;
    uint64_t v155 = a1;
    if (v10)
    {
      unsigned int v11 = v8;
      unint64_t v12 = v9;
      swift_beginAccess();
      uint64_t v7 = *(void *)(v10 + 24) + ((v12 >> 24) & 0xFFFF00 | BYTE6(v12)) + v11;
      swift_retain();
      uint64_t v142 = sub_1005E1D70();
      uint64_t v14 = v13;
      swift_release_n();
    }
    else
    {
      uint64_t v142 = 0;
      uint64_t v14 = 0;
    }
    sub_1002EE350();
    if (v7)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = sub_100309F9C();
      uint64_t v126 = v16;
      uint64_t v133 = v17;
      sub_1002EE350();
      uint64_t v120 = sub_1002EE414(v18, v19, v20, v21, v22, v23, v24, v25, v71, v77, v84, v91, v98, v105, v112, v119, v126, v133, v142,
               v149);
      sub_1002EE350();
      uint64_t v114 = sub_1002EE414(v26, v27, v28, v29, v30, v31, v32, v33, v72, v78, v85, v92, v99, v106, v113, v120, v127, v134, v143,
               v150);
      sub_1002EE350();
      uint64_t v42 = sub_1002EE414(v34, v35, v36, v37, v38, v39, v40, v41, v73, v79, v86, v93, v100, v107, v114, v121, v128, v135, v144,
              v151);
      sub_1002EE350();
      uint64_t v109 = sub_1002EE444(v43, v44, v45, v46, v47, v48, v49, v50, v74, v80, v87, v94, v101, v108, v115, v122, v129, v136, v145,
               v152,
               v155);
      sub_1002EE350();
      uint64_t v103 = sub_1002EE444(v51, v52, v53, v54, v55, v56, v57, v58, v75, v81, v88, v95, v102, v109, v116, v123, v130, v137, v146,
               v153,
               v156);
      sub_1002EE350();
      uint64_t v97 = sub_1002EE444(v59, v60, v61, v62, v63, v64, v65, v66, v76, v82, v89, v96, v103, v110, v117, v124, v131, v138, v147,
              v154,
              v157);
      sub_1002EE350();
      uint64_t v83 = sub_1002EE49C();
      uint64_t v90 = v67;
      sub_1002EE350();
      uint64_t v68 = sub_1002EE49C();
      uint64_t v70 = v69;
      sub_1002EE4C8();
      sub_10031E1C0();
      *(void *)uint64_t v158 = v148;
      *(void *)(v158 + 8) = v14;
      *(void *)(v158 + 16) = v15;
      *(void *)(v158 + 24) = v132;
      *(_DWORD *)(v158 + 32) = v139;
      *(unsigned char *)(v158 + 38) = v141;
      *(_WORD *)(v158 + 36) = v140;
      *(void *)(v158 + 40) = v125;
      *(void *)(v158 + 48) = v118;
      *(void *)(v158 + 56) = v42;
      *(void *)(v158 + 64) = v111;
      *(void *)(v158 + 72) = v104;
      *(void *)(v158 + 80) = v97;
      *(void *)(v158 + 88) = v83;
      *(void *)(v158 + 96) = v90;
      *(void *)(v158 + 104) = v68;
      *(void *)(v158 + 112) = v70;
    }
  }
}

uint64_t sub_1002EE1F8()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002EE230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002ED9C0(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

void *sub_1002EE250(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002ED8BC(a1, a2, a3);
}

uint64_t sub_1002EE270()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 111, 7);
}

void sub_1002EE2C0()
{
}

void sub_1002EE2D4()
{
}

uint64_t sub_1002EE2E8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 72, 7);
}

double sub_1002EE330@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002ED640(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4);
}

void sub_1002EE350()
{
  sub_10031E2BC(v2, v1, v0);
}

void sub_1002EE370()
{
  sub_10031E1C0();
}

uint64_t sub_1002EE39C()
{
  return sub_100309F9C();
}

uint64_t sub_1002EE3CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, __int16 a20,int a21,int a22,int a23,__int16 a24,int a25,char a26)
{
  *(void *)(result + 16) = v30;
  *(_DWORD *)(result + 24) = v28;
  *(_DWORD *)(result + 28) = a18;
  *(_DWORD *)(result + 32) = a22;
  *(_WORD *)(result + 36) = a24;
  *(unsigned char *)(result + 38) = a26;
  uint64_t v33 = *(void *)(v32 - 96);
  *(void *)(result + 40) = v31;
  *(void *)(result + 48) = v33;
  *(unsigned char *)(result + 62) = v29;
  *(_WORD *)(result + 60) = a20;
  *(_DWORD *)(result + 56) = v26;
  *(void *)(result + 64) = v27;
  return result;
}

uint64_t sub_1002EE414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return sub_1002ED768(v24, v23, v22, v20, v21, v25, a20);
}

uint64_t sub_1002EE444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return sub_1002ED768(v25, v24, v23, v21, v22, a21, a20);
}

uint64_t sub_1002EE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, uint64_t a16, char a17)
{
  *(unsigned char *)(a1 + 86) = a13;
  *(_WORD *)(a1 + 84) = a15;
  *(_DWORD *)(a1 + 80) = v17;
  uint64_t result = *(void *)(v19 - 96);
  *(void *)(v18 + 88) = result;
  *(void *)(v18 + 96) = a16;
  *(unsigned char *)(v18 + 110) = a17;
  return result;
}

uint64_t sub_1002EE49C()
{
  return sub_1002EDD68();
}

void sub_1002EE4E4()
{
  sub_100232EF0();
}

void sub_1002EE508()
{
  sub_100232EF0();
}

uint64_t sub_1002EE52C(uint64_t result)
{
  *(unsigned char *)(result + 38) = v3;
  *(_WORD *)(result + 36) = v2;
  *(_DWORD *)(result + 32) = v1;
  return result;
}

void sub_1002EE544()
{
  sub_100232EF0();
}

uint64_t sub_1002EE564(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_1002EE570(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22)
{
  *(unsigned char *)(result + 62) = a20;
  *(_WORD *)(result + 60) = a22;
  return result;
}

uint64_t sub_1002EE584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10000566C(&qword_1007122E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F66A0;
  *(void *)(inited + 32) = sub_1002EF15C;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = sub_1002EF190;
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 64) = sub_1002EF1C4;
  *(void *)(inited + 72) = 0;
  uint64_t v15 = (void *)sub_1002E1F90();
  uint64_t v15[2] = a4;
  v15[3] = a5;
  _OWORD v15[4] = a6;
  v15[5] = a7;
  uint64_t v16 = sub_1002E8414();
  *(void *)(v16 + 16) = sub_1002F1978;
  *(void *)(v16 + 24) = v15;
  *(void *)(inited + 80) = sub_1002F1994;
  *(void *)(inited + 88) = v16;
  int v17 = (void *)sub_1002E1F90();
  _OWORD v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  uint64_t v18 = sub_1002E8414();
  *(void *)(v18 + 16) = sub_1002F19AC;
  *(void *)(v18 + 24) = v17;
  *(void *)(inited + 96) = sub_1002F1994;
  *(void *)(inited + 104) = v18;
  swift_retain_n();
  uint64_t v19 = sub_10033DA04(inited, a1, a2, a3, 0xD000000000000020, 0x80000001005E63C0, 56);
  swift_setDeallocating();
  sub_10034A020();
  return v19;
}

_UNKNOWN **sub_1002EE73C()
{
  return &off_1006CCED8;
}

_UNKNOWN **sub_1002EE77C()
{
  return &off_1006CCF98;
}

_UNKNOWN **sub_1002EE7BC()
{
  return &off_1006CD030;
}

uint64_t sub_1002EE7FC()
{
  sub_10000566C(&qword_100710708);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1005F6670;
  sub_1002EE8DC();
  if (v0)
  {
    *(void *)(v1 + 16) = 0;
    swift_release();
  }
  else
  {
    sub_1001F3740((uint64_t)v3, v1 + 32);
  }
  return v1;
}

void sub_1002EE8DC()
{
  sub_1002F2480();
  uint64_t v37 = v2;
  uint64_t v35 = v4;
  uint64_t v36 = v3;
  uint64_t v6 = v5;
  sub_10000566C(&qword_1007122F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F69D0;
  *(void *)(inited + 32) = 0x45504F4C45564E45;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = sub_1002EF720;
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x5347414C46;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(void *)(inited + 80) = sub_1002EF74C;
  *(void *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "INTERNALDATE");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = sub_1002EF778;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 4475221;
  *(void *)(inited + 136) = 0xE300000000000000;
  *(void *)(inited + 144) = sub_1002EF7A4;
  *(void *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x514553444F4DLL;
  *(void *)(inited + 168) = 0xE600000000000000;
  *(void *)(inited + 176) = sub_1002EF7D0;
  *(void *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0x47534D2D4D472D58;
  *(void *)(inited + 200) = 0xEA00000000004449;
  *(void *)(inited + 208) = sub_1002EF7FC;
  *(void *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0x5248542D4D472D58;
  *(void *)(inited + 232) = 0xEA00000000004449;
  *(void *)(inited + 240) = sub_1002EF828;
  *(void *)(inited + 248) = 0;
  *(void *)(inited + 256) = 0x42414C2D4D472D58;
  *(void *)(inited + 264) = 0xEB00000000534C45;
  *(void *)(inited + 272) = sub_1002EF854;
  *(void *)(inited + 280) = 0;
  *(void *)(inited + 288) = 0x532E323238434652;
  *(void *)(inited + 296) = 0xEB00000000455A49;
  *(void *)(inited + 304) = sub_1002EF880;
  *(void *)(inited + 312) = 0;
  sub_1002F2344();
  unsigned char v8[40] = v9;
  v8[41] = v10;
  v8[42] = sub_1002EF8AC;
  v8[43] = 0;
  sub_1002F23E4();
  *(void *)(v11 + 352) = v12;
  *(void *)(v11 + 360) = v13;
  *(void *)(v11 + 368) = sub_1002EF8D8;
  *(void *)(v11 + 376) = 0;
  *(void *)(v11 + 384) = 0x323238434652;
  *(void *)(v11 + 392) = 0xE600000000000000;
  *(void *)(v11 + 400) = sub_1002EF904;
  *(void *)(v11 + 408) = 0;
  strcpy((char *)(v11 + 416), "BODYSTRUCTURE");
  *(_WORD *)(v11 + 430) = -4864;
  *(void *)(v11 + 432) = sub_1002EF930;
  *(void *)(v11 + 440) = 0;
  uint64_t v14 = (void *)sub_1002E1F90();
  sub_1002F22B4(v14);
  uint64_t v15 = sub_1002E8414();
  *(void *)(v15 + 16) = sub_1002F1A20;
  *(void *)(v15 + 24) = v1;
  *(void *)(inited + 448) = 1497648962;
  *(void *)(inited + 456) = 0xE400000000000000;
  *(void *)(inited + 464) = sub_1002F1A3C;
  *(void *)(inited + 472) = v15;
  uint64_t v16 = (void *)sub_1002E1F90();
  sub_1002F22B4(v16);
  uint64_t v17 = sub_1002E8414();
  *(void *)(v17 + 16) = sub_1002F1A58;
  *(void *)(v17 + 24) = v1;
  *(void *)(inited + 480) = 0x4545502E59444F42;
  *(void *)(inited + 488) = 0xE90000000000004BLL;
  *(void *)(inited + 496) = sub_1002F2224;
  *(void *)(inited + 504) = v17;
  uint64_t v18 = (void *)sub_1002E1F90();
  sub_1002F22B4(v18);
  uint64_t v19 = sub_1002E8414();
  *(void *)(v19 + 16) = sub_1002F1A74;
  *(void *)(v19 + 24) = v1;
  sub_1002F2384();
  *(void *)(inited + 512) = v20 & 0xFFFFFFFFFFFFLL | 0x532E000000000000;
  *(void *)(inited + 520) = 0xEB00000000455A49;
  *(void *)(inited + 528) = sub_1002F2224;
  *(void *)(inited + 536) = v21;
  uint64_t v22 = (void *)sub_1002E1F90();
  sub_1002F22B4(v22);
  uint64_t v23 = sub_1002E8414();
  *(void *)(v23 + 16) = sub_1002F1A90;
  *(void *)(v23 + 24) = v1;
  sub_1002F2384();
  *(void *)(inited + 544) = v24;
  *(void *)(inited + 552) = 0xE600000000000000;
  *(void *)(inited + 560) = sub_1002F2224;
  *(void *)(inited + 568) = v25;
  uint64_t v26 = (void *)sub_1002E1F90();
  sub_1002F22B4(v26);
  uint64_t v27 = sub_1002E8414();
  *(void *)(v27 + 16) = sub_1002F1ACC;
  *(void *)(v27 + 24) = v1;
  sub_1002F2384();
  *(void *)(inited + 576) = v28 & 0xFFFFFFFFFFFFLL | 0x502E000000000000;
  *(void *)(inited + 584) = 0xEB000000004B4545;
  *(void *)(inited + 592) = sub_1002F2224;
  *(void *)(inited + 600) = v29;
  *(void *)(inited + 608) = 0x57454956455250;
  *(void *)(inited + 616) = 0xE700000000000000;
  *(void *)(inited + 624) = sub_1002EF95C;
  *(void *)(inited + 632) = 0;
  swift_retain_n();
  sub_10000566C(&qword_1007122F8);
  sub_1005E1980();
  sub_1002FA388();
  if (!v0)
  {
    uint64_t v30 = v38;
    uint64_t v31 = v39;
    uint64_t v32 = v40;
    uint64_t v33 = v41;
    unint64_t v34 = v42 | ((unint64_t)v43 << 32);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_errorRetain();
  sub_10000566C(qword_100710378);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1002EF3A8(v6, v36, v37, (uint64_t)v44);
    uint64_t v30 = v44[0];
    uint64_t v31 = v44[1];
    uint64_t v32 = v44[2];
    uint64_t v33 = v44[3];
    unint64_t v34 = v45 | ((unint64_t)v46 << 32);
    swift_errorRelease();
LABEL_6:
    *(void *)uint64_t v35 = v30;
    *(void *)(v35 + 8) = v31;
    *(void *)(v35 + 16) = v32;
    *(void *)(v35 + 24) = v33;
    *(_DWORD *)(v35 + 32) = v34;
    *(unsigned char *)(v35 + 36) = BYTE4(v34);
    goto LABEL_7;
  }
  swift_errorRelease();
LABEL_7:
  sub_1002F2468();
}

void sub_1002EEED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E1C0();
  if (!v7)
  {
    sub_10000566C(&qword_100710708);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1005F6670;
    sub_1002EE8DC();
    uint64_t v16 = sub_1001F3740((uint64_t)v19, v15 + 32);
    uint64_t v18 = (uint64_t)&v18;
    uint64_t v20 = v15;
    __chkstk_darwin(v16);
    _OWORD v17[2] = a4;
    v17[3] = a5;
    v17[4] = a6;
    v17[5] = a7;
    sub_10031EA30(a1, a2, a3, (uint64_t)sub_1002F1A04, (uint64_t)v17, (uint64_t)&v20);
    sub_10031E1C0();
  }
}

void sub_1002EF090(uint64_t a1@<X8>)
{
  sub_10031E1C0();
  if (!v1)
  {
    sub_1002EE8DC();
    sub_1001F3740((uint64_t)v3, a1);
  }
}

_UNKNOWN **sub_1002EF15C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1002EE73C();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

_UNKNOWN **sub_1002EF190@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1002EE7BC();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

_UNKNOWN **sub_1002EF1C4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1002EE77C();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_1002EF1F8()
{
  sub_1002F244C();
  uint64_t v2 = v1;
  uint64_t v3 = sub_10030ACD0();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = v3;
    v13[0] = v5;
    uint64_t v14 = v4;
    swift_retain();
    sub_10032AB64();
    unint64_t v8 = v13[0] | (unint64_t)(v11 << 32);
    *((void *)&v12 + 1) = v10 & 1;
    *(void *)&long long v12 = v11;
    uint64_t v9 = (v12 >> 32) | 0x2000000000;
    uint64_t v7 = v14;
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = v6;
  *(void *)(v2 + 16) = v7;
  *(void *)(v2 + 24) = v8;
  *(_DWORD *)(v2 + 32) = v9;
  *(unsigned char *)(v2 + 36) = BYTE4(v9);
  sub_1002F2368();
}

void sub_1002EF2F4()
{
  sub_1002F244C();
  sub_1002F2320();
  uint64_t v2 = sub_10030ACD0();
  if (!v1)
  {
    unsigned __int8 v8 = v4;
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    swift_retain();
    sub_1002F22FC();
    sub_10032AB64();
    *((void *)&v7 + 1) = v5 & 1;
    *(void *)&long long v7 = v6;
    *(void *)uint64_t v0 = 1;
    *(void *)(v0 + 8) = v9;
    *(void *)(v0 + 16) = v10;
    *(void *)(v0 + 24) = v8 | (unint64_t)(v6 << 32);
    *(_DWORD *)(v0 + 32) = HIDWORD(v6);
    *(unsigned char *)(v0 + 36) = ((unint64_t)(v7 >> 32) | 0x2000000000) >> 32;
  }
  sub_1002F2368();
}

uint64_t sub_1002EF3A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v5 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v15 = a3;
      return swift_willThrow();
    }
    uint64_t v7 = result;
    uint64_t v9 = *(void *)result;
    uint64_t v10 = *(void *)(result + 8);
    int v11 = *(_DWORD *)(result + 16);
    __int16 v12 = *(_WORD *)(result + 20);
    char v13 = *(unsigned char *)(result + 22);
    swift_retain();
    uint64_t v14 = sub_10032D3F0((uint64_t *)v7, v5, a3, 1);
    if (v4)
    {
LABEL_4:
      swift_release();
      *(void *)uint64_t v7 = v9;
      *(void *)(v7 + 8) = v10;
      *(_DWORD *)(v7 + 16) = v11;
      *(_WORD *)(v7 + 20) = v12;
      *(unsigned char *)(v7 + 22) = v13;
      return swift_willThrow();
    }
    uint64_t v16 = v14;
    if (((unint64_t)v14 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      swift_allocError();
      *uint64_t v17 = 0xD00000000000001BLL;
      v17[1] = 0x80000001005E67A0;
      _OWORD v17[2] = 0xD000000000000020;
      v17[3] = 0x80000001005E63C0;
      v17[4] = 135;
      swift_willThrow();
      goto LABEL_4;
    }
    uint64_t result = swift_release();
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 36) = 64;
  }
  return result;
}

void sub_1002EF51C(uint64_t (*a1)(uint64_t)@<X7>, uint64_t a2@<X8>, uint64_t a3)
{
  swift_retain();
  uint64_t v5 = sub_1002F23B4();
  uint64_t v12 = sub_100323E64(v5, v6, v7, v8, v9, v10, v11);
  if (!v3)
  {
    uint64_t v17 = v12;
    swift_retain_n();
    uint64_t v13 = sub_1002F23B4();
    uint64_t v14 = a1(v13);
    char v16 = v15;
    swift_release();
    *(void *)a2 = a3;
    *(void *)(a2 + 8) = v17;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v16 & 1;
    *(_DWORD *)(a2 + 32) = 0;
    *(unsigned char *)(a2 + 36) = 96;
  }
  sub_1002F2368();
}

uint64_t sub_1002EF5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  uint64_t result = sub_100323E64(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    *(void *)a8 = result;
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)(a8 + 24) = 0;
    *(_DWORD *)(a8 + 32) = 0;
    *(unsigned char *)(a8 + 36) = 0x80;
  }
  return result;
}

void sub_1002EF68C(uint64_t a1@<X8>)
{
  sub_10031E1C0();
  if (v1) {
    swift_errorRelease();
  }
  *(void *)a1 = v1 == 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -96;
}

double sub_1002EF708@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
  return result;
}

void *sub_1002EF720@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EF708, a3);
}

void *sub_1002EF74C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFA3C, a3);
}

void *sub_1002EF778@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFA58, a3);
}

void *sub_1002EF7A4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFA74, a3);
}

void *sub_1002EF7D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFA90, a3);
}

void *sub_1002EF7FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFAAC, a3);
}

void *sub_1002EF828@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFAC8, a3);
}

void *sub_1002EF854@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFAE4, a3);
}

void *sub_1002EF880@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFB00, a3);
}

void *sub_1002EF8AC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFB1C, a3);
}

void *sub_1002EF8D8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFB38, a3);
}

void *sub_1002EF904@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFB54, a3);
}

void *sub_1002EF930@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EFB70, a3);
}

void *sub_1002EF95C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF988(a1, a2, (void *(*)(void *__return_ptr, uint64_t, void, void))sub_1002EF68C, a3);
}

void *sub_1002EF988@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, void, void)@<X2>, uint64_t a4@<X8>)
{
  double result = a3(v7, a1, *a2, a2[1]);
  if (!v4) {
    return (void *)sub_1001F3740((uint64_t)v7, a4);
  }
  return result;
}

void *sub_1002EF9E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, void, void)@<X2>, uint64_t a4@<X8>)
{
  double result = a3(v7, a1, *a2, a2[1]);
  if (!v4) {
    return (void *)sub_1001F3740((uint64_t)v7, a4);
  }
  return result;
}

void sub_1002EFA3C(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFA58(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFA74(uint64_t a1@<X8>)
{
  *(void *)a1 = 7;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFA90(uint64_t a1@<X8>)
{
  *(void *)a1 = 8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFAAC(uint64_t a1@<X8>)
{
  *(void *)a1 = 9;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFAC8(uint64_t a1@<X8>)
{
  *(void *)a1 = 10;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFAE4(uint64_t a1@<X8>)
{
  *(void *)a1 = 11;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFB00(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFB1C(uint64_t a1@<X8>)
{
  *(void *)a1 = 4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFB38(uint64_t a1@<X8>)
{
  *(void *)a1 = 6;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFB54(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = -64;
}

void sub_1002EFB70(void *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(void *)((char *)a1 + 29) = 0;
}

void sub_1002EFB84()
{
  sub_1002F244C();
  sub_1002F2394();
  uint64_t v2 = v1;
  swift_retain();
  sub_1002DC944();
  sub_10032AC5C();
  if (!v0)
  {
    if (v3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = _swiftEmptyArrayStorage;
    }
    if (v3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v13 = v7;
    if (v3) {
      char v8 = v5;
    }
    else {
      char v8 = 2;
    }
    unsigned __int8 v11 = v8;
    uint64_t v12 = v6;
    swift_retain();
    sub_1002DC944();
    sub_10032AD1C();
    *(void *)uint64_t v2 = v12;
    *(void *)(v2 + 8) = v13;
    *(void *)(v2 + 16) = v11;
    *(void *)(v2 + 24) = v10;
    *(unsigned char *)(v2 + 32) = v9 & 1 | 0x40;
  }
  sub_1002F2368();
}

uint64_t sub_1002EFC4C()
{
  sub_1002F2394();
  uint64_t v20 = v1;
  sub_10000566C(&qword_1007122D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F6680;
  uint64_t v3 = (void *)sub_1002E1F90();
  sub_1002F23D4(v3);
  uint64_t v4 = sub_1002E8414();
  *(void *)(v4 + 16) = sub_1002F1890;
  *(void *)(v4 + 24) = v0;
  sub_1002F23E4();
  *(void *)(inited + 32) = v5;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 48) = sub_1002F1898;
  *(void *)(inited + 56) = v7;
  char v8 = (void *)sub_1002E1F90();
  sub_1002F23D4(v8);
  uint64_t v9 = sub_1002E8414();
  *(void *)(v9 + 16) = sub_1002F18B4;
  *(void *)(v9 + 24) = v0;
  sub_1002F2344();
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 80) = sub_1002F220C;
  *(void *)(inited + 88) = v12;
  uint64_t v13 = (void *)sub_1002E1F90();
  sub_1002F23D4(v13);
  uint64_t v14 = sub_1002E8414();
  *(void *)(v14 + 16) = sub_1002F18BC;
  *(void *)(v14 + 24) = v0;
  *(void *)(inited + 96) = 1497648962;
  *(void *)(inited + 104) = 0xE400000000000000;
  *(void *)(inited + 112) = sub_1002F220C;
  *(void *)(inited + 120) = v14;
  char v15 = (void *)sub_1002E1F90();
  sub_1002F23D4(v15);
  uint64_t v16 = sub_1002E8414();
  *(void *)(v16 + 16) = sub_1002F18D8;
  *(void *)(v16 + 24) = v0;
  sub_1002F2384();
  *(void *)(inited + 128) = v17;
  *(void *)(inited + 136) = 0xE600000000000000;
  *(void *)(inited + 144) = sub_1002F220C;
  *(void *)(inited + 152) = v18;
  swift_retain_n();
  sub_10000566C(&qword_1007122E0);
  sub_1005E1980();
  sub_1002FA550();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v22) {
    return sub_100289018((uint64_t)v21, v20);
  }
  return result;
}

void *sub_1002EFE80@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, void, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = a3(v7, a1, *a2, a2[1]);
  if (!v4) {
    return (void *)sub_100289018((uint64_t)v7, a4);
  }
  return result;
}

void sub_1002EFEDC(uint64_t a1@<X8>)
{
  sub_1002EFB84();
  if (!v1) {
    sub_100289018((uint64_t)v3, a1);
  }
}

void sub_1002EFF24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  uint64_t v17 = sub_100323E64(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v20 = v17;
    swift_retain();
    sub_10032AD1C();
    *(void *)a8 = v20;
    *(void *)(a8 + 8) = v19;
    *(void *)(a8 + 16) = v18 & 1;
    *(void *)(a8 + 24) = 0;
    *(unsigned char *)(a8 + 32) = 0;
  }
}

void sub_1002F000C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1002F2480();
  a19 = v29;
  a20 = v30;
  sub_1002F2320();
  sub_10031E2BC(v31, v32, v33);
  if (!v21)
  {
    sub_1002E8538();
    unsigned int v45 = v20;
    sub_10000566C(&qword_100710700);
    type metadata accessor for FetchModifier();
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1005F6670;
    uint64_t v35 = sub_1002F22FC();
    uint64_t v42 = sub_1002F01C0(v35, v36, v37, v38, v39, v40, v41);
    v44[1] = v44;
    a10 = v34;
    __chkstk_darwin(v42);
    v43[2] = v28;
    v43[3] = v27;
    void v43[4] = v26;
    v43[5] = v25;
    sub_10031EA5C(v24, v23, v22, (uint64_t)sub_1002F1908, (uint64_t)v43, (uint64_t)&a10);
    sub_1002E8538();
    *unsigned int v45 = a10;
  }
  sub_1002F2468();
}

uint64_t sub_1002F01C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = a6;
  uint64_t v12 = a7;
  return sub_100308E74((uint64_t)sub_1002F1924, (uint64_t)v18, (uint64_t)sub_1002F1940, (uint64_t)v13, (uint64_t)sub_1002F195C, (uint64_t)v8, a1);
}

void sub_1002F0270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v7) {
    sub_1002F01C0(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t sub_1002F02F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  swift_retain();
  uint64_t result = sub_100324048(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    *a8 = result;
    type metadata accessor for FetchModifier();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

void sub_1002F0394(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_10031E2BC(a1, a2, a3);
    *(void *)a8 = sub_1002F9EAC(a1, a2, a3, a4, a5, a6, a7);
    *(unsigned char *)(a8 + 8) = v17 & 1;
    type metadata accessor for FetchModifier();
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_1002F0494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  unsigned __int8 v43 = (void *)a8;
  uint64_t v17 = sub_10000566C(&qword_10070FE28);
  uint64_t result = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v21 = __OFADD__(a2, 1);
  uint64_t v22 = a2 + 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    if (v22 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v30 = a3;
    }
    else
    {
      uint64_t v23 = a7;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void *)(a1 + 8);
      int v26 = *(_DWORD *)(a1 + 16);
      LODWORD(v42) = *(unsigned __int16 *)(a1 + 20);
      HIDWORD(v42) = v26;
      HIDWORD(v41) = *(unsigned __int8 *)(a1 + 22);
      swift_retain();
      sub_10030B600(a1, v22, a3, a4, a5, a6, v23, v27, v34, v35, v36, v37, a4, a6, v23, v41, v42, (uint64_t)v43, v44,
        v45);
      if (!v9)
      {
        uint64_t v35 = v28;
        uint64_t v36 = v29;
        uint64_t v37 = v24;
        swift_retain();
        sub_10032B6F0(a1, v22, a3, v38, a5, v39, v40);
        uint64_t v31 = sub_10000566C(&qword_10070FE48);
        uint64_t v32 = v43;
        sub_1002ECC20((uint64_t)v20, (uint64_t)v43 + *(int *)(v31 + 52));
        swift_release();
        uint64_t v33 = v36;
        *uint64_t v32 = v35;
        v32[1] = v33;
        type metadata accessor for FetchModifier();
        return swift_storeEnumTagMultiPayload();
      }
      swift_release();
      *(void *)a1 = v24;
      *(void *)(a1 + 8) = v25;
      *(_DWORD *)(a1 + 16) = HIDWORD(v42);
      *(_WORD *)(a1 + 20) = v42;
      *(unsigned char *)(a1 + 22) = BYTE4(v41);
    }
    return swift_willThrow();
  }
  return result;
}

void sub_1002F06B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1002F2480();
  sub_1002F22D4();
  sub_10000566C(&qword_1007122D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F6690;
  uint64_t v12 = (void *)sub_1002E1F90();
  sub_1002F22C4(v12);
  uint64_t v13 = sub_1002E8414();
  *(void *)(v13 + 16) = sub_1002F0840;
  *(void *)(v13 + 24) = v10;
  *(void *)(inited + 32) = sub_1002F109C;
  *(void *)(inited + 40) = v13;
  uint64_t v14 = (void *)sub_1002E1F90();
  sub_1002F22C4(v14);
  uint64_t v15 = sub_1002E8414();
  *(void *)(v15 + 16) = sub_1002F10B8;
  *(void *)(v15 + 24) = v10;
  *(void *)(inited + 48) = sub_1002F21F4;
  *(void *)(inited + 56) = v15;
  swift_retain_n();
  uint64_t v16 = sub_1002F2418();
  sub_10033DD98(v16);
  swift_setDeallocating();
  sub_10034A020();
  if (!a10)
  {
    sub_100288FF8(__src, __dst);
    sub_100288FF8(__dst, v17);
  }
  sub_1002F2468();
}

uint64_t sub_1002F0808()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

void *sub_1002F0840()
{
  sub_1002E1C9C();
  return sub_1002F08A4(v0, v1, v2, v3, v4, v5, v6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002FA98C, v7, 0x2820484354454620, 0xE800000000000000, (void (*)(_DWORD *))sub_10029C1C4);
}

void *sub_1002F08A4@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(_DWORD *))
{
  uint64_t v13 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (v13 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v24 = a3;
      swift_retain();
    }
    else
    {
      uint64_t v20 = result;
      uint64_t v21 = *result;
      uint64_t v22 = result[1];
      __int16 v27 = *((_WORD *)result + 10);
      int v28 = *((_DWORD *)result + 4);
      char v26 = *((unsigned char *)result + 22);
      swift_retain();
      swift_retain();
      sub_1002F2434();
      sub_10031E1C0();
      if (!v12)
      {
        int v23 = a8(v20, v13, a3, a4, a5, a6, a7);
        sub_1002F2434();
        sub_10031E1C0();
        swift_release();
        swift_release();
        __src[0] = v23;
        a12(__src);
        return sub_100288FF8(__src, a9);
      }
      swift_release();
      *uint64_t v20 = v21;
      v20[1] = v22;
      *((_DWORD *)v20 + 4) = v28;
      *((_WORD *)v20 + 10) = v27;
      *((unsigned char *)v20 + 22) = v26;
    }
    swift_willThrow();
    return (void *)swift_release();
  }
  return result;
}

void sub_1002F0A5C(uint64_t a1)
{
  sub_100288FF8(v1, __dst);
  sub_100288FF8(__dst, __src);
  sub_100288FF8(v1, v19);
  switch(sub_10029C0D8((uint64_t)v19))
  {
    case 1u:
      Swift::UInt32 v8 = *(_DWORD *)sub_10029C1C4((uint64_t)v19);
      Swift::UInt v9 = 1;
      goto LABEL_4;
    case 2u:
      uint64_t v10 = (void *)sub_10029C1C4((uint64_t)v19);
      sub_100288FF8(v10, v20);
      sub_1005E3410(2uLL);
      sub_100288FF8(__src, v17);
      uint64_t v11 = sub_10029C1C4((uint64_t)v17);
      sub_1002F2110(v11);
      MessageAttribute.hash(into:)(a1);
      sub_1002F217C((uint64_t)v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0, (uint64_t (*)(void))sub_100212DE0);
      return;
    case 3u:
      sub_10029C1C4((uint64_t)v19);
      sub_1002F2498();
      Swift::UInt v12 = 3;
      goto LABEL_8;
    case 4u:
      sub_10029C1C4((uint64_t)v19);
      sub_1002F2498();
      Swift::UInt v12 = 4;
LABEL_8:
      sub_1005E3410(v12);
      if (!(v6 >> 6))
      {
        sub_1005E3410(0);
        sub_100226C94(a1, v5);
        if ((v4 & 1) == 0)
        {
          sub_1005E3420(1u);
          Swift::UInt v13 = v2;
          goto LABEL_28;
        }
LABEL_15:
        sub_1005E3420(0);
        goto LABEL_29;
      }
      if (v6 >> 6 != 1)
      {
        if (v4 | v2 | v5 | v3 || v6 != 128)
        {
          if (v6 == 128 && v5 == 1 && (v4 | v2 | v3) == 0) {
            Swift::UInt v13 = 3;
          }
          else {
            Swift::UInt v13 = 4;
          }
        }
        else
        {
          Swift::UInt v13 = 2;
        }
        goto LABEL_28;
      }
      sub_1005E3410(1uLL);
      sub_100226C94(a1, v5);
      sub_10013B5CC(v2, v4);
      SectionSpecifier.Kind.hash(into:)(a1, v2, v4);
      sub_10013B5E0(v2, v4);
      if (v6) {
        goto LABEL_15;
      }
      sub_1005E3420(1u);
      Swift::UInt v13 = v3;
LABEL_28:
      sub_1005E3410(v13);
LABEL_29:
      Swift::UInt v14 = (Swift::UInt)v1;
LABEL_30:
      sub_1005E3410(v14);
      return;
    case 5u:
      Swift::UInt v14 = 5;
      goto LABEL_30;
    default:
      Swift::UInt32 v8 = *(_DWORD *)sub_10029C1C4((uint64_t)v19);
      Swift::UInt v9 = 0;
LABEL_4:
      sub_1005E3410(v9);
      sub_1005E3440(v8);
      return;
  }
}

uint64_t sub_1002F0CEC(void *a1, void *a2)
{
  sub_100288FF8(a1, __dst);
  switch(sub_10029C0D8((uint64_t)__dst))
  {
    case 1u:
      int v4 = *(_DWORD *)sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(a2, v26);
      if (sub_10029C0D8((uint64_t)v26) != 1) {
        goto LABEL_16;
      }
      goto LABEL_5;
    case 2u:
      unsigned int v6 = (void *)sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(v6, v26);
      sub_100288FF8(a2, v21);
      if (sub_10029C0D8((uint64_t)v21) != 2) {
        goto LABEL_16;
      }
      uint64_t v7 = (void *)sub_10029C1C4((uint64_t)v21);
      sub_100288FF8(v7, __src);
      sub_1002F217C((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002890C4, (uint64_t (*)(void))sub_1002892B4);
      sub_1002F217C((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002890C4, (uint64_t (*)(void))sub_1002892B4);
      char v5 = static MessageAttribute.__derived_enum_equals(_:_:)(v26, __src);
      sub_1002F217C((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0, (uint64_t (*)(void))sub_100212DE0);
      sub_1002F217C((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0, (uint64_t (*)(void))sub_100212DE0);
      return v5 & 1;
    case 3u:
      uint64_t v8 = sub_10029C1C4((uint64_t)__dst);
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t v11 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      char v13 = *(unsigned char *)(v8 + 32);
      uint64_t v14 = *(void *)(v8 + 40);
      sub_100288FF8(a2, v26);
      if (sub_10029C0D8((uint64_t)v26) != 3) {
        goto LABEL_16;
      }
      goto LABEL_11;
    case 4u:
      uint64_t v15 = sub_10029C1C4((uint64_t)__dst);
      uint64_t v9 = *(void *)v15;
      uint64_t v10 = *(void *)(v15 + 8);
      uint64_t v11 = *(void *)(v15 + 16);
      uint64_t v12 = *(void *)(v15 + 24);
      char v13 = *(unsigned char *)(v15 + 32);
      uint64_t v14 = *(void *)(v15 + 40);
      sub_100288FF8(a2, v26);
      if (sub_10029C0D8((uint64_t)v26) != 4) {
        goto LABEL_16;
      }
LABEL_11:
      uint64_t v16 = sub_10029C1C4((uint64_t)v26);
      char v17 = *(unsigned char *)(v16 + 32);
      uint64_t v18 = *(void *)(v16 + 40);
      v21[0] = v9;
      v21[1] = v10;
      v21[2] = v11;
      void v21[3] = v12;
      char v22 = v13;
      __n128 v19 = *(__n128 *)(v16 + 16);
      __src[0] = *(__n128 *)v16;
      __src[1] = v19;
      char v24 = v17;
      char v5 = (static StreamingKind.__derived_enum_equals(_:_:)((uint64_t)v21, (uint64_t)__src) & 1) != 0 && v14 == v18;
      break;
    case 5u:
      sub_100288FF8(a2, v26);
      if (sub_10029C0D8((uint64_t)v26) != 5) {
        goto LABEL_16;
      }
      char v5 = 1;
      break;
    default:
      int v4 = *(_DWORD *)sub_10029C1C4((uint64_t)__dst);
      sub_100288FF8(a2, v26);
      if (sub_10029C0D8((uint64_t)v26)) {
LABEL_16:
      }
        char v5 = 0;
      else {
LABEL_5:
      }
        char v5 = *(_DWORD *)sub_10029C1C4((uint64_t)v26) == v4;
      break;
  }
  return v5 & 1;
}

Swift::Int sub_1002F0FB0()
{
  sub_1005E33F0();
  sub_1002F0A5C((uint64_t)v1);
  return sub_1005E3470();
}

void sub_1002F0FF0(void *a1@<X8>)
{
  sub_1002F1730(__src);
  if (!v1) {
    sub_100288FF8(__src, a1);
  }
}

void *sub_1002F1040@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, void, void)@<X2>, void *a4@<X8>)
{
  uint64_t result = a3(__src, a1, *a2, a2[1]);
  if (!v4) {
    return sub_100288FF8(__src, a4);
  }
  return result;
}

void *sub_1002F109C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1002F1040(a1, a2, *(void *(**)(void *__return_ptr, uint64_t, void, void))(v3 + 16), a3);
}

void *sub_1002F10B8()
{
  sub_1002E1C9C();
  return sub_1002F08A4(v0, v1, v2, v3, v4, v5, v6, sub_1002FAA58, v7, 0x4354454644495520, 0xEB00000000282048, (void (*)(_DWORD *))sub_1002F17D0);
}

Swift::Int sub_1002F1124()
{
  sub_100288FF8(v0, __dst);
  return sub_1002F0FB0();
}

void sub_1002F115C(uint64_t a1)
{
  sub_100288FF8(v1, __dst);
  sub_1002F0A5C(a1);
}

Swift::Int sub_1002F119C()
{
  sub_100288FF8(v0, __dst);
  sub_1005E33F0();
  sub_1002F0A5C((uint64_t)&v2);
  return sub_1005E3470();
}

uint64_t sub_1002F11F8(void *a1, void *a2)
{
  sub_100288FF8(a1, v4);
  sub_100288FF8(a2, __dst);
  return sub_1002F0CEC(v4, __dst) & 1;
}

void sub_1002F1244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1002F2480();
  sub_1002F22D4();
  sub_10000566C(&qword_1007122D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F6680;
  uint64_t v12 = (void *)sub_1002E1F90();
  sub_1002F22C4(v12);
  uint64_t v13 = sub_1002E8414();
  *(void *)(v13 + 16) = sub_1002F17E4;
  *(void *)(v13 + 24) = v10;
  *(void *)(inited + 32) = sub_1002F21F4;
  *(void *)(inited + 40) = v13;
  uint64_t v14 = (void *)sub_1002E1F90();
  sub_1002F22C4(v14);
  uint64_t v15 = sub_1002E8414();
  *(void *)(v15 + 16) = sub_1002F1800;
  *(void *)(v15 + 24) = v10;
  *(void *)(inited + 48) = sub_1002F21F4;
  *(void *)(inited + 56) = v15;
  uint64_t v16 = (void *)sub_1002E1F90();
  sub_1002F22C4(v16);
  uint64_t v17 = sub_1002E8414();
  *(void *)(v17 + 16) = sub_1002F181C;
  *(void *)(v17 + 24) = v10;
  *(void *)(inited + 64) = sub_1002F21F4;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 80) = sub_1002F0FF0;
  *(void *)(inited + 88) = 0;
  swift_retain_n();
  uint64_t v18 = sub_1002F2418();
  sub_10033DD98(v18);
  swift_setDeallocating();
  sub_10034A020();
  if (!a10)
  {
    sub_100288FF8(__src, __dst);
    sub_100288FF8(__dst, v19);
  }
  sub_1002F2468();
}

void sub_1002F13F4(void *a1@<X8>)
{
  sub_1002F72A4();
  if (!v1)
  {
    sub_100288FF8(__src, __dst);
    sub_100288FF8(__dst, v4);
    sub_1002F1868((uint64_t)v4);
    sub_100288FF8(v4, a1);
  }
}

void *sub_1002F1464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t result = (void *)sub_1002EFC4C();
  if (!v8)
  {
    uint64_t v26 = v21;
    sub_10031E2BC(a1, a2, a3);
    swift_retain();
    __src[0] = v21;
    __src[1] = v22;
    __n128 __src[2] = v23;
    __src[3] = v24;
    char v19 = v25;
    uint64_t v20 = sub_1003231B4(a1, a2, a3, a4, a5, a6, a7, a7);
    sub_1002F18F4((uint64_t)__src);
    return sub_100288FF8(__src, a8);
  }
  return result;
}

void *sub_1002F1598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (void *)sub_1002EFC4C();
  if (!v4)
  {
    __dst = a4;
    uint64_t v23 = v27;
    uint64_t v20 = v29;
    uint64_t v21 = v28;
    uint64_t v19 = v30;
    sub_10031E2BC(a1, a2, a3);
    char v18 = v31;
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    __int16 v16 = *(_WORD *)(a1 + 20);
    int v17 = *(_DWORD *)(a1 + 16);
    char v15 = *(unsigned char *)(a1 + 22);
    swift_retain();
    sub_10030AF4C();
    int v13 = v12;
    unint64_t v14 = HIDWORD(v12);
    swift_release();
    swift_release();
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = v17;
    *(_WORD *)(a1 + 20) = v16;
    *(unsigned char *)(a1 + 22) = v15;
    __src[0] = v23;
    __src[1] = v21;
    __n128 __src[2] = v20;
    __src[3] = v19;
    char v25 = v18;
    uint64_t v26 = (v14 - v13);
    sub_1002F187C((uint64_t)__src);
    return sub_100288FF8(__src, __dst);
  }
  return result;
}

void sub_1002F1730(void *a1@<X8>)
{
  sub_10031E1C0();
  if (!v1)
  {
    sub_10032964C();
    sub_1002F1838(__src);
    sub_100288FF8(__src, a1);
  }
}

uint64_t sub_1002F17D0(uint64_t result)
{
  *(_WORD *)(result + 176) = *(_WORD *)(result + 176) & 0xF1FF | 0x200;
  return result;
}

void *sub_1002F17E4()
{
  sub_1002E1C9C();
  return sub_1002F1464(v0, v1, v2, v3, v4, v5, v6, v7);
}

void *sub_1002F1800()
{
  sub_1002E1C9C();
  return sub_1002F1598(v0, v1, v2, v3);
}

void sub_1002F181C()
{
  sub_1002E1C9C();
  sub_1002F13F4(v0);
}

void sub_1002F1838(_WORD *a1)
{
  a1[88] = 2560;
}

uint64_t sub_1002F1868(uint64_t result)
{
  *(_WORD *)(result + 176) = *(_WORD *)(result + 176) & 0xF1FF | 0x400;
  return result;
}

uint64_t sub_1002F187C(uint64_t result)
{
  *(_WORD *)(result + 176) = *(_WORD *)(result + 176) & 0xF1FF | 0x800;
  return result;
}

void sub_1002F1890(uint64_t a1@<X8>)
{
}

void *sub_1002F1898@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EFE80(a1, a2, *(void *(**)(void *__return_ptr, uint64_t, void, void))(v3 + 16), a3);
}

void sub_1002F18B4(uint64_t a1@<X8>)
{
}

void sub_1002F18BC()
{
  sub_1002E1C9C();
  sub_1002EFEDC(v0);
}

void sub_1002F18D8()
{
  sub_1002E1C9C();
  sub_1002EFF24(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002F18F4(uint64_t result)
{
  *(_WORD *)(result + 176) = *(_WORD *)(result + 176) & 0xF1FF | 0x600;
  return result;
}

void sub_1002F1908()
{
  sub_1002E1C9C();
  sub_1002F0270(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002F1924()
{
  sub_1002E1C9C();
  return sub_1002F02F0(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F1940()
{
  sub_1002E1C9C();
  sub_1002F0394(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002F195C()
{
  sub_1002E1C9C();
  return sub_1002F0494(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002F1978()
{
  return sub_1002EE7FC();
}

uint64_t sub_1002F1994@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1002F19C8(a1, a2, a3);
}

void sub_1002F19AC()
{
  sub_1002E1C9C();
  sub_1002EEED8(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_1002F19C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(a1, *a2, a2[1]);
  if (!v4) {
    *a3 = result;
  }
  return result;
}

void sub_1002F1A04()
{
  sub_1002E1C9C();
  sub_1002EF090(v0);
}

void sub_1002F1A20()
{
}

void *sub_1002F1A3C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002EF9E0(a1, a2, *(void *(**)(void *__return_ptr, uint64_t, void, void))(v3 + 16), a3);
}

void sub_1002F1A58()
{
}

uint64_t sub_1002F1A74()
{
  sub_1002E1C9C();
  return sub_1002EF5F8(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F1A90()
{
  sub_1002E1C9C();
  sub_1002EF51C((uint64_t (*)(uint64_t))sub_10032AB64, v0, 0);
}

void sub_1002F1ACC()
{
  sub_1002E1C9C();
  sub_1002EF51C((uint64_t (*)(uint64_t))sub_10032AB64, v0, 1);
}

uint64_t sub_1002F1B0C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s14_FetchResponseOwxx(uint64_t a1)
{
  return sub_1002F1BC8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160),
           *(void *)(a1 + 168),
           *(_WORD *)(a1 + 176),
           (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0,
           (uint64_t (*)(void))sub_100212DE0);
}

uint64_t sub_1002F1BC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23,uint64_t (*a24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t (*a25)(void))
{
  int v26 = (a23 >> 9) & 7;
  if (v26 == 4 || v26 == 3)
  {
    return a25();
  }
  else if (v26 == 2)
  {
    return a24(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t _s14_FetchResponseOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  unsigned __int16 v26 = *(_WORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  sub_1002F1BC8(*(void *)a2, v7, v8, v9, v10, v11, v3, v4, v5, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002890C4,
    (uint64_t (*)(void))sub_1002892B4);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = v26;
  return a1;
}

uint64_t _s14_FetchResponseOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v30 = *(void *)(a2 + 72);
  uint64_t v31 = *(void *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 104);
  uint64_t v35 = *(void *)(a2 + 112);
  uint64_t v36 = *(void *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 128);
  uint64_t v38 = *(void *)(a2 + 136);
  uint64_t v39 = *(void *)(a2 + 144);
  uint64_t v40 = *(void *)(a2 + 152);
  uint64_t v41 = *(void *)(a2 + 160);
  uint64_t v42 = *(void *)(a2 + 168);
  unsigned __int16 v43 = *(_WORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  sub_1002F1BC8(*(void *)a2, v7, v8, v9, v10, v11, v3, v4, v5, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002890C4,
    (uint64_t (*)(void))sub_1002892B4);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  uint64_t v26 = *(void *)(a1 + 160);
  uint64_t v27 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  unsigned __int16 v28 = *(_WORD *)(a1 + 176);
  *(_WORD *)(a1 + 176) = v43;
  sub_1002F1BC8(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    v27,
    v28,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0,
    (uint64_t (*)(void))sub_100212DE0);
  return a1;
}

uint64_t _s14_FetchResponseOwta(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 176);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  uint64_t v18 = *(void *)(a1 + 160);
  uint64_t v19 = *(void *)(a1 + 168);
  unsigned __int16 v20 = *(_WORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  long long v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  long long v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = v3;
  sub_1002F1BC8(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    v19,
    v20,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100212EB0,
    (uint64_t (*)(void))sub_100212DE0);
  return a1;
}

ValueMetadata *_s14_FetchResponseOMa()
{
  return &_s14_FetchResponseON;
}

unint64_t sub_1002F20C4()
{
  unint64_t result = qword_100712300;
  if (!qword_100712300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100712300);
  }
  return result;
}

uint64_t sub_1002F2110(uint64_t a1)
{
  sub_1002890C4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176));
  return a1;
}

uint64_t sub_1002F217C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(void))
{
  sub_1002F1BC8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176),
    a2,
    a3);
  return a1;
}

void *sub_1002F21F4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1002F109C(a1, a2, a3);
}

void *sub_1002F220C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002F1898(a1, a2, a3);
}

void *sub_1002F2224@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002F1A3C(a1, a2, a3);
}

void *sub_1002F22B4(void *result)
{
  result[2] = v4;
  result[3] = v3;
  result[4] = v2;
  result[5] = v1;
  return result;
}

void *sub_1002F22C4(void *result)
{
  result[2] = v1;
  result[3] = v2;
  result[4] = v4;
  result[5] = v3;
  return result;
}

void sub_1002F22D4()
{
  *(void *)(v1 - 72) = v0;
}

uint64_t sub_1002F22FC()
{
  return v0;
}

uint64_t sub_1002F23B4()
{
  return v0;
}

void *sub_1002F23D4(void *result)
{
  result[2] = v4;
  result[3] = v3;
  result[4] = v2;
  result[5] = v1;
  return result;
}

void sub_1002F2404(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0x80;
}

uint64_t sub_1002F2418()
{
  return v0;
}

uint64_t sub_1002F24AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  uint64_t v11 = sub_1002F2F90;
  long long v12 = &v13;
  uint64_t result = sub_10033C780((uint64_t)sub_1002F30E4, (uint64_t)v10, (uint64_t)sub_1002F309C, 0);
  if (v7) {
    return v9 & 0xFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1002F2568@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  _OWORD v24[2] = sub_1002F322C;
  v24[3] = &v25;
  if (!__OFADD__(a2, 1))
  {
    uint64_t v12 = result;
    if (a2 + 1 >= a3)
    {
      sub_1002DB5BC();
      uint64_t v18 = swift_allocError();
      *uint64_t v19 = a3;
    }
    else
    {
      uint64_t v13 = *(void *)result;
      uint64_t v14 = *(void *)(result + 8);
      int v15 = *(_DWORD *)(result + 16);
      __int16 v16 = *(_WORD *)(result + 20);
      char v17 = *(unsigned char *)(result + 22);
      swift_retain();
      sub_10031E1C0();
      uint64_t v18 = v8;
      if (!v8)
      {
        uint64_t result = swift_release();
        long long v22 = xmmword_1005F69E0;
        long long v20 = 0uLL;
        long long v21 = 0uLL;
        long long v23 = 0uLL;
LABEL_13:
        *a8 = v20;
        a8[1] = v21;
        a8[2] = v22;
        a8[3] = v23;
        return result;
      }
      swift_release();
      *(void *)uint64_t v12 = v13;
      *(void *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 16) = v15;
      *(_WORD *)(v12 + 20) = v16;
      *(unsigned char *)(v12 + 22) = v17;
    }
    swift_willThrow();
    uint64_t v30 = v18;
    swift_errorRetain();
    sub_10000566C(qword_100710378);
    if (sub_1002F3260())
    {
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      uint64_t v30 = v18;
      swift_errorRetain();
      if ((sub_1002F3260() & 1) == 0) {
        return swift_errorRelease();
      }
      swift_errorRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t result = sub_10031E46C(v12, a2, a3, sub_1002F3210, v24);
    long long v20 = v31;
    long long v21 = v32;
    long long v22 = v33;
    long long v23 = v34;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

_OWORD *sub_1002F27A4@<X0>(void *(*a1)(long long *__return_ptr)@<X3>, _OWORD *a2@<X8>)
{
  uint64_t result = a1(v5);
  if (!v2) {
    return sub_10027B4F8(v5, a2);
  }
  return result;
}

double sub_1002F27F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  sub_10000566C(&qword_100712308);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F66A0;
  *(void *)(inited + 32) = sub_1002F2AC8;
  *(void *)(inited + 40) = 0;
  *(void *)(inited + 48) = sub_1002F2AFC;
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 64) = sub_1002F2B84;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 80) = sub_1002F2BC0;
  *(void *)(inited + 88) = 0;
  __int16 v16 = (void *)swift_allocObject();
  void v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1002F319C;
  *(void *)(v17 + 24) = v16;
  *(void *)(inited + 96) = sub_1002F31F4;
  *(void *)(inited + 104) = v17;
  swift_retain();
  uint64_t v18 = v25;
  sub_10033DF60(v24, inited, a1, a2, a3, 0xD000000000000020, 0x80000001005E63C0, 100);
  swift_setDeallocating();
  sub_10034A020();
  if (!v18)
  {
    double result = *(double *)v24;
    long long v20 = v24[1];
    long long v21 = v24[2];
    long long v22 = v24[3];
    *a8 = v24[0];
    a8[1] = v20;
    a8[2] = v21;
    a8[3] = v22;
  }
  return result;
}

double sub_1002F29A8@<D0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  sub_10031E1C0();
  if (!v2)
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 32) = a1;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
  }
  return result;
}

double sub_1002F2A04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return sub_1002F2A1C(a1, a2, a3, a4, a5, a6, a7, a8);
}

double sub_1002F2A1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  swift_retain();
  sub_100324144(v22, a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v18 = v23;
    uint64_t v19 = v25;
    double result = *(double *)v22;
    long long v20 = v22[1];
    long long v21 = v24;
    *(_OWORD *)a8 = v22[0];
    *(_OWORD *)(a8 + 16) = v20;
    *(void *)(a8 + 32) = v18;
    *(_OWORD *)(a8 + 40) = v21;
    *(void *)(a8 + 56) = v19;
  }
  return result;
}

void sub_1002F2AC8(_OWORD *a1@<X8>)
{
}

void sub_1002F2AFC(_OWORD *a1@<X8>)
{
}

void sub_1002F2B28(uint64_t a1@<X4>, _OWORD *a2@<X8>)
{
  sub_1002F29A8(a1, (uint64_t)v4);
  if (!v2) {
    sub_10027B4F8(v4, a2);
  }
}

void sub_1002F2B84(_OWORD *a1@<X8>)
{
}

void sub_1002F2BC0(_OWORD *a1@<X8>)
{
}

_OWORD *sub_1002F2BF8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(long long *__return_ptr, uint64_t, void, void)@<X2>, _OWORD *a4@<X8>)
{
  double result = a3(v7, a1, *a2, a2[1]);
  if (!v4) {
    return sub_10027B4F8(v7, a4);
  }
  return result;
}

void sub_1002F2C54()
{
  sub_1002F3280();
  sub_1002F3244();
  sub_10031E1C0();
  if (!v1)
  {
    swift_retain();
    sub_1002F22FC();
    uint64_t v33 = sub_10032D1CC();
    uint64_t v2 = sub_1002F22FC();
    uint64_t v10 = sub_1002F2568(v2, v3, v4, v5, v6, v7, v8, v9);
    uint64_t v24 = v26;
    uint64_t v22 = v28;
    uint64_t v23 = v27;
    uint64_t v20 = v30;
    uint64_t v21 = v29;
    uint64_t v18 = v32;
    uint64_t v19 = v31;
    __chkstk_darwin(v10);
    uint64_t v11 = sub_1002F3294();
    sub_10031E588(v11, v12, v13, v14, v15, v16);
    sub_1002F3244();
    sub_10031E1C0();
    uint64_t v17 = v33;
    void *v0 = v25;
    v0[1] = v24;
    v0[2] = v23;
    v0[3] = v22;
    v0[4] = v21;
    v0[5] = v20;
    v0[6] = v19;
    v0[7] = v18;
    v0[8] = v17;
  }
}

void sub_1002F2E2C()
{
  sub_1002F3280();
  sub_1002F27F4(v2, v3, v4, v5, v6, v7, v8, v12);
  if (!v1)
  {
    uint64_t v9 = sub_1002F3294();
    sub_10031E2BC(v9, v10, v11);
    sub_10027B4F8(v12, v0);
  }
}

void sub_1002F2EB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  sub_10031E2BC(a1, a2, a3);
  if (!v8)
  {
    sub_10030B030(a4, a5, a6, a7, v14);
    sub_10027B4F8(v14, a8);
  }
}

void sub_1002F2F64()
{
}

void sub_1002F2F90()
{
}

uint64_t sub_1002F2FB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v4 = __OFADD__(a2, 1);
  uint64_t v5 = a2 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if (v5 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v13 = a3;
      return swift_willThrow();
    }
    uint64_t v7 = result;
    uint64_t v8 = *(void *)result;
    uint64_t v9 = *(void *)(result + 8);
    int v10 = *(_DWORD *)(result + 16);
    __int16 v11 = *(_WORD *)(result + 20);
    char v12 = *(unsigned char *)(result + 22);
    sub_10032E6A8();
    if (v3)
    {
      *(void *)uint64_t v7 = v8;
      *(void *)(v7 + 8) = v9;
      *(_DWORD *)(v7 + 16) = v10;
      *(_WORD *)(v7 + 20) = v11;
      *(unsigned char *)(v7 + 22) = v12;
      return swift_willThrow();
    }
    return v14;
  }
  return result;
}

uint64_t sub_1002F309C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1002F2FB0(a1, a2, a3);
  if (!v4)
  {
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 16) = v8;
    *(_WORD *)(a4 + 20) = WORD2(v8);
    *(unsigned char *)(a4 + 22) = BYTE6(v8);
  }
  return result;
}

uint64_t sub_1002F30E4()
{
  return sub_10030B238();
}

void sub_1002F3100()
{
}

void *sub_1002F3120(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1002F3164()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

double sub_1002F319C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002F2A1C(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4);
}

uint64_t sub_1002F31BC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

_OWORD *sub_1002F31F4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1002F2BF8(a1, a2, *(void *(**)(long long *__return_ptr, uint64_t, void, void))(v3 + 16), a3);
}

_OWORD *sub_1002F3210@<X0>(_OWORD *a1@<X8>)
{
  return sub_1002F27A4(*(void *(**)(long long *__return_ptr))(v1 + 16), a1);
}

double sub_1002F322C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002F319C(a1, a2, a3, a4);
}

uint64_t sub_1002F3260()
{
  return swift_dynamicCast();
}

uint64_t sub_1002F3294()
{
  return v0;
}

uint64_t sub_1002F32A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v19 = sub_1002F6F20;
  uint64_t v20 = &v21;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  __int16 v11 = sub_1002F6F58;
  char v12 = &v13;
  uint64_t result = sub_10033C8F0((uint64_t)sub_1002F6F3C, (uint64_t)v18, (uint64_t)sub_1002F711C, (uint64_t)v10);
  if (v7) {
    return v9 & 0xFFFFFFFFFFFFFFLL | ((HIBYTE(v9) & 1) << 56);
  }
  return result;
}

void sub_1002F338C()
{
  sub_1002F2480();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v30 = v8;
  sub_10000566C(&qword_100712310);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005F69F0;
  int v10 = (void *)sub_1002E1F90();
  sub_1002F22C4(v10);
  uint64_t v11 = sub_1002E8414();
  *(void *)(v11 + 16) = sub_1002F3854;
  *(void *)(v11 + 24) = v0;
  *(void *)(inited + 32) = sub_1002F4324;
  *(void *)(inited + 40) = v11;
  char v12 = (void *)sub_1002E1F90();
  sub_1002F22C4(v12);
  uint64_t v13 = sub_1002E8414();
  *(void *)(v13 + 16) = sub_1002F4340;
  *(void *)(v13 + 24) = v0;
  *(void *)(inited + 48) = sub_1002F707C;
  *(void *)(inited + 56) = v13;
  uint64_t v14 = (void *)sub_1002E1F90();
  sub_1002F22C4(v14);
  uint64_t v15 = sub_1002E8414();
  *(void *)(v15 + 16) = sub_1002F4384;
  *(void *)(v15 + 24) = v0;
  *(void *)(inited + 64) = sub_1002F707C;
  *(void *)(inited + 72) = v15;
  uint64_t v16 = (void *)sub_1002E1F90();
  sub_1002F22C4(v16);
  uint64_t v17 = sub_1002E8414();
  *(void *)(v17 + 16) = sub_1002F43C8;
  *(void *)(v17 + 24) = v0;
  *(void *)(inited + 80) = sub_1002F707C;
  *(void *)(inited + 88) = v17;
  uint64_t v18 = (void *)sub_1002E1F90();
  sub_1002F22C4(v18);
  uint64_t v19 = sub_1002E8414();
  *(void *)(v19 + 16) = sub_1002F43E4;
  *(void *)(v19 + 24) = v0;
  *(void *)(inited + 96) = sub_1002F707C;
  *(void *)(inited + 104) = v19;
  uint64_t v20 = (void *)sub_1002E1F90();
  sub_1002F22C4(v20);
  uint64_t v21 = sub_1002E8414();
  *(void *)(v21 + 16) = sub_1002F4400;
  *(void *)(v21 + 24) = v0;
  *(void *)(inited + 112) = sub_1002F707C;
  *(void *)(inited + 120) = v21;
  uint64_t v22 = (void *)sub_1002E1F90();
  sub_1002F22C4(v22);
  uint64_t v23 = sub_1002E8414();
  *(void *)(v23 + 16) = sub_1002F4448;
  *(void *)(v23 + 24) = v0;
  *(void *)(inited + 128) = sub_1002F707C;
  *(void *)(inited + 136) = v23;
  uint64_t v24 = (void *)sub_1002E1F90();
  sub_1002F22C4(v24);
  uint64_t v25 = sub_1002E8414();
  *(void *)(v25 + 16) = sub_1002F4490;
  *(void *)(v25 + 24) = v0;
  *(void *)(inited + 144) = sub_1002F707C;
  *(void *)(inited + 152) = v25;
  uint64_t v26 = (void *)sub_1002E1F90();
  sub_1002F22C4(v26);
  uint64_t v27 = sub_1002E8414();
  *(void *)(v27 + 16) = sub_1002F44AC;
  *(void *)(v27 + 24) = v0;
  *(void *)(inited + 160) = sub_1002F707C;
  *(void *)(inited + 168) = v27;
  uint64_t v28 = (void *)sub_1002E1F90();
  sub_1002F22C4(v28);
  uint64_t v29 = sub_1002E8414();
  *(void *)(v29 + 16) = sub_1002F44C8;
  *(void *)(v29 + 24) = v0;
  *(void *)(inited + 176) = sub_1002F707C;
  *(void *)(inited + 184) = v29;
  swift_retain_n();
  sub_10033E2F0(v32, inited, v7, v5, v3, 0xD000000000000020, 0x80000001005E63C0, 108);
  swift_setDeallocating();
  sub_10034A020();
  if (!v1)
  {
    sub_10027F540(v32, __dst);
    sub_10027F540(__dst, v30);
  }
  sub_1002F2468();
}

void sub_1002F3738(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    swift_retain();
    v17[0].i64[0] = sub_100320050(a1, a2, a3, a4, a5, a6, a7);
    sub_1002F6ED8(v17);
    sub_10027F540(v17, a8);
  }
}

uint64_t sub_1002F381C()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002F3854()
{
  sub_1002E1C9C();
  sub_1002F3738(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F3870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(long long *))
{
  sub_1002F717C();
  sub_1002F7224();
  if (!v10)
  {
    swift_retain();
    uint64_t v11 = sub_1002F7158();
    sub_1003241E8(v11);
    long long v12 = v17;
    int v13 = v18;
    char v14 = v19;
    uint64_t v15 = v20;
    long long v16 = v21;
    a9(&v12);
    sub_10027F540(&v12, v9);
  }
}

void *sub_1002F3930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  swift_retain();
  uint64_t result = sub_10032428C(v22, a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    v18[0] = (int8x16_t)v22[0];
    v18[1] = (int8x16_t)v22[1];
    char v19 = v23;
    char v20 = v24;
    uint64_t v21 = v25;
    sub_1002F6D24(v18);
    return sub_10027F540(v18, a8);
  }
  return result;
}

void sub_1002F39F8()
{
  sub_1002F717C();
  sub_1002F7224();
  if (!v1)
  {
    swift_retain();
    sub_1002F7158();
    int8x16_t v2 = (int8x16_t)(unint64_t)sub_10032D1F8();
    char v3 = 1;
    sub_1002F6A00(&v2);
    sub_10027F540(&v2, v0);
  }
}

void sub_1002F3A98(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_10031E1C0();
  if (!v8)
  {
    sub_10031E2BC((uint64_t)a1, a2, a3);
    char v23 = a8;
    sub_10000566C(&qword_10070FEB0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1005F6670;
    int v18 = sub_10032D3F0(a1, a2, a3, 0);
    if (((unint64_t)v18 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      swift_allocError();
      *char v19 = 0xD000000000000011;
      v19[1] = 0x80000001005E65D0;
      v19[2] = 0xD000000000000020;
      v19[3] = 0x80000001005E63C0;
      void v19[4] = 167;
      swift_willThrow();
      *(void *)(v17 + 16) = 0;
      swift_release();
    }
    else
    {
      uint64_t v22 = (uint64_t)&v22;
      *(void *)(v17 + 32) = v18;
      uint64_t v25 = v17;
      __chkstk_darwin();
      v21[2] = a4;
      void v21[3] = a5;
      void v21[4] = a6;
      void v21[5] = a7;
      sub_10031EA88((uint64_t)a1, a2, a3, (uint64_t)sub_1002F6A4C, (uint64_t)v21, (uint64_t)&v25);
      sub_10031E2BC((uint64_t)a1, a2, a3);
      swift_retain();
      uint64_t v20 = sub_10032387C(a1, a2, a3, a4, a5, a6, a7);
      __src[0].i64[0] = v25;
      __src[0].i64[1] = v20;
      sub_1002F6A68(__src);
      sub_10027F540(__src, v23);
    }
  }
}

void sub_1002F3D14(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_10031E2BC((uint64_t)a1, a2, a3);
  if (!v4)
  {
    unint64_t v9 = sub_10032D3F0(a1, a2, a3, 0);
    if (((unint64_t)v9 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      swift_allocError();
      *uint64_t v10 = 0xD000000000000011;
      v10[1] = 0x80000001005E65D0;
      void v10[2] = 0xD000000000000020;
      v10[3] = 0x80000001005E63C0;
      _OWORD v10[4] = 167;
      swift_willThrow();
    }
    else
    {
      *a4 = v9;
    }
  }
}

void sub_1002F3DF0(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  sub_10031E1C0();
  if (!v5)
  {
    uint64_t v10 = sub_1002A0920();
    sub_100308D44(v10, v11, v12, a1, a2, a3, a4, v13, v47, v49, v53, v56, v58, v60, v62, v65, v68, v70, v72,
      v74,
      a5,
      v80,
      v82,
      v84,
      v86,
      v88);
    unsigned int v15 = v14;
    uint64_t v71 = a1;
    uint64_t v73 = a3;
    uint64_t v75 = a4;
    unint64_t v16 = HIDWORD(v14);
    uint64_t v18 = v17;
    unint64_t v20 = v19;
    swift_beginAccess();
    v21._uint64_t rawValue = (void *)sub_1001F9054(*(void *)(v18 + 24) + ((v20 >> 24) & 0xFFFF00 | BYTE6(v20)) + v15, v16 - v15);
    NIOIMAPCore2::MailboxName v107 = MailboxName.init(_:)(v21);
    uint64_t rawValue = v107.bytes._rawValue;
    Swift::UInt32 value = v107._hashValue._value;
    swift_release();
    uint64_t v24 = sub_1002A0920();
    sub_10031E2BC(v24, v25, v26);
    sub_1002F71C0();
    swift_retain_n();
    uint64_t v27 = sub_1002A0920();
    sub_10032B060(v27, v28, v29, v71, a2, v73, v75, v30, v48, v50, v51, v52, v54, v55, v57, v59, v61, v63, v64,
      v66,
      v67,
      v69,
      v71,
      v73,
      v75,
      __dstb,
      v81,
      v83,
      v85,
      v87);
    uint64_t v76 = (uint64_t)rawValue;
    swift_release();
    uint64_t v31 = v99;
    uint64_t v32 = v101;
    sub_1002F71C0();
    uint64_t v33 = v90;
    uint64_t v34 = v95;
    uint64_t v35 = __src.i64[0];
    uint64_t v36 = v97;
    if (v103)
    {
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      LODWORD(v37) = 0;
      LODWORD(v38) = 0;
      uint64_t v34 = 0;
      uint64_t v36 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      char v39 = 1;
      char v40 = 1;
      char v41 = 1;
      char v42 = 1;
      char v43 = 1;
      char v44 = 1;
      char v45 = 1;
      char v46 = 1;
    }
    else
    {
      unint64_t v37 = HIDWORD(v91);
      unint64_t v38 = HIDWORD(v92);
      char v39 = __src.i8[8] & 1;
      char v40 = v91 & 1;
      char v41 = v92 & 1;
      char v42 = v93 & 1;
      char v43 = v96 & 1;
      char v44 = v98 & 1;
      char v45 = v100 & 1;
      char v46 = v102 & 1;
    }
    char v106 = v39;
    __src.i64[0] = v76;
    __src.i32[2] = value;
    uint64_t v90 = v35;
    LOBYTE(v91) = v39;
    unint64_t v92 = v33;
    char v93 = v40;
    int v94 = v37;
    LOBYTE(v95) = v41;
    HIDWORD(v95) = v38;
    LOBYTE(v96) = v42;
    uint64_t v97 = v34;
    LOBYTE(v98) = v43;
    uint64_t v99 = v36;
    LOBYTE(v100) = v44;
    uint64_t v101 = v31;
    char v102 = v45;
    uint64_t v104 = v32;
    char v105 = v46;
    sub_1002F6B4C(&__src);
    sub_10027F540(&__src, __dsta);
  }
}

void sub_1002F410C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, void (*a5)(void *))
{
  uint64_t v7 = sub_10032D3F0(a1, a2, a3, 1);
  if (!v5)
  {
    uint64_t v8 = v7;
    if (((unint64_t)v7 & 0x8000000000000000) != 0)
    {
      sub_100296090();
      sub_10020DD10();
      *unint64_t v9 = 0xD000000000000011;
      v9[1] = 0x80000001005E65D0;
      sub_1002F725C((uint64_t)v9, 0xD000000000000020);
      *(void *)(v10 + 32) = v11;
      swift_willThrow();
    }
    else
    {
      sub_10031E1C0();
      v12[0] = v8;
      a5(v12);
      sub_10027F540(v12, a4);
    }
  }
}

void *sub_1002F421C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  swift_retain();
  uint64_t result = (void *)sub_100324594(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    v20.i64[0] = (uint64_t)result;
    v20.i64[1] = v18;
    uint64_t v21 = v19;
    sub_1002F69B4(&v20);
    return sub_10027F540(&v20, a8);
  }
  return result;
}

void *sub_1002F42C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *(*a3)(void *__return_ptr, uint64_t, void, void)@<X2>, void *a4@<X8>)
{
  uint64_t result = a3(v7, a1, *a2, a2[1]);
  if (!v4) {
    return sub_10027F540(v7, a4);
  }
  return result;
}

void *sub_1002F4324@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1002F42C8(a1, a2, *(void *(**)(void *__return_ptr, uint64_t, void, void))(v3 + 16), a3);
}

void sub_1002F4340()
{
  sub_1002E1C9C();
  sub_1002F3870(v0, v1, v2, v3, v4, v5, v6, 0x205453494CLL, (void (*)(long long *))sub_1002F6E8C);
}

void sub_1002F4384()
{
  sub_1002E1C9C();
  sub_1002F3870(v0, v1, v2, v3, v4, v5, v6, 0x204255534CLL, (void (*)(long long *))sub_1002F6D70);
}

void *sub_1002F43C8()
{
  sub_1002E1C9C();
  return sub_1002F3930(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F43E4()
{
  sub_1002E1C9C();
  sub_1002F3DF0(v0, v1, v2, v3, v4);
}

void sub_1002F4400()
{
  sub_1002E1C9C();
  sub_1002F410C(v0, v1, v2, v3, (void (*)(void *))sub_1002F6B00);
}

void sub_1002F4448()
{
  sub_1002E1C9C();
  sub_1002F410C(v0, v1, v2, v3, (void (*)(void *))sub_1002F6AB4);
}

void sub_1002F4490()
{
  sub_1002E1C9C();
  sub_1002F3A98(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F44AC()
{
}

void *sub_1002F44C8()
{
  sub_1002E1C9C();
  return sub_1002F421C(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1002F44E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    if (a2 + 1 >= a3)
    {
      sub_1002DB5BC();
      swift_allocError();
      *uint64_t v11 = a3;
      return swift_willThrow();
    }
    uint64_t v5 = result;
    uint64_t v6 = *(void *)result;
    uint64_t v7 = *(void *)(result + 8);
    int v8 = *(_DWORD *)(result + 16);
    __int16 v9 = *(_WORD *)(result + 20);
    char v10 = *(unsigned char *)(result + 22);
    swift_retain();
    sub_1002F45DC(v5, &v12);
    if (v3)
    {
      swift_release();
      *(void *)uint64_t v5 = v6;
      *(void *)(v5 + 8) = v7;
      *(_DWORD *)(v5 + 16) = v8;
      *(_WORD *)(v5 + 20) = v9;
      *(unsigned char *)(v5 + 22) = v10;
      return swift_willThrow();
    }
    swift_release();
    return v12;
  }
  return result;
}