uint64_t sub_1003823F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100382460(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1003824BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100382518(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100382574(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_1003825DC(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 2560;
  return result;
}

uint64_t sub_100382620(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

double sub_100382694(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 176) = 2560;
  return result;
}

double sub_1003826BC()
{
  uint64_t v0 = sub_100384BF0((uint64_t)_swiftEmptyArrayStorage);
  sub_100384D34(v0, v1, v2, v4);
  xmmword_100762118 = v10;
  unk_100762128 = v11;
  xmmword_100762138 = v12;
  xmmword_1007620D8 = v6;
  unk_1007620E8 = v7;
  xmmword_1007620F8 = v8;
  unk_100762108 = v9;
  static ServerID.empty = v4[0];
  unk_1007620A8 = v4[1];
  double result = *(double *)&v5;
  xmmword_1007620B8 = v4[2];
  unk_1007620C8 = v5;
  return result;
}

__n128 ServerID.init(_:)@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100384D34(a1, a2, a3, v10);
  long long v5 = v10[9];
  *(_OWORD *)(a4 + 128) = v10[8];
  *(_OWORD *)(a4 + 144) = v5;
  *(_OWORD *)(a4 + 160) = v10[10];
  long long v6 = v10[5];
  *(_OWORD *)(a4 + 64) = v10[4];
  *(_OWORD *)(a4 + 80) = v6;
  long long v7 = v10[7];
  *(_OWORD *)(a4 + 96) = v10[6];
  *(_OWORD *)(a4 + 112) = v7;
  long long v8 = v10[1];
  *(_OWORD *)a4 = v10[0];
  *(_OWORD *)(a4 + 16) = v8;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a4 + 32) = v10[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

long long *ServerID.empty.unsafeMutableAddressor()
{
  if (qword_100712FB8 != -1) {
    swift_once();
  }
  return &static ServerID.empty;
}

void *static ServerID.empty.getter@<X0>(void *a1@<X8>)
{
  if (qword_100712FB8 != -1) {
    swift_once();
  }
  return sub_100385304(&static ServerID.empty, a1);
}

uint64_t ServerID.osVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t ServerID.vendor.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t DisplayPart.Attachment.contentID.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DisplayPart.Attachment.contentID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t ServerID.address.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServerID.address.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t ServerID.date.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServerID.date.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

Swift::UInt32 (__swiftcall *DisplayPart.Attachment.encodedBytes.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t ServerID.command.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServerID.command.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

Swift::UInt32 (__swiftcall *ServerID.command.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t ServerID.arguments.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServerID.arguments.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return result;
}

Swift::UInt32 (__swiftcall *ServerID.arguments.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t ServerID.environment.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServerID.environment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

Swift::UInt32 (__swiftcall *ServerID.environment.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t sub_100382BA0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  long long v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  long long v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  long long v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  long long v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  long long v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  long long v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  long long v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  return _s13IMAP2Protocol8ServerIDV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14) & 1;
}

uint64_t ServerID.logDescription.getter()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_1007137A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100602710;
  *(void *)(inited + 32) = 1701667182;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = 0x6E6F6973726576;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = swift_getKeyPath();
  *(void *)(inited + 80) = 29551;
  *(void *)(inited + 88) = 0xE200000000000000;
  *(void *)(inited + 96) = swift_getKeyPath();
  *(void *)(inited + 104) = 0x6F6973726556736FLL;
  *(void *)(inited + 112) = 0xE90000000000006ELL;
  *(void *)(inited + 120) = swift_getKeyPath();
  *(void *)(inited + 128) = 0x726F646E6576;
  *(void *)(inited + 136) = 0xE600000000000000;
  *(void *)(inited + 144) = swift_getKeyPath();
  *(void *)(inited + 152) = 0x5574726F70707573;
  *(void *)(inited + 160) = 0xEA00000000004C52;
  *(void *)(inited + 168) = swift_getKeyPath();
  *(void *)(inited + 176) = 0x73736572646461;
  *(void *)(inited + 184) = 0xE700000000000000;
  *(void *)(inited + 192) = swift_getKeyPath();
  *(void *)(inited + 200) = 1702125924;
  *(void *)(inited + 208) = 0xE400000000000000;
  *(void *)(inited + 216) = swift_getKeyPath();
  *(void *)(inited + 224) = 0x646E616D6D6F63;
  *(void *)(inited + 232) = 0xE700000000000000;
  *(void *)(inited + 240) = swift_getKeyPath();
  *(void *)(inited + 248) = 0x746E656D75677261;
  *(void *)(inited + 256) = 0xE900000000000073;
  *(void *)(inited + 264) = swift_getKeyPath();
  *(void *)(inited + 272) = 0x6D6E6F7269766E65;
  *(void *)(inited + 280) = 0xEB00000000746E65;
  *(void *)(inited + 288) = swift_getKeyPath();
  uint64_t v3 = *(void *)(inited + 16);
  if (v3)
  {
    sub_100086B44(v0);
    swift_bridgeObjectRetain();
    uint64_t v4 = inited + 48;
    long long v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = *(void *)(v4 - 16);
      uint64_t v7 = *(void *)(v4 - 8);
      sub_100086B44(v1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_getAtKeyPath();
      sub_100086C14(v1);
      if (v13._object)
      {
        swift_bridgeObjectRetain();
        v14._countAndFlagsBits = 8250;
        v14._object = (void *)0xE200000000000000;
        sub_1005E1E30(v14);
        sub_1005E1E30(v13);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v5 = sub_100383690(0, v5[2] + 1, 1, v5);
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1) {
          long long v5 = sub_100383690((void *)(v8 > 1), v9 + 1, 1, v5);
        }
        v5[2] = v9 + 1;
        long long v10 = &v5[2 * v9];
        v10[4] = v6;
        v10[5] = v7;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    sub_100086C14(v1);
  }
  else
  {
    long long v5 = _swiftEmptyArrayStorage;
  }
  swift_setDeallocating();
  sub_10000566C(&qword_1007137B0);
  swift_arrayDestroy();
  if (v5[2])
  {
    sub_10000566C(&qword_100713020);
    sub_100363684();
    uint64_t v11 = sub_1005E1A80();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

uint64_t sub_100383060(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1003831C4(a1, a2, a3, a4, &qword_100713018, (uint64_t (*)(void))&type metadata accessor for DispatchData, (uint64_t (*)(void))&type metadata accessor for DispatchData);
}

void *sub_100383094(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000566C(&qword_100713518);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      long long v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = _swiftEmptyArrayStorage;
      long long v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10001F688(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100383190(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1003831C4(a1, a2, a3, a4, &qword_100713778, type metadata accessor for Response, type metadata accessor for Response);
}

uint64_t sub_1003831C4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000566C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_1005E2F10();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100385844(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100383444(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000566C(&qword_1007137E8);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100384720(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100383568(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000566C(&qword_1007137C0);
      long long v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      long long v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100384AE0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100383690(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000566C(&qword_100713218);
      long long v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001C898(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003837A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1003831C4(a1, a2, a3, a4, &qword_1007137D0, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection);
}

uint64_t sub_1003837D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1003831C4(a1, a2, a3, a4, &qword_1007137B8, type metadata accessor for ServerResponseFramingParser.Frame, type metadata accessor for ServerResponseFramingParser.Frame);
}

uint64_t sub_100383808(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a4[2];
  if (a3)
  {
    uint64_t v8 = (void *)(a3 + 16);
    swift_retain();
    Swift::Int v9 = sub_100383DF0(a1, a2, (uint64_t)(a4 + 4), v7, v8);
    swift_release();
  }
  else
  {
    if (!v7) {
      return 0;
    }
    BOOL v10 = a4[4] == a1 && a4[5] == a2;
    if (v10 || (sub_1005E3290() & 1) != 0) {
      return 0;
    }
    if (v7 == 1) {
      return 0;
    }
    if (a4[6] == a1 && a4[7] == a2 || (sub_1005E3290() & 1) != 0) {
      return 1;
    }
    if (v7 == 2) {
      return 0;
    }
    if (a4[8] == a1 && a4[9] == a2 || (sub_1005E3290() & 1) != 0) {
      return 2;
    }
    if (v7 == 3) {
      return 0;
    }
    if (a4[10] == a1 && a4[11] == a2 || (sub_1005E3290() & 1) != 0)
    {
      return 3;
    }
    else
    {
      uint64_t v12 = a4 + 13;
      uint64_t v13 = 3;
      uint64_t v14 = 4;
      while (1)
      {
        if (v7 == v14) {
          return 0;
        }
        ++v13;
        if (*(v12 - 1) == a1 && *v12 == a2) {
          break;
        }
        Swift::Int v9 = v14++;
        v12 += 2;
        if (sub_1005E3290()) {
          return v9;
        }
      }
      return v13;
    }
  }
  return v9;
}

uint64_t sub_100383A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v8 = v2[1];
  unint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v6 = v8;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_10035FE7C(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *v6;
  }
  unint64_t v11 = *(void *)(v7 + 16);
  unint64_t v10 = *(void *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = sub_10035FE7C(v10 > 1, v11 + 1, 1);
    uint64_t v7 = *v6;
  }
  *(void *)(v7 + 16) = v11 + 1;
  unint64_t v12 = v7 + 16 * v11;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  v3[1] = v7;
  uint64_t v13 = *(void *)(v7 + 16);
  if (*v3)
  {
    swift_beginAccess();
    if (sub_1005E0BA0() >= v13)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v14 = *v3;
      if (!result)
      {
        if (!v14)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v14 = sub_1005E0BC0();
        uint64_t result = swift_release();
        *uint64_t v3 = v14;
      }
      if (v14) {
        return sub_1005E0B60();
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v13 < 0x10)
  {
    return result;
  }
  return sub_100383BA8();
}

uint64_t sub_100383BA8()
{
  uint64_t v1 = *v0;
  Swift::Int v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = sub_1005E0BD0();
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = sub_100383C4C(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  *uint64_t v0 = v5;
  return result;
}

uint64_t sub_100383C4C(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1005E0BD0();
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = sub_1005E0BE0();
    sub_100383CD4(a1, (void *)(v9 + 16));
  }
  return v9;
}

Swift::Int sub_100383CD4(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      sub_1005E33F0();
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      uint64_t result = sub_1005E3470();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      uint64_t v5 = sub_1005E0B40();
      swift_bridgeObjectRelease();
      if (v5)
      {
        while (1)
          sub_1005E0B90();
      }
      uint64_t result = sub_1005E0B80();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_100383DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_1005E33F0();
  sub_1005E1DB0();
  Swift::Int result = sub_1005E3470();
  if (__OFSUB__(1 << *a5, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1005E0B40();
    uint64_t v10 = sub_1005E0B70();
    uint64_t v11 = v10;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (void *)(a3 + 16 * v10);
      if (*v13 != a1 || v13[1] != a2)
      {
        do
        {
          if (sub_1005E3290()) {
            break;
          }
          sub_1005E0B90();
          uint64_t v14 = sub_1005E0B70();
          uint64_t v11 = v14;
          if (v15) {
            break;
          }
          uint64_t v16 = (void *)(a3 + 16 * v14);
        }
        while (*v16 != a1 || v16[1] != a2);
      }
    }
    return v11;
  }
  return result;
}

uint64_t sub_100383F5C(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v3 = v2;
  int64_t v5 = result;
  Swift::Int v8 = v2[1];
  uint64_t v6 = v2 + 1;
  Swift::Int v7 = v8;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if (isUniquelyReferenced_nonNull_native && (unint64_t)v5 <= *(void *)(v7 + 24) >> 1)
  {
    uint64_t v10 = *v3;
    if (*v3) {
      goto LABEL_5;
    }
  }
  else
  {
    if (*(void *)(v7 + 16) <= v5) {
      int64_t v15 = v5;
    }
    else {
      int64_t v15 = *(void *)(v7 + 16);
    }
    sub_10035FE7C(isUniquelyReferenced_nonNull_native, v15, 0);
    Swift::Int v7 = *v6;
    uint64_t v10 = *v3;
    if (*v3)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v11 = *(void *)(v10 + 16) & 0x3FLL;
      uint64_t v12 = sub_1005E0BD0();
      uint64_t v13 = v12;
      if (a2)
      {
        uint64_t v14 = v12;
        if (v11 >= v12) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v14 = *(void *)(v10 + 24) & 0x3FLL;
        if (v11 >= v13) {
          goto LABEL_20;
        }
      }
LABEL_16:
      if (v14 <= v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v14;
      }
      goto LABEL_30;
    }
  }
  uint64_t v16 = sub_1005E0BD0();
  uint64_t v13 = v16;
  uint64_t v11 = 0;
  if (a2) {
    uint64_t v14 = v16;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v16 > 0) {
    goto LABEL_16;
  }
LABEL_20:
  if (v14 <= v13) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = v14;
  }
  Swift::Int result = sub_1005E0BD0();
  if (result <= v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = result;
  }
  if (v19 < v11)
  {
    if (v14 <= v19) {
      uint64_t v17 = v19;
    }
    else {
      uint64_t v17 = v14;
    }
LABEL_30:
    uint64_t v20 = sub_100383C4C(v7, v17, 0, v14);
    Swift::Int result = swift_release();
    *uint64_t v3 = v20;
    return result;
  }
  if (!v10 || (Swift::Int result = swift_isUniquelyReferenced_native(), result))
  {
    uint64_t v21 = *v3;
    if (*v3) {
      goto LABEL_35;
    }
LABEL_39:
    if (!v14) {
      return result;
    }
    __break(1u);
    goto LABEL_41;
  }
  Swift::Int result = *v3;
  if (!*v3)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  uint64_t v21 = sub_1005E0BC0();
  Swift::Int result = swift_release();
  *uint64_t v3 = v21;
  if (!v21) {
    goto LABEL_39;
  }
LABEL_35:
  Swift::Int result = swift_beginAccess();
  if ((*(void *)(v21 + 24) & 0x3FLL) != v14) {
    *(void *)(v21 + 24) = *(void *)(v21 + 24) & 0xFFFFFFFFFFFFFFC0 | v14 & 0x3F;
  }
  return result;
}

uint64_t _s13IMAP2Protocol8ServerIDV23__derived_struct_equalsySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (v7 = sub_1005E3290(), uint64_t result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = a1[3];
    uint64_t v10 = a2[3];
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (a1[2] != a2[2] || v9 != v10)
      {
        char v11 = sub_1005E3290();
        uint64_t result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t v12 = a1[5];
    uint64_t v13 = a2[5];
    if (v12)
    {
      if (!v13) {
        return 0;
      }
      if (a1[4] != a2[4] || v12 != v13)
      {
        char v14 = sub_1005E3290();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t v15 = a1[7];
    uint64_t v16 = a2[7];
    if (v15)
    {
      if (!v16) {
        return 0;
      }
      if (a1[6] != a2[6] || v15 != v16)
      {
        char v17 = sub_1005E3290();
        uint64_t result = 0;
        if ((v17 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v16)
    {
      return 0;
    }
    uint64_t v18 = a1[9];
    uint64_t v19 = a2[9];
    if (v18)
    {
      if (!v19) {
        return 0;
      }
      if (a1[8] != a2[8] || v18 != v19)
      {
        char v20 = sub_1005E3290();
        uint64_t result = 0;
        if ((v20 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v19)
    {
      return 0;
    }
    uint64_t v21 = a1[11];
    uint64_t v22 = a2[11];
    if (v21)
    {
      if (!v22) {
        return 0;
      }
      if (a1[10] != a2[10] || v21 != v22)
      {
        char v23 = sub_1005E3290();
        uint64_t result = 0;
        if ((v23 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v22)
    {
      return 0;
    }
    uint64_t v24 = a1[13];
    uint64_t v25 = a2[13];
    if (v24)
    {
      if (!v25) {
        return 0;
      }
      if (a1[12] != a2[12] || v24 != v25)
      {
        char v26 = sub_1005E3290();
        uint64_t result = 0;
        if ((v26 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v25)
    {
      return 0;
    }
    uint64_t v27 = a1[15];
    uint64_t v28 = a2[15];
    if (v27)
    {
      if (!v28) {
        return 0;
      }
      if (a1[14] != a2[14] || v27 != v28)
      {
        char v29 = sub_1005E3290();
        uint64_t result = 0;
        if ((v29 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v28)
    {
      return 0;
    }
    uint64_t v30 = a1[17];
    uint64_t v31 = a2[17];
    if (v30)
    {
      if (!v31) {
        return 0;
      }
      if (a1[16] != a2[16] || v30 != v31)
      {
        char v32 = sub_1005E3290();
        uint64_t result = 0;
        if ((v32 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v31)
    {
      return 0;
    }
    uint64_t v33 = a1[19];
    uint64_t v34 = a2[19];
    if (v33)
    {
      if (!v34) {
        return 0;
      }
      if (a1[18] != a2[18] || v33 != v34)
      {
        char v35 = sub_1005E3290();
        uint64_t result = 0;
        if ((v35 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v34)
    {
      return 0;
    }
    uint64_t v36 = a1[21];
    uint64_t v37 = a2[21];
    if (v36)
    {
      if (v37 && (a1[20] == a2[20] && v36 == v37 || (sub_1005E3290() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v37)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10038444C(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_1007131E0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2 - 8);
  BOOL v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::Int v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_10000566C(&qword_1007137E0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = 0;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  sub_100383F5C(v13, 0);
  char v26 = _swiftEmptyArrayStorage;
  sub_10035FEBC(0, v13, 0);
  if (!v13) {
    return v27;
  }
  uint64_t v25 = (uint64_t)v12 + *(int *)(v9 + 48);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v15 = *(void *)(v10 + 72);
  uint64_t v23 = a1;
  uint64_t v24 = v15;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000079E4(v14, (uint64_t)v12, &qword_1007137E0);
    uint64_t v16 = *v12;
    uint64_t v17 = v12[1];
    sub_1003859A0(v25, (uint64_t)v8);
    uint64_t result = sub_100383808(v16, v17, v27, v28);
    if ((v19 & 1) == 0) {
      break;
    }
    sub_100383A2C(v16, v17);
    sub_1000079E4((uint64_t)v8, (uint64_t)v6, &qword_1007131E0);
    char v20 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10035FEBC(0, v20[2] + 1, 1);
      char v20 = v26;
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1)
    {
      sub_10035FEBC(v21 > 1, v22 + 1, 1);
      char v20 = v26;
    }
    v20[2] = v22 + 1;
    sub_1003859A0((uint64_t)v6, (uint64_t)v20+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v22);
    sub_100385A08((uint64_t)v8);
    swift_bridgeObjectRelease();
    v14 += v24;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      return v27;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100384720(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1005E3000();
  __break(1u);
  return result;
}

uint64_t sub_100384818(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ParameterValue();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2 - 8);
  unint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::Int v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_10000566C(&qword_1007137D8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = 0;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  sub_100383F5C(v13, 0);
  char v26 = _swiftEmptyArrayStorage;
  sub_10035FF54(0, v13, 0);
  if (!v13) {
    return v27;
  }
  uint64_t v25 = (uint64_t)v12 + *(int *)(v9 + 48);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v15 = *(void *)(v10 + 72);
  uint64_t v23 = a1;
  uint64_t v24 = v15;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000079E4(v14, (uint64_t)v12, &qword_1007137D8);
    uint64_t v17 = *v12;
    uint64_t v16 = v12[1];
    sub_1002ECB38(v25, (uint64_t)v8);
    uint64_t result = sub_100383808(v17, v16, v27, v28);
    if ((v19 & 1) == 0) {
      break;
    }
    sub_100383A2C(v17, v16);
    sub_1001F3974((uint64_t)v8, (uint64_t)v6);
    char v20 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10035FF54(0, v20[2] + 1, 1);
      char v20 = v26;
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1)
    {
      sub_10035FF54(v21 > 1, v22 + 1, 1);
      char v20 = v26;
    }
    v20[2] = v22 + 1;
    sub_1002ECB38((uint64_t)v6, (uint64_t)v20+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v22);
    sub_1002BD9D0((uint64_t)v8);
    swift_bridgeObjectRelease();
    v14 += v24;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      return v27;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100384AE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000566C(&qword_1007137C8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1005E3000();
  __break(1u);
  return result;
}

uint64_t sub_100384BF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100383F5C(v2, 0);
  sub_10035FF90(0, v2, 0);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v3 - 3);
    uint64_t v4 = *(v3 - 2);
    uint64_t v7 = *(v3 - 1);
    uint64_t v6 = *v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_100383808(v5, v4, 0, _swiftEmptyArrayStorage);
    if ((v9 & 1) == 0) {
      break;
    }
    sub_100383A2C(v5, v4);
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1) {
      sub_10035FF90(v10 > 1, v11 + 1, 1);
    }
    v3 += 4;
    _swiftEmptyArrayStorage[2] = v11 + 1;
    uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
    v12[4] = v7;
    v12[5] = v6;
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100384D34@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t result = sub_100383808(1701667182, 0xE400000000000000, a1, a2);
  if ((v9 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(a3 + 16))
    {
      uint64_t v10 = a3 + 16 * result;
      uint64_t v12 = *(void *)(v10 + 32);
      uint64_t v11 = *(void *)(v10 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v12 = 0;
  uint64_t v11 = 0;
LABEL_6:
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x6E6F6973726576, 0xE700000000000000, a1, a2);
  if ((v13 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        uint64_t v14 = a3 + 16 * result;
        uint64_t v16 = *(void *)(v14 + 32);
        uint64_t v15 = *(void *)(v14 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_11;
      }
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v16 = 0;
  uint64_t v15 = 0;
LABEL_11:
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(29551, 0xE200000000000000, a1, a2);
  if ((v17 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        uint64_t v18 = a3 + 16 * result;
        uint64_t v19 = *(void *)(v18 + 32);
        uint64_t v20 = *(void *)(v18 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      }
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
LABEL_16:
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x69737265762D736FLL, 0xEA00000000006E6FLL, a1, a2);
  if ((v21 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v61 = *(void *)(a3 + 16 * result + 32);
        uint64_t v22 = swift_bridgeObjectRetain();
        goto LABEL_21;
      }
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  *(void *)&long long v61 = 0;
  uint64_t v22 = 0;
LABEL_21:
  *((void *)&v61 + 1) = v22;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x726F646E6576, 0xE600000000000000, a1, a2);
  if ((v23 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v60 = *(void *)(a3 + 16 * result + 32);
        uint64_t v24 = swift_bridgeObjectRetain();
        goto LABEL_26;
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  *(void *)&long long v60 = 0;
  uint64_t v24 = 0;
LABEL_26:
  *((void *)&v60 + 1) = v24;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x2D74726F70707573, 0xEB000000006C7275, a1, a2);
  if ((v25 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v59 = *(void *)(a3 + 16 * result + 32);
        uint64_t v26 = swift_bridgeObjectRetain();
        goto LABEL_31;
      }
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  *(void *)&long long v59 = 0;
  uint64_t v26 = 0;
LABEL_31:
  *((void *)&v59 + 1) = v26;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x73736572646461, 0xE700000000000000, a1, a2);
  if ((v27 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v58 = *(void *)(a3 + 16 * result + 32);
        uint64_t v28 = swift_bridgeObjectRetain();
        goto LABEL_36;
      }
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  *(void *)&long long v58 = 0;
  uint64_t v28 = 0;
LABEL_36:
  *((void *)&v58 + 1) = v28;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(1702125924, 0xE400000000000000, a1, a2);
  if ((v29 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v57 = *(void *)(a3 + 16 * result + 32);
        uint64_t v30 = swift_bridgeObjectRetain();
        goto LABEL_41;
      }
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  *(void *)&long long v57 = 0;
  uint64_t v30 = 0;
LABEL_41:
  *((void *)&v57 + 1) = v30;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x646E616D6D6F63, 0xE700000000000000, a1, a2);
  if ((v31 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        *(void *)&long long v55 = *(void *)(a3 + 16 * result + 32);
        uint64_t v32 = swift_bridgeObjectRetain();
        goto LABEL_46;
      }
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(void *)&long long v55 = 0;
  uint64_t v32 = 0;
LABEL_46:
  *((void *)&v55 + 1) = v32;
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x746E656D75677261, 0xE900000000000073, a1, a2);
  uint64_t v56 = v19;
  if ((v33 & 1) == 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      if (result < *(void *)(a3 + 16))
      {
        uint64_t v34 = a3 + 16 * result;
        uint64_t v35 = *(void *)(v34 + 40);
        uint64_t v54 = *(void *)(v34 + 32);
        swift_bridgeObjectRetain();
        goto LABEL_51;
      }
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v54 = 0;
  uint64_t v35 = 0;
LABEL_51:
  swift_bridgeObjectRetain();
  unint64_t result = sub_100383808(0x6D6E6F7269766E65, 0xEB00000000746E65, a1, a2);
  if (v36)
  {
    uint64_t v45 = v16;
    uint64_t v38 = v35;
    uint64_t v46 = v12;
    uint64_t v40 = v20;
    uint64_t v41 = v45;
    uint64_t v42 = v15;
    uint64_t v43 = v46;
    swift_release();
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    goto LABEL_56;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_77;
  }
  if (result < *(void *)(a3 + 16))
  {
    uint64_t v37 = v16;
    uint64_t v38 = v35;
    uint64_t v39 = v12;
    uint64_t v40 = v20;
    uint64_t v41 = v37;
    uint64_t v42 = v15;
    uint64_t v43 = v39;
    uint64_t v44 = a3 + 16 * result;
    uint64_t v52 = *(void *)(v44 + 40);
    uint64_t v53 = *(void *)(v44 + 32);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_56:
    swift_release();
    swift_release();
    *(void *)&long long v62 = v43;
    *((void *)&v62 + 1) = v11;
    *(void *)&long long v63 = v41;
    *((void *)&v63 + 1) = v42;
    *(void *)&long long v64 = v56;
    *((void *)&v64 + 1) = v40;
    long long v65 = v61;
    long long v66 = v60;
    long long v67 = v59;
    long long v68 = v58;
    long long v69 = v57;
    long long v70 = v55;
    *(void *)&long long v71 = v54;
    *((void *)&v71 + 1) = v38;
    *(void *)&long long v72 = v53;
    *((void *)&v72 + 1) = v52;
    sub_100086B44((uint64_t)&v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = sub_100086C14((uint64_t)&v62);
    long long v47 = v71;
    a4[8] = v70;
    a4[9] = v47;
    a4[10] = v72;
    long long v48 = v67;
    a4[4] = v66;
    a4[5] = v48;
    long long v49 = v69;
    a4[6] = v68;
    a4[7] = v49;
    long long v50 = v63;
    *a4 = v62;
    a4[1] = v50;
    long long v51 = v65;
    a4[2] = v64;
    a4[3] = v51;
    return result;
  }
LABEL_78:
  __break(1u);
  return result;
}

void *sub_100385304(void *a1, void *a2)
{
  return a2;
}

uint64_t destroy for ServerID()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ServerID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  uint64_t v13 = a2[21];
  a1[20] = a2[20];
  a1[21] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ServerID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ServerID(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

void *assignWithTake for ServerID(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[21];
  a1[20] = a2[20];
  a1[21] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerID()
{
  return &type metadata for ServerID;
}

uint64_t sub_100385844(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1005E3000();
  __break(1u);
  return result;
}

uint64_t sub_1003859A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007131E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100385A08(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_1007131E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::String __swiftcall ServerResponseTranscoder.makeParsingErrorDescription()()
{
  uint64_t v1 = v0;
  uint64_t v25 = *(void *)(type metadata accessor for Response(0) - 8);
  __chkstk_darwin();
  unint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v24 = (uint64_t)&v22 - v4;
  uint64_t v5 = v1[3];
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    char v27 = _swiftEmptyArrayStorage;
    swift_retain();
    sub_10035FE7C(0, v5 & ~(v5 >> 63), 0);
    if ((v5 & 0x8000000000000000) == 0)
    {
      uint64_t v7 = 0;
      uint64_t v22 = (char *)v1 + ((*(unsigned __int8 *)(v25 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v23 = v5;
      while (v5 != v7)
      {
        if (v7 >= v1[3]) {
          goto LABEL_17;
        }
        uint64_t v8 = v1[4];
        if (v7 + v8 >= v1[2]) {
          uint64_t v9 = v1[2];
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = v24;
        sub_100390DA4((uint64_t)&v22[(v7 + v8 - v9) * *(void *)(v25 + 72)], v24, type metadata accessor for Response);
        sub_10038B6F4(v10, (uint64_t)v3, type metadata accessor for Response);
        sub_10038AD6C((uint64_t)v3, v26);
        sub_100390288((uint64_t)v3, type metadata accessor for Response);
        unint64_t v11 = v26[0];
        unint64_t v12 = v26[1];
        uint64_t v6 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10035FE7C(0, v6[2] + 1, 1);
          uint64_t v6 = v27;
        }
        unint64_t v14 = v6[2];
        unint64_t v13 = v6[3];
        if (v14 >= v13 >> 1)
        {
          sub_10035FE7C(v13 > 1, v14 + 1, 1);
          uint64_t v6 = v27;
        }
        ++v7;
        v6[2] = v14 + 1;
        uint64_t v15 = &v6[2 * v14];
        v15[4] = v11;
        v15[5] = v12;
        uint64_t v5 = v23;
        if (v23 == v7)
        {
          swift_release();
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
    }
    __break(1u);
    uint64_t v19 = swift_release();
    __break(1u);
  }
  else
  {
LABEL_15:
    v26[0] = (unint64_t)v6;
    sub_10000566C(&qword_100713020);
    sub_100363684();
    uint64_t v16 = sub_1005E1A80();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = v16;
    uint64_t v20 = v18;
  }
  result._object = v20;
  result._countAndFlagsBits = v19;
  return result;
}

uint64_t sub_100385D20()
{
  uint64_t v0 = sub_1005E0ED0();
  sub_10034E5B4(v0, qword_100762148);
  sub_1003461B0(v0, (uint64_t)qword_100762148);
  return sub_1005E0EC0();
}

void *ServerResponseTranscoder.append(_:)(uint64_t a1)
{
  Swift::String result = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  Swift::Int v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v1;
    if (*(void *)(*v1 + 16) < v5 || (isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10038B34C(v5, 0);
      uint64_t v7 = *v1;
    }
    uint64_t v8 = *(void *)(type metadata accessor for Response(0) - 8);
    return sub_10038B624((void *)(v7 + 16), v7 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a1);
  }
  return result;
}

uint64_t ServerResponseTranscoder.parseNext()@<X0>(void *a1@<X8>)
{
  unint64_t v3 = v1;
  sub_10000566C(&qword_1007137F0);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v43 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(type metadata accessor for Response(0) - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v37 - v12;
  uint64_t result = __chkstk_darwin();
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v42 = v3;
  uint64_t v17 = *v3;
  uint64_t v18 = *(void *)(*v3 + 24);
  if (!v18) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
  }
  if (v18 < 1)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v37 = result;
  uint64_t v38 = v7;
  uint64_t v39 = v6;
  uint64_t v41 = a1;
  uint64_t v19 = *(void *)(v17 + 32);
  uint64_t v20 = *(void *)(v17 + 16);
  if (v19 < v20) {
    uint64_t v20 = 0;
  }
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = *(void *)(v9 + 72);
  sub_100390DA4(v17 + v21 + (v19 - v20) * v22, (uint64_t)v11, type metadata accessor for Response);
  sub_10038B6F4((uint64_t)v11, (uint64_t)v13, type metadata accessor for Response);
  sub_10038B6F4((uint64_t)v13, (uint64_t)v16, type metadata accessor for Response);
  sub_1003862F4(v43);
  if (!v2)
  {
    uint64_t v25 = v42;
    if (*(uint64_t *)(*v42 + 24) < 1)
    {
      uint64_t v36 = 1;
      uint64_t v27 = (uint64_t)v40;
      uint64_t v33 = (uint64_t)v41;
      uint64_t v35 = v38;
      uint64_t v34 = v39;
      goto LABEL_20;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = (uint64_t)v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10038BC30();
      uint64_t v25 = v42;
    }
    uint64_t v28 = (void *)*v25;
    uint64_t result = sub_10038B6F4((uint64_t)v28 + v21 + v28[4] * v22, v27, type metadata accessor for Response);
    uint64_t v29 = v28[4];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (!v30)
    {
      uint64_t v32 = v28[3];
      if (v31 >= v28[2]) {
        uint64_t v31 = 0;
      }
      v28[4] = v31;
      uint64_t v33 = (uint64_t)v41;
      uint64_t v35 = v38;
      uint64_t v34 = v39;
      if (!__OFSUB__(v32, 1))
      {
        uint64_t v36 = 0;
        v28[3] = v32 - 1;
LABEL_20:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v27, v36, 1, v37);
        sub_100007A48(v27, &qword_1007137F0);
        sub_100390288((uint64_t)v16, type metadata accessor for Response);
        sub_10038B6F4(v43, v33, type metadata accessor for Response);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v34);
      }
LABEL_23:
      __break(1u);
      return result;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v45 = v2;
  swift_errorRetain();
  sub_10000566C(&qword_1007137F8);
  int v23 = swift_dynamicCast();
  uint64_t v24 = v41;
  if (v23 && v44 == 1)
  {
    swift_errorRelease();
    sub_100386668(v24);
    sub_100390288((uint64_t)v16, type metadata accessor for Response);
    return swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
    return sub_100390288((uint64_t)v16, type metadata accessor for Response);
  }
}

uint64_t sub_1003862F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  type metadata accessor for ResponsePayload();
  __chkstk_darwin();
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Response(0);
  __chkstk_darwin();
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100390DA4(v3, (uint64_t)v8, type metadata accessor for Response);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100382460((uint64_t)v8, (uint64_t)v16);
      sub_100382460((uint64_t)v16, (uint64_t)v17);
      if (!sub_10029C0D8((uint64_t)v17))
      {
        sub_10029C1C4((uint64_t)v17);
        sub_100390E34();
        swift_allocError();
        char v15 = 1;
        goto LABEL_13;
      }
      sub_100390E34();
      swift_allocError();
      *uint64_t v10 = 2;
      swift_willThrow();
      return sub_100390FF0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
    case 2u:
      long long v11 = v8[1];
      long long v18 = *v8;
      *(_OWORD *)uint64_t v19 = v11;
      *(_OWORD *)&v19[9] = *(_OWORD *)((char *)v8 + 25);
      sub_10038AC38(a1);
      if (v2)
      {
        long long v22 = v18;
        sub_10002A77C((uint64_t)&v22);
        sub_10034F878((uint64_t)v19, (uint64_t)v23);
        uint64_t v12 = v23;
      }
      else
      {
        long long v20 = v18;
        sub_10002A77C((uint64_t)&v20);
        sub_10034F878((uint64_t)v19, (uint64_t)v21);
        uint64_t v12 = v21;
      }
      return sub_100391064((uint64_t)v12);
    case 3u:
      uint64_t v13 = *((void *)v8 + 2);
      *(_OWORD *)a1 = *v8;
      *(void *)(a1 + 16) = v13;
      type metadata accessor for UntaggedResponse(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_9;
    case 4u:
      sub_100390288((uint64_t)v8, type metadata accessor for Response);
      sub_100390E34();
      swift_allocError();
      char v15 = 10;
      goto LABEL_13;
    case 5u:
      sub_100390E34();
      swift_allocError();
      char v15 = 11;
LABEL_13:
      *unint64_t v14 = v15;
      uint64_t result = swift_willThrow();
      break;
    default:
      sub_10038B6F4((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResponsePayload);
      sub_10038A594(a1);
      uint64_t result = sub_100390288((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResponsePayload);
      if (!v2)
      {
LABEL_9:
        type metadata accessor for Response(0);
        uint64_t result = swift_storeEnumTagMultiPayload();
      }
      break;
  }
  return result;
}

uint64_t sub_100386668@<X0>(void *a1@<X8>)
{
  uint64_t v9 = _swiftEmptyArrayStorage;
  sub_100386B00(v1, &v9, a1);
  if (!v2)
  {
    uint64_t v4 = type metadata accessor for Response(0);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
    return swift_bridgeObjectRelease();
  }
  swift_errorRetain();
  sub_10000566C(&qword_1007137F8);
  if (!swift_dynamicCast() || v8)
  {
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  swift_errorRelease();
  swift_beginAccess();
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_1003891E4(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for Response(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  swift_errorRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003867D8@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_1007137F0);
  __chkstk_darwin();
  long long v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(uint64_t *)(*(void *)a1 + 24) < 1)
  {
    int v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v23(v11, 1, 1, v6);
    sub_100007A48((uint64_t)v11, &qword_1007137F0);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(a3, 1, 1, v6);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_10038BC30();
  }
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 72);
  sub_10038B6F4((uint64_t)v12 + ((v13 + 40) & ~v13) + v14 * v12[4], (uint64_t)v11, type metadata accessor for Response);
  uint64_t v15 = v12[4];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = v12[3];
  if (v17 >= v12[2]) {
    uint64_t v17 = 0;
  }
  v12[4] = v17;
  if (__OFSUB__(v18, 1)) {
    goto LABEL_14;
  }
  v12[3] = v18 - 1;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  v25(v11, 0, 1, v6);
  sub_10038B6F4((uint64_t)v11, a3, type metadata accessor for Response);
  sub_100390DA4(a3, (uint64_t)v9, type metadata accessor for Response);
  swift_beginAccess();
  uint64_t v12 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v12;
  uint64_t v26 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    uint64_t v12 = (void *)sub_100383190(0, v12[2] + 1, 1, (unint64_t)v12);
    *a2 = v12;
  }
  unint64_t v21 = v12[2];
  unint64_t v20 = v12[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t v12 = (void *)sub_100383190(v20 > 1, v21 + 1, 1, (unint64_t)v12);
    *a2 = v12;
  }
  v12[2] = v21 + 1;
  sub_10038B6F4((uint64_t)v9, (uint64_t)v12 + ((v13 + 32) & ~v13) + v21 * v14, type metadata accessor for Response);
  swift_endAccess();
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v25)(v26, 0, 1, v6);
}

uint64_t sub_100386B00@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  v308 = a2;
  v272 = a3;
  uint64_t v293 = sub_1005E17E0();
  *(void *)&long long v313 = *(void *)(v293 - 8);
  __chkstk_darwin();
  v276 = (char *)&v251 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v281 = (char *)&v251 - v5;
  sub_10000566C(&qword_1007138E0);
  __chkstk_darwin();
  v295 = (char *)&v251 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v279 = (uint64_t)&v251 - v7;
  __chkstk_darwin();
  v275 = (char *)&v251 - v8;
  __chkstk_darwin();
  uint64_t v280 = (uint64_t)&v251 - v9;
  sub_10000566C(&qword_1007131E8);
  __chkstk_darwin();
  v278 = (char *)&v251 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v273 = (char *)&v251 - v11;
  uint64_t v12 = type metadata accessor for MessageData.BodySection();
  uint64_t v286 = *(void *)(v12 - 8);
  uint64_t v287 = v12;
  __chkstk_darwin();
  uint64_t v291 = (uint64_t)&v251 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v285 = (char *)&v251 - v14;
  __chkstk_darwin();
  uint64_t v274 = (uint64_t)&v251 - v15;
  uint64_t v300 = type metadata accessor for StreamedBodySection(0);
  *(void *)&long long v314 = *(void *)(v300 - 8);
  __chkstk_darwin();
  uint64_t v290 = (uint64_t)&v251 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v289 = (uint64_t)&v251 - v17;
  __chkstk_darwin();
  uint64_t v288 = (uint64_t)&v251 - v18;
  uint64_t v19 = type metadata accessor for Response(0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin();
  uint64_t v296 = (uint64_t)&v251 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v302 = (uint64_t)&v251 - v22;
  __chkstk_darwin();
  uint64_t v301 = (uint64_t)&v251 - v23;
  sub_10000566C(&qword_1007138E8);
  __chkstk_darwin();
  v277 = (char *)&v251 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v283 = (uint64_t)&v251 - v25;
  __chkstk_darwin();
  uint64_t v284 = (uint64_t)&v251 - v26;
  __chkstk_darwin();
  uint64_t v282 = (uint64_t)&v251 - v27;
  __chkstk_darwin();
  v297 = (char *)&v251 - v28;
  sub_10000566C(&qword_1007137F0);
  __chkstk_darwin();
  uint64_t v304 = (uint64_t)&v251 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v303 = (uint64_t)&v251 - v30;
  __chkstk_darwin();
  uint64_t v32 = (char *)&v251 - v31;
  __chkstk_darwin();
  uint64_t v34 = (char *)&v251 - v33;
  sub_10013668C((uint64_t)v335);
  LODWORD(v336[0]) = 0;
  BYTE4(v336[0]) = 1;
  LODWORD(v336[1]) = 0;
  BYTE4(v336[1]) = 1;
  sub_10001FDF0((uint64_t)v335, (uint64_t)&v336[2], &qword_100713030);
  v336[25] = _swiftEmptyArrayStorage;
  sub_10001FDF0((uint64_t)v335, (uint64_t)&v336[26], &qword_100713030);
  memset(&v336[49], 0, 144);
  LOBYTE(v336[67]) = 1;
  HIDWORD(v336[67]) = 0;
  LOBYTE(v336[68]) = 1;
  v336[69] = 0;
  LOBYTE(v336[70]) = 1;
  uint64_t v35 = v19;
  *(_OWORD *)&v336[71] = 0u;
  memcpy(v324, v336, sizeof(v324));
  uint64_t v337 = a1;
  sub_1003867D8(a1, v308, (uint64_t)v34);
  uint64_t v298 = v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v34, 1, v19) == 1)
  {
LABEL_11:
    sub_100390E34();
    swift_allocError();
    *uint64_t v41 = 2;
    swift_willThrow();
    uint64_t v42 = &qword_1007137F0;
LABEL_12:
    uint64_t v43 = (uint64_t)v34;
    goto LABEL_13;
  }
  sub_1000079E4((uint64_t)v34, (uint64_t)v32, &qword_1007137F0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100390288((uint64_t)v32, type metadata accessor for Response);
    goto LABEL_11;
  }
  sub_100382460((uint64_t)v32, (uint64_t)v321);
  sub_100382460((uint64_t)v321, (uint64_t)v322);
  int v36 = sub_10029C0D8((uint64_t)v322);
  if (!v36)
  {
    *(_DWORD *)v324 = *(_DWORD *)sub_10029C1C4((uint64_t)v322);
    uint64_t v37 = &v324[4];
    goto LABEL_8;
  }
  if (v36 != 1)
  {
    sub_100390FF0((uint64_t)v321, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
    goto LABEL_11;
  }
  *(_DWORD *)&v324[8] = *(_DWORD *)sub_10029C1C4((uint64_t)v322);
  uint64_t v37 = &v324[12];
LABEL_8:
  *uint64_t v37 = 0;
  sub_100007A48((uint64_t)v34, &qword_1007137F0);
  uint64_t v38 = v314;
  uint64_t v39 = (uint64_t)v297;
  v268 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
  uint64_t v269 = v314 + 56;
  v268(v297, 1, 1, v300);
  if (*(uint64_t *)(*(void *)v337 + 24) <= 0)
  {
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v298 + 56);
    unint64_t v270 = (v298 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
LABEL_17:
    uint64_t v46 = v304;
    v45(v304, 1, 1, v35);
    sub_100007A48(v46, &qword_1007137F0);
    uint64_t v47 = v303;
    v45(v303, 1, 1, v35);
    sub_100007A48(v47, &qword_1007137F0);
    sub_100390E34();
    swift_allocError();
    *long long v48 = 0;
    swift_willThrow();
    goto LABEL_180;
  }
  uint64_t v292 = 0;
  uint64_t v262 = 0;
  unint64_t v299 = v298 + 56;
  v264 = (void *)(v313 + 48);
  v265 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v255 = (void (**)(char *, char *, uint64_t))(v313 + 16);
  v256 = (void (**)(char *, uint64_t, uint64_t))(v313 + 32);
  v259 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v313 + 56);
  v260 = (void (**)(char *, uint64_t))(v313 + 8);
  v252 = &v324[16];
  v253 = &v324[536];
  v251 = &v324[208];
  uint64_t v40 = v300;
  uint64_t v294 = v35;
LABEL_23:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_10038BC30();
  }
  long long v58 = *(void **)v337;
  uint64_t v59 = *(unsigned __int8 *)(v298 + 80);
  uint64_t v60 = *(void *)(v298 + 72);
  sub_10038B6F4(*(void *)v337 + ((v59 + 40) & ~v59) + v60 * *(void *)(*(void *)v337 + 32), v304, type metadata accessor for Response);
  uint64_t v61 = v58[4];
  BOOL v62 = __OFADD__(v61, 1);
  uint64_t v63 = v61 + 1;
  if (v62)
  {
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  uint64_t v64 = v58[3];
  if (v63 >= v58[2]) {
    uint64_t v63 = 0;
  }
  v58[4] = v63;
  if (__OFSUB__(v64, 1)) {
    goto LABEL_187;
  }
  v58[3] = v64 - 1;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v299;
  uint64_t v65 = v304;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))v299)(v304, 0, 1, v35);
  uint64_t v66 = v65;
  uint64_t v67 = v303;
  sub_10038B6F4(v66, v303, type metadata accessor for Response);
  sub_100390DA4(v67, v302, type metadata accessor for Response);
  long long v68 = v308;
  swift_beginAccess();
  long long v69 = *v68;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *long long v68 = v69;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    long long v69 = (void *)sub_100383190(0, v69[2] + 1, 1, (unint64_t)v69);
    *v308 = v69;
  }
  unint64_t v72 = v69[2];
  unint64_t v71 = v69[3];
  if (v72 >= v71 >> 1)
  {
    long long v69 = (void *)sub_100383190(v71 > 1, v72 + 1, 1, (unint64_t)v69);
    *v308 = v69;
  }
  v69[2] = v72 + 1;
  sub_10038B6F4(v302, (uint64_t)v69 + ((v59 + 32) & ~v59) + v72 * v60, type metadata accessor for Response);
  swift_endAccess();
  uint64_t v73 = v303;
  uint64_t v35 = v294;
  v45(v303, 0, 1, v294);
  uint64_t v74 = v73;
  uint64_t v75 = v301;
  sub_10038B6F4(v74, v301, type metadata accessor for Response);
  uint64_t v76 = v75;
  uint64_t v77 = v296;
  sub_100390DA4(v76, v296, type metadata accessor for Response);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100390288(v77, type metadata accessor for Response);
    sub_100390E34();
    swift_allocError();
    unsigned char *v231 = 2;
    swift_willThrow();
    uint64_t v232 = v301;
    goto LABEL_179;
  }
  sub_100382460(v77, (uint64_t)v320);
  if (v292 == 99999)
  {
    sub_100390E34();
    swift_allocError();
    char v234 = 3;
    goto LABEL_177;
  }
  unint64_t v78 = v299 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  ++v292;
  sub_100382460((uint64_t)v320, (uint64_t)v319);
  int v79 = sub_10029C0D8((uint64_t)v319);
  uint64_t v80 = (uint64_t)v295;
  unint64_t v270 = v78;
  switch(v79)
  {
    case 2:
      uint64_t v81 = sub_10029C1C4((uint64_t)v319);
      uint64_t v82 = v262 + 1;
      if (__OFADD__(v262, 1)) {
        goto LABEL_188;
      }
      if (v82 < 50)
      {
        sub_100382518(v81, (uint64_t)v318);
        int v83 = sub_10028900C((uint64_t)v318);
        uint64_t v262 = v82;
        switch(v83)
        {
          case 1:
            uint64_t v139 = sub_100289074((uint64_t)v318);
            long long v140 = *(_OWORD *)v139;
            uint64_t v141 = *(void *)(v139 + 16);
            uint64_t v142 = *(void *)(v139 + 24);
            unint64_t v143 = *(unsigned int *)(v139 + 32) | ((unint64_t)(*(unsigned __int16 *)(v139 + 36) | (*(unsigned __int8 *)(v139 + 38) << 16)) << 32);
            long long v313 = *(_OWORD *)(v139 + 40);
            long long v314 = v140;
            long long v144 = *(_OWORD *)(v139 + 56);
            long long v311 = *(_OWORD *)(v139 + 72);
            long long v312 = v144;
            long long v310 = *(_OWORD *)(v139 + 88);
            uint64_t v145 = *(void *)(v139 + 104);
            uint64_t v146 = *(void *)(v139 + 112);
            sub_100390288(v301, type metadata accessor for Response);
            sub_1000618AC(*(uint64_t *)&v324[392], *(uint64_t *)&v324[400], *(uint64_t *)&v324[408], *(uint64_t *)&v324[416], *(uint64_t *)&v324[424], *(uint64_t *)&v324[432]);
            *(_OWORD *)&v324[392] = v314;
            uint64_t v40 = v300;
            *(void *)&v324[408] = v141;
            *(void *)&v324[416] = v142;
            *(_OWORD *)&v324[432] = v313;
            *(_OWORD *)&v324[448] = v312;
            *(_OWORD *)&v324[464] = v311;
            *(_OWORD *)&v324[480] = v310;
            *(void *)&v324[424] = v143;
            *(void *)&v324[496] = v145;
            *(void *)&v324[504] = v146;
            uint64_t v35 = v294;
            goto LABEL_22;
          case 2:
            uint64_t v147 = *(void *)sub_100289074((uint64_t)v318);
            sub_100390288(v301, type metadata accessor for Response);
            *(void *)&v324[528] = v147;
            unsigned char *v253 = 0;
            goto LABEL_22;
          case 3:
            int v148 = *(_DWORD *)sub_100289074((uint64_t)v318);
            sub_100390288(v301, type metadata accessor for Response);
            *(_DWORD *)&v324[8] = v148;
            v324[12] = 0;
            goto LABEL_22;
          case 4:
            unint64_t v149 = *(void *)sub_100289074((uint64_t)v318);
            if (!HIDWORD(v149))
            {
              sub_100390288(v301, type metadata accessor for Response);
              *(_DWORD *)&v324[540] = v149;
              v253[8] = 0;
              goto LABEL_22;
            }
            sub_100390D50();
            swift_allocError();
            *(void *)uint64_t v250 = v149;
            *(void *)(v250 + 8) = 0;
            *(unsigned char *)(v250 + 16) = 2;
LABEL_185:
            swift_willThrow();
            goto LABEL_178;
          case 5:
            uint64_t v150 = sub_100289074((uint64_t)v318);
            sub_100390288(v301, type metadata accessor for Response);
            if (*(unsigned char *)(v150 + 177))
            {
              sub_10013A988(v150, (uint64_t)v316);
              UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v316);
              uint64_t v151 = (uint64_t)v251;
            }
            else
            {
              sub_10013A988(v150, (uint64_t)v316);
              UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v316);
              uint64_t v151 = (uint64_t)v252;
            }
            sub_10001FDF0(v151, (uint64_t)v323, &qword_100713030);
            sub_100390F30((uint64_t)v323);
            sub_10001FDF0((uint64_t)v316, v151, &qword_100713030);
            goto LABEL_22;
          case 6:
          case 9:
          case 10:
            sub_100289074((uint64_t)v318);
            sub_100382460((uint64_t)v320, (uint64_t)v316);
            sub_100390E88();
            swift_allocError();
            long long v240 = v316[3];
            long long v242 = v316[0];
            long long v241 = v316[1];
            *(_OWORD *)(v243 + 32) = v316[2];
            *(_OWORD *)(v243 + 48) = v240;
            *(_OWORD *)uint64_t v243 = v242;
            *(_OWORD *)(v243 + 16) = v241;
            long long v244 = v316[7];
            long long v246 = v316[4];
            long long v245 = v316[5];
            *(_OWORD *)(v243 + 96) = v316[6];
            *(_OWORD *)(v243 + 112) = v244;
            *(_OWORD *)(v243 + 64) = v246;
            *(_OWORD *)(v243 + 80) = v245;
            long long v248 = v316[9];
            long long v247 = v316[10];
            long long v249 = v316[8];
            *(_WORD *)(v243 + 176) = v317;
            *(_OWORD *)(v243 + 144) = v248;
            *(_OWORD *)(v243 + 160) = v247;
            *(_OWORD *)(v243 + 128) = v249;
            goto LABEL_185;
          case 7:
            v271 = v45;
            uint64_t v152 = sub_100289074((uint64_t)v318);
            uint64_t v153 = *(void *)(v152 + 8);
            uint64_t v154 = *(void *)(v152 + 16);
            uint64_t v155 = *(void *)(v152 + 24);
            unsigned int v156 = *(unsigned __int8 *)(v152 + 32);
            uint64_t v325 = *(void *)v152;
            uint64_t v326 = v153;
            uint64_t v327 = v154;
            uint64_t v328 = v155;
            char v329 = v156;
            sub_100382460((uint64_t)v320, (uint64_t)v323);
            uint64_t v157 = sub_10029C1C4((uint64_t)v323);
            sub_100390FF0(v157, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038E81C);
            *(void *)&long long v314 = StreamingKind.sectionSpecifier.getter();
            *(void *)&long long v313 = v158;
            LODWORD(v312) = v159;
            if (v156 >> 6)
            {
              if (v156 >> 6 != 1)
              {
                LODWORD(v153) = 0;
                LOBYTE(v221) = 1;
                goto LABEL_163;
              }
              int v160 = v156 & 1;
              uint64_t v153 = v155;
            }
            else
            {
              int v160 = v154 & 1;
            }
            if (v153 < 0) {
              int v160 = 1;
            }
            if (v153 > 0xFFFFFFFFLL) {
              int v221 = 1;
            }
            else {
              int v221 = v160;
            }
            if (v221) {
              LODWORD(v153) = 0;
            }
LABEL_163:
            uint64_t v222 = type metadata accessor for MessageData.BodyData();
            v223 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v222 - 8) + 56);
            uint64_t v224 = (uint64_t)v273;
            v223(v273, 1, 1, v222);
            uint64_t v225 = (uint64_t)v285;
            uint64_t v226 = (uint64_t)&v285[*(int *)(v287 + 24)];
            v223((char *)v226, 1, 1, v222);
            uint64_t v227 = v313;
            *(void *)uint64_t v225 = v314;
            *(void *)(v225 + 8) = v227;
            *(unsigned char *)(v225 + 16) = v312;
            *(_DWORD *)(v225 + 20) = v153;
            *(unsigned char *)(v225 + 24) = v221;
            sub_10036C7E8(v224, v226, &qword_1007131E8);
            sub_10038B6F4(v225, v274, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection);
            unint64_t v228 = *(void *)&v324[200];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v228 = sub_1003837A0(0, *(void *)(v228 + 16) + 1, 1, v228);
            }
            uint64_t v39 = (uint64_t)v297;
            uint64_t v40 = v300;
            uint64_t v35 = v294;
            uint64_t v45 = v271;
            unint64_t v230 = *(void *)(v228 + 16);
            unint64_t v229 = *(void *)(v228 + 24);
            if (v230 >= v229 >> 1) {
              unint64_t v228 = sub_1003837A0(v229 > 1, v230 + 1, 1, v228);
            }
            *(void *)(v228 + 16) = v230 + 1;
            sub_10038B6F4(v274, v228+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ *(void *)(v286 + 72) * v230, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection);
            sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
            sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
            *(void *)&v324[200] = v228;
            goto LABEL_66;
          case 8:
            uint64_t v161 = *(void *)sub_100289074((uint64_t)v318);
            sub_100390288(v301, type metadata accessor for Response);
            *(void *)&v324[552] = v161;
            v253[24] = 0;
            goto LABEL_22;
          case 11:
            v271 = v45;
            uint64_t v162 = *(void *)sub_100289074((uint64_t)v318);
            sub_100382460((uint64_t)v320, (uint64_t)v323);
            uint64_t v163 = sub_10029C1C4((uint64_t)v323);
            sub_100390FF0(v163, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038E81C);
            sub_100390FF0(v163, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038E81C);
            sub_100390EDC();
            uint64_t v164 = sub_1005E2280();
            uint64_t v258 = *(void *)(v162 + 16);
            if (!v258)
            {
              uint64_t v40 = v300;
              goto LABEL_152;
            }
            uint64_t v165 = 0;
            uint64_t v257 = v162 + 32;
LABEL_97:
            uint64_t v309 = v164 + 56;
            v305 = (void *)v164;
            break;
          case 12:
            v217 = (uint64_t *)sub_100289074((uint64_t)v318);
            uint64_t v218 = *v217;
            uint64_t v219 = v217[1];
            sub_100390288(v301, type metadata accessor for Response);
            swift_bridgeObjectRelease();
            *(void *)&v324[568] = v218;
            *(void *)&v324[576] = v219;
            goto LABEL_22;
          default:
            uint64_t v84 = *(void *)sub_100289074((uint64_t)v318);
            sub_100382460((uint64_t)v320, (uint64_t)v323);
            uint64_t v85 = sub_10029C1C4((uint64_t)v323);
            sub_100390FF0(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038E81C);
            sub_100390FF0(v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038E81C);
            sub_100390F9C();
            uint64_t v86 = sub_1005E2280();
            uint64_t v315 = v86;
            uint64_t v87 = *(void *)(v84 + 16);
            if (v87)
            {
              v88 = (Swift::Int *)(v84 + 40);
              do
              {
                Swift::Int v89 = *(v88 - 1);
                Swift::Int v90 = *v88;
                swift_bridgeObjectRetain();
                sub_10038C250((Swift::Int *)v316, v89, v90);
                swift_bridgeObjectRelease();
                v88 += 2;
                --v87;
              }
              while (v87);
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              uint64_t v91 = v315;
            }
            else
            {
              uint64_t v91 = v86;
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              sub_100382460((uint64_t)v320, (uint64_t)v316);
              uint64_t v220 = sub_10029C1C4((uint64_t)v316);
              sub_100390FF0(v220, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038F05C);
            }
            uint64_t v40 = v300;
            sub_100390288(v301, type metadata accessor for Response);
            swift_bridgeObjectRelease();
            *(void *)&v324[512] = v91;
            goto LABEL_22;
        }
        while (1)
        {
          v166 = (uint64_t *)(v257 + 24 * v165);
          uint64_t v167 = *v166;
          unint64_t v169 = *((unsigned int *)v166 + 2);
          uint64_t v168 = *((unsigned int *)v166 + 3);
          uint64_t v170 = *((unsigned int *)v166 + 4);
          uint64_t v171 = *((unsigned __int16 *)v166 + 10);
          uint64_t v172 = *((unsigned __int8 *)v166 + 22);
          uint64_t v266 = v165 + 1;
          sub_1005E33F0();
          *(void *)&long long v313 = v170;
          unint64_t v261 = v169 | (v168 << 32);
          unint64_t v267 = v267 & 0xFF00000000000000 | v170 & 0xFF000000FFFFFFFFLL | ((unint64_t)(unsigned __int16)v171 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v172 << 48);
          SocketAddressError.FailedToParseIPByteBuffer.hash(into:)();
          Swift::Int v173 = sub_1005E3470();
          uint64_t v174 = v309;
          uint64_t v175 = -1 << *(unsigned char *)(v164 + 32);
          unint64_t v176 = v173 & ~v175;
          uint64_t v177 = *(void *)(v309 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176;
          *(void *)&long long v312 = v171;
          *(void *)&long long v311 = v172;
          *(void *)&long long v310 = v172 | (v171 << 8);
          *(void *)&long long v314 = v167;
          uint64_t v263 = v168;
          if ((v177 & 1) == 0)
          {
            swift_retain();
            uint64_t v40 = v300;
            goto LABEL_118;
          }
          uint64_t v178 = ~v175;
          int v179 = v168 - v169;
          swift_retain();
          swift_bridgeObjectRetain();
          v306 = (void *)(v167 + 24);
          swift_beginAccess();
          LODWORD(v307) = v179;
          while (1)
          {
            uint64_t v180 = *(void *)(v164 + 48) + 24 * v176;
            uint64_t v181 = *(unsigned int *)(v180 + 8);
            uint64_t v182 = *(unsigned int *)(v180 + 12);
            if (v182 - v181 == v179) {
              break;
            }
LABEL_100:
            unint64_t v176 = (v176 + 1) & v178;
            if (((*(void *)(v174 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v40 = v300;
LABEL_118:
              char v192 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v315 = v164;
              unint64_t v193 = *(void *)(v164 + 16);
              unint64_t v194 = *(void *)(v164 + 24);
              swift_retain();
              if (v194 <= v193)
              {
                v306 = (void *)v169;
                if (v192) {
                  sub_10038C7A0();
                }
                else {
                  sub_10038D38C();
                }
                uint64_t v35 = v294;
                unint64_t v195 = v254;
                uint64_t v196 = (void)v312 << 32;
                uint64_t v197 = (void)v311 << 48;
                uint64_t v164 = v315;
                sub_1005E33F0();
                unint64_t v198 = v195 & 0xFF00000000000000 | v313 | v196 | v197;
                uint64_t v199 = v314;
                unint64_t v254 = v198;
                SocketAddressError.FailedToParseIPByteBuffer.hash(into:)();
                Swift::Int v200 = sub_1005E3470();
                uint64_t v201 = -1 << *(unsigned char *)(v164 + 32);
                unint64_t v176 = v200 & ~v201;
                uint64_t v309 = v164 + 56;
                if ((*(void *)(v164 + 56 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176))
                {
                  uint64_t v307 = ~v201;
                  int v202 = v263 - v306;
                  v305 = (void *)(v199 + 24);
                  swift_beginAccess();
                  do
                  {
                    uint64_t v203 = v164;
                    uint64_t v204 = *(void *)(v164 + 48) + 24 * v176;
                    uint64_t v205 = *(unsigned int *)(v204 + 8);
                    uint64_t v206 = *(unsigned int *)(v204 + 12);
                    if (v206 - v205 == v202)
                    {
                      uint64_t v207 = *(void *)v204;
                      uint64_t v208 = *(unsigned __int16 *)(v204 + 20);
                      uint64_t v209 = *(unsigned __int8 *)(v204 + 22);
                      BOOL v210 = *(_DWORD *)(v204 + 16) == v313 && v208 == v312;
                      BOOL v211 = v210 && v209 == v311;
                      if (v211 && v207 == (void)v314) {
                        goto LABEL_192;
                      }
                      swift_beginAccess();
                      if (!memcmp((const void *)(*(void *)(v207 + 24) + (v209 | (v208 << 8)) + v205), (char *)v306 + v310 + *v305, v206 - v205))goto LABEL_192; {
                    }
                      }
                    unint64_t v176 = (v176 + 1) & v307;
                    uint64_t v164 = v203;
                  }
                  while (((*(void *)(v309 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v176) & 1) != 0);
                  uint64_t v40 = v300;
                  uint64_t v35 = v294;
                }
                LODWORD(v169) = v306;
              }
              else
              {
                uint64_t v35 = v294;
                if ((v192 & 1) == 0)
                {
                  sub_10038CED0();
                  uint64_t v164 = v315;
                }
              }
              int v213 = v263;
              *(void *)(v164 + ((v176 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v176;
              uint64_t v214 = *(void *)(v164 + 48) + 24 * v176;
              *(void *)uint64_t v214 = v314;
              *(_DWORD *)(v214 + 8) = v169;
              *(_DWORD *)(v214 + 12) = v213;
              *(_DWORD *)(v214 + 16) = v313;
              *(_WORD *)(v214 + 20) = v312;
              *(unsigned char *)(v214 + 22) = v311;
              uint64_t v215 = *(void *)(v164 + 16);
              BOOL v62 = __OFADD__(v215, 1);
              uint64_t v216 = v215 + 1;
              if (!v62)
              {
                *(void *)(v164 + 16) = v216;
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v165 = v266;
                if (v266 == v258) {
                  goto LABEL_152;
                }
                goto LABEL_97;
              }
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
          }
          v183 = (void *)v169;
          uint64_t v184 = *(void *)v180;
          uint64_t v185 = *(unsigned __int16 *)(v180 + 20);
          uint64_t v186 = *(unsigned __int8 *)(v180 + 22);
          BOOL v187 = *(_DWORD *)(v180 + 16) == v313 && v185 == v312;
          BOOL v188 = v187 && v186 == v311;
          if (!v188 || v184 != (void)v314) {
            break;
          }
          swift_release();
          uint64_t v164 = (uint64_t)v305;
LABEL_115:
          swift_bridgeObjectRelease();
          uint64_t v165 = v266;
          uint64_t v40 = v300;
          uint64_t v35 = v294;
          if (v266 == v258)
          {
LABEL_152:
            sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
            sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
            sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
            sub_100390288(v301, type metadata accessor for Response);
            swift_bridgeObjectRelease();
            *(void *)&v324[520] = v164;
            uint64_t v39 = (uint64_t)v297;
LABEL_21:
            uint64_t v45 = v271;
LABEL_22:
            if (*(uint64_t *)(*(void *)v337 + 24) <= 0) {
              goto LABEL_17;
            }
            goto LABEL_23;
          }
        }
        swift_beginAccess();
        v190 = (const void *)(*(void *)(v184 + 24) + (v186 | (v185 << 8)) + v181);
        unint64_t v169 = (unint64_t)v183;
        int v191 = memcmp(v190, (char *)v183 + v310 + *v306, v182 - v181);
        uint64_t v164 = (uint64_t)v305;
        uint64_t v174 = v309;
        int v179 = v307;
        if (!v191)
        {
          swift_release();
          goto LABEL_115;
        }
        goto LABEL_100;
      }
      sub_100390E34();
      swift_allocError();
      char v234 = 4;
LABEL_177:
      char *v233 = v234;
      swift_willThrow();
      sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
LABEL_178:
      uint64_t v232 = v301;
LABEL_179:
      sub_100390288(v232, type metadata accessor for Response);
LABEL_180:
      uint64_t v42 = &qword_1007138E8;
      uint64_t v43 = v39;
      break;
    case 3:
      v271 = v45;
      uint64_t v106 = sub_10029C1C4((uint64_t)v319);
      uint64_t v107 = *(void *)(v106 + 8);
      uint64_t v109 = *(void *)(v106 + 16);
      uint64_t v108 = *(void *)(v106 + 24);
      unsigned int v110 = *(unsigned __int8 *)(v106 + 32);
      uint64_t v330 = *(void *)v106;
      uint64_t v331 = v107;
      uint64_t v332 = v109;
      uint64_t v333 = v108;
      char v334 = v110;
      uint64_t v111 = v39;
      uint64_t v112 = v282;
      sub_1000079E4(v111, v282, &qword_1007138E8);
      if ((*v265)(v112, 1, v40) == 1)
      {
        sub_100007A48(v112, &qword_1007138E8);
        if (v110 >> 6)
        {
          uint64_t v34 = v297;
          if (v110 >> 6 != 1)
          {
            LODWORD(v114) = 0;
            goto LABEL_19;
          }
          char v113 = v110 | (v108 < 0) | (v108 > 0xFFFFFFFFLL);
          if (v110 & 1 | (v108 < 0) | (v108 > 0xFFFFFFFFLL)) {
            uint64_t v114 = 0;
          }
          else {
            uint64_t v114 = v108;
          }
          if (v110 & 1 | (v108 < 0) | (v108 > 0xFFFFFFFFLL)) {
            uint64_t v115 = 0;
          }
          else {
            uint64_t v115 = v114;
          }
          if (v110) {
            goto LABEL_18;
          }
        }
        else
        {
          char v113 = v109 | (v107 < 0) | (v107 > 0xFFFFFFFFLL);
          if (v109 & 1 | (v107 < 0) | (v107 > 0xFFFFFFFFLL)) {
            uint64_t v114 = 0;
          }
          else {
            uint64_t v114 = v107;
          }
          if (v109 & 1 | (v107 < 0) | (v107 > 0xFFFFFFFFLL)) {
            uint64_t v115 = 0;
          }
          else {
            uint64_t v115 = v114;
          }
          uint64_t v34 = v297;
          if (v109)
          {
LABEL_18:
            if (v113)
            {
LABEL_19:
              char v49 = 1;
LABEL_20:
              long long v50 = StreamingKind.sectionSpecifier.getter();
              uint64_t v52 = v51;
              char v54 = v53;
              sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
              sub_100390288(v301, type metadata accessor for Response);
              sub_100007A48((uint64_t)v34, &qword_1007138E8);
              uint64_t v55 = v300;
              uint64_t v56 = v277;
              (*v259)(&v277[*(int *)(v300 + 24)], 1, 1, v293);
              *(void *)uint64_t v56 = v50;
              *((void *)v56 + 1) = v52;
              v56[16] = v54;
              uint64_t v40 = v55;
              *((_DWORD *)v56 + 5) = v114;
              v56[24] = v49;
              v268(v56, 0, 1, v55);
              uint64_t v57 = (uint64_t)v56;
              uint64_t v39 = (uint64_t)v297;
              sub_10001FDF0(v57, (uint64_t)v297, &qword_1007138E8);
              uint64_t v35 = v294;
              goto LABEL_21;
            }
            goto LABEL_182;
          }
          uint64_t v108 = v107;
        }
        if ((v113 & 1) == 0 && v108 == v115)
        {
          char v49 = 0;
          goto LABEL_20;
        }
LABEL_182:
        sub_100390E34();
        swift_allocError();
        unsigned char *v239 = 9;
        swift_willThrow();
        sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
        sub_100390288(v301, type metadata accessor for Response);
        uint64_t v42 = &qword_1007138E8;
        goto LABEL_12;
      }
      sub_100007A48(v112, &qword_1007138E8);
      sub_100390E34();
      swift_allocError();
      unsigned char *v236 = 6;
      swift_willThrow();
      sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
      sub_100390288(v301, type metadata accessor for Response);
      uint64_t v43 = (uint64_t)v297;
LABEL_174:
      uint64_t v42 = &qword_1007138E8;
      break;
    case 4:
      v271 = v45;
      sub_10029C1C4((uint64_t)v319);
      uint64_t v116 = v284;
      sub_1000079E4(v39, v284, &qword_1007138E8);
      if ((*v265)(v116, 1, v40) == 1)
      {
        sub_100382460((uint64_t)v320, (uint64_t)v318);
        sub_10029C1C4((uint64_t)v318);
        swift_retain();
        sub_100007A48(v116, &qword_1007138E8);
        sub_100390E34();
        swift_allocError();
        unsigned char *v237 = 7;
        swift_willThrow();
        sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
        sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
        sub_100390288(v301, type metadata accessor for Response);
        uint64_t v43 = (uint64_t)v297;
        uint64_t v42 = &qword_1007138E8;
        break;
      }
      uint64_t v117 = v116;
      uint64_t v118 = v288;
      sub_10038B6F4(v117, v288, type metadata accessor for StreamedBodySection);
      uint64_t v119 = v118 + *(int *)(v40 + 24);
      uint64_t v120 = v280;
      sub_1000079E4(v119, v280, &qword_1007138E0);
      uint64_t v121 = v293;
      *(void *)&long long v314 = *v264;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v120, 1, v293) == 1)
      {
        sub_100382460((uint64_t)v320, (uint64_t)v323);
        sub_10029C1C4((uint64_t)v323);
        swift_retain();
        sub_100007A48(v120, &qword_1007138E0);
        uint64_t v122 = (uint64_t)v275;
        sub_1005E1790();
        (*v259)((char *)v122, 0, 1, v121);
        sub_10036C7E8(v122, v119, &qword_1007138E0);
      }
      else
      {
        sub_100382460((uint64_t)v320, (uint64_t)v323);
        sub_10029C1C4((uint64_t)v323);
        swift_retain();
        sub_100007A48(v120, &qword_1007138E0);
      }
      swift_beginAccess();
      v129 = v281;
      sub_1005E1770();
      v130 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v314;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v119, 1, v121) == 1) {
        goto LABEL_190;
      }
      sub_1005E17A0();
      v131 = *v260;
      (*v260)(v129, v121);
      uint64_t v132 = v119;
      uint64_t v133 = v279;
      sub_1000079E4(v132, v279, &qword_1007138E0);
      int v134 = v130(v133, 1, v121);
      uint64_t v135 = (uint64_t)v297;
      uint64_t v40 = v300;
      uint64_t v35 = v294;
      if (v134 == 1)
      {
LABEL_191:
        __break(1u);
LABEL_192:
        sub_1005E3370();
        __break(1u);
        JUMPOUT(0x100389194);
      }
      uint64_t v136 = v133;
      uint64_t v137 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
      v131((char *)v136, v121);
      if (v137 <= 999999)
      {
        sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
        sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
        sub_100390288(v301, type metadata accessor for Response);
        uint64_t v39 = v135;
        sub_100007A48(v135, &qword_1007138E8);
        uint64_t v138 = v288;
        sub_100390DA4(v288, v135, type metadata accessor for StreamedBodySection);
        v268((char *)v135, 0, 1, v40);
        sub_100390288(v138, type metadata accessor for StreamedBodySection);
        goto LABEL_21;
      }
      sub_100390E34();
      swift_allocError();
      unsigned char *v238 = 5;
      swift_willThrow();
      sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
      sub_100390FF0((uint64_t)v320, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
      sub_100390288(v301, type metadata accessor for Response);
      sub_100007A48(v135, &qword_1007138E8);
      sub_100390288(v288, type metadata accessor for StreamedBodySection);
      goto LABEL_14;
    case 5:
      uint64_t v92 = v283;
      sub_1000079E4(v39, v283, &qword_1007138E8);
      if ((*v265)(v92, 1, v40) != 1)
      {
        v271 = v45;
        sub_100007A48(v39, &qword_1007138E8);
        uint64_t v93 = v289;
        sub_10038B6F4(v92, v289, type metadata accessor for StreamedBodySection);
        v268((char *)v39, 1, 1, v40);
        uint64_t v94 = v290;
        sub_100390DA4(v93, v290, type metadata accessor for StreamedBodySection);
        uint64_t v95 = *(void *)v94;
        uint64_t v96 = *(void *)(v94 + 8);
        uint64_t v97 = v40;
        unsigned __int8 v98 = *(unsigned char *)(v94 + 16);
        int v99 = *(_DWORD *)(v94 + 20);
        LODWORD(v313) = *(unsigned __int8 *)(v94 + 24);
        sub_1000079E4(v94 + *(int *)(v97 + 24), v80, &qword_1007138E0);
        uint64_t v100 = v80;
        uint64_t v101 = v80;
        uint64_t v102 = v293;
        int v103 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v264)(v100, 1, v293);
        LODWORD(v314) = v99;
        if (v103 == 1)
        {
          uint64_t v104 = type metadata accessor for MessageData.BodyData();
          uint64_t v105 = (uint64_t)v278;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v278, 1, 1, v104);
          swift_bridgeObjectRetain();
          sub_10013B5CC(v96, v98);
        }
        else
        {
          v123 = v276;
          (*v256)(v276, v101, v102);
          uint64_t v105 = (uint64_t)v278;
          (*v255)(v278, v123, v102);
          swift_bridgeObjectRetain();
          sub_10013B5CC(v96, v98);
          (*v260)(v123, v102);
          uint64_t v104 = type metadata accessor for MessageData.BodyData();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v105, 0, 1, v104);
        }
        uint64_t v124 = (uint64_t)v285;
        uint64_t v125 = (uint64_t)&v285[*(int *)(v287 + 24)];
        type metadata accessor for MessageData.BodyData();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v125, 1, 1, v104);
        *(void *)uint64_t v124 = v95;
        *(void *)(v124 + 8) = v96;
        *(unsigned char *)(v124 + 16) = v98;
        *(_DWORD *)(v124 + 20) = v314;
        *(unsigned char *)(v124 + 24) = v313;
        sub_10036C7E8(v105, v125, &qword_1007131E8);
        sub_10038B6F4(v124, v291, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection);
        sub_100390288(v290, type metadata accessor for StreamedBodySection);
        unint64_t v126 = *(void *)&v324[200];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v126 = sub_1003837A0(0, *(void *)(v126 + 16) + 1, 1, v126);
        }
        uint64_t v39 = (uint64_t)v297;
        uint64_t v40 = v300;
        uint64_t v35 = v294;
        uint64_t v45 = v271;
        unint64_t v128 = *(void *)(v126 + 16);
        unint64_t v127 = *(void *)(v126 + 24);
        if (v128 >= v127 >> 1) {
          unint64_t v126 = sub_1003837A0(v127 > 1, v128 + 1, 1, v126);
        }
        *(void *)(v126 + 16) = v128 + 1;
        sub_10038B6F4(v291, v126+ ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80))+ *(void *)(v286 + 72) * v128, (uint64_t (*)(void))type metadata accessor for MessageData.BodySection);
        *(void *)&v324[200] = v126;
        sub_100390288(v289, type metadata accessor for StreamedBodySection);
LABEL_66:
        sub_100390288(v301, type metadata accessor for Response);
        goto LABEL_22;
      }
      sub_100007A48(v92, &qword_1007138E8);
      sub_100390E34();
      swift_allocError();
      unsigned char *v235 = 8;
      swift_willThrow();
      sub_100390288(v301, type metadata accessor for Response);
      uint64_t v43 = v39;
      goto LABEL_174;
    case 6:
      sub_100390288(v301, type metadata accessor for Response);
      sub_100007A48(v39, &qword_1007138E8);
      memcpy(v272, v324, 0x248uLL);
      type metadata accessor for UntaggedResponse(0);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for Response(0);
      return swift_storeEnumTagMultiPayload();
    default:
      sub_10029C1C4((uint64_t)v319);
      sub_100390E34();
      swift_allocError();
      char v234 = 2;
      goto LABEL_177;
  }
LABEL_13:
  sub_100007A48(v43, v42);
LABEL_14:
  memcpy(v323, v324, sizeof(v323));
  return sub_100061150((uint64_t)v323);
}

uint64_t sub_1003891E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = *v1;
  uint64_t v5 = *(void *)(*v1 + 24);
  Swift::Int v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (*(void *)(*v1 + 16) < v6 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_10038B34C(v6, 0);
    }
    uint64_t v8 = *(void *)(type metadata accessor for Response(0) - 8);
    return sub_10038BDD8(*v1 + 16, *v1 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v3);
  }
  return result;
}

BOOL ServerResponseTranscoder.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) == 0;
}

uint64_t ServerResponseFramingParser.framingParser.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10038BD20(v1, a1);
}

uint64_t ServerResponseFramingParser.framingParser.setter(uint64_t a1)
{
  return sub_10038BD7C(a1, v1);
}

uint64_t ServerResponseFramingParser.byteCountNeededToCompleteFrame.getter()
{
  return *(void *)(v0 + 168);
}

double ServerResponseFramingParser.init()@<D0>(uint64_t a1@<X8>)
{
  FramingParser.init(bufferSizeLimit:)(6000000, (uint64_t)v20);
  long long v18 = v20[1];
  long long v19 = v20[0];
  uint64_t v2 = v21;
  int v3 = v23;
  __int16 v4 = v24;
  char v5 = v25;
  uint64_t v6 = v26;
  sub_10038D730((uint64_t)v27);
  uint64_t v7 = v28;
  char v8 = v29;
  __int16 v9 = v32;
  int v10 = v31;
  char v34 = 1;
  double result = v22;
  char v12 = v33;
  long long v13 = v27[0];
  long long v14 = v27[1];
  long long v15 = v27[2];
  long long v16 = v27[3];
  long long v17 = v30;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v18;
  *(void *)(a1 + 32) = v2;
  *(double *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = v3;
  *(_WORD *)(a1 + 52) = v4;
  *(unsigned char *)(a1 + 54) = v5;
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 112) = v16;
  *(void *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 144) = v17;
  *(unsigned char *)(a1 + 166) = v12;
  *(_WORD *)(a1 + 164) = v9;
  *(_DWORD *)(a1 + 160) = v10;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v34;
  *(void *)(a1 + 184) = _swiftEmptyArrayStorage;
  return result;
}

BOOL ServerResponseFramingParser.isEmpty.getter()
{
  return *(_DWORD *)(v0 + 44) == *(_DWORD *)(v0 + 40) && *(void *)(*(void *)(v0 + 184) + 16) == 0;
}

uint64_t sub_10038940C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1005E1F00();
  uint64_t result = sub_100377BAC(v6, a1, a2);
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(a3 + 40);
    BOOL v12 = __CFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (!v12)
    {
      *(void *)(a3 + 40) = v13;
      return v10;
    }
    __break(1u);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 48);
    BOOL v12 = __CFADD__(v14, 1);
    uint64_t v15 = v14 + 1;
    if (!v12)
    {
      *(void *)(a3 + 48) = v15;
      sub_100377C94(v6, a1, a2);
      return a1;
    }
  }
  __break(1u);
  return result;
}

uint64_t ServerResponseFramingParser.append(_:)()
{
  return sub_1005E1750();
}

uint64_t sub_100389514(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ServerResponseFramingParser.Frame(0);
  __chkstk_darwin();
  if (a1) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = 0;
  }
  FramingParser.appendAndFrameBytes(_:)(a1, v4);
  sub_1003896F8(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003896F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ServerResponseFramingParser.Frame(0);
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  uint64_t result = __chkstk_darwin();
  long long v30 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    v24[1] = a1;
    uint64_t v8 = (uint64_t *)(a1 + 56);
    long long v25 = xmmword_1005F6950;
    do
    {
      uint64_t v10 = *(v8 - 3);
      unint64_t v11 = *(v8 - 2);
      unint64_t v13 = *(v8 - 1);
      uint64_t v12 = *v8;
      v8 += 4;
      switch(v13 >> 62)
      {
        case 1uLL:
          *(void *)(v1 + 168) = v10;
          *(unsigned char *)(v1 + 176) = 0;
          break;
        case 2uLL:
          uint64_t v31 = v10;
          unint64_t v32 = v11;
          int v33 = v13;
          __int16 v34 = WORD2(v13);
          char v35 = BYTE6(v13);
          sub_100389C14(&v31);
          BOOL v9 = v12 < 0;
          *(void *)(v1 + 168) = v12 & ~(v12 >> 63);
          goto LABEL_4;
        case 3uLL:
          unint64_t v28 = HIWORD(v13);
          swift_beginAccess();
          uint64_t v14 = *(void *)(v10 + 24) + ((v13 >> 24) & 0xFFFF00 | BYTE6(v13));
          uint64_t v15 = v14 + v11;
          uint64_t v16 = v14 + HIDWORD(v11);
          sub_1002136B0(v10, v11, v13);
          swift_retain();
          sub_10038A2E0(v15, v16);
          sub_100390D50();
          uint64_t v17 = swift_allocError();
          *(_OWORD *)uint64_t v18 = v25;
          *(unsigned char *)(v18 + 16) = 3;
          long long v19 = v30;
          *long long v30 = v17;
          v19[1] = v10;
          v19[2] = v11;
          *((unsigned char *)v19 + 30) = v28;
          *((_WORD *)v19 + 14) = WORD2(v13);
          *((_DWORD *)v19 + 6) = v13;
          swift_storeEnumTagMultiPayload();
          unint64_t v20 = *(void *)(v1 + 184);
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v29 = v7;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v20 = sub_1003837D4(0, *(void *)(v20 + 16) + 1, 1, v20);
          }
          unint64_t v23 = *(void *)(v20 + 16);
          unint64_t v22 = *(void *)(v20 + 24);
          if (v23 >= v22 >> 1) {
            unint64_t v20 = sub_1003837D4(v22 > 1, v23 + 1, 1, v20);
          }
          *(void *)(v20 + 16) = v23 + 1;
          sub_10038B6F4((uint64_t)v30, v20+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v23, type metadata accessor for ServerResponseFramingParser.Frame);
          sub_1002136C8(v10, v11, v13);
          sub_1002136C8(v10, v11, v13);
          *(void *)(v1 + 184) = v20;
          uint64_t v7 = v29;
          break;
        default:
          uint64_t v31 = v10;
          unint64_t v32 = v11;
          int v33 = v13;
          __int16 v34 = WORD2(v13);
          char v35 = BYTE6(v13);
          sub_100389C14(&v31);
          *(void *)(v1 + 168) = 0;
          BOOL v9 = 1;
LABEL_4:
          *(unsigned char *)(v1 + 176) = v9;
          break;
      }
      --v6;
    }
    while (v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ServerResponseFramingParser.append(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ServerResponseFramingParser.Frame(0);
  __chkstk_darwin();
  FramingParser.appendAndFrameBytes(_:)(a1, a2);
  sub_1003896F8(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100389C14(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000566C(&qword_1007138B8);
  __chkstk_darwin();
  BOOL v62 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for ResponseOrContinuationRequest(0);
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin();
  uint64_t v51 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_1007138C0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ServerResponseFramingParser.Frame(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = *a1;
  uint64_t v16 = *((unsigned int *)a1 + 2);
  uint64_t v17 = *((unsigned int *)a1 + 3);
  uint64_t v18 = *((unsigned int *)a1 + 4);
  uint64_t v19 = *((unsigned __int16 *)a1 + 10);
  uint64_t v20 = *((unsigned __int8 *)a1 + 22);
  uint64_t v21 = *(void *)(v2 + 144);
  uint64_t v54 = v2 + 144;
  if (v21)
  {
    unsigned __int8 v22 = *(unsigned char *)(v2 + 166);
    unsigned __int16 v23 = *(_WORD *)(v2 + 164);
    unsigned int v24 = *(_DWORD *)(v2 + 160);
    uint64_t v25 = *(void *)(v2 + 152);
    uint64_t v70 = v21;
    uint64_t v71 = v25;
    unsigned int v72 = v24;
    unsigned __int16 v73 = v23;
    unsigned __int8 v74 = v22;
    uint64_t v64 = v15;
    int v65 = v16;
    int v66 = v17;
    int v67 = v18;
    __int16 v68 = v19;
    char v69 = v20;
    ByteBuffer.writeBuffer(_:)();
    uint64_t v15 = v70;
    uint64_t v26 = v71;
    unint64_t v27 = v72 | ((unint64_t)v73 << 32) | ((unint64_t)v74 << 48);
  }
  else
  {
    uint64_t v26 = v16 | (v17 << 32);
    unint64_t v27 = v18 | (v19 << 32) | (v20 << 48);
    swift_retain();
  }
  *(void *)(v2 + 144) = v15;
  *(void *)(v2 + 152) = v26;
  *(_DWORD *)(v2 + 160) = v27;
  *(unsigned char *)(v2 + 166) = BYTE6(v27);
  *(_WORD *)(v2 + 164) = WORD2(v27);
  if (v15)
  {
    uint64_t v60 = v54 - 80;
    uint64_t v61 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v52 = (unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v58 = v2;
    uint64_t v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v63 = v9;
    uint64_t v55 = v10;
    uint64_t v56 = v14;
    uint64_t v57 = v12;
    while (1)
    {
      uint64_t v28 = (uint64_t)v8;
      int v29 = *(unsigned __int16 *)(v2 + 164);
      int v30 = v29 | (*(unsigned __int8 *)(v2 + 166) << 16);
      uint64_t v31 = *(unsigned int *)(v2 + 160);
      uint64_t v32 = *(void *)(v2 + 152);
      uint64_t v70 = v15;
      uint64_t v71 = v32;
      unsigned int v72 = v31;
      unsigned __int16 v73 = v29;
      unsigned __int8 v74 = BYTE2(v30);
      swift_retain_n();
      uint64_t v33 = (uint64_t)v62;
      ResponseParser.parseResponseStream(buffer:)((uint64_t)&v70, v62);
      if ((*v52)((void *)v33, 1, v53) == 1)
      {
        sub_100007A48(v33, &qword_1007138B8);
        __int16 v34 = *v61;
        uint64_t v8 = (char *)v28;
        (*v61)(v28, 1, 1, v63);
        uint64_t v35 = v70;
        if (HIDWORD(v71) == v71)
        {
          uint64_t v36 = 0;
          unint64_t v37 = 0;
          unint64_t v38 = 0;
        }
        else
        {
          unint64_t v37 = v71 | ((unint64_t)HIDWORD(v71) << 32);
          unint64_t v38 = v72 | ((unint64_t)v73 << 32) | ((unint64_t)v74 << 48);
          swift_retain();
          uint64_t v36 = v35;
        }
        uint64_t v43 = v58;
        swift_release();
        swift_release();
        *(void *)(v43 + 144) = v36;
        *(void *)(v43 + 152) = v37;
        uint64_t v2 = v43;
        *(unsigned char *)(v43 + 166) = BYTE6(v38);
        *(_WORD *)(v43 + 164) = WORD2(v38);
        *(_DWORD *)(v43 + 160) = v38;
        swift_release();
        uint64_t v40 = v63;
        uint64_t v45 = (uint64_t)v56;
        uint64_t v44 = (uint64_t)v57;
      }
      else
      {
        uint64_t v39 = v51;
        sub_10038B6F4(v33, v51, type metadata accessor for ResponseOrContinuationRequest);
        uint64_t v8 = (char *)v28;
        sub_10038B6F4(v39, v28, type metadata accessor for ResponseOrContinuationRequest);
        uint64_t v40 = v63;
        swift_storeEnumTagMultiPayload();
        __int16 v34 = *v61;
        (*v61)((uint64_t)v8, 0, 1, v40);
        swift_release_n();
        if (v71 == HIDWORD(v32))
        {
          swift_release();
          uint64_t v15 = 0;
          unint64_t v41 = 0;
          unint64_t v42 = 0;
        }
        else
        {
          unint64_t v42 = v31 & 0xFF000000FFFFFFFFLL | ((*(void *)&v30 & 0xFFFFFFLL) << 32);
          unint64_t v41 = v32 & 0xFFFFFFFF00000000 | v71;
        }
        uint64_t v44 = (uint64_t)v57;
        uint64_t v2 = v58;
        uint64_t v45 = (uint64_t)v56;
        *(void *)(v58 + 144) = v15;
        *(void *)(v2 + 152) = v41;
        *(_DWORD *)(v2 + 160) = v42;
        *(unsigned char *)(v2 + 166) = BYTE6(v42);
        *(_WORD *)(v2 + 164) = WORD2(v42);
      }
      if ((*v59)(v8, 1, v40) == 1) {
        break;
      }
      sub_10038B6F4((uint64_t)v8, v45, type metadata accessor for ServerResponseFramingParser.Frame);
      sub_100390DA4(v45, v44, type metadata accessor for ServerResponseFramingParser.Frame);
      unint64_t v46 = *(void *)(v2 + 184);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v46 = sub_1003837D4(0, *(void *)(v46 + 16) + 1, 1, v46);
      }
      unint64_t v48 = *(void *)(v46 + 16);
      unint64_t v47 = *(void *)(v46 + 24);
      if (v48 >= v47 >> 1) {
        unint64_t v46 = sub_1003837D4(v47 > 1, v48 + 1, 1, v46);
      }
      *(void *)(v46 + 16) = v48 + 1;
      sub_10038B6F4(v44, v46+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v48, type metadata accessor for ServerResponseFramingParser.Frame);
      *(void *)(v2 + 184) = v46;
      sub_100390288(v45, type metadata accessor for ServerResponseFramingParser.Frame);
      uint64_t v15 = *(void *)(v2 + 144);
      if (!v15)
      {
        v34((uint64_t)v8, 1, 1, v40);
        return sub_100007A48((uint64_t)v8, &qword_1007138C0);
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  return sub_100007A48((uint64_t)v8, &qword_1007138C0);
}

uint64_t sub_10038A2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005E0ED0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100712FC0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1003461B0(v4, (uint64_t)qword_100762148);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = sub_1005E0EB0();
  os_log_type_t v10 = sub_1005E25B0();
  if (!os_log_type_enabled(v9, v10)) {
    goto LABEL_10;
  }
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 68157955;
  uint64_t v12 = a2 - a1;
  if (!a1) {
    uint64_t v12 = 0;
  }
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v12 > 0x7FFFFFFF) {
    goto LABEL_12;
  }
  uint64_t v13 = v11;
  LODWORD(v15) = v12;
  sub_1005E2960();
  *((_WORD *)v13 + 4) = 2101;
  if (a1)
  {
    uint64_t v15 = a1;
    sub_1005E2960();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received invalid data frame from server: %{sensitive}.*P", (uint8_t *)v13, 0x12u);
    swift_slowDealloc();
LABEL_10:

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t result = sub_1005E2F10();
  __break(1u);
  return result;
}

uint64_t ServerResponseFramingParser.popAllFrames()()
{
  uint64_t result = *(void *)(v0 + 184);
  *(void *)(v0 + 184) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10038A594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for ResponsePayload();
  __chkstk_darwin();
  uint64_t v5 = &v34[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100390DA4(v2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ResponsePayload);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1003824BC((uint64_t)v5, (uint64_t)v34);
      sub_1003824BC((uint64_t)v34, (uint64_t)v35);
      switch(sub_10027F554((uint64_t)v35))
      {
        case 1u:
        case 2u:
          uint64_t v17 = sub_100280B60((uint64_t)v35);
          int v18 = *(_DWORD *)(v17 + 16);
          char v19 = *(unsigned char *)(v17 + 20);
          uint64_t v20 = *(void *)(v17 + 24);
          long long v21 = *(_OWORD *)(v17 + 32);
          *(_OWORD *)a1 = *(_OWORD *)v17;
          *(_DWORD *)(a1 + 16) = v18;
          *(unsigned char *)(a1 + 20) = v19;
          *(void *)(a1 + 24) = v20;
          *(_OWORD *)(a1 + 32) = v21;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 3u:
          *(void *)a1 = *(void *)sub_100280B60((uint64_t)v35);
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 4u:
          uint64_t v12 = sub_100280B60((uint64_t)v35);
          char v13 = *(unsigned char *)(v12 + 32);
          char v14 = *(unsigned char *)(v12 + 33);
          uint64_t v15 = *(void *)(v12 + 40);
          long long v16 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v16;
          *(unsigned char *)(a1 + 32) = v13;
          *(unsigned char *)(a1 + 33) = v14;
          *(void *)(a1 + 40) = v15;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 5u:
          unsigned __int16 v23 = (long long *)sub_100280B60((uint64_t)v35);
          long long v24 = v23[3];
          long long v26 = *v23;
          long long v25 = v23[1];
          *(_OWORD *)(a1 + 32) = v23[2];
          *(_OWORD *)(a1 + 48) = v24;
          *(_OWORD *)a1 = v26;
          *(_OWORD *)(a1 + 16) = v25;
          long long v28 = v23[5];
          long long v27 = v23[6];
          long long v29 = v23[4];
          *(_OWORD *)(a1 + 105) = *(long long *)((char *)v23 + 105);
          *(_OWORD *)(a1 + 80) = v28;
          *(_OWORD *)(a1 + 96) = v27;
          *(_OWORD *)(a1 + 64) = v29;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 6u:
          unint64_t v22 = *(void *)sub_100280B60((uint64_t)v35);
          if (HIDWORD(v22)) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 7u:
          unint64_t v22 = *(void *)sub_100280B60((uint64_t)v35);
          if (HIDWORD(v22))
          {
LABEL_18:
            sub_100390D50();
            swift_allocError();
            *(void *)uint64_t v30 = v22;
            *(void *)(v30 + 8) = 0;
            *(unsigned char *)(v30 + 16) = 2;
            return swift_willThrow();
          }
LABEL_20:
          *(_DWORD *)a1 = v22;
          type metadata accessor for UntaggedResponse(0);
          break;
        case 8u:
          uint64_t v32 = sub_100280B60((uint64_t)v35);
          uint64_t v33 = *(void *)(v32 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v32;
          *(void *)(a1 + 16) = v33;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 9u:
          sub_100280B60((uint64_t)v35);
          sub_100391098((uint64_t)v34);
          goto LABEL_25;
        default:
          os_log_type_t v10 = (uint64_t *)sub_100280B60((uint64_t)v35);
          uint64_t v11 = sub_10038D698(*v10);
          sub_100391098((uint64_t)v34);
          *(void *)a1 = v11;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
      }
      return swift_storeEnumTagMultiPayload();
    case 2u:
      type metadata accessor for MessageData();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 2u:
          sub_10001FDF0((uint64_t)v5, a1, &qword_100712FC8);
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
        case 3u:
        case 4u:
          goto LABEL_26;
        default:
          *(_DWORD *)a1 = *(_DWORD *)v5;
          type metadata accessor for UntaggedResponse(0);
          return swift_storeEnumTagMultiPayload();
      }
    case 3u:
    case 4u:
      *(void *)a1 = *(void *)v5;
      type metadata accessor for UntaggedResponse(0);
      return swift_storeEnumTagMultiPayload();
    case 5u:
      *(void *)a1 = *(void *)v5;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v5 + 8);
      type metadata accessor for UntaggedResponse(0);
      return swift_storeEnumTagMultiPayload();
    case 6u:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    case 7u:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_25;
    case 8u:
      sub_10028D508(*(void *)v5, *((void *)v5 + 1), *((void *)v5 + 2));
      while (1)
      {
LABEL_25:
        sub_1005E2F20();
        __break(1u);
LABEL_26:
        swift_bridgeObjectRelease();
      }
    case 9u:
      uint64_t v8 = *((void *)v5 + 2);
      char v9 = v5[24];
      *(_OWORD *)a1 = *(_OWORD *)v5;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = v9;
      type metadata accessor for UntaggedResponse(0);
      break;
    default:
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v7 = *((void *)v5 + 2);
      *(void *)a1 = *(void *)v5;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v7;
      type metadata accessor for UntaggedResponse(0);
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10038AC38@<X0>(uint64_t a1@<X8>)
{
  sub_10034F878((uint64_t)(v1 + 2), (uint64_t)v13);
  sub_10034F878((uint64_t)v13, (uint64_t)v14);
  char v3 = v15;
  unint64_t v4 = v14[0];
  uint64_t v5 = v14[1];
  uint64_t v6 = v14[2];
  uint64_t v8 = *v1;
  unint64_t v7 = v1[1];
  if (v15)
  {
    sub_1003910FC((uint64_t)v13);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1003910FC((uint64_t)v13);
  }
  char v9 = sub_100392F84(v8, v7);
  if (v10)
  {
    sub_100390D50();
    swift_allocError();
    *(void *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = v7;
    *(unsigned char *)(v12 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    sub_10036BC50(v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(unsigned char *)a1 = (_BYTE)v9;
    *(_DWORD *)(a1 + 4) = HIDWORD(v9);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = v3;
    type metadata accessor for Response(0);
    return swift_storeEnumTagMultiPayload();
  }
}

unint64_t sub_10038AD6C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  type metadata accessor for Response(0);
  __chkstk_darwin();
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100390DA4(a1, (uint64_t)v5, type metadata accessor for Response);
  unint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      sub_100382460((uint64_t)v5, (uint64_t)v19);
      sub_100382460((uint64_t)v19, (uint64_t)&v20);
      unint64_t result = sub_10029C0D8((uint64_t)&v20);
      switch((int)result)
      {
        case 2:
          sub_10029C1C4((uint64_t)&v20);
          unint64_t result = sub_100390FF0((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
          unint64_t v7 = 0xD000000000000016;
          uint64_t v8 = "fetch(simpleAttribute)";
          goto LABEL_11;
        case 3:
          sub_10029C1C4((uint64_t)&v20);
          unint64_t result = sub_100390FF0((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
          unint64_t v7 = 0xD000000000000015;
          uint64_t v8 = "fetch(streamingBegin)";
          goto LABEL_11;
        case 4:
          sub_10029C1C4((uint64_t)&v20);
          unint64_t result = sub_100390FF0((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10038EF8C);
          unint64_t v7 = 0xD000000000000015;
          uint64_t v8 = "fetch(streamingBytes)";
          goto LABEL_11;
        case 5:
          unint64_t v7 = 0xD000000000000013;
          uint64_t v8 = "fetch(streamingEnd)";
          goto LABEL_11;
        case 6:
          unint64_t v7 = 0x6966286863746566;
          unint64_t v9 = 0xED0000296873696ELL;
          break;
        default:
          unint64_t result = sub_10029C1C4((uint64_t)&v20);
          unint64_t v7 = 0x7473286863746566;
          unint64_t v9 = 0xEC00000029747261;
          break;
      }
      goto LABEL_16;
    case 2:
      unint64_t v10 = *((void *)v5 + 1);
      unint64_t v12 = *((void *)v5 + 2);
      uint64_t v11 = *((void *)v5 + 3);
      uint64_t v13 = *((void *)v5 + 4);
      int v14 = v5[40];
      if (v5[40])
      {
        unint64_t v20 = *(void *)v5;
        unint64_t v21 = v10;
        if (v14 == 1)
        {
          swift_bridgeObjectRetain();
          v22._countAndFlagsBits = 5197344;
          v22._object = (void *)0xE300000000000000;
          sub_1005E1E30(v22);
          swift_bridgeObjectRelease();
          unint64_t v15 = v12;
          uint64_t v16 = v11;
          uint64_t v17 = v13;
          unsigned __int8 v18 = 1;
        }
        else
        {
          swift_bridgeObjectRetain();
          v24._countAndFlagsBits = 1145127456;
          v24._object = (void *)0xE400000000000000;
          sub_1005E1E30(v24);
          swift_bridgeObjectRelease();
          unint64_t v15 = v12;
          uint64_t v16 = v11;
          uint64_t v17 = v13;
          unsigned __int8 v18 = 2;
        }
      }
      else
      {
        unint64_t v20 = *(void *)v5;
        unint64_t v21 = v10;
        swift_bridgeObjectRetain();
        v23._countAndFlagsBits = 4935456;
        v23._object = (void *)0xE300000000000000;
        sub_1005E1E30(v23);
        swift_bridgeObjectRelease();
        unint64_t v15 = v12;
        uint64_t v16 = v11;
        uint64_t v17 = v13;
        unsigned __int8 v18 = 0;
      }
      unint64_t result = sub_10036BC08(v15, v16, v17, v18);
      unint64_t v7 = v20;
      unint64_t v9 = v21;
      goto LABEL_16;
    case 3:
      sub_10036BC50(*(void *)v5);
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v7 = 0x6C61746166;
      unint64_t v9 = 0xE500000000000000;
      goto LABEL_16;
    case 4:
      unint64_t result = swift_release();
      unint64_t v7 = 0xD000000000000017;
      uint64_t v8 = "authenticationChallenge";
LABEL_11:
      unint64_t v9 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_16;
    case 5:
      unint64_t v7 = 0x72617453656C6469;
      unint64_t v9 = 0xEB00000000646574;
LABEL_16:
      *a2 = v7;
      a2[1] = v9;
      break;
    default:
      type metadata accessor for ResponsePayload();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_1003824BC((uint64_t)v5, (uint64_t)&v20);
          unint64_t result = sub_100391098((uint64_t)&v20);
          unint64_t v7 = 0xD000000000000015;
          uint64_t v8 = "untagged(mailboxData)";
          goto LABEL_11;
        case 2u:
          *a2 = 0xD000000000000015;
          a2[1] = 0x80000001005E7430;
          unint64_t result = sub_100390288((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ResponsePayload);
          break;
        case 3u:
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v7 = 0xD000000000000018;
          uint64_t v8 = "untagged(capabilityData)";
          goto LABEL_11;
        case 4u:
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v7 = 0xD000000000000014;
          uint64_t v8 = "untagged(enableData)";
          goto LABEL_11;
        case 5u:
          swift_release();
          swift_release();
          unint64_t result = swift_release();
          unint64_t v7 = 0x6465676761746E75;
          unint64_t v9 = 0xEC00000029646928;
          goto LABEL_16;
        case 6u:
          swift_release();
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v7 = 0xD000000000000013;
          uint64_t v8 = "untagged(quotaRoot)";
          goto LABEL_11;
        case 7u:
          swift_bridgeObjectRelease();
          unint64_t result = swift_release();
          unint64_t v7 = 0x6465676761746E75;
          unint64_t v9 = 0xEF2961746F757128;
          goto LABEL_16;
        case 8u:
          unint64_t result = sub_10028D508(*(void *)v5, *((void *)v5 + 1), *((void *)v5 + 2));
          unint64_t v7 = 0xD000000000000012;
          uint64_t v8 = "untagged(metadata)";
          goto LABEL_11;
        case 9u:
          unint64_t result = sub_100295400();
          unint64_t v7 = 0xD00000000000001ALL;
          uint64_t v8 = "untagged(applePushService)";
          goto LABEL_11;
        default:
          unint64_t result = sub_10038EE18(*(void *)v5, *((void *)v5 + 1), *((void *)v5 + 2), v5[24]);
          unint64_t v7 = 0xD00000000000001ALL;
          uint64_t v8 = "untagged(conditionalState)";
          goto LABEL_11;
      }
      break;
  }
  return result;
}

size_t sub_10038B34C(Swift::Int a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = (Swift::Int *)(*v2 + 16);
  Swift::Int v5 = *v4;
  if (*v4 >= a1)
  {
    uint64_t v19 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Response(0) - 8) + 80);
    sub_10000566C(&qword_1007138C8);
    uint64_t v16 = swift_allocObject();
    long long v20 = *(_OWORD *)(v3 + 24);
    *(void *)(v16 + 16) = v5;
    *(_OWORD *)(v16 + 24) = v20;
    if ((uint64_t)v20 >= 1) {
      sub_10038BA9C(v16 + 16, v16 + ((v19 + 40) & ~v19), v4, v3 + ((v19 + 40) & ~v19));
    }
    goto LABEL_19;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v2;
  uint64_t v10 = type metadata accessor for Response(0);
  sub_1005E0C00(a1, a2 & 1);
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = *(void *)(v9 + 24);
    sub_10000566C(&qword_1007138C8);
    uint64_t v14 = *(void *)(v11 + 72);
    uint64_t v15 = (v12 + 40) & ~v12;
    uint64_t v16 = swift_allocObject();
    size_t result = j__malloc_size((const void *)v16);
    if (v14)
    {
      if (result - v15 != 0x8000000000000000 || v14 != -1)
      {
        *(void *)(v16 + 16) = (uint64_t)(result - v15) / v14;
        *(void *)(v16 + 24) = v13;
        *(void *)(v16 + 32) = 0;
        if (v13 >= 1)
        {
          swift_retain();
          sub_10038B75C(v16 + 16, v16 + v15, (void *)(v9 + 16), v9 + v15);
          *(void *)(v9 + 24) = 0;
          swift_release();
        }
LABEL_19:
        size_t result = swift_release();
        *uint64_t v2 = v16;
        return result;
      }
      goto LABEL_22;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  sub_10000566C(&qword_1007138C8);
  uint64_t v23 = *(void *)(v21 + 72);
  uint64_t v24 = (v22 + 40) & ~v22;
  uint64_t v16 = swift_allocObject();
  size_t result = j__malloc_size((const void *)v16);
  if (!v23) {
    goto LABEL_21;
  }
  if (result - v24 != 0x8000000000000000 || v23 != -1)
  {
    uint64_t v26 = *(void *)(v9 + 24);
    *(void *)(v16 + 16) = (uint64_t)(result - v24) / v23;
    *(void *)(v16 + 24) = v26;
    *(void *)(v16 + 32) = 0;
    if (v26 >= 1) {
      sub_10038B8F8(v16 + 16, v16 + v24, (void *)(v9 + 16), v9 + v24);
    }
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
  return result;
}

void *sub_10038B624(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = v4 + v3;
  if (!__OFADD__(v4, v3))
  {
    uint64_t v8 = result;
    if ((v3 & 0x8000000000000000) == 0)
    {
      BOOL v9 = __OFSUB__(v5, *result);
      if (v5 < *result || (v5 -= *result, !v9))
      {
LABEL_9:
        uint64_t v10 = type metadata accessor for Response(0);
        size_t result = (void *)sub_100390DA4(a3, a2 + *(void *)(*(void *)(v10 - 8) + 72) * v5, type metadata accessor for Response);
        uint64_t v11 = v8[1];
        BOOL v9 = __OFADD__(v11, 1);
        uint64_t v12 = v11 + 1;
        if (!v9)
        {
          v8[1] = v12;
          return result;
        }
        goto LABEL_12;
      }
      __break(1u);
    }
    if (v5 < 0)
    {
      BOOL v9 = __OFADD__(v5, *result);
      v5 += *result;
      if (v9) {
        goto LABEL_13;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10038B6F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10038B75C(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v8 = a3[1];
  uint64_t v9 = *(void *)(type metadata accessor for Response(0) - 8);
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  BOOL v13 = v5 < v8;
  uint64_t v14 = *(void *)(v9 + 72);
  BOOL v15 = v10 != 0;
  BOOL v16 = v13 && v15;
  if (v13 && v15) {
    unint64_t v17 = v12;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v13 && v15) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v11 < 1)
  {
    uint64_t v11 = 0;
    goto LABEL_22;
  }
  if (!a4)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v19 = a4 + v14 * v4;
  if (v19 <= a2 && v19 + v14 * v11 > a2)
  {
    if (v19 != a2) {
      swift_arrayInitWithTakeBackToFront();
    }
  }
  else
  {
    swift_arrayInitWithTakeFrontToBack();
  }
LABEL_22:
  if (!v16 || v18 <= 0) {
    return;
  }
  if (!v17)
  {
LABEL_36:
    __break(1u);
    return;
  }
  unint64_t v21 = a2 + v14 * v11;
  if (v21 < v17 || v21 >= v17 + v14 * v18)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v17)
  {
    swift_arrayInitWithTakeBackToFront();
  }
}

uint64_t sub_10038B8F8(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a3[1];
  uint64_t result = type metadata accessor for Response(0);
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  uint64_t v13 = *(void *)(*(void *)(result - 8) + 72);
  if (v11 < 1)
  {
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  if (!a4)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v14 = a4 + v13 * v4;
  if (v14 < a2 + v13 * v11 && v14 + v13 * v11 > a2) {
    goto LABEL_30;
  }
  uint64_t result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 >= v8 || v10 < 1) {
    return result;
  }
  if (!v12)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = sub_1005E3000();
    __break(1u);
    return result;
  }
  unint64_t v17 = a2 + v13 * v11;
  if (v17 + v13 * v10 > v12 && v17 < v12 + v13 * v10) {
    goto LABEL_30;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_10038BA9C(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = a3[1];
  uint64_t result = type metadata accessor for Response(0);
  if (v5 < v8)
  {
    uint64_t v10 = v8 - v5;
    if (!__OFSUB__(v8, v5))
    {
      uint64_t v11 = v5;
      unint64_t v12 = a4;
      goto LABEL_6;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v8;
LABEL_6:
  uint64_t v13 = *(void *)(*(void *)(result - 8) + 72);
  if (v11 < 1) {
    goto LABEL_14;
  }
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v14 = a4 + v13 * v4;
  unint64_t v15 = a2 + v13 * v4;
  if (v14 < v15 + v13 * v11 && v15 < v14 + v13 * v11) {
    goto LABEL_29;
  }
  uint64_t result = swift_arrayInitWithCopy();
LABEL_14:
  if (v5 < v8 && v10 >= 1)
  {
    if (v12)
    {
      if (a2 + v13 * v10 <= v12 || v12 + v13 * v10 <= a2) {
        return swift_arrayInitWithCopy();
      }
LABEL_29:
      uint64_t result = sub_1005E3000();
      __break(1u);
      return result;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_10038BC30()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Response(0);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  sub_10000566C(&qword_1007138C8);
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 24);
  *(void *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  if ((uint64_t)v6 >= 1) {
    sub_10038BA9C(v5 + 16, v5 + ((v4 + 40) & ~v4), (void *)(v1 + 16), v1 + ((v4 + 40) & ~v4));
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v5;
  return result;
}

uint64_t sub_10038BD20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10038BD7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10038BDD8(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 >= 1)
  {
    unint64_t v7 = (void *)result;
    uint64_t v8 = *(void *)(result + 16);
    uint64_t result = v8 - a4;
    if (__OFADD__(v8, -a4))
    {
      __break(1u);
    }
    else
    {
      if (result < 0)
      {
        BOOL v9 = __OFADD__(result, *v7);
        result += *v7;
        if (v9) {
          goto LABEL_10;
        }
      }
      v7[2] = result;
      uint64_t v10 = v7[1];
      BOOL v9 = __OFADD__(v10, a4);
      uint64_t v11 = v10 + a4;
      if (!v9)
      {
        v7[1] = v11;
        sub_10038C160(result, v8, v7, a2, (uint64_t)v12);
        return sub_10038BE7C(a3, a4);
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_10038BE7C(unint64_t a1, uint64_t a2)
{
  sub_10001FDF0((uint64_t)(v2 + 1), (uint64_t)v27, &qword_1007138D0);
  uint64_t result = sub_10001FDF0((uint64_t)v27, (uint64_t)&v28, &qword_1007138D0);
  if ((v29 & 1) == 0)
  {
    long long v30 = v28;
    long long v25 = *v2;
    uint64_t v11 = *((void *)&v25 + 1);
    if ((*((void *)&v25 + 1) & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      if (a1)
      {
        if (*((void *)&v25 + 1))
        {
          sub_10001FDF0((uint64_t)&v25, (uint64_t)v26, &qword_1007138D8);
          uint64_t result = sub_10001FDF0((uint64_t)v26, (uint64_t)&v31, &qword_1007138D8);
          unint64_t v12 = v31;
          if (v31)
          {
            uint64_t v13 = *(void *)(*(void *)(type metadata accessor for Response(0) - 8) + 72) * v11;
            unint64_t v14 = v12 + v13;
            unint64_t v15 = a1 + v13;
            if (v14 > a1 && v15 > v12) {
              goto LABEL_38;
            }
            uint64_t result = swift_arrayInitWithCopy();
          }
        }
      }
      if (!__OFADD__(v11, a2 - v11))
      {
        if (a2 >= v11)
        {
          if (a1)
          {
            uint64_t v17 = a2 - v11;
            if (a2 != v11)
            {
              if (*((uint64_t *)&v30 + 1) >= v17)
              {
                sub_10001FDF0((uint64_t)&v30, (uint64_t)v32, &qword_1007138D8);
                uint64_t result = sub_10001FDF0((uint64_t)v32, (uint64_t)&v33, &qword_1007138D8);
                unint64_t v18 = v33;
                if (!v33) {
                  return result;
                }
                uint64_t v19 = *(void *)(*(void *)(type metadata accessor for Response(0) - 8) + 72);
                unint64_t v20 = a1 + v19 * v11;
                uint64_t v21 = v19 * v17;
                unint64_t v22 = v18 + v21;
                unint64_t v23 = v20 + v21;
                if (v20 >= v22 || v23 <= v18) {
                  return swift_arrayInitWithCopy();
                }
                goto LABEL_38;
              }
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
          }
          return result;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
  if (a1 && a2)
  {
    long long v30 = *v2;
    if (*((uint64_t *)&v30 + 1) >= a2)
    {
      sub_10001FDF0((uint64_t)&v30, (uint64_t)&v33, &qword_1007138D8);
      uint64_t result = sub_10001FDF0((uint64_t)&v33, (uint64_t)&v25, &qword_1007138D8);
      unint64_t v6 = v25;
      if (!(void)v25) {
        return result;
      }
      if ((a2 & 0x8000000000000000) == 0)
      {
        uint64_t v7 = *(void *)(*(void *)(type metadata accessor for Response(0) - 8) + 72) * a2;
        unint64_t v8 = v6 + v7;
        unint64_t v9 = a1 + v7;
        if (v8 <= a1 || v9 <= v6) {
          return swift_arrayInitWithCopy();
        }
      }
LABEL_38:
      uint64_t result = sub_1005E3000();
      __break(1u);
      return result;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_10038C160@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (result >= a2)
  {
    uint64_t v12 = *a3 - result;
    if (!__OFSUB__(*a3, result))
    {
      BOOL v14 = a2 == 0;
      if (a2) {
        uint64_t v13 = a4;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v15 = type metadata accessor for Response(0);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t result = v15 - 8;
      uint64_t v10 = v16;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = type metadata accessor for Response(0);
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t result = v9 - 8;
    uint64_t v10 = v11;
    uint64_t v12 = v6 - v7;
    if (!__OFSUB__(v6, v7))
    {
      uint64_t v13 = 0;
      uint64_t v6 = 0;
      BOOL v14 = 1;
LABEL_9:
      *(void *)a5 = a4 + *(void *)(v10 + 72) * v7;
      *(void *)(a5 + 8) = v12;
      *(void *)(a5 + 16) = v13;
      *(void *)(a5 + 24) = v6;
      *(unsigned char *)(a5 + 32) = v14;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10038C250(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  sub_1005E33F0();
  sub_1005E1CD0();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  Swift::Int v8 = sub_1005E3470();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_10038CAD8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v29;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v11 = sub_1005E1CD0();
  uint64_t v13 = v12;
  if (v11 == sub_1005E1CD0() && v13 == v14)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = sub_1005E3290();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = ~v9;
      do
      {
        unint64_t v10 = (v10 + 1) & v17;
        if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v18 = sub_1005E1CD0();
        uint64_t v20 = v19;
        if (v18 == sub_1005E1CD0() && v20 == v21) {
          goto LABEL_16;
        }
        char v23 = sub_1005E3290();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v23 & 1) == 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = (Swift::Int *)(*(void *)(*v4 + 48) + 16 * v10);
  Swift::Int v27 = v26[1];
  *a1 = *v26;
  a1[1] = v27;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_10038C4A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713910);
  uint64_t v3 = sub_1005E2C10();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1005E33F0();
      sub_1005E1CD0();
      sub_1005E1DB0();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1005E3470();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10038C7A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713918);
  uint64_t result = sub_1005E2C10();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    __int16 v34 = (void *)(v2 + 56);
    uint64_t v35 = v2;
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v36 = v5;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v33) {
          goto LABEL_33;
        }
        unint64_t v15 = v34[v14];
        int64_t v16 = v5 + 1;
        if (!v15)
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v15 = v34[v16];
          if (!v15)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v15 = v34[v16];
            if (!v15)
            {
              int64_t v17 = v14 + 3;
              if (v17 >= v33)
              {
LABEL_33:
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *__int16 v34 = -1 << v32;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v34[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v34[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v15 - 1) & v15;
        int64_t v36 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      uint64_t v18 = *(void *)(v2 + 48) + 24 * v13;
      uint64_t v19 = *(void *)v18;
      int v21 = *(_DWORD *)(v18 + 8);
      int v20 = *(_DWORD *)(v18 + 12);
      uint64_t v22 = *(unsigned int *)(v18 + 16);
      uint64_t v23 = *(unsigned __int16 *)(v18 + 20);
      uint64_t v24 = *(unsigned __int8 *)(v18 + 22);
      sub_1005E33F0();
      unint64_t v37 = v37 & 0xFF00000000000000 | v22 | (v23 << 32) | (v24 << 48);
      SocketAddressError.FailedToParseIPByteBuffer.hash(into:)();
      uint64_t result = sub_1005E3470();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v11 = *(void *)(v4 + 48) + 24 * v10;
      *(void *)uint64_t v11 = v19;
      *(_DWORD *)(v11 + 8) = v21;
      *(_DWORD *)(v11 + 12) = v20;
      *(_DWORD *)(v11 + 16) = v22;
      *(_WORD *)(v11 + 20) = v23;
      *(unsigned char *)(v11 + 22) = v24;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v35;
      int64_t v5 = v36;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_10038CAD8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  int64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10038C4A4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10038CD1C();
LABEL_22:
      uint64_t v26 = *v5;
      *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
      unint64_t v27 = (Swift::Int *)(*(void *)(v26 + 48) + 16 * a3);
      *unint64_t v27 = v8;
      v27[1] = a2;
      uint64_t v28 = *(void *)(v26 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (!v29)
      {
        *(void *)(v26 + 16) = v30;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_10038D0A8();
  }
  uint64_t v11 = *v4;
  sub_1005E33F0();
  sub_1005E1CD0();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1005E3470();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v13 = sub_1005E1CD0();
  uint64_t v15 = v14;
  if (v13 == sub_1005E1CD0() && v15 == v16)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v18 = sub_1005E3290();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    uint64_t v19 = ~v12;
    do
    {
      a3 = (a3 + 1) & v19;
      if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v20 = sub_1005E1CD0();
      uint64_t v22 = v21;
      if (v20 == sub_1005E1CD0() && v22 == v23) {
        goto LABEL_25;
      }
      char v25 = sub_1005E3290();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v25 & 1) == 0);
  }
LABEL_26:
  uint64_t result = sub_1005E3370();
  __break(1u);
  return result;
}

void *sub_10038CD1C()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_100713910);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1005E2C00();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10038CED0()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_100713918);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1005E2C00();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    int v18 = *(_DWORD *)(v17 + 16);
    __int16 v19 = *(_WORD *)(v17 + 20);
    char v20 = *(unsigned char *)(v17 + 22);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    uint64_t v22 = *(void *)(v17 + 8);
    *(void *)uint64_t v21 = *(void *)v17;
    *(void *)(v21 + 8) = v22;
    *(_DWORD *)(v21 + 16) = v18;
    *(_WORD *)(v21 + 20) = v19;
    *(unsigned char *)(v21 + 22) = v20;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10038D0A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713910);
  uint64_t v3 = sub_1005E2C10();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v28 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v28 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    int v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    sub_1005E33F0();
    sub_1005E1CD0();
    swift_bridgeObjectRetain();
    sub_1005E1DB0();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1005E3470();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v8 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
    *unint64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v28 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10038D38C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713918);
  uint64_t result = sub_1005E2C10();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v32 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v34 = v2;
  uint64_t v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v35 = v5;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_23;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v14 >= v33) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v5 + 1;
    if (!v15)
    {
      int64_t v16 = v5 + 2;
      if (v5 + 2 >= v33) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v5 + 3;
        if (v5 + 3 >= v33) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          uint64_t v17 = v5 + 4;
          if (v5 + 4 >= v33)
          {
LABEL_32:
            uint64_t result = swift_release();
            uint64_t v1 = v0;
            goto LABEL_34;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v17);
          int64_t v16 = v5 + 4;
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v15 - 1) & v15;
    int64_t v35 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_23:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v13;
    uint64_t v19 = *(void *)v18;
    int v21 = *(_DWORD *)(v18 + 8);
    int v20 = *(_DWORD *)(v18 + 12);
    uint64_t v22 = *(unsigned int *)(v18 + 16);
    uint64_t v23 = *(unsigned __int16 *)(v18 + 20);
    uint64_t v24 = *(unsigned __int8 *)(v18 + 22);
    sub_1005E33F0();
    unint64_t v36 = v36 & 0xFF00000000000000 | v22 | (v23 << 32) | (v24 << 48);
    SocketAddressError.FailedToParseIPByteBuffer.hash(into:)();
    uint64_t result = sub_1005E3470();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = *(void *)(v4 + 48) + 24 * v10;
    *(void *)uint64_t v11 = v19;
    *(_DWORD *)(v11 + 8) = v21;
    *(_DWORD *)(v11 + 12) = v20;
    *(_DWORD *)(v11 + 16) = v22;
    *(_WORD *)(v11 + 20) = v23;
    *(unsigned char *)(v11 + 22) = v24;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
    uint64_t v2 = v34;
    int64_t v5 = v35;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10038D698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100390F9C();
  uint64_t result = sub_1005E2280();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10038C250(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

__n128 sub_10038D730@<Q0>(uint64_t a1@<X8>)
{
  type metadata accessor for ParsedStringCache();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100602720;
  sub_10000566C(&qword_1007137C8);
  uint64_t v3 = sub_1005E2150();
  *(void *)(v3 + 16) = 32;
  bzero((void *)(v3 + 32), 0x300uLL);
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = v3;
  ResponseParser.init(bufferLimit:messageAttributeLimit:bodySizeLimit:literalSizeLimit:parsedStringCache:)(0x2000, 100, 1966080, 4096, (uint64_t)sub_100390E0C, v2, (uint64_t)v9);
  uint64_t v4 = v10;
  char v5 = v11;
  __n128 result = (__n128)v9[2];
  long long v7 = v9[3];
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 95) = 0;
  return result;
}

uint64_t sub_10038D814(uint64_t a1, uint64_t a2)
{
  return sub_100389514(a1, a2);
}

uint64_t type metadata accessor for ServerResponseFramingParser.Frame(uint64_t a1)
{
  return sub_10003B314(a1, qword_100713870);
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder()
{
  return &type metadata for ServerResponseTranscoder;
}

uint64_t destroy for ServerResponseFramingParser(uint64_t a1)
{
  sub_100215780(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  sub_100215718(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 163) = *(_DWORD *)(a2 + 163);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v12 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v12;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  sub_100215718(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  sub_100215780(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(unsigned char *)(a1 + 166) = *(unsigned char *)(a2 + 166);
  uint64_t v12 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v12;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ServerResponseFramingParser(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ServerResponseFramingParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100215780(v4, v5, v6);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(unsigned char *)(a1 + 166) = *(unsigned char *)(a2 + 166);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseFramingParser(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseFramingParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseFramingParser()
{
  return &type metadata for ServerResponseFramingParser;
}

unint64_t initializeBufferWithCopyOfBuffer for ServerResponseFramingParser.Frame(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)a2;
      swift_errorRetain();
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
      swift_retain();
    }
    else
    {
      type metadata accessor for ResponseOrContinuationRequest(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = type metadata accessor for Response(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            type metadata accessor for ResponsePayload();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                uint64_t v36 = *(void *)a2;
                uint64_t v37 = *(void *)(a2 + 8);
                uint64_t v66 = *(void *)(a2 + 24);
                uint64_t v38 = *(void *)(a2 + 32);
                uint64_t v40 = *(void *)(a2 + 48);
                uint64_t v39 = *(void *)(a2 + 56);
                uint64_t v64 = v39;
                uint64_t v68 = *(void *)(a2 + 64);
                uint64_t v70 = *(void *)(a2 + 72);
                uint64_t v72 = *(void *)(a2 + 80);
                uint64_t v74 = *(void *)(a2 + 88);
                uint64_t v76 = *(void *)(a2 + 96);
                uint64_t v78 = *(void *)(a2 + 104);
                uint64_t v80 = *(void *)(a2 + 112);
                unsigned __int8 v81 = *(unsigned char *)(a2 + 120);
                uint64_t v41 = *(void *)a2;
                uint64_t v42 = *(void *)(a2 + 16);
                uint64_t v43 = *(void *)(a2 + 40);
                sub_10038E634(v41, v37, v42, v66, v38, v43, v40, v39, v68, v70, v72, v74, v76, v78, v80, v81);
                *(void *)a1 = v36;
                *(void *)(a1 + 8) = v37;
                *(void *)(a1 + 16) = v42;
                *(void *)(a1 + 24) = v66;
                *(void *)(a1 + 32) = v38;
                *(void *)(a1 + 40) = v43;
                *(void *)(a1 + 48) = v40;
                *(void *)(a1 + 56) = v64;
                *(void *)(a1 + 64) = v68;
                *(void *)(a1 + 72) = v70;
                *(void *)(a1 + 80) = v72;
                *(void *)(a1 + 88) = v74;
                *(void *)(a1 + 96) = v76;
                *(void *)(a1 + 104) = v78;
                *(void *)(a1 + 112) = v80;
                *(unsigned char *)(a1 + 120) = v81;
                break;
              case 2u:
                uint64_t v44 = type metadata accessor for MessageData();
                switch(swift_getEnumCaseMultiPayload())
                {
                  case 1u:
                  case 2u:
                    uint64_t v45 = sub_10000566C(&qword_100712FE0);
                    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
                    goto LABEL_30;
                  case 3u:
                  case 4u:
                    *(void *)a1 = *(void *)a2;
                    swift_bridgeObjectRetain();
LABEL_30:
                    swift_storeEnumTagMultiPayload();
                    break;
                  default:
                    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v44 - 8) + 64));
                    break;
                }
                break;
              case 3u:
              case 4u:
                *(void *)a1 = *(void *)a2;
                swift_bridgeObjectRetain();
                break;
              case 5u:
                uint64_t v46 = *(void *)(a2 + 8);
                *(void *)a1 = *(void *)a2;
                *(void *)(a1 + 8) = v46;
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                swift_retain();
                swift_retain();
                swift_retain();
                break;
              case 6u:
                *(void *)a1 = *(void *)a2;
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(void *)(a1 + 24) = *(void *)(a2 + 24);
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 7u:
                *(void *)a1 = *(void *)a2;
                *(void *)(a1 + 8) = *(void *)(a2 + 8);
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
                *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
                *(void *)(a1 + 24) = *(void *)(a2 + 24);
                swift_retain();
                swift_bridgeObjectRetain();
                break;
              case 8u:
                uint64_t v47 = *(void *)a2;
                uint64_t v48 = *(void *)(a2 + 8);
                uint64_t v49 = *(void *)(a2 + 16);
                uint64_t v50 = *(void *)(a2 + 24);
                int v51 = *(_DWORD *)(a2 + 32);
                sub_10028D48C(v47, v48, v49);
                *(void *)a1 = v47;
                *(void *)(a1 + 8) = v48;
                *(void *)(a1 + 16) = v49;
                *(void *)(a1 + 24) = v50;
                *(_DWORD *)(a1 + 32) = v51;
                break;
              case 9u:
                uint64_t v52 = *(void *)a2;
                uint64_t v53 = *(void *)(a2 + 8);
                uint64_t v54 = *(void *)(a2 + 16);
                char v55 = *(unsigned char *)(a2 + 24);
                sub_1002953E0();
                *(void *)a1 = v52;
                *(void *)(a1 + 8) = v53;
                *(void *)(a1 + 16) = v54;
                *(unsigned char *)(a1 + 24) = v55;
                break;
              default:
                unint64_t v11 = *(void *)a2;
                uint64_t v12 = *(void *)(a2 + 8);
                uint64_t v13 = *(void *)(a2 + 16);
                unsigned __int8 v14 = *(unsigned char *)(a2 + 24);
                sub_10038E5EC(v11, v12, v13, v14);
                *(void *)a1 = v11;
                *(void *)(a1 + 8) = v12;
                *(void *)(a1 + 16) = v13;
                *(unsigned char *)(a1 + 24) = v14;
                break;
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_32;
          case 1u:
            uint64_t v19 = *(void *)(a2 + 16);
            uint64_t v20 = *(void *)(a2 + 56);
            uint64_t v57 = *(void *)(a2 + 64);
            uint64_t v58 = *(void *)(a2 + 72);
            uint64_t v59 = *(void *)(a2 + 80);
            uint64_t v60 = *(void *)(a2 + 88);
            uint64_t v61 = *(void *)(a2 + 96);
            uint64_t v62 = *(void *)(a2 + 104);
            uint64_t v63 = *(void *)(a2 + 112);
            uint64_t v65 = *(void *)(a2 + 120);
            uint64_t v67 = *(void *)(a2 + 128);
            uint64_t v69 = *(void *)(a2 + 136);
            uint64_t v71 = *(void *)(a2 + 144);
            uint64_t v73 = *(void *)(a2 + 152);
            uint64_t v75 = *(void *)(a2 + 160);
            uint64_t v77 = *(void *)(a2 + 168);
            unsigned __int16 v79 = *(_WORD *)(a2 + 176);
            uint64_t v21 = *(void *)a2;
            uint64_t v22 = *(void *)(a2 + 8);
            uint64_t v23 = *(void *)(a2 + 24);
            uint64_t v24 = *(void *)(a2 + 32);
            uint64_t v25 = *(void *)(a2 + 40);
            uint64_t v26 = *(void *)(a2 + 48);
            uint64_t v27 = v20;
            sub_10038E74C(v21, v22, v19, v23, v24, v25, v26, v20, v57, v58, v59, v60, v61, v62, v63, v65, v67, v69, v71,
              v73,
              v75,
              v77,
              v79);
            *(void *)a1 = v21;
            *(void *)(a1 + 8) = v22;
            *(void *)(a1 + 16) = v19;
            *(void *)(a1 + 24) = v23;
            *(void *)(a1 + 32) = v24;
            *(void *)(a1 + 40) = v25;
            *(void *)(a1 + 48) = v26;
            *(void *)(a1 + 56) = v27;
            *(void *)(a1 + 64) = v57;
            *(void *)(a1 + 72) = v58;
            *(void *)(a1 + 80) = v59;
            *(void *)(a1 + 88) = v60;
            *(void *)(a1 + 96) = v61;
            *(void *)(a1 + 104) = v62;
            *(void *)(a1 + 112) = v63;
            *(void *)(a1 + 120) = v65;
            *(void *)(a1 + 128) = v67;
            *(void *)(a1 + 136) = v69;
            *(void *)(a1 + 144) = v71;
            *(void *)(a1 + 152) = v73;
            *(void *)(a1 + 160) = v75;
            *(void *)(a1 + 168) = v77;
            *(_WORD *)(a1 + 176) = v79;
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v28 = *(void *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = v28;
            unint64_t v29 = *(void *)(a2 + 16);
            uint64_t v30 = *(void *)(a2 + 24);
            uint64_t v31 = *(void *)(a2 + 32);
            unsigned __int8 v32 = *(unsigned char *)(a2 + 40);
            swift_bridgeObjectRetain();
            sub_10036C070(v29, v30, v31, v32);
            *(void *)(a1 + 16) = v29;
            *(void *)(a1 + 24) = v30;
            *(void *)(a1 + 32) = v31;
            *(unsigned char *)(a1 + 40) = v32;
            goto LABEL_32;
          case 3u:
            uint64_t v33 = *(void *)a2;
            if ((~*(void *)a2 & 0xF000000000000007) != 0) {
              sub_10036BCFC(*(void *)a2);
            }
            uint64_t v35 = *(void *)(a2 + 8);
            uint64_t v34 = *(void *)(a2 + 16);
            *(void *)a1 = v33;
            *(void *)(a1 + 8) = v35;
            *(void *)(a1 + 16) = v34;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 4u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
            swift_retain();
LABEL_32:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
      }
      else
      {
        unint64_t v15 = *(void *)a2;
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 16);
        char v18 = *(unsigned char *)(a2 + 24);
        sub_10038E5A0(v15, v16, v17, v18);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v17;
        *(unsigned char *)(a1 + 24) = v18;
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10038E5A0(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_retain();
  }
  else
  {
    sub_10036BCE8(a1);
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_10038E5EC(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    sub_10036BCE8(result);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10038E634(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  switch(a16 >> 4)
  {
    case 0:
    case 3:
    case 5:
    case 9:
      goto LABEL_5;
    case 1:
    case 2:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 4:
      sub_1000E872C(result, a2);
      goto LABEL_5;
    case 8:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_5:
      __n128 result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_10038E74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  int v24 = (a23 >> 9) & 7;
  switch(v24)
  {
    case 4:
      swift_retain();
      break;
    case 3:
      sub_1002892B4(a1, a2, a3, a4, a5);
      break;
    case 2:
      unsigned __int16 v25 = a23 & 0xF1FF;
      sub_10038E81C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        v25);
      break;
  }
}

void sub_10038E81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  switch(a23 >> 12)
  {
    case 0:
    case 6:
    case 0xB:
    case 0xC:
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRetain();
      break;
    case 5:
      sub_10013AEB4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        a23);
      break;
    case 7:
      sub_1002892B4(a1, a2, a3, a4, a5);
      break;
    default:
      return;
  }
}

void destroy for ServerResponseFramingParser.Frame(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    swift_errorRelease();
LABEL_8:
    swift_release();
  }
  else if (!EnumCaseMultiPayload)
  {
    type metadata accessor for ResponseOrContinuationRequest(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Response(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for ResponsePayload();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              unint64_t v11 = *(void *)a1;
              uint64_t v12 = *(void *)(a1 + 8);
              uint64_t v13 = *(void *)(a1 + 16);
              unsigned __int8 v14 = *(unsigned char *)(a1 + 24);
              sub_10038EE18(v11, v12, v13, v14);
              break;
            case 1u:
              sub_10038EE60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
              break;
            case 2u:
              type metadata accessor for MessageData();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                case 2u:
                  uint64_t v15 = sub_10000566C(&qword_100712FE0);
                  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
                  v16(a1, v15);
                  break;
                case 3u:
                case 4u:
                  goto LABEL_21;
                default:
                  return;
              }
              break;
            case 3u:
            case 4u:
              goto LABEL_21;
            case 5u:
              swift_release();
              swift_release();
              goto LABEL_8;
            case 6u:
              swift_bridgeObjectRelease();
              goto LABEL_8;
            case 7u:
              swift_release();
              goto LABEL_21;
            case 8u:
              uint64_t v17 = *(void *)a1;
              uint64_t v18 = *(void *)(a1 + 8);
              uint64_t v19 = *(void *)(a1 + 16);
              sub_10028D508(v17, v18, v19);
              break;
            case 9u:
              sub_100295400();
              break;
            default:
              return;
          }
          break;
        case 1u:
          sub_10038EF8C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
            *(void *)(a1 + 152),
            *(void *)(a1 + 160),
            *(void *)(a1 + 168),
            *(_WORD *)(a1 + 176));
          break;
        case 2u:
          swift_bridgeObjectRelease();
          unint64_t v7 = *(void *)(a1 + 16);
          uint64_t v8 = *(void *)(a1 + 24);
          uint64_t v9 = *(void *)(a1 + 32);
          unsigned __int8 v10 = *(unsigned char *)(a1 + 40);
          sub_10036BC08(v7, v8, v9, v10);
          break;
        case 3u:
          if ((~*(void *)a1 & 0xF000000000000007) != 0) {
            sub_10036BC64(*(void *)a1);
          }
LABEL_21:
          swift_bridgeObjectRelease();
          break;
        case 4u:
          goto LABEL_8;
        default:
          return;
      }
    }
    else
    {
      unint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      char v6 = *(unsigned char *)(a1 + 24);
      sub_10038EDCC(v3, v4, v5, v6);
    }
  }
}

uint64_t sub_10038EDCC(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_release();
  }
  else
  {
    sub_10036BC50(a1);
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_10038EE18(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    sub_10036BC50(result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10038EE60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  switch(a16 >> 4)
  {
    case 0:
    case 3:
    case 5:
    case 9:
      goto LABEL_7;
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_release();
    case 4:
      sub_1000E8770(result, a2);
      goto LABEL_7;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      __n128 result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void sub_10038EF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  int v24 = (a23 >> 9) & 7;
  switch(v24)
  {
    case 4:
      swift_release();
      break;
    case 3:
      sub_100212DE0(a1, a2, a3, a4, a5);
      break;
    case 2:
      unsigned __int16 v25 = a23 & 0xF1FF;
      sub_10038F05C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        v25);
      break;
  }
}

void sub_10038F05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int16 a23)
{
  switch(a23 >> 12)
  {
    case 0:
    case 6:
    case 0xB:
    case 0xC:
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 5:
      sub_1000613BC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        a23);
      break;
    case 7:
      sub_100212DE0(a1, a2, a3, a4, a5);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for ServerResponseFramingParser.Frame(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)a2;
    swift_errorRetain();
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
    swift_retain();
  }
  else
  {
    type metadata accessor for ResponseOrContinuationRequest(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Response(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          type metadata accessor for ResponsePayload();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v33 = *(void *)a2;
              uint64_t v34 = *(void *)(a2 + 8);
              uint64_t v63 = *(void *)(a2 + 24);
              uint64_t v35 = *(void *)(a2 + 32);
              uint64_t v37 = *(void *)(a2 + 48);
              uint64_t v36 = *(void *)(a2 + 56);
              uint64_t v61 = v36;
              uint64_t v65 = *(void *)(a2 + 64);
              uint64_t v67 = *(void *)(a2 + 72);
              uint64_t v69 = *(void *)(a2 + 80);
              uint64_t v71 = *(void *)(a2 + 88);
              uint64_t v73 = *(void *)(a2 + 96);
              uint64_t v75 = *(void *)(a2 + 104);
              uint64_t v77 = *(void *)(a2 + 112);
              unsigned __int8 v78 = *(unsigned char *)(a2 + 120);
              uint64_t v38 = *(void *)a2;
              uint64_t v39 = *(void *)(a2 + 16);
              uint64_t v40 = *(void *)(a2 + 40);
              sub_10038E634(v38, v34, v39, v63, v35, v40, v37, v36, v65, v67, v69, v71, v73, v75, v77, v78);
              *(void *)a1 = v33;
              *(void *)(a1 + 8) = v34;
              *(void *)(a1 + 16) = v39;
              *(void *)(a1 + 24) = v63;
              *(void *)(a1 + 32) = v35;
              *(void *)(a1 + 40) = v40;
              *(void *)(a1 + 48) = v37;
              *(void *)(a1 + 56) = v61;
              *(void *)(a1 + 64) = v65;
              *(void *)(a1 + 72) = v67;
              *(void *)(a1 + 80) = v69;
              *(void *)(a1 + 88) = v71;
              *(void *)(a1 + 96) = v73;
              *(void *)(a1 + 104) = v75;
              *(void *)(a1 + 112) = v77;
              *(unsigned char *)(a1 + 120) = v78;
              break;
            case 2u:
              uint64_t v41 = type metadata accessor for MessageData();
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                case 2u:
                  uint64_t v42 = sub_10000566C(&qword_100712FE0);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
                  goto LABEL_28;
                case 3u:
                case 4u:
                  *(void *)a1 = *(void *)a2;
                  swift_bridgeObjectRetain();
LABEL_28:
                  swift_storeEnumTagMultiPayload();
                  break;
                default:
                  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v41 - 8) + 64));
                  break;
              }
              break;
            case 3u:
            case 4u:
              *(void *)a1 = *(void *)a2;
              swift_bridgeObjectRetain();
              break;
            case 5u:
              uint64_t v43 = *(void *)(a2 + 8);
              *(void *)a1 = *(void *)a2;
              *(void *)(a1 + 8) = v43;
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              swift_retain();
              swift_retain();
              swift_retain();
              break;
            case 6u:
              *(void *)a1 = *(void *)a2;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(void *)(a1 + 24) = *(void *)(a2 + 24);
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
              *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 7u:
              *(void *)a1 = *(void *)a2;
              *(void *)(a1 + 8) = *(void *)(a2 + 8);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
              *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
              *(void *)(a1 + 24) = *(void *)(a2 + 24);
              swift_retain();
              swift_bridgeObjectRetain();
              break;
            case 8u:
              uint64_t v44 = *(void *)a2;
              uint64_t v45 = *(void *)(a2 + 8);
              uint64_t v46 = *(void *)(a2 + 16);
              uint64_t v47 = *(void *)(a2 + 24);
              int v48 = *(_DWORD *)(a2 + 32);
              sub_10028D48C(v44, v45, v46);
              *(void *)a1 = v44;
              *(void *)(a1 + 8) = v45;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = v47;
              *(_DWORD *)(a1 + 32) = v48;
              break;
            case 9u:
              uint64_t v49 = *(void *)a2;
              uint64_t v50 = *(void *)(a2 + 8);
              uint64_t v51 = *(void *)(a2 + 16);
              char v52 = *(unsigned char *)(a2 + 24);
              sub_1002953E0();
              *(void *)a1 = v49;
              *(void *)(a1 + 8) = v50;
              *(void *)(a1 + 16) = v51;
              *(unsigned char *)(a1 + 24) = v52;
              break;
            default:
              unint64_t v8 = *(void *)a2;
              uint64_t v9 = *(void *)(a2 + 8);
              uint64_t v10 = *(void *)(a2 + 16);
              unsigned __int8 v11 = *(unsigned char *)(a2 + 24);
              sub_10038E5EC(v8, v9, v10, v11);
              *(void *)a1 = v8;
              *(void *)(a1 + 8) = v9;
              *(void *)(a1 + 16) = v10;
              *(unsigned char *)(a1 + 24) = v11;
              break;
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        case 1u:
          uint64_t v16 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v54 = *(void *)(a2 + 64);
          uint64_t v55 = *(void *)(a2 + 72);
          uint64_t v56 = *(void *)(a2 + 80);
          uint64_t v57 = *(void *)(a2 + 88);
          uint64_t v58 = *(void *)(a2 + 96);
          uint64_t v59 = *(void *)(a2 + 104);
          uint64_t v60 = *(void *)(a2 + 112);
          uint64_t v62 = *(void *)(a2 + 120);
          uint64_t v64 = *(void *)(a2 + 128);
          uint64_t v66 = *(void *)(a2 + 136);
          uint64_t v68 = *(void *)(a2 + 144);
          uint64_t v70 = *(void *)(a2 + 152);
          uint64_t v72 = *(void *)(a2 + 160);
          uint64_t v74 = *(void *)(a2 + 168);
          unsigned __int16 v76 = *(_WORD *)(a2 + 176);
          uint64_t v18 = *(void *)a2;
          uint64_t v19 = *(void *)(a2 + 8);
          uint64_t v20 = *(void *)(a2 + 24);
          uint64_t v21 = *(void *)(a2 + 32);
          uint64_t v22 = *(void *)(a2 + 40);
          uint64_t v23 = *(void *)(a2 + 48);
          uint64_t v24 = v17;
          sub_10038E74C(v18, v19, v16, v20, v21, v22, v23, v17, v54, v55, v56, v57, v58, v59, v60, v62, v64, v66, v68,
            v70,
            v72,
            v74,
            v76);
          *(void *)a1 = v18;
          *(void *)(a1 + 8) = v19;
          *(void *)(a1 + 16) = v16;
          *(void *)(a1 + 24) = v20;
          *(void *)(a1 + 32) = v21;
          *(void *)(a1 + 40) = v22;
          *(void *)(a1 + 48) = v23;
          *(void *)(a1 + 56) = v24;
          *(void *)(a1 + 64) = v54;
          *(void *)(a1 + 72) = v55;
          *(void *)(a1 + 80) = v56;
          *(void *)(a1 + 88) = v57;
          *(void *)(a1 + 96) = v58;
          *(void *)(a1 + 104) = v59;
          *(void *)(a1 + 112) = v60;
          *(void *)(a1 + 120) = v62;
          *(void *)(a1 + 128) = v64;
          *(void *)(a1 + 136) = v66;
          *(void *)(a1 + 144) = v68;
          *(void *)(a1 + 152) = v70;
          *(void *)(a1 + 160) = v72;
          *(void *)(a1 + 168) = v74;
          *(_WORD *)(a1 + 176) = v76;
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v25 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v25;
          unint64_t v26 = *(void *)(a2 + 16);
          uint64_t v27 = *(void *)(a2 + 24);
          uint64_t v28 = *(void *)(a2 + 32);
          unsigned __int8 v29 = *(unsigned char *)(a2 + 40);
          swift_bridgeObjectRetain();
          sub_10036C070(v26, v27, v28, v29);
          *(void *)(a1 + 16) = v26;
          *(void *)(a1 + 24) = v27;
          *(void *)(a1 + 32) = v28;
          *(unsigned char *)(a1 + 40) = v29;
          goto LABEL_30;
        case 3u:
          uint64_t v30 = *(void *)a2;
          if ((~*(void *)a2 & 0xF000000000000007) != 0) {
            sub_10036BCFC(*(void *)a2);
          }
          uint64_t v32 = *(void *)(a2 + 8);
          uint64_t v31 = *(void *)(a2 + 16);
          *(void *)a1 = v30;
          *(void *)(a1 + 8) = v32;
          *(void *)(a1 + 16) = v31;
          swift_bridgeObjectRetain();
          goto LABEL_30;
        case 4u:
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
          swift_retain();
LABEL_30:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v7 - 8) + 64));
          break;
      }
    }
    else
    {
      unint64_t v12 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
      char v15 = *(unsigned char *)(a2 + 24);
      sub_10038E5A0(v12, v13, v14, v15);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v15;
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser.Frame(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100390288(a1, type metadata accessor for ServerResponseFramingParser.Frame);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *(void *)a2;
      swift_errorRetain();
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      int v6 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
      *(_DWORD *)(a1 + 24) = v6;
      swift_retain();
    }
    else
    {
      type metadata accessor for ResponseOrContinuationRequest(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v8 = type metadata accessor for Response(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            type metadata accessor for ResponsePayload();
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                uint64_t v56 = *(void *)(a2 + 8);
                uint64_t v31 = *(void *)(a2 + 16);
                uint64_t v32 = *(void *)(a2 + 32);
                uint64_t v33 = *(void *)(a2 + 48);
                uint64_t v52 = v33;
                uint64_t v54 = *(void *)(a2 + 40);
                uint64_t v50 = *(void *)(a2 + 56);
                uint64_t v58 = *(void *)(a2 + 64);
                uint64_t v60 = *(void *)(a2 + 72);
                uint64_t v62 = *(void *)(a2 + 80);
                uint64_t v64 = *(void *)(a2 + 88);
                uint64_t v66 = *(void *)(a2 + 96);
                uint64_t v68 = *(void *)(a2 + 104);
                uint64_t v70 = *(void *)(a2 + 112);
                unsigned __int8 v72 = *(unsigned char *)(a2 + 120);
                uint64_t v34 = *(void *)a2;
                uint64_t v35 = *(void *)(a2 + 24);
                sub_10038E634(v34, v56, v31, v35, v32, v54, v33, v50, v58, v60, v62, v64, v66, v68, v70, v72);
                *(void *)a1 = v34;
                *(void *)(a1 + 8) = v56;
                *(void *)(a1 + 16) = v31;
                *(void *)(a1 + 24) = v35;
                *(void *)(a1 + 32) = v32;
                *(void *)(a1 + 40) = v54;
                *(void *)(a1 + 48) = v52;
                *(void *)(a1 + 56) = v50;
                *(void *)(a1 + 64) = v58;
                *(void *)(a1 + 72) = v60;
                *(void *)(a1 + 80) = v62;
                *(void *)(a1 + 88) = v64;
                *(void *)(a1 + 96) = v66;
                *(void *)(a1 + 104) = v68;
                *(void *)(a1 + 112) = v70;
                *(unsigned char *)(a1 + 120) = v72;
                break;
              case 2u:
                uint64_t v36 = type metadata accessor for MessageData();
                switch(swift_getEnumCaseMultiPayload())
                {
                  case 1u:
                  case 2u:
                    uint64_t v37 = sub_10000566C(&qword_100712FE0);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
                    swift_storeEnumTagMultiPayload();
                    break;
                  case 3u:
                  case 4u:
                    *(void *)a1 = *(void *)a2;
                    swift_bridgeObjectRetain();
                    swift_storeEnumTagMultiPayload();
                    break;
                  default:
                    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v36 - 8) + 64));
                    break;
                }
                break;
              case 3u:
              case 4u:
                *(void *)a1 = *(void *)a2;
                swift_bridgeObjectRetain();
                break;
              case 5u:
                *(void *)a1 = *(void *)a2;
                *(void *)(a1 + 8) = *(void *)(a2 + 8);
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                swift_retain();
                swift_retain();
                swift_retain();
                break;
              case 6u:
                *(void *)a1 = *(void *)a2;
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
                int v38 = *(_DWORD *)(a2 + 32);
                *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
                *(_DWORD *)(a1 + 32) = v38;
                swift_bridgeObjectRetain();
                swift_retain();
                break;
              case 7u:
                *(void *)a1 = *(void *)a2;
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
                int v39 = *(_DWORD *)(a2 + 16);
                *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
                *(_DWORD *)(a1 + 16) = v39;
                *(void *)(a1 + 24) = *(void *)(a2 + 24);
                swift_retain();
                swift_bridgeObjectRetain();
                break;
              case 8u:
                uint64_t v40 = *(void *)a2;
                uint64_t v41 = *(void *)(a2 + 8);
                uint64_t v42 = *(void *)(a2 + 16);
                uint64_t v73 = *(void *)(a2 + 24);
                int v43 = *(_DWORD *)(a2 + 32);
                sub_10028D48C(v40, v41, v42);
                *(void *)a1 = v40;
                *(void *)(a1 + 8) = v41;
                *(void *)(a1 + 16) = v42;
                *(void *)(a1 + 24) = v73;
                *(_DWORD *)(a1 + 32) = v43;
                break;
              case 9u:
                unint64_t v27 = *(void *)a2;
                uint64_t v28 = *(void *)(a2 + 8);
                uint64_t v29 = *(void *)(a2 + 16);
                unsigned __int8 v30 = *(unsigned char *)(a2 + 24);
                sub_1002953E0();
                goto LABEL_28;
              default:
                unint64_t v27 = *(void *)a2;
                uint64_t v28 = *(void *)(a2 + 8);
                uint64_t v29 = *(void *)(a2 + 16);
                unsigned __int8 v30 = *(unsigned char *)(a2 + 24);
                sub_10038E5EC(v27, v28, v29, v30);
LABEL_28:
                *(void *)a1 = v27;
                *(void *)(a1 + 8) = v28;
                *(void *)(a1 + 16) = v29;
                *(unsigned char *)(a1 + 24) = v30;
                break;
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_30;
          case 1u:
            uint64_t v13 = *(void *)(a2 + 48);
            uint64_t v14 = *(void *)(a2 + 56);
            uint64_t v44 = v14;
            uint64_t v45 = *(void *)(a2 + 24);
            uint64_t v46 = *(void *)(a2 + 64);
            uint64_t v47 = *(void *)(a2 + 72);
            uint64_t v48 = *(void *)(a2 + 80);
            uint64_t v49 = *(void *)(a2 + 88);
            uint64_t v51 = *(void *)(a2 + 96);
            uint64_t v53 = *(void *)(a2 + 104);
            uint64_t v55 = *(void *)(a2 + 112);
            uint64_t v57 = *(void *)(a2 + 120);
            uint64_t v59 = *(void *)(a2 + 128);
            uint64_t v61 = *(void *)(a2 + 136);
            uint64_t v63 = *(void *)(a2 + 144);
            uint64_t v65 = *(void *)(a2 + 152);
            uint64_t v67 = *(void *)(a2 + 160);
            uint64_t v69 = *(void *)(a2 + 168);
            unsigned __int16 v71 = *(_WORD *)(a2 + 176);
            uint64_t v15 = *(void *)a2;
            uint64_t v16 = *(void *)(a2 + 8);
            uint64_t v17 = *(void *)(a2 + 16);
            uint64_t v18 = *(void *)(a2 + 32);
            uint64_t v19 = *(void *)(a2 + 40);
            uint64_t v20 = v13;
            sub_10038E74C(v15, v16, v17, v45, v18, v19, v13, v14, v46, v47, v48, v49, v51, v53, v55, v57, v59, v61, v63,
              v65,
              v67,
              v69,
              v71);
            *(void *)a1 = v15;
            *(void *)(a1 + 8) = v16;
            *(void *)(a1 + 16) = v17;
            *(void *)(a1 + 24) = v45;
            *(void *)(a1 + 32) = v18;
            *(void *)(a1 + 40) = v19;
            *(void *)(a1 + 48) = v20;
            *(void *)(a1 + 56) = v44;
            *(void *)(a1 + 64) = v46;
            *(void *)(a1 + 72) = v47;
            *(void *)(a1 + 80) = v48;
            *(void *)(a1 + 88) = v49;
            *(void *)(a1 + 96) = v51;
            *(void *)(a1 + 104) = v53;
            *(void *)(a1 + 112) = v55;
            *(void *)(a1 + 120) = v57;
            *(void *)(a1 + 128) = v59;
            *(void *)(a1 + 136) = v61;
            *(void *)(a1 + 144) = v63;
            *(void *)(a1 + 152) = v65;
            *(void *)(a1 + 160) = v67;
            *(void *)(a1 + 168) = v69;
            *(_WORD *)(a1 + 176) = v71;
            goto LABEL_30;
          case 2u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            unint64_t v21 = *(void *)(a2 + 16);
            uint64_t v22 = *(void *)(a2 + 24);
            uint64_t v23 = *(void *)(a2 + 32);
            unsigned __int8 v24 = *(unsigned char *)(a2 + 40);
            swift_bridgeObjectRetain();
            sub_10036C070(v21, v22, v23, v24);
            *(void *)(a1 + 16) = v21;
            *(void *)(a1 + 24) = v22;
            *(void *)(a1 + 32) = v23;
            *(unsigned char *)(a1 + 40) = v24;
            goto LABEL_30;
          case 3u:
            uint64_t v25 = *(void *)a2;
            if ((~*(void *)a2 & 0xF000000000000007) != 0) {
              sub_10036BCFC(*(void *)a2);
            }
            *(void *)a1 = v25;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            swift_bridgeObjectRetain();
            goto LABEL_30;
          case 4u:
            *(void *)a1 = *(void *)a2;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
            int v26 = *(_DWORD *)(a2 + 16);
            *(_DWORD *)(a1 + 19) = *(_DWORD *)(a2 + 19);
            *(_DWORD *)(a1 + 16) = v26;
            swift_retain();
LABEL_30:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v8 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        unint64_t v9 = *(void *)a2;
        uint64_t v10 = *(void *)(a2 + 8);
        uint64_t v11 = *(void *)(a2 + 16);
        char v12 = *(unsigned char *)(a2 + 24);
        sub_10038E5A0(v9, v10, v11, v12);
        *(void *)a1 = v9;
        *(void *)(a1 + 8) = v10;
        *(void *)(a1 + 16) = v11;
        *(unsigned char *)(a1 + 24) = v12;
        swift_storeEnumTagMultiPayload();
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100390288(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for ServerResponseFramingParser.Frame(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for ResponseOrContinuationRequest(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Response(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for ResponsePayload();
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          uint64_t v9 = type metadata accessor for MessageData();
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
          {
            uint64_t v11 = sub_10000566C(&qword_100712FE0);
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ServerResponseFramingParser.Frame(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100390288((uint64_t)a1, type metadata accessor for ServerResponseFramingParser.Frame);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for ResponseOrContinuationRequest(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for Response(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          uint64_t v8 = type metadata accessor for ResponsePayload();
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v9 = type metadata accessor for MessageData();
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
            {
              uint64_t v11 = sub_10000566C(&qword_100712FE0);
              (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
            }
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1003907EC()
{
  uint64_t result = type metadata accessor for ResponseOrContinuationRequest(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for ServerResponseFramingParser.ResponseParser()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 99) = *(_DWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(unsigned char *)(a1 + 102) = *(unsigned char *)(a2 + 102);
  return a1;
}

__n128 initializeWithTake for ServerResponseFramingParser.ResponseParser(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 95) = *(void *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ServerResponseFramingParser.ResponseParser(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 100);
  *(unsigned char *)(a1 + 102) = *(unsigned char *)(a2 + 102);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseFramingParser.ResponseParser(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 103)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseFramingParser.ResponseParser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 102) = 0;
    *(_WORD *)(result + 100) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 103) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 103) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseFramingParser.ResponseParser()
{
  return &type metadata for ServerResponseFramingParser.ResponseParser;
}

uint64_t getEnumTagSinglePayload for ServerResponseTranscoder.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ServerResponseTranscoder.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100390CC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder.Error()
{
  return &type metadata for ServerResponseTranscoder.Error;
}

unint64_t sub_100390CFC()
{
  unint64_t result = qword_1007138A8;
  if (!qword_1007138A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007138A8);
  }
  return result;
}

unint64_t sub_100390D50()
{
  unint64_t result = qword_1007138B0;
  if (!qword_1007138B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007138B0);
  }
  return result;
}

uint64_t sub_100390DA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100390E0C(uint64_t a1, uint64_t a2)
{
  return sub_10038940C(a1, a2, v2);
}

uint64_t type metadata accessor for StreamedBodySection(uint64_t a1)
{
  return sub_10003B314(a1, (uint64_t *)&unk_100713978);
}

unint64_t sub_100390E34()
{
  unint64_t result = qword_1007138F0;
  if (!qword_1007138F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007138F0);
  }
  return result;
}

unint64_t sub_100390E88()
{
  unint64_t result = qword_1007138F8;
  if (!qword_1007138F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007138F8);
  }
  return result;
}

unint64_t sub_100390EDC()
{
  unint64_t result = qword_100713900;
  if (!qword_100713900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713900);
  }
  return result;
}

uint64_t sub_100390F30(uint64_t a1)
{
  sub_10006133C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(unsigned char *)(a1 + 176));
  return a1;
}

unint64_t sub_100390F9C()
{
  unint64_t result = qword_100713908;
  if (!qword_100713908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713908);
  }
  return result;
}

uint64_t sub_100390FF0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

uint64_t sub_100391064(uint64_t a1)
{
  return a1;
}

uint64_t sub_100391098(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003910FC(uint64_t a1)
{
  return a1;
}

void destroy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1)
{
  sub_10038EF8C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(_WORD *)(a1 + 176));
}

uint64_t initializeWithCopy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  unsigned __int16 v26 = *(_WORD *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  sub_10038E74C(*(void *)a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = v26;
  return a1;
}

uint64_t assignWithCopy for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v30 = *(void *)(a2 + 72);
  uint64_t v31 = *(void *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 104);
  uint64_t v35 = *(void *)(a2 + 112);
  uint64_t v36 = *(void *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 128);
  uint64_t v38 = *(void *)(a2 + 136);
  uint64_t v39 = *(void *)(a2 + 144);
  uint64_t v40 = *(void *)(a2 + 152);
  uint64_t v41 = *(void *)(a2 + 160);
  uint64_t v42 = *(void *)(a2 + 168);
  unsigned __int16 v43 = *(_WORD *)(a2 + 176);
  sub_10038E74C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v36;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v37;
  *(void *)(a1 + 136) = v38;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  uint64_t v26 = *(void *)(a1 + 160);
  uint64_t v27 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  unsigned __int16 v28 = *(_WORD *)(a1 + 176);
  *(_WORD *)(a1 + 176) = v43;
  sub_10038EF8C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    v27,
    v28);
  return a1;
}

__n128 initializeWithTake for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 176);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  uint64_t v18 = *(void *)(a1 + 160);
  uint64_t v19 = *(void *)(a1 + 168);
  unsigned __int16 v20 = *(_WORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  long long v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  long long v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_WORD *)(a1 + 176) = v3;
  sub_10038EF8C(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    v19,
    v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponseTranscoder.UnknownServerResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 178)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = *(unsigned __int16 *)(a1 + 176);
  if ((~(v3 >> 9) & 6) != 0) {
    int v4 = -1;
  }
  else {
    int v4 = ~(v3 >> 9) & 7;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponseTranscoder.UnknownServerResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(void *)__n128 result = a2 - 3;
    if (a3 >= 3) {
      *(unsigned char *)(result + 178) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 178) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_WORD *)(result + 176) = (-512 * a2) & 0xE00;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponseTranscoder.UnknownServerResponse()
{
  return &type metadata for ServerResponseTranscoder.UnknownServerResponse;
}

uint64_t sub_10039164C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unsigned __int8 v9 = *((unsigned char *)a2 + 16);
    swift_bridgeObjectRetain();
    sub_10013B5CC(v8, v9);
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (void *)(a1 + v10);
    long long v12 = (char *)a2 + v10;
    uint64_t v13 = sub_1005E17E0();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_10000566C(&qword_1007138E0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t sub_1003917E0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_10013B5E0(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_1003918BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_10013B5CC(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  unsigned __int8 v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_1005E17E0();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10000566C(&qword_1007138E0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_100391A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 16);
  sub_10013B5CC(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v7;
  sub_10013B5E0(v8, v9);
  int v10 = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_1005E17E0();
  uint64_t v15 = *(void *)(v14 - 8);
  long long v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_10000566C(&qword_1007138E0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_100391BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10000566C(&qword_1007138E0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100391CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  sub_10013B5E0(v7, v8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 24);
  int v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = sub_1005E17E0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_10000566C(&qword_1007138E0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_100391EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100391EC0);
}

uint64_t sub_100391EC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_1007138E0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100391F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100391F88);
}

void *sub_100391F88(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000566C(&qword_1007138E0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100392034()
{
  sub_1003920D4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1003920D4()
{
  if (!qword_100713988)
  {
    sub_1005E17E0();
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100713988);
    }
  }
}

uint64_t sub_100392130(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ParseError(uint64_t a1)
{
  return sub_100392154(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100392154(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s13IMAP2Protocol10ParseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100392130(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100392130(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100392154(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParseError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100392154(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003922E0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1003922F8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ParseError()
{
  return &type metadata for ParseError;
}

uint64_t Tag.debugDescription.getter(uint64_t a1)
{
  uint64_t v2 = sub_1005E1C90();
  __chkstk_darwin(v2 - 8);
  sub_1003925E8(a1 & 0xFFFFFFFF000000FFLL);
  sub_1005E1C70();
  sub_10000566C(&qword_1007132F8);
  sub_10036C014();
  uint64_t v3 = sub_1005E1C30();
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if (v5) {
    return v3;
  }
  __break(1u);
  return result;
}

BOOL static Tag.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2 && HIDWORD(a1) == HIDWORD(a2);
}

IMAP2Protocol::Tag_optional __swiftcall Tag.init(_:)(Swift::String a1)
{
  result.value = (IMAP2Protocol::Tag)sub_100392F84(a1._countAndFlagsBits, (unint64_t)a1._object);
  Swift::Bool v2 = v1 & 1;
  result.is_nil = v2;
  return result;
}

void Tag.hash(into:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = HIDWORD(a2);
  sub_1005E3420(a2);
  sub_1005E3440(v2);
}

Swift::Int Tag.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1 = a1;
  unint64_t v2 = HIDWORD(a1);
  sub_1005E33F0();
  sub_1005E3420(v1);
  sub_1005E3440(v2);
  return sub_1005E3470();
}

Swift::Int sub_1003924C0()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  sub_1005E33F0();
  sub_1005E3420(v2);
  sub_1005E3440(v1);
  return sub_1005E3470();
}

void sub_100392520()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  sub_1005E3420(*(unsigned char *)v0);
  sub_1005E3440(v1);
}

Swift::Int sub_100392560()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  sub_1005E33F0();
  sub_1005E3420(v2);
  sub_1005E3440(v1);
  return sub_1005E3470();
}

BOOL sub_1003925BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t sub_1003925E8(unint64_t a1)
{
  unsigned __int8 v1 = a1;
  unint64_t v2 = HIDWORD(a1);
  int v15 = sub_100383094(0, 10, 0, _swiftEmptyArrayStorage);
  __int16 v3 = v1 / 0x1Au;
  sub_100392B34(0, 0, v1 % 0x1Au + 65);
  uint64_t v4 = v15;
  if ((v1 & 0xFEu) > 0x19uLL)
  {
    unint64_t v6 = v15[2];
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v6 >= v15[3] >> 1) {
      uint64_t v4 = sub_100383094(isUniquelyReferenced_nonNull_native, v6 + 1, 1, v15);
    }
    size_t v8 = v4[2];
    memmove((char *)v4 + 33, v4 + 4, v8);
    unint64_t v5 = v8 + 1;
    v4[2] = v5;
    *((unsigned char *)v4 + 32) = (unsigned __int16)(v3 - 1) % 0x1Au + 65;
    int v15 = v4;
  }
  else
  {
    unint64_t v5 = v15[2];
  }
  sub_100392B34(v5, v5, (v2 % 0xA) | 0x30);
  uint64_t v9 = v15;
  if (v2 < 0xA) {
    return (uint64_t)v9;
  }
  while (1)
  {
    unint64_t v10 = v9[2];
    if (v10 < v5) {
      break;
    }
    uint64_t v11 = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!v11 || v10 >= v9[3] >> 1) {
      uint64_t v9 = sub_100383094(v11, v10 + 1, 1, v9);
    }
    int64_t v12 = v9[2] - v5;
    if (v12 < 0) {
      goto LABEL_16;
    }
    memmove((char *)v9 + v5 + 33, (char *)v9 + v5 + 32, v12);
    ++v9[2];
    *((unsigned char *)v9 + v5 + 32) = (v2 / 0xA
                              - 10 * ((429496730 * (unint64_t)(v2 / 0xA)) >> 32)) | 0x30;
    BOOL v13 = v2 > 0x63;
    LODWORD(v2) = v2 / 0xA;
    if (!v13) {
      return (uint64_t)v9;
    }
  }
  __break(1u);
LABEL_16:
  uint64_t result = sub_1005E3000();
  __break(1u);
  return result;
}

uint64_t sub_10039281C()
{
  sub_1005E1C90();
  __chkstk_darwin();
  sub_1003925E8(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32));
  sub_1005E1C70();
  sub_10000566C(&qword_1007132F8);
  sub_10036C014();
  uint64_t v1 = sub_1005E1C30();
  uint64_t v3 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  if (v3) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003928F4()
{
  unint64_t v0 = sub_1005E1F50();
  uint64_t v4 = sub_100392974(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100392974(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10008436C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          uint64_t v11 = sub_100392ACC(v9, 0),
          unint64_t v12 = sub_10008446C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = sub_1005E1D80();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return sub_1005E1D80();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  sub_1005E2D30();
LABEL_4:
  return sub_1005E1D80();
}

void *sub_100392ACC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000566C(&qword_100713518);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  _OWORD v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_100392B34(uint64_t a1, int64_t a2, char a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  size_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = (char *)sub_100383094(result, v13, 1, v5);
    size_t v5 = result;
  }
  uint64_t v14 = v5 + 4;
  int v15 = (char *)v5 + a1 + 32;
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  size_t v17 = v16 - a2;
  if (__OFSUB__(v16, a2)) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v15 + 1;
    int v18 = (char *)v14 + a2;
    if (v15 + 1 != (char *)v14 + a2 || result >= &v18[v17]) {
      uint64_t result = (char *)memmove(result, v18, v17);
    }
    uint64_t v19 = v5[2];
    BOOL v20 = __OFADD__(v19, v9);
    uint64_t v21 = v19 + v9;
    if (!v20)
    {
      v5[2] = v21;
LABEL_20:
      *int v15 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)sub_1005E3000();
  __break(1u);
  return result;
}

void *sub_100392C94(void *result, uint64_t a2)
{
  if (a2 < 0) {
    goto LABEL_55;
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!a2)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  uint64_t v4 = result;
  char v5 = *(unsigned char *)result;
  if ((*(unsigned char *)result - 91) >= 0xE6u)
  {
    uint64_t v8 = 1;
    uint64_t result = sub_100383094(0, 1, 1, _swiftEmptyArrayStorage);
    uint64_t v3 = result;
    do
    {
      if (v8 - 1 >= a2)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      if (v10 >= v9 >> 1)
      {
        uint64_t result = sub_100383094((void *)(v9 > 1), v10 + 1, 1, v3);
        uint64_t v3 = result;
      }
      v3[2] = v10 + 1;
      *((unsigned char *)v3 + v10 + 32) = v5 - 65;
      if (a2 == v8) {
        goto LABEL_18;
      }
      char v5 = *((unsigned char *)v4 + v8++);
    }
    while ((v5 - 91) >= 0xE6u);
    uint64_t v6 = v8 - 1;
    if (v6 == a2) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_29;
    }
    uint64_t v6 = 0;
  }
  char v11 = *((unsigned char *)v4 + v6);
  if ((v11 - 58) < 0xF6u)
  {
LABEL_18:
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v12 = v7[2];
    if (v12)
    {
      uint64_t v13 = v3[2];
      if (v13)
      {
        uint64_t v14 = 0;
        int v15 = (unsigned __int8 *)(v3 + 4);
        do
        {
          uint64_t v16 = 26 * v14;
          if ((unsigned __int128)(v14 * (__int128)26) >> 64 != (26 * v14) >> 63)
          {
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          uint64_t v17 = *v15 + 1;
          BOOL v18 = __OFADD__(v16, v17);
          uint64_t v14 = v16 + v17;
          if (v18) {
            goto LABEL_50;
          }
          ++v15;
          --v13;
        }
        while (v13);
        unint64_t v19 = v14 - 1;
        if (!__OFSUB__(v14, 1)) {
          goto LABEL_26;
        }
        __break(1u);
LABEL_32:
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        while (1)
        {
          uint64_t v22 = 10 * v21;
          if ((unsigned __int128)((uint64_t)v21 * (__int128)10) >> 64 != (uint64_t)(10 * v21) >> 63) {
            break;
          }
          uint64_t v23 = *((unsigned __int8 *)v7 + v20 + 32);
          unint64_t v21 = v22 + v23;
          if (__OFADD__(v22, v23)) {
            goto LABEL_53;
          }
          if (v12 == ++v20)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (HIDWORD(v21)) {
              return 0;
            }
            else {
              return (void *)(v19 | (v21 << 32));
            }
          }
        }
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      unint64_t v19 = -1;
LABEL_26:
      if ((v19 & 0x8000000000000000) == 0 && v19 <= 0xFF) {
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = sub_100383094(0, 1, 1, _swiftEmptyArrayStorage);
  uint64_t v7 = result;
  while (1)
  {
    if (v6 == a2) {
      uint64_t v6 = a2;
    }
    else {
      ++v6;
    }
    if (v6 > a2) {
      break;
    }
    unint64_t v25 = v7[2];
    unint64_t v24 = v7[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t result = sub_100383094((void *)(v24 > 1), v25 + 1, 1, v7);
      uint64_t v7 = result;
    }
    v7[2] = v25 + 1;
    *((unsigned char *)v7 + v25 + 32) = v11 - 48;
    if (v6 != a2)
    {
      char v11 = *((unsigned char *)v4 + v6);
      if ((v11 - 58) > 0xF5u) {
        continue;
      }
    }
    goto LABEL_19;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void *sub_100392F84(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = HIBYTE(v2) & 0xF;
    v10[0] = a1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v4 = v10;
    goto LABEL_7;
  }
  a1 = sub_1003928F4();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  unint64_t v2 = v7;
  if ((v7 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v4 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = (void *)sub_1005E2D30();
  }
LABEL_7:
  uint64_t v8 = sub_100392C94(v4, v5);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_100393038()
{
  unint64_t result = qword_1007139C0;
  if (!qword_1007139C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007139C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tag()
{
  return &type metadata for Tag;
}

id MessageIdentifierSet<>.makeNSArrayOfNSNumber()()
{
  uint64_t v18 = sub_10000566C(&qword_1007139C8);
  __chkstk_darwin();
  unint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000566C(&qword_100712FC8);
  MessageIdentifierSet.count.getter();
  id v5 = [objc_allocWithZone((Class)NSMutableArray) initWithCapacity:v4];
  sub_100393244(v0, (uint64_t)v2);
  uint64_t v6 = MessageIdentifierSet.startIndex.getter(v3);
  uint64_t v8 = v7;
  if (v6 != MessageIdentifierSet.endIndex.getter(v3) || v8 != v9)
  {
    do
    {
      do
      {
        MessageIdentifierSet.subscript.getter();
        uint64_t v11 = v19;
        MessageIdentifierSet.index(_:offsetBy:)();
        uint64_t v6 = v12;
        uint64_t v8 = v13;
        id v14 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v11];
        [v5 addObject:v14];
      }
      while (v6 != MessageIdentifierSet.endIndex.getter(v3));
    }
    while (v8 != v15);
  }
  uint64_t v16 = (uint64_t *)&v2[*(int *)(v18 + 36)];
  *uint64_t v16 = v6;
  v16[1] = v8;
  sub_1003932AC((uint64_t)v2);
  return v5;
}

uint64_t sub_100393244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100712FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003932AC(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_1007139C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CompactEncDet_detectEncoding(int8x8_t *a1, int a2, char *a3, int a4, int a5, unsigned int a6, unsigned __int8 *a7)
{
  if (a4) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = 2;
  }
  int v9 = 0;
  return CompactEncDet::DetectEncoding(a1, a2, 0, a3, 0, a5, a6, v7, 0, &v9, a7);
}

uint64_t CompactEncDet_EncodingNameAliasToEncoding(char *a1)
{
  return EncodingNameAliasToEncoding(a1);
}

void *SetDetailsEncProbCopyOffset(uint64_t a1, int a2, std::string::value_type *__s)
{
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32) + 304 * v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)(v5 - 304);
  *(_DWORD *)(v5 + 4) = a2;
  std::string::assign((std::string *)(v5 + 8), __s);
  unint64_t result = memcpy((void *)(*(void *)(a1 + 32) + 304 * v4 + 32), (const void *)(a1 + 532), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void *SetDetailsEncLabel(uint64_t a1, const std::string::value_type *a2)
{
  int v3 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32) + 304 * v3;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)(v4 - 304);
  *(_DWORD *)(v4 + 4) = -1;
  std::string::assign((std::string *)(v4 + 8), a2);
  unint64_t result = memcpy((void *)(*(void *)(a1 + 32) + 304 * v3 + 32), (const void *)(a1 + 532), 0x10CuLL);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void PsSourceInit(int a1)
{
  dword_100743920 = 0;
  dword_100743924 = a1;
  if (qword_100743928) {
    operator delete[]();
  }
  operator new[]();
}

void PsSourceFinish(void)
{
  uint64_t v0 = (2 * dword_100743924);
  uint64_t v1 = (const char *)qword_100743928;
  int v2 = v0 & ((int)v0 >> 31);
  uint64_t v3 = v0 - 1;
  do
  {
    BOOL v4 = __OFSUB__(v0, 1);
    LODWORD(v0) = v0 - 1;
    if ((int)v0 < 0 != v4) {
      goto LABEL_5;
    }
    int v5 = *(unsigned __int8 *)(qword_100743928 + v3--);
  }
  while (v5 == 32);
  int v2 = v0 + 1;
LABEL_5:
  *(unsigned char *)(qword_100743928 + v2) = 0;
  fprintf(__stderrp, "(      %s) do-src\n", v1);
  uint64_t v6 = qword_100743928;
  size_t v7 = 2 * dword_100743924;
  memset((void *)qword_100743928, 32, v7);
  *(void *)(v6 + v7) = 0;
  operator delete[]();
}

size_t PsSource(size_t result, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  int v4 = ((int)result - (int)a2) / dword_100743924 * dword_100743924;
  if (v4 >= dword_100743920)
  {
    int v5 = (int)a3;
    dword_100743920 = v4 + dword_100743924;
    uint64_t v6 = (2 * dword_100743924);
    size_t v7 = (const char *)qword_100743928;
    int v8 = v6 & ((int)v6 >> 31);
    uint64_t v9 = v6 - 1;
    while (1)
    {
      BOOL v10 = __OFSUB__(v6, 1);
      LODWORD(v6) = v6 - 1;
      if ((int)v6 < 0 != v10) {
        break;
      }
      int v11 = *(unsigned __int8 *)(qword_100743928 + v9--);
      if (v11 != 32)
      {
        int v8 = v6 + 1;
        break;
      }
    }
    *(unsigned char *)(qword_100743928 + v8) = 0;
    fprintf(__stderrp, "(      %s) do-src\n", v7);
    uint64_t v12 = qword_100743928;
    uint64_t v13 = dword_100743924;
    memset((void *)qword_100743928, 32, 2 * dword_100743924);
    *(void *)(v12 + 2 * v13) = 0;
    id v14 = &a2[v4];
    if ((int)v13 >= v5 - (int)v14) {
      uint64_t v15 = (v5 - v14);
    }
    else {
      uint64_t v15 = v13;
    }
    fprintf(__stderrp, "(%05x ", v4);
    if ((int)v15 >= 1)
    {
      do
      {
        int v17 = *v14++;
        int v16 = v17;
        if (v17 == 10) {
          int v16 = 32;
        }
        if (v16 == 13) {
          int v16 = 32;
        }
        if (v16 == 9) {
          int v16 = 32;
        }
        switch(v16)
        {
          case '\\':
            uint64_t v18 = __stderrp;
            unsigned int v19 = "\\\\ ";
            break;
          case ')':
            uint64_t v18 = __stderrp;
            unsigned int v19 = "\\) ";
            break;
          case '(':
            uint64_t v18 = __stderrp;
            unsigned int v19 = "\\( ";
            break;
          default:
            if (((char)v16 - 32) > 0x5E) {
              fprintf(__stderrp, "%02x");
            }
            else {
              fprintf(__stderrp, "%c ");
            }
            goto LABEL_26;
        }
        fputs(v19, v18);
LABEL_26:
        --v15;
      }
      while (v15);
    }
    unint64_t result = fwrite(") do-src\n", 9uLL, 1uLL, __stderrp);
    int v20 = next_do_src_line;
    *((_DWORD *)&do_src_offset + (next_do_src_line & 0xF)) = v4;
    next_do_src_line = v20 + 1;
  }
  return result;
}

uint64_t PsHighlight(uint64_t result, const unsigned __int8 *a2, int a3, int a4)
{
  int v4 = result - a2 + 1;
  int v5 = v4 / dword_100743924 * dword_100743924;
  int v6 = v4 % dword_100743924;
  int v7 = -1;
  while (*((_DWORD *)&do_src_offset + (((_BYTE)next_do_src_line + (_BYTE)v7) & 0xF)) != v5)
  {
    if (--v7 == -17) {
      return result;
    }
  }
  return fprintf(__stderrp, "%d %d %d do-highlight%d\n", -v7, v6 - 1, a3, a4);
}

void InitDetectEncodingState(uint64_t a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(_OWORD *)(a1 + 196) = xmmword_100603930;
  *(_OWORD *)(a1 + 240) = xmmword_100603940;
  *(_DWORD *)(a1 + 256) = 1200;
  *(_DWORD *)(a1 + 236) = -1;
  *(void *)(a1 + 228) = -1;
  *(void *)(a1 + 220) = -1;
  *(void *)(a1 + 212) = 23;
  do
  {
    if ((dword_100613EC0[dword_100603988[v1]] & 0x200) == 0)
    {
      uint64_t v3 = a1 + 4 * v2++;
      *(_DWORD *)(v3 + 264) = v1;
    }
    ++v1;
  }
  while (v1 != 67);
  *(_DWORD *)(a1 + 260) = v2;
  bzero((void *)(a1 + 532), 0x334uLL);
}

uint64_t ApplyCompressedProb(unsigned __int8 *a1, int a2, int a3, uint64_t a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v6 = (_DWORD *)(a4 + 1068);
  uint64_t v7 = a4 + 532;
  int v8 = -1;
  uint64_t v9 = (int *)(a4 + 532);
  BOOL v10 = &a1[a2];
  do
  {
    unsigned int v12 = *a1++;
    unint64_t v11 = v12;
    if (!v12) {
      break;
    }
    uint64_t v13 = v11 & 0xF;
    if ((v11 & 0xF) != 0)
    {
      unint64_t v14 = v11 >> 4;
      v9 += v14;
      v6 += v14;
      unint64_t v15 = ((unint64_t)v9 - v7) >> 2;
      uint64_t v16 = v13;
      int v17 = a1;
      uint64_t v18 = v9;
      unsigned int v19 = v6;
      do
      {
        int v21 = *v17++;
        int v20 = v21;
        BOOL v22 = v8 < v21;
        if (v8 <= v21) {
          int v8 = v20;
        }
        if (v22) {
          uint64_t result = v15;
        }
        else {
          uint64_t result = result;
        }
        if (a3 >= 1)
        {
          int v23 = 3 * a3 * v20 / 100;
          if (*v18 > v23) {
            int v23 = *v18;
          }
          int *v18 = v23;
          *unsigned int v19 = 1;
        }
        LODWORD(v15) = v15 + 1;
        ++v19;
        ++v18;
        --v16;
      }
      while (v16);
      a1 += v13;
    }
    else
    {
      uint64_t v13 = v11 & 0xF0;
    }
    v9 += v13;
    v6 += v13;
  }
  while (a1 < v10);
  return result;
}

uint64_t TopCompressedProb(const char *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = 0;
  int v5 = 0;
  int v6 = &a1[a2];
  do
  {
    unsigned int v8 = *(unsigned __int8 *)a1++;
    unsigned int v7 = v8;
    if (!v8) {
      break;
    }
    uint64_t v9 = v7 & 0xF;
    if ((v7 & 0xF) != 0)
    {
      unsigned int v10 = (v7 >> 4) + v5;
      uint64_t v11 = v7 & 0xF;
      unsigned int v12 = a1;
      unsigned int v13 = v10;
      do
      {
        int v15 = *(unsigned __int8 *)v12++;
        int v14 = v15;
        BOOL v16 = v4 < v15;
        if (v4 <= v15) {
          int v4 = v14;
        }
        if (v16) {
          uint64_t result = v13;
        }
        else {
          uint64_t result = result;
        }
        ++v13;
        --v11;
      }
      while (v11);
      a1 += v9;
      int v5 = v10 + v9;
    }
    else
    {
      v5 += v7 & 0xF0;
    }
  }
  while (a1 < v6);
  return result;
}

uint64_t HintBinaryLookup8(uint64_t a1, int a2, unint64_t *a3)
{
  if (a2 >= 1)
  {
    int v3 = 0;
    do
    {
      uint64_t v4 = ((a2 + v3) >> 1);
      unint64_t v5 = bswap64(*(void *)(a1 + 20 * (int)v4));
      unint64_t v6 = bswap64(*a3);
      BOOL v7 = v5 >= v6;
      BOOL v8 = v5 > v6;
      int v9 = !v7;
      int v10 = v8 - v9;
      if (v10 < 0)
      {
        int v3 = v4 + 1;
      }
      else
      {
        a2 = (a2 + v3) >> 1;
        if (!v10) {
          return v4;
        }
      }
    }
    while (v3 < a2);
  }
  return 0xFFFFFFFFLL;
}

uint64_t HintBinaryLookup4(uint64_t a1, int a2, unsigned int *a3)
{
  if (a2 >= 1)
  {
    int v3 = 0;
    do
    {
      uint64_t v4 = ((a2 + v3) >> 1);
      unsigned int v5 = bswap32(*(_DWORD *)(a1 + 20 * (int)v4));
      unsigned int v6 = bswap32(*a3);
      BOOL v7 = v5 >= v6;
      BOOL v8 = v5 > v6;
      int v9 = !v7;
      int v10 = v8 - v9;
      if (v10 < 0)
      {
        int v3 = v4 + 1;
      }
      else
      {
        a2 = (a2 + v3) >> 1;
        if (!v10) {
          return v4;
        }
      }
    }
    while (v3 < a2);
  }
  return 0xFFFFFFFFLL;
}

uint64_t ApplyTldHint(char *__s, int a2, uint64_t a3)
{
  if (*__s == 126) {
    return 0;
  }
  sub_100399800(__p, __s);
  MakeChar4((uint64_t *)__p, v17);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 >= 0) {
    BOOL v7 = (unsigned int *)v17;
  }
  else {
    BOOL v7 = (unsigned int *)v17[0];
  }
  int v8 = HintBinaryLookup4((uint64_t)byte_1006162F0, 247, v7);
  if (v8 < 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    int v9 = ApplyCompressedProb(&byte_1006162F0[20 * v8 + 4], 16, a2, a3);
    if (v9) {
      int v10 = v9;
    }
    else {
      int v10 = 4;
    }
    *(_DWORD *)(a3 + 48) = v10;
    uint64_t v11 = *(void *)(a3 + 32);
    if (v11)
    {
      int v12 = *(_DWORD *)(a3 + 40);
      uint64_t v13 = v11 + 304 * v12;
      *(_DWORD *)uint64_t v13 = 0;
      *(_DWORD *)(v13 + 4) = v10;
      std::string::assign((std::string *)(v13 + 8), __s);
      memcpy((void *)(*(void *)(a3 + 32) + 304 * v12 + 32), (const void *)(a3 + 532), 0x10CuLL);
      ++*(_DWORD *)(a3 + 40);
    }
    uint64_t v3 = 1;
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  return v3;
}

void sub_100393CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ApplyCharsetHint(char *__s, int a2, uint64_t a3)
{
  if (*__s == 126) {
    return 0;
  }
  sub_100399800(&__p, __s);
  MakeChar44((uint64_t *)&__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v8 = HintBinaryLookup8((uint64_t)byte_10061763C, 438, (unint64_t *)p_str);
  if (v8 < 0)
  {
    uint64_t v3 = 0;
    goto LABEL_62;
  }
  unsigned int v9 = ApplyCompressedProb(&byte_10061763C[20 * v8 + 8], 12, a2, a3);
  if (v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 4;
  }
  *(_DWORD *)(a3 + 48) = v10;
  if (*(_DWORD *)(a3 + 204) == 23 && *(_DWORD *)(a3 + 208) == 23)
  {
    switch(v10)
    {
      case 9u:
        int v11 = 12;
        goto LABEL_20;
      case 0xAu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 572);
        goto LABEL_44;
      case 0xBu:
        int v13 = 34;
        goto LABEL_41;
      case 0xCu:
        int v11 = 9;
LABEL_20:
        *(_DWORD *)(a3 + 52) = v11;
        *(_DWORD *)(a3 + 568) += 120;
        int v12 = (_DWORD *)(a3 + 580);
        goto LABEL_44;
      case 0xDu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 584);
        goto LABEL_44;
      case 0xEu:
        int v14 = 28;
        goto LABEL_36;
      case 0xFu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 592);
        goto LABEL_44;
      case 0x10u:
        int v15 = 29;
        goto LABEL_38;
      case 0x11u:
        int v16 = 25;
        goto LABEL_32;
      case 0x12u:
        int v12 = (_DWORD *)(a3 + 604);
        goto LABEL_44;
      case 0x14u:
        int v17 = 23;
        goto LABEL_30;
      case 0x16u:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 620);
        goto LABEL_44;
      case 0x17u:
        int v17 = 20;
LABEL_30:
        *(_DWORD *)(a3 + 52) = v17;
        *(_DWORD *)(a3 + 612) += 120;
        int v12 = (_DWORD *)(a3 + 624);
        goto LABEL_44;
      case 0x19u:
        int v16 = 17;
LABEL_32:
        *(_DWORD *)(a3 + 52) = v16;
        *(_DWORD *)(a3 + 632) += 120;
        int v12 = (_DWORD *)(a3 + 600);
        goto LABEL_44;
      case 0x1Au:
        int v12 = (_DWORD *)(a3 + 636);
        goto LABEL_44;
      case 0x1Bu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 640);
        goto LABEL_44;
      case 0x1Cu:
        int v14 = 14;
LABEL_36:
        *(_DWORD *)(a3 + 52) = v14;
        *(_DWORD *)(a3 + 588) += 120;
        int v12 = (_DWORD *)(a3 + 644);
        goto LABEL_44;
      case 0x1Du:
        int v15 = 16;
LABEL_38:
        *(_DWORD *)(a3 + 52) = v15;
        *(_DWORD *)(a3 + 648) += 120;
        int v12 = (_DWORD *)(a3 + 596);
        goto LABEL_44;
      case 0x1Eu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 652);
        goto LABEL_44;
      case 0x22u:
        int v13 = 11;
LABEL_41:
        *(_DWORD *)(a3 + 52) = v13;
        *(_DWORD *)(a3 + 668) += 120;
        int v12 = (_DWORD *)(a3 + 576);
        goto LABEL_44;
      case 0x26u:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 684);
        goto LABEL_44;
      case 0x2Bu:
        *(_DWORD *)(a3 + 52) = 0;
        int v12 = (_DWORD *)(a3 + 704);
LABEL_44:
        *v12 += 120;
        break;
      default:
        break;
    }
  }
  uint64_t v18 = *(void *)(a3 + 32);
  if (v18)
  {
    int v19 = *(_DWORD *)(a3 + 40);
    uint64_t v20 = v18 + 304 * v19;
    *(_DWORD *)uint64_t v20 = 0;
    *(_DWORD *)(v20 + 4) = v10;
    std::string::assign((std::string *)(v20 + 8), __s);
    memcpy((void *)(*(void *)(a3 + 32) + 304 * v19 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  if (v10 > 4 || ((1 << v10) & 0x16) == 0) {
    *(_DWORD *)(a3 + 768) -= 2400;
  }
  std::string::basic_string(&__p, &__str, 0, 4uLL, (std::allocator<char> *)&v26);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1919251317) {
      goto LABEL_61;
    }
LABEL_59:
    *(_DWORD *)(a3 + 764) += 7200;
    goto LABEL_61;
  }
  if (__p.__r_.__value_.__l.__size_ != 4)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  int v22 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 == 1919251317) {
    goto LABEL_59;
  }
LABEL_61:
  uint64_t v3 = 1;
LABEL_62:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_100394064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ApplyEncodingHint(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  unsigned int v6 = a1 ^ (a1 >> 31);
  while (dword_100603988[v5] != v6)
  {
    if (++v5 == 67)
    {
      uint64_t v5 = -1;
      break;
    }
  }
  uint64_t v7 = a3 + 4 * v5;
  if (a1 >= 0) {
    int v8 = 6 * a2;
  }
  else {
    int v8 = -6 * a2;
  }
  *(_DWORD *)(v7 + 532) += v8;
  if (*(void *)(a3 + 32))
  {
    unsigned int v9 = MyEncodingName(v6);
    int v10 = *(_DWORD *)(a3 + 40);
    uint64_t v11 = *(void *)(a3 + 32) + 304 * v10;
    *(void *)uint64_t v11 = 0xFFFFFFFF00000000;
    std::string::assign((std::string *)(v11 + 8), v9);
    memcpy((void *)(*(void *)(a3 + 32) + 304 * v10 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  return 1;
}

uint64_t ApplyUILanguageHint(unsigned int a1, int a2, uint64_t a3)
{
  if (a1 == 26) {
    return 0;
  }
  unsigned int v6 = (char *)LanguageName(a1);
  sub_100399800(__p, v6);
  MakeChar8((uint64_t *)__p, v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  char v7 = v20;
  if (v20 >= 0) {
    int v8 = (unint64_t *)v19;
  }
  else {
    int v8 = (unint64_t *)v19[0];
  }
  int v9 = HintBinaryLookup8((uint64_t)byte_100619874, 151, v8);
  if (v9 < 0)
  {
    uint64_t v3 = 0;
    if ((v7 & 0x80) == 0) {
      return v3;
    }
    goto LABEL_19;
  }
  int v10 = ApplyCompressedProb(&byte_100619874[20 * v9 + 8], 12, a2, a3);
  if (v10) {
    int v11 = v10;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a3 + 48) = v11;
  uint64_t v12 = *(void *)(a3 + 32);
  if (!v12)
  {
    uint64_t v3 = 1;
    if ((v20 & 0x80) == 0) {
      return v3;
    }
    goto LABEL_19;
  }
  if (v20 >= 0) {
    int v13 = v19;
  }
  else {
    int v13 = (void **)v19[0];
  }
  int v14 = *(_DWORD *)(a3 + 40);
  uint64_t v15 = v12 + 304 * v14;
  *(_DWORD *)uint64_t v15 = 0;
  *(_DWORD *)(v15 + 4) = v11;
  std::string::assign((std::string *)(v15 + 8), (const std::string::value_type *)v13);
  memcpy((void *)(*(void *)(a3 + 32) + 304 * v14 + 32), (const void *)(a3 + 532), 0x10CuLL);
  ++*(_DWORD *)(a3 + 40);
  uint64_t v3 = 1;
  if (v20 < 0) {
LABEL_19:
  }
    operator delete(v19[0]);
  return v3;
}

void sub_100394344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ApplyDefaultHint(unsigned int a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 67; ++i)
  {
    int v4 = 3 * byte_10061A440[i];
    if (dword_100613EC0[dword_100603988[i]]) {
      int v4 = 0;
    }
    *(_DWORD *)(a2 + 532 + 4 * i) = v4;
  }
  if (a1 < 2) {
    *(_DWORD *)(a2 + 768) = *(_DWORD *)(a2 + 540) - 60;
  }
  if (FLAGS_demo_nodefault)
  {
    *(_OWORD *)(a2 + 784) = 0u;
    *(_OWORD *)(a2 + 756) = 0u;
    *(_OWORD *)(a2 + 772) = 0u;
    *(_OWORD *)(a2 + 724) = 0u;
    *(_OWORD *)(a2 + 740) = 0u;
    *(_OWORD *)(a2 + 692) = 0u;
    *(_OWORD *)(a2 + 708) = 0u;
    *(_OWORD *)(a2 + 660) = 0u;
    *(_OWORD *)(a2 + 676) = 0u;
    *(_OWORD *)(a2 + 628) = 0u;
    *(_OWORD *)(a2 + 644) = 0u;
    *(_OWORD *)(a2 + 596) = 0u;
    *(_OWORD *)(a2 + 612) = 0u;
    *(_OWORD *)(a2 + 564) = 0u;
    *(_OWORD *)(a2 + 580) = 0u;
    *(_OWORD *)(a2 + 532) = 0u;
    *(_OWORD *)(a2 + 548) = 0u;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 40);
    uint64_t v7 = v5 + 304 * v6;
    *(void *)uint64_t v7 = 0xFFFFFFFF00000000;
    std::string::assign((std::string *)(v7 + 8), "Default");
    memcpy((void *)(*(void *)(a2 + 32) + 304 * v6 + 32), (const void *)(a2 + 532), 0x10CuLL);
    ++*(_DWORD *)(a2 + 40);
  }
  return 1;
}

uint64_t ExtractTLD(char *a1, char *__dst, int a3, const char **a4, int *a5)
{
  size_t v10 = a3;
  uint64_t result = (uint64_t)strncpy(__dst, "~", a3);
  size_t v12 = v10 - 1;
  __dst[v10 - 1] = 0;
  *a4 = 0;
  *a5 = 0;
  if (a1)
  {
    uint64_t result = strlen(a1);
    int v13 = result;
    if (result)
    {
      if ((int)result < 11)
      {
        uint64_t result = (uint64_t)strncpy(__dst, a1, v10);
        __dst[v12] = 0;
      }
      else
      {
        uint64_t result = (uint64_t)strchr(a1, 47);
        if (result)
        {
          uint64_t v14 = result;
          if ((char *)result != a1 && *(unsigned char *)(result - 1) == 58 && *(unsigned char *)(result + 1) == 47)
          {
            uint64_t v15 = result - (void)a1;
            if ((char *)result == a1)
            {
LABEL_11:
              int v16 = (const char *)(result + 2);
              int v17 = strchr((char *)(result + 2), 47);
              char v18 = &a1[v13];
              if (v17) {
                char v18 = v17;
              }
              int64_t v19 = v18 - v16;
              uint64_t result = (uint64_t)memchr((void *)(v14 + 2), 58, v18 - v16);
              if (result) {
                int64_t v19 = result - (void)v16;
              }
              int v20 = -1;
              int64_t v21 = v19;
              while (v21 + 2 >= 3)
              {
                int v22 = *(unsigned __int8 *)(v14 + v21-- + 1);
                ++v20;
                if (v22 == 46)
                {
                  if (v20 >= a3) {
                    int v23 = v12;
                  }
                  else {
                    int v23 = v20;
                  }
                  uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v14 + v21 + 3), v23);
                  __dst[v23] = 0;
                  break;
                }
              }
              *a4 = v16;
              *a5 = v19;
            }
            else
            {
              while (a1[v15 - 1] != 46)
              {
                if (!--v15) {
                  goto LABEL_11;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *ApplyHints(char *a1, char *a2, char *a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  ExtractTLD(a1, __dst, 16, (const char **)&v32, &v31);
  *(void *)(a7 + 48) = 4;
  if (a2)
  {
    LODWORD(v15) = 4;
    if (*a2 == 126)
    {
      LODWORD(a2) = 0;
    }
    else
    {
      *(_DWORD *)(a7 + 52) = 4;
      LODWORD(a2) = ApplyCharsetHint(a2, 100, a7);
      uint64_t v15 = *(int *)(a7 + 48);
      *(_DWORD *)(a7 + 204) = dword_100603988[v15];
      if (v15 == 4 || v15 == 1) {
        *(unsigned char *)(a7 + 64) = 1;
      }
    }
  }
  else
  {
    LODWORD(v15) = 4;
  }
  if (a3)
  {
    if (*a3 != 126)
    {
      *(_DWORD *)(a7 + 52) = v15;
      LODWORD(a2) = ApplyCharsetHint(a3, 100, a7) + a2;
      uint64_t v16 = *(int *)(a7 + 48);
      LODWORD(v15) = *(_DWORD *)(a7 + 48);
      *(_DWORD *)(a7 + 208) = dword_100603988[v16];
      if (v16 == 4 || v15 == 1) {
        *(unsigned char *)(a7 + 64) = 1;
      }
    }
  }
  if (a4 != 23)
  {
    *(_DWORD *)(a7 + 52) = v15;
    ApplyEncodingHint(a4, 50, a7);
    LODWORD(a2) = a2 + 1;
  }
  if (a5 != 26)
  {
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    LODWORD(a2) = ApplyUILanguageHint(a5, 50, a7) + a2;
  }
  if (a1)
  {
    *(_DWORD *)(a7 + 200) = CompactEncDet::TopEncodingOfTLDHint((CompactEncDet *)__dst, v14);
    if (a2 == 1)
    {
      if (*(_DWORD *)__dst != 7171939)
      {
        *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
        ApplyTldHint(__dst, 50, a7);
        int v19 = *(_DWORD *)(a7 + 48);
        if (v19 == 4 || v19 == 1) {
          *(unsigned char *)(a7 + 64) = 1;
        }
      }
      goto LABEL_31;
    }
    if (a2) {
      goto LABEL_31;
    }
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    int v17 = ApplyTldHint(__dst, 100, a7);
    LODWORD(a2) = v17;
    int v18 = *(_DWORD *)(a7 + 48);
    if (v18 == 4 || v18 == 1) {
      *(unsigned char *)(a7 + 64) = 1;
    }
    if (!(*(unsigned __int16 *)__dst ^ 0x7568 | __dst[2]))
    {
      *(unsigned char *)(a7 + 64) = 1;
      if (v17) {
        goto LABEL_31;
      }
      goto LABEL_25;
    }
  }
  if (!a2)
  {
LABEL_25:
    *(unsigned char *)(a7 + 64) = 1;
    *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 48);
    ApplyDefaultHint(a6, a7);
  }
LABEL_31:
  *(_DWORD *)(a7 + 628) = *(_DWORD *)(a7 + 556) - 60;
  int v20 = *(_DWORD *)(a7 + 544) - 60;
  *(_DWORD *)(a7 + 608) = v20;
  *(_DWORD *)(a7 + 660) = v20;
  int v21 = *(_DWORD *)(a7 + 564);
  *(_DWORD *)(a7 + 564) = v21 - 60;
  *(_DWORD *)(a7 + 672) = v21 - 120;
  uint64_t v22 = *(void *)(a7 + 32);
  if (v22)
  {
    int v23 = *(_DWORD *)(a7 + 40);
    uint64_t v24 = v22 + 304 * v23;
    *(void *)uint64_t v24 = 0xFFFFFFFF00000000;
    std::string::assign((std::string *)(v24 + 8), "Endhints");
    memcpy((void *)(*(void *)(a7 + 32) + 304 * v23 + 32), (const void *)(a7 + 532), 0x10CuLL);
    uint64_t v25 = *(int *)(a7 + 40) + 1;
    *(_DWORD *)(a7 + 40) = v25;
    if (FLAGS_enc_detect_detail2)
    {
      int v26 = dword_1007139DC;
      if ((dword_1007139DC & 0x80000000) == 0)
      {
        v25 *= 304;
        uint64_t v27 = *(void *)(a7 + 32) + v25;
        *(_DWORD *)uint64_t v27 = 0;
        *(_DWORD *)(v27 + 4) = v26;
        std::string::assign((std::string *)(v27 + 8), "");
        memcpy((void *)(*(void *)(a7 + 32) + v25 + 32), (const void *)(a7 + 532), 0x10CuLL);
        LODWORD(v25) = *(_DWORD *)(a7 + 40) + 1;
        *(_DWORD *)(a7 + 40) = v25;
      }
      int v28 = dword_1007139E0;
      if ((dword_1007139E0 & 0x80000000) == 0)
      {
        uint64_t v29 = *(void *)(a7 + 32) + 304 * (int)v25;
        *(_DWORD *)uint64_t v29 = 0;
        *(_DWORD *)(v29 + 4) = v28;
        std::string::assign((std::string *)(v29 + 8), "");
        memcpy((void *)(*(void *)(a7 + 32) + 304 * (int)v25 + 32), (const void *)(a7 + 532), 0x10CuLL);
        ++*(_DWORD *)(a7 + 40);
      }
    }
  }
  if (*(_DWORD *)(a7 + 48) == *(_DWORD *)(a7 + 52)) {
    *(_DWORD *)(a7 + 52) = 0;
  }
  if (FLAGS_force127)
  {
    *(unsigned char *)(a7 + 65) = 1;
    if (FLAGS_enc_detect_source) {
      PsHighlight(0, *(const unsigned __int8 **)a7, 0, 2);
    }
  }
  if (FLAGS_counts)
  {
    if (*(unsigned char *)(a7 + 64)) {
      ++dword_100743930;
    }
    if (*(unsigned char *)(a7 + 65)) {
      ++dword_100743934;
    }
  }
  return memcpy((void *)(a7 + 800), (const void *)(a7 + 532), 0x10CuLL);
}

uint64_t CompactEncDet::TopEncodingOfTLDHint(CompactEncDet *this, const char *a2)
{
  sub_100399800(__p, (char *)this);
  MakeChar4((uint64_t *)__p, v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  int v2 = v11;
  uint64_t v3 = (void *)v10[0];
  if (v11 >= 0) {
    int v4 = (unsigned int *)v10;
  }
  else {
    int v4 = (unsigned int *)v10[0];
  }
  int v5 = HintBinaryLookup4((uint64_t)byte_1006162F0, 247, v4);
  if (v5 < 0)
  {
    uint64_t v6 = 23;
    if ((v2 & 0x80000000) == 0) {
      return v6;
    }
    goto LABEL_8;
  }
  uint64_t v6 = dword_100603988[(int)TopCompressedProb((const char *)&byte_1006162F0[20 * v5 + 4], 16)];
  if (v2 < 0) {
LABEL_8:
  }
    operator delete(v3);
  return v6;
}

void sub_100394B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *InitialBytesBoost(unsigned __int8 *result, int a2, uint64_t a3)
{
  if (a2 < 4) {
    return result;
  }
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  int v6 = v5 | (v4 << 8);
  int v7 = result[3] | (result[2] << 8);
  int v8 = (result[2] << 8) | (v6 << 16);
  if (v8 != -272908544)
  {
    int v11 = _byteswap_ushort(*((_WORD *)result + 1)) | ((unsigned __int16)v6 << 16);
    if (v11 == -131072)
    {
      *(_DWORD *)(a3 + 212) = 60;
      char v9 = (_DWORD *)(a3 + 760);
      int v10 = 57;
      goto LABEL_8;
    }
    if (v11 == 65279)
    {
      *(_DWORD *)(a3 + 212) = 59;
      char v9 = (_DWORD *)(a3 + 756);
      int v10 = 56;
      goto LABEL_8;
    }
    if (v6 == 65534)
    {
      *(_DWORD *)(a3 + 212) = 58;
      char v9 = (_DWORD *)(a3 + 688);
      int v10 = 39;
      goto LABEL_31;
    }
    if (v6 == 65279)
    {
      *(_DWORD *)(a3 + 212) = 57;
      char v9 = (_DWORD *)(a3 + 680);
      int v10 = 37;
LABEL_31:
      int v12 = 1800;
      goto LABEL_9;
    }
    if (!v8 && byte_10061A483[result[3]])
    {
      *(_DWORD *)(a3 + 756) += 600;
      char v9 = (_DWORD *)(a3 + 760);
      int v10 = 56;
LABEL_51:
      int v12 = -600;
      goto LABEL_9;
    }
    if ((v11 & 0xFFFFFF) == 0 && byte_10061A483[v4])
    {
      *(_DWORD *)(a3 + 760) += 600;
      char v9 = (_DWORD *)(a3 + 756);
      int v10 = 57;
      goto LABEL_51;
    }
    if (!*result && byte_10061A483[v5])
    {
      char v9 = (_DWORD *)(a3 + 680);
      int v10 = 37;
LABEL_47:
      int v12 = 600;
      goto LABEL_9;
    }
    if (!result[1] && byte_10061A483[v4])
    {
      char v9 = (_DWORD *)(a3 + 688);
      int v10 = 39;
      goto LABEL_47;
    }
    if (v11 == -1 || !v11)
    {
      int v12 = -600;
      *(int32x2_t *)(a3 + 756) = vadd_s32(*(int32x2_t *)(a3 + 756), vdup_n_s32(0xFFFFFDA8));
      *(_DWORD *)(a3 + 680) -= 600;
      char v9 = (_DWORD *)(a3 + 688);
      int v10 = -1;
      goto LABEL_9;
    }
    if (v6 == 0xFFFF || !v6)
    {
      *(_DWORD *)(a3 + 680) -= 600;
      char v9 = (_DWORD *)(a3 + 688);
      int v10 = -1;
      goto LABEL_51;
    }
    if (v8 == -2556160
      || v11 == 1347093252
      || v11 == 1195984440
      || v11 == -1991225785
      || v8 == 529205248
      || v6 == 30938
      || v11 == 626017350
      || (_byteswap_ushort(*((_WORD *)result + 1)) & 0xFF1F | ((unsigned __int16)v6 << 16)) == 0x63535700
      || (_byteswap_ushort(*((_WORD *)result + 1)) & 0xFF1F | ((unsigned __int16)v6 << 16)) == 0x66535700)
    {
      char v9 = (_DWORD *)(a3 + 764);
      int v10 = -1;
LABEL_62:
      int v12 = 7200;
      goto LABEL_9;
    }
    int v10 = -1;
    if (v11 <= 1213681695)
    {
      if (v11 > 943870034)
      {
        if (v11 == 943870035) {
          goto LABEL_76;
        }
        int v19 = 1128485700;
      }
      else
      {
        if (v11 == 23487344) {
          goto LABEL_76;
        }
        int v19 = 704662861;
      }
    }
    else
    {
      if (v11 > 1346655070)
      {
        if (v11 != 1346655071)
        {
          if (v11 != 1397312848)
          {
            int v19 = 2135247942;
            goto LABEL_75;
          }
LABEL_76:
          char v9 = (_DWORD *)(a3 + 764);
          goto LABEL_62;
        }
        if (a2 >= 0xE
          && *(void *)result == 0x535245565F534450
          && *(void *)(result + 6) == 0x44495F4E4F495352)
        {
          goto LABEL_76;
        }
LABEL_99:
        char v9 = (_DWORD *)(a3 + 764);
        int v12 = 2400;
        goto LABEL_9;
      }
      if (v11 == 1213681696)
      {
        if (a2 >= 0x13)
        {
          BOOL v21 = *(void *)result == 0x75636F442E505748 && *((void *)result + 1) == 0x6C69462E746E656DLL;
          if (v21 && *(void *)(result + 11) == 0x562E656C69462E74) {
            goto LABEL_76;
          }
          BOOL v23 = *(void *)result == 0x75636F4420505748 && *((void *)result + 1) == 0x6C694620746E656DLL;
          if (v23 && *(void *)(result + 11) == 0x5620656C69462074) {
            goto LABEL_76;
          }
        }
        goto LABEL_99;
      }
      int v19 = 1296891946;
    }
LABEL_75:
    if (v11 != v19) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
  *(_DWORD *)(a3 + 212) = 22;
  *(_DWORD *)(a3 + 540) += 1200;
  char v9 = (_DWORD *)(a3 + 768);
  int v10 = 2;
LABEL_8:
  int v12 = 1200;
LABEL_9:
  *v9 += v12;
LABEL_10:
  int v13 = *(_DWORD *)(a3 + 680);
  BOOL v14 = v13 > 0 || *(int *)(a3 + 688) >= 1;
  int v15 = *(_DWORD *)(a3 + 756);
  if (v15 <= 0 && *(int *)(a3 + 760) < 1)
  {
    char v16 = 0;
    if (v14) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  char v16 = 1;
  if (!v14)
  {
LABEL_16:
    *(_DWORD *)(a3 + 680) = v13 - 4800;
    *(_DWORD *)(a3 + 688) -= 9600;
  }
LABEL_17:
  if ((v16 & 1) == 0)
  {
    *(_DWORD *)(a3 + 756) = v15 - 4800;
    *(_DWORD *)(a3 + 760) -= 4800;
  }
  if (!FLAGS_ced_allow_utf8utf8) {
    *(_DWORD *)(a3 + 768) -= 4800;
  }
  *(_DWORD *)(a3 + 796) -= 4800;
  if (*(void *)(a3 + 32))
  {
    snprintf(__str, 0x10uLL, "%04x%04x", v6, v7);
    int v17 = *(_DWORD *)(a3 + 40);
    uint64_t v18 = *(void *)(a3 + 32) + 304 * v17;
    *(_DWORD *)uint64_t v18 = 0;
    *(_DWORD *)(v18 + 4) = v10;
    std::string::assign((std::string *)(v18 + 8), __str);
    uint64_t result = (unsigned __int8 *)memcpy((void *)(*(void *)(a3 + 32) + 304 * v17 + 32), (const void *)(a3 + 532), 0x10CuLL);
    ++*(_DWORD *)(a3 + 40);
  }
  return result;
}

uint64_t Base64ScanLen(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  if (a2 - a1 >= 4 && *a1 == 43 && a1[1] == 43 && a1[2] == 43) {
    return 81;
  }
  uint64_t v3 = a1;
  do
  {
    if (v3 >= a2) {
      break;
    }
    int v4 = *v3++;
  }
  while ((byte_100603A94[v4] & 0x80000000) == 0);
  return (~a1 + v3);
}

BOOL GoodUnicodeFromBase64(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  int v2 = a2 - a1;
  if (a2 <= a1)
  {
    int v6 = 0;
    int v5 = 0;
    int v4 = 0;
    int v3 = 0;
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = a2 - a1;
    int v8 = a1;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      unsigned int v11 = v10 - 97;
      unsigned int v12 = v10 - 65;
      if (v10 == 48) {
        int v13 = v3 + 1;
      }
      else {
        int v13 = v3;
      }
      BOOL v14 = v9 == 43;
      if (v9 == 43) {
        int v15 = v6 + 1;
      }
      else {
        int v15 = v6;
      }
      if (v14) {
        int v13 = v3;
      }
      BOOL v16 = v12 > 0x19;
      if (v12 > 0x19)
      {
        int v17 = v4;
      }
      else
      {
        int v15 = v6;
        int v17 = v4 + 1;
      }
      if (!v16) {
        int v13 = v3;
      }
      if (v11 <= 0x19) {
        ++v5;
      }
      else {
        int v6 = v15;
      }
      if (v11 > 0x19)
      {
        int v4 = v17;
        int v3 = v13;
      }
      --v7;
    }
    while (v7);
  }
  int v18 = v2 >> 4;
  if (v6 > (v2 >> 4) + 1 || v5 <= v18 || v4 <= v18 || v3 <= v2 >> 5) {
    return 0;
  }
  int v23 = v2 & 7;
  uint64_t v24 = a1[v2 - 1];
  if (v23 != 6) {
    return v23 != 3 || (byte_100603A94[v24] & 3) == 0;
  }
  return (byte_100603A94[v24] & 0xF) == 0;
}

uint64_t UTF7BoostWhack(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(int *)(result + 4 * a2 + 1544);
  if ((int)v3 >= *(_DWORD *)(result + 88))
  {
    uint64_t v4 = result;
    ++*(_DWORD *)(result + 84);
    if (a3 != 45)
    {
      if ((a3 - 48) >= 0xA
        && ((a3 & 0xDF) - 65) >= 0x1Au
        && (((_BYTE)a3 - 43) & 0xFB) != 0)
      {
        goto LABEL_6;
      }
      int v6 = (const unsigned __int8 *)(*(void *)result + v3 + 1);
      uint64_t result = Base64ScanLen(v6, *(const unsigned __int8 **)(result + 8));
      if (result != 3 && result != 6)
      {
        int v8 = result;
        if ((result & 7) != 7 && ((1 << (result & 7)) & 0x49) != 0)
        {
          uint64_t result = GoodUnicodeFromBase64(v6, &v6[(int)result]);
          int v5 = *(_DWORD *)(v4 + 708);
          if (result)
          {
            *(_DWORD *)(v4 + 708) = v5 + 600;
            *(_DWORD *)(v4 + 88) = v3 + v8 + 1;
            return result;
          }
          goto LABEL_17;
        }
LABEL_6:
        int v5 = *(_DWORD *)(v4 + 708);
LABEL_17:
        *(_DWORD *)(v4 + 708) = v5 - 600;
      }
    }
  }
  return result;
}

_DWORD *BinaryBoostWhack(_DWORD *result, unsigned int a2, unsigned int a3)
{
  int v3 = 1 << ((a2 >> 6) & 2 | (a3 >> 7));
  int v4 = 1 << ((a2 >> 3) & 0x1C | (a3 >> 6));
  int v5 = result[19];
  if ((v5 & v3) == 0)
  {
    result[19] = v5 | v3;
    int v6 = result[17] + 1;
    result[17] = v6;
    if (v6 == 4) {
      result[191] += 1200;
    }
  }
  int v7 = result[20];
  if ((v7 & v4) == 0)
  {
    result[20] = v7 | v4;
    int v8 = result[18];
    result[18] = v8 + 1;
    if (v8 >= 10) {
      result[191] += 2400;
    }
  }
  return result;
}

uint64_t UTF1632BoostWhack(uint64_t result, char a2, int a3)
{
  if (a3)
  {
    int v3 = -600;
    *(int32x2_t *)(result + 756) = vadd_s32(*(int32x2_t *)(result + 756), vdup_n_s32(0xFFFFFDA8));
    *(_DWORD *)(result + 680) -= 600;
    int v4 = (_DWORD *)(result + 688);
  }
  else
  {
    *(_DWORD *)(result + 680) -= 600;
    *(_DWORD *)(result + 688) -= 600;
    if ((a2 & 3u) - 1 >= 2)
    {
      if ((a2 & 3) != 0) {
        return result;
      }
      *(_DWORD *)(result + 760) -= 600;
      int v4 = (_DWORD *)(result + 756);
    }
    else
    {
      *(_DWORD *)(result + 756) -= 600;
      int v4 = (_DWORD *)(result + 760);
    }
    int v3 = 60;
  }
  *v4 += v3;
  return result;
}

uint64_t CheckUTF8Seq(_DWORD *a1, char a2)
{
  uint64_t v2 = (int)a1[335];
  uint64_t v3 = (int)a1[337];
  if ((int)v2 >= (int)v3)
  {
    int v4 = 0;
    goto LABEL_12;
  }
  int v4 = 0;
  int v5 = 2 * v2;
  do
  {
    int v6 = (char *)a1 + v5;
    unint64_t v7 = v6[1448];
    unint64_t v8 = v6[1449];
    if (v2 <= 0)
    {
      int v9 = a1[23];
LABEL_7:
      int v10 = &byte_100603B94[16 * v9];
      int v9 = 0;
      unsigned int v11 = &a1[v10[2]];
      ++v11[24];
      a1[23] = 0;
      goto LABEL_8;
    }
    int v9 = a1[23];
    if (a1[v2 + 434] != a1[(v2 - 1) + 434] + 2) {
      goto LABEL_7;
    }
LABEL_8:
    int16x4_t v12 = vuzp1_s16((int16x4_t)vceq_s32(vdup_n_s32(v7), (int32x2_t)0xDF000000C9), (int16x4_t)0xDF000000C9);
    int16x4_t v13 = (int16x4_t)vand_s8((int8x8_t)vzip1_s16(v12, vdup_lane_s16(v12, 1)), vand_s8((int8x8_t)vceq_s16(vdup_n_s16(v8), (int16x4_t)0xAB0093009200AELL), (int8x8_t)0x8000400020001));
    v13.i32[0] = vaddv_s16(v13) & 0xF;
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v7 >> 4;
    uint64_t v16 = byte_100603B94[16 * v9 + v15];
    ++a1[v16 + 24];
    uint64_t v17 = byte_100603C14[16 * a1[23] + v15];
    a1[23] = v17;
    unint64_t v18 = v8 >> 4;
    uint64_t v19 = byte_100603B94[16 * v17 + v18];
    v4 += v14.i32[0];
    ++a1[v19 + 24];
    a1[23] = byte_100603C14[16 * a1[23] + v18];
    ++v2;
    v5 += 2;
  }
  while (v3 != v2);
  if (v4 > 0)
  {
    a1[134] += 120 * v4;
    a1[137] += 120 * v4;
  }
LABEL_12:
  int v20 = a1[27];
  int v21 = a1[28];
  int v23 = a1[25];
  int v22 = a1[26];
  int v24 = (120 * (4 * v21 + 2 * v22 + 3 * (v20 - v4))) >> a2;
  int v25 = v24 + a1[135];
  int v26 = a1[192];
  int v27 = v20 + v22;
  int v28 = a1[29];
  a1[28] = 0;
  a1[29] = v27 + v21 + v28;
  int v29 = (120 * v23) >> a2;
  a1[135] = v25 - v29;
  a1[192] = v24 + v26 - v29;
  *((void *)a1 + 13) = 0;
  a1[25] = 0;
  return (v24 - v29);
}

uint64_t CheckUTF8UTF8Seq(uint64_t a1, char a2)
{
  uint64_t v2 = *(int *)(a1 + 1340);
  uint64_t v3 = *(int *)(a1 + 1348);
  if (2 * (int)v2 < 2 * (int)v3)
  {
    unint64_t v4 = a1 + 2 * v3 + 1448;
    unint64_t v5 = a1 + 2 * v2 + 1448;
    do
    {
      int v6 = *(_DWORD *)(a1 + 120);
      if ((int)v2 < 1
        || *(_DWORD *)(a1 + 1736 + 4 * v2) != *(_DWORD *)(a1 + 1736 + 4 * (v2 - 1)) + 2)
      {
        *(_DWORD *)(a1 + 124) = 0;
        uint64_t v7 = a1 + 4 * byte_100603C94[16 * v6 + 2];
        ++*(_DWORD *)(v7 + 128);
        int v6 = byte_100603D14[16 * v6 + 2];
      }
      uint64_t v8 = *(int *)(a1 + 124);
      if (v5 + v8 + 1 < v4)
      {
        int v9 = *(unsigned __int8 *)(v5 + v8);
        int v10 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        int v11 = v10 | 4;
        if (v9 != 226) {
          int v11 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        }
        BOOL v12 = (v9 - 194) > 9 || ((1 << (v9 + 62)) & 0x219) == 0;
        int v13 = v10 | 8;
        if (v12) {
          int v13 = (*(unsigned __int8 *)(v8 + v5 + 1) >> 4) & 3;
        }
        if ((v9 & 0xF0) == 0xC0) {
          int v14 = v13;
        }
        else {
          int v14 = v11;
        }
        int v15 = v10 | 0xC;
        if (v9 == 195) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v14;
        }
        *(_DWORD *)(a1 + 124) = v8 ^ byte_10061A583[16 * v6 + v16];
        uint64_t v17 = a1 + 4 * byte_100603C94[16 * v6 + v16];
        ++*(_DWORD *)(v17 + 128);
        *(_DWORD *)(a1 + 120) = byte_100603D14[16 * v6 + v16];
        LODWORD(v2) = v2 + 1;
      }
      v5 += 2;
    }
    while (v5 < v4);
  }
  int v18 = *(_DWORD *)(a1 + 148);
  int v19 = *(_DWORD *)(a1 + 140) + *(_DWORD *)(a1 + 136) + *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 768) += (240 * v19) >> a2;
  *(_DWORD *)(a1 + 148) = v19 + v18;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 140) = 0;
  return ((240 * v19) >> a2);
}

_DWORD *CheckIso2022ActiveSeq(_DWORD *result)
{
  uint64_t v1 = 2 * (int)result[335];
  uint64_t v2 = (int)result[337];
  if ((int)v1 < 2 * (int)v2)
  {
    unint64_t v3 = (unint64_t)result + 2 * v2 + 1448;
    for (uint64_t i = (unsigned __int8 *)result + v1 + 1448; (unint64_t)i < v3; i += 2)
    {
      unsigned int v5 = *i;
      switch(v5)
      {
        case 0xEu:
          result[154] -= 600;
          if (!result[38]) {
            goto LABEL_22;
          }
          break;
        case 0xFu:
          result[154] -= 600;
          int v8 = result[38];
          if (v8)
          {
            if (v8 == 3)
            {
              int v9 = 60;
            }
            else
            {
              if (v8 != 2) {
                goto LABEL_31;
              }
              int v9 = -60;
            }
            result[178] += v9;
            result[175] += v9;
            goto LABEL_31;
          }
LABEL_22:
          result[178] -= 2400;
          int v7 = result[175] - 2400;
LABEL_23:
          result[175] = v7;
          result[38] = 1;
          continue;
        case 0x1Bu:
          int v6 = i[1];
          if (v6 == 40)
          {
            int v13 = result[38];
            if (v13 == 3)
            {
              int v14 = 60;
LABEL_30:
              result[154] += v14;
            }
            else if (v13 == 2)
            {
              int v14 = -60;
              goto LABEL_30;
            }
LABEL_31:
            result[38] = 2;
            continue;
          }
          if (v6 != 36)
          {
            result[154] -= 600;
            result[178] -= 600;
            int v7 = result[175] - 600;
            goto LABEL_23;
          }
          break;
        default:
          if ((char)v5 <= 31)
          {
            BOOL v10 = v5 > 0xD;
            int v11 = (1 << v5) & 0x3600;
            if (v10 || v11 == 0)
            {
              result[154] -= 600;
              result[178] -= 600;
              result[175] -= 600;
            }
          }
          continue;
      }
      result[38] = 3;
    }
  }
  if (!result[38])
  {
    result[178] &= (int)result[178] >> 31;
    result[175] &= (int)result[175] >> 31;
    result[154] &= (int)result[154] >> 31;
  }
  return result;
}

_DWORD *CheckHzActiveSeq(_DWORD *result)
{
  uint64_t v1 = 2 * (int)result[334];
  uint64_t v2 = (int)result[336];
  if ((int)v1 < 2 * (int)v2)
  {
    unint64_t v3 = (unint64_t)result + 2 * v2 + 1352;
    for (uint64_t i = (char *)result + v1 + 1352; (unint64_t)i < v3; i += 2)
    {
      if (*i == 126)
      {
        int v5 = i[1];
        if (v5 == 123)
        {
          result[39] = 3;
          if (*i != 126) {
            continue;
          }
          int v5 = i[1];
        }
        if (v5 == 125)
        {
          int v6 = result[39];
          if (v6 == 3)
          {
            int v7 = 60;
LABEL_12:
            result[173] += v7;
          }
          else if (v6 == 2)
          {
            int v7 = -60;
            goto LABEL_12;
          }
          result[39] = 2;
        }
      }
    }
  }
  if (!result[39]) {
    result[173] &= (int)result[173] >> 31;
  }
  return result;
}

uint64_t CheckEucJpSeq(uint64_t result)
{
  uint64_t v1 = 2 * *(int *)(result + 1340);
  uint64_t v2 = *(int *)(result + 1348);
  if ((int)v1 < 2 * (int)v2)
  {
    unint64_t v3 = result + 2 * v2 + 1448;
    unint64_t v4 = (char *)(result + v1 + 1448);
    int v5 = *(unsigned __int8 *)(result + 160);
    do
    {
      if (v5) {
        *(_DWORD *)(result + 560) += 120;
      }
      int v6 = *v4;
      int v7 = v4[1];
      if (v6 < 0)
      {
        if (v6 != -113) {
          goto LABEL_10;
        }
        v5 ^= 1u;
      }
      else
      {
        int v5 = 0;
      }
      *(unsigned char *)(result + 160) = v5;
LABEL_10:
      if ((v7 & 0x80000000) == 0)
      {
        int v5 = 0;
LABEL_14:
        *(unsigned char *)(result + 160) = v5;
        goto LABEL_15;
      }
      if (v7 == -113)
      {
        v5 ^= 1u;
        goto LABEL_14;
      }
LABEL_15:
      v4 += 2;
    }
    while ((unint64_t)v4 < v3);
  }
  return result;
}

int32x2_t CheckBinaryDensity(int a1, uint64_t a2, int a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(a2 + 1736);
    unsigned int v4 = -2400;
    if (v3 > 6143) {
      goto LABEL_10;
    }
    int v5 = a1 - *(_DWORD *)a2;
    if (v5 >= 0x2000) {
      goto LABEL_10;
    }
    int v6 = *(_DWORD *)(a2 + 1348);
    int v7 = v5 - v3;
    if (v7 > 32 * v6)
    {
      *(_DWORD *)(a2 + 764) -= 2400;
      int32x2_t result = vadd_s32(*(int32x2_t *)(a2 + 756), vdup_n_s32(0xFFFFF6A0));
      *(int32x2_t *)(a2 + 756) = result;
      *(_DWORD *)(a2 + 680) -= 2400;
      *(_DWORD *)(a2 + 688) -= 2400;
    }
    if (v6 >= 8 && 8 * v6 >= v7 && *(int *)(a2 + 68) >= 2)
    {
      unsigned int v4 = 60;
LABEL_10:
      *(_DWORD *)(a2 + 764) += v4;
      int32x2_t result = vadd_s32(*(int32x2_t *)(a2 + 756), vdup_n_s32(v4));
      *(int32x2_t *)(a2 + 756) = result;
      *(_DWORD *)(a2 + 680) += v4;
      *(_DWORD *)(a2 + 688) += v4;
    }
  }
  return result;
}

void ActiveSpecialBoostWhack(int a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 1344) - *(_DWORD *)(a2 + 1336);
  int v4 = *(_DWORD *)(a2 + 1348) - *(_DWORD *)(a2 + 1340);
  if ((*(unsigned char *)(a2 + 196) & 6) == 0 || v3 < 1) {
    goto LABEL_25;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 1352;
  uint64_t v8 = a2 + 1544;
  do
  {
    int v9 = *(_DWORD *)(a2 + 1336);
    uint64_t v10 = v9;
    int v11 = v6 + v9;
    uint64_t v12 = 2 * ((int)v6 + v9);
    int v13 = *(unsigned __int8 *)(v7 + v12);
    uint64_t v14 = *(unsigned __int8 *)(v7 + (int)v12 + 1);
    if (v13 == 126)
    {
      int v18 = 600;
      if (*(unsigned __int8 *)(v7 + (int)v12 + 1) > 0x7Cu)
      {
        if (v14 == 125) {
          goto LABEL_17;
        }
        if (v14 != 126)
        {
LABEL_16:
          int v18 = -600;
          goto LABEL_17;
        }
      }
      else if (v14 != 10)
      {
        if (v14 != 123) {
          goto LABEL_16;
        }
LABEL_17:
        *(_DWORD *)(a2 + 692) += v18;
      }
      if (!*(void *)(a2 + 32)) {
        goto LABEL_21;
      }
      snprintf(__str, 0x10uLL, "%02x%02x~", 126, v14);
      int v15 = *(_DWORD *)(v8 + 4 * (v6 + v10));
      unsigned int v16 = &byte_100603D94[v14];
      uint64_t v17 = 32256;
      goto LABEL_20;
    }
    if (v13 == 43)
    {
      UTF7BoostWhack(a2, v11, *(unsigned __int8 *)(v7 + (int)v12 + 1));
      if (*(void *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02x+", 43, v14);
        int v15 = *(_DWORD *)(v8 + 4 * (v6 + v10));
        unsigned int v16 = &byte_100603D94[v14];
        uint64_t v17 = 11008;
LABEL_20:
        int v19 = v16[v17];
        int v20 = *(_DWORD *)(a2 + 40);
        uint64_t v21 = *(void *)(a2 + 32) + 304 * v20;
        *(_DWORD *)uint64_t v21 = v15;
        *(_DWORD *)(v21 + 4) = v19;
        std::string::assign((std::string *)(v21 + 8), __str);
        memcpy((void *)(*(void *)(a2 + 32) + 304 * v20 + 32), (const void *)(a2 + 532), 0x10CuLL);
        ++*(_DWORD *)(a2 + 40);
      }
    }
LABEL_21:
    ++v6;
  }
  while (v3 != v6);
  if (*(int *)(a2 + 84) > 7 && !*(_DWORD *)(a2 + 88)) {
    *(_DWORD *)(a2 + 708) -= 4800;
  }
LABEL_25:
  if ((*(_WORD *)(a2 + 196) & 0x10F8) == 0 || v4 < 1) {
    goto LABEL_59;
  }
  uint64_t v23 = 0;
  int v24 = 0;
  while (2)
  {
    uint64_t v25 = v23 + *(int *)(a2 + 1340);
    uint64_t v26 = 2 * (int)v25;
    unsigned int v27 = *(unsigned __int8 *)(a2 + 1448 + v26);
    uint64_t v28 = *(unsigned __int8 *)(a2 + 1448 + (int)v26 + 1);
    uint64_t v29 = a2 + 4 * v25;
    uint64_t v30 = (unsigned int *)(v29 + 1736);
    int v31 = *(_DWORD *)(v29 + 1736);
    int v32 = *(_DWORD *)(v29 + 2120);
    if (v24 <= v32) {
      int v24 = v32;
    }
    if (v27 == 255)
    {
      if (v28 == 255) {
        UTF1632BoostWhack(a2, v31, 255);
      }
      if (*(void *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02xF", 255, v28);
        unsigned int v34 = *v30;
        int v35 = byte_100603D94[v28 + 65280];
        goto LABEL_47;
      }
    }
    else if (!*(unsigned char *)(a2 + 1448 + v26))
    {
      if (*(unsigned char *)(a2 + 1448 + (int)v26 + 1))
      {
        if (byte_10061A483[v28]) {
          BOOL v33 = (v31 & 1) == 0;
        }
        else {
          BOOL v33 = 1;
        }
        if (!v33) {
          *uint64_t v30 = v31 & 0xFFFFFFFE;
        }
      }
      else
      {
        UTF1632BoostWhack(a2, v31, 0);
      }
      if (*(void *)(a2 + 32))
      {
        snprintf(__str, 0x10uLL, "%02x%02xZ", 0, v28);
        unsigned int v34 = *v30;
        int v35 = byte_100603D94[v28];
LABEL_47:
        int v36 = *(_DWORD *)(a2 + 40);
        uint64_t v37 = *(void *)(a2 + 32) + 304 * v36;
        *(_DWORD *)uint64_t v37 = v34;
        *(_DWORD *)(v37 + 4) = v35;
        std::string::assign((std::string *)(v37 + 8), __str);
        memcpy((void *)(*(void *)(a2 + 32) + 304 * v36 + 32), (const void *)(a2 + 532), 0x10CuLL);
        ++*(_DWORD *)(a2 + 40);
      }
    }
    if ((*(unsigned char *)(a2 + 196) & 0x80) != 0) {
      BinaryBoostWhack((_DWORD *)a2, v27, v28);
    }
    if (v4 != ++v23) {
      continue;
    }
    break;
  }
  int v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 0x10) == 0)
  {
    if ((v38 & 0x20) == 0) {
      goto LABEL_53;
    }
LABEL_63:
    CheckUTF8UTF8Seq(a2, v24);
    int v38 = *(_DWORD *)(a2 + 196);
    if ((v38 & 8) != 0) {
      goto LABEL_64;
    }
LABEL_54:
    if ((v38 & 4) == 0) {
      goto LABEL_55;
    }
LABEL_65:
    CheckHzActiveSeq((_DWORD *)a2);
    int v38 = *(_DWORD *)(a2 + 196);
    if ((v38 & 0x1000) == 0) {
      goto LABEL_57;
    }
LABEL_56:
    CheckEucJpSeq(a2);
    int v38 = *(_DWORD *)(a2 + 196);
    goto LABEL_57;
  }
  CheckUTF8Seq((_DWORD *)a2, v24);
  int v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 0x20) != 0) {
    goto LABEL_63;
  }
LABEL_53:
  if ((v38 & 8) == 0) {
    goto LABEL_54;
  }
LABEL_64:
  CheckIso2022ActiveSeq((_DWORD *)a2);
  int v38 = *(_DWORD *)(a2 + 196);
  if ((v38 & 4) != 0) {
    goto LABEL_65;
  }
LABEL_55:
  if ((v38 & 0x1000) != 0) {
    goto LABEL_56;
  }
LABEL_57:
  if ((v38 & 0xC0) != 0) {
    CheckBinaryDensity(a1, a2, v4);
  }
LABEL_59:
  if (*(void *)(a2 + 32)) {
    SetDetailsEncLabel(a2, "seq");
  }
}

uint64_t RepeatedBigram(int *a1, unsigned int a2, int a3)
{
  int v3 = a3 | (a2 << 8);
  if (a2 < 0x20) {
    int v3 = a3 & 0xFFF0 | (unsigned __int16)((_WORD)a2 << 8);
  }
  if (v3 == a1[55] || v3 == a1[56] || v3 == a1[57] || v3 == a1[58]) {
    return 1;
  }
  uint64_t result = 0;
  a1[a1[54] + 55] = v3;
  a1[54] = (a1[54] + 1) & 3;
  return result;
}

uint64_t ReRank(uint64_t result)
{
  *(void *)(result + 248) = -1;
  uint64_t v1 = *(unsigned int *)(result + 260);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (int *)(result + 264);
    uint64_t v3 = 0xFFFFFFFFLL;
    uint64_t v4 = 0xFFFFFFFFLL;
    do
    {
      int v6 = *v2++;
      int v5 = v6;
      uint64_t v7 = v6;
      uint64_t v8 = result + 4 * v6;
      uint64_t v9 = *(unsigned int *)(v8 + 532);
      if ((int)v4 >= (int)v9)
      {
        if ((int)v3 < (int)v9
          && dword_100613D94[dword_100603988[*(int *)(result + 240)]] != dword_100613D94[dword_100603988[v7]])
        {
          *(_DWORD *)(result + 252) = v9;
          *(_DWORD *)(result + 244) = v5;
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = *(int *)(result + 240);
        if (dword_100613D94[dword_100603988[v10]] != dword_100613D94[dword_100603988[v7]])
        {
          *(_DWORD *)(result + 252) = v4;
          *(_DWORD *)(result + 244) = v10;
          uint64_t v9 = *(unsigned int *)(v8 + 532);
          uint64_t v3 = v4;
        }
        uint64_t v4 = v9;
        *(_DWORD *)(result + 248) = v9;
        *(_DWORD *)(result + 240) = v5;
      }
      uint64_t v9 = v3;
LABEL_10:
      uint64_t v3 = v9;
      --v1;
    }
    while (v1);
  }
  return result;
}

_DWORD *SimplePrune(_DWORD *result, int a2)
{
  int v2 = result[62];
  result[49] = 0;
  int v3 = result[65];
  if (v3 < 1)
  {
    int v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    int v6 = v2 - a2;
    do
    {
      int v7 = result[v4 + 66];
      if (result[v7 + 133] >= v6)
      {
        result[49] |= dword_100613EC0[dword_100603988[v7]];
        uint64_t v8 = &result[v5++];
        v8[66] = v7;
        int v3 = result[65];
      }
      ++v4;
    }
    while (v4 < v3);
  }
  result[65] = v5;
  return result;
}

uint64_t CalcReliable(uint64_t result)
{
  *(unsigned char *)(result + 45) = 0;
  int v1 = *(_DWORD *)(result + 1348);
  if (!v1
    || *(_DWORD *)(result + 248) - *(_DWORD *)(result + 252) >= FLAGS_ced_reliable_difference
    || v1 == 1 && *(_DWORD *)(result + 240) == byte_100603D94[__rev16(*(unsigned __int16 *)(result + 1448))])
  {
    *(unsigned char *)(result + 45) = 1;
    return result;
  }
  int v2 = *(_DWORD *)(result + 260);
  if (v2 == 3)
  {
    int v3 = dword_100613D94[dword_100603988[*(int *)(result + 264)]];
    if (v3 != dword_100613D94[dword_100603988[*(int *)(result + 268)]]
      || v3 != dword_100613D94[dword_100603988[*(int *)(result + 272)]])
    {
      return result;
    }
    goto LABEL_14;
  }
  if (v2 != 2)
  {
    if (v2 != 1) {
      return result;
    }
LABEL_15:
    *(_WORD *)(result + 44) = 257;
    return result;
  }
  if (dword_100613D94[dword_100603988[*(int *)(result + 264)]] == dword_100613D94[dword_100603988[*(int *)(result + 268)]])
  {
LABEL_14:
    if (*(int *)(result + 56) >= 3) {
      goto LABEL_15;
    }
  }
  return result;
}

BOOL BoostLatin127Trigrams(int a1, uint64_t a2)
{
  int v2 = *(const unsigned __int8 **)a2;
  int v3 = *(_DWORD *)(a2 + 8) - *(void *)a2 - 2;
  if (a1 + 32 < v3) {
    int v3 = a1 + 32;
  }
  if (v3 > a1)
  {
    int v5 = 0;
    int v6 = &v2[v3];
    int v7 = &v2[a1];
    int v20 = (_DWORD *)(a2 + 652);
    uint64_t v21 = (_DWORD *)(a2 + 596);
    int v22 = (_DWORD *)(a2 + 580);
    uint64_t v23 = (_DWORD *)(a2 + 568);
    int v18 = (_DWORD *)(a2 + 536);
    int v19 = (_DWORD *)(a2 + 704);
    uint64_t v8 = (_DWORD *)(a2 + 548);
    uint64_t v9 = (_DWORD *)(a2 + 592);
    uint64_t v10 = v7;
    while (1)
    {
      unsigned int v11 = *++v10;
      uint64_t v12 = (qword_1006140F0[byte_100613FEC[v11] | (32 * byte_100613FEC[*v7])] >> (2 * byte_100613FEC[v7[2]])) & 3;
      if (((qword_1006140F0[byte_100613FEC[v11] | (32 * byte_100613FEC[*v7])] >> (2 * byte_100613FEC[v7[2]])) & 3) != 0)
      {
        if (FLAGS_enc_detect_source) {
          PsHighlight((uint64_t)v7, *(const unsigned __int8 **)a2, v12, 1);
        }
        switch(v12)
        {
          case 1:
            int v13 = -1;
            int v15 = v18;
            uint64_t v14 = v8;
            unsigned int v16 = v9;
LABEL_14:
            *v15 += 60;
LABEL_15:
            *v14 += 60;
            *v16 += 60;
            v5 += v13;
            break;
          case 2:
            int v13 = 1;
            unsigned int v16 = v22;
            uint64_t v14 = v23;
            goto LABEL_15;
          case 3:
            *(_DWORD *)(a2 + 648) += 60;
            int v13 = 1;
            uint64_t v14 = v20;
            int v15 = v21;
            unsigned int v16 = v19;
            goto LABEL_14;
        }
      }
      int v7 = v10;
      if (v10 >= v6) {
        return v5 > 0;
      }
    }
  }
  int v5 = 0;
  return v5 > 0;
}

uint64_t BoostPrune(uint64_t result, uint64_t a2, int a3)
{
  int v3 = a3;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a2 + 1348);
  int v109 = v6 - *(_DWORD *)(a2 + 1340);
  if (a3 == 2)
  {
    if (*(unsigned char *)(a2 + 46)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 <= 11;
    }
    if (v7)
    {
      uint64_t v8 = 0;
      if (v6 <= 2) {
        int v6 = 2;
      }
      int v9 = v6 + 1;
      do
      {
        *(_DWORD *)(a2 + v8 + 532) = *(_DWORD *)(a2 + v8 + 532)
                                   - *(_DWORD *)(a2 + v8 + 800)
                                   + *(_DWORD *)(a2 + v8 + 800) * v9 / 12;
        v8 += 4;
      }
      while (v8 != 268);
      *(unsigned char *)(a2 + 46) = 1;
      if (*(void *)(a2 + 32))
      {
        snprintf(__str, 0x20uLL, "Hints %d/%d", v9, 12);
        SetDetailsEncLabel(a2, __str);
      }
    }
    uint64_t v10 = (int *)(a2 + 56);
    ++*(_DWORD *)(a2 + 56);
  }
  else
  {
    int v61 = *(_DWORD *)(a2 + 1344);
    int v62 = *(_DWORD *)(a2 + 1336);
    uint64_t v10 = (int *)(a2 + 56);
    int v63 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = v63 + 1;
    if (*(int *)(a2 + 260) < 2) {
      goto LABEL_227;
    }
    if ((v63 & 0x80000000) == 0 && v61 - v62 == -v109) {
      return result;
    }
  }
  if (v109 < 1)
  {
    int v64 = 0;
    goto LABEL_116;
  }
  int v101 = v3;
  uint64_t v102 = v5;
  int v103 = v10;
  LOBYTE(v11) = 0;
  int v108 = 0;
  LODWORD(v10) = 0;
  int v12 = 0;
  int v105 = 32;
  int v106 = 32;
  do
  {
    int v113 = v12;
    char v114 = v11;
    int v13 = *(_DWORD *)(a2 + 1340) + v12;
    uint64_t v14 = 2 * v13;
    unsigned int v15 = *(unsigned __int8 *)(a2 + 1448 + v14);
    int v16 = (int)v10;
    unint64_t v17 = *(unsigned __int8 *)(a2 + 1448 + (int)v14 + 1);
    uint64_t v10 = (int *)(v15 & 0xF0 | (v17 >> 4));
    if (v13 >= 1
      && *(_DWORD *)(a2 + 1736 + 4 * v13) == *(_DWORD *)(a2 + 1736 + 4 * (v13 - 1)) + 2)
    {
      BOOL v18 = (~v10 & 0xCC) == 0 || (~v16 & 0xCC) == 0;
    }
    else
    {
      BOOL v18 = 0;
    }
    uint64_t v19 = a2 + 4 * v13;
    int v20 = *(_DWORD *)(v19 + 2120);
    uint64_t v112 = v19;
    unsigned int v110 = (unsigned __int8 *)*(int *)(v19 + 1736);
    unint64_t v115 = *(unsigned __int8 *)(a2 + 1448 + 2 * v13);
    int v21 = RepeatedBigram((int *)a2, v15, v17);
    if (v21)
    {
      int v22 = 0;
      int v23 = 0;
      int v24 = v113;
      unint64_t v25 = v115;
      goto LABEL_81;
    }
    unsigned int v26 = 0xFu >> v20;
    if (!FLAGS_demo_nodefault)
    {
      *(_DWORD *)(a2 + 532 + 4 * *(int *)(a2 + 48)) += v26;
      *(_DWORD *)(a2 + 532 + 4 * *(int *)(a2 + 52)) += v26;
    }
    unint64_t v25 = v115;
    int v107 = v21;
    if (*(int *)(a2 + 260) < 1)
    {
      int v22 = 0;
      int v23 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      int v23 = 0;
      int v22 = 0;
      char v28 = 0;
      int v29 = 1 << ((v115 >> 3) & 0x1C | (v17 >> 6));
      int v30 = FLAGS_enc_detect_detail2;
      int v31 = dword_1007139DC;
      int v32 = dword_1007139E0;
      BOOL v34 = v115 == v106 && v17 == v105;
      do
      {
        uint64_t v35 = *(int *)(a2 + 264 + 4 * v27);
        uint64_t v36 = (int)dword_100603988[v35];
        if (v35 == 58)
        {
          int v37 = *(_DWORD *)(a2 + 80);
          if ((v37 & v29) != 0)
          {
            char v38 = 2;
          }
          else
          {
            char v38 = 0;
            *(_DWORD *)(a2 + 80) = v37 | v29;
            ++*(_DWORD *)(a2 + 72);
          }
        }
        else
        {
          char v38 = 0;
        }
        int v39 = *((unsigned __int8 *)v10 + (void)&unk_1006DB9E0 + 808 * (int)v35 + 552);
        if (*((unsigned char *)v10 + (void)&unk_1006DB9E0 + 808 * (int)v35 + 552))
        {
          if (v39) {
            int v40 = *(unsigned __int8 *)(*((void *)&unk_1006DB9E0 + 101 * (int)v35 + ((v17 >> 5) & 3))
          }
                                     + (v17 & 0x1F | (32 * (v115 & 0x1F))));
          else {
            int v40 = *((_DWORD *)&unk_1006DB9E0 + 202 * (int)v35 + 9);
          }
          int v41 = (*((unsigned __int8 *)&unk_1006DB9E0 + 808 * (int)v35 + (v17 & 0x80 ^ v115) + 40)
               + v39
               + *((unsigned __int8 *)&unk_1006DB9E0 + 808 * (int)v35 + v17 + 296)
               + v40) >> v38 >> v20;
          *(_DWORD *)(a2 + 4 * v35 + 532) += v41;
          if (v30)
          {
            if (v31 == v35) {
              int v23 = v41;
            }
            if (v32 == v35) {
              int v22 = v41;
            }
          }
        }
        else if (!v34)
        {
          *(_DWORD *)(a2 + 4 * v35 + 532) -= 0x258u >> v20;
          char v28 = 1;
        }
        if (v18 && (dword_100613EC0[v36] & 0x400) != 0) {
          *(_DWORD *)(a2 + 4 * v35 + 532) += v26;
        }
        ++v27;
      }
      while (v27 < *(int *)(a2 + 260));
      BOOL v42 = (v28 & 1) == 0;
      if (v28) {
        int v43 = v17;
      }
      else {
        int v43 = v105;
      }
      int v44 = v106;
      unint64_t v25 = v115;
      if (!v42) {
        int v44 = v115;
      }
      int v105 = v43;
      int v106 = v44;
    }
    int v24 = v113;
    int v45 = (int)v110;
    if (v13 < 16)
    {
      uint64_t v46 = a2 + 4 * byte_100603D94[v17 | (v25 << 8)];
      *(_DWORD *)(v46 + 532) += v26;
    }
    ++v108;
    if (*(unsigned char *)(a2 + 65))
    {
      uint64_t v47 = &v110[*(void *)a2 - 1];
    }
    else
    {
      if (!*(unsigned char *)(a2 + 64)) {
        goto LABEL_81;
      }
      uint64_t v47 = (unsigned __int8 *)(*(void *)a2 + (int)v110 - 1);
      if ((v113 & 7) != 0
        && (unint64_t)(v47 + 3) <= *(void *)(a2 + 8)
        && ((qword_1006140F0[byte_100613FEC[v47[1]] | (32 * byte_100613FEC[*v47])] >> (2 * byte_100613FEC[v47[2]])) & 2) == 0)
      {
        goto LABEL_81;
      }
    }
    unsigned int v48 = v110 & 0xFFFFFFE0;
    if (*(_DWORD *)(a2 + 60) <= (signed int)(v110 & 0xFFFFFFE0))
    {
      uint64_t v111 = v47;
      BOOL v49 = BoostLatin127Trigrams(v45 & 0xFFFFFFE0, a2);
      int v50 = *(unsigned __int8 *)(a2 + 65);
      if (FLAGS_counts && !*(unsigned char *)(a2 + 65) && v49) {
        ++dword_100743934;
      }
      if (FLAGS_enc_detect_source) {
        BOOL v51 = v50 == 0;
      }
      else {
        BOOL v51 = 0;
      }
      if (v51 && v49)
      {
        BOOL v104 = v49;
        PsHighlight((uint64_t)v111, *(const unsigned __int8 **)a2, 0, 2);
        LOBYTE(v49) = v104;
        LOBYTE(v50) = *(unsigned char *)(a2 + 65);
      }
      *(unsigned char *)(a2 + 65) = v50 | v49;
      *(_DWORD *)(a2 + 60) = v48 + 32;
      unint64_t v25 = v115;
      int v21 = v107;
    }
LABEL_81:
    ++*(_DWORD *)(a2 + ((v25 >> 3) & 0x1C) + 164);
    if (*(void *)(a2 + 32))
    {
      if (v20) {
        uint64_t v53 = 45;
      }
      else {
        uint64_t v53 = 32;
      }
      uint64_t v54 = 93;
      if (!v21) {
        uint64_t v54 = 32;
      }
      uint64_t v100 = v54;
      uint64_t v55 = 91;
      if (!v21) {
        uint64_t v55 = 32;
      }
      snprintf(__str, 0x10uLL, "%c%02x%02x%c%c", v55, v25, v17, v100, v53);
      int v56 = byte_100603D94[v17 | (v115 << 8)];
      int v57 = *(_DWORD *)(a2 + 40);
      uint64_t v58 = *(void *)(a2 + 32) + 304 * v57;
      *(_DWORD *)uint64_t v58 = *(_DWORD *)(v112 + 1736);
      *(_DWORD *)(v58 + 4) = v56;
      std::string::assign((std::string *)(v58 + 8), __str);
      memcpy((void *)(*(void *)(a2 + 32) + 304 * v57 + 32), (const void *)(a2 + 532), 0x10CuLL);
      LOBYTE(v25) = v115;
      ++*(_DWORD *)(a2 + 40);
    }
    if (FLAGS_enc_detect_detail2 && v23 | v22)
    {
      if (v22 >= 0) {
        uint64_t v59 = 43;
      }
      else {
        uint64_t v59 = 45;
      }
      uint64_t v99 = v59;
      if (v23 >= 0) {
        uint64_t v60 = 43;
      }
      else {
        uint64_t v60 = 45;
      }
      snprintf(__str, 0x20uLL, "%c%d %c%d", v60, v23, v99, v22);
      SetDetailsEncLabel(a2, __str);
      LOBYTE(v25) = v115;
    }
    int v11 = (char)(v25 | v114);
    int v12 = v24 + 1;
  }
  while (v12 != v109);
  int v64 = v108;
  if (v108 < 1)
  {
    uint64_t v5 = v102;
    uint64_t v10 = v103;
    int v3 = v101;
  }
  else
  {
    uint64_t v5 = v102;
    uint64_t v10 = v103;
    int v3 = v101;
    if ((v11 & 0x80000000) == 0)
    {
      int v65 = *(_DWORD *)(a2 + 260);
      if (v65 >= 1)
      {
        for (uint64_t i = 0; i < v65; ++i)
        {
          uint64_t v67 = *(int *)(a2 + 264 + 4 * i);
          if ((dword_100613EC0[dword_100603988[v67]] & 0x100) != 0)
          {
            *(_DWORD *)(a2 + 4 * v67 + 532) -= 60 * v108;
            int v65 = *(_DWORD *)(a2 + 260);
          }
        }
      }
      int v64 = 1;
    }
  }
LABEL_116:
  if (*(_DWORD *)(a2 + 196)) {
    ActiveSpecialBoostWhack(v5, a2);
  }
  *(void *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 1336) = *(_DWORD *)(a2 + 1344);
  int v68 = *(_DWORD *)(a2 + 1348);
  *(_DWORD *)(a2 + 1340) = v68;
  if (v3 == 2)
  {
    if (*(_DWORD *)(a2 + 92)) {
      *(_DWORD *)(a2 + 540) -= 120;
    }
    if (*(_DWORD *)(a2 + 120)) {
      *(_DWORD *)(a2 + 768) -= 120;
    }
    if (!*(_DWORD *)(a2 + 116))
    {
      *(_DWORD *)(a2 + 540) -= 4800;
      *(_DWORD *)(a2 + 768) -= 4800;
    }
    if (!*(_DWORD *)(a2 + 148)) {
      *(_DWORD *)(a2 + 768) -= 4800;
    }
    int v69 = *(_DWORD *)(a2 + 68);
    if (v69 <= 3)
    {
      if (v69 == 3) {
        int v70 = -1200;
      }
      else {
        int v70 = -2400;
      }
      *(_DWORD *)(a2 + 764) += v70;
    }
    if (v68 < 1 || (*(unsigned char *)(a2 + 196) & 8) == 0 || *(unsigned char *)(a2 + 1448) != 27 || *(unsigned char *)(a2 + 1449) != 36) {
      goto LABEL_152;
    }
    unint64_t v71 = *(void *)a2 + *(int *)(a2 + 1736);
    if (v71 >= *(void *)(a2 + 8) - 3)
    {
      int v75 = *(_DWORD *)(a2 + 616) - 600;
    }
    else
    {
      int v72 = *(unsigned __int8 *)(v71 + 2);
      if (v72 != 66 && v72 != 64)
      {
        if (v72 != 41) {
          goto LABEL_152;
        }
        int v73 = *(unsigned __int8 *)(v71 + 3);
        if (v73 != 65 && v73 != 71)
        {
          if (v73 == 67)
          {
            *(_DWORD *)(a2 + 700) += 600;
            *(_DWORD *)(a2 + 712) -= 600;
            goto LABEL_231;
          }
LABEL_152:
          if (*(void *)(a2 + 32)) {
            SetDetailsEncLabel(a2, "pre-final");
          }
          uint64_t result = ReRank(a2);
LABEL_155:
          int v74 = 0;
          goto LABEL_156;
        }
        *(_DWORD *)(a2 + 712) += 600;
        *(_DWORD *)(a2 + 700) -= 600;
LABEL_231:
        unsigned __int16 v76 = (_DWORD *)(a2 + 616);
LABEL_151:
        *v76 -= 600;
        goto LABEL_152;
      }
      int v75 = *(_DWORD *)(a2 + 616) + 600;
    }
    *(_DWORD *)(a2 + 616) = v75;
    *(_DWORD *)(a2 + 712) -= 600;
    unsigned __int16 v76 = (_DWORD *)(a2 + 700);
    goto LABEL_151;
  }
  uint64_t result = ReRank(a2);
  if (v3 != 1) {
    goto LABEL_155;
  }
  if (*(void *)(a2 + 32)) {
    uint64_t result = (uint64_t)SetDetailsEncLabel(a2, "slow-end");
  }
  int v74 = 1;
LABEL_156:
  int v77 = *(_DWORD *)(a2 + 256);
  char v78 = *(_DWORD *)(a2 + 240) == 58;
  if (v77 >= 301)
  {
    if (v64) {
      int v79 = -300;
    }
    else {
      int v79 = -150;
    }
    *(_DWORD *)(a2 + 256) = v77 + v79;
  }
  int v80 = v77 << v78;
  int v81 = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 196) = 0;
  int v82 = *(_DWORD *)(a2 + 260);
  if (v82 >= 1)
  {
    uint64_t v83 = 0;
    int v84 = 0;
    int v85 = v81 - v80;
    while (1)
    {
      int v86 = *(_DWORD *)(a2 + 264 + 4 * v83);
      uint64_t result = *(unsigned int *)(a2 + 4 * v86 + 532);
      if (v74)
      {
        uint64_t v87 = (int)dword_100603988[v86];
        if ((dword_100613EC0[v87] & 1) != 0 && (int)result <= 0) {
          break;
        }
      }
      if ((int)result >= v85)
      {
        LODWORD(v87) = dword_100603988[v86];
LABEL_174:
        *(_DWORD *)(a2 + 196) |= dword_100613EC0[v87];
        uint64_t v89 = a2 + 4 * v84++;
        *(_DWORD *)(v89 + 264) = v86;
        int v82 = *(_DWORD *)(a2 + 260);
      }
LABEL_175:
      if (++v83 >= v82) {
        goto LABEL_178;
      }
    }
    if (v86 != *(_DWORD *)(a2 + 240) || (int)result < v85) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
  int v84 = 0;
LABEL_178:
  if (*(void *)(a2 + 32))
  {
    snprintf(__str, 0x20uLL, "%d prune", v80 / 30);
    uint64_t result = (uint64_t)SetDetailsEncLabel(a2, __str);
  }
  *(_DWORD *)(a2 + 260) = v84;
  int v90 = *(_DWORD *)(a2 + 1348);
  if (v3 != 2) {
    goto LABEL_208;
  }
  if (!v90)
  {
    unsigned int v91 = *(_DWORD *)(a2 + 240);
    if (v91 > 0x3A || ((1 << v91) & 0x400350000200000) == 0)
    {
      *(_DWORD *)(a2 + 240) = 0;
      *(_DWORD *)(a2 + 532) += 1200;
    }
  }
  int v92 = *(_DWORD *)(a2 + 240);
  if (*(int *)(a2 + 180) < 1)
  {
    switch(v92)
    {
      case 28:
        *(_DWORD *)(a2 + 240) = 14;
        uint64_t v93 = (_DWORD *)(a2 + 588);
        break;
      case 22:
        *(_DWORD *)(a2 + 240) = 13;
        uint64_t v93 = (_DWORD *)(a2 + 584);
        break;
      case 4:
        *(_DWORD *)(a2 + 240) = 1;
        uint64_t v93 = (_DWORD *)(a2 + 536);
        break;
      default:
        goto LABEL_201;
    }
LABEL_200:
    *v93 += 1200;
    goto LABEL_201;
  }
  if (v92 > 13)
  {
    if (v92 == 14)
    {
      *(_DWORD *)(a2 + 240) = 28;
      uint64_t v93 = (_DWORD *)(a2 + 644);
    }
    else
    {
      if (v92 != 34) {
        goto LABEL_201;
      }
      *(_DWORD *)(a2 + 240) = 11;
      uint64_t v93 = (_DWORD *)(a2 + 576);
    }
    goto LABEL_200;
  }
  if (v92 == 1)
  {
    *(_DWORD *)(a2 + 240) = 4;
    uint64_t v93 = (_DWORD *)(a2 + 548);
    goto LABEL_200;
  }
  if (v92 == 13)
  {
    *(_DWORD *)(a2 + 240) = 22;
    uint64_t v93 = (_DWORD *)(a2 + 620);
    goto LABEL_200;
  }
LABEL_201:
  if (*(void *)(a2 + 32))
  {
    snprintf(__str, 0x20uLL, "final %d", v5 - *(_DWORD *)a2);
    SetDetailsEncLabel(a2, __str);
    int v94 = *(_DWORD *)(a2 + 248) - *(_DWORD *)(a2 + 252);
    if (v94 > 59)
    {
      if (v94 > 0x5DB)
      {
        MyEncodingName(dword_100603988[*(int *)(a2 + 240)]);
        snprintf(__str, 0x20uLL, "%s");
      }
      else
      {
        MyEncodingName(dword_100603988[*(int *)(a2 + 240)]);
        snprintf(__str, 0x20uLL, "+%d %s");
      }
    }
    else
    {
      MyEncodingName(dword_100603988[*(int *)(a2 + 240)]);
      snprintf(__str, 0x20uLL, "+%d.%d %s ");
    }
    uint64_t result = (uint64_t)SetDetailsEncProbCopyOffset(a2, *(_DWORD *)(a2 + 240), __str);
    int v90 = *(_DWORD *)(a2 + 1348);
  }
LABEL_208:
  BOOL v96 = *(_DWORD *)(a2 + 248) - *(_DWORD *)(a2 + 252) >= FLAGS_ced_reliable_difference || v90 == 0;
  *(unsigned char *)(a2 + 45) = v96;
  if (v90 == 1 && *(_DWORD *)(a2 + 240) == byte_100603D94[__rev16(*(unsigned __int16 *)(a2 + 1448))]) {
    *(unsigned char *)(a2 + 45) = 1;
  }
  int v97 = *(_DWORD *)(a2 + 260);
  if (v97 == 1) {
    goto LABEL_226;
  }
  if (v97 != 3)
  {
    if (v97 != 2
      || dword_100613D94[dword_100603988[*(int *)(a2 + 264)]] != dword_100613D94[dword_100603988[*(int *)(a2 + 268)]]
      || *v10 <= 2)
    {
      return result;
    }
LABEL_226:
    *(unsigned char *)(a2 + 45) = 1;
LABEL_227:
    *(unsigned char *)(a2 + 44) = 1;
    return result;
  }
  int v98 = dword_100613D94[dword_100603988[*(int *)(a2 + 264)]];
  if (v98 == dword_100613D94[dword_100603988[*(int *)(a2 + 268)]]
    && v98 == dword_100613D94[dword_100603988[*(int *)(a2 + 272)]]
    && *v10 >= 3)
  {
    goto LABEL_226;
  }
  return result;
}

uint64_t IncrementAndBoostPrune(unsigned __int8 *a1, int a2, uint64_t a3, int a4, int a5)
{
  *(void *)(a3 + 24) = a1;
  if (a2 < 2) {
    char v5 = 32;
  }
  else {
    char v5 = a1[1];
  }
  int v6 = *a1;
  uint64_t v7 = a5 - 1;
  uint64_t v8 = a3 + 4 * v7;
  int v9 = *(_DWORD *)(v8 + 1344);
  if (v9 < 17) {
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  if (!*a1 || v6 == 43 || v6 == 126) {
    return v10;
  }
  if (v9 < 0x30)
  {
LABEL_11:
    int v11 = *(_DWORD *)a3;
    uint64_t v12 = 2 * v9;
    uint64_t v13 = a3 + 96 * v7 + 1352;
    *(unsigned char *)(v13 + v12) = v6;
    *(unsigned char *)(v13 + (int)v12 + 1) = v5;
    uint64_t v14 = a3 + 192 * v7 + 4 * v9;
    *(_DWORD *)(v14 + 1544) = a1 - v11;
    *(_DWORD *)(v14 + 1928) = a4;
    ++*(_DWORD *)(v8 + 1344);
    LOBYTE(v9) = v9 + 1;
  }
  else if (a5 == 2)
  {
    *(unsigned char *)(a3 + 44) = 1;
  }
  if (!*(unsigned char *)(a3 + 44) && (v9 & 7) != 0) {
    return 0;
  }
  BoostPrune((uint64_t)(a1 + 2), a3, 0);
  return 1;
}

uint64_t DumpSummary(uint64_t a1, int a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v6 = a1 + 4 * a2;
  printf("  %sSummary[%2d]: ", off_1006DB9D0[a2], *(_DWORD *)(v6 + 1344));
  int v7 = *(_DWORD *)(v6 + 1344);
  if ((int)v3 >= v7) {
    uint64_t v3 = v7;
  }
  else {
    uint64_t v3 = v3;
  }
  if ((int)v3 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = (char *)(a1 + 96 * a2 + 1353);
    do
    {
      printf("%02x%02x ", *(v9 - 1), *v9);
      if ((~v8 & 7) == 0) {
        printf("  ");
      }
      v9 += 2;
      ++v8;
    }
    while (v3 != v8);
  }
  return putchar(10);
}

size_t BeginDetail(uint64_t a1)
{
  fprintf(__stderrp, "%d [", 67);
  for (uint64_t i = 0; i != 67; ++i)
  {
    uint64_t v3 = __stderrp;
    uint64_t v4 = MyEncodingName(dword_100603988[i]);
    fprintf(v3, "(%s)", v4);
    HIDWORD(v5) = -858993459 * (i - 9);
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 1) <= 0x19999998) {
      fwrite("\n    ", 5uLL, 1uLL, __stderrp);
    }
  }
  size_t result = fwrite("] size-detail\n", 0xEuLL, 1uLL, __stderrp);
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

size_t DumpDetail(uint64_t a1)
{
  size_t result = fprintf(__stderrp, "%d count-detail\n", *(_DWORD *)(a1 + 40));
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  unsigned int v4 = v3 - 1;
  if ((int)v3 > 1)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = v3 - 2;
    do
    {
      uint64_t v7 = v3;
      uint64_t v8 = v5 + 304 * v4;
      *(_DWORD *)(v5 + 304 * --v3) -= *(_DWORD *)(v5 + 304 * (v7 - 2));
      for (uint64_t i = 32; i != 300; i += 4)
      {
        size_t result = *(unsigned int *)(v8 + i);
        *(_DWORD *)(v8 + i) = result - *(_DWORD *)(v5 + 304 * v6 + i);
      }
      --v6;
      --v4;
    }
    while (v7 > 2);
    LODWORD(v3) = *(_DWORD *)(a1 + 40);
  }
  if ((int)v3 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32;
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v14 = v12 + 304 * v10;
      uint64_t v13 = (void *)(v14 + 8);
      LODWORD(v14) = *(char *)(v14 + 31);
      char v15 = v14;
      if ((v14 & 0x80000000) != 0) {
        break;
      }
      LODWORD(v14) = v14;
      if ((v14 & 0x80) != 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (*((unsigned char *)v13 + (int)v14 - 1) == 33)
      {
        fwrite("1 0.9 0.9 do-flag\n", 0x12uLL, 1uLL, __stderrp);
        uint64_t v12 = *(void *)(a1 + 32);
      }
      int v16 = *(_DWORD *)(v12 + 304 * v10);
      if (v16 >= 0x20) {
        unsigned int v17 = 32;
      }
      else {
        unsigned int v17 = 43;
      }
      if (v16 < 0x10) {
        unsigned int v17 = 95;
      }
      if (v16 < 3) {
        unsigned int v17 = 61;
      }
      if (v16) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 32;
      }
      uint64_t v19 = v12 + 304 * v10;
      int v20 = (const char *)(v19 + 8);
      if (*(char *)(v19 + 31) < 0) {
        int v20 = *(const char **)v20;
      }
      fprintf(__stderrp, "(%c%s) %d [", v18, v20, *(_DWORD *)(v12 + 304 * v10 + 4));
      for (uint64_t j = 0; j != 67; ++j)
      {
        fprintf(__stderrp, "%d ", *(_DWORD *)(*(void *)(a1 + 32) + v11 + 4 * j));
        HIDWORD(v22) = -858993459 * (j - 9);
        LODWORD(v22) = HIDWORD(v22);
        if ((v22 >> 1) <= 0x19999998) {
          fwrite("  ", 2uLL, 1uLL, __stderrp);
        }
      }
      size_t result = fwrite("] do-detail-e\n", 0xEuLL, 1uLL, __stderrp);
      ++v10;
      v11 += 304;
      if (v10 >= *(int *)(a1 + 40)) {
        goto LABEL_34;
      }
    }
    uint64_t v14 = v13[1];
    if ((v15 & 0x80) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v13 = (void *)*v13;
    goto LABEL_12;
  }
LABEL_34:
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

BOOL QuickPrintableAsciiScan(int8x8_t *a1, int a2)
{
  int v2 = (char *)a1 + a2;
  do
  {
    uint64_t v3 = a1;
    if (a1 >= (int8x8_t *)(v2 - 7)) {
      break;
    }
    ++a1;
    int8x8_t v4 = vorr_s8(vadd_s8(*v3, (int8x8_t)0x101010101010101), vadd_s8(*v3, (int8x8_t)0xE0E0E0E0E0E0E0E0));
  }
  while (((v4.i32[0] | v4.i32[1] | ((*(void *)&v4 | HIDWORD(*(void *)&v4)) >> 16) | ((v4.i32[0] | v4.i32[1] | ((*(void *)&v4 | HIDWORD(*(void *)&v4)) >> 16)) >> 8)) & 0x80) == 0);
  do
  {
    uint64_t v5 = v3;
    if (v3 >= (int8x8_t *)v2) {
      break;
    }
    uint64_t v3 = (int8x8_t *)((char *)v3 + 1);
  }
  while (byte_10061A483[v5->u8[0]]);
  return v5 >= (int8x8_t *)v2;
}

BOOL TextInsideTag(const unsigned __int8 *a1, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v3 = a2 - 192;
  if (a2 - 192 < a1) {
    uint64_t v3 = a1;
  }
  int8x8_t v4 = a2 - 1;
  while (1)
  {
    if (v3 > v4) {
      return 0;
    }
    int v5 = *(a2 - 1);
    if ((v5 & 0xFFFFFFFD) == 0x3C) {
      break;
    }
    BOOL v6 = v5 != 47 || a2 >= a3;
    if (!v6 && *a2 == 42) {
      return 1;
    }
    int8x8_t v4 = a2 - 2;
    --a2;
  }
  if (v5 == 60) {
    return 1;
  }
  if (v5 != 62 || a2 - 7 < a1) {
    return 0;
  }
  int v7 = *(a2 - 7);
  if (v7 == 115) {
    return (*(a2 - 6) & 0xDF) == 0x43
  }
        && (*(a2 - 5) & 0xDF) == 0x52
        && (*(a2 - 4) & 0xDF) == 0x49
        && (*(a2 - 3) & 0xDF) == 0x50
        && (*(a2 - 2) & 0xDF) == 0x54;
  return v7 == 60
      && (*(a2 - 6) & 0xDF) == 0x54
      && (*(a2 - 5) & 0xDF) == 0x49
      && (*(a2 - 4) & 0xDF) == 0x54
      && (*(a2 - 3) & 0xDF) == 0x4C
      && (*(a2 - 2) & 0xDF) == 0x45;
}

uint64_t LookupWatchEnc(uint64_t **a1)
{
  int v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != (uint64_t *)8)
    {
      a1 = (uint64_t **)*a1;
      goto LABEL_9;
    }
    a1 = (uint64_t **)*a1;
  }
  else if (v1 != 8)
  {
    goto LABEL_9;
  }
  if (*a1 == (uint64_t *)0x3846545538465455) {
    return 59;
  }
LABEL_9:
  int v3 = 0;
  if (!EncodingFromName((BOOL)a1, &v3)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  while (dword_100603988[result] != v3)
  {
    if (++result == 67) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t CompatibleEnc(unsigned int a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a1 > 0x4A) {
    return result;
  }
  if (a2 > 0x4A) {
    return result;
  }
  uint64_t result = 1;
  if (a1 == a2) {
    return result;
  }
  if (a2 == 23) {
    return result;
  }
  if (a1 == 23) {
    return result;
  }
  if (a2 == 24) {
    return result;
  }
  if (a1 == 24) {
    return result;
  }
  int v4 = dword_100613D94[a1];
  int v5 = dword_100613D94[a2];
  if (v4 == v5) {
    return result;
  }
  if (a1 == 63)
  {
    if (a2 == 22 || !v5) {
      return result;
    }
    if (a2 != 63) {
      return 0;
    }
    goto LABEL_17;
  }
  if (a2 != 63) {
    return 0;
  }
  if (a1 != 22)
  {
LABEL_17:
    if (v4) {
      return 0;
    }
  }
  return result;
}

uint64_t Rescore(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (FLAGS_counts) {
    ++dword_10074393C;
  }
  uint64_t v6 = *(unsigned int *)(a4 + 1348);
  if ((int)v6 < 1) {
    return a1;
  }
  uint64_t v7 = 0;
  char v8 = 0;
  int v9 = a3 - a2;
  uint64_t v10 = a4 + 264;
  do
  {
    uint64_t v11 = *(int *)(a4 + 4 * v7 + 1736);
    if ((int)v11 < 1) {
      char v12 = 32;
    }
    else {
      char v12 = *(unsigned char *)(a2 + (v11 - 1));
    }
    if ((int)v11 + 1 >= v9) {
      unsigned int v13 = 32;
    }
    else {
      unsigned int v13 = *(unsigned __int8 *)(a2 + v11 + 1);
    }
    if ((int)v11 + 2 >= v9) {
      unsigned int v14 = 32;
    }
    else {
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 2);
    }
    int v15 = (*(unsigned __int8 *)(a2 + v11) >> 1) & 0x20 | v12 & 0x80 | (v13 >> 4) & 8 | (v14 >> 6) & 2;
    if (v15 == 32)
    {
      int v16 = *(_DWORD *)(a4 + 260);
      if (v16 < 1) {
        goto LABEL_26;
      }
      for (uint64_t i = 0; i < v16; ++i)
      {
        uint64_t v18 = *(int *)(v10 + 4 * i);
        if ((dword_100613EC0[dword_100603988[v18]] & 0x800) != 0)
        {
          *(_DWORD *)(a4 + 4 * v18 + 532) += 60;
          int v16 = *(_DWORD *)(a4 + 260);
          char v8 = 1;
        }
      }
    }
    if (v15 == 170)
    {
      int v19 = *(_DWORD *)(a4 + 260);
      if (v19 >= 1)
      {
        for (uint64_t j = 0; j < v19; ++j)
        {
          uint64_t v21 = *(int *)(v10 + 4 * j);
          if ((dword_100613EC0[dword_100603988[v21]] & 0x800) != 0)
          {
            *(_DWORD *)(a4 + 4 * v21 + 532) -= 60;
            int v19 = *(_DWORD *)(a4 + 260);
            char v8 = 1;
          }
        }
      }
    }
LABEL_26:
    ++v7;
  }
  while (v7 != v6);
  if (v8)
  {
    ReRank(a4);
    a1 = dword_100603988[*(int *)(a4 + 240)];
    if (*(void *)(a4 + 32))
    {
      unint64_t v22 = MyEncodingName(dword_100603988[*(int *)(a4 + 240)]);
      snprintf(__str, 0x20uLL, "=Rescore %s", v22);
      uint64_t v23 = 0;
      while (dword_100603988[v23] != a1)
      {
        if (++v23 == 67)
        {
          LODWORD(v23) = -1;
          break;
        }
      }
      int v24 = *(_DWORD *)(a4 + 40);
      uint64_t v25 = *(void *)(a4 + 32) + 304 * v24;
      *(_DWORD *)uint64_t v25 = 0;
      *(_DWORD *)(v25 + 4) = v23;
      std::string::assign((std::string *)(v25 + 8), __str);
      memcpy((void *)(*(void *)(a4 + 32) + 304 * v24 + 32), (const void *)(a4 + 532), 0x10CuLL);
      ++*(_DWORD *)(a4 + 40);
    }
    SimplePrune((_DWORD *)a4, 300);
    CalcReliable(a4);
  }
  return a1;
}

uint64_t RobustScan(const char *a1, int a2, int a3, int *a4, _DWORD *a5)
{
  int v5 = a5;
  if (FLAGS_counts) {
    ++dword_100743940;
  }
  if (a3 >= 1) {
    bzero(a5, 4 * a3);
  }
  if (a2 >= 0x40000) {
    int v10 = 0x40000;
  }
  else {
    int v10 = a2;
  }
  uint64_t v11 = &a1[v10];
  unint64_t v12 = (unint64_t)(v11 - 1);
  if (a2 >= 0x10000) {
    a2 = 0x10000;
  }
  if (FLAGS_enc_detect_source) {
    PsSourceInit(32);
  }
  if (v12 > (unint64_t)a1)
  {
    uint64_t v13 = 0;
    unsigned int v14 = &a1[a2 - 1];
    int v15 = &a1[v10 - 1];
    while (1)
    {
      while (a1 < v11 - 3 && (((a1[1] | *a1) | (a1[2] | a1[3])) & 0x80) == 0)
        a1 += 4;
      if ((unint64_t)a1 >= v12)
      {
        uint64_t v18 = v13;
      }
      else
      {
        uint64_t v16 = v15 - a1;
        a1 += 2;
        while (1)
        {
          int v17 = *(a1 - 2);
          if (v17 < 0) {
            break;
          }
          ++a1;
          if (!--v16)
          {
            uint64_t v18 = v13;
            a1 = v15;
            goto LABEL_23;
          }
        }
        if (a3 >= 1)
        {
          unint64_t v19 = *((unsigned __int8 *)a1 - 1);
          uint64_t v20 = v17 & 0xF0 | (v19 >> 4);
          unint64_t v21 = v19 & 0x80 ^ v17;
          unint64_t v22 = (32 * (v17 & 0x1Fu)) & 0xFFFFFFFFFFFFFFE0 | v19 & 0x1F;
          uint64_t v23 = a3;
          int v24 = a4;
          uint64_t v25 = v5;
          do
          {
            int v27 = *v24++;
            int v26 = v27;
            char v28 = (char *)&unk_1006DB9E0 + 808 * v27;
            int v29 = v28[v20 + 552];
            if (v29) {
              int v30 = *(unsigned __int8 *)(*((void *)&unk_1006DB9E0 + 101 * v26 + ((v19 >> 5) & 3)) + v22);
            }
            else {
              int v30 = *((_DWORD *)&unk_1006DB9E0 + 202 * v26 + 9);
            }
            *v25++ += v28[v19 + 296] + v28[v21 + 40] + v29 + v30;
            --v23;
          }
          while (v23);
        }
        uint64_t v18 = (v13 + 1);
        if ((int)v13 >= 1000 && a1 > v14) {
          goto LABEL_35;
        }
      }
LABEL_23:
      uint64_t v13 = v18;
      if ((unint64_t)a1 >= v12) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_35:
  if (FLAGS_enc_detect_source)
  {
    fprintf(__stderrp, "(  bigram_count = %d) do-src\n", v18);
    if (v18 <= 1) {
      LODWORD(v18) = 1;
    }
    if (a3 >= 1)
    {
      uint64_t v31 = a3;
      do
      {
        int v32 = __stderrp;
        uint64_t v33 = *a4++;
        BOOL v34 = MyEncodingName(dword_100603988[v33]);
        LODWORD(v33) = *v5++;
        fprintf(v32, "(  enc[%-12.12s] = %7d (avg %d)) do-src\n", v34, v33, (int)v33 / (int)v18);
        --v31;
      }
      while (v31);
    }
    PsSourceFinish();
  }
  return v18;
}

uint64_t Rescan(uint64_t a1, const char *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, char a11, uint64_t a12)
{
  unint64_t v12 = a2;
  if (FLAGS_counts) {
    ++dword_100743944;
  }
  if (a4 - (int)a3 >= 801)
  {
    int v14 = a4 - a2;
    unsigned int v15 = *(_DWORD *)(a12 + 204);
    if (v15 == 23)
    {
      unsigned int v15 = *(_DWORD *)(a12 + 208);
      if (v15 == 23) {
        unsigned int v15 = *(_DWORD *)(a12 + 212);
      }
    }
    unsigned int v16 = dword_100603988[*(int *)(a12 + 244)];
    signed int v17 = (a3 - a2 + ((a4 - a3) >> 1)) & 0xFFFFFFFE;
    uint64_t v18 = &a2[v17];
    if ((unint64_t)(v18 - 192) >= a3) {
      unint64_t v19 = (unint64_t)(v18 - 192);
    }
    else {
      unint64_t v19 = a3;
    }
    int v20 = v17 | 1;
    unint64_t v21 = v18 - 1;
    int v74 = *(unsigned __int8 *)(a12 + 45);
    while (v19 <= (unint64_t)v21)
    {
      int v22 = *v21--;
      --v20;
      if ((v22 & 0x80000000) == 0)
      {
        signed int v17 = v20 & 0xFFFFFFFE;
        break;
      }
    }
    if (*(void *)(a12 + 32))
    {
      unsigned int v73 = a8;
      uint64_t v71 = a6;
      uint64_t v72 = a7;
      uint64_t v70 = a5;
      SetDetailsEncLabel(a12, ">> Rescan");
      DumpDetail(a12);
      snprintf(__str, 0x20uLL, ">> Rescan[%d..%d]", v17, v14);
      fprintf(__stderrp, "() end-detail (%s) start-detail\n\n", __str);
      a5 = v70;
      a6 = v71;
      a7 = v72;
      a8 = v73;
      unint64_t v12 = a2;
    }
    unsigned __int8 v77 = 0;
    int v76 = 0;
    BYTE4(v69) = a11;
    LODWORD(v69) = a10;
    unsigned int v23 = InternalDetectEncoding(5, &v12[v17], (v14 - v17), a5, a6, a7, a8, a9, v69, v78, &v77, &v76);
    int v24 = v77;
    *(unsigned char *)(a12 + 45) = v77;
    uint64_t v25 = a1;
    int v26 = v14;
    if (v23 == 24) {
      goto LABEL_29;
    }
    int v27 = CompatibleEnc(v15, v23);
    uint64_t v25 = a1;
    if (v27)
    {
      if (dword_10061FE04[v15] >= dword_10061FE04[v23]) {
        uint64_t v25 = v15;
      }
      else {
        uint64_t v25 = v23;
      }
    }
    if (v74 && v24)
    {
      if (CompatibleEnc(a1, v23))
      {
        if (dword_10061FE04[a1] >= dword_10061FE04[v23]) {
          return a1;
        }
        else {
          return v23;
        }
      }
    }
    else if (!v24)
    {
      goto LABEL_29;
    }
    if (CompatibleEnc(a1, v23) & v27) {
      return v25;
    }
LABEL_29:
    uint64_t v28 = 0;
    while (dword_100603988[v28] != a1)
    {
      if (++v28 == 67)
      {
        LODWORD(v28) = -1;
        break;
      }
    }
    uint64_t v29 = 0;
    *(_DWORD *)std::string __str = v28;
    while (dword_100603988[v29] != v16)
    {
      if (++v29 == 67)
      {
        LODWORD(v29) = -1;
        break;
      }
    }
    if (v28 == v29)
    {
      unsigned int v30 = 1;
    }
    else
    {
      int v82 = v29;
      unsigned int v30 = 2;
    }
    uint64_t v31 = 0;
    while (dword_100603988[v31] != v23)
    {
      if (++v31 == 67)
      {
        LODWORD(v31) = -1;
        break;
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v30;
    while (*(_DWORD *)&__str[v32] != v31)
    {
      v32 += 4;
      if (4 * v30 == v32)
      {
        ++v30;
        *(_DWORD *)&__str[4 * v33] = v31;
        break;
      }
    }
    uint64_t v34 = 0;
    while (dword_100603988[v34] != v76)
    {
      if (++v34 == 67)
      {
        LODWORD(v34) = -1;
        break;
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v30;
    while (*(_DWORD *)&__str[v35] != v34)
    {
      v35 += 4;
      if (4 * v30 == v35)
      {
        ++v30;
        *(_DWORD *)&__str[4 * v36] = v34;
        break;
      }
    }
    int v37 = *(_DWORD *)(a12 + 204);
    if (v37 != 23)
    {
      uint64_t v38 = 0;
      while (dword_100603988[v38] != v37)
      {
        if (++v38 == 67)
        {
          LODWORD(v38) = -1;
          break;
        }
      }
      uint64_t v39 = v30;
      int v40 = __str;
      uint64_t v41 = v30;
      while (1)
      {
        int v42 = *(_DWORD *)v40;
        v40 += 4;
        if (v42 == v38) {
          break;
        }
        if (!--v41)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v39] = v38;
          break;
        }
      }
    }
    int v43 = *(_DWORD *)(a12 + 208);
    if (v43 != 23)
    {
      uint64_t v44 = 0;
      while (dword_100603988[v44] != v43)
      {
        if (++v44 == 67)
        {
          LODWORD(v44) = -1;
          break;
        }
      }
      uint64_t v45 = v30;
      uint64_t v46 = __str;
      uint64_t v47 = v30;
      while (1)
      {
        int v48 = *(_DWORD *)v46;
        v46 += 4;
        if (v48 == v44) {
          break;
        }
        if (!--v47)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v45] = v44;
          break;
        }
      }
    }
    int v49 = *(_DWORD *)(a12 + 212);
    if (v49 != 23)
    {
      uint64_t v50 = 0;
      while (dword_100603988[v50] != v49)
      {
        if (++v50 == 67)
        {
          LODWORD(v50) = -1;
          break;
        }
      }
      uint64_t v51 = v30;
      uint64_t v52 = __str;
      uint64_t v53 = v30;
      while (1)
      {
        int v54 = *(_DWORD *)v52;
        v52 += 4;
        if (v54 == v50) {
          break;
        }
        if (!--v53)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v51] = v50;
          break;
        }
      }
    }
    int v55 = *(_DWORD *)(a12 + 200);
    if (v55 != 23)
    {
      uint64_t v56 = 0;
      while (dword_100603988[v56] != v55)
      {
        if (++v56 == 67)
        {
          LODWORD(v56) = -1;
          break;
        }
      }
      uint64_t v57 = v30;
      uint64_t v58 = __str;
      uint64_t v59 = v30;
      while (1)
      {
        int v60 = *(_DWORD *)v58;
        v58 += 4;
        if (v60 == v56) {
          break;
        }
        if (!--v59)
        {
          ++v30;
          *(_DWORD *)&__str[4 * v57] = v56;
          break;
        }
      }
    }
    if (*(void *)(a12 + 32))
    {
      SetDetailsEncLabel(a12, ">> RobustScan");
      DumpDetail(a12);
      snprintf(v80, 0x20uLL, ">> RobustScan[0..%d]", v26);
      fprintf(__stderrp, "() end-detail (%s) start-detail\n\n", v80);
    }
    int v61 = RobustScan(a2, v26, v30, (int *)__str, v80);
    uint64_t v62 = 0;
    int v63 = -1;
    do
    {
      if (v63 < *(_DWORD *)&v80[v62])
      {
        uint64_t v25 = dword_100603988[*(int *)&__str[v62]];
        int v63 = *(_DWORD *)&v80[v62];
      }
      v62 += 4;
    }
    while (4 * v30 != v62);
    if (*(void *)(a12 + 32))
    {
      int v64 = MyEncodingName(v25);
      snprintf(__s, 0x20uLL, "=Robust[%d] %s", v61, v64);
      uint64_t v65 = 0;
      while (dword_100603988[v65] != v25)
      {
        if (++v65 == 67)
        {
          LODWORD(v65) = -1;
          break;
        }
      }
      int v66 = *(_DWORD *)(a12 + 40);
      uint64_t v67 = *(void *)(a12 + 32) + 304 * v66;
      *(_DWORD *)uint64_t v67 = 0;
      *(_DWORD *)(v67 + 4) = v65;
      std::string::assign((std::string *)(v67 + 8), __s);
      memcpy((void *)(*(void *)(a12 + 32) + 304 * v66 + 32), (const void *)(a12 + 532), 0x10CuLL);
      ++*(_DWORD *)(a12 + 40);
    }
    return v25;
  }
  return a1;
}

uint64_t InternalDetectEncoding(char a1, int8x8_t *a2, int a3, char *a4, char *a5, char *a6, int a7, unsigned int a8, unsigned int a9, char a10, _DWORD *a11, unsigned __int8 *a12, _DWORD *a13)
{
  *a11 = 0;
  *a12 = 0;
  *a13 = 24;
  if (!a3)
  {
    uint64_t v19 = 0;
    *a12 = 1;
    return v19;
  }
  if (a3 <= 500 && a10 && QuickPrintableAsciiScan(a2, a3))
  {
    *a12 = 1;
    return 24;
  }
  InitDetectEncodingState((uint64_t)v105);
  uint64_t v104 = 0;
  unsigned int v92 = a7;
  uint64_t v90 = (uint64_t)a5;
  unsigned int v91 = a6;
  unsigned int v89 = a8;
  v88 = a4;
  if (FLAGS_enc_detect_detail) {
    operator new[]();
  }
  if (a3 >= FLAGS_enc_detect_slow_max_kb << 10) {
    int v20 = FLAGS_enc_detect_slow_max_kb << 10;
  }
  else {
    int v20 = a3;
  }
  if (a3 >= FLAGS_enc_detect_fast_max_kb << 10) {
    int v21 = FLAGS_enc_detect_fast_max_kb << 10;
  }
  else {
    int v21 = a3;
  }
  int v22 = (char *)a2 + v21;
  int v98 = v20;
  unint64_t v100 = (unint64_t)(v22 - 1);
  if (v20 <= v21) {
    unsigned int v23 = (const unsigned __int8 *)a2 + v20 - 1;
  }
  else {
    unsigned int v23 = (const unsigned __int8 *)(v22 - 1);
  }
  v105[0] = a2;
  v105[1] = (char *)a2 + v21;
  v105[2] = a2;
  v105[3] = (char *)a2 - 2;
  if (a10) {
    int v24 = &unk_1006161F0;
  }
  else {
    int v24 = &unk_1006160F0;
  }
  if (v106)
  {
    BeginDetail((uint64_t)v105);
    uint64_t v25 = (uint64_t **)sub_100399800(__str, "");
    int v26 = LookupWatchEnc(v25);
    dword_1007139DC = v26;
    if (v121 < 0)
    {
      operator delete(*(void **)__str);
      int v26 = dword_1007139DC;
    }
    if ((v26 & 0x80000000) == 0) {
      fprintf(__stderrp, "/track-me %d def\n", v26);
    }
    int v27 = (uint64_t **)sub_100399800(__str, "");
    int v28 = LookupWatchEnc(v27);
    dword_1007139E0 = v28;
    if (v121 < 0)
    {
      operator delete(*(void **)__str);
      int v28 = dword_1007139E0;
    }
    if ((v28 & 0x80000000) == 0) {
      fprintf(__stderrp, "/track-me2 %d def\n", v28);
    }
    fprintf(__stderrp, "%% kDerateHintsBelow = %d\n", 12);
  }
  uint64_t v29 = (const unsigned __int8 *)a2 + a3;
  if (FLAGS_enc_detect_source) {
    PsSourceInit(32);
  }
  ApplyHints(v88, a5, v91, a7, a8, a9, (uint64_t)v105);
  InitialBytesBoost((unsigned __int8 *)a2, a3, (uint64_t)v105);
  char v87 = 0;
  int v101 = 0;
  uint64_t v30 = v21;
  uint64_t v93 = v22 - 3;
  uint64_t v31 = a2;
  uint64_t v96 = v30;
  int v97 = (unsigned __int8 *)(v29 - 1);
  unsigned int v95 = a3;
  int v32 = a3 + a2 + 1;
  uint64_t v102 = (const unsigned __int8 *)a2 + a3;
  uint64_t v33 = (const unsigned __int8 *)v100;
  int v34 = v98;
  while (1)
  {
    if (v31 < (int8x8_t *)v23)
    {
      int v99 = v34;
      while (1)
      {
        uint64_t v35 = v31;
LABEL_37:
        uint64_t v36 = 0;
        int v37 = v35;
        do
        {
          uint64_t v38 = v37;
          uint64_t v39 = (const unsigned __int8 *)v35 + v36;
          if (&v35->i8[v36] >= (__int8 *)v23) {
            goto LABEL_52;
          }
          int v40 = (char)v24[*v39];
          int v37 = (int8x8_t *)((char *)v38 + 1);
          ++v36;
        }
        while (!v40);
        if (FLAGS_enc_detect_source) {
          PsSource((size_t)v35 + v36 - 1, (const unsigned __int8 *)a2, v102);
        }
        if (a1 & 4 | a9 || !TextInsideTag((const unsigned __int8 *)a2, (const unsigned __int8 *)v35 + v36 - 1, v23)) {
          break;
        }
        if (v101 < 12)
        {
          ++v101;
          int v41 = 4;
          __int16 v42 = 120;
          goto LABEL_47;
        }
        uint64_t v31 = (int8x8_t *)((char *)v35 + v36);
        while (v31 <= (int8x8_t *)v23)
        {
          int v46 = v31->u8[0];
          uint64_t v31 = (int8x8_t *)((char *)v31 + 1);
          if ((v46 & 0xFFFFFFFD) == 0x3C) {
            goto LABEL_59;
          }
        }
        uint64_t v31 = (int8x8_t *)((char *)v35 + v36 + 1);
LABEL_59:
        char v87 = 1;
        uint64_t v29 = v102;
        uint64_t v33 = (const unsigned __int8 *)v100;
        int v34 = v99;
        if (v31 >= (int8x8_t *)v23) {
          goto LABEL_62;
        }
      }
      int v41 = 0;
      __int16 v42 = 45;
LABEL_47:
      if (FLAGS_enc_detect_source)
      {
        uint64_t v43 = qword_100743928;
        int v44 = 2 * ((~a2 + (int)v35 + (int)v36) % dword_100743924);
        *(_WORD *)(qword_100743928 + v44) = 15677;
        *(_WORD *)(v43 + v44 + 2) = v42 | (v42 << 8);
      }
      int v45 = IncrementAndBoostPrune((unsigned __int8 *)v35 + v36 - 1, v32 - (int)v35 - (int)v36, (uint64_t)v105, v41, v40);
      uint64_t v39 = (const unsigned __int8 *)v35 + v40 + v36 - 1;
      if (!v45) {
        goto LABEL_52;
      }
      if (v108)
      {
        uint64_t v31 = (int8x8_t *)((char *)v38 + v40);
      }
      else
      {
        if (v111)
        {
LABEL_52:
          uint64_t v35 = (int8x8_t *)v39;
          if (v39 < v23) {
            goto LABEL_37;
          }
          uint64_t v31 = (int8x8_t *)v39;
          goto LABEL_61;
        }
        uint64_t v31 = (int8x8_t *)((char *)v35 + v40 + v36 - 1);
      }
LABEL_61:
      uint64_t v29 = v102;
      uint64_t v33 = (const unsigned __int8 *)v100;
      int v34 = v99;
    }
LABEL_62:
    if (v31 == (int8x8_t *)v97 && (uint64_t v48 = *v97, v24[v48]))
    {
      char v47 = 1;
      IncrementAndBoostPrune(v97, 1, (uint64_t)v105, 0, (char)v24[v48]);
    }
    else
    {
      char v47 = 0;
    }
    if (FLAGS_enc_detect_source)
    {
      PsSource((size_t)v31, (const unsigned __int8 *)a2, v29);
      uint64_t v49 = qword_100743928;
      int v50 = 2 * (((int)v31 - (int)a2) % dword_100743924);
      *(_WORD *)(qword_100743928 + v50) = 15677;
      *(_WORD *)(v49 + v50 + 2) = 11565;
    }
    BoostPrune((uint64_t)v31, (uint64_t)v105, 1);
    if (v108)
    {
      uint64_t v51 = v95;
      unsigned int v52 = a9;
      goto LABEL_107;
    }
    if ((v111 & 1) == 0 || v31 >= (int8x8_t *)v33) {
      break;
    }
    v34 += FLAGS_enc_detect_slow_max_kb << 10;
    if (v34 <= (int)v96) {
      unsigned int v23 = (const unsigned __int8 *)&a2[-1] + v34 + 7;
    }
    else {
      unsigned int v23 = v33;
    }
    if ((v111 & 6) == 0) {
      int v24 = &unk_1006161F0;
    }
  }
  if (v31 >= (int8x8_t *)v33)
  {
    uint64_t v51 = v95;
  }
  else
  {
    uint64_t v51 = v95;
    unint64_t v53 = (unint64_t)v93;
    do
    {
      while ((unint64_t)v31 < v53
           && (((v31->i8[1] | v31->i8[0]) | (v31->i8[2] | v31->i8[3])) & 0x80) == 0)
        uint64_t v31 = (int8x8_t *)((char *)v31 + 4);
      if ((unint64_t)v31 < v100)
      {
        uint64_t v54 = 0;
        while ((v31->i8[v54] & 0x80000000) == 0)
        {
          ++v54;
          if (!&v31->i8[1 - ((void)a2 + v96) + v54])
          {
            uint64_t v31 = (int8x8_t *)((char *)a2 + v96 - 1);
            uint64_t v51 = v95;
            goto LABEL_96;
          }
        }
        if (FLAGS_enc_detect_source)
        {
          PsSource((size_t)v31 + v54, (const unsigned __int8 *)a2, v102);
          uint64_t v55 = qword_100743928;
          int v56 = 2 * (((int)v31 - (int)a2 + (int)v54) % dword_100743924);
          *(_WORD *)(qword_100743928 + v56) = 15677;
          *(_WORD *)(v55 + v56 + 2) = 11565;
        }
        int v57 = IncrementAndBoostPrune((unsigned __int8 *)v31 + v54, (int)v102 - ((int)v31 + (int)v54), (uint64_t)v105, 0, 2);
        uint64_t v31 = (int8x8_t *)((char *)v31 + v54 + 2);
        int v58 = v108 ? v57 : 0;
        uint64_t v51 = v95;
        unint64_t v53 = (unint64_t)v93;
        if (v58 == 1) {
          break;
        }
      }
LABEL_96:
      ;
    }
    while ((unint64_t)v31 < v100);
  }
  if (v31 == (int8x8_t *)v97) {
    char v59 = v47;
  }
  else {
    char v59 = 1;
  }
  unsigned int v52 = a9;
  uint64_t v29 = v102;
  if ((v59 & 1) == 0)
  {
    uint64_t v60 = *v97;
    if (v24[v60]) {
      IncrementAndBoostPrune(v97, 1, (uint64_t)v105, 0, (char)v24[v60]);
    }
    uint64_t v31 = (int8x8_t *)v97;
  }
LABEL_107:
  if (FLAGS_enc_detect_source)
  {
    PsSource((size_t)v31, (const unsigned __int8 *)a2, v29);
    uint64_t v61 = qword_100743928;
    int v62 = 2 * (((int)v31 - (int)a2) % dword_100743924);
    *(_WORD *)(qword_100743928 + v62) = 15677;
    *(_WORD *)(v61 + v62 + 2) = 11565;
  }
  BoostPrune((uint64_t)v31, (uint64_t)v105, 2);
  if (FLAGS_enc_detect_summary)
  {
    DumpSummary((uint64_t)v105, 0, 32);
    DumpSummary((uint64_t)v105, 1, 32);
  }
  if (FLAGS_enc_detect_source) {
    PsSourceFinish();
  }
  unsigned int v63 = v116;
  if (v116 != 0 || (v87 & 1) == 0)
  {
    uint64_t v19 = dword_100603988[v116];
    unsigned int v71 = v114;
    if (v114 != 23 && v113 == 23) {
      unsigned int v73 = v114;
    }
    else {
      unsigned int v73 = v113;
    }
    unsigned int v74 = v115;
    if (v115 != 23 && v73 == 23) {
      unsigned int v76 = v115;
    }
    else {
      unsigned int v76 = v73;
    }
    if (v76 == 23)
    {
      if (v116 == 1)
      {
        if (!v110)
        {
          int v77 = v109;
          BOOL v78 = v109 == 0;
LABEL_156:
          int v79 = 1;
          goto LABEL_157;
        }
LABEL_155:
        BOOL v78 = 0;
        int v77 = 1;
        unsigned __int8 v109 = 1;
        goto LABEL_156;
      }
      if (!dword_100613D94[v19] || v19 <= 0x3F && ((1 << v19) & 0x8000000001800000) != 0)
      {
        int v79 = 1;
        goto LABEL_148;
      }
      unsigned int v76 = v112;
      if (v112 == 23)
      {
LABEL_147:
        int v79 = 0;
        goto LABEL_148;
      }
    }
    else if (!CompatibleEnc(v76, v113) {
           || !CompatibleEnc(v76, v71)
    }
           || !CompatibleEnc(v76, v74))
    {
      goto LABEL_147;
    }
    int v79 = CompatibleEnc(v76, v19);
LABEL_148:
    if (!v110
      || v63 != 1
      && dword_100613D94[v19]
      && (v19 > 0x3F || ((1 << v19) & 0x8000000001800000) == 0)
      && (v63 > 0x29 || ((1 << v63) & 0x20020011200) == 0))
    {
      int v77 = v109;
      BOOL v78 = v109 == 0;
      if (v109) {
        char v83 = v79;
      }
      else {
        char v83 = 1;
      }
      if ((v83 & 1) == 0)
      {
        BOOL v85 = (v19 - 10) < 0x36 && ((0x20000000007803uLL >> (v19 - 10)) & 1) != 0
           || v63 == 5
           || (dword_100613D94[v19] - 13) < 2;
        LOBYTE(v79) = 0;
        if (!v85 || v119 < 6) {
          goto LABEL_159;
        }
        BOOL v78 = 0;
        int v79 = a1 & 1;
        int v77 = 1;
      }
LABEL_157:
      if (!v78 && v79)
      {
LABEL_160:
        *a13 = dword_100603988[v117];
        if (v77) {
          char v80 = v79;
        }
        else {
          char v80 = 0;
        }
        if (a1 & 1) != 0 || (v80 & 1) != 0 || (dword_100613EC0[(int)v19])
        {
          if ((v79 & 1) == 0) {
            unsigned __int8 v109 = 0;
          }
        }
        else
        {
          uint64_t v19 = Rescan(v19, (const char *)a2, (unint64_t)v31, (int)v29, (uint64_t)v88, v90, (uint64_t)v91, v92, v89, a9, a10, (uint64_t)v105);
        }
        if (v106) {
          DumpDetail((uint64_t)v105);
        }
        *a11 = v31 - a2 + 1;
        *a12 = v109;
        goto LABEL_172;
      }
LABEL_159:
      uint64_t v19 = Rescore(v19, (uint64_t)a2, (int)v29, (uint64_t)v105);
      int v77 = v109;
      goto LABEL_160;
    }
    goto LABEL_155;
  }
  if (v106)
  {
    int v64 = v107;
    uint64_t v65 = v106 + 304 * v107;
    *(_DWORD *)uint64_t v65 = *(_DWORD *)(v65 - 304);
    *(_DWORD *)(v65 + 4) = -1;
    std::string::assign((std::string *)(v65 + 8), ">> Recurse/tags");
    memcpy((void *)(v106 + 304 * v64 + 32), v118, 0x10CuLL);
    ++v107;
    DumpDetail((uint64_t)v105);
    strcpy(__str, ">> Recurse for tags");
    fprintf(__stderrp, "() end-detail (%s) start-detail\n\n", __str);
  }
  BYTE4(v86) = a10;
  LODWORD(v86) = v52;
  uint64_t v66 = InternalDetectEncoding(4, a2, v51, v88, v90, v91, v92, v89, v86, a11, a12, a13);
  uint64_t v19 = v66;
  if (v106)
  {
    uint64_t v67 = MyEncodingName(v66);
    snprintf(__str, 0x20uLL, "=2 %s", v67);
    uint64_t v68 = 0;
    while (dword_100603988[v68] != v19)
    {
      if (++v68 == 67)
      {
        LODWORD(v68) = -1;
        break;
      }
    }
    int v69 = v107;
    uint64_t v70 = v106 + 304 * v107;
    *(_DWORD *)uint64_t v70 = 0;
    *(_DWORD *)(v70 + 4) = v68;
    std::string::assign((std::string *)(v70 + 8), __str);
    memcpy((void *)(v106 + 304 * v69 + 32), v118, 0x10CuLL);
    ++v107;
    DumpDetail((uint64_t)v105);
  }
LABEL_172:
  uint64_t v81 = v104;
  uint64_t v104 = 0;
  if (v81) {
    sub_10039995C((uint64_t)&v104, v81);
  }
  return v19;
}

void sub_1003992E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v34 = a33;
  a33 = 0;
  if (v34) {
    sub_10039995C((uint64_t)&a33, v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CompactEncDet::DetectEncoding(int8x8_t *__src, int a2, char *a3, char *a4, char *a5, int a6, unsigned int a7, unsigned int a8, char a9, int *a10, unsigned __int8 *a11)
{
  unsigned int v15 = a3;
  if (FLAGS_ced_echo_input)
  {
    unsigned int v18 = a8;
    int v20 = a4;
    int v21 = a5;
    sub_1003999E8(__dst, __src, a2);
    if (v55 >= 0) {
      int v22 = __dst;
    }
    else {
      int v22 = *(int **)__dst;
    }
    fprintf(__stderrp, "CompactEncDet::DetectEncoding()\n%s\n\n", (const char *)v22);
    if (v55 < 0) {
      operator delete(*(void **)__dst);
    }
    a5 = v21;
    a4 = v20;
    unsigned int v15 = a3;
    a8 = v18;
  }
  if (FLAGS_counts)
  {
    dword_10074393C = 0;
    dword_100743944 = 0;
    dword_100743940 = 0;
    dword_100743930 = 0;
    dword_100743934 = 0;
    dword_100743948 = 1;
  }
  if (FLAGS_dirtsimple)
  {
    for (uint64_t i = 0; i != 67; ++i)
      __dst[i] = i;
    RobustScan((const char *)__src, a2, 67, __dst, v53);
    uint64_t v24 = 0;
    int v25 = -1;
    uint64_t v26 = 23;
    do
    {
      if (v25 < v53[v24])
      {
        uint64_t v26 = dword_100603988[__dst[v24]];
        int v25 = v53[v24];
      }
      ++v24;
    }
    while (v24 != 67);
    if (a2 >= 0x40000) {
      int v27 = 0x40000;
    }
    else {
      int v27 = a2;
    }
    *a10 = v27;
    *a11 = 1;
    if (FLAGS_counts)
    {
      printf("CEDcounts ");
      while (dword_100743948--)
        printf("encdet ");
      while (dword_10074393C--)
        printf("rescore ");
      while (dword_100743944--)
        printf("rescan ");
      while (dword_100743940--)
        printf("robust ");
      while (dword_100743930--)
        printf("looking ");
      while (dword_100743934--)
        printf("doing ");
LABEL_47:
      putchar(10);
    }
  }
  else
  {
    uint64_t v26 = InternalDetectEncoding(0, __src, a2, v15, a4, a5, a6, a7, a8, a9, a10, a11, __dst);
    if (FLAGS_counts)
    {
      printf("CEDcounts ");
      while (dword_100743948--)
        printf("encdet ");
      while (dword_10074393C--)
        printf("rescore ");
      while (dword_100743944--)
        printf("rescan ");
      while (dword_100743940--)
        printf("robust ");
      while (dword_100743930--)
        printf("looking ");
      while (dword_100743934--)
        printf("doing ");
      goto LABEL_47;
    }
  }
  return v26;
}

void *sub_100399800(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1003998B4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_1003998B4()
{
}

void sub_1003998CC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100399928(exception, a1);
}

void sub_100399914(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100399928(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10039995C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 - 8);
    if (v3)
    {
      uint64_t v4 = 304 * v3;
      do
      {
        if (*(char *)(a2 + v4 - 273) < 0) {
          operator delete(*(void **)(a2 + v4 - 296));
        }
        v4 -= 304;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void *sub_1003999E8(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1003998B4();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

const char *MyEncodingName(unsigned int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    if (!a1) {
      return "Latin1";
    }
    if (a1 <= 0x4A) {
      return EncodingName(a1);
    }
    if (a1 <= 0x4E)
    {
      unsigned int v2 = a1 - 75;
      uint64_t v3 = off_1006E8D58;
      return v3[v2];
    }
    unsigned int v2 = a1 - 100;
    if (a1 - 100 <= 0x13)
    {
      uint64_t v3 = off_1006E8D80;
      return v3[v2];
    }
  }
  return "~";
}

void *MakeChar44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100399800(a2, "________");
  BOOL v4 = *((char *)a1 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a1[1];
  }
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    unsigned int v9 = 1;
    do
    {
      if (v4) {
        int v10 = (uint64_t *)*a1;
      }
      else {
        int v10 = a1;
      }
      uint64_t v11 = *((unsigned __int8 *)v10 + v6);
      if (a0123456789[v11 + 256])
      {
        if (v8 <= 3)
        {
          char v12 = a0123456789[v11];
          if (*((char *)result + 23) >= 0) {
            uint64_t v13 = result;
          }
          else {
            uint64_t v13 = (void *)*result;
          }
          *((unsigned char *)v13 + v8++) = v12;
        }
      }
      else if (byte_100620130[v11])
      {
        if (v7 > 3)
        {
          if (*((char *)result + 23) >= 0) {
            unsigned int v15 = result;
          }
          else {
            unsigned int v15 = (void *)*result;
          }
          *((unsigned char *)v15 + 4) = *((unsigned char *)v15 + 5);
          if (*((char *)result + 23) >= 0) {
            unsigned int v16 = result;
          }
          else {
            unsigned int v16 = (void *)*result;
          }
          *((unsigned char *)v16 + 5) = *((unsigned char *)v16 + 6);
          if (*((char *)result + 23) >= 0) {
            signed int v17 = result;
          }
          else {
            signed int v17 = (void *)*result;
          }
          *((unsigned char *)v17 + 6) = *((unsigned char *)v17 + 7);
          uint64_t v14 = 7;
        }
        else
        {
          uint64_t v14 = v7 + 4;
        }
        char v18 = a0123456789[v11];
        if (*((char *)result + 23) >= 0) {
          uint64_t v19 = result;
        }
        else {
          uint64_t v19 = (void *)*result;
        }
        *((unsigned char *)v19 + v14) = v18;
        ++v7;
      }
      uint64_t v6 = v9;
      BOOL v4 = *((char *)a1 + 23) < 0;
      unint64_t v20 = *((unsigned __int8 *)a1 + 23);
      if ((v20 & 0x80u) != 0) {
        unint64_t v20 = a1[1];
      }
    }
    while (v20 > v9++);
  }
  return result;
}

void *MakeChar4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100399800(a2, "____");
  int v4 = *((char *)a1 + 23);
  unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  BOOL v6 = v4 < 0;
  unint64_t v7 = a1[1];
  if (v4 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v8 = a1[1];
  }
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if (v6) {
        char v12 = (uint64_t *)*a1;
      }
      else {
        char v12 = a1;
      }
      uint64_t v13 = *((unsigned __int8 *)v12 + v9);
      if (byte_100620130[v13] | a0123456789[v13 + 256]) {
        BOOL v14 = v10 <= 3;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        if (*((char *)result + 23) >= 0) {
          unsigned int v15 = result;
        }
        else {
          unsigned int v15 = (void *)*result;
        }
        *((unsigned char *)v15 + v10++) = a0123456789[v13];
        unint64_t v5 = *((unsigned __int8 *)a1 + 23);
        unint64_t v7 = a1[1];
      }
      uint64_t v9 = v11;
      BOOL v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v7;
      }
      BOOL v14 = v16 > v11++;
    }
    while (v14);
  }
  return result;
}

void *MakeChar8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100399800(a2, "________");
  int v4 = *((char *)a1 + 23);
  unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  BOOL v6 = v4 < 0;
  unint64_t v7 = a1[1];
  if (v4 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v8 = a1[1];
  }
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if (v6) {
        char v12 = (uint64_t *)*a1;
      }
      else {
        char v12 = a1;
      }
      uint64_t v13 = *((unsigned __int8 *)v12 + v9);
      if (byte_100620130[v13] | a0123456789[v13 + 256]) {
        BOOL v14 = v10 <= 7;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        if (*((char *)result + 23) >= 0) {
          unsigned int v15 = result;
        }
        else {
          unsigned int v15 = (void *)*result;
        }
        *((unsigned char *)v15 + v10++) = a0123456789[v13];
        unint64_t v5 = *((unsigned __int8 *)a1 + 23);
        unint64_t v7 = a1[1];
      }
      uint64_t v9 = v11;
      BOOL v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v7;
      }
      BOOL v14 = v16 > v11++;
    }
    while (v14);
  }
  return result;
}

const char *EncodingName(unsigned int a1)
{
  if (a1 <= 0x4A) {
    return off_1006E8E20[3 * a1];
  }
  else {
    return "invalid_encoding";
  }
}

const char *MimeEncodingName(unsigned int a1)
{
  if (a1 <= 0x4A) {
    return off_1006E8E20[3 * a1 + 1];
  }
  else {
    return "";
  }
}

BOOL EncodingFromName(BOOL result, _DWORD *a2)
{
  *a2 = 23;
  if (result)
  {
    uint64_t v3 = (const char *)result;
    if (!strcasecmp((const char *)result, "ASCII"))
    {
      int v7 = 0;
      uint64_t result = 1;
LABEL_8:
      *a2 = v7;
    }
    else
    {
      unint64_t v4 = -1;
      unint64_t v5 = (const char **)off_1006E8E38;
      while (v4 != 73)
      {
        BOOL v6 = *v5;
        v5 += 3;
        ++v4;
        if (!strcasecmp(v3, v6))
        {
          uint64_t result = v4 < 0x4A;
          int v7 = v4 + 1;
          goto LABEL_8;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t EncodingNameAliasToEncoding(char *a1)
{
  uint64_t v3 = a1;
  if (!a1) {
    return 23;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100743978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100743978))
  {
    xmmword_100743950 = 0u;
    unk_100743960 = 0u;
    dword_100743970 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_100399FC8, &xmmword_100743950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100743978);
  }
  if (qword_100743980 != -1) {
    dispatch_once(&qword_100743980, &stru_1006E9548);
  }
  int v1 = sub_10039C65C(&xmmword_100743950, &v3);
  if (v1) {
    return *((unsigned int *)v1 + 6);
  }
  else {
    return 23;
  }
}

void sub_100399FCC(id a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = off_1006E8E20;
  do
  {
    uint64_t v3 = *v2;
    v2 += 3;
    BOOL v6 = v3;
    *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = v1++;
  }
  while (v1 != 75);
  uint64_t v4 = 0;
  unint64_t v5 = &off_1006E8E28;
  do
  {
    BOOL v6 = *v5;
    if (!sub_10039C65C(&xmmword_100743950, &v6)) {
      *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = v4;
    }
    ++v4;
    v5 += 3;
  }
  while (v4 != 75);
  BOOL v6 = "5601";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "646";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 24;
  BOOL v6 = "852";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 39;
  BOOL v6 = "866";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 42;
  BOOL v6 = "8859-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "ansi-1251";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 26;
  BOOL v6 = "ansi_x3.4-1968";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 24;
  BOOL v6 = "arabic";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "ascii";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "ascii-7-bit";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 24;
  BOOL v6 = "asmo-708";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "bhaskar";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 55;
  BOOL v6 = "big5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 13;
  BOOL v6 = "big5-cp950";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 20;
  BOOL v6 = "big5-hkscs";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 47;
  BOOL v6 = "chinese";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "cns";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 19;
  BOOL v6 = "cns11643";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 19;
  BOOL v6 = "cp1250";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 29;
  BOOL v6 = "cp1251";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 26;
  BOOL v6 = "cp1252";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 27;
  BOOL v6 = "cp1253";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 41;
  BOOL v6 = "cp1254";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 31;
  BOOL v6 = "cp1255";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 36;
  BOOL v6 = "cp1256";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 35;
  BOOL v6 = "cp1257";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 32;
  BOOL v6 = "cp819";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "cp852";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 39;
  BOOL v6 = "cp866";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 42;
  BOOL v6 = "cp-866";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 42;
  BOOL v6 = "cp874";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 34;
  BOOL v6 = "cp932";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 21;
  BOOL v6 = "cp950";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 20;
  BOOL v6 = "csbig5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 13;
  BOOL v6 = "cseucjpkdfmtjapanese";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 10;
  BOOL v6 = "cseuckr";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "csgb2312";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "csibm852";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 39;
  BOOL v6 = "csibm866";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 42;
  BOOL v6 = "csiso2022jp";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 12;
  BOOL v6 = "csiso2022kr";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 44;
  BOOL v6 = "csiso58gb231280";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "csiso88598i";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 37;
  BOOL v6 = "csisolatin1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "csisolatin2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "csisolatin3";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "csisolatin4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "csisolatin5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "csisolatin6";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "csisolatinarabic";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "csisolatincyrillic";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "csisolatingreek";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "csisolatinhebrew";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "csksc56011987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "csmacintosh";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 53;
  BOOL v6 = "csn-369103";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 40;
  BOOL v6 = "csshiftjis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "csunicode";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "csunicode11";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "csunicode11utf7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "csunicodeascii";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "csunicodelatin1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "cyrillic";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "ecma-114";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "ecma-118";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "elot_928";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "euc";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 18;
  BOOL v6 = "euc-cn";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 15;
  BOOL v6 = "euc-dec";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 18;
  BOOL v6 = "euc-jp";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 10;
  BOOL v6 = "euc-kr";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "eucgb2312_cn";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "gb";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "gb18030";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 46;
  BOOL v6 = "gb2132";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "gb2312";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "gb_2312-80";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "gbk";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 45;
  BOOL v6 = "greek";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "greek8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "hebrew";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "htchanakya";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 56;
  BOOL v6 = "hz-gb-2312";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 62;
  BOOL v6 = "ibm819";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "ibm852";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 39;
  BOOL v6 = "ibm874";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 34;
  BOOL v6 = "iso-10646";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "iso-10646-j-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "iso-10646-ucs-2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 17;
  BOOL v6 = "iso-10646-ucs-4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 59;
  BOOL v6 = "iso-10646-ucs-basic";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "iso-10646-unicode-latin1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "iso-2022-cn";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 48;
  BOOL v6 = "iso-2022-jp";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 12;
  BOOL v6 = "iso-2022-kr";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 44;
  BOOL v6 = "iso-8559-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso-874";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 34;
  BOOL v6 = "iso-8858-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso-8859-0";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 30;
  BOOL v6 = "iso-8859-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso-8859-10";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "iso-8859-11";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 33;
  BOOL v6 = "iso-8859-13";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 43;
  BOOL v6 = "iso-8859-15";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 30;
  BOOL v6 = "iso-8859-2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "iso-8859-3";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "iso-8859-4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "iso-8859-5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "iso-8859-6";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "iso-8859-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "iso-8859-8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "iso-8859-8-i";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 37;
  BOOL v6 = "iso-8859-9";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "iso-9959-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso-ir-100";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso-ir-101";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "iso-ir-109";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "iso-ir-110";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "iso-ir-126";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "iso-ir-127";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "iso-ir-138";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "iso-ir-144";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "iso-ir-148";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "iso-ir-149";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "iso-ir-157";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "iso-ir-58";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "iso-latin-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso_2022-cn";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 48;
  BOOL v6 = "iso_2022-kr";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 44;
  BOOL v6 = "iso_8859-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso_8859-10:1992";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "iso_8859-11";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 33;
  BOOL v6 = "iso_8859-13";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 43;
  BOOL v6 = "iso_8859-15";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 30;
  BOOL v6 = "iso_8859-1:1987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "iso_8859-2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "iso_8859-2:1987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "iso_8859-3";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "iso_8859-3:1988";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "iso_8859-4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "iso_8859-4:1988";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "iso_8859-5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "iso_8859-5:1988";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 4;
  BOOL v6 = "iso_8859-6";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "iso_8859-6:1987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 5;
  BOOL v6 = "iso_8859-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "iso_8859-7:1987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "iso_8859-8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "iso_8859-8:1988:";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 7;
  BOOL v6 = "iso_8859-9";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "iso_8859-9:1989";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "jagran";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 52;
  BOOL v6 = "jis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 12;
  BOOL v6 = "koi8-cs";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 40;
  BOOL v6 = "koi8-r";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 25;
  BOOL v6 = "koi8-ru";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 28;
  BOOL v6 = "koi8-u";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 28;
  BOOL v6 = "koi8r";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 25;
  BOOL v6 = "koi8u";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 28;
  BOOL v6 = "korean";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "ks-c-5601";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "ks-c-5601-1987";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "ks_c_5601-1989";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "ksc";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 16;
  BOOL v6 = "l1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "l2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "l3";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "l4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "l5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "l6";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "latin-1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "latin1";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "latin2";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 1;
  BOOL v6 = "latin3";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 2;
  BOOL v6 = "latin4";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 3;
  BOOL v6 = "latin5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 8;
  BOOL v6 = "latin6";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 9;
  BOOL v6 = "mac";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 53;
  BOOL v6 = "macintosh";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 53;
  BOOL v6 = "macintosh-roman";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 53;
  BOOL v6 = "ms932";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 21;
  BOOL v6 = "ms_kanji";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 21;
  BOOL v6 = "shift-jis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "shift_jis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "sjis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "sjs";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "sun_eu_greek";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 6;
  BOOL v6 = "tab";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 51;
  BOOL v6 = "tam";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 50;
  BOOL v6 = "tis-620";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 33;
  BOOL v6 = "tscii";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 49;
  BOOL v6 = "un";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 23;
  BOOL v6 = "unicode";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 17;
  BOOL v6 = "unicode-1-1-utf-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "unicode-1-1-utf-8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 22;
  BOOL v6 = "unicode-2-0-utf-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "unknown";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 23;
  BOOL v6 = "us";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "us-ascii";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 0;
  BOOL v6 = "utf-16be";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "utf-16le";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 58;
  BOOL v6 = "utf-32be";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 59;
  BOOL v6 = "utf-32le";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 60;
  BOOL v6 = "utf-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "utf-8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 22;
  BOOL v6 = "utf7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "utf8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 22;
  BOOL v6 = "visual";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 38;
  BOOL v6 = "win-1250";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 29;
  BOOL v6 = "win-1251";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 26;
  BOOL v6 = "window-874";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 34;
  BOOL v6 = "windows-1250";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 29;
  BOOL v6 = "windows-1251";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 26;
  BOOL v6 = "windows-1252";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 27;
  BOOL v6 = "windows-1253";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 41;
  BOOL v6 = "windows-1254";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 31;
  BOOL v6 = "windows-1255";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 36;
  BOOL v6 = "windows-1256";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 35;
  BOOL v6 = "windows-1257";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 32;
  BOOL v6 = "windows-31j";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 21;
  BOOL v6 = "windows-874";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 34;
  BOOL v6 = "windows-936";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 45;
  BOOL v6 = "x-big5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 13;
  BOOL v6 = "x-binaryenc";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 61;
  BOOL v6 = "x-cp1250";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 29;
  BOOL v6 = "x-cp1251";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 26;
  BOOL v6 = "x-cp1252";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 27;
  BOOL v6 = "x-cp1253";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 41;
  BOOL v6 = "x-cp1254";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 31;
  BOOL v6 = "x-cp1255";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 36;
  BOOL v6 = "x-cp1256";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 35;
  BOOL v6 = "x-cp1257";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 32;
  BOOL v6 = "x-euc-jp";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 10;
  BOOL v6 = "x-euc-tw";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 19;
  BOOL v6 = "x-gbk";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 45;
  BOOL v6 = "x-iso-10646-ucs-2-be";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 57;
  BOOL v6 = "x-iso-10646-ucs-2-le";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 58;
  BOOL v6 = "x-iso-10646-ucs-4-be";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 59;
  BOOL v6 = "x-iso-10646-ucs-4-le";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 60;
  BOOL v6 = "x-jis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 12;
  BOOL v6 = "x-mac-roman";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 53;
  BOOL v6 = "x-shift_jis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "x-sjis";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 11;
  BOOL v6 = "x-unicode-2-0-utf-7";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 54;
  BOOL v6 = "x-utf8utf8";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 63;
  BOOL v6 = "x-x-big5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 13;
  BOOL v6 = "zh_cn.euc";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 14;
  BOOL v6 = "zh_tw-big5";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 13;
  BOOL v6 = "zh_tw-euc";
  *(_DWORD *)sub_10039BE34(&xmmword_100743950, &v6) = 19;
  BOOL v6 = "";
  sub_10039C764(&xmmword_100743950, &v6);
}

uint64_t **sub_10039BE34(void *a1, char **a2)
{
  uint64_t v4 = sub_10039BF64(a1, a2);
  if (!v4)
  {
    unint64_t v5 = operator new(0x20uLL);
    v5[2] = *a2;
    *((_DWORD *)v5 + 6) = 0;
    uint64_t v4 = sub_10039BEF0(a1, (uint64_t)v5);
  }
  return v4 + 3;
}

void sub_10039BE90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10039BEA4(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t **sub_10039BEF0(void *a1, uint64_t a2)
{
  unsigned int v2 = (void *)a2;
  uint64_t v4 = (char **)(a2 + 16);
  unint64_t v5 = sub_10039C06C((uint64_t)(a1 + 3), *(unsigned char **)(a2 + 16));
  *(v4 - 1) = (char *)v5;
  BOOL v6 = sub_10039C200((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  sub_10039C358(a1, v2);
  return (uint64_t **)v2;
}

uint64_t **sub_10039BF64(void *a1, char **a2)
{
  unint64_t v4 = sub_10039C06C((uint64_t)(a1 + 3), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unsigned int v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (sub_10039C0F8(v12, (char *)v11[2], *a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unsigned int v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_10039C06C(uint64_t a1, unsigned char *a2)
{
  char v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = a2 + 1;
    while ((v2 & 0x80) == 0)
    {
      if ((_DefaultRuneLocale.__runetype[v2] & 0x500) != 0) {
        goto LABEL_5;
      }
LABEL_6:
      int v5 = *v4++;
      char v2 = v5;
      if (!v5) {
        return v3;
      }
    }
    if (!__maskrune(v2, 0x500uLL)) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v3 = 5 * v3 + __tolower((char)*(v4 - 1));
    goto LABEL_6;
  }
  return 0;
}

BOOL sub_10039C0F8(uint64_t a1, char *a2, char *a3)
{
  do
  {
    while (1)
    {
      __darwin_ct_rune_t v5 = *a2++;
      if (v5 < 0)
      {
        if (__maskrune(v5, 0x500uLL)) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      if ((_DefaultRuneLocale.__runetype[v5] & 0x500) != 0) {
        break;
      }
LABEL_5:
      if (!*(a2 - 1)) {
        goto LABEL_6;
      }
    }
    do
    {
LABEL_6:
      __darwin_ct_rune_t v6 = *a3++;
      if (v6 < 0)
      {
        if (__maskrune(v6, 0x500uLL)) {
          break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v6] & 0x500) != 0)
      {
        break;
      }
    }
    while (*(a3 - 1));
    __darwin_ct_rune_t v7 = __tolower(*(a2 - 1));
    __darwin_ct_rune_t v8 = __tolower(*(a3 - 1));
  }
  while (v7 == v8 && *(a2 - 1));
  return v7 == v8;
}

void sub_10039C1CC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t **sub_10039C200(uint64_t a1, unint64_t a2, char **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    int v10 = *(uint64_t ****)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == a2)
        {
          if (sub_10039C0F8(a1 + 32, (char *)i[2], *a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10039C410(a1, v18);
  }
  return 0;
}

void *sub_10039C358(void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  __darwin_ct_rune_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *__darwin_ct_rune_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    __darwin_ct_rune_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void sub_10039C410(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10039C500(a1, prime);
    }
  }
}

void sub_10039C500(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10039C1CC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unsigned int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unsigned int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unsigned int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unsigned int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t **sub_10039C65C(void *a1, char **a2)
{
  unint64_t v4 = sub_10039C06C((uint64_t)(a1 + 3), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unsigned int v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (sub_10039C0F8(v12, (char *)v11[2], *a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unsigned int v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_10039C764(void *a1, char **a2)
{
  uint64_t result = (uint64_t *)sub_10039BF64(a1, a2);
  if (result)
  {
    sub_10039C79C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_10039C79C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10039C7E0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_10039C7E0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

const char *LanguageName(unsigned int a1)
{
  if (a1 > 0xA0) {
    return "invalid_language";
  }
  else {
    return off_1006E9568[4 * a1];
  }
}

id IMAP2EmailCore_ECEmailAddressesFromHeader(void *a1)
{
  id v1 = a1;
  if (qword_100743990[0] != -1) {
    dispatch_once(qword_100743990, &stru_1006EA9C8);
  }
  if (!qword_100743988) {
    sub_10039CB2C();
  }
  uint64_t v2 = [ (id) qword_100743988 addressListFromHeaderValue:v1];
  int8x8_t v3 = v2;
  if (v2)
  {
    unint64_t v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v2 count]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "emailAddressValue", (void)v12);
          if (v10) {
            [v4 addObject:v10];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }
  }
  else
  {
    unint64_t v4 = &__NSArray0__struct;
  }

  return v4;
}

id IMAP2EmailCore_ECEmailAddress_groupList(void *a1)
{
  return _[a1 groupList];
}

id IMAP2EmailCore_ECEmailAddress_displayName(void *a1)
{
  return _[a1 displayName];
}

id IMAP2EmailCore_ECEmailAddress_localPart(void *a1)
{
  return _[a1 localPart];
}

id IMAP2EmailCore_ECEmailAddress_domain(void *a1)
{
  return _[a1 domain];
}

void sub_10039CB04(id a1)
{
  qword_100743988 = (uint64_t)NSClassFromString(@"ECEmailAddressLists");
}

void sub_10039CB2C()
{
}

uint64_t BodyStructure.isAttachment.getter()
{
  sub_10013AE3C(v0, (uint64_t)v41);
  int v1 = sub_10013AEAC((uint64_t)v41);
  uint64_t v2 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v41);
  if (v1 == 1)
  {
    long long v3 = *(_OWORD *)v2;
    long long v4 = *(_OWORD *)(v2 + 16);
    long long v5 = *(_OWORD *)(v2 + 48);
    long long v44 = *(_OWORD *)(v2 + 32);
    long long v45 = v5;
    long long v42 = v3;
    long long v43 = v4;
    long long v6 = *(_OWORD *)(v2 + 64);
    long long v7 = *(_OWORD *)(v2 + 80);
    long long v8 = *(_OWORD *)(v2 + 96);
    *(void *)&long long v49 = *(void *)(v2 + 112);
    long long v47 = v7;
    long long v48 = v8;
    long long v46 = v6;
    sub_10001FDF0((uint64_t)&v43 + 8, (uint64_t)v53, &qword_100713A40);
    sub_10001FDF0((uint64_t)v53, (uint64_t)&v54, &qword_100713A40);
    if (*((void *)&v54 + 1))
    {
      long long v62 = v56;
      long long v63 = v57;
      long long v64 = v58;
      long long v65 = v59;
      long long v9 = v54;
      long long v10 = v55;
      unint64_t v11 = (char *)&v61 + 8;
      goto LABEL_6;
    }
LABEL_16:
    char v30 = 0;
    return v30 & 1;
  }
  long long v12 = *(_OWORD *)v2;
  long long v13 = *(_OWORD *)(v2 + 32);
  long long v43 = *(_OWORD *)(v2 + 16);
  long long v44 = v13;
  long long v42 = v12;
  long long v14 = *(_OWORD *)(v2 + 48);
  long long v15 = *(_OWORD *)(v2 + 64);
  long long v16 = *(_OWORD *)(v2 + 96);
  long long v47 = *(_OWORD *)(v2 + 80);
  long long v48 = v16;
  long long v45 = v14;
  long long v46 = v15;
  long long v17 = *(_OWORD *)(v2 + 112);
  long long v18 = *(_OWORD *)(v2 + 128);
  long long v19 = *(_OWORD *)(v2 + 160);
  long long v51 = *(_OWORD *)(v2 + 144);
  long long v52 = v19;
  long long v49 = v17;
  long long v50 = v18;
  sub_10001FDF0((uint64_t)&v47 + 8, (uint64_t)v53, &qword_100713A50);
  sub_10001FDF0((uint64_t)v53, (uint64_t)&v54, &qword_100713A50);
  if (*((void *)&v54 + 1) == 1) {
    goto LABEL_16;
  }
  long long v62 = v56;
  long long v63 = v57;
  long long v64 = v58;
  *(void *)&long long v65 = v59;
  long long v9 = v54;
  long long v10 = v55;
  unint64_t v11 = (char *)&v61;
LABEL_6:
  long long v60 = v9;
  long long v61 = v10;
  sub_10001FDF0((uint64_t)v11, (uint64_t)v66, &qword_100713A48);
  sub_10001FDF0((uint64_t)v66, (uint64_t)&v67, &qword_100713A48);
  unint64_t v20 = v68;
  if (v68 < 2) {
    goto LABEL_16;
  }
  uint64_t v21 = v67;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v22 = BodyStructure.DispositionKind.attachment.unsafeMutableAddressor();
  if ((*v22 != v21 || v20 != v22[1]) && (sub_1005E3290() & 1) == 0)
  {
    int v32 = BodyStructure.DispositionKind.inline.unsafeMutableAddressor();
    if ((*v32 != v21 || v20 != v32[1]) && (sub_1005E3290() & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
    uint64_t v33 = BodyStructure.mediaType.getter();
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v36 = Media.TopLevelType.text.unsafeMutableAddressor();
    if (*v36 == v33 && v36[1] == v35)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v39 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    char v30 = 0;
    return v30 & 1;
  }
LABEL_10:
  uint64_t v23 = BodyStructure.mediaType.getter();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = Media.TopLevelType.multipart.unsafeMutableAddressor();
  if ((*v26 != v23 || v26[1] != v25) && (sub_1005E3290() & 1) == 0)
  {
    int v37 = Media.TopLevelType.application.unsafeMutableAddressor();
    if (*v37 == v23 && v37[1] == v25)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v38 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        char v30 = 1;
        return v30 & 1;
      }
    }
    BodyStructure.mediaType.getter();
    swift_bridgeObjectRelease();
    sub_1005E1CB0();
    swift_bridgeObjectRelease();
    v69._countAndFlagsBits = 0x2D3773636B70;
    v69._object = (void *)0xE600000000000000;
    if (!sub_1005E1EF0(v69))
    {
      v70._countAndFlagsBits = 0x2D3773636B702D78;
      v70._object = (void *)0xE800000000000000;
      BOOL v40 = sub_1005E1EF0(v70);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v30 = !v40;
      return v30 & 1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_36:
    swift_bridgeObjectRelease();
    char v30 = 0;
    return v30 & 1;
  }
  swift_bridgeObjectRelease();
  BodyStructure.mediaType.getter();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1005E1CB0();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  if (v27 == 0x756F64656C707061 && v29 == 0xEB00000000656C62)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v30 = 1;
  }
  else
  {
    char v30 = sub_1005E3290();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  return v30 & 1;
}

uint64_t sub_10039D0BC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_10001FDF0(a5, (uint64_t)v19, &qword_100713A60);
  char v9 = 0;
  if (!a4 || (a3 & 1) != 0) {
    return v9 & 1;
  }
  if (!a1)
  {
    uint64_t v11 = v19[0];
    uint64_t v12 = v19[1];
    char v13 = v20;
    unsigned __int8 v16 = v21;
    sub_10001FDF0(a5, (uint64_t)v22, &qword_100713A60);
    if (!*((void *)&v23 + 1)) {
      goto LABEL_16;
    }
    long long v24 = v22[0];
    long long v25 = v22[1];
    long long v26 = v23;
    sub_10039DF8C((uint64_t)&v24, (uint64_t)v27);
    uint64_t result = sub_10039DF8C((uint64_t)v27, (uint64_t)v28);
    if ((v29 & 0xF0) != 0x50)
    {
      unsigned __int8 v14 = v16;
      if (v16 <= 0xFu) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
    v29 &= 0xFu;
    sub_10001FDF0((uint64_t)v28, (uint64_t)v30, &qword_100713A68);
LABEL_25:
    char v9 = 0;
    return v9 & 1;
  }
  if (a1 != 1) {
    goto LABEL_25;
  }
  uint64_t result = sub_10001FDF0(a5, (uint64_t)&v24, &qword_100713A60);
  if (!*((void *)&v26 + 1))
  {
LABEL_16:
    char v9 = 1;
    return v9 & 1;
  }
  uint64_t v12 = *((void *)&v24 + 1);
  uint64_t v11 = v24;
  char v13 = v25;
  unsigned __int8 v14 = v26;
  if (v26 <= 0xFu)
  {
LABEL_7:
    char v9 = (v13 & 0x80) == 0 && v11 == 1;
    return v9 & 1;
  }
LABEL_18:
  int v17 = v14 & 0xF0;
  char v9 = 1;
  if (v17 != 16 || (v13 & 1) != 0) {
    return v9 & 1;
  }
  if (v11) {
    unint64_t v18 = v12 - v11;
  }
  else {
    unint64_t v18 = 0;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    if ((sub_1003E8AE0((unint64_t)"pkcs7-", 6, 2, 0, v18, v11, v12) & 1) == 0)
    {
      char v9 = sub_1003E8AE0((unint64_t)"x-pkcs7-", 8, 2, 0, v18, v11, v12) ^ 1;
      return v9 & 1;
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

unint64_t BodyStructure.makeAttachmentFilenames(cache:)(uint64_t *a1)
{
  unint64_t v3 = sub_10039D2E4((uint64_t)_swiftEmptyArrayStorage);
  sub_10039D508((int64_t *)&v3, (uint64_t)_swiftEmptyArrayStorage, a1);
  return v3;
}

unint64_t sub_10039D2E4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000566C(&qword_100713A58);
  uint64_t v2 = (void *)sub_1005E2FF0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1003DEF8C(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    long long v10 = (void *)(v2[7] + 16 * result);
    *long long v10 = v6;
    v10[1] = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10039D3FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000566C(&qword_100713A70);
  uint64_t v2 = (void *)sub_1005E2FF0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = (unint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *(v4 - 1);
    unint64_t v5 = *v4;
    swift_bridgeObjectRetain();
    sub_10000CF8C(v5);
    unint64_t result = sub_1003DEF8C(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10039D508(int64_t *a1, uint64_t a2, uint64_t *a3)
{
  sub_10013AE3C(v3, (uint64_t)v43);
  sub_10013AE3C((uint64_t)v43, (uint64_t)v63);
  sub_10013AE3C(v3, (uint64_t)v44);
  if (sub_10013AEAC((uint64_t)v44) == 1)
  {
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v44);
    sub_10013AE3C((uint64_t)v63, (uint64_t)v41);
    uint64_t result = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v41);
    uint64_t v8 = *(void *)(*(void *)result + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)result + 32;
      sub_10013AF38(v3, sub_100136870);
      swift_bridgeObjectRetain();
      Swift::Int v10 = 0;
      do
      {
        sub_10013AE3C(v9, (uint64_t)&v46);
        ++v10;
        sub_10013AF38((uint64_t)&v46, sub_100136870);
        v11.array._rawValue = SectionSpecifier.Part.appending(_:)(v10).array._rawValue;
        sub_10039D508(a1, v11.array._rawValue, a3);
        swift_bridgeObjectRelease();
        sub_10013AF38((uint64_t)&v46, sub_100061440);
        v9 += 184;
      }
      while (v8 != v10);
      swift_bridgeObjectRelease();
      return sub_10013AF38(v3, sub_100061440);
    }
  }
  else
  {
    uint64_t v12 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v44);
    long long v14 = v12[1];
    long long v13 = v12[2];
    v41[0] = *v12;
    v41[1] = v14;
    v41[2] = v13;
    long long v15 = v12[6];
    long long v17 = v12[3];
    long long v16 = v12[4];
    v42[0] = v12[5];
    v42[1] = v15;
    v41[3] = v17;
    v41[4] = v16;
    long long v18 = v12[10];
    long long v20 = v12[7];
    long long v19 = v12[8];
    v42[4] = v12[9];
    v42[5] = v18;
    v42[2] = v20;
    v42[3] = v19;
    sub_10001FDF0((uint64_t)v42 + 8, (uint64_t)v45, &qword_100713A50);
    sub_10001FDF0((uint64_t)v45, (uint64_t)v48, &qword_100713A50);
    if (*((void *)&v48[0] + 1) != 1)
    {
      v51[1] = v48[2];
      v51[2] = v48[3];
      v51[3] = v48[4];
      uint64_t v52 = v49;
      long long v50 = v48[0];
      v51[0] = v48[1];
      sub_10001FDF0((uint64_t)v51, (uint64_t)v53, &qword_100713A48);
      sub_10001FDF0((uint64_t)v53, (uint64_t)v54, &qword_100713A48);
      if (*((void *)&v54[0] + 1) != 1)
      {
        v56[1] = v54[1];
        v56[2] = v54[2];
        v56[3] = v54[3];
        uint64_t v57 = v55;
        v56[0] = v54[0];
        sub_10001FDF0((uint64_t)v56, (uint64_t)v58, &qword_100713A78);
        sub_10001FDF0((uint64_t)v58, (uint64_t)v59, &qword_100713A78);
        if (v60)
        {
          uint64_t v21 = v61;
          uint64_t v22 = v62;
          uint64_t v47 = 0;
          int64_t v46 = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          sub_10013AF38(v3, sub_100136870);
          uint64_t v23 = swift_retain();
          sub_1003DA6A4(v23, v21, v22, &v46, a3, v24);
          swift_release();
          swift_release();
          swift_release();
          sub_10013AF38(v3, sub_100061440);
          uint64_t v25 = v47;
          if (v47)
          {
            uint64_t v26 = v46;
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            int64_t v46 = *a1;
            *a1 = 0x8000000000000000;
            sub_1003D6BEC(v26, v25, a2, isUniquelyReferenced_nonNull_native);
            *a1 = v46;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    sub_10013AE3C((uint64_t)v63, (uint64_t)&v46);
    uint64_t v28 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)&v46);
    long long v29 = v28[6];
    long long v30 = v28[7];
    long long v31 = v28[8];
    long long v32 = v28[9];
    long long v33 = v28[10];
    long long v34 = v28[2];
    long long v35 = v28[3];
    long long v36 = v28[4];
    long long v37 = v28[5];
    long long v38 = v28[1];
    v40[0] = *v28;
    v40[1] = v38;
    v40[2] = v34;
    v40[3] = v35;
    v40[4] = v36;
    v40[5] = v37;
    v40[6] = v29;
    v40[7] = v30;
    v40[8] = v31;
    v40[9] = v32;
    v40[10] = v33;
    sub_10013AE3C((uint64_t)v63, (uint64_t)&v46);
    uint64_t v39 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)&v46);
    sub_10022C168(v39);
    return sub_1002E17E0((uint64_t)v40);
  }
  return result;
}

void *Message.makeAttachmentFilenames(cache:)(void *a1)
{
  uint64_t v2 = sub_1003D2198(v1, (void *(*)(uint64_t *__return_ptr, void))sub_10039DC2C, a1);
  if (v2[2])
  {
    sub_10000566C(&qword_100713A58);
    uint64_t v3 = (void *)sub_1005E2FF0();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  unint64_t v5 = v3;
  sub_10039DCF0(v2, 1, &v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10039D9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v39 = _swiftEmptyArrayStorage;
  long long v33 = &v39;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  sub_1003B430C(3, 0, 0, (uint64_t (*)(_OWORD *))sub_10039DFE8, (uint64_t)v32, (uint64_t)UInt32.init(_:), 0, a1, a2, a3, a4);
  uint64_t v8 = v39;
  uint64_t v9 = v39[2];
  if (v9)
  {
    long long v30 = a6;
    swift_bridgeObjectRetain();
    Swift::Int v10 = (unsigned __int8 *)(v8 + 9);
    long long v31 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v16 = *((void *)v10 - 5);
      uint64_t v17 = *((void *)v10 - 4);
      uint64_t v19 = *((void *)v10 - 3);
      uint64_t v18 = *((void *)v10 - 2);
      uint64_t v20 = *((void *)v10 - 1);
      int v22 = *v10;
      v10 += 48;
      char v21 = v22;
      switch(v22)
      {
        case 1:
        case 3:
          break;
        case 2:
          uint64_t v23 = v18;
          uint64_t v24 = v20;
          if (v20) {
            goto LABEL_10;
          }
          uint64_t v11 = v17;
          uint64_t v12 = v19;
          uint64_t v13 = v18;
          uint64_t v14 = 0;
          char v15 = 2;
          goto LABEL_4;
        default:
          uint64_t v23 = v17;
          uint64_t v24 = v19;
          if (v19)
          {
LABEL_10:
            swift_bridgeObjectRetain();
            sub_10039E02C(v17, v19, v18, v20, v21);
            uint64_t v25 = v31;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v25 = sub_1003EF590(0, v31[2] + 1, 1, v31);
            }
            unint64_t v27 = v25[2];
            unint64_t v26 = v25[3];
            if (v27 >= v26 >> 1) {
              uint64_t v25 = sub_1003EF590((void *)(v26 > 1), v27 + 1, 1, v25);
            }
            v25[2] = v27 + 1;
            long long v31 = v25;
            uint64_t v28 = &v25[3 * v27];
            v28[4] = v16;
            v28[5] = v23;
            v28[6] = v24;
          }
          else
          {
            uint64_t v11 = v17;
            uint64_t v12 = 0;
            uint64_t v13 = v18;
            uint64_t v14 = v20;
            char v15 = 0;
LABEL_4:
            sub_10039E00C(v11, v12, v13, v14, v15);
          }
          break;
      }
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a6 = v30;
    uint64_t v7 = v31;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v7;
  return result;
}

uint64_t sub_10039DC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_10039D9F4(a1, a2, a3, a4, v5, a5);
}

uint64_t variable initialization expression of UnsafeExtractedAttachment.encoding()
{
  return 5;
}

double variable initialization expression of UnsafeExtractedAttachment.mediaType@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = -1;
  return result;
}

uint64_t variable initialization expression of IndexableMessageInfo.date@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1005E0970();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of IndexableMessageInfo.priority()
{
  return 256;
}

uint64_t variable initialization expression of IndexableMessageInfo.content()
{
  return 0;
}

void *sub_10039DCF0(void *result, char a2, void *a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = result[4];
    uint64_t v43 = result[5];
    uint64_t v8 = result[6];
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1003DEF8C(v7);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v15 = v10;
    if (v9[3] < v14)
    {
      sub_1003D65D8(v14, a2 & 1);
      unint64_t v16 = sub_1003DEF8C(v7);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_28:
        double result = (void *)sub_1005E3380();
        __break(1u);
        return result;
      }
      unint64_t v11 = v16;
      uint64_t v18 = (void *)*a3;
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v19 = (void *)(v18[7] + 16 * v11);
      swift_bridgeObjectRelease();
      *uint64_t v19 = v43;
      v19[1] = v8;
      uint64_t v20 = v3 - 1;
      if (v3 == 1) {
        return (void *)swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = v6 + 9; ; i += 3)
      {
        uint64_t v28 = *(i - 2);
        uint64_t v27 = *(i - 1);
        uint64_t v29 = *i;
        long long v30 = (void *)*a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v32 = sub_1003DEF8C(v28);
        uint64_t v33 = v30[2];
        BOOL v34 = (v31 & 1) == 0;
        uint64_t v35 = v33 + v34;
        if (__OFADD__(v33, v34)) {
          break;
        }
        char v36 = v31;
        if (v30[3] < v35)
        {
          sub_1003D65D8(v35, 1);
          unint64_t v37 = sub_1003DEF8C(v28);
          if ((v36 & 1) != (v38 & 1)) {
            goto LABEL_28;
          }
          unint64_t v32 = v37;
        }
        uint64_t v39 = (void *)*a3;
        if (v36)
        {
          swift_bridgeObjectRelease();
          unint64_t v26 = (void *)(v39[7] + 16 * v32);
          swift_bridgeObjectRelease();
          *unint64_t v26 = v27;
          v26[1] = v29;
        }
        else
        {
          v39[(v32 >> 6) + 8] |= 1 << v32;
          *(void *)(v39[6] + 8 * v32) = v28;
          BOOL v40 = (void *)(v39[7] + 16 * v32);
          *BOOL v40 = v27;
          v40[1] = v29;
          uint64_t v41 = v39[2];
          BOOL v23 = __OFADD__(v41, 1);
          uint64_t v42 = v41 + 1;
          if (v23) {
            goto LABEL_27;
          }
          v39[2] = v42;
        }
        if (!--v20) {
          return (void *)swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      uint64_t v18 = (void *)*a3;
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1003D6EB8();
      uint64_t v18 = (void *)*a3;
      if (v15) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v18[(v11 >> 6) + 8] |= 1 << v11;
    *(void *)(v18[6] + 8 * v11) = v7;
    char v21 = (void *)(v18[7] + 16 * v11);
    *char v21 = v43;
    v21[1] = v8;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v18[2] = v24;
    uint64_t v20 = v3 - 1;
    if (v3 == 1) {
      return (void *)swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_10039DF8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10039DFE8(uint64_t *a1)
{
  return sub_1003E43A8(a1, *(char ***)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(uint64_t **)(v1 + 56));
}

uint64_t sub_10039E00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10039E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5 || a5 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void type metadata accessor for CompactEncDet_Encoding(uint64_t a1)
{
}

void type metadata accessor for UErrorCode(uint64_t a1)
{
}

uint64_t *sub_10039E074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a3) {
    uint64_t v7 = a3 + a2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a3) {
    uint64_t v8 = a3 + a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a5)
  {
    uint64_t v9 = a6 - (void)a5;
    char v10 = a5;
  }
  else
  {
    char v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t result = sub_10039E0E8(v10, v9, v8, v7, 1, &v12, (uint64_t)&v13);
  if (!v6) {
    return (uint64_t *)v13;
  }
  return result;
}

uint64_t *sub_10039E0E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  if (a3)
  {
    uint64_t v11 = a4 - a3;
    uint64_t result = sub_10039E1BC(a3, a4 - a3, a1, a2, a5 & 1, (uint64_t)&v17);
    if (!v7)
    {
      uint64_t v13 = v17;
      if (v17 < 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
LABEL_6:
    *a6 = v16;
    return result;
  }
  uint64_t result = sub_10039E1BC(0, 0, a1, a2, a5 & 1, (uint64_t)&v17);
  if (v7) {
    goto LABEL_6;
  }
  uint64_t v11 = 0;
  uint64_t v13 = v17;
  if (v17 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
LABEL_8:
  if (v11 < v13) {
    goto LABEL_13;
  }
  char v14 = v18;
  uint64_t v15 = a3 + v13;
  if (!a3) {
    uint64_t v15 = 0;
  }
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = v15;
  *(unsigned char *)(a7 + 16) = v14;
  return result;
}

uint64_t *sub_10039E1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result = sub_10039E298(a3, a4, a5, a1, a2);
  *(void *)a6 = 0;
  *(unsigned char *)(a6 + 8) = 0;
  return result;
}

uint64_t *sub_10039E298(uint64_t *result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = result;
  if (a2 < 1 || (*(unsigned char *)(v5 + 1) & 1) != 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    if (a2 > 0) {
      goto LABEL_59;
    }
    return result;
  }
  uint64_t v9 = 0;
  uint64_t v12 = a5 - 3;
  uint64_t v13 = a2 - 2;
  uint64_t result = &qword_100713000;
  char v14 = &qword_100713000;
  uint64_t v15 = &qword_100713000;
  uint64_t v16 = &qword_100713000;
  while (1)
  {
    while (1)
    {
      int v18 = *((char *)v8 + v9);
      if ((v18 & 0x80000000) == 0)
      {
        if (result[317] != -1)
        {
          uint64_t v43 = v12;
          uint64_t v45 = a5;
          uint64_t v35 = v15;
          swift_once();
          uint64_t v16 = &qword_100713000;
          uint64_t v15 = v35;
          char v14 = &qword_100713000;
          uint64_t result = &qword_100713000;
          uint64_t v12 = v43;
          a5 = v45;
        }
        uint64_t v19 = v14[338];
        if (*(void *)(v19 + 16) <= (unint64_t)v18) {
          goto LABEL_79;
        }
        int v20 = *(char *)(v19 + v18 + 32);
        if ((v20 & 0x80000000) == 0) {
          break;
        }
      }
      if ((a3 & 1) == 0)
      {
        char v36 = 1;
        goto LABEL_57;
      }
      if (++v9 >= a2) {
        goto LABEL_58;
      }
    }
    if (v15[318] != -1)
    {
      uint64_t v44 = v12;
      uint64_t v46 = a5;
      swift_once();
      uint64_t v16 = &qword_100713000;
      uint64_t v15 = &qword_100713000;
      char v14 = &qword_100713000;
      uint64_t result = &qword_100713000;
      uint64_t v12 = v44;
      a5 = v46;
    }
    int v21 = *((unsigned __int8 *)v16 + 2712);
    uint64_t v22 = *(void *)(v5 + 24);
    if (v18 != v21) {
      break;
    }
    BOOL v17 = __OFADD__(v22++, 1);
    if (v17) {
      goto LABEL_84;
    }
    *(void *)(v5 + 24) = v22;
LABEL_24:
    int v23 = *(_DWORD *)(v5 + 32);
    int v24 = v20 + (v23 << 6);
    if (__CFADD__(v20, v23 << 6)) {
      goto LABEL_81;
    }
    *(_DWORD *)(v5 + 32) = v24;
    uint64_t v25 = *(void *)(v5 + 16);
    BOOL v17 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v17) {
      goto LABEL_82;
    }
    *(void *)(v5 + 16) = v26;
    if (v26 == 4)
    {
      if (a5 < 3 || (uint64_t v27 = *(void *)(v5 + 8), v12 < v27))
      {
        char v36 = 3;
        goto LABEL_57;
      }
      if (v22 == 3) {
        goto LABEL_56;
      }
      BOOL v28 = v9 + 1 >= a2;
      if (v9 + 1 < a2 && v22 >= 1)
      {
        uint64_t v29 = v14[338];
        uint64_t v30 = v9;
        do
        {
          unint64_t v31 = *((unsigned __int8 *)v8 + v30 + 1);
          if (v31 != v21)
          {
            if ((a3 & 1) == 0) {
              goto LABEL_49;
            }
            if ((v31 & 0x80) == 0)
            {
              if (*(void *)(v29 + 16) <= v31) {
                goto LABEL_80;
              }
              if ((*(char *)(v29 + 32 + v31) & 0x80000000) == 0)
              {
LABEL_49:
                BOOL v34 = (unsigned char *)(a4 + v27);
                *BOOL v34 = BYTE2(v24);
                v34[1] = BYTE1(v24);
                uint64_t v32 = v27 + 2;
                goto LABEL_50;
              }
            }
          }
          if (v13 == v30)
          {
            BOOL v28 = 1;
            goto LABEL_42;
          }
          ++v30;
        }
        while (v30 + 1 < a2);
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        return result;
      }
LABEL_42:
      *(unsigned char *)(a4 + v27) = BYTE2(v24);
      *(void *)(v5 + 8) = v27 + 1;
      if (!v28 || v22 <= 1)
      {
        *(unsigned char *)(a4 + v27 + 1) = BYTE1(v24);
        uint64_t v32 = v27 + 2;
        *(void *)(v5 + 8) = v27 + 2;
        if (v22 <= 0 || !v28)
        {
LABEL_50:
          *(unsigned char *)(a4 + v32) = v24;
          *(void *)(v5 + 8) = v32 + 1;
        }
      }
      *(void *)(v5 + 16) = 0;
      if (v22 >= 1 && (a3 & 1) == 0)
      {
        *(unsigned char *)(v5 + 1) = 1;
        uint64_t v10 = a2 - v9;
        if (a2 > v9) {
          goto LABEL_59;
        }
        return result;
      }
      *(void *)(v5 + 24) = 0;
    }
    BOOL v17 = __OFADD__(v9++, 1);
    if (v17) {
      goto LABEL_83;
    }
    if (v9 >= a2) {
      goto LABEL_58;
    }
  }
  if (v22 < 1 || (a3 & 1) != 0) {
    goto LABEL_24;
  }
LABEL_56:
  char v36 = 2;
LABEL_57:
  *(unsigned char *)uint64_t v5 = v36;
LABEL_58:
  uint64_t v10 = a2 - v9;
  if (a2 <= v9) {
    return result;
  }
LABEL_59:
  if (!*(unsigned char *)v5)
  {
    unint64_t v37 = (unsigned __int8 *)v8 + v9;
    char v38 = &qword_1007139E8;
    while (1)
    {
      unsigned int v40 = *v37++;
      unint64_t v39 = v40;
      if (a3)
      {
        if ((v39 & 0x80) != 0)
        {
          int v41 = 1;
        }
        else
        {
          if (qword_1007139E8 != -1)
          {
            uint64_t v42 = v38;
            uint64_t result = (uint64_t *)swift_once();
            char v38 = v42;
          }
          if (*((void *)off_100713A90 + 2) <= v39) {
            goto LABEL_78;
          }
          int v41 = *((char *)off_100713A90 + v39 + 32) < 0;
        }
      }
      else
      {
        int v41 = 0;
      }
      if (qword_1007139F0 != -1)
      {
        uint64_t result = (uint64_t *)swift_once();
        char v38 = &qword_1007139E8;
      }
      if (((v39 != byte_100713A98) & ~v41) != 0) {
        break;
      }
      if (!--v10) {
        return result;
      }
    }
    *(unsigned char *)uint64_t v5 = 4;
  }
  return result;
}

void sub_10039E6CC()
{
  off_100713A90 = &off_1006EAA68;
}

unint64_t sub_10039E6E0()
{
  if (sub_1005E3290())
  {
    unint64_t result = 10;
    goto LABEL_7;
  }
  unint64_t result = sub_1005E1A00();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t result = sub_100374D14(0x3DuLL, 0xE100000000000000);
  if ((result & 0x100000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((result & 0xFFFFFF80) != 0) {
    goto LABEL_10;
  }
  unint64_t result = sub_100374D14(0x3DuLL, 0xE100000000000000);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF00) == 0)
    {
LABEL_7:
      byte_100713A98 = result;
      return result;
    }
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_10039E774(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1)
  {
    unint64_t result = sub_10039E0E8(a1, a2 - (void)a1, a3, a4, a5 & 1, &v7, (uint64_t)&v8);
    if (v5) {
      return result;
    }
    return (uint64_t *)v8;
  }
  unint64_t result = sub_10039E0E8(0, 0, a3, a4, a5 & 1, &v7, (uint64_t)&v8);
  if (!v5) {
    return (uint64_t *)v8;
  }
  return result;
}

unint64_t sub_10039E7D4()
{
  unint64_t result = qword_100713AA0;
  if (!qword_100713AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713AA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base64.InvalidBase64Data()
{
  return &type metadata for Base64.InvalidBase64Data;
}

__n128 sub_10039E838@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10039E844(uint64_t a1)
{
  sub_100232248((void *)a1, &v19);
  sub_100232248(&v19, &v21);
  unint64_t v2 = v21;
  unint64_t v3 = v21 >> 62;
  if (v21 >> 62)
  {
    long long v4 = (void *)(v21 & 0x3FFFFFFFFFFFFFFFLL);
    v21 &= 0x3FFFFFFFFFFFFFFFuLL;
    if (v3 == 1)
    {
      memcpy(__dst, v4 + 2, sizeof(__dst));
      sub_100223E88((uint64_t)__dst);
      sub_1003A03E8((long long *)__dst);
      sub_100224004((uint64_t)__dst);
    }
    else
    {
      uint64_t v5 = v4[3];
      uint64_t v6 = v4[4];
      *(void *)__dst = v4[2];
      *(void *)&__dst[8] = v5;
      swift_bridgeObjectRetain_n();
      sub_1003A0778((uint64_t *)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)__dst = v6;
      sub_1005E18F0();
    }
  }
  else
  {
    v21 &= 0x3FFFFFFFFFFFFFFFuLL;
    sub_1003A0338(*(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10), *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18), *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20), *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28));
  }
  long long v7 = *(_OWORD *)(a1 + 24);
  long long v8 = *(_OWORD *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 40);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = v7;
  sub_10001FDF0((uint64_t)&v12 + 8, (uint64_t)v18, &qword_100713AA8);
  sub_10001FDF0((uint64_t)v18, (uint64_t)&v22, &qword_100713AA8);
  if (v23)
  {
    uint64_t v26 = v22;
    uint64_t v27 = v23;
    swift_bridgeObjectRetain();
    sub_1003A0778(&v26);
    swift_bridgeObjectRelease();
  }
  sub_10001FDF0((uint64_t)&v13 + 8, (uint64_t)v17, &qword_100713AA8);
  sub_10001FDF0((uint64_t)v17, (uint64_t)&v24, &qword_100713AA8);
  if (v25)
  {
    uint64_t v26 = v24;
    uint64_t v27 = v25;
    swift_bridgeObjectRetain();
    sub_1003A0778(&v26);
    swift_bridgeObjectRelease();
  }
  sub_10001FDF0((uint64_t)&v14 + 8, (uint64_t)v16, &qword_100713AB0);
  sub_10001FDF0((uint64_t)v16, (uint64_t)&v26, &qword_100713AB0);
  if (v27)
  {
    v10[0] = v26;
    v10[1] = v27;
    swift_bridgeObjectRetain_n();
    sub_1003A0778(v10);
    swift_bridgeObjectRelease();
    sub_10002A77C((uint64_t)v16);
  }
  v10[0] = *((void *)&v15 + 1);
  return sub_1005E18F0();
}

uint64_t sub_10039EAAC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v1 = *(void *)v0;
  uint64_t v239 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v210 = v0;
    uint64_t v3 = v1 + 32;
    uint64_t v218 = 0;
    swift_bridgeObjectRetain();
    for (uint64_t i = v2 - 1; ; --i)
    {
      sub_10013AE3C(v3, (uint64_t)v251);
      sub_10013AE3C((uint64_t)v251, (uint64_t)v252);
      if (sub_10013AEAC((uint64_t)v252) == 1)
      {
        uint64_t v5 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v252);
        uint64_t v6 = *(void *)(v5 + 16);
        long long v294 = *(_OWORD *)v5;
        uint64_t v295 = v6;
        long long v7 = *(_OWORD *)(v5 + 40);
        long long v296 = *(_OWORD *)(v5 + 24);
        long long v297 = v7;
        long long v8 = *(_OWORD *)(v5 + 72);
        long long v298 = *(_OWORD *)(v5 + 56);
        long long v299 = v8;
        long long v9 = *(_OWORD *)(v5 + 104);
        long long v300 = *(_OWORD *)(v5 + 88);
        long long v301 = v9;
        sub_10013AE3C((uint64_t)v251, (uint64_t)__dst);
        uint64_t v10 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)__dst);
        uint64_t v228 = *(void *)(v10 + 32);
        uint64_t v233 = *(void *)(v10 + 24);
        uint64_t v237 = v3;
        uint64_t v11 = *(void *)(v10 + 40);
        uint64_t v12 = *(void *)(v10 + 48);
        uint64_t v13 = *(void *)(v10 + 56);
        uint64_t v14 = *(void *)(v10 + 64);
        uint64_t v15 = *(void *)(v10 + 72);
        uint64_t v16 = *(void *)(v10 + 80);
        long long v222 = *(_OWORD *)(v10 + 88);
        uint64_t v17 = i;
        uint64_t v18 = *(void *)(v10 + 104);
        uint64_t v19 = *(void *)(v10 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v195 = v19;
        uint64_t i = v17;
        uint64_t v20 = v11;
        uint64_t v3 = v237;
        sub_100136C1C(v233, v228, v20, v12, v13, v14, v15, v16, v222, *((uint64_t *)&v222 + 1), v18, v195);
        sub_10039EAAC(&v294);
        sub_100286C18((uint64_t)v251, sub_100061440);
        if (!v17) {
          goto LABEL_129;
        }
        goto LABEL_121;
      }
      unint64_t v21 = (unint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v252);
      unint64_t v22 = *v21;
      unint64_t v23 = *v21 >> 62;
      if (!v23)
      {
        uint64_t v28 = *(void *)(v22 + 16);
        uint64_t v27 = *(void *)(v22 + 24);
        uint64_t v29 = *(void *)(v22 + 32);
        uint64_t v30 = *(void *)(v22 + 40);
        sub_100286C18((uint64_t)v251, sub_100136870);
        swift_bridgeObjectRetain();
        if ((v27 & 0x1000000000000000) != 0)
        {
          sub_100286C18((uint64_t)v251, sub_100136870);
          uint64_t v28 = sub_1003B4E8C();
          uint64_t v31 = v141;
          if ((v141 & 0x2000000000000000) == 0) {
            goto LABEL_14;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_100286C18((uint64_t)v251, sub_100136870);
          uint64_t v31 = v27;
          if ((v27 & 0x2000000000000000) == 0)
          {
LABEL_14:
            if ((v28 & 0x1000000000000000) == 0) {
              sub_1005E2D30();
            }
LABEL_51:
            sub_1005E18F0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            if ((v30 & 0x1000000000000000) != 0)
            {
              uint64_t v29 = sub_1003B4E8C();
              uint64_t v142 = v144;
              if ((v144 & 0x2000000000000000) == 0) {
                goto LABEL_53;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v142 = v30;
              if ((v30 & 0x2000000000000000) == 0)
              {
LABEL_53:
                if ((v29 & 0x1000000000000000) == 0) {
                  sub_1005E2D30();
                }
                goto LABEL_60;
              }
            }
            *(void *)&__dst[0] = v29;
            *((void *)&__dst[0] + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
LABEL_60:
            sub_1005E18F0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_96;
          }
        }
        *(void *)&__dst[0] = v28;
        *((void *)&__dst[0] + 1) = v31 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_51;
      }
      if (v23 != 1)
      {
        uint64_t v32 = i;
        uint64_t v33 = (void *)(v22 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v35 = v33[2];
        uint64_t v34 = v33[3];
        uint64_t v36 = v33[4];
        sub_100286C18((uint64_t)v251, sub_100136870);
        if ((v34 & 0x1000000000000000) != 0)
        {
          sub_100286C18((uint64_t)v251, sub_100136870);
          swift_bridgeObjectRetain();
          uint64_t v35 = sub_1003B4E8C();
          uint64_t v37 = v143;
          if ((v143 & 0x2000000000000000) == 0) {
            goto LABEL_18;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_100286C18((uint64_t)v251, sub_100136870);
          swift_bridgeObjectRetain();
          uint64_t v37 = v34;
          if ((v34 & 0x2000000000000000) == 0)
          {
LABEL_18:
            if ((v35 & 0x1000000000000000) == 0) {
              sub_1005E2D30();
            }
            goto LABEL_57;
          }
        }
        *(void *)&__dst[0] = v35;
        *((void *)&__dst[0] + 1) = v37 & 0xFFFFFFFFFFFFFFLL;
LABEL_57:
        sub_1005E18F0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&__dst[0] = v36;
        sub_1005E18F0();
        uint64_t i = v32;
        goto LABEL_96;
      }
      memcpy(__dst, (const void *)((v22 & 0x3FFFFFFFFFFFFFFFLL) + 16), 0x148uLL);
      uint64_t v24 = *((void *)&__dst[0] + 1);
      uint64_t v25 = *(void *)&__dst[0];
      sub_100286C18((uint64_t)v251, sub_100136870);
      if ((v24 & 0x1000000000000000) != 0)
      {
        sub_100286C18((uint64_t)v251, sub_100136870);
        swift_bridgeObjectRetain();
        sub_100223E88((uint64_t)__dst);
        uint64_t v25 = sub_1003B4E8C();
        uint64_t v26 = v38;
        if ((v38 & 0x2000000000000000) == 0)
        {
LABEL_10:
          if ((v25 & 0x1000000000000000) == 0) {
            sub_1005E2D30();
          }
          goto LABEL_22;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_100286C18((uint64_t)v251, sub_100136870);
        swift_bridgeObjectRetain();
        sub_100223E88((uint64_t)__dst);
        uint64_t v26 = v24;
        if ((v24 & 0x2000000000000000) == 0) {
          goto LABEL_10;
        }
      }
      *(void *)long long v247 = v25;
      *(void *)&v247[8] = v26 & 0xFFFFFFFFFFFFFFLL;
LABEL_22:
      sub_1005E18F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10013AE3C((uint64_t)&__dst[8] + 8, (uint64_t)v249);
      uint64_t v238 = v3;
      if (sub_10013AEAC((uint64_t)v249) == 1)
      {
        uint64_t v39 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v249);
        uint64_t v40 = *(void *)(v39 + 16);
        long long v286 = *(_OWORD *)v39;
        uint64_t v287 = v40;
        long long v288 = *(_OWORD *)(v39 + 24);
        long long v289 = *(_OWORD *)(v39 + 40);
        long long v290 = *(_OWORD *)(v39 + 56);
        long long v291 = *(_OWORD *)(v39 + 72);
        long long v292 = *(_OWORD *)(v39 + 88);
        long long v293 = *(_OWORD *)(v39 + 104);
        sub_10013AE3C((uint64_t)&__dst[8] + 8, (uint64_t)v247);
        uint64_t v41 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v247);
        uint64_t v229 = *(void *)(v41 + 24);
        char v234 = v21;
        uint64_t v42 = *(void *)(v41 + 32);
        uint64_t v43 = *(void *)(v41 + 40);
        uint64_t v44 = *(void *)(v41 + 48);
        uint64_t v45 = *(void *)(v41 + 56);
        uint64_t v46 = *(void *)(v41 + 64);
        uint64_t v223 = *(void *)(v41 + 72);
        uint64_t v47 = *(void *)(v41 + 80);
        long long v211 = *(_OWORD *)(v41 + 88);
        uint64_t v48 = i;
        uint64_t v50 = *(void *)(v41 + 104);
        uint64_t v49 = *(void *)(v41 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v191 = v50;
        uint64_t i = v48;
        uint64_t v51 = v42;
        uint64_t v3 = v238;
        uint64_t v52 = v47;
        unint64_t v21 = v234;
        sub_100136C1C(v229, v51, v43, v44, v45, v46, v223, v52, v211, *((uint64_t *)&v211 + 1), v191, v49);
        sub_10039EAAC(&v286);
        sub_100286C18((uint64_t)&__dst[8] + 8, sub_100061440);
      }
      else
      {
        unint64_t v53 = (void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v249);
        long long v54 = v53;
        unint64_t v55 = *v53;
        uint64_t v56 = *v53 >> 62;
        uint64_t v216 = i;
        if (v56)
        {
          uint64_t v57 = (void *)(v55 & 0x3FFFFFFFFFFFFFFFLL);
          if (v56 == 1)
          {
            memcpy(v247, v57 + 2, sizeof(v247));
            *(_OWORD *)long long v245 = *(_OWORD *)v247;
            swift_bridgeObjectRetain();
            sub_100286C18((uint64_t)&__dst[8] + 8, sub_100136870);
            swift_bridgeObjectRetain();
            sub_100223E88((uint64_t)v247);
            uint64_t v58 = v218;
            sub_1003A0778((uint64_t *)v245);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10013AE3C((uint64_t)&v247[136], (uint64_t)v248);
            if (sub_10013AEAC((uint64_t)v248) == 1)
            {
              uint64_t v59 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v248);
              uint64_t v60 = *(void *)(v59 + 16);
              long long v278 = *(_OWORD *)v59;
              uint64_t v279 = v60;
              long long v61 = *(_OWORD *)(v59 + 40);
              long long v280 = *(_OWORD *)(v59 + 24);
              long long v281 = v61;
              long long v62 = *(_OWORD *)(v59 + 72);
              long long v282 = *(_OWORD *)(v59 + 56);
              long long v283 = v62;
              long long v63 = *(_OWORD *)(v59 + 104);
              long long v284 = *(_OWORD *)(v59 + 88);
              long long v285 = v63;
              sub_10013AE3C((uint64_t)&v247[136], (uint64_t)v245);
              uint64_t v64 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v245);
              uint64_t v65 = *(void *)(v64 + 24);
              uint64_t v66 = *(void *)(v64 + 32);
              uint64_t v67 = *(void *)(v64 + 40);
              v235 = v54;
              uint64_t v68 = *(void *)(v64 + 48);
              uint64_t v69 = *(void *)(v64 + 56);
              uint64_t v70 = *(void *)(v64 + 64);
              uint64_t v230 = *(void *)(v64 + 72);
              uint64_t v224 = *(void *)(v64 + 80);
              long long v212 = *(_OWORD *)(v64 + 88);
              unsigned int v71 = v21;
              uint64_t v72 = *(void *)(v64 + 104);
              uint64_t v73 = *(void *)(v64 + 112);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v196 = v73;
              unint64_t v21 = v71;
              uint64_t v74 = v69;
              long long v54 = v235;
              uint64_t v75 = v70;
              uint64_t v58 = v218;
              sub_100136C1C(v65, v66, v67, v68, v74, v75, v230, v224, v212, *((uint64_t *)&v212 + 1), v72, v196);
              sub_10039EAAC(&v278);
              sub_100286C18((uint64_t)&v247[136], sub_100061440);
            }
            else
            {
              uint64_t v81 = (unint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v248);
              unint64_t v82 = *v81;
              unint64_t v83 = *v81 >> 62;
              if (v83)
              {
                int v84 = (void *)(v82 & 0x3FFFFFFFFFFFFFFFLL);
                if (v83 == 1)
                {
                  memcpy(v245, v84 + 2, sizeof(v245));
                  *(_OWORD *)uint64_t v243 = *(_OWORD *)v245;
                  swift_bridgeObjectRetain();
                  sub_100286C18((uint64_t)&v247[136], sub_100136870);
                  swift_bridgeObjectRetain();
                  sub_100223E88((uint64_t)v245);
                  sub_1003A0778((uint64_t *)v243);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_10013AE3C((uint64_t)&v245[136], (uint64_t)v246);
                  if (sub_10013AEAC((uint64_t)v246) == 1)
                  {
                    uint64_t v85 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v246);
                    uint64_t v86 = *(void *)(v85 + 16);
                    long long v270 = *(_OWORD *)v85;
                    uint64_t v271 = v86;
                    long long v272 = *(_OWORD *)(v85 + 24);
                    long long v273 = *(_OWORD *)(v85 + 40);
                    long long v274 = *(_OWORD *)(v85 + 56);
                    long long v275 = *(_OWORD *)(v85 + 72);
                    long long v276 = *(_OWORD *)(v85 + 88);
                    long long v277 = *(_OWORD *)(v85 + 104);
                    sub_10013AE3C((uint64_t)&v245[136], (uint64_t)v243);
                    uint64_t v87 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v243);
                    uint64_t v231 = *(void *)(v87 + 24);
                    uint64_t v88 = *(void *)(v87 + 32);
                    uint64_t v225 = *(void *)(v87 + 40);
                    uint64_t v219 = *(void *)(v87 + 48);
                    uint64_t v213 = *(void *)(v87 + 56);
                    uint64_t v204 = *(void *)(v87 + 72);
                    uint64_t v207 = *(void *)(v87 + 64);
                    uint64_t v201 = *(void *)(v87 + 80);
                    long long v198 = *(_OWORD *)(v87 + 88);
                    unsigned int v89 = v54;
                    uint64_t v90 = v21;
                    uint64_t v91 = v58;
                    uint64_t v92 = *(void *)(v87 + 104);
                    uint64_t v93 = *(void *)(v87 + 112);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    uint64_t v192 = v92;
                    uint64_t v58 = v91;
                    unint64_t v21 = v90;
                    long long v54 = v89;
                    sub_100136C1C(v231, v88, v225, v219, v213, v207, v204, v201, v198, *((uint64_t *)&v198 + 1), v192, v93);
                    sub_10039EAAC(&v270);
                    sub_100286C18((uint64_t)&v245[136], sub_100061440);
                  }
                  else
                  {
                    int v99 = (unint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v246);
                    unint64_t v100 = *v99;
                    unint64_t v101 = *v99 >> 62;
                    uint64_t v232 = v99;
                    v236 = v54;
                    if (v101)
                    {
                      uint64_t v102 = (void *)(v100 & 0x3FFFFFFFFFFFFFFFLL);
                      if (v101 == 1)
                      {
                        memcpy(v243, v102 + 2, sizeof(v243));
                        *(_OWORD *)long long v241 = *(_OWORD *)v243;
                        swift_bridgeObjectRetain();
                        sub_100286C18((uint64_t)&v245[136], sub_100136870);
                        swift_bridgeObjectRetain();
                        sub_100223E88((uint64_t)v243);
                        sub_1003A0778((uint64_t *)v241);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_10013AE3C((uint64_t)&v243[136], (uint64_t)v244);
                        if (sub_10013AEAC((uint64_t)v244) == 1)
                        {
                          uint64_t v103 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v244);
                          uint64_t v104 = *(void *)(v103 + 16);
                          long long v262 = *(_OWORD *)v103;
                          uint64_t v263 = v104;
                          long long v105 = *(_OWORD *)(v103 + 40);
                          long long v264 = *(_OWORD *)(v103 + 24);
                          long long v265 = v105;
                          long long v106 = *(_OWORD *)(v103 + 72);
                          long long v266 = *(_OWORD *)(v103 + 56);
                          long long v267 = v106;
                          long long v107 = *(_OWORD *)(v103 + 104);
                          long long v268 = *(_OWORD *)(v103 + 88);
                          long long v269 = v107;
                          sub_10013AE3C((uint64_t)&v243[136], (uint64_t)v241);
                          uint64_t v108 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v241);
                          uint64_t v109 = *(void *)(v108 + 24);
                          uint64_t v110 = *(void *)(v108 + 32);
                          uint64_t v226 = *(void *)(v108 + 40);
                          uint64_t v220 = *(void *)(v108 + 48);
                          uint64_t v214 = *(void *)(v108 + 56);
                          uint64_t v205 = *(void *)(v108 + 72);
                          uint64_t v208 = *(void *)(v108 + 64);
                          uint64_t v202 = *(void *)(v108 + 80);
                          long long v199 = *(_OWORD *)(v108 + 88);
                          int v111 = v21;
                          uint64_t v112 = v58;
                          uint64_t v113 = *(void *)(v108 + 104);
                          uint64_t v114 = *(void *)(v108 + 112);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          uint64_t v193 = v113;
                          uint64_t v58 = v112;
                          unint64_t v21 = v111;
                          sub_100136C1C(v109, v110, v226, v220, v214, v208, v205, v202, v199, *((uint64_t *)&v199 + 1), v193, v114);
                          sub_10039EAAC(&v262);
                          sub_100286C18((uint64_t)&v243[136], sub_100061440);
                        }
                        else
                        {
                          uint64_t v227 = (unint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v244);
                          unint64_t v122 = *v227;
                          unint64_t v123 = *v227 >> 62;
                          if (v123)
                          {
                            uint64_t v124 = (void *)(v122 & 0x3FFFFFFFFFFFFFFFLL);
                            if (v123 == 1)
                            {
                              memcpy(v241, v124 + 2, sizeof(v241));
                              *(_OWORD *)long long v242 = *(_OWORD *)v241;
                              swift_bridgeObjectRetain();
                              sub_100286C18((uint64_t)&v243[136], sub_100136870);
                              swift_bridgeObjectRetain();
                              sub_100223E88((uint64_t)v241);
                              sub_1003A0778(v242);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              sub_10013AE3C((uint64_t)&v241[136], (uint64_t)v242);
                              if (sub_10013AEAC((uint64_t)v242) == 1)
                              {
                                uint64_t v125 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v242);
                                uint64_t v126 = *(void *)(v125 + 16);
                                long long v254 = *(_OWORD *)v125;
                                uint64_t v255 = v126;
                                long long v256 = *(_OWORD *)(v125 + 24);
                                long long v257 = *(_OWORD *)(v125 + 40);
                                long long v258 = *(_OWORD *)(v125 + 56);
                                long long v259 = *(_OWORD *)(v125 + 72);
                                long long v260 = *(_OWORD *)(v125 + 88);
                                long long v261 = *(_OWORD *)(v125 + 104);
                                sub_10013AE3C((uint64_t)&v241[136], (uint64_t)v240);
                                uint64_t v127 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v240);
                                uint64_t v128 = *(void *)(v127 + 24);
                                uint64_t v129 = *(void *)(v127 + 32);
                                uint64_t v221 = *(void *)(v127 + 40);
                                uint64_t v215 = *(void *)(v127 + 48);
                                uint64_t v206 = *(void *)(v127 + 64);
                                uint64_t v209 = *(void *)(v127 + 56);
                                uint64_t v203 = *(void *)(v127 + 72);
                                uint64_t v200 = *(void *)(v127 + 80);
                                long long v197 = *(_OWORD *)(v127 + 88);
                                v130 = v21;
                                uint64_t v131 = v58;
                                uint64_t v132 = *(void *)(v127 + 104);
                                uint64_t v133 = *(void *)(v127 + 112);
                                swift_bridgeObjectRetain();
                                swift_bridgeObjectRetain();
                                uint64_t v194 = v132;
                                uint64_t v58 = v131;
                                unint64_t v21 = v130;
                                sub_100136C1C(v128, v129, v221, v215, v209, v206, v203, v200, v197, *((uint64_t *)&v197 + 1), v194, v133);
                                sub_10039EAAC(&v254);
                              }
                              else
                              {
                                uint64_t v145 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v242);
                                long long v146 = v145[9];
                                v253[8] = v145[8];
                                v253[9] = v146;
                                v253[10] = v145[10];
                                long long v147 = v145[5];
                                v253[4] = v145[4];
                                v253[5] = v147;
                                long long v148 = v145[6];
                                v253[7] = v145[7];
                                v253[6] = v148;
                                long long v149 = v145[1];
                                v253[0] = *v145;
                                v253[1] = v149;
                                long long v150 = v145[2];
                                v253[3] = v145[3];
                                v253[2] = v150;
                                sub_10013AE3C((uint64_t)&v241[136], (uint64_t)v240);
                                uint64_t v151 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v240);
                                sub_10022C168(v151);
                                sub_10039E844(v253);
                              }
                              sub_100286C18((uint64_t)&v241[136], sub_100061440);
                              v240[0] = *(void *)&v241[320];
                              sub_1005E18F0();
                              sub_100224004((uint64_t)v241);
                            }
                            else
                            {
                              uint64_t v139 = v124[3];
                              uint64_t v140 = v124[4];
                              *(void *)long long v241 = v124[2];
                              *(void *)&v241[8] = v139;
                              swift_bridgeObjectRetain();
                              sub_100286C18((uint64_t)&v243[136], sub_100136870);
                              swift_bridgeObjectRetain();
                              sub_1003A0778((uint64_t *)v241);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              *(void *)long long v241 = v140;
                              sub_1005E18F0();
                            }
                          }
                          else
                          {
                            uint64_t v134 = *(void *)(v122 + 16);
                            uint64_t v135 = *(void *)(v122 + 24);
                            uint64_t v137 = *(void *)(v122 + 32);
                            uint64_t v136 = *(void *)(v122 + 40);
                            sub_10013AE3C((uint64_t)&v243[136], (uint64_t)v241);
                            uint64_t v138 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v241);
                            sub_10022C168(v138);
                            sub_1003A0338(v134, v135, v137, v136);
                          }
                          unint64_t v152 = v227[5];
                          unint64_t v153 = v227[6];
                          unint64_t v155 = v227[7];
                          unint64_t v154 = v227[8];
                          unint64_t v156 = v227[9];
                          unint64_t v157 = v227[10];
                          if (v152)
                          {
                            *(void *)long long v241 = v227[4];
                            *(void *)&v241[8] = v152;
                            swift_bridgeObjectRetain();
                            sub_1003A0778((uint64_t *)v241);
                            swift_bridgeObjectRelease();
                          }
                          if (v155)
                          {
                            *(void *)long long v241 = v153;
                            *(void *)&v241[8] = v155;
                            swift_bridgeObjectRetain();
                            sub_1003A0778((uint64_t *)v241);
                            swift_bridgeObjectRelease();
                          }
                          if (v156)
                          {
                            *(void *)long long v241 = v154;
                            *(void *)&v241[8] = v156;
                            swift_bridgeObjectRetain_n();
                            sub_1003A0778((uint64_t *)v241);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                          }
                          *(void *)long long v241 = v157;
                          sub_1005E18F0();
                          sub_100286C18((uint64_t)&v243[136], sub_100061440);
                        }
                        *(void *)long long v241 = *(void *)&v243[320];
                        sub_1005E18F0();
                        sub_100224004((uint64_t)v243);
                      }
                      else
                      {
                        uint64_t v120 = v102[3];
                        uint64_t v121 = v102[4];
                        *(void *)uint64_t v243 = v102[2];
                        *(void *)&v243[8] = v120;
                        swift_bridgeObjectRetain();
                        sub_100286C18((uint64_t)&v245[136], sub_100136870);
                        swift_bridgeObjectRetain();
                        sub_1003A0778((uint64_t *)v243);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(void *)uint64_t v243 = v121;
                        sub_1005E18F0();
                      }
                    }
                    else
                    {
                      uint64_t v115 = *(void *)(v100 + 16);
                      uint64_t v116 = *(void *)(v100 + 24);
                      uint64_t v118 = *(void *)(v100 + 32);
                      uint64_t v117 = *(void *)(v100 + 40);
                      sub_10013AE3C((uint64_t)&v245[136], (uint64_t)v243);
                      uint64_t v119 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v243);
                      sub_10022C168(v119);
                      sub_1003A0338(v115, v116, v118, v117);
                    }
                    unint64_t v158 = v232[5];
                    unint64_t v159 = v232[6];
                    unint64_t v161 = v232[7];
                    unint64_t v160 = v232[8];
                    unint64_t v162 = v232[9];
                    unint64_t v163 = v232[10];
                    if (v158)
                    {
                      *(void *)uint64_t v243 = v232[4];
                      *(void *)&v243[8] = v158;
                      swift_bridgeObjectRetain();
                      sub_1003A0778((uint64_t *)v243);
                      swift_bridgeObjectRelease();
                    }
                    if (v161)
                    {
                      *(void *)uint64_t v243 = v159;
                      *(void *)&v243[8] = v161;
                      swift_bridgeObjectRetain();
                      sub_1003A0778((uint64_t *)v243);
                      swift_bridgeObjectRelease();
                    }
                    if (v162)
                    {
                      *(void *)uint64_t v243 = v160;
                      *(void *)&v243[8] = v162;
                      swift_bridgeObjectRetain_n();
                      sub_1003A0778((uint64_t *)v243);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    *(void *)uint64_t v243 = v163;
                    sub_1005E18F0();
                    sub_100286C18((uint64_t)&v245[136], sub_100061440);
                    long long v54 = v236;
                  }
                  *(void *)uint64_t v243 = *(void *)&v245[320];
                  sub_1005E18F0();
                  sub_100224004((uint64_t)v245);
                }
                else
                {
                  uint64_t v97 = v84[3];
                  uint64_t v98 = v84[4];
                  *(void *)long long v245 = v84[2];
                  *(void *)&v245[8] = v97;
                  swift_bridgeObjectRetain();
                  sub_100286C18((uint64_t)&v247[136], sub_100136870);
                  swift_bridgeObjectRetain();
                  sub_1003A0778((uint64_t *)v245);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  *(void *)long long v245 = v98;
                  sub_1005E18F0();
                }
              }
              else
              {
                uint64_t v94 = *(void *)(v82 + 24);
                uint64_t v95 = *(void *)(v82 + 32);
                uint64_t v96 = *(void *)(v82 + 40);
                *(void *)long long v245 = *(void *)(v82 + 16);
                *(void *)&v245[8] = v94;
                swift_bridgeObjectRetain_n();
                sub_100286C18((uint64_t)&v247[136], sub_100136870);
                sub_1003A0778((uint64_t *)v245);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                *(void *)long long v245 = v95;
                *(void *)&v245[8] = v96;
                swift_bridgeObjectRetain_n();
                sub_1003A0778((uint64_t *)v245);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              unint64_t v164 = v81[5];
              unint64_t v165 = v81[6];
              unint64_t v167 = v81[7];
              unint64_t v166 = v81[8];
              unint64_t v168 = v81[9];
              unint64_t v169 = v81[10];
              if (v164)
              {
                *(void *)long long v245 = v81[4];
                *(void *)&v245[8] = v164;
                swift_bridgeObjectRetain();
                sub_1003A0778((uint64_t *)v245);
                swift_bridgeObjectRelease();
              }
              if (v167)
              {
                *(void *)long long v245 = v165;
                *(void *)&v245[8] = v167;
                swift_bridgeObjectRetain();
                sub_1003A0778((uint64_t *)v245);
                swift_bridgeObjectRelease();
              }
              if (v168)
              {
                *(void *)long long v245 = v166;
                *(void *)&v245[8] = v168;
                swift_bridgeObjectRetain_n();
                sub_1003A0778((uint64_t *)v245);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              *(void *)long long v245 = v169;
              sub_1005E18F0();
              sub_100286C18((uint64_t)&v247[136], sub_100061440);
            }
            *(void *)long long v245 = *(void *)&v247[320];
            sub_1005E18F0();
            sub_100224004((uint64_t)v247);
          }
          else
          {
            uint64_t v79 = v57[3];
            uint64_t v80 = v57[4];
            *(void *)long long v247 = v57[2];
            *(void *)&v247[8] = v79;
            swift_bridgeObjectRetain();
            sub_100286C18((uint64_t)&__dst[8] + 8, sub_100136870);
            swift_bridgeObjectRetain();
            uint64_t v58 = v218;
            sub_1003A0778((uint64_t *)v247);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)long long v247 = v80;
            sub_1005E18F0();
          }
        }
        else
        {
          uint64_t v76 = *(void *)(v55 + 24);
          uint64_t v77 = *(void *)(v55 + 32);
          uint64_t v78 = *(void *)(v55 + 40);
          *(void *)long long v247 = *(void *)(v55 + 16);
          *(void *)&v247[8] = v76;
          swift_bridgeObjectRetain_n();
          sub_100286C18((uint64_t)&__dst[8] + 8, sub_100136870);
          uint64_t v58 = v218;
          sub_1003A0778((uint64_t *)v247);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)long long v247 = v77;
          *(void *)&v247[8] = v78;
          swift_bridgeObjectRetain_n();
          sub_1003A0778((uint64_t *)v247);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v170 = v54[5];
        uint64_t v171 = v54[6];
        uint64_t v173 = v54[7];
        uint64_t v172 = v54[8];
        uint64_t v174 = v54[9];
        uint64_t v175 = v54[10];
        if (v170)
        {
          *(void *)long long v247 = v54[4];
          *(void *)&v247[8] = v170;
          swift_bridgeObjectRetain();
          sub_1003A0778((uint64_t *)v247);
          swift_bridgeObjectRelease();
        }
        if (v173)
        {
          *(void *)long long v247 = v171;
          *(void *)&v247[8] = v173;
          swift_bridgeObjectRetain();
          sub_1003A0778((uint64_t *)v247);
          swift_bridgeObjectRelease();
        }
        if (v174)
        {
          *(void *)long long v247 = v172;
          *(void *)&v247[8] = v174;
          swift_bridgeObjectRetain_n();
          sub_1003A0778((uint64_t *)v247);
          uint64_t v218 = v58;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v218 = v58;
        }
        uint64_t v3 = v238;
        uint64_t i = v216;
        *(void *)long long v247 = v175;
        sub_1005E18F0();
        sub_100286C18((uint64_t)&__dst[8] + 8, sub_100061440);
      }
      *(void *)long long v247 = *(void *)&__dst[20];
      sub_1005E18F0();
      sub_100224004((uint64_t)__dst);
LABEL_96:
      unint64_t v176 = v21[5];
      uint64_t v177 = v21[6];
      unint64_t v178 = v21[7];
      uint64_t v179 = v21[8];
      unint64_t v181 = v21[9];
      unint64_t v180 = v21[10];
      if (!v176) {
        goto LABEL_104;
      }
      uint64_t v182 = v21[4];
      swift_bridgeObjectRetain();
      if ((v176 & 0x1000000000000000) != 0)
      {
        uint64_t v182 = sub_1003B4E8C();
        uint64_t v217 = i;
        unint64_t v184 = v183;
        swift_bridgeObjectRelease();
        unint64_t v176 = v184;
        uint64_t i = v217;
        if ((v176 & 0x2000000000000000) == 0)
        {
LABEL_99:
          if ((v182 & 0x1000000000000000) == 0) {
            sub_1005E2D30();
          }
          goto LABEL_103;
        }
      }
      else if ((v176 & 0x2000000000000000) == 0)
      {
        goto LABEL_99;
      }
      *(void *)&__dst[0] = v182;
      *((void *)&__dst[0] + 1) = v176 & 0xFFFFFFFFFFFFFFLL;
LABEL_103:
      sub_1005E18F0();
      swift_bridgeObjectRelease();
LABEL_104:
      if (!v178) {
        goto LABEL_112;
      }
      swift_bridgeObjectRetain();
      if ((v178 & 0x1000000000000000) != 0)
      {
        uint64_t v177 = sub_1003B4E8C();
        uint64_t v185 = i;
        unint64_t v187 = v186;
        swift_bridgeObjectRelease();
        unint64_t v178 = v187;
        uint64_t i = v185;
        if ((v178 & 0x2000000000000000) == 0)
        {
LABEL_107:
          if ((v177 & 0x1000000000000000) == 0) {
            sub_1005E2D30();
          }
          goto LABEL_111;
        }
      }
      else if ((v178 & 0x2000000000000000) == 0)
      {
        goto LABEL_107;
      }
      *(void *)&__dst[0] = v177;
      *((void *)&__dst[0] + 1) = v178 & 0xFFFFFFFFFFFFFFLL;
LABEL_111:
      sub_1005E18F0();
      swift_bridgeObjectRelease();
LABEL_112:
      if (!v181) {
        goto LABEL_120;
      }
      swift_bridgeObjectRetain();
      if ((v181 & 0x1000000000000000) != 0)
      {
        uint64_t v179 = sub_1003B4E8C();
        unint64_t v188 = v189;
        if ((v189 & 0x2000000000000000) == 0)
        {
LABEL_115:
          if ((v179 & 0x1000000000000000) == 0) {
            sub_1005E2D30();
          }
          goto LABEL_119;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v188 = v181;
        if ((v181 & 0x2000000000000000) == 0) {
          goto LABEL_115;
        }
      }
      *(void *)&__dst[0] = v179;
      *((void *)&__dst[0] + 1) = v188 & 0xFFFFFFFFFFFFFFLL;
LABEL_119:
      sub_1005E18F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_120:
      *(void *)&__dst[0] = v180;
      sub_1005E18F0();
      sub_100286C18((uint64_t)v251, sub_100061440);
      sub_100286C18((uint64_t)v251, sub_100061440);
      if (!i)
      {
LABEL_129:
        sub_10001D550((uint64_t)&v239);
        uint64_t v0 = v210;
        break;
      }
LABEL_121:
      v3 += 184;
    }
  }
  __dst[0] = *(_OWORD *)(v0 + 8);
  *(_OWORD *)long long v247 = __dst[0];
  swift_bridgeObjectRetain_n();
  sub_1003A0778((uint64_t *)v247);
  swift_bridgeObjectRelease();
  return sub_10002A77C((uint64_t)__dst);
}

uint64_t sub_1003A0338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  swift_bridgeObjectRetain_n();
  sub_1003A0778(&v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  swift_bridgeObjectRetain_n();
  sub_1003A0778(&v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A03E8(long long *a1)
{
  long long v34 = *a1;
  *(_OWORD *)__dst = v34;
  swift_bridgeObjectRetain_n();
  sub_1003A0778((uint64_t *)__dst);
  swift_bridgeObjectRelease();
  sub_10002A77C((uint64_t)&v34);
  sub_10013AE3C((uint64_t)a1 + 136, (uint64_t)v44);
  sub_10013AE3C((uint64_t)v44, (uint64_t)v45);
  if (sub_10013AEAC((uint64_t)v45) == 1)
  {
    uint64_t v2 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v45);
    uint64_t v3 = *(void *)(v2 + 16);
    long long v36 = *(_OWORD *)v2;
    uint64_t v37 = v3;
    long long v38 = *(_OWORD *)(v2 + 24);
    long long v39 = *(_OWORD *)(v2 + 40);
    long long v40 = *(_OWORD *)(v2 + 56);
    long long v41 = *(_OWORD *)(v2 + 72);
    long long v42 = *(_OWORD *)(v2 + 88);
    long long v43 = *(_OWORD *)(v2 + 104);
    sub_10013AE3C((uint64_t)v44, (uint64_t)__dst);
    uint64_t v4 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)__dst);
    uint64_t v5 = *(void *)(v4 + 24);
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v7 = *(void *)(v4 + 40);
    uint64_t v8 = *(void *)(v4 + 48);
    uint64_t v9 = *(void *)(v4 + 56);
    uint64_t v10 = *(void *)(v4 + 64);
    uint64_t v11 = *(void *)(v4 + 72);
    uint64_t v33 = *(void *)(v4 + 80);
    long long v32 = *(_OWORD *)(v4 + 88);
    uint64_t v12 = *(void *)(v4 + 104);
    uint64_t v13 = *(void *)(v4 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100136C1C(v5, v6, v7, v8, v9, v10, v11, v33, v32, *((uint64_t *)&v32 + 1), v12, v13);
    sub_10039EAAC();
  }
  else
  {
    uint64_t v14 = (unint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v45);
    unint64_t v15 = *v14;
    unint64_t v16 = *v14 >> 62;
    if (v16)
    {
      uint64_t v17 = (void *)(v15 & 0x3FFFFFFFFFFFFFFFLL);
      if (v16 == 1)
      {
        memcpy(__dst, v17 + 2, sizeof(__dst));
        sub_100286C18((uint64_t)v44, sub_100136870);
        sub_100223E88((uint64_t)__dst);
        sub_1003A03E8(__dst);
        sub_100224004((uint64_t)__dst);
      }
      else
      {
        uint64_t v23 = v17[3];
        uint64_t v24 = v17[4];
        *(void *)__dst = v17[2];
        *(void *)&__dst[8] = v23;
        swift_bridgeObjectRetain();
        sub_100286C18((uint64_t)v44, sub_100136870);
        swift_bridgeObjectRetain();
        sub_1003A0778((uint64_t *)__dst);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)__dst = v24;
        sub_1005E18F0();
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      uint64_t v20 = *(void *)(v15 + 32);
      uint64_t v21 = *(void *)(v15 + 40);
      sub_10013AE3C((uint64_t)v44, (uint64_t)__dst);
      uint64_t v22 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)__dst);
      sub_10022C168(v22);
      sub_1003A0338(v18, v19, v20, v21);
    }
    unint64_t v25 = v14[5];
    unint64_t v26 = v14[6];
    unint64_t v27 = v14[7];
    unint64_t v28 = v14[8];
    unint64_t v30 = v14[9];
    unint64_t v29 = v14[10];
    if (v25)
    {
      *(void *)&long long v36 = v14[4];
      *((void *)&v36 + 1) = v25;
      swift_bridgeObjectRetain();
      sub_1003A0778((uint64_t *)&v36);
      swift_bridgeObjectRelease();
    }
    if (v27)
    {
      *(void *)&long long v36 = v26;
      *((void *)&v36 + 1) = v27;
      swift_bridgeObjectRetain();
      sub_1003A0778((uint64_t *)&v36);
      swift_bridgeObjectRelease();
    }
    if (v30)
    {
      *(void *)&long long v36 = v28;
      *((void *)&v36 + 1) = v30;
      swift_bridgeObjectRetain_n();
      sub_1003A0778((uint64_t *)&v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(void *)&long long v36 = v29;
    sub_1005E18F0();
  }
  sub_100286C18((uint64_t)v44, sub_100061440);
  return sub_1005E18F0();
}

uint64_t sub_1003A0778(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    uint64_t v1 = sub_1003B4E8C();
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v5;
    if ((v5 & 0x2000000000000000) != 0) {
      return sub_1005E18F0();
    }
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    return sub_1005E18F0();
  }
  if ((v1 & 0x1000000000000000) == 0) {
    sub_1005E2D30();
  }
  return sub_1005E18F0();
}

uint64_t sub_1003A083C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = v1[2];
  unint64_t v3 = v1[3];
  if ((int64_t)v3 >= *(void *)(v4 + 16))
  {
    uint64_t v12 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = v1[1];
  if (v3 >= *(void *)(v5 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = v5 + 16 * v3;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = v4 + 16 * v3;
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v10 = *(void *)(v9 + 40);
  v1[3] = v3 + 1;
  uint64_t v12 = v1[4];
  if (!__OFADD__(v12, 1))
  {
    v1[4] = v12 + 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_7:
    *a1 = v12;
    a1[1] = v8;
    a1[2] = v7;
    a1[3] = v11;
    a1[4] = v10;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003A0904(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (char **)(a2 + 16);
  Swift::UInt64 v4 = PCG32Random.next()();
  swift_beginAccess();
  uint64_t v5 = *(char **)(a2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v5 = sub_1003EF6CC(0, *((void *)v5 + 2) + 1, 1, v5);
  }
  *unint64_t v3 = v5;
  uint64_t v7 = 10;
  do
  {
    char v8 = a0123456789abcd[v4 % 0x3E];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v3 = v5;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1003EF6CC(0, *((void *)v5 + 2) + 1, 1, v5);
      uint64_t v5 = (char *)result;
      *unint64_t v3 = (char *)result;
    }
    unint64_t v11 = *((void *)v5 + 2);
    unint64_t v10 = *((void *)v5 + 3);
    if (v11 >= v10 >> 1)
    {
      uint64_t result = (uint64_t)sub_1003EF6CC((char *)(v10 > 1), v11 + 1, 1, v5);
      uint64_t v5 = (char *)result;
      *unint64_t v3 = (char *)result;
    }
    *((void *)v5 + 2) = v11 + 1;
    v5[v11 + 32] = v8;
    uint64_t v5 = *v3;
    v4 /= 0x3EuLL;
    --v7;
  }
  while (v7);
  return result;
}

Swift::Int sub_1003A0A64(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t result = sub_1005E1E80();
    uint64_t v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  Swift::UInt64 v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if (!isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      Swift::UInt64 v4 = sub_1003EF6CC(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *uint64_t v2 = v4;
    }
    swift_bridgeObjectRetain();
    uint64_t result = sub_1005E2C90();
    if (v9) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *uint64_t v2 = v4;
        return result;
      }
      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t static Message.makeSparse(messageHeaders:bodyStructure:lineEnding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, long long *a4@<X8>)
{
  uint64_t v5 = a2;
  unint64_t v83 = (long long *)a1;
  sub_10013AE3C(a2, (uint64_t)v88);
  sub_10013AE3C((uint64_t)v88, (uint64_t)v102);
  uint64_t v7 = type metadata accessor for Message(0);
  *(void *)&long long v78 = *(void *)(v7 - 8);
  __chkstk_darwin();
  char v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100713AB8);
  __chkstk_darwin();
  uint64_t v82 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v12 = (char *)&v67 - v11;
  uint64_t v77 = sub_1005E1920();
  uint64_t v79 = *(void *)(v77 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1005E18B0();
  uint64_t v80 = *(void *)(v15 - 8);
  uint64_t v81 = v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v87 = xmmword_100622570;
  sub_10013AF38(v5, sub_100136870);
  sub_10013AF38(v5, sub_100136870);
  sub_1005E1910();
  sub_10013AE3C(v5, (uint64_t)v90);
  BOOL v18 = sub_10013AEAC((uint64_t)v90) == 1;
  uint64_t v73 = v9;
  uint64_t v84 = v7;
  if (v18)
  {
    uint64_t v19 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v90);
    long long v20 = *(_OWORD *)(v19 + 80);
    long long v95 = *(_OWORD *)(v19 + 64);
    long long v96 = v20;
    long long v97 = *(_OWORD *)(v19 + 96);
    *(void *)&long long v98 = *(void *)(v19 + 112);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v91 = *(_OWORD *)v19;
    long long v92 = v21;
    long long v22 = *(_OWORD *)(v19 + 48);
    long long v93 = *(_OWORD *)(v19 + 32);
    long long v94 = v22;
    sub_10013AE3C((uint64_t)v102, (uint64_t)v89);
    uint64_t v23 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v89);
    uint64_t v74 = v12;
    uint64_t v24 = *(void *)(v23 + 24);
    uint64_t v25 = *(void *)(v23 + 32);
    uint64_t v70 = *(void *)(v23 + 40);
    uint64_t v71 = v25;
    unsigned int v75 = a3;
    uint64_t v76 = v5;
    uint64_t v27 = *(void *)(v23 + 48);
    uint64_t v26 = *(void *)(v23 + 56);
    uint64_t v72 = a4;
    uint64_t v29 = *(void *)(v23 + 64);
    uint64_t v28 = *(void *)(v23 + 72);
    uint64_t v68 = *(void *)(v23 + 80);
    uint64_t v69 = v28;
    long long v67 = *(_OWORD *)(v23 + 88);
    uint64_t v30 = *(void *)(v23 + 104);
    uint64_t v31 = *(void *)(v23 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = v24;
    BOOL v12 = v74;
    uint64_t v33 = v27;
    a3 = v75;
    uint64_t v34 = v26;
    uint64_t v5 = v76;
    uint64_t v35 = v29;
    a4 = v72;
    sub_100136C1C(v32, v71, v70, v33, v34, v35, v69, v68, v67, *((uint64_t *)&v67 + 1), v30, v31);
    sub_10039EAAC();
  }
  else
  {
    long long v36 = (long long *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v90);
    long long v37 = v36[9];
    long long v99 = v36[8];
    long long v100 = v37;
    long long v101 = v36[10];
    long long v38 = v36[5];
    long long v95 = v36[4];
    long long v96 = v38;
    long long v39 = v36[6];
    long long v98 = v36[7];
    long long v97 = v39;
    long long v40 = v36[1];
    long long v91 = *v36;
    long long v92 = v40;
    long long v41 = v36[3];
    long long v93 = v36[2];
    long long v94 = v41;
    sub_10013AE3C((uint64_t)v102, (uint64_t)v89);
    uint64_t v42 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v89);
    sub_10022C168(v42);
    sub_10039E844((uint64_t)&v91);
  }
  sub_10013AF38(v5, sub_100061440);
  uint64_t v43 = v77;
  uint64_t v44 = v78;
  sub_1005E1900();
  sub_10013AF38(v5, sub_100061440);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v14, v43);
  sub_10000566C(&qword_100713AC0);
  sub_1005E18A0();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v81);
  sub_10013AF38(v5, sub_100061440);
  long long v86 = v89[0];
  sub_1003A12BC((uint64_t)v83, (uint64_t)v12);
  uint64_t v45 = v84;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v12, 0, 1, v84);
  unint64_t v83 = &v67;
  __chkstk_darwin();
  uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t))&v87;
  uint64_t v46 = v82;
  sub_1003A1388((uint64_t)v12, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v46, 1, v45) == 1)
  {
    sub_1003A1FDC(v46);
    uint64_t v47 = sub_1003A17C8(a3, (uint64_t)&v86, v5, (uint64_t)&v87);
  }
  else
  {
    uint64_t v48 = (uint64_t)v73;
    sub_1003A2B68(v46, (uint64_t)v73);
    __chkstk_darwin();
    *((unsigned char *)&v67 - 48) = 3;
    *((void *)&v67 - 5) = v5;
    char v63 = a3;
    uint64_t v64 = &v86;
    uint64_t v65 = sub_1003A1380;
    uint64_t v66 = &v63;
    uint64_t v47 = (uint64_t)sub_1003D26E0(v48, (void *(*)(uint64_t *__return_ptr, void))sub_1003A2BCC, (void *)&v67 - 8);
    sub_1003A7C3C(v48);
  }
  sub_10013AE3C(v5, (uint64_t)v89);
  int v49 = sub_10013AEAC((uint64_t)v89);
  uint64_t v50 = (uint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v89);
  if (v49 != 1) {
    goto LABEL_10;
  }
  if (v47)
  {
    uint64_t v84 = *v50;
    sub_10013AE3C((uint64_t)v102, (uint64_t)v85);
    uint64_t v51 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v85);
    uint64_t v52 = *(void *)(v51 + 24);
    uint64_t v81 = *(void *)(v51 + 32);
    uint64_t v82 = v52;
    unsigned int v75 = a3;
    uint64_t v53 = *(void *)(v51 + 40);
    uint64_t v54 = *(void *)(v51 + 48);
    uint64_t v74 = v12;
    uint64_t v55 = *(void *)(v51 + 56);
    uint64_t v56 = *(void *)(v51 + 64);
    uint64_t v57 = *(void *)(v51 + 72);
    uint64_t v79 = *(void *)(v51 + 80);
    uint64_t v80 = v57;
    long long v78 = *(_OWORD *)(v51 + 88);
    uint64_t v76 = v5;
    uint64_t v58 = a4;
    uint64_t v59 = *(void *)(v51 + 104);
    uint64_t v60 = *(void *)(v51 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v66 = (char *)v60;
    a4 = v58;
    uint64_t v61 = v55;
    BOOL v12 = v74;
    sub_100136C1C(v82, v81, v53, v54, v61, v56, v80, v79, v78, *((uint64_t *)&v78 + 1), v59, (uint64_t)v66);
    sub_1003A2428(v75, v84, v47, (uint64_t)&v86, (uint64_t)&v87);
    sub_10013AF38(v76, sub_100061440);
LABEL_10:
    swift_bridgeObjectRelease();
  }
  sub_1003A1FDC((uint64_t)v12);
  *a4 = v87;
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1003A12BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A1320(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for UnsafeRawBufferPointer;
  v3[4] = &protocol witness table for UnsafeRawBufferPointer;
  v3[0] = a1;
  v3[1] = a2;
  sub_10003BCDC(v3, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  sub_1005E0870();
  return _s13IMAP2Behavior4TaskOwxx_0((uint64_t)v3);
}

uint64_t sub_1003A1380(uint64_t a1, uint64_t a2)
{
  return sub_1003A1320(a1, a2);
}

uint64_t sub_1003A1388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BodyStructure.containsMultipartPartWithMissingBoundary.getter()
{
  uint64_t v1 = v0;
  sub_10013AE3C(v0, (uint64_t)v18);
  int v2 = sub_10013AEAC((uint64_t)v18);
  uint64_t v3 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v18);
  if (v2 != 1) {
    return 0;
  }
  long long v4 = *(_OWORD *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  long long v6 = *(_OWORD *)(v3 + 48);
  void v19[2] = *(_OWORD *)(v3 + 32);
  v19[3] = v6;
  v19[0] = v4;
  v19[1] = v5;
  long long v7 = *(_OWORD *)(v3 + 64);
  long long v8 = *(_OWORD *)(v3 + 80);
  long long v9 = *(_OWORD *)(v3 + 96);
  uint64_t v20 = *(void *)(v3 + 112);
  v19[5] = v8;
  v19[6] = v9;
  v19[4] = v7;
  sub_1003A7C98((uint64_t)v19);
  uint64_t v10 = sub_1003A15A8();
  uint64_t v12 = v11;
  sub_1000B92E0(v10, v11);
  if (v12)
  {
    uint64_t v21 = *(void *)&v19[0];
    uint64_t v13 = *(void *)(*(void *)&v19[0] + 16);
    if (!v13)
    {
      sub_10013AF38(v1, sub_100061440);
      return 0;
    }
    uint64_t v14 = *(void *)&v19[0] + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10013AE3C(v14, (uint64_t)v22);
      uint64_t v15 = sub_10013AF38((uint64_t)v22, sub_100136870);
      char v16 = BodyStructure.containsMultipartPartWithMissingBoundary.getter(v15);
      sub_10013AF38((uint64_t)v22, sub_100061440);
      if (v16) {
        break;
      }
      v14 += 184;
      if (!--v13)
      {
        sub_10013AF38(v1, sub_100061440);
        sub_10001D550((uint64_t)&v21);
        return 0;
      }
    }
    sub_10013AF38(v1, sub_100061440);
    sub_10001D550((uint64_t)&v21);
  }
  else
  {
    sub_10013AF38(v1, sub_100061440);
  }
  return 1;
}

uint64_t sub_1003A15A8()
{
  sub_10001FDF0(v0 + 24, (uint64_t)v12, &qword_100713A40);
  sub_10001FDF0((uint64_t)v12, (uint64_t)&v13, &qword_100713A40);
  if (*((void *)&v13 + 1) && (v1 = v14, v15 = v14, (uint64_t v2 = *(void *)(v14 + 16)) != 0))
  {
    long long v16 = v13;
    sub_10001FDF0((uint64_t)&v16, (uint64_t)v18, &qword_100713AD0);
    uint64_t v3 = *((void *)&v16 + 1);
    uint64_t v17 = *((void *)&v16 + 1);
    uint64_t v4 = *(void *)(*((void *)&v16 + 1) + 16);
    sub_1000811BC((uint64_t)v18);
    sub_1000811BC((uint64_t)&v17);
    sub_1000811BC((uint64_t)&v15);
    sub_1000811BC((uint64_t)v18);
    sub_1000811BC((uint64_t)&v17);
    uint64_t result = sub_1000811BC((uint64_t)&v15);
    uint64_t v6 = v3 + 40;
    uint64_t v7 = v1 + 40;
    while (v4)
    {
      uint64_t v8 = *(void *)(v6 - 8);
      if (sub_1005E1CB0() == 0x797261646E756F62 && v9 == 0xE800000000000000)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_14:
        sub_1000811E8((uint64_t)v18);
        sub_1000811E8((uint64_t)&v17);
        sub_1000811E8((uint64_t)&v15);
        sub_1000811E8((uint64_t)v18);
        sub_1000811E8((uint64_t)&v17);
        sub_1000811E8((uint64_t)&v15);
        return v8;
      }
      char v11 = sub_1005E3290();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      --v4;
      v6 += 16;
      v7 += 16;
      if (!--v2)
      {
        sub_1000811E8((uint64_t)v18);
        sub_1000811E8((uint64_t)&v17);
        sub_1000811E8((uint64_t)&v15);
        sub_1000811E8((uint64_t)v18);
        sub_1000811E8((uint64_t)&v17);
        sub_1000811E8((uint64_t)&v15);
        return 0;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1003A17C8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10013AE3C(a3, (uint64_t)v61);
  sub_10013AE3C((uint64_t)v61, (uint64_t)v102);
  uint64_t v60 = a4;
  sub_10013AF38(a3, sub_100136870);
  uint64_t v8 = sub_1003A93C8((unint64_t)"Content-Type", 12, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, a3, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v59, a2);
  sub_10013AF38(a3, sub_100061440);
  sub_10013AE3C(a3, (uint64_t)v77);
  if (sub_10013AEAC((uint64_t)v77) == 1)
  {
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v77);
    sub_10013AE3C((uint64_t)v102, (uint64_t)v76);
    uint64_t v9 = (void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v76);
    if (!v9[4]) {
      goto LABEL_20;
    }
    uint64_t v10 = v9[9];
    uint64_t v11 = v9[10];
    unint64_t v12 = v9[7];
    uint64_t v13 = v9[8];
    uint64_t v14 = v9[6];
LABEL_13:
    if (v12 >= 2)
    {
      v90[0] = v14;
      v90[1] = v12;
      v90[2] = v13;
      v90[3] = v10;
      v90[4] = v11;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      sub_1003A2FB8((unint64_t)"Content-Disposition", 19, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v59, (uint64_t)v90);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_10013AE3C(a3, (uint64_t)v76);
    int v27 = sub_10013AEAC((uint64_t)v76);
    uint64_t v26 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v76);
    if (v27 == 1) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v15 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v77);
  long long v16 = v15[9];
  long long v81 = v15[8];
  long long v82 = v16;
  long long v83 = v15[10];
  long long v17 = v15[5];
  *(_OWORD *)&v78[64] = v15[4];
  *(_OWORD *)&v78[80] = v17;
  long long v18 = v15[6];
  long long v80 = v15[7];
  long long v79 = v18;
  long long v19 = v15[1];
  *(_OWORD *)long long v78 = *v15;
  *(_OWORD *)&v78[16] = v19;
  long long v20 = v15[2];
  *(_OWORD *)&v78[48] = v15[3];
  *(_OWORD *)&v78[32] = v20;
  v87[0] = *(_OWORD *)&v78[56];
  long long v86 = *(_OWORD *)&v78[40];
  v87[1] = *(_OWORD *)&v78[72];
  long long v85 = *(_OWORD *)&v78[24];
  long long v84 = *(_OWORD *)&v78[8];
  sub_10001FDF0((uint64_t)v87 + 8, (uint64_t)v88, &qword_100713AB0);
  sub_10001FDF0((uint64_t)v88, (uint64_t)&v100, &qword_100713AB0);
  uint64_t v21 = v101;
  if (v101)
  {
    uint64_t v22 = v100;
    if (v22 == sub_1005E1CD0() && v23 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v24 = sub_1005E3290();
      sub_10013AF38(a3, sub_100136870);
      sub_100057B18((uint64_t)v88);
      swift_bridgeObjectRelease();
      if (v24)
      {
        sub_10002A77C((uint64_t)v88);
        sub_10013AF38(a3, sub_100061440);
      }
      else
      {
        sub_100057B18((uint64_t)v88);
        sub_1003A2EB0((unint64_t)"Content-Transfer-Encoding", 25, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, (uint64_t)sub_1003A9CC0, (uint64_t)v59, v22, v21);
        sub_10013AF38(a3, sub_100061440);
        sub_10002A77C((uint64_t)v88);
      }
    }
  }
  sub_10013AE3C((uint64_t)v102, (uint64_t)v76);
  uint64_t v25 = (void *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v76);
  uint64_t v14 = v25[13];
  unint64_t v12 = v25[14];
  uint64_t v13 = v25[15];
  uint64_t v10 = v25[16];
  uint64_t v11 = v25[17];
  if (v25[12] != 1) {
    goto LABEL_13;
  }
  sub_10013AE3C((uint64_t)v102, (uint64_t)v76);
  uint64_t v26 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v76);
LABEL_16:
  uint64_t v29 = *(void *)(v26 + 32);
  uint64_t v28 = *(void *)(v26 + 40);
  if (v28)
  {
    swift_bridgeObjectRetain();
    sub_10013AF38(a3, sub_100136870);
    swift_bridgeObjectRetain();
    sub_1003A3114((unint64_t)"Content-ID", 10, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, (uint64_t)sub_1003A9CC0, (uint64_t)v59, v29, v28);
    sub_10013AF38(a3, sub_100061440);
    swift_bridgeObjectRelease();
    sub_10013AE3C(a3, (uint64_t)v75);
    int v30 = sub_10013AEAC((uint64_t)v75);
    uint64_t v31 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v75);
    if (v30 != 1)
    {
      uint64_t v33 = *(void *)(v31 + 48);
      unint64_t v32 = *(void *)(v31 + 56);
      if (v32) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10013AE3C((uint64_t)v102, (uint64_t)v75);
    uint64_t v58 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v75);
    uint64_t v33 = *(void *)(v58 + 48);
    unint64_t v32 = *(void *)(v58 + 56);
    if (v32)
    {
LABEL_19:
      swift_bridgeObjectRetain();
      sub_10013AF38(a3, sub_100136870);
      swift_bridgeObjectRetain();
      sub_1003A3234((unint64_t)"Content-Description", 19, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, v33, v32, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v59);
      sub_10013AF38(a3, sub_100061440);
      swift_bridgeObjectRelease();
    }
  }
LABEL_20:
  sub_1003A2238(a1, a3, a4);
  sub_10013AE3C(a3, (uint64_t)v63);
  int v34 = sub_10013AEAC((uint64_t)v63);
  uint64_t v35 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v63);
  if (v34 == 1)
  {
    long long v36 = *(_OWORD *)v35;
    long long v37 = *(_OWORD *)(v35 + 16);
    long long v38 = *(_OWORD *)(v35 + 48);
    long long v66 = *(_OWORD *)(v35 + 32);
    long long v67 = v38;
    long long v64 = v36;
    long long v65 = v37;
    long long v39 = *(_OWORD *)(v35 + 64);
    long long v40 = *(_OWORD *)(v35 + 80);
    long long v41 = *(_OWORD *)(v35 + 96);
    *(void *)&long long v71 = *(void *)(v35 + 112);
    long long v69 = v40;
    long long v70 = v41;
    long long v68 = v39;
    sub_10001FDF0((uint64_t)&v65 + 8, (uint64_t)v89, &qword_100713A40);
    sub_10001FDF0((uint64_t)v89, (uint64_t)v91, &qword_100713A40);
    if (!v92) {
      goto LABEL_34;
    }
    uint64_t v42 = v96;
    uint64_t v43 = &v99;
    uint64_t v44 = v97;
    unint64_t v45 = v98;
    if (v94 == 1) {
      goto LABEL_31;
    }
LABEL_27:
    if (v42)
    {
      uint64_t v55 = *v43;
      swift_bridgeObjectRetain();
      sub_100136BD8(v44, v45, v55);
      swift_bridgeObjectRelease();
      if (v55)
      {
        swift_bridgeObjectRelease();
        if (v45)
        {
          swift_bridgeObjectRetain();
          sub_1003A3234((unint64_t)"Content-Location", 16, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, v44, v45, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v59);
          swift_bridgeObjectRelease();
        }
      }
    }
LABEL_31:
    sub_10013AE3C(a3, (uint64_t)v62);
    int v56 = sub_10013AEAC((uint64_t)v62);
    uint64_t v54 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v62);
    if (v56 == 1) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  long long v46 = *(_OWORD *)v35;
  long long v47 = *(_OWORD *)(v35 + 32);
  long long v65 = *(_OWORD *)(v35 + 16);
  long long v66 = v47;
  long long v64 = v46;
  long long v48 = *(_OWORD *)(v35 + 48);
  long long v49 = *(_OWORD *)(v35 + 64);
  long long v50 = *(_OWORD *)(v35 + 96);
  long long v69 = *(_OWORD *)(v35 + 80);
  long long v70 = v50;
  long long v67 = v48;
  long long v68 = v49;
  long long v51 = *(_OWORD *)(v35 + 112);
  long long v52 = *(_OWORD *)(v35 + 128);
  long long v53 = *(_OWORD *)(v35 + 160);
  long long v73 = *(_OWORD *)(v35 + 144);
  long long v74 = v53;
  long long v71 = v51;
  long long v72 = v52;
  sub_10001FDF0((uint64_t)&v69 + 8, (uint64_t)v89, &qword_100713A50);
  sub_10001FDF0((uint64_t)v89, (uint64_t)v91, &qword_100713A50);
  if (v92 != 1)
  {
    uint64_t v42 = v95;
    uint64_t v43 = (uint64_t *)&v98;
    uint64_t v44 = v96;
    unint64_t v45 = v97;
    if (v93 == 1) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  sub_10013AE3C((uint64_t)v102, (uint64_t)v62);
  uint64_t v54 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v62);
LABEL_32:
  if (*(uint64_t *)(v54 + 80) >= 1)
  {
    sub_10013AF38(a3, sub_100136870);
    sub_1003A3314((unint64_t)"X-Apple-Content-Length", 22, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v59, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v59);
    sub_10013AF38(a3, sub_100061440);
  }
LABEL_34:
  sub_1003C877C(a1);
  return v8;
}

uint64_t sub_1003A1FDC(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100713AB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003A203C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, void (*a10)(uint64_t, char *), uint64_t a11)
{
  sub_1003CAB74(a5, a1, a2, a3);
  if (v19) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = v18;
  }
  sub_1003D51BC(a5, a1, a2, a3, a4, v20);
  unsigned int v31 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_10013AE3C(a6, (uint64_t)v35);
  BOOL v28 = sub_10013AEAC((uint64_t)v35) != 1;
  UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v35);
  uint64_t v34 = 0;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = &v34;
  sub_10013AF38(a6, sub_100136870);
  sub_1003E27BC(a7, v28, 1, (void (*)(void))sub_1003A99A8, v29, a10, a11, v31, v23, v25, v27, a6, a7, a8, (uint64_t (*)(unint64_t, unint64_t))a10, a11);
  sub_10013AF38(a6, sub_100061440);
  uint64_t result = swift_release();
  *a9 = v34;
  return result;
}

uint64_t sub_1003A21FC(uint64_t a1, void *a2)
{
  *a2 = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A2238(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  sub_10013AE3C(a2, (uint64_t)v28);
  int v4 = sub_10013AEAC((uint64_t)v28);
  uint64_t v5 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v28);
  if (v4 == 1)
  {
    long long v6 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v8 = *(_OWORD *)(v5 + 48);
    long long v31 = *(_OWORD *)(v5 + 32);
    long long v32 = v8;
    long long v29 = v6;
    long long v30 = v7;
    long long v9 = *(_OWORD *)(v5 + 64);
    long long v10 = *(_OWORD *)(v5 + 80);
    long long v11 = *(_OWORD *)(v5 + 96);
    *(void *)&long long v36 = *(void *)(v5 + 112);
    long long v34 = v10;
    long long v35 = v11;
    long long v33 = v9;
    sub_10001FDF0((uint64_t)&v30 + 8, (uint64_t)v40, &qword_100713A40);
    uint64_t result = sub_10001FDF0((uint64_t)v40, (uint64_t)v41, &qword_100713A40);
    if (!v42) {
      return result;
    }
    uint64_t v13 = v46;
    uint64_t v14 = v47;
    uint64_t v15 = &v49;
    uint64_t v16 = v48;
    if (v44 == 1) {
      return result;
    }
  }
  else
  {
    long long v17 = *(_OWORD *)v5;
    long long v18 = *(_OWORD *)(v5 + 32);
    long long v30 = *(_OWORD *)(v5 + 16);
    long long v31 = v18;
    long long v29 = v17;
    long long v19 = *(_OWORD *)(v5 + 48);
    long long v20 = *(_OWORD *)(v5 + 64);
    long long v21 = *(_OWORD *)(v5 + 96);
    long long v34 = *(_OWORD *)(v5 + 80);
    long long v35 = v21;
    long long v32 = v19;
    long long v33 = v20;
    long long v22 = *(_OWORD *)(v5 + 112);
    long long v23 = *(_OWORD *)(v5 + 128);
    long long v24 = *(_OWORD *)(v5 + 160);
    long long v38 = *(_OWORD *)(v5 + 144);
    long long v39 = v24;
    long long v36 = v22;
    long long v37 = v23;
    sub_10001FDF0((uint64_t)&v34 + 8, (uint64_t)v40, &qword_100713A50);
    uint64_t result = sub_10001FDF0((uint64_t)v40, (uint64_t)v41, &qword_100713A50);
    if (v42 == 1) {
      return result;
    }
    uint64_t v13 = v45;
    uint64_t v14 = (uint64_t)v46;
    uint64_t v15 = &v48;
    uint64_t v16 = v47;
    if (v43 == 1) {
      return result;
    }
  }
  if (v13)
  {
    uint64_t v25 = *v15;
    swift_bridgeObjectRetain();
    sub_100136BD8(v14, v16, v25);
    sub_1000617A8(v14, v16, v25);
    if (v13[2])
    {
      swift_bridgeObjectRetain();
      sub_1003A2DD0((unint64_t)"Content-Language", 16, 2, a1, (uint64_t (*)(unint64_t, unint64_t))sub_1003A9CC0, (uint64_t)v26, v13, (uint64_t (*)(char *, char *))sub_1003A9CC0, (uint64_t)v26);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003A2428(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = a4;
  uint64_t v61 = type metadata accessor for Message(0);
  uint64_t v9 = *(void *)(v61 - 8);
  __chkstk_darwin();
  uint64_t v44 = (uint64_t)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100713AB8);
  __chkstk_darwin();
  unint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin();
  uint64_t v64 = (uint64_t)v42 - v14;
  v67[2] = a5;
  uint64_t v60 = *(void *)(a2 + 16);
  if (v60)
  {
    unsigned int v63 = a1;
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v59 = a2 + 32;
    v42[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v65 = 0;
    uint64_t v57 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v58 = 0;
    int v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v43 = v12;
    do
    {
      uint64_t v17 = v65;
      uint64_t v18 = v59 + 184 * v65;
      sub_10013AE3C(v18, (uint64_t)v73);
      sub_10013AE3C(v18, (uint64_t)v72);
      if (v17)
      {
        unsigned int v19 = v63;
        if ((_BYTE)v63)
        {
          if (v63 == 1) {
            char v20 = 13;
          }
          else {
            char v20 = 10;
          }
          char v66 = v20;
          long long v70 = &type metadata for UnsafeRawBufferPointer;
          long long v71 = &protocol witness table for UnsafeRawBufferPointer;
          long long v68 = &v66;
          long long v69 = (char *)v67;
        }
        else
        {
          long long v70 = &type metadata for UnsafeRawBufferPointer;
          long long v71 = &protocol witness table for UnsafeRawBufferPointer;
          long long v68 = "\r\n";
          long long v69 = "";
        }
        sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
        sub_10013AF38((uint64_t)v73, sub_100136870);
        sub_1005E0870();
        _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
      }
      else
      {
        sub_10013AF38((uint64_t)v73, sub_100136870);
        unsigned int v19 = v63;
      }
      long long v70 = &type metadata for UnsafeRawBufferPointer;
      long long v71 = &protocol witness table for UnsafeRawBufferPointer;
      long long v68 = "--";
      long long v69 = "";
      sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      sub_1005E0870();
      _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
      if (v15)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(unsigned __int8 *)(a3 + i + 32) - 127 > 0xFFFFFFA0)
          {
            char v66 = *(unsigned char *)(a3 + i + 32);
            long long v70 = &type metadata for UnsafeRawBufferPointer;
            long long v71 = &protocol witness table for UnsafeRawBufferPointer;
            long long v68 = &v66;
            long long v69 = (char *)v67;
            sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
            sub_1005E0870();
            _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
          }
        }
        swift_bridgeObjectRelease();
      }
      if ((_BYTE)v19)
      {
        if (v19 == 1) {
          char v22 = 13;
        }
        else {
          char v22 = 10;
        }
        char v66 = v22;
        long long v70 = &type metadata for UnsafeRawBufferPointer;
        long long v71 = &protocol witness table for UnsafeRawBufferPointer;
        long long v68 = &v66;
        long long v69 = (char *)v67;
      }
      else
      {
        long long v70 = &type metadata for UnsafeRawBufferPointer;
        long long v71 = &protocol witness table for UnsafeRawBufferPointer;
        long long v68 = "\r\n";
        long long v69 = "";
      }
      sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      sub_1005E0870();
      _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
      uint64_t v23 = v64;
      uint64_t v24 = v61;
      (*v57)(v64, 1, 1, v61);
      sub_1003A1388(v23, (uint64_t)v12);
      if ((*v56)(v12, 1, v24) == 1)
      {
        sub_1003A1FDC((uint64_t)v12);
        uint64_t v25 = sub_1003A17C8(v19, v62, (uint64_t)v73, a5);
      }
      else
      {
        uint64_t v26 = (uint64_t)v12;
        uint64_t v27 = v44;
        sub_1003A2B68(v26, v44);
        sub_10013AF38((uint64_t)v73, sub_100136870);
        uint64_t v28 = v58;
        uint64_t v25 = sub_1003D2DC4(v27, 3, (uint64_t)v73, v19, v62, (void (*)(uint64_t, char *))sub_1003A9CC0, (uint64_t)v67);
        uint64_t v58 = v28;
        sub_10013AF38((uint64_t)v73, sub_100061440);
        uint64_t v29 = v27;
        unint64_t v12 = v43;
        sub_1003A7C3C(v29);
      }
      sub_10013AE3C((uint64_t)v73, (uint64_t)v74);
      int v30 = sub_10013AEAC((uint64_t)v74);
      long long v31 = (uint64_t *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v74);
      if (v30 == 1)
      {
        if (v25)
        {
          uint64_t v55 = *v31;
          sub_10013AE3C((uint64_t)v72, (uint64_t)&v68);
          uint64_t v32 = UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)&v68);
          uint64_t v33 = *(void *)(v32 + 16);
          uint64_t v34 = *(void *)(v32 + 24);
          uint64_t v53 = *(void *)(v32 + 32);
          uint64_t v54 = v34;
          uint64_t v35 = *(void *)(v32 + 40);
          uint64_t v51 = *(void *)(v32 + 48);
          uint64_t v52 = v35;
          uint64_t v36 = *(void *)(v32 + 56);
          uint64_t v49 = *(void *)(v32 + 64);
          uint64_t v50 = v36;
          uint64_t v48 = *(void *)(v32 + 72);
          uint64_t v37 = *(void *)(v32 + 80);
          uint64_t v46 = v33;
          uint64_t v47 = v37;
          long long v45 = *(_OWORD *)(v32 + 88);
          uint64_t v39 = *(void *)(v32 + 104);
          uint64_t v38 = *(void *)(v32 + 112);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100136C1C(v54, v53, v52, v51, v50, v49, v48, v47, v45, *((uint64_t *)&v45 + 1), v39, v38);
          sub_1003A2428(v63, v55, v25, v62, a5);
          sub_10013AF38((uint64_t)v73, sub_100061440);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_10013AF38((uint64_t)v73, sub_100061440);
      uint64_t v16 = v65 + 1;
      sub_1003A1FDC(v64);
      uint64_t v65 = v16;
    }
    while (v16 != v60);
    swift_bridgeObjectRelease();
    char v40 = v63;
    sub_1003C877C(v63);
    long long v70 = &type metadata for UnsafeRawBufferPointer;
    long long v71 = &protocol witness table for UnsafeRawBufferPointer;
    long long v68 = "--";
    long long v69 = "";
    sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    sub_1005E0870();
    _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
    if (v15)
    {
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(unsigned __int8 *)(a3 + j + 32) - 127 > 0xFFFFFFA0)
        {
          char v66 = *(unsigned char *)(a3 + j + 32);
          long long v70 = &type metadata for UnsafeRawBufferPointer;
          long long v71 = &protocol witness table for UnsafeRawBufferPointer;
          long long v68 = &v66;
          long long v69 = (char *)v67;
          sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          sub_1005E0870();
          _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
        }
      }
      swift_bridgeObjectRelease();
    }
    long long v70 = &type metadata for UnsafeRawBufferPointer;
    long long v71 = &protocol witness table for UnsafeRawBufferPointer;
    long long v68 = "--";
    long long v69 = "";
    sub_10003BCDC(&v68, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    sub_1005E0870();
    _s13IMAP2Behavior4TaskOwxx_0((uint64_t)&v68);
    return sub_1003C877C(v40);
  }
  return result;
}

uint64_t sub_1003A2B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A2BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1003A203C(a1, a2, a3, a4, *(unsigned __int8 *)(v5 + 16), *(void *)(v5 + 24), *(unsigned __int8 *)(v5 + 32), *(void *)(v5 + 40), a5, *(void (**)(uint64_t, char *))(v5 + 48), *(void *)(v5 + 56));
}

uint64_t sub_1003A2C04(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = 0;
  v13[5] = v7;
  __int16 v14 = 256;
  swift_bridgeObjectRetain();
  do
  {
    while (1)
    {
      uint64_t v9 = sub_1005E1DC0();
      if (v9 < 0) {
        __break(1u);
      }
      uint64_t v10 = v9;
      if (v9 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0) {
        break;
      }
      __chkstk_darwin();
      sub_1003A4988((uint64_t)v13 - v8, (uint64_t)v13 + v10 - v8, 0, v4, a3, a4, (char *)&v14);
      if ((v14 & 0x100) != 0) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v11 = swift_slowAlloc();
    sub_1003A4988(v11, v11 + v10, 0, v4, a3, a4, (char *)&v14);
    swift_slowDealloc();
  }
  while ((v14 & 0x100) == 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A2DD0(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, void *a7, uint64_t (*a8)(char *, char *), uint64_t a9)
{
  v16[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(a2, 2))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 + 2;
  sub_1003A3988((uint64_t)v16, a7, a8, a9);
  sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A2EB0(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v17[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(a2, 2))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v18 = a2 + 2;
  swift_bridgeObjectRetain();
  sub_1003A99E8(a7, a8, 160, 0, (uint64_t)v17, a9, a10, (void (*)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003A582C);
  swift_bridgeObjectRelease();
  sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A2FB8(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t (*a7)(char *, char *), uint64_t a8, uint64_t a9)
{
  v19[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
  }
  else if (!__OFADD__(a2, 2))
  {
    uint64_t v20 = a2 + 2;
    long long v21 = *(_OWORD *)a9;
    uint64_t v16 = *(void *)(a9 + 16);
    uint64_t v17 = *(void *)(a9 + 24);
    uint64_t v18 = *(void *)(a9 + 32);
    sub_100057B18((uint64_t)&v21);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1003A9488(a7, a8, 160, 0, (uint64_t)v19, a9);
    sub_10002A77C((uint64_t)&v21);
    swift_release();
    swift_release();
    swift_release();
    sub_1003A359C(v16, v17, v18, a7, a8);
    sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
    sub_10002A77C((uint64_t)&v21);
    swift_release();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_1003A3114(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v18[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFADD__(a2, 2))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v19 = a2 + 2;
  uint64_t result = sub_1005E1DC0();
  uint64_t v17 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  sub_1003A99E8(a7, a8, v17, 0, (uint64_t)v18, a9, a10, (void (*)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1003A5330);
  swift_bridgeObjectRelease();
  sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A3234(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t (*a9)(char *, char *), uint64_t a10)
{
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(a2, 2))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_1003A2C04(a7, a8, a9, a10);
  sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A3314(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t (*a7)(char *, char *), uint64_t a8)
{
  v15[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__OFADD__(a2, 2))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 + 2;
  sub_1003A33E4(a7, a8, 70, 0, (uint64_t)v15);
  return sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
}

uint64_t *sub_1003A33E4(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if (v6 < 0) {
    goto LABEL_10;
  }
  if (v6 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    return sub_1003A63F4((uint64_t)&v12 - v9, (uint64_t)&v12 + v6 - v9, a4 & 1, a5, a1);
  }
  else
  {
    uint64_t v11 = swift_slowAlloc();
    sub_1003A63F4(v11, v11 + v6, a4 & 1, a5, a1);
    return (uint64_t *)swift_slowDealloc();
  }
}

uint64_t sub_1003A359C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *), uint64_t a5)
{
  uint64_t v31 = a5;
  int v30 = a4;
  uint64_t v5 = a3;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1003A083C(v45);
  sub_10001FDF0((uint64_t)v45, (uint64_t)v46, &qword_100713AD8);
  unint64_t v6 = v47;
  if (v47)
  {
    uint64_t v29 = v5;
    do
    {
      uint64_t v10 = v46[0] + 1;
      if (__OFADD__(v46[0], 1)) {
        goto LABEL_17;
      }
      uint64_t v11 = v46[1];
      uint64_t v13 = v48;
      uint64_t v12 = v49;
      uint64_t v14 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1003A676C(v11, v6, v13, v12, v10 == v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15 <= 78)
      {
        BOOL v7 = v10 == v14;
        unint64_t v8 = v12;
        char v9 = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1003A8670(v30, v31, 160, 1, v32, v11, v6, v13, v8, v9);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_1005E1F50();
        unint64_t v18 = v17;
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        uint64_t v36 = v16;
        unint64_t v37 = v18;
        uint64_t v38 = v20;
        uint64_t v39 = v22;
        if ((v16 ^ v18) >= 0x4000)
        {
          v28[2] = v12;
          uint64_t v23 = 0;
          while (1)
          {
            uint64_t v34 = v11;
            unint64_t v35 = v6;
            swift_bridgeObjectRetain();
            v50._countAndFlagsBits = 42;
            v50._object = (void *)0xE100000000000000;
            sub_1005E1E30(v50);
            uint64_t v33 = v23;
            v51._countAndFlagsBits = sub_1005E3230();
            sub_1005E1E30(v51);
            swift_bridgeObjectRelease();
            uint64_t v24 = v34;
            unint64_t v25 = v35;
            uint64_t v34 = 77;
            swift_bridgeObjectRetain();
            __chkstk_darwin();
            sub_1003A4B88((uint64_t)&v27, (uint64_t)v28 + 1, 1, v32, v30, v31, &v34, v24, v25, (unint64_t *)&v36, v10 == v14);
            swift_bridgeObjectRelease();
            if (__OFADD__(v23, 1)) {
              break;
            }
            ++v23;
            if (!((v37 ^ v36) >> 14)) {
              goto LABEL_14;
            }
          }
          __break(1u);
LABEL_17:
          __break(1u);
        }
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v29;
        swift_bridgeObjectRelease();
      }
      sub_1003A083C(v45);
      sub_10001FDF0((uint64_t)v45, (uint64_t)v46, &qword_100713AD8);
      unint64_t v6 = v47;
    }
    while (v47);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1003A3988(uint64_t result, void *a2, uint64_t (*a3)(char *, char *), uint64_t a4)
{
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v8 = result;
    uint64_t v9 = a2[5];
    uint64_t v17 = a2[4];
    swift_bridgeObjectRetain_n();
    unint64_t v18 = a2;
    swift_bridgeObjectRetain();
    __chkstk_darwin();
    swift_bridgeObjectRetain();
    uint64_t v19 = v8;
    uint64_t v20 = a3;
    sub_1003A55A0((uint64_t)&v15, (uint64_t)&v17, 0, v8, a3, a4, v17, v9, v4 == 1);
    swift_bridgeObjectRelease_n();
    uint64_t v10 = v4 - 1;
    if (v10)
    {
      uint64_t v11 = v18 + 7;
      do
      {
        uint64_t v12 = *(v11 - 1);
        uint64_t v13 = *v11;
        swift_bridgeObjectRetain_n();
        __chkstk_darwin();
        swift_bridgeObjectRetain();
        sub_1003A55A0((uint64_t)v14, (uint64_t)v16, 1, v19, v20, a4, v12, v13, v10 == 1);
        v11 += 2;
        swift_bridgeObjectRelease_n();
        --v10;
      }
      while (v10);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003A3B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v8 = a2;
  sub_10013AE3C(a2, (uint64_t)v67);
  int v11 = sub_10013AEAC((uint64_t)v67);
  uint64_t v12 = (_OWORD *)UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v67);
  if (v11 != 1)
  {
    long long v23 = *v12;
    long long v24 = v12[2];
    long long v69 = v12[1];
    long long v70 = v24;
    long long v68 = v23;
    long long v25 = v12[3];
    long long v26 = v12[4];
    long long v27 = v12[6];
    long long v73 = v12[5];
    long long v74 = v27;
    long long v71 = v25;
    long long v72 = v26;
    long long v28 = v12[7];
    long long v29 = v12[8];
    long long v30 = v12[10];
    long long v77 = v12[9];
    long long v78 = v30;
    long long v75 = v28;
    long long v76 = v29;
    sub_100232248(&v68, &v64);
    sub_100232248(&v64, v79);
    if (v79[0] >> 62)
    {
      uint64_t v31 = (void *)(v79[0] & 0x3FFFFFFFFFFFFFFFLL);
      if (v79[0] >> 62 == 1)
      {
        v79[0] &= 0x3FFFFFFFFFFFFFFFuLL;
        memcpy(__dst, v31 + 2, sizeof(__dst));
        sub_10013AF38(v8, sub_100136870);
        sub_100286C8C((uint64_t)&v64);
        sub_100223E88((uint64_t)__dst);
        sub_1003A8BAC(a3, a4, 160, 0, a1, (long long *)__dst, (uint64_t)&v68);
        sub_10013AF38(v8, sub_100061440);
        uint64_t v32 = *((void *)&v68 + 1);
        long long v33 = v69;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1003A359C(v32, v33, *((uint64_t *)&v33 + 1), a3, a4);
        swift_release();
        swift_release();
        swift_release();
        sub_100224004((uint64_t)__dst);
LABEL_22:
        uint64_t result = sub_100286CBC((uint64_t)&v64);
        *a6 = 0;
        return result;
      }
      v79[0] &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v53 = v31[2];
      unint64_t v54 = v31[3];
      uint64_t v55 = v31[4];
      sub_10013AF38(v8, sub_100136870);
      sub_100286C8C((uint64_t)&v64);
      swift_bridgeObjectRetain();
      sub_1003A8DF0(a3, a4, 160, 0, a1, v53, v54, v55, (uint64_t)&v68);
      sub_10013AF38(v8, sub_100061440);
    }
    else
    {
      v79[0] &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v49 = *(void *)(v79[0] + 16);
      unint64_t v50 = *(void *)(v79[0] + 24);
      uint64_t v51 = *(void *)(v79[0] + 32);
      unint64_t v52 = *(void *)(v79[0] + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10013AF38(v8, sub_100136870);
      sub_100286C8C((uint64_t)&v64);
      sub_1003A7F9C(a3, a4, 160, 0, a1, v49, v50, v51, v52, (uint64_t)&v68);
      sub_10013AF38(v8, sub_100061440);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = *((void *)&v68 + 1);
    long long v57 = v69;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1003A359C(v56, v57, *((uint64_t *)&v57 + 1), a3, a4);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_22;
  }
  long long v13 = *v12;
  long long v14 = v12[1];
  long long v15 = v12[3];
  *(_OWORD *)&__dst[32] = v12[2];
  *(_OWORD *)&__dst[48] = v15;
  *(_OWORD *)__dst = v13;
  *(_OWORD *)&__dst[16] = v14;
  long long v16 = v12[4];
  long long v17 = v12[5];
  long long v18 = v12[6];
  *(void *)&__dst[112] = *((void *)v12 + 14);
  *(_OWORD *)&__dst[80] = v17;
  *(_OWORD *)&__dst[96] = v18;
  *(_OWORD *)&__dst[64] = v16;
  sub_1003A7C98((uint64_t)__dst);
  sub_1003A9058(a3, a4, 160, 0, a1, (uint64_t)__dst);
  LOBYTE(v68) = 59;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  a3((char *)&v68, (char *)&v68 + 1);
  sub_10001FDF0((uint64_t)&__dst[24], (uint64_t)v79, &qword_100713A40);
  sub_10001FDF0((uint64_t)v79, (uint64_t)&v68, &qword_100713A40);
  uint64_t v19 = *((void *)&v68 + 1);
  if (*((void *)&v68 + 1))
  {
    uint64_t v20 = v68;
    uint64_t v21 = v69;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v22 = v20;
  }
  else
  {
    uint64_t v22 = sub_1003A9284((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = v34;
    uint64_t v21 = v35;
  }
  uint64_t v64 = v22;
  uint64_t v65 = v19;
  uint64_t v66 = v21;
  uint64_t v36 = *(void *)(v21 + 16);
  if (v36)
  {
    uint64_t v59 = v8;
    uint64_t v60 = a6;
    uint64_t v37 = *(void *)(v19 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v38 = 0;
    while (1)
    {
      if (!v37) {
        __break(1u);
      }
      uint64_t v39 = *(void *)(v21 + v38 + 32);
      unint64_t v40 = *(void *)(v21 + v38 + 40);
      if (sub_1005E1CB0() == 0x797261646E756F62 && v41 == 0xE800000000000000) {
        break;
      }
      char v43 = sub_1005E3290();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v37;
      v38 += 16;
      if (!--v36)
      {
        swift_release_n();
        swift_release_n();
        swift_release_n();
        uint64_t v8 = v59;
        a6 = v60;
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    long long v45 = sub_1003A7BA0(v39, v40);
    swift_bridgeObjectRelease();
    uint64_t v8 = v59;
    a6 = v60;
  }
  else
  {
LABEL_18:
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = _swiftEmptyArrayStorage;
    sub_1003A0904(a5, v44);
    sub_1003A0904(a5, v44);
    swift_beginAccess();
    sub_1003A0A64(0xD000000000000016, 0x80000001005E9910);
    swift_endAccess();
    sub_1003A0904(a5, v44);
    long long v45 = *(void **)(v44 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1005E1D70();
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    sub_1003A43CC(v46, v48, 0x797261646E756F62, 0xE800000000000000);
  }
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1003A359C(v64, v65, v66, v61, v62);
  swift_release();
  swift_release();
  swift_release();
  sub_10013AF38(v8, sub_100061440);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a6 = v45;
  return result;
}

uint64_t sub_1003A42BC(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  sub_1003A7DF8(a3, a4, (void (*)(char *, void *))a1);
  swift_bridgeObjectRelease();
  char v15 = 47;
  a1(&v15, (char *)&v16);
  swift_bridgeObjectRetain();
  sub_1003A7DF8(a5, a6, (void (*)(char *, void *))a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(a7 + 24) + 16))
  {
    char v14 = 59;
    return a1(&v14, &v15);
  }
  return result;
}

uint64_t sub_1003A43CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)v4[1];
  swift_retain();
  swift_retain();
  unint64_t v11 = sub_100383808(a3, a4, v9, v10);
  char v13 = v12;
  unint64_t v15 = v14;
  swift_release();
  swift_release();
  if (v13)
  {
    if (a2)
    {
      swift_bridgeObjectRetain();
      sub_1003A6F90(a3, a4);
      uint64_t v21 = v4[2];
      v4 += 2;
      uint64_t v20 = v21;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v4 = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1003F0884(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = *v4;
      }
      unint64_t v15 = *(void *)(v20 + 16);
      unint64_t v17 = *(void *)(v20 + 24);
      uint64_t v16 = (char *)(v15 + 1);
      if (v15 < v17 >> 1) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (a2)
    {
      uint64_t v16 = (char *)v4[2];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_1003A7314((uint64_t)v16);
      }
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        unint64_t v17 = *((void *)v16 + 2);
        if (v11 < v17)
        {
          long long v18 = &v16[16 * v11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((void *)v18 + 4) = a1;
          *((void *)v18 + 5) = a2;
          swift_bridgeObjectRelease_n();
          uint64_t result = swift_bridgeObjectRelease();
          v4[2] = (uint64_t)v16;
          return result;
        }
      }
      __break(1u);
LABEL_19:
      sub_1003F0884((char *)(v17 > 1), (int64_t)v16, 1);
      uint64_t v20 = *v4;
LABEL_12:
      *(void *)(v20 + 16) = v16;
      unint64_t v23 = v20 + 16 * v15;
      *(void *)(v23 + 32) = a1;
      *(void *)(v23 + 40) = a2;
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v4 = v20;
      return result;
    }
    sub_1003A710C(v11, v15);
    swift_bridgeObjectRelease();
    sub_1003A728C(v11);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1003A45DC()
{
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v0 = sub_1005E1E70();
    unint64_t v2 = v1;
    if (!v1) {
      goto LABEL_15;
    }
    unint64_t v3 = v0;
    if ((v0 != 2573 || v1 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
    {
      if ((sub_1005E1A00() & 1) == 0) {
        goto LABEL_16;
      }
      unint64_t result = sub_100374D14(v3, v2);
      if ((result & 0x100000000) != 0) {
        goto LABEL_18;
      }
      if ((result & 0xFFFFFF80) != 0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
LABEL_15:
        swift_bridgeObjectRelease();
        return v2 == 0;
      }
      unint64_t result = sub_100374D14(v3, v2);
      if ((result & 0x100000000) != 0) {
        goto LABEL_19;
      }
      if ((result & 0xFFFFFF00) != 0) {
        break;
      }
    }
    __int16 v5 = sub_1003A4734(v3, v2);
    swift_bridgeObjectRelease();
    if ((v5 & 0x100) != 0
      || v5 - 127 < 0xFFFFFFA2
      || v5 - 34 <= 0x3B
      && ((1 << (v5 - 34)) & 0xE0000007F0024C1) != 0)
    {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1003A4734(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unsigned __int8 v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v4 = sub_1005E1EC0();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        unsigned __int8 v4 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      }
      else {
        unsigned __int8 v4 = *(unsigned char *)sub_1005E2D30();
      }
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

uint64_t sub_1003A47C8(void (*a1)(char *, char *), uint64_t a2, char *a3)
{
  if ((a3[1] & 1) == 0)
  {
    char v5 = *a3;
    *(_WORD *)a3 = 256;
    char v14 = v5;
    a1(&v14, &v15);
  }
  uint64_t result = sub_1005E1E70();
  if (v7)
  {
    unint64_t v8 = result;
    unint64_t v9 = v7;
    do
    {
      if ((v8 != 2573 || v9 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
      {
        if ((sub_1005E1A00() & 1) == 0) {
          goto LABEL_5;
        }
        unint64_t v11 = sub_100374D14(v8, v9);
        if ((v11 & 0x100000000) != 0) {
          goto LABEL_23;
        }
        if ((v11 & 0xFFFFFF80) != 0)
        {
LABEL_5:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        unint64_t v12 = sub_100374D14(v8, v9);
        if ((v12 & 0x100000000) != 0) {
          goto LABEL_24;
        }
        if ((v12 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
        }
      }
      __int16 v13 = sub_1003A4734(v8, v9);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v13 & 0x100) == 0)
      {
        if (v13 == 32 || v13 == 9)
        {
          *(_WORD *)a3 = v13;
          return result;
        }
        if (v13 - 127 >= 0xFFFFFFA2)
        {
          char v15 = v13;
          a1(&v15, (char *)&v16);
        }
      }
LABEL_6:
      uint64_t result = sub_1005E1E70();
      unint64_t v8 = result;
      unint64_t v9 = v10;
    }
    while (v10);
  }
  return result;
}

uint64_t *sub_1003A4988(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, char *a7)
{
  if (a1) {
    uint64_t v12 = a2 - a1;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v12 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v14 = (uint64_t)result;
  result[2] = 0;
  result[3] = v12;
  result[4] = a1;
  result[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  sub_1003A47C8((void (*)(char *, char *))sub_1003A7DF0, v14, a7);
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 < 1) {
    goto LABEL_13;
  }
  BOOL v17 = __OFADD__(v16, v15);
  uint64_t v18 = v16 + v15;
  if (v17)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v18 < 79)
  {
LABEL_13:
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v20 = a1 + v15;
      }
      else {
        uint64_t v20 = 0;
      }
      a5((char *)a1, (char *)v20);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v15, a1, a2);
      uint64_t v21 = *(void *)(a4 + 8);
      BOOL v17 = __OFADD__(v21, result);
      uint64_t v22 = (char *)result + v21;
      if (!v17) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v15 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v19 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = 0;
LABEL_22:
    if (a1) {
      uint64_t v23 = a1 + v15;
    }
    else {
      uint64_t v23 = 0;
    }
    if (a1) {
      uint64_t v24 = a1 + v19;
    }
    else {
      uint64_t v24 = 0;
    }
    a5((char *)v24, (char *)v23);
    uint64_t result = (uint64_t *)sub_1001F94DC(v19, v15, a1, a2);
    uint64_t v22 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(a4 + 8) = v22;
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t *sub_1003A4B88(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t *a7, uint64_t a8, unint64_t a9, unint64_t *a10, char a11)
{
  if (a1) {
    uint64_t v17 = a2 - a1;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v17 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v19 = (uint64_t)result;
  uint64_t v30 = a4;
  result[2] = 0;
  result[3] = v17;
  result[4] = a1;
  result[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  sub_1003A6BA4((void (*)(char *, uint64_t *))sub_1003A7DF0, v19, a7, a8, a9, a10, a11 & 1);
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)(a4 + 8);
  if (v21 < 1) {
    goto LABEL_13;
  }
  BOOL v22 = __OFADD__(v21, v20);
  uint64_t v23 = v21 + v20;
  if (v22)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v23 < 79)
  {
LABEL_13:
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v25 = a1 + v20;
      }
      else {
        uint64_t v25 = 0;
      }
      a5((char *)a1, (char *)v25);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v20, a1, a2);
      uint64_t v26 = *(void *)(a4 + 8);
      BOOL v22 = __OFADD__(v26, result);
      long long v27 = (char *)result + v26;
      if (!v22) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v20 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v24 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = 0;
LABEL_22:
    if (a1) {
      uint64_t v28 = a1 + v20;
    }
    else {
      uint64_t v28 = 0;
    }
    if (a1) {
      uint64_t v29 = a1 + v24;
    }
    else {
      uint64_t v29 = 0;
    }
    a5((char *)v29, (char *)v28);
    uint64_t result = (uint64_t *)sub_1001F94DC(v24, v20, a1, a2);
    long long v27 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(v30 + 8) = v27;
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1003A4DB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  if (a1) {
    uint64_t v16 = a2 - a1;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (uint64_t *)swift_allocObject();
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v18 = v17;
  v17[2] = 0;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v17);
  }
  sub_1003A7DF8(a7, a8, (void (*)(char *, void *))sub_1003A7DF0);
  char v34 = 61;
  sub_1003A6600((uint64_t)&v34, (uint64_t)v35, v18);
  sub_1003A8490(a9, a10, (void (*)(char *, char *))sub_1003A7DF0);
  if ((a11 & 1) == 0)
  {
    char v34 = 59;
    sub_1003A6600((uint64_t)&v34, (uint64_t)v35, v18);
  }
  swift_beginAccess();
  uint64_t v19 = v18[2];
  uint64_t v20 = *(void *)(a4 + 8);
  if (v20 >= 1)
  {
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (a3)
      {
        if (v19 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        uint64_t v23 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0) {
        goto LABEL_37;
      }
      uint64_t v23 = 0;
LABEL_24:
      if (a1) {
        uint64_t v28 = (char *)(a1 + v19);
      }
      else {
        uint64_t v28 = 0;
      }
      if (a1) {
        uint64_t v29 = (char *)(a1 + v23);
      }
      else {
        uint64_t v29 = 0;
      }
      a5(v29, v28);
      uint64_t v30 = sub_1001F94DC(v23, v19, a1, a2);
      uint64_t v27 = v30 + 1;
      if (!__OFADD__(v30, 1)) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
  }
  if (v19 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1) {
    uint64_t v24 = (char *)(a1 + v19);
  }
  else {
    uint64_t v24 = 0;
  }
  a5((char *)a1, v24);
  uint64_t v25 = sub_1001F94DC(0, v19, a1, a2);
  uint64_t v26 = *(void *)(a4 + 8);
  BOOL v21 = __OFADD__(v26, v25);
  uint64_t v27 = v26 + v25;
  if (v21)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(void *)(a4 + 8) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A505C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, long long *a7)
{
  if (a1) {
    uint64_t v13 = a2 - a1;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (uint64_t *)swift_allocObject();
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v15 = v14;
  v14[2] = 0;
  void v14[3] = v13;
  v14[4] = a1;
  v14[5] = a2;
  char v33 = a3;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v14);
  }
  long long v16 = *a7;
  long long v38 = a7[1];
  uint64_t v17 = *((void *)a7 + 4);
  long long v34 = v16;
  uint64_t v36 = v17;
  long long v37 = v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1005E1F40();
  sub_1003A7DF8(v18, v19, (void (*)(char *, void *))sub_1003A7DF0);
  swift_bridgeObjectRelease();
  if (*(void *)(v17 + 16))
  {
    LOBYTE(v37) = 59;
    sub_1003A6600((uint64_t)&v37, (uint64_t)&v37 + 1, v15);
  }
  swift_beginAccess();
  uint64_t v20 = v15[2];
  uint64_t v21 = *(void *)(a4 + 8);
  if (v21 >= 1)
  {
    BOOL v22 = __OFADD__(v21, v20);
    uint64_t v23 = v21 + v20;
    if (v22)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v23 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (v33)
      {
        if (v20 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        uint64_t v24 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v20 < 0) {
        goto LABEL_37;
      }
      uint64_t v24 = 0;
LABEL_24:
      if (a1) {
        uint64_t v29 = (char *)(a1 + v20);
      }
      else {
        uint64_t v29 = 0;
      }
      if (a1) {
        uint64_t v30 = (char *)(a1 + v24);
      }
      else {
        uint64_t v30 = 0;
      }
      a5(v30, v29);
      uint64_t v31 = sub_1001F94DC(v24, v20, a1, a2);
      uint64_t v28 = v31 + 1;
      if (!__OFADD__(v31, 1)) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
  }
  if (v20 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1) {
    uint64_t v25 = (char *)(a1 + v20);
  }
  else {
    uint64_t v25 = 0;
  }
  a5((char *)a1, v25);
  uint64_t v26 = sub_1001F94DC(0, v20, a1, a2);
  uint64_t v27 = *(void *)(a4 + 8);
  BOOL v22 = __OFADD__(v27, v26);
  uint64_t v28 = v27 + v26;
  if (v22)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(void *)(a4 + 8) = v28;
  swift_release();
  sub_10002A77C((uint64_t)&v34);
  long long v39 = v38;
  sub_10001FDF0((uint64_t)&v39, (uint64_t)v40, &qword_100713AD0);
  sub_1000811E8((uint64_t)v40);
  uint64_t v35 = *((void *)&v39 + 1);
  sub_1000811E8((uint64_t)&v35);
  return sub_1000811E8((uint64_t)&v36);
}

uint64_t sub_1003A5330(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a1) {
    uint64_t v14 = a2 - a1;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  long long v16 = v15;
  v15[2] = 0;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v15);
  }
  char v31 = 60;
  sub_1003A6600((uint64_t)&v31, (uint64_t)v32, v16);
  sub_1003A9780(a7, a8, (void (*)(char *, void *))sub_1003A7DF0);
  char v31 = 62;
  sub_1003A6600((uint64_t)&v31, (uint64_t)v32, v16);
  swift_beginAccess();
  uint64_t v17 = v16[2];
  uint64_t v18 = *(void *)(a4 + 8);
  if (v18 >= 1)
  {
    BOOL v19 = __OFADD__(v18, v17);
    uint64_t v20 = v18 + v17;
    if (v19)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v20 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (a3)
      {
        if (v17 < 1)
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
        }
        uint64_t v21 = 1;
        goto LABEL_22;
      }
LABEL_20:
      if (v17 < 0) {
        goto LABEL_35;
      }
      uint64_t v21 = 0;
LABEL_22:
      if (a1) {
        uint64_t v26 = (char *)(a1 + v17);
      }
      else {
        uint64_t v26 = 0;
      }
      if (a1) {
        uint64_t v27 = (char *)(a1 + v21);
      }
      else {
        uint64_t v27 = 0;
      }
      a5(v27, v26);
      uint64_t v28 = sub_1001F94DC(v21, v17, a1, a2);
      uint64_t v25 = v28 + 1;
      if (!__OFADD__(v28, 1)) {
        goto LABEL_29;
      }
      goto LABEL_33;
    }
  }
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a1) {
    BOOL v22 = (char *)(a1 + v17);
  }
  else {
    BOOL v22 = 0;
  }
  a5((char *)a1, v22);
  uint64_t v23 = sub_1001F94DC(0, v17, a1, a2);
  uint64_t v24 = *(void *)(a4 + 8);
  BOOL v19 = __OFADD__(v24, v23);
  uint64_t v25 = v24 + v23;
  if (v19)
  {
    __break(1u);
    goto LABEL_20;
  }
LABEL_29:
  *(void *)(a4 + 8) = v25;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1003A55A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1) {
    uint64_t v14 = a2 - a1;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  long long v16 = v15;
  v15[2] = 0;
  v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v15);
  }
  v35[0] = a7;
  v35[1] = a8;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1005E1F40();
  sub_1003A7DF8(v17, v18, (void (*)(char *, void *))sub_1003A7DF0);
  swift_bridgeObjectRelease();
  if ((a9 & 1) == 0)
  {
    LOBYTE(v35[0]) = 44;
    sub_1003A6600((uint64_t)v35, (uint64_t)v35 + 1, v16);
  }
  swift_beginAccess();
  uint64_t v19 = v16[2];
  uint64_t v20 = a4;
  uint64_t v21 = *(void *)(a4 + 8);
  if (v21 >= 1)
  {
    BOOL v22 = __OFADD__(v21, v19);
    uint64_t v23 = v21 + v19;
    if (v22)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (a3)
      {
        if (v19 < 1)
        {
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
        }
        uint64_t v24 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0) {
        goto LABEL_38;
      }
      uint64_t v24 = 0;
LABEL_24:
      if (a1) {
        uint64_t v29 = (char *)(a1 + v19);
      }
      else {
        uint64_t v29 = 0;
      }
      if (a1) {
        uint64_t v30 = (char *)(a1 + v24);
      }
      else {
        uint64_t v30 = 0;
      }
      a5(v30, v29);
      uint64_t v31 = sub_1001F94DC(v24, v19, a1, a2);
      uint64_t v28 = v31 + 1;
      if (!__OFADD__(v31, 1))
      {
        uint64_t v20 = a4;
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (a1) {
    uint64_t v25 = (char *)(a1 + v19);
  }
  else {
    uint64_t v25 = 0;
  }
  a5((char *)a1, v25);
  uint64_t v26 = sub_1001F94DC(0, v19, a1, a2);
  uint64_t v27 = *(void *)(a4 + 8);
  BOOL v22 = __OFADD__(v27, v26);
  uint64_t v28 = v27 + v26;
  if (v22)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_32:
  *(void *)(v20 + 8) = v28;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t *sub_1003A582C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a1) {
    uint64_t v14 = a2 - a1;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v14 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  long long v16 = result;
  result[2] = 0;
  result[3] = v14;
  result[4] = a1;
  result[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  swift_bridgeObjectRetain();
  sub_1003A7DF8(a7, a8, (void (*)(char *, void *))sub_1003A7DF0);
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v17 = v16[2];
  uint64_t v18 = *(void *)(a4 + 8);
  if (v18 < 1) {
    goto LABEL_13;
  }
  BOOL v19 = __OFADD__(v18, v17);
  uint64_t v20 = v18 + v17;
  if (v19)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v20 < 79)
  {
LABEL_13:
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v22 = a1 + v17;
      }
      else {
        uint64_t v22 = 0;
      }
      a5((char *)a1, (char *)v22);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v17, a1, a2);
      uint64_t v23 = *(void *)(a4 + 8);
      BOOL v19 = __OFADD__(v23, result);
      uint64_t v24 = (char *)result + v23;
      if (!v19) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v17 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v21 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = 0;
LABEL_22:
    if (a1) {
      uint64_t v25 = a1 + v17;
    }
    else {
      uint64_t v25 = 0;
    }
    if (a1) {
      uint64_t v26 = a1 + v21;
    }
    else {
      uint64_t v26 = 0;
    }
    a5((char *)v26, (char *)v25);
    uint64_t result = (uint64_t *)sub_1001F94DC(v21, v17, a1, a2);
    uint64_t v24 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(a4 + 8) = v24;
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t *sub_1003A5A48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  if (a1) {
    uint64_t v12 = a2 - a1;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v12 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v14 = result;
  result[2] = 0;
  result[3] = v12;
  result[4] = a1;
  result[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  sub_1003A6600((uint64_t)"multipart/", (uint64_t)"", v14);
  long long v25 = *(_OWORD *)(v26 + 8);
  swift_bridgeObjectRetain();
  sub_1003A7DF8(v25, *((unint64_t *)&v25 + 1), (void (*)(char *, void *))sub_1003A7DF0);
  sub_10002A77C((uint64_t)&v25);
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v15 = v14[2];
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 < 1) {
    goto LABEL_13;
  }
  BOOL v17 = __OFADD__(v16, v15);
  uint64_t v18 = v16 + v15;
  if (v17)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v18 < 79)
  {
LABEL_13:
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v20 = a1 + v15;
      }
      else {
        uint64_t v20 = 0;
      }
      a5((char *)a1, (char *)v20);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v15, a1, a2);
      uint64_t v21 = *(void *)(a4 + 8);
      BOOL v17 = __OFADD__(v21, result);
      uint64_t v22 = (char *)result + v21;
      if (!v17) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v15 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v19 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = 0;
LABEL_22:
    if (a1) {
      uint64_t v23 = a1 + v15;
    }
    else {
      uint64_t v23 = 0;
    }
    if (a1) {
      uint64_t v24 = a1 + v19;
    }
    else {
      uint64_t v24 = 0;
    }
    a5((char *)v24, (char *)v23);
    uint64_t result = (uint64_t *)sub_1001F94DC(v19, v15, a1, a2);
    uint64_t v22 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(a4 + 8) = v22;
      swift_release();
      return (uint64_t *)sub_1003A9C10(v26);
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1003A5C6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a1) {
    uint64_t v16 = a2 - a1;
  }
  else {
    uint64_t v16 = 0;
  }
  BOOL v17 = (uint64_t *)swift_allocObject();
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v18 = v17;
  v17[2] = 0;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v17);
  }
  sub_1003A6600((uint64_t)"text/", (uint64_t)"", v18);
  swift_bridgeObjectRetain();
  sub_1003A7DF8(a7, a8, (void (*)(char *, void *))sub_1003A7DF0);
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(a10 + 24) + 16))
  {
    char v33 = 59;
    sub_1003A6600((uint64_t)&v33, (uint64_t)v34, v18);
  }
  swift_beginAccess();
  uint64_t v19 = v18[2];
  uint64_t v20 = *(void *)(a4 + 8);
  if (v20 >= 1)
  {
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (a3)
      {
        if (v19 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        uint64_t v23 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v19 < 0) {
        goto LABEL_37;
      }
      uint64_t v23 = 0;
LABEL_24:
      if (a1) {
        uint64_t v28 = (char *)(a1 + v19);
      }
      else {
        uint64_t v28 = 0;
      }
      if (a1) {
        uint64_t v29 = (char *)(a1 + v23);
      }
      else {
        uint64_t v29 = 0;
      }
      a5(v29, v28);
      uint64_t v30 = sub_1001F94DC(v23, v19, a1, a2);
      uint64_t v27 = v30 + 1;
      if (!__OFADD__(v30, 1)) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
  }
  if (v19 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1) {
    uint64_t v24 = (char *)(a1 + v19);
  }
  else {
    uint64_t v24 = 0;
  }
  a5((char *)a1, v24);
  uint64_t v25 = sub_1001F94DC(0, v19, a1, a2);
  uint64_t v26 = *(void *)(a4 + 8);
  BOOL v21 = __OFADD__(v26, v25);
  uint64_t v27 = v26 + v25;
  if (v21)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(void *)(a4 + 8) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1002E17E0(a10);
}

uint64_t sub_1003A5F00(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, long long *a7, uint64_t a8)
{
  if (a1) {
    uint64_t v13 = a2 - a1;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (uint64_t *)swift_allocObject();
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v15 = v14;
  v14[2] = 0;
  void v14[3] = v13;
  v14[4] = a1;
  v14[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", v14);
  }
  sub_1003A6600((uint64_t)"message/", (uint64_t)"", v15);
  long long v31 = *a7;
  swift_bridgeObjectRetain();
  sub_1003A7DF8(v31, *((unint64_t *)&v31 + 1), (void (*)(char *, void *))sub_1003A7DF0);
  sub_10002A77C((uint64_t)&v31);
  if (*(void *)(*(void *)(a8 + 24) + 16))
  {
    char v32 = 59;
    sub_1003A6600((uint64_t)&v32, (uint64_t)v33, v15);
  }
  swift_beginAccess();
  uint64_t v16 = v15[2];
  uint64_t v17 = *(void *)(a4 + 8);
  if (v17 >= 1)
  {
    BOOL v18 = __OFADD__(v17, v16);
    uint64_t v19 = v17 + v16;
    if (v18)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v19 >= 79)
    {
      sub_1003C8850(*(unsigned char *)a4, a5);
      a5("\t", "");
      if (a3)
      {
        if (v16 < 1)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
        }
        uint64_t v20 = 1;
        goto LABEL_24;
      }
LABEL_22:
      if (v16 < 0) {
        goto LABEL_37;
      }
      uint64_t v20 = 0;
LABEL_24:
      if (a1) {
        uint64_t v25 = (char *)(a1 + v16);
      }
      else {
        uint64_t v25 = 0;
      }
      if (a1) {
        uint64_t v26 = (char *)(a1 + v20);
      }
      else {
        uint64_t v26 = 0;
      }
      a5(v26, v25);
      uint64_t v27 = sub_1001F94DC(v20, v16, a1, a2);
      uint64_t v24 = v27 + 1;
      if (!__OFADD__(v27, 1)) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
  }
  if (v16 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a1) {
    BOOL v21 = (char *)(a1 + v16);
  }
  else {
    BOOL v21 = 0;
  }
  a5((char *)a1, v21);
  uint64_t v22 = sub_1001F94DC(0, v16, a1, a2);
  uint64_t v23 = *(void *)(a4 + 8);
  BOOL v18 = __OFADD__(v23, v22);
  uint64_t v24 = v23 + v22;
  if (v18)
  {
    __break(1u);
    goto LABEL_22;
  }
LABEL_31:
  *(void *)(a4 + 8) = v24;
  swift_release();
  sub_100224004((uint64_t)a7);
  return sub_1002E17E0(a8);
}

uint64_t *sub_1003A61A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  if (a1) {
    uint64_t v17 = a2 - a1;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v17 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v19 = (uint64_t)result;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  result[2] = 0;
  result[3] = v17;
  result[4] = a1;
  result[5] = v20;
  uint64_t v32 = v20;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  sub_1003A42BC((uint64_t (*)(char *, char *))sub_1003A7DF0, v19, a7, a8, a9, a10, a11);
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v23 = *(void *)(a4 + 8);
  if (v23 < 1) {
    goto LABEL_13;
  }
  BOOL v24 = __OFADD__(v23, v22);
  uint64_t v25 = v23 + v22;
  if (v24)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v25 < 79)
  {
LABEL_13:
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v27 = a1 + v22;
      }
      else {
        uint64_t v27 = 0;
      }
      a5((char *)a1, (char *)v27);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v22, a1, v32);
      uint64_t v28 = *(void *)(a4 + 8);
      BOOL v24 = __OFADD__(v28, result);
      uint64_t v29 = (char *)result + v28;
      if (!v24) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v22 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v26 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = 0;
LABEL_22:
    if (a1) {
      uint64_t v30 = a1 + v22;
    }
    else {
      uint64_t v30 = 0;
    }
    if (a1) {
      uint64_t v31 = a1 + v26;
    }
    else {
      uint64_t v31 = 0;
    }
    a5((char *)v31, (char *)v30);
    uint64_t result = (uint64_t *)sub_1001F94DC(v26, v22, a1, v32);
    uint64_t v29 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(v21 + 8) = v29;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t *)sub_1002E17E0(a11);
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t *sub_1003A63F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(char *, char *))
{
  if (a1) {
    uint64_t v10 = a2 - a1;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = (uint64_t *)swift_allocObject();
  if (v10 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v12 = result;
  result[2] = 0;
  result[3] = v10;
  result[4] = a1;
  result[5] = a2;
  if (a3) {
    sub_1003A6600((uint64_t)" ", (uint64_t)"", result);
  }
  uint64_t v13 = sub_1005E3230();
  sub_1003A9780(v13, v14, (void (*)(char *, void *))sub_1003A7DF0);
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_beginAccess();
  uint64_t v15 = v12[2];
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 < 1) {
    goto LABEL_13;
  }
  BOOL v17 = __OFADD__(v16, v15);
  uint64_t v18 = v16 + v15;
  if (v17)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v18 < 79)
  {
LABEL_13:
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (a1) {
        uint64_t v20 = a1 + v15;
      }
      else {
        uint64_t v20 = 0;
      }
      a5((char *)a1, (char *)v20);
      uint64_t result = (uint64_t *)sub_1001F94DC(0, v15, a1, a2);
      uint64_t v21 = *(void *)(a4 + 8);
      BOOL v17 = __OFADD__(v21, result);
      uint64_t v22 = (char *)result + v21;
      if (!v17) {
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  sub_1003C8850(*(unsigned char *)a4, a5);
  uint64_t result = (uint64_t *)a5("\t", "");
  if (a3)
  {
    if (v15 < 1)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v19 = 1;
    goto LABEL_22;
  }
LABEL_20:
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = 0;
LABEL_22:
    if (a1) {
      uint64_t v23 = a1 + v15;
    }
    else {
      uint64_t v23 = 0;
    }
    if (a1) {
      uint64_t v24 = a1 + v19;
    }
    else {
      uint64_t v24 = 0;
    }
    a5((char *)v24, (char *)v23);
    uint64_t result = (uint64_t *)sub_1001F94DC(v19, v15, a1, a2);
    uint64_t v22 = (char *)result + 1;
    if (!__OFADD__(result, 1))
    {
LABEL_29:
      *(void *)(a4 + 8) = v22;
      return (uint64_t *)swift_release();
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1003A6600(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v4 = a3 + 2;
  if (a1) {
    uint64_t v5 = a2 - a1;
  }
  else {
    uint64_t v5 = 0;
  }
  swift_beginAccess();
  if (sub_1001F94DC(a3[2], a3[3], a3[4], a3[5]) < v5) {
    goto LABEL_12;
  }
  swift_beginAccess();
  sub_1003A9910();
  sub_1005E04F0();
  swift_beginAccess();
  uint64_t v6 = *v4 + v5;
  if (__OFADD__(*v4, v5))
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = a3[3];
    if (v7 >= v6)
    {
      if (v6 >= *v4)
      {
        uint64_t v9 = a3[4];
        uint64_t v8 = a3[5];
        uint64_t result = swift_beginAccess();
        a3[2] = v6;
        a3[3] = v7;
        a3[4] = v9;
        a3[5] = v8;
        return result;
      }
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = sub_1005E2F20();
  __break(1u);
  return result;
}

uint64_t sub_1003A676C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1005E1E70();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  uint64_t v10 = 0;
  while (1)
  {
    if ((v8 != 2573 || v9 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
    {
      if ((sub_1005E1A00() & 1) == 0) {
        goto LABEL_3;
      }
      unint64_t v12 = sub_100374D14(v8, v9);
      if ((v12 & 0x100000000) != 0) {
        goto LABEL_82;
      }
      if ((v12 & 0xFFFFFF80) != 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      unint64_t v13 = sub_100374D14(v8, v9);
      if ((v13 & 0x100000000) != 0) {
        goto LABEL_83;
      }
      if ((v13 & 0xFFFFFF00) != 0)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
    }
    __int16 v14 = sub_1003A4734(v8, v9);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100) != 0 || v14 - 127 < 0xFFFFFFA1) {
      goto LABEL_4;
    }
    BOOL v15 = __OFADD__(v10++, 1);
    BOOL v16 = v15;
    if (v14 - 91 > 0xFFFFFFE5) {
      break;
    }
    if (v16) {
      goto LABEL_79;
    }
LABEL_4:
    uint64_t v8 = sub_1005E1E70();
    unint64_t v9 = v11;
    if (!v11) {
      goto LABEL_24;
    }
  }
  if (!v16) {
    goto LABEL_4;
  }
  __break(1u);
LABEL_23:
  uint64_t v10 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v17 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if ((sub_1003A45DC() & 1) == 0) {
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1005E1E70();
  if (!v19) {
    goto LABEL_67;
  }
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  while (2)
  {
    if ((v20 != 2573 || v21 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
    {
      if (sub_1005E1A00())
      {
        unint64_t v24 = sub_100374D14(v20, v21);
        if ((v24 & 0x100000000) != 0) {
          goto LABEL_84;
        }
        if ((v24 & 0xFFFFFF80) == 0)
        {
          unint64_t v25 = sub_100374D14(v20, v21);
          if ((v25 & 0x100000000) != 0) {
            goto LABEL_85;
          }
          if ((v25 & 0xFFFFFF00) != 0) {
            goto LABEL_73;
          }
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t v20 = sub_1005E1E70();
      unint64_t v21 = v23;
      if (!v23) {
        goto LABEL_67;
      }
      continue;
    }
    break;
  }
  __int16 v22 = sub_1003A4734(v20, v21);
  swift_bridgeObjectRelease();
  if ((v22 & 0x100) != 0) {
    goto LABEL_29;
  }
  BOOL v15 = __OFADD__(v17++, 1);
  if (!v15) {
    goto LABEL_29;
  }
  __break(1u);
LABEL_43:
  BOOL v15 = __OFADD__(v17++, 1);
  if (v15) {
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1005E1E70();
  if (!v27)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    BOOL v15 = __OFADD__(v17++, 1);
    if (!v15) {
      goto LABEL_69;
    }
    goto LABEL_77;
  }
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  while (1)
  {
    if ((v28 != 2573 || v29 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
    {
      if ((sub_1005E1A00() & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v31 = sub_100374D14(v28, v29);
      if ((v31 & 0x100000000) != 0) {
        goto LABEL_86;
      }
      if ((v31 & 0xFFFFFF80) != 0)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      unint64_t v32 = sub_100374D14(v28, v29);
      if ((v32 & 0x100000000) != 0) {
        goto LABEL_87;
      }
      if ((v32 & 0xFFFFFF00) != 0) {
        goto LABEL_74;
      }
    }
    __int16 v33 = sub_1003A4734(v28, v29);
    swift_bridgeObjectRelease();
    if ((v33 & 0x100) != 0) {
      goto LABEL_47;
    }
    if (v33 == 92 || v33 == 34) {
      break;
    }
    if (v33 - 127 >= 0xFFFFFFA1)
    {
      BOOL v15 = __OFADD__(v17++, 1);
      if (v15) {
        goto LABEL_81;
      }
    }
LABEL_47:
    uint64_t v28 = sub_1005E1E70();
    unint64_t v29 = v30;
    if (!v30) {
      goto LABEL_68;
    }
  }
  uint64_t v34 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_80;
  }
  v17 += 2;
  if (!__OFADD__(v34, 1)) {
    goto LABEL_47;
  }
  __break(1u);
LABEL_67:
  swift_bridgeObjectRelease();
LABEL_69:
  if ((a5 & 1) == 0)
  {
    BOOL v15 = __OFADD__(v17++, 1);
    if (v15)
    {
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
    }
  }
  return v17;
}

uint64_t sub_1003A6BA4(void (*a1)(char *, uint64_t *), uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, unint64_t *a6, char a7)
{
  uint64_t v11 = HIBYTE(a5) & 0xF;
  *(void *)&v36[71] = a4;
  unint64_t v37 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v38 = 0;
  uint64_t v39 = v11;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v12 = sub_1005E1E70();
  if (v13)
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    do
    {
      if ((v14 != 2573 || v15 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
      {
        if ((sub_1005E1A00() & 1) == 0) {
          goto LABEL_5;
        }
        unint64_t v17 = sub_100374D14(v14, v15);
        if ((v17 & 0x100000000) != 0) {
          goto LABEL_34;
        }
        if ((v17 & 0xFFFFFF80) != 0)
        {
LABEL_5:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        unint64_t v18 = sub_100374D14(v14, v15);
        if ((v18 & 0x100000000) != 0) {
          goto LABEL_35;
        }
        if ((v18 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
      }
      __int16 v19 = sub_1003A4734(v14, v15);
      swift_bridgeObjectRelease();
      if ((v19 & 0x100) == 0 && v19 - 127 >= 0xFFFFFFA1)
      {
        if (v19 - 91 > 0xFFFFFFE5)
        {
          char v35 = v19 | 0x20;
          uint64_t v20 = *a3 - 1;
          if (__OFSUB__(*a3, 1)) {
            goto LABEL_31;
          }
        }
        else
        {
          char v35 = v19;
          uint64_t v20 = *a3 - 1;
          if (__OFSUB__(*a3, 1)) {
            goto LABEL_30;
          }
        }
        *a3 = v20;
        a1(&v35, (uint64_t *)v36);
      }
LABEL_6:
      uint64_t v14 = sub_1005E1E70();
      unint64_t v15 = v16;
    }
    while (v16);
  }
  swift_bridgeObjectRelease();
  char v35 = 61;
  swift_beginAccess();
  if (__OFSUB__(*a3, 1)) {
    goto LABEL_32;
  }
  --*a3;
  a1(&v35, (uint64_t *)v36);
  swift_beginAccess();
  uint64_t v21 = *a3 - 1;
  if (__OFSUB__(*a3, 1))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  unint64_t v22 = *a6;
  unint64_t v23 = a6[1];
  uint64_t v24 = a6[2];
  uint64_t v25 = a6[3];
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1003A88DC(v22, v23, v24, v25, v21, a1);
  unint64_t v28 = v27;
  unint64_t v30 = v29;
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  *a6 = v26;
  a6[1] = v28;
  a6[2] = v30;
  a6[3] = v32;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a7 & 1) == 0 || (a6[1] ^ *a6) >> 14)
  {
    char v34 = 59;
    return ((uint64_t (*)(char *, char *))a1)(&v34, &v35);
  }
  return result;
}

uint64_t sub_1003A6EAC(unsigned int a1, uint64_t (*a2)(uint64_t *))
{
  if (a1 > 0x7F)
  {
    int v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      int v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      int v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      unsigned int v2 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1)) {
        unsigned int v2 = v6;
      }
    }
    else
    {
      unsigned int v2 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v2 = a1 + 1;
  }
  uint64_t v7 = (v2 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v2) >> 3))));
  return a2(&v7);
}

uint64_t sub_1003A6F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v8 = v2[1];
  int v6 = v2 + 1;
  uint64_t v7 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *int v6 = v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003F0884(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *v6;
  }
  unint64_t v11 = *(void *)(v7 + 16);
  unint64_t v10 = *(void *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_1003F0884((char *)(v10 > 1), v11 + 1, 1);
    uint64_t v7 = *v6;
  }
  *(void *)(v7 + 16) = v11 + 1;
  unint64_t v12 = v7 + 16 * v11;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  v3[1] = v7;
  uint64_t v13 = *(void *)(v7 + 16);
  if (*v3)
  {
    swift_beginAccess();
    if (sub_1005E0BA0() >= v13)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v14 = *v3;
      if (!result)
      {
        if (!v14)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v14 = sub_1005E0BC0();
        uint64_t result = swift_release();
        *uint64_t v3 = v14;
      }
      if (v14) {
        return sub_1005E0B60();
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v13 < 0x10)
  {
    return result;
  }
  return sub_100383BA8();
}

unint64_t sub_1003A710C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  uint64_t v5 = *v2;
  if (!*v2)
  {
    if (v4) {
      return sub_1003A728C(a1);
    }
    goto LABEL_15;
  }
  swift_beginAccess();
  if ((*(void *)(v5 + 16) & 0x3FLL) == (*(void *)(v5 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (v4 <= sub_1005E0BB0())
  {
LABEL_15:
    uint64_t v10 = sub_1003A728C(a1);
    sub_100383BA8();
    return v10;
  }
  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v8 = *v2;
  if (!result)
  {
    if (!v8) {
      goto LABEL_20;
    }
    uint64_t v8 = sub_1005E0BC0();
    unint64_t result = swift_release();
    *unsigned int v2 = v8;
  }
  if (v8)
  {
    swift_retain();
    unint64_t result = sub_1003A7328(a2, (void *)(v8 + 16), v8 + 32, (uint64_t)v2);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v9 = v2[1];
      swift_retain();
      sub_1003A750C(a1, a1 + 1, v9, (void *)(v8 + 16));
      swift_release();
      swift_release();
      return sub_1003A728C(a1);
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1003A728C(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003A7314(v3);
    uint64_t v3 = result;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 16 * a1;
    uint64_t v8 = *(void *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
    return v8;
  }
  return result;
}

char *sub_1003A7314(uint64_t a1)
{
  return sub_1003F0578(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_1003A7328(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v15 = sub_1005E0B40();
  sub_1005E0B90();
  if (v15)
  {
    uint64_t v7 = a1;
    uint64_t v8 = sub_1005E0B50();
    while (1)
    {
      unint64_t result = sub_1005E0B70();
      if (v10)
      {
LABEL_20:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (result >= *(void *)(*(void *)(a4 + 8) + 16)) {
        goto LABEL_18;
      }
      sub_1005E33F0();
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      Swift::Int v11 = sub_1005E3470();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v12 = 1 << *a2;
      if (__OFSUB__(v12, 1)) {
        goto LABEL_19;
      }
      uint64_t v13 = (v12 - 1) & v11;
      if (v6 >= v8) {
        break;
      }
      if (v13 < v8) {
        goto LABEL_12;
      }
LABEL_13:
      sub_1005E0B70();
      sub_1005E0B60();
      uint64_t v6 = v7;
LABEL_3:
      sub_1005E0B90();
      uint64_t v7 = a1;
    }
    if (v13 < v8) {
      goto LABEL_3;
    }
LABEL_12:
    if (v6 < v13) {
      goto LABEL_3;
    }
    goto LABEL_13;
  }
  return sub_1005E0B60();
}

void sub_1003A750C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v5 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = v8 - v5;
    if ((uint64_t)v8 < v5) {
      ++v9;
    }
    if (a1 < v9 >> 1)
    {
      if (sub_1005E0BA0() / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v8 < a1)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        if (a1)
        {
          swift_retain();
          uint64_t v10 = 0;
          while (1)
          {
            sub_1005E33F0();
            swift_bridgeObjectRetain();
            sub_1005E1DB0();
            sub_1005E3470();
            if (__OFSUB__(1 << *a4, 1)) {
              break;
            }
            if (sub_1005E0B40())
            {
              while (1)
              {
                uint64_t v11 = sub_1005E0B70();
                if ((v12 & 1) == 0 && v11 == v10) {
                  break;
                }
                sub_1005E0B90();
              }
            }
            if (__OFADD__(v10, v5)) {
              goto LABEL_58;
            }
            ++v10;
            sub_1005E0B80();
            swift_bridgeObjectRelease();
            if (v10 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        goto LABEL_20;
      }
      sub_1005E0B40();
      uint64_t v18 = sub_1005E0B70();
      if ((v19 & 1) != 0 || v18 >= a1)
      {
LABEL_32:
        sub_1005E0B90();
LABEL_20:
        uint64_t v13 = a4[1];
        if (__OFSUB__(v13 >> 6, v5))
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v14 = 1 << *a4;
        BOOL v15 = __OFSUB__(v14, 1);
        uint64_t v16 = v14 - 1;
        if (v15)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v17 = (v16 & (((v13 >> 6) - v5) >> 63)) + (v13 >> 6) - v5;
        if (v17 < v16) {
          uint64_t v16 = 0;
        }
        a4[1] = a4[1] & 0x3FLL | ((v17 - v16) << 6);
        return;
      }
      if (!__OFADD__(v18, v5))
      {
        sub_1005E0B80();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      sub_1005E0B40();
      uint64_t v20 = sub_1005E0B70();
      if ((v21 & 1) == 0 && v20 >= v4)
      {
        if (__OFSUB__(v20, v5))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        sub_1005E0B80();
      }
      sub_1005E0B90();
      return;
    }
    uint64_t v4 = a2;
    if (__OFSUB__(v8, a2))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if ((uint64_t)(v8 - a2) >= sub_1005E0BA0() / 3) {
      goto LABEL_38;
    }
    if ((uint64_t)v8 < v4)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v4 < 0)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v8 != v4)
    {
      if (v8 <= v4)
      {
LABEL_70:
        __break(1u);
        return;
      }
      swift_retain();
      while (1)
      {
        sub_1005E33F0();
        swift_bridgeObjectRetain();
        sub_1005E1DB0();
        sub_1005E3470();
        if (__OFSUB__(1 << *a4, 1)) {
          goto LABEL_60;
        }
        if (sub_1005E0B40())
        {
          while (1)
          {
            uint64_t v22 = sub_1005E0B70();
            if ((v23 & 1) == 0 && v22 == v4) {
              break;
            }
            sub_1005E0B90();
          }
        }
        if (__OFSUB__(v4, v5)) {
          goto LABEL_61;
        }
        ++v4;
        sub_1005E0B80();
        swift_bridgeObjectRelease();
        if (v4 == v8)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

uint64_t sub_1003A79BC(uint64_t result, char a2)
{
  if (result < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v3 = v2;
  int64_t v5 = result;
  Swift::Int v8 = v2[1];
  uint64_t v6 = v2 + 1;
  Swift::Int v7 = v8;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if (isUniquelyReferenced_nonNull_native && (unint64_t)v5 <= *(void *)(v7 + 24) >> 1)
  {
    uint64_t v10 = *v3;
    if (*v3) {
      goto LABEL_5;
    }
  }
  else
  {
    if (*(void *)(v7 + 16) <= v5) {
      int64_t v15 = v5;
    }
    else {
      int64_t v15 = *(void *)(v7 + 16);
    }
    sub_1003F0884(isUniquelyReferenced_nonNull_native, v15, 0);
    Swift::Int v7 = *v6;
    uint64_t v10 = *v3;
    if (*v3)
    {
LABEL_5:
      swift_beginAccess();
      uint64_t v11 = *(void *)(v10 + 16) & 0x3FLL;
      uint64_t v12 = sub_1005E0BD0();
      uint64_t v13 = v12;
      if (a2)
      {
        uint64_t v14 = v12;
        if (v11 >= v12) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v14 = *(void *)(v10 + 24) & 0x3FLL;
        if (v11 >= v13) {
          goto LABEL_20;
        }
      }
LABEL_16:
      if (v14 <= v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v14;
      }
      goto LABEL_30;
    }
  }
  uint64_t v16 = sub_1005E0BD0();
  uint64_t v13 = v16;
  uint64_t v11 = 0;
  if (a2) {
    uint64_t v14 = v16;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v16 > 0) {
    goto LABEL_16;
  }
LABEL_20:
  if (v14 <= v13) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = v14;
  }
  unint64_t result = sub_1005E0BD0();
  if (result <= v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = result;
  }
  if (v19 < v11)
  {
    if (v14 <= v19) {
      uint64_t v17 = v19;
    }
    else {
      uint64_t v17 = v14;
    }
LABEL_30:
    uint64_t v20 = sub_100383C4C(v7, v17, 0, v14);
    unint64_t result = swift_release();
    *uint64_t v3 = v20;
    return result;
  }
  if (!v10 || (unint64_t result = swift_isUniquelyReferenced_native(), result))
  {
    uint64_t v21 = *v3;
    if (*v3) {
      goto LABEL_35;
    }
LABEL_39:
    if (!v14) {
      return result;
    }
    __break(1u);
    goto LABEL_41;
  }
  unint64_t result = *v3;
  if (!*v3)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  uint64_t v21 = sub_1005E0BC0();
  unint64_t result = swift_release();
  *uint64_t v3 = v21;
  if (!v21) {
    goto LABEL_39;
  }
LABEL_35:
  unint64_t result = swift_beginAccess();
  if ((*(void *)(v21 + 24) & 0x3FLL) != v14) {
    *(void *)(v21 + 24) = *(void *)(v21 + 24) & 0xFFFFFFFFFFFFFFC0 | v14 & 0x3F;
  }
  return result;
}

void *sub_1003A7BA0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = sub_1003B5064(v2, 0);
      unint64_t result = (void *)sub_1005E2C90();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_1005E1E80();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1003A7C3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Message(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003A7C98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100136C1C(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

unint64_t sub_1003A7D44(unint64_t result, uint64_t a2, char a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  if ((a3 & 1) == 0)
  {
    if (result) {
      return a4(result, result + a2);
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result >> 11 == 27)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (WORD1(result) > 0x10u)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return sub_1003A6EAC(result, (uint64_t (*)(uint64_t *))sub_1003A9964);
}

uint64_t sub_1003A7DE0()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003A7DF0(uint64_t a1, uint64_t a2)
{
  return sub_1003A6600(a1, a2, v2);
}

uint64_t sub_1003A7DF8(uint64_t a1, unint64_t a2, void (*a3)(char *, void *))
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  v16[0] = a1;
  v16[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v16[2] = 0;
  v16[3] = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1005E1E70();
  if (v6)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    while (1)
    {
      if (v7 == 2573 && v8 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0) {
        goto LABEL_15;
      }
      if (sub_1005E1A00())
      {
        unint64_t v10 = sub_100374D14(v7, v8);
        if ((v10 & 0x100000000) != 0) {
          goto LABEL_22;
        }
        if ((v10 & 0xFFFFFF80) == 0) {
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v7 = sub_1005E1E70();
      unint64_t v8 = v9;
      if (!v9) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v11 = sub_100374D14(v7, v8);
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_23;
    }
    if ((v11 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
LABEL_15:
    __int16 v12 = sub_1003A4734(v7, v8);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0)
    {
      char v13 = v12;
      if (v12 - 127 >= 0xFFFFFFA1)
      {
        if (v12 - 91 >= 0xFFFFFFE6) {
          char v13 = v12 | 0x20;
        }
        char v15 = v13;
        a3(&v15, v16);
      }
    }
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A7F9C(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v24 = a6;
  uint64_t v11 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < 0) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10022C168(a10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10022C168(a10);
  if (v11 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    uint64_t v23 = (uint64_t)&v23;
    __chkstk_darwin();
    uint64_t v17 = a8;
    uint64_t v19 = (char *)&v23 - v18;
    uint64_t v20 = (char *)&v23 + v11 - v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10022C168(a10);
    sub_1003A61A8((uint64_t)v19, (uint64_t)v20, a4 & 1, a5, a1, a2, v24, a7, v17, a9, a10);
  }
  else
  {
    uint64_t v21 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10022C168(a10);
    sub_1003A61A8(v21, v21 + v11, a4 & 1, a5, a1, a2, v24, a7, a8, a9, a10);
    swift_slowDealloc();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002E17E0(a10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1002E17E0(a10);
}

uint64_t sub_1003A8268(uint64_t a1, unint64_t a2, void (*a3)(char *, char *))
{
  LOBYTE(v17[0]) = 34;
  a3((char *)v17, (char *)v17 + 1);
  uint64_t v6 = HIBYTE(a2) & 0xF;
  v17[0] = a1;
  v17[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v17[2] = 0;
  v17[3] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1005E1E70();
  if (v8)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    while (1)
    {
      if (v9 == 2573 && v10 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0) {
        goto LABEL_15;
      }
      if (sub_1005E1A00())
      {
        unint64_t v12 = sub_100374D14(v9, v10);
        if ((v12 & 0x100000000) != 0) {
          goto LABEL_23;
        }
        if ((v12 & 0xFFFFFF80) == 0) {
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v9 = sub_1005E1E70();
      unint64_t v10 = v11;
      if (!v11) {
        goto LABEL_21;
      }
    }
    unint64_t v13 = sub_100374D14(v9, v10);
    if ((v13 & 0x100000000) != 0) {
      goto LABEL_24;
    }
    if ((v13 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
LABEL_15:
    __int16 v14 = sub_1003A4734(v9, v10);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100) == 0)
    {
      if (v14 == 92 || v14 == 34)
      {
        char v16 = 92;
        a3(&v16, (char *)v17);
        char v16 = v14;
        a3(&v16, (char *)v17);
      }
      else if (v14 - 127 >= 0xFFFFFFA1)
      {
        char v16 = v14;
        a3(&v16, (char *)v17);
      }
    }
    goto LABEL_6;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  LOBYTE(v17[0]) = 34;
  return ((uint64_t (*)(void *, char *))a3)(v17, (char *)v17 + 1);
}

uint64_t sub_1003A8490(uint64_t a1, unint64_t a2, void (*a3)(char *, char *))
{
  if (sub_1003A45DC())
  {
    uint64_t v6 = HIBYTE(a2) & 0xF;
    v17[0] = a1;
    v17[1] = a2;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    v17[2] = 0;
    v17[3] = v6;
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1005E1E70();
    if (v8)
    {
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      while (1)
      {
        if (v9 == 2573 && v10 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0) {
          goto LABEL_16;
        }
        if (sub_1005E1A00())
        {
          unint64_t v12 = sub_100374D14(v9, v10);
          if ((v12 & 0x100000000) != 0) {
            goto LABEL_23;
          }
          if ((v12 & 0xFFFFFF80) == 0) {
            break;
          }
        }
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v9 = sub_1005E1E70();
        unint64_t v10 = v11;
        if (!v11) {
          return swift_bridgeObjectRelease();
        }
      }
      unint64_t v13 = sub_100374D14(v9, v10);
      if ((v13 & 0x100000000) != 0) {
        goto LABEL_24;
      }
      if ((v13 & 0xFFFFFF00) != 0)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
LABEL_16:
      __int16 v14 = sub_1003A4734(v9, v10);
      swift_bridgeObjectRelease();
      if ((v14 & 0x100) == 0)
      {
        char v16 = v14;
        a3(&v16, (char *)v17);
      }
      goto LABEL_7;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_1003A8268(a1, a2, a3);
  }
}

uint64_t sub_1003A8670(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  uint64_t v11 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < 0) {
    goto LABEL_9;
  }
  uint64_t v23 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if (v11 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    uint64_t v22 = (uint64_t)&v22;
    __chkstk_darwin();
    uint64_t v18 = (char *)&v22 - v17;
    uint64_t v19 = (char *)&v22 + v11 - v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1003A4DB0((uint64_t)v18, (uint64_t)v19, a4 & 1, a5, v23, a2, a6, a7, a8, a9, a10 & 1);
  }
  else
  {
    uint64_t v20 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1003A4DB0(v20, v20 + v11, a4 & 1, a5, v23, a2, a6, a7, a8, a9, a10 & 1);
    swift_slowDealloc();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A88DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t *))
{
  if (a5 < 3) {
    goto LABEL_28;
  }
  char v25 = 34;
  a6(&v25, &v26);
  unint64_t v8 = a1 >> 14;
  unint64_t v20 = a2 >> 14;
  if (a1 >> 14 < a2 >> 14)
  {
    uint64_t v9 = 2;
    do
    {
      uint64_t v11 = sub_1005E2930();
      unint64_t v12 = v10;
      if ((v11 != 2573 || v10 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
      {
        if ((sub_1005E1A00() & 1) == 0) {
          goto LABEL_4;
        }
        unint64_t v13 = sub_100374D14(v11, v12);
        if ((v13 & 0x100000000) != 0) {
          goto LABEL_31;
        }
        if ((v13 & 0xFFFFFF80) != 0)
        {
LABEL_4:
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        unint64_t v14 = sub_100374D14(v11, v12);
        if ((v14 & 0x100000000) != 0) {
          goto LABEL_32;
        }
        if ((v14 & 0xFFFFFF00) != 0) {
          goto LABEL_27;
        }
      }
      __int16 v15 = sub_1003A4734(v11, v12);
      swift_bridgeObjectRelease();
      if ((v15 & 0x100) == 0)
      {
        if (v15 == 92 || v15 == 34)
        {
          BOOL v16 = __OFADD__(v9, 2);
          v9 += 2;
          if (v16)
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
          }
          if (v9 >= a5) {
            break;
          }
          char v22 = 92;
          a6(&v22, (uint64_t *)&v23);
          char v21 = v15;
          a6(&v21, (uint64_t *)&v22);
        }
        else if (v15 - 127 >= 0xFFFFFFA1)
        {
          BOOL v16 = __OFADD__(v9++, 1);
          if (v16) {
            goto LABEL_30;
          }
          if (v9 >= a5) {
            break;
          }
          char v23 = v15;
          a6(&v23, (uint64_t *)&v24);
        }
      }
LABEL_5:
      unint64_t v8 = (unint64_t)sub_1005E2900() >> 14;
    }
    while (v8 < v20);
  }
  char v24 = 34;
  a6(&v24, (uint64_t *)&v25);
  if (v20 < v8) {
    goto LABEL_29;
  }
  return sub_1005E2940();
}

uint64_t sub_1003A8BAC(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v8 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v8 < 0) {
    goto LABEL_9;
  }
  sub_100223E88((uint64_t)a6);
  sub_10022C168(a7);
  sub_100223E88((uint64_t)a6);
  sub_10022C168(a7);
  if (v8 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    __int16 v15 = (char *)&v19 - v14;
    BOOL v16 = (char *)&v19 + v8 - v14;
    sub_100223E88((uint64_t)a6);
    sub_10022C168(a7);
    sub_1003A5F00((uint64_t)v15, (uint64_t)v16, a4 & 1, a5, a1, a2, a6, a7);
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    sub_100223E88((uint64_t)a6);
    sub_10022C168(a7);
    sub_1003A5F00(v17, v17 + v8, a4 & 1, a5, a1, a2, a6, a7);
    swift_slowDealloc();
  }
  sub_100224004((uint64_t)a6);
  sub_1002E17E0(a7);
  sub_100224004((uint64_t)a6);
  return sub_1002E17E0(a7);
}

uint64_t sub_1003A8DF0(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v10 < 0) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  sub_10022C168(a9);
  swift_bridgeObjectRetain();
  sub_10022C168(a9);
  if (v10 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    v22[1] = v22;
    __chkstk_darwin();
    uint64_t v18 = (char *)v22 - v17;
    uint64_t v19 = (char *)v22 + v10 - v17;
    swift_bridgeObjectRetain();
    sub_10022C168(a9);
    sub_1003A5C6C((uint64_t)v18, (uint64_t)v19, a4 & 1, a5, a1, a2, a6, a7, a8, a9);
  }
  else
  {
    uint64_t v20 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    sub_10022C168(a9);
    sub_1003A5C6C(v20, v20 + v10, a4 & 1, a5, a1, a2, a6, a7, a8, a9);
    swift_slowDealloc();
  }
  swift_bridgeObjectRelease();
  sub_1002E17E0(a9);
  swift_bridgeObjectRelease();
  return sub_1002E17E0(a9);
}

uint64_t sub_1003A9058(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  if (v7 < 0) {
    goto LABEL_10;
  }
  sub_1003A7C98(a6);
  sub_1003A7C98(a6);
  if (v7 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    unint64_t v13 = (char *)&v17 - v12;
    uint64_t v14 = (char *)&v17 + v7 - v12;
    sub_1003A7C98(a6);
    sub_1003A5A48((uint64_t)v13, (uint64_t)v14, a4 & 1, a5, a1, a2, a6);
    sub_1003A9C10(a6);
    return sub_1003A9C10(a6);
  }
  else
  {
    uint64_t v16 = swift_slowAlloc();
    sub_1003A7C98(a6);
    sub_1003A5A48(v16, v16 + v7, a4 & 1, a5, a1, a2, a6);
    swift_slowDealloc();
    sub_1003A9C10(a6);
    return sub_1003A9C10(a6);
  }
}

uint64_t sub_1003A9284(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1003A79BC(v2, 0);
  sub_1003F0884(0, v2, 0);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v3 - 3);
    uint64_t v4 = *(v3 - 2);
    uint64_t v7 = *(v3 - 1);
    uint64_t v6 = *v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_100383808(v5, v4, 0, _swiftEmptyArrayStorage);
    if ((v9 & 1) == 0) {
      break;
    }
    sub_1003A6F90(v5, v4);
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1) {
      sub_1003F0884((char *)(v10 > 1), v11 + 1, 1);
    }
    v3 += 4;
    _swiftEmptyArrayStorage[2] = v11 + 1;
    uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
    v12[4] = v7;
    v12[5] = v6;
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003A93C8(unint64_t a1, uint64_t a2, char a3, char a4, uint64_t (*a5)(unint64_t, unint64_t), uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, char *), uint64_t a9, uint64_t a10)
{
  v17[0] = a4;
  sub_1003A7D44(a1, a2, a3, a5);
  uint64_t result = a5((unint64_t)": ", (unint64_t)"");
  if (a3)
  {
    __break(1u);
  }
  else if (!__OFADD__(a2, 2))
  {
    uint64_t v18 = a2 + 2;
    sub_1003A3B88((uint64_t)v17, a7, a8, a9, a10, &v19);
    sub_1003C8850(a4, (uint64_t (*)(char *, char *))a5);
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003A9488(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v7 < 0) {
    goto LABEL_9;
  }
  long long v12 = *(_OWORD *)(a6 + 16);
  long long v22 = *(_OWORD *)a6;
  long long v23 = v12;
  uint64_t v13 = *(void *)(a6 + 32);
  sub_10001FDF0((uint64_t)&v23, (uint64_t)v24, &qword_100713AD0);
  uint64_t v20 = v13;
  uint64_t v21 = *((void *)&v23 + 1);
  sub_100057B18((uint64_t)&v22);
  sub_1000811BC((uint64_t)v24);
  sub_1000811BC((uint64_t)&v21);
  sub_1000811BC((uint64_t)&v20);
  sub_100057B18((uint64_t)&v22);
  sub_1000811BC((uint64_t)v24);
  sub_1000811BC((uint64_t)&v21);
  sub_1000811BC((uint64_t)&v20);
  if (v7 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    __int16 v15 = &v19[-v14];
    uint64_t v16 = &v19[v7 - v14];
    sub_100057B18((uint64_t)&v22);
    sub_1000811BC((uint64_t)v24);
    sub_1000811BC((uint64_t)&v21);
    sub_1000811BC((uint64_t)&v20);
    sub_1003A505C((uint64_t)v15, (uint64_t)v16, a4 & 1, a5, a1, a2, (long long *)a6);
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    sub_100057B18((uint64_t)&v22);
    sub_1000811BC((uint64_t)v24);
    sub_1000811BC((uint64_t)&v21);
    sub_1000811BC((uint64_t)&v20);
    sub_1003A505C(v17, v17 + v7, a4 & 1, a5, a1, a2, (long long *)a6);
    swift_slowDealloc();
  }
  sub_10002A77C((uint64_t)&v22);
  sub_1000811E8((uint64_t)v24);
  sub_1000811E8((uint64_t)&v21);
  sub_1000811E8((uint64_t)&v20);
  sub_10002A77C((uint64_t)&v22);
  sub_1000811E8((uint64_t)v24);
  sub_1000811E8((uint64_t)&v21);
  return sub_1000811E8((uint64_t)&v20);
}

uint64_t sub_1003A9780(uint64_t a1, unint64_t a2, void (*a3)(char *, void *))
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  v15[0] = a1;
  v15[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v15[2] = 0;
  v15[3] = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1005E1E70();
  if (v6)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    while (1)
    {
      if (v7 == 2573 && v8 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0) {
        goto LABEL_15;
      }
      if (sub_1005E1A00())
      {
        unint64_t v10 = sub_100374D14(v7, v8);
        if ((v10 & 0x100000000) != 0) {
          goto LABEL_20;
        }
        if ((v10 & 0xFFFFFF80) == 0) {
          break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v7 = sub_1005E1E70();
      unint64_t v8 = v9;
      if (!v9) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v11 = sub_100374D14(v7, v8);
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_21;
    }
    if ((v11 & 0xFFFFFF00) != 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
LABEL_15:
    __int16 v12 = sub_1003A4734(v7, v8);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100) == 0 && v12 - 127 >= 0xFFFFFFA1)
    {
      char v14 = v12;
      a3(&v14, v15);
    }
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1003A9910()
{
  unint64_t result = qword_100713AC8;
  if (!qword_100713AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713AC8);
  }
  return result;
}

uint64_t sub_1003A9964(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a1 + a2;
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(a1, v3);
}

uint64_t sub_1003A9998()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003A99A8(uint64_t a1)
{
  **(void **)(v1 + 16) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A99E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a3 + (a4 & 1);
  if (__OFADD__(a3, a4 & 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain_n();
  if (v9 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v17 = (char *)&v21 - v16;
    uint64_t v18 = (char *)&v21 + v9 - v16;
    swift_bridgeObjectRetain();
    a8(v17, v18, a4 & 1, a5, a1, a2, a6, a7);
  }
  else
  {
    uint64_t v19 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    a8((char *)v19, (char *)(v19 + v9), a4 & 1, a5, a1, a2, a6, a7);
    swift_slowDealloc();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1003A9BD8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003A9C10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000617EC(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

void sub_1003A9CC4(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  if (a1) {
    Swift::Int v6 = a2 - a1;
  }
  else {
    Swift::Int v6 = 0;
  }
  sub_1005E1D10(v6);
  uint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  if (v4) {
    goto LABEL_7;
  }
  if (a2)
  {
    uint64_t v4 = 0;
    do
    {
      int v9 = *v4++;
      if ((v9 - 1) <= 0x7D)
      {
        uint64_t v10 = v7;
        unint64_t v11 = v8;
        sub_1005E1D60();
        uint64_t v7 = v10;
        unint64_t v8 = v11;
      }
LABEL_7:
      ;
    }
    while (!a2 || v4 != a2);
  }
  *a3 = v7;
  a3[1] = v8;
}

void sub_1003A9D70()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    if (v1) {
      uint64_t v3 = v2 - v1;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v3 < 0) {
      __break(1u);
    }
    else {
      sub_1003CA0F8(0, v3, v1, v2);
    }
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)v0;
    uint64_t v5 = *(unsigned __int8 **)(v0 + 8);
    sub_1003A9DEC(v4, v5);
  }
}

uint64_t sub_1003A9DEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1;
  if (a1) {
    Swift::Int v4 = a2 - a1;
  }
  else {
    Swift::Int v4 = 0;
  }
  sub_1005E1D10(v4);
  uint64_t result = 0;
  unint64_t v6 = 0xE000000000000000;
  if (v3) {
    goto LABEL_7;
  }
  if (a2)
  {
    uint64_t v3 = 0;
    do
    {
      int v7 = *v3++;
      if ((v7 - 1) <= 0x7D)
      {
        uint64_t v8 = result;
        unint64_t v9 = v6;
        sub_1005E1D60();
        uint64_t result = v8;
        unint64_t v6 = v9;
      }
LABEL_7:
      ;
    }
    while (!a2 || v3 != a2);
  }
  return result;
}

uint64_t sub_1003A9E84(unsigned __int8 *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v5 = a1;
  if (a1) {
    Swift::Int v6 = a2 - a1;
  }
  else {
    Swift::Int v6 = 0;
  }
  sub_1005E1D10(v6);
  uint64_t result = 0;
  unint64_t v8 = 0xE000000000000000;
  if (v5) {
    goto LABEL_7;
  }
  if (a2)
  {
    char v9 = 0;
    uint64_t v5 = 0;
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      if ((v11 - 1) >= 0x7E)
      {
LABEL_7:
        char v9 = 0;
      }
      else if ((v9 & 1) != 0 || (a3 & 1) == 0 || (char v9 = 1, v10 != 92))
      {
        uint64_t v12 = result;
        unint64_t v13 = v8;
        sub_1005E1D60();
        char v9 = 0;
        uint64_t result = v12;
        unint64_t v8 = v13;
      }
    }
    while (!a2 || v5 != a2);
  }
  return result;
}

uint64_t sub_1003A9F40()
{
  return sub_1003A9DEC(*v0, v0[1]);
}

BOOL sub_1003A9F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL v5 = *(void *)a1 == *(void *)a2 && v2 == v3;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
    BOOL v5 = 0;
  }
  BOOL v7 = *(void *)a1 == *(void *)a2 && v2 == v3;
  if (*(unsigned char *)(a2 + 16)) {
    BOOL v7 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return v5;
  }
  else {
    return v7;
  }
}

uint64_t sub_1003A9F8C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v3 = 0x28646E652ELL;
  }
  else
  {
    sub_1005E2C80(16);
    swift_bridgeObjectRelease();
    uint64_t v3 = 0x28656C6464696D2ELL;
  }
  uint64_t v5 = v3;
  v6._countAndFlagsBits = sub_1005E3230();
  sub_1005E1E30(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 3943982;
  v7._object = (void *)0xE300000000000000;
  sub_1005E1E30(v7);
  v8._countAndFlagsBits = sub_1005E3230();
  sub_1005E1E30(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  sub_1005E1E30(v9);
  return v5;
}

uint64_t sub_1003AA09C()
{
  return sub_1003A9F8C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void *sub_1003AA0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *__little, uint64_t a7)
{
  uint64_t result = 0;
  if (__little && a3)
  {
    size_t v14 = a7 - (void)__little;
    uint64_t v15 = a1;
    do
    {
      uint64_t v16 = a3 + v15;
      uint64_t result = memmem((const void *)(a3 + v15), a2 - v15, __little, v14);
      if (!result) {
        break;
      }
      uint64_t v17 = (uint64_t)result - v16;
      if ((uint64_t)result - v16 < 0) {
        return 0;
      }
      uint64_t v18 = v17 + v14;
      if (__OFADD__(v17, v14))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      if (a2 - v15 < v18) {
        return 0;
      }
      uint64_t v19 = v17 + v15;
      if (__OFADD__(v17, v15)) {
        goto LABEL_20;
      }
      BOOL v20 = __OFADD__(v18, v15);
      v15 += v18;
      if (v20) {
        goto LABEL_21;
      }
      if (v18 < v17 || v15 < v19) {
        goto LABEL_22;
      }
      if (v19 < a1) {
        goto LABEL_23;
      }
      if (v15 > a2) {
        goto LABEL_24;
      }
      uint64_t result = (void *)sub_1003AA1E8(a1, a2, a3, a4, a5, v19, v15);
    }
    while (v21 == -1);
  }
  return result;
}

uint64_t sub_1003AA1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  if (__OFADD__(a1, 2))
  {
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (a1 + 2 != a6)
  {
    switch(a5)
    {
      case 1:
        if (__OFADD__(a1, 3)) {
          goto LABEL_90;
        }
        if (a1 + 3 > a6) {
          return 0;
        }
        uint64_t v13 = a6 - 3;
        if (__OFSUB__(a6, 3)) {
          goto LABEL_95;
        }
        if (v13 < a1 || v13 >= a2) {
          goto LABEL_96;
        }
        if (*(unsigned char *)(a3 + v13) != 13) {
          return 0;
        }
        uint64_t v16 = a6 - 2;
        if (a6 - 2 < a1 || v16 >= a2) {
          goto LABEL_101;
        }
        if (*(unsigned char *)(a3 + v16) != 45) {
          return 0;
        }
        if (a6 <= a2) {
          goto LABEL_9;
        }
        __break(1u);
LABEL_25:
        if (__OFADD__(a1, 3)) {
          goto LABEL_91;
        }
        if (a1 + 3 > a6) {
          return 0;
        }
        uint64_t v13 = a6 - 3;
        if (__OFSUB__(a6, 3)) {
          goto LABEL_97;
        }
        if (v13 < a1 || v13 >= a2) {
          goto LABEL_98;
        }
        if (*(unsigned char *)(a3 + v13) != 10) {
          return 0;
        }
        uint64_t v17 = a6 - 2;
        if (a6 - 2 < a1 || v17 >= a2) {
          goto LABEL_102;
        }
        if (*(unsigned char *)(a3 + v17) != 45) {
          return 0;
        }
        if (a6 <= a2) {
          goto LABEL_9;
        }
        __break(1u);
LABEL_36:
        uint64_t v14 = sub_1003AA5D8(a1, a2, a3, a6);
        if (v18)
        {
          uint64_t v14 = sub_1003AA68C(a1, a2, a3, a6);
          if (v19) {
            return 0;
          }
        }
LABEL_38:
        uint64_t v13 = v14;
        break;
      case 2:
        goto LABEL_25;
      case 3:
        goto LABEL_36;
      default:
        uint64_t v14 = sub_1003AA5D8(a1, a2, a3, a6);
        if (v15) {
          return 0;
        }
        goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v13 = a6 - 2;
  if (__OFSUB__(a6, 2)) {
    goto LABEL_84;
  }
  if (v13 < a1 || v13 >= a2) {
    goto LABEL_85;
  }
  if (*(unsigned char *)(a3 + v13) != 45) {
    return 0;
  }
  if (a6 <= a1 || a6 > a2) {
    goto LABEL_87;
  }
LABEL_9:
  if (*(unsigned char *)(a6 + a3 - 1) != 45) {
    return 0;
  }
LABEL_39:
  if (__OFADD__(a7, 2))
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (a7 + 2 == a2)
  {
    if (a7 < a1 || a7 >= a2) {
      goto LABEL_89;
    }
    if (*(unsigned char *)(a3 + a7) == 45)
    {
      if (a7 + 1 >= a2)
      {
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      if (*(unsigned char *)(a3 + a7 + 1) == 45)
      {
        if (v13 <= a2) {
          return v13;
        }
        goto LABEL_100;
      }
    }
  }
  uint64_t v20 = sub_1003AAA74(a5, a7, a1, a2, a3, v13);
  if (v21 == -1)
  {
    if (a2 < a7)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    if (a7 < a1)
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    uint64_t v28 = a7;
    if (a7 == a2) {
      goto LABEL_53;
    }
    if (a7 >= a2)
    {
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      JUMPOUT(0x1003AA5C8);
    }
    int v22 = *(unsigned __int8 *)(a3 + a7);
    if (v22 == 45)
    {
      if (a7 + 1 == a2) {
        return 0;
      }
      if (a7 + 1 >= a2) {
        goto LABEL_103;
      }
      if (*(unsigned char *)(a3 + a7 + 1) != 45) {
        return 0;
      }
      a7 += 2;
      uint64_t v28 = a7;
      if (a7 == a2) {
        goto LABEL_79;
      }
    }
    if (a7 <= a2) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = a7;
    }
    if (a7 < a2)
    {
      int v24 = *(unsigned __int8 *)(a3 + a7);
      if (v24 == 32 || v24 == 9)
      {
        if (++a7 != a2)
        {
          while (v23 != a7)
          {
            int v25 = *(unsigned __int8 *)(a3 + a7);
            if (v25 != 32 && v25 != 9) {
              goto LABEL_77;
            }
            if (a2 == ++a7) {
              goto LABEL_75;
            }
          }
          goto LABEL_88;
        }
LABEL_75:
        uint64_t v28 = a2;
        if (v22 == 45)
        {
LABEL_79:
          if (v28 >= v13) {
            return v13;
          }
          __break(1u);
          return 0;
        }
      }
      else
      {
LABEL_77:
        uint64_t v28 = a7;
        if (v22 == 45)
        {
          if ((sub_1003CA4E0(a5) & 1) == 0) {
            return 0;
          }
          goto LABEL_79;
        }
      }
LABEL_53:
      if ((sub_1003CA4E0(a5) & 1) == 0) {
        return 0;
      }
      goto LABEL_79;
    }
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  return v20;
}

uint64_t sub_1003AA5D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (__OFADD__(result, 4))
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (result + 4 > a4) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t result = a4 - 4;
  if (__OFSUB__(a4, 4)) {
    goto LABEL_16;
  }
  if (result < v4 || result >= a2) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(a3 + result) != 13) {
    return 0;
  }
  uint64_t v5 = a4 - 3;
  if (a4 - 3 < v4 || v5 >= a2) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(a3 + v5) != 10) {
    return 0;
  }
  if (a4 - 2 >= a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*(unsigned char *)(a3 + a4 - 2) != 45) {
    return 0;
  }
  if (a4 <= a2)
  {
    if (*(unsigned char *)(a4 + a3 - 1) == 45) {
      return result;
    }
    return 0;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1003AA68C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (__OFADD__(result, 3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result + 3 > a4) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t result = a4 - 3;
  if (__OFSUB__(a4, 3)) {
    goto LABEL_14;
  }
  if (result < v4 || result >= a2) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a3 + result) != 10) {
    return 0;
  }
  uint64_t v5 = a4 - 2;
  if (a4 - 2 < v4 || v5 >= a2) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(a3 + v5) != 45) {
    return 0;
  }
  if (a4 <= a2)
  {
    if (*(unsigned char *)(a4 + a3 - 1) == 45) {
      return result;
    }
    return 0;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1003AA724(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = a5 + 4;
  if (__OFADD__(a5, 4))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (result > a7) {
    return 0;
  }
  if (a5 < a6 || a5 >= a7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a8 + a5) != a1) {
    return 0;
  }
  if (a5 + 1 >= a7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a8 + a5 + 1) != a2) {
    return 0;
  }
  if (a5 + 2 >= a7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(unsigned __int8 *)(a8 + a5 + 2) != a3) {
    return 0;
  }
  if (a5 + 3 < a7)
  {
    if (*(unsigned __int8 *)(a8 + a5 + 3) == a4) {
      return result;
    }
    return 0;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1003AA7C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v6 <= a3)
  {
    if (result < a2 || result >= a3) {
      goto LABEL_23;
    }
    if (*(unsigned char *)(a4 + result) == 13)
    {
      if (v6 >= a5) {
        return a5;
      }
      goto LABEL_25;
    }
  }
  uint64_t v7 = result + 3;
  if (__OFADD__(result, 3))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v7 > a3) {
    return 0;
  }
  if (result < a2 || result >= a3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(unsigned char *)(a4 + result) != 45) {
    return 0;
  }
  if (v6 < a2 || v6 >= a3) {
    goto LABEL_26;
  }
  if (*(unsigned char *)(a4 + v6) != 45) {
    return 0;
  }
  if (result + 2 < a3)
  {
    if (*(unsigned char *)(a4 + result + 2) == 13)
    {
      if (v7 >= a5) {
        return a5;
      }
      goto LABEL_28;
    }
    return 0;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003AA8B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v6 <= a3)
  {
    if (result < a2 || result >= a3) {
      goto LABEL_23;
    }
    if (*(unsigned char *)(a4 + result) == 10)
    {
      if (v6 >= a5) {
        return a5;
      }
      goto LABEL_25;
    }
  }
  uint64_t v7 = result + 3;
  if (__OFADD__(result, 3))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v7 > a3) {
    return 0;
  }
  if (result < a2 || result >= a3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(unsigned char *)(a4 + result) != 2) {
    return 0;
  }
  if (v6 < a2 || v6 >= a3) {
    goto LABEL_26;
  }
  if (*(unsigned char *)(a4 + v6) != 45) {
    return 0;
  }
  if (result + 2 < a3)
  {
    if (*(unsigned char *)(a4 + result + 2) == 10)
    {
      if (v7 >= a5) {
        return a5;
      }
      goto LABEL_28;
    }
    return 0;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003AA99C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result + 2;
  if (__OFADD__(result, 2))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = a5;
  if (v5 > a3)
  {
LABEL_10:
    uint64_t result = sub_1003AA724(0x2Du, 0x2Du, 0xDu, 0xAu, result, a2, a3, a4);
    if (v7) {
      return 0;
    }
    if (result >= v6) {
      return v6;
    }
    goto LABEL_17;
  }
  if (result < a2 || result >= a3)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a4 + result) != 13) {
    goto LABEL_10;
  }
  if (result + 1 >= a3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(unsigned char *)(a4 + result + 1) != 10) {
    goto LABEL_10;
  }
  if (v5 >= a5) {
    return v6;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1003AAA74(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  switch(a1)
  {
    case 1:
      return sub_1003AA7C4(a2, a3, a4, a5, a6);
    case 2:
      return sub_1003AA8B0(a2, a3, a4, a5, v6);
    case 3:
      uint64_t v13 = sub_1003AA99C(a2, a3, a4, a5, a6);
      if (v14 != -1) {
        return v13;
      }
      return sub_1003AA8B0(a2, a3, a4, a5, v6);
    default:
      uint64_t v11 = a2 + 2;
      if (__OFADD__(a2, 2))
      {
        __break(1u);
        goto LABEL_22;
      }
      if (v11 > a4) {
        goto LABEL_17;
      }
      if (a2 < a3 || a2 >= a4)
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (*(unsigned char *)(a5 + a2) == 13)
      {
        if (a2 + 1 >= a4)
        {
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (*(unsigned char *)(a5 + a2 + 1) == 10)
        {
          if (v11 >= a6) {
            return v6;
          }
LABEL_25:
          __break(1u);
          JUMPOUT(0x1003AAC00);
        }
      }
LABEL_17:
      uint64_t v16 = sub_1003AA724(0x2Du, 0x2Du, 0xDu, 0xAu, a2, a3, a4, a5);
      if ((v17 & 1) == 0)
      {
        if (v16 >= v6) {
          return v6;
        }
        goto LABEL_23;
      }
      return 0;
  }
}

ValueMetadata *type metadata accessor for Boundary()
{
  return &type metadata for Boundary;
}

__n128 initializeBufferWithCopyOfBuffer for UnsafeBoundary(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeBoundary()
{
  return &type metadata for UnsafeBoundary;
}

__n128 initializeBufferWithCopyOfBuffer for UnsafeBoundary.PatchedBoundary(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeBoundary.PatchedBoundary()
{
  return &type metadata for UnsafeBoundary.PatchedBoundary;
}

uint64_t getEnumTagSinglePayload for UnsafeDelimiterLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeDelimiterLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003AACF0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeDelimiterLine()
{
  return &type metadata for UnsafeDelimiterLine;
}

unint64_t sub_1003AAD10()
{
  unint64_t result = qword_100713AE0;
  if (!qword_100713AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713AE0);
  }
  return result;
}

double Cache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 88) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  return result;
}

double Cache.init()()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 80) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 88) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  return result;
}

uint64_t Cache.deinit()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 40;
    do
    {
      ucnv_close();
      v2 += 16;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(v0 + 96) & 1) == 0)
  {
    unsigned int v3 = *(UIDNA **)(v0 + 88);
    if (v3) {
      uidna_close(v3);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Cache.__deallocating_deinit()
{
  Cache.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Cache()
{
  return self;
}

uint64_t getEnumTagSinglePayload for Cache.CachedConverter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Cache.CachedConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)double result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cache.CachedConverter()
{
  return &type metadata for Cache.CachedConverter;
}

uint64_t sub_1003AAF54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  char v7 = (char **)(a2 + 80);
  swift_beginAccess();
  Swift::String v8 = *(void **)(a2 + 80);
  unint64_t v9 = v8[2];
  if (v9)
  {
    int v10 = v8 + 4;
    if (v8[4] == a1)
    {
      uint64_t v18 = v8[5];
      goto LABEL_23;
    }
    if (v9 != 1)
    {
      if (v8[6] == a1)
      {
        uint64_t v18 = v8[7];
        unint64_t v12 = 1;
LABEL_22:
        uint64_t v19 = v10[2 * v12];
        sub_1003AB208(v12);
        sub_1003AB294(0, 0, v19, v18);
        goto LABEL_23;
      }
      if (v9 != 2)
      {
        uint64_t v11 = v8 + 9;
        unint64_t v12 = 2;
        while (*(v11 - 1) != a1)
        {
          unint64_t v13 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
LABEL_28:
            __break(1u);
          }
          ++v12;
          v11 += 2;
          if (v13 == v9) {
            goto LABEL_10;
          }
        }
        if (v12 >= v9) {
          goto LABEL_28;
        }
        uint64_t v18 = *v11;
        if (v12) {
          goto LABEL_22;
        }
LABEL_23:
        ucnv_reset();
        ucnv_setFallback();
        uint64_t v22 = v18;
        goto LABEL_24;
      }
    }
  }
LABEL_10:
  LODWORD(v22) = 0;
  uint64_t v14 = ucnv_open();
  ucnv_setFallback();
  swift_beginAccess();
  sub_1003AB294(0, 0, a1, v14);
  char v15 = *v7;
  if (*((void *)*v7 + 2) < 3uLL) {
    goto LABEL_17;
  }
  while (1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v7 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      break;
    }
    uint64_t v17 = *((void *)v15 + 2);
    if (!v17) {
      goto LABEL_16;
    }
LABEL_13:
    *((void *)v15 + 2) = v17 - 1;
    *char v7 = v15;
    ucnv_close();
    char v15 = *v7;
    if (*((void *)*v7 + 2) <= 2uLL) {
      goto LABEL_17;
    }
  }
  char v15 = sub_1003AB3B0((uint64_t)v15);
  *char v7 = v15;
  uint64_t v17 = *((void *)v15 + 2);
  if (v17) {
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  swift_endAccess();
  uint64_t v22 = v14;
LABEL_24:
  int v23 = 0;
  __int16 v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  a3(&v21, &v22);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    return v21;
  }
  return result;
}

uint64_t sub_1003AB208(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003AB3B0(v3);
    uint64_t v3 = result;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 16 * a1;
    uint64_t v8 = *(void *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
    return v8;
  }
  return result;
}

unint64_t sub_1003AB294(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v6 = *v4;
  int64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v8 = result;
  unint64_t v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v11 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v11) {
      int64_t v14 = v7 + v10;
    }
    else {
      int64_t v14 = v7;
    }
    uint64_t result = (unint64_t)sub_1003EF8B4((char *)result, v14, 1, (char *)v6);
    unint64_t v6 = result;
  }
  char v15 = (void *)(v6 + 32 + 16 * v8);
  if (!v10) {
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)(v15 + 2);
  uint64_t v19 = (void *)(v6 + 32 + 16 * a2);
  if (v15 + 2 != v19 || result >= (unint64_t)&v19[2 * v18]) {
    uint64_t result = (unint64_t)memmove((void *)result, v19, 16 * v18);
  }
  uint64_t v20 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v20, v10);
  uint64_t v21 = v20 + v10;
  if (!v17)
  {
    *(void *)(v6 + 16) = v21;
LABEL_19:
    *char v15 = a3;
    v15[1] = a4;
    *int v4 = v6;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_1003AB3B0(uint64_t a1)
{
  return sub_1003EF8B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1003AB3C4(uint64_t a1)
{
  return sub_1003EFC18(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_1003AB3D8(void *a1)
{
  return sub_1003F028C(0, a1[2], 0, a1);
}

uint64_t ContentDisposition.kind.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t sub_1003AB41C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t ContentDisposition.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1003AB468(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1003AB468(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static ContentDisposition.Kind.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_1005E3290();
  }
}

uint64_t sub_1003AB4EC(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  return sub_1005E3290();
}

uint64_t ContentDisposition.Attribute.key.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t sub_1003AB594(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t ContentDisposition.Attribute.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1003AB5E0(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1003AB5E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003AB5F8(uint64_t *a1, uint64_t a2)
{
  return _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO21__derived_enum_equalsySbAG_AGtFZ_0(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1003AB610(uint64_t *a1, uint64_t a2)
{
  return _s9IMAP2MIME18ContentDispositionV9AttributeV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], a1[2], a1[3], *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static ContentDisposition.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a5 != 1) {
        return 0;
      }
    }
    else if (a2 == 2)
    {
      if (a5 != 2) {
        return 0;
      }
    }
    else if (a5 < 3 || (a1 != a4 || a2 != a5) && (sub_1005E3290() & 1) == 0)
    {
      return 0;
    }
  }
  else if (a5)
  {
    return 0;
  }
  return sub_1003AB918(a3, a6);
}

uint64_t sub_1003AB6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a2 + 64);
    for (uint64_t i = (unint64_t *)(a1 + 64); ; i += 12)
    {
      uint64_t v5 = *(i - 3);
      uint64_t v6 = *(i - 2);
      uint64_t v8 = *(i - 1);
      unint64_t v7 = *i;
      unint64_t v10 = i[1];
      unint64_t v9 = i[2];
      unint64_t v11 = i[3];
      unint64_t v46 = i[7];
      uint64_t v12 = *(v3 - 3);
      uint64_t v13 = *(v3 - 2);
      uint64_t v15 = *(v3 - 1);
      unint64_t v14 = *v3;
      unint64_t v17 = v3[1];
      unint64_t v16 = v3[2];
      unint64_t v18 = v3[3];
      unint64_t v45 = v3[6];
      unint64_t v43 = v3[4];
      unint64_t v44 = v3[7];
      unint64_t v41 = i[6];
      unint64_t v42 = v3[5];
      unint64_t v39 = i[4];
      unint64_t v40 = i[5];
      if (v5)
      {
        if (!v12) {
          return 0;
        }
        if (*(i - 4) != *(v3 - 4) || v5 != v12)
        {
          unint64_t v36 = i[2];
          unint64_t v37 = v3[2];
          unint64_t v19 = i[3];
          unint64_t v34 = v3[3];
          unint64_t v35 = i[1];
          unint64_t v20 = *i;
          unint64_t v21 = *v3;
          unint64_t v33 = v3[1];
          char v22 = sub_1005E3290();
          unint64_t v17 = v33;
          unint64_t v18 = v34;
          unint64_t v14 = v21;
          unint64_t v10 = v35;
          unint64_t v9 = v36;
          unint64_t v7 = v20;
          unint64_t v16 = v37;
          unint64_t v11 = v19;
          if ((v22 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v12)
      {
        return 0;
      }
      if (v6 != v13 || v8 != v15)
      {
        unint64_t v38 = v16;
        unint64_t v23 = v9;
        unint64_t v24 = v11;
        unint64_t v25 = v18;
        unint64_t v26 = v7;
        unint64_t v27 = v10;
        unint64_t v28 = v14;
        uint64_t v29 = v2;
        unint64_t v30 = v17;
        char v31 = sub_1005E3290();
        unint64_t v17 = v30;
        uint64_t v2 = v29;
        unint64_t v14 = v28;
        unint64_t v10 = v27;
        unint64_t v7 = v26;
        unint64_t v18 = v25;
        unint64_t v16 = v38;
        unint64_t v11 = v24;
        unint64_t v9 = v23;
        if ((v31 & 1) == 0) {
          break;
        }
      }
      if ((v9 != v16 || v11 != v18 || v7 >> 16 != v14 >> 16 || v10 >> 16 != v17 >> 16) && (sub_1005E3220() & 1) == 0
        || (v41 != v45 || v46 != v44 || v39 >> 16 != v43 >> 16 || v40 >> 16 != v42 >> 16) && (sub_1005E3220() & 1) == 0)
      {
        break;
      }
      v3 += 12;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1003AB918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 56);
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *(i - 2);
      uint64_t v6 = *(i - 1);
      uint64_t v7 = *i;
      unint64_t v8 = *(v3 - 2);
      uint64_t v9 = *(v3 - 1);
      uint64_t v10 = *v3;
      switch(v5)
      {
        case 0:
          if (v8) {
            return 0;
          }
          break;
        case 1:
          if (v8 != 1) {
            return 0;
          }
          break;
        case 2:
          if (v8 != 2) {
            return 0;
          }
          break;
        case 3:
          if (v8 != 3) {
            return 0;
          }
          break;
        case 4:
          if (v8 != 4) {
            return 0;
          }
          break;
        case 5:
          if (v8 != 5) {
            return 0;
          }
          break;
        default:
          if (v8 < 6) {
            return 0;
          }
          BOOL v11 = *(i - 3) == *(v3 - 3) && v5 == v8;
          if (!v11 && (sub_1005E3290() & 1) == 0) {
            return 0;
          }
          break;
      }
      BOOL v12 = v6 == v9 && v7 == v10;
      if (!v12 && (sub_1005E3290() & 1) == 0) {
        break;
      }
      v3 += 4;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1003ABA78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 56);
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      uint64_t v7 = *(v3 - 1);
      uint64_t v8 = *v3;
      BOOL v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_1005E3290() & 1) == 0) {
        break;
      }
      BOOL v10 = v5 == v7 && v6 == v8;
      if (!v10 && (sub_1005E3290() & 1) == 0) {
        break;
      }
      v3 += 4;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1003ABB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 80);
    for (uint64_t i = (uint64_t *)(a1 + 80); ; i += 7)
    {
      sub_1003AE650((uint64_t)(i - 6), (uint64_t)v11);
      uint64_t v7 = *(i - 1);
      uint64_t v6 = *i;
      sub_1003AE650((uint64_t)(v3 - 6), (uint64_t)v12);
      uint64_t v9 = *(v3 - 1);
      uint64_t v8 = *v3;
      sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE6AC);
      swift_bridgeObjectRetain();
      sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE6AC);
      swift_bridgeObjectRetain();
      if ((_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v12) & 1) == 0) {
        break;
      }
      if (v6)
      {
        if (!v8)
        {
          sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          goto LABEL_18;
        }
        if (v7 == v9 && v6 == v8)
        {
          sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          swift_bridgeObjectRelease();
          sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          swift_bridgeObjectRelease();
        }
        else
        {
          char v5 = sub_1005E3290();
          sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          swift_bridgeObjectRelease();
          sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0) {
            return 0;
          }
        }
      }
      else
      {
        sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE7CC);
        if (v8)
        {
          swift_bridgeObjectRelease();
          sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE7CC);
          return 0;
        }
        sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      }
      v3 += 7;
      if (!--v2) {
        return 1;
      }
    }
    sub_1003AE78C((uint64_t)v12, (void (*)(void, void, void, void, void))sub_1003AE7CC);
    swift_bridgeObjectRelease();
LABEL_18:
    sub_1003AE78C((uint64_t)v11, (void (*)(void, void, void, void, void))sub_1003AE7CC);
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t sub_1003ABDB0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  if (v3)
  {
    if (v3 == 1)
    {
      if (v5 != 1) {
        return 0;
      }
    }
    else if (v3 == 2)
    {
      if (v5 != 2) {
        return 0;
      }
    }
    else if (v5 < 3 || (*a1 != *a2 || v3 != v5) && (sub_1005E3290() & 1) == 0)
    {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  return sub_1003AB918(v4, v6);
}

uint64_t ContentDisposition.description.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1003AB41C(a1, a2);
  swift_bridgeObjectRetain();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(a1, a2, a3);
}

uint64_t sub_1003ABEBC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  sub_1003AB41C(v1, v2);
  swift_bridgeObjectRetain();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(v1, v2, v3);
}

uint64_t ContentDisposition.Kind.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0x656D686361747461;
  uint64_t v3 = 0x7461642D6D726F66;
  if (a2 != 2) {
    uint64_t v3 = a1;
  }
  if (a2 != 1) {
    uint64_t v2 = v3;
  }
  if (a2) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0x656E696C6E69;
  }
  sub_1003AB41C(a1, a2);
  return v4;
}

uint64_t String.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x656D686361747461;
  uint64_t v3 = 0x7461642D6D726F66;
  if (a2 != 2) {
    uint64_t v3 = a1;
  }
  if (a2 != 1) {
    uint64_t v2 = v3;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0x656E696C6E69;
  }
}

{
  uint64_t result;

  uint64_t result = 0x646578696DLL;
  switch(a2)
  {
    case 0:
      sub_1003AE88C(a1, 0);
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 0x747365676964;
      break;
    case 3:
      uint64_t result = 0x74616E7265746C61;
      break;
    case 4:
      uint64_t result = 0x646574616C6572;
      break;
    case 5:
      uint64_t result = 0x74726F706572;
      break;
    case 6:
      uint64_t result = 0x64656E676973;
      break;
    case 7:
      uint64_t result = 0x6574707972636E65;
      break;
    case 8:
      uint64_t result = 0x7461642D6D726F66;
      break;
    case 9:
      uint64_t result = 0x2D646578696D2D78;
      break;
    case 10:
      uint64_t result = 0x676E617265747962;
      break;
    case 11:
      uint64_t result = 0x756F64656C707061;
      break;
    default:
      uint64_t result = a1;
      break;
  }
  return result;
}

uint64_t sub_1003AC00C()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = 0x656D686361747461;
  uint64_t v3 = 0x7461642D6D726F66;
  if (v1 != 2) {
    uint64_t v3 = *v0;
  }
  if (v1 != 1) {
    uint64_t v2 = v3;
  }
  if (v1) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0x656E696C6E69;
  }
  sub_1003AB41C(*v0, v1);
  return v4;
}

uint64_t ContentDisposition.Attribute.description.getter(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  sub_1003AB594(a1, a2);
  swift_bridgeObjectRetain();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(a1, a2, a3, a4);
}

uint64_t sub_1003AC100()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = (void *)v0[3];
  sub_1003AB594(v1, v2);
  swift_bridgeObjectRetain();
  return _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(v1, v2, v4, v3);
}

unint64_t ContentDisposition.Attribute.Key.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x656D616E656C6966;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      unint64_t v2 = 0x6E6F697461657263;
      break;
    case 2uLL:
      unint64_t v2 = 0xD000000000000011;
      break;
    case 3uLL:
      unint64_t v2 = 0x7461642D64616572;
      break;
    case 4uLL:
      unint64_t v2 = 1702521203;
      break;
    case 5uLL:
      unint64_t v2 = 1701667182;
      break;
    default:
      unint64_t v2 = a1;
      break;
  }
  sub_1003AB594(a1, a2);
  return v2;
}

unint64_t String.init(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x656D616E656C6966;
  switch(a2)
  {
    case 1:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x7461642D64616572;
      break;
    case 4:
      unint64_t result = 1702521203;
      break;
    case 5:
      unint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1003AC340()
{
  return ContentDisposition.Attribute.Key.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1003AC34C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003AC380(a1, (uint64_t (*)(void, void))_s9IMAP2MIME18ContentDispositionV4KindOyAESScfC_0, a2);
}

uint64_t sub_1003AC368@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003AC380(a1, (uint64_t (*)(void, void))_s9IMAP2MIME18ContentDispositionV9AttributeV3KeyOyAGSScfC_0, a2);
}

uint64_t sub_1003AC380@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t ContentDisposition.filename.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  for (uint64_t i = a3 + 56; *(void *)(i - 16); i += 32)
  {
    if (!--v3) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(i - 8);
  swift_bridgeObjectRetain();
  return v5;
}

int64_t sub_1003AC410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = (uint64_t *)(a5 + 80); (*(unsigned char *)(i - 4) & 1) != 0; i += 7)
  {
LABEL_5:
    if (!--v5)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  uint64_t v9 = (unsigned char *)*(i - 3);
  BOOL v10 = (unsigned __int8 *)*(i - 2);
  char v11 = *((unsigned char *)i - 8);
  uint64_t v12 = *i;
  switch(*((unsigned char *)i - 48))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      char v8 = sub_1005E3290();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      int64_t result = sub_1003DC284(v9, v10, v11, v12, a1);
      break;
  }
  return result;
}

Swift::Int sub_1003AC5F0()
{
  return sub_1005E3470();
}

uint64_t sub_1003AC698()
{
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003AC72C()
{
  return sub_1005E3470();
}

uint64_t sub_1003AC7D0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003AEECC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_1003AC800(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xEA0000000000746ELL;
  uint64_t v5 = 0x656D686361747461;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7461642D6D726F66;
    unint64_t v4 = 0xE900000000000061;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656E696C6E69;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1003AC864(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003BE700(*a1, *a2);
}

void sub_1003AC870(void *a1@<X8>)
{
  *a1 = &off_1006EAE40;
}

uint64_t sub_1003AC880()
{
  return sub_1003AF988(*v0);
}

uint64_t sub_1003AC888(uint64_t a1)
{
  return sub_1003AFB8C(a1, *v1);
}

uint64_t sub_1003AC890(uint64_t a1)
{
  return sub_1003AFC94(a1, *v1);
}

uint64_t sub_1003AC898@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006EAD90;
  uint64_t result = sub_1003AEF18(*(void *)a1, *(void **)(a1 + 8), v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003AC8D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003BE6FC(*a1, *a2);
}

void sub_1003AC8E0(void *a1@<X8>)
{
  *a1 = &off_1006EAD00;
}

uint64_t sub_1003AC8F0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1006EAE68;
  uint64_t result = sub_1003AEF18(*(void *)a1, *(void **)(a1 + 8), v3);
  *a2 = result;
  return result;
}

void sub_1003AC928(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x656D616E656C6966;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED0000657461642DLL;
      uint64_t v3 = 0x6E6F697461657263;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000011;
      a1[1] = 0x80000001005E93B0;
      break;
    case 3:
      *a1 = 0x7461642D64616572;
      a1[1] = 0xE900000000000065;
      break;
    case 4:
      *a1 = 1702521203;
      a1[1] = 0xE400000000000000;
      break;
    case 5:
      *a1 = 1701667182;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1003ACA08(void *a1@<X8>)
{
  *a1 = &off_1006EAF18;
}

uint64_t sub_1003ACA18(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  switch(v4)
  {
    case 'c':
      if (v5 != 114 || v6 != 101 || v7 != 97) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 1;
      break;
    case 'f':
      if (v5 != 105 || v6 != 108 || v7 != 101) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 0;
      break;
    case 'm':
      if (v5 != 111 || v6 != 100 || v7 != 105) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 2;
      break;
    case 'n':
      if (v5 != 97 || v6 != 109 || v7 != 101) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 5;
      break;
    case 'r':
      if (v5 != 101 || v6 != 97 || v7 != 100) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 3;
      break;
    case 's':
      if (v5 != 105 || v6 != 122 || v7 != 101) {
        return 6;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 4;
      break;
    default:
      return 6;
  }
  uint64_t result = sub_1003AF3EC(v8, v9, v10);
  if (result == 6) {
    return 6;
  }
  return result;
}

uint64_t sub_1003ACC54(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  if (v4 == 97)
  {
    if (v5 != 116 || v6 != 116 || v7 != 97) {
      return 3;
    }
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 1;
    goto LABEL_16;
  }
  if (v4 == 102)
  {
    if (v5 != 111 || v6 != 114 || v7 != 109) {
      return 3;
    }
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 2;
LABEL_16:
    uint64_t result = sub_1003AF1F8(v8, v9, v10);
    if (result != 3) {
      return result;
    }
    return 3;
  }
  if (v4 == 105 && v5 == 110 && v6 == 108 && v7 == 105)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 0;
    goto LABEL_16;
  }
  return 3;
}

uint64_t _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyO21__derived_enum_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (a4) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 1:
      if (a4 != 1) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (a4 != 3) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (a4 != 4) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (a4 != 5) {
        goto LABEL_18;
      }
      uint64_t result = 1;
      break;
    default:
      if (a4 < 6)
      {
LABEL_18:
        uint64_t result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = sub_1005E3290();
      }
      break;
  }
  return result;
}

uint64_t _s9IMAP2MIME18ContentDispositionV9AttributeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      if (a6) {
        return 0;
      }
      goto LABEL_18;
    case 1:
      if (a6 == 1) {
        goto LABEL_18;
      }
      return 0;
    case 2:
      if (a6 == 2) {
        goto LABEL_18;
      }
      return 0;
    case 3:
      if (a6 == 3) {
        goto LABEL_18;
      }
      return 0;
    case 4:
      if (a6 == 4) {
        goto LABEL_18;
      }
      return 0;
    case 5:
      if (a6 == 5) {
        goto LABEL_18;
      }
      return 0;
    default:
      if (a6 < 6) {
        return 0;
      }
      if (a1 == a5 && a2 == a6 || (v12 = sub_1005E3290(), uint64_t result = 0, (v12 & 1) != 0))
      {
LABEL_18:
        if (a3 == a7 && a4 == a8)
        {
          return 1;
        }
        else
        {
          return sub_1005E3290();
        }
      }
      return result;
  }
}

uint64_t _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = qword_1007139F8;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = 0x656D616E656C6966;
  uint64_t v10 = sub_1005E04E0();
  sub_1003461B0(v10, (uint64_t)qword_100713C48);
  sub_1003AE8A4();
  sub_1005E2990();
  char v12 = v11;
  swift_bridgeObjectRelease();
  if (v12)
  {
    unint64_t v14 = (void *)0xE800000000000000;
    switch(a2)
    {
      case 0uLL:
        break;
      case 1uLL:
        uint64_t v9 = 0x6E6F697461657263;
        unint64_t v14 = (void *)0xED0000657461642DLL;
        break;
      case 2uLL:
        unint64_t v14 = (void *)0x80000001005E93B0;
        uint64_t v9 = 0xD000000000000011;
        break;
      case 3uLL:
        uint64_t v9 = 0x7461642D64616572;
        unint64_t v14 = (void *)0xE900000000000065;
        break;
      case 4uLL:
        unint64_t v14 = (void *)0xE400000000000000;
        uint64_t v9 = 1702521203;
        break;
      case 5uLL:
        unint64_t v14 = (void *)0xE400000000000000;
        uint64_t v9 = 1701667182;
        break;
      default:
        uint64_t v9 = a1;
        unint64_t v14 = (void *)a2;
        break;
    }
    sub_1003AB594(a1, a2);
    sub_1003AB594(a1, a2);
    v20._countAndFlagsBits = v9;
    v20._object = v14;
    sub_1005E1E30(v20);
    swift_bridgeObjectRelease();
    sub_1003AB5E0(a1, a2);
    v21._countAndFlagsBits = 61;
    v21._object = (void *)0xE100000000000000;
    sub_1005E1E30(v21);
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = a3;
    v22._object = a4;
    sub_1005E1E30(v22);
    sub_1003AB5E0(a1, a2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = (void *)0xE800000000000000;
    switch(a2)
    {
      case 0uLL:
        break;
      case 1uLL:
        uint64_t v9 = 0x6E6F697461657263;
        uint64_t v13 = (void *)0xED0000657461642DLL;
        break;
      case 2uLL:
        uint64_t v13 = (void *)0x80000001005E93B0;
        uint64_t v9 = 0xD000000000000011;
        break;
      case 3uLL:
        uint64_t v9 = 0x7461642D64616572;
        uint64_t v13 = (void *)0xE900000000000065;
        break;
      case 4uLL:
        uint64_t v13 = (void *)0xE400000000000000;
        uint64_t v9 = 1702521203;
        break;
      case 5uLL:
        uint64_t v13 = (void *)0xE400000000000000;
        uint64_t v9 = 1701667182;
        break;
      default:
        uint64_t v9 = a1;
        uint64_t v13 = (void *)a2;
        break;
    }
    sub_1003AB594(a1, a2);
    sub_1003AB594(a1, a2);
    v16._countAndFlagsBits = v9;
    v16._object = v13;
    sub_1005E1E30(v16);
    swift_bridgeObjectRelease();
    sub_1003AB5E0(a1, a2);
    v17._countAndFlagsBits = 8765;
    v17._object = (void *)0xE200000000000000;
    sub_1005E1E30(v17);
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = a3;
    v18._object = a4;
    sub_1005E1E30(v18);
    sub_1003AB5E0(a1, a2);
    swift_bridgeObjectRelease_n();
    v19._countAndFlagsBits = 34;
    v19._object = (void *)0xE100000000000000;
    sub_1005E1E30(v19);
  }
  return 0;
}

uint64_t _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0x656D686361747461;
  uint64_t v4 = 0x7461642D6D726F66;
  if (a2 != 2) {
    uint64_t v4 = a1;
  }
  if (a2 != 1) {
    uint64_t v3 = v4;
  }
  if (a2) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x656E696C6E69;
  }
  uint64_t v13 = v5;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    char v7 = (void **)(a3 + 56);
    do
    {
      uint64_t v8 = (uint64_t)*(v7 - 3);
      unint64_t v9 = (unint64_t)*(v7 - 2);
      uint64_t v10 = (uint64_t)*(v7 - 1);
      char v11 = *v7;
      sub_1003AB594(v8, v9);
      swift_bridgeObjectRetain();
      sub_1003AB594(v8, v9);
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = _sSS9IMAP2MIMEEySSAA18ContentDispositionV9AttributeVcfC_0(v8, v9, v10, v11);
      sub_1005E1E30(v14);
      swift_bridgeObjectRelease();
      sub_1003AB5E0(v8, v9);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8251;
      v15._object = (void *)0xE200000000000000;
      sub_1005E1E30(v15);
      swift_bridgeObjectRelease();
      v7 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindOyAESScfC_0(uint64_t a1)
{
  uint64_t v3 = sub_1005E1CB0();
  uint64_t v4 = v2;
  if (v3 == 0x656E696C6E69 && v2 == 0xE600000000000000) {
    goto LABEL_3;
  }
  char v5 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v5) {
    goto LABEL_5;
  }
  if (v3 == 0x656D686361747461 && v4 == 0xEA0000000000746ELL) {
    goto LABEL_3;
  }
  char v7 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_5;
  }
  if (v3 == 0x7461642D6D726F66 && v4 == 0xE900000000000061)
  {
LABEL_3:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = sub_1005E3290();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
LABEL_5:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _s9IMAP2MIME18ContentDispositionV9AttributeV3KeyOyAGSScfC_0(uint64_t a1)
{
  uint64_t v3 = sub_1005E1CB0();
  uint64_t v4 = v2;
  if (v3 == 0x656D616E656C6966 && v2 == 0xE800000000000000) {
    goto LABEL_3;
  }
  char v5 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v5) {
    goto LABEL_21;
  }
  if (v3 == 0x6E6F697461657263 && v4 == 0xED0000657461642DLL) {
    goto LABEL_3;
  }
  char v6 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_21;
  }
  if (v3 == 0xD000000000000011 && 0x80000001005E93B0 == v4) {
    goto LABEL_3;
  }
  char v7 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_21;
  }
  if (v3 == 0x7461642D64616572 && v4 == 0xE900000000000065) {
    goto LABEL_3;
  }
  char v8 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_21;
  }
  if (v3 == 1702521203 && v4 == 0xE400000000000000) {
    goto LABEL_3;
  }
  char v9 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_21;
  }
  if (v3 == 1701667182 && v4 == 0xE400000000000000)
  {
LABEL_3:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = sub_1005E3290();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1003ADDE8()
{
  unint64_t result = qword_100713BD0;
  if (!qword_100713BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713BD0);
  }
  return result;
}

unint64_t sub_1003ADE40()
{
  unint64_t result = qword_100713BD8;
  if (!qword_100713BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713BD8);
  }
  return result;
}

unint64_t sub_1003ADE98()
{
  unint64_t result = qword_100713BE0;
  if (!qword_100713BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713BE0);
  }
  return result;
}

unint64_t sub_1003ADEF0()
{
  unint64_t result = qword_100713BE8;
  if (!qword_100713BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713BE8);
  }
  return result;
}

uint64_t destroy for ContentDisposition(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *_s9IMAP2MIME18ContentDispositionVwCP_0(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >= 3)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContentDisposition(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 3uLL)
  {
    if (v4 >= 3)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1003AE094((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003AE094(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ContentDisposition(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for ContentDisposition(void *a1, void *a2)
{
  if (a1[1] >= 3uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 3)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1003AE094((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentDisposition()
{
  return &type metadata for ContentDisposition;
}

unint64_t destroy for ContentDisposition.Kind(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentDisposition.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ContentDisposition.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Kind()
{
  return &type metadata for ContentDisposition.Kind;
}

uint64_t destroy for ContentDisposition.Attribute(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ContentDisposition.Attribute(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >= 6)
  {
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContentDisposition.Attribute(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 6uLL)
  {
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1003AE094((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ContentDisposition.Attribute(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ContentDisposition.Attribute(void *a1, void *a2)
{
  if (a1[1] >= 6uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1003AE094((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute()
{
  return &type metadata for ContentDisposition.Attribute;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *_s9IMAP2MIME18ContentDispositionV4KindOwca_0(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9IMAP2MIME18ContentDispositionV4KindOwta_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentDisposition.Attribute.Key(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ContentDisposition.Attribute.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute.Key()
{
  return &type metadata for ContentDisposition.Attribute.Key;
}

uint64_t sub_1003AE650(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1003AE6AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      __n128 result = sub_1003AE774(result, a2);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_2;
    case 10:
      swift_bridgeObjectRetain();
LABEL_2:
      __n128 result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003AE774(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 0xB) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1003AE78C(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1003AE7CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
      uint64_t result = sub_1003AE88C(result, a2);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_4;
    case 10:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003AE88C(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 0xB) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1003AE8A4()
{
  unint64_t result = qword_100713BF0;
  if (!qword_100713BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713BF0);
  }
  return result;
}

uint64_t initializeWithCopy for RFC_2231.UnsafeAttributeValue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RFC_2231.UnsafeAttributeValue(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RFC_2231.UnsafeAttributeValue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition()
{
  return &type metadata for UnsafeContentDisposition;
}

uint64_t destroy for UnsafeContentDisposition.Attribute()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnsafeContentDisposition.Attribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnsafeContentDisposition.Attribute(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v3;
  long long v4 = *(long long *)((char *)a2 + 24);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UnsafeContentDisposition.Attribute(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UnsafeContentDisposition.Attribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute()
{
  return &type metadata for UnsafeContentDisposition.Attribute;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Kind()
{
  return &type metadata for UnsafeContentDisposition.Kind;
}

unsigned char *initializeBufferWithCopyOfBuffer for UnsafeContentDisposition.Kind.Known(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for UnsafeContentDisposition.Kind.Known(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003AEBFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Kind.Known()
{
  return &type metadata for UnsafeContentDisposition.Kind.Known;
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute.Key.Known()
{
  return &type metadata for UnsafeContentDisposition.Attribute.Key.Known;
}

unsigned char *_s9IMAP2MIME24UnsafeContentDispositionV9AttributeV3KeyO5KnownOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003AED14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentDisposition.Attribute.Key.Known()
{
  return &type metadata for ContentDisposition.Attribute.Key.Known;
}

uint64_t sub_1003AED4C()
{
  return sub_1000D95F4(&qword_100713BF8, &qword_100713C00);
}

unint64_t sub_1003AED78()
{
  unint64_t result = qword_100713C08;
  if (!qword_100713C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C08);
  }
  return result;
}

uint64_t sub_1003AEDCC()
{
  return sub_1000D95F4(&qword_100713C10, &qword_100713C18);
}

unint64_t sub_1003AEDF8()
{
  unint64_t result = qword_100713C20;
  if (!qword_100713C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C20);
  }
  return result;
}

uint64_t sub_1003AEE4C()
{
  return sub_1000D95F4(&qword_100713C28, &qword_100713C30);
}

unint64_t sub_1003AEE78()
{
  unint64_t result = qword_100713C38;
  if (!qword_100713C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C38);
  }
  return result;
}

uint64_t sub_1003AEECC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1006EAD28;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1003AEF18(uint64_t a1, void *a2, Swift::OpaquePointer a3)
{
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  unint64_t v5 = sub_1005E3050(a3, v7);
  swift_bridgeObjectRelease();
  if (v5 >= 6) {
    return 6;
  }
  else {
    return v5;
  }
}

ValueMetadata *type metadata accessor for UnsafeContentDisposition.Attribute.Key()
{
  return &type metadata for UnsafeContentDisposition.Attribute.Key;
}

uint64_t sub_1003AEF84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = 0xEB00000000657669;
  switch((char)a3)
  {
    case 1:
      unint64_t v4 = 0xEB00000000656C62;
      break;
    case 2:
      unint64_t v4 = 0xE900000000000065;
      break;
    case 3:
    case 9:
    case 10:
      unint64_t v4 = 0xE600000000000000;
      break;
    case 4:
      unint64_t v4 = 0xE900000000000064;
      break;
    case 5:
      unint64_t v4 = 0xE900000000000061;
      break;
    case 6:
      unint64_t v4 = 0xE500000000000000;
      break;
    case 7:
      unint64_t v4 = 0xEF6563616C706572;
      break;
    case 8:
      unint64_t v4 = 0xE700000000000000;
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v4) & 0xF;
  if (a1)
  {
    if (v7 != a2 - a1) {
      return 11;
    }
  }
  else if (v7)
  {
    return 11;
  }
  unint64_t v8 = sub_1003CBEE0(v3);
  char v10 = sub_1003DA920(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 11;
  }
  return v3;
}

uint64_t sub_1003AF0E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = 0xE900000000000074;
  switch((char)a3)
  {
    case 1:
      unint64_t v4 = 0xEB000000006E6F69;
      break;
    case 2:
    case 3:
    case 6:
    case 9:
      unint64_t v4 = 0xE500000000000000;
      break;
    case 4:
    case 8:
      unint64_t v4 = 0xE700000000000000;
      break;
    case 5:
    case 7:
      unint64_t v4 = 0xE400000000000000;
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v4) & 0xF;
  if (a1)
  {
    if (v7 != a2 - a1) {
      return 10;
    }
  }
  else if (v7)
  {
    return 10;
  }
  unint64_t v8 = sub_1003CC178(v3);
  char v10 = sub_1003DA920(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 10;
  }
  return v3;
}

uint64_t sub_1003AF1F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((_BYTE)a3)
  {
    if (a3 == 1) {
      unint64_t v6 = 0xEA0000000000746ELL;
    }
    else {
      unint64_t v6 = 0xE900000000000061;
    }
  }
  else
  {
    unint64_t v6 = 0xE600000000000000;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if (a1)
  {
    if (v7 != a2 - a1) {
      return 3;
    }
  }
  else if (v7)
  {
    return 3;
  }
  if ((_BYTE)v3)
  {
    if (v3 == 1) {
      unint64_t v8 = 0x656D686361747461;
    }
    else {
      unint64_t v8 = 0x7461642D6D726F66;
    }
    if (v3 == 1) {
      unint64_t v9 = 0xEA0000000000746ELL;
    }
    else {
      unint64_t v9 = 0xE900000000000061;
    }
  }
  else
  {
    unint64_t v9 = 0xE600000000000000;
    unint64_t v8 = 0x656E696C6E69;
  }
  char v10 = sub_1003DA920(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 3;
  }
  return v3;
}

uint64_t sub_1003AF30C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = sub_1003EB6E0(a3);
  unint64_t v8 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    Swift::Int v9 = sub_1005E1E80();
    swift_bridgeObjectRelease();
    if (a1) {
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v8 & 0x2000000000000000) != 0) {
      Swift::Int v9 = HIBYTE(v8) & 0xF;
    }
    else {
      Swift::Int v9 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (a1)
    {
LABEL_6:
      if (v9 != a2 - a1) {
        return 20;
      }
      goto LABEL_10;
    }
  }
  if (v9) {
    return 20;
  }
LABEL_10:
  unint64_t v10 = sub_1003EB6E0(v3);
  char v12 = sub_1003DA920(v10, v11, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0) {
    return 20;
  }
  return v3;
}

uint64_t sub_1003AF3EC(char *a1, char *a2, uint64_t a3)
{
  unint64_t v3 = 0x656D616E656C6966;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = a3;
  unint64_t v8 = 0x656D616E656C6966;
  switch((char)a3)
  {
    case 1:
      unint64_t v8 = 0x6E6F697461657263;
      unint64_t v4 = 0xED0000657461642DLL;
      break;
    case 2:
      unint64_t v4 = 0x80000001005E93B0;
      unint64_t v8 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v8 = 0x7461642D64616572;
      unint64_t v4 = 0xE900000000000065;
      break;
    case 4:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v8 = 1702521203;
      break;
    case 5:
      unint64_t v4 = 0xE400000000000000;
      unint64_t v8 = 1701667182;
      break;
    default:
      break;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    Swift::Int v9 = sub_1005E1E80();
    swift_bridgeObjectRelease();
    if (a1) {
      goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v4 & 0x2000000000000000) != 0) {
      Swift::Int v9 = HIBYTE(v4) & 0xF;
    }
    else {
      Swift::Int v9 = v8 & 0x6D7F657F7F7FLL;
    }
    if (a1)
    {
LABEL_12:
      if (v9 != a2 - a1) {
        return 6;
      }
      goto LABEL_16;
    }
  }
  if (v9) {
    return 6;
  }
LABEL_16:
  unint64_t v10 = 0xE800000000000000;
  switch((char)v5)
  {
    case 1:
      unint64_t v3 = 0x6E6F697461657263;
      unint64_t v10 = 0xED0000657461642DLL;
      break;
    case 2:
      unint64_t v10 = 0x80000001005E93B0;
      unint64_t v3 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v3 = 0x7461642D64616572;
      unint64_t v10 = 0xE900000000000065;
      break;
    case 4:
      unint64_t v10 = 0xE400000000000000;
      unint64_t v3 = 1702521203;
      break;
    case 5:
      unint64_t v10 = 0xE400000000000000;
      unint64_t v3 = 1701667182;
      break;
    default:
      break;
  }
  char v11 = sub_1003DA920(v3, v10, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    return 6;
  }
  return v5;
}

uint64_t sub_1003AF658(char *a1, char *a2, uint64_t a3)
{
  unint64_t v3 = 1953063479;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = a3;
  unint64_t v8 = 1953063479;
  switch((char)a3)
  {
    case 1:
      unint64_t v8 = 1953063480;
      break;
    case 2:
      unint64_t v4 = 0xE600000000000000;
      unint64_t v8 = 0x7972616E6962;
      break;
    case 3:
      unint64_t v4 = 0x80000001005E93F0;
      unint64_t v8 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v4 = 0xE600000000000000;
      unint64_t v8 = 0x343665736162;
      break;
    default:
      break;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    Swift::Int v9 = sub_1005E1E80();
    swift_bridgeObjectRelease();
    if (a1) {
      goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v4 & 0x2000000000000000) != 0) {
      Swift::Int v9 = HIBYTE(v4) & 0xF;
    }
    else {
      Swift::Int v9 = v8 & 0x7D76757F6B7FLL;
    }
    if (a1)
    {
LABEL_11:
      if (v9 != a2 - a1) {
        return 5;
      }
      goto LABEL_15;
    }
  }
  if (v9) {
    return 5;
  }
LABEL_15:
  unint64_t v10 = 0xE400000000000000;
  switch((char)v5)
  {
    case 1:
      unint64_t v3 = 1953063480;
      break;
    case 2:
      unint64_t v10 = 0xE600000000000000;
      unint64_t v3 = 0x7972616E6962;
      break;
    case 3:
      unint64_t v10 = 0x80000001005E93F0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v10 = 0xE600000000000000;
      unint64_t v3 = 0x343665736162;
      break;
    default:
      break;
  }
  char v11 = sub_1003DA920(v3, v10, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    return 5;
  }
  return v5;
}

uint64_t sub_1003AF84C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = 0xE400000000000000;
  switch((char)a3)
  {
    case 1:
      unint64_t v4 = 0xEB00000000657079;
      break;
    case 2:
    case 9:
      unint64_t v4 = 0xE800000000000000;
      break;
    case 3:
    case 11:
      unint64_t v4 = 0xE700000000000000;
      break;
    case 4:
    case 6:
      unint64_t v4 = 0xE500000000000000;
      break;
    case 5:
    case 10:
    case 12:
      unint64_t v4 = 0xE600000000000000;
      break;
    case 7:
      unint64_t v4 = 0xE200000000000000;
      break;
    case 8:
      unint64_t v4 = 0xEB000000006E6F69;
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v4) & 0xF;
  if (a1)
  {
    if (v7 != a2 - a1) {
      return 13;
    }
  }
  else if (v7)
  {
    return 13;
  }
  unint64_t v8 = sub_1003B180C(v3);
  char v10 = sub_1003DA920(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    return 13;
  }
  return v3;
}

Swift::Int sub_1003AF98C()
{
  return sub_1005E3470();
}

Swift::Int sub_1003AFAA4()
{
  return sub_1005E3470();
}

uint64_t sub_1003AFB90()
{
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003AFC98()
{
  return sub_1005E3470();
}

Swift::Int sub_1003AFD7C()
{
  return sub_1005E3470();
}

unint64_t ContentTransferEncoding.rawValue.getter(char a1)
{
  unint64_t result = 1953063479;
  switch(a1)
  {
    case 1:
      unint64_t result = 1953063480;
      break;
    case 2:
      unint64_t result = 0x7972616E6962;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x343665736162;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003AFF28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003BE5CC(*a1, *a2);
}

Swift::Int sub_1003AFF34()
{
  return sub_1003AFAA4();
}

uint64_t sub_1003AFF3C()
{
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003B0000()
{
  return sub_1003AFC98();
}

uint64_t sub_1003B0008@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s9IMAP2MIME23ContentTransferEncodingO8rawValueACSgSS_tcfC_0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_1003B0038(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1953063479;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 1953063480;
      goto LABEL_3;
    case 2:
      *a1 = 0x7972616E6962;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0xD000000000000010;
      a1[1] = 0x80000001005E93F0;
      break;
    case 4:
      *a1 = 0x343665736162;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE400000000000000;
      break;
  }
}

uint64_t ContentTransferEncoding.init(_:)(uint64_t a1, uint64_t a2)
{
  if (sub_1005E1CD0() == a1 && v4 == a2)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  char v6 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (sub_1005E1CD0() == a1 && v9 == a2)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    char v10 = sub_1005E3290();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (sub_1005E1CD0() == a1 && v11 == a2)
    {
      uint64_t v7 = 2;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v12 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (sub_1005E1CD0() == a1 && v13 == a2)
      {
        swift_bridgeObjectRelease_n();
        return 4;
      }
      else
      {
        char v14 = sub_1005E3290();
        swift_bridgeObjectRelease();
        if (v14)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          if (sub_1005E1CD0() == a1 && v15 == a2)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v16 = sub_1005E3290();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v16 & 1) == 0) {
              return 5;
            }
          }
          return 3;
        }
      }
    }
  }
  return v7;
}

uint64_t BodyStructure.Encoding.init(_:)()
{
  return sub_1005E1CD0();
}

Swift::String __swiftcall String.init(_:)(IMAP2MIME::ContentTransferEncoding a1)
{
  uint64_t v2 = 1953063479;
  uint64_t v3 = (void *)0xE400000000000000;
  switch(a1)
  {
    case IMAP2MIME_ContentTransferEncoding_eightBit:
      uint64_t v2 = 1953063480;
      break;
    case IMAP2MIME_ContentTransferEncoding_binary:
      uint64_t v3 = (void *)0xE600000000000000;
      uint64_t v2 = 0x7972616E6962;
      break;
    case IMAP2MIME_ContentTransferEncoding_quotedPrintable:
      uint64_t v3 = (void *)0x80000001005E93F0;
      uint64_t v2 = 0xD000000000000010;
      break;
    case IMAP2MIME_ContentTransferEncoding_base64:
      uint64_t v3 = (void *)0xE600000000000000;
      uint64_t v2 = 0x343665736162;
      break;
    default:
      break;
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t sub_1003B046C(uint64_t result, unsigned __int8 a2)
{
  if (a2 >= 4u)
  {
    double v2 = ceil((double)result * 3.0 * 0.25);
    if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        if (v2 < 9.22337204e18)
        {
          Swift::String result = (uint64_t)v2 + 10;
          if (!__OFADD__((uint64_t)v2, 10)) {
            return result;
          }
LABEL_10:
          __break(1u);
          return result;
        }
LABEL_9:
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1003B04E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2) {
      uint64_t v4 = a3 - a2;
    }
    else {
      uint64_t v4 = 0;
    }
    Swift::String result = sub_1003B0824(0, result, v4, a2, a3, a4);
    if (v5) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = result;
    }
    if ((v6 & 0x8000000000000000) == 0) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_1003B055C(uint64_t *result, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (result >= 3u)
  {
    if (result == 3)
    {
      if (a2) {
        unint64_t v18 = a3 - (void)a2;
      }
      else {
        unint64_t v18 = 0;
      }
      if ((v18 & 0x8000000000000000) == 0) {
        return (uint64_t *)sub_1003D845C(0, v18, (uint64_t)a2, a3, (uint64_t)a4, a5);
      }
      __break(1u);
    }
    else
    {
      if (a2) {
        uint64_t v19 = a3 - (void)a2;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v19 & 0x8000000000000000) == 0) {
        return sub_10039E074(0, v19, (uint64_t)a2, a3, a4, a5);
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v7 = a3 - (void)a2;
    if (!a2) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 & (v7 >> 63);
    if (a5 - (uint64_t)a4 < v7) {
      uint64_t v7 = a5 - (void)a4;
    }
    if (a4) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = sub_1003B04E4(v9, (uint64_t)a4, a5, sub_1001F94DC);
    uint64_t v13 = v12;
    if (v11) {
      char v14 = (const void *)(v11 + v10);
    }
    else {
      char v14 = 0;
    }
    if (a2 && v14)
    {
      uint64_t v15 = v11 + v13;
      if (!v11) {
        uint64_t v15 = 0;
      }
      memmove(a2, v14, v15 - (void)v14);
    }
    uint64_t v16 = sub_1003B04E4(v9, (uint64_t)a2, a3, sub_1001F94DC);
    if (v17) {
      return (uint64_t *)(v17 + v16);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003B06DC(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = a4 - a3;
  if (!a3) {
    int64_t v4 = 0;
  }
  if (result < 0 || v4 < result)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a2 < 0 || v4 < a2) {
    goto LABEL_27;
  }
  if (a2 - result < 100) {
    return result;
  }
  unint64_t v5 = a2 - 99;
  if ((unint64_t)a2 < 0x63) {
    goto LABEL_28;
  }
  if (a2 - 2 < v5)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + a2;
  while (1)
  {
    if ((uint64_t)(v5 + v6) >= a2 || (uint64_t)v5 < result || (uint64_t)(v5 + v6) >= a2 - 2)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (*(unsigned __int8 *)(v7 + v6 - 99) <= 0x7Eu && *(unsigned __int8 *)(v7 + v6 - 98) < 0x7Fu) {
      break;
    }
    if (++v6 == 97) {
      return result;
    }
  }
  uint64_t v10 = v5 + v6;
  BOOL v11 = __OFADD__(v10, 2);
  int64_t v12 = v10 + 2;
  if (v11) {
    goto LABEL_30;
  }
  if (v12 < result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v12 > a2) {
LABEL_32:
  }
    __break(1u);
  return result;
}

uint64_t sub_1003B07AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 - a2;
  if (a2) {
    uint64_t v6 = a3 - a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = sub_1003B0824(0, a1, v6, a2, a3, sub_1001F94DC);
  if ((v8 & 1) == 0)
  {
    if (a2)
    {
      if (v7 < v5) {
        return *(unsigned __int8 *)(a2 + v7) | 0x20u;
      }
    }
    else if (v7 < 0)
    {
      return *(unsigned __int8 *)(a2 + v7) | 0x20u;
    }
  }
  return 0;
}

uint64_t sub_1003B0824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a6(a1, a3, a4, a5);
  if (a2 > 0)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2) {
      goto LABEL_8;
    }
    return 0;
  }
  if (v10 <= 0 && v10 > a2) {
    return 0;
  }
LABEL_8:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v12 = a5 - a4;
  if (!a4) {
    uint64_t v12 = 0;
  }
  if (result < 0 || v12 < result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t _s9IMAP2MIME23ContentTransferEncodingO8rawValueACSgSS_tcfC_0(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1006EAF40;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

unint64_t sub_1003B091C()
{
  unint64_t result = qword_100713C40;
  if (!qword_100713C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C40);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContentTransferEncoding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003B0A3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransferEncoding()
{
  return &type metadata for ContentTransferEncoding;
}

uint64_t sub_1003B0A74(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  if (v4 == 56)
  {
    if (v5 == 98 && v6 == 105 && v7 == 116)
    {
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 1;
      goto LABEL_26;
    }
  }
  else if (v4 == 55 && v5 == 98 && v6 == 105 && v7 == 116)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 0;
    goto LABEL_26;
  }
  if (v4 == 98 && v5 == 105 && v6 == 110 && v7 == 97)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 2;
    goto LABEL_26;
  }
  if (v4 == 113 && v5 == 117 && v6 == 111 && v7 == 116)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 3;
    goto LABEL_26;
  }
  if (v4 == 98 && v5 == 97 && v6 == 115 && v7 == 101)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 4;
LABEL_26:
    uint64_t result = sub_1003AF658(v8, v9, v10);
    if (result != 5) {
      return result;
    }
  }
  return 5;
}

uint64_t sub_1003B0C3C(unsigned __int8 a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  BOOL v12 = a1 == 3;
  if (a1 >= 3u)
  {
LABEL_6:
    if (v12)
    {
      if ((a2 & 0x8000000000000000) == 0)
      {
        if (a2 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
        {
          __chkstk_darwin();
          uint64_t v15 = sub_1003D845C(0, a2, (uint64_t)&v30 - v14, (uint64_t)&v30 + a2 - v14, (uint64_t)a3, a4);
          if (!v6) {
            goto LABEL_28;
          }
          goto LABEL_29;
        }
        uint64_t v24 = swift_slowAlloc();
        uint64_t v25 = sub_1003D845C(0, a2, v24, v24 + a2, (uint64_t)a3, a4);
        if (!v6)
        {
LABEL_33:
          sub_1003B5A98(v25, v26, v27 & 1, a5, a6, (uint64_t *)&v31);
          a6 = v31;
          swift_slowDealloc();
          goto LABEL_35;
        }
LABEL_34:
        swift_slowDealloc();
        goto LABEL_35;
      }
      __break(1u);
    }
    else if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
      {
        __chkstk_darwin();
        uint64_t v15 = (uint64_t)sub_10039E074(0, a2, (uint64_t)&v30 - v23, (uint64_t)&v30 + a2 - v23, a3, a4);
        if (!v6)
        {
LABEL_28:
          sub_1003B5A98(v15, v16, v17 & 1, a5, a6, (uint64_t *)&v31);
          a6 = v31;
          goto LABEL_35;
        }
LABEL_29:
        swift_willThrow();
        goto LABEL_35;
      }
      uint64_t v28 = swift_slowAlloc();
      uint64_t v25 = (uint64_t)sub_10039E074(0, a2, v28, v28 + a2, a3, a4);
      if (!v6) {
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __break(1u);
  }
  if (a3)
  {
    uint64_t v13 = a4 - (void)a3;
    BOOL v12 = a4 - (void)a3 == a2;
    if (a4 - (uint64_t)a3 <= a2)
    {
      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_6;
      }
LABEL_15:
      sub_1003B0FB4(a5);
      swift_retain();
      a6 = (uint64_t *)sub_1003E87A4(a5, 0, v13, (uint64_t)a3, a6);
LABEL_35:
      sub_1003B0F88(a5);
      return (uint64_t)a6;
    }
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  uint64_t v18 = sub_1003B04E4(a2, (uint64_t)a3, a4, sub_1001F94DC);
  if (v20) {
    uint64_t v21 = v20 + v19;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20) {
    uint64_t v22 = v20 + v18;
  }
  else {
    uint64_t v22 = 0;
  }
  sub_1003B5A98(v22, v21, 1, a5, a6, &v32);
  sub_1003B0F88(a5);
  if (!v6) {
    return v32;
  }
  return (uint64_t)a6;
}

uint64_t sub_1003B0F88(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003B0FB4(uint64_t a1)
{
  return a1;
}

uint64_t IndexableMessageInfo.Attachment.mediaType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1003B0FEC(v1, a1);
}

uint64_t sub_1003B0FEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t IndexableMessageInfo.Attachment.mediaType.setter(uint64_t a1)
{
  return sub_1003B1050(a1, v1);
}

uint64_t sub_1003B1050(uint64_t a1, uint64_t a2)
{
  return a2;
}

double ContentType.init(mediaType:attributes:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1003AE650(a1, (uint64_t)v8);
  char v5 = v9;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 32) = v5;
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t static ContentType.Attribute.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = sub_1005E3290(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return sub_1005E3290();
    }
  }
  return result;
}

uint64_t sub_1003B119C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_1005E3290(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_1005E3290();
    }
  }
  return result;
}

uint64_t static ContentType.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1003AE650(a1, (uint64_t)v7);
  sub_1003AE650(a2, (uint64_t)v6);
  if (_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v6)) {
    char v4 = sub_1003ABA78(*(void *)(a1 + 40), *(void *)(a2 + 40));
  }
  else {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1003B12A8(uint64_t a1, uint64_t a2)
{
  sub_1003AE650(a1, (uint64_t)v8);
  uint64_t v4 = *(void *)(a1 + 40);
  sub_1003AE650(a2, (uint64_t)v9);
  uint64_t v5 = *(void *)(a2 + 40);
  if (_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v9)) {
    char v6 = sub_1003ABA78(v4, v5);
  }
  else {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t ContentType.description.getter()
{
  sub_1003AE650(v0, (uint64_t)v3);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_1003B28E4((uint64_t)v3);
  sub_10002292C((uint64_t)&v2);
  return _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0(v0);
}

uint64_t sub_1003B1364()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  long long v4 = v0[2];
  sub_1003AE650((uint64_t)v3, (uint64_t)v5);
  uint64_t v6 = *((void *)&v4 + 1);
  sub_1003B28E4((uint64_t)v5);
  sub_10002292C((uint64_t)&v6);
  return _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0((uint64_t)v3);
}

uint64_t ContentType.Attribute.description.getter(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = qword_1007139F8;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1005E04E0();
  sub_1003461B0(v9, (uint64_t)qword_100713C48);
  sub_1003AE8A4();
  sub_1005E2990();
  char v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v13 = 8251;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    sub_1005E1E30(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 61;
    v18._object = (void *)0xE100000000000000;
    sub_1005E1E30(v18);
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = a3;
    v19._object = a4;
    sub_1005E1E30(v19);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = a1;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 8765;
    v14._object = (void *)0xE200000000000000;
    sub_1005E1E30(v14);
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = a3;
    v15._object = a4;
    sub_1005E1E30(v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 34;
    v16._object = (void *)0xE100000000000000;
    sub_1005E1E30(v16);
  }
  return v13;
}

Swift::String __swiftcall String.init(_:)(IMAP2MIME::ContentType::Attribute a1)
{
  object = a1.value._object;
  uint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  uint64_t v3 = a1.key._object;
  uint64_t v4 = a1.key._countAndFlagsBits;
  uint64_t v5 = qword_1007139F8;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_1005E04E0();
  sub_1003461B0(v6, (uint64_t)qword_100713C48);
  sub_1003AE8A4();
  sub_1005E2990();
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v12 = 8251;
    unint64_t v13 = 0xE200000000000000;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v4;
    v17._object = v3;
    sub_1005E1E30(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 61;
    v18._object = (void *)0xE100000000000000;
    sub_1005E1E30(v18);
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = countAndFlagsBits;
    v19._object = object;
    sub_1005E1E30(v19);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v4;
    unint64_t v13 = (unint64_t)v3;
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = 8765;
    v14._object = (void *)0xE200000000000000;
    sub_1005E1E30(v14);
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = countAndFlagsBits;
    v15._object = object;
    sub_1005E1E30(v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 34;
    v16._object = (void *)0xE100000000000000;
    sub_1005E1E30(v16);
  }
  uint64_t v9 = v12;
  char v10 = (void *)v13;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t sub_1003B1700()
{
  return ContentType.Attribute.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1003B170C()
{
  uint64_t v0 = sub_1005E04E0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin();
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10034E5B4(v2, qword_100713C48);
  sub_1003461B0(v0, (uint64_t)qword_100713C48);
  sub_1005E04A0();
  sub_1005E04D0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1003B180C(char a1)
{
  uint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x742D737365636361;
      break;
    case 2:
      uint64_t result = 0x797261646E756F62;
      break;
    case 3:
      uint64_t result = 0x74657372616863;
      break;
    case 4:
      uint64_t result = 0x70736C6564;
      break;
    case 5:
      uint64_t result = 0x7265626D756ELL;
      break;
    case 6:
      uint64_t result = 0x6C61746F74;
      break;
    case 7:
      uint64_t result = 25705;
      break;
    case 8:
      uint64_t result = 0x7469736F70736964;
      break;
    case 9:
      uint64_t result = 0x6C6F636F746F7270;
      break;
    case 10:
      uint64_t result = 0x636C6167696DLL;
      break;
    case 11:
      uint64_t result = 0x746E656D6D6F63;
      break;
    case 12:
      uint64_t result = 0x74616D726F66;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_1003B1984()
{
  char v1 = *v0;
  sub_1005E33F0();
  sub_1003B180C(v1);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003B19E8()
{
  sub_1003B180C(*v0);
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003B1A3C()
{
  char v1 = *v0;
  sub_1005E33F0();
  sub_1003B180C(v1);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003B1A9C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003B2EA4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1003B1ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003B180C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003B1AF8(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1003B180C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1003B180C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1005E3290();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1003B1B84()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = v1 + 48; (*(unsigned char *)i & 1) != 0; i += 56)
  {
LABEL_3:
    if (!--v2)
    {
      sub_1003B0F88(v0);
      sub_1003B0F88(v0);
      return 0;
    }
  }
  uint64_t v4 = *(void *)(i + 32);
  switch(*(unsigned char *)(i - 16))
  {
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    default:
      char v5 = sub_1005E3290();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
LABEL_10:
      sub_1003B0F88(v0);
      sub_1003B0F88(v0);
      if (*(void *)(v4 + 16) == 1)
      {
        uint64_t v6 = *(void *)(v4 + 32);
        int v7 = *(__int16 *)(v4 + 48);
        swift_bridgeObjectRelease();
        if (v7 < 0) {
          return v6;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return 0;
  }
}

uint64_t sub_1003B1DF4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = v1 + 48; (*(unsigned char *)i & 1) != 0; i += 56)
  {
LABEL_3:
    if (!--v2)
    {
      sub_1003B0F88(v0);
      sub_1003B0F88(v0);
      return 0;
    }
  }
  uint64_t v4 = *(void *)(i + 32);
  switch(*(unsigned char *)(i - 16))
  {
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    default:
      char v5 = sub_1005E3290();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
LABEL_10:
      sub_1003B0F88(v0);
      sub_1003B0F88(v0);
      if (*(void *)(v4 + 16) == 1)
      {
        uint64_t v6 = *(void *)(v4 + 32);
        int v7 = *(__int16 *)(v4 + 48);
        swift_bridgeObjectRelease();
        if (v7 < 0) {
          return v6;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return 0;
  }
}

uint64_t sub_1003B205C(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  if (v4 == 110 && v5 == 97 && v6 == 109 && v7 == 101)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 0;
    goto LABEL_31;
  }
  if (v4 == 98)
  {
    if (v5 == 111 && v6 == 117 && v7 == 110)
    {
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 2;
      goto LABEL_31;
    }
  }
  else if (v4 == 97 && v5 == 99 && v6 == 99 && v7 == 101)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 1;
    goto LABEL_31;
  }
  if (v4 == 99 && v5 == 104 && v6 == 97 && v7 == 114)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 3;
    goto LABEL_31;
  }
  if (v4 == 100 && v5 == 101 && v6 == 108 && v7 == 115)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 4;
    goto LABEL_31;
  }
  if (v4 == 110 && v5 == 117 && v6 == 109 && v7 == 98)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 5;
    goto LABEL_31;
  }
  if (v4 == 105)
  {
    if (v5 == 100 && !v6 && !v7)
    {
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 7;
      goto LABEL_31;
    }
    goto LABEL_44;
  }
  if (v4 == 116)
  {
    if (v5 == 111 && v6 == 116 && v7 == 97)
    {
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 6;
      goto LABEL_31;
    }
LABEL_44:
    BOOL v12 = v5 == 105;
    goto LABEL_45;
  }
  BOOL v12 = v5 == 105;
  if (v4 == 100 && v5 == 105 && v6 == 115 && v7 == 112)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 8;
    goto LABEL_31;
  }
LABEL_45:
  if (v4 == 109)
  {
    if (v6 != 103) {
      BOOL v12 = 0;
    }
    if (!v12 || v7 != 97) {
      return 13;
    }
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 10;
    goto LABEL_31;
  }
  if (v4 != 112)
  {
    if (v4 == 99 && v5 == 111 && v6 == 109 && v7 == 109)
    {
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 11;
    }
    else
    {
      if (v4 != 102 || v5 != 111 || v6 != 114 || v7 != 109) {
        return 13;
      }
      char v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 12;
    }
LABEL_31:
    uint64_t result = sub_1003AF84C(v8, v9, v10);
    if (result != 13) {
      return result;
    }
    return 13;
  }
  if (v5 == 114 && v6 == 111 && v7 == 116)
  {
    char v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 9;
    goto LABEL_31;
  }
  return 13;
}

uint64_t sub_1003B2418@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a1;
  unint64_t v7 = sub_1003DD04C(a1, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    sub_1003CDB70(v7, v8, (uint64_t)v18);
    sub_1003B2B10((uint64_t)v18, (uint64_t)&v19);
    char v11 = v22;
    if (v22 <= 0xFDu)
    {
      uint64_t v5 = v19;
      long long v16 = v20;
      uint64_t v15 = v21;
      Swift::String v17 = (char *)_swiftEmptyArrayStorage;
      sub_1003D9B84(v10, &v17);
      uint64_t result = swift_bridgeObjectRelease();
      long long v13 = v16;
      Swift::String v14 = v17;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1003CD208(v5, a2);
  long long v13 = (unint64_t)a2;
  Swift::String v14 = (char *)_swiftEmptyArrayStorage;
  char v11 = -95;
  uint64_t v15 = 0;
  switch((char)result)
  {
    case 1:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 16;
      break;
    case 2:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 32;
      break;
    case 3:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 48;
      break;
    case 4:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 64;
      break;
    case 5:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 80;
      break;
    case 6:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 96;
      break;
    case 7:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 112;
      break;
    case 8:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = 0x80;
      break;
    case 9:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      long long v13 = xmmword_1005F6750;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      char v11 = -112;
      break;
    case 10:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v15 = 0;
      char v11 = 0;
      long long v13 = xmmword_100622580;
      Swift::String v14 = (char *)_swiftEmptyArrayStorage;
      break;
  }
LABEL_7:
  *(void *)a4 = v5;
  *(_OWORD *)(a4 + 8) = v13;
  *(void *)(a4 + 24) = v15;
  *(unsigned char *)(a4 + 32) = v11;
  *(void *)(a4 + 40) = v14;
  return result;
}

uint64_t _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0(uint64_t a1)
{
  sub_1003AE650(a1, (uint64_t)v19);
  uint64_t v2 = _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0((uint64_t)v19);
  uint64_t v17 = v2;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v18 = v3;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (void **)(v3 + 56);
    do
    {
      uint64_t v7 = (uint64_t)*(v5 - 3);
      char v6 = *(v5 - 2);
      uint64_t v9 = (uint64_t)*(v5 - 1);
      uint64_t v8 = *v5;
      uint64_t v10 = qword_1007139F8;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_1005E04E0();
      sub_1003461B0(v11, (uint64_t)qword_100713C48);
      sub_1003AE8A4();
      sub_1005E2990();
      char v13 = v12;
      swift_bridgeObjectRelease();
      if (v13)
      {
        v16._uint64_t countAndFlagsBits = 8251;
        v16._object = (void *)0xE200000000000000;
        swift_bridgeObjectRetain();
        v20._uint64_t countAndFlagsBits = v7;
        v20._object = v6;
        sub_1005E1E30(v20);
        swift_bridgeObjectRelease();
        v21._uint64_t countAndFlagsBits = 61;
        v21._object = (void *)0xE100000000000000;
        sub_1005E1E30(v21);
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = v9;
        v22._object = v8;
        sub_1005E1E30(v22);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v16._uint64_t countAndFlagsBits = v7;
        v16._object = v6;
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = 8765;
        v24._object = (void *)0xE200000000000000;
        sub_1005E1E30(v24);
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = v9;
        v25._object = v8;
        sub_1005E1E30(v25);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = 34;
        v26._object = (void *)0xE100000000000000;
        sub_1005E1E30(v26);
      }
      v5 += 4;
      sub_1005E1E30(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 8251;
      v23._object = (void *)0xE200000000000000;
      sub_1005E1E30(v23);
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
    sub_10001D550((uint64_t)&v18);
    return v17;
  }
  else
  {
    uint64_t v14 = v2;
    sub_10001D550((uint64_t)&v18);
  }
  return v14;
}

uint64_t sub_1003B28E4(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ContentType(uint64_t a1)
{
  sub_1003AE7CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContentType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  char v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  sub_1003AE7CC(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ContentType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContentType(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  sub_1003AE7CC(v5, v6, v7, v8, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContentType()
{
  return &type metadata for ContentType;
}

ValueMetadata *type metadata accessor for ContentType.Attribute()
{
  return &type metadata for ContentType.Attribute;
}

uint64_t sub_1003B2B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for UnsafeContentType()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnsafeContentType(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnsafeContentType(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UnsafeContentType(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7ElementVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UnsafeContentType()
{
  return &type metadata for UnsafeContentType;
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute()
{
  return &type metadata for UnsafeContentType.Attribute;
}

uint64_t getEnumTagSinglePayload for UnsafeContentType.Attribute.Key.Known(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnsafeContentType.Attribute.Key.Known(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003B2E14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute.Key.Known()
{
  return &type metadata for UnsafeContentType.Attribute.Key.Known;
}

unint64_t sub_1003B2E50()
{
  unint64_t result = qword_100713C68;
  if (!qword_100713C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C68);
  }
  return result;
}

uint64_t sub_1003B2EA4(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1006EAFD8;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xD) {
    return 13;
  }
  else {
    return v4;
  }
}

ValueMetadata *type metadata accessor for UnsafeContentType.Attribute.Key()
{
  return &type metadata for UnsafeContentType.Attribute.Key;
}

uint64_t EmailAddress.localPart.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EmailAddress.domainPart.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

double EmailAddress.init(name:localPart:domainPart:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, _OWORD *a7@<X8>)
{
  sub_1003B3E08(a1, a2, a3, a4, a5, a6, v12);
  long long v8 = v12[3];
  a7[2] = v12[2];
  a7[3] = v8;
  long long v9 = v12[5];
  a7[4] = v12[4];
  a7[5] = v9;
  double result = *(double *)v12;
  long long v11 = v12[1];
  *a7 = v12[0];
  a7[1] = v11;
  return result;
}

uint64_t sub_1003B2FD4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  _OWORD v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  void v10[2] = a2[2];
  uint64_t v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return _s9IMAP2MIME12EmailAddressV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10) & 1;
}

uint64_t sub_1003B3030(uint64_t a1)
{
  if (v1[9] >> 14 < v1[8] >> 14) {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  unint64_t v3 = sub_1005E2940();
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1003E6C54(v3, v5, v7, v9);
  unint64_t v13 = v11;
  if (v11)
  {
    uint64_t v14 = v10;
  }
  else
  {
    uint64_t v14 = sub_1005E1D00();
    unint64_t v13 = v15;
  }
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 96))
  {
    pErrorCode[0] = U_ZERO_ERROR;
    swift_bridgeObjectRetain();
    uint64_t v12 = uidna_openUTS46(0x3Cu, pErrorCode);
  }
  else
  {
    uint64_t v12 = *(UIDNA **)(a1 + 88);
    swift_bridgeObjectRetain();
  }
  uint64_t v30 = v12;
  sub_1003BF244(&v30, v14, v13, (uint64_t *)pErrorCode);
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = *(void *)pErrorCode;
  Swift::String v16 = v29;
  unint64_t v18 = v1[4];
  unint64_t v19 = v1[5];
  unint64_t v21 = v1[6];
  unint64_t v20 = v1[7];
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1003E6C54(v18, v19, v21, v20);
  Swift::String v24 = v23;
  if (v23)
  {
    uint64_t v25 = v22;
  }
  else
  {
    uint64_t v25 = sub_1005E1D00();
    Swift::String v24 = v26;
  }
  swift_bridgeObjectRelease();
  *(void *)pErrorCode = v25;
  uint64_t v29 = v24;
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 64;
  v31._object = (void *)0xE100000000000000;
  sub_1005E1E30(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = v17;
  v32._object = v16;
  sub_1005E1E30(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return *(void *)pErrorCode;
}

uint64_t sub_1003B32D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = sub_1003E8998(a1, a2);
  uint64_t v8 = v7;
  swift_retain();
  sub_1003D98E0(v6, v8, a3);
  uint64_t v9 = sub_1003B3414();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = *(void *)(v9 + 56);
    long long v22 = *(_OWORD *)(v9 + 64);
    uint64_t v13 = *(void *)(v9 + 80);
    uint64_t v12 = *(void *)(v9 + 88);
    long long v20 = *(_OWORD *)(v9 + 40);
    long long v21 = *(_OWORD *)(v9 + 96);
    uint64_t v15 = *(void *)(v9 + 112);
    uint64_t v14 = *(void *)(v9 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    long long v18 = v21;
    long long v17 = v22;
    long long v19 = v20;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    long long v19 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  *(void *)a4 = v10;
  *(_OWORD *)(a4 + 8) = v19;
  *(void *)(a4 + 24) = v11;
  *(_OWORD *)(a4 + 32) = v17;
  *(void *)(a4 + 48) = v13;
  *(void *)(a4 + 56) = v12;
  *(_OWORD *)(a4 + 64) = v18;
  *(void *)(a4 + 80) = v15;
  *(void *)(a4 + 88) = v14;
  return result;
}

uint64_t sub_1003B3414()
{
  NSString v0 = sub_1005E1BD0();
  id v1 = IMAP2EmailCore_ECEmailAddressesFromHeader(v0);

  sub_1003B42AC();
  unint64_t v2 = sub_1005E20C0();

  if (v2 >> 62) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v3)
  {
    do
    {
      if (v3 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = 0;
      uint64_t v6 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        id v7 = (v2 & 0xC000000000000001) != 0 ? (id)sub_1005E2CF0() : *(id *)(v2 + 8 * v5 + 32);
        uint64_t v8 = v7;
        uint64_t v9 = sub_1003B3600(v7, 0);

        uint64_t v10 = v9[2];
        int64_t v11 = *((void *)v6 + 2);
        int64_t v12 = v11 + v10;
        if (__OFADD__(v11, v10)) {
          break;
        }
        char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v12 <= *((void *)v6 + 3) >> 1)
        {
          if (v9[2]) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v11 <= v12) {
            int64_t v14 = v11 + v10;
          }
          else {
            int64_t v14 = v11;
          }
          uint64_t v6 = sub_1003EFAFC(isUniquelyReferenced_nonNull_native, v14, 1, v6);
          if (v9[2])
          {
LABEL_19:
            if ((*((void *)v6 + 3) >> 1) - *((void *)v6 + 2) < v10) {
              goto LABEL_25;
            }
            swift_arrayInitWithCopy();
            if (v10)
            {
              uint64_t v15 = *((void *)v6 + 2);
              BOOL v16 = __OFADD__(v15, v10);
              uint64_t v17 = v15 + v10;
              if (v16) {
                goto LABEL_26;
              }
              *((void *)v6 + 2) = v17;
            }
            goto LABEL_6;
          }
        }
        if (v10) {
          goto LABEL_24;
        }
LABEL_6:
        swift_bridgeObjectRelease();
        if (v3 == ++v5) {
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      swift_bridgeObjectRetain();
      uint64_t result = sub_1005E2FB0();
      uint64_t v3 = result;
    }
    while (result);
  }
  uint64_t v6 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v6;
}

void *sub_1003B3600(void *a1, uint64_t a2)
{
  if (a2 > 3) {
    return _swiftEmptyArrayStorage;
  }
  id v3 = IMAP2EmailCore_ECEmailAddress_groupList(a1);
  if (v3)
  {
    unint64_t v4 = v3;
    sub_1003B42AC();
    unint64_t v5 = sub_1005E20C0();
  }
  else
  {
    unint64_t v5 = 0;
  }
  id v6 = IMAP2EmailCore_ECEmailAddress_displayName(a1);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = sub_1005E1C00();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  id v11 = IMAP2EmailCore_ECEmailAddress_localPart(a1);
  if (v11)
  {
    int64_t v12 = v11;
    uint64_t v13 = sub_1005E1C00();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0;
  }
  id v16 = IMAP2EmailCore_ECEmailAddress_domain(a1);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = sub_1005E1C00();
    long long v20 = v19;

    if (v5) {
      goto LABEL_13;
    }
LABEL_34:
    if (v15)
    {
      if (v20)
      {
        sub_10000566C(&qword_100713C70);
        Swift::String v24 = (void *)swift_allocObject();
        *((_OWORD *)v24 + 1) = xmmword_1005F6670;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1003B3E08(v8, v10, v13, v15, v18, v20, v47);
        long long v34 = v47[3];
        *((_OWORD *)v24 + 4) = v47[2];
        *((_OWORD *)v24 + 5) = v34;
        long long v35 = v47[5];
        *((_OWORD *)v24 + 6) = v47[4];
        *((_OWORD *)v24 + 7) = v35;
        long long v36 = v47[1];
        *((_OWORD *)v24 + 2) = v47[0];
        *((_OWORD *)v24 + 3) = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v24;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_67;
    }
    swift_bridgeObjectRelease_n();
LABEL_66:
    swift_bridgeObjectRelease();
LABEL_67:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v18 = 0;
  long long v20 = 0;
  if (!v5) {
    goto LABEL_34;
  }
LABEL_13:
  if (v5 >> 62) {
    goto LABEL_64;
  }
  uint64_t v21 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = (void *)swift_bridgeObjectRetain_n();
  if (!v21)
  {
LABEL_65:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  while (v21 >= 1)
  {
    if ((v5 & 0xC000000000000001) == 0)
    {
      unint64_t v37 = (id *)(v5 + 32);
      Swift::String v24 = _swiftEmptyArrayStorage;
      while (1)
      {
        id v38 = *v37;
        uint64_t v39 = sub_1003B3600();

        uint64_t v40 = *(void *)(v39 + 16);
        int64_t v41 = v24[2];
        int64_t v42 = v41 + v40;
        if (__OFADD__(v41, v40)) {
          goto LABEL_60;
        }
        char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v42 <= v24[3] >> 1)
        {
          if (*(void *)(v39 + 16)) {
            goto LABEL_49;
          }
        }
        else
        {
          if (v41 <= v42) {
            int64_t v44 = v41 + v40;
          }
          else {
            int64_t v44 = v41;
          }
          Swift::String v24 = sub_1003EFAFC(isUniquelyReferenced_nonNull_native, v44, 1, (char *)v24);
          if (*(void *)(v39 + 16))
          {
LABEL_49:
            if ((v24[3] >> 1) - v24[2] < v40) {
              goto LABEL_62;
            }
            swift_arrayInitWithCopy();
            if (v40)
            {
              uint64_t v45 = v24[2];
              BOOL v32 = __OFADD__(v45, v40);
              uint64_t v46 = v45 + v40;
              if (v32) {
                goto LABEL_63;
              }
              void v24[2] = v46;
            }
            goto LABEL_39;
          }
        }
        if (v40) {
          goto LABEL_59;
        }
LABEL_39:
        swift_bridgeObjectRelease();
        ++v37;
        if (!--v21)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v24;
        }
      }
    }
    uint64_t v23 = 0;
    Swift::String v24 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1005E2CF0();
      uint64_t v25 = sub_1003B3600();
      swift_unknownObjectRelease();
      uint64_t v26 = *(void *)(v25 + 16);
      int64_t v27 = v24[2];
      int64_t v28 = v27 + v26;
      if (__OFADD__(v27, v26)) {
        break;
      }
      uint64_t v29 = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (v29 && v28 <= v24[3] >> 1)
      {
        if (*(void *)(v25 + 16)) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v27 <= v28) {
          int64_t v30 = v27 + v26;
        }
        else {
          int64_t v30 = v27;
        }
        Swift::String v24 = sub_1003EFAFC(v29, v30, 1, (char *)v24);
        if (*(void *)(v25 + 16))
        {
LABEL_29:
          if ((v24[3] >> 1) - v24[2] < v26) {
            goto LABEL_58;
          }
          swift_arrayInitWithCopy();
          if (v26)
          {
            uint64_t v31 = v24[2];
            BOOL v32 = __OFADD__(v31, v26);
            uint64_t v33 = v31 + v26;
            if (v32) {
              goto LABEL_61;
            }
            void v24[2] = v33;
          }
          goto LABEL_19;
        }
      }
      if (v26)
      {
        __break(1u);
        break;
      }
LABEL_19:
      swift_bridgeObjectRelease();
      if (v21 == ++v23) {
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain_n();
    uint64_t result = (void *)sub_1005E2FB0();
    uint64_t v21 = (uint64_t)result;
    if (!result) {
      goto LABEL_65;
    }
  }
  __break(1u);
  return result;
}

uint64_t _s9IMAP2MIME12EmailAddressV23__derived_struct_equalsySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    BOOL v6 = *a1 == *a2 && v4 == v5;
    if (!v6 && (sub_1005E3290() & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v7 && (sub_1005E3290() & 1) == 0
    || (sub_1003BF7CC(a1[4], a1[5], a1[6], a1[7], a2[4], a2[5], a2[6], a2[7]) & 1) == 0)
  {
    return 0;
  }
  unint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[11];
  unint64_t v12 = a2[8];
  unint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  return sub_1003BF7CC(v8, v9, v10, v11, v12, v13, v14, v15);
}

unint64_t sub_1003B3B78()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_1005E1E70();
  if (!v1)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char v7 = 1;
    goto LABEL_17;
  }
  unint64_t v2 = v0;
  unint64_t v3 = v1;
  while (1)
  {
    if (v2 == 2573 && v3 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0 || (sub_1005E1A00() & 1) == 0) {
      goto LABEL_3;
    }
    unint64_t result = sub_100374D14(v2, v3);
    if ((result & 0x100000000) != 0) {
      goto LABEL_37;
    }
    if ((result & 0xFFFFFF80) != 0)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    unint64_t result = sub_100374D14(v2, v3);
    if ((result & 0x100000000) != 0) {
      goto LABEL_38;
    }
    int v6 = result;
    unint64_t result = swift_bridgeObjectRelease();
    if ((v6 & 0xFFFFFF00) != 0) {
      break;
    }
    if (v6 - 34 <= 0x3A
      && ((1 << (v6 - 34)) & 0x4000000540004C1) != 0)
    {
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 34;
      v15._object = (void *)0xE100000000000000;
      sub_1005E1E30(v15);
      char v7 = 0;
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1005E1E70();
      if (!v9)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          v17._uint64_t countAndFlagsBits = 34;
          v17._object = (void *)0xE100000000000000;
          sub_1005E1E30(v17);
        }
        return sub_1003E7514(0);
      }
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      while (1)
      {
        if (v10 == 34 && v11 == (void *)0xE100000000000000 || (sub_1005E3290() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v12._uint64_t countAndFlagsBits = 8796;
        }
        else
        {
          if ((v10 != 92 || v11 != (void *)0xE100000000000000) && (sub_1005E3290() & 1) == 0)
          {
            v16._uint64_t countAndFlagsBits = v10;
            v16._object = v11;
            sub_1005E1E20(v16);
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          swift_bridgeObjectRelease();
          v12._uint64_t countAndFlagsBits = 23644;
        }
        v12._object = (void *)0xE200000000000000;
        sub_1005E1E30(v12);
LABEL_24:
        uint64_t v10 = sub_1005E1E70();
        uint64_t v11 = v13;
        if (!v13) {
          goto LABEL_31;
        }
      }
    }
LABEL_4:
    unint64_t v2 = sub_1005E1E70();
    unint64_t v3 = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1003B3E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 64;
  v31._object = (void *)0xE100000000000000;
  sub_1005E1E30(v31);
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  v32._uint64_t countAndFlagsBits = a5;
  v32._object = a6;
  sub_1005E1E30(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1005E1F50();
  unint64_t v16 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v16 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 < v11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = v15;
    uint64_t v18 = result;
    uint64_t v26 = v13;
    uint64_t v27 = v14;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1005E1F50();
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease_n();
    *a7 = a1;
    a7[1] = a2;
    a7[2] = a3;
    a7[3] = a4;
    a7[4] = v18;
    a7[5] = v26;
    a7[6] = v27;
    a7[7] = v17;
    a7[8] = v19;
    a7[9] = v21;
    a7[10] = v23;
    a7[11] = v25;
  }
  return result;
}

void *assignWithCopy for EmailAddress(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EmailAddress(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for EmailAddress(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmailAddress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t sub_1003B42AC()
{
  unint64_t result = qword_100713C78;
  if (!qword_100713C78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100713C78);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeEmailAddress()
{
  return &type metadata for UnsafeEmailAddress;
}

ValueMetadata *type metadata accessor for UnsafeEmailAddressValue()
{
  return &type metadata for UnsafeEmailAddressValue;
}

uint64_t sub_1003B430C(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3, uint64_t (*a4)(_OWORD *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = swift_allocObject();
  sub_1003B44C4(v39);
  sub_1003B44E8((uint64_t)v39, v15 + 16);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 2;
  uint64_t v30 = v15;
  uint64_t v31 = v16;
  Swift::String v32 = a4;
  uint64_t v33 = a5;
  uint64_t v26 = v15 + 16;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  long long v34 = _swiftEmptyArrayStorage;
  char v35 = sub_1003D521C(a1, a8, a9, a10, a11);
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  uint64_t v38 = v19;
  sub_1003D49D8((uint64_t (*)(uint64_t))sub_1003B4850, (uint64_t)v29, (void (*)(void *, char *, char *, uint64_t, uint64_t))sub_1003B4B10, (uint64_t)v25, a2, a3);
  sub_1003B4560(v15, v16, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_1003B4478()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, 201, 7);
}

double sub_1003B44C4(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 169) = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1003B44E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B4550()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_1003B4560(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v6 = a1 + 16;
  char v7 = (unsigned char *)(a2 + 16);
  swift_beginAccess();
  if (*(unsigned char *)(a2 + 16) == 2
    && (swift_beginAccess(),
        sub_1003B44E8(v6, (uint64_t)v15),
        sub_1003B44E8((uint64_t)v15, (uint64_t)v16),
        sub_1000571F8((uint64_t *)v16) != 1))
  {
    char v18[8] = v16[8];
    v18[9] = v16[9];
    v19[0] = v17[0];
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)v17 + 9);
    v18[4] = v16[4];
    v18[5] = v16[5];
    v18[6] = v16[6];
    v18[7] = v16[7];
    v18[0] = v16[0];
    v18[1] = v16[1];
    v18[2] = v16[2];
    v18[3] = v16[3];
    sub_1003B44E8((uint64_t)v15, (uint64_t)v14);
    sub_1003B5274((uint64_t)v14);
    char v9 = a3(v18);
    if (v3)
    {
      sub_1003B51B4(v15);
    }
    else
    {
      char v10 = v9;
      sub_1003B51B4(v15);
      swift_beginAccess();
      *char v7 = v10;
    }
    sub_1003B44C4(v12);
    swift_beginAccess();
    sub_1003B44E8(v6, (uint64_t)v13);
    sub_1003B44E8((uint64_t)v12, v6);
    uint64_t v8 = (uint64_t *)v13;
  }
  else
  {
    sub_1003B44C4(v15);
    swift_beginAccess();
    sub_1003B44E8(v6, (uint64_t)v16);
    sub_1003B44E8((uint64_t)v15, v6);
    uint64_t v8 = (uint64_t *)v16;
  }
  return sub_1003B51B4(v8);
}

uint64_t *sub_1003B4730(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  double result = sub_1003B4560(a2, a3, a4);
  if (!v4)
  {
    uint64_t v14 = v7;
    uint64_t v13 = a2 + 16;
    char v15 = v8;
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    uint64_t v18 = v11;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    char v22 = 2;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    char v27 = 2;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v30 = 2;
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)&v14);
    swift_beginAccess();
    sub_1003B44E8(v13, (uint64_t)v31);
    sub_1003B44E8((uint64_t)&v14, v13);
    swift_bridgeObjectRetain();
    sub_1003B51B4(v31);
    swift_beginAccess();
    return (uint64_t *)*(unsigned __int8 *)(a3 + 16);
  }
  return result;
}

uint64_t *sub_1003B4850(uint64_t *a1)
{
  return sub_1003B4730(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(_OWORD *))(v1 + 32));
}

uint64_t sub_1003B4870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  sub_1003B52C0(a1, (uint64_t)v32);
  swift_beginAccess();
  sub_1003B44E8(a6, (uint64_t)v38);
  sub_1003B44E8((uint64_t)v38, (uint64_t)v39);
  if (sub_1000571F8(v39) != 1)
  {
    sub_1003B52C0(a1, (uint64_t)&v33);
    unsigned __int8 v17 = v36;
    switch(v36 >> 59)
    {
      case 0uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        char v18 = v34;
        *(_OWORD *)(a6 + 168) = v33;
        *(unsigned char *)(a6 + 184) = v18;
        break;
      case 5uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        uint64_t v28 = v33;
        uint64_t v24 = v34;
        uint64_t v26 = *((void *)&v33 + 1);
        uint64_t v22 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a6 + 40) = v28;
        *(void *)(a6 + 48) = v26;
        *(void *)(a6 + 56) = v24;
        *(void *)(a6 + 64) = v22;
        break;
      case 6uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        char v19 = v34;
        *(_OWORD *)(a6 + 144) = v33;
        *(unsigned char *)(a6 + 160) = v19;
        break;
      case 8uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        char v20 = v34;
        *(_OWORD *)(a6 + 72) = v33;
        *(unsigned char *)(a6 + 88) = v20;
        break;
      case 9uLL:
        v36 &= 0x7FFFFFFFFFFFFFFuLL;
        long long v27 = v33;
        uint64_t v23 = v35;
        uint64_t v25 = v34;
        uint64_t v29 = v37;
        uint64_t v21 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 96) = v27;
        *(void *)(a6 + 112) = v25;
        *(void *)(a6 + 120) = v23;
        *(void *)(a6 + 128) = v21;
        *(void *)(a6 + 136) = v29;
        break;
      default:
        break;
    }
  }
  swift_beginAccess();
  sub_1003B44E8(a6, (uint64_t)v30);
  sub_1003B44E8((uint64_t)v30, (uint64_t)v31);
  uint64_t result = sub_1000571F8(v31);
  if (result != 1)
  {
    uint64_t v15 = swift_bridgeObjectRetain();
    char v16 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v15, _swiftEmptyArrayStorage);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      return a7(a1, a2, a3, a4, a5 & 1);
    }
  }
  return result;
}

uint64_t sub_1003B4B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1003B4870(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v5 + 24));
}

uint64_t sub_1003B4B1C()
{
  if (*(unsigned char *)(v0 + 184) == 2) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  if (v2) {
    uint64_t v4 = v3 - v2;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 < 0)
  {
    __break(1u);
LABEL_60:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v32 = sub_1003E89B0(0, v4, v2, v3);
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  uint64_t v35 = v7;
  __chkstk_darwin();
  uint64_t result = (uint64_t)sub_1003E7F1C(v8, v9, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003B531C);
  uint64_t v11 = v10;
  uint64_t v12 = HIBYTE(v10) & 0xF;
  uint64_t v13 = result & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v14) {
    goto LABEL_60;
  }
  if ((v11 & 0x1000000000000000) == 0)
  {
    if ((v11 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v15 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v15 = (unsigned __int8 *)sub_1005E2D30();
      }
      uint64_t v16 = (uint64_t)sub_100083C9C(v15, v13, 10);
      char v18 = v17 & 1;
      goto LABEL_50;
    }
    uint64_t v32 = result;
    uint64_t v33 = v11 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v12) {
        goto LABEL_64;
      }
      if (v12 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_37;
      }
      uint64_t v16 = (BYTE1(result) - 48);
      if (v12 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_37;
        }
        uint64_t v16 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v19 = v12 - 3;
        if (v19)
        {
          char v20 = (unsigned __int8 *)&v32 + 3;
          while (1)
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              goto LABEL_37;
            }
            uint64_t v22 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_37;
            }
            uint64_t v16 = v22 + v21;
            if (__OFADD__(v22, v21)) {
              goto LABEL_37;
            }
            char v18 = 0;
            ++v20;
            if (!--v19) {
              goto LABEL_50;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v12)
        {
          if (v12 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              char v18 = 0;
              uint64_t v16 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_50;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v16 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v27 = v12 - 3;
              if (!v27) {
                goto LABEL_49;
              }
              uint64_t v28 = (unsigned __int8 *)&v32 + 3;
              while (1)
              {
                unsigned int v29 = *v28 - 48;
                if (v29 > 9) {
                  break;
                }
                uint64_t v30 = 10 * v16;
                if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
                  break;
                }
                uint64_t v16 = v30 - v29;
                if (__OFSUB__(v30, v29)) {
                  break;
                }
                char v18 = 0;
                ++v28;
                if (!--v27) {
                  goto LABEL_50;
                }
              }
            }
          }
LABEL_37:
          uint64_t v16 = 0;
          char v18 = 1;
          goto LABEL_50;
        }
        __break(1u);
LABEL_64:
        __break(1u);
        return result;
      }
      if (!v12 || (result - 48) > 9u) {
        goto LABEL_37;
      }
      uint64_t v16 = (result - 48);
      if (v12 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_37;
        }
        uint64_t v16 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v23 = v12 - 2;
        if (v23)
        {
          uint64_t v24 = (unsigned __int8 *)&v32 + 2;
          while (1)
          {
            unsigned int v25 = *v24 - 48;
            if (v25 > 9) {
              goto LABEL_37;
            }
            uint64_t v26 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_37;
            }
            uint64_t v16 = v26 + v25;
            if (__OFADD__(v26, v25)) {
              goto LABEL_37;
            }
            char v18 = 0;
            ++v24;
            if (!--v23) {
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_49:
    char v18 = 0;
    goto LABEL_50;
  }
  uint64_t v16 = (uint64_t)sub_1003B50CC(result, v11, 10);
  char v18 = v31;
LABEL_50:
  swift_bridgeObjectRelease();
  if (v18) {
    return 0;
  }
  else {
    return v16;
  }
}

uint64_t sub_1003B4E8C()
{
  unint64_t v0 = sub_1005E1F50();
  uint64_t v4 = sub_1003B4F0C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1003B4F0C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10008436C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          uint64_t v11 = sub_1003B5064(v9, 0),
          unint64_t v12 = sub_10008446C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = sub_1005E1D80();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return sub_1005E1D80();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  sub_1005E2D30();
LABEL_4:
  return sub_1005E1D80();
}

void *sub_1003B5064(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000566C(&qword_100713C88);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  _OWORD v4[3] = 2 * v5 - 64;
  return v4;
}

unsigned __int8 *sub_1003B50CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1005E1F40();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1003B4E8C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_1005E2D30();
  }
LABEL_7:
  uint64_t v11 = sub_100083C9C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t *sub_1003B51B4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1003B5228(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003B5274(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003B52C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1003B531C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1003E8040(a1, *(uint64_t **)(v2 + 16), *(void *(**)(void *__return_ptr, uint64_t, void *))(v2 + 24), a2);
}

uint64_t destroy for ContentPart()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentPart(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v3 = *(_OWORD *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContentPart(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v8 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  long long v9 = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  return a1;
}

__n128 initializeWithTake for ContentPart(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for ContentPart(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentPart(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentPart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentPart()
{
  return &type metadata for ContentPart;
}

uint64_t Message.enumerateDecodedPlainText(input:outputLimit:cache:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[16] = a1;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  return sub_1003CFB18(v6, (uint64_t (*)(void))sub_1003B5738, (uint64_t)v8, a6);
}

uint64_t sub_1003B5738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 16);
  char v15 = 0;
  v10[16] = 0;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = &v15;
  long long v14 = *(_OWORD *)(v4 + 40);
  return sub_1003B430C(v8, 0, 0, (uint64_t (*)(_OWORD *))sub_1003B5D54, (uint64_t)v10, (uint64_t)UInt32.init(_:), 0, a1, a2, a3, a4);
}

uint64_t Message.enumerateDecodedHTMLText(input:outputLimit:cache:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[16] = a1;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  return sub_1003CFB18(v6, (uint64_t (*)(void))sub_1003B5B5C, (uint64_t)v8, a6);
}

uint64_t sub_1003B5824(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, unsigned char *a5, uint64_t (*a6)(uint64_t, unint64_t))
{
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 136);
  if (!v8) {
    goto LABEL_36;
  }
  char v10 = *(unsigned char *)(a1 + 128);
  if (v10 & 0xF0) != 0x50 || (*(_OWORD *)(a1 + 112)) {
    goto LABEL_36;
  }
  long long v37 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = a5;
  char v15 = *(unsigned __int8 **)(a1 + 96);
  long long v14 = *(unsigned __int8 **)(a1 + 104);
  uint64_t v17 = sub_1003BB304(v15, v14);
  if ((a2 & 1) == 0)
  {
    if (v17 != 0x6E69616C70 || v16 != 0xE500000000000000) {
      goto LABEL_17;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v17 == 1819112552 && v16 == 0xE400000000000000) {
    goto LABEL_19;
  }
LABEL_17:
  char v20 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  v40[0] = v15;
  v40[1] = v14;
  long long v41 = v37;
  char v42 = v10;
  uint64_t v43 = v8;
  sub_1003B5D6C(a1 + 72, (uint64_t)v39);
  sub_1003B5D6C((uint64_t)v39, (uint64_t)v44);
  if (v45 == 2 || (uint64_t v21 = sub_1003E8998(v44[0], v44[1]), v23 = sub_1003B0A74(v21, v22), v23 == 5)) {
    unsigned __int8 v23 = 0;
  }
  if (a3 < 1)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
  }
  else
  {
    uint64_t result = sub_1003D4300(*(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
    uint64_t v26 = v25 - result;
    if (!result) {
      uint64_t v26 = 0;
    }
    if (v26 + 0x4000000000000000 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v27 = (uint64_t *)result;
    uint64_t v28 = v25;
    uint64_t v29 = 2 * v26;
    if (v29 >= a3) {
      uint64_t v30 = a3;
    }
    else {
      uint64_t v30 = v29;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v31 = sub_1003B0C3C(v23, v30, v27, v28, (uint64_t)v40, a4);
    if (v7)
    {
      swift_release();
      swift_errorRelease();
LABEL_32:
      a5 = v46;
      goto LABEL_36;
    }
    uint64_t v33 = v31;
    unint64_t v34 = v32;
    swift_release();
    if (!v34) {
      goto LABEL_32;
    }
  }
  char v35 = a6(v33, v34) & 1;
  swift_bridgeObjectRelease();
  a5 = v46;
  *uint64_t v46 = v35;
LABEL_36:
  if (*a5) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t sub_1003B5A98@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v9 = result;
  if ((a3 & 1) == 0) {
    goto LABEL_8;
  }
  if (result) {
    int64_t v11 = a2 - result;
  }
  else {
    int64_t v11 = 0;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = sub_1003B06DC(0, v11, result, v8);
    if (!v14)
    {
      uint64_t v15 = 0;
      uint64_t v9 = 0;
      goto LABEL_13;
    }
    uint64_t v9 = v14 + v12;
    uint64_t v8 = v14 + v13;
LABEL_8:
    if (v9)
    {
      uint64_t v15 = v8 - v9;
      if (v8 - v9 >= 0)
      {
LABEL_13:
        sub_1003B0FB4(a4);
        swift_retain();
        uint64_t result = sub_1003E87A4(a4, 0, v15, v9, a5);
        *a6 = result;
        a6[1] = v16;
        return result;
      }
      __break(1u);
    }
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B5B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 16);
  char v15 = 0;
  v10[16] = 1;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = &v15;
  long long v14 = *(_OWORD *)(v4 + 40);
  return sub_1003B430C(v8, 0, 0, (uint64_t (*)(_OWORD *))sub_1003B5D54, (uint64_t)v10, (uint64_t)UInt32.init(_:), 0, a1, a2, a3, a4);
}

unint64_t sub_1003B5BFC()
{
  unint64_t result = qword_100713C90;
  if (!qword_100713C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713C90);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TextPartEnumerationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003B5D1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextPartEnumerationResult()
{
  return &type metadata for TextPartEnumerationResult;
}

uint64_t sub_1003B5D54(uint64_t a1)
{
  return sub_1003B5DD4(a1);
}

uint64_t sub_1003B5D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B5DD4(uint64_t a1)
{
  return sub_1003B5824(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), *(unsigned char **)(v1 + 40), *(uint64_t (**)(uint64_t, unint64_t))(v1 + 48));
}

uint64_t sub_1003B5E04(long long *a1, long long *a2)
{
  sub_1003B7C9C(a1, v4);
  sub_1003B7C9C(a2, v5);
  return _s9IMAP2MIME11DisplayPartO21__derived_enum_equalsySbAC_ACtFZ_0(v4, v5) & 1;
}

uint64_t DisplayPart.Attachment.contentType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  char v8 = *(unsigned char *)(v1 + 40);
  sub_1003AE6AC(v3, v4, v5, v6, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  return swift_bridgeObjectRetain();
}

__n128 DisplayPart.Attachment.contentType.setter(uint64_t a1)
{
  sub_1003AE7CC(*(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  swift_bridgeObjectRelease();
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 40) = result;
  return result;
}

uint64_t DisplayPart.Attachment.contentDisposition.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1003AB41C(v1, *(void *)(v0 + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DisplayPart.Attachment.contentDisposition.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003AB468(v3[7], v3[8]);
  uint64_t result = swift_bridgeObjectRelease();
  v3[7] = a1;
  v3[8] = a2;
  v3[9] = a3;
  return result;
}

uint64_t DisplayPart.Attachment.contentTransferEncoding.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t DisplayPart.Attachment.contentTransferEncoding.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

uint64_t DisplayPart.Attachment.estimatedDecodedSize.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t DisplayPart.Attachment.estimatedDecodedSize.setter(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t DisplayPart.Attachment.encodedBytes.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t DisplayPart.Attachment.encodedBytes.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 112) = result;
  *(void *)(v2 + 120) = a2;
  return result;
}

__n128 DisplayPart.Attachment.init(part:contentDisposition:contentType:contentTransferEncoding:estimatedDecodedSize:encodedBytes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  __n128 result = *(__n128 *)a5;
  long long v11 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a9 + 8) = *(_OWORD *)a5;
  char v12 = *(unsigned char *)(a5 + 32);
  uint64_t v13 = *(void *)(a5 + 40);
  *(void *)a9 = a1;
  *(_OWORD *)(a9 + 24) = v11;
  *(unsigned char *)(a9 + 40) = v12;
  *(void *)(a9 + 48) = v13;
  *(void *)(a9 + 56) = a2;
  *(void *)(a9 + 64) = a3;
  *(void *)(a9 + 72) = a4;
  *(void *)(a9 + 80) = 0;
  *(void *)(a9 + 88) = 0;
  *(unsigned char *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = a7;
  *(void *)(a9 + 112) = a8;
  *(void *)(a9 + 120) = a10;
  return result;
}

BOOL sub_1003B6020(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[7];
  void v13[6] = a1[6];
  v13[7] = v3;
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[3];
  v14[2] = a2[2];
  void v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  long long v9 = a2[4];
  long long v10 = a2[5];
  long long v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v14);
}

uint64_t Message.enumeratePartsForDisplay(strategy:maximumByteCountPerPart:cache:closure:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[16] = a1 & 1;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  return sub_1003CFB18(v5, (uint64_t (*)(void))sub_1003B70FC, (uint64_t)v7, a1 & 1);
}

uint64_t sub_1003B60EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v15 = sub_1003D7728(a5 & 1, a1, a2, a3, a4);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a8;
  uint64_t v23 = a9;
  sub_1003B430C(3, (uint64_t (*)(void *))sub_1003B8584, v16, (uint64_t (*)(_OWORD *))sub_1003B858C, (uint64_t)v19, (uint64_t)UInt32.init(_:), 0, a1, a2, a3, a4);
  return swift_release();
}

uint64_t Message.decodedAttachmentByteCountUpperBound(attachment:)(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 112);
  sub_10001FDF0((uint64_t)&v4, (uint64_t)v5, &qword_100713CA0);
  sub_10001FDF0((uint64_t)v5, (uint64_t)&v6, &qword_100713CA0);
  if (v6) {
    uint64_t result = *((void *)&v4 + 1) - v6;
  }
  else {
    uint64_t result = 0;
  }
  if (*(unsigned __int8 *)(a1 + 96) >= 4u)
  {
    double v3 = ceil((double)result * 3.0 * 0.25);
    if ((~*(void *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          uint64_t result = (uint64_t)v3 + 10;
          if (!__OFADD__((uint64_t)v3, 10)) {
            return result;
          }
LABEL_13:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t *Message.decode(attachment:into:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_1003B055C((uint64_t *)*(unsigned __int8 *)(a1 + 96), a2, a3, *(uint64_t **)(a1 + 112), *(void *)(a1 + 120));
  if (!v3 && (v5 & 1) != 0)
  {
    sub_1003B712C();
    swift_allocError();
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

unint64_t sub_1003B6340(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_1003DEF8C(v3);
  if (v5)
  {
    unint64_t v6 = *(void *)(*(void *)(a2 + 56) + 8 * v4);
    sub_10000CF8C(v6);
  }
  else
  {
    unint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1003B63A4(uint64_t *a1, uint64_t a2, uint64_t *a3, void (*a4)(_OWORD *))
{
  sub_10001FDF0((uint64_t)(a1 + 21), (uint64_t)v28, &qword_100713C98);
  sub_10001FDF0((uint64_t)v28, (uint64_t)v33, &qword_100713C98);
  if (v33[16] != 2) {
    return 2;
  }
  sub_10001FDF0((uint64_t)(a1 + 12), (uint64_t)v27, &qword_100713A60);
  sub_10001FDF0((uint64_t)v27, (uint64_t)v34, &qword_100713A60);
  if (v35)
  {
    sub_1003B5274((uint64_t)a1);
    swift_retain();
    sub_1003B6670((uint64_t)v27, (uint64_t)a1, a2, a3, (uint64_t)v23);
  }
  else
  {
    uint64_t v8 = *a1;
    sub_1003B5274((uint64_t)a1);
    swift_retain();
    sub_1003B5274((uint64_t)a1);
    swift_retain();
    if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v8, _swiftEmptyArrayStorage) & 1) == 0)
    {
      swift_release();
      sub_1003B8280((uint64_t)a1);
      sub_1003B8280((uint64_t)a1);
      swift_release();
      sub_1003B7CC4((uint64_t)v29);
      sub_10001FDF0((uint64_t)v29, (uint64_t)v23, &qword_100713CB8);
      goto LABEL_13;
    }
    unint64_t v9 = sub_1003DD04C((unint64_t)"text/plain", (uint64_t)"", 0);
    long long v12 = 0uLL;
    if (v11)
    {
      uint64_t v13 = v11;
      sub_1003CDB70(v9, v10, (uint64_t)v24);
      sub_10001FDF0((uint64_t)v24, (uint64_t)v25, &qword_100713C60);
      uint64_t v14 = v26;
      if (v26 <= 0xFDuLL)
      {
        long long v18 = v25[1];
        long long v19 = v25[0];
        *(void *)&v29[0] = _swiftEmptyArrayStorage;
        sub_1003D9B84(v13, (char **)v29);
        swift_bridgeObjectRelease();
        long long v16 = v18;
        long long v12 = v19;
        uint64_t v15 = *(void *)&v29[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        long long v16 = 0uLL;
        long long v12 = 0uLL;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      long long v16 = 0uLL;
    }
    v30[0] = v12;
    v30[1] = v16;
    uint64_t v31 = v14;
    uint64_t v32 = v15;
    sub_1003B6670((uint64_t)v30, (uint64_t)a1, a2, a3, (uint64_t)v23);
    swift_bridgeObjectRelease();
    sub_1003B8280((uint64_t)a1);
    swift_release();
  }
  sub_1003B8280((uint64_t)a1);
  swift_release();
LABEL_13:
  sub_10001FDF0((uint64_t)v23, (uint64_t)v21, &qword_100713CB8);
  sub_10001FDF0((uint64_t)v21, (uint64_t)v22, &qword_100713CB8);
  if (sub_1003B85AC((uint64_t)v22) != 1)
  {
    sub_10001FDF0((uint64_t)v21, (uint64_t)v20, &qword_100713CB8);
    sub_1003B7C9C(v20, v29);
    a4(v29);
    sub_1003B85C4((uint64_t)v21);
  }
  return 2;
}

uint64_t sub_1003B6670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_10001FDF0(a1, (uint64_t)v33, &qword_100713A60);
  if (!*((void *)&v34 + 1))
  {
    sub_1003B7CC4((uint64_t)v29);
    goto LABEL_12;
  }
  v35[0] = v33[0];
  v35[1] = v33[1];
  v35[2] = v34;
  sub_10001FDF0(a2 + 72, (uint64_t)v37, &qword_100713C98);
  sub_10001FDF0((uint64_t)v37, (uint64_t)v38, &qword_100713C98);
  if (v39 == 2 || (uint64_t v10 = sub_1003E8998(v38[0], v38[1]), v12 = sub_1003B0A74(v10, v11), v12 == 5)) {
    unsigned __int8 v12 = 0;
  }
  sub_10039DF8C((uint64_t)v35, (uint64_t)v36);
  sub_1003CEEDC((uint64_t)v36, (uint64_t)v27);
  sub_1003AE650((uint64_t)v27, (uint64_t)&v30);
  if (v32 != 5) {
    goto LABEL_24;
  }
  uint64_t v13 = v31;
  if (!v31) {
    goto LABEL_24;
  }
  uint64_t v14 = v30;
  if (v30 == 0x6E69616C70 && v31 == 0xE500000000000000 || (sub_1005E3290() & 1) != 0)
  {
    sub_1003B6A6C(0, a2, (uint64_t)v35, v12, a3, a4, (uint64_t)v29);
    sub_1003B8398((uint64_t)v27, (void (*)(void, void, void, void, void))sub_1003AE7CC);
LABEL_12:
    uint64_t v15 = v29;
    return sub_10001FDF0((uint64_t)v15, a5, &qword_100713CB8);
  }
  if ((v14 != 1819112552 || v13 != 0xE400000000000000) && (sub_1005E3290() & 1) == 0)
  {
LABEL_24:
    sub_1003B8398((uint64_t)v27, (void (*)(void, void, void, void, void))sub_1003AE7CC);
    swift_retain();
    sub_1003B5274(a2);
    sub_1003B7CE4(a2, v12, a4, (uint64_t)v28);
    sub_10001FDF0((uint64_t)v28, (uint64_t)v29, &qword_100713CC0);
    if (sub_1000571F8((uint64_t *)v29) == 1)
    {
      sub_1003B7CC4((uint64_t)v26);
    }
    else
    {
      v25[4] = v29[4];
      v25[5] = v29[5];
      v25[6] = v29[6];
      v25[7] = v29[7];
      v25[0] = v29[0];
      v25[1] = v29[1];
      _OWORD v25[2] = v29[2];
      v25[3] = v29[3];
      sub_1003B8240((uint64_t)v25);
      sub_1003B7C9C(v25, v26);
      UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v26);
    }
    uint64_t v15 = v26;
    return sub_10001FDF0((uint64_t)v15, a5, &qword_100713CB8);
  }
  if (a3 < 1)
  {
    uint64_t v22 = 0;
    unint64_t v24 = 0xE000000000000000;
    goto LABEL_31;
  }
  uint64_t result = sub_1003D4300(*(unsigned __int8 *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v18 = v17 - result;
  if (!result) {
    uint64_t v18 = 0;
  }
  if (v18 + 0x4000000000000000 >= 0)
  {
    long long v19 = (uint64_t *)result;
    uint64_t v20 = v17;
    uint64_t v21 = 2 * v18;
    if (v21 < a3) {
      a3 = v21;
    }
    sub_1003B0FB4(a1);
    swift_retain();
    uint64_t v22 = sub_1003B0C3C(v12, a3, v19, v20, (uint64_t)v35, a4);
    unint64_t v24 = v23;
    swift_release();
    if (!v24)
    {
      sub_1003B8398((uint64_t)v27, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      sub_1003B7CC4((uint64_t)v28);
LABEL_32:
      sub_10001FDF0((uint64_t)v28, (uint64_t)v29, &qword_100713CB8);
      goto LABEL_12;
    }
LABEL_31:
    sub_1003B8398((uint64_t)v27, (void (*)(void, void, void, void, void))sub_1003AE7CC);
    *(void *)&v26[0] = v22;
    *((void *)&v26[0] + 1) = v24;
    sub_1003B8260((uint64_t)v26);
    sub_1003B7C9C(v26, v28);
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v28);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B6A6C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  if (a5 < 1)
  {
    uint64_t v20 = 0;
    unint64_t v22 = 0xE000000000000000;
    goto LABEL_11;
  }
  uint64_t v11 = a5;
  uint64_t result = sub_1003D4300(*(unsigned __int8 *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v16 = v15 - result;
  if (!result) {
    uint64_t v16 = 0;
  }
  if (v16 + 0x4000000000000000 >= 0)
  {
    uint64_t v17 = (uint64_t *)result;
    uint64_t v18 = v15;
    uint64_t v19 = 2 * v16;
    if (v19 < v11) {
      uint64_t v11 = v19;
    }
    sub_1003B0FB4(a3);
    swift_retain();
    uint64_t v20 = sub_1003B0C3C(a4, v11, v17, v18, a3, a6);
    unint64_t v22 = v21;
    swift_release();
    if (!v22)
    {
      sub_1003B7CC4((uint64_t)v48);
LABEL_27:
      sub_10001FDF0((uint64_t)v48, (uint64_t)v49, &qword_100713CB8);
      return sub_10001FDF0((uint64_t)v49, a7, &qword_100713CB8);
    }
LABEL_11:
    if (a1)
    {
      *(void *)&long long v46 = v20;
      *((void *)&v46 + 1) = v22;
      sub_1003B8260((uint64_t)&v46);
    }
    else
    {
      uint64_t v23 = *(void *)(a2 + 136);
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 16);
        if (v24)
        {
          uint64_t v39 = a7;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v25 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = (uint64_t *)(swift_bridgeObjectRetain() + 80);
          do
          {
            if ((*(unsigned char *)(v27 - 4) & 1) == 0)
            {
              uint64_t v28 = *(v27 - 3);
              uint64_t v29 = *(v27 - 2);
              uint64_t v30 = *((unsigned __int8 *)v27 - 8);
              uint64_t v31 = *v27;
              int v32 = *((unsigned __int8 *)v27 - 48);
              if (v32 == 4)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v44 = v29;
                uint64_t v45 = v28;
                uint64_t v43 = v30;
                uint64_t v25 = v31;
              }
              else if (v32 == 12)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v41 = v29;
                uint64_t v42 = v28;
                uint64_t v40 = v30;
                uint64_t v26 = v31;
              }
            }
            v27 += 7;
            --v24;
          }
          while (v24);
          swift_bridgeObjectRelease();
          a7 = v39;
          uint64_t v33 = v40;
          uint64_t v35 = v44;
          uint64_t v34 = v45;
          uint64_t v36 = v42;
          uint64_t v37 = v43;
          uint64_t v38 = v41;
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v37 = 0;
          uint64_t v25 = 0;
          uint64_t v36 = 0;
          uint64_t v38 = 0;
          uint64_t v33 = 0;
          uint64_t v26 = 0;
        }
        LOBYTE(v23) = sub_1003D833C(v36, v38, v33, v26, v34, v35, v37, v25);
      }
      *(void *)&long long v46 = v20;
      *((void *)&v46 + 1) = v22;
      char v47 = v23;
      sub_1003B8530((uint64_t)&v46);
    }
    sub_1003B7C9C(&v46, v48);
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v48);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

BOOL _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  long long v4 = *(_OWORD *)(a1 + 24);
  v26[0] = *(_OWORD *)(a1 + 8);
  v26[1] = v4;
  long long v27 = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(a2 + 24);
  v23[0] = *(_OWORD *)(a2 + 8);
  v23[1] = v5;
  long long v24 = *(_OWORD *)(a2 + 40);
  sub_1003AE650((uint64_t)v26, (uint64_t)v28);
  sub_1003AE650((uint64_t)v23, (uint64_t)v25);
  if ((_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v28, (uint64_t)v25) & 1) == 0
    || (sub_1003ABA78(*((uint64_t *)&v27 + 1), *((uint64_t *)&v24 + 1)) & 1) == 0)
  {
    return 0;
  }
  __n128 v20 = *(__n128 *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 72);
  __n128 v17 = *(__n128 *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 72);
  sub_1003B865C(&v20, &v22);
  sub_1003B865C(&v17, &v19);
  sub_1003B865C(&v22, &v29);
  unint64_t v6 = v29.n128_u64[1];
  if (v29.n128_u64[1] == 2)
  {
    sub_1003B865C(&v19, &v30);
    if (v30.n128_u64[1] != 2) {
      return 0;
    }
  }
  else if (v29.n128_u64[1] == 1)
  {
    sub_1003B865C(&v19, &v30);
    if (v30.n128_u64[1] != 1) {
      return 0;
    }
  }
  else if (v29.n128_u64[1])
  {
    unint64_t v7 = v29.n128_u64[0];
    sub_1003B865C(&v19, &v30);
    if (v30.n128_u64[1] < 3) {
      return 0;
    }
    if (__PAIR128__(v6, v7) != *(_OWORD *)&v30)
    {
      char v8 = sub_1005E3290();
      BOOL result = 0;
      if ((v8 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    sub_1003B865C(&v19, &v30);
    if (v30.n128_u64[1]) {
      return 0;
    }
  }
  if ((sub_1003AB918(v21, v18) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a2 + 88);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!v11) {
    return 0;
  }
  if (*(void *)(a1 + 80) != *(void *)(a2 + 80) || v10 != v11)
  {
    char v12 = sub_1005E3290();
    BOOL result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
  }
LABEL_24:
  if ((sub_1003BE5CC(*(unsigned __int8 *)(a1 + 96), *(unsigned __int8 *)(a2 + 96)) & 1) == 0
    || *(void *)(a1 + 104) != *(void *)(a2 + 104))
  {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 112);
  if (v13) {
    uint64_t v14 = *(void *)(a1 + 120) - v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(a2 + 112);
  if (!v15) {
    return (v14 | v13) == 0;
  }
  BOOL result = 0;
  if (v13 && v14 == *(void *)(a2 + 120) - v15) {
    return v13 == v15;
  }
  return result;
}

uint64_t _s9IMAP2MIME11DisplayPartO21__derived_enum_equalsySbAC_ACtFZ_0(long long *a1, long long *a2)
{
  sub_1003B7C9C(a1, v26);
  int v3 = sub_1003B776C((uint64_t)v26);
  if (v3)
  {
    if (v3 == 1)
    {
      long long v4 = (uint64_t *)sub_1003B7778((uint64_t)v26);
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      sub_1003B7C9C(a2, v27);
      if (sub_1003B776C((uint64_t)v27) == 1)
      {
        unint64_t v7 = (void *)sub_1003B7778((uint64_t)v27);
        if (v5 == *v7 && v6 == v7[1]) {
          char v8 = 1;
        }
        else {
          char v8 = sub_1005E3290();
        }
        return v8 & 1;
      }
    }
    else
    {
      __n128 v17 = (_OWORD *)sub_1003B7778((uint64_t)v26);
      _OWORD v27[4] = v17[4];
      v27[5] = v17[5];
      v27[6] = v17[6];
      v27[7] = v17[7];
      v27[0] = *v17;
      v27[1] = v17[1];
      v27[2] = v17[2];
      v27[3] = v17[3];
      sub_1003B7C9C(a2, v24);
      if (sub_1003B776C((uint64_t)v24) == 2)
      {
        uint64_t v18 = (_OWORD *)sub_1003B7778((uint64_t)v24);
        long long v19 = v18[5];
        v25[4] = v18[4];
        v25[5] = v19;
        long long v20 = v18[7];
        v25[6] = v18[6];
        v25[7] = v20;
        long long v21 = v18[1];
        v25[0] = *v18;
        v25[1] = v21;
        long long v22 = v18[3];
        _OWORD v25[2] = v18[2];
        v25[3] = v22;
        char v8 = _s9IMAP2MIME11DisplayPartO10AttachmentV2eeoiySbAE_AEtFZ_0((uint64_t)v27, (uint64_t)v25);
        return v8 & 1;
      }
    }
LABEL_16:
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v9 = sub_1003B7778((uint64_t)v26);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  int v12 = *(unsigned __int8 *)(v9 + 16);
  sub_1003B7C9C(a2, v27);
  if (sub_1003B776C((uint64_t)v27)) {
    goto LABEL_16;
  }
  uint64_t v13 = sub_1003B7778((uint64_t)v27);
  int v14 = *(unsigned __int8 *)(v13 + 16);
  BOOL v15 = v10 == *(void *)v13 && v11 == *(void *)(v13 + 8);
  if (v15 || (v16 = sub_1005E3290(), char v8 = 0, (v16 & 1) != 0)) {
    char v8 = v12 == v14;
  }
  return v8 & 1;
}

uint64_t sub_1003B70FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003B60EC(a1, a2, a3, a4, *(unsigned char *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48));
}

unint64_t sub_1003B712C()
{
  unint64_t result = qword_100713CA8;
  if (!qword_100713CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713CA8);
  }
  return result;
}

unint64_t sub_1003B7184()
{
  unint64_t result = qword_100713CB0;
  if (!qword_100713CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713CB0);
  }
  return result;
}

uint64_t sub_1003B71D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if ((a13 >> 62) >= 2)
  {
    if (a13 >> 62 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
    sub_1003AE6AC(a2, a3, a4, a5, a6);
    swift_bridgeObjectRetain();
    sub_1003AB41C(a8, a9);
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DisplayPart(uint64_t *a1)
{
  return sub_1003B7304(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
}

uint64_t sub_1003B7304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if ((a13 >> 62) >= 2)
  {
    if (a13 >> 62 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
    sub_1003AE7CC(a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    sub_1003AB468(a8, a9);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for DisplayPart(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  unint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  sub_1003B71D8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for DisplayPart(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  uint64_t v26 = a2[11];
  unint64_t v27 = a2[12];
  uint64_t v28 = a2[13];
  uint64_t v29 = a2[14];
  uint64_t v30 = a2[15];
  sub_1003B71D8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  sub_1003B7304(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return a1;
}

__n128 initializeWithTake for DisplayPart.Attachment(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for DisplayPart(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  long long v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  long long v17 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v17;
  sub_1003B7304(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayPart(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 40) >> 4;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for DisplayPart(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 16 * -a2;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1003B776C(uint64_t a1)
{
  return *(void *)(a1 + 96) >> 62;
}

uint64_t sub_1003B7778(uint64_t result)
{
  *(void *)(result + 96) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1003B7788(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 96) & 7 | (a2 << 62);
  *(void *)(result + 40) &= 0xFuLL;
  *(void *)(result + 96) = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart()
{
  return &type metadata for DisplayPart;
}

uint64_t destroy for DisplayPart.Attachment(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1003AE7CC(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_1003AE6AC(v4, v5, v6, v7, v8);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = (void *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v10 >= 3)
  {
    *(void *)(a1 + 56) = *v9;
    *(void *)(a1 + 64) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v9;
  }
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1003AE6AC(v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v13 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_1003AE7CC(v9, v10, v11, v12, v13);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >= 3uLL)
  {
    if (v14 >= 3)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1003AE094(a1 + 56);
    goto LABEL_6;
  }
  if (v14 < 3)
  {
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for DisplayPart.Attachment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  char v9 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_1003AE7CC(v5, v6, v7, v8, v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)(a2 + 56);
  if (*(void *)(a1 + 64) >= 3uLL)
  {
    unint64_t v11 = *(void *)(a2 + 64);
    if (v11 >= 3)
    {
      *(void *)(a1 + 56) = *v10;
      *(void *)(a1 + 64) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1003AE094(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
LABEL_6:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayPart.Attachment()
{
  return &type metadata for DisplayPart.Attachment;
}

unsigned char *storeEnumTagSinglePayload for DisplayPart.AlternativePartStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003B7C54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart.AlternativePartStrategy()
{
  return &type metadata for DisplayPart.AlternativePartStrategy;
}

ValueMetadata *_s20OutputBufferTooSmallVMa()
{
  return &_s20OutputBufferTooSmallVN;
}

_OWORD *sub_1003B7C9C(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  return a2;
}

double sub_1003B7CC4(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xFFFFFFFF0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t sub_1003B7CE4@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 136);
  if (!v7)
  {
    swift_release();
    sub_1003B8280(a1);
LABEL_7:
    sub_1003B82CC(&v62);
    sub_10001FDF0((uint64_t)&v62, (uint64_t)v92, &qword_100713CC0);
    return sub_10001FDF0((uint64_t)v92, a4, &qword_100713CC0);
  }
  long long v49 = *(_OWORD *)(a1 + 112);
  long long v51 = *(_OWORD *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 128);
  sub_10001FDF0(a1 + 40, (uint64_t)v82, &qword_100713CC8);
  sub_10001FDF0((uint64_t)v82, (uint64_t)&v85, &qword_100713CC8);
  if (!*((void *)&v86 + 1))
  {
    swift_bridgeObjectRetain();
    swift_release();
    sub_1003B8280(a1);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  __n128 v87 = v85;
  long long v88 = v86;
  v83[0] = v51;
  v83[1] = v49;
  char v84 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1003B82E4((uint64_t)v82);
  sub_1003CEEDC((uint64_t)v83, (uint64_t)v77);
  uint64_t v52 = v77[0];
  uint64_t v48 = v77[2];
  uint64_t v50 = v77[1];
  uint64_t v47 = v77[3];
  char v46 = v78;
  swift_retain();
  uint64_t v10 = sub_1003BCEAC(v7, a3);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_1003B8310(&v87, &v89);
  sub_1003B8310(&v89, &v90);
  if (v91)
  {
    unint64_t v11 = v10;
    unint64_t v13 = v90.n128_u64[1];
    uint64_t v12 = (unsigned __int8 *)v90.n128_u64[0];
    swift_retain();
    unint64_t v14 = (unsigned __int8 *)v13;
    uint64_t v10 = v11;
    uint64_t v15 = sub_1003BB304(v12, v14);
    unint64_t v44 = v16;
  }
  else if (v90.n128_u8[0])
  {
    if (v90.n128_u8[0] == 1)
    {
      swift_retain();
      uint64_t v15 = 0;
      uint64_t v17 = 1;
    }
    else
    {
      swift_retain();
      uint64_t v15 = 0;
      uint64_t v17 = 2;
    }
    unint64_t v44 = v17;
  }
  else
  {
    swift_retain();
    uint64_t v15 = 0;
    unint64_t v44 = 0;
  }
  uint64_t v18 = *((void *)&v88 + 1);
  swift_retain();
  uint64_t v19 = sub_1003BC9DC(v18, a3);
  swift_release();
  sub_1003B836C((uint64_t)v82);
  uint64_t result = swift_release();
  long long v21 = *(_OWORD *)(a1 + 16);
  long long v79 = *(_OWORD *)a1;
  long long v80 = v21;
  uint64_t v81 = *(void *)(a1 + 32);
  uint64_t v41 = a4;
  uint64_t v42 = v19;
  unsigned __int8 v40 = a2;
  uint64_t v39 = v10;
  uint64_t v45 = v79;
  if (*(unsigned char *)(a1 + 160) == 2)
  {
    swift_bridgeObjectRetain();
    sub_10002292C((uint64_t)&v79);
    sub_1003B8398((uint64_t)v77, (void (*)(void, void, void, void, void))sub_1003AE6AC);
    swift_bridgeObjectRetain();
    sub_1003AB41C(v15, v44);
    swift_bridgeObjectRetain();
    uint64_t v43 = 0;
    uint64_t v22 = 0;
LABEL_21:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1003D4300(BYTE8(v79), v80, *((uint64_t *)&v80 + 1), v81);
    uint64_t v35 = v33;
    uint64_t v36 = v34;
    if (v33) {
      uint64_t v37 = v34 - v33;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = sub_1003B046C(v37, v40);
    swift_release();
    sub_1003B8280(a1);
    *(void *)&long long v53 = v45;
    *((void *)&v53 + 1) = v52;
    *(void *)&long long v54 = v50;
    *((void *)&v54 + 1) = v48;
    *(void *)&long long v55 = v47;
    BYTE8(v55) = v46;
    *(void *)&long long v56 = v39;
    *((void *)&v56 + 1) = v15;
    *(void *)&long long v57 = v44;
    *((void *)&v57 + 1) = v42;
    *(void *)&long long v58 = v43;
    *((void *)&v58 + 1) = v22;
    LOBYTE(v59) = v40;
    *((void *)&v59 + 1) = v38;
    *(void *)&long long v60 = v35;
    *((void *)&v60 + 1) = v36;
    sub_1003B83D8((uint64_t)&v53);
    swift_bridgeObjectRelease();
    sub_1003AB468(v15, v44);
    swift_bridgeObjectRelease();
    sub_1003B8398((uint64_t)v77, (void (*)(void, void, void, void, void))sub_1003AE7CC);
    swift_bridgeObjectRelease();
    sub_10001D550((uint64_t)&v79);
    v61[4] = v57;
    v61[5] = v58;
    v61[6] = v59;
    v61[7] = v60;
    v61[0] = v53;
    v61[1] = v54;
    v61[2] = v55;
    v61[3] = v56;
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v61);
    *(void *)&long long v62 = v45;
    *((void *)&v62 + 1) = v52;
    uint64_t v63 = v50;
    uint64_t v64 = v48;
    uint64_t v65 = v47;
    char v66 = v46;
    long long v67 = v39;
    uint64_t v68 = v15;
    unint64_t v69 = v44;
    long long v70 = v42;
    long long v71 = v43;
    uint64_t v72 = v22;
    unsigned __int8 v73 = v40;
    uint64_t v74 = v38;
    uint64_t v75 = v35;
    uint64_t v76 = v36;
    sub_1003B8484((uint64_t)&v62);
    sub_10001FDF0((uint64_t)v61, (uint64_t)v92, &qword_100713CC0);
    a4 = v41;
    return sub_10001FDF0((uint64_t)v92, a4, &qword_100713CC0);
  }
  uint64_t v23 = *(void *)(a1 + 144);
  uint64_t v24 = *(void *)(a1 + 152);
  if (v23) {
    uint64_t v25 = v24 - v23;
  }
  else {
    uint64_t v25 = 0;
  }
  if ((v25 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = sub_1003E89B0(0, v25, v23, v24);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    v92[0] = v26;
    v92[1] = v31;
    v92[2] = v27;
    v92[3] = v29;
    __chkstk_darwin();
    swift_bridgeObjectRetain();
    sub_10002292C((uint64_t)&v79);
    sub_1003B8398((uint64_t)v77, (void (*)(void, void, void, void, void))sub_1003AE6AC);
    swift_bridgeObjectRetain();
    sub_1003AB41C(v15, v44);
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_1003E7F1C(v28, v30, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003B531C);
    uint64_t v22 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B8240(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 96) & 7 | 0x8000000000000000;
  *(void *)(result + 40) &= 0xFuLL;
  *(void *)(result + 96) = v1;
  return result;
}

uint64_t sub_1003B8260(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 96) & 7 | 0x4000000000000000;
  *(void *)(result + 40) &= 0xFuLL;
  *(void *)(result + 96) = v1;
  return result;
}

uint64_t sub_1003B8280(uint64_t a1)
{
  return a1;
}

double sub_1003B82CC(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1003B82E4(uint64_t a1)
{
  return a1;
}

__n128 *sub_1003B8310(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_1003B836C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003B8398(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1003B83D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1003AE6AC(v2, v3, v4, v5, v8);
  swift_bridgeObjectRetain();
  sub_1003AB41C(v6, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003B8484(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 40);
  swift_bridgeObjectRelease();
  sub_1003AE7CC(v2, v3, v4, v5, v8);
  swift_bridgeObjectRelease();
  sub_1003AB468(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003B8530(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 96) & 7;
  *(void *)(result + 40) &= 0xFuLL;
  *(void *)(result + 96) = v1;
  return result;
}

uint64_t sub_1003B854C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1003B8584(uint64_t a1)
{
  return sub_1003B6340(a1, *(void *)(v1 + 16));
}

uint64_t sub_1003B858C(uint64_t *a1)
{
  return sub_1003B63A4(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void (**)(_OWORD *))(v1 + 32));
}

uint64_t sub_1003B85AC(uint64_t a1)
{
  if ((*(void *)(a1 + 40) >> 4) > 0x80000000) {
    return -(*(void *)(a1 + 40) >> 4);
  }
  else {
    return 0;
  }
}

uint64_t sub_1003B85C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003B8620(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a6 >> 4 != 0xFFFFFFFF || a13 >= 8) {
    return sub_1003B7304(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

__n128 *sub_1003B865C(__n128 *a1, __n128 *a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for MIMEError()
{
  return &type metadata for MIMEError;
}

uint64_t Message.extractAttachments(lineEnding:writeAttachment:writeWithoutAttachments:cache:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v9[16] = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  return sub_1003CFB18(v7, (uint64_t (*)(void))sub_1003B8714, (uint64_t)v9, a7);
}

uint64_t sub_1003B8714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003B8760(3u, *(unsigned __int8 *)(v4 + 16), *(void (**)(void *))(v4 + 24), *(void *)(v4 + 32), *(void (**)(uint64_t, char *))(v4 + 40), *(void *)(v4 + 48), *(uint64_t **)(v4 + 56), a1, a2, a3, a4);
}

uint64_t sub_1003B8760(unsigned int a1, uint64_t a2, void (*a3)(void *), uint64_t a4, void (*a5)(uint64_t, char *), uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_1003B9E90(a1, a8, a9, a10, a11, a7, (uint64_t)&v31);
  if (!v11)
  {
    uint64_t v18 = v38;
    *(void *)&long long v39 = v31;
    BYTE8(v39) = v32;
    long long v40 = v33;
    long long v41 = v34;
    *(void *)&long long v42 = v35;
    WORD4(v42) = v36;
    uint64_t v43 = v37;
    sub_1003B8D70();
    v52[2] = v41;
    v52[3] = v42;
    uint64_t v53 = v43;
    v52[0] = v39;
    v52[1] = v40;
    sub_1003B8A08(a1, a2, a5, a6);
    sub_1003BA1C8((uint64_t)v52);
    uint64_t v30 = a3;
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      long long v20 = (_OWORD *)(v18 + 104);
      do
      {
        uint64_t v21 = *((void *)v20 - 8);
        uint64_t v22 = *((void *)v20 - 7);
        char v23 = *((unsigned char *)v20 - 48);
        uint64_t v24 = *((void *)v20 - 5);
        uint64_t v25 = *((void *)v20 - 4);
        uint64_t v27 = *((void *)v20 - 3);
        uint64_t v26 = *((void *)v20 - 2);
        v44[0] = *((void *)v20 - 9);
        v44[1] = v21;
        uint64_t v44[2] = v22;
        char v45 = v23;
        uint64_t v46 = v24;
        uint64_t v47 = v25;
        uint64_t v48 = v27;
        uint64_t v49 = v26;
        uint64_t v54 = v26;
        char v50 = *((unsigned char *)v20 - 8);
        char v28 = v50;
        long long v29 = *v20;
        long long v20 = (_OWORD *)((char *)v20 + 88);
        long long v51 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1003BA200(v24, v25, v27, v26, v28);
        v30(v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1003BA214(v24, v25, v27, v54, v28);
        --v19;
      }
      while (v19);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UnsafeExtractedAttachment.encoding.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t UnsafeExtractedAttachment.encoding.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t UnsafeExtractedAttachment.mediaType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1003B979C(v1 + 32, a1);
}

uint64_t UnsafeExtractedAttachment.mediaType.setter(uint64_t a1)
{
  return sub_1003B9804(a1, v1 + 32);
}

uint64_t UnsafeExtractedAttachment.unsafeBytes.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t UnsafeExtractedAttachment.unsafeBytes.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 72) = result;
  *(void *)(v2 + 80) = a2;
  return result;
}

__n128 UnsafeExtractedAttachment.init(part:filename:encoding:mediaType:unsafeBytes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_10001FDF0(a5, (uint64_t)v18, &qword_100713CD0);
  char v15 = v19;
  __n128 result = (__n128)v18[0];
  long long v17 = v18[1];
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(unsigned char *)(a8 + 24) = a4;
  *(__n128 *)(a8 + 32) = result;
  *(_OWORD *)(a8 + 48) = v17;
  *(unsigned char *)(a8 + 64) = v15;
  *(void *)(a8 + 72) = a6;
  *(void *)(a8 + 80) = a7;
  return result;
}

uint64_t sub_1003B8A08(unsigned int a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4)
{
  unsigned int v40 = a1;
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4[8];
  uint64_t v46 = v11;
  uint64_t v39 = *(void *)(v11 + 16);
  if (v39)
  {
    sub_10001FDF0((uint64_t)(v4 + 5), (uint64_t)v41, &qword_100713CE0);
    sub_10001FDF0((uint64_t)v41, (uint64_t)v44, &qword_100713CE0);
    int v38 = v45;
    if (v45 == 2)
    {
      uint64_t v12 = *v4;
      sub_1003BA228();
      swift_allocError();
      *uint64_t v13 = v12;
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
    else
    {
      uint64_t v36 = v44[1];
      uint64_t v37 = v44[0];
      int v23 = *((unsigned __int8 *)v4 + 57);
      if (v23 == 1)
      {
        uint64_t v24 = sub_1003D4300(*((unsigned __int8 *)v4 + 8), v4[2], v4[3], v4[4]);
        if (v24) {
          uint64_t v26 = v25 - v24;
        }
        else {
          uint64_t v26 = 0;
        }
      }
      else
      {
        uint64_t v26 = 1;
      }
      sub_1003E0788(a2, v26, v23 ^ 1, 0, 0, a3, a4, *((unsigned __int8 *)v4 + 8), v4[2], v4[3], v4[4]);
      uint64_t v28 = v11 + 32;
      uint64_t result = swift_bridgeObjectRetain();
      for (uint64_t i = 0; ; ++i)
      {
        v42[0] = *(_OWORD *)v28;
        long long v30 = *(_OWORD *)(v28 + 16);
        long long v31 = *(_OWORD *)(v28 + 32);
        long long v32 = *(_OWORD *)(v28 + 48);
        uint64_t v43 = *(void *)(v28 + 64);
        void v42[2] = v31;
        v42[3] = v32;
        v42[1] = v30;
        uint64_t v33 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        uint64_t v34 = v38 & 1;
        sub_1003BA27C((uint64_t)v42);
        sub_1003E1008(i == 0, v37, v36, v34, a2, (void (*)(char *, uint64_t *))a3);
        sub_1003B8A08(v40, a2, a3, a4);
        if (v5)
        {
          sub_10001D550((uint64_t)&v46);
          return sub_1003BA1C8((uint64_t)v42);
        }
        uint64_t result = sub_1003BA1C8((uint64_t)v42);
        v28 += 72;
        if (v33 == v39)
        {
          uint64_t v35 = v38 & 1;
          sub_10001D550((uint64_t)&v46);
          return sub_1003E13A0(v37, v36, v35, a2, (void (*)(char *, uint64_t *))a3);
        }
      }
      __break(1u);
    }
  }
  else
  {
    int v15 = *((unsigned __int8 *)v4 + 57);
    uint64_t v16 = *((unsigned __int8 *)v4 + 8);
    uint64_t v17 = v4[2];
    uint64_t v18 = v4[3];
    uint64_t v19 = v4[4];
    if (v15 == 1)
    {
      uint64_t v20 = sub_1003D4300(v16, v17, v18, v19);
      if (v20) {
        uint64_t v22 = v21 - v20;
      }
      else {
        uint64_t v22 = 0;
      }
      return sub_1003E0788(a2, v22, 0, 0, 0, a3, a4, v16, v17, v18, v19);
    }
    else
    {
      uint64_t v27 = type metadata accessor for PartReplacement();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
      sub_1003E0D94(a2, (uint64_t)v10, a3, a4, (char *)v16, v17, v18, v19);
      return sub_1003BA2B4((uint64_t)v10);
    }
  }
  return result;
}

void sub_1003B8D70()
{
  uint64_t v1 = *(char **)(v0 + 64);
  unint64_t v2 = *((void *)v1 + 2);
  if (v2)
  {
    unint64_t v3 = 0;
    char v4 = 1;
LABEL_3:
    if (v3 <= v2) {
      unint64_t v5 = v2;
    }
    else {
      unint64_t v5 = v3;
    }
    uint64_t v6 = -(uint64_t)v5;
    uint64_t v7 = 72 * v3++ + 89;
    do
    {
      if (v6 + v3 == 1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v1 = sub_1003AB3C4((uint64_t)v1);
      }
      if (v3 - 1 >= *((void *)v1 + 2)) {
        goto LABEL_27;
      }
      sub_1003B8D70();
      if (v3 - 1 >= *((void *)v1 + 2)) {
        goto LABEL_28;
      }
      if (v1[v7] == 1)
      {
        char v4 = 0;
        if (v3 != v2) {
          goto LABEL_3;
        }
        goto LABEL_24;
      }
      ++v3;
      v7 += 72;
    }
    while (v3 - v2 != 1);
    *(void *)(v0 + 64) = v1;
    if ((v4 & 1) == 0) {
      return;
    }
  }
  if ((*(unsigned char *)(v0 + 57) & 1) == 0)
  {
    uint64_t v8 = *((void *)v1 + 2);
    if (v8)
    {
      uint64_t v9 = v1 + 96;
      while (!*(void *)(*(void *)v9 + 16))
      {
        v9 += 72;
        if (!--v8) {
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v1 = (char *)_swiftEmptyArrayStorage;
LABEL_24:
      *(void *)(v0 + 64) = v1;
    }
  }
}

uint64_t sub_1003B8ECC(uint64_t *a1, uint64_t a2)
{
  char v4 = (void *)(a2 + 16);
  swift_beginAccess();
  if (!*(void *)(a2 + 16)
    || (uint64_t v5 = swift_bridgeObjectRetain(),
        Swift::Bool v6 = SectionSpecifier.Part.isSubPart(of:)((NIOIMAPCore2::SectionSpecifier::Part)v5),
        swift_bridgeObjectRelease(),
        !v6))
  {
    long long v8 = *(_OWORD *)(a1 + 11);
    long long v9 = *(_OWORD *)(a1 + 15);
    v12[1] = *(_OWORD *)(a1 + 13);
    v13[0] = v9;
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)a1 + 129);
    *((void *)&v12[0] + 1) = *((void *)&v8 + 1);
    sub_10001FDF0((uint64_t)v12 + 8, (uint64_t)v14, &qword_100713A60);
    sub_10001FDF0((uint64_t)v14, (uint64_t)v15, &qword_100713A60);
    if (*((void *)&v16 + 1))
    {
      v17[0] = v15[0];
      v17[1] = v15[1];
      _OWORD v17[2] = v16;
      sub_10039DF8C((uint64_t)v17, (uint64_t)v18);
      sub_10039DF8C((uint64_t)v18, (uint64_t)v19);
      if (v20 <= 0xFu)
      {
        sub_1003BA534(v19, &v21);
        sub_1003BA534(&v21, &v22);
        if (v23 < 0)
        {
          v23 &= ~0x80u;
          sub_10001FDF0((uint64_t)&v22, (uint64_t)v24, &qword_100713A68);
        }
        else if (v22.n128_u8[0] == 10 || v22.n128_u8[0] == 4)
        {
          uint64_t v10 = *a1;
          uint64_t v7 = 1;
          swift_beginAccess();
          *char v4 = v10;
          swift_bridgeObjectRetain();
LABEL_12:
          swift_bridgeObjectRelease();
          return v7;
        }
      }
    }
    swift_beginAccess();
    uint64_t v7 = 0;
    *char v4 = 0;
    goto LABEL_12;
  }
  return 1;
}

uint64_t sub_1003B9094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, void *a10)
{
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = a2 + 16;
  sub_1003B990C(a2, a3, a8, a9, (uint64_t)a10);
  uint64_t v30 = v11;
  char v31 = v12;
  uint64_t v32 = v14;
  uint64_t v33 = v13;
  uint64_t v34 = v15;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  char v38 = 2;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = 0;
  UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)&v30);
  swift_beginAccess();
  sub_10001FDF0(v16, (uint64_t)v43, &qword_100713CF0);
  sub_10001FDF0((uint64_t)&v30, v16, &qword_100713CF0);
  swift_bridgeObjectRetain();
  sub_1003BA4D0(v43);
  uint64_t v21 = v11;
  char v22 = v12;
  uint64_t v23 = v14;
  uint64_t v24 = v13;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = v15;
  __int16 v28 = 2;
  long long v29 = _swiftEmptyArrayStorage;
  uint64_t v17 = swift_bridgeObjectRetain();
  if (static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v17, _swiftEmptyArrayStorage))
  {
    swift_beginAccess();
    uint64_t v18 = a10[2];
    a10[2] = v11;
    a10[3] = v12;
    a10[4] = v14;
    a10[5] = v13;
    a10[6] = v15;
    a10[7] = 0;
    a10[8] = 0;
    a10[9] = 2;
    a10[10] = _swiftEmptyArrayStorage;
    sub_1003BA590(v18);
  }
  else
  {
    swift_beginAccess();
    if (a10[2])
    {
      unint64_t v19 = (2 * *(void *)(v11 + 16)) | 1;
      swift_bridgeObjectRetain();
      sub_1003B9438((uint64_t)&v21, v11, v11 + 32, 0, v19);
      sub_10001D550(a1);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 2;
}

uint64_t sub_1003B929C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1003B52C0(a1, (uint64_t)v19);
  swift_beginAccess();
  sub_10001FDF0(a6, (uint64_t)v25, &qword_100713CF0);
  sub_10001FDF0((uint64_t)v25, (uint64_t)v26, &qword_100713CF0);
  uint64_t result = sub_1000571F8(v26);
  if (result != 1)
  {
    uint64_t result = sub_1003B52C0(a1, (uint64_t)&v20);
    unsigned __int8 v9 = v23;
    switch(v23 >> 59)
    {
      case 0uLL:
        *(unsigned char *)(a6 + 144) = 1;
        break;
      case 5uLL:
        v23 &= 0x7FFFFFFFFFFFFFFuLL;
        long long v10 = v20;
        uint64_t v11 = v21;
        uint64_t v12 = v22;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 40) = v10;
        *(void *)(a6 + 56) = v11;
        *(void *)(a6 + 64) = v12;
        break;
      case 8uLL:
        char v13 = v21;
        *(_OWORD *)(a6 + 72) = v20;
        *(unsigned char *)(a6 + 88) = v13;
        break;
      case 9uLL:
        v23 &= 0x7FFFFFFFFFFFFFFuLL;
        long long v18 = v20;
        uint64_t v14 = v21;
        uint64_t v15 = v22;
        uint64_t v16 = v24;
        uint64_t v17 = v9;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        *(_OWORD *)(a6 + 96) = v18;
        *(void *)(a6 + 112) = v14;
        *(void *)(a6 + 120) = v15;
        *(void *)(a6 + 128) = v17;
        *(void *)(a6 + 136) = v16;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1003B9438(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (a5 >> 1 == a4) {
    return result;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t v7 = sub_1003EFC18(0, v8, 1, v7);
LABEL_8:
    unint64_t v15 = *((void *)v7 + 2);
    unint64_t v14 = *((void *)v7 + 3);
    if (v15 >= v14 >> 1) {
      uint64_t v7 = sub_1003EFC18((char *)(v14 > 1), v15 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v15 + 1;
    uint64_t v16 = &v7[72 * v15];
    *((_OWORD *)v16 + 2) = *(_OWORD *)v9;
    long long v17 = *(_OWORD *)(v9 + 16);
    long long v18 = *(_OWORD *)(v9 + 32);
    long long v19 = *(_OWORD *)(v9 + 48);
    *((void *)v16 + 12) = *(void *)(v9 + 64);
    *((_OWORD *)v16 + 4) = v18;
    *((_OWORD *)v16 + 5) = v19;
    *((_OWORD *)v16 + 3) = v17;
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v5 + 64) = v7;
    return result;
  }
  uint64_t v5 = v6;
  uint64_t v9 = result;
  int64_t v8 = *(void *)(a3 + 8 * a4);
  int64_t v13 = a4 + 1;
  uint64_t result = sub_1003DF1B4(a3, a4 + 1, a5, (uint64_t)&_swiftEmptyArrayStorage[4], 0, 1uLL);
  if (result)
  {
    uint64_t v7 = *(char **)(v6 + 64);
    if (*((void *)v7 + 2) + 1 != v8) {
      return result;
    }
    swift_unknownObjectRetain();
    sub_1003BA27C(v9);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  if (v8 >= 1)
  {
    uint64_t v20 = *(void *)(v6 + 64);
    if ((unint64_t)v8 <= *(void *)(v20 + 16))
    {
      swift_unknownObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1003AB3C4(v20);
        uint64_t v20 = result;
      }
      if ((unint64_t)(v8 - 1) >= *(void *)(v20 + 16))
      {
        __break(1u);
      }
      else
      {
        sub_1003B9438(v9, a2, a3, v13, a5);
        uint64_t result = swift_unknownObjectRelease();
        *(void *)(v6 + 64) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_1003B9610(uint64_t result, uint64_t a2, int64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a4 >> 1 == a3)
  {
    *(unsigned char *)(a5 + 57) = a6 & 1;
    char v16 = *(unsigned char *)(a7 + 16);
    *(_OWORD *)(a5 + 40) = *(_OWORD *)a7;
    *(unsigned char *)(a5 + 56) = v16;
    return result;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = a2;
  uint64_t v17 = *(void *)(a2 + 8 * a3);
  unint64_t v12 = v17 - 1;
  if (v17 >= 1)
  {
    int64_t v8 = *(char **)(a5 + 64);
    if ((unint64_t)v17 <= *((void *)v8 + 2))
    {
      unint64_t v9 = a4;
      uint64_t v7 = result;
      int64_t v11 = a3 + 1;
      char v18 = sub_1003DF1B4(a2, a3 + 1, a4, (uint64_t)&_swiftEmptyArrayStorage[4], 0, 1uLL);
      swift_unknownObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v18 & 1) == 0)
      {
        if (result)
        {
LABEL_12:
          if (v12 >= *((void *)v8 + 2))
          {
            __break(1u);
            return result;
          }
          sub_1003B9610(v7, v10, v11, v9, &v8[72 * v12 + 32], a6 & 1, a7);
          goto LABEL_14;
        }
LABEL_20:
        uint64_t result = (uint64_t)sub_1003AB3C4((uint64_t)v8);
        int64_t v8 = (char *)result;
        goto LABEL_12;
      }
      if (result)
      {
LABEL_9:
        if (v12 < *((void *)v8 + 2))
        {
          long long v19 = &v8[72 * v12];
          v19[89] = a6 & 1;
          char v20 = *(unsigned char *)(a7 + 16);
          *(_OWORD *)(v19 + 72) = *(_OWORD *)a7;
          v19[88] = v20;
LABEL_14:
          uint64_t result = swift_unknownObjectRelease();
          *(void *)(a5 + 64) = v8;
          return result;
        }
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      int64_t v8 = sub_1003AB3C4((uint64_t)v8);
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1003B979C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B9804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B9878(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for UnsafeExtractedAttachment(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeExtractedAttachment()
{
  return &type metadata for UnsafeExtractedAttachment;
}

uint64_t *sub_1003B990C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess();
  sub_10001FDF0(v9, (uint64_t)v75, &qword_100713CF0);
  sub_10001FDF0((uint64_t)v75, (uint64_t)&v76, &qword_100713CF0);
  if (sub_1000571F8((uint64_t *)&v76) != 1)
  {
    v73[6] = v82;
    v73[7] = v83;
    v73[8] = v84;
    char v74 = v85;
    v73[2] = v78;
    v73[3] = v79;
    v73[4] = v80;
    v73[5] = v81;
    v73[0] = v76;
    v73[1] = v77;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    char v62 = 2;
    sub_10001FDF0((uint64_t)v75, (uint64_t)v63, &qword_100713CF0);
    sub_1003B5274((uint64_t)v63);
    if ((sub_1003B8ECC((uint64_t *)v73, a2) & 1) != 0
      || (v85 & 1) != 0
      || (v72[0] = v82,
          v72[1] = v83,
          v72[2] = v84,
          (sub_10039D0BC(SBYTE8(v78), v79, SBYTE8(v79), v80, (uint64_t)v72) & 1) == 0))
    {
      int v14 = 0;
      uint64_t v15 = *((void *)&v84 + 1);
      if (!*((void *)&v84 + 1)) {
        goto LABEL_11;
      }
LABEL_10:
      long long v66 = v82;
      long long v67 = v83;
      char v68 = v84;
      uint64_t v69 = v15;
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_1003B1DF4();
      uint64_t v18 = v17;
      char v20 = v19;
      int v21 = v19;
      swift_bridgeObjectRelease();
      if (v21 != 2)
      {
        uint64_t v60 = v16;
        uint64_t v61 = v18;
        char v62 = v20;
        goto LABEL_14;
      }
LABEL_11:
      if (!v14)
      {
LABEL_16:
        sub_1003BA4D0(v75);
        sub_1003BA3A4((uint64_t)v58);
        swift_beginAccess();
        sub_10001FDF0(v9, (uint64_t)v59, &qword_100713CF0);
        sub_10001FDF0((uint64_t)v58, v9, &qword_100713CF0);
        uint64_t v10 = (uint64_t *)v59;
        return sub_1003BA4D0(v10);
      }
LABEL_14:
      uint64_t v22 = a5 + 16;
      swift_beginAccess();
      if (*(void *)(a5 + 16))
      {
        uint64_t v23 = v76;
        unint64_t v24 = (2 * *(void *)(v76 + 16)) | 1;
        uint64_t v25 = swift_bridgeObjectRetain();
        sub_1003B9610(v25, v23 + 32, 0, v24, v22, v14, (uint64_t)&v60);
        swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
    uint64_t v47 = *((void *)&v78 + 1);
    uint64_t v11 = v80;
    char v44 = BYTE8(v79);
    uint64_t v45 = v79;
    long long v54 = v83;
    long long v56 = v82;
    long long v12 = v84;
    if (BYTE8(v81) == 2)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      char v50 = 5;
      if (*((void *)&v12 + 1))
      {
LABEL_8:
        v70[0] = v56;
        v70[1] = v54;
        char v71 = v12;
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1003CEEDC((uint64_t)v70, (uint64_t)v64);
        uint64_t v57 = v64[0];
        uint64_t v53 = v64[2];
        uint64_t v55 = v64[1];
        uint64_t v52 = v64[3];
        char v51 = v65;
        swift_retain();
        int64_t v13 = sub_1003BCEAC(*((uint64_t *)&v12 + 1), a3);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v27 = sub_1003E8998(*((uint64_t *)&v80 + 1), v81);
      uint64_t v29 = v28;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      char v50 = sub_1003B0A74(v27, v29);
      if (*((void *)&v12 + 1)) {
        goto LABEL_8;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v57 = 0;
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    char v51 = 0;
    int64_t v13 = 0;
LABEL_20:
    uint64_t v30 = BYTE8(v76);
    uint64_t v31 = *((void *)&v77 + 1);
    uint64_t v46 = v77;
    uint64_t v32 = v78;
    uint64_t v49 = v76;
    if (v11)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59[0] = v44 & 1;
      int64_t v48 = sub_1003AC410(a3, v47, v45, v44 & 1, v11);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      long long v35 = (char **)(a4 + 16);
      if (v13)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      int64_t v48 = 0;
      uint64_t v34 = 0;
      long long v35 = (char **)(a4 + 16);
      if (v13) {
        goto LABEL_22;
      }
    }
    uint64_t v57 = 0;
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    char v51 = -1;
LABEL_25:
    uint64_t v36 = sub_1003D4300(v30, v46, v31, v32);
    uint64_t v38 = v37;
    swift_beginAccess();
    long long v39 = *v35;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *long long v35 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v39 = sub_1003EFD38(0, *((void *)v39 + 2) + 1, 1, v39);
      *long long v35 = v39;
    }
    unint64_t v42 = *((void *)v39 + 2);
    unint64_t v41 = *((void *)v39 + 3);
    if (v42 >= v41 >> 1)
    {
      long long v39 = sub_1003EFD38((char *)(v41 > 1), v42 + 1, 1, v39);
      *long long v35 = v39;
    }
    *((void *)v39 + 2) = v42 + 1;
    uint64_t v43 = &v39[88 * v42];
    *((void *)v43 + 4) = v49;
    *((void *)v43 + 5) = v48;
    *((void *)v43 + 6) = v34;
    v43[56] = v50;
    *((void *)v43 + 8) = v57;
    *((void *)v43 + 9) = v55;
    *((void *)v43 + 10) = v53;
    *((void *)v43 + 11) = v52;
    v43[96] = v51;
    *((void *)v43 + 13) = v36;
    *((void *)v43 + 14) = v38;
    int v14 = 1;
    uint64_t v15 = *((void *)&v84 + 1);
    if (!*((void *)&v84 + 1)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  swift_beginAccess();
  sub_10001FDF0(v9, (uint64_t)v73, &qword_100713CF0);
  sub_10001FDF0((uint64_t)v75, v9, &qword_100713CF0);
  uint64_t v10 = (uint64_t *)v73;
  return sub_1003BA4D0(v10);
}

uint64_t sub_1003B9E90@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(void *)(v11 + 80) = 0;
  uint64_t v12 = swift_allocObject();
  sub_1003BA3A4((uint64_t)v51);
  sub_10001FDF0((uint64_t)v51, v12 + 16, &qword_100713CF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = _swiftEmptyArrayStorage;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  uint64_t v52 = v12;
  uint64_t v37 = v12;
  uint64_t v38 = v14;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = v13;
  uint64_t v45 = v11;
  uint64_t v35 = v12 + 16;
  char v15 = sub_1003D521C(a1, a2, a3, a4, a5);
  if (v33)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v46 = _swiftEmptyArrayStorage;
    char v47 = v15;
    uint64_t v48 = v16;
    uint64_t v49 = v17;
    uint64_t v50 = v18;
    sub_1003D49D8(sub_1003BA3FC, (uint64_t)v36, (void (*)(void *, char *, char *, uint64_t, uint64_t))sub_1003BA434, (uint64_t)v34, 0, 0);
    sub_1003B990C(v52, v14, a6, v13, v11);
    swift_beginAccess();
    uint64_t v20 = *(void *)(v11 + 16);
    if (v20)
    {
      uint64_t v32 = *(void *)(v11 + 80);
      uint64_t v25 = *(void *)(v11 + 64);
      uint64_t v23 = *(void *)(v11 + 48);
      uint64_t v24 = *(void *)(v11 + 56);
      uint64_t v30 = *(void *)(v11 + 40);
      uint64_t v21 = *(void *)(v11 + 32);
      uint64_t v27 = *(void *)(v11 + 72);
      uint64_t v28 = *(void *)(v11 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(v13 + 16);
      sub_1003BA490(v20);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a7 = v20;
      *(unsigned char *)(a7 + 8) = v28;
      *(void *)(a7 + 16) = v21;
      *(void *)(a7 + 24) = v30;
      *(void *)(a7 + 32) = v23;
      *(void *)(a7 + 40) = v24;
      *(void *)(a7 + 48) = v25;
      *(unsigned char *)(a7 + 56) = v27;
      *(unsigned char *)(a7 + 57) = BYTE1(v27) & 1;
      *(void *)(a7 + 64) = v32;
      *(void *)(a7 + 72) = v22;
      return result;
    }
    sub_1003BA43C();
    swift_allocError();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1003BA1C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003BA200(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1) {
    return sub_1003AE6AC(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_1003BA214(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 != -1) {
    return sub_1003AE7CC(result, a2, a3, a4, a5);
  }
  return result;
}

unint64_t sub_1003BA228()
{
  unint64_t result = qword_100713CE8;
  if (!qword_100713CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713CE8);
  }
  return result;
}

uint64_t sub_1003BA27C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003BA2B4(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100713CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003BA314()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1003BA358()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, 161, 7);
}

double sub_1003BA3A4(uint64_t a1)
{
  *(unsigned char *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1003BA3C4()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003BA3FC(uint64_t a1)
{
  return sub_1003B9094(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(uint64_t **)(v1 + 64), *(void *)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_1003BA434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003B929C(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

unint64_t sub_1003BA43C()
{
  unint64_t result = qword_100713CF8;
  if (!qword_100713CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713CF8);
  }
  return result;
}

uint64_t sub_1003BA490(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *sub_1003BA4D0(uint64_t *a1)
{
  return a1;
}

__n128 *sub_1003BA534(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_1003BA590(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    return sub_1003AE7CC(v4, v5, v6, v7, v3);
  }
  return result;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    sub_1003AE6AC(v6, v7, v8, v9, v5);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
    *(unsigned char *)(a1 + 64) = v5;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = (long long *)(a1 + 32);
  int v5 = (long long *)(a2 + 32);
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v6 == 255)
    {
      long long v22 = *v5;
      long long v23 = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *uint64_t v4 = v22;
      *(_OWORD *)(a1 + 48) = v23;
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a2 + 40);
      uint64_t v18 = *(void *)(a2 + 48);
      uint64_t v19 = *(void *)(a2 + 56);
      sub_1003AE6AC(v16, v17, v18, v19, *(unsigned char *)(a2 + 64));
      *(void *)(a1 + 32) = v16;
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v19;
      *(unsigned char *)(a1 + 64) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_1003B9878(a1 + 32);
    char v20 = *(unsigned char *)(a2 + 64);
    long long v21 = *(_OWORD *)(a2 + 48);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 48) = v21;
    *(unsigned char *)(a1 + 64) = v20;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    sub_1003AE6AC(v7, v8, v9, v10, *(unsigned char *)(a2 + 64));
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    char v15 = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v6;
    sub_1003AE7CC(v11, v12, v13, v14, v15);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 64);
  if (v5 == 255) {
    goto LABEL_5;
  }
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if (v6 == 255)
  {
    sub_1003B9878(a1 + 32);
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 64) = v6;
  sub_1003AE7CC(v7, v8, v9, v10, v5);
LABEL_6:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t _s9IMAP2MIME25UnsafeExtractedAttachmentVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1003BA940(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.UnsafeAttachment()
{
  return &type metadata for ExtractAttachments.UnsafeAttachment;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node.NoTopNodeFound()
{
  return &type metadata for ExtractAttachments.Node.NoTopNodeFound;
}

uint64_t initializeWithCopy for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v3 = *(_OWORD *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

__n128 initializeWithTake for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.Current(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractAttachments.Current(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractAttachments.Current(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Current()
{
  return &type metadata for ExtractAttachments.Current;
}

ValueMetadata *type metadata accessor for ExtractAttachments()
{
  return &type metadata for ExtractAttachments;
}

uint64_t destroy for ExtractAttachments.Node()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node()
{
  return &type metadata for ExtractAttachments.Node;
}

unsigned char *storeEnumTagSinglePayload for ExtractAttachments.Node.Action(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003BAF84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.Node.Action()
{
  return &type metadata for ExtractAttachments.Node.Action;
}

uint64_t destroy for ExtractAttachments.UnsafeNodeHeaders()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v5 = a2[2];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(long long *)((char *)a2 + 56);
  long long v7 = *(long long *)((char *)a2 + 72);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  return a1;
}

__n128 initializeWithTake for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractAttachments.UnsafeNodeHeaders(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractAttachments.UnsafeNodeHeaders(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractAttachments.UnsafeNodeHeaders()
{
  return &type metadata for ExtractAttachments.UnsafeNodeHeaders;
}

unint64_t sub_1003BB2AC()
{
  unint64_t result = qword_100713D00;
  if (!qword_100713D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713D00);
  }
  return result;
}

uint64_t sub_1003BB304(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unint64_t v3 = a1;
  if (a1) {
    Swift::Int v4 = a2 - a1;
  }
  else {
    Swift::Int v4 = 0;
  }
  sub_1005E1D10(v4);
  uint64_t result = 0;
  unint64_t v6 = 0xE000000000000000;
  if (v3) {
    goto LABEL_7;
  }
  if (a2)
  {
    unint64_t v3 = 0;
    do
    {
      int v7 = *v3++;
      if ((v7 - 1) < 0x7E)
      {
        uint64_t v8 = result;
        unint64_t v9 = v6;
        sub_1005E1D60();
        uint64_t result = v8;
        unint64_t v6 = v9;
      }
LABEL_7:
      ;
    }
    while (!a2 || v3 != a2);
  }
  return result;
}

uint64_t sub_1003BB3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1;
    uint64_t v57 = a2;
    uint64_t v58 = 0;
    uint64_t v4 = 32;
    uint64_t v56 = swift_bridgeObjectRetain();
    while (1)
    {
      long long v11 = *(_OWORD *)(v3 + v4 + 48);
      long long v69 = *(_OWORD *)(v3 + v4 + 32);
      long long v70 = v11;
      long long v12 = *(_OWORD *)(v3 + v4 + 80);
      long long v71 = *(_OWORD *)(v3 + v4 + 64);
      long long v72 = v12;
      long long v13 = *(_OWORD *)(v3 + v4 + 16);
      long long v67 = *(_OWORD *)(v3 + v4);
      long long v68 = v13;
      sub_1003BE4C8((uint64_t)&v67);
      if (v4 != 32)
      {
        v77._uint64_t countAndFlagsBits = 8236;
        v77._object = (void *)0xE200000000000000;
        sub_1005E1E30(v77);
      }
      sub_10001FDF0((uint64_t)&v67, (uint64_t)v73, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v73, (uint64_t)&v74, &qword_100713AA8);
      if (!*((void *)&v74 + 1)) {
        break;
      }
      uint64_t v14 = HIBYTE(*((void *)&v74 + 1)) & 0xFLL;
      if ((*((void *)&v74 + 1) & 0x2000000000000000) == 0) {
        uint64_t v14 = v74 & 0xFFFFFFFFFFFFLL;
      }
      if (!v14 || v68 == v74 || (sub_1005E3290() & 1) != 0) {
        break;
      }
      unint64_t pErrorCode = sub_1003B3B78();
      uint64_t v63 = v51;
      v78._uint64_t countAndFlagsBits = 15392;
      v78._object = (void *)0xE200000000000000;
      sub_1005E1E30(v78);
      v79._uint64_t countAndFlagsBits = sub_1003B3030(v57);
      sub_1005E1E30(v79);
      swift_bridgeObjectRelease();
      v80._uint64_t countAndFlagsBits = 62;
      v80._object = (void *)0xE100000000000000;
      sub_1005E1E30(v80);
      sub_1003BE574((uint64_t)&v67);
      v9._uint64_t countAndFlagsBits = pErrorCode;
      uint64_t v10 = v63;
LABEL_5:
      v9._object = v10;
      sub_1005E1E30(v9);
      swift_bridgeObjectRelease();
      v4 += 96;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v64;
      }
    }
    if (*((void *)&v71 + 1) >> 14 < (unint64_t)v71 >> 14)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
    }
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_1005E2940();
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    LODWORD(pErrorCode) = 0;
    swift_bridgeObjectRetain();
    uint64_t NFCInstance = unorm2_getNFCInstance();
    int v23 = pErrorCode;
    uint64_t v61 = v2;
    uint64_t v60 = v4;
    if (!NFCInstance || (int)pErrorCode > 0)
    {
      sub_1003BE520();
      swift_allocError();
      *(_DWORD *)uint64_t v30 = v23;
      *(unsigned char *)(v30 + 4) = 0;
      swift_willThrow();
LABEL_29:
      uint64_t v31 = sub_1005E1D00();
      unint64_t v32 = v37;
      swift_bridgeObjectRelease();
      swift_errorRelease();
LABEL_30:
      uint64_t v38 = v57;
      if (*(unsigned char *)(v57 + 96))
      {
        LODWORD(pErrorCode) = 0;
        uint64_t v39 = uidna_openUTS46(0x3Cu, (UErrorCode *)&pErrorCode);
      }
      else
      {
        uint64_t v39 = *(UIDNA **)(v57 + 88);
      }
      long long v66 = v39;
      sub_1003BF244(&v66, v31, v32, (uint64_t *)&pErrorCode);
      long long v40 = v69;
      long long v41 = v70;
      *(void *)(v38 + 88) = v39;
      *(unsigned char *)(v38 + 96) = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v42 = pErrorCode;
      uint64_t v43 = v63;
      LODWORD(pErrorCode) = 0;
      swift_bridgeObjectRetain();
      uint64_t v44 = unorm2_getNFCInstance();
      int v45 = pErrorCode;
      uint64_t v59 = v42;
      if (v44 && (int)pErrorCode <= 0)
      {
        unint64_t v46 = sub_1003E7300(v40, *((unint64_t *)&v40 + 1), v41, *((unint64_t *)&v41 + 1));
        if ((uint64_t)(v46 + 0x4000000000000000) < 0) {
          goto LABEL_54;
        }
        if (((2 * v46) & 0x8000000000000000) != 0) {
          goto LABEL_57;
        }
        if ((uint64_t)(2 * v46 + 0x4000000000000000) < 0) {
          goto LABEL_58;
        }
        uint64_t v47 = 4 * v46;
        swift_bridgeObjectRetain();
        if (v47 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
        {
          __chkstk_darwin();
          uint64_t v6 = sub_1003E84F8((uint64_t *)((char *)&v56 - v48), v40, *((unint64_t *)&v40 + 1), v41, *((unint64_t *)&v41 + 1));
          uint64_t v8 = v49;
        }
        else
        {
          uint64_t v50 = (_WORD *)swift_slowAlloc();
          uint64_t v6 = sub_1003E84F8(v50, v40, *((unint64_t *)&v40 + 1), v41, *((unint64_t *)&v41 + 1));
          uint64_t v8 = v53;
          swift_slowDealloc();
        }
        swift_bridgeObjectRelease();
        uint64_t v58 = 0;
        if (!v8)
        {
          uint64_t v6 = sub_1005E1D00();
          uint64_t v8 = v54;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1003BE520();
        swift_allocError();
        *(_DWORD *)uint64_t v5 = v45;
        *(unsigned char *)(v5 + 4) = 0;
        swift_willThrow();
        uint64_t v58 = 0;
        uint64_t v6 = sub_1005E1D00();
        uint64_t v8 = v7;
        swift_bridgeObjectRelease();
        swift_errorRelease();
      }
      uint64_t v2 = v61;
      unint64_t pErrorCode = v6;
      uint64_t v63 = v8;
      swift_bridgeObjectRetain();
      v75._uint64_t countAndFlagsBits = 64;
      v75._object = (void *)0xE100000000000000;
      sub_1005E1E30(v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v76._uint64_t countAndFlagsBits = v59;
      v76._object = v43;
      sub_1005E1E30(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1003BE574((uint64_t)&v67);
      v9._uint64_t countAndFlagsBits = pErrorCode;
      uint64_t v10 = v63;
      uint64_t v3 = v56;
      uint64_t v4 = v60;
      goto LABEL_5;
    }
    unint64_t v24 = sub_1003E7300(v15, v17, v19, v21);
    if ((uint64_t)(v24 + 0x4000000000000000) < 0) {
      goto LABEL_53;
    }
    if (((2 * v24) & 0x8000000000000000) != 0) {
      goto LABEL_55;
    }
    if ((uint64_t)(2 * v24 + 0x4000000000000000) < 0) {
      goto LABEL_56;
    }
    uint64_t v25 = 4 * v24;
    swift_bridgeObjectRetain();
    if (v25 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
    {
      __chkstk_darwin();
      uint64_t v27 = v58;
      uint64_t v28 = sub_1003E84F8((uint64_t *)((char *)&v56 - v26), v15, v17, v19, v21);
      if (v27)
      {
        swift_willThrow();
LABEL_28:
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      uint64_t v31 = v28;
      unint64_t v32 = v29;
    }
    else
    {
      uint64_t v33 = (_WORD *)swift_slowAlloc();
      uint64_t v34 = v58;
      uint64_t v35 = sub_1003E84F8(v33, v15, v17, v19, v21);
      if (v34)
      {
        swift_slowDealloc();
        goto LABEL_28;
      }
      uint64_t v31 = v35;
      unint64_t v32 = v36;
      swift_slowDealloc();
    }
    swift_bridgeObjectRelease();
    if (!v32)
    {
      uint64_t v31 = sub_1005E1D00();
      unint64_t v32 = v52;
    }
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  return 0;
}

uint64_t sub_1003BBB4C(long long *a1, long long *a2)
{
  sub_1003BC9AC(a1, (uint64_t)v4);
  sub_1003BC9AC(a2, (uint64_t)v5);
  return _s9IMAP2MIME6HeaderO21__derived_enum_equalsySbAC_ACtFZ_0(v4, v5) & 1;
}

unint64_t Header.field.getter()
{
  sub_1003BC9AC(v0, (uint64_t)&v3);
  unint64_t v1 = 0xD000000000000016;
  switch(v4)
  {
    case 1:
      unint64_t v1 = 0x6275732D6F747561;
      break;
    case 2:
      unint64_t v1 = 6513506;
      break;
    case 3:
      unint64_t v1 = 25443;
      break;
    case 4:
    case 5:
      unint64_t v1 = 0xD000000000000013;
      break;
    case 6:
      unint64_t v1 = 0x2D746E65746E6F63;
      break;
    case 7:
      unint64_t v1 = 0xD000000000000010;
      break;
    case 8:
      sub_10001FDF0((uint64_t)&v3, (uint64_t)&v5, &qword_100713D08);
      unint64_t v1 = 0xD000000000000019;
      break;
    case 9:
      unint64_t v1 = 0x2D746E65746E6F63;
      break;
    case 10:
      unint64_t v1 = 1702125924;
      break;
    case 11:
      unint64_t v1 = 1836020326;
      break;
    case 12:
      unint64_t v1 = 0x64692D7473696CLL;
      break;
    case 13:
      unint64_t v1 = 0x2D6567617373656DLL;
      break;
    case 14:
      unint64_t v1 = 0x7265762D656D696DLL;
      break;
    case 15:
      unint64_t v1 = 0x69726F6972702D78;
      break;
    case 16:
      unint64_t v1 = 0x6465766965636572;
      break;
    case 17:
      unint64_t v1 = 0x702D6E7275746572;
      break;
    case 18:
      unint64_t v1 = 0x7463656A627573;
      break;
    case 19:
      unint64_t v1 = 28532;
      break;
    case 20:
      unint64_t v1 = v3;
      swift_bridgeObjectRetain();
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t Header.value(cache:)(uint64_t a1)
{
  sub_1003BC9AC(v1, (uint64_t)v11);
  sub_1003BC9AC(v1, (uint64_t)&v12);
  switch(v18)
  {
    case 1:
      uint64_t v5 = 0x6E65672D6F747561;
      if (LOBYTE(v12._countAndFlagsBits) != 1) {
        uint64_t v5 = 0x7065722D6F747561;
      }
      if (LOBYTE(v12._countAndFlagsBits)) {
        return v5;
      }
      else {
        return 28526;
      }
    case 2:
    case 3:
    case 19:
      uint64_t v4 = sub_1003BB3AC(v12._countAndFlagsBits, a1);
      goto LABEL_24;
    case 5:
      Swift::String v6 = v12;
      uint64_t v7 = v13;
      sub_1003AB41C(v12._countAndFlagsBits, (unint64_t)v12._object);
      swift_bridgeObjectRetain();
      uint64_t v4 = _sSS9IMAP2MIMEEySSAA18ContentDispositionVcfC_0(v6._countAndFlagsBits, (uint64_t)v6._object, v7);
      goto LABEL_24;
    case 8:
      uint64_t countAndFlagsBits = 1953063479;
      switch(LOBYTE(v12._countAndFlagsBits))
      {
        case 1:
          uint64_t countAndFlagsBits = 1953063480;
          break;
        case 2:
          uint64_t countAndFlagsBits = 0x7972616E6962;
          break;
        case 3:
          uint64_t countAndFlagsBits = 0xD000000000000010;
          break;
        case 4:
          uint64_t countAndFlagsBits = 0x343665736162;
          break;
        case 5:
          uint64_t countAndFlagsBits = 0;
          break;
        default:
          return countAndFlagsBits;
      }
      return countAndFlagsBits;
    case 9:
      Swift::String v19 = v12;
      long long v20 = v13;
      long long v21 = v14;
      sub_1003AE650((uint64_t)&v19, (uint64_t)v25);
      v26[0] = *((void *)&v21 + 1);
      sub_1003B28E4((uint64_t)v25);
      sub_10002292C((uint64_t)v26);
      uint64_t v4 = _sSS9IMAP2MIMEEySSAA11ContentTypeVcfC_0((uint64_t)&v19);
      goto LABEL_24;
    case 10:
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
      swift_bridgeObjectRetain();
      return countAndFlagsBits;
    case 11:
      long long v21 = v14;
      long long v22 = v15;
      long long v23 = v16;
      long long v24 = v17;
      Swift::String v19 = v12;
      long long v20 = v13;
      sub_10001FDF0((uint64_t)&v19, (uint64_t)v26, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v26, (uint64_t)v25, &qword_100713AA8);
      if (!*((void *)&v25[0] + 1)) {
        goto LABEL_21;
      }
      uint64_t v8 = HIBYTE(*((void *)&v25[0] + 1)) & 0xFLL;
      if ((*((void *)&v25[0] + 1) & 0x2000000000000000) == 0) {
        uint64_t v8 = *(void *)&v25[0] & 0xFFFFFFFFFFFFLL;
      }
      if (v8 && v20 != v25[0] && (sub_1005E3290() & 1) == 0)
      {
        unint64_t v10 = sub_1003B3B78();
        v28._uint64_t countAndFlagsBits = 15392;
        v28._object = (void *)0xE200000000000000;
        sub_1005E1E30(v28);
        v29._uint64_t countAndFlagsBits = sub_1003B3030(a1);
        sub_1005E1E30(v29);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 62;
        v30._object = (void *)0xE100000000000000;
        sub_1005E1E30(v30);
        uint64_t countAndFlagsBits = v10;
      }
      else
      {
LABEL_21:
        uint64_t v4 = sub_1003B3030(a1);
LABEL_24:
        uint64_t countAndFlagsBits = v4;
      }
      break;
    case 12:
      v19._uint64_t countAndFlagsBits = 60;
      v19._object = (void *)0xE100000000000000;
      sub_1005E1E30(v12);
      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = 62;
      v27._object = (void *)0xE100000000000000;
      sub_1005E1E30(v27);
      swift_bridgeObjectRelease();
      return v19._countAndFlagsBits;
    case 15:
      LOBYTE(v19._countAndFlagsBits) = v12._countAndFlagsBits;
      uint64_t v4 = sub_1005E3230();
      goto LABEL_24;
    case 20:
      uint64_t countAndFlagsBits = v13;
      goto LABEL_3;
    default:
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
LABEL_3:
      swift_bridgeObjectRetain();
      break;
  }
  return countAndFlagsBits;
}

uint64_t _s9IMAP2MIME6HeaderO21__derived_enum_equalsySbAC_ACtFZ_0(long long *a1, long long *a2)
{
  sub_1003BC9AC(a1, (uint64_t)&v67);
  switch(v76)
  {
    case 1:
      int v5 = v67.n128_u8[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 1) {
        goto LABEL_104;
      }
      if (v5)
      {
        if (v5 == 1)
        {
          uint64_t v6 = 0x6E65672D6F747561;
          unint64_t v7 = 0xEE00646574617265;
        }
        else
        {
          uint64_t v6 = 0x7065722D6F747561;
          unint64_t v7 = 0xEC0000006465696CLL;
        }
      }
      else
      {
        unint64_t v7 = 0xE200000000000000;
        uint64_t v6 = 28526;
      }
      uint64_t v39 = 0x6E65672D6F747561;
      unint64_t v40 = 0xEE00646574617265;
      if (v57.n128_u8[0] != 1)
      {
        uint64_t v39 = 0x7065722D6F747561;
        unint64_t v40 = 0xEC0000006465696CLL;
      }
      if (v57.n128_u8[0]) {
        uint64_t v41 = v39;
      }
      else {
        uint64_t v41 = 28526;
      }
      if (v57.n128_u8[0]) {
        unint64_t v42 = v40;
      }
      else {
        unint64_t v42 = 0xE200000000000000;
      }
      if (v6 == v41 && v7 == v42)
      {
        swift_bridgeObjectRelease_n();
        char v24 = 1;
      }
      else
      {
        char v24 = sub_1005E3290();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      return v24 & 1;
    case 2:
      uint64_t v8 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 2) {
        goto LABEL_104;
      }
      goto LABEL_70;
    case 3:
      uint64_t v8 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 3) {
        goto LABEL_70;
      }
      goto LABEL_104;
    case 4:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 4) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 5:
      __n128 v77 = v67;
      *(void *)&long long v78 = v68;
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 5) {
        goto LABEL_104;
      }
      __n128 v54 = v57;
      *(void *)&long long v55 = v58;
      sub_1003B865C(&v77, &v81);
      sub_1003B865C(&v54, v83);
      sub_1003B865C(&v81, v82);
      unint64_t v30 = v82[0].n128_u64[1];
      if (v82[0].n128_u64[1] == 2)
      {
        sub_1003B865C(v83, v80);
        if (v80[0].n128_u64[1] != 2) {
          goto LABEL_104;
        }
      }
      else if (v82[0].n128_u64[1] == 1)
      {
        sub_1003B865C(v83, v80);
        if (v80[0].n128_u64[1] != 1) {
          goto LABEL_104;
        }
      }
      else if (v82[0].n128_u64[1])
      {
        unint64_t v43 = v82[0].n128_u64[0];
        sub_1003B865C(v83, v80);
        if (v80[0].n128_u64[1] < 3 || __PAIR128__(v30, v43) != *(_OWORD *)v80 && (sub_1005E3290() & 1) == 0) {
          goto LABEL_104;
        }
      }
      else
      {
        sub_1003B865C(v83, v80);
        if (v80[0].n128_u64[1]) {
          goto LABEL_104;
        }
      }
      if ((sub_1003AB918(v78, v55) & 1) == 0) {
        goto LABEL_104;
      }
      goto LABEL_103;
    case 6:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 6) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 7:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 7) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 8:
      uint64_t v31 = v67.n128_u8[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 8) {
        goto LABEL_104;
      }
      if (v31 == 5)
      {
        if (v57.n128_u8[0] != 5) {
          goto LABEL_104;
        }
      }
      else if (v57.n128_u8[0] == 5 || (sub_1003BE5CC(v31, v57.n128_u8[0]) & 1) == 0)
      {
        goto LABEL_104;
      }
      goto LABEL_103;
    case 9:
      __n128 v77 = v67;
      long long v78 = v68;
      long long v79 = v69;
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 9)
      {
        __n128 v54 = v57;
        long long v55 = v58;
        long long v56 = v59;
        sub_1003AE650((uint64_t)&v77, (uint64_t)v80);
        sub_1003AE650((uint64_t)&v54, (uint64_t)v82);
        if ((_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v80, (uint64_t)v82) & 1) != 0
          && (sub_1003ABA78(*((uint64_t *)&v79 + 1), *((uint64_t *)&v56 + 1)) & 1) != 0)
        {
          goto LABEL_103;
        }
      }
      goto LABEL_104;
    case 10:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 10) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 11:
      __n128 v9 = v67;
      long long v10 = v68;
      long long v11 = v69;
      uint64_t v12 = v70;
      uint64_t v13 = v71;
      unint64_t v14 = v72;
      uint64_t v52 = v74;
      unint64_t v53 = v73;
      uint64_t v51 = v75;
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 11) {
        goto LABEL_104;
      }
      unint64_t v50 = v14;
      long long v15 = v58;
      unint64_t v17 = *((void *)&v59 + 1);
      unint64_t v16 = v59;
      uint64_t v18 = v60;
      uint64_t v19 = v61;
      unint64_t v48 = v63;
      unint64_t v49 = v62;
      uint64_t v46 = v65;
      uint64_t v47 = v64;
      if (v9.n128_u64[1])
      {
        if (!v57.n128_u64[1]) {
          goto LABEL_104;
        }
        if (*(_OWORD *)&v9 != *(_OWORD *)&v57)
        {
          uint64_t v45 = v61;
          long long v20 = v59;
          uint64_t v21 = v60;
          char v22 = sub_1005E3290();
          uint64_t v19 = v45;
          unint64_t v16 = v20;
          uint64_t v18 = v21;
          unint64_t v17 = *((void *)&v20 + 1);
          if ((v22 & 1) == 0) {
            goto LABEL_104;
          }
        }
      }
      else if (v57.n128_u64[1])
      {
        goto LABEL_104;
      }
      if (v10 == v15) {
        goto LABEL_79;
      }
      unint64_t v34 = v16;
      unint64_t v35 = v17;
      uint64_t v36 = v18;
      uint64_t v37 = v19;
      char v38 = sub_1005E3290();
      uint64_t v19 = v37;
      uint64_t v18 = v36;
      unint64_t v17 = v35;
      unint64_t v16 = v34;
      if (v38)
      {
LABEL_79:
        if ((sub_1003BF7CC(v11, *((unint64_t *)&v11 + 1), v12, v13, v16, v17, v18, v19) & 1) != 0
          && (sub_1003BF7CC(v50, v53, v52, v51, v49, v48, v47, v46) & 1) != 0)
        {
LABEL_103:
          char v24 = 1;
          return v24 & 1;
        }
      }
LABEL_104:
      char v24 = 0;
      return v24 & 1;
    case 12:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 12) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 13:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 13) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 14:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 14) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 15:
      int v23 = v67.n128_u8[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 15) {
        goto LABEL_104;
      }
      char v24 = v23 == v57.n128_u8[0];
      return v24 & 1;
    case 16:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 16) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 17:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 17) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 18:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 == 18) {
        goto LABEL_64;
      }
      goto LABEL_104;
    case 19:
      uint64_t v8 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 19) {
        goto LABEL_104;
      }
LABEL_70:
      char v33 = sub_1003AB6D8(v8, v57.n128_i64[0]);
      goto LABEL_71;
    case 20:
      __n128 v25 = v67;
      long long v26 = v68;
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66 != 20) {
        goto LABEL_104;
      }
      long long v27 = v58;
      if (v25.n128_u64[0] != v57.n128_u64[0] || v25.n128_u64[1] != v57.n128_u64[1])
      {
        char v24 = 0;
        if ((sub_1005E3290() & 1) == 0) {
          return v24 & 1;
        }
      }
      if ((void)v26 == (void)v27 && *((void *)&v26 + 1) == *((void *)&v27 + 1)) {
        goto LABEL_103;
      }
LABEL_68:
      char v33 = sub_1005E3290();
LABEL_71:
      char v24 = v33;
      return v24 & 1;
    default:
      unint64_t v4 = v67.n128_u64[1];
      unint64_t v3 = v67.n128_u64[0];
      sub_1003BC9AC(a2, (uint64_t)&v57);
      if (v66) {
        goto LABEL_104;
      }
LABEL_64:
      if (v3 != v57.n128_u64[0] || v4 != v57.n128_u64[1]) {
        goto LABEL_68;
      }
      goto LABEL_103;
  }
}

uint64_t sub_1003BC9AC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[5];
  *(unsigned char *)(a2 + 96) = *((unsigned char *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

void *sub_1003BC9DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = a2;
  int64_t v2 = *(void *)(a1 + 16);
  long long v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_1003F08A4(0, v2, 0);
    long long v3 = _swiftEmptyArrayStorage;
    long long v5 = (uint64_t *)(a1 + 80);
    do
    {
      long long v6 = (unsigned __int8 *)*(v5 - 6);
      char v7 = *((unsigned char *)v5 - 32);
      uint64_t v8 = (unsigned char *)*(v5 - 3);
      int v9 = *((unsigned __int8 *)v5 - 8);
      uint64_t v10 = *v5;
      unint64_t v40 = (unsigned __int8 *)*(v5 - 2);
      if ((v7 & 1) == 0)
      {
        switch((char)v6)
        {
          case 1:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 1;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
          case 2:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 2;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
          case 3:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 3;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
          case 4:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 4;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
          case 5:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 5;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
          default:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            if (!v9) {
              goto LABEL_49;
            }
            goto LABEL_28;
        }
      }
      uint64_t v39 = v8;
      long long v11 = (unsigned __int8 *)*(v5 - 5);
      uint64_t v46 = 0;
      unint64_t v47 = 0xE000000000000000;
      if (v6) {
        Swift::Int v12 = v11 - v6;
      }
      else {
        Swift::Int v12 = 0;
      }
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_1005E1D10(v12);
      uint64_t v13 = v46;
      uint64_t v14 = v47;
      if (v6)
      {
        while (!v11 || v6 != v11)
        {
LABEL_23:
          int v15 = *v6++;
          if ((v15 - 1) <= 0x7D)
          {
            unint64_t v43 = v13;
            unint64_t v44 = v14;
            sub_1005E1D60();
            uint64_t v13 = v43;
            uint64_t v14 = v44;
          }
        }
      }
      else if (v11)
      {
        long long v6 = 0;
        goto LABEL_23;
      }
      uint64_t v8 = v39;
      if (v9)
      {
LABEL_28:
        if (*(void *)(v10 + 16) == 1 && (*(_WORD *)(v10 + 48) & 0x8100) == 0x8000)
        {
          uint64_t v16 = *(void *)(v10 + 32);
          uint64_t v17 = *(void *)(v10 + 40);
          if (v16) {
            uint64_t v18 = v17 - v16;
          }
          else {
            uint64_t v18 = 0;
          }
          if (v18 < 0)
          {
            __break(1u);
LABEL_60:
            __break(1u);
          }
          unint64_t v40 = v13;
          uint64_t v19 = sub_1003E8DCC(0, v18, v16, v17);
          if (v21) {
            uint64_t v22 = v21 + v20;
          }
          else {
            uint64_t v22 = 0;
          }
          if (v21) {
            uint64_t v23 = v21 + v19;
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v43 = 0;
          unint64_t v44 = 0xE000000000000000;
          uint64_t v24 = v22 - v23;
          if (v23) {
            Swift::Int v25 = v22 - v23;
          }
          else {
            Swift::Int v25 = 0;
          }
          sub_1005E1D10(v25);
          char v42 = 0;
          if (v23)
          {
            if (v24 < 0) {
              goto LABEL_60;
            }
            if (v24 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
            {
              uint64_t v46 = (unsigned __int8 *)swift_slowAlloc();
              unint64_t v47 = v22 - v23;
              uint64_t v48 = 0;
              uint64_t v26 = v38;
              sub_1003D8D10((int64_t)&v46, (int64_t *)&v43, v23, v22, v41, &v42);
              if (v26)
              {
                swift_slowDealloc();
                goto LABEL_63;
              }
              uint64_t v38 = 0;
              swift_slowDealloc();
LABEL_57:
              Swift::String v28 = v40;
              swift_release();
              swift_bridgeObjectRelease_n();
              int64_t v29 = (int64_t)v43;
              unint64_t v30 = v44;
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v24 = 0;
          }
          __chkstk_darwin();
          uint64_t v46 = (unsigned __int8 *)&v37 - v34;
          unint64_t v47 = v24;
          uint64_t v48 = 0;
          uint64_t v35 = v38;
          sub_1003D8D10((int64_t)&v46, (int64_t *)&v43, v23, v22, v41, &v42);
          if (v35)
          {
            swift_willThrow();
LABEL_63:
            swift_release();
            __break(1u);
            JUMPOUT(0x1003BCE94);
          }
          uint64_t v38 = 0;
          goto LABEL_57;
        }
      }
LABEL_49:
      uint64_t v46 = 0;
      unint64_t v47 = 0xE000000000000000;
      long long v27 = v13;
      sub_1003DBAF4((uint64_t)v8, (uint64_t)v40, v9, v10, v8, v40, v9, v10, v41, (uint64_t)&v46);
      swift_bridgeObjectRelease_n();
      Swift::String v28 = v27;
      swift_release();
      int64_t v29 = (int64_t)v46;
      unint64_t v30 = v47;
LABEL_50:
      uint64_t v45 = v3;
      unint64_t v32 = v3[2];
      unint64_t v31 = v3[3];
      if (v32 >= v31 >> 1)
      {
        sub_1003F08A4((char *)(v31 > 1), v32 + 1, 1);
        long long v3 = v45;
      }
      _OWORD v3[2] = v32 + 1;
      char v33 = &v3[4 * v32];
      v33[4] = v28;
      v33[5] = v14;
      v33[6] = v29;
      unsigned char v33[7] = v30;
      v5 += 7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_1003BCEAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = a2;
  int64_t v2 = *(void *)(a1 + 16);
  long long v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_1003F08C4(0, v2, 0);
    long long v3 = _swiftEmptyArrayStorage;
    long long v5 = (uint64_t *)(a1 + 80);
    do
    {
      long long v6 = (unsigned __int8 *)*(v5 - 6);
      char v7 = *((unsigned char *)v5 - 32);
      uint64_t v8 = (unsigned char *)*(v5 - 3);
      int v9 = *((unsigned __int8 *)v5 - 8);
      uint64_t v10 = *v5;
      unint64_t v40 = (unsigned __int8 *)*(v5 - 2);
      if ((v7 & 1) == 0)
      {
        switch((char)v6)
        {
          case 1:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xEB00000000657079;
            uint64_t v14 = 0x742D737365636361;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 2:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE800000000000000;
            uint64_t v14 = 0x797261646E756F62;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 3:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE700000000000000;
            uint64_t v14 = 0x74657372616863;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 4:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE500000000000000;
            uint64_t v14 = 0x70736C6564;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 5:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE600000000000000;
            uint64_t v14 = 0x7265626D756ELL;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 6:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE500000000000000;
            uint64_t v14 = 0x6C61746F74;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 7:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE200000000000000;
            uint64_t v14 = 25705;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 8:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xEB000000006E6F69;
            uint64_t v14 = 0x7469736F70736964;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 9:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE800000000000000;
            uint64_t v14 = 0x6C6F636F746F7270;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 10:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE600000000000000;
            uint64_t v14 = 0x636C6167696DLL;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 11:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE700000000000000;
            uint64_t v14 = 0x746E656D6D6F63;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          case 12:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE600000000000000;
            uint64_t v14 = 0x74616D726F66;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
          default:
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v13 = (unsigned __int8 *)0xE400000000000000;
            uint64_t v14 = 1701667182;
            if (!v9) {
              goto LABEL_63;
            }
            goto LABEL_42;
        }
      }
      uint64_t v39 = v8;
      long long v11 = (unsigned __int8 *)*(v5 - 5);
      uint64_t v46 = 0;
      unint64_t v47 = 0xE000000000000000;
      if (v6) {
        Swift::Int v12 = v11 - v6;
      }
      else {
        Swift::Int v12 = 0;
      }
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_1005E1D10(v12);
      uint64_t v14 = (uint64_t)v46;
      uint64_t v13 = (unsigned __int8 *)v47;
      if (v6)
      {
        while (!v11 || v6 != v11)
        {
LABEL_37:
          int v15 = *v6++;
          if ((v15 - 1) <= 0x7D)
          {
            int64_t v43 = v14;
            unint64_t v44 = (unint64_t)v13;
            sub_1005E1D60();
            uint64_t v14 = v43;
            uint64_t v13 = (unsigned __int8 *)v44;
          }
        }
      }
      else if (v11)
      {
        long long v6 = 0;
        goto LABEL_37;
      }
      uint64_t v8 = v39;
      if (v9)
      {
LABEL_42:
        if (*(void *)(v10 + 16) == 1 && (*(_WORD *)(v10 + 48) & 0x8100) == 0x8000)
        {
          uint64_t v16 = *(void *)(v10 + 32);
          uint64_t v17 = *(void *)(v10 + 40);
          if (v16) {
            uint64_t v18 = v17 - v16;
          }
          else {
            uint64_t v18 = 0;
          }
          if (v18 < 0)
          {
            __break(1u);
LABEL_74:
            __break(1u);
          }
          unint64_t v40 = v13;
          uint64_t v19 = sub_1003E8DCC(0, v18, v16, v17);
          if (v21) {
            uint64_t v22 = v21 + v20;
          }
          else {
            uint64_t v22 = 0;
          }
          if (v21) {
            uint64_t v23 = v21 + v19;
          }
          else {
            uint64_t v23 = 0;
          }
          int64_t v43 = 0;
          unint64_t v44 = 0xE000000000000000;
          uint64_t v24 = v22 - v23;
          if (v23) {
            Swift::Int v25 = v22 - v23;
          }
          else {
            Swift::Int v25 = 0;
          }
          sub_1005E1D10(v25);
          char v42 = 0;
          if (v23)
          {
            if (v24 < 0) {
              goto LABEL_74;
            }
            if (v24 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
            {
              uint64_t v46 = (char *)swift_slowAlloc();
              unint64_t v47 = v22 - v23;
              uint64_t v48 = 0;
              uint64_t v26 = v38;
              sub_1003D8D10((int64_t)&v46, &v43, v23, v22, v41, &v42);
              if (v26)
              {
                swift_slowDealloc();
                goto LABEL_77;
              }
              uint64_t v38 = 0;
              swift_slowDealloc();
LABEL_71:
              Swift::String v28 = v40;
              swift_release();
              swift_bridgeObjectRelease_n();
              int64_t v29 = v43;
              unint64_t v30 = v44;
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v24 = 0;
          }
          __chkstk_darwin();
          uint64_t v46 = (char *)&v37 - v34;
          unint64_t v47 = v24;
          uint64_t v48 = 0;
          uint64_t v35 = v38;
          sub_1003D8D10((int64_t)&v46, &v43, v23, v22, v41, &v42);
          if (v35)
          {
            swift_willThrow();
LABEL_77:
            swift_release();
            __break(1u);
            JUMPOUT(0x1003BD4E4);
          }
          uint64_t v38 = 0;
          goto LABEL_71;
        }
      }
LABEL_63:
      uint64_t v46 = 0;
      unint64_t v47 = 0xE000000000000000;
      long long v27 = v13;
      sub_1003DBAF4((uint64_t)v8, (uint64_t)v40, v9, v10, v8, v40, v9, v10, v41, (uint64_t)&v46);
      swift_bridgeObjectRelease_n();
      Swift::String v28 = v27;
      swift_release();
      int64_t v29 = (int64_t)v46;
      unint64_t v30 = v47;
LABEL_64:
      uint64_t v45 = v3;
      unint64_t v32 = v3[2];
      unint64_t v31 = v3[3];
      if (v32 >= v31 >> 1)
      {
        sub_1003F08C4((char *)(v31 > 1), v32 + 1, 1);
        long long v3 = v45;
      }
      _OWORD v3[2] = v32 + 1;
      char v33 = &v3[4 * v32];
      v33[4] = v14;
      v33[5] = v28;
      v33[6] = v29;
      unsigned char v33[7] = v30;
      v5 += 7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1003BD518(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  switch(a13)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_6;
    case 5:
      sub_1003AB41C(result, a2);
      goto LABEL_6;
    case 9:
      sub_1003AE6AC(result, a2, a3, a4, a5);
      goto LABEL_6;
    case 11:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 20:
      swift_bridgeObjectRetain();
LABEL_6:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for Header(uint64_t a1)
{
  return sub_1003BD694(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
}

uint64_t sub_1003BD694(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  switch(a13)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_6;
    case 5:
      sub_1003AB468(result, a2);
      goto LABEL_6;
    case 9:
      sub_1003AE7CC(result, a2, a3, a4, a5);
      goto LABEL_6;
    case 11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 20:
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  char v16 = *(unsigned char *)(a2 + 96);
  sub_1003BD518(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(unsigned char *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = *(void *)(a2 + 88);
  char v28 = *(unsigned char *)(a2 + 96);
  sub_1003BD518(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  char v23 = *(unsigned char *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(unsigned char *)(a1 + 96) = v28;
  sub_1003BD694(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23);
  return a1;
}

__n128 initializeWithTake for Header(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Header(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 96);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 96);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 96) = v3;
  sub_1003BD694(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Header(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEC && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 236);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 0x14) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEB)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 236;
    if (a3 >= 0xEC) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEC) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 96) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003BDAFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_1003BDB04(uint64_t result, char a2)
{
  *(unsigned char *)(result + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Header()
{
  return &type metadata for Header;
}

uint64_t sub_1003BDB1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1003B52C0(a1, (uint64_t)&v86);
  char v6 = v88;
  switch((unint64_t)v88 >> 59)
  {
    case 1uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      uint64_t v21 = sub_1005E1CB0();
      char v23 = v22;
      swift_bridgeObjectRelease();
      v24._rawValue = &off_1006EB130;
      v89._uint64_t countAndFlagsBits = v21;
      v89._object = v23;
      unint64_t v8 = sub_1005E3050(v24, v89);
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v10 = 0;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      BOOL v25 = v8 >= 3;
      if (v8 >= 3) {
        unint64_t v8 = 0;
      }
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      if (v25) {
        char v18 = -1;
      }
      else {
        char v18 = 1;
      }
      break;
    case 2uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      uint64_t v26 = sub_1003E8998(v86.n128_i64[0], v86.n128_i64[1]);
      uint64_t v28 = v27;
      swift_retain();
      sub_1003D98E0(v26, v28, a2);
      unint64_t v8 = sub_1003B3414();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v10 = 0;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 2;
      break;
    case 3uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      uint64_t v29 = sub_1003E8998(v86.n128_i64[0], v86.n128_i64[1]);
      uint64_t v31 = v30;
      swift_retain();
      sub_1003D98E0(v29, v31, a2);
      unint64_t v8 = sub_1003B3414();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v10 = 0;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 3;
      break;
    case 4uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v32;
      unint64_t v10 = v33;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 4;
      break;
    case 5uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      __n128 v79 = v86;
      long long v80 = v87;
      sub_1003B8310(&v79, &v73);
      sub_1003B8310(&v73, &v77);
      if (v78)
      {
        unint64_t v8 = sub_1003BB304((unsigned __int8 *)v77.n128_u64[0], (unsigned __int8 *)v77.n128_u64[1]);
        unint64_t v10 = v34;
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v10 = v77.n128_u8[0];
      }
      uint64_t v72 = *((void *)&v80 + 1);
      swift_retain();
      long long v12 = sub_1003BC9DC(v72, a2);
      swift_release_n();
      uint64_t result = sub_1003BE46C(a1);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 5;
      break;
    case 6uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v35;
      unint64_t v10 = v36;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 6;
      break;
    case 7uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v37;
      unint64_t v10 = v38;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 7;
      break;
    case 8uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      uint64_t v39 = sub_1003E8998(v86.n128_i64[0], v86.n128_i64[1]);
      LOBYTE(v8) = sub_1003B0A74(v39, v40);
      uint64_t result = swift_release();
      unint64_t v10 = 0;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      unint64_t v8 = v8;
      long long v20 = 0uLL;
      char v18 = 8;
      break;
    case 9uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      __n128 v79 = v86;
      long long v80 = v87;
      *(_OWORD *)__n128 v81 = v88;
      sub_10039DF8C((uint64_t)&v79, (uint64_t)&v77);
      sub_1003CEEDC((uint64_t)&v77, (uint64_t)&v73);
      unint64_t v10 = v73.n128_u64[1];
      unint64_t v8 = v73.n128_u64[0];
      long long v12 = v74;
      uint64_t v13 = v75;
      uint64_t v14 = v76;
      uint64_t v41 = *(void *)&v81[8];
      swift_retain();
      char v42 = sub_1003BCEAC(v41, a2);
      swift_release_n();
      uint64_t result = sub_1003BE46C(a1);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v20 = 0uLL;
      long long v19 = (unint64_t)v42;
      char v18 = 9;
      break;
    case 0xAuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      if (v86.n128_u64[0]) {
        uint64_t v43 = v86.n128_u64[1] - v86.n128_u64[0];
      }
      else {
        uint64_t v43 = 0;
      }
      if (v43 < 0)
      {
        __break(1u);
        JUMPOUT(0x1003BE418);
      }
      uint64_t v44 = sub_1003E89B0(0, v43, v86.n128_i64[0], v86.n128_i64[1]);
      sub_1003E9608(v44, v45, v46, v47);
      unint64_t v8 = v48;
      unint64_t v10 = v49;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 10;
      break;
    case 0xBuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003B32D8(v86.n128_i64[0], v86.n128_i64[1], a2, (uint64_t)&v77);
      uint64_t result = sub_10001FDF0((uint64_t)&v77, (uint64_t)&v79, &qword_100713D10);
      uint64_t v13 = *((void *)&v80 + 1);
      if (!*((void *)&v80 + 1))
      {
        unint64_t v8 = 0;
        unint64_t v10 = 0;
        long long v12 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        long long v19 = 0uLL;
        goto LABEL_41;
      }
      unint64_t v10 = v79.n128_u64[1];
      unint64_t v8 = v79.n128_u64[0];
      long long v12 = (void *)v80;
      uint64_t v14 = *(void *)v81;
      long long v19 = *(_OWORD *)&v81[8];
      uint64_t v15 = v82;
      long long v20 = v83;
      char v18 = 11;
      uint64_t v16 = v84;
      uint64_t v17 = v85;
      break;
    case 0xCuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      unint64_t v8 = sub_1003C9AC8(v86.n128_i64[0], v86.n128_i64[1]);
      unint64_t v10 = v50;
      uint64_t result = swift_release();
      long long v19 = 0uLL;
      if (!v10)
      {
        unint64_t v8 = 0;
        goto LABEL_40;
      }
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v20 = 0uLL;
      char v18 = 12;
      break;
    case 0xDuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v51;
      unint64_t v10 = v52;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 13;
      break;
    case 0xEuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v53;
      unint64_t v10 = v54;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 14;
      break;
    case 0xFuLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003BF188(v86.n128_i64[0], v86.n128_i64[1]);
      LOWORD(v8) = v55;
      uint64_t result = swift_release();
      long long v19 = 0uLL;
      if ((v8 & 0x100) != 0)
      {
        unint64_t v8 = 0;
        unint64_t v10 = 0;
LABEL_40:
        long long v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_41:
        long long v20 = 0uLL;
        char v18 = -1;
      }
      else
      {
        unint64_t v10 = 0;
        long long v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        unint64_t v8 = v8;
        long long v20 = 0uLL;
        char v18 = 15;
      }
      break;
    case 0x10uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v56;
      unint64_t v10 = v57;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 16;
      break;
    case 0x11uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v58;
      unint64_t v10 = v59;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 17;
      break;
    case 0x12uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      uint64_t v60 = sub_1003E8998(v86.n128_i64[0], v86.n128_i64[1]);
      uint64_t result = sub_1003D98E0(v60, v61, a2);
      unint64_t v8 = result;
      unint64_t v10 = v62;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 18;
      break;
    case 0x13uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      uint64_t v63 = sub_1003E8998(v86.n128_i64[0], v86.n128_i64[1]);
      uint64_t v65 = v64;
      swift_retain();
      sub_1003D98E0(v63, v65, a2);
      unint64_t v8 = sub_1003B3414();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v10 = 0;
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 19;
      break;
    case 0x14uLL:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      char v66 = v6 & 1;
      uint64_t v68 = *((void *)&v87 + 1);
      uint64_t v67 = v87;
      unint64_t v8 = sub_1003BB304((unsigned __int8 *)v86.n128_u64[0], (unsigned __int8 *)v86.n128_u64[1]);
      unint64_t v10 = v69;
      sub_1003E9BE0(v67, v68, v66);
      long long v12 = v70;
      uint64_t v13 = v71;
      uint64_t result = swift_release();
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      char v18 = 20;
      break;
    default:
      *(void *)&long long v88 = v88 & 0x7FFFFFFFFFFFFFFLL;
      sub_1003E9BE0(v86.n128_i64[0], v86.n128_i64[1], v87 & 1);
      unint64_t v8 = v7;
      unint64_t v10 = v9;
      uint64_t result = swift_release();
      long long v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 0;
      long long v19 = 0uLL;
      long long v20 = 0uLL;
      break;
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v14;
  *(_OWORD *)(a3 + 40) = v19;
  *(void *)(a3 + 56) = v15;
  *(_OWORD *)(a3 + 64) = v20;
  *(void *)(a3 + 80) = v16;
  *(void *)(a3 + 88) = v17;
  *(unsigned char *)(a3 + 96) = v18;
  return result;
}

uint64_t sub_1003BE46C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003BE4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 59 == 5 || a5 >> 59 == 9) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003BE4C8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1003BE520()
{
  unint64_t result = qword_100713D18;
  if (!qword_100713D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713D18);
  }
  return result;
}

uint64_t sub_1003BE574(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003BE5D0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6E65672D6F747561;
    }
    else {
      uint64_t v3 = 0x7065722D6F747561;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEE00646574617265;
    }
    else {
      unint64_t v4 = 0xEC0000006465696CLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6E65672D6F747561;
      }
      else {
        uint64_t v6 = 0x7065722D6F747561;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEE00646574617265;
      }
      else {
        unint64_t v7 = 0xEC0000006465696CLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE200000000000000;
    uint64_t v3 = 28526;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE200000000000000;
  if (v3 != 28526)
  {
LABEL_21:
    char v8 = sub_1005E3290();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1003BE700(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x656D686361747461;
    }
    else {
      uint64_t v3 = 0x7461642D6D726F66;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA0000000000746ELL;
    }
    else {
      unint64_t v4 = 0xE900000000000061;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x656D686361747461;
      }
      else {
        uint64_t v6 = 0x7461642D6D726F66;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEA0000000000746ELL;
      }
      else {
        unint64_t v7 = 0xE900000000000061;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x656E696C6E69;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x656E696C6E69)
  {
LABEL_21:
    char v8 = sub_1005E3290();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1003BE824(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656D616E656C6966;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x656D616E656C6966;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6E6F697461657263;
      unint64_t v3 = 0xED0000657461642DLL;
      break;
    case 2:
      unint64_t v3 = 0x80000001005E93B0;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v5 = 0x7461642D64616572;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1702521203;
      break;
    case 5:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701667182;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xED0000657461642DLL;
      if (v5 == 0x6E6F697461657263) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0x80000001005E93B0;
      if (v5 != 0xD000000000000011) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE900000000000065;
      if (v5 != 0x7461642D64616572) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1702521203;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701667182) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1005E3290();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1003BEA38(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 1953063479;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1953063479;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 1953063480;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x7972616E6962;
      break;
    case 3:
      unint64_t v3 = 0x80000001005E93F0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x343665736162;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 1953063480) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x7972616E6962) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0x80000001005E93F0;
      unint64_t v2 = 0xD000000000000010;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x343665736162) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_1005E3290();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t Header.AutoSubmitted.rawValue.getter(char a1)
{
  if (!a1) {
    return 28526;
  }
  if (a1 == 1) {
    return 0x6E65672D6F747561;
  }
  return 0x7065722D6F747561;
}

uint64_t sub_1003BEC30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003BE5D0(*a1, *a2);
}

uint64_t sub_1003BEC3C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s9IMAP2MIME6HeaderO13AutoSubmittedO8rawValueAESgSS_tcfC_0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_1003BEC6C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 0xEE00646574617265;
  uint64_t v5 = 0x6E65672D6F747561;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7065722D6F747561;
    unint64_t v4 = 0xEC0000006465696CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 28526;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

Swift::Int sub_1003BECD4()
{
  return sub_1005E3470();
}

uint64_t sub_1003BED80()
{
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003BEE18()
{
  return sub_1005E3470();
}

uint64_t _s9IMAP2MIME6HeaderO13AutoSubmittedO8rawValueAESgSS_tcfC_0(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1006EB130;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

unint64_t sub_1003BEF10()
{
  unint64_t result = qword_100713D20;
  if (!qword_100713D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713D20);
  }
  return result;
}

unsigned char *_s13AutoSubmittedOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003BF030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Header.AutoSubmitted()
{
  return &type metadata for Header.AutoSubmitted;
}

uint64_t Header.Priority.init(_:)(unint64_t a1)
{
  int v1 = a1;
  int v3 = a1 > 0xFF || a1 - 6 < 0xFFFFFFFB;
  if (v3) {
    int v1 = 0;
  }
  return v1 | (v3 << 8);
}

uint64_t Header.Priority.description.getter()
{
  return sub_1005E3230();
}

uint64_t sub_1003BF0D4()
{
  return sub_1005E3230();
}

uint64_t Int.init(_:)(uint64_t result)
{
  return result;
}

unint64_t sub_1003BF124()
{
  unint64_t result = qword_100713D28;
  if (!qword_100713D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713D28);
  }
  return result;
}

ValueMetadata *type metadata accessor for Header.Priority()
{
  return &type metadata for Header.Priority;
}

void sub_1003BF188(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v6 = sub_1003E89B0(0, v3, a1, a2);
  uint64_t v7 = v4;
  sub_1003CA70C();
  if ((v5 & 1) == 0 && v6 != v7 && v6 >= v7) {
    goto LABEL_11;
  }
}

ValueMetadata *type metadata accessor for IDNA()
{
  return &type metadata for IDNA;
}

uint64_t sub_1003BF244@<X0>(UIDNA **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if ((a3 & 0x1000000000000000) != 0)
  {
    Swift::Int v9 = sub_1005E1E80();
    if (v9 < 0) {
      __break(1u);
    }
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    Swift::Int v9 = HIBYTE(a3) & 0xF;
  }
  else
  {
    Swift::Int v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 > 1024 && !swift_stdlib_isStackAllocationSafe())
  {
    uint64_t v14 = (char *)swift_slowAlloc();
    sub_1003BF414(v14, v9, a1, &v18);
    if (!v4)
    {
      uint64_t result = swift_slowDealloc();
      uint64_t v12 = v18;
      uint64_t v13 = v19;
      goto LABEL_13;
    }
    swift_slowDealloc();
    goto LABEL_12;
  }
  __chkstk_darwin();
  uint64_t result = sub_1003BF414((char *)&v17[-1] - v10, v9, a1, v17);
  if (v4)
  {
    swift_willThrow();
LABEL_12:
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1005E1F40();
    uint64_t v13 = v15;
    uint64_t result = swift_errorRelease();
    goto LABEL_13;
  }
  uint64_t v12 = v17[0];
  uint64_t v13 = v17[1];
LABEL_13:
  *a4 = v12;
  a4[1] = v13;
  return result;
}

uint64_t sub_1003BF414@<X0>(char *a1@<X0>, uint64_t a2@<X1>, UIDNA **a3@<X4>, uint64_t *a4@<X8>)
{
  if (!a1) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  sub_1005E2C90();
  if (v9) {
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *a3;
  uint64_t result = sub_1003BF628(a1, a2, 0, 0, 1, v10);
  if (v4) {
    return result;
  }
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v12 = (int)result;
  if ((int)result >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
  {
    uint64_t v17 = (char *)swift_slowAlloc();
    if ((sub_1003BF628(a1, a2, v17, v12, 0, v10) & 0x80000000) == 0)
    {
      uint64_t v14 = sub_1005E1D70();
      uint64_t v16 = v18;
      uint64_t result = swift_slowDealloc();
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  __chkstk_darwin();
  if ((sub_1003BF628(a1, a2, (char *)&v19 - v13, v12, 0, v10) & 0x80000000) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t result = sub_1005E1D70();
  uint64_t v14 = result;
  uint64_t v16 = v15;
LABEL_11:
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1003BF628(char *name, uint64_t length, char *dest, uint64_t capacity, char a5, UIDNA *idna)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  pInfo.size = 16;
  *(void *)&pInfo.isTransitionalDifferent = 0;
  *(void *)&pInfo.reservedI2 = 0;
  if (length < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (length > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((a5 & 1) == 0)
  {
    if (capacity >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (capacity <= 0x7FFFFFFF) {
        goto LABEL_7;
      }
LABEL_16:
      __break(1u);
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  LODWORD(capacity) = 0;
  dest = 0;
LABEL_7:
  uint64_t v9 = uidna_nameToASCII_UTF8(idna, name, length, dest, capacity, &pInfo, &pErrorCode);
  UErrorCode v10 = pErrorCode;
  if (((a5 & 1) == 0 || pErrorCode != U_BUFFER_OVERFLOW_ERROR) && (pErrorCode > U_ZERO_ERROR || pInfo.errors))
  {
    sub_1003BF768();
    swift_allocError();
    *uint64_t v11 = v10;
    swift_willThrow();
  }
  return v9;
}

unint64_t sub_1003BF768()
{
  unint64_t result = qword_100713D30;
  if (!qword_100713D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713D30);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIDNAError()
{
  return &type metadata for UIDNAError;
}

uint64_t sub_1003BF7CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 == a7 && a4 == a8 && a1 >> 16 == a5 >> 16 && a2 >> 16 == a6 >> 16) {
    return 1;
  }
  else {
    return sub_1005E3220() & 1;
  }
}

uint64_t IndexableMessageInfo.cc.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IndexableMessageInfo.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1000079E4(v1 + *(int *)(v3 + 24), a1, &qword_100713D38);
}

uint64_t type metadata accessor for IndexableMessageInfo(uint64_t a1)
{
  return sub_10003B314(a1, (uint64_t *)&unk_100713DA0);
}

uint64_t IndexableMessageInfo.date.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_10036C7E8(a1, v1 + *(int *)(v3 + 24), &qword_100713D38);
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.date.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_1000079E4(v1 + *(int *)(v3 + 28), a1, &qword_100713D10);
}

uint64_t IndexableMessageInfo.from.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexableMessageInfo(0);
  return sub_10036C7E8(a1, v1 + *(int *)(v3 + 28), &qword_100713D10);
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.from.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.messageID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IndexableMessageInfo.messageID.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.messageID.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.subject.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IndexableMessageInfo.subject.setter(uint64_t a1, uint64_t a2)
{
  char v5 = (void *)(v2 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *char v5 = a1;
  v5[1] = a2;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.subject.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.to.getter()
{
  type metadata accessor for IndexableMessageInfo(0);
  return swift_bridgeObjectRetain();
}

uint64_t IndexableMessageInfo.to.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 40);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.to.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.priority.getter()
{
  uint64_t v1 = type metadata accessor for IndexableMessageInfo(0);
  return *(unsigned __int8 *)(v0 + *(int *)(v1 + 44)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 44) + 1) << 8);
}

uint64_t IndexableMessageInfo.priority.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(0);
  uint64_t v4 = (unsigned char *)(v1 + *(int *)(result + 44));
  *uint64_t v4 = a1;
  v4[1] = HIBYTE(a1) & 1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.priority.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.hasDistributionListInTo.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 48));
}

uint64_t IndexableMessageInfo.hasDistributionListInTo.setter(char a1)
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.hasDistributionListInTo.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.hasDistributionListInCC.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 52));
}

uint64_t IndexableMessageInfo.hasDistributionListInCC.setter(char a1)
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.hasDistributionListInCC.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.isAutoReplied.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 56));
}

uint64_t IndexableMessageInfo.isAutoReplied.setter(char a1)
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.isAutoReplied.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.content.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
  uint64_t v2 = *(void *)v1;
  sub_1003BFF48(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t sub_1003BFF48(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return MailboxPriorityInfo.mailboxPriorityOrder.getter();
  }
  return result;
}

uint64_t IndexableMessageInfo.content.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
  uint64_t result = sub_1003BFFB4(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3;
  return result;
}

uint64_t sub_1003BFFB4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10024EEEC();
  }
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.content.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.attachments.getter()
{
  type metadata accessor for IndexableMessageInfo(0);
  return swift_bridgeObjectRetain();
}

uint64_t IndexableMessageInfo.attachments.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 64);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

Swift::UInt32 (__swiftcall *IndexableMessageInfo.attachments.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t IndexableMessageInfo.init(bcc:cc:date:from:messageID:subject:to:priority:hasDistributionListInTo:hasDistributionListInCC:isAutoReplied:content:attachments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v21 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v22 = (uint64_t)a9 + v21[6];
  uint64_t v23 = sub_1005E0970();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  Swift::OpaquePointer v24 = (_OWORD *)((char *)a9 + v21[7]);
  v24[4] = 0u;
  v24[5] = 0u;
  void v24[2] = 0u;
  v24[3] = 0u;
  *Swift::OpaquePointer v24 = 0u;
  v24[1] = 0u;
  BOOL v25 = (void *)((char *)a9 + v21[8]);
  *BOOL v25 = 0;
  v25[1] = 0;
  uint64_t v26 = (void *)((char *)a9 + v21[9]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (char *)a9 + v21[11];
  *(_WORD *)uint64_t v27 = 256;
  uint64_t v28 = (char *)a9 + v21[15];
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = 0;
  v28[16] = -1;
  *a9 = a1;
  a9[1] = a2;
  sub_10036C7E8(a3, v22, &qword_100713D38);
  sub_10036C7E8(a4, (uint64_t)v24, &qword_100713D10);
  swift_bridgeObjectRelease();
  *BOOL v25 = a5;
  v25[1] = a6;
  swift_bridgeObjectRelease();
  *uint64_t v26 = a7;
  v26[1] = a8;
  *(void *)((char *)a9 + v21[10]) = a10;
  *uint64_t v27 = a11;
  v27[1] = a12 & 1;
  *((unsigned char *)a9 + v21[12]) = a13;
  *((unsigned char *)a9 + v21[13]) = a14;
  *((unsigned char *)a9 + v21[14]) = a15;
  uint64_t result = sub_1003BFFB4(*(void *)v28, *((void *)v28 + 1), v28[16]);
  *(void *)uint64_t v28 = a16;
  *((void *)v28 + 1) = a17;
  v28[16] = a18;
  *(void *)((char *)a9 + v21[16]) = a19;
  return result;
}

uint64_t IndexableMessageInfo.Content.data.getter()
{
  uint64_t v0 = sub_1005E1C90();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E1C70();
  uint64_t v4 = sub_1005E1C10();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t static IndexableMessageInfo.Content.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_1003C29FC(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t sub_1003C03D8(uint64_t a1, uint64_t a2)
{
  return sub_1003C29FC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int IndexableMessageInfo.Content.byteCount.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    return sub_1005E1E80();
  }
  if ((a2 & 0x2000000000000000) != 0) {
    return HIBYTE(a2) & 0xF;
  }
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t static IndexableMessageInfo.Attachment.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1003AE650(a1, (uint64_t)v8);
  sub_1003AE650(a2, (uint64_t)v7);
  if (_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v7))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a2 + 48);
    if (v4)
    {
      if (v5 && (*(void *)(a1 + 40) == *(void *)(a2 + 40) && v4 == v5 || (sub_1005E3290() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v5)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1003C04A4(uint64_t a1, uint64_t a2)
{
  sub_1003AE650(a1, (uint64_t)v9);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  sub_1003AE650(a2, (uint64_t)v10);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (_s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v10))
  {
    if (v4)
    {
      if (v6 && (v5 == v7 && v4 == v6 || (sub_1005E3290() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t IndexableMessageInfo.init(message:maximumTextCount:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  sub_10000566C(&qword_100713D40);
  __chkstk_darwin();
  char v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  UErrorCode v10 = (char *)&v30 - v9;
  uint64_t v11 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v32 = *((void *)v11 - 1);
  __chkstk_darwin();
  uint64_t v31 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v30 = (uint64_t)&v30 - v13;
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = (char *)&v30 + *(int *)(v14 + 24) - v15;
  uint64_t v18 = sub_1005E0970();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  unint64_t v33 = v17;
  v19(v17, 1, 1, v18);
  long long v20 = &v16[v11[7]];
  *((_OWORD *)v20 + 4) = 0u;
  *((_OWORD *)v20 + 5) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *(_OWORD *)long long v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  uint64_t v21 = &v16[v11[8]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v22 = &v16[v11[9]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  unint64_t v34 = v22;
  *(_WORD *)&v16[v11[11]] = 256;
  uint64_t v23 = &v16[v11[15]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  v23[16] = -1;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  sub_1003CFF28(a1, (uint64_t (*)(void))sub_1003C3330, (uint64_t)v36, (uint64_t)v10);
  uint64_t v24 = v32;
  sub_1003C34D8(a1, type metadata accessor for Message);
  swift_release();
  sub_10001FDF0((uint64_t)v10, (uint64_t)v8, &qword_100713D40);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v8, 1, v11) == 1)
  {
    sub_100007A48((uint64_t)v8, &qword_100713D40);
    sub_100007A48((uint64_t)v33, &qword_100713D38);
    sub_1003C33AC(*(void *)v20, *((void *)v20 + 1), *((void *)v20 + 2), *((void *)v20 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003BFFB4(*(void *)v23, *((void *)v23 + 1), v23[16]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v24 + 56))(v35, 1, 1, v11);
  }
  else
  {
    uint64_t v26 = v30;
    sub_1003C3410((uint64_t)v8, v30);
    uint64_t v27 = v26;
    uint64_t v28 = v31;
    sub_1003C3410(v27, v31);
    sub_100007A48((uint64_t)v33, &qword_100713D38);
    sub_1003C33AC(*(void *)v20, *((void *)v20 + 1), *((void *)v20 + 2), *((void *)v20 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003BFFB4(*(void *)v23, *((void *)v23 + 1), v23[16]);
    sub_1003C3410(v28, (uint64_t)v16);
    uint64_t v29 = v35;
    sub_1003C3474((uint64_t)v16, v35);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v24 + 56))(v29, 0, 1, v11);
    return sub_1003C34D8((uint64_t)v16, type metadata accessor for IndexableMessageInfo);
  }
}

uint64_t sub_1003C0958@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v84 = a5;
  uint64_t v85 = a6;
  uint64_t v80 = a3;
  uint64_t v81 = a4;
  uint64_t v82 = (char *)a1;
  long long v83 = a2;
  uint64_t v78 = a7;
  sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  char v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IndexableMessageInfo.InfoAndListID(0) - 8;
  __chkstk_darwin();
  long long v87 = (char **)((char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v77 = *((void *)v11 - 1);
  __chkstk_darwin();
  uint64_t v72 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin();
  uint64_t v15 = (char *)&v72 - v14;
  uint64_t v16 = (char *)&v72 + *(int *)(v13 + 24) - v14;
  uint64_t v17 = sub_1005E0970();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  __n128 v79 = v16;
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v15[v11[7]];
  memset(v91, 0, 96);
  sub_10001FDF0((uint64_t)v91, (uint64_t)v19, &qword_100713D10);
  long long v20 = &v15[v11[8]];
  *(void *)long long v20 = 0;
  *((void *)v20 + 1) = 0;
  uint64_t v74 = v20;
  uint64_t v21 = &v15[v11[9]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v75 = v21;
  *(_WORD *)&v15[v11[11]] = 256;
  __n128 v86 = v11;
  uint64_t v22 = &v15[v11[15]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  unsigned __int8 v76 = v22;
  v22[16] = -1;
  v18(v8, 1, 1, v17);
  uint64_t v23 = v87;
  IndexableMessageInfo.init(bcc:cc:date:from:messageID:subject:to:priority:hasDistributionListInTo:hasDistributionListInCC:isAutoReplied:content:attachments:)((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v8, (uint64_t)v91, 0, 0, 0, 0, v87, (uint64_t)_swiftEmptyArrayStorage, 0, 1, 0, 0, 0, 0, 0, 255, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v73 = *(int *)(v9 + 28);
  *(void *)((char *)v23 + v73) = &_swiftEmptySetSingleton;
  char v90 = 0;
  uint64_t v25 = (uint64_t)v82;
  uint64_t v24 = v83;
  uint64_t v26 = v80;
  uint64_t v27 = v81;
  unint64_t v28 = sub_1003D7728(0, (uint64_t)v82, (uint64_t)v83, v80, v81);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  v89[2] = v23;
  v89[3] = v84;
  v89[4] = v85;
  v88[2] = &v90;
  v88[3] = v23;
  v88[4] = v85;
  sub_1003B430C(3, (uint64_t (*)(void *))sub_1003B8584, v29, (uint64_t (*)(_OWORD *))sub_1003C4C8C, (uint64_t)v89, (uint64_t)sub_1003C4CC8, (uint64_t)v88, v25, (uint64_t)v24, v26, v27);
  swift_release();
  if (v90 == 1)
  {
    uint64_t v82 = v15;
    long long v83 = v19;
    uint64_t v30 = v86;
    uint64_t v31 = *(void *)((char *)v23 + v86[10]);
    uint64_t v32 = *(void *)(v31 + 16);
    uint64_t v33 = v73;
    if (v32)
    {
      uint64_t v84 = v31 + 32;
      uint64_t v34 = *(void *)((char *)v23 + v73);
      uint64_t v35 = v34 + 56;
      uint64_t v81 = v31;
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)(v34 + 16))
        {
          uint64_t v37 = v84 + 96 * i;
          uint64_t v39 = *(void *)(v37 + 16);
          uint64_t v38 = *(void *)(v37 + 24);
          sub_1005E33F0();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1005E1DB0();
          Swift::Int v40 = sub_1005E3470();
          uint64_t v41 = -1 << *(unsigned char *)(v34 + 32);
          unint64_t v42 = v40 & ~v41;
          if ((*(void *)(v35 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42))
          {
            uint64_t v43 = *(void *)(v34 + 48);
            uint64_t v44 = (void *)(v43 + 16 * v42);
            BOOL v45 = *v44 == v39 && v44[1] == v38;
            if (v45 || (sub_1005E3290() & 1) != 0)
            {
LABEL_20:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v30 = v86;
              uint64_t v23 = v87;
              uint64_t v33 = v73;
              swift_bridgeObjectRelease();
              *((unsigned char *)v23 + v30[12]) = 1;
              goto LABEL_21;
            }
            uint64_t v46 = ~v41;
            while (1)
            {
              unint64_t v42 = (v42 + 1) & v46;
              if (((*(void *)(v35 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42) & 1) == 0) {
                break;
              }
              uint64_t v47 = (void *)(v43 + 16 * v42);
              BOOL v48 = *v47 == v39 && v47[1] == v38;
              if (v48 || (sub_1005E3290() & 1) != 0) {
                goto LABEL_20;
              }
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v30 = v86;
      uint64_t v23 = v87;
      uint64_t v33 = v73;
    }
LABEL_21:
    uint64_t v49 = v23[1];
    uint64_t v50 = *(void *)(v49 + 16);
    if (v50)
    {
      uint64_t v84 = v49 + 32;
      uint64_t v51 = *(void *)((char *)v23 + v33);
      uint64_t v52 = v51 + 56;
      uint64_t v81 = v49;
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v50; ++j)
      {
        if (*(void *)(v51 + 16))
        {
          uint64_t v54 = v84 + 96 * j;
          uint64_t v56 = *(void *)(v54 + 16);
          uint64_t v55 = *(void *)(v54 + 24);
          sub_1005E33F0();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1005E1DB0();
          Swift::Int v57 = sub_1005E3470();
          uint64_t v58 = -1 << *(unsigned char *)(v51 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v52 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            uint64_t v60 = *(void *)(v51 + 48);
            uint64_t v61 = (void *)(v60 + 16 * v59);
            BOOL v62 = *v61 == v56 && v61[1] == v55;
            if (v62 || (sub_1005E3290() & 1) != 0)
            {
LABEL_39:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v67 = v77;
              uint64_t v66 = v78;
              uint64_t v30 = v86;
              uint64_t v23 = v87;
              uint64_t v68 = (uint64_t)v82;
              uint64_t v69 = (uint64_t)v72;
              uint64_t v70 = v76;
              swift_release();
              swift_bridgeObjectRelease();
              *((unsigned char *)v23 + v30[13]) = 1;
              goto LABEL_43;
            }
            uint64_t v63 = ~v58;
            while (1)
            {
              unint64_t v59 = (v59 + 1) & v63;
              if (((*(void *)(v52 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
                break;
              }
              uint64_t v64 = (void *)(v60 + 16 * v59);
              BOOL v65 = *v64 == v56 && v64[1] == v55;
              if (v65 || (sub_1005E3290() & 1) != 0) {
                goto LABEL_39;
              }
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v67 = v77;
      uint64_t v66 = v78;
      uint64_t v30 = v86;
      uint64_t v23 = v87;
    }
    else
    {
      swift_release();
      uint64_t v67 = v77;
      uint64_t v66 = v78;
    }
    uint64_t v68 = (uint64_t)v82;
    uint64_t v69 = (uint64_t)v72;
    uint64_t v70 = v76;
LABEL_43:
    sub_1003C3474((uint64_t)v23, v69);
    sub_100007A48((uint64_t)v79, &qword_100713D38);
    sub_1003C33AC(*v83, v83[1], v83[2], v83[3]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003BFFB4(*(void *)v70, *((void *)v70 + 1), v70[16]);
    sub_1003C3410(v69, v68);
    sub_1003C34D8((uint64_t)v23, type metadata accessor for IndexableMessageInfo.InfoAndListID);
    sub_1003C3474(v68, v66);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v67 + 56))(v66, 0, 1, v30);
    return sub_1003C34D8(v68, type metadata accessor for IndexableMessageInfo);
  }
  else
  {
    swift_release();
    sub_1003C34D8((uint64_t)v23, type metadata accessor for IndexableMessageInfo.InfoAndListID);
    sub_100007A48((uint64_t)v79, &qword_100713D38);
    sub_1003C33AC(*v19, v19[1], v19[2], v19[3]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003BFFB4(*(void *)v76, *((void *)v76 + 1), v76[16]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v77 + 56))(v78, 1, 1, v86);
  }
}

uint64_t sub_1003C11A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a1 <= 1000000000)
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 60);
    int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 255)
    {
      uint64_t v12 = v6;
    }
    else
    {
      uint64_t v10 = *(void *)v7;
      uint64_t v9 = *(void *)(v7 + 8);
      MailboxPriorityInfo.mailboxPriorityOrder.getter();
      uint64_t v11 = sub_1005E1DC0();
      sub_1003BFFB4(v10, v9, v8);
      uint64_t v12 = v6 - v11;
      if (__OFSUB__(v6, v11))
      {
        __break(1u);
        goto LABEL_12;
      }
    }
    uint64_t v13 = (unsigned __int128)(v12 * (__int128)5) >> 64;
    uint64_t v14 = 5 * v12;
    if (v13 != v14 >> 63)
    {
      __break(1u);
LABEL_41:
      uint64_t result = (uint64_t)sub_1003EFE58(0, *(void *)(a3 + 16) + 1, 1, (char *)a3);
      a3 = result;
      goto LABEL_32;
    }
    uint64_t v6 = v14 & ~(v14 >> 63);
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_10001FDF0((uint64_t)(a2 + 21), (uint64_t)v57, &qword_100713C98);
  uint64_t result = sub_10001FDF0((uint64_t)v57, (uint64_t)v62, &qword_100713C98);
  if (v62[16] != 2) {
    return result;
  }
  sub_10001FDF0((uint64_t)(a2 + 12), (uint64_t)v56, &qword_100713A60);
  sub_10001FDF0((uint64_t)v56, (uint64_t)v63, &qword_100713A60);
  if (v64)
  {
    sub_1003B5274((uint64_t)a2);
    swift_retain();
    sub_1003B6670((uint64_t)v56, (uint64_t)a2, v6, (uint64_t *)a3, (uint64_t)v50);
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v16 = *a2;
  sub_1003B5274((uint64_t)a2);
  swift_retain();
  sub_1003B5274((uint64_t)a2);
  swift_retain();
  if ((static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v16, _swiftEmptyArrayStorage) & 1) == 0)
  {
    swift_release();
    sub_1003B8280((uint64_t)a2);
    sub_1003B8280((uint64_t)a2);
    swift_release();
    sub_1003B7CC4((uint64_t)v58);
    sub_10001FDF0((uint64_t)v58, (uint64_t)v50, &qword_100713CB8);
    goto LABEL_21;
  }
  unint64_t v17 = sub_1003DD04C((unint64_t)"text/plain", (uint64_t)"", 0);
  long long v20 = 0uLL;
  if (v19)
  {
    uint64_t v21 = v19;
    sub_1003CDB70(v17, v18, (uint64_t)v51);
    sub_10001FDF0((uint64_t)v51, (uint64_t)v54, &qword_100713C60);
    uint64_t v22 = v55;
    if (v55 <= 0xFDuLL)
    {
      long long v44 = v54[1];
      long long v45 = v54[0];
      *(void *)&v58[0] = _swiftEmptyArrayStorage;
      sub_1003D9B84(v21, (char **)v58);
      swift_bridgeObjectRelease();
      long long v24 = v44;
      long long v20 = v45;
      uint64_t v23 = *(void *)&v58[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      long long v24 = 0uLL;
      long long v20 = 0uLL;
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    long long v24 = 0uLL;
  }
  v59[0] = v20;
  v59[1] = v24;
  uint64_t v60 = v22;
  uint64_t v61 = v23;
  sub_1003B6670((uint64_t)v59, (uint64_t)a2, v6, (uint64_t *)a3, (uint64_t)v50);
  swift_bridgeObjectRelease();
  sub_1003B8280((uint64_t)a2);
  swift_release();
LABEL_20:
  sub_1003B8280((uint64_t)a2);
  swift_release();
LABEL_21:
  sub_10001FDF0((uint64_t)v50, (uint64_t)v48, &qword_100713CB8);
  sub_10001FDF0((uint64_t)v48, (uint64_t)v49, &qword_100713CB8);
  uint64_t result = sub_1003B85AC((uint64_t)v49);
  if (result == 1) {
    return result;
  }
  sub_10001FDF0((uint64_t)v48, (uint64_t)v46, &qword_100713CB8);
  uint64_t v25 = type metadata accessor for IndexableMessageInfo(0);
  uint64_t v26 = v3 + *(int *)(v25 + 60);
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *(void *)(v26 + 8);
  int v29 = *(unsigned __int8 *)(v26 + 16);
  sub_1003B7C9C(v46, v47);
  int v30 = sub_1003B776C((uint64_t)v47);
  if (!v30)
  {
    uint64_t result = sub_1003B7778((uint64_t)v47);
    uint64_t v34 = *(void *)result;
    uint64_t v33 = *(void **)(result + 8);
    if (v29 == 255)
    {
      *(void *)uint64_t v26 = v34;
      *(void *)(v26 + 8) = v33;
      *(unsigned char *)(v26 + 16) = 0;
    }
    else if (v29)
    {
      return sub_1003B85C4((uint64_t)v48);
    }
    else
    {
      *(void *)&v58[0] = v28;
      *((void *)&v58[0] + 1) = v27;
      swift_bridgeObjectRetain();
      v65._uint64_t countAndFlagsBits = 2570;
      v65._object = (void *)0xE200000000000000;
      sub_1005E1E30(v65);
      swift_bridgeObjectRetain();
      v66._uint64_t countAndFlagsBits = v34;
      v66._object = v33;
      sub_1005E1E30(v66);
      sub_1003B85C4((uint64_t)v48);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1003BFFB4(v28, v27, v29);
      uint64_t v35 = *((void *)&v58[0] + 1);
      *(void *)uint64_t v26 = *(void *)&v58[0];
      *(void *)(v26 + 8) = v35;
      *(unsigned char *)(v26 + 16) = 0;
    }
    return result;
  }
  if (v30 == 1)
  {
    uint64_t result = sub_1003B7778((uint64_t)v47);
    uint64_t v32 = *(void *)result;
    uint64_t v31 = *(void **)(result + 8);
    if (v29 != 255)
    {
      if (v29)
      {
        *(void *)&v58[0] = v28;
        *((void *)&v58[0] + 1) = v27;
        swift_bridgeObjectRetain();
        v67._uint64_t countAndFlagsBits = v32;
        v67._object = v31;
        sub_1005E1E30(v67);
        sub_1003B85C4((uint64_t)v48);
        uint64_t result = sub_1003BFFB4(v28, v27, v29);
        uint64_t v43 = *((void *)&v58[0] + 1);
        *(void *)uint64_t v26 = *(void *)&v58[0];
        *(void *)(v26 + 8) = v43;
        goto LABEL_37;
      }
      uint64_t result = sub_1003BFFB4(v28, v27, v29);
    }
    *(void *)uint64_t v26 = v32;
    *(void *)(v26 + 8) = v31;
LABEL_37:
    *(unsigned char *)(v26 + 16) = 1;
    return result;
  }
  unint64_t v36 = (_OWORD *)sub_1003B7778((uint64_t)v47);
  v58[4] = v36[4];
  v58[5] = v36[5];
  v58[6] = v36[6];
  v58[7] = v36[7];
  v58[0] = *v36;
  v58[1] = v36[1];
  v58[2] = v36[2];
  v58[3] = v36[3];
  sub_1003C4D58((uint64_t)v58, (uint64_t)v52);
  sub_1003B85C4((uint64_t)v48);
  uint64_t v6 = *(int *)(v25 + 64);
  a3 = *(void *)(v3 + v6);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_41;
  }
LABEL_32:
  unint64_t v38 = *(void *)(a3 + 16);
  unint64_t v37 = *(void *)(a3 + 24);
  if (v38 >= v37 >> 1)
  {
    uint64_t result = (uint64_t)sub_1003EFE58((char *)(v37 > 1), v38 + 1, 1, (char *)a3);
    a3 = result;
  }
  *(void *)(a3 + 16) = v38 + 1;
  unint64_t v39 = a3 + 56 * v38;
  long long v40 = v52[0];
  long long v41 = v52[1];
  long long v42 = v52[2];
  *(void *)(v39 + 80) = v53;
  *(_OWORD *)(v39 + 48) = v41;
  *(_OWORD *)(v39 + 64) = v42;
  *(_OWORD *)(v39 + 32) = v40;
  *(void *)(v3 + v6) = a3;
  return result;
}

uint64_t sub_1003C1728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t *a8)
{
  *a6 = 1;
  uint64_t result = sub_1003B52C0(a1, (uint64_t)v15);
  if (((1 << (v16 >> 59)) & 0x1343F1) == 0)
  {
    v16 &= 0x7FFFFFFFFFFFFFFuLL;
    swift_retain();
    sub_1003C4CD4(a1);
    sub_1003BDB1C(a1, a8, (uint64_t)v11);
    uint64_t result = sub_10001FDF0((uint64_t)v11, (uint64_t)v12, &qword_100713E10);
    if (v13 != 255)
    {
      sub_1003BC9AC(v12, (uint64_t)v14);
      sub_1003C180C(v14);
      return sub_1003C4E04((uint64_t)v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1003C4D30);
    }
  }
  return result;
}

uint64_t sub_1003C180C(long long *a1)
{
  sub_1003BC9AC(a1, (uint64_t)v59);
  uint64_t v56 = v60;
  uint64_t v54 = v61;
  uint64_t v55 = v62;
  uint64_t v2 = sub_1005E0970();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v45 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v45 - v10;
  __chkstk_darwin();
  unsigned __int8 v13 = (char *)&v45 - v12;
  uint64_t result = sub_1003BC9AC(a1, (uint64_t)v63);
  switch(v66)
  {
    case 1:
      int v15 = LOBYTE(v63[0]);
      uint64_t result = type metadata accessor for IndexableMessageInfo(0);
      uint64_t v16 = *(int *)(result + 56);
      if (v15) {
        *((unsigned char *)v57 + v16) = 1;
      }
      else {
        *((unsigned char *)v57 + v16) = 0;
      }
      break;
    case 2:
      uint64_t v17 = *(void *)&v63[0];
      uint64_t v18 = v57;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      void *v18 = v17;
      break;
    case 3:
      uint64_t v19 = *(void *)&v63[0];
      uint64_t v20 = (uint64_t)v57;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8) = v19;
      break;
    case 8:
      uint64_t result = sub_10001FDF0((uint64_t)v63, (uint64_t)v58, &qword_100713D08);
      break;
    case 10:
      long long v21 = v63[0];
      swift_bridgeObjectRetain();
      uint64_t v56 = v21;
      sub_1003C7B08(v21, *((uint64_t *)&v21 + 1), v9);
      sub_1003C4E04((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1003BD694);
      uint64_t v22 = v3;
      uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
      if (v23(v9, 1, v2) == 1)
      {
        sub_1003C64C8(v56, *((uint64_t *)&v21 + 1), v11);
        sub_100007A48((uint64_t)v9, &qword_100713D38);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v11, v9, v2);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v11, 0, 1, v2);
      }
      uint64_t v42 = (uint64_t)v57;
      sub_1000079E4((uint64_t)v11, (uint64_t)v7, &qword_100713D38);
      uint64_t v43 = 1;
      if (v23(v7, 1, v2) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v5, v7, v2);
        sub_1005E08F0();
        sub_1005E08E0();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
        uint64_t v43 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v13, v43, 1, v2);
      sub_100007A48((uint64_t)v11, &qword_100713D38);
      uint64_t v44 = type metadata accessor for IndexableMessageInfo(0);
      uint64_t result = sub_10036C7E8((uint64_t)v13, v42 + *(int *)(v44 + 24), &qword_100713D38);
      break;
    case 11:
      long long v53 = v63[0];
      long long v52 = v63[1];
      long long v51 = v63[2];
      long long v50 = v63[3];
      long long v49 = v63[4];
      uint64_t v24 = v64;
      uint64_t v48 = v65;
      uint64_t v25 = (char *)v57 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 28);
      Swift::Int v57 = *(void **)v25;
      uint64_t v47 = *((void *)v25 + 1);
      uint64_t v26 = *((void *)v25 + 3);
      uint64_t v46 = *((void *)v25 + 2);
      long long v45 = *((_OWORD *)v25 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = sub_1003C33AC((uint64_t)v57, v47, v46, v26);
      long long v27 = v52;
      *(_OWORD *)uint64_t v25 = v53;
      *((_OWORD *)v25 + 1) = v27;
      long long v28 = v50;
      *((_OWORD *)v25 + 2) = v51;
      *((_OWORD *)v25 + 3) = v28;
      *((_OWORD *)v25 + 4) = v49;
      uint64_t v29 = v48;
      *((void *)v25 + 10) = v24;
      *((void *)v25 + 11) = v29;
      break;
    case 12:
      long long v30 = v63[0];
      type metadata accessor for IndexableMessageInfo.InfoAndListID(0);
      swift_bridgeObjectRetain();
      sub_1003C1F30(v58, v30, *((Swift::Int *)&v30 + 1));
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 13:
      long long v31 = v63[0];
      uint64_t v32 = (_OWORD *)((char *)v57 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 32));
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v32 = v31;
      break;
    case 15:
      char v33 = v63[0];
      uint64_t result = type metadata accessor for IndexableMessageInfo(0);
      uint64_t v34 = (char *)v57 + *(int *)(result + 44);
      *uint64_t v34 = v33;
      v34[1] = 0;
      break;
    case 18:
      sub_1003C4E04((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1003BD518);
      uint64_t v35 = sub_1003EA1F4();
      uint64_t v37 = v36;
      unint64_t v38 = (void *)((char *)v57 + *(int *)(type metadata accessor for IndexableMessageInfo(0) + 36));
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v38 = v35;
      v38[1] = v37;
      break;
    case 19:
      uint64_t v39 = *(void *)&v63[0];
      uint64_t v40 = *(int *)(type metadata accessor for IndexableMessageInfo(0) + 40);
      uint64_t v41 = (uint64_t)v57;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v41 + v40) = v39;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003C1F30(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  Swift::Int v8 = sub_1005E3470();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1005E3290() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1005E3290() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1003C23E0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1003C20F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713E18);
  uint64_t v3 = sub_1005E2C10();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1005E33F0();
      swift_bridgeObjectRetain();
      sub_1005E1DB0();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1005E3470();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_1003C23E0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1003C20F0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1003C258C();
      goto LABEL_22;
    }
    sub_1003C2740();
  }
  uint64_t v11 = *v4;
  sub_1005E33F0();
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1005E3470();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1005E3290(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1005E3370();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1005E3290();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1003C258C()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_100713E18);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1005E2C00();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1003C2740()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000566C(&qword_100713E18);
  uint64_t v3 = sub_1005E2C10();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1005E33F0();
    swift_bridgeObjectRetain_n();
    sub_1005E1DB0();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1005E3470();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003C29FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return sub_1005E3290();
  }
}

uint64_t _s9IMAP2MIME20IndexableMessageInfoV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_1005E0970();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000566C(&qword_100713E20);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v14 = (char *)&v95 - v13;
  __chkstk_darwin();
  int64_t v16 = (char *)&v95 - v15;
  if ((sub_1003AB6D8(*a1, *a2) & 1) == 0 || (sub_1003AB6D8(a1[1], a2[1]) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v108 = v7;
  uint64_t v17 = v5;
  uint64_t v18 = type metadata accessor for IndexableMessageInfo(0);
  uint64_t v19 = *(int *)(v18 + 24);
  uint64_t v110 = a1;
  sub_1000079E4((uint64_t)a1 + v19, (uint64_t)v16, &qword_100713D38);
  uint64_t v109 = (int *)v18;
  uint64_t v20 = *(int *)(v18 + 24);
  uint64_t v21 = v17;
  int v111 = a2;
  sub_1000079E4((uint64_t)a2 + v20, (uint64_t)v14, &qword_100713D38);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000079E4((uint64_t)v16, (uint64_t)v10, &qword_100713D38);
  sub_1000079E4((uint64_t)v14, v22, &qword_100713D38);
  unint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_100007A48((uint64_t)v14, &qword_100713D38);
    sub_100007A48((uint64_t)v16, &qword_100713D38);
    if (v23(v22, 1, v4) == 1)
    {
      sub_100007A48((uint64_t)v10, &qword_100713D38);
      goto LABEL_10;
    }
LABEL_8:
    sub_100007A48((uint64_t)v10, &qword_100713E20);
    goto LABEL_20;
  }
  sub_1000079E4((uint64_t)v10, (uint64_t)v12, &qword_100713D38);
  if (v23(v22, 1, v4) == 1)
  {
    sub_100007A48((uint64_t)v14, &qword_100713D38);
    sub_100007A48((uint64_t)v16, &qword_100713D38);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v4);
    goto LABEL_8;
  }
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  char v25 = v108;
  v24(v108, v22, v4);
  sub_1003C4F90();
  char v26 = sub_1005E1BC0();
  BOOL v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  v27(v25, v4);
  sub_100007A48((uint64_t)v14, &qword_100713D38);
  sub_100007A48((uint64_t)v16, &qword_100713D38);
  v27(v12, v4);
  sub_100007A48((uint64_t)v10, &qword_100713D38);
  if ((v26 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_10:
  uint64_t v28 = v109;
  uint64_t v29 = v109[7];
  long long v30 = v110;
  uint64_t v31 = *(uint64_t *)((char *)v110 + v29);
  uint64_t v32 = *(uint64_t *)((char *)v110 + v29 + 8);
  uint64_t v33 = *(uint64_t *)((char *)v110 + v29 + 16);
  uint64_t v34 = *(uint64_t *)((char *)v110 + v29 + 24);
  unint64_t v36 = *(uint64_t *)((char *)v110 + v29 + 32);
  unint64_t v35 = *(uint64_t *)((char *)v110 + v29 + 40);
  uint64_t v38 = *(uint64_t *)((char *)v110 + v29 + 48);
  uint64_t v37 = *(uint64_t *)((char *)v110 + v29 + 56);
  uint64_t v39 = *(uint64_t *)((char *)v110 + v29 + 64);
  uint64_t v40 = *(uint64_t *)((char *)v110 + v29 + 72);
  uint64_t v42 = *(uint64_t *)((char *)v110 + v29 + 80);
  uint64_t v41 = *(uint64_t *)((char *)v110 + v29 + 88);
  uint64_t v43 = v111;
  uint64_t v44 = (uint64_t *)((char *)v111 + v29);
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  uint64_t v47 = v44[2];
  uint64_t v48 = v44[3];
  unint64_t v49 = v44[4];
  unint64_t v50 = v44[5];
  uint64_t v51 = v44[6];
  uint64_t v52 = v44[7];
  uint64_t v53 = v44[8];
  uint64_t v54 = v44[9];
  uint64_t v56 = v44[10];
  uint64_t v55 = v44[11];
  if (!v34)
  {
    if (!v48)
    {
LABEL_28:
      uint64_t v72 = v28[8];
      uint64_t v73 = (uint64_t *)((char *)v30 + v72);
      uint64_t v74 = *(uint64_t *)((char *)v30 + v72 + 8);
      uint64_t v75 = (uint64_t *)((char *)v43 + v72);
      uint64_t v76 = v75[1];
      if (v74)
      {
        if (!v76) {
          goto LABEL_20;
        }
        if (*v73 != *v75 || v74 != v76)
        {
          char v77 = sub_1005E3290();
          char v62 = 0;
          if ((v77 & 1) == 0) {
            return v62 & 1;
          }
        }
      }
      else if (v76)
      {
        goto LABEL_20;
      }
      uint64_t v78 = v28[9];
      __n128 v79 = (uint64_t *)((char *)v30 + v78);
      uint64_t v80 = *(uint64_t *)((char *)v30 + v78 + 8);
      uint64_t v81 = (uint64_t *)((char *)v43 + v78);
      uint64_t v82 = v81[1];
      if (v80)
      {
        if (!v82) {
          goto LABEL_20;
        }
        if (*v79 != *v81 || v80 != v82)
        {
          char v83 = sub_1005E3290();
          char v62 = 0;
          if ((v83 & 1) == 0) {
            return v62 & 1;
          }
        }
      }
      else if (v82)
      {
        goto LABEL_20;
      }
      if (sub_1003AB6D8(*(uint64_t *)((char *)v30 + v28[10]), *(uint64_t *)((char *)v43 + v28[10])))
      {
        uint64_t v84 = v28[11];
        uint64_t v85 = (unsigned __int8 *)v30 + v84;
        char v86 = *((unsigned char *)v30 + v84 + 1);
        long long v87 = (unsigned __int8 *)v43 + v84;
        int v88 = *((unsigned __int8 *)v43 + v84 + 1);
        if (v86)
        {
          if (!v88) {
            goto LABEL_20;
          }
        }
        else
        {
          if (*v85 != *v87) {
            LOBYTE(v88) = 1;
          }
          if (v88) {
            goto LABEL_20;
          }
        }
        if (*((unsigned __int8 *)v30 + v28[12]) != *((unsigned __int8 *)v43 + v28[12])
          || *((unsigned __int8 *)v30 + v28[13]) != *((unsigned __int8 *)v43 + v28[13])
          || *((unsigned __int8 *)v30 + v28[14]) != *((unsigned __int8 *)v43 + v28[14]))
        {
          goto LABEL_20;
        }
        uint64_t v89 = v28[15];
        char v90 = (uint64_t *)((char *)v30 + v89);
        int v91 = *((unsigned __int8 *)v30 + v89 + 16);
        uint64_t v92 = (uint64_t *)((char *)v43 + v89);
        int v93 = *((unsigned __int8 *)v43 + v89 + 16);
        if (v91 == 255)
        {
          if (v93 == 255) {
            goto LABEL_63;
          }
        }
        else if (v93 != 255)
        {
          if (v91)
          {
            if ((v93 & 1) == 0) {
              goto LABEL_20;
            }
          }
          else if (v93)
          {
            goto LABEL_20;
          }
          uint64_t v43 = v111;
          long long v30 = v110;
          uint64_t v28 = v109;
          if (*v90 != *v92 || v90[1] != v92[1])
          {
            char v94 = sub_1005E3290();
            char v62 = 0;
            if ((v94 & 1) == 0) {
              return v62 & 1;
            }
          }
LABEL_63:
          char v62 = sub_1003ABB40(*(uint64_t *)((char *)v30 + v28[16]), *(uint64_t *)((char *)v43 + v28[16]));
          return v62 & 1;
        }
      }
LABEL_20:
      char v62 = 0;
      return v62 & 1;
    }
LABEL_19:
    v112[0] = v31;
    v112[1] = v32;
    v112[2] = v33;
    v112[3] = v34;
    v112[4] = v36;
    v112[5] = v35;
    v112[6] = v38;
    v112[7] = v37;
    v112[8] = v39;
    v112[9] = v40;
    v112[10] = v42;
    v112[11] = v41;
    v112[12] = v45;
    v112[13] = v46;
    v112[14] = v47;
    v112[15] = v48;
    v112[16] = v49;
    v112[17] = v50;
    v112[18] = v51;
    v112[19] = v52;
    v112[20] = v53;
    v112[21] = v54;
    v112[22] = v56;
    v112[23] = v55;
    uint64_t v107 = v47;
    uint64_t v108 = (char *)v52;
    uint64_t v63 = v45;
    sub_1003C4E68(v31, v32, v33, v34);
    sub_1003C4E68(v63, v46, v107, v48);
    sub_1003C4ECC(v112);
    goto LABEL_20;
  }
  if (!v48) {
    goto LABEL_19;
  }
  if (!v32)
  {
    unint64_t v101 = v40;
    uint64_t v102 = v55;
    unint64_t v103 = v39;
    uint64_t v104 = v56;
    unint64_t v105 = v54;
    unint64_t v106 = v53;
    if (v46) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (!v46) {
    goto LABEL_20;
  }
  unint64_t v101 = v40;
  uint64_t v102 = v55;
  unint64_t v103 = v39;
  uint64_t v104 = v56;
  unint64_t v105 = v54;
  unint64_t v106 = v53;
  if (v31 == v45 && v32 == v46) {
    goto LABEL_23;
  }
  uint64_t v107 = v47;
  unint64_t v100 = v49;
  uint64_t v108 = (char *)v52;
  uint64_t v99 = v41;
  uint64_t v57 = v51;
  uint64_t v98 = v42;
  unint64_t v96 = v50;
  uint64_t v58 = v37;
  uint64_t v97 = v38;
  unint64_t v59 = v35;
  char v60 = sub_1005E3290();
  uint64_t v47 = v107;
  unint64_t v35 = v59;
  uint64_t v38 = v97;
  unint64_t v49 = v100;
  uint64_t v37 = v58;
  unint64_t v50 = v96;
  uint64_t v42 = v98;
  uint64_t v51 = v57;
  uint64_t v41 = v99;
  uint64_t v52 = (uint64_t)v108;
  char v61 = v60;
  char v62 = 0;
  if (v61)
  {
LABEL_23:
    if (v33 != v47 || v34 != v48)
    {
      unint64_t v100 = v49;
      uint64_t v108 = (char *)v52;
      uint64_t v65 = v51;
      unint64_t v66 = v50;
      uint64_t v99 = v41;
      uint64_t v67 = v37;
      uint64_t v68 = v38;
      unint64_t v69 = v35;
      char v70 = sub_1005E3290();
      unint64_t v35 = v69;
      uint64_t v38 = v68;
      unint64_t v49 = v100;
      uint64_t v37 = v67;
      uint64_t v41 = v99;
      unint64_t v50 = v66;
      uint64_t v51 = v65;
      uint64_t v52 = (uint64_t)v108;
      char v71 = v70;
      char v62 = 0;
      if ((v71 & 1) == 0) {
        return v62 & 1;
      }
    }
    if ((sub_1003BF7CC(v36, v35, v38, v37, v49, v50, v51, v52) & 1) == 0
      || (sub_1003BF7CC(v103, v101, v42, v41, v106, v105, v104, v102) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_28;
  }
  return v62 & 1;
}

uint64_t sub_1003C3330@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v12 = *(void *)(v5 + 16);
  uint64_t v11 = *(void *)(v5 + 24);
  swift_retain();
  return sub_1003C0958(a1, a2, a3, a4, v12, v11, a5);
}

uint64_t sub_1003C33AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003C3410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IndexableMessageInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C3474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IndexableMessageInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C34D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for IndexableMessageInfo(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    __dst = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = sub_1005E0970();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10000566C(&qword_100713D38);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v14;
    int64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *((void *)v16 + 3);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v18;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v17;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      uint64_t v19 = *((void *)v16 + 7);
      *((void *)v15 + 6) = *((void *)v16 + 6);
      *((void *)v15 + 7) = v19;
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      uint64_t v20 = *((void *)v16 + 11);
      *((void *)v15 + 10) = *((void *)v16 + 10);
      *((void *)v15 + 11) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v21 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v21;
      long long v22 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v22;
      long long v23 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v23;
    }
    uint64_t v24 = a3[8];
    uint64_t v25 = a3[9];
    char v26 = (void *)((char *)v7 + v24);
    BOOL v27 = (void *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *char v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (void *)((char *)v7 + v25);
    long long v30 = (void *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[11];
    *(void *)((char *)v7 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    *(_WORD *)((char *)v7 + v32) = *(_WORD *)((char *)a2 + v32);
    uint64_t v33 = a3[13];
    *((unsigned char *)v7 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *((unsigned char *)v7 + v33) = *((unsigned char *)a2 + v33);
    uint64_t v34 = a3[15];
    *((unsigned char *)v7 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    unint64_t v35 = (char *)v7 + v34;
    unint64_t v36 = (char *)a2 + v34;
    int v37 = *((unsigned __int8 *)a2 + v34 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v37 == 255)
    {
      *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
    }
    else
    {
      uint64_t v38 = *(void *)v36;
      uint64_t v39 = *((void *)v36 + 1);
      MailboxPriorityInfo.mailboxPriorityOrder.getter();
      *(void *)unint64_t v35 = v38;
      *((void *)v35 + 1) = v39;
      v35[16] = v37 & 1;
    }
    *(void *)((char *)v7 + a3[16]) = *(void *)((char *)a2 + a3[16]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for IndexableMessageInfo(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1005E0970();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + a2[7] + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + a2[15] + 16) != 255) {
    sub_10024EEEC();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IndexableMessageInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000566C(&qword_100713D38);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *((void *)v15 + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v17;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *((void *)v14 + 3) = v16;
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    uint64_t v18 = *((void *)v15 + 7);
    *((void *)v14 + 6) = *((void *)v15 + 6);
    *((void *)v14 + 7) = v18;
    *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
    uint64_t v19 = *((void *)v15 + 11);
    *((void *)v14 + 10) = *((void *)v15 + 10);
    *((void *)v14 + 11) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *((_OWORD *)v15 + 3);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v20;
    long long v21 = *((_OWORD *)v15 + 5);
    *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
    *((_OWORD *)v14 + 5) = v21;
    long long v22 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v22;
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)((char *)a1 + v23);
  char v26 = (void *)((char *)a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)((char *)a1 + v24);
  uint64_t v29 = (void *)((char *)a2 + v24);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(_WORD *)((char *)a1 + v31) = *(_WORD *)((char *)a2 + v31);
  uint64_t v32 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v32) = *((unsigned char *)a2 + v32);
  uint64_t v33 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v34 = (char *)a1 + v33;
  unint64_t v35 = (char *)a2 + v33;
  int v36 = *((unsigned __int8 *)a2 + v33 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v36 == 255)
  {
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    unsigned char v34[16] = v35[16];
  }
  else
  {
    uint64_t v37 = *(void *)v35;
    uint64_t v38 = *((void *)v35 + 1);
    MailboxPriorityInfo.mailboxPriorityOrder.getter();
    *(void *)uint64_t v34 = v37;
    *((void *)v34 + 1) = v38;
    unsigned char v34[16] = v36 & 1;
  }
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IndexableMessageInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000566C(&qword_100713D38);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *(void *)((char *)a1 + v15 + 24);
  uint64_t v19 = *(void *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      *uint64_t v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16[2] = v17[2];
      v16[3] = v17[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v16[4] = v17[4];
      v16[5] = v17[5];
      v16[6] = v17[6];
      unsigned char v16[7] = v17[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v16[8] = v17[8];
      v16[9] = v17[9];
      _OWORD v16[10] = v17[10];
      v16[11] = v17[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1003C4094((uint64_t)v16);
      long long v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
      long long v21 = *((_OWORD *)v17 + 5);
      long long v23 = *((_OWORD *)v17 + 2);
      long long v22 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      *((_OWORD *)v16 + 5) = v21;
      *((_OWORD *)v16 + 2) = v23;
      *((_OWORD *)v16 + 3) = v22;
    }
  }
  else if (v19)
  {
    *uint64_t v16 = *v17;
    v16[1] = v17[1];
    v16[2] = v17[2];
    v16[3] = v17[3];
    void v16[4] = v17[4];
    v16[5] = v17[5];
    v16[6] = v17[6];
    unsigned char v16[7] = v17[7];
    char v16[8] = v17[8];
    v16[9] = v17[9];
    _OWORD v16[10] = v17[10];
    v16[11] = v17[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v24;
    long long v25 = *((_OWORD *)v17 + 2);
    long long v26 = *((_OWORD *)v17 + 3);
    long long v27 = *((_OWORD *)v17 + 5);
    *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
    *((_OWORD *)v16 + 5) = v27;
    *((_OWORD *)v16 + 2) = v25;
    *((_OWORD *)v16 + 3) = v26;
  }
  uint64_t v28 = a3[8];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v34 = a3[15];
  uint64_t v35 = (uint64_t)a1 + v34;
  int v36 = (char *)a2 + v34;
  int v37 = *((unsigned __int8 *)a1 + v34 + 16);
  int v38 = *((unsigned __int8 *)a2 + v34 + 16);
  if (v37 == 255)
  {
    if (v38 == 255)
    {
      long long v40 = *(_OWORD *)v36;
      *(unsigned char *)(v35 + 16) = v36[16];
      *(_OWORD *)uint64_t v35 = v40;
    }
    else
    {
      char v44 = v38 & 1;
      uint64_t v45 = *(void *)v36;
      uint64_t v46 = *((void *)v36 + 1);
      MailboxPriorityInfo.mailboxPriorityOrder.getter();
      *(void *)uint64_t v35 = v45;
      *(void *)(v35 + 8) = v46;
      *(unsigned char *)(v35 + 16) = v44;
    }
  }
  else if (v38 == 255)
  {
    sub_1003C40E8(v35);
    char v39 = v36[16];
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *(unsigned char *)(v35 + 16) = v39;
  }
  else
  {
    char v41 = v38 & 1;
    uint64_t v42 = *(void *)v36;
    uint64_t v43 = *((void *)v36 + 1);
    MailboxPriorityInfo.mailboxPriorityOrder.getter();
    *(void *)uint64_t v35 = v42;
    *(void *)(v35 + 8) = v43;
    *(unsigned char *)(v35 + 16) = v41;
    sub_10024EEEC();
  }
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003C4094(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003C40E8(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for IndexableMessageInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000566C(&qword_100713D38);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = v15[3];
  v14[2] = v15[2];
  void v14[3] = v16;
  long long v17 = v15[5];
  v14[4] = v15[4];
  v14[5] = v17;
  long long v18 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v18;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v19 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  uint64_t v20 = a3[12];
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  uint64_t v21 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
  uint64_t v22 = a3[15];
  uint64_t v23 = a3[16];
  long long v24 = (char *)a1 + v22;
  long long v25 = (char *)a2 + v22;
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
  return a1;
}

void *assignWithTake for IndexableMessageInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000566C(&qword_100713D38);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t)a1 + v15;
  long long v17 = (char *)a2 + v15;
  if (*(void *)((char *)a1 + v15 + 24))
  {
    if (*((void *)v17 + 3))
    {
      uint64_t v18 = *((void *)v17 + 1);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *((void *)v17 + 3);
      *(void *)(v16 + 16) = *((void *)v17 + 2);
      *(void *)(v16 + 24) = v19;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
      uint64_t v20 = *((void *)v17 + 7);
      *(void *)(v16 + 48) = *((void *)v17 + 6);
      *(void *)(v16 + 56) = v20;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
      uint64_t v21 = *((void *)v17 + 11);
      *(void *)(v16 + 80) = *((void *)v17 + 10);
      *(void *)(v16 + 88) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1003C4094(v16);
  }
  long long v22 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
  *(_OWORD *)(v16 + 48) = v22;
  long long v23 = *((_OWORD *)v17 + 5);
  *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
  *(_OWORD *)(v16 + 80) = v23;
  long long v24 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v24;
LABEL_12:
  uint64_t v25 = a3[8];
  long long v26 = (void *)((char *)a1 + v25);
  long long v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *long long v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[9];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[12];
  *(_WORD *)((char *)a1 + a3[11]) = *(_WORD *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  uint64_t v36 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + v36) = *((unsigned char *)a2 + v36);
  uint64_t v37 = a3[15];
  uint64_t v38 = (uint64_t)a1 + v37;
  char v39 = (char *)a2 + v37;
  if (*((unsigned __int8 *)a1 + v37 + 16) != 255)
  {
    int v40 = v39[16];
    if (v40 != 255)
    {
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
      *(unsigned char *)(v38 + 16) = v40 & 1;
      sub_10024EEEC();
      goto LABEL_17;
    }
    sub_1003C40E8(v38);
  }
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *(unsigned char *)(v38 + 16) = v39[16];
LABEL_17:
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableMessageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C45F4);
}

uint64_t sub_1003C45F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_100713D38);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IndexableMessageInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C46BC);
}

void *sub_1003C46BC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000566C(&qword_100713D38);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1003C4768()
{
  sub_1003C4840();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1003C4840()
{
  if (!qword_100713DB0)
  {
    sub_1005E0970();
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100713DB0);
    }
  }
}

uint64_t destroy for IndexableMessageInfo.Content()
{
  return sub_10024EEEC();
}

uint64_t _s9IMAP2MIME20IndexableMessageInfoV7ContentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  MailboxPriorityInfo.mailboxPriorityOrder.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IndexableMessageInfo.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  MailboxPriorityInfo.mailboxPriorityOrder.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10024EEEC();
  return a1;
}

uint64_t assignWithTake for IndexableMessageInfo.Content(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10024EEEC();
  return a1;
}

ValueMetadata *type metadata accessor for IndexableMessageInfo.Content()
{
  return &type metadata for IndexableMessageInfo.Content;
}

uint64_t destroy for IndexableMessageInfo.Attachment(uint64_t a1)
{
  sub_1003AE7CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  char v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  sub_1003AE7CC(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IndexableMessageInfo.Attachment(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  sub_1003AE7CC(v5, v6, v7, v8, v10);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableMessageInfo.Attachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexableMessageInfo.Attachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexableMessageInfo.Attachment()
{
  return &type metadata for IndexableMessageInfo.Attachment;
}

uint64_t type metadata accessor for IndexableMessageInfo.InfoAndListID(uint64_t a1)
{
  return sub_10003B314(a1, qword_100713E88);
}

uint64_t sub_1003C4C54()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003C4C8C(uint64_t *a1)
{
  sub_1003C11A8(*(void *)(v1 + 24), a1, *(void *)(v1 + 32));
  return 2;
}

uint64_t sub_1003C4CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003C1728(a1, a2, a3, a4, a5, *(unsigned char **)(v5 + 16), *(void *)(v5 + 24), *(uint64_t **)(v5 + 32));
}

uint64_t sub_1003C4CD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003C4D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 59 == 5 || a5 >> 59 == 9) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1003C4D30(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  if (a13 != 255) {
    return sub_1003BD694(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1003C4D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 56);
    while (*(v6 - 2))
    {
      v6 += 4;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(v6 - 1);
    uint64_t v8 = *v6;
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  uint64_t result = sub_1003AE6AC(v9, v10, v11, v12, v13);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_1003C4E04(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 96);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v4);
  return a1;
}

uint64_t sub_1003C4E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t *sub_1003C4ECC(uint64_t *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v6 = a1[12];
  uint64_t v3 = a1[14];
  uint64_t v4 = a1[15];
  sub_1003C33AC(*a1, a1[1], a1[2], a1[3]);
  sub_1003C33AC(v6, v2, v3, v4);
  return a1;
}

unint64_t sub_1003C4F90()
{
  unint64_t result = qword_100713E28;
  if (!qword_100713E28)
  {
    sub_1005E0970();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713E28);
  }
  return result;
}

void *sub_1003C4FE8(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    a1[1] = a2[1];
    uint64_t v7 = (int *)type metadata accessor for IndexableMessageInfo(0);
    uint64_t v8 = v7[6];
    __dst = (char *)v6 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = sub_1005E0970();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10000566C(&qword_100713D38);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v14 = v7[7];
    uint64_t v15 = (char *)v6 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *((void *)v16 + 3);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v18;
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v17;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      uint64_t v19 = *((void *)v16 + 7);
      *((void *)v15 + 6) = *((void *)v16 + 6);
      *((void *)v15 + 7) = v19;
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      uint64_t v20 = *((void *)v16 + 11);
      *((void *)v15 + 10) = *((void *)v16 + 10);
      *((void *)v15 + 11) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v21 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v21;
      long long v22 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v22;
      long long v23 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v23;
    }
    uint64_t v24 = v7[8];
    uint64_t v25 = (void *)((char *)v6 + v24);
    long long v26 = (void *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v7[9];
    uint64_t v29 = (void *)((char *)v6 + v28);
    uint64_t v30 = (void *)((char *)a2 + v28);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    *(void *)((char *)v6 + v7[10]) = *(void *)((char *)a2 + v7[10]);
    *(_WORD *)((char *)v6 + v7[11]) = *(_WORD *)((char *)a2 + v7[11]);
    *((unsigned char *)v6 + v7[12]) = *((unsigned char *)a2 + v7[12]);
    *((unsigned char *)v6 + v7[13]) = *((unsigned char *)a2 + v7[13]);
    *((unsigned char *)v6 + v7[14]) = *((unsigned char *)a2 + v7[14]);
    uint64_t v32 = v7[15];
    uint64_t v33 = (char *)v6 + v32;
    uint64_t v34 = (char *)a2 + v32;
    int v35 = *((unsigned __int8 *)a2 + v32 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 == 255)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      v33[16] = v34[16];
    }
    else
    {
      uint64_t v36 = *(void *)v34;
      uint64_t v37 = *((void *)v34 + 1);
      MailboxPriorityInfo.mailboxPriorityOrder.getter();
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v37;
      v33[16] = v35 & 1;
    }
    *(void *)((char *)v6 + v7[16]) = *(void *)((char *)a2 + v7[16]);
    *(void *)((char *)v6 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t sub_1003C52FC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = sub_1005E0970();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  if (*(void *)(a1 + v2[7] + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + v2[15] + 16) != 255) {
    sub_10024EEEC();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1003C5468(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v7 = v6[6];
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000566C(&qword_100713D38);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *((void *)v15 + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v17;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *((void *)v14 + 3) = v16;
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    uint64_t v18 = *((void *)v15 + 7);
    *((void *)v14 + 6) = *((void *)v15 + 6);
    *((void *)v14 + 7) = v18;
    *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
    uint64_t v19 = *((void *)v15 + 11);
    *((void *)v14 + 10) = *((void *)v15 + 10);
    *((void *)v14 + 11) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *((_OWORD *)v15 + 3);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v20;
    long long v21 = *((_OWORD *)v15 + 5);
    *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
    *((_OWORD *)v14 + 5) = v21;
    long long v22 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v22;
  }
  uint64_t v23 = v6[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v6[9];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  *((unsigned char *)a1 + v6[13]) = *((unsigned char *)a2 + v6[13]);
  *((unsigned char *)a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
  uint64_t v31 = v6[15];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  int v34 = *((unsigned __int8 *)a2 + v31 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 == 255)
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    unsigned char v32[16] = v33[16];
  }
  else
  {
    uint64_t v35 = *(void *)v33;
    uint64_t v36 = *((void *)v33 + 1);
    MailboxPriorityInfo.mailboxPriorityOrder.getter();
    *(void *)uint64_t v32 = v35;
    *((void *)v32 + 1) = v36;
    unsigned char v32[16] = v34 & 1;
  }
  *(void *)((char *)a1 + v6[16]) = *(void *)((char *)a2 + v6[16]);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1003C5728(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000566C(&qword_100713D38);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = *(void *)((char *)a1 + v15 + 24);
  uint64_t v19 = *(void *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      *uint64_t v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16[2] = v17[2];
      v16[3] = v17[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v16[4] = v17[4];
      v16[5] = v17[5];
      v16[6] = v17[6];
      unsigned char v16[7] = v17[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v16[8] = v17[8];
      v16[9] = v17[9];
      _OWORD v16[10] = v17[10];
      v16[11] = v17[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1003C4094((uint64_t)v16);
      long long v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v20;
      long long v21 = *((_OWORD *)v17 + 5);
      long long v23 = *((_OWORD *)v17 + 2);
      long long v22 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
      *((_OWORD *)v16 + 5) = v21;
      *((_OWORD *)v16 + 2) = v23;
      *((_OWORD *)v16 + 3) = v22;
    }
  }
  else if (v19)
  {
    *uint64_t v16 = *v17;
    v16[1] = v17[1];
    v16[2] = v17[2];
    v16[3] = v17[3];
    void v16[4] = v17[4];
    v16[5] = v17[5];
    v16[6] = v17[6];
    unsigned char v16[7] = v17[7];
    char v16[8] = v17[8];
    v16[9] = v17[9];
    _OWORD v16[10] = v17[10];
    v16[11] = v17[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v24;
    long long v25 = *((_OWORD *)v17 + 2);
    long long v26 = *((_OWORD *)v17 + 3);
    long long v27 = *((_OWORD *)v17 + 5);
    *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
    *((_OWORD *)v16 + 5) = v27;
    *((_OWORD *)v16 + 2) = v25;
    *((_OWORD *)v16 + 3) = v26;
  }
  uint64_t v28 = v5[8];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = v5[9];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + v5[11]) = *(_WORD *)((char *)a2 + v5[11]);
  *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
  *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
  *((unsigned char *)a1 + v5[14]) = *((unsigned char *)a2 + v5[14]);
  uint64_t v34 = v5[15];
  uint64_t v35 = (uint64_t)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  int v37 = *((unsigned __int8 *)a1 + v34 + 16);
  int v38 = *((unsigned __int8 *)a2 + v34 + 16);
  if (v37 == 255)
  {
    if (v38 == 255)
    {
      long long v40 = *(_OWORD *)v36;
      *(unsigned char *)(v35 + 16) = v36[16];
      *(_OWORD *)uint64_t v35 = v40;
    }
    else
    {
      char v44 = v38 & 1;
      uint64_t v45 = *(void *)v36;
      uint64_t v46 = *((void *)v36 + 1);
      MailboxPriorityInfo.mailboxPriorityOrder.getter();
      *(void *)uint64_t v35 = v45;
      *(void *)(v35 + 8) = v46;
      *(unsigned char *)(v35 + 16) = v44;
    }
  }
  else if (v38 == 255)
  {
    sub_1003C40E8(v35);
    char v39 = v36[16];
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *(unsigned char *)(v35 + 16) = v39;
  }
  else
  {
    char v41 = v38 & 1;
    uint64_t v42 = *(void *)v36;
    uint64_t v43 = *((void *)v36 + 1);
    MailboxPriorityInfo.mailboxPriorityOrder.getter();
    *(void *)uint64_t v35 = v42;
    *(void *)(v35 + 8) = v43;
    *(unsigned char *)(v35 + 16) = v41;
    sub_10024EEEC();
  }
  *(void *)((char *)a1 + v5[16]) = *(void *)((char *)a2 + v5[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1003C5BF8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1005E0970();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000566C(&qword_100713D38);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  long long v16 = v15[3];
  v14[2] = v15[2];
  void v14[3] = v16;
  long long v17 = v15[5];
  v14[4] = v15[4];
  v14[5] = v17;
  long long v18 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v18;
  *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
  *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
  *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
  *(_WORD *)((char *)a1 + v6[11]) = *(_WORD *)((char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  *((unsigned char *)a1 + v6[13]) = *((unsigned char *)a2 + v6[13]);
  *((unsigned char *)a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
  uint64_t v19 = v6[15];
  long long v20 = (char *)a1 + v19;
  long long v21 = (char *)a2 + v19;
  *(_OWORD *)long long v20 = *(_OWORD *)v21;
  v20[16] = v21[16];
  *(void *)((char *)a1 + v6[16]) = *(void *)((char *)a2 + v6[16]);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1003C5DD4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for IndexableMessageInfo(0);
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000566C(&qword_100713D38);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[7];
  uint64_t v16 = (uint64_t)a1 + v15;
  long long v17 = (char *)a2 + v15;
  if (*(void *)((char *)a1 + v15 + 24))
  {
    if (*((void *)v17 + 3))
    {
      uint64_t v18 = *((void *)v17 + 1);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *((void *)v17 + 3);
      *(void *)(v16 + 16) = *((void *)v17 + 2);
      *(void *)(v16 + 24) = v19;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
      uint64_t v20 = *((void *)v17 + 7);
      *(void *)(v16 + 48) = *((void *)v17 + 6);
      *(void *)(v16 + 56) = v20;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
      uint64_t v21 = *((void *)v17 + 11);
      *(void *)(v16 + 80) = *((void *)v17 + 10);
      *(void *)(v16 + 88) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1003C4094(v16);
  }
  long long v22 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
  *(_OWORD *)(v16 + 48) = v22;
  long long v23 = *((_OWORD *)v17 + 5);
  *(_OWORD *)(v16 + 64) = *((_OWORD *)v17 + 4);
  *(_OWORD *)(v16 + 80) = v23;
  long long v24 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v24;
LABEL_12:
  uint64_t v25 = v5[8];
  long long v26 = (void *)((char *)a1 + v25);
  long long v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *long long v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = v5[9];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
  swift_bridgeObjectRelease();
  *(_WORD *)((char *)a1 + v5[11]) = *(_WORD *)((char *)a2 + v5[11]);
  *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
  *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
  *((unsigned char *)a1 + v5[14]) = *((unsigned char *)a2 + v5[14]);
  uint64_t v35 = v5[15];
  uint64_t v36 = (uint64_t)a1 + v35;
  int v37 = (char *)a2 + v35;
  if (*((unsigned __int8 *)a1 + v35 + 16) != 255)
  {
    int v38 = v37[16];
    if (v38 != 255)
    {
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      *(unsigned char *)(v36 + 16) = v38 & 1;
      sub_10024EEEC();
      goto LABEL_17;
    }
    sub_1003C40E8(v36);
  }
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  *(unsigned char *)(v36 + 16) = v37[16];
LABEL_17:
  *(void *)((char *)a1 + v5[16]) = *(void *)((char *)a2 + v5[16]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003C611C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C6130);
}

uint64_t sub_1003C6130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexableMessageInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003C61F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C6204);
}

uint64_t sub_1003C6204(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1003C62C0()
{
  uint64_t result = type metadata accessor for IndexableMessageInfo(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t InternetMessageDate.parse()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1003C7B08(a1, a2, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1005E0970();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1003C64C8(a1, a2, a3);
    return sub_100007A48((uint64_t)v7, &qword_100713D38);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(a3, v7, v8);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
  }
}

uint64_t sub_1003C64C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v49 = a1;
  sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v41 - v7;
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  char v44 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v13 = (char *)&v41 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = qword_100713A08;
  uint64_t v50 = a2;
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = *((void *)off_100713EC8 + 2);
  if (!v17) {
    goto LABEL_17;
  }
  uint64_t v42 = v15;
  uint64_t v43 = v10;
  uint64_t v46 = a3;
  uint64_t v47 = v6;
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v20 = v45 + 40;
  do
  {
    swift_bridgeObjectRetain();
    id v21 = sub_1003C7FD0();
    NSString v22 = sub_1005E1BD0();
    swift_bridgeObjectRelease();
    [v21 setDateFormat:v22];

    [v21 setLenient:0];
    NSString v23 = sub_1005E1BD0();
    id v24 = [v21 dateFromString:v23];

    if (v24)
    {
      sub_1005E0950();

      uint64_t v25 = *v48;
      (*v48)(v8, v13, v9);
      long long v26 = *v18;
      (*v18)(v8, 0, 1, v9);
      if ((*v19)(v8, 1, v9) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v27 = v42;
        v25(v42, v8, v9);
        uint64_t v28 = v46;
        v25(v46, v27, v9);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v26)(v28, 0, 1, v9);
      }
    }
    else
    {

      (*v18)(v8, 1, 1, v9);
    }
    v20 += 16;
    sub_100007A48((uint64_t)v8, &qword_100713D38);
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)off_100713EC8 + 2);
  a3 = v46;
  uint64_t v10 = v43;
  if (v30)
  {
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v31 = v45 + 40;
    do
    {
      swift_bridgeObjectRetain();
      id v34 = sub_1003C7FD0();
      NSString v35 = sub_1005E1BD0();
      swift_bridgeObjectRelease();
      [v34 setDateFormat:v35];

      [v34 setLenient:1];
      NSString v36 = sub_1005E1BD0();
      id v37 = [v34 dateFromString:v36];

      if (v37)
      {
        sub_1005E0950();

        uint64_t v33 = (uint64_t)v47;
        int v38 = *v48;
        (*v48)(v47, v13, v9);
        uint64_t v32 = *v18;
        (*v18)((char *)v33, 0, 1, v9);
        if ((*v19)((char *)v33, 1, v9) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v39 = v44;
          v38(v44, (char *)v33, v9);
          long long v40 = v46;
          v38(v46, v39, v9);
          return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v32)(v40, 0, 1, v9);
        }
      }
      else
      {

        uint64_t v32 = *v18;
        uint64_t v33 = (uint64_t)v47;
        (*v18)(v47, 1, 1, v9);
      }
      v31 += 16;
      sub_100007A48(v33, &qword_100713D38);
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v32)(v46, 1, 1, v9);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, 1, 1, v9);
  }
}

uint64_t InternetMessageDate.init(from:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003C6B3C(a2);
  uint64_t v5 = sub_1005E0A40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  uint64_t v6 = sub_1005E0970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return v4;
}

uint64_t sub_1003C6B3C(uint64_t a1)
{
  uint64_t v2 = sub_1005E2150();
  *(void *)(v2 + 16) = 80;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  sub_1003C6C68(a1, (uint64_t)&v6);
  sub_1003C7294(v2 + 32, &v6, 0x50uLL, &v5);
  if (v5 && *(void *)(v2 + 16) >= v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1005E1E60();
    swift_bridgeObjectRelease_n();
    return v3;
  }
  else
  {
    uint64_t result = sub_1005E2F20();
    __break(1u);
  }
  return result;
}

uint64_t sub_1003C6C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a1;
  sub_10000566C(&qword_100713EE0);
  __chkstk_darwin();
  uint64_t v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1005E0B20();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin();
  uint64_t v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1005E0630();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100713EE8);
  uint64_t v9 = sub_1005E0A30();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1005F6A00;
  uint64_t v14 = *(void (**)(unint64_t, void, uint64_t))(v10 + 104);
  v14(v13 + v12, enum case for Calendar.Component.second(_:), v9);
  v14(v13 + v12 + v11, enum case for Calendar.Component.minute(_:), v9);
  v14(v13 + v12 + 2 * v11, enum case for Calendar.Component.hour(_:), v9);
  v14(v13 + v12 + 3 * v11, enum case for Calendar.Component.day(_:), v9);
  v14(v13 + v12 + 4 * v11, enum case for Calendar.Component.month(_:), v9);
  v14(v13 + v12 + 5 * v11, enum case for Calendar.Component.year(_:), v9);
  v14(v13 + v12 + 6 * v11, enum case for Calendar.Component.weekday(_:), v9);
  v14(v13 + v12 + 7 * v11, enum case for Calendar.Component.timeZone(_:), v9);
  sub_1003C8394(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1005E0A00();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1005E05F0();
  if (v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = result;
  }
  if (v17 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v17 > 0x7FFFFFFF)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t result = sub_1005E05E0();
  if (v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = result;
  }
  if (v19 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_44;
  }
  if (v19 > 0x7FFFFFFF)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t result = sub_1005E05B0();
  if (v20) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = result;
  }
  if (v21 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_46;
  }
  if (v21 > 0x7FFFFFFF)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t result = sub_1005E05A0();
  if (v22) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = result;
  }
  if (v23 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_48;
  }
  if (v23 > 0x7FFFFFFF)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t result = sub_1005E05D0();
  if (v24) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = result;
  }
  if (v25 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_50;
  }
  if (v25 > 0x7FFFFFFF)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  int v26 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t result = sub_1005E05C0();
  uint64_t v28 = 100;
  if ((v27 & 1) == 0) {
    uint64_t v28 = result;
  }
  if (v28 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_53;
  }
  if (v28 > 0x7FFFFFFF)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  int v29 = v28 - 1900;
  if (__OFSUB__(v28, 1900))
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t result = sub_1005E0600();
  if (v30) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = result;
  }
  if (v31 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_56;
  }
  if (v31 > 0x7FFFFFFF)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  BOOL v32 = __OFSUB__(v31, 1);
  int v33 = v31 - 1;
  if (v32)
  {
LABEL_58:
    __break(1u);
    return result;
  }
  int v50 = v33;
  LODWORD(v56) = v29;
  id v34 = v55;
  sub_1005E0620();
  uint64_t v35 = (uint64_t)v34;
  uint64_t v36 = v53;
  id v37 = v34;
  uint64_t v38 = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v37, 1, v54) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v52);
    uint64_t result = sub_100007A48(v35, &qword_100713EE0);
    uint64_t v39 = 0;
  }
  else
  {
    long long v40 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
    uint64_t v48 = a2;
    int v41 = v23;
    int v42 = v21;
    int v43 = v19;
    int v44 = v26;
    int v45 = v17;
    uint64_t v17 = (uint64_t)v49;
    v40(v49, v35, v38);
    uint64_t v39 = sub_1005E0AF0();
    uint64_t v46 = v17;
    LODWORD(v17) = v45;
    int v26 = v44;
    LODWORD(v19) = v43;
    LODWORD(v21) = v42;
    LODWORD(v23) = v41;
    a2 = v48;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v46, v38);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v8, v52);
  }
  *(_DWORD *)a2 = v17;
  *(_DWORD *)(a2 + 4) = v19;
  *(_DWORD *)(a2 + 8) = v21;
  *(_DWORD *)(a2 + 12) = v23;
  int v47 = v56;
  *(_DWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 20) = v47;
  *(_DWORD *)(a2 + 24) = v50;
  *(void *)(a2 + 28) = 0xFFFFFFFF00000000;
  *(void *)(a2 + 40) = v39;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_1003C7294@<X0>(uint64_t result@<X0>, tm *a2@<X2>, size_t a3@<X1>, uint64_t *a4@<X8>)
{
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v6 = (char *)result;
  if (qword_100713A00 != -1) {
    swift_once();
  }
  uint64_t result = strftime_l(v6, a3, "%a, %d %b %Y %H:%M:%S %z", a2, (locale_t)qword_100713EC0);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v8 = result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = a2->tm_gmtoff / 60 % 60 + 100 * (a2->tm_gmtoff / 3600);
    sub_10000566C(&qword_100713ED8);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1005F6670;
    *(void *)(result + 56) = &type metadata for Int32;
    *(void *)(result + 64) = &protocol witness table for Int32;
    if (v9 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v9 <= 0x7FFFFFFF)
      {
        *(_DWORD *)(result + 32) = v9;
        int v10 = sub_1005E1070();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v11 = v8 + v10;
        if (!__OFADD__(v8, v10)) {
          goto LABEL_12;
        }
        __break(1u);
LABEL_11:
        uint64_t v11 = 0;
LABEL_12:
        *a4 = v11;
        return result;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

locale_t sub_1003C743C()
{
  locale_t result = newlocale(63, 0, 0);
  if (result) {
    qword_100713EC0 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003C7470@<X0>(const char *a1@<X0>, char *a2@<X8>)
{
  int v47 = a1;
  sub_1005E04E0();
  uint64_t v4 = sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1005E0970();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  int v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  long long v40 = (char *)v33 - v11;
  __chkstk_darwin();
  uint64_t v38 = (char *)v33 - v12;
  if (qword_100713A10 != -1) {
    swift_once();
  }
  uint64_t v13 = *((void *)off_100713ED0 + 2);
  if (!v13) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
  }
  uint64_t v39 = v10;
  v33[1] = v4;
  uint64_t v36 = a2;
  uint64_t v37 = v2;
  int v42 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  int v43 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  p_tm_gmtoff = &v54.tm_gmtoff;
  uint64_t v34 = v8;
  int v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v14 = (unint64_t *)(v35 + 40);
  uint64_t v15 = v38;
  while (1)
  {
    uint64_t v16 = *(v14 - 1);
    unint64_t v17 = *v14;
    __chkstk_darwin();
    v33[-4] = v47;
    v33[-3] = v16;
    v33[-2] = v17;
    if ((v17 & 0x1000000000000000) != 0) {
      goto LABEL_33;
    }
    if ((v17 & 0x2000000000000000) != 0)
    {
      *(void *)uint64_t v52 = v16;
      uint64_t v53 = v17 & 0xFFFFFFFFFFFFFFLL;
      memset(&v54, 0, 36);
      uint64_t v23 = p_tm_gmtoff;
      uint64_t *p_tm_gmtoff = 0;
      v23[1] = 0;
      swift_bridgeObjectRetain();
      char v24 = strptime_l(v47, v52, &v54, 0);
      if (!v24)
      {
LABEL_20:
        uint64_t v27 = 1;
LABEL_29:
        (*v46)(v6, v27, 1, v7);
        goto LABEL_30;
      }
      uint64_t v25 = v24;
      mktime(&v54);
      int v26 = v39;
      sub_1005E0920();
      if (*v25)
      {
        uint64_t v50 = v16;
        unint64_t v51 = v17;
        uint64_t v48 = 31269;
        unint64_t v49 = 0xE200000000000000;
        sub_1003AE8A4();
        if ((sub_1005E29C0() & 1) == 0 || (sub_1003C7DA8() & 1) == 0)
        {
          (*v42)(v39, v7);
          uint64_t v27 = 1;
LABEL_25:
          uint64_t v15 = v38;
          goto LABEL_29;
        }
        (*v43)(v6, v39, v7);
      }
      else
      {
        (*v43)(v6, v26, v7);
      }
      uint64_t v27 = 0;
      goto LABEL_25;
    }
    if ((v16 & 0x1000000000000000) != 0)
    {
      memset(&v54, 0, 36);
      char v18 = p_tm_gmtoff;
      uint64_t *p_tm_gmtoff = 0;
      v18[1] = 0;
      swift_bridgeObjectRetain();
      uint64_t v19 = strptime_l(v47, (const char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32), &v54, 0);
      if (v19)
      {
        char v20 = v19;
        int v41 = v33;
        uint64_t v21 = v15;
        mktime(&v54);
        char v22 = v40;
        sub_1005E0920();
        if (*v20)
        {
          *(void *)uint64_t v52 = v16;
          uint64_t v53 = v17;
          uint64_t v50 = 31269;
          unint64_t v51 = 0xE200000000000000;
          sub_1003AE8A4();
          if ((sub_1005E29C0() & 1) == 0 || (sub_1003C7DA8() & 1) == 0)
          {
            (*v42)(v40, v7);
            uint64_t v27 = 1;
LABEL_28:
            uint64_t v15 = v21;
            goto LABEL_29;
          }
          (*v43)(v6, v40, v7);
        }
        else
        {
          (*v43)(v6, v22, v7);
        }
        uint64_t v27 = 0;
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v30 = v37;
    sub_1005E2C50();
    uint64_t v37 = v30;
LABEL_30:
    swift_bridgeObjectRelease();
    if ((*v45)(v6, 1, v7) != 1) {
      break;
    }
    sub_100007A48((uint64_t)v6, &qword_100713D38);
LABEL_6:
    v14 += 2;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      a2 = v36;
      uint64_t v8 = v34;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, 1, 1, v7);
    }
  }
  uint64_t v28 = *v43;
  (*v43)(v15, v6, v7);
  sub_1005E08F0();
  if (v29 <= -900000000.0)
  {
    (*v42)(v15, v7);
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  BOOL v32 = v36;
  v28(v36, v15, v7);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))*v46)(v32, 0, 1, v7);
}

uint64_t sub_1003C7B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_8;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v5[0] = a1;
    v5[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = (const char *)v5;
    return sub_1003C7470(v3, a3);
  }
  if ((a1 & 0x1000000000000000) == 0)
  {
LABEL_8:
    sub_10000566C(&qword_100713D38);
    return sub_1005E2C50();
  }
  uint64_t v3 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  return sub_1003C7470(v3, a3);
}

uint64_t sub_1003C7BB4@<X0>(const char *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1005E0970();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(&v19, 0, 36);
  v19.tm_gmtoff = 0;
  v19.tm_zone = 0;
  uint64_t v14 = strptime_l(a2, a1, &v19, 0);
  if (!v14) {
    goto LABEL_7;
  }
  uint64_t v15 = v14;
  mktime(&v19);
  sub_1005E0920();
  if (*v15)
  {
    _OWORD v18[2] = a3;
    v18[3] = a4;
    v18[0] = 31269;
    v18[1] = 0xE200000000000000;
    sub_1003AE8A4();
    if ((sub_1005E29C0() & 1) == 0 || (sub_1003C7DA8() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_7:
      uint64_t v16 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, v16, 1, v10);
    }
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
  uint64_t v16 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, v16, 1, v10);
}

id sub_1003C7DA8()
{
  uint64_t v0 = sub_1005E04E0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005E1E50();
  id v4 = objc_allocWithZone((Class)NSScanner);
  NSString v5 = sub_1005E1BD0();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithString:v5];

  v17._uint64_t countAndFlagsBits = 40;
  v17._object = (void *)0xE100000000000000;
  sub_1005E2890(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 40;
  v18._object = (void *)0xE100000000000000;
  sub_1005E2870(v18);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_5;
  }
  sub_1005E04B0();
  sub_1005E2880();
  uint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v3, v0);
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_5;
  }
  v19._uint64_t countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  sub_1005E2870(v19);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    sub_1005E04C0();
    sub_1005E2880();
    swift_bridgeObjectRelease();
    v11(v3, v0);
    id v14 = [v6 isAtEnd];
  }
  else
  {
LABEL_5:

    return 0;
  }
  return v14;
}

void sub_1003C7F88()
{
  off_100713EC8 = &off_1006EAB30;
}

void sub_1003C7F9C()
{
  off_100713ED0 = &off_1006EB198;
}

uint64_t sub_1003C7FB0@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003C7BB4(a1, *(const char **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

id sub_1003C7FD0()
{
  sub_10000566C(&qword_100713EE0);
  __chkstk_darwin();
  uint64_t v1 = (char *)v21 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1005E09D0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  NSString v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C8730(0, &qword_100713F08);
  id v6 = (void *)sub_1005E2860();
  uint64_t v7 = self;
  id v8 = [v7 currentThread];
  id v9 = [v8 threadDictionary];

  id v10 = v6;
  id v11 = [v9 objectForKeyedSubscript:v10];

  if (v11)
  {
    sub_1005E2A70();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  sub_1003C86C8((uint64_t)v22, (uint64_t)v23);
  if (v24)
  {
    sub_1003C8730(0, &qword_100713F18);
    if (swift_dynamicCast())
    {

      return (id)v21[1];
    }
  }
  else
  {
    sub_100007A48((uint64_t)v23, &qword_100713F10);
  }
  id v12 = [objc_allocWithZone((Class)NSDateFormatter) init];
  sub_1005E09B0();
  Class isa = sub_1005E09C0().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v12 setLocale:isa];

  sub_1005E0B00();
  uint64_t v14 = sub_1005E0B20();
  uint64_t v15 = *(void *)(v14 - 8);
  Class v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v1, 1, v14) != 1)
  {
    Class v16 = sub_1005E0B10().super.isa;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v1, v14);
  }
  [v12 setTimeZone:v16];

  id v17 = [v7 currentThread];
  id v18 = [v17 threadDictionary];

  id v19 = v10;
  [v18 setObject:v12 forKeyedSubscript:v19];

  return v12;
}

void *sub_1003C8394(uint64_t a1)
{
  uint64_t v2 = sub_1005E0A30();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  NSString v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v29 - v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    sub_10000566C(&qword_100713EF0);
    uint64_t v8 = sub_1005E2C30();
    uint64_t v9 = 0;
    id v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v10 = v3 + 16;
    uint64_t v34 = v11;
    uint64_t v35 = v8 + 56;
    uint64_t v12 = *(unsigned __int8 *)(v10 + 64);
    uint64_t v31 = v7;
    uint64_t v32 = a1 + ((v12 + 32) & ~v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 - 8);
    uint64_t v30 = (uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 16);
    while (1)
    {
      uint64_t v33 = v9;
      v34(v36, v32 + v13 * v9, v2);
      sub_1003C8684(&qword_100713EF8);
      uint64_t v15 = sub_1005E19B0();
      uint64_t v16 = ~(-1 << *(unsigned char *)(v8 + 32));
      unint64_t v17 = v15 & v16;
      unint64_t v18 = (v15 & (unint64_t)v16) >> 6;
      uint64_t v19 = *(void *)(v35 + 8 * v18);
      uint64_t v20 = 1 << (v15 & v16);
      if ((v20 & v19) != 0)
      {
        while (1)
        {
          uint64_t v21 = v10;
          v34(v5, *(void *)(v8 + 48) + v17 * v13, v2);
          sub_1003C8684(&qword_100713F00);
          char v22 = sub_1005E1BC0();
          uint64_t v23 = *v14;
          (*v14)(v5, v2);
          if (v22) {
            break;
          }
          unint64_t v17 = (v17 + 1) & v16;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v35 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          uint64_t v10 = v21;
          if ((v19 & (1 << v17)) == 0) {
            goto LABEL_8;
          }
        }
        v23(v36, v2);
        uint64_t v10 = v21;
      }
      else
      {
LABEL_8:
        uint64_t v24 = v36;
        *(void *)(v35 + 8 * v18) = v20 | v19;
        locale_t result = (void *)(*v30)(*(void *)(v8 + 48) + v17 * v13, v24, v2);
        uint64_t v26 = *(void *)(v8 + 16);
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27)
        {
          __break(1u);
          return result;
        }
        *(void *)(v8 + 16) = v28;
      }
      uint64_t v9 = v33 + 1;
      if (v33 + 1 == v31) {
        return (void *)v8;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1003C8684(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1005E0A30();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003C86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C8730(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeInternetMessageDate()
{
  return &type metadata for UnsafeInternetMessageDate;
}

uint64_t sub_1003C877C(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      char v1 = 13;
    }
    else {
      char v1 = 10;
    }
    char v5 = v1;
    uint64_t v2 = &v5;
    uint64_t v3 = (char *)v6;
    uint64_t v7 = &type metadata for UnsafeRawBufferPointer;
    uint64_t v8 = &protocol witness table for UnsafeRawBufferPointer;
  }
  else
  {
    uint64_t v7 = &type metadata for UnsafeRawBufferPointer;
    uint64_t v8 = &protocol witness table for UnsafeRawBufferPointer;
    uint64_t v2 = "\r\n";
    uint64_t v3 = "";
  }
  v6[0] = v2;
  v6[1] = v3;
  sub_10003BCDC(v6, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  sub_1005E0870();
  return _s13IMAP2Behavior4TaskOwxx_0((uint64_t)v6);
}

uint64_t sub_1003C8850(char a1, uint64_t (*a2)(char *, char *))
{
  return sub_1003C88A8(a1, a2);
}

uint64_t sub_1003C88A8(char a1, uint64_t (*a2)(char *, char *))
{
  if (a1)
  {
    if (a1 == 1)
    {
      char v6 = 13;
      uint64_t v3 = &v7;
      uint64_t v4 = &v6;
    }
    else
    {
      char v7 = 10;
      uint64_t v3 = (char *)&v8;
      uint64_t v4 = &v7;
    }
  }
  else
  {
    uint64_t v4 = "\r\n";
    uint64_t v3 = "";
  }
  return a2(v4, v3);
}

uint64_t Message.streamWithConvertedLineEndings(input:output:ensureTrailingNewline:_:)(unsigned int a1, int a2, char a3, void (*a4)(uint64_t, char *), uint64_t a5)
{
  uint64_t v11 = sub_1005E17E0();
  uint64_t v41 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v37 = a1;
  int v38 = a2;
  v48[16] = a1;
  v48[17] = a2;
  char v16 = a3;
  v48[18] = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  unint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t result = Message.isEmpty.getter();
  if (result) {
    return result;
  }
  sub_1003C96A4(v5, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v13, v15, v11);
    __chkstk_darwin();
    *(&v36 - 4) = (uint64_t)v13;
    *(&v36 - 3) = (uint64_t)sub_1003C8DB0;
    uint64_t v35 = v48;
    sub_1005E1760();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v11);
  }
  uint64_t v20 = *(void *)v15;
  unint64_t v19 = *((void *)v15 + 1);
  switch(v19 >> 62)
  {
    case 1uLL:
      if (v20 >> 32 < (int)v20)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      sub_100008D24(*(void *)v15, *((void *)v15 + 1));
      uint64_t v21 = sub_1005E0550();
      if (v21)
      {
        uint64_t v22 = sub_1005E0580();
        if (__OFSUB__((int)v20, v22)) {
          goto LABEL_37;
        }
        v21 += (int)v20 - v22;
      }
      uint64_t v23 = sub_1005E0570();
      if (v23 >= (v20 >> 32) - (int)v20) {
        uint64_t v24 = (v20 >> 32) - (int)v20;
      }
      else {
        uint64_t v24 = v23;
      }
      if (v21) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v25 < 0)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
      sub_1003C8E0C((char *)v37, v38, a3 & 1, v39, v40, 0, (char *)v25, v21);
      sub_1000094D4(v20, v19);
      return sub_1000094D4(v20, v19);
    case 2uLL:
      uint64_t v26 = *(void *)(v20 + 16);
      uint64_t v27 = *(void *)(v20 + 24);
      swift_retain();
      swift_retain();
      uint64_t v28 = sub_1005E0550();
      if (!v28) {
        goto LABEL_21;
      }
      uint64_t v29 = sub_1005E0580();
      if (__OFSUB__(v26, v29)) {
        goto LABEL_36;
      }
      v28 += v26 - v29;
LABEL_21:
      BOOL v30 = __OFSUB__(v27, v26);
      uint64_t v31 = v27 - v26;
      if (v30) {
        goto LABEL_33;
      }
      uint64_t v32 = sub_1005E0570();
      if (v32 >= v31) {
        uint64_t v33 = (char *)v31;
      }
      else {
        uint64_t v33 = (char *)v32;
      }
      if (v28) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      if (((unint64_t)v34 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      sub_1003C8E0C((char *)v37, v38, v16 & 1, v39, v40, 0, v34, v28);
      swift_release();
      swift_release();
      return sub_1000094D4(v20, v19);
    case 3uLL:
      return sub_1000094D4(v20, v19);
    default:
      uint64_t v42 = *(void *)v15;
      __int16 v43 = v19;
      char v44 = BYTE2(v19);
      char v45 = BYTE3(v19);
      char v46 = BYTE4(v19);
      char v47 = BYTE5(v19);
      sub_1003C8E0C((char *)v37, v38, a3 & 1, v39, v40, 0, (char *)BYTE6(v19), (uint64_t)&v42);
      return sub_1000094D4(v20, v19);
  }
}

char *sub_1003C8DB0(char *result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = (char *)(a2 - (void)result);
  }
  else {
    uint64_t v3 = 0;
  }
  if (((unint64_t)v3 & 0x8000000000000000) == 0) {
    return sub_1003C8E0C((char *)*(unsigned __int8 *)(v2 + 16), *(unsigned char *)(v2 + 17), *(unsigned char *)(v2 + 18), *(void (**)(uint64_t, char *))(v2 + 24), *(void *)(v2 + 32), 0, v3, (uint64_t)result);
  }
  __break(1u);
  return result;
}

char *sub_1003C8E0C(char *result, char a2, char a3, void (*a4)(uint64_t, char *), uint64_t a5, char *a6, char *a7, uint64_t a8)
{
  if (a6 == a7) {
    return result;
  }
  uint64_t v10 = (uint64_t)a6;
  if (a2 != 2)
  {
    if (a2 != 1) {
      goto LABEL_111;
    }
    char v62 = 13;
    uint64_t v13 = &v63;
    uint64_t v14 = result;
    while (2)
    {
      switch(v14)
      {
        case 1:
          if (!a8) {
            goto LABEL_164;
          }
          uint64_t v20 = a8 + v10;
          uint64_t result = (char *)memchr((void *)(a8 + v10), 13, (size_t)&a7[-v10]);
          if (!result) {
            goto LABEL_164;
          }
          uint64_t v21 = &result[-v20];
          if ((uint64_t)&result[-v20] < 0) {
            goto LABEL_164;
          }
          uint64_t v22 = v21 + 1;
          if (__OFADD__(v21, 1)) {
            goto LABEL_190;
          }
          if ((uint64_t)&a7[-v10] < (uint64_t)v22) {
            goto LABEL_164;
          }
          uint64_t v18 = &v21[v10];
          if (__OFADD__(v21, v10)) {
            goto LABEL_203;
          }
          unint64_t v19 = &v22[v10];
          if (__OFADD__(v22, v10)) {
            goto LABEL_204;
          }
          if ((uint64_t)v22 < (uint64_t)v21 || (uint64_t)v19 < (uint64_t)v18) {
            goto LABEL_226;
          }
          goto LABEL_50;
        case 2:
          if (!a8) {
            goto LABEL_164;
          }
          uint64_t v23 = a8 + v10;
          uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
          if (!result) {
            goto LABEL_164;
          }
          uint64_t v24 = &result[-v23];
          if ((uint64_t)&result[-v23] < 0) {
            goto LABEL_164;
          }
          uint64_t v25 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_191;
          }
          if ((uint64_t)&a7[-v10] < (uint64_t)v25) {
            goto LABEL_164;
          }
          uint64_t v18 = &v24[v10];
          if (__OFADD__(v24, v10)) {
            goto LABEL_205;
          }
          unint64_t v19 = &v25[v10];
          if (__OFADD__(v25, v10)) {
            goto LABEL_206;
          }
          if ((uint64_t)v25 < (uint64_t)v24 || (uint64_t)v19 < (uint64_t)v18) {
            goto LABEL_227;
          }
          goto LABEL_50;
        case 3:
          if (!a8) {
            goto LABEL_164;
          }
          uint64_t v26 = a8 + v10;
          uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
          if (!result) {
            goto LABEL_164;
          }
          uint64_t v27 = &result[-v26];
          if ((uint64_t)&result[-v26] < 0) {
            goto LABEL_164;
          }
          uint64_t v28 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_192;
          }
          if ((uint64_t)&a7[-v10] < (uint64_t)v28) {
            goto LABEL_164;
          }
          uint64_t v18 = &v27[v10];
          if (__OFADD__(v27, v10)) {
            goto LABEL_207;
          }
          unint64_t v19 = &v28[v10];
          if (__OFADD__(v28, v10)) {
            goto LABEL_208;
          }
          if ((uint64_t)v28 < (uint64_t)v27 || (uint64_t)v19 < (uint64_t)v18) {
            goto LABEL_228;
          }
          if (v10 >= (uint64_t)v18) {
            goto LABEL_50;
          }
          if ((uint64_t)v18 > (uint64_t)a7) {
            goto LABEL_237;
          }
          if (v18[a8 - 1] == 13) {
            --v18;
          }
LABEL_50:
          if ((uint64_t)v18 < v10)
          {
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
          }
          if ((uint64_t)v18 > (uint64_t)a7) {
            goto LABEL_183;
          }
          if (v18 != (char *)v10) {
            a4(a8 + v10, &v18[a8]);
          }
          uint64_t result = (char *)((uint64_t (*)(char *, char *))a4)(&v62, &v63);
          if ((uint64_t)v19 > (uint64_t)a7) {
            goto LABEL_186;
          }
          BOOL v29 = (uint64_t)v19 < v10;
          uint64_t v10 = (uint64_t)v19;
          if (!v29) {
            continue;
          }
          __break(1u);
          break;
        default:
          if (!a8) {
            goto LABEL_164;
          }
          uint64_t v15 = a8 + v10;
          uint64_t result = (char *)memmem((const void *)(a8 + v10), (size_t)&a7[-v10], "\r\n", 2uLL);
          if (!result) {
            goto LABEL_164;
          }
          char v16 = &result[-v15];
          if ((uint64_t)&result[-v15] < 0) {
            goto LABEL_164;
          }
          unint64_t v17 = v16 + 2;
          if (__OFADD__(v16, 2)) {
            goto LABEL_189;
          }
          if ((uint64_t)&a7[-v10] < (uint64_t)v17) {
            goto LABEL_164;
          }
          uint64_t v18 = &v16[v10];
          if (__OFADD__(v16, v10)) {
            goto LABEL_201;
          }
          unint64_t v19 = &v17[v10];
          if (__OFADD__(v17, v10)) {
            goto LABEL_202;
          }
          if ((uint64_t)v17 < (uint64_t)v16 || (uint64_t)v19 < (uint64_t)v18) {
            goto LABEL_225;
          }
          goto LABEL_50;
      }
      break;
    }
  }
  char v63 = 10;
  uint64_t v30 = result;
  while (2)
  {
    switch(v30)
    {
      case 1:
        if (!a8) {
          goto LABEL_169;
        }
        uint64_t v36 = a8 + v10;
        uint64_t result = (char *)memchr((void *)(a8 + v10), 13, (size_t)&a7[-v10]);
        if (!result) {
          goto LABEL_169;
        }
        unsigned int v37 = &result[-v36];
        if ((uint64_t)&result[-v36] < 0) {
          goto LABEL_169;
        }
        int v38 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          goto LABEL_194;
        }
        if ((uint64_t)&a7[-v10] < (uint64_t)v38) {
          goto LABEL_169;
        }
        uint64_t v34 = &v37[v10];
        if (__OFADD__(v37, v10)) {
          goto LABEL_211;
        }
        uint64_t v35 = &v38[v10];
        if (__OFADD__(v38, v10)) {
          goto LABEL_212;
        }
        if ((uint64_t)v38 < (uint64_t)v37 || (uint64_t)v35 < (uint64_t)v34) {
          goto LABEL_230;
        }
        goto LABEL_103;
      case 2:
        if (!a8) {
          goto LABEL_169;
        }
        uint64_t v39 = a8 + v10;
        uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
        if (!result) {
          goto LABEL_169;
        }
        uint64_t v40 = &result[-v39];
        if ((uint64_t)&result[-v39] < 0) {
          goto LABEL_169;
        }
        uint64_t v41 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          goto LABEL_195;
        }
        if ((uint64_t)&a7[-v10] < (uint64_t)v41) {
          goto LABEL_169;
        }
        uint64_t v34 = &v40[v10];
        if (__OFADD__(v40, v10)) {
          goto LABEL_213;
        }
        uint64_t v35 = &v41[v10];
        if (__OFADD__(v41, v10)) {
          goto LABEL_214;
        }
        if ((uint64_t)v41 < (uint64_t)v40 || (uint64_t)v35 < (uint64_t)v34) {
          goto LABEL_231;
        }
        goto LABEL_103;
      case 3:
        if (!a8) {
          goto LABEL_169;
        }
        uint64_t v42 = a8 + v10;
        uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
        if (!result) {
          goto LABEL_169;
        }
        __int16 v43 = &result[-v42];
        if ((uint64_t)&result[-v42] < 0) {
          goto LABEL_169;
        }
        char v44 = v43 + 1;
        if (__OFADD__(v43, 1)) {
          goto LABEL_196;
        }
        if ((uint64_t)&a7[-v10] < (uint64_t)v44) {
          goto LABEL_169;
        }
        uint64_t v34 = &v43[v10];
        if (__OFADD__(v43, v10)) {
          goto LABEL_215;
        }
        uint64_t v35 = &v44[v10];
        if (__OFADD__(v44, v10)) {
          goto LABEL_216;
        }
        if ((uint64_t)v44 < (uint64_t)v43 || (uint64_t)v35 < (uint64_t)v34) {
          goto LABEL_232;
        }
        if (v10 >= (uint64_t)v34) {
          goto LABEL_103;
        }
        if ((uint64_t)v34 > (uint64_t)a7) {
          goto LABEL_238;
        }
        if (v34[a8 - 1] == 13) {
          --v34;
        }
        goto LABEL_103;
      default:
        if (!a8) {
          goto LABEL_169;
        }
        uint64_t v31 = a8 + v10;
        uint64_t result = (char *)memmem((const void *)(a8 + v10), (size_t)&a7[-v10], "\r\n", 2uLL);
        if (!result) {
          goto LABEL_169;
        }
        uint64_t v32 = &result[-v31];
        if ((uint64_t)&result[-v31] < 0) {
          goto LABEL_169;
        }
        uint64_t v33 = v32 + 2;
        if (__OFADD__(v32, 2)) {
          goto LABEL_193;
        }
        if ((uint64_t)&a7[-v10] < (uint64_t)v33)
        {
LABEL_169:
          if (a7 == (char *)v10) {
            return result;
          }
          if (a8) {
            uint64_t result = (char *)((uint64_t (*)(uint64_t, char *))a4)(a8 + v10, &a7[a8]);
          }
          if ((a3 & 1) == 0) {
            return result;
          }
          char v60 = &v63;
          char v61 = (char *)&v64;
          return (char *)((uint64_t (*)(char *, char *))a4)(v60, v61);
        }
        uint64_t v34 = &v32[v10];
        if (__OFADD__(v32, v10)) {
          goto LABEL_209;
        }
        uint64_t v35 = &v33[v10];
        if (__OFADD__(v33, v10)) {
          goto LABEL_210;
        }
        if ((uint64_t)v33 < (uint64_t)v32 || (uint64_t)v35 < (uint64_t)v34) {
          goto LABEL_229;
        }
LABEL_103:
        if ((uint64_t)v34 < v10) {
          goto LABEL_181;
        }
        if ((uint64_t)v34 > (uint64_t)a7) {
          goto LABEL_184;
        }
        if (v34 != (char *)v10) {
          a4(a8 + v10, &v34[a8]);
        }
        uint64_t result = (char *)((uint64_t (*)(char *, uint64_t *))a4)(&v63, &v64);
        if ((uint64_t)v35 > (uint64_t)a7) {
          goto LABEL_187;
        }
        BOOL v29 = (uint64_t)v35 < v10;
        uint64_t v10 = (uint64_t)v35;
        if (!v29) {
          continue;
        }
        __break(1u);
LABEL_111:
        uint64_t v45 = result;
        uint64_t v13 = "\r\n";
        while (2)
        {
          switch(v45)
          {
            case 1:
              if (!a8) {
                goto LABEL_174;
              }
              uint64_t v51 = a8 + v10;
              uint64_t result = (char *)memchr((void *)(a8 + v10), 13, (size_t)&a7[-v10]);
              if (!result) {
                goto LABEL_174;
              }
              uint64_t v52 = &result[-v51];
              if ((uint64_t)&result[-v51] < 0) {
                goto LABEL_174;
              }
              uint64_t v53 = v52 + 1;
              if (__OFADD__(v52, 1)) {
                goto LABEL_198;
              }
              if ((uint64_t)&a7[-v10] < (uint64_t)v53) {
                goto LABEL_174;
              }
              unint64_t v49 = &v52[v10];
              if (__OFADD__(v52, v10)) {
                goto LABEL_219;
              }
              uint64_t v50 = &v53[v10];
              if (__OFADD__(v53, v10)) {
                goto LABEL_220;
              }
              if ((uint64_t)v53 < (uint64_t)v52 || (uint64_t)v50 < (uint64_t)v49) {
                goto LABEL_234;
              }
              goto LABEL_156;
            case 2:
              if (!a8) {
                goto LABEL_174;
              }
              uint64_t v54 = a8 + v10;
              uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
              if (!result) {
                goto LABEL_174;
              }
              uint64_t v55 = &result[-v54];
              if ((uint64_t)&result[-v54] < 0) {
                goto LABEL_174;
              }
              uint64_t v56 = v55 + 1;
              if (__OFADD__(v55, 1)) {
                goto LABEL_199;
              }
              if ((uint64_t)&a7[-v10] < (uint64_t)v56) {
                goto LABEL_174;
              }
              unint64_t v49 = &v55[v10];
              if (__OFADD__(v55, v10)) {
                goto LABEL_221;
              }
              uint64_t v50 = &v56[v10];
              if (__OFADD__(v56, v10)) {
                goto LABEL_222;
              }
              if ((uint64_t)v56 < (uint64_t)v55 || (uint64_t)v50 < (uint64_t)v49) {
                goto LABEL_235;
              }
              goto LABEL_156;
            case 3:
              if (!a8) {
                goto LABEL_174;
              }
              uint64_t v57 = a8 + v10;
              uint64_t result = (char *)memchr((void *)(a8 + v10), 10, (size_t)&a7[-v10]);
              if (!result) {
                goto LABEL_174;
              }
              uint64_t v58 = &result[-v57];
              if ((uint64_t)&result[-v57] < 0) {
                goto LABEL_174;
              }
              unint64_t v59 = v58 + 1;
              if (__OFADD__(v58, 1)) {
                goto LABEL_200;
              }
              if ((uint64_t)&a7[-v10] < (uint64_t)v59) {
                goto LABEL_174;
              }
              unint64_t v49 = &v58[v10];
              if (__OFADD__(v58, v10)) {
                goto LABEL_223;
              }
              uint64_t v50 = &v59[v10];
              if (__OFADD__(v59, v10)) {
                goto LABEL_224;
              }
              if ((uint64_t)v59 < (uint64_t)v58 || (uint64_t)v50 < (uint64_t)v49) {
                goto LABEL_236;
              }
              if (v10 >= (uint64_t)v49) {
                goto LABEL_156;
              }
              if ((uint64_t)v49 > (uint64_t)a7) {
                goto LABEL_239;
              }
              if (v49[a8 - 1] == 13) {
                --v49;
              }
              goto LABEL_156;
            default:
              if (!a8) {
                goto LABEL_174;
              }
              uint64_t v46 = a8 + v10;
              uint64_t result = (char *)memmem((const void *)(a8 + v10), (size_t)&a7[-v10], "\r\n", 2uLL);
              if (!result) {
                goto LABEL_174;
              }
              char v47 = &result[-v46];
              if ((uint64_t)&result[-v46] < 0) {
                goto LABEL_174;
              }
              uint64_t v48 = v47 + 2;
              if (__OFADD__(v47, 2)) {
                goto LABEL_197;
              }
              if ((uint64_t)&a7[-v10] < (uint64_t)v48)
              {
LABEL_174:
                if (a7 == (char *)v10) {
                  return result;
                }
                if (a8) {
                  uint64_t result = (char *)((uint64_t (*)(uint64_t, char *))a4)(a8 + v10, &a7[a8]);
                }
                if ((a3 & 1) == 0) {
                  return result;
                }
                char v61 = "";
                char v60 = "\r\n";
                return (char *)((uint64_t (*)(char *, char *))a4)(v60, v61);
              }
              unint64_t v49 = &v47[v10];
              if (__OFADD__(v47, v10)) {
                goto LABEL_217;
              }
              uint64_t v50 = &v48[v10];
              if (__OFADD__(v48, v10)) {
                goto LABEL_218;
              }
              if ((uint64_t)v48 < (uint64_t)v47 || (uint64_t)v50 < (uint64_t)v49) {
                goto LABEL_233;
              }
LABEL_156:
              if ((uint64_t)v49 < v10) {
                goto LABEL_182;
              }
              if ((uint64_t)v49 > (uint64_t)a7) {
                goto LABEL_185;
              }
              if (v49 != (char *)v10) {
                a4(a8 + v10, &v49[a8]);
              }
              uint64_t result = (char *)((uint64_t (*)(const char *, char *))a4)("\r\n", "");
              if ((uint64_t)v50 > (uint64_t)a7) {
                goto LABEL_188;
              }
              BOOL v29 = (uint64_t)v50 < v10;
              uint64_t v10 = (uint64_t)v50;
              if (!v29) {
                continue;
              }
              __break(1u);
LABEL_164:
              if (a7 != (char *)v10)
              {
                if (a8) {
                  uint64_t result = (char *)((uint64_t (*)(uint64_t, char *))a4)(a8 + v10, &a7[a8]);
                }
                if (a3)
                {
                  char v60 = &v62;
                  char v61 = v13;
                  return (char *)((uint64_t (*)(void, void))a4)(v60, v61);
                }
              }
              return result;
          }
        }
    }
  }
}

uint64_t sub_1003C96A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message.Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C9708(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return a3(a1, a1 + v5);
}

uint64_t sub_1003C976C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24);
  uint64_t v4 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return v3(a1, a1 + v4);
}

unint64_t sub_1003C97D4()
{
  unint64_t result = qword_100713F20;
  if (!qword_100713F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F20);
  }
  return result;
}

unint64_t sub_1003C982C()
{
  unint64_t result = qword_100713F28;
  if (!qword_100713F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InputLineEnding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C994CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputLineEnding()
{
  return &type metadata for InputLineEnding;
}

unsigned char *storeEnumTagSinglePayload for LineEnding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C9A50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineEnding()
{
  return &type metadata for LineEnding;
}

uint64_t sub_1003C9A88(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return sub_1003C9708(a1, a2, a3);
}

uint64_t static ListID.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_1005E3290();
  }
}

uint64_t sub_1003C9AC8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 - result;
  if (!result) {
    uint64_t v2 = 0;
  }
  if (v2 < 0)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    return result;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  while (1)
  {
    if (v3 >= v2)
    {
      __break(1u);
      goto LABEL_70;
    }
    int v4 = *(unsigned __int8 *)(result + v3);
    if (v4 == 34 || v4 == 60) {
      goto LABEL_10;
    }
    uint64_t v9 = v3 + 1;
    uint64_t v5 = v2;
    if (v3 + 1 == v2) {
      break;
    }
    if (v3 + 1 >= v2) {
      goto LABEL_81;
    }
    LODWORD(v5) = *(unsigned __int8 *)(result + v9);
    if (v5 != 34 && v5 != 60)
    {
      uint64_t v10 = v3;
      while (1)
      {
        uint64_t v5 = v10 + 2;
        if (__OFADD__(v10 + 1, 1)) {
          goto LABEL_72;
        }
        if (v2 < v5) {
          goto LABEL_73;
        }
        if (v5 < ++v10) {
          goto LABEL_74;
        }
        if (v5 == v2)
        {
          uint64_t v5 = v2;
          goto LABEL_18;
        }
        int v11 = *(unsigned __int8 *)(result + v5);
        if (v11 == 34 || v11 == 60) {
          goto LABEL_18;
        }
      }
    }
LABEL_23:
    uint64_t v3 = v9;
    if (v2 < v9) {
      goto LABEL_51;
    }
LABEL_10:
    if (v3 == v2) {
      return 0;
    }
    if (v3 >= v2) {
      goto LABEL_71;
    }
    LODWORD(v5) = *(unsigned __int8 *)(result + v3);
    if (v5 != 34) {
      goto LABEL_52;
    }
    uint64_t v6 = v3 + 1;
    uint64_t v7 = v2;
    if (v3 + 1 != v2)
    {
      if (v3 + 1 >= v2) {
        goto LABEL_80;
      }
      if (*(unsigned char *)(result + v6) == 34)
      {
        uint64_t v8 = v3 + 1;
      }
      else
      {
        uint64_t v8 = v2;
        if (v3 + 2 == v2)
        {
LABEL_26:
          if (v8 <= v3) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v3 + 2 >= v2) {
            goto LABEL_83;
          }
          uint64_t v8 = v3 + 2;
          if (*(unsigned char *)(result + v3 + 2) != 34)
          {
            while (1)
            {
              uint64_t v8 = v6 + 2;
              if (__OFADD__(v6 + 1, 1)) {
                goto LABEL_77;
              }
              if (v2 < v8) {
                goto LABEL_78;
              }
              if (v8 < ++v6) {
                goto LABEL_79;
              }
              if (v8 == v2)
              {
                uint64_t v8 = v2;
                goto LABEL_26;
              }
              if (*(unsigned char *)(result + v8) == 34) {
                goto LABEL_26;
              }
            }
          }
        }
      }
      if (v2 < v8) {
        goto LABEL_76;
      }
      uint64_t v7 = v2;
      if (v8 != v2)
      {
        if (v8 >= v2) {
          goto LABEL_82;
        }
        uint64_t v7 = v8 + 1;
      }
    }
    uint64_t v3 = v7;
    if (v7 == v2) {
      return 0;
    }
  }
LABEL_18:
  uint64_t v9 = v5;
  if (v5 >= v3) {
    goto LABEL_23;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  if (v5 == 60)
  {
    uint64_t v20 = v3 + 1;
    uint64_t v21 = v2;
    uint64_t v22 = result;
    unint64_t result = sub_1003CA998(0x3Eu);
    if (result != v12 && v20 != v21)
    {
      if (v20 >= v21) {
        goto LABEL_86;
      }
      if (*(unsigned char *)(v22 + v20) == 62)
      {
        uint64_t v15 = result;
        uint64_t v16 = v12;
        uint64_t v17 = v13;
        if (v13) {
          uint64_t v18 = v14 - v13;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = result;
        while (v19 < v16)
        {
          if (v15 < 0 || v19 >= v18) {
            goto LABEL_85;
          }
          if (*(unsigned __int8 *)(v17 + v19) - 127 < 0xFFFFFFA2)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          ++v19;
          v23._uint64_t countAndFlagsBits = sub_1005E1D80();
          sub_1005E1E20(v23);
          unint64_t result = swift_bridgeObjectRelease();
          if (v16 == v19) {
            return 0;
          }
        }
        goto LABEL_84;
      }
    }
  }
  return 0;
}

Swift::Int sub_1003C9DDC()
{
  return sub_1005E3470();
}

uint64_t sub_1003C9E38()
{
  swift_bridgeObjectRetain();
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003C9E90(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_1005E3290();
  }
}

unint64_t sub_1003C9EC4()
{
  unint64_t result = qword_100713F30;
  if (!qword_100713F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F30);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListID()
{
  return &type metadata for ListID;
}

size_t sub_1003C9F28(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  size_t v5 = a3;
  if (a2 == a1)
  {
LABEL_13:
    if (a3) {
      unint64_t v12 = a3 + a2;
    }
    else {
      unint64_t v12 = 0;
    }
    if (a3) {
      size_t v13 = a3 + a1;
    }
    else {
      size_t v13 = 0;
    }
    return sub_1003E2708(v13, v12);
  }
  uint64_t v8 = a4 - a3;
  if (!a3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = a1;
  while (1)
  {
    if (v9 >= a2)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (a1 < 0 || v9 >= v8) {
      goto LABEL_30;
    }
    int v10 = *(unsigned __int8 *)(a3 + v9);
    if (v10 == 13 || v10 == 10) {
      break;
    }
    if (a2 == ++v9) {
      goto LABEL_13;
    }
  }
  if (v8 < a2)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  if (a2 - a1 < 0) {
    goto LABEL_32;
  }
  if (a2 - a1 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    size_t v16 = sub_1003CB3E4((size_t)&v18 - v15, a1, a2, v5);
    if (v4) {
      swift_willThrow();
    }
    else {
      return v16;
    }
  }
  else
  {
    size_t v17 = swift_slowAlloc();
    size_t v5 = sub_1003CB3E4(v17, a1, a2, v5);
    swift_slowDealloc();
  }
  return v5;
}

uint64_t sub_1003CA0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  if (a2 == a1)
  {
LABEL_13:
    if (a3) {
      unint64_t v12 = (unsigned __int8 *)(a3 + a2);
    }
    else {
      unint64_t v12 = 0;
    }
    if (a3) {
      size_t v13 = (unsigned __int8 *)(a3 + a1);
    }
    else {
      size_t v13 = 0;
    }
    sub_1003A9CC4(v13, v12, &v20);
    if (!v4) {
      return v20;
    }
    return v5;
  }
  uint64_t v8 = a4 - a3;
  if (!a3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = a1;
  while (1)
  {
    if (v9 >= a2)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (a1 < 0 || v9 >= v8) {
      goto LABEL_33;
    }
    int v10 = *(unsigned __int8 *)(a3 + v9);
    if (v10 == 13 || v10 == 10) {
      break;
    }
    if (a2 == ++v9) {
      goto LABEL_13;
    }
  }
  if (v8 < a2)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  if (a2 - a1 < 0) {
    goto LABEL_35;
  }
  if (a2 - a1 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    sub_1003CB480((unsigned __int8 *)&v19 - v14, a1, a2, v5);
    if (v4) {
      swift_willThrow();
    }
    else {
      return v15;
    }
  }
  else
  {
    size_t v16 = (unsigned __int8 *)swift_slowAlloc();
    sub_1003CB480(v16, a1, a2, v5);
    if (!v4) {
      uint64_t v5 = v17;
    }
    swift_slowDealloc();
  }
  return v5;
}

uint64_t sub_1003CA2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a2 == a1)
  {
LABEL_13:
    if (a3) {
      uint64_t v15 = a3 + a2;
    }
    else {
      uint64_t v15 = 0;
    }
    if (a3) {
      uint64_t v16 = a3 + a1;
    }
    else {
      uint64_t v16 = 0;
    }
    return a5(v16, v15);
  }
  uint64_t v11 = a4 - a3;
  if (!a3) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a1;
  while (1)
  {
    if (v12 >= a2)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (a1 < 0 || v12 >= v11) {
      goto LABEL_29;
    }
    int v13 = *(unsigned __int8 *)(a3 + v12);
    if (v13 == 13 || v13 == 10) {
      break;
    }
    if (a2 == ++v12) {
      goto LABEL_13;
    }
  }
  if (v11 < a2)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  uint64_t v18 = a2 - a1;
  if (a2 - a1 < 0) {
    goto LABEL_31;
  }
  if (v18 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t result = sub_1003CB0D0((uint64_t)&v21 - v19, (uint64_t)&v21 + v18 - v19, a1, a2, a3, a4, a5);
    if (v5) {
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v20 = swift_slowAlloc();
    sub_1003CB0D0(v20, v20 + v18, a1, a2, a3, a4, a5);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_1003CA4E0(char a1)
{
  switch(a1)
  {
    case 1:
      goto LABEL_19;
    case 2:
      int64_t v8 = *v1;
      int64_t v10 = v1[1];
      if (*v1 == v10) {
        return 0;
      }
      if (*v1 >= v10) {
        goto LABEL_59;
      }
      if (*(unsigned char *)(v1[2] + v8) == 10) {
        goto LABEL_26;
      }
      return 0;
    case 3:
      int64_t v11 = *v1;
      int64_t v7 = v1[2];
      if (v7) {
        int64_t v12 = v1[3] - v7;
      }
      else {
        int64_t v12 = 0;
      }
      if (v11 < 0 || v12 < v11) {
        goto LABEL_54;
      }
      unint64_t v13 = v1[1];
      if ((v13 & 0x8000000000000000) != 0 || v12 < (uint64_t)v13) {
        goto LABEL_55;
      }
      if ((uint64_t)(v13 - v11) < 2)
      {
        if (v13 - v11 != 1) {
          return 0;
        }
        goto LABEL_45;
      }
      if (v13 <= v11)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      if (*(unsigned char *)(v7 + v11) == 13)
      {
        if (v11 + 1 >= v13)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (*(unsigned char *)(v7 + v11 + 1) == 10)
        {
          int64_t v7 = v11 + 2;
          if (__OFADD__(v11, 2))
          {
LABEL_69:
            __break(1u);
            goto LABEL_70;
          }
          if ((uint64_t)v13 < v7)
          {
LABEL_70:
            __break(1u);
            JUMPOUT(0x1003CA6FCLL);
          }
          if (v7 < v11)
          {
            __break(1u);
            goto LABEL_45;
          }
LABEL_50:
          int64_t *v1 = v7;
          return 1;
        }
      }
LABEL_45:
      if (v13 <= v11)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      if (*(unsigned char *)(v7 + v11) == 10)
      {
        int64_t v7 = v11 + 1;
        if (!__OFADD__(v11, 1))
        {
          if ((uint64_t)v13 >= v7)
          {
            if (v7 >= v11) {
              goto LABEL_50;
            }
            goto LABEL_63;
          }
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      return 0;
    default:
      int64_t v2 = *v1;
      int64_t v3 = v1[2];
      int64_t v4 = v1[3] - v3;
      if (!v3) {
        int64_t v4 = 0;
      }
      if (v2 < 0 || v4 < v2)
      {
        __break(1u);
      }
      else
      {
        int64_t v5 = v1[1];
        if ((v5 & 0x8000000000000000) == 0 && v4 >= v5)
        {
          if (v5 - v2 < 2) {
            return 0;
          }
          if (v5 <= (unint64_t)v2) {
            goto LABEL_57;
          }
          if (*(unsigned char *)(v3 + v2) != 13) {
            return 0;
          }
          int64_t v6 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
          if (v6 < v2 || v6 >= v5) {
            goto LABEL_65;
          }
          if (*(unsigned char *)(v3 + v6) != 10) {
            return 0;
          }
          int64_t v7 = v2 + 2;
          if (__OFADD__(v2, 2))
          {
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          if (v5 < v7)
          {
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
          if (v7 < v2)
          {
            __break(1u);
LABEL_19:
            int64_t v8 = *v1;
            int64_t v9 = v1[1];
            if (*v1 == v9) {
              return 0;
            }
            if (*v1 >= v9) {
              goto LABEL_58;
            }
            if (*(unsigned char *)(v1[2] + v8) != 13) {
              return 0;
            }
LABEL_26:
            int64_t v7 = v8 + 1;
          }
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
  }
}

void sub_1003CA70C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = *v0;
  if (*v0 == v2) {
    goto LABEL_7;
  }
  if (*v0 >= v2)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v5 = *v0;
  if (*(unsigned __int8 *)(v3 + v1) - 58 < 0xFFFFFFF6) {
    goto LABEL_7;
  }
  uint64_t v5 = v1 + 1;
  if (v1 + 1 == v2)
  {
LABEL_5:
    uint64_t v5 = v2;
LABEL_6:
    *uint64_t v0 = v5;
    if (v5 < v1) {
      goto LABEL_38;
    }
LABEL_7:
    if (v2 >= v5) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
  if (v1 + 1 >= v2)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if (*(unsigned __int8 *)(v3 + v5) - 58 >= 0xFFFFFFF6) {
    goto LABEL_28;
  }
  *uint64_t v0 = v5;
  if (v2 < v5)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t v12 = v1;
    while (1)
    {
      uint64_t v5 = v12 + 2;
      if (__OFADD__(v12 + 1, 1)) {
        goto LABEL_39;
      }
      if (v2 < v5) {
        goto LABEL_40;
      }
      if (v5 < ++v12) {
        goto LABEL_41;
      }
      if (v5 == v2) {
        goto LABEL_5;
      }
      if (*(unsigned __int8 *)(v3 + v5) - 58 < 0xFFFFFFF6) {
        goto LABEL_6;
      }
    }
  }
LABEL_8:
  uint64_t v6 = v5 - v1;
  if (v5 == v1) {
    return;
  }
  uint64_t v7 = v4 - v3;
  if (!v3) {
    uint64_t v7 = 0;
  }
  if (v1 < 0 || v7 < v1) {
    goto LABEL_43;
  }
  if (v5 < 0 || v7 < v5) {
    goto LABEL_44;
  }
  if (v6 > 8)
  {
    *uint64_t v0 = v1;
    return;
  }
  unint64_t v8 = 0;
  if (v3)
  {
    int64_t v9 = (unsigned __int8 *)(v3 + v1);
    while (is_mul_ok(v8, 0xAuLL))
    {
      int v10 = *v9 - 48;
      if ((v10 & 0xFFFFFF00) != 0) {
        goto LABEL_36;
      }
      BOOL v11 = __CFADD__(10 * v8, v10);
      unint64_t v8 = 10 * v8 + v10;
      if (v11) {
        goto LABEL_37;
      }
      ++v9;
      if (!--v6) {
        return;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
}

char *sub_1003CA88C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a1)
  {
    case 1:
      unsigned __int8 v8 = 13;
      return sub_1003CAAD0(v8, a2, a3, a4);
    case 2:
      unsigned __int8 v8 = 10;
      return sub_1003CAAD0(v8, a2, a3, a4);
    case 3:
      uint64_t result = sub_1003CAAD0(0xAu, a2, a3, a4);
      if ((v10 & 1) != 0 || (uint64_t)result <= a2) {
        return result;
      }
      if ((uint64_t)result > a3)
      {
        __break(1u);
        goto LABEL_14;
      }
      if (result[a4 - 1] != 13) {
        return result;
      }
      if (v9 < (uint64_t)(result - 1))
      {
LABEL_14:
        __break(1u);
        JUMPOUT(0x1003CA988);
      }
      return --result;
    default:
      return sub_1003CAA24("\r\n", 2uLL, a2, a3, a4);
  }
}

uint64_t sub_1003CA998(unsigned __int8 a1)
{
  uint64_t result = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = *v1;
  if (*v1 != v4)
  {
    if (*v1 >= v4)
    {
LABEL_16:
      __break(1u);
      return result;
    }
    uint64_t v6 = *v1;
    if (*(unsigned __int8 *)(v5 + result) != a1)
    {
      uint64_t v6 = *v1;
      while (1)
      {
        if (v4 <= v6)
        {
          __break(1u);
          goto LABEL_14;
        }
        if (v4 - 1 == v6) {
          break;
        }
        int v7 = *(unsigned __int8 *)(v5 + 1 + v6++);
        if (v7 == a1) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v1[1];
LABEL_10:
      uint64_t *v1 = v6;
      if (v6 >= result) {
        goto LABEL_11;
      }
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
LABEL_11:
  if (v4 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

char *sub_1003CAA24(void *__little, size_t __little_len, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a5) {
    return 0;
  }
  uint64_t v7 = a5 + a3;
  uint64_t v8 = a4 - a3;
  uint64_t result = (char *)memmem((const void *)(a5 + a3), a4 - a3, __little, __little_len);
  if (!result) {
    return result;
  }
  char v10 = &result[-v7];
  if ((uint64_t)&result[-v7] < 0) {
    return 0;
  }
  BOOL v11 = &v10[__little_len];
  if (__OFADD__(v10, __little_len))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < (uint64_t)v11) {
    return 0;
  }
  uint64_t result = &v10[a3];
  if (__OFADD__(v10, a3)) {
    goto LABEL_14;
  }
  if (__OFADD__(v11, a3))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if ((uint64_t)v11 < (uint64_t)v10 || (uint64_t)&v11[a3] < (uint64_t)result) {
    goto LABEL_16;
  }
  return result;
}

char *sub_1003CAAD0(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v5 = a4 + a2;
  uint64_t v6 = a3 - a2;
  uint64_t result = (char *)memchr((void *)(a4 + a2), a1, a3 - a2);
  if (!result) {
    return result;
  }
  uint64_t v8 = &result[-v5];
  if ((uint64_t)&result[-v5] < 0) {
    return 0;
  }
  uint64_t v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 < (uint64_t)v9) {
    return 0;
  }
  uint64_t result = &v8[a2];
  if (__OFADD__(v8, a2)) {
    goto LABEL_14;
  }
  if (__OFADD__(v9, a2))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if ((uint64_t)v9 < (uint64_t)v8 || (uint64_t)&v9[a2] < (uint64_t)result) {
    goto LABEL_16;
  }
  return result;
}

char *sub_1003CAB74(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a1)
  {
    case 1:
      uint64_t v7 = "\r\r";
      goto LABEL_5;
    case 2:
      uint64_t v7 = "\n\n";
LABEL_5:
      size_t v8 = 2;
      return sub_1003CAA24(v7, v8, a2, a3, a4);
    case 3:
      if (!a4) {
        return 0;
      }
      uint64_t v10 = a4 + a2;
      uint64_t v11 = a3 - a2;
      uint64_t v12 = (char *)memchr((void *)(a4 + a2), 10, a3 - a2);
      if (!v12) {
        return 0;
      }
      uint64_t v14 = &v12[-v10];
      if ((uint64_t)&v12[-v10] < 0) {
        return 0;
      }
      uint64_t v15 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_45;
      }
      if (v11 < (uint64_t)v15) {
        return 0;
      }
      uint64_t v9 = (uint64_t)&v14[a2];
      if (__OFADD__(v14, a2)) {
        goto LABEL_46;
      }
      uint64_t v17 = (uint64_t)&v15[a2];
      if (__OFADD__(v15, a2)) {
        goto LABEL_47;
      }
      if ((uint64_t)v15 < (uint64_t)v14 || v17 < v9) {
        goto LABEL_48;
      }
      if (v9 <= a2) {
        goto LABEL_22;
      }
      if (v9 > a3) {
        goto LABEL_50;
      }
      if (*(unsigned char *)(a4 + v9 - 1) == 13) {
        --v9;
      }
LABEL_22:
      if (v17 > a3) {
        goto LABEL_49;
      }
      if (v17 < a2) {
        goto LABEL_40;
      }
      break;
    default:
      uint64_t v7 = "\r\n\r\n";
      size_t v8 = 4;
      return sub_1003CAA24(v7, v8, a2, a3, a4);
  }
  while (1)
  {
    uint64_t v18 = a4 + v17;
    uint64_t v19 = (char *)memchr((void *)(a4 + v17), 10, a3 - v17);
    if (!v19) {
      return 0;
    }
    uint64_t v20 = &v19[-v18];
    if ((uint64_t)&v19[-v18] < 0) {
      return 0;
    }
    uint64_t v21 = (uint64_t)(v20 + 1);
    if (__OFADD__(v20, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (a3 - v17 < v21) {
      return 0;
    }
    uint64_t v22 = (uint64_t)&v20[v17];
    if (__OFADD__(v20, v17)) {
      goto LABEL_46;
    }
    uint64_t v13 = v21 + v17;
    if (__OFADD__(v21, v17)) {
      goto LABEL_47;
    }
    if (v21 < (uint64_t)v20 || v13 < v22) {
      goto LABEL_48;
    }
    if (v17 < v22)
    {
      if (v22 > a3) {
        goto LABEL_50;
      }
      if (*(unsigned char *)(a4 + v22 - 1) == 13) {
        --v22;
      }
    }
    if (v17 == v22) {
      goto LABEL_41;
    }
    if (v13 > a3) {
      goto LABEL_49;
    }
    uint64_t v9 = v22;
    BOOL v23 = __OFSUB__(v13, v17);
    v17 += v21;
    if (v21 < 0 != v23)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      if (v13 >= v9 && v13 <= a3)
      {
        if (v13 >= v17) {
          return (char *)v9;
        }
LABEL_52:
        __break(1u);
        JUMPOUT(0x1003CAD84);
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
  }
}

void sub_1003CAD94(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  long long v4 = 0uLL;
  if (*v1 == v3)
  {
LABEL_9:
    uint64_t v2 = 0;
    uint64_t v12 = 0;
    char v13 = 1;
LABEL_10:
    *(void *)a1 = v2;
    *(void *)(a1 + 8) = v12;
    *(_OWORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 32) = v13;
    return;
  }
  if (*v1 < v3)
  {
    long long v5 = *((_OWORD *)v1 + 1);
    uint64_t v6 = v1[2];
    int v7 = *(unsigned __int8 *)(v6 + v2);
    if ((v7 - 127) >= 0xFFFFFFA2)
    {
      unsigned int v8 = v7 - 34;
      BOOL v9 = v8 > 0x3B;
      uint64_t v10 = (1 << v8) & 0xE0000007F0024C1;
      if (v9 || v10 == 0)
      {
        uint64_t v14 = v2 + 1;
        uint64_t v15 = *v1;
        while (1)
        {
          uint64_t v12 = v14;
          if (v3 <= v14 - 1) {
            goto LABEL_24;
          }
          if (v3 == v14) {
            break;
          }
          ++v15;
          int v16 = *(unsigned __int8 *)(v6 + v14);
          if ((v16 - 127) < 0xFFFFFFA2)
          {
            uint64_t v12 = v15;
LABEL_19:
            uint64_t *v1 = v12;
            if (v2 == v12) {
              goto LABEL_9;
            }
            if (v12 >= v2)
            {
              char v13 = 0;
              long long v4 = v5;
              goto LABEL_10;
            }
            goto LABEL_25;
          }
          ++v14;
          unsigned int v17 = v16 - 34;
          BOOL v9 = v17 > 0x3B;
          uint64_t v18 = (1 << v17) & 0xE0000007F0024C1;
          if (!v9 && v18 != 0) {
            goto LABEL_19;
          }
        }
        uint64_t v12 = v1[1];
        goto LABEL_19;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_1003CAE94(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v7 = v1[1];
      if (*v1 == v7) {
        return 0;
      }
      uint64_t v8 = v7 - 1;
      if (__OFSUB__(v7, 1)) {
        goto LABEL_59;
      }
      uint64_t v9 = v1[2];
      uint64_t v10 = v1[3] - v9;
      if (!v9) {
        uint64_t v10 = 0;
      }
      BOOL v11 = v8 >= v7 || v8 < *v1;
      if (v11 || v8 < 0 || v8 >= v10) {
        goto LABEL_60;
      }
      if (*(unsigned char *)(v9 + v8) == 13) {
        goto LABEL_48;
      }
      return 0;
    case 2:
      uint64_t v12 = v1[1];
      if (*v1 == v12) {
        return 0;
      }
      uint64_t v8 = v12 - 1;
      if (__OFSUB__(v12, 1)) {
        goto LABEL_61;
      }
      uint64_t v13 = v1[2];
      uint64_t v14 = v1[3] - v13;
      if (!v13) {
        uint64_t v14 = 0;
      }
      BOOL v15 = v8 >= v12 || v8 < *v1;
      if (v15 || v8 < 0 || v8 >= v14) {
        goto LABEL_62;
      }
      if (*(unsigned char *)(v13 + v8) != 10) {
        return 0;
      }
      goto LABEL_48;
    case 3:
      uint64_t v16 = *v1;
      uint64_t v17 = v1[2];
      uint64_t v18 = v1[3];
      uint64_t v19 = v18 - v17;
      if (!v17) {
        uint64_t v19 = 0;
      }
      if (v16 < 0 || v19 < v16) {
        goto LABEL_56;
      }
      uint64_t v20 = v1[1];
      if (v20 < 0 || v19 < v20) {
        goto LABEL_57;
      }
      if (v20 - v16 < 2) {
        goto LABEL_49;
      }
      uint64_t v8 = v20 - 2;
      if (v20 - 2 < v16) {
        goto LABEL_63;
      }
      if (*(unsigned char *)(v17 + v8) == 13 && *(unsigned char *)(v20 + v17 - 1) == 10)
      {
LABEL_48:
        v1[1] = v8;
        return 1;
      }
LABEL_49:
      if ((sub_1003E8A7C(*v1, v1[1], v1[2], v1[3]) & 0x1FF) != 0xA) {
        return 0;
      }
      if (v20 > (unint64_t)v16)
      {
        uint64_t *v1 = v16;
        v1[1] = v20 - 1;
        v1[2] = v17;
        v1[3] = v18;
        return 1;
      }
      goto LABEL_64;
    default:
      uint64_t v2 = *v1;
      uint64_t v3 = v1[2];
      if (v3) {
        uint64_t v4 = v1[3] - v3;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v2 < 0 || v4 < v2)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      uint64_t v5 = v1[1];
      if (v5 < 0 || v4 < v5) {
        goto LABEL_55;
      }
      if (v5 - v2 < 2) {
        return 0;
      }
      uint64_t v6 = v5 - 2;
      if (v5 - 2 < v2)
      {
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        JUMPOUT(0x1003CB0C0);
      }
      if (*(unsigned char *)(v3 + v6) == 13 && *(unsigned char *)(v5 + v3 - 1) == 10)
      {
        v1[1] = v6;
        return 1;
      }
      return 0;
  }
}

uint64_t sub_1003CB0D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v7 = a4 - a3;
  if (a4 <= a3)
  {
LABEL_11:
    if (!result)
    {
      uint64_t v14 = 0;
      return a7(result, v14);
    }
    uint64_t v8 = 0;
LABEL_15:
    uint64_t v14 = result + v8;
    return a7(result, v14);
  }
  uint64_t v8 = 0;
  uint64_t v9 = (unsigned __int8 *)(a5 + a3);
  do
  {
    int v11 = *v9++;
    int v10 = v11;
    if (v11 != 13 && v10 != 10)
    {
      *(unsigned char *)(result + v8) = v10;
      if (__OFADD__(v8++, 1))
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    --v7;
  }
  while (v7);
  if (result)
  {
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_15;
    }
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    return a7(result, v14);
  }
  __break(1u);
  return result;
}

void *sub_1003CB16C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(uint64_t *__return_ptr))
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - a2;
  if (a3 <= a2) {
    goto LABEL_12;
  }
  uint64_t v8 = (unsigned __int8 *)(a4 + a2);
  while (1)
  {
    int v10 = *v8++;
    int v9 = v10;
    if (v10 != 13 && v9 != 10)
    {
      *((unsigned char *)result + v6) = v9;
      if (__OFADD__(v6++, 1)) {
        break;
      }
    }
    if (!--v7) {
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
LABEL_12:
    uint64_t result = a5(&var1);
    if (!v5) {
      return (void *)var1;
    }
  }
  return result;
}

void *sub_1003CB1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(uint64_t *__return_ptr), void *a6)
{
  if (a2 == a1)
  {
LABEL_13:
    if (a3) {
      uint64_t v16 = a3 + a2;
    }
    else {
      uint64_t v16 = 0;
    }
    if (a3) {
      uint64_t v17 = a3 + a1;
    }
    else {
      uint64_t v17 = 0;
    }
    ((void (*)(unsigned char *__return_ptr, uint64_t, uint64_t))a5)(&v22[7], v17, v16);
    if (!v6) {
      return (void *)v22[7];
    }
    return a6;
  }
  uint64_t v12 = a4 - a3;
  if (!a3) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a1;
  while (1)
  {
    if (v13 >= a2)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (a1 < 0 || v13 >= v12) {
      goto LABEL_31;
    }
    int v14 = *(unsigned __int8 *)(a3 + v13);
    if (v14 == 13 || v14 == 10) {
      break;
    }
    if (a2 == ++v13) {
      goto LABEL_13;
    }
  }
  if (v12 < a2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  if (a2 - a1 < 0) {
    goto LABEL_33;
  }
  if (a2 - a1 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v19 = sub_1003CB16C(&v22[-v18], a1, a2, a3, a5);
    if (v6) {
      swift_willThrow();
    }
    else {
      return v19;
    }
  }
  else
  {
    uint64_t v20 = (void *)swift_slowAlloc();
    a6 = sub_1003CB16C(v20, a1, a2, a3, a5);
    swift_slowDealloc();
  }
  return a6;
}

size_t sub_1003CB3E4(size_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 - a2;
  if (a3 <= a2)
  {
LABEL_11:
    if (!result)
    {
      unint64_t v11 = 0;
      return sub_1003E2708(result, v11);
    }
    uint64_t v5 = 0;
LABEL_15:
    unint64_t v11 = result + v5;
    return sub_1003E2708(result, v11);
  }
  uint64_t v5 = 0;
  uint64_t v6 = (unsigned __int8 *)(a4 + a2);
  do
  {
    int v8 = *v6++;
    int v7 = v8;
    if (v8 != 13 && v7 != 10)
    {
      *(unsigned char *)(result + v5) = v7;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    --v4;
  }
  while (v4);
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_15;
    }
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v11 = 0;
    uint64_t result = 0;
    return sub_1003E2708(result, v11);
  }
  __break(1u);
  return result;
}

void sub_1003CB480(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - a2;
  if (a3 <= a2) {
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(a4 + a2);
  while (1)
  {
    int v8 = *v6++;
    int v7 = v8;
    if (v8 != 13 && v7 != 10)
    {
      a1[v4] = v7;
      if (__OFADD__(v4++, 1)) {
        break;
      }
    }
    if (!--v5) {
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
LABEL_12:
    unint64_t v11 = &a1[v4];
    if (a1) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    sub_1003A9CC4(a1, v12, &v13);
  }
}

unsigned char *sub_1003CB500@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result | 0x20;
  return result;
}

uint64_t MediaType.init(type:subtype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_1005E1CB0();
  uint64_t v12 = v10;
  if ((v11 != 0x72617069746C756DLL || v10 != 0xE900000000000074) && (sub_1005E3290() & 1) == 0)
  {
    if (v11 == 0x746163696C707061 && v12 == 0xEB000000006E6F69 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 1;
    }
    else if (v11 == 0x6F69647561 && v12 == 0xE500000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 2;
    }
    else if (v11 == 0x6567616D69 && v12 == 0xE500000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 3;
    }
    else if (v11 == 0x6567617373656DLL && v12 == 0xE700000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 4;
    }
    else if (v11 == 1954047348 && v12 == 0xE400000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 5;
    }
    else if (v11 == 0x6F65646976 && v12 == 0xE500000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 6;
    }
    else if (v11 == 1953394534 && v12 == 0xE400000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 7;
    }
    else if (v11 == 0x656C706D617865 && v12 == 0xE700000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 8;
    }
    else
    {
      if (v11 == 0x6C65646F6DLL && v12 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v18 = sub_1005E3290();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          char v17 = 10;
          goto LABEL_25;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      char v17 = 9;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (a4)
  {
    uint64_t v15 = sub_1005E1CB0();
    uint64_t v16 = v14;
    if (v15 == 0x646578696DLL && v14 == 0xE500000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 1;
      goto LABEL_25;
    }
    if (v15 == 0x747365676964 && v16 == 0xE600000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 2;
      goto LABEL_25;
    }
    if (v15 == 0x74616E7265746C61 && v16 == 0xEB00000000657669 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 3;
      goto LABEL_25;
    }
    if (v15 == 0x646574616C6572 && v16 == 0xE700000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 4;
      goto LABEL_25;
    }
    if (v15 == 0x74726F706572 && v16 == 0xE600000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 5;
      goto LABEL_25;
    }
    if (v15 == 0x64656E676973 && v16 == 0xE600000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 6;
      goto LABEL_25;
    }
    if (v15 == 0x6574707972636E65 && v16 == 0xE900000000000064 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 7;
      goto LABEL_25;
    }
    if (v15 == 0x7461642D6D726F66 && v16 == 0xE900000000000061 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 8;
      goto LABEL_25;
    }
    if (v15 == 0x2D646578696D2D78 && v16 == 0xEF6563616C706572 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 9;
      goto LABEL_25;
    }
    if (v15 == 0x676E617265747962 && v16 == 0xE900000000000065)
    {
      swift_bridgeObjectRelease();
LABEL_103:
      uint64_t result = swift_bridgeObjectRelease();
      a1 = 0;
      a3 = 0;
      a4 = 0;
      char v17 = 0;
      a2 = 10;
      goto LABEL_25;
    }
    char v19 = sub_1005E3290();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_103;
    }
    char v17 = 0;
LABEL_16:
    a1 = a3;
    a2 = a4;
    a3 = 0;
    a4 = 0;
    goto LABEL_25;
  }
  a2 = 0;
  char v17 = 0;
  a1 = a3;
  a3 = 0;
LABEL_25:
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(unsigned char *)(a5 + 32) = v17;
  return result;
}

uint64_t sub_1003CBEE0(char a1)
{
  uint64_t result = 0x74616E7265746C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x756F64656C707061;
      break;
    case 2:
      uint64_t result = 0x676E617265747962;
      break;
    case 3:
      uint64_t result = 0x747365676964;
      break;
    case 4:
      uint64_t result = 0x6574707972636E65;
      break;
    case 5:
      uint64_t result = 0x7461642D6D726F66;
      break;
    case 6:
      uint64_t result = 0x646578696DLL;
      break;
    case 7:
      uint64_t result = 0x2D646578696D2D78;
      break;
    case 8:
      uint64_t result = 0x646574616C6572;
      break;
    case 9:
      uint64_t result = 0x74726F706572;
      break;
    case 10:
      uint64_t result = 0x64656E676973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003CC05C(uint64_t *a1, uint64_t *a2)
{
  return _s9IMAP2MIME9MediaTypeO9MultipartO21__derived_enum_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1003CC070(uint64_t a1, uint64_t a2)
{
  sub_10039DF8C(a1, (uint64_t)v4);
  sub_10039DF8C(a2, (uint64_t)v5);
  return _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_1003CC0BC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003CC2B8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1003CBEE0);
}

Swift::Int sub_1003CC0D4(uint64_t a1, uint64_t a2)
{
  return sub_1003CC368(a1, a2, (void (*)(uint64_t))sub_1003CBEE0);
}

uint64_t sub_1003CC0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003CC3EC(a1, a2, a3, (void (*)(void))sub_1003CBEE0);
}

Swift::Int sub_1003CC104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003CC45C(a1, a2, a3, (void (*)(uint64_t))sub_1003CBEE0);
}

uint64_t sub_1003CC11C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003CF598(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1003CC14C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003CBEE0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003CC178(char a1)
{
  uint64_t result = 0x72617069746C756DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746163696C707061;
      break;
    case 2:
      uint64_t result = 0x6F69647561;
      break;
    case 3:
      uint64_t result = 0x6567616D69;
      break;
    case 4:
      uint64_t result = 0x6567617373656DLL;
      break;
    case 5:
      uint64_t result = 1954047348;
      break;
    case 6:
      uint64_t result = 0x6F65646976;
      break;
    case 7:
      uint64_t result = 1953394534;
      break;
    case 8:
      uint64_t result = 0x656C706D617865;
      break;
    case 9:
      uint64_t result = 0x6C65646F6DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003CC2A0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1003CC2B8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1003CC178);
}

uint64_t sub_1003CC2B8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = sub_1005E3290();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_1003CC350(uint64_t a1, uint64_t a2)
{
  return sub_1003CC368(a1, a2, (void (*)(uint64_t))sub_1003CC178);
}

Swift::Int sub_1003CC368(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  sub_1005E33F0();
  a3(v5);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003CC3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003CC3EC(a1, a2, a3, (void (*)(void))sub_1003CC178);
}

uint64_t sub_1003CC3EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003CC444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003CC45C(a1, a2, a3, (void (*)(uint64_t))sub_1003CC178);
}

Swift::Int sub_1003CC45C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  sub_1005E33F0();
  a4(v6);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003CC4C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003CF5E4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1003CC4F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003CC178(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static MediaType.uniformType(filename:mimeType:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char *a3@<X8>)
{
  unint64_t v49 = a3;
  uint64_t v5 = sub_10000566C(&qword_100713F38);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  char v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v50 = sub_1005E0CB0();
  uint64_t v10 = *(void *)(v50 - 8);
  uint64_t v11 = __chkstk_darwin(v50);
  uint64_t v45 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v43 - v14;
  __chkstk_darwin(v13);
  uint64_t v46 = (char *)&v43 - v15;
  NSString v16 = sub_1005E1BD0();
  id v17 = [v16 pathExtension];

  sub_1005E1C00();
  uint64_t v44 = sub_1005E1CB0();
  uint64_t v48 = v18;
  swift_bridgeObjectRelease();
  NSString v19 = sub_1005E1BD0();
  id v20 = [v19 pathExtension];

  sub_1005E1C00();
  uint64_t v21 = sub_1005E1CB0();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v52 = a1;
  if ((a1 != 0x746163696C707061 || a2 != 0xEF70697A2F6E6F69) && (sub_1005E3290() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24 || v21 == 7367034 && v23 == 0xE300000000000000 || (sub_1005E3290() & 1) != 0)
  {
    NSString v25 = sub_1005E1BD0();
    NSString v26 = [v25 stringByDeletingPathExtension];

    if (!v26)
    {
      sub_1005E1C00();
      NSString v26 = sub_1005E1BD0();
      swift_bridgeObjectRelease();
    }
    id v27 = [v26 pathExtension];

    sub_1005E1C00();
    uint64_t v21 = sub_1005E1CB0();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = v29;
    uint64_t v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v30 = v21 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = v50;
    if (!v30)
    {
      uint64_t v21 = 7367034;
      swift_bridgeObjectRelease();
      unint64_t v23 = 0xE300000000000000;
    }
  }
  else
  {
LABEL_16:
    uint64_t v31 = v50;
  }
  uint64_t v32 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v32 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v32)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  String.declaredUTTypeFromExtension.getter(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v31) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1003CE9C8((uint64_t)v9);
LABEL_23:
    uint64_t v33 = (uint64_t)v47;
LABEL_24:
    swift_bridgeObjectRetain();
    sub_1005E0C60();
    sub_1005E0C10();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33, 1, v31) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1003CE9C8(v33);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v49, 1, 1, v31);
    }
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v35 = v45;
    v34(v45, v33, v31);
    char v36 = sub_1005E0CA0();
    swift_bridgeObjectRelease();
    if (v36)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v31);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v49, 1, 1, v31);
    }
    uint64_t v42 = v49;
    v34(v49, (uint64_t)v35, v31);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v31);
  }
  uint64_t v50 = a2;
  int v38 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v38(v46, v9, v31);
  uint64_t v39 = v51;
  sub_1005E0C90();
  char v40 = sub_1005E0C80();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
  v41(v39, v31);
  if ((v40 & 1) == 0 && (v21 != v44 || v23 != v48) && (sub_1005E3290() & 1) == 0)
  {
    if ((sub_1005E3290() & 1) == 0)
    {
      String.declaredUTTypeFromExtension.getter(v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v41)(v46, v31);
    }
    v41(v46, v31);
    swift_bridgeObjectRelease();
    uint64_t v33 = (uint64_t)v47;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v49;
  v38(v49, v46, v31);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v31);
}

uint64_t String.declaredUTTypeFromExtension.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_10000566C(&qword_100713F38);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1005E0CB0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - v8;
  swift_bridgeObjectRetain();
  sub_1005E0C60();
  sub_1005E0C40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1003CE9C8((uint64_t)v4);
LABEL_5:
    swift_bridgeObjectRetain();
    sub_1005E0C70();
    return sub_1005E0C40();
  }
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v10(v9, v4, v5);
  if (sub_1005E0CA0())
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    goto LABEL_5;
  }
  v10(a1, v9, v5);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
}

uint64_t MediaType.description.getter()
{
  sub_1003AE78C(v0, (void (*)(void, void, void, void, void))sub_1003AE6AC);
  return _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0(v0);
}

uint64_t sub_1003CCE24()
{
  sub_10039DF8C(v0, (uint64_t)v2);
  sub_1003AE78C((uint64_t)v2, (void (*)(void, void, void, void, void))sub_1003AE6AC);
  return _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0((uint64_t)v2);
}

uint64_t MediaType.Multipart.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0x646578696DLL;
  switch(a2)
  {
    case 0:
      sub_1003AE88C(a1, 0);
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 0x747365676964;
      break;
    case 3:
      uint64_t result = 0x74616E7265746C61;
      break;
    case 4:
      uint64_t result = 0x646574616C6572;
      break;
    case 5:
      uint64_t result = 0x74726F706572;
      break;
    case 6:
      uint64_t result = 0x64656E676973;
      break;
    case 7:
      uint64_t result = 0x6574707972636E65;
      break;
    case 8:
      uint64_t result = 0x7461642D6D726F66;
      break;
    case 9:
      uint64_t result = 0x2D646578696D2D78;
      break;
    case 10:
      uint64_t result = 0x676E617265747962;
      break;
    case 11:
      uint64_t result = 0x756F64656C707061;
      break;
    default:
      swift_bridgeObjectRetain();
      uint64_t result = a1;
      break;
  }
  return result;
}

uint64_t sub_1003CD200()
{
  return MediaType.Multipart.description.getter(*v0, v0[1]);
}

uint64_t sub_1003CD208(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  if (v4 == 109 && v5 == 117 && v6 == 108 && v7 == 116)
  {
    uint64_t v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  if (v4 == 105)
  {
    if (v5 == 109 && v6 == 97 && v7 == 103)
    {
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 3;
      goto LABEL_6;
    }
  }
  else
  {
    if (v4 != 97)
    {
      BOOL v12 = v5 == 101;
      if (v4 == 109 && v5 == 101 && v6 == 115 && v7 == 115)
      {
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 4;
        goto LABEL_6;
      }
      goto LABEL_29;
    }
    if (v5 == 117)
    {
      if (v6 == 100 && v7 == 105)
      {
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 2;
        goto LABEL_6;
      }
    }
    else if (v5 == 112 && v6 == 112 && v7 == 108)
    {
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 1;
      goto LABEL_6;
    }
  }
  BOOL v12 = v5 == 101;
LABEL_29:
  switch(v4)
  {
    case 'e':
      if (v5 != 120 || v6 != 97 || v7 != 109) {
        return 10;
      }
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 8;
      break;
    case 'f':
      if (v5 != 111 || v6 != 110 || v7 != 116) {
        return 10;
      }
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 7;
      break;
    case 't':
      if (v6 != 120) {
        BOOL v12 = 0;
      }
      if (!v12 || v7 != 116) {
        return 10;
      }
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 5;
      break;
    case 'v':
      if (v5 != 105 || v6 != 100 || v7 != 101) {
        return 10;
      }
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 6;
      break;
    default:
      if (v4 != 109 || v5 != 111 || v6 != 100 || v7 != 101) {
        return 10;
      }
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 9;
      break;
  }
LABEL_6:
  uint64_t result = sub_1003AF0E4(v8, v9, v10);
  if (result == 10) {
    return 10;
  }
  return result;
}

uint64_t sub_1003CD554(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1003B07AC(0, a1, a2);
  char v5 = sub_1003B07AC(1, a1, a2);
  char v6 = sub_1003B07AC(2, a1, a2);
  char v7 = sub_1003B07AC(3, a1, a2);
  if (v4 == 100)
  {
    if (v5 == 105 && v6 == 103 && v7 == 101)
    {
      uint64_t v8 = (char *)a1;
      uint64_t v9 = (char *)a2;
      uint64_t v10 = 3;
      goto LABEL_16;
    }
  }
  else if (v4 == 109 && v5 == 105 && v6 == 120 && v7 == 101)
  {
    uint64_t v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 6;
    goto LABEL_16;
  }
  if (v4 == 97 && v5 == 108 && v6 == 116 && v7 == 101)
  {
    uint64_t v8 = (char *)a1;
    uint64_t v9 = (char *)a2;
    uint64_t v10 = 0;
  }
  else
  {
    switch(v4)
    {
      case 'b':
        if (v5 != 121 || v6 != 116 || v7 != 101) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 2;
        break;
      case 'e':
        if (v5 != 110 || v6 != 99 || v7 != 114) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 4;
        break;
      case 'f':
        if (v5 != 111 || v6 != 114 || v7 != 109) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 5;
        break;
      case 'r':
        if (v5 != 101) {
          return 11;
        }
        if (v6 != 112)
        {
          if (v6 == 108 && v7 == 97)
          {
            uint64_t v8 = (char *)a1;
            uint64_t v9 = (char *)a2;
            uint64_t v10 = 8;
            break;
          }
          return 11;
        }
        if (v7 != 111) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 9;
        break;
      case 's':
        if (v5 != 105 || v6 != 103 || v7 != 110) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 10;
        break;
      case 'x':
        if (v5 != 45 || v6 != 109 || v7 != 105) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 7;
        break;
      default:
        if (v4 != 97 || v5 != 112 || v6 != 112 || v7 != 108) {
          return 11;
        }
        uint64_t v8 = (char *)a1;
        uint64_t v9 = (char *)a2;
        uint64_t v10 = 1;
        break;
    }
  }
LABEL_16:
  uint64_t result = sub_1003AEF84(v8, v9, v10);
  if (result == 11) {
    return 11;
  }
  return result;
}

uint64_t sub_1003CD8C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v11 = a5 & 1;
  uint64_t result = sub_1003CD208(a1, a2);
  switch((char)result)
  {
    case 1:
      uint64_t v15 = 0;
      char v13 = 16;
      goto LABEL_14;
    case 2:
      uint64_t v15 = 0;
      char v13 = 32;
      goto LABEL_14;
    case 3:
      uint64_t v15 = 0;
      char v13 = 48;
      goto LABEL_14;
    case 4:
      uint64_t v15 = 0;
      char v13 = 64;
      goto LABEL_14;
    case 5:
      uint64_t v15 = 0;
      char v13 = 80;
      goto LABEL_14;
    case 6:
      uint64_t v15 = 0;
      char v13 = 96;
      goto LABEL_14;
    case 7:
      uint64_t v15 = 0;
      char v13 = 112;
      goto LABEL_14;
    case 8:
      uint64_t v15 = 0;
      char v13 = 0x80;
      goto LABEL_14;
    case 9:
      uint64_t v15 = 0;
      char v13 = -112;
LABEL_14:
      uint64_t v9 = a3;
      uint64_t v8 = a4;
      uint64_t v14 = v11;
      break;
    case 10:
      char v13 = v11 | 0xA0;
      uint64_t v14 = a3;
      uint64_t v15 = a4;
      break;
    default:
      if (v11)
      {
LABEL_17:
        uint64_t v15 = 0;
        char v13 = 0;
        uint64_t v14 = v11 | 0x80;
        uint64_t v9 = a3;
        uint64_t v8 = a4;
      }
      else
      {
        uint64_t result = sub_1003CD554(a3, a4);
        uint64_t v9 = result;
        char v13 = 0;
        uint64_t v8 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        switch((char)result)
        {
          case 1:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 1;
            break;
          case 2:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 2;
            break;
          case 3:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 3;
            break;
          case 4:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 4;
            break;
          case 5:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 5;
            break;
          case 6:
            goto LABEL_15;
          case 7:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 7;
            break;
          case 8:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 8;
            break;
          case 9:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 9;
            break;
          case 10:
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            uint64_t v9 = 10;
            break;
          case 11:
            goto LABEL_17;
          default:
            uint64_t v9 = 0;
            uint64_t v8 = 0;
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            char v13 = 0;
            break;
        }
      }
      break;
  }
LABEL_15:
  *(void *)a6 = v9;
  *(void *)(a6 + 8) = v8;
  *(void *)(a6 + 16) = v14;
  *(void *)(a6 + 24) = v15;
  *(unsigned char *)(a6 + 32) = v13;
  return result;
}

uint64_t sub_1003CDB70@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2 - result;
  if (!result) {
    uint64_t v4 = 0;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = v4;
    uint64_t v21 = (unsigned char *)result;
    sub_1003CAD94((uint64_t)v22);
    uint64_t result = sub_10001FDF0((uint64_t)v22, (uint64_t)v28, &qword_100713F40);
    long long v5 = 0uLL;
    if (v29) {
      goto LABEL_5;
    }
    uint64_t v8 = v28[0];
    uint64_t v9 = v28[1];
    uint64_t v10 = v28[2];
    if (!v20)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      int v14 = 1;
      goto LABEL_14;
    }
    if (v20 > 0)
    {
      if (*v21 != 47) {
        goto LABEL_5;
      }
      sub_1003CAD94((uint64_t)v23);
      uint64_t v13 = v23[0];
      uint64_t v12 = v23[1];
      uint64_t v11 = v23[2];
      int v14 = v24;
      uint64_t result = sub_10001FDF0((uint64_t)v23, (uint64_t)v27, &qword_100713F40);
      if (v27[32])
      {
        char v6 = -2;
        long long v7 = 0uLL;
        long long v5 = 0uLL;
        goto LABEL_30;
      }
      long long v5 = 0uLL;
      if (v20 != 1)
      {
LABEL_5:
        char v6 = -2;
        long long v7 = 0uLL;
LABEL_30:
        *(_OWORD *)a3 = v5;
        *(_OWORD *)(a3 + 16) = v7;
        *(unsigned char *)(a3 + 32) = v6;
        return result;
      }
LABEL_14:
      if (v10) {
        uint64_t v15 = v10 + v9;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v10) {
        uint64_t v16 = v10 + v8;
      }
      else {
        uint64_t v16 = 0;
      }
      if (v11) {
        int v17 = v14;
      }
      else {
        int v17 = 1;
      }
      if (v17) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v11 + v13;
      }
      if (v17) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v11 + v12;
      }
      uint64_t result = sub_1003CD8C4(v16, v15, v18, v19, v14, (uint64_t)v25);
      long long v5 = v25[0];
      long long v7 = v25[1];
      char v6 = v26;
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

uint64_t _s9IMAP2MIME9MediaTypeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_10039DF8C(a2, (uint64_t)v15);
  sub_10039DF8C(a1, (uint64_t)&v20);
  switch(v23)
  {
    case 1:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 1) {
        return 0;
      }
      goto LABEL_23;
    case 2:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 2) {
        return 0;
      }
      goto LABEL_23;
    case 3:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 3) {
        return 0;
      }
      goto LABEL_23;
    case 4:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 4) {
        return 0;
      }
      goto LABEL_23;
    case 5:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 5) {
        return 0;
      }
      goto LABEL_23;
    case 6:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 6) {
        return 0;
      }
      goto LABEL_23;
    case 7:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 7) {
        return 0;
      }
      goto LABEL_23;
    case 8:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 8) {
        return 0;
      }
      goto LABEL_23;
    case 9:
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v7 = v20;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 9) {
        return 0;
      }
LABEL_23:
      if (!v6)
      {
        if (*((void *)&v16 + 1)) {
          return 0;
        }
        swift_bridgeObjectRetain();
        return 1;
      }
      if (!*((void *)&v16 + 1)) {
        return 0;
      }
      if (__PAIR128__(v6, v7) == v16) {
        return 1;
      }
      goto LABEL_26;
    case 10:
      long long v9 = v20;
      uint64_t v11 = v21;
      uint64_t v10 = v22;
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19 != 10) {
        return 0;
      }
      uint64_t v13 = v17;
      uint64_t v12 = v18;
      if (v9 != v16)
      {
        char v14 = sub_1005E3290();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
      if (v10)
      {
        if (v12)
        {
          if (v11 != v13 || v10 != v12)
          {
LABEL_26:
            if ((sub_1005E3290() & 1) == 0) {
              return 0;
            }
          }
          return 1;
        }
      }
      else if (!v12)
      {
        return 1;
      }
      return 0;
    default:
      sub_1003CF06C(&v20, &v24);
      sub_10039DF8C(a2, (uint64_t)&v16);
      if (v19) {
        return 0;
      }
      unint64_t v4 = *((void *)&v16 + 1);
      unint64_t v5 = v16;
      sub_1003CF06C(&v24, &v25);
      switch(*((void *)&v25 + 1))
      {
        case 1:
          return v4 == 1;
        case 2:
          return v4 == 2;
        case 3:
          return v4 == 3;
        case 4:
          return v4 == 4;
        case 5:
          return v4 == 5;
        case 6:
          return v4 == 6;
        case 7:
          return v4 == 7;
        case 8:
          return v4 == 8;
        case 9:
          return v4 == 9;
        case 0xALL:
          return v4 == 10;
        case 0xBLL:
          return v4 == 11;
        default:
          if (v4 - 1 < 0xB) {
            return 0;
          }
          if (!*((void *)&v25 + 1))
          {
            if (!v4) {
              return 1;
            }
            sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
            return 0;
          }
          if (!v4) {
            return 0;
          }
          if (v25 == __PAIR128__(v4, v5)) {
            return 1;
          }
          break;
      }
      goto LABEL_26;
  }
}

uint64_t _s9IMAP2MIME9MediaTypeO9MultipartO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
    case 3:
      return a4 == 3;
    case 4:
      return a4 == 4;
    case 5:
      return a4 == 5;
    case 6:
      return a4 == 6;
    case 7:
      return a4 == 7;
    case 8:
      return a4 == 8;
    case 9:
      return a4 == 9;
    case 10:
      return a4 == 10;
    case 11:
      return a4 == 11;
    default:
      if ((unint64_t)(a4 - 1) < 0xB) {
        return 0;
      }
      if (a2) {
        return a4 && (a1 == a3 && a2 == a4 || (sub_1005E3290() & 1) != 0);
      }
      if (!a4) {
        return 1;
      }
      sub_1003AE88C(a1, 0);
      return 0;
  }
}

uint64_t _sSS9IMAP2MIMEEySSAA9MediaTypeOcfC_0(uint64_t a1)
{
  sub_10039DF8C(a1, (uint64_t)&v14);
  switch(v18)
  {
    case 1:
      uint64_t v4 = 0x746163696C707061;
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        strcpy((char *)v13, "application/");
        BYTE5(v13[1]) = 0;
        HIWORD(v13[1]) = -5120;
        goto LABEL_27;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      break;
    case 2:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v6 = 0x2F6F69647561;
        goto LABEL_25;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 0x6F69647561;
      break;
    case 3:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v6 = 0x2F6567616D69;
        goto LABEL_25;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 0x6567616D69;
      break;
    case 4:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v7 = 0x67617373656DLL;
        goto LABEL_22;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 0x6567617373656DLL;
      break;
    case 5:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v8 = 1954047348;
        goto LABEL_19;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 1954047348;
      break;
    case 6:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v6 = 0x2F6F65646976;
        goto LABEL_25;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 0x6F65646976;
      break;
    case 7:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v8 = 1953394534;
LABEL_19:
        uint64_t v6 = v8 & 0xFFFF0000FFFFFFFFLL | 0x2F00000000;
        unint64_t v9 = 0xE500000000000000;
        goto LABEL_26;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 1953394534;
      break;
    case 8:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v7 = 0x6C706D617865;
LABEL_22:
        uint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0x2F65000000000000;
        unint64_t v9 = 0xE800000000000000;
        goto LABEL_26;
      }
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      uint64_t v4 = 0x656C706D617865;
      break;
    case 9:
      sub_10001FDF0((uint64_t)&v14, (uint64_t)v19, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v19, (uint64_t)&v20, &qword_100713AA8);
      v5._object = v21;
      if (v21)
      {
        v5._uint64_t countAndFlagsBits = v20;
        uint64_t v6 = 0x2F6C65646F6DLL;
LABEL_25:
        unint64_t v9 = 0xE600000000000000;
LABEL_26:
        v13[0] = v6;
        v13[1] = v9;
LABEL_27:
        sub_1005E1E30(v5);
        sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
        uint64_t v4 = v13[0];
      }
      else
      {
        sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
        uint64_t v4 = 0x6C65646F6DLL;
      }
      break;
    case 10:
      uint64_t v4 = v14;
      uint64_t v11 = v17;
      if (v17)
      {
        uint64_t v12 = v16;
        uint64_t v20 = v14;
        uint64_t v21 = v15;
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = 47;
        v22._object = (void *)0xE100000000000000;
        sub_1005E1E30(v22);
        v23._uint64_t countAndFlagsBits = v12;
        v23._object = v11;
        sub_1005E1E30(v23);
        goto LABEL_53;
      }
      swift_bridgeObjectRetain();
      sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      break;
    default:
      if (v15)
      {
        uint64_t v20 = 0x72617069746C756DLL;
        uint64_t v21 = (void *)0xEA00000000002F74;
        uint64_t v2 = (void *)0xE500000000000000;
        uint64_t v3 = 0x646578696DLL;
        switch((unint64_t)v15)
        {
          case 1uLL:
            break;
          case 2uLL:
            uint64_t v2 = (void *)0xE600000000000000;
            uint64_t v3 = 0x747365676964;
            break;
          case 3uLL:
            uint64_t v2 = (void *)0xEB00000000657669;
            uint64_t v3 = 0x74616E7265746C61;
            break;
          case 4uLL:
            uint64_t v2 = (void *)0xE700000000000000;
            uint64_t v3 = 0x646574616C6572;
            break;
          case 5uLL:
            uint64_t v2 = (void *)0xE600000000000000;
            uint64_t v3 = 0x74726F706572;
            break;
          case 6uLL:
            uint64_t v2 = (void *)0xE600000000000000;
            uint64_t v3 = 0x64656E676973;
            break;
          case 7uLL:
            uint64_t v2 = (void *)0xE900000000000064;
            uint64_t v3 = 0x6574707972636E65;
            break;
          case 8uLL:
            uint64_t v3 = 0x7461642D6D726F66;
            uint64_t v2 = (void *)0xE900000000000061;
            break;
          case 9uLL:
            uint64_t v2 = (void *)0xEF6563616C706572;
            uint64_t v3 = 0x2D646578696D2D78;
            break;
          case 0xAuLL:
            uint64_t v2 = (void *)0xE900000000000065;
            uint64_t v3 = 0x676E617265747962;
            break;
          case 0xBuLL:
            uint64_t v3 = 0x756F64656C707061;
            uint64_t v2 = (void *)0xEB00000000656C62;
            break;
          default:
            swift_bridgeObjectRetain();
            break;
        }
        v24._uint64_t countAndFlagsBits = v3;
        v24._object = v2;
        sub_1005E1E30(v24);
        swift_bridgeObjectRelease();
LABEL_53:
        sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
        uint64_t v4 = v20;
      }
      else
      {
        uint64_t v4 = 0x72617069746C756DLL;
        sub_1003AE78C(a1, (void (*)(void, void, void, void, void))sub_1003AE7CC);
      }
      break;
  }
  return v4;
}

uint64_t sub_1003CE9C8(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100713F38);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for MediaType(uint64_t a1)
{
  return sub_1003AE7CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for MediaType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for MediaType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1003AE6AC(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1003AE7CC(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for MediaType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MediaType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1003AE7CC(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 246;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003CEC04(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MediaType()
{
  return &type metadata for MediaType;
}

unint64_t destroy for MediaType.Multipart(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9IMAP2MIME9MediaTypeO9MultipartOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for MediaType.Multipart(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  unsigned int v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  unsigned int v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MediaType.Multipart(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if ((v5 + 1) > 1) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaType.Multipart(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483636);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 0xC) {
    return (v3 - 11);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MediaType.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 11;
    }
  }
  return result;
}

uint64_t sub_1003CEE7C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_1003CEE9C(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    result[1] = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaType.Multipart()
{
  return &type metadata for MediaType.Multipart;
}

uint64_t sub_1003CEEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10039DF8C(a1, (uint64_t)&v16);
  unsigned __int8 v3 = v19;
  int v4 = v19 >> 4;
  switch(v4)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      v19 &= 0xFu;
      int v5 = &v16;
      goto LABEL_3;
    case 10:
      v19 &= 0xFu;
      char v9 = (unsigned __int8 *)v16.n128_u64[1];
      long long v8 = (unsigned __int8 *)v16.n128_u64[0];
      if (v3) {
        goto LABEL_6;
      }
      uint64_t v14 = v17;
      uint64_t v13 = v18;
      uint64_t v6 = sub_1003BB304((unsigned __int8 *)v16.n128_u64[0], (unsigned __int8 *)v16.n128_u64[1]);
      uint64_t v7 = v15;
      uint64_t result = sub_1003BB304(v14, v13);
      break;
    default:
      v19 &= 0xFu;
      sub_1003BA534(&v16, &v20);
      sub_1003BA534(&v20, &v21);
      if (v22 < 0)
      {
        v22 &= ~0x80u;
        int v5 = &v21;
LABEL_3:
        sub_10001FDF0((uint64_t)v5, (uint64_t)v23, &qword_100713A68);
        sub_10001FDF0((uint64_t)v23, (uint64_t)v24, &qword_100713A68);
        if (v25)
        {
          uint64_t v6 = 0;
          uint64_t v7 = 0;
        }
        else
        {
          long long v8 = (unsigned __int8 *)v24[0];
          char v9 = (unsigned __int8 *)v24[1];
LABEL_6:
          uint64_t v6 = sub_1003BB304(v8, v9);
          uint64_t v7 = v10;
        }
        uint64_t result = 0;
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t result = 0;
        uint64_t v12 = 0;
        uint64_t v7 = qword_1006218A0[v21.n128_i8[0]];
      }
      break;
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v12;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

_OWORD *sub_1003CF06C(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType.Multipart(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_1003CF120(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t sub_1003CF12C(uint64_t result)
{
  *(unsigned char *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t sub_1003CF13C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Multipart()
{
  return &type metadata for UnsafeMediaType.Multipart;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x76 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 118);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 32) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x75) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnsafeMediaType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x75)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 118;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 32) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1003CF210(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 4;
}

uint64_t sub_1003CF21C(uint64_t result)
{
  *(unsigned char *)(result + 32) &= 0xFu;
  return result;
}

uint64_t sub_1003CF22C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = *(unsigned char *)(result + 32) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType()
{
  return &type metadata for UnsafeMediaType;
}

unsigned char *storeEnumTagSinglePayload for UnsafeMediaType.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003CF31CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Kind()
{
  return &type metadata for UnsafeMediaType.Kind;
}

uint64_t getEnumTagSinglePayload for UnsafeMediaType.Multipart.Known(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnsafeMediaType.Multipart.Known(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003CF4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeMediaType.Multipart.Known()
{
  return &type metadata for UnsafeMediaType.Multipart.Known;
}

unint64_t sub_1003CF4EC()
{
  unint64_t result = qword_100713F48;
  if (!qword_100713F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F48);
  }
  return result;
}

unint64_t sub_1003CF544()
{
  unint64_t result = qword_100713F50;
  if (!qword_100713F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F50);
  }
  return result;
}

uint64_t sub_1003CF598(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1006EB708;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xB) {
    return 11;
  }
  else {
    return v4;
  }
}

uint64_t sub_1003CF5E4(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1006EB830;
  v6._object = a2;
  unint64_t v4 = sub_1005E3050(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xA) {
    return 10;
  }
  else {
    return v4;
  }
}

uint64_t sub_1003CF630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v5[2] = a3;
  v5[3] = a1;
  v5[4] = a2;
  return sub_1003D0758(sub_1003D3C30, (uint64_t)v5, a3, a4);
}

uint64_t Message.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for Message.Data(uint64_t a1)
{
  return sub_10003B314(a1, qword_100714060);
}

uint64_t sub_1003CF6D8(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)&v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (Message.isEmpty.getter())
  {
    a1(&v23, 0, 0);
    if (v3) {
      return v13 & 1;
    }
    goto LABEL_21;
  }
  sub_1003C96A4(v2, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v15 = *v12;
    unint64_t v14 = v12[1];
    switch(v14 >> 62)
    {
      case 1uLL:
        if (v15 >> 32 < (int)v15) {
          __break(1u);
        }
        swift_retain();
        char v16 = sub_1003D1FC0((int)v15, v15 >> 32, a1);
        sub_1000094D4(v15, v14);
        goto LABEL_14;
      case 2uLL:
        uint64_t v18 = *(void *)(v15 + 16);
        uint64_t v17 = *(void *)(v15 + 24);
        swift_retain();
        swift_retain();
        char v16 = sub_1003D1FC0(v18, v17, a1);
        swift_release();
        swift_release();
LABEL_14:
        sub_1000094D4(v15, v14);
        if (!v4) {
          goto LABEL_20;
        }
        return v13 & 1;
      case 3uLL:
        memset(v22, 0, sizeof(v22));
        a1((uint64_t *)&v21, (uint64_t)v22, (uint64_t)v22);
        if (v3)
        {
          sub_1000094D4(v15, v14);
          return v13 & 1;
        }
        sub_1000094D4(v15, v14);
LABEL_19:
        char v16 = v21;
LABEL_20:
        LOBYTE(v23) = v16 & 1;
        break;
      default:
        *(void *)char v22 = *v12;
        *(_WORD *)&v22[8] = v14;
        v22[10] = BYTE2(v14);
        v22[11] = BYTE3(v14);
        v22[12] = BYTE4(v14);
        v22[13] = BYTE5(v14);
        a1((uint64_t *)&v21, (uint64_t)v22, (uint64_t)&v22[BYTE6(v14)]);
        sub_1000094D4(v15, v14);
        if (!v3) {
          goto LABEL_19;
        }
        return v13 & 1;
    }
    goto LABEL_21;
  }
  (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v8 + 32))(v10, v12, v7);
  __chkstk_darwin();
  *(void *)&v20[-32] = v10;
  *(void *)&v20[-24] = a1;
  *(void *)&v20[-16] = a2;
  sub_1005E1760();
  if (!v3)
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_21:
    char v13 = v23;
    return v13 & 1;
  }
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  return v13 & 1;
}

uint64_t sub_1003CFB18@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1005E17E0();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = a2;
  uint64_t v26 = a3;
  if (Message.isEmpty.getter()) {
    return ((uint64_t (*)(void, void, void, void))a2)(0, 0, 0, 0);
  }
  v21[1] = a3;
  void v21[2] = a4;
  sub_1003C96A4(a1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v10, v12, v8);
    __chkstk_darwin();
    v21[-4] = v10;
    v21[-3] = sub_1003D3D50;
    v21[-2] = &v24;
    sub_1005E1760();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
  }
  else
  {
    uint64_t v16 = *(void *)v12;
    unint64_t v15 = *((void *)v12 + 1);
    switch(v15 >> 62)
    {
      case 1uLL:
        if (v16 >> 32 < (int)v16) {
          __break(1u);
        }
        sub_100008D24(*(void *)v12, *((void *)v12 + 1));
        sub_1003D2074((int)v16, v16 >> 32, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        sub_1000094D4(v16, v15);
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v20 = *(void *)(v16 + 24);
        swift_retain();
        swift_retain();
        sub_1003D2074(v19, v20, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v23, 0, 14);
        uint64_t v18 = (char *)v23;
        uint64_t v17 = 0;
        goto LABEL_11;
      default:
        v23[0] = *(void *)v12;
        LOWORD(v23[1]) = v15;
        BYTE2(v23[1]) = BYTE2(v15);
        BYTE3(v23[1]) = BYTE3(v15);
        uint64_t v17 = BYTE6(v15);
        BYTE4(v23[1]) = BYTE4(v15);
        uint64_t v18 = (char *)v23 + BYTE6(v15);
        BYTE5(v23[1]) = BYTE5(v15);
LABEL_11:
        ((void (*)(void, uint64_t, void *, char *))a2)(0, v17, v23, v18);
        break;
    }
    return sub_1000094D4(v16, v15);
  }
}

uint64_t sub_1003CFF28@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1005E17E0();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = a2;
  uint64_t v26 = a3;
  if (Message.isEmpty.getter()) {
    return ((uint64_t (*)(void, void, void, void))a2)(0, 0, 0, 0);
  }
  v21[1] = a3;
  void v21[2] = a4;
  sub_1003C96A4(a1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v10, v12, v8);
    __chkstk_darwin();
    v21[-4] = v10;
    v21[-3] = sub_1003D1F88;
    v21[-2] = &v24;
    sub_10000566C(&qword_100713D40);
    sub_1005E1760();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
  }
  else
  {
    uint64_t v16 = *(void *)v12;
    unint64_t v15 = *((void *)v12 + 1);
    switch(v15 >> 62)
    {
      case 1uLL:
        if (v16 >> 32 < (int)v16) {
          __break(1u);
        }
        sub_100008D24(*(void *)v12, *((void *)v12 + 1));
        sub_1003D2074((int)v16, v16 >> 32, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        sub_1000094D4(v16, v15);
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v20 = *(void *)(v16 + 24);
        swift_retain();
        swift_retain();
        sub_1003D2074(v19, v20, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v23, 0, 14);
        uint64_t v18 = (char *)v23;
        uint64_t v17 = 0;
        goto LABEL_11;
      default:
        v23[0] = *(void *)v12;
        LOWORD(v23[1]) = v15;
        BYTE2(v23[1]) = BYTE2(v15);
        BYTE3(v23[1]) = BYTE3(v15);
        uint64_t v17 = BYTE6(v15);
        BYTE4(v23[1]) = BYTE4(v15);
        uint64_t v18 = (char *)v23 + BYTE6(v15);
        BYTE5(v23[1]) = BYTE5(v15);
LABEL_11:
        ((void (*)(void, uint64_t, void *, char *))a2)(0, v17, v23, v18);
        break;
    }
    return sub_1000094D4(v16, v15);
  }
}

uint64_t sub_1003D0340@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1005E17E0();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = a2;
  uint64_t v26 = a3;
  if (Message.isEmpty.getter()) {
    return ((uint64_t (*)(void, void, void, void))a2)(0, 0, 0, 0);
  }
  v21[1] = a3;
  void v21[2] = a4;
  sub_1003C96A4(a1, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v10, v12, v8);
    __chkstk_darwin();
    v21[-4] = v10;
    v21[-3] = sub_1003D1F88;
    v21[-2] = &v24;
    sub_10000566C(&qword_100714098);
    sub_1005E1760();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
  }
  else
  {
    uint64_t v16 = *(void *)v12;
    unint64_t v15 = *((void *)v12 + 1);
    switch(v15 >> 62)
    {
      case 1uLL:
        if (v16 >> 32 < (int)v16) {
          __break(1u);
        }
        sub_100008D24(*(void *)v12, *((void *)v12 + 1));
        sub_1003D2074((int)v16, v16 >> 32, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        sub_1000094D4(v16, v15);
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v20 = *(void *)(v16 + 24);
        swift_retain();
        swift_retain();
        sub_1003D2074(v19, v20, v15 & 0x3FFFFFFFFFFFFFFFLL, a2);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v23, 0, 14);
        uint64_t v18 = (char *)v23;
        uint64_t v17 = 0;
        goto LABEL_11;
      default:
        v23[0] = *(void *)v12;
        LOWORD(v23[1]) = v15;
        BYTE2(v23[1]) = BYTE2(v15);
        BYTE3(v23[1]) = BYTE3(v15);
        uint64_t v17 = BYTE6(v15);
        BYTE4(v23[1]) = BYTE4(v15);
        uint64_t v18 = (char *)v23 + BYTE6(v15);
        BYTE5(v23[1]) = BYTE5(v15);
LABEL_11:
        ((void (*)(void, uint64_t, void *, char *))a2)(0, v17, v23, v18);
        break;
    }
    return sub_1000094D4(v16, v15);
  }
}

uint64_t sub_1003D0758@<X0>(uint64_t (*a1)(void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v8 = sub_1005E17E0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  char v13 = (uint64_t *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (Message.isEmpty.getter()) {
    return a1(0, 0);
  }
  uint64_t v19 = a4;
  uint64_t v20 = a2;
  char v21 = a1;
  uint64_t v15 = v22;
  sub_1003C96A4(v4, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v13, v8);
    __chkstk_darwin();
    *(&v19 - 4) = v15;
    *(&v19 - 3) = (uint64_t)v11;
    uint64_t v16 = v20;
    *(&v19 - 2) = (uint64_t)v21;
    *(&v19 - 1) = v16;
    sub_1005E1760();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    uint64_t v17 = *v13;
    unint64_t v18 = v13[1];
    sub_1005E0880();
    return sub_1000094D4(v17, v18);
  }
}

uint64_t Message.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1005E17E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for Message.Data(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static Message.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2] = a2;
  return sub_1003CF6D8((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003D0E90, (uint64_t)v3) & 1;
}

uint64_t sub_1003D0A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v34 = a4;
  unint64_t v8 = sub_1005E17E0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  char v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t result = Message.isEmpty.getter();
  if ((result & 1) == 0)
  {
    sub_1003C96A4(a3, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(v9 + 32))(v11, v13, v8);
      __chkstk_darwin();
      *(&v34 - 4) = (BOOL *)v11;
      *(&v34 - 3) = (BOOL *)sub_1003D3C94;
      *(&v34 - 2) = (BOOL *)&v36;
      sub_1005E1760();
      if (!v4)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v9 + 8))(v11, v8);
        BOOL v15 = v35;
        goto LABEL_46;
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t, unint64_t))(v9 + 8))(v11, v8);
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v11 = *(void *)v13;
    unint64_t v8 = *((void *)v13 + 1);
    BOOL v15 = 0;
    switch(v8 >> 62)
    {
      case 1uLL:
        if (v11 >> 32 < (int)v11)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
        }
        else
        {
          sub_100008D24(*(void *)v13, *((void *)v13 + 1));
          uint64_t v16 = sub_1005E0550();
          if (!v16) {
            goto LABEL_11;
          }
          uint64_t v17 = sub_1005E0580();
          if (!__OFSUB__((int)v11, v17))
          {
            v16 += (int)v11 - v17;
LABEL_11:
            uint64_t v18 = sub_1005E0570();
            uint64_t v19 = a2 - a1;
            if (!a1) {
              uint64_t v19 = 0;
            }
            if (v16)
            {
              BOOL v15 = 0;
              if (v18 >= (v11 >> 32) - (int)v11) {
                uint64_t v20 = (v11 >> 32) - (int)v11;
              }
              else {
                uint64_t v20 = v18;
              }
              if (!a1 || v19 != v20) {
                goto LABEL_37;
              }
              BOOL v21 = a1 == v16;
            }
            else
            {
              BOOL v21 = (v19 | a1) == 0;
            }
            BOOL v15 = v21;
LABEL_37:
            uint64_t v32 = v11;
            unint64_t v33 = v8;
            if (v4)
            {
LABEL_52:
              sub_1000094D4(v32, v33);
LABEL_54:
              sub_1000094D4(v11, v8);
              __break(1u);
              JUMPOUT(0x1003D0E80);
            }
            sub_1000094D4(v11, v8);
LABEL_45:
            uint64_t result = sub_1000094D4(v11, v8);
            goto LABEL_46;
          }
        }
        __break(1u);
        return result;
      case 2uLL:
        uint64_t v22 = *(void *)(v11 + 16);
        uint64_t v23 = *(void *)(v11 + 24);
        swift_retain();
        swift_retain();
        uint64_t v24 = sub_1005E0550();
        if (!v24) {
          goto LABEL_23;
        }
        uint64_t v25 = sub_1005E0580();
        if (__OFSUB__(v22, v25)) {
          goto LABEL_49;
        }
        v24 += v22 - v25;
LABEL_23:
        BOOL v26 = __OFSUB__(v23, v22);
        uint64_t v27 = v23 - v22;
        if (v26) {
          goto LABEL_48;
        }
        uint64_t v28 = sub_1005E0570();
        uint64_t v29 = a2 - a1;
        if (!a1) {
          uint64_t v29 = 0;
        }
        if (v24)
        {
          BOOL v15 = 0;
          if (v28 >= v27) {
            uint64_t v30 = v27;
          }
          else {
            uint64_t v30 = v28;
          }
          if (!a1 || v29 != v30)
          {
LABEL_43:
            if (v4)
            {
              swift_release();
              swift_release();
              goto LABEL_54;
            }
            swift_release();
            swift_release();
            goto LABEL_45;
          }
          BOOL v31 = a1 == v24;
        }
        else
        {
          BOOL v31 = (v29 | a1) == 0;
        }
        BOOL v15 = v31;
        goto LABEL_43;
      default:
        goto LABEL_45;
    }
  }
  BOOL v15 = a1 == 0;
LABEL_46:
  *uint64_t v34 = v15;
  return result;
}

uint64_t sub_1003D0E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_1003D0A8C(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t sub_1003D0EAC(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2] = a2;
  return sub_1003CF6D8((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003D3EE4, (uint64_t)v3) & 1;
}

BOOL Message.isEmpty.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005E17E0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C96A4(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    sub_1003D112C();
    sub_1005E2390();
    sub_1005E23E0();
    BOOL v8 = v14[1] == v14[0];
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v9 = *(void *)v7;
    unint64_t v10 = *((void *)v7 + 1);
    switch(v10 >> 62)
    {
      case 1uLL:
        sub_1000094D4(*(void *)v7, *((void *)v7 + 1));
        uint64_t v11 = (int)v9;
        uint64_t v12 = v9 >> 32;
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
        sub_1000094D4(v9, v10);
        break;
      case 3uLL:
        sub_1000094D4(*(void *)v7, *((void *)v7 + 1));
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        break;
      default:
        sub_1000094D4(*(void *)v7, *((void *)v7 + 1));
        uint64_t v11 = 0;
        uint64_t v12 = BYTE6(v10);
        break;
    }
    return v11 == v12;
  }
  return v8;
}

unint64_t sub_1003D112C()
{
  unint64_t result = qword_100713F58;
  if (!qword_100713F58)
  {
    sub_1005E17E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100713F58);
  }
  return result;
}

uint64_t Message.count.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1005E17E0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C96A4(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    uint64_t v8 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v10 = *(void *)v7;
    unint64_t v9 = *((void *)v7 + 1);
    switch(v9 >> 62)
    {
      case 1uLL:
        sub_1000094D4(v10, v9);
        if (__OFSUB__(HIDWORD(v10), v10))
        {
          __break(1u);
          JUMPOUT(0x1003D1370);
        }
        uint64_t v8 = HIDWORD(v10) - (int)v10;
        break;
      case 2uLL:
        uint64_t v12 = *(void *)(v10 + 16);
        uint64_t v11 = *(void *)(v10 + 24);
        sub_1000094D4(v10, v9);
        BOOL v13 = __OFSUB__(v11, v12);
        uint64_t v8 = v11 - v12;
        if (v13)
        {
          __break(1u);
          goto LABEL_10;
        }
        break;
      case 3uLL:
LABEL_10:
        sub_1000094D4(v10, v9);
        uint64_t v8 = 0;
        break;
      default:
        sub_1000094D4(*(void *)v7, *((void *)v7 + 1));
        uint64_t v8 = BYTE6(v9);
        break;
    }
  }
  return v8;
}

uint64_t *initializeBufferWithCopyOfBuffer for Message(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for Message.Data(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      uint64_t v8 = *a2;
      unint64_t v7 = a2[1];
      sub_100008D24(v8, v7);
      *a1 = v8;
      a1[1] = v7;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Message(uint64_t *a1)
{
  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_1005E17E0();
    uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    return sub_1000094D4(v5, v6);
  }
}

uint64_t *initializeWithCopy for Message(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1005E17E0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v5 = a2[1];
    sub_100008D24(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for Message(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1003D16C0((uint64_t)a1);
    type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
      sub_100008D24(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1003D16C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Message.Data(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Message(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1005E17E0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Message(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_1003D16C0((uint64_t)a1);
    uint64_t v4 = type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = sub_1005E17E0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Message(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003D18C0);
}

uint64_t sub_1003D18C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message.Data(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Message(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003D1940);
}

uint64_t sub_1003D1940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message.Data(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for Message(uint64_t a1)
{
  return sub_10003B314(a1, qword_100713FB8);
}

uint64_t sub_1003D19D0()
{
  uint64_t result = type metadata accessor for Message.Data(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1003D1A5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v9 = *a2;
      unint64_t v8 = a2[1];
      sub_100008D24(v9, v8);
      *a1 = v9;
      a1[1] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1003D1B64(uint64_t *a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_1005E17E0();
    uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    return sub_1000094D4(v5, v6);
  }
}

uint64_t *sub_1003D1BF4(uint64_t *a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1005E17E0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v5 = a2[1];
    sub_100008D24(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_1003D1CAC(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1003D16C0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
      sub_100008D24(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1003D1D74(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1005E17E0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1003D1E2C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003D16C0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1005E17E0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1003D1EF4()
{
  uint64_t result = sub_1005E17E0();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1003D1F88(uint64_t a1, uint64_t a2)
{
  return sub_1003D3D50(a1, a2);
}

uint64_t sub_1003D1FA0(uint64_t a1)
{
  return sub_1003C9A88(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24));
}

uint64_t sub_1003D1FC0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_1005E0550();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_1005E0580();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = sub_1005E0570();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  a3(&v16, v8, v14);
  if (!v3) {
    char v15 = v16;
  }
  return v15 & 1;
}

uint64_t sub_1003D2074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = sub_1005E0550();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_1005E0580();
    if (__OFSUB__(a1, result)) {
      goto LABEL_15;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_1005E0570();
    if (result >= v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = result;
    }
    if (v8) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    if ((v12 & 0x8000000000000000) == 0) {
      return a4(0);
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1003D2134(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  uint64_t v4 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  return v3(a1, a1 + v4);
}

void *sub_1003D2198(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, void), void *a3)
{
  void *(*v22)(uint64_t *__return_ptr, void);
  void *v23;

  uint64_t v7 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v20[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  if (Message.isEmpty.getter())
  {
    uint64_t v13 = a3;
    ((void (*)(void *__return_ptr, void, void, void, void))a2)(v20, 0, 0, 0, 0);
    if (!v3) {
      return (void *)v20[0];
    }
  }
  else
  {
    sub_1003C96A4(a1, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
      __chkstk_darwin();
      *(&v19 - 4) = v10;
      *(&v19 - 3) = sub_1003D3C00;
      *(&v19 - 2) = &v21;
      sub_10000566C(&qword_1007140B0);
      uint64_t v13 = v10;
      sub_1005E1760();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      if (!v3) {
        return (void *)v20[2];
      }
    }
    else
    {
      uint64_t v15 = *(void *)v12;
      unint64_t v14 = *((void *)v12 + 1);
      switch(v14 >> 62)
      {
        case 1uLL:
          if (v15 >> 32 < (int)v15) {
            __break(1u);
          }
          sub_100008D24(*(void *)v12, *((void *)v12 + 1));
          uint64_t v13 = sub_1003D2618((int)v15, v15 >> 32, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          sub_1000094D4(v15, v14);
          goto LABEL_16;
        case 2uLL:
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v16 = *(void *)(v15 + 24);
          swift_retain();
          swift_retain();
          uint64_t v13 = sub_1003D2618(v17, v16, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          memset(v20, 0, 14);
          uint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, void *))a2)(&v19, 0, 0, v20, v20);
          if (v3)
          {
LABEL_16:
            sub_1000094D4(v15, v14);
          }
          else
          {
            sub_1000094D4(v15, v14);
LABEL_18:
            uint64_t v13 = v19;
          }
          break;
        default:
          v20[0] = *(void *)v12;
          LOWORD(v20[1]) = v14;
          BYTE2(v20[1]) = BYTE2(v14);
          BYTE3(v20[1]) = BYTE3(v14);
          BYTE4(v20[1]) = BYTE4(v14);
          BYTE5(v20[1]) = BYTE5(v14);
          uint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, char *))a2)(&v19, 0, BYTE6(v14), v20, (char *)v20 + BYTE6(v14));
          sub_1000094D4(v15, v14);
          if (!v3) {
            goto LABEL_18;
          }
          return v13;
      }
    }
  }
  return v13;
}

void *sub_1003D2618(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void))
{
  uint64_t result = (void *)sub_1005E0550();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = (void *)sub_1005E0580();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    uint64_t v9 = (void *)((char *)v9 + a1 - (void)result);
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (void *)sub_1005E0570();
  if ((uint64_t)result >= v11) {
    uint64_t v12 = (void *)v11;
  }
  else {
    uint64_t v12 = result;
  }
  if (v9) {
    unint64_t v13 = (unint64_t)v12;
  }
  else {
    unint64_t v13 = 0;
  }
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  uint64_t result = a4(&v14, 0);
  if (!v4) {
    return (void *)v14;
  }
  return result;
}

void *sub_1003D26E0(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, void), void *a3)
{
  void *(*v20)(uint64_t *__return_ptr, void);
  void *v21;
  void *v22;
  void v23[3];

  uint64_t v7 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = a2;
  char v21 = a3;
  if (Message.isEmpty.getter())
  {
    unint64_t v13 = a3;
    ((void (*)(void *__return_ptr, void, void, void, void))a2)(v23, 0, 0, 0, 0);
    if (!v3) {
      return (void *)v23[0];
    }
  }
  else
  {
    sub_1003C96A4(a1, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v12, v7);
      __chkstk_darwin();
      *(void *)&v19[-32] = v10;
      *(void *)&v19[-24] = sub_1003D3C00;
      *(void *)&v19[-16] = v19;
      sub_10000566C(&qword_1007140A8);
      unint64_t v13 = v10;
      sub_1005E1760();
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      if (!v3) {
        return (void *)v23[2];
      }
    }
    else
    {
      uint64_t v15 = *(void *)v12;
      unint64_t v14 = *((void *)v12 + 1);
      switch(v14 >> 62)
      {
        case 1uLL:
          if (v15 >> 32 < (int)v15) {
            __break(1u);
          }
          sub_100008D24(*(void *)v12, *((void *)v12 + 1));
          unint64_t v13 = sub_1003D2618((int)v15, v15 >> 32, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          sub_1000094D4(v15, v14);
          goto LABEL_16;
        case 2uLL:
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v16 = *(void *)(v15 + 24);
          swift_retain();
          swift_retain();
          unint64_t v13 = sub_1003D2618(v17, v16, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          memset(v23, 0, 14);
          unint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, void *))a2)(&v22, 0, 0, v23, v23);
          if (v3)
          {
LABEL_16:
            sub_1000094D4(v15, v14);
          }
          else
          {
            sub_1000094D4(v15, v14);
LABEL_18:
            unint64_t v13 = v22;
          }
          break;
        default:
          v23[0] = *(void *)v12;
          LOWORD(v23[1]) = v14;
          BYTE2(v23[1]) = BYTE2(v14);
          BYTE3(v23[1]) = BYTE3(v14);
          BYTE4(v23[1]) = BYTE4(v14);
          BYTE5(v23[1]) = BYTE5(v14);
          unint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, char *))a2)(&v22, 0, BYTE6(v14), v23, (char *)v23 + BYTE6(v14));
          sub_1000094D4(v15, v14);
          if (!v3) {
            goto LABEL_18;
          }
          return v13;
      }
    }
  }
  return v13;
}

uint64_t sub_1003D2B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, char *), uint64_t a9)
{
  sub_10013AF38(a5, sub_100136870);
  uint64_t v15 = sub_1005E0550();
  if (v15)
  {
    uint64_t v16 = sub_1005E0580();
    if (__OFSUB__(a1, v16)) {
      goto LABEL_21;
    }
    v15 += a1 - v16;
  }
  BOOL v17 = __OFSUB__(a2, a1);
  uint64_t v18 = a2 - a1;
  if (v17)
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  uint64_t v19 = sub_1005E0570();
  if (v19 >= v18) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v19;
  }
  if (v15) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v21 < 0) {
    goto LABEL_20;
  }
  uint64_t v22 = v15 + v20;
  uint64_t v23 = a6;
  if (v15) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = 0;
  }
  sub_10013AF38(a5, sub_100136870);
  sub_1003CAB74(a4, 0, v21, v15);
  if (v26) {
    uint64_t v27 = v21;
  }
  else {
    uint64_t v27 = v25;
  }
  sub_1003D51BC(a4, 0, v21, v15, v24, v27);
  unsigned int v39 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_10013AE3C(a5, (uint64_t)v42);
  BOOL v35 = sub_10013AEAC((uint64_t)v42) != 1;
  UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v42);
  uint64_t v41 = 0;
  char v36 = a8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = &v41;
  sub_10013AF38(a5, sub_100136870);
  sub_1003E27BC(v23, v35, 1, (void (*)(void))sub_1003D3EE0, v37, v36, a9, v39, v30, v32, v34, a5, v23, a7, (uint64_t (*)(unint64_t, unint64_t))v36, a9);
  sub_10013AF38(a5, sub_100061440);
  swift_release();
  sub_10013AF38(a5, sub_100061440);
  sub_10013AF38(a5, sub_100061440);
  return v41;
}

uint64_t sub_1003D2DC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7)
{
  uint64_t v65 = a7;
  unint64_t v66 = a1;
  uint64_t v12 = sub_1005E17E0();
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  __chkstk_darwin();
  uint64_t v59 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013AF38(a3, sub_100136870);
  v69[16] = a2;
  uint64_t v70 = a3;
  unsigned int v62 = a4;
  char v71 = a4;
  uint64_t v16 = a5;
  uint64_t v72 = a5;
  uint64_t v73 = a6;
  char v63 = a6;
  uint64_t v17 = v65;
  uint64_t v74 = v65;
  uint64_t v67 = sub_1003A2BCC;
  uint64_t v68 = v69;
  sub_10013AF38(a3, sub_100136870);
  sub_10013AF38(a3, sub_100136870);
  sub_10013AF38(a3, sub_100136870);
  uint64_t v18 = v66;
  sub_10013AF38(a3, sub_100136870);
  if (Message.isEmpty.getter())
  {
    sub_10013AF38(a3, sub_100136870);
    sub_1003CAB74(a2, 0, 0, 0);
    if ((v20 & 1) == 0 && v19)
    {
      __break(1u);
LABEL_26:
      __break(1u);
    }
    sub_10013AE3C(a3, (uint64_t)v77);
    BOOL v21 = sub_10013AEAC((uint64_t)v77) != 1;
    UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v77);
    v76[0] = 0;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v76;
    sub_10013AF38(a3, sub_100136870);
    sub_1003E27BC(v62, v21, 1, (void (*)(void))sub_1003D3EE0, v22, v63, v17, a2, 0, 0, 0, a3, v62, v16, (uint64_t (*)(unint64_t, unint64_t))v63, v17);
    sub_10013AF38(a3, sub_100061440);
    swift_release();
    sub_10013AF38(a3, sub_100061440);
    uint64_t v23 = v76[0];
    uint64_t v24 = a3;
LABEL_23:
    sub_10013AF38(v24, sub_100061440);
  }
  else
  {
    sub_1003C96A4(v18, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v29 = *v15;
      unint64_t v28 = v15[1];
      switch(v28 >> 62)
      {
        case 1uLL:
          if (v29 >> 32 < (int)v29) {
            goto LABEL_26;
          }
          unint64_t v66 = v28 & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v43 = v28;
          sub_10013AF38(a3, sub_100136870);
          sub_100008D24(v29, v43);
          uint64_t v23 = sub_1003D2B60((int)v29, v29 >> 32, v66, a2, a3, v62, v16, v63, v17);
          sub_10013AF38(a3, sub_100061440);
          sub_1000094D4(v29, v43);
          sub_1000094D4(v29, v43);
LABEL_16:
          sub_10013AF38(a3, sub_100061440);
          goto LABEL_24;
        case 2uLL:
          uint64_t v44 = v28 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v45 = *(void *)(v29 + 16);
          uint64_t v46 = *(void *)(v29 + 24);
          unint64_t v66 = v28;
          sub_10013AF38(a3, sub_100136870);
          swift_retain();
          swift_retain();
          uint64_t v23 = sub_1003D2B60(v45, v46, v44, a2, a3, v62, v16, v63, v17);
          sub_10013AF38(a3, sub_100061440);
          swift_release();
          swift_release();
          sub_1000094D4(v29, v66);
          goto LABEL_16;
        case 3uLL:
          memset(v76, 0, 14);
          unint64_t v66 = v28;
          sub_10013AF38(a3, sub_100136870);
          uint64_t v61 = v29;
          sub_1003CAB74(a2, 0, 0, (uint64_t)v76);
          if (v48) {
            uint64_t v49 = 0;
          }
          else {
            uint64_t v49 = v47;
          }
          sub_1003D51BC(a2, 0, 0, (uint64_t)v76, (uint64_t)v76, v49);
          unsigned int v51 = v50;
          uint64_t v53 = v52;
          uint64_t v59 = v55;
          uint64_t v60 = v54;
          sub_10013AE3C(a3, (uint64_t)v78);
          BOOL v56 = sub_10013AEAC((uint64_t)v78) != 1;
          UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v78);
          uint64_t v75 = 0;
          uint64_t v57 = swift_allocObject();
          *(void *)(v57 + 16) = &v75;
          sub_10013AF38(a3, sub_100136870);
          sub_1003E27BC(v62, v56, 1, (void (*)(void))sub_1003D3EE0, v57, v63, v17, v51, v53, v60, v59, a3, v62, v16, (uint64_t (*)(unint64_t, unint64_t))v63, v17);
          goto LABEL_22;
        default:
          v76[0] = *v15;
          LOWORD(v76[1]) = v28;
          BYTE2(v76[1]) = BYTE2(v28);
          BYTE3(v76[1]) = BYTE3(v28);
          uint64_t v30 = BYTE6(v28);
          BYTE4(v76[1]) = BYTE4(v28);
          uint64_t v31 = (char *)v76 + BYTE6(v28);
          BYTE5(v76[1]) = BYTE5(v28);
          unint64_t v66 = v28;
          sub_10013AF38(a3, sub_100136870);
          uint64_t v61 = v29;
          sub_1003CAB74(a2, 0, v30, (uint64_t)v76);
          if (v33) {
            uint64_t v34 = v30;
          }
          else {
            uint64_t v34 = v32;
          }
          sub_1003D51BC(a2, 0, v30, (uint64_t)v76, (uint64_t)v31, v34);
          unsigned int v36 = v35;
          uint64_t v38 = v37;
          uint64_t v59 = v40;
          uint64_t v60 = v39;
          sub_10013AE3C(a3, (uint64_t)v79);
          BOOL v41 = sub_10013AEAC((uint64_t)v79) != 1;
          UInt32.init(_:)((IMAP2Persistence::CredentialsRequestID)v79);
          uint64_t v75 = 0;
          uint64_t v42 = swift_allocObject();
          *(void *)(v42 + 16) = &v75;
          sub_10013AF38(a3, sub_100136870);
          sub_1003E27BC(v62, v41, 1, (void (*)(void))sub_1003D3EA8, v42, v63, v17, v36, v38, v60, v59, a3, v62, v16, (uint64_t (*)(unint64_t, unint64_t))v63, v17);
LABEL_22:
          sub_10013AF38(a3, sub_100061440);
          swift_release();
          sub_10013AF38(a3, sub_100061440);
          sub_1000094D4(v61, v66);
          uint64_t v23 = v75;
          uint64_t v24 = a3;
          goto LABEL_23;
      }
    }
    uint64_t v26 = v59;
    uint64_t v25 = v60;
    uint64_t v23 = v61;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v60 + 32))(v59, v15, v61);
    __chkstk_darwin();
    sub_10000566C(&qword_1007140A8);
    uint64_t v27 = v64;
    sub_1005E1760();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v23);
    sub_10013AF38(a3, sub_100061440);
    if (!v27) {
      uint64_t v23 = v76[2];
    }
  }
LABEL_24:
  sub_10013AF38(a3, sub_100061440);
  sub_10013AF38(a3, sub_100061440);
  sub_10013AF38(a3, sub_100061440);
  sub_10013AF38(a3, sub_100061440);
  return v23;
}

void *sub_1003D3780(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, void), void *a3)
{
  void *(*v22)(uint64_t *__return_ptr, void);
  void *v23;

  uint64_t v7 = sub_1005E17E0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v20[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  if (Message.isEmpty.getter())
  {
    uint64_t v13 = a3;
    ((void (*)(void *__return_ptr, void, void, void, void))a2)(v20, 0, 0, 0, 0);
    if (!v3) {
      return (void *)v20[0];
    }
  }
  else
  {
    sub_1003C96A4(a1, (uint64_t)v12);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
      __chkstk_darwin();
      *(&v19 - 4) = v10;
      *(&v19 - 3) = sub_1003D3C00;
      *(&v19 - 2) = &v21;
      sub_10000566C(&qword_1007140A0);
      uint64_t v13 = v10;
      sub_1005E1760();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      if (!v3) {
        return (void *)v20[2];
      }
    }
    else
    {
      uint64_t v15 = *(void *)v12;
      unint64_t v14 = *((void *)v12 + 1);
      switch(v14 >> 62)
      {
        case 1uLL:
          if (v15 >> 32 < (int)v15) {
            __break(1u);
          }
          sub_100008D24(*(void *)v12, *((void *)v12 + 1));
          uint64_t v13 = sub_1003D2618((int)v15, v15 >> 32, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          sub_1000094D4(v15, v14);
          goto LABEL_16;
        case 2uLL:
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v16 = *(void *)(v15 + 24);
          swift_retain();
          swift_retain();
          uint64_t v13 = sub_1003D2618(v17, v16, v14 & 0x3FFFFFFFFFFFFFFFLL, a2);
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          memset(v20, 0, 14);
          uint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, void *))a2)(&v19, 0, 0, v20, v20);
          if (v3)
          {
LABEL_16:
            sub_1000094D4(v15, v14);
          }
          else
          {
            sub_1000094D4(v15, v14);
LABEL_18:
            uint64_t v13 = v19;
          }
          break;
        default:
          v20[0] = *(void *)v12;
          LOWORD(v20[1]) = v14;
          BYTE2(v20[1]) = BYTE2(v14);
          BYTE3(v20[1]) = BYTE3(v14);
          BYTE4(v20[1]) = BYTE4(v14);
          BYTE5(v20[1]) = BYTE5(v14);
          uint64_t v13 = a3;
          ((void (*)(void **__return_ptr, void, void, void *, char *))a2)(&v19, 0, BYTE6(v14), v20, (char *)v20 + BYTE6(v14));
          sub_1000094D4(v15, v14);
          if (!v3) {
            goto LABEL_18;
          }
          return v13;
      }
    }
  }
  return v13;
}

void *sub_1003D3C00@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1003D3DBC(a1, a2, a3);
}

void *sub_1003D3C18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1003D3E20(a1, a2);
}

uint64_t sub_1003D3C30(uint64_t result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = a2 - result;
  }
  else {
    uint64_t v3 = 0;
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return (*(uint64_t (**)(void))(v2 + 24))(0);
  }
  __break(1u);
  return result;
}

void *sub_1003D3C7C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1003D3CD8(a1, a2);
}

uint64_t sub_1003D3C94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24) - v4;
  if (!v4) {
    uint64_t v5 = 0;
  }
  BOOL v6 = (v5 | v4) == 0;
  if (v4) {
    BOOL v7 = v5 == a2 - result;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v8 = v7 && v4 == result;
  if (!result) {
    BOOL v8 = v6;
  }
  *a3 = v8;
  return result;
}

void *sub_1003D3CD8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  void *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  void *result;
  uint64_t v9;

  BOOL v6 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  BOOL v7 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  uint64_t result = v6(&v9, a1, a1 + v7);
  if (!v3) {
    *a2 = v9;
  }
  return result;
}

uint64_t sub_1003D3D50(uint64_t result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = a2 - result;
  }
  else {
    uint64_t v3 = 0;
  }
  if ((v3 & 0x8000000000000000) == 0) {
    return (*(uint64_t (**)(void))(v2 + 16))(0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D3D9C(uint64_t a1)
{
  return sub_1003C9708(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24));
}

void *sub_1003D3DBC@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result) {
    uint64_t v6 = a2 - (void)result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void))(v3 + 16))(&v7, 0);
    if (!v4) {
      *a3 = v7;
    }
  }
  return result;
}

void *sub_1003D3E20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void *(*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  void *result;
  uint64_t v9;

  uint64_t v6 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  uint64_t v7 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
  uint64_t result = v6(&v9, a1, a1 + v7);
  if (!v3) {
    *a2 = v9;
  }
  return result;
}

uint64_t sub_1003D3E98()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D3EA8(uint64_t a1)
{
  return sub_1003A21FC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1003D3EB0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D3EC0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D3ED0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D3EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_1003D0E90(a1, a2, a3);
}

uint64_t Message.withMessageHeader<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v5[2] = a3;
  v5[3] = a1;
  v5[4] = a2;
  return sub_1003CF630((uint64_t)sub_1003D3F3C, (uint64_t)v5, a3, a4);
}

uint64_t sub_1003D3F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003D3F68(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24), *(void *)(v4 + 32), a1, a2, a3, a4);
}

uint64_t sub_1003D3F68(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1003D521C(3, a3, a4, a5, a6);
  if (!v6)
  {
    if (v10 < 0)
    {
      __break(1u);
    }
    else
    {
      if (v9) {
        uint64_t v11 = v9 + v10;
      }
      else {
        uint64_t v11 = 0;
      }
      return a1(v9, v11);
    }
  }
  return result;
}

uint64_t sub_1003D3FDC(const void *a1, uint64_t a2)
{
  size_t v2 = a2 - (void)a1;
  if (a1) {
    uint64_t v3 = a2 - (void)a1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (v4 < 0) {
    goto LABEL_18;
  }
  if (v4 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v7 = (char *)&v12 - v6;
    if (a1) {
      memmove((char *)&v12 - v6, a1, v2);
    }
    else {
      size_t v2 = 0;
    }
    v7[v2] = 0;
    return CompactEncDet_EncodingNameAliasToEncoding(v7);
  }
  else
  {
    uint64_t v9 = (char *)swift_slowAlloc();
    uint64_t v10 = v9;
    if (a1) {
      memmove(v9, a1, v2);
    }
    else {
      size_t v2 = 0;
    }
    v10[v2] = 0;
    uint64_t v8 = CompactEncDet_EncodingNameAliasToEncoding(v10);
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_1003D4124()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 8);
  v6._uint64_t countAndFlagsBits = 91;
  v6._object = (void *)0xE100000000000000;
  sub_1005E1E30(v6);
  sub_1005E2E90();
  v7._uint64_t countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  sub_1005E1E30(v7);
  v8._uint64_t countAndFlagsBits = sub_1003D4338(v4, v1, v2, v3);
  sub_1005E1E30(v8);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t initializeWithCopy for Part(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Part(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for Part(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Part(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for Part()
{
  return &type metadata for Part;
}

uint64_t sub_1003D4300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a3 - a2 >= a4) {
      return a2 + a4;
    }
    __break(1u);
  }
  else if (a4 <= 0)
  {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D4338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0x3E6C696E3CLL;
  }
  if (a3 - a2 < a4)
  {
    __break(1u);
  }
  else
  {
    sub_1005E2E90();
    v5._uint64_t countAndFlagsBits = 3943982;
    v5._object = (void *)0xE300000000000000;
    sub_1005E1E30(v5);
    sub_1005E2E90();
    v6._uint64_t countAndFlagsBits = 3943982;
    v6._object = (void *)0xE300000000000000;
    sub_1005E1E30(v6);
    sub_1005E2E90();
    return 0;
  }
  return result;
}

uint64_t sub_1003D4440(uint64_t a1)
{
  return sub_1003D4338(a1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1003D444C(unsigned __int8 a1, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    return 0;
  }
  int64_t v7 = a3;
  uint64_t v8 = a2;
  unint64_t v9 = 0;
  uint64_t v50 = a5 - a4;
  if (a4) {
    uint64_t v10 = a5 - a4;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v51 = a1;
  uint64_t v52 = v10;
  while (2)
  {
    switch(v51)
    {
      case 1:
        if (!a4) {
          goto LABEL_43;
        }
        uint64_t v16 = a4 + v8;
        uint64_t v17 = (char *)memchr((void *)(a4 + v8), 13, v7 - v8);
        if (!v17) {
          goto LABEL_43;
        }
        uint64_t v18 = &v17[-v16];
        if ((uint64_t)&v17[-v16] < 0) {
          goto LABEL_43;
        }
        uint64_t v19 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_145;
        }
        if (v7 - v8 < (uint64_t)v19) {
          goto LABEL_43;
        }
        int64_t v15 = (int64_t)&v18[v8];
        if (__OFADD__(v18, v8)) {
          goto LABEL_153;
        }
        uint64_t v5 = (uint64_t)&v19[v8];
        if (__OFADD__(v19, v8)) {
          goto LABEL_154;
        }
        if ((uint64_t)v19 < (uint64_t)v18 || v5 < v15) {
          goto LABEL_155;
        }
        goto LABEL_106;
      case 2:
        if (!a4) {
          goto LABEL_43;
        }
        uint64_t v20 = a4 + v8;
        char v21 = (char *)memchr((void *)(a4 + v8), 10, v7 - v8);
        if (!v21) {
          goto LABEL_43;
        }
        uint64_t v22 = &v21[-v20];
        if ((uint64_t)&v21[-v20] < 0) {
          goto LABEL_43;
        }
        uint64_t v23 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_146;
        }
        if (v7 - v8 < (uint64_t)v23) {
          goto LABEL_43;
        }
        int64_t v15 = (int64_t)&v22[v8];
        if (__OFADD__(v22, v8)) {
          goto LABEL_156;
        }
        uint64_t v5 = (uint64_t)&v23[v8];
        if (__OFADD__(v23, v8)) {
          goto LABEL_157;
        }
        if ((uint64_t)v23 < (uint64_t)v22 || v5 < v15) {
          goto LABEL_158;
        }
        goto LABEL_106;
      case 3:
        if (!a4) {
          goto LABEL_43;
        }
        uint64_t v24 = a4 + v8;
        uint64_t v25 = (char *)memchr((void *)(a4 + v8), 10, v7 - v8);
        if (!v25) {
          goto LABEL_43;
        }
        uint64_t v26 = &v25[-v24];
        if ((uint64_t)&v25[-v24] < 0) {
          goto LABEL_43;
        }
        uint64_t v27 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_147;
        }
        if (v7 - v8 < (uint64_t)v27) {
          goto LABEL_43;
        }
        int64_t v15 = (int64_t)&v26[v8];
        if (__OFADD__(v26, v8)) {
          goto LABEL_159;
        }
        uint64_t v5 = (uint64_t)&v27[v8];
        if (__OFADD__(v27, v8)) {
          goto LABEL_160;
        }
        if ((uint64_t)v27 < (uint64_t)v26 || v5 < v15) {
          goto LABEL_161;
        }
        if (v8 >= v15) {
          goto LABEL_106;
        }
        if (v15 > v7) {
          goto LABEL_163;
        }
        if (*(unsigned char *)(a4 + v15 - 1) == 13) {
          --v15;
        }
        goto LABEL_106;
      default:
        if (!a4) {
          goto LABEL_43;
        }
        uint64_t v11 = a4 + v8;
        uint64_t v12 = (char *)memmem((const void *)(a4 + v8), v7 - v8, "\r\n", 2uLL);
        if (!v12) {
          goto LABEL_43;
        }
        uint64_t v13 = &v12[-v11];
        if ((uint64_t)&v12[-v11] < 0) {
          goto LABEL_43;
        }
        unint64_t v14 = v13 + 2;
        if (__OFADD__(v13, 2)) {
          goto LABEL_144;
        }
        if (v7 - v8 < (uint64_t)v14)
        {
LABEL_43:
          uint64_t v5 = 0;
          char v28 = 1;
          int64_t v15 = v7;
          int64_t v29 = v7 - v8;
          if (v7 == v8) {
            goto LABEL_119;
          }
        }
        else
        {
          int64_t v15 = (int64_t)&v13[v8];
          if (__OFADD__(v13, v8)) {
            goto LABEL_150;
          }
          uint64_t v5 = (uint64_t)&v14[v8];
          if (__OFADD__(v14, v8)) {
            goto LABEL_151;
          }
          if ((uint64_t)v14 < (uint64_t)v13 || v5 < v15) {
            goto LABEL_152;
          }
LABEL_106:
          if (v15 < v8) {
            goto LABEL_136;
          }
          if (v15 > v7)
          {
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
            goto LABEL_162;
          }
          char v28 = 0;
          int64_t v29 = v15 - v8;
          if (v15 == v8) {
            goto LABEL_119;
          }
        }
        if (v8 < 0 || v52 < v8) {
          goto LABEL_125;
        }
        if (v15 < 0 || v52 < v15) {
          goto LABEL_126;
        }
        if (a4)
        {
          if (v29 <= 399)
          {
            uint64_t v30 = (unsigned __int8 *)(a4 + v8);
            int64_t v31 = v7;
            char v32 = v28;
            char v33 = memchr((void *)(a4 + v8), 58, v29);
            char v28 = v32;
            int64_t v7 = v31;
            if (v33)
            {
              int64_t v34 = v33 - v30;
              if (v33 - v30 >= 0)
              {
                int64_t v35 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  goto LABEL_135;
                }
                if (v29 >= v35)
                {
                  int64_t v36 = v34 + v8;
                  if (__OFADD__(v34, v8)) {
                    goto LABEL_138;
                  }
                  if (__OFADD__(v35, v8)) {
                    goto LABEL_139;
                  }
                  if (v35 < v34 || v35 + v8 < v36) {
                    goto LABEL_140;
                  }
                  if (v50 < v8) {
                    goto LABEL_141;
                  }
                  if (v36 < 0) {
                    goto LABEL_142;
                  }
                  if (v50 < v36) {
                    goto LABEL_143;
                  }
                  if ((unint64_t)(v34 - 61) >= 0xFFFFFFFFFFFFFFC4)
                  {
                    if (v36 < (unint64_t)v8) {
                      goto LABEL_148;
                    }
                    if (v15 < (unint64_t)v36) {
                      goto LABEL_149;
                    }
                    if (v36 == v8) {
                      goto LABEL_90;
                    }
                    unsigned int v37 = *v30;
                    if (v37 > 0x20 || ((1 << v37) & 0x100002600) == 0)
                    {
                      uint64_t v45 = v8 + 1;
                      if (v8 + 1 == v36) {
                        goto LABEL_90;
                      }
                      while (v45 < v36)
                      {
                        unsigned int v46 = *(unsigned __int8 *)(a4 + v45);
                        BOOL v42 = v46 > 0x20;
                        uint64_t v47 = (1 << v46) & 0x100002600;
                        if (!v42 && v47 != 0) {
                          goto LABEL_67;
                        }
                        if (v36 == ++v45) {
                          goto LABEL_90;
                        }
                      }
LABEL_164:
                      __break(1u);
                      JUMPOUT(0x1003D49C8);
                    }
                  }
                }
              }
            }
          }
        }
LABEL_67:
        if (!v9) {
          return 0;
        }
        if (v29 > 399) {
          return v8;
        }
        if (v15 <= (unint64_t)v8) {
          goto LABEL_127;
        }
        unsigned int v38 = *(unsigned __int8 *)(a4 + v8);
        uint64_t v39 = v8;
        if (v38 > 0x20) {
          goto LABEL_81;
        }
        uint64_t v39 = v8;
        if (((1 << v38) & 0x100002600) == 0) {
          goto LABEL_81;
        }
        uint64_t v40 = v8 + 1;
        uint64_t v39 = v15;
        if (v8 + 1 == v15)
        {
LABEL_80:
          if (v39 < v8) {
            goto LABEL_128;
          }
          goto LABEL_81;
        }
        while (1)
        {
          if (v40 >= v15)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          unsigned int v41 = *(unsigned __int8 *)(a4 + v40);
          BOOL v42 = v41 > 0x20;
          uint64_t v43 = (1 << v41) & 0x100002600;
          if (v42 || v43 == 0) {
            break;
          }
          if (v15 == ++v40)
          {
            uint64_t v39 = v15;
            goto LABEL_80;
          }
        }
        uint64_t v39 = v40;
        if (v40 < v8)
        {
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
LABEL_81:
        if (v15 < v39) {
          goto LABEL_129;
        }
        if (a4)
        {
          if (v50 < v8) {
            goto LABEL_133;
          }
          if (v50 < v39) {
            goto LABEL_130;
          }
        }
        else
        {
          if (v8 > 0) {
            goto LABEL_134;
          }
          if (v39 > 0) {
            goto LABEL_130;
          }
        }
        if (v39 == v15 || (unint64_t)(v39 - v8 - 13) < 0xFFFFFFFFFFFFFFF4)
        {
LABEL_119:
          if (v9) {
            return v8;
          }
          return 0;
        }
LABEL_90:
        if (v28)
        {
          if (v7 >= v8) {
            return v7;
          }
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (v5 > v7) {
          goto LABEL_131;
        }
        if (v5 < v8) {
          goto LABEL_132;
        }
        if (v9 <= 0x12)
        {
          ++v9;
          uint64_t v8 = v5;
          if (v5 != v7) {
            continue;
          }
        }
        return v5;
    }
  }
}

uint64_t sub_1003D49D8(uint64_t (*a1)(uint64_t), uint64_t a2, void (*a3)(void *, char *, char *, uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(void *), uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t result = a1(v6);
  if (!v7 && (_BYTE)result)
  {
    if (result == 1)
    {
      if ((*(void *)(v6 + 32) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        if (*(void *)(v6 + 16)) {
          uint64_t v17 = *(void *)(v6 + 32);
        }
        else {
          uint64_t v17 = 0;
        }
        if ((v17 & 0x8000000000000000) == 0)
        {
          uint64_t v18 = sub_1003ECACC();
          if (v21 != 2)
          {
            uint64_t v22 = (char *)v18;
            uint64_t v23 = v19;
            uint64_t v24 = v20;
            do
            {
              uint64_t v25 = v21 & 1;
              sub_1003EC298(v22, v23, v24, v21 & 1, v48);
              a3(v48, v22, v23, v24, v25);
              sub_1003BE46C((uint64_t)v48);
              uint64_t v22 = (char *)sub_1003ECACC();
              uint64_t v23 = v26;
              uint64_t v24 = v27;
            }
            while (v21 != 2);
          }
          return 2;
        }
      }
      __break(1u);
      return result;
    }
    sub_1003D5428(*(unsigned __int8 *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 32), a3, (uint64_t)v49);
    sub_10001FDF0((uint64_t)&v50, (uint64_t)v53, &qword_100713A60);
    sub_10001FDF0((uint64_t)v53, (uint64_t)v54, &qword_100713A60);
    if (!*((void *)&v55 + 1)) {
      return 2;
    }
    v56[0] = v54[0];
    v56[1] = v54[1];
    v56[2] = v55;
    sub_10039DF8C((uint64_t)v56, (uint64_t)v60);
    sub_10039DF8C((uint64_t)v60, (uint64_t)v61);
    if (v62 >= 0x10u)
    {
      sub_1003D5674((uint64_t)v49);
      return 2;
    }
    sub_1003BA534(v61, &v63);
    sub_1003D5674((uint64_t)v49);
    sub_10001FDF0((uint64_t)&v51, (uint64_t)v52, &qword_100713CE0);
    sub_10001FDF0((uint64_t)v52, (uint64_t)&v57, &qword_100713CE0);
    char v28 = v59;
    if (v59 == 2) {
      return 2;
    }
    int64_t v29 = v57;
    uint64_t v30 = v58;
    if (!a5)
    {
      unint64_t v33 = 0;
      char v34 = 1;
      return (uint64_t)sub_1003D4E38(v29, v30, v28 & 1, v33, v34, (uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
    }
    char v46 = v59;
    uint64_t v47 = v58;
    uint64_t v67 = v57;
    sub_1003BA534(&v63, &v64);
    if (v65 < 0)
    {
      v65 &= ~0x80u;
      sub_10001FDF0((uint64_t)&v64, (uint64_t)v66, &qword_100713A68);
    }
    else if (!v64.n128_u8[0])
    {
      int64_t v31 = *(void **)v6;
      swift_retain();
      uint64_t v32 = a5(v31);
      unint64_t v33 = v32;
      if (v32)
      {
        if (v32 != 1)
        {
          if (v32 == 2)
          {
            sub_10003E960((uint64_t)a5);
            return 0;
          }
          uint64_t v35 = v31[2];
          if (v35 + 1 != *(void *)(v32 + 16)) {
            goto LABEL_44;
          }
          unint64_t v45 = v32;
          if (v35)
          {
            if (v31[4] != *(void *)(v32 + 32))
            {
LABEL_43:
              sub_10002292C(v8);
              unint64_t v33 = v45;
              sub_100007810(v45);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
LABEL_44:
              sub_10003E960((uint64_t)a5);
              sub_1000078B0(v33);
              return 2;
            }
            if (v35 != 1)
            {
              int64_t v36 = v31 + 5;
              uint64_t v37 = v35 - 2;
              unsigned int v38 = (uint64_t *)(v32 + 40);
              do
              {
                uint64_t v39 = v37;
                uint64_t v41 = *v36++;
                uint64_t v40 = v41;
                uint64_t v42 = *v38++;
                if (v40 != v42) {
                  goto LABEL_43;
                }
                uint64_t v37 = v39 - 1;
              }
              while (v39);
            }
          }
          uint64_t v44 = v32 + 32;
          sub_10002292C(v8);
          sub_100007810(v45);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = *(void *)(v45 + 16);
          if (!v43)
          {
            sub_10003E960((uint64_t)a5);
            sub_1000078B0(v45);
            return 2;
          }
          unint64_t v33 = *(void *)(v44 + 8 * v43 - 8);
          sub_10003E960((uint64_t)a5);
          sub_1000078B0(v45);
          char v34 = 0;
          goto LABEL_30;
        }
        sub_10003E960((uint64_t)a5);
        return 2;
      }
      sub_10003E960((uint64_t)a5);
LABEL_29:
      char v34 = 1;
LABEL_30:
      int64_t v29 = v67;
      uint64_t v30 = v47;
      char v28 = v46;
      return (uint64_t)sub_1003D4E38(v29, v30, v28 & 1, v33, v34, (uint64_t)a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
    }
    unint64_t v33 = 0;
    goto LABEL_29;
  }
  return result;
}

void *sub_1003D4E38(void *result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v13[3] = a4;
  char v14 = a5 & 1;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  uint64_t v17 = a8;
  uint64_t v18 = a9;
  uint64_t v19 = a10;
  uint64_t v20 = a11;
  if ((a3 & 1) == 0) {
    return (void *)sub_1003D4EF0((Swift::Int)result, a2, a4, a5 & 1, a6, a7, a8, a9, a10, a11);
  }
  if (result) {
    uint64_t v12 = a2 - (void)result;
  }
  else {
    uint64_t v12 = 0;
  }
  if ((v12 & 0x8000000000000000) == 0) {
    return sub_1003CB1F4(0, v12, (uint64_t)result, a2, (void *(*)(uint64_t *__return_ptr))sub_1003D56A0, v13);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1003D4EF0(Swift::Int result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v11;
  uint64_t v40 = (void *)result;
  unsigned int v43 = *(unsigned __int8 *)(v10 + 8);
  uint64_t v14 = *(void *)(v10 + 16);
  uint64_t v15 = *(void *)(v10 + 32);
  if (v14)
  {
    uint64_t v16 = *(void *)(v10 + 24) - v14;
    if (v16 < v15)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v17 = v16 - v15;
    if (v16 - v15 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v18 = v14 + v15;
    uint64_t v19 = *(void *)(v10 + 24);
  }
  else
  {
    if (v15 >= 1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v17 = 0;
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t result = (Swift::Int)sub_1003AA0A8(0, v17, v18, v19, v43, (void *)result, a2);
  if (v21 == -1) {
    return 2;
  }
  uint64_t v22 = v20;
  if (v21) {
    goto LABEL_26;
  }
  uint64_t v39 = v19;
  if (v17 < v20)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v20 < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t v32 = 0;
    if (v17 < v22)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      uint64_t result = swift_bridgeObjectRelease();
      if (v33 >= v12)
      {
        if (v12 >= v22) {
          return result;
        }
        __break(1u);
        if (v33 >= v12)
        {
          if (v12 >= v22) {
            return result;
          }
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
LABEL_27:
    if (v22 >= v32) {
      return 2;
    }
    goto LABEL_45;
  }
  uint64_t v23 = 0;
  uint64_t v33 = v17;
  while (1)
  {
    uint64_t v24 = v13;
    uint64_t v25 = v18;
    uint64_t result = (Swift::Int)sub_1003AA0A8(v22, v17, v18, v39, v43, v40, a2);
    if (v27 == -1) {
      return 2;
    }
    uint64_t v28 = result;
    if (result < v22) {
      goto LABEL_41;
    }
    uint64_t result = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_42;
    }
    uint64_t v12 = v26;
    char v29 = v27;
    if ((a4 & 1) == 0 && result != a3)
    {
      uint64_t v13 = v24;
      if (v27) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    SectionSpecifier.Part.appending(_:)(result);
    sub_1003D521C(v43, v22, v28, v25, v39);
    if (v24) {
      goto LABEL_32;
    }
    char v30 = sub_1003D49D8(a5, a6, a7, a8, a9, a10);
    uint64_t v13 = 0;
    uint64_t result = swift_bridgeObjectRelease();
    if (!v30) {
      break;
    }
    uint64_t v17 = v33;
    if (v29)
    {
LABEL_30:
      uint64_t v32 = v22;
      uint64_t v22 = v12;
      if (v17 >= v12) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
LABEL_22:
    if (v17 < v12) {
      goto LABEL_40;
    }
    uint64_t v18 = v25;
    ++v23;
    BOOL v31 = v12 < v22;
    uint64_t v22 = v12;
    if (v31) {
      goto LABEL_25;
    }
  }
  if (v33 < v12) {
    goto LABEL_50;
  }
  if (v12 >= v22) {
    return 0;
  }
LABEL_51:
  __break(1u);
  return result;
}

void sub_1003D51BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5 - a4;
  if (a4)
  {
    uint64_t v8 = a4 + a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  if (a4) {
    uint64_t v9 = a4 + a2;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a2 < 0 || v7 < a2)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  if (a6 < 0 || v7 < a6) {
    goto LABEL_16;
  }
  uint64_t v10 = a6 - a2;
  uint64_t v11 = v8 - v9;
  if (!v9) {
    uint64_t v11 = 0;
  }
  if (v11 < v10) {
    goto LABEL_17;
  }
}

uint64_t sub_1003D521C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = result;
  if (a2 != a3)
  {
    if (a2 >= a3) {
      goto LABEL_32;
    }
    int v11 = *(unsigned __int8 *)(a4 + a2);
    if (v11 == 10 || v11 == 13)
    {
      sub_1003CA4E0(result);
      uint64_t v13 = a2;
    }
    else
    {
      sub_1003CAB74(result, a2, a3, a4);
      if (v21)
      {
        if ((sub_1003CAE94(v8) & 1) != 0 && sub_1001F94DC(a2, a3, a4, a5) <= 1499)
        {
          uint64_t v14 = v8;
          uint64_t v15 = a2;
          uint64_t v16 = a3;
          uint64_t v17 = a4;
          uint64_t v18 = a5;
          uint64_t v13 = a3;
          goto LABEL_15;
        }
        uint64_t v22 = sub_1003D444C(v8, a2, a3, a4, a5);
        if (v23)
        {
          if (a4) {
            uint64_t v24 = a4 + a3;
          }
          else {
            uint64_t v24 = 0;
          }
          if (a4) {
            uint64_t v8 = a4 + a2;
          }
          else {
            uint64_t v8 = 0;
          }
          sub_1003D53D4();
          swift_allocError();
          *uint64_t v25 = v8;
          v25[1] = v24;
          swift_willThrow();
          return v8;
        }
        uint64_t v13 = v22;
      }
      else
      {
        uint64_t v13 = v20;
      }
    }
    uint64_t v14 = v8;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
LABEL_15:
    sub_1003D51BC(v14, v15, v16, v17, v18, v13);
    return v19;
  }
  uint64_t v9 = a5 - a4;
  if (!a4) {
    uint64_t v9 = 0;
  }
  if ((a2 & 0x8000000000000000) == 0 && v9 >= a2) {
    return v8;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_1003D53D4()
{
  unint64_t result = qword_1007140B8;
  if (!qword_1007140B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140B8);
  }
  return result;
}

uint64_t sub_1003D5428@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *, char *, char *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  if (a3 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (a2) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < 0) {
    goto LABEL_20;
  }
  unint64_t result = sub_1003ECACC();
  if (v10 == 2)
  {
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    char v18 = 2;
    goto LABEL_18;
  }
  uint64_t v19 = (char *)result;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  char v11 = 0;
  long long v16 = 0uLL;
  long long v17 = 0uLL;
  char v18 = 2;
  while (2)
  {
    uint64_t v33 = v15;
    uint64_t v34 = v22;
    long long v35 = v17;
    long long v37 = v16;
    uint64_t v32 = v12;
    while (1)
    {
      uint64_t v25 = v10 & 1;
      sub_1003EC298(v19, v20, v21, v10 & 1, v39);
      a4(v39, v19, v20, v21, v25);
      sub_1003B52C0((uint64_t)v39, (uint64_t)&v40);
      unsigned __int8 v26 = v42;
      if ((unint64_t)v42 >> 59 != 14) {
        break;
      }
      *(void *)&long long v42 = v42 & 0x7FFFFFFFFFFFFFFLL;
      char v11 = 1;
LABEL_11:
      unint64_t result = sub_1003ECACC();
      uint64_t v19 = (char *)result;
      uint64_t v20 = v23;
      uint64_t v21 = v24;
      if (v10 == 2)
      {
        uint64_t v15 = v33;
        uint64_t v14 = v34;
        long long v17 = v35;
        long long v16 = v37;
        uint64_t v12 = v32;
        goto LABEL_18;
      }
    }
    if ((unint64_t)v42 >> 59 != 9)
    {
      sub_1003BE46C((uint64_t)v39);
      goto LABEL_11;
    }
    *(void *)&long long v42 = v42 & 0x7FFFFFFFFFFFFFFLL;
    long long v36 = v41;
    long long v38 = v40;
    long long v43 = v40;
    long long v44 = v41;
    long long v45 = v42;
    uint64_t v14 = *((void *)&v42 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1003B1DF4();
    uint64_t v28 = v27;
    char v18 = v29;
    sub_1003BE46C((uint64_t)v39);
    unint64_t result = sub_1003ECACC();
    long long v17 = v36;
    long long v16 = v38;
    uint64_t v15 = v26;
    uint64_t v19 = (char *)result;
    uint64_t v20 = v30;
    uint64_t v12 = v28;
    uint64_t v21 = v31;
    uint64_t v22 = v14;
    if (v10 != 2) {
      continue;
    }
    break;
  }
LABEL_18:
  *(unsigned char *)a5 = v11 & 1;
  *(_OWORD *)(a5 + 8) = v16;
  *(_OWORD *)(a5 + 24) = v17;
  *(void *)(a5 + 40) = v15;
  *(void *)(a5 + 48) = v14;
  *(void *)(a5 + 56) = v13;
  *(void *)(a5 + 64) = v12;
  *(unsigned char *)(a5 + 72) = v18;
  return result;
}

uint64_t sub_1003D5674(uint64_t a1)
{
  return a1;
}

Swift::Int sub_1003D56A0@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  Swift::Int result = sub_1003D4EF0(a1, a2, *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnsafePartBuffer(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[32]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafePartBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)Swift::Int result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)Swift::Int result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafePartBuffer()
{
  return &type metadata for UnsafePartBuffer;
}

unint64_t sub_1003D578C()
{
  unint64_t result = qword_1007140C0;
  if (!qword_1007140C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140C0);
  }
  return result;
}

uint64_t sub_1003D57E0(uint64_t a1, char **a2)
{
  uint64_t v3 = a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  v18[0] = *(_OWORD *)a1;
  v18[1] = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)&v18[0];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  sub_10001FDF0(a1 + 96, (uint64_t)v17, &qword_100713A60);
  LOBYTE(v3) = *(unsigned char *)(v3 + 184) != 2;
  sub_10002292C((uint64_t)v18);
  swift_bridgeObjectRetain();
  sub_1003B0FB4((uint64_t)v17);
  char v10 = sub_1003D78A4(v5, v7, v8, v9, (uint64_t)v17, v3);
  char v11 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v11 = sub_1003F007C(0, *((void *)v11 + 2) + 1, 1, v11);
    *a2 = v11;
  }
  unint64_t v14 = *((void *)v11 + 2);
  unint64_t v13 = *((void *)v11 + 3);
  if (v14 >= v13 >> 1)
  {
    char v11 = sub_1003F007C((char *)(v13 > 1), v14 + 1, 1, v11);
    *a2 = v11;
  }
  *((void *)v11 + 2) = v14 + 1;
  uint64_t v15 = &v11[16 * v14];
  *((void *)v15 + 4) = v6;
  v15[40] = v10;
  return 2;
}

uint64_t sub_1003D5920(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (!v2) {
    return !v3;
  }
  if (v2 == 1) {
    return v3 == 1;
  }
  if (v3 < 2) {
    return 0;
  }
  return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v2, v3);
}

uint64_t sub_1003D5960(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)a2) & (v2 == v3);
}

uint64_t sub_1003D59A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    while (!__OFSUB__(v4, v7))
    {
      unint64_t v8 = v7 + (v4 - v7) / 2;
      if (__OFADD__(v7, (v4 - v7) / 2)) {
        goto LABEL_16;
      }
      if (v8 >= v2) {
        goto LABEL_17;
      }
      uint64_t v9 = swift_bridgeObjectRetain();
      BOOL v10 = static SectionSpecifier.Part.< infix(_:_:)(v9, a1);
      uint64_t result = swift_bridgeObjectRelease();
      if (v10)
      {
        uint64_t v7 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_18;
        }
        if (v4 < v7) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v11 = *(void *)(v5 + 16 * v8);
        swift_bridgeObjectRetain();
        BOOL v12 = static SectionSpecifier.Part.< infix(_:_:)(a1, v11);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v12) {
          goto LABEL_13;
        }
        uint64_t v4 = v8 - 1;
        if ((uint64_t)(v8 - 1) < v7)
        {
LABEL_11:
          unint64_t v8 = 0;
LABEL_13:
          swift_bridgeObjectRelease();
          return v8;
        }
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

Swift::Int sub_1003D5AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 8 * v8 + 24);
    SectionSpecifier.Part.dropLast()();
    Swift::Int result = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return result;
    }
    v11.array._rawValue = SectionSpecifier.Part.appending(_:)(result).array._rawValue;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11.array._rawValue = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int result = sub_1003D59A4(a2, a1);
  if (v12) {
    Swift::Int result = *(void *)(a1 + 16);
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = result;
  *(NIOIMAPCore2::SectionSpecifier::Part *)(a4 + 24) = v11;
  *(unsigned char *)(a4 + 32) = a3 & 1;
  return result;
}

void sub_1003D5B84()
{
  int64_t v1 = v0[2];
  uint64_t v2 = *v0;
  int64_t v3 = *(void *)(*v0 + 16);
  if (v1 < v3)
  {
    uint64_t v4 = v0[3];
    uint64_t v5 = v2 + 16 * v1 + 40;
    while (v1 < (unint64_t)v3)
    {
      uint64_t v6 = *(void *)(v5 - 8);
      swift_bridgeObjectRetain();
      if (v4)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        BOOL v7 = static SectionSpecifier.Part.< infix(_:_:)(v6, v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v7)
        {
          swift_bridgeObjectRelease();
LABEL_11:
          v0[2] = v1 + 1;
          return;
        }
      }
      if (*((unsigned char *)v0 + 32) != 1) {
        goto LABEL_11;
      }
      v8.array._rawValue = (void *)v0[1];
      swift_bridgeObjectRetain();
      LOBYTE(v8.array._rawValue) = SectionSpecifier.Part.isChildPart(of:)(v8);
      swift_bridgeObjectRelease();
      if ((uint64_t)v8.array._rawValue) {
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      v0[2] = ++v1;
      int64_t v3 = *(void *)(v2 + 16);
      v5 += 16;
      if (v1 >= v3) {
        return;
      }
    }
    __break(1u);
  }
}

void sub_1003D5CAC(uint64_t a1@<X8>)
{
  sub_1003D5B84();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
}

double sub_1003D5CD8@<D0>(uint64_t a1@<X8>)
{
  sub_1003D5AD0(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_1003D5D44()
{
  uint64_t v1 = sub_1003D721C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1003D5D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003D7510(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
}

Swift::Int sub_1003D5DA0(Swift::Int result, unsigned __int8 a2, char a3, void *a4, uint64_t a5)
{
  if (a2 - 2 < 5) {
    return result;
  }
  uint64_t v7 = result;
  unsigned int v71 = a3 & 1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = *a4;
    *a4 = 0x8000000000000000;
    sub_1003D6D54(0, v7, isUniquelyReferenced_nonNull_native);
    unint64_t v66 = a4;
    *a4 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v40 = swift_bridgeObjectRetain();
    sub_1003D5AD0(v40, v7, 1, (uint64_t)&v74);
    swift_bridgeObjectRelease();
    uint64_t v41 = a5;
    swift_bridgeObjectRelease();
    uint64_t v43 = v74;
    v42.array._rawValue = v75;
    uint64_t v80 = v74;
    int64_t v44 = v76;
    double result = sub_10001FDF0((uint64_t)&v77, (uint64_t)v79, &qword_1007140C8);
    uint64_t v45 = *(void *)(v43 + 16);
    if (v44 >= v45)
    {
LABEL_84:
      sub_10001D550((uint64_t)&v80);
      swift_bridgeObjectRelease();
      return sub_10001D550((uint64_t)v79);
    }
    if (v44 < 0)
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    char v46 = v78;
    while (1)
    {
      if ((unint64_t)v44 >= *(void *)(v43 + 16)) {
        goto LABEL_94;
      }
      uint64_t v47 = v43 + 32 + 16 * v44;
      uint64_t v48 = *(void *)v47;
      uint64_t v49 = *(unsigned __int8 *)(v47 + 8);
      sub_10001FDF0((uint64_t)v79, (uint64_t)v81, &qword_1007140C8);
      uint64_t v50 = v81[0];
      if (v81[0])
      {
        swift_bridgeObjectRetain_n();
        sub_10002292C((uint64_t)v79);
        BOOL v51 = static SectionSpecifier.Part.< infix(_:_:)(v48, v50);
        sub_10001D550((uint64_t)v79);
        swift_bridgeObjectRelease();
        if (!v51)
        {
          swift_bridgeObjectRelease();
          goto LABEL_84;
        }
        if ((v46 & 1) == 0)
        {
LABEL_71:
          ++v44;
          sub_1003D5DA0(v48, v49, v71, v66, v41);
          double result = swift_bridgeObjectRelease();
          if (v44 >= v45) {
            goto LABEL_84;
          }
          goto LABEL_72;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        if ((v46 & 1) == 0) {
          goto LABEL_71;
        }
      }
      swift_bridgeObjectRetain();
      Swift::Bool v52 = SectionSpecifier.Part.isChildPart(of:)(v42);
      swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_71;
      }
      double result = swift_bridgeObjectRelease();
      if (++v44 >= v45) {
        goto LABEL_84;
      }
LABEL_72:
      if (v44 < 0) {
        goto LABEL_93;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1003D5AD0(v8, v7, 1, (uint64_t)&v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9.array._rawValue = v75;
  uint64_t v80 = v74;
  uint64_t v10 = v76;
  double result = sub_10001FDF0((uint64_t)&v77, (uint64_t)v79, &qword_1007140C8);
  uint64_t v11 = v80;
  uint64_t v69 = *(void *)(v80 + 16);
  if (v10 >= v69) {
    goto LABEL_84;
  }
  uint64_t v12 = 0;
  unsigned int v62 = 0;
  char v68 = v78;
  uint64_t v13 = v80 + 40;
  uint64_t v58 = a5 + 56;
  rawValue = v9.array._rawValue;
  uint64_t v63 = a5 + 32;
  uint64_t v64 = v80 + 40;
  while (2)
  {
    unint64_t v14 = (unsigned __int8 *)(v13 + 16 * v10);
    unint64_t v15 = v10;
    unint64_t v70 = v10;
    while (1)
    {
      if (v10 < 0) {
        goto LABEL_95;
      }
      if (v15 >= *(void *)(v11 + 16)) {
        goto LABEL_96;
      }
      uint64_t v16 = *((void *)v14 - 1);
      unsigned int v67 = *v14;
      sub_10001FDF0((uint64_t)v79, (uint64_t)v81, &qword_1007140C8);
      uint64_t v17 = v81[0];
      if (v81[0])
      {
        swift_bridgeObjectRetain_n();
        sub_10002292C((uint64_t)v79);
        BOOL v18 = static SectionSpecifier.Part.< infix(_:_:)(v16, v17);
        sub_10001D550((uint64_t)v79);
        swift_bridgeObjectRelease();
        if (!v18)
        {
          swift_bridgeObjectRelease();
LABEL_87:
          uint64_t v29 = v62;
          goto LABEL_88;
        }
        if ((v68 & 1) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        if ((v68 & 1) == 0) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRetain();
      Swift::Bool v19 = SectionSpecifier.Part.isChildPart(of:)(v9);
      swift_bridgeObjectRelease();
      if (v19) {
        break;
      }
      double result = swift_bridgeObjectRelease();
      ++v15;
      v14 += 16;
      uint64_t v10 = v70;
      if ((uint64_t)v15 >= v69) {
        goto LABEL_87;
      }
    }
    unint64_t v70 = v15;
LABEL_17:
    uint64_t v20 = *(void *)(v16 + 16);
    uint64_t v13 = v64;
    if (v20)
    {
      uint64_t v21 = *(void *)(v16 + 8 * v20 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SectionSpecifier.Part.dropLast()();
      double result = v21 + 1;
      if (__OFADD__(v21, 1))
      {
LABEL_98:
        __break(1u);
        return result;
      }
      v22.array._rawValue = SectionSpecifier.Part.appending(_:)(result).array._rawValue;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22.array._rawValue = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = sub_1003D59A4(v23, a5);
    uint64_t v61 = v12;
    if (v25) {
      uint64_t v26 = *(void *)(a5 + 16);
    }
    else {
      uint64_t v26 = v24;
    }
    swift_bridgeObjectRelease();
    double result = swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(a5 + 16);
    if (v26 >= v27)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      double result = swift_bridgeObjectRelease();
      uint64_t v29 = v62;
      uint64_t v12 = v61;
      goto LABEL_28;
    }
    uint64_t v55 = v7;
    uint64_t v56 = a5;
    char v65 = a4;
    if (v26 >= (unint64_t)v27)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    char v57 = 0;
    char v60 = 0;
    uint64_t v28 = *(void *)(a5 + 16);
    while (1)
    {
      uint64_t v31 = v63 + 16 * v26;
      int v32 = *(unsigned __int8 *)(v31 + 8);
      if (v22.array._rawValue)
      {
        uint64_t v33 = *(void *)v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        BOOL v34 = static SectionSpecifier.Part.< infix(_:_:)(v33, (uint64_t)v22.array._rawValue);
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        if (!v34) {
          goto LABEL_62;
        }
      }
      uint64_t v30 = v26 + 1;
      if (!v71)
      {
        if (v32 == 2) {
          goto LABEL_57;
        }
        if (v32 != 3) {
          goto LABEL_30;
        }
        goto LABEL_44;
      }
      if (v32 != 2) {
        break;
      }
LABEL_44:
      if (v30 >= v27)
      {
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a5 = v56;
        swift_bridgeObjectRelease();
        a4 = v65;
        uint64_t v7 = v55;
        if (v60) {
          goto LABEL_92;
        }
LABEL_64:
        double result = swift_bridgeObjectRelease();
        uint64_t v12 = v16;
        v9.array._rawValue = rawValue;
        uint64_t v29 = v67;
        goto LABEL_65;
      }
      long long v35 = (unsigned __int8 *)(v58 + 16 * v26);
      while (1)
      {
        if (v28 == v30) {
          goto LABEL_97;
        }
        int v36 = *v35;
        if (v22.array._rawValue)
        {
          uint64_t v37 = *((void *)v35 - 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          BOOL v38 = static SectionSpecifier.Part.< infix(_:_:)(v37, (uint64_t)v22.array._rawValue);
          swift_bridgeObjectRelease();
          double result = swift_bridgeObjectRelease();
          if (!v38)
          {
            char v57 = 1;
            uint64_t v13 = v64;
            goto LABEL_62;
          }
        }
        if (!v71) {
          break;
        }
        if (v36 != 2)
        {
          if (v36 == 3) {
            goto LABEL_56;
          }
LABEL_29:
          ++v30;
          char v57 = 1;
          uint64_t v13 = v64;
          goto LABEL_30;
        }
LABEL_47:
        ++v30;
        v35 += 16;
        uint64_t v13 = v64;
        if (v30 >= v27) {
          goto LABEL_59;
        }
      }
      if (v36 == 3) {
        goto LABEL_47;
      }
      if (v36 != 2) {
        goto LABEL_29;
      }
LABEL_56:
      ++v30;
      char v57 = 1;
      uint64_t v13 = v64;
LABEL_57:
      if (v30 >= v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a5 = v56;
        swift_bridgeObjectRelease();
        a4 = v65;
        uint64_t v7 = v55;
        goto LABEL_92;
      }
      char v60 = 1;
LABEL_31:
      uint64_t v26 = v30;
      if (v30 <= (unint64_t)v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = v30;
      }
      if (v30 >= (unint64_t)v27) {
        goto LABEL_97;
      }
    }
    if (v32 == 3) {
      goto LABEL_57;
    }
LABEL_30:
    if (v30 < v27) {
      goto LABEL_31;
    }
LABEL_62:
    swift_bridgeObjectRelease();
    a5 = v56;
    swift_bridgeObjectRelease();
    a4 = v65;
    uint64_t v7 = v55;
    uint64_t v12 = v61;
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
    {
      if (v57) {
        goto LABEL_64;
      }
      double result = swift_bridgeObjectRelease();
      uint64_t v29 = v62;
LABEL_28:
      v9.array._rawValue = rawValue;
LABEL_65:
      uint64_t v10 = v70 + 1;
      unsigned int v62 = v29;
      if ((uint64_t)(v70 + 1) >= v69)
      {
LABEL_88:
        sub_10001D550((uint64_t)&v80);
        swift_bridgeObjectRelease();
        double result = sub_10001D550((uint64_t)v79);
        if (v12)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v53 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v72 = *a4;
          *a4 = 0x8000000000000000;
          sub_1003D6D54(v12, v7, v53);
          *a4 = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1003D5DA0(v12, v29, v71, a4, a5);
          return swift_bridgeObjectRelease();
        }
        return result;
      }
      continue;
    }
    break;
  }
LABEL_92:
  sub_10001D550((uint64_t)&v80);
  swift_bridgeObjectRelease();
  sub_10001D550((uint64_t)v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v73 = *a4;
  *a4 = 0x8000000000000000;
  sub_1003D6D54(v16, v7, v54);
  *a4 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1003D5DA0(v16, v67, v71, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003D65D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000566C(&qword_100713A58);
  char v37 = a2;
  uint64_t v6 = sub_1005E2FE0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    NIOIMAPCore2::SectionSpecifier::Part v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1005E33F0();
    SectionSpecifier.Part.hash(into:)((uint64_t)v38, v29);
    uint64_t result = sub_1005E3470();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    BOOL v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    void *v18 = v31;
    v18[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  NIOIMAPCore2::SectionSpecifier::Part v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *NIOIMAPCore2::SectionSpecifier::Part v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1003D68E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000566C(&qword_100713A70);
  char v36 = a2;
  uint64_t v6 = sub_1005E2FE0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v34 = v2;
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v35 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v30);
    unint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_10000CF8C(v32);
    }
    sub_1005E33F0();
    SectionSpecifier.Part.hash(into:)((uint64_t)v37, v31);
    uint64_t result = sub_1005E3470();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1003D6BEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1003DEF8C(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1003D6EB8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1003D65D8(v15, a4 & 1);
  unint64_t v21 = sub_1003DEF8C(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_1005E3380();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  *(void *)(v18[6] + 8 * v12) = a3;
  unint64_t v23 = (void *)(v18[7] + 16 * v12);
  *unint64_t v23 = a1;
  v23[1] = a2;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v26;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003D6D54(uint64_t a1, uint64_t a2, char a3)
{
  long long v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1003DEF8C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1003D7070();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = sub_10000CFDC(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1003D68E8(v13, a3 & 1);
  unint64_t v19 = sub_1003DEF8C(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_17:
    uint64_t result = sub_1005E3380();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v21 = 8 * v10;
  *(void *)(v16[6] + v21) = a2;
  *(void *)(v16[7] + v21) = a1;
  uint64_t v22 = v16[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v24;
  return swift_bridgeObjectRetain();
}

void *sub_1003D6EB8()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_100713A58);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1005E2FD0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003D7070()
{
  uint64_t v1 = v0;
  sub_10000566C(&qword_100713A70);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1005E2FD0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_10000CF8C(v17);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003D721C(uint64_t a1, uint64_t a2, char a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1003D5AD0(a1, a2, a3, (uint64_t)v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v42[0];
  v6.array._rawValue = (void *)v42[1];
  uint64_t v45 = v42[0];
  uint64_t v8 = v42[2];
  uint64_t result = sub_10001FDF0((uint64_t)v43, (uint64_t)v44, &qword_1007140C8);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  if (v8 >= v10)
  {
    uint64_t v12 = 0;
    goto LABEL_34;
  }
  uint64_t v12 = 0;
  char v13 = v43[8];
  uint64_t v14 = v7 + 40;
  BOOL v38 = (char *)&_swiftEmptyArrayStorage[4];
  while (2)
  {
    uint64_t v39 = v12;
    uint64_t v41 = v11;
    unint64_t v15 = (unsigned char *)(v14 + 16 * v8);
    unint64_t v16 = v8;
    while (1)
    {
      if (v8 < 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v16 >= *(void *)(v7 + 16)) {
        goto LABEL_39;
      }
      uint64_t v17 = *((void *)v15 - 1);
      char v18 = *v15;
      sub_10001FDF0((uint64_t)v44, (uint64_t)&v46, &qword_1007140C8);
      uint64_t v19 = v46;
      if (v46)
      {
        swift_bridgeObjectRetain_n();
        sub_10002292C((uint64_t)v44);
        BOOL v20 = static SectionSpecifier.Part.< infix(_:_:)(v17, v19);
        sub_10001D550((uint64_t)v44);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v20)
        {
          swift_bridgeObjectRelease();
LABEL_33:
          uint64_t v12 = v39;
          uint64_t v11 = v41;
          goto LABEL_34;
        }
        if ((v13 & 1) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t result = swift_bridgeObjectRetain();
        if ((v13 & 1) == 0) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRetain();
      Swift::Bool v21 = SectionSpecifier.Part.isChildPart(of:)(v6);
      uint64_t result = swift_bridgeObjectRelease();
      if (v21) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v16;
      v15 += 16;
      if ((uint64_t)v16 >= v10) {
        goto LABEL_33;
      }
    }
    uint64_t v8 = v16;
LABEL_15:
    uint64_t v22 = v39;
    uint64_t v11 = v41;
    uint64_t v14 = v7 + 40;
    if (!v39)
    {
      unint64_t v23 = *((void *)v41 + 3);
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_42;
      }
      int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v24;
      }
      sub_10000566C(&qword_1007140D0);
      uint64_t v26 = (char *)swift_allocObject();
      int64_t v27 = j__malloc_size(v26);
      uint64_t v28 = v27 - 32;
      if (v27 < 32) {
        uint64_t v28 = v27 - 17;
      }
      uint64_t v29 = v28 >> 4;
      *((void *)v26 + 2) = v25;
      *((void *)v26 + 3) = 2 * (v28 >> 4);
      uint64_t v30 = v26 + 32;
      uint64_t v31 = *((void *)v41 + 3) >> 1;
      size_t v32 = 16 * v31;
      if (*((void *)v41 + 2))
      {
        uint64_t v33 = v41 + 32;
        if (v26 != v41 || v30 >= &v33[v32])
        {
          uint64_t v40 = v28 >> 4;
          memmove(v26 + 32, v33, v32);
          uint64_t v30 = v26 + 32;
          uint64_t v29 = v40;
        }
        *((void *)v41 + 2) = 0;
      }
      BOOL v38 = &v30[v32];
      uint64_t v22 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
      uint64_t result = swift_release();
      uint64_t v11 = v26;
      uint64_t v14 = v7 + 40;
    }
    BOOL v34 = __OFSUB__(v22, 1);
    uint64_t v12 = v22 - 1;
    if (v34) {
      goto LABEL_40;
    }
    ++v8;
    *(void *)BOOL v38 = v17;
    v38[8] = v18;
    v38 += 16;
    if (v8 < v10) {
      continue;
    }
    break;
  }
LABEL_34:
  sub_10001D550((uint64_t)&v45);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10001D550((uint64_t)v44);
  unint64_t v35 = *((void *)v11 + 3);
  if (v35 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v36 = v35 >> 1;
  BOOL v34 = __OFSUB__(v36, v12);
  uint64_t v37 = v36 - v12;
  if (!v34)
  {
    *((void *)v11 + 2) = v37;
    return (uint64_t)v11;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1003D7510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  sub_1003D5AD0(a4, a5, a6, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
    a3 = 0;
    long long v24 = v34;
    *(_OWORD *)a1 = v33;
    *(_OWORD *)(a1 + 16) = v24;
    unsigned __int8 v25 = v35;
LABEL_26:
    *(unsigned char *)(a1 + 32) = v25;
    return a3;
  }
  long long v10 = v33;
  uint64_t v11 = *((void *)&v34 + 1);
  uint64_t v12 = v34;
  int v32 = v35;
  if (!a3)
  {
LABEL_25:
    *(_OWORD *)a1 = v10;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v11;
    unsigned __int8 v25 = v32;
    goto LABEL_26;
  }
  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v31 = a1;
  uint64_t v13 = *(void *)(v33 + 16);
  if ((uint64_t)v34 >= v13)
  {
    uint64_t v23 = 0;
    goto LABEL_23;
  }
  uint64_t v14 = 0;
  uint64_t v15 = v33 + 40;
  uint64_t v16 = 1;
  uint64_t v26 = v33 + 40;
  uint64_t v27 = a3;
  while (2)
  {
    uint64_t v28 = v14;
    uint64_t v29 = v16;
    uint64_t v30 = a2;
    uint64_t v17 = (unsigned char *)(v15 + 16 * v12);
    uint64_t v18 = v12;
    while (1)
    {
      if (v12 < 0)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if ((unint64_t)v18 >= *(void *)(v10 + 16)) {
        goto LABEL_29;
      }
      uint64_t v19 = *((void *)v17 - 1);
      char v20 = *v17;
      uint64_t result = swift_bridgeObjectRetain();
      if (v11)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        BOOL v21 = static SectionSpecifier.Part.< infix(_:_:)(v19, v11);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (!v21)
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = v18 + 1;
          goto LABEL_22;
        }
      }
      if (!v32) {
        goto LABEL_16;
      }
      swift_bridgeObjectRetain();
      Swift::Bool v22 = SectionSpecifier.Part.isChildPart(of:)(*(NIOIMAPCore2::SectionSpecifier::Part *)((char *)&v10 + 8));
      uint64_t result = swift_bridgeObjectRelease();
      if (v22) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v18;
      v17 += 16;
      if (v18 >= v13)
      {
        uint64_t v12 = v18;
LABEL_22:
        uint64_t v23 = v28;
        goto LABEL_23;
      }
    }
    uint64_t v12 = v18;
LABEL_16:
    ++v12;
    uint64_t v23 = v29;
    *(void *)uint64_t v30 = v19;
    *(unsigned char *)(v30 + 8) = v20;
    uint64_t v15 = v26;
    a3 = v27;
    if (v29 == v27)
    {
      a1 = v31;
      goto LABEL_25;
    }
    uint64_t v16 = v29 + 1;
    a2 = v30 + 16;
    uint64_t v14 = v29;
    if (v12 < v13) {
      continue;
    }
    break;
  }
LABEL_23:
  *(_OWORD *)uint64_t v31 = v10;
  *(void *)(v31 + 16) = v12;
  *(void *)(v31 + 24) = v11;
  a3 = v23;
  *(unsigned char *)(v31 + 32) = v32;
  return a3;
}

unint64_t sub_1003D7728(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v20 = _swiftEmptyArrayStorage;
  uint64_t v14 = &v20;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  sub_1003B430C(3, (uint64_t (*)(void *))variable initialization expression of Cache._big5HkscsCanonicalName, 0, (uint64_t (*)(_OWORD *))sub_1003D7880, (uint64_t)v13, (uint64_t)UInt32.init(_:), 0, a2, a3, a4, a5);
  uint64_t v6 = (uint64_t)v20;
  swift_bridgeObjectRetain();
  unint64_t result = sub_1003D59A4((uint64_t)_swiftEmptyArrayStorage, v6);
  if (v8)
  {
    unint64_t v12 = sub_10039D3FC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease_n();
    return v12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v6 + 16))
  {
    unint64_t v9 = v6 + 16 * result;
    Swift::Int v10 = *(void *)(v9 + 32);
    unsigned __int8 v11 = *(unsigned char *)(v9 + 40);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_10039D3FC((uint64_t)_swiftEmptyArrayStorage);
    sub_1003D5DA0(v10, v11, a1 & 1, &v19, v6);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D7880(uint64_t a1)
{
  return sub_1003D57E0(a1, *(char ***)(v1 + 16));
}

uint64_t sub_1003D78A4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    sub_1003B0F88(a5);
    swift_bridgeObjectRelease();
    return 5;
  }
  sub_10001FDF0(a5, (uint64_t)v19, &qword_100713A60);
  if (!*((void *)&v20 + 1)) {
    goto LABEL_10;
  }
  v21[0] = v19[0];
  v21[1] = v19[1];
  void v21[2] = v20;
  sub_10039DF8C((uint64_t)v21, (uint64_t)v22);
  sub_10039DF8C((uint64_t)v22, (uint64_t)v23);
  int v12 = v24 >> 4;
  if (v12 == 5)
  {
    v24 &= 0xFu;
    sub_10001FDF0((uint64_t)v23, (uint64_t)&v26, &qword_100713A68);
    sub_10001FDF0((uint64_t)&v26, (uint64_t)v28, &qword_100713A68);
    if (v29) {
      goto LABEL_10;
    }
    uint64_t v16 = sub_1003BB304(v28[0], v28[1]);
    uint64_t v17 = v15;
    if (v16 == 1819112552 && v15 == 0xE400000000000000 || (sub_1005E3290() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1003B0F88(a5);
      swift_bridgeObjectRelease();
      return 2;
    }
    if (v16 == 0x6E69616C70 && v17 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v18 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
LABEL_10:
        char v14 = sub_10039D0BC(a1, a2, a3, a4, a5);
        sub_1003B0F88(a5);
        swift_bridgeObjectRelease();
        if (v14) {
          return 4;
        }
        else {
          return 6;
        }
      }
    }
    sub_1003B0F88(a5);
    swift_bridgeObjectRelease();
    return 3;
  }
  if (v12) {
    goto LABEL_10;
  }
  v24 &= 0xFu;
  sub_1003BA534(v23, &v25);
  sub_1003BA534(&v25, &v26);
  if (v27 < 0)
  {
    v27 &= ~0x80u;
    sub_10001FDF0((uint64_t)&v26, (uint64_t)v28, &qword_100713A68);
    sub_1003B0F88(a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    int v13 = v26.n128_u8[0];
    sub_1003B0F88(a5);
    swift_bridgeObjectRelease();
    if (!v13) {
      return 0;
    }
  }
  return 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConnectionUsage.NonMailboxUsage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for ConnectionUsage.NonMailboxUsage(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for ConnectionUsage.NonMailboxUsage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ICUCanonicalConverterName(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ConnectionUsage.NonMailboxUsage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionUsage.NonMailboxUsage(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionUsage.NonMailboxUsage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *sub_1003D7D44(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MultipartChoice()
{
  return &type metadata for MultipartChoice;
}

uint64_t sub_1003D7D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayPartTree.ChildNodes(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DisplayPartTree.ChildNodes(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayPartTree.ChildNodes()
{
  return &type metadata for DisplayPartTree.ChildNodes;
}

ValueMetadata *type metadata accessor for DisplayPartTree()
{
  return &type metadata for DisplayPartTree;
}

uint64_t initializeWithTake for DisplayPartTree.Node(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.Node()
{
  return &type metadata for DisplayPartTree.Node;
}

uint64_t initializeWithCopy for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DisplayPartTree.ChildNodes.Iterator(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayPartTree.ChildNodes.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayPartTree.ChildNodes.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.ChildNodes.Iterator()
{
  return &type metadata for DisplayPartTree.ChildNodes.Iterator;
}

unsigned char *storeEnumTagSinglePayload for DisplayPartTree.Node.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003D814CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayPartTree.Node.Kind()
{
  return &type metadata for DisplayPartTree.Node.Kind;
}

unint64_t sub_1003D8188()
{
  unint64_t result = qword_1007140D8;
  if (!qword_1007140D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140D8);
  }
  return result;
}

unint64_t sub_1003D81E4()
{
  unint64_t result = qword_1007140E0;
  if (!qword_1007140E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140E0);
  }
  return result;
}

unsigned char *_s17PlainTextLineKindOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003D8304);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayPart.PlainTextLineKind()
{
  return &type metadata for DisplayPart.PlainTextLineKind;
}

uint64_t sub_1003D833C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    if (*(void *)(a4 + 16) == 1)
    {
      uint64_t v9 = *(void *)(a4 + 32);
      uint64_t v10 = *(void *)(a4 + 40);
      int v11 = *(__int16 *)(a4 + 48);
      uint64_t result = swift_bridgeObjectRelease();
      if (v11 < 0)
      {
        if (v9) {
          uint64_t v13 = v10 - v9;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v13 < 0)
        {
          __break(1u);
LABEL_24:
          __break(1u);
          return result;
        }
        sub_1003E8D18("flowed", 6, 0, v13, v9, v10, &v19);
        if (v19 == 1)
        {
          if (a8)
          {
            if (*(void *)(a8 + 16) == 1)
            {
              uint64_t v14 = *(void *)(a8 + 32);
              uint64_t v15 = *(void *)(a8 + 40);
              int v16 = *(__int16 *)(a8 + 48);
              uint64_t result = swift_bridgeObjectRelease();
              if (v16 < 0)
              {
                if (v14) {
                  uint64_t v17 = v15 - v14;
                }
                else {
                  uint64_t v17 = 0;
                }
                if ((v17 & 0x8000000000000000) == 0)
                {
                  sub_1003E8D18("yes", 3, 0, v17, v14, v15, &v18);
                  if (v18) {
                    return 2;
                  }
                  return 1;
                }
                goto LABEL_24;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          return 1;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1003D845C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a2 - result;
  if (a3) {
    uint64_t v7 = (char *)(a3 + result);
  }
  else {
    uint64_t v7 = 0;
  }
  if (a3) {
    uint64_t v8 = a2 - result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 < 0)
  {
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  uint64_t v53 = 0;
  uint64_t v54 = v8;
  uint64_t v55 = v7;
  uint64_t v56 = v8;
  uint64_t v9 = a6 - a5;
  if (a5) {
    uint64_t v10 = a6 - a5;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 < 0) {
    goto LABEL_128;
  }
  uint64_t v11 = a3;
  if (v10)
  {
    uint64_t v46 = a4;
    unint64_t v47 = a2 - result;
    uint64_t v48 = result;
    unint64_t v49 = a2;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v14 = 2;
    Swift::Bool v52 = v7;
    do
    {
      if (!a5)
      {
        uint64_t v12 = 0;
        uint64_t v18 = 0;
        char v14 = 2;
        goto LABEL_82;
      }
      uint64_t v15 = a5;
      int v16 = (unsigned __int8 *)&v13[a5];
      uint64_t v17 = v9;
      uint64_t v18 = (uint64_t)v13;
      uint64_t v19 = v9 - (void)v13;
      uint64_t result = (uint64_t)memchr(&v13[a5], 10, v9 - (void)v13);
      if (!result) {
        goto LABEL_80;
      }
      long long v20 = (char *)(result - (void)v16);
      if (result - (uint64_t)v16 < 0) {
        goto LABEL_80;
      }
      BOOL v21 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_116;
      }
      if (v19 < (uint64_t)v21) {
        goto LABEL_80;
      }
      Swift::Bool v22 = &v20[v18];
      if (__OFADD__(v20, v18)) {
        goto LABEL_117;
      }
      uint64_t v13 = &v21[v18];
      if (__OFADD__(v21, v18))
      {
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if ((uint64_t)v21 < (uint64_t)v20 || (uint64_t)v13 < (uint64_t)v22) {
        goto LABEL_119;
      }
      uint64_t v9 = v17;
      a5 = v15;
      uint64_t v7 = v52;
      if (v18 < (uint64_t)v22)
      {
        if ((uint64_t)v22 > v9) {
          goto LABEL_124;
        }
        if (v22[v15 - 1] == 13) {
          --v22;
        }
      }
      uint64_t v23 = (uint64_t)&v22[-v18];
      if ((uint64_t)v22 < v18) {
        goto LABEL_120;
      }
      if (v9 < (uint64_t)v22) {
        goto LABEL_121;
      }
      if (v14 != 2 && (v14 & 1) == 0 && v12 != v8)
      {
        v52[v12++] = 10;
        if (v8 < v12) {
          goto LABEL_125;
        }
      }
      unsigned __int8 v24 = (unsigned __int8 *)&v22[v15];
      if (v22 == (char *)v18)
      {
        char v14 = 0;
      }
      else
      {
        if (v23 < 1) {
          goto LABEL_126;
        }
        __n128 v25 = &v16[v23 - 1];
        int v26 = *v25;
        char v14 = v26 == 61;
        if (v26 == 61) {
          unsigned __int8 v24 = v25;
        }
      }
      char v27 = (unsigned __int8 *)(v24 - v16);
      if (v24 - v16 < 0) {
        goto LABEL_122;
      }
      if (v24 != v16)
      {
        uint64_t v28 = 0;
        do
        {
          char v29 = v28 + 1;
          if ((uint64_t)v27 < (uint64_t)(v28 + 1))
          {
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
          int v30 = v28[(void)v16];
          if (v30 == 9 || v30 == 32)
          {
            if (v12 == v8)
            {
              uint64_t v12 = v8;
LABEL_62:
              ++v28;
              continue;
            }
            v52[v12++] = 32;
            ++v28;
            if (v8 < v12) {
              goto LABEL_111;
            }
          }
          else if (v30 == 61)
          {
            if (v29 == v27) {
              break;
            }
            uint64_t v31 = v28 + 2;
            if ((uint64_t)v27 < (uint64_t)(v28 + 2)) {
              goto LABEL_112;
            }
            if (v31 == v27) {
              break;
            }
            v28 += 3;
            if ((uint64_t)v27 < (uint64_t)v28) {
              goto LABEL_113;
            }
            unsigned __int8 v32 = v29[(void)v16];
            unsigned __int8 v33 = v31[(void)v16];
            if ((v32 - 58) > 0xF5u)
            {
              char v34 = -48;
            }
            else if ((v32 - 71) > 0xF9u)
            {
              char v34 = -55;
            }
            else
            {
              if ((v32 - 103) <= 0xF9u) {
                continue;
              }
              char v34 = -87;
            }
            if ((v33 - 58) > 0xF5u)
            {
              char v36 = -48;
              if (v12 == v8) {
                goto LABEL_73;
              }
            }
            else if ((v33 - 71) > 0xF9u)
            {
              char v36 = -55;
              if (v12 == v8)
              {
LABEL_73:
                uint64_t v12 = v8;
                continue;
              }
            }
            else
            {
              if ((v33 - 103) < 0xFAu) {
                continue;
              }
              char v36 = -87;
              if (v12 == v8) {
                goto LABEL_73;
              }
            }
            v52[v12++] = (v33 + v36) | (16 * (v32 + v34));
            if (v8 < v12) {
              goto LABEL_115;
            }
          }
          else
          {
            if ((v30 - 127) < 0xFFFFFFA1 || v12 == v8) {
              goto LABEL_62;
            }
            v52[v12++] = v30;
            ++v28;
            if (v8 < v12) {
              goto LABEL_114;
            }
          }
        }
        while (v28 != v27);
      }
      if (v10 < (uint64_t)v13) {
        goto LABEL_123;
      }
    }
    while ((uint64_t)v13 >= v18);
    __break(1u);
LABEL_80:
    a5 = v15;
    uint64_t v7 = v52;
LABEL_82:
    char v57 = v14;
    uint64_t v53 = v12;
    if (v18 != v10)
    {
      if (a5) {
        uint64_t v37 = a5 + v10;
      }
      else {
        uint64_t v37 = 0;
      }
      if (a5) {
        uint64_t v38 = a5 + v18;
      }
      else {
        uint64_t v38 = 0;
      }
      sub_1003D8C3C(v38, v37, 1, &v57, &v53);
      if (v51) {
        return (uint64_t)v7;
      }
      char v14 = v57;
    }
    if (v14 == 2 || (v14 & 1) != 0 || (uint64_t v39 = v53, v40 = v54, v53 == v54))
    {
      a2 = v49;
      uint64_t v11 = v50;
      unint64_t v6 = v47;
      uint64_t result = v48;
      a4 = v46;
      goto LABEL_97;
    }
    v55[v53] = 10;
    uint64_t v41 = v39 + 1;
    a2 = v49;
    uint64_t v11 = v50;
    unint64_t v6 = v47;
    uint64_t result = v48;
    a4 = v46;
    if (v40 >= v41)
    {
      uint64_t v53 = v41;
      goto LABEL_97;
    }
    goto LABEL_136;
  }
LABEL_97:
  uint64_t v42 = a4 - v11;
  if (!v11) {
    uint64_t v42 = 0;
  }
  if (result < 0 || v42 < result) {
    goto LABEL_129;
  }
  if ((a2 & 0x8000000000000000) != 0 || v42 < (uint64_t)a2) {
    goto LABEL_130;
  }
  unint64_t v43 = v6 - (v54 - v53);
  if (__OFSUB__(v6, v54 - v53))
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  BOOL v44 = __OFADD__(result, v43);
  unint64_t v45 = result + v43;
  if (v44)
  {
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if ((v45 & 0x8000000000000000) != 0 || v42 < (uint64_t)v45) {
    goto LABEL_133;
  }
  if (v45 >= result)
  {
    if (v45 <= a2) {
      return (uint64_t)v7;
    }
    goto LABEL_135;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

uint64_t sub_1003D892C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = a2 - result;
  if (a3) {
    uint64_t v8 = a3 + result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a3) {
    unint64_t v9 = a2 - result;
  }
  else {
    unint64_t v9 = 0;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v13 = result;
  uint64_t v18 = 0;
  unint64_t v19 = v9;
  uint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t result = sub_1003D8A38(1, &v18, a5, a6);
  if (v6) {
    return v8;
  }
  uint64_t v14 = a4 - a3;
  if (!a3) {
    uint64_t v14 = 0;
  }
  if (v13 < 0 || v14 < v13) {
    goto LABEL_23;
  }
  if ((a2 & 0x8000000000000000) != 0 || v14 < (uint64_t)a2) {
    goto LABEL_24;
  }
  unint64_t v15 = v7 - (v19 - v18);
  if (__OFSUB__(v7, v19 - v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  BOOL v16 = __OFADD__(v13, v15);
  unint64_t v17 = v13 + v15;
  if (v16)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v17 & 0x8000000000000000) != 0 || v14 < (uint64_t)v17) {
    goto LABEL_27;
  }
  if (v17 < v13)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v17 <= a2) {
    return v8;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1003D8A38(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (v4 < 0) {
    goto LABEL_54;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5 + 1;
      if (v4 < v5 + 1)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        return result;
      }
      int v7 = *(unsigned __int8 *)(a3 + v5);
      if (v7 == 61)
      {
        if (v6 == v4) {
          return result;
        }
        uint64_t v8 = v5 + 2;
        if (v4 < v5 + 2) {
          goto LABEL_50;
        }
        if (v8 == v4) {
          return result;
        }
        uint64_t v9 = v5 + 3;
        if (v4 < v5 + 3) {
          goto LABEL_51;
        }
        char v10 = *(unsigned char *)(a3 + v6);
        char v11 = *(unsigned char *)(a3 + v8);
        if ((v10 - 58) > 0xF5u)
        {
          char v12 = -48;
        }
        else
        {
          if ((v10 - 71) <= 0xF9u)
          {
            if ((v10 - 103) >= 0xFAu)
            {
              char v12 = -87;
              goto LABEL_39;
            }
LABEL_6:
            uint64_t v6 = v9;
            goto LABEL_7;
          }
          char v12 = -55;
        }
LABEL_39:
        if ((v11 - 58) > 0xF5u)
        {
          char v20 = -48;
        }
        else if ((v11 - 71) > 0xF9u)
        {
          char v20 = -55;
        }
        else
        {
          if ((v11 - 103) < 0xFAu) {
            goto LABEL_6;
          }
          char v20 = -87;
        }
        uint64_t v21 = *a2;
        uint64_t v14 = a2[1];
        if (*a2 != v14)
        {
          char v22 = (v11 + v20) | (16 * (v10 + v12));
          uint64_t v15 = a2[2];
          *(unsigned char *)(v15 + v21) = v22;
          uint64_t v16 = v21 + 1;
          if (v14 < v21 + 1) {
            goto LABEL_52;
          }
          goto LABEL_47;
        }
        goto LABEL_6;
      }
      if (result)
      {
        if (v7 != 9 && v7 != 32)
        {
          if (v7 != 95) {
            goto LABEL_34;
          }
          uint64_t v13 = *a2;
          uint64_t v14 = a2[1];
          if (*a2 != v14)
          {
            uint64_t v15 = a2[2];
            *(unsigned char *)(v15 + v13) = 32;
            uint64_t v16 = v13 + 1;
            if (v14 < v13 + 1) {
              goto LABEL_56;
            }
            goto LABEL_32;
          }
          goto LABEL_7;
        }
      }
      else if (v7 != 32 && v7 != 9)
      {
LABEL_34:
        if ((v7 - 127) < 0xFFFFFFA1) {
          goto LABEL_7;
        }
        uint64_t v19 = *a2;
        uint64_t v14 = a2[1];
        if (*a2 == v14) {
          goto LABEL_7;
        }
        uint64_t v15 = a2[2];
        *(unsigned char *)(v15 + v19) = v7;
        uint64_t v16 = v19 + 1;
        if (v14 < v16) {
          goto LABEL_55;
        }
LABEL_32:
        uint64_t v9 = v6;
LABEL_47:
        *a2 = v16;
        a2[1] = v14;
        uint64_t v6 = v9;
        a2[2] = v15;
        goto LABEL_7;
      }
      uint64_t v18 = *a2;
      uint64_t v14 = a2[1];
      if (*a2 != v14)
      {
        uint64_t v15 = a2[2];
        *(unsigned char *)(v15 + v18) = 32;
        uint64_t v16 = v18 + 1;
        if (v14 < v18 + 1) {
          goto LABEL_53;
        }
        goto LABEL_32;
      }
LABEL_7:
      uint64_t v5 = v6;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t sub_1003D8C3C(uint64_t result, uint64_t a2, char a3, unsigned char *a4, uint64_t *a5)
{
  uint64_t v5 = a2;
  int v6 = *a4;
  if (v6 != 2 && (v6 & 1) == 0)
  {
    uint64_t v9 = *a5;
    uint64_t v8 = a5[1];
    if (*a5 != v8)
    {
      uint64_t v10 = a5[2];
      *(unsigned char *)(v10 + v9) = 10;
      uint64_t v11 = v9 + 1;
      if (v8 < v11) {
        goto LABEL_22;
      }
      *a5 = v11;
      a5[1] = v8;
      a5[2] = v10;
    }
  }
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v12 = a2 - result;
  if (a2 == result) {
    goto LABEL_16;
  }
  uint64_t v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else if ((v13 & 0x8000000000000000) == 0 && v13 < v12)
  {
    uint64_t v14 = (unsigned char *)(result + v13);
    if (*v14 == 61)
    {
      *a4 = 1;
      uint64_t v5 = (uint64_t)v14;
      return sub_1003D8A38(0, a5, result, v5);
    }
LABEL_16:
    if (a3) {
      *a4 = 2;
    }
    else {
      *a4 = 0;
    }
    return sub_1003D8A38(0, a5, result, v5);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1003D8D10(int64_t a1, int64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6)
{
  uint64_t v73 = a5;
  uint64_t v7 = a4 - a3;
  if (a3) {
    uint64_t v8 = a4 - a3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 < 0) {
    goto LABEL_104;
  }
  uint64_t v9 = v6;
  uint64_t v10 = (uint64_t)a2;
  uint64_t v11 = (uint64_t *)a1;
  uint64_t v78 = 0;
  uint64_t v79 = v8;
  uint64_t v80 = a3;
  uint64_t v81 = a4;
  if (v8)
  {
    uint64_t v13 = 0;
    unsigned int v71 = a2;
    while (v13 < v7)
    {
      unsigned int v16 = *(unsigned __int8 *)(a3 + v13);
      if (v16 == 61)
      {
        sub_1003D9484(a1, a2, v82);
        a1 = sub_1003D9824((uint64_t)v82, (uint64_t)v83);
        char v17 = v84;
        if (v84 != 2)
        {
          char v22 = (unsigned __int8 *)v83[1];
          uint64_t v72 = (unsigned char *)v83[0];
          unsigned __int8 v24 = v85;
          uint64_t v23 = v86;
          sub_1003E4F68(v10);
          if (v24) {
            Swift::Int v25 = v23 - (unsigned __int8 *)v24;
          }
          else {
            Swift::Int v25 = 0;
          }
          int64_t v26 = v25 + 1;
          BOOL v27 = __OFADD__(v25, 1);
          if ((v17 & 1) == 0)
          {
            if (v27) {
              goto LABEL_97;
            }
            if (v26 < 0) {
              goto LABEL_102;
            }
            unint64_t v70 = v22;
            swift_retain();
            if (v26 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
            {
              __chkstk_darwin();
              char v29 = sub_10039E774(v24, (uint64_t)v23, (uint64_t)&v70 - v28, (uint64_t)&v70 + v26 - v28, 0);
              if (!v9)
              {
                if ((v31 & 1) == 0)
                {
                  unsigned __int8 v32 = (int8x8_t *)v29;
                  uint64_t v33 = v30;
                  char v34 = v73;
                  swift_retain();
                  uint64_t v35 = sub_1003E810C(v72, v70, 0, 0, 0, v34, v32, v33);
                  uint64_t v37 = v36;
                  if (!v36)
                  {
LABEL_81:
                    uint64_t v76 = 0;
                    unint64_t v77 = 0xE000000000000000;
                    sub_1005E1D10(v25);
                    uint64_t v35 = v76;
                    uint64_t v37 = (void *)v77;
                    if (v24)
                    {
                      uint64_t v10 = (uint64_t)v71;
                      goto LABEL_87;
                    }
                    uint64_t v10 = (uint64_t)v71;
                    if (v23)
                    {
                      unsigned __int8 v24 = 0;
                      do
                      {
                        int v68 = *(unsigned __int8 *)v24;
                        unsigned __int8 v24 = (uint64_t *)((char *)v24 + 1);
                        if ((v68 - 1) <= 0x7D)
                        {
                          uint64_t v74 = v35;
                          uint64_t v75 = v37;
                          sub_1005E1D60();
                          uint64_t v35 = v74;
                          uint64_t v37 = v75;
                        }
LABEL_87:
                        ;
                      }
                      while (!v23 || v24 != (uint64_t *)v23);
                    }
                    swift_bridgeObjectRelease();
                    goto LABEL_85;
                  }
LABEL_70:
                  swift_release();
                  uint64_t v10 = (uint64_t)v71;
LABEL_86:
                  v87._uint64_t countAndFlagsBits = v35;
                  v87._object = v37;
                  sub_1005E1E30(v87);
                  a1 = swift_bridgeObjectRelease();
                  *a6 = 1;
                  uint64_t v18 = v78;
                  uint64_t v7 = v79;
                  goto LABEL_13;
                }
                sub_1003D988C();
                swift_allocError();
                swift_willThrow();
              }
              swift_willThrow();
            }
            else
            {
              uint64_t v51 = swift_slowAlloc();
              Swift::Bool v52 = sub_10039E774(v24, (uint64_t)v23, v51, v51 + v26, 0);
              if (!v9)
              {
                if ((v54 & 1) == 0)
                {
                  uint64_t v55 = (int8x8_t *)v52;
                  uint64_t v56 = v53;
                  char v57 = v73;
                  swift_retain();
                  uint64_t v35 = sub_1003E810C(v72, v70, 0, 0, 0, v57, v55, v56);
                  uint64_t v37 = v58;
                  swift_slowDealloc();
                  if (!v37) {
                    goto LABEL_81;
                  }
                  goto LABEL_70;
                }
                sub_1003D988C();
                swift_allocError();
                swift_willThrow();
              }
              swift_slowDealloc();
            }
            swift_errorRelease();
            uint64_t v9 = 0;
            goto LABEL_81;
          }
          if (v27) {
            goto LABEL_98;
          }
          if (v26 < 0) {
            goto LABEL_103;
          }
          uint64_t v42 = v22;
          swift_retain();
          if (v26 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
          {
            __chkstk_darwin();
            uint64_t v44 = sub_1003D892C(0, v26, (uint64_t)&v70 - v43, (uint64_t)&v70 + v26 - v43, (uint64_t)v24, (uint64_t)v23);
            if (v9) {
              goto LABEL_108;
            }
            if (v46)
            {
              sub_1003D988C();
              swift_allocError();
              swift_willThrow();
LABEL_108:
              swift_willThrow();
              __break(1u);
LABEL_109:
              sub_1003D988C();
              swift_allocError();
              swift_willThrow();
LABEL_110:
              swift_slowDealloc();
              __break(1u);
              JUMPOUT(0x1003D9474);
            }
            unint64_t v47 = (int8x8_t *)v44;
            uint64_t v48 = v45;
            unint64_t v49 = v73;
            swift_retain();
            uint64_t v35 = sub_1003E810C(v72, v42, 0, 0, 0, v49, v47, v48);
            uint64_t v37 = v50;
          }
          else
          {
            uint64_t v59 = swift_slowAlloc();
            uint64_t v60 = sub_1003D892C(0, v26, v59, v59 + v26, (uint64_t)v24, (uint64_t)v23);
            if (v9) {
              goto LABEL_110;
            }
            if (v62) {
              goto LABEL_109;
            }
            uint64_t v63 = (int8x8_t *)v60;
            uint64_t v64 = v61;
            char v65 = v73;
            swift_retain();
            uint64_t v35 = sub_1003E810C(v72, v42, 0, 0, 0, v65, v63, v64);
            uint64_t v37 = v66;
            swift_slowDealloc();
          }
          uint64_t v10 = (uint64_t)v71;
          if (!v37)
          {
            uint64_t v35 = sub_1003A9E84((unsigned __int8 *)v24, v23, 0);
            uint64_t v37 = v67;
          }
LABEL_85:
          swift_release();
          goto LABEL_86;
        }
        uint64_t v13 = v78;
        uint64_t v7 = v79;
      }
      uint64_t v18 = v7;
      if (v13 != v7)
      {
        if (v13 >= v7) {
          goto LABEL_94;
        }
        uint64_t v19 = v81 - v80;
        if (!v80) {
          uint64_t v19 = 0;
        }
        if (v13 < 0 || v13 >= v19) {
          goto LABEL_95;
        }
        uint64_t v18 = v13 + 1;
        uint64_t v78 = v13 + 1;
      }
      switch(*a6)
      {
        case 1:
          if (v16 > 0x20 || ((1 << v16) & 0x100002600) == 0)
          {
            if (v16 < 0x21) {
              goto LABEL_13;
            }
            uint64_t v41 = v11[2];
            if (v41 >= v11[1]) {
              goto LABEL_105;
            }
            goto LABEL_53;
          }
          char v15 = 2;
          break;
        case 2:
          if (v16 < 0x21) {
            goto LABEL_13;
          }
          *a6 = 0;
          uint64_t v39 = v11[1];
          uint64_t v38 = v11[2];
          if (v38 >= v39) {
            goto LABEL_99;
          }
          uint64_t v40 = *v11;
          *(unsigned char *)(*v11 + v38) = 32;
          v11[2] = v38 + 1;
          if (v38 + 1 >= v39) {
            goto LABEL_101;
          }
          *(unsigned char *)(v40 + v38 + 1) = v16;
          v11[2] = v38 + 2;
          goto LABEL_13;
        case 3:
          if (v16 < 0x21) {
            goto LABEL_13;
          }
          *a6 = 0;
          uint64_t v41 = v11[2];
          if (v41 < v11[1]) {
            goto LABEL_53;
          }
          goto LABEL_100;
        default:
          if (v16 > 0x20 || ((1 << v16) & 0x100002600) == 0)
          {
            if (v16 < 0x21) {
              goto LABEL_13;
            }
            uint64_t v41 = v11[2];
            if (v41 >= v11[1]) {
              goto LABEL_106;
            }
LABEL_53:
            *(unsigned char *)(*v11 + v41) = v16;
            v11[2] = v41 + 1;
            goto LABEL_13;
          }
          uint64_t v21 = v11[2];
          if (v21 >= v11[1]) {
            goto LABEL_96;
          }
          *(unsigned char *)(*v11 + v21) = 32;
          v11[2] = v21 + 1;
          char v15 = 3;
          break;
      }
      *a6 = v15;
LABEL_13:
      a3 = v80;
      uint64_t v13 = v18;
      if (v18 == v7) {
        return sub_1003E4F68(v10);
      }
    }
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
  }
  return sub_1003E4F68(v10);
}

int64_t sub_1003D9484@<X0>(int64_t result@<X0>, int64_t *a2@<X1>, int64_t *a3@<X8>)
{
  int64_t v11 = *v10;
  int64_t v12 = v10[1];
  if (*v10 == v12) {
    goto LABEL_28;
  }
  if (*v10 >= v12)
  {
    __break(1u);
    goto LABEL_58;
  }
  int64_t v3 = v10[2];
  if (*(unsigned char *)(v3 + v11) != 61) {
    goto LABEL_28;
  }
  int64_t v4 = v10[3];
  int64_t v5 = v11 + 1;
  *uint64_t v10 = v11 + 1;
  if (v11 + 1 == v12) {
    goto LABEL_28;
  }
  if (v11 + 1 >= v12)
  {
    __break(1u);
LABEL_80:
    int64_t v25 = result;
    uint64_t v10 = a2;
    while (1)
    {
      int64_t v23 = v25 + 2;
      if (__OFADD__(v25 + 1, 1)) {
        goto LABEL_97;
      }
      if (v12 < v23) {
        goto LABEL_98;
      }
      if (v23 < ++v25) {
        goto LABEL_99;
      }
      if (v23 == v12) {
        goto LABEL_88;
      }
      if (*(unsigned char *)(v3 + v23) == 63) {
        goto LABEL_59;
      }
    }
  }
  if (*(unsigned char *)(v3 + v5) != 63) {
    goto LABEL_28;
  }
  uint64_t v6 = v11 + 2;
  *uint64_t v10 = v11 + 2;
  if (v11 + 2 == v12) {
    goto LABEL_28;
  }
  if (v11 + 2 >= v12)
  {
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  int64_t v5 = v3 + v6;
  unsigned int v13 = *(unsigned __int8 *)(v3 + v6);
  BOOL v17 = v13 > 0x3F;
  int64_t v7 = (1 << v13) & 0x8000000000102600;
  if (!v17 && v7 != 0)
  {
    int64_t v8 = v11 + 2;
    goto LABEL_17;
  }
  int64_t v8 = v11 + 3;
  int64_t v7 = v12;
  BOOL v17 = v11 + 3 < v12;
  if (v11 + 3 == v12)
  {
LABEL_31:
    *uint64_t v10 = v7;
    int64_t v8 = v7;
    BOOL v17 = v7 < v6;
    if (v7 >= v6) {
      goto LABEL_17;
    }
    __break(1u);
  }
  if (!v17) {
    goto LABEL_91;
  }
  unsigned int v18 = *(unsigned __int8 *)(v3 + v8);
  if (v18 > 0x3F || (int64_t v7 = 1 << v18, v9 = 0x8000000000102600, (v7 & 0x8000000000102600) == 0))
  {
    unint64_t v9 = 0x8000000000102600;
    uint64_t result = v11 + 2;
    while (1)
    {
      int64_t v7 = result + 2;
      if (__OFADD__(result + 1, 1)) {
        goto LABEL_92;
      }
      if (v12 < v7) {
        goto LABEL_93;
      }
      if (v7 < ++result) {
        goto LABEL_94;
      }
      if (v7 == v12)
      {
        int64_t v7 = v12;
        goto LABEL_31;
      }
      unsigned int v20 = *(unsigned __int8 *)(v3 + v7);
      BOOL v17 = v20 > 0x3F;
      unint64_t v21 = (1 << v20) & 0x8000000000102600;
      if (!v17 && v21 != 0) {
        goto LABEL_31;
      }
    }
  }
  *uint64_t v10 = v8;
LABEL_17:
  if (v12 >= v8)
  {
    if (v8 != v12)
    {
      if (v8 >= v12) {
        goto LABEL_89;
      }
      int64_t v7 = v3 + v8;
      if (*(unsigned char *)(v3 + v8) == 63 && v6 != v8 && v8 + 1 != v12)
      {
        if (v8 + 1 >= v12)
        {
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        uint64_t v6 = 0;
        uint64_t result = *(unsigned __int8 *)(v3 + v8 + 1);
        int64_t v15 = v8 + 2;
        *uint64_t v10 = v8 + 2;
        if ((int)result > 97)
        {
          if (result == 98) {
            goto LABEL_41;
          }
          if (result != 113) {
            goto LABEL_78;
          }
        }
        else
        {
          if (result == 66) {
            goto LABEL_41;
          }
          if (result != 81) {
            goto LABEL_78;
          }
        }
        uint64_t v6 = 1;
LABEL_41:
        if (v15 != v12)
        {
          if (v15 < v12)
          {
            if (*(unsigned char *)(v3 + v15) != 63) {
              goto LABEL_78;
            }
            uint64_t result = v8 + 3;
            *uint64_t v10 = v8 + 3;
            v10[1] = v12;
            void v10[2] = v3;
            uint64_t v10[3] = v4;
            if (v8 + 3 == v12) {
              goto LABEL_78;
            }
            if (v8 + 3 >= v12) {
              goto LABEL_100;
            }
            unint64_t v9 = v3 + result;
            if (*(unsigned char *)(v3 + result) == 63)
            {
              int64_t v19 = v8 + 3;
              goto LABEL_65;
            }
LABEL_58:
            int64_t v19 = v8 + 4;
            int64_t v23 = v12;
            BOOL v24 = v19 < v12;
            if (v19 != v12) {
              goto LABEL_61;
            }
            goto LABEL_59;
          }
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
LABEL_78:
        int64_t v5 = 0;
        int64_t v7 = 0;
        unint64_t v9 = 0;
        int64_t v16 = 0;
        *uint64_t v10 = v11;
        v10[1] = v12;
        uint64_t v6 = 2;
        void v10[2] = v3;
        uint64_t v10[3] = v4;
        goto LABEL_29;
      }
    }
LABEL_28:
    int64_t v5 = 0;
    int64_t v7 = 0;
    unint64_t v9 = 0;
    int64_t v16 = 0;
    *uint64_t v10 = v11;
    uint64_t v6 = 2;
LABEL_29:
    *a3 = v5;
    a3[1] = v7;
    a3[2] = v6;
    a3[3] = v9;
    a3[4] = v16;
    return result;
  }
  __break(1u);
LABEL_88:
  int64_t v23 = v12;
LABEL_59:
  *uint64_t v10 = v23;
  void v10[2] = v3;
  int64_t v19 = v23;
  BOOL v24 = v23 < result;
  if (v23 >= result) {
    goto LABEL_65;
  }
  __break(1u);
LABEL_61:
  if (!v24) {
    goto LABEL_102;
  }
  a2 = v10;
  if (*(unsigned char *)(v3 + v19) != 63) {
    goto LABEL_80;
  }
  *uint64_t v10 = v19;
  void v10[2] = v3;
LABEL_65:
  if (v12 < v19)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v19 == v12) {
    goto LABEL_78;
  }
  if (v19 >= v12)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  uint64_t result = v3 + v19;
  if (*(unsigned char *)(v3 + v19) != 63) {
    goto LABEL_78;
  }
  *uint64_t v10 = v19 + 1;
  v10[1] = v12;
  void v10[2] = v3;
  uint64_t v10[3] = v4;
  if (v19 + 1 == v12) {
    goto LABEL_78;
  }
  if (v19 + 1 < v12)
  {
    if (*(unsigned char *)(v3 + v19 + 1) == 61)
    {
      *uint64_t v10 = v19 + 2;
      void v10[2] = v3;
      if (v3)
      {
        int64_t v16 = v3 + v19;
      }
      else
      {
        int64_t v7 = 0;
        int64_t v5 = 0;
        int64_t v16 = 0;
      }
      if (!v3) {
        unint64_t v9 = 0;
      }
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_103:
  __break(1u);
  return result;
}

uint64_t sub_1003D9824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007140E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1003D988C()
{
  unint64_t result = qword_1007140F0;
  if (!qword_1007140F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140F0);
  }
  return result;
}

int64_t sub_1003D98E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  if (a1) {
    Swift::Int v6 = a2 - a1;
  }
  else {
    Swift::Int v6 = 0;
  }
  sub_1005E1D10(v6);
  char v8 = 0;
  sub_1003E5354(v6, v9, a1, a2, a3, &v8);
  return v9[0];
}

ValueMetadata *type metadata accessor for OutputBufferTooSmall()
{
  return &type metadata for OutputBufferTooSmall;
}

ValueMetadata *type metadata accessor for RFC_2047()
{
  return &type metadata for RFC_2047;
}

uint64_t getEnumTagSinglePayload for RFC_2047.EncodedWord(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2047.EncodedWord(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2047.EncodedWord()
{
  return &type metadata for RFC_2047.EncodedWord;
}

unsigned char *storeEnumTagSinglePayload for RFC_2047.Encoding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003D9AF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2047.Encoding()
{
  return &type metadata for RFC_2047.Encoding;
}

unint64_t sub_1003D9B30()
{
  unint64_t result = qword_1007140F8;
  if (!qword_1007140F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007140F8);
  }
  return result;
}

uint64_t sub_1003D9B84(uint64_t a1, char **a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = (char *)_swiftEmptyArrayStorage;
  if (v2)
  {
    unsigned int v4 = (char *)(swift_bridgeObjectRetain() + 65);
    do
    {
      unsigned int v6 = *(unsigned char **)(v4 - 33);
      uint64_t v7 = *(void *)(v4 - 25);
      uint64_t v8 = *(void *)(v4 - 17);
      uint64_t v9 = *(void *)(v4 - 9);
      char v71 = *(v4 - 1);
      char v69 = *v4;
      sub_1003DC484(v6, v7);
      if (v12 != 2)
      {
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        int v15 = v12;
        uint64_t v68 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v3 = sub_1003EF390(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v17 = *((void *)v3 + 2);
        unint64_t v16 = *((void *)v3 + 3);
        unsigned int v18 = v3;
        if (v17 >= v16 >> 1) {
          unsigned int v18 = sub_1003EF390((char *)(v16 > 1), v17 + 1, 1, v3);
        }
        *((void *)v18 + 2) = v17 + 1;
        int v3 = v18;
        uint64_t v5 = &v18[64 * v17];
        *((void *)v5 + 4) = v13;
        *((void *)v5 + 5) = v14;
        v5[48] = v15 & 1;
        v5[49] = BYTE1(v15);
        v5[50] = ((v15 & 0xFFFFFFu) >> 16) & 1;
        *((void *)v5 + 7) = v6;
        *((void *)v5 + 8) = v7;
        *((void *)v5 + 9) = v68;
        *((void *)v5 + 10) = v9;
        v5[88] = v71;
        v5[89] = v69;
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v72 = *((void *)v3 + 2);
  if (v72)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v70 = v3;
    while (1)
    {
      int64_t v23 = &v3[v19];
      uint64_t v25 = *(void *)&v3[v19 + 32];
      BOOL v24 = *(unsigned __int8 **)&v3[v19 + 40];
      if (v3[v19 + 50] == 1)
      {
        int v26 = v23[48];
        BOOL v27 = (unsigned char *)*((void *)v23 + 9);
        uint64_t v28 = *((void *)v23 + 10);
        int v29 = v23[88];
        __int16 v30 = v23[89];
        if (v26)
        {
          sub_1003DB794(v27, v28, (uint64_t)v77);
          sub_10001FDF0((uint64_t)v77, (uint64_t)v78, &qword_100714118);
          if ((v79 & 1) == 0)
          {
            uint64_t v52 = v78[0];
            uint64_t v66 = v78[1];
            uint64_t v53 = v78[4];
            uint64_t v54 = v78[5];
            sub_10000566C(&qword_100714110);
            unsigned __int8 v32 = (void *)swift_allocObject();
            *((_OWORD *)v32 + 1) = xmmword_1005F6670;
            v32[4] = v53;
            v32[5] = v54;
            *((_WORD *)v32 + 24) = 0;
            swift_bridgeObjectRetain();
            unsigned __int8 v55 = sub_1003B205C(v25, (uint64_t)v24);
            unsigned __int8 v56 = v55;
            if (v55 == 13) {
              uint64_t v57 = v25;
            }
            else {
              uint64_t v57 = v55;
            }
            if (v55 == 13) {
              uint64_t v58 = v24;
            }
            else {
              uint64_t v58 = 0;
            }
            uint64_t v59 = *a2;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v59;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v59 = sub_1003EF9C4(0, *((void *)v59 + 2) + 1, 1, v59);
              *a2 = v59;
            }
            unint64_t v62 = *((void *)v59 + 2);
            unint64_t v61 = *((void *)v59 + 3);
            if (v62 >= v61 >> 1)
            {
              uint64_t v59 = sub_1003EF9C4((char *)(v61 > 1), v62 + 1, 1, v59);
              *a2 = v59;
            }
            *((void *)v59 + 2) = v62 + 1;
            unint64_t v21 = &v59[56 * v62];
            *((void *)v21 + 4) = v57;
            *((void *)v21 + 5) = v58;
            v21[48] = v56 == 13;
            *((void *)v21 + 7) = v52;
            *((void *)v21 + 8) = v66;
            v21[72] = 0;
            goto LABEL_15;
          }
        }
        sub_10000566C(&qword_100714110);
        uint64_t v31 = swift_allocObject();
        unsigned __int8 v32 = (void *)v31;
        *(_OWORD *)(v31 + 16) = xmmword_1005F6670;
        if (v29) {
          __int16 v33 = -32512;
        }
        else {
          __int16 v33 = 0x8000;
        }
        __int16 v34 = v33 | v30;
        if (v26) {
          __int16 v34 = 0;
        }
        *(void *)(v31 + 32) = v27;
        *(void *)(v31 + 40) = v28;
        *(_WORD *)(v31 + 48) = v34;
        swift_bridgeObjectRetain();
        unsigned __int8 v35 = sub_1003B205C(v25, (uint64_t)v24);
        unsigned __int8 v36 = v35;
        if (v35 == 13) {
          uint64_t v37 = v25;
        }
        else {
          uint64_t v37 = v35;
        }
        if (v35 == 13) {
          uint64_t v38 = v24;
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v39 = *a2;
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v39;
        if ((v40 & 1) == 0)
        {
          uint64_t v39 = sub_1003EF9C4(0, *((void *)v39 + 2) + 1, 1, v39);
          *a2 = v39;
        }
        unint64_t v42 = *((void *)v39 + 2);
        unint64_t v41 = *((void *)v39 + 3);
        if (v42 >= v41 >> 1)
        {
          uint64_t v39 = sub_1003EF9C4((char *)(v41 > 1), v42 + 1, 1, v39);
          *a2 = v39;
        }
        *((void *)v39 + 2) = v42 + 1;
        unint64_t v21 = &v39[56 * v42];
        *((void *)v21 + 4) = v37;
        *((void *)v21 + 5) = v38;
        v21[48] = v36 == 13;
        *((void *)v21 + 7) = 0;
        *((void *)v21 + 8) = 0;
        char v22 = 1;
      }
      else
      {
        if (v23[49]) {
          goto LABEL_16;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        char v76 = 1;
        uint64_t v73 = _swiftEmptyArrayStorage;
        sub_1003DAFE0(v25, v24, v20, (uint64_t)v3, (uint64_t)&v74, (uint64_t *)&v73);
        uint64_t v43 = v74;
        uint64_t v65 = v75;
        char v64 = v76;
        unsigned __int8 v32 = v73;
        swift_bridgeObjectRetain();
        unsigned __int8 v44 = sub_1003B205C(v25, (uint64_t)v24);
        unsigned __int8 v45 = v44;
        if (v44 == 13) {
          uint64_t v46 = v25;
        }
        else {
          uint64_t v46 = v44;
        }
        if (v44 == 13) {
          unint64_t v47 = v24;
        }
        else {
          unint64_t v47 = 0;
        }
        uint64_t v48 = *a2;
        char v49 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v48;
        if ((v49 & 1) == 0)
        {
          uint64_t v48 = sub_1003EF9C4(0, *((void *)v48 + 2) + 1, 1, v48);
          *a2 = v48;
        }
        unint64_t v51 = *((void *)v48 + 2);
        unint64_t v50 = *((void *)v48 + 3);
        if (v51 >= v50 >> 1)
        {
          uint64_t v48 = sub_1003EF9C4((char *)(v50 > 1), v51 + 1, 1, v48);
          *a2 = v48;
        }
        *((void *)v48 + 2) = v51 + 1;
        unint64_t v21 = &v48[56 * v51];
        *((void *)v21 + 4) = v46;
        *((void *)v21 + 5) = v47;
        v21[48] = v45 == 13;
        *((void *)v21 + 7) = v43;
        *((void *)v21 + 8) = v65;
        char v22 = v64;
      }
      v21[72] = v22;
LABEL_15:
      *((void *)v21 + 10) = v32;
      swift_bridgeObjectRelease();
      int v3 = v70;
LABEL_16:
      ++v20;
      v19 += 64;
      if (v72 == v20) {
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003DA114(uint64_t a1, char **a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = (char *)_swiftEmptyArrayStorage;
  if (v2)
  {
    unsigned int v4 = (char *)(swift_bridgeObjectRetain() + 65);
    do
    {
      unsigned int v6 = *(unsigned char **)(v4 - 33);
      uint64_t v7 = *(void *)(v4 - 25);
      uint64_t v8 = *(void *)(v4 - 17);
      uint64_t v9 = *(void *)(v4 - 9);
      char v71 = *(v4 - 1);
      char v69 = *v4;
      sub_1003DC484(v6, v7);
      if (v12 != 2)
      {
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        int v15 = v12;
        uint64_t v68 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v3 = sub_1003EF390(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v17 = *((void *)v3 + 2);
        unint64_t v16 = *((void *)v3 + 3);
        unsigned int v18 = v3;
        if (v17 >= v16 >> 1) {
          unsigned int v18 = sub_1003EF390((char *)(v16 > 1), v17 + 1, 1, v3);
        }
        *((void *)v18 + 2) = v17 + 1;
        int v3 = v18;
        uint64_t v5 = &v18[64 * v17];
        *((void *)v5 + 4) = v13;
        *((void *)v5 + 5) = v14;
        v5[48] = v15 & 1;
        v5[49] = BYTE1(v15);
        v5[50] = ((v15 & 0xFFFFFFu) >> 16) & 1;
        *((void *)v5 + 7) = v6;
        *((void *)v5 + 8) = v7;
        *((void *)v5 + 9) = v68;
        *((void *)v5 + 10) = v9;
        v5[88] = v71;
        v5[89] = v69;
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v72 = *((void *)v3 + 2);
  if (v72)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v70 = v3;
    while (1)
    {
      int64_t v23 = &v3[v19];
      uint64_t v25 = *(void *)&v3[v19 + 32];
      BOOL v24 = *(unsigned __int8 **)&v3[v19 + 40];
      if (v3[v19 + 50] == 1)
      {
        int v26 = v23[48];
        BOOL v27 = (unsigned char *)*((void *)v23 + 9);
        uint64_t v28 = *((void *)v23 + 10);
        int v29 = v23[88];
        __int16 v30 = v23[89];
        if (v26)
        {
          sub_1003DB794(v27, v28, (uint64_t)v77);
          sub_10001FDF0((uint64_t)v77, (uint64_t)v78, &qword_100714118);
          if ((v79 & 1) == 0)
          {
            uint64_t v52 = v78[0];
            uint64_t v66 = v78[1];
            uint64_t v53 = v78[4];
            uint64_t v54 = v78[5];
            sub_10000566C(&qword_100714110);
            unsigned __int8 v32 = (void *)swift_allocObject();
            *((_OWORD *)v32 + 1) = xmmword_1005F6670;
            v32[4] = v53;
            v32[5] = v54;
            *((_WORD *)v32 + 24) = 0;
            swift_bridgeObjectRetain();
            unsigned __int8 v55 = sub_1003ACA18(v25, (uint64_t)v24);
            unsigned __int8 v56 = v55;
            if (v55 == 6) {
              uint64_t v57 = v25;
            }
            else {
              uint64_t v57 = v55;
            }
            if (v55 == 6) {
              uint64_t v58 = v24;
            }
            else {
              uint64_t v58 = 0;
            }
            uint64_t v59 = *a2;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v59;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v59 = sub_1003EF9B0(0, *((void *)v59 + 2) + 1, 1, v59);
              *a2 = v59;
            }
            unint64_t v62 = *((void *)v59 + 2);
            unint64_t v61 = *((void *)v59 + 3);
            if (v62 >= v61 >> 1)
            {
              uint64_t v59 = sub_1003EF9B0((char *)(v61 > 1), v62 + 1, 1, v59);
              *a2 = v59;
            }
            *((void *)v59 + 2) = v62 + 1;
            unint64_t v21 = &v59[56 * v62];
            *((void *)v21 + 4) = v57;
            *((void *)v21 + 5) = v58;
            v21[48] = v56 == 6;
            *((void *)v21 + 7) = v52;
            *((void *)v21 + 8) = v66;
            v21[72] = 0;
            goto LABEL_15;
          }
        }
        sub_10000566C(&qword_100714110);
        uint64_t v31 = swift_allocObject();
        unsigned __int8 v32 = (void *)v31;
        *(_OWORD *)(v31 + 16) = xmmword_1005F6670;
        if (v29) {
          __int16 v33 = -32512;
        }
        else {
          __int16 v33 = 0x8000;
        }
        __int16 v34 = v33 | v30;
        if (v26) {
          __int16 v34 = 0;
        }
        *(void *)(v31 + 32) = v27;
        *(void *)(v31 + 40) = v28;
        *(_WORD *)(v31 + 48) = v34;
        swift_bridgeObjectRetain();
        unsigned __int8 v35 = sub_1003ACA18(v25, (uint64_t)v24);
        unsigned __int8 v36 = v35;
        if (v35 == 6) {
          uint64_t v37 = v25;
        }
        else {
          uint64_t v37 = v35;
        }
        if (v35 == 6) {
          uint64_t v38 = v24;
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v39 = *a2;
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v39;
        if ((v40 & 1) == 0)
        {
          uint64_t v39 = sub_1003EF9B0(0, *((void *)v39 + 2) + 1, 1, v39);
          *a2 = v39;
        }
        unint64_t v42 = *((void *)v39 + 2);
        unint64_t v41 = *((void *)v39 + 3);
        if (v42 >= v41 >> 1)
        {
          uint64_t v39 = sub_1003EF9B0((char *)(v41 > 1), v42 + 1, 1, v39);
          *a2 = v39;
        }
        *((void *)v39 + 2) = v42 + 1;
        unint64_t v21 = &v39[56 * v42];
        *((void *)v21 + 4) = v37;
        *((void *)v21 + 5) = v38;
        v21[48] = v36 == 6;
        *((void *)v21 + 7) = 0;
        *((void *)v21 + 8) = 0;
        char v22 = 1;
      }
      else
      {
        if (v23[49]) {
          goto LABEL_16;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        char v76 = 1;
        uint64_t v73 = _swiftEmptyArrayStorage;
        sub_1003DAFE0(v25, v24, v20, (uint64_t)v3, (uint64_t)&v74, (uint64_t *)&v73);
        uint64_t v43 = v74;
        uint64_t v65 = v75;
        char v64 = v76;
        unsigned __int8 v32 = v73;
        swift_bridgeObjectRetain();
        unsigned __int8 v44 = sub_1003ACA18(v25, (uint64_t)v24);
        unsigned __int8 v45 = v44;
        if (v44 == 6) {
          uint64_t v46 = v25;
        }
        else {
          uint64_t v46 = v44;
        }
        if (v44 == 6) {
          unint64_t v47 = v24;
        }
        else {
          unint64_t v47 = 0;
        }
        uint64_t v48 = *a2;
        char v49 = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v48;
        if ((v49 & 1) == 0)
        {
          uint64_t v48 = sub_1003EF9B0(0, *((void *)v48 + 2) + 1, 1, v48);
          *a2 = v48;
        }
        unint64_t v51 = *((void *)v48 + 2);
        unint64_t v50 = *((void *)v48 + 3);
        if (v51 >= v50 >> 1)
        {
          uint64_t v48 = sub_1003EF9B0((char *)(v50 > 1), v51 + 1, 1, v48);
          *a2 = v48;
        }
        *((void *)v48 + 2) = v51 + 1;
        unint64_t v21 = &v48[56 * v51];
        *((void *)v21 + 4) = v46;
        *((void *)v21 + 5) = v47;
        v21[48] = v45 == 6;
        *((void *)v21 + 7) = v43;
        *((void *)v21 + 8) = v65;
        char v22 = v64;
      }
      v21[72] = v22;
LABEL_15:
      *((void *)v21 + 10) = v32;
      swift_bridgeObjectRelease();
      int v3 = v70;
LABEL_16:
      ++v20;
      v19 += 64;
      if (v72 == v20) {
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003DA6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v32 = a1;
  __int16 v33 = a4;
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12)
  {
    swift_retain_n();
    uint64_t v14 = 0;
    goto LABEL_28;
  }
  uint64_t v31 = v7;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a2 + 16);
  while (1)
  {
    if (!v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(a2 + v13 + 40);
    uint64_t v17 = *(void *)(a3 + v13 + 32);
    unint64_t v18 = *(void *)(a3 + v13 + 40);
    if ((v16 & 0x1000000000000000) != 0)
    {
      v30[1] = a6;
      Swift::Int v23 = sub_1005E1E80();
      BOOL v20 = __OFADD__(v14, v23);
      uint64_t v21 = v14 + v23;
      if (v20) {
        goto LABEL_33;
      }
    }
    else
    {
      if ((v16 & 0x2000000000000000) != 0) {
        uint64_t v19 = HIBYTE(v16) & 0xF;
      }
      else {
        uint64_t v19 = *(void *)(a2 + v13 + 32) & 0xFFFFFFFFFFFFLL;
      }
      BOOL v20 = __OFADD__(v14, v19);
      uint64_t v21 = v14 + v19;
      if (v20) {
        goto LABEL_33;
      }
    }
    if ((v18 & 0x1000000000000000) == 0) {
      break;
    }
    Swift::Int v24 = sub_1005E1E80();
    BOOL v20 = __OFADD__(v21, v24);
    uint64_t v14 = v21 + v24;
    if (v20) {
      goto LABEL_21;
    }
LABEL_14:
    --v15;
    v13 += 16;
    if (!--v12) {
      goto LABEL_22;
    }
  }
  if ((v18 & 0x2000000000000000) != 0) {
    uint64_t v22 = HIBYTE(v18) & 0xF;
  }
  else {
    uint64_t v22 = v17 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v20 = __OFADD__(v21, v22);
  uint64_t v14 = v21 + v22;
  if (!v20) {
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  if (v14 < 0) {
LABEL_34:
  }
    __break(1u);
  swift_retain_n();
  if (v14 < 1025)
  {
    uint64_t v7 = v31;
  }
  else
  {
    uint64_t v7 = v31;
    if ((swift_stdlib_isStackAllocationSafe() & 1) == 0)
    {
      uint64_t v25 = swift_slowAlloc();
      swift_retain();
      sub_1003DB150(v25, v25 + v14, v32, a2, a3, v33, a5);
      swift_slowDealloc();
      goto LABEL_30;
    }
  }
LABEL_28:
  __chkstk_darwin();
  BOOL v27 = (char *)v30 - v26;
  uint64_t v28 = (char *)v30 + v14 - v26;
  swift_retain();
  sub_1003DB150((uint64_t)v27, (uint64_t)v28, v32, a2, a3, v33, a5);
  if (!v7) {
    return swift_release_n();
  }
  swift_willThrow();
LABEL_30:
  swift_release_n();
  return swift_release();
}

unint64_t sub_1003DA920(unint64_t a1, unint64_t a2, char *a3, char *a4, void (*a5)(uint64_t *__return_ptr, void *))
{
  uint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v9;
  uint64_t v26 = 4 * v9;
  uint64_t v10 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v22 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v12 = 15;
  uint64_t v25 = a4;
  while (1)
  {
    if (a3)
    {
      if (!a4 || a3 != a4) {
        goto LABEL_17;
      }
    }
    else if (a4)
    {
      a3 = 0;
LABEL_17:
      char v14 = *a3++;
      LOBYTE(v28[0]) = v14;
      a5(&v29, v28);
      if (v26 == v12 >> 14) {
        goto LABEL_37;
      }
      int v15 = v29;
      char v16 = 1;
      goto LABEL_21;
    }
    if (v26 == v12 >> 14)
    {
      uint64_t v21 = 1;
      goto LABEL_39;
    }
    char v16 = 0;
    int v15 = 0;
LABEL_21:
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v11) {
      unint64_t result = sub_1000C6E1C(v12, a1, a2);
    }
    unint64_t v19 = result >> 16;
    if (result >> 16 >= v27) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_1005E1EC0();
      unsigned __int8 v20 = result;
      if (v17 == v11) {
        goto LABEL_29;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v28[0] = a1;
      v28[1] = v23;
      unsigned __int8 v20 = *((unsigned char *)v28 + v19);
      if (v17 == v11) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t result = v22;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = sub_1005E2D30();
      }
      unsigned __int8 v20 = *(unsigned char *)(result + v19);
      if (v17 == v11)
      {
LABEL_29:
        unint64_t result = sub_1000C6E1C(v12, a1, a2);
        unint64_t v12 = result;
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_33;
        }
        goto LABEL_6;
      }
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_33:
      if (v27 <= v12 >> 16) {
        goto LABEL_41;
      }
      unint64_t v12 = sub_1005E1E90();
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_7:
    if (v15 == v20) {
      char v13 = v16;
    }
    else {
      char v13 = 0;
    }
    a4 = v25;
    if ((v13 & 1) == 0)
    {
LABEL_37:
      uint64_t v21 = 0;
LABEL_39:
      swift_release();
      swift_bridgeObjectRelease();
      return v21;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1003DAB5C(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  do
  {
    if (a3)
    {
      if (!a4 || a3 != a4)
      {
LABEL_6:
        char v5 = 0;
        int v6 = *a3++;
        int v4 = v6;
        if (!a1) {
          goto LABEL_12;
        }
        goto LABEL_7;
      }
      int v4 = 0;
    }
    else
    {
      if (a4) {
        goto LABEL_6;
      }
      int v4 = 0;
      a3 = 0;
    }
    char v5 = 1;
    if (!a1)
    {
LABEL_12:
      if (a2) {
        goto LABEL_13;
      }
      int v7 = 0;
      a1 = 0;
      goto LABEL_16;
    }
LABEL_7:
    if (!a2 || a1 != a2)
    {
LABEL_13:
      uint64_t v8 = 0;
      int v9 = *a1++;
      int v7 = v9;
      if (v5) {
        return v8;
      }
      goto LABEL_17;
    }
    int v7 = 0;
LABEL_16:
    uint64_t v8 = 1;
    if (v5) {
      return v8;
    }
LABEL_17:
    if (v4 != v7) {
      LODWORD(v8) = 1;
    }
  }
  while (v8 != 1);
  return 0;
}

uint64_t sub_1003DABE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X7>, unsigned char *a6@<X8>, unsigned char *a7, unsigned __int8 *a8, char a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v14 = a2 - a1;
  if (!a1) {
    uint64_t v14 = 0;
  }
  if (v14 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v16 = a1;
  v43[0] = 0;
  v43[1] = v14;
  v43[2] = a1;
  v43[3] = a2;
  uint64_t v17 = *a3;
  uint64_t v18 = *a4;
  if (*a4 < *a3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v19 = v12;
  unsigned __int8 v20 = a11;
  uint64_t v39 = a10;
  if (v17 == v18)
  {
    uint64_t v21 = 0;
LABEL_24:
    uint64_t v34 = v16 + v21;
    if (!v16)
    {
      uint64_t v21 = 0;
      uint64_t v34 = 0;
    }
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = v21;
    uint64_t v45 = v16;
    uint64_t v46 = v34;
    char v47 = 0;
    char v35 = sub_1003DB948(&v44, a7, a8, a9 & 1, v20, a12);
    swift_bridgeObjectRelease();
    *a6 = v35 & 1;
    return swift_release();
  }
  uint64_t v37 = a11;
  uint64_t v38 = a6;
  uint64_t v22 = *(void *)(a5 + 16);
  if (v22 <= v17) {
    uint64_t v22 = v17;
  }
  uint64_t v41 = v17;
  uint64_t v42 = v22;
  uint64_t v23 = (__int16 *)(a5 + 24 * v17 + 48);
  uint64_t v24 = v17;
  uint64_t v40 = v18;
  while (1)
  {
    if (v24 >= v18)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v17 < 0) {
      goto LABEL_28;
    }
    if (v42 == v24) {
      goto LABEL_29;
    }
    if (*v23 < 0) {
      break;
    }
    uint64_t v28 = v16;
    uint64_t v29 = *((void *)v23 - 2);
    uint64_t v30 = *((void *)v23 - 1);
    if (v29)
    {
      uint64_t v25 = v30 - v29;
      if (v30 - v29 < 0) {
        goto LABEL_30;
      }
      if (v25 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v32 = v30 - v29;
        uint64_t v33 = v29;
        uint64_t v16 = v28;
        sub_1003E8E70(v31, v32, v33, v30, v43, v28, a2);
        if (v19) {
          goto LABEL_36;
        }
        uint64_t v19 = 0;
        swift_slowDealloc();
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    __chkstk_darwin();
    uint64_t v27 = v29;
    uint64_t v16 = v28;
    sub_1003E8E70((uint64_t)&v37 - v26, v25, v27, v30, v43, v28, a2);
    if (v19) {
      goto LABEL_35;
    }
LABEL_12:
    uint64_t v18 = v40;
    uint64_t v17 = v41;
    ++v24;
    v23 += 12;
    if (v40 == v24)
    {
      uint64_t v21 = v43[0];
      unsigned __int8 v20 = v37;
      a6 = v38;
      if ((v43[0] & 0x8000000000000000) == 0) {
        goto LABEL_24;
      }
LABEL_33:
      __break(1u);
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_1005E2F20();
  __break(1u);
LABEL_35:
  swift_willThrow();
  __break(1u);
LABEL_36:
  uint64_t result = swift_slowDealloc();
  __break(1u);
  return result;
}

uint64_t sub_1003DAEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  sub_10000566C(&qword_100714100);
  sub_1003DC1F8();
  sub_1005E04F0();
  uint64_t v13 = *a5;
  uint64_t result = sub_1001F94DC(a1, a2, a3, a4);
  uint64_t v15 = v13 + result;
  if (__OFADD__(v13, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = a7 - a6;
    if (!a6) {
      uint64_t v16 = 0;
    }
    if (v16 >= v15)
    {
      *a5 = v15;
      a5[1] = v16;
      a5[2] = a6;
      a5[3] = a7;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003DAFE0(uint64_t result, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v23 = (unsigned __int8 *)result;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 <= a3)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t result = sub_1003DC348(*(unsigned char *)(a4 + (a3 << 6) + 48), *(unsigned char **)(a4 + (a3 << 6) + 72), *(void *)(a4 + (a3 << 6) + 80), *(unsigned char *)(a4 + (a3 << 6) + 88), *(unsigned char *)(a4 + (a3 << 6) + 89), a5, a6);
  uint64_t v9 = a3 + 1;
  if (a3 + 1 == v8) {
    return result;
  }
  uint64_t v22 = a4;
  uint64_t result = swift_bridgeObjectRetain();
  unsigned __int8 v21 = 0;
  uint64_t v10 = a3 << 6;
  while (1)
  {
    if (v9 >= (uint64_t)v8)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    char v11 = *(unsigned char *)(v22 + v10 + 112);
    int v12 = *(unsigned __int8 *)(v22 + v10 + 113);
    char v13 = *(unsigned char *)(v22 + v10 + 114);
    uint64_t v14 = *(unsigned char **)(v22 + v10 + 136);
    uint64_t v15 = *(void *)(v22 + v10 + 144);
    char v16 = *(unsigned char *)(v22 + v10 + 152);
    char v17 = *(unsigned char *)(v22 + v10 + 153);
    uint64_t result = sub_1003DAB5C(v23, a2, *(unsigned __int8 **)(v22 + v10 + 96), *(unsigned __int8 **)(v22 + v10 + 104));
    if (result) {
      break;
    }
LABEL_6:
    ++v9;
    v10 += 64;
    if (v8 == v9) {
      goto LABEL_12;
    }
  }
  if (v13) {
    goto LABEL_12;
  }
  unsigned int v18 = v21 + 1;
  if ((v18 >> 8)) {
    goto LABEL_16;
  }
  if (v12 == v18)
  {
    uint64_t result = sub_1003DC348(v11, v14, v15, v16, v17, a5, a6);
    unsigned __int8 v21 = v12;
    goto LABEL_6;
  }
LABEL_12:
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003DB150(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64_t *a6, uint64_t *a7)
{
  uint64_t v7 = a2 - result;
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  unint64_t v8 = a7;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v11 = *(void *)(a5 + 16);
  if (v11)
  {
    uint64_t v12 = a4;
    uint64_t v13 = *(void *)(a4 + 16);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    uint64_t v37 = (char *)_swiftEmptyArrayStorage;
    uint64_t v34 = v10;
    while (v13)
    {
      unint64_t v15 = *(void *)(v12 + v14 + 32);
      unint64_t v16 = *(void *)(v12 + v14 + 40);
      unint64_t v18 = *(void *)(v10 + v14 + 32);
      unint64_t v17 = *(void *)(v10 + v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1003DB3A0(v15, v16);
      if (v21)
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = v20;
        uint64_t v36 = v19;
        uint64_t v22 = v12;
        uint64_t v23 = sub_1003DB3A0(v18, v17);
        uint64_t v25 = v24;
        char v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v27)
        {
          uint64_t v12 = v22;
          uint64_t v10 = v34;
        }
        else
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1003EF488(0, *((void *)v37 + 2) + 1, 1, v37);
            uint64_t v37 = (char *)result;
          }
          uint64_t v12 = v22;
          unint64_t v29 = *((void *)v37 + 2);
          unint64_t v28 = *((void *)v37 + 3);
          uint64_t v10 = v34;
          if (v29 >= v28 >> 1)
          {
            uint64_t result = (uint64_t)sub_1003EF488((char *)(v28 > 1), v29 + 1, 1, v37);
            uint64_t v37 = (char *)result;
          }
          *((void *)v37 + 2) = v29 + 1;
          uint64_t v30 = &v37[40 * v29];
          *((void *)v30 + 4) = v36;
          *((void *)v30 + 5) = v35;
          *((void *)v30 + 6) = v23;
          *((void *)v30 + 7) = v25;
          *((_WORD *)v30 + 32) = 0;
        }
      }
      --v13;
      v14 += 16;
      if (!--v11)
      {
        swift_release();
        swift_release();
        swift_release();
        unint64_t v8 = a7;
        uint64_t v9 = a6;
        uint64_t v31 = v37;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v31 = (char *)_swiftEmptyArrayStorage;
LABEL_19:
  swift_retain();
  sub_1003DC5D4((uint64_t)v31, v9, v8);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t sub_1003DB3A0(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v5 = sub_1005E1E80();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int v5 = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v8 = v2[2];
  uint64_t v9 = v2[3];
  if (sub_1001F94DC(*v2, v6, v8, v9) < v5) {
    return 0;
  }
  if (v8) {
    uint64_t v11 = v8 + v7;
  }
  else {
    uint64_t v11 = 0;
  }
  swift_bridgeObjectRetain();
  sub_1003DB4F4(a1, a2, v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = v9 - v8;
  if (!v8) {
    uint64_t v13 = 0;
  }
  if (v12 < 0 || v13 < v12) {
    goto LABEL_22;
  }
  if (v12 < v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 < v12)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  *uint64_t v2 = v12;
  v2[1] = v6;
  v2[2] = v8;
  v2[3] = v9;
  if (v8) {
    return v8 + v7;
  }
  else {
    return 0;
  }
}

uint64_t sub_1003DB4E8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_1003DAB5C(*a2, a2[1], *a1, a1[1]);
}

unint64_t sub_1003DB4F4(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v21 = result;
  unint64_t v22 = a2;
  if (!a3) {
    return result;
  }
  __chkstk_darwin();
  uint64_t v17[2] = &v21;
  _OWORD v17[3] = a3;
  void v17[4] = v4;
  v17[5] = a3;
  uint64_t result = (unint64_t)sub_1003DB6F0((void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_1003DD9F8, (uint64_t)v17, v5, v6);
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  unint64_t v9 = (v22 & 0x2000000000000000) != 0 ? HIBYTE(v22) & 0xF : v21 & 0xFFFFFFFFFFFFLL;
  if (!v9) {
    return result;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (v21 >> 59) & 1;
  if ((v22 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  uint64_t v18 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v19 = v22 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v13 = 15;
  while (1)
  {
    unint64_t v14 = v13 & 0xC;
    uint64_t result = v13;
    if (v14 == v12) {
      uint64_t result = sub_1000C6E1C(v13, v7, v8);
    }
    unint64_t v15 = result >> 16;
    if (result >> 16 >= v9) {
      break;
    }
    if ((v8 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_1005E1EC0();
      char v16 = result;
      if (v14 != v12) {
        goto LABEL_20;
      }
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      v20[0] = v7;
      v20[1] = v19;
      char v16 = *((unsigned char *)v20 + v15);
      if (v14 != v12) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = v18;
      if ((v7 & 0x1000000000000000) == 0) {
        uint64_t result = sub_1005E2D30();
      }
      char v16 = *(unsigned char *)(result + v15);
      if (v14 != v12)
      {
LABEL_20:
        if ((v8 & 0x1000000000000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_24;
      }
    }
    uint64_t result = sub_1000C6E1C(v13, v7, v8);
    unint64_t v13 = result;
    if ((v8 & 0x1000000000000000) == 0)
    {
LABEL_21:
      unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_26;
    }
LABEL_24:
    if (v9 <= v13 >> 16) {
      goto LABEL_31;
    }
    uint64_t result = sub_1005E1E90();
    unint64_t v13 = result;
LABEL_26:
    if (__OFADD__(v10, 1)) {
      goto LABEL_30;
    }
    *(unsigned char *)(a3 + v10++) = v16;
    if (4 * v9 == v13 >> 14) {
      return result;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void *sub_1003DB6F0(void *(*a1)(uint64_t *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0) {
    return (void *)((a4 & 0x1000000000000000) >> 60);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v8 = HIBYTE(a4) & 0xF;
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = v10;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (void *)sub_1005E2D30();
  }
  uint64_t result = a1(&v11, v7, v8);
  if (!v4) {
    return (void *)((a4 & 0x1000000000000000) >> 60);
  }
  return result;
}

unsigned char *sub_1003DB794@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2 - (void)result;
  if (result) {
    uint64_t v4 = a2 - (void)result;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (!v4)
  {
    uint64_t result = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_37:
    char v16 = 1;
LABEL_38:
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 40) = v4;
    *(unsigned char *)(a3 + 48) = v16;
    return result;
  }
  if (*result == 39)
  {
    uint64_t v5 = 0;
    uint64_t v4 = a2 - (void)result;
    BOOL v6 = v3 > 0;
    if (!v3) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v11 = 1;
    do
    {
      if (v4 <= v11 - 1)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v4 == v11) {
        goto LABEL_36;
      }
      int v12 = result[v11++];
    }
    while (v12 != 39);
    uint64_t v5 = v11 - 1;
    BOOL v6 = v11 - 1 < v4;
    if (v11 - 1 == v4) {
      goto LABEL_36;
    }
  }
  if (!v6) {
    goto LABEL_45;
  }
  uint64_t v7 = &result[v5];
  if (result[v5] != 39) {
    goto LABEL_36;
  }
  uint64_t v13 = v5 + 1;
  uint64_t v14 = v4;
  if (v5 + 1 != v4)
  {
    if (v5 + 1 >= v4)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v14 = v5 + 1;
    if (result[v13] != 39)
    {
      uint64_t v15 = v5;
      while (1)
      {
        uint64_t v14 = v15 + 2;
        if (__OFADD__(v15 + 1, 1)) {
          goto LABEL_42;
        }
        if (v4 < v14) {
          goto LABEL_43;
        }
        if (v14 < ++v15) {
          goto LABEL_44;
        }
        if (v14 == v4)
        {
          uint64_t v14 = v4;
LABEL_29:
          if (v14 <= v5) {
            goto LABEL_46;
          }
          break;
        }
        if (result[v14] == 39) {
          goto LABEL_29;
        }
      }
    }
  }
  if (v4 < v14)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v14 == v4)
  {
LABEL_36:
    uint64_t result = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v4 = 0;
    goto LABEL_37;
  }
  if (v14 < v4)
  {
    unint64_t v9 = &result[v14];
    if (result[v14] == 39)
    {
      if (result)
      {
        char v16 = 0;
        uint64_t v8 = &result[v13];
        uint64_t v10 = (uint64_t)&result[v14 + 1];
        v4 += (uint64_t)result;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v4 = 0;
        char v16 = 0;
      }
      goto LABEL_38;
    }
    goto LABEL_36;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1003DB948(long long *a1, unsigned char *a2, unsigned __int8 *a3, char a4, uint64_t *a5, uint64_t a6)
{
  sub_1003DC26C(a1, (uint64_t)&v26);
  if (v29)
  {
    Swift::String v11 = v26;
    if (v27)
    {
      sub_1003E904C(v11, a6, BYTE1(v27) & 1);
LABEL_16:
      v19._uint64_t countAndFlagsBits = 0;
      return v19._countAndFlagsBits;
    }
    v30._uint64_t countAndFlagsBits = sub_1003A9E84((unsigned __int8 *)v26._countAndFlagsBits, (unsigned __int8 *)v26._object, BYTE1(v27) & 1);
    sub_1005E1E30(v30);
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v12 = a4 & 1;
  uint64_t countAndFlagsBits = v26._countAndFlagsBits;
  object = v26._object;
  uint64_t v16 = v27;
  uint64_t v15 = v28;
  if (v27) {
    unint64_t v17 = (char *)v26._object + v27;
  }
  else {
    unint64_t v17 = 0;
  }
  if (v27) {
    uint64_t v18 = (int8x8_t *)(v27 + v26._countAndFlagsBits);
  }
  else {
    uint64_t v18 = 0;
  }
  swift_retain();
  v19._uint64_t countAndFlagsBits = sub_1003E810C(a2, a3, v12, 0, 0, a5, v18, (uint64_t)v17);
  if (v19._object)
  {
    uint64_t v20 = v19._object;
LABEL_14:
    v19._object = v20;
    sub_1005E1E30(v19);
    goto LABEL_15;
  }
  Swift::Int v21 = sub_1001F94DC(countAndFlagsBits, (uint64_t)object, v16, v15);
  sub_1005E1D10(v21);
  v19._uint64_t countAndFlagsBits = 0;
  uint64_t v20 = (void *)0xE000000000000000;
  if ((void *)countAndFlagsBits == object) {
    goto LABEL_14;
  }
  if (countAndFlagsBits < (uint64_t)object)
  {
    if (v16) {
      uint64_t v22 = v15 - v16;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = countAndFlagsBits;
    while ((countAndFlagsBits & 0x8000000000000000) == 0 && v23 < v22)
    {
      if (*(unsigned __int8 *)(v16 + v23) - 1 <= 0x7D)
      {
        uint64_t v25 = v19._countAndFlagsBits;
        sub_1005E1D60();
        v19._uint64_t countAndFlagsBits = v25;
      }
      if (object == (void *)++v23) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  __break(1u);
  return v19._countAndFlagsBits;
}

uint64_t sub_1003DBAF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned char *a5, unsigned __int8 *a6, int a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  int v55 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  int v52 = a3;
  uint64_t v51 = a2;
  uint64_t v50 = a1;
  uint64_t v63 = 0;
  uint64_t v11 = *(void *)(a4 + 16);
  if (!v11)
  {
    swift_retain_n();
    swift_bridgeObjectRetain();
    goto LABEL_66;
  }
  uint64_t v56 = a10;
  uint64_t v57 = a4 + 32;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v13 = 0;
  uint64_t v49 = a4 + 72;
  uint64_t v48 = a4;
  uint64_t v47 = a4 + 48;
  while (1)
  {
    if (v13 >= (unint64_t)v11) {
      goto LABEL_69;
    }
    uint64_t v14 = (unsigned __int8 **)(v57 + 24 * v13);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    int v17 = *((__int16 *)v14 + 8);
    if ((v17 & 0x80000000) == 0) {
      break;
    }
    __int16 v24 = v17;
    if (v17)
    {
      v64._uint64_t countAndFlagsBits = (uint64_t)v16;
      v64._object = v15;
      sub_1003E904C(v64, v56, BYTE1(v17) & 1);
      BOOL v31 = __OFADD__(v13++, 1);
      if (v31) {
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v60 = 0;
      unint64_t v61 = 0xE000000000000000;
      if (v16) {
        Swift::Int v25 = v15 - v16;
      }
      else {
        Swift::Int v25 = 0;
      }
      sub_1005E1D10(v25);
      v26._uint64_t countAndFlagsBits = v60;
      uint64_t v27 = (void *)v61;
      if (v16)
      {
LABEL_58:
        char v28 = 0;
        while (!v15 || v16 != v15)
        {
LABEL_53:
          int v44 = *v16++;
          int v43 = v44;
          if ((v44 - 1) > 0x7D) {
            goto LABEL_58;
          }
          if ((v24 & 0x100) != 0 && v43 == 92)
          {
            char v45 = v28 ^ 1;
            char v28 = 1;
            if (v45) {
              continue;
            }
          }
          uint64_t countAndFlagsBits = v26._countAndFlagsBits;
          uint64_t v59 = v27;
          sub_1005E1D60();
          char v28 = 0;
          v26._uint64_t countAndFlagsBits = countAndFlagsBits;
          uint64_t v27 = v59;
        }
      }
      else if (v15)
      {
        char v28 = 0;
        uint64_t v16 = 0;
        goto LABEL_53;
      }
      v26._object = v27;
      sub_1005E1E30(v26);
      swift_bridgeObjectRelease();
      uint64_t v13 = v63 + 1;
      if (__OFADD__(v63, 1))
      {
LABEL_63:
        __break(1u);
LABEL_64:
        swift_release_n();
        swift_bridgeObjectRelease_n();
LABEL_66:
        swift_bridgeObjectRelease();
        return swift_release_n();
      }
    }
LABEL_51:
    uint64_t v63 = v13;
    if (v13 >= v11) {
      goto LABEL_64;
    }
  }
  uint64_t v18 = v13 + 1;
  uint64_t v60 = v13 + 1;
  if (v13 + 1 < v11)
  {
    Swift::String v19 = (__int16 *)(v49 + 24 * v13);
    while (1)
    {
      int v20 = *v19;
      v19 += 12;
      if (v20 < 0) {
        break;
      }
      if (v11 == ++v18)
      {
        uint64_t v18 = v11;
        break;
      }
    }
    uint64_t v60 = v18;
  }
  uint64_t v21 = v18 - v13;
  if (__OFSUB__(v18, v13)) {
    goto LABEL_70;
  }
  if (v21 == 1)
  {
    if (!v16) {
      goto LABEL_46;
    }
    if (v15 - v16 < 0) {
      goto LABEL_73;
    }
    if (v15 - v16 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
    {
LABEL_46:
      __chkstk_darwin();
      uint64_t v40 = (char *)&v47 - v39;
      swift_bridgeObjectRetain();
      swift_retain();
      char v41 = sub_1003E93E4((uint64_t)v40, (uint64_t)v16, (uint64_t)v15, v53, v54, v55 & 1, a8, a9, v56);
      swift_bridgeObjectRelease();
      swift_release();
      if (v41) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v22 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      swift_retain();
      char v23 = sub_1003E93E4(v22, (uint64_t)v16, (uint64_t)v15, v53, v54, v55 & 1, a8, a9, v56);
      swift_bridgeObjectRelease();
      swift_release();
      swift_slowDealloc();
      if (v23) {
        goto LABEL_64;
      }
    }
LABEL_50:
    BOOL v31 = __OFADD__(v13++, 1);
    if (v31) {
      goto LABEL_63;
    }
    goto LABEL_51;
  }
  if (v18 < v13) {
    goto LABEL_71;
  }
  if (v13 == v18)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v48;
LABEL_41:
    if (v29 < 0) {
      goto LABEL_72;
    }
    if (v29 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
    {
      __chkstk_darwin();
      uint64_t v37 = (char *)&v47 - v36;
      uint64_t v38 = (char *)&v47 + v29 - v36;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1003DABE8((uint64_t)v37, (uint64_t)v38, &v63, &v60, v30, &v62, v53, v54, v55 & 1, a8, a9, v56);
      if (v62 == 1) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v42 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1003DABE8(v42, v42 + v29, &v63, &v60, v30, &countAndFlagsBits, v53, v54, v55 & 1, a8, a9, v56);
      swift_slowDealloc();
      if (countAndFlagsBits) {
        goto LABEL_64;
      }
    }
    uint64_t v13 = v18 - 1;
    goto LABEL_50;
  }
  uint64_t v29 = 0;
  uint64_t v32 = v11 - v13;
  if (v11 < (unint64_t)v13) {
    uint64_t v32 = 0;
  }
  uint64_t v33 = (__int16 *)(v47 + 24 * v13);
  uint64_t v30 = v48;
  while (1)
  {
    if (!v32)
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
    }
    if (*v33 < 0) {
      break;
    }
    uint64_t v34 = *((void *)v33 - 2);
    uint64_t v35 = *((void *)v33 - 1) - v34;
    if (!v34) {
      uint64_t v35 = 0;
    }
    BOOL v31 = __OFADD__(v29, v35);
    v29 += v35;
    if (v31) {
      goto LABEL_68;
    }
    --v32;
    v33 += 12;
    if (!--v21) {
      goto LABEL_41;
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease_n();
  sub_1005E2F20();
  __break(1u);
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_errorRelease();
  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_willThrow();
  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_slowDealloc();
  __break(1u);
  return result;
}

unint64_t sub_1003DC1F8()
{
  unint64_t result = qword_100714108;
  if (!qword_100714108)
  {
    sub_10000744C(&qword_100714100);
    sub_1003A9910();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714108);
  }
  return result;
}

uint64_t sub_1003DC26C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

int64_t sub_1003DC284(unsigned char *a1, unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  if ((a3 & 1) != 0 && *(void *)(a4 + 16) == 1 && (*(_WORD *)(a4 + 48) & 0x8100) == 0x8000)
  {
    uint64_t v6 = sub_1003E8CAC(*(void *)(a4 + 32), *(void *)(a4 + 40));
    int64_t v8 = sub_1003D98E0(v6, v7, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    sub_1003DBAF4((uint64_t)a1, (uint64_t)a2, a3 & 1, a4, a1, a2, a3 & 1, a4, a5, (uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_release();
    return v10[0];
  }
  return v8;
}

uint64_t sub_1003DC348(char a1, unsigned char *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  if (a1)
  {
    if (*(unsigned char *)(a6 + 16) == 1
      && (sub_1003DB794(a2, a3, (uint64_t)v18),
          sub_10001FDF0((uint64_t)v18, (uint64_t)&v19, &qword_100714118),
          (v22 & 1) == 0))
    {
      __int16 v11 = 0;
      unint64_t v9 = v20;
      uint64_t v8 = v21;
      *(_OWORD *)a6 = v19;
      *(unsigned char *)(a6 + 16) = 0;
    }
    else
    {
      __int16 v11 = 0;
    }
  }
  else
  {
    if (a4) {
      __int16 v12 = -32512;
    }
    else {
      __int16 v12 = 0x8000;
    }
    __int16 v11 = v12 & 0xFFFE | a5 & 1;
  }
  uint64_t v13 = *a7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v13;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003F0180(0, *(void *)(v13 + 16) + 1, 1, (char *)v13);
    uint64_t v13 = result;
    *a7 = result;
  }
  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    uint64_t result = (uint64_t)sub_1003F0180((char *)(v15 > 1), v16 + 1, 1, (char *)v13);
    uint64_t v13 = result;
  }
  *(void *)(v13 + 16) = v16 + 1;
  unint64_t v17 = v13 + 24 * v16;
  *(void *)(v17 + 32) = v9;
  *(void *)(v17 + 40) = v8;
  *(_WORD *)(v17 + 48) = v11;
  *a7 = v13;
  return result;
}

void sub_1003DC484(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = a2 - (void)a1;
  if (!a1) {
    uint64_t v2 = 0;
  }
  if (v2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    return;
  }
  uint64_t v3 = v2;
  sub_1003CA998(0x2Au);
  if (!v3) {
    return;
  }
  if (v3 <= 0) {
    goto LABEL_10;
  }
  if (*a1 == 42) {
    sub_1003CA70C();
  }
}

uint64_t sub_1003DC5D4(uint64_t a1, int64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (char *)(swift_bridgeObjectRetain() + 65);
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(unsigned char **)(v4 - 33);
      uint64_t v9 = *(void *)(v4 - 25);
      uint64_t v10 = *(void *)(v4 - 17);
      uint64_t v11 = *(void *)(v4 - 9);
      char v12 = *(v4 - 1);
      char v13 = *v4;
      sub_1003DC484(v8, v9);
      if (v16 != 2)
      {
        int v17 = v16;
        uint64_t v100 = v15;
        uint64_t v103 = v14;
        uint64_t v104 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = sub_1003EF390(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v19 = *((void *)v5 + 2);
        unint64_t v18 = *((void *)v5 + 3);
        int v20 = v5;
        uint64_t v21 = v11;
        if (v19 < v18 >> 1)
        {
          char v6 = v12;
        }
        else
        {
          char v22 = sub_1003EF390((char *)(v18 > 1), v19 + 1, 1, v5);
          uint64_t v21 = v11;
          char v6 = v12;
          int v20 = v22;
        }
        *((void *)v20 + 2) = v19 + 1;
        uint64_t v5 = v20;
        uint64_t v7 = &v20[64 * v19];
        *((void *)v7 + 4) = v103;
        *((void *)v7 + 5) = v100;
        v7[48] = v17 & 1;
        v7[49] = BYTE1(v17);
        v7[50] = ((v17 & 0xFFFFFFu) >> 16) & 1;
        *((void *)v7 + 7) = v8;
        *((void *)v7 + 8) = v9;
        *((void *)v7 + 9) = v104;
        *((void *)v7 + 10) = v21;
        v7[88] = v6;
        v7[89] = v13;
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v23 = *((void *)v5 + 2);
    if (v23) {
      goto LABEL_12;
    }
LABEL_106:
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = (char *)_swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage[2];
  if (!v23) {
    goto LABEL_106;
  }
LABEL_12:
  uint64_t result = swift_bridgeObjectRetain();
  Swift::Int v25 = v5 + 32;
  unint64_t v26 = 0;
  uint64_t v99 = v23;
  unint64_t v105 = v5 + 32;
  char v94 = v5;
  while (1)
  {
    unint64_t v27 = v26;
    char v28 = &v25[64 * v26];
    uint64_t v30 = *(char **)v28;
    uint64_t v29 = (char *)*((void *)v28 + 1);
    int v31 = v28[16];
    uint64_t v32 = (unsigned char *)*((void *)v28 + 5);
    uint64_t v33 = *((void *)v28 + 6);
    int v34 = v28[56];
    __int16 v35 = v28[57];
    ++v26;
    if (v28[18] == 1)
    {
      unint64_t v106 = v26;
      if ((v31 & 1) != 0
        && (sub_1003DB794(v32, v33, (uint64_t)v110),
            sub_10001FDF0((uint64_t)v110, (uint64_t)v113, &qword_100714118),
            (v114 & 1) == 0))
      {
        uint64_t v47 = (unsigned char *)v113[0];
        uint64_t v48 = (unsigned __int8 *)v113[1];
        uint64_t v49 = v113[4];
        uint64_t v50 = v113[5];
        sub_10000566C(&qword_100714110);
        uint64_t v51 = swift_allocObject();
        *(_OWORD *)(v51 + 16) = xmmword_1005F6670;
        *(void *)(v51 + 32) = v49;
        *(void *)(v51 + 40) = v50;
        *(_WORD *)(v51 + 48) = 0;
        if (!v30)
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v23 = v99;
          goto LABEL_30;
        }
        uint64_t v23 = v99;
        if (v29 - v30 != 8
          || (sub_1003DA920(0x656D616E656C6966uLL, 0xE800000000000000, v30, v29, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500) & 1) == 0)
        {
LABEL_29:
          uint64_t result = swift_bridgeObjectRelease();
LABEL_30:
          Swift::Int v25 = v105;
          unint64_t v26 = v106;
          goto LABEL_14;
        }
        int64_t v108 = 0;
        unint64_t v109 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1003DBAF4((uint64_t)v47, (uint64_t)v48, 0, v51, v47, v48, 0, v51, a3, (uint64_t)&v108);
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v52 = v109;
        *a2 = v108;
        a2[1] = v52;
      }
      else
      {
        sub_10000566C(&qword_100714110);
        uint64_t v36 = swift_allocObject();
        uint64_t v37 = v36;
        *(_OWORD *)(v36 + 16) = xmmword_1005F6670;
        if (v34) {
          __int16 v38 = -32512;
        }
        else {
          __int16 v38 = 0x8000;
        }
        __int16 v39 = v38 | v35;
        if (v31) {
          __int16 v39 = 0;
        }
        *(void *)(v36 + 32) = v32;
        *(void *)(v36 + 40) = v33;
        *(_WORD *)(v36 + 48) = v39;
        if (!v30
          || v29 - v30 != 8
          || (sub_1003DA920(0x656D616E656C6966uLL, 0xE800000000000000, v30, v29, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500) & 1) == 0)
        {
          goto LABEL_29;
        }
        if (*(void *)(v37 + 16) == 1 && (*(_WORD *)(v37 + 48) & 0x8100) == 0x8000)
        {
          uint64_t v40 = sub_1003E8CAC(*(void *)(v37 + 32), *(void *)(v37 + 40));
          uint64_t v42 = v41;
          swift_retain();
          uint64_t v23 = v99;
          int64_t v43 = sub_1003D98E0(v40, v42, a3);
        }
        else
        {
          int64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1003DBAF4(0, 0, 1, v37, 0, 0, 1, v37, a3, (uint64_t)&v108);
          swift_bridgeObjectRelease();
          swift_release();
          int64_t v43 = v108;
          unint64_t v44 = v109;
        }
        *a2 = v43;
        a2[1] = v44;
      }
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    if (v28[17]) {
      goto LABEL_14;
    }
    unint64_t v45 = *((void *)v5 + 2);
    if (v27 >= v45) {
      goto LABEL_111;
    }
    if ((v31 & 1) == 0)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      if (v28[56]) {
        __int16 v53 = -32512;
      }
      else {
        __int16 v53 = 0x8000;
      }
      __int16 v46 = v53 | v35;
      goto LABEL_43;
    }
    sub_1003DB794(v32, v33, (uint64_t)v111);
    sub_10001FDF0((uint64_t)v111, (uint64_t)v117, &qword_100714118);
    if (v118 == 1)
    {
      __int16 v46 = 0;
      uint64_t v97 = 0;
      uint64_t v98 = 0;
LABEL_43:
      int v101 = 1;
      goto LABEL_47;
    }
    __int16 v46 = 0;
    int v101 = 0;
    uint64_t v97 = (unsigned __int8 *)v117[1];
    uint64_t v98 = (unsigned char *)v117[0];
    uint64_t v32 = (unsigned char *)v117[4];
    uint64_t v33 = v117[5];
LABEL_47:
    uint64_t v54 = sub_1003F0180(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v56 = *((void *)v54 + 2);
    unint64_t v55 = *((void *)v54 + 3);
    if (v56 >= v55 >> 1) {
      uint64_t v54 = sub_1003F0180((char *)(v55 > 1), v56 + 1, 1, v54);
    }
    *((void *)v54 + 2) = v56 + 1;
    uint64_t v57 = &v54[24 * v56];
    *((void *)v57 + 4) = v32;
    *((void *)v57 + 5) = v33;
    *((_WORD *)v57 + 24) = v46;
    if (v26 == v45) {
      goto LABEL_90;
    }
    uint64_t v58 = v54;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v59 = (uint64_t)v58;
    uint64_t v60 = 0;
    unint64_t v61 = v26;
    char v62 = v105;
    uint64_t v107 = v30;
    int v63 = v101;
LABEL_53:
    if (v61 >= v45) {
      break;
    }
    uint64_t v65 = (unsigned __int8 **)&v62[64 * v61];
    unsigned int v67 = *v65;
    uint64_t v66 = v65[1];
    int v68 = *((unsigned __int8 *)v65 + 16);
    uint64_t v64 = *((unsigned __int8 *)v65 + 17);
    char v69 = *((unsigned char *)v65 + 18);
    unint64_t v70 = v65[5];
    uint64_t v71 = (uint64_t)v65[6];
    int v72 = *((unsigned __int8 *)v65 + 56);
    ++v61;
    uint64_t v73 = v30;
    __int16 v74 = *((unsigned __int8 *)v65 + 57);
    while (1)
    {
      if (v67)
      {
        if (v66 && v67 == v66)
        {
          int v77 = 0;
          char v76 = 1;
          if (!v73) {
            goto LABEL_55;
          }
          goto LABEL_69;
        }
LABEL_66:
        char v76 = 0;
        int v78 = *v67++;
        int v77 = v78;
        if (!v73) {
          goto LABEL_55;
        }
        goto LABEL_69;
      }
      if (v66) {
        goto LABEL_66;
      }
      int v77 = 0;
      unsigned int v67 = 0;
      char v76 = 1;
      if (!v73)
      {
LABEL_55:
        if (!v29) {
          break;
        }
        uint64_t v73 = 0;
        goto LABEL_57;
      }
LABEL_69:
      if (v29 && v73 == v29) {
        break;
      }
LABEL_57:
      unsigned int v75 = *v73++;
      uint64_t result = v75;
      if (v77 != v75) {
        char v76 = 1;
      }
      if (v76) {
        goto LABEL_51;
      }
    }
    if ((v76 & 1) == 0)
    {
LABEL_51:
      uint64_t v64 = v60;
      goto LABEL_52;
    }
    if ((v69 & 1) == 0)
    {
      unsigned int v79 = v60 + 1;
      if ((v79 >> 8)) {
        goto LABEL_110;
      }
      if (v64 == v79)
      {
        if (v68)
        {
          if (v63)
          {
            uint64_t v80 = v59;
            sub_1003DB794(v70, v71, (uint64_t)v112);
            uint64_t result = sub_10001FDF0((uint64_t)v112, (uint64_t)v115, &qword_100714118);
            unint64_t v81 = v26;
            __int16 v82 = 0;
            if (v116 == 1)
            {
              int v63 = 1;
            }
            else
            {
              int v63 = 0;
              uint64_t v97 = (unsigned __int8 *)v115[1];
              uint64_t v98 = (unsigned char *)v115[0];
              unint64_t v70 = (unsigned __int8 *)v115[4];
              uint64_t v71 = v115[5];
            }
            char v62 = v105;
            uint64_t v59 = v80;
          }
          else
          {
            unint64_t v81 = v26;
            __int16 v82 = 0;
            int v63 = 0;
          }
        }
        else
        {
          unint64_t v81 = v26;
          if (v72) {
            __int16 v83 = -32512;
          }
          else {
            __int16 v83 = 0x8000;
          }
          __int16 v82 = v83 | v74;
        }
        unint64_t v85 = *(void *)(v59 + 16);
        unint64_t v84 = *(void *)(v59 + 24);
        if (v85 >= v84 >> 1)
        {
          int v102 = v63;
          uint64_t result = (uint64_t)sub_1003F0180((char *)(v84 > 1), v85 + 1, 1, (char *)v59);
          int v63 = v102;
          char v62 = v105;
          uint64_t v59 = result;
        }
        *(void *)(v59 + 16) = v85 + 1;
        unint64_t v86 = v59 + 24 * v85;
        *(void *)(v86 + 32) = v70;
        *(void *)(v86 + 40) = v71;
        *(_WORD *)(v86 + 48) = v82;
        unint64_t v26 = v81;
        uint64_t v30 = v107;
LABEL_52:
        uint64_t v60 = v64;
        if (v61 != v45) {
          goto LABEL_53;
        }
      }
    }
    LOBYTE(v101) = v63;
    uint64_t v5 = v94;
    Swift::String v87 = (char *)v59;
    swift_bridgeObjectRelease();
    uint64_t v54 = v87;
LABEL_90:
    uint64_t v23 = v99;
    if (v30 && v29 - v30 == 8)
    {
      uint64_t v88 = (uint64_t)v54;
      swift_bridgeObjectRetain();
      if (sub_1003DA920(0x656D616E656C6966uLL, 0xE800000000000000, v30, v29, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500))
      {
        if ((v101 & 1) != 0 && *(void *)(v88 + 16) == 1 && (*(_WORD *)(v88 + 48) & 0x8100) == 0x8000)
        {
          uint64_t v89 = sub_1003E8CAC(*(void *)(v88 + 32), *(void *)(v88 + 40));
          uint64_t v91 = v90;
          swift_retain();
          uint64_t v23 = v99;
          int64_t v92 = sub_1003D98E0(v89, v91, a3);
        }
        else
        {
          int64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1003DBAF4((uint64_t)v98, (uint64_t)v97, v101 & 1, v88, v98, v97, v101 & 1, v88, a3, (uint64_t)&v108);
          swift_bridgeObjectRelease();
          swift_release();
          int64_t v92 = v108;
          unint64_t v93 = v109;
        }
        *a2 = v92;
        a2[1] = v93;
        swift_bridgeObjectRelease_n();
        goto LABEL_97;
      }
      uint64_t result = swift_bridgeObjectRelease_n();
      Swift::Int v25 = v105;
    }
    else
    {
LABEL_97:
      uint64_t result = swift_bridgeObjectRelease();
      Swift::Int v25 = v105;
    }
LABEL_14:
    if (v26 == v23) {
      return swift_bridgeObjectRelease_n();
    }
  }
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
  return result;
}

unint64_t sub_1003DCF04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = swift_beginAccess();
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (*a1 != v12)
  {
    if (*a1 >= v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (*(unsigned char *)(a1[2] + v11) == 59)
    {
      *a1 = v11 + 1;
      return 1;
    }
  }
  unint64_t result = swift_beginAccess();
  if (v11 != v12 && *(void *)(*(void *)a2 + 16) != 0)
  {
    if (__OFADD__(a3, 1)) {
      goto LABEL_25;
    }
    if (a3 + 1 < v11)
    {
      uint64_t v14 = v11 - 2;
      if (__OFSUB__(v11, 2))
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }
      if (v14 < a3 || v14 >= a4) {
        goto LABEL_27;
      }
      unsigned int v15 = *(unsigned __int8 *)(a5 + v14);
      BOOL v16 = v15 > 0x20;
      uint64_t v17 = (1 << v15) & 0x100002600;
      if (!v16 && v17 != 0)
      {
        if (v11 <= a3 || v11 > a4) {
          goto LABEL_28;
        }
        unsigned int v19 = *(unsigned __int8 *)(v11 + a5 - 1);
        if (v19 < 0x21) {
          return (0x100002600uLL >> v19) & 1;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1003DD04C(unint64_t result, uint64_t a2, char a3)
{
  uint64_t i = a2 - result;
  if (result) {
    uint64_t v12 = a2 - result;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12 < 0) {
    goto LABEL_210;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v9 = result;
  unsigned int v13 = *(unsigned __int8 *)result;
  BOOL v14 = v13 > 0x20;
  uint64_t v15 = (1 << v13) & 0x100002600;
  if (v14 || v15 == 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if (v12 == 1)
    {
      uint64_t v17 = 1;
      uint64_t v67 = 1;
      uint64_t v10 = 1;
      uint64_t v18 = 1;
      for (uint64_t i = 1; ; uint64_t i = v12)
      {
        while (1)
        {
          uint64_t v68 = v17;
          uint64_t v69 = v9;
          uint64_t v70 = a2;
          if (v10 == v18) {
            return 0;
          }
LABEL_32:
          if (i != v12)
          {
            if (v12 <= i) {
              uint64_t v3 = i;
            }
            else {
              uint64_t v3 = v12;
            }
            if (i >= v12) {
              goto LABEL_209;
            }
            unsigned int v23 = *(unsigned __int8 *)(v9 + i);
            if (v23 <= 0x20 && ((1 << v23) & 0x100002600) != 0)
            {
              uint64_t v5 = i + 1;
              uint64_t v70 = a2;
              uint64_t v17 = v12;
              uint64_t i = v12;
              if (v5 != v12)
              {
                uint64_t v4 = 0x100002600;
                uint64_t i = v5;
                do
                {
                  if (v3 == i) {
                    goto LABEL_208;
                  }
                  unsigned int v24 = *(unsigned __int8 *)(v9 + i);
                  BOOL v14 = v24 > 0x20;
                  uint64_t v5 = (1 << v24) & 0x100002600;
                  if (v14 || v5 == 0) {
                    goto LABEL_48;
                  }
                  ++i;
                }
                while (v12 != i);
                uint64_t i = v12;
LABEL_48:
                uint64_t v70 = a2;
                uint64_t v17 = v12;
              }
            }
            uint64_t v67 = i;
            uint64_t v68 = v17;
            uint64_t v69 = v9;
          }
          char v62 = a3;
          uint64_t v66 = (char *)_swiftEmptyArrayStorage;
          unint64_t result = sub_1003DCF04(&v67, (uint64_t)&v66, 0, v12, v9);
          if ((result & 1) == 0) {
            goto LABEL_152;
          }
          while (1)
          {
            uint64_t v27 = v67;
            uint64_t v26 = v68;
            if (v67 != v68)
            {
              uint64_t v28 = v69;
              if (v68 <= v67) {
                uint64_t v29 = v67;
              }
              else {
                uint64_t v29 = v68;
              }
              do
              {
                if (v29 == v27)
                {
                  uint64_t v67 = v27;
                  __break(1u);
LABEL_195:
                  uint64_t v67 = v28;
                  uint64_t v68 = v26;
                  __break(1u);
LABEL_196:
                  uint64_t v3 = 0x800000100002600;
                  uint64_t v4 = v10;
                  while (1)
                  {
                    uint64_t i = v4 + 2;
                    if (__OFADD__(v4 + 1, 1)) {
                      goto LABEL_237;
                    }
                    if (v12 < i) {
                      goto LABEL_238;
                    }
                    if (i < ++v4) {
                      goto LABEL_239;
                    }
                    if (i == v12) {
                      goto LABEL_219;
                    }
                    unsigned int v60 = *(unsigned __int8 *)(v9 + i);
                    BOOL v14 = v60 > 0x3B;
                    uint64_t v5 = (1 << v60) & 0x800000100002600;
                    if (!v14 && v5 != 0) {
                      goto LABEL_167;
                    }
                  }
                }
                unsigned int v30 = *(unsigned __int8 *)(v69 + v27);
                BOOL v14 = v30 > 0x20;
                uint64_t v5 = (1 << v30) & 0x100002600;
                if (v14 || v5 == 0) {
                  break;
                }
                ++v27;
              }
              while (v68 != v27);
              uint64_t v67 = v27;
            }
            sub_1003CAD94((uint64_t)v71);
            unint64_t result = sub_10001FDF0((uint64_t)v71, (uint64_t)v75, &qword_100713F40);
            uint64_t i = v76;
            if ((v76 & 1) != 0 || (uint64_t v5 = v67, v3 = v68, v67 == v68))
            {
LABEL_152:
              if (v9) {
                return v9 + v10;
              }
              else {
                return 0;
              }
            }
            if (v67 >= v68) {
              goto LABEL_211;
            }
            uint64_t i = v69;
            if (*(unsigned char *)(v69 + v67) != 61) {
              goto LABEL_152;
            }
            unint64_t result = v75[0];
            uint64_t v32 = v75[1];
            uint64_t v33 = v75[2];
            uint64_t v4 = v70;
            uint64_t v34 = ++v67;
            if (v5 + 1 == v68) {
              goto LABEL_76;
            }
            if (v5 + 1 >= v68)
            {
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              uint64_t v4 = v8;
              uint64_t i = v7;
              uint64_t v3 = v6;
              goto LABEL_223;
            }
            if (*(unsigned char *)(v69 + v34) != 34)
            {
LABEL_76:
              unint64_t v36 = v75[0];
              sub_1003CAD94((uint64_t)v72);
              sub_10001FDF0((uint64_t)v72, (uint64_t)v73, &qword_100713F40);
              if (v74 == 1) {
                goto LABEL_164;
              }
              char v64 = 0;
              char v65 = 0;
              uint64_t v34 = v73[0];
              uint64_t v5 = v73[1];
              uint64_t i = v73[2];
              unint64_t result = v36;
              goto LABEL_99;
            }
            uint64_t v34 = v5 + 2;
            uint64_t v67 = v5 + 2;
            if (v5 + 2 == v68) {
              goto LABEL_164;
            }
            uint64_t v6 = v68;
            uint64_t v7 = v69;
            uint64_t v8 = v70;
            if (v34 >= v68) {
              goto LABEL_222;
            }
            if (*(unsigned char *)(v69 + v34) != 34) {
              break;
            }
            uint64_t v4 = v70;
            uint64_t v35 = v5 + 2;
            v5 += 2;
LABEL_93:
            uint64_t v67 = v35;
            uint64_t v68 = v6;
            uint64_t v69 = v7;
            uint64_t v70 = v4;
            if (v5 < v34) {
              goto LABEL_220;
            }
            if (v3 < v5) {
              goto LABEL_221;
            }
            if (v5 == v3) {
              goto LABEL_164;
            }
            if (v5 >= v3) {
              goto LABEL_224;
            }
            if (*(unsigned char *)(i + v5) != 34) {
              goto LABEL_164;
            }
            uint64_t v67 = v5 + 1;
            char v64 = v62;
            char v65 = 1;
LABEL_99:
            uint64_t v37 = v33 + v32;
            if (!v33) {
              uint64_t v37 = 0;
            }
            uint64_t v63 = v37;
            if (v33) {
              uint64_t v38 = v33 + result;
            }
            else {
              uint64_t v38 = 0;
            }
            uint64_t v39 = i + v34;
            if (i) {
              uint64_t v40 = i + v5;
            }
            else {
              uint64_t v40 = 0;
            }
            if (i) {
              uint64_t v41 = v39;
            }
            else {
              uint64_t v41 = 0;
            }
            uint64_t v42 = v66;
            unint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result)
            {
              unint64_t v43 = (unint64_t)v42;
            }
            else
            {
              unint64_t result = (unint64_t)sub_1003EF488(0, *((void *)v42 + 2) + 1, 1, v42);
              unint64_t v43 = result;
            }
            unint64_t v45 = *(void *)(v43 + 16);
            unint64_t v44 = *(void *)(v43 + 24);
            if (v45 >= v44 >> 1)
            {
              unint64_t result = (unint64_t)sub_1003EF488((char *)(v44 > 1), v45 + 1, 1, (char *)v43);
              unint64_t v43 = result;
            }
            *(void *)(v43 + 16) = v45 + 1;
            unint64_t v46 = v43 + 40 * v45;
            *(void *)(v46 + 32) = v38;
            *(void *)(v46 + 40) = v63;
            *(void *)(v46 + 48) = v41;
            *(void *)(v46 + 56) = v40;
            *(unsigned char *)(v46 + 64) = v65;
            *(unsigned char *)(v46 + 65) = v64 & 1;
            uint64_t v66 = (char *)v43;
            uint64_t v28 = v67;
            uint64_t v26 = v68;
            if (v67 == v68) {
              goto LABEL_52;
            }
            if (v68 <= v67) {
              uint64_t v5 = v67;
            }
            else {
              uint64_t v5 = v68;
            }
            uint64_t v47 = v67 + 1;
            while (1)
            {
              if (v5 == v28) {
                goto LABEL_195;
              }
              unsigned int v48 = *(unsigned __int8 *)(v69 + v28);
              BOOL v14 = v48 > 0x20;
              uint64_t v49 = (1 << v48) & 0x100002600;
              if (v14 || v49 == 0) {
                break;
              }
              ++v28;
              ++v47;
              if (v68 == v28)
              {
                uint64_t v67 = v28;
                goto LABEL_52;
              }
            }
            uint64_t v67 = v28;
            if (v68 != v28)
            {
              if (v28 >= v68) {
                goto LABEL_229;
              }
              if (*(unsigned char *)(v69 + v28) == 40)
              {
                uint64_t v51 = v28 + 1;
                uint64_t v67 = v28 + 1;
                if (v68 - 1 == v28)
                {
                  uint64_t v51 = v68;
                }
                else
                {
                  if (v51 >= v68) {
                    goto LABEL_240;
                  }
                  if (*(unsigned char *)(v69 + v28 + 1) != 41)
                  {
                    if (v68 - 2 == v28)
                    {
LABEL_134:
                      uint64_t v51 = v68;
LABEL_135:
                      uint64_t v67 = v51;
                      if (v51 <= v28) {
                        goto LABEL_234;
                      }
                    }
                    else
                    {
                      uint64_t v51 = v28 + 2;
                      if (v28 + 2 >= v68) {
                        goto LABEL_242;
                      }
                      if (*(unsigned char *)(v69 + v28 + 2) != 41)
                      {
                        while (1)
                        {
                          uint64_t v51 = v47 + 2;
                          if (__OFADD__(v47 + 1, 1)) {
                            break;
                          }
                          if (v68 < v51) {
                            goto LABEL_232;
                          }
                          if (v51 < ++v47) {
                            goto LABEL_233;
                          }
                          if (v51 == v68) {
                            goto LABEL_134;
                          }
                          if (*(unsigned char *)(v69 + v51) == 41) {
                            goto LABEL_135;
                          }
                        }
LABEL_231:
                        __break(1u);
LABEL_232:
                        __break(1u);
LABEL_233:
                        __break(1u);
LABEL_234:
                        __break(1u);
LABEL_235:
                        __break(1u);
LABEL_236:
                        __break(1u);
LABEL_237:
                        __break(1u);
LABEL_238:
                        __break(1u);
LABEL_239:
                        __break(1u);
LABEL_240:
                        __break(1u);
LABEL_241:
                        __break(1u);
LABEL_242:
                        __break(1u);
                        goto LABEL_243;
                      }
                      uint64_t v67 = v28 + 2;
                    }
                  }
                }
                if (v68 < v51) {
                  goto LABEL_230;
                }
                if (v51 == v68) {
                  goto LABEL_164;
                }
                if (v51 >= v68) {
                  goto LABEL_235;
                }
                if (*(unsigned char *)(v69 + v51) != 41)
                {
LABEL_164:
                  swift_bridgeObjectRelease();
                  return 0;
                }
                uint64_t v67 = v51 + 1;
              }
            }
LABEL_52:
            unint64_t result = sub_1003DCF04(&v67, (uint64_t)&v66, 0, v12, v9);
            if ((result & 1) == 0) {
              goto LABEL_152;
            }
          }
          uint64_t v35 = v5 + 3;
          if (__OFADD__(v5, 3)) {
            goto LABEL_225;
          }
          if (v68 < v35)
          {
            uint64_t v4 = v70;
            uint64_t i = v69;
            uint64_t v3 = v68;
            goto LABEL_216;
          }
          if (v35 < v34)
          {
            uint64_t v4 = v70;
            uint64_t i = v69;
            uint64_t v3 = v68;
            goto LABEL_218;
          }
          if (v35 == v68)
          {
LABEL_90:
            uint64_t v7 = v69;
            uint64_t v6 = v68;
            uint64_t v5 = v68;
            goto LABEL_93;
          }
          while (1)
          {
            uint64_t v6 = v5 + 3;
            if (v5 + 3 >= v68) {
              goto LABEL_212;
            }
            uint64_t v7 = *(unsigned __int8 *)(v69 + v5 + 3);
            if (v7 == 34)
            {
              if (v34 >= v6)
              {
                uint64_t v35 = v5 + 3;
LABEL_92:
                uint64_t v7 = v69;
                uint64_t v6 = v68;
                uint64_t v5 = v35;
                goto LABEL_93;
              }
              uint64_t v7 = *(unsigned __int8 *)(v69 + v5 + 2);
              if (v7 != 92) {
                goto LABEL_92;
              }
            }
            uint64_t v35 = v5 + 4;
            if (__OFADD__(v6, 1)) {
              break;
            }
            if (v68 < v35) {
              goto LABEL_215;
            }
            if (v35 < v6) {
              goto LABEL_217;
            }
            ++v5;
            if (v35 == v68) {
              goto LABEL_90;
            }
          }
          uint64_t v34 = v5 + 3;
LABEL_214:
          uint64_t v67 = v34;
          uint64_t v68 = v3;
          uint64_t v69 = i;
          uint64_t v70 = v4;
          __break(1u);
LABEL_215:
          uint64_t v34 = v5 + 3;
LABEL_216:
          uint64_t v67 = v34;
          uint64_t v68 = v3;
          uint64_t v69 = i;
          uint64_t v70 = v4;
          __break(1u);
LABEL_217:
          uint64_t v34 = v5 + 3;
LABEL_218:
          uint64_t v67 = v34;
          uint64_t v68 = v3;
          uint64_t v69 = i;
          uint64_t v70 = v4;
          __break(1u);
LABEL_219:
          uint64_t i = v12;
LABEL_167:
          uint64_t v67 = i;
          uint64_t v69 = v9;
          uint64_t v18 = i;
          if (i >= v10) {
            break;
          }
          __break(1u);
LABEL_169:
          uint64_t v67 = i;
          uint64_t v68 = v12;
          uint64_t v69 = v9;
          uint64_t v70 = a2;
          if (i == v12) {
            goto LABEL_31;
          }
          if (i >= v12) {
            goto LABEL_241;
          }
          if (*(unsigned char *)(v9 + i) == 61)
          {
            uint64_t v67 = ++i;
            uint64_t v69 = v9;
          }
          if (i == v12) {
            goto LABEL_31;
          }
          if (v12 <= i) {
            uint64_t v55 = i;
          }
          else {
            uint64_t v55 = v12;
          }
          if (i >= v12) {
            goto LABEL_228;
          }
          unsigned int v56 = *(unsigned __int8 *)(v9 + i);
          if (v56 <= 0x20)
          {
            uint64_t v4 = 0x100002600;
            if (((1 << v56) & 0x100002600) != 0)
            {
              uint64_t v5 = i + 1;
              uint64_t i = v12;
              if (v5 != v12)
              {
                uint64_t i = v5;
                while (v55 != i)
                {
                  unsigned int v57 = *(unsigned __int8 *)(v9 + i);
                  BOOL v14 = v57 > 0x20;
                  uint64_t v5 = (1 << v57) & 0x100002600;
                  if (v14 || v5 == 0) {
                    goto LABEL_189;
                  }
                  if (v12 == ++i)
                  {
                    uint64_t i = v12;
                    goto LABEL_189;
                  }
                }
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
                goto LABEL_231;
              }
            }
          }
LABEL_189:
          uint64_t v67 = i;
          uint64_t v17 = v12;
        }
LABEL_29:
        if (v12 < v18)
        {
          __break(1u);
LABEL_208:
          uint64_t v70 = a2;
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          uint64_t v34 = v6;
LABEL_223:
          uint64_t v67 = v34;
          uint64_t v68 = v3;
          uint64_t v69 = i;
          uint64_t v70 = v4;
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          uint64_t v4 = v8;
          uint64_t i = v7;
          uint64_t v3 = v6;
          goto LABEL_214;
        }
        if (v18 == v12)
        {
LABEL_31:
          uint64_t v17 = v12;
          uint64_t i = v12;
          if (v10 == v18) {
            return 0;
          }
          goto LABEL_32;
        }
        unsigned int v52 = *(unsigned __int8 *)(v9 + v18);
        uint64_t i = v18;
        if (v52 > 0x20) {
          goto LABEL_169;
        }
        uint64_t i = v18;
        if (((1 << v52) & 0x100002600) == 0) {
          goto LABEL_169;
        }
        uint64_t i = v18 + 1;
        if (v18 + 1 != v12)
        {
          do
          {
            unsigned int v53 = *(unsigned __int8 *)(v9 + i);
            BOOL v14 = v53 > 0x20;
            uint64_t v4 = (1 << v53) & 0x100002600;
            if (v14 || v4 == 0) {
              goto LABEL_169;
            }
          }
          while (v12 != ++i);
        }
        uint64_t v67 = v12;
        uint64_t v17 = v12;
      }
    }
    uint64_t v10 = 1;
    while (1)
    {
      unsigned int v19 = *(unsigned __int8 *)(result + v10);
      BOOL v14 = v19 > 0x20;
      uint64_t v3 = (1 << v19) & 0x100002600;
      if (v14 || v3 == 0) {
        break;
      }
      if (v12 == ++v10) {
        return 0;
      }
    }
  }
  uint64_t v67 = v10;
  uint64_t v68 = v12;
  uint64_t v69 = result;
  uint64_t v70 = a2;
  if (v10 == v12)
  {
    uint64_t v18 = v12;
    goto LABEL_31;
  }
  if (v10 < v12)
  {
    unsigned int v21 = *(unsigned __int8 *)(result + v10);
    BOOL v14 = v21 > 0x3B;
    uint64_t i = (1 << v21) & 0x800000100002600;
    BOOL v22 = v14 || i == 0;
    uint64_t v18 = v10;
    if (!v22) {
      goto LABEL_29;
    }
    uint64_t v18 = v10 + 1;
    uint64_t i = v12;
    if (v10 + 1 == v12) {
      goto LABEL_167;
    }
    if (v10 + 1 < v12)
    {
      unsigned int v59 = *(unsigned __int8 *)(result + v18);
      if (v59 > 0x3B) {
        goto LABEL_196;
      }
      uint64_t i = 1 << v59;
      if ((i & 0x800000100002600) == 0) {
        goto LABEL_196;
      }
      uint64_t v67 = v10 + 1;
      uint64_t v69 = result;
      goto LABEL_29;
    }
    goto LABEL_236;
  }
LABEL_243:
  __break(1u);
  return result;
}

void *sub_1003DD9F8(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0) {
      __break(1u);
    }
    else {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }
  return __src;
}

__n128 initializeWithCopy for RFC_2231.UnsafeNameValuePair(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeNameValuePair(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeNameValuePair(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeNameValuePair()
{
  return &type metadata for RFC_2231.UnsafeNameValuePair;
}

__n128 initializeBufferWithCopyOfBuffer for RFC_2231.UnsafeAttributeName(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeName(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 19) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeName()
{
  return &type metadata for RFC_2231.UnsafeAttributeName;
}

uint64_t getEnumTagSinglePayload for RFC_2231.EncodedWithCharacterSetAndLanguage(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RFC_2231.EncodedWithCharacterSetAndLanguage(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.EncodedWithCharacterSetAndLanguage()
{
  return &type metadata for RFC_2231.EncodedWithCharacterSetAndLanguage;
}

ValueMetadata *type metadata accessor for RFC_2231()
{
  return &type metadata for RFC_2231;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue;
}

__n128 initializeBufferWithCopyOfBuffer for RFC_2231.UnsafeAttributeValue.Element.Unencoded(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 0x3FFF);
  }
  unsigned int v3 = (*(_WORD *)(a1 + 16) & 0xFE | (*(unsigned __int16 *)(a1 + 16) >> 15) | (*(unsigned __int16 *)(a1 + 16) >> 1) & 0x3F00) ^ 0x3FFF;
  if (v3 >= 0x3FFE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x3FFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 1) & 0x1FFF) - (a2 << 13);
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(_WORD *)(result + 16) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_1003DDD08(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16) >> 15;
}

uint64_t sub_1003DDD14(uint64_t result)
{
  *(_WORD *)(result + 16) &= ~0x8000u;
  return result;
}

uint64_t sub_1003DDD24(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = *(_WORD *)(result + 16) & 0x101 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.Element()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.Element;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.DecodedRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.DecodedRange()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.DecodedRange;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeBaseName()
{
  return &type metadata for RFC_2231.UnsafeBaseName;
}

uint64_t getEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element.Unencoded(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC_2231.UnsafeAttributeValue.Element.Unencoded(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC_2231.UnsafeAttributeValue.Element.Unencoded()
{
  return &type metadata for RFC_2231.UnsafeAttributeValue.Element.Unencoded;
}

uint64_t sub_1003DDE58(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v20 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v11++, 1)) {
      break;
    }
    if (v11 >= v20) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v20) {
        goto LABEL_27;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v11 + 2;
        if (v11 + 2 >= v20) {
          goto LABEL_27;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v11 + 3;
          if (v11 + 3 >= v20) {
            goto LABEL_27;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v11 + 4;
            if (v11 + 4 >= v20)
            {
LABEL_27:
              swift_release();
              char v19 = 0;
              return v19 & 1;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_30;
                }
                if (v11 >= v20) {
                  goto LABEL_27;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v11);
                ++v16;
                if (v15) {
                  goto LABEL_18;
                }
              }
            }
          }
        }
      }
      int64_t v11 = v16;
    }
LABEL_18:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_19:
    uint64_t v21 = *(void *)(*(void *)(a3 + 48) + 8 * v13);
    swift_bridgeObjectRetain();
    char v17 = a1(&v21);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v19 & 1;
    }
    char v18 = v17;
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      swift_release();
      char v19 = 1;
      return v19 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1003DE040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v30 = a1;
  uint64_t v8 = type metadata accessor for ReplacementNode();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  int64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v30 - v12;
  sub_10000566C(&qword_100714120);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v17 = (char *)&v30 - v16;
  *(void *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = 0;
  *(unsigned char *)(a6 + 56) = 2;
  uint64_t v18 = a6 + *(int *)(v8 + 24);
  uint64_t v19 = type metadata accessor for PartReplacement();
  int64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v35 = v18;
  v20(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  uint64_t v48 = 0;
  uint64_t v40 = &v48;
  uint64_t v41 = a5;
  uint64_t v42 = v17;
  uint64_t v37 = &v48;
  uint64_t v38 = v17;
  uint64_t v21 = (uint64_t)v34;
  char v22 = sub_1003D521C(3, v30, v31, v32, v33);
  if (v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = v13;
    unint64_t v43 = _swiftEmptyArrayStorage;
    char v44 = v22;
    uint64_t v45 = v23;
    uint64_t v46 = v24;
    uint64_t v47 = v25;
    sub_1003D49D8((uint64_t (*)(uint64_t))sub_1003DE974, (uint64_t)v39, (void (*)(void *, char *, char *, uint64_t, uint64_t))sub_1003DEAC0, (uint64_t)v36, 0, 0);
    swift_bridgeObjectRelease();
    sub_1000079E4((uint64_t)v17, (uint64_t)v15, &qword_100714120);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) != 1)
    {
      uint64_t v29 = (uint64_t)v34;
      sub_1003DF150((uint64_t)v15, (uint64_t)v34);
      sub_1003DF150(v29, (uint64_t)v11);
      sub_100007A48(v35, &qword_100713CD8);
      sub_1003DF150((uint64_t)v11, a6);
      swift_bridgeObjectRelease();
      uint64_t v26 = &qword_100714120;
      uint64_t v27 = (uint64_t)v17;
      return sub_100007A48(v27, v26);
    }
    sub_100007A48((uint64_t)v15, &qword_100714120);
    sub_1003DF0FC();
    swift_allocError();
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  sub_100007A48((uint64_t)v17, &qword_100714120);
  uint64_t v26 = &qword_100713CD8;
  uint64_t v27 = v35;
  return sub_100007A48(v27, v26);
}

uint64_t type metadata accessor for ReplacementNode()
{
  uint64_t result = qword_100714188;
  if (!qword_100714188) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003DE400(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a4;
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  uint64_t v43 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = type metadata accessor for ReplacementNode();
  uint64_t v41 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v44 = (uint64_t)&v39 - v14;
  uint64_t v15 = *a1;
  *a2 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v45 = v4;
  uint64_t v40 = a3;
  if (v16)
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    unint64_t v18 = sub_1003DEF8C(v17);
    if (v19)
    {
      unint64_t v20 = v18;
      uint64_t v39 = *(void *)(a3 + 56);
      uint64_t v21 = type metadata accessor for PartReplacement();
      uint64_t v22 = *(void *)(v21 - 8);
      sub_1003DF328(v39 + *(void *)(v22 + 72) * v20, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PartReplacement);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
    }
    else
    {
      uint64_t v21 = type metadata accessor for PartReplacement();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
    }
  }
  else
  {
    uint64_t v21 = type metadata accessor for PartReplacement();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = (uint64_t)&v13[*(int *)(v11 + 24)];
  type metadata accessor for PartReplacement();
  uint64_t v24 = *(void *)(v21 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v23, 1, 1, v21);
  long long v25 = *((_OWORD *)a1 + 1);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)a1;
  *((_OWORD *)v13 + 1) = v25;
  uint64_t v26 = a1[4];
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 4) = v26;
  v13[56] = 2;
  sub_1003DF288((uint64_t)v10, v23);
  *(void *)&v13[*(int *)(v11 + 28)] = _swiftEmptyArrayStorage;
  uint64_t v27 = (uint64_t)v13;
  uint64_t v28 = v44;
  sub_1003DF150(v27, v44);
  if (static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v15, _swiftEmptyArrayStorage))
  {
    uint64_t v29 = v42;
    sub_100007A48(v42, &qword_100714120);
    sub_1003DF328(v28, v29, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v29, 0, 1, v11);
  }
  else if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v11))
  {
    uint64_t v30 = *(void *)v28;
    uint64_t v31 = *(void *)v28 + 32;
    size_t v32 = (2 * *(void *)(*(void *)v28 + 16)) | 1;
    swift_bridgeObjectRetain();
    sub_1003DEAC8(v28, v30, v31, 0, v32);
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = v28 + *(int *)(v11 + 24);
  uint64_t v34 = v43;
  sub_1000079E4(v33, v43, &qword_100713CD8);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v34, 1, v21);
  sub_100007A48(v34, &qword_100713CD8);
  if (v35 == 1)
  {
    __chkstk_darwin();
    *(&v39 - 2) = v28;
    uint64_t v36 = v40;
    swift_bridgeObjectRetain();
    char v37 = sub_1003DDE58((uint64_t (*)(uint64_t *))sub_1003DF2F0, (uint64_t)(&v39 - 4), v36);
    swift_bridgeObjectRelease();
    sub_1003DFDF0(v28, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    if (v37) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    sub_1003DFDF0(v28, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    return 1;
  }
}

uint64_t sub_1003DE974(uint64_t *a1)
{
  return sub_1003DE400(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1003DE994(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7 = *a6;
  if (*a6)
  {
    uint64_t result = sub_1003B52C0(result, (uint64_t)v17);
    if ((unint64_t)v18 >> 59 == 9)
    {
      *(void *)&long long v18 = v18 & 0x7FFFFFFFFFFFFFFLL;
      long long v19 = v17[0];
      long long v20 = v17[1];
      long long v21 = v18;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1003B1DF4();
      if (v11 != 2)
      {
        size_t v12 = v9;
        uint64_t v13 = v10;
        char v14 = v11;
        uint64_t v15 = type metadata accessor for ReplacementNode();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(a7, 1, v15))
        {
          unint64_t v16 = (2 * *(void *)(v7 + 16)) | 1;
          swift_bridgeObjectRetain();
          sub_1003DED48(v12, v13, v14 & 1, v7, v7 + 32, 0, v16);
          swift_bridgeObjectRelease();
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1003DEAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003DE994(a1, a2, a3, a4, a5, *(uint64_t **)(v5 + 16), *(void *)(v5 + 24));
}

size_t sub_1003DEAC8(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, size_t a5)
{
  uint64_t v7 = v5;
  uint64_t v13 = type metadata accessor for ReplacementNode();
  uint64_t v14 = *(void *)(v13 - 8);
  size_t result = __chkstk_darwin();
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 >> 1 == a4) {
    return result;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    a5 = sub_1003F028C(0, v6, 1, (void *)a5);
LABEL_8:
    unint64_t v20 = *(void *)(a5 + 16);
    unint64_t v19 = *(void *)(a5 + 24);
    if (v20 >= v19 >> 1) {
      a5 = sub_1003F028C(v19 > 1, v20 + 1, 1, (void *)a5);
    }
    *(void *)(a5 + 16) = v20 + 1;
    sub_1003DF150((uint64_t)v17, a5+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v20);
    size_t result = swift_unknownObjectRelease();
    *(void *)(v7 + a3) = a5;
    return result;
  }
  int64_t v6 = *(void *)(a3 + 8 * a4);
  uint64_t v18 = a4 + 1;
  size_t result = sub_1003DF1B4(a3, v18, a5, (uint64_t)&_swiftEmptyArrayStorage[4], 0, 1uLL);
  if (result)
  {
    a3 = *(int *)(v13 + 28);
    a5 = *(void *)(v7 + a3);
    if (*(void *)(a5 + 16) + 1 != v6) {
      return result;
    }
    sub_1003DF328(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    swift_unknownObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  if (v6 >= 1)
  {
    uint64_t v21 = *(int *)(v13 + 28);
    uint64_t v22 = *(void **)(v7 + v21);
    if ((unint64_t)v6 <= v22[2])
    {
      unint64_t v23 = v6 - 1;
      swift_unknownObjectRetain();
      size_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        size_t result = sub_1003AB3D8(v22);
        uint64_t v22 = (void *)result;
      }
      if (v23 >= v22[2])
      {
        __break(1u);
      }
      else
      {
        sub_1003DEAC8(a1, a2, a3, v18, a5);
        size_t result = swift_unknownObjectRelease();
        *(void *)(v7 + v21) = v22;
      }
    }
  }
  return result;
}

size_t sub_1003DED48(size_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int64_t a6, unint64_t a7)
{
  uint64_t v12 = v7;
  size_t v15 = result;
  if (a7 >> 1 == a6)
  {
    *(void *)(v7 + 40) = result;
    *(void *)(v7 + 48) = a2;
    *(unsigned char *)(v7 + 56) = a3 & 1;
    return result;
  }
  if ((uint64_t)(a7 >> 1) <= a6)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(a7 >> 1, a6))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = a5;
  uint64_t v17 = *(void *)(a5 + 8 * a6);
  unint64_t v22 = v17 - 1;
  uint64_t v23 = a4;
  if (v17 >= 1)
  {
    unint64_t v9 = a7;
    size_t result = type metadata accessor for ReplacementNode();
    uint64_t v8 = *(void **)(v12 + *(int *)(result + 28));
    if ((unint64_t)v17 <= v8[2])
    {
      size_t v11 = result;
      uint64_t v21 = *(int *)(result + 28);
      int64_t v20 = a6 + 1;
      char v18 = sub_1003DF1B4(v10, a6 + 1, v9, (uint64_t)&_swiftEmptyArrayStorage[4], 0, 1uLL);
      swift_unknownObjectRetain();
      size_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((v18 & 1) == 0)
      {
        if (result)
        {
LABEL_12:
          if (v22 >= v8[2])
          {
            __break(1u);
            return result;
          }
          sub_1003DED48(v15, a2, a3 & 1, v23, v10, v20, v9);
          goto LABEL_14;
        }
LABEL_20:
        size_t result = sub_1003AB3D8(v8);
        uint64_t v8 = (void *)result;
        goto LABEL_12;
      }
      if (result)
      {
LABEL_9:
        if (v22 < v8[2])
        {
          unint64_t v19 = (unint64_t)v8
              + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80))
              + *(void *)(*(void *)(v11 - 8) + 72) * v22;
          *(void *)(v19 + 40) = v15;
          *(void *)(v19 + 48) = a2;
          *(unsigned char *)(v19 + 56) = a3 & 1;
LABEL_14:
          size_t result = swift_unknownObjectRelease();
          *(void *)(v12 + v21) = v8;
          return result;
        }
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      uint64_t v8 = (void *)sub_1003AB3D8(v8);
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t sub_1003DEF8C(uint64_t a1)
{
  sub_1005E33F0();
  SectionSpecifier.Part.hash(into:)((uint64_t)v4, a1);
  Swift::Int v2 = sub_1005E3470();
  return sub_1003DEFF8(a1, v2);
}

unint64_t sub_1003DEFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    char v8 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v7, a1);
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        uint64_t v10 = swift_bridgeObjectRetain();
        char v11 = static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v10, a1);
        swift_bridgeObjectRelease();
        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1003DF0FC()
{
  unint64_t result = qword_100714128;
  if (!qword_100714128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714128);
  }
  return result;
}

uint64_t sub_1003DF150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReplacementNode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DF1B4(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    int64_t v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5)) {
      goto LABEL_20;
    }
    if (v7 != (a6 >> 1) - a5) {
      return 0;
    }
    if (!v7) {
      return 1;
    }
    uint64_t v9 = (uint64_t *)(result + 8 * a2);
    if (v9 == (uint64_t *)(a4 + 8 * a5) || v6 == a2) {
      return 1;
    }
    if (v6 <= a2) {
      goto LABEL_22;
    }
    uint64_t v10 = a2 + 1;
    uint64_t v11 = *v9;
    if (v6 == a2) {
      return 1;
    }
    uint64_t v12 = a5;
    if (v8 == a5) {
      return 0;
    }
    while (v12 >= a5 && v12 < v8)
    {
      if (v11 != *(void *)(a4 + 8 * v12)) {
        return 0;
      }
      if (v6 == v10) {
        return 1;
      }
      if (v10 >= v6) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)(result + 8 * v10++);
      if (v8 == ++v12) {
        return 0;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1003DF288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713CD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL sub_1003DF2F0()
{
  return SectionSpecifier.Part.isSubPart(of:)((NIOIMAPCore2::SectionSpecifier::Part)(*(NIOIMAPCore2::SectionSpecifier::Part **)(v0 + 16))->array._rawValue);
}

uint64_t sub_1003DF328(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for ReplacementNode.NoTopNodeFound()
{
  return &type metadata for ReplacementNode.NoTopNodeFound;
}

uint64_t sub_1003DF3A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    uint64_t v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (uint64_t *)(a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for PartReplacement();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000566C(&qword_100713CD8);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_13:
      *(void *)(v7 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
      swift_bridgeObjectRetain();
      return v7;
    }
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    int v16 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v16 != 1)
      {
        uint64_t v19 = *v10;
        unint64_t v18 = v10[1];
        sub_100008D24(v19, v18);
        *uint64_t v9 = v19;
        v9[1] = v18;
        goto LABEL_12;
      }
    }
    else if (v16 != 1)
    {
      uint64_t v20 = *v10;
      unint64_t v21 = v10[1];
      sub_100008D24(*v10, v21);
      *uint64_t v9 = v20;
      v9[1] = v21;
      goto LABEL_12;
    }
    uint64_t v17 = sub_1005E17E0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(v9, v10, v17);
LABEL_12:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    goto LABEL_13;
  }
  uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v7;
}

uint64_t sub_1003DF654(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for PartReplacement();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1005E17E0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    }
    else
    {
      sub_1000094D4(*(void *)v4, *(void *)(v4 + 8));
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003DF760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (uint64_t *)(a1 + v6);
  uint64_t v8 = (uint64_t *)(a2 + v6);
  uint64_t v9 = type metadata accessor for PartReplacement();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (!v11(v8, 1, v9))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    int v14 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v14 != 1)
      {
        uint64_t v17 = *v8;
        unint64_t v16 = v8[1];
        sub_100008D24(v17, v16);
        *uint64_t v7 = v17;
        v7[1] = v16;
        goto LABEL_10;
      }
    }
    else if (v14 != 1)
    {
      uint64_t v18 = *v8;
      unint64_t v19 = v8[1];
      sub_100008D24(*v8, v19);
      *uint64_t v7 = v18;
      v7[1] = v19;
      goto LABEL_10;
    }
    uint64_t v15 = sub_1005E17E0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v7, v8, v15);
LABEL_10:
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    goto LABEL_11;
  }
  uint64_t v12 = sub_10000566C(&qword_100713CD8);
  memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_11:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003DF9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = type metadata accessor for PartReplacement();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      type metadata accessor for Message.Data(0);
      int v16 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        if (v16 != 1)
        {
          uint64_t v23 = *v9;
          unint64_t v22 = v9[1];
          sub_100008D24(v23, v22);
          *uint64_t v8 = v23;
          v8[1] = v22;
          goto LABEL_17;
        }
      }
      else if (v16 != 1)
      {
        uint64_t v24 = *v9;
        unint64_t v25 = v9[1];
        sub_100008D24(*v9, v25);
        *uint64_t v8 = v24;
        v8[1] = v25;
        goto LABEL_17;
      }
      uint64_t v21 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(v8, v9, v21);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (!v14)
  {
    if (a1 == a2) {
      goto LABEL_18;
    }
    sub_1003DFDF0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    int v18 = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    int v19 = swift_getEnumCaseMultiPayload();
    if (v18 == 1)
    {
      if (v19 == 1)
      {
LABEL_12:
        uint64_t v20 = sub_1005E17E0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(v8, v9, v20);
LABEL_22:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        goto LABEL_18;
      }
    }
    else if (v19 == 1)
    {
      goto LABEL_12;
    }
    uint64_t v28 = *v9;
    unint64_t v27 = v9[1];
    sub_100008D24(v28, v27);
    *uint64_t v8 = v28;
    v8[1] = v27;
    goto LABEL_22;
  }
  sub_1003DFDF0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PartReplacement);
LABEL_8:
  uint64_t v17 = sub_10000566C(&qword_100713CD8);
  memcpy(v8, v9, *(void *)(*(void *)(v17 - 8) + 64));
LABEL_18:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003DFDF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003DFE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for PartReplacement();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v14 = type metadata accessor for Message.Data(0);
    int v15 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v15 == 1)
      {
LABEL_5:
        uint64_t v16 = sub_1005E17E0();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        goto LABEL_9;
      }
    }
    else if (v15 == 1)
    {
      goto LABEL_5;
    }
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_8;
  }
  uint64_t v12 = sub_10000566C(&qword_100713CD8);
  memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_9:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1003E00C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = type metadata accessor for PartReplacement();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v15 = type metadata accessor for Message.Data(0);
      int v16 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        if (v16 == 1)
        {
LABEL_5:
          uint64_t v17 = sub_1005E17E0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(v7, v8, v17);
          swift_storeEnumTagMultiPayload();
LABEL_15:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
          goto LABEL_16;
        }
      }
      else if (v16 == 1)
      {
        goto LABEL_5;
      }
      memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  if (!v13)
  {
    if (a1 == a2) {
      goto LABEL_16;
    }
    sub_1003DFDF0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    int v19 = swift_getEnumCaseMultiPayload();
    uint64_t v20 = type metadata accessor for Message.Data(0);
    int v21 = swift_getEnumCaseMultiPayload();
    if (v19 == 1)
    {
      if (v21 == 1)
      {
LABEL_12:
        uint64_t v22 = sub_1005E17E0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 32))(v7, v8, v22);
        swift_storeEnumTagMultiPayload();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_16;
      }
    }
    else if (v21 == 1)
    {
      goto LABEL_12;
    }
    memcpy(v7, v8, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_20;
  }
  sub_1003DFDF0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PartReplacement);
LABEL_8:
  uint64_t v18 = sub_10000566C(&qword_100713CD8);
  memcpy(v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
LABEL_16:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003E04FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003E0510);
}

uint64_t sub_1003E0510(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000566C(&qword_100713CD8);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003E05C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003E05D8);
}

void *sub_1003E05D8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000566C(&qword_100713CD8);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1003E0684()
{
  sub_1003E0730();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1003E0730()
{
  if (!qword_100714198)
  {
    type metadata accessor for PartReplacement();
    unint64_t v0 = sub_1005E28C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100714198);
    }
  }
}

uint64_t sub_1003E0788(uint64_t result, uint64_t a2, char a3, void (*a4)(void, void), uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11 < 0)
  {
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a9) {
    uint64_t v11 = a11;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 < 0) {
    goto LABEL_64;
  }
  uint64_t v15 = result;
  int v16 = (char *)sub_1003ECACC();
  if (v19 == 2) {
    goto LABEL_7;
  }
  uint64_t v29 = v18;
  unsigned int v57 = a4;
  uint64_t v61 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  unint64_t v37 = 0x1FFFFFFF0ELL;
  while (1)
  {
    char v67 = v36;
    uint64_t v62 = v35;
    uint64_t v63 = v34;
    uint64_t v64 = v33;
    uint64_t v65 = v32;
    uint64_t v66 = v30;
    uint64_t v44 = v16;
    uint64_t v73 = v17;
    sub_1003EC298(v16, v17, v29, v19 & 1, v74);
    uint64_t v68 = v74[0];
    uint64_t v69 = v74[1];
    uint64_t v70 = v74[2];
    uint64_t v71 = v74[3];
    unint64_t v72 = v74[4];
    sub_1003B52C0((uint64_t)v74, (uint64_t)&v75);
    if (v76 >> 59 == 9)
    {
      v76 &= 0x7FFFFFFFFFFFFFFuLL;
      uint64_t v45 = v44;
      uint64_t v46 = v15;
      uint64_t v47 = a6;
      uint64_t v48 = a7;
      uint64_t v49 = v77;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v61 = v49;
      a7 = v48;
      a6 = v47;
      uint64_t v15 = v46;
      uint64_t v44 = v45;
    }
    if (a9 && !(v67 & 1 | (v44 == 0)) && (uint64_t)&v44[-a9] >= 1) {
      sub_1003C8E0C((char *)a8, v15, 1, a6, a7, 0, &v44[-a9], a9);
    }
    if ((v37 & 0xFFFFFFFFFFFFFF0ELL) == 0x1FFFFFFF0ELL) {
      goto LABEL_17;
    }
    uint64_t v50 = v31 ? (uint64_t)&v66[-v31] : 0;
    if (v50 < 0) {
      break;
    }
    sub_1003C8E0C((char *)a8, v15, 1, a6, a7, 0, (char *)v50, v31);
    sub_1003E4058(v62, v63, v64, v65, v37);
LABEL_17:
    int v16 = (char *)sub_1003ECACC();
    uint64_t v29 = v38;
    char v36 = 1;
    unint64_t v39 = v72;
    uint64_t v30 = v73;
    uint64_t v31 = (uint64_t)v44;
    unint64_t v37 = v72;
    uint64_t v40 = v70;
    uint64_t v41 = v71;
    uint64_t v32 = v71;
    uint64_t v33 = v70;
    uint64_t v42 = v69;
    uint64_t v34 = v69;
    uint64_t v43 = v68;
    uint64_t v35 = v68;
    if (v19 == 2) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_30:
  if ((v39 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL)
  {
    uint64_t v51 = (uint64_t)v44;
    a4 = v57;
    uint64_t v20 = v61;
    if (!(v39 >> 59))
    {
      if ((a3 & 1) != 0 && a2)
      {
        if (v61)
        {
          unint64_t result = sub_1003C4D0C(v43, v42, v40, v41, v39);
          unsigned int v52 = v73;
        }
        else
        {
          uint64_t v55 = v43;
          swift_beginAccess();
          unsigned int v52 = v73;
          sub_1003E4078(v55, v69, v70, v71, v72);
          unint64_t result = swift_bridgeObjectRelease();
        }
        if (v51) {
          unsigned int v56 = &v52[-v51];
        }
        else {
          unsigned int v56 = 0;
        }
        if (((unint64_t)v56 & 0x8000000000000000) == 0)
        {
          sub_1003C8E0C((char *)a8, v15, 1, a6, a7, 0, v56, v51);
          goto LABEL_10;
        }
        goto LABEL_67;
      }
      if (v61) {
        goto LABEL_8;
      }
LABEL_7:
      swift_beginAccess();
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      goto LABEL_8;
    }
    unint64_t result = sub_1003E4058(v43, v42, v40, v41, v39);
    if (v51) {
      unsigned int v53 = &v73[-v51];
    }
    else {
      unsigned int v53 = 0;
    }
    if (((unint64_t)v53 & 0x8000000000000000) == 0)
    {
      sub_1003C8E0C((char *)a8, v15, 1, a6, a7, 0, v53, v51);
      if (v61) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  a4 = v57;
  uint64_t v20 = v61;
  if (!v61) {
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 1) == 0) {
    sub_1003A3314((unint64_t)"X-Apple-Content-Length", 22, 2, v15, (uint64_t (*)(unint64_t, unint64_t))a6, a7, (uint64_t (*)(char *, char *))a6, a7);
  }
LABEL_10:
  unint64_t result = sub_1003C8850(v15, (uint64_t (*)(char *, char *))a6);
  if (!a4) {
    return swift_bridgeObjectRelease();
  }
  if (v20)
  {
    sub_1003E4048((uint64_t)a4);
    swift_bridgeObjectRetain();
    size_t v21 = sub_1003B1DF4();
    unint64_t v23 = v22;
    unsigned __int8 v25 = v24;
    int v26 = v24;
    unint64_t result = swift_bridgeObjectRelease();
    if (v26 == 2) {
      goto LABEL_50;
    }
    if ((v25 & 1) == 0)
    {
      size_t v27 = sub_1003E2708(v21, v23);
      goto LABEL_49;
    }
    if (v21) {
      uint64_t v54 = v23 - v21;
    }
    else {
      uint64_t v54 = 0;
    }
    if ((v54 & 0x8000000000000000) == 0)
    {
      size_t v27 = sub_1003C9F28(0, v54, v21, v23);
LABEL_49:
      a4(v27, v28);
      swift_bridgeObjectRelease();
LABEL_50:
      sub_10003E960((uint64_t)a4);
      return swift_bridgeObjectRelease();
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  return result;
}

char *sub_1003E0D94(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[0] = a8;
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  int v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message(0);
  __chkstk_darwin();
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003E3DCC(a2, (uint64_t)v16);
  uint64_t v19 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v16, 1, v19) == 1)
  {
    sub_100007A48((uint64_t)v16, &qword_100713CD8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1003E3CFC((uint64_t)v16, (uint64_t)v18, type metadata accessor for Message);
      __chkstk_darwin();
      LOBYTE(v22[-8]) = (_BYTE)a5;
      v22[-7] = a6;
      v22[-6] = a7;
      v22[-5] = v22[0];
      LOBYTE(v22[-4]) = a1;
      v22[-3] = (uint64_t)a3;
      v22[-2] = a4;
      sub_1003CFB18((uint64_t)v18, (uint64_t (*)(void))sub_1003E3E34, (uint64_t)&v22[-10], (uint64_t)v22);
      return (char *)sub_1003E3C34((uint64_t)v18, type metadata accessor for Message);
    }
    sub_1003E3C34((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  }
  uint64_t v21 = v22[0];
  sub_1003E22E4(a1, a2, a3, a4, (uint64_t)a5, a6, a7, v22[0]);
  return sub_1003E2480(a1, a2, a3, a4, a5, a6, a7, v21);
}

uint64_t sub_1003E1008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(char *, uint64_t *))
{
  if (a5)
  {
    if (a5 == 1)
    {
      char v21 = 13;
      __chkstk_darwin();
      __int16 v19 = 11565;
      __chkstk_darwin();
      char v9 = __chkstk_darwin();
      if (v10)
      {
        if (a2) {
          uint64_t v11 = a3 - a2;
        }
        else {
          uint64_t v11 = 0;
        }
        if ((v11 & 0x8000000000000000) == 0)
        {
          int v12 = sub_1003E40A8;
          return sub_1003CA2E8(0, v11, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v12);
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      char v21 = 10;
      __chkstk_darwin();
      __int16 v19 = 11565;
      __chkstk_darwin();
      char v9 = __chkstk_darwin();
      if (v15)
      {
        if (a2) {
          uint64_t v11 = a3 - a2;
        }
        else {
          uint64_t v11 = 0;
        }
        if ((v11 & 0x8000000000000000) == 0)
        {
          int v12 = sub_1003E3EB8;
          return sub_1003CA2E8(0, v11, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v12);
        }
LABEL_32:
        __break(1u);
      }
    }
    if ((v9 & 1) == 0) {
      a6(&v21, &v22);
    }
    a6((char *)&v19, (uint64_t *)v20);
    a6((char *)a2, (uint64_t *)a3);
    uint64_t v17 = &v21;
    uint64_t v18 = (char *)&v22;
  }
  else
  {
    __chkstk_darwin();
    __int16 v19 = 11565;
    __chkstk_darwin();
    char v13 = __chkstk_darwin();
    if (v14)
    {
      if (a2) {
        uint64_t v11 = a3 - a2;
      }
      else {
        uint64_t v11 = 0;
      }
      if ((v11 & 0x8000000000000000) == 0)
      {
        int v12 = sub_1003E40A8;
        return sub_1003CA2E8(0, v11, a2, a3, (uint64_t (*)(uint64_t, uint64_t))v12);
      }
      goto LABEL_31;
    }
    if ((v13 & 1) == 0) {
      a6("\r\n", (uint64_t *)"");
    }
    a6((char *)&v19, (uint64_t *)v20);
    a6((char *)a2, (uint64_t *)a3);
    uint64_t v18 = "";
    uint64_t v17 = "\r\n";
  }
  return ((uint64_t (*)(char *, char *))a6)(v17, v18);
}

uint64_t sub_1003E13A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(char *, uint64_t *))
{
  if (a4)
  {
    if (a4 == 1)
    {
      char v15 = 13;
      __chkstk_darwin();
      __int16 v13 = 11565;
      __chkstk_darwin();
      __chkstk_darwin();
      if (v8)
      {
        if (a1) {
          uint64_t v9 = a2 - a1;
        }
        else {
          uint64_t v9 = 0;
        }
        if ((v9 & 0x8000000000000000) == 0) {
          return sub_1003CA2E8(0, v9, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1003E40A8);
        }
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      char v15 = 10;
      __chkstk_darwin();
      __int16 v13 = 11565;
      __chkstk_darwin();
      __chkstk_darwin();
      if (v12)
      {
        if (a1) {
          uint64_t v9 = a2 - a1;
        }
        else {
          uint64_t v9 = 0;
        }
        if ((v9 & 0x8000000000000000) == 0) {
          return sub_1003CA2E8(0, v9, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1003E40A8);
        }
LABEL_25:
        __break(1u);
      }
    }
    a5(&v15, &v16);
    a5((char *)&v13, (uint64_t *)v14);
    a5((char *)a1, (uint64_t *)a2);
    a5((char *)&v13, (uint64_t *)v14);
    return ((uint64_t (*)(char *, uint64_t *))a5)(&v15, &v16);
  }
  else
  {
    __chkstk_darwin();
    __int16 v13 = 11565;
    __chkstk_darwin();
    __chkstk_darwin();
    if (v10)
    {
      if (a1) {
        uint64_t v9 = a2 - a1;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v9 & 0x8000000000000000) == 0) {
        return sub_1003CA2E8(0, v9, a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1003E40A8);
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    a5("\r\n", (uint64_t *)"");
    a5((char *)&v13, (uint64_t *)v14);
    a5((char *)a1, (uint64_t *)a2);
    a5((char *)&v13, (uint64_t *)v14);
    return ((uint64_t (*)(const char *, char *))a5)("\r\n", "");
  }
}

uint64_t PartReplacement.count.getter()
{
  uint64_t v1 = v0;
  uint64_t v29 = sub_1005E17E0();
  uint64_t v2 = *(void *)(v29 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Message.Data(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v8 = (char *)&v28 - v7;
  type metadata accessor for Message(0);
  __chkstk_darwin();
  char v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v12 = (char *)&v28 - v11;
  type metadata accessor for PartReplacement();
  __chkstk_darwin();
  char v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003E3C94(v1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1003E3CFC((uint64_t)v14, (uint64_t)v10, type metadata accessor for Message);
    sub_1003E3C94((uint64_t)v10, (uint64_t)v6, type metadata accessor for Message.Data);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = v29;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v6, v29);
      uint64_t v16 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v15);
    }
    else
    {
      uint64_t v19 = *(void *)v6;
      unint64_t v18 = *((void *)v6 + 1);
      switch(v18 >> 62)
      {
        case 1uLL:
          sub_1000094D4(*(void *)v6, *((void *)v6 + 1));
          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_25:
            __break(1u);
            JUMPOUT(0x1003E1BF4);
          }
          uint64_t v16 = HIDWORD(v19) - (int)v19;
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v19 + 16);
          uint64_t v22 = *(void *)(v19 + 24);
          sub_1000094D4(*(void *)v6, *((void *)v6 + 1));
          BOOL v24 = __OFSUB__(v22, v23);
          uint64_t v16 = v22 - v23;
          if (!v24) {
            break;
          }
          __break(1u);
LABEL_15:
          sub_1000094D4(v19, v18);
          uint64_t v16 = 0;
          break;
        case 3uLL:
          goto LABEL_15;
        default:
          sub_1000094D4(*(void *)v6, *((void *)v6 + 1));
          uint64_t v16 = BYTE6(v18);
          break;
      }
    }
    char v12 = v10;
  }
  else
  {
    sub_1003E3CFC((uint64_t)v14, (uint64_t)v12, type metadata accessor for Message);
    sub_1003E3C94((uint64_t)v12, (uint64_t)v8, type metadata accessor for Message.Data);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = v29;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v29);
      uint64_t v16 = _s13IMAP2Protocol11MessageDataV04BodyD0V5countSivg_0();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v17);
    }
    else
    {
      uint64_t v21 = *(void *)v8;
      unint64_t v20 = *((void *)v8 + 1);
      switch(v20 >> 62)
      {
        case 1uLL:
          sub_1000094D4(*(void *)v8, *((void *)v8 + 1));
          if (__OFSUB__(HIDWORD(v21), v21)) {
            goto LABEL_25;
          }
          uint64_t v16 = HIDWORD(v21) - (int)v21;
          break;
        case 2uLL:
          uint64_t v27 = *(void *)(v21 + 16);
          uint64_t v26 = *(void *)(v21 + 24);
          sub_1000094D4(*(void *)v8, *((void *)v8 + 1));
          BOOL v24 = __OFSUB__(v26, v27);
          uint64_t v16 = v26 - v27;
          if (!v24) {
            break;
          }
          __break(1u);
LABEL_23:
          sub_1000094D4(v21, v20);
          uint64_t v16 = 0;
          break;
        case 3uLL:
          goto LABEL_23;
        default:
          sub_1000094D4(*(void *)v8, *((void *)v8 + 1));
          uint64_t v16 = BYTE6(v20);
          break;
      }
    }
  }
  sub_1003E3C34((uint64_t)v12, type metadata accessor for Message);
  return v16;
}

uint64_t Message.streamWithPartsReplaced(input:output:replacements:_:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[16] = a1;
  v8[17] = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  return sub_1003CFB18(v6, (uint64_t (*)(void))sub_1003E32C0, (uint64_t)v8, a6);
}

uint64_t sub_1003E1C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, char *), uint64_t a9)
{
  uint64_t v21 = a8;
  type metadata accessor for ReplacementNode();
  __chkstk_darwin();
  unint64_t v18 = (uint64_t *)((char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  uint64_t result = sub_1003DE040(a1, a2, a3, a4, a7, (uint64_t)v18);
  if (!v9)
  {
    sub_1003E1D8C(a5, a6, v18, v21, a9, a1, a2, a3, a4);
    return sub_1003E3C34((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
  }
  return result;
}

char *sub_1003E1D8C(unsigned int a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v63 = a7;
  uint64_t v64 = a8;
  uint64_t v62 = a6;
  uint64_t v66 = a5;
  unsigned int v61 = a1;
  uint64_t v52 = *(void *)(type metadata accessor for ReplacementNode() - 8);
  __chkstk_darwin();
  unsigned int v60 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000566C(&qword_100714278);
  char v67 = *(void (**)(uint64_t, char *))(v14 - 8);
  __chkstk_darwin();
  uint64_t v51 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100714280);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (uint64_t *)((char *)&v49 - v18);
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(int *)(v20 + 28);
  if (!*(void *)(*(uint64_t *)((char *)a3 + v23) + 16)) {
    return sub_1003E0D94(a2, (uint64_t)a3 + *(int *)(v20 + 24), a4, v66, (char *)*((unsigned __int8 *)a3 + 8), a3[2], a3[3], a3[4]);
  }
  unsigned int v65 = a2;
  int v59 = *((unsigned __int8 *)a3 + 56);
  if (v59 == 2)
  {
    uint64_t v24 = *a3;
    sub_1003BA228();
    swift_allocError();
    *unsigned __int8 v25 = v24;
    swift_bridgeObjectRetain();
    return (char *)swift_willThrow();
  }
  uint64_t v58 = (unint64_t *)v17;
  uint64_t v55 = a3[6];
  uint64_t v27 = a3[2];
  uint64_t v28 = a3[3];
  uint64_t v29 = a3[5];
  uint64_t v53 = a9;
  uint64_t v54 = v29;
  unsigned int v57 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))a3[4];
  LODWORD(v56) = *((unsigned __int8 *)a3 + 8);
  uint64_t v30 = type metadata accessor for PartReplacement();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v22, 1, 1, v30);
  sub_1003E22E4(v65, (uint64_t)v22, a4, v66, v56, v27, v28, (uint64_t)v57);
  sub_100007A48((uint64_t)v22, &qword_100713CD8);
  uint64_t v31 = *(uint64_t *)((char *)a3 + v23);
  unint64_t v32 = *(void *)(v31 + 16);
  unsigned int v56 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))((char *)v67 + 48);
  unsigned int v57 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))((char *)v67 + 56);
  uint64_t v50 = v31;
  uint64_t result = (char *)swift_bridgeObjectRetain();
  unint64_t v33 = 0;
  char v67 = a4;
  uint64_t v34 = (uint64_t)v60;
  while (1)
  {
    if (v33 == v32)
    {
      uint64_t v35 = 1;
      unint64_t v33 = v32;
      char v36 = v58;
      goto LABEL_10;
    }
    char v36 = v58;
    if (v33 >= *(void *)(v50 + 16)) {
      break;
    }
    uint64_t v37 = (uint64_t)&v51[*(int *)(v14 + 48)];
    sub_1003E3C94(v50+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v33, v37, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    uint64_t v38 = (uint64_t)v36 + *(int *)(v14 + 48);
    *char v36 = v33;
    sub_1003E3CFC(v37, v38, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    uint64_t v35 = 0;
    ++v33;
    a4 = v67;
LABEL_10:
    (*v57)(v36, v35, 1, v14);
    sub_1003E3D64((uint64_t)v36, (uint64_t)v19);
    if ((*v56)(v19, 1, v14) == 1)
    {
      uint64_t v48 = v59 & 1;
      swift_bridgeObjectRelease();
      return (char *)sub_1003E13A0(v54, v55, v48, v65, (void (*)(char *, uint64_t *))a4);
    }
    uint64_t v39 = v59 & 1;
    uint64_t v40 = *v19;
    sub_1003E3CFC((uint64_t)v19 + *(int *)(v14 + 48), v34, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    BOOL v41 = v40 == 0;
    a4 = v67;
    uint64_t v42 = v41;
    uint64_t v43 = v39;
    unint64_t v44 = v32;
    uint64_t v45 = v65;
    uint64_t v46 = v66;
    sub_1003E1008(v42, v54, v55, v43, v65, (void (*)(char *, uint64_t *))v67);
    uint64_t v47 = v45;
    unint64_t v32 = v44;
    sub_1003E1D8C(v61, v47, v34, a4, v46, v62, v63, v64, v53);
    uint64_t result = (char *)sub_1003E3C34(v34, (uint64_t (*)(void))type metadata accessor for ReplacementNode);
    if (v9) {
      return (char *)swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E22E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003E3DCC(a2, (uint64_t)v17);
  uint64_t v18 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18) == 1)
  {
    sub_100007A48((uint64_t)v17, &qword_100713CD8);
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1003E3C34((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v23 = 0;
      return sub_1003E0788(a1, v23, 1, 0, 0, a3, a4, a5, a6, a7, a8);
    }
  }
  uint64_t v20 = sub_1003D4300(a5, a6, a7, a8);
  if (v20) {
    BOOL v22 = v21 == v20;
  }
  else {
    BOOL v22 = 1;
  }
  uint64_t v23 = v22;
  return sub_1003E0788(a1, v23, 1, 0, 0, a3, a4, a5, a6, a7, a8);
}

char *sub_1003E2480(char a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000566C(&qword_100713CD8);
  __chkstk_darwin();
  uint64_t v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Message(0);
  __chkstk_darwin();
  uint64_t v19 = &v26[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1003E3DCC(a2, (uint64_t)v17);
  uint64_t v20 = type metadata accessor for PartReplacement();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v17, 1, v20) == 1)
  {
    uint64_t result = (char *)sub_100007A48((uint64_t)v17, &qword_100713CD8);
    if (a6)
    {
LABEL_3:
      BOOL v22 = (char *)(a7 - a6 - a8);
      if (a7 - a6 >= a8)
      {
        if (a7 - a6 - a8 >= 0)
        {
          uint64_t v23 = a6 + a8;
          uint64_t v24 = a7;
LABEL_10:
          uint64_t v25 = v24;
          return sub_1003C8E0C(a5, a1, 0, a3, a4, 0, v22, v23);
        }
        __break(1u);
      }
      __break(1u);
LABEL_15:
      __break(1u);
      return result;
    }
LABEL_8:
    if (a8 <= 0)
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
      BOOL v22 = 0;
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t result = (char *)sub_1003E3C34((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    if (a6) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  sub_1003E3CFC((uint64_t)v17, (uint64_t)v19, type metadata accessor for Message);
  __chkstk_darwin();
  v26[-64] = (_BYTE)a5;
  *(void *)&v26[-56] = a6;
  *(void *)&v26[-48] = a7;
  *(void *)&v26[-40] = a8;
  v26[-32] = a1;
  *(void *)&v26[-24] = a3;
  uint64_t v25 = a4;
  sub_1003CFB18((uint64_t)v19, (uint64_t (*)(void))sub_1003E3E34, (uint64_t)&v26[-80], (uint64_t)v26);
  return (char *)sub_1003E3C34((uint64_t)v19, type metadata accessor for Message);
}

size_t sub_1003E2708(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    sub_10000566C(&qword_100713C88);
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t result = j__malloc_size(v5);
    _OWORD v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1003E27BC(uint64_t result, uint64_t a2, char a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t (*a15)(unint64_t, unint64_t), uint64_t a16)
{
  if (a11 < 0)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (a9) {
    uint64_t v16 = a11;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 < 0) {
    goto LABEL_65;
  }
  char v20 = result;
  uint64_t v21 = (char *)sub_1003ECACC();
  uint64_t v66 = a6;
  if (v24 == 2)
  {
    char v25 = a3;
    goto LABEL_8;
  }
  uint64_t v28 = v23;
  uint64_t v63 = a4;
  uint64_t v68 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  unint64_t v36 = 0x1FFFFFFF0ELL;
  while (1)
  {
    uint64_t v69 = v33;
    uint64_t v70 = v32;
    uint64_t v71 = v31;
    uint64_t v77 = (uint64_t)v21;
    int v78 = v22;
    sub_1003EC298(v21, v22, v28, v24 & 1, v79);
    uint64_t v72 = v79[0];
    uint64_t v73 = v79[1];
    uint64_t v74 = v79[2];
    uint64_t v75 = v79[3];
    unint64_t v76 = v79[4];
    sub_1003B52C0((uint64_t)v79, (uint64_t)&v80);
    if (v81 >> 59 == 9)
    {
      v81 &= 0x7FFFFFFFFFFFFFFuLL;
      uint64_t v43 = a7;
      uint64_t v44 = v82;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v68 = v44;
      a7 = v43;
      a6 = v66;
    }
    if (a9 && !(v35 & 1 | (v77 == 0)) && v77 - a9 >= 1) {
      sub_1003C8E0C((char *)a8, v20, 1, a6, a7, 0, (char *)(v77 - a9), a9);
    }
    if ((v36 & 0xFFFFFFFFFFFFFF0ELL) == 0x1FFFFFFF0ELL) {
      goto LABEL_12;
    }
    uint64_t v45 = v30 ? (uint64_t)&v29[-v30] : 0;
    if (v45 < 0) {
      break;
    }
    sub_1003C8E0C((char *)a8, v20, 1, a6, a7, 0, (char *)v45, v30);
    sub_1003E4058(v34, v69, v70, v71, v36);
LABEL_12:
    uint64_t v21 = (char *)sub_1003ECACC();
    uint64_t v28 = v37;
    char v35 = 1;
    uint64_t v29 = v78;
    uint64_t v30 = v77;
    unint64_t v38 = v76;
    unint64_t v36 = v76;
    uint64_t v39 = v74;
    uint64_t v40 = v75;
    uint64_t v31 = v75;
    uint64_t v32 = v74;
    uint64_t v42 = v72;
    uint64_t v41 = v73;
    uint64_t v33 = v73;
    uint64_t v34 = v72;
    if (v24 == 2) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_25:
  if ((v38 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL)
  {
    a4 = v63;
    char v25 = a3;
    if (!(v38 >> 59))
    {
      if ((a3 & 1) != 0 && a2)
      {
        if (v68)
        {
          uint64_t result = sub_1003C4D0C(v42, v41, v39, v40, v38);
          uint64_t v26 = 0;
          uint64_t v47 = v77;
          uint64_t v46 = v78;
        }
        else
        {
          uint64_t v59 = v41;
          uint64_t v60 = v42;
          sub_10013AF38(a12, sub_100136870);
          uint64_t v61 = v59;
          uint64_t v47 = v77;
          uint64_t v46 = v78;
          sub_1003E4078(v60, v61, v74, v75, v76);
          uint64_t v26 = sub_1003A93C8((unint64_t)"Content-Type", 12, 2, a13, a15, a16, a12, (uint64_t (*)(char *, char *))a15, a16, a14);
          sub_10013AF38(a12, sub_100061440);
          swift_beginAccess();
          uint64_t result = swift_bridgeObjectRelease();
        }
        if (v47) {
          uint64_t v62 = &v46[-v47];
        }
        else {
          uint64_t v62 = 0;
        }
        if (((unint64_t)v62 & 0x8000000000000000) == 0)
        {
          uint64_t v27 = (uint64_t (*)(char *, char *))v66;
          sub_1003C8E0C((char *)a8, v20, 1, v66, a7, 0, v62, v47);
          goto LABEL_41;
        }
        goto LABEL_67;
      }
LABEL_38:
      if (!v68) {
        goto LABEL_8;
      }
      goto LABEL_39;
    }
    uint64_t result = sub_1003E4058(v42, v41, v39, v40, v38);
    if (v77) {
      uint64_t v48 = &v78[-v77];
    }
    else {
      uint64_t v48 = 0;
    }
    if (((unint64_t)v48 & 0x8000000000000000) == 0)
    {
      sub_1003C8E0C((char *)a8, v20, 1, a6, a7, 0, v48, v77);
      goto LABEL_38;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  a4 = v63;
  char v25 = a3;
  if (!v68)
  {
LABEL_8:
    sub_10013AF38(a12, sub_100136870);
    uint64_t v26 = sub_1003A93C8((unint64_t)"Content-Type", 12, 2, a13, a15, a16, a12, (uint64_t (*)(char *, char *))a15, a16, a14);
    sub_10013AF38(a12, sub_100061440);
    swift_beginAccess();
    swift_bridgeObjectRelease();
    uint64_t v68 = 0;
    if ((v25 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_40:
    uint64_t v27 = (uint64_t (*)(char *, char *))v66;
    goto LABEL_41;
  }
LABEL_39:
  uint64_t v26 = 0;
  if (v25) {
    goto LABEL_40;
  }
LABEL_9:
  uint64_t v27 = (uint64_t (*)(char *, char *))v66;
  sub_1003A3314((unint64_t)"X-Apple-Content-Length", 22, 2, v20, (uint64_t (*)(unint64_t, unint64_t))v66, a7, (uint64_t (*)(char *, char *))v66, a7);
LABEL_41:
  uint64_t result = sub_1003C8850(v20, v27);
  if (!a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (v26)
  {
    sub_1003E4048((uint64_t)a4);
    uint64_t v49 = swift_bridgeObjectRetain();
    a4(v49);
    sub_10003E960((uint64_t)a4);
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v68)
  {
    sub_1003E4048((uint64_t)a4);
    swift_bridgeObjectRetain();
    size_t v50 = sub_1003B1DF4();
    unint64_t v52 = v51;
    unsigned __int8 v54 = v53;
    int v55 = v53;
    uint64_t result = swift_bridgeObjectRelease();
    if (v55 == 2) {
      goto LABEL_55;
    }
    if ((v54 & 1) == 0)
    {
      size_t v56 = sub_1003E2708(v50, v52);
      goto LABEL_54;
    }
    if (v50) {
      uint64_t v58 = v52 - v50;
    }
    else {
      uint64_t v58 = 0;
    }
    if ((v58 & 0x8000000000000000) == 0)
    {
      size_t v56 = sub_1003C9F28(0, v58, v50, v52);
LABEL_54:
      ((void (*)(size_t, uint64_t))a4)(v56, v57);
      swift_bridgeObjectRelease();
LABEL_55:
      sub_10003E960((uint64_t)a4);
      return swift_bridgeObjectRelease();
    }
LABEL_68:
    __break(1u);
  }
  return result;
}

uint64_t _s9IMAP2MIME15PartReplacementO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Message(0);
  __chkstk_darwin();
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v7 = &v19[-v6];
  type metadata accessor for PartReplacement();
  __chkstk_darwin();
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v11 = &v19[-v10];
  sub_10000566C(&qword_100714288);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1003E3C94(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  sub_1003E3C94(a2, v15, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1003E3C94((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1003E3CFC(v15, (uint64_t)v7, type metadata accessor for Message);
      __chkstk_darwin();
      *(void *)&v19[-16] = v7;
      char v16 = sub_1003CF6D8((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003D3EE4, (uint64_t)&v19[-32]);
      sub_1003E3C34((uint64_t)v7, type metadata accessor for Message);
      uint64_t v17 = (uint64_t)v11;
      goto LABEL_6;
    }
LABEL_8:
    sub_1003E3C34((uint64_t)v11, type metadata accessor for Message);
    sub_100007A48((uint64_t)v14, &qword_100714288);
    char v16 = 0;
    return v16 & 1;
  }
  sub_1003E3C94((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v11 = v9;
    goto LABEL_8;
  }
  sub_1003E3CFC(v15, (uint64_t)v5, type metadata accessor for Message);
  __chkstk_darwin();
  *(void *)&v19[-16] = v5;
  char v16 = sub_1003CF6D8((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003D0E90, (uint64_t)&v19[-32]);
  sub_1003E3C34((uint64_t)v5, type metadata accessor for Message);
  uint64_t v17 = (uint64_t)v9;
LABEL_6:
  sub_1003E3C34(v17, type metadata accessor for Message);
  sub_1003E3C34((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PartReplacement);
  return v16 & 1;
}

uint64_t type metadata accessor for PartReplacement()
{
  uint64_t result = qword_100714240;
  if (!qword_100714240) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003E32C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003E1C60(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(unsigned __int8 *)(v4 + 17), *(void *)(v4 + 24), *(void (**)(uint64_t, char *))(v4 + 32), *(void *)(v4 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for PartReplacement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    int v7 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v7 == 1) {
        goto LABEL_7;
      }
    }
    else if (v7 == 1)
    {
LABEL_7:
      uint64_t v9 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v11 = *a2;
    unint64_t v10 = a2[1];
    sub_100008D24(v11, v10);
    *a1 = v11;
    a1[1] = v10;
    goto LABEL_9;
  }
  uint64_t v8 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for PartReplacement(uint64_t *a1)
{
  swift_getEnumCaseMultiPayload();
  type metadata accessor for Message.Data(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_1005E17E0();
    uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    return sub_1000094D4(v5, v6);
  }
}

uint64_t *initializeWithCopy for PartReplacement(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  type metadata accessor for Message.Data(0);
  int v5 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v5 == 1) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    sub_100008D24(v8, v7);
    *a1 = v8;
    a1[1] = v7;
    goto LABEL_7;
  }
  if (v5 != 1) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v6 = sub_1005E17E0();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for PartReplacement(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1003E3C34((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    type metadata accessor for Message.Data(0);
    int v5 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v5 == 1) {
        goto LABEL_6;
      }
    }
    else if (v5 == 1)
    {
LABEL_6:
      uint64_t v6 = sub_1005E17E0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    sub_100008D24(v8, v7);
    *a1 = v8;
    a1[1] = v7;
    goto LABEL_8;
  }
  return a1;
}

void *initializeWithTake for PartReplacement(void *a1, const void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for Message.Data(0);
  int v6 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1)
  {
    if (v6 == 1) {
      goto LABEL_3;
    }
LABEL_5:
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    goto LABEL_6;
  }
  if (v6 != 1) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = sub_1005E17E0();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload();
LABEL_6:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for PartReplacement(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_1003E3C34((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PartReplacement);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for Message.Data(0);
    int v6 = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      if (v6 == 1)
      {
LABEL_4:
        uint64_t v7 = sub_1005E17E0();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else if (v6 == 1)
    {
      goto LABEL_4;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1003E3BAC()
{
  uint64_t result = type metadata accessor for Message.Data(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1003E3C34(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003E3C94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003E3CFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003E3D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100714280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E3DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713CD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_1003E3E34(char *a1, char *a2, uint64_t a3)
{
  return sub_1003E3E4C(a1, a2, a3);
}

char *sub_1003E3E4C(char *a1, char *a2, uint64_t a3)
{
  return sub_1003C8E0C((char *)*(unsigned __int8 *)(v3 + 16), *(unsigned char *)(v3 + 48), 0, *(void (**)(uint64_t, char *))(v3 + 56), *(void *)(v3 + 64), a1, a2, a3);
}

uint64_t sub_1003E3EA0(uint64_t a1, uint64_t a2)
{
  return sub_1003E3EE0(a1, a2);
}

uint64_t sub_1003E3EB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1003E3EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  uint64_t v9 = *(void *)(v2 + 64);
  if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
    v5(*(void *)(v2 + 40), *(void *)(v2 + 48));
  }
  v5(v8, v9);
  v5(a1, a2);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v6, v7);
}

uint64_t sub_1003E3F84(uint64_t a1, uint64_t a2)
{
  return sub_1003E3F9C(a1, a2);
}

uint64_t sub_1003E3F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[2];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  v5(v6, v7);
  v5(v8, v9);
  v5(a1, a2);
  v5(v8, v9);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v6, v7);
}

uint64_t sub_1003E4048(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1003E4058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL) {
    return sub_1003BE4A4(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t sub_1003E4078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0xFFFFFFFFFFFFFF0ELL) != 0x1FFFFFFF0ELL) {
    return sub_1003C4D0C(a1, a2, a3, a4, a5);
  }
  return a1;
}

ValueMetadata *type metadata accessor for MultipartWithoutBoundary()
{
  return &type metadata for MultipartWithoutBoundary;
}

uint64_t sub_1003E40A8()
{
  return sub_1003E3EB8();
}

uint64_t SparsePartInfo.status.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1003E40CC(v1 + 8, a1);
}

uint64_t sub_1003E40CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  sub_10039E02C(*(void *)a1, v4, v5, v6, v7);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  return a2;
}

uint64_t SparsePartInfo.status.setter(uint64_t a1)
{
  return sub_1003E4138(a1, v1 + 8);
}

uint64_t sub_1003E4138(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 SparsePartInfo.init(part:status:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1003DC26C(a2, (uint64_t)v8);
  char v5 = v9;
  __n128 result = (__n128)v8[0];
  long long v7 = v8[1];
  *(void *)a3 = a1;
  *(__n128 *)(a3 + 8) = result;
  *(_OWORD *)(a3 + 24) = v7;
  *(unsigned char *)(a3 + 40) = v5;
  return result;
}

uint64_t sub_1003E41C8(long long *a1, long long *a2)
{
  sub_1003DC26C(a1, (uint64_t)v4);
  sub_1003DC26C(a2, (uint64_t)v5);
  return _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v4, v5) & 1;
}

uint64_t static SparsePartInfo.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static SectionSpecifier.Part.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)a2))
  {
    sub_1003DC26C((long long *)(a1 + 8), (uint64_t)v7);
    sub_1003DC26C((long long *)(a2 + 8), (uint64_t)v6);
    char v4 = _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v7, v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1003E4280(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  sub_1003DC26C((long long *)(a1 + 1), (uint64_t)v7);
  uint64_t v4 = *a2;
  sub_1003DC26C((long long *)(a2 + 1), (uint64_t)v8);
  if (static SectionSpecifier.Part.__derived_struct_equals(_:_:)(v3, v4)) {
    char v5 = _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v7, v8);
  }
  else {
    char v5 = 0;
  }
  return v5 & 1;
}

BOOL SparsePartInfo.Status.isEmpty.getter()
{
  sub_1003DC26C(v0, (uint64_t)&v2);
  return v6 && (v6 != 3 || v4 | v5 | v2 | v3 && (v2 != 1 || v4 | v5 | v3));
}

void *Message.findPartsMissingData(cache:)(void *a1)
{
  return sub_1003D3780(v1, (void *(*)(uint64_t *__return_ptr, void))sub_1003E4ABC, a1);
}

uint64_t sub_1003E43A8(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  sub_10001FDF0((uint64_t)(a1 + 12), (uint64_t)v60, &qword_100713A60);
  sub_10001FDF0((uint64_t)v60, (uint64_t)v63, &qword_100713A60);
  if (*((void *)&v64 + 1))
  {
    v65[0] = v63[0];
    v65[1] = v63[1];
    v65[2] = v64;
    sub_10039DF8C((uint64_t)v65, (uint64_t)v68);
    sub_10039DF8C((uint64_t)v68, (uint64_t)v69);
    if (v70 <= 0xFu)
    {
      sub_1003BA534(v69, v61);
      uint64_t v10 = *a1;
      uint64_t v11 = *a2;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v11 = sub_1003F0460(0, *((void *)v11 + 2) + 1, 1, v11);
        *a2 = v11;
      }
      unint64_t v14 = *((void *)v11 + 2);
      unint64_t v13 = *((void *)v11 + 3);
      if (v14 >= v13 >> 1)
      {
        uint64_t v11 = sub_1003F0460((char *)(v13 > 1), v14 + 1, 1, v11);
        *a2 = v11;
      }
      *((void *)v11 + 2) = v14 + 1;
      uint64_t v15 = &v11[48 * v14];
      *((void *)v15 + 4) = v10;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
LABEL_23:
      char v35 = 3;
LABEL_29:
      v15[72] = v35;
      return 2;
    }
  }
  uint64_t v16 = a1[8];
  if (!v16
    || (uint64_t v17 = a1[5], v18 = a1[6], v19 = a1[7], sub_10001FDF0((uint64_t)v60, (uint64_t)v61, &qword_100713A60), !v62)
    || (uint64_t v20 = v19 & 1, (sub_10039D0BC(v17, v18, v20, v16, (uint64_t)v60) & 1) == 0))
  {
    sub_10001FDF0((uint64_t)(a1 + 21), (uint64_t)v59, &qword_100713C98);
    sub_10001FDF0((uint64_t)v59, (uint64_t)v66, &qword_100713C98);
    if (v67 != 2)
    {
      uint64_t v36 = sub_1003B4B1C();
      uint64_t v38 = v37 & 1;
      uint64_t v39 = *a1;
      uint64_t v40 = *a2;
      swift_bridgeObjectRetain();
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v40;
      if ((v41 & 1) == 0)
      {
        uint64_t v40 = sub_1003F0460(0, *((void *)v40 + 2) + 1, 1, v40);
        *a2 = v40;
      }
      unint64_t v43 = *((void *)v40 + 2);
      unint64_t v42 = *((void *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        uint64_t v40 = sub_1003F0460((char *)(v42 > 1), v43 + 1, 1, v40);
        *a2 = v40;
      }
      *((void *)v40 + 2) = v43 + 1;
      uint64_t v15 = &v40[48 * v43];
      *((void *)v15 + 4) = v39;
      *((void *)v15 + 5) = v36;
      *((void *)v15 + 7) = 0;
      *((void *)v15 + 8) = 0;
      *((void *)v15 + 6) = v38;
      char v35 = 1;
      goto LABEL_29;
    }
    uint64_t v30 = *a1;
    uint64_t v31 = *a2;
    swift_bridgeObjectRetain();
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v31;
    if ((v32 & 1) == 0)
    {
      uint64_t v31 = sub_1003F0460(0, *((void *)v31 + 2) + 1, 1, v31);
      *a2 = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = sub_1003F0460((char *)(v33 > 1), v34 + 1, 1, v31);
      *a2 = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    uint64_t v15 = &v31[48 * v34];
    *((void *)v15 + 4) = v30;
    *((void *)v15 + 5) = 1;
    *((void *)v15 + 7) = 0;
    *((void *)v15 + 8) = 0;
    *((void *)v15 + 6) = 0;
    goto LABEL_23;
  }
  int64_t v21 = sub_1003AC410(a7, v17, v18, v20 != 0, v16);
  uint64_t v23 = v22;
  sub_10001FDF0((uint64_t)(a1 + 21), (uint64_t)v59, &qword_100713C98);
  sub_10001FDF0((uint64_t)v59, (uint64_t)v66, &qword_100713C98);
  if (v67 != 2)
  {
    uint64_t v45 = sub_1003B4B1C();
    uint64_t v47 = v46 & 1;
    uint64_t v48 = *a1;
    uint64_t v49 = *a2;
    swift_bridgeObjectRetain();
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v49;
    if ((v50 & 1) == 0)
    {
      uint64_t v49 = sub_1003F0460(0, *((void *)v49 + 2) + 1, 1, v49);
      *a2 = v49;
    }
    unint64_t v51 = *((void *)v49 + 2);
    unint64_t v52 = *((void *)v49 + 3);
    unint64_t v53 = v51 + 1;
    if (v51 >= v52 >> 1)
    {
      uint64_t v58 = v47;
      unint64_t v54 = v51 + 1;
      int v55 = v49;
      unint64_t v56 = *((void *)v49 + 2);
      uint64_t v57 = sub_1003F0460((char *)(v52 > 1), v51 + 1, 1, v55);
      unint64_t v51 = v56;
      unint64_t v53 = v54;
      uint64_t v47 = v58;
      uint64_t v49 = v57;
      *a2 = v57;
    }
    *((void *)v49 + 2) = v53;
    uint64_t v15 = &v49[48 * v51];
    *((void *)v15 + 4) = v48;
    *((void *)v15 + 5) = v45;
    *((void *)v15 + 6) = v47;
    *((void *)v15 + 7) = v21;
    *((void *)v15 + 8) = v23;
    char v35 = 2;
    goto LABEL_29;
  }
  uint64_t v24 = *a1;
  char v25 = *a2;
  swift_bridgeObjectRetain();
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v25;
  if ((v26 & 1) == 0)
  {
    char v25 = sub_1003F0460(0, *((void *)v25 + 2) + 1, 1, v25);
    *a2 = v25;
  }
  unint64_t v28 = *((void *)v25 + 2);
  unint64_t v27 = *((void *)v25 + 3);
  if (v28 >= v27 >> 1)
  {
    char v25 = sub_1003F0460((char *)(v27 > 1), v28 + 1, 1, v25);
    *a2 = v25;
  }
  *((void *)v25 + 2) = v28 + 1;
  uint64_t v29 = &v25[48 * v28];
  *((void *)v29 + 4) = v24;
  *((void *)v29 + 5) = v21;
  *((void *)v29 + 7) = 0;
  *((void *)v29 + 8) = 0;
  *((void *)v29 + 6) = v23;
  v29[72] = 0;
  return 2;
}

uint64_t _s9IMAP2MIME14SparsePartInfoV6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(long long *a1, long long *a2)
{
  sub_1003DC26C(a2, (uint64_t)v14);
  sub_1003DC26C(a1, (uint64_t)&v18);
  unint64_t v4 = v18;
  switch(v22)
  {
    case 1:
      char v6 = v19;
      sub_1003DC26C(a2, (uint64_t)&v15);
      if (v17 != 1) {
        return 0;
      }
      __int8 v7 = v15.i8[8];
      if (v6)
      {
        if (v15.i8[8]) {
          return 1;
        }
      }
      else
      {
        if (v4 != v15.i64[0]) {
          __int8 v7 = 1;
        }
        if ((v7 & 1) == 0) {
          return 1;
        }
      }
      return 0;
    case 2:
      char v8 = v19;
      unint64_t v9 = v20;
      unint64_t v10 = v21;
      sub_1003DC26C(a2, (uint64_t)&v15);
      if (v17 != 2) {
        return 0;
      }
      __int8 v11 = v15.i8[8];
      if (v8)
      {
        if (!v15.i8[8]) {
          return 0;
        }
      }
      else
      {
        if (v4 != v15.i64[0]) {
          __int8 v11 = 1;
        }
        if (v11) {
          return 0;
        }
      }
      if (!v10)
      {
        if (!v16.i64[1]) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      if (!v16.i64[1]) {
        return 0;
      }
      if (__PAIR128__(v10, v9) == *(_OWORD *)&v16) {
        return 1;
      }
      goto LABEL_33;
    case 3:
      if (v20 | v21 | v18 | v19)
      {
        sub_1003DC26C(a2, (uint64_t)&v15);
        if (v17 == 3 && v15.i64[0] == 1 && !(v16.i64[0] | v16.i64[1] | v15.i64[1])) {
          return 1;
        }
      }
      else
      {
        sub_1003DC26C(a2, (uint64_t)&v15);
        if (v17 == 3)
        {
          int8x16_t v12 = vorrq_s8(v15, v16);
          if (!*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL))) {
            return 1;
          }
        }
      }
      return 0;
    default:
      unint64_t v5 = v19;
      sub_1003DC26C(a2, (uint64_t)&v15);
      if (v17) {
        return 0;
      }
      if (v5)
      {
        if (v15.i64[1])
        {
          if (__PAIR128__(v5, v4) == *(_OWORD *)&v15) {
            return 1;
          }
LABEL_33:
          if (sub_1005E3290()) {
            return 1;
          }
        }
        return 0;
      }
      if (v15.i64[1])
      {
LABEL_38:
        sub_1003E4F30((uint64_t)a1);
        return 0;
      }
LABEL_40:
      swift_bridgeObjectRetain();
      return 1;
  }
}

uint64_t sub_1003E4ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v13 = _swiftEmptyArrayStorage;
  char v8 = &v13;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t result = sub_1003B430C(3, 0, 0, (uint64_t (*)(_OWORD *))sub_10039DFE8, (uint64_t)v7, (uint64_t)UInt32.init(_:), 0, a1, a2, a3, a4);
  *a5 = v13;
  return result;
}

uint64_t destroy for SparsePartInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  return sub_10039E00C(v2, v3, v4, v5, v6);
}

uint64_t initializeWithCopy for SparsePartInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_10039E02C(v3, v4, v5, v6, v7);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for SparsePartInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  sub_10039E02C(v4, v5, v6, v7, (char)v2);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v12 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  sub_10039E00C(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for SparsePartInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SparsePartInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  char v9 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_10039E00C(v5, v6, v7, v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for SparsePartInfo()
{
  return &type metadata for SparsePartInfo;
}

uint64_t destroy for SparsePartInfo.Status(uint64_t a1)
{
  return sub_10039E00C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10039E02C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_10039E02C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_10039E00C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SparsePartInfo.Status(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_10039E00C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SparsePartInfo.Status(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SparsePartInfo.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003E4EEC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1003E4F04(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SparsePartInfo.Status()
{
  return &type metadata for SparsePartInfo.Status;
}

uint64_t sub_1003E4F30(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003E4F68(uint64_t result)
{
  uint64_t v2 = v1[2];
  if ((v2 & 0x8000000000000000) == 0)
  {
    unsigned int v3 = (uint64_t *)result;
    LODWORD(v4) = 0;
    int v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *v1;
    while (1)
    {
      while (1)
      {
        int v24 = v4;
        unsigned __int8 v25 = v5;
        if ((_BYTE)v5) {
          break;
        }
        if (v6 == v2) {
          goto LABEL_40;
        }
        int v10 = *(char *)(v7 + v6);
        int v11 = *(unsigned __int8 *)(v7 + v6++);
        if (v10 < 0)
        {
          LODWORD(v4) = v4 & 0xFFFFFF00 | v11;
          int v5 = 8;
          goto LABEL_8;
        }
LABEL_3:
        LODWORD(v4) = v24;
        int v5 = v25;
        uint64_t v8 = v3[1];
        uint64_t v22 = *v3;
        uint64_t v23 = v8;
        __n128 result = sub_1005E1D60();
        uint64_t v9 = v23;
        *unsigned int v3 = v22;
        v3[1] = v9;
      }
      if ((v4 & 0x80) == 0)
      {
        sub_1003E54D0();
        __n128 result = (uint64_t)UnsafeExtractedAttachment.part.modify();
        char v20 = *(unsigned char *)(v19 + 4);
        if (!v20) {
          goto LABEL_42;
        }
        *(_DWORD *)v19 >>= 8;
        *(unsigned char *)(v19 + 4) = v20 - 8;
        ((void (*)(uint64_t *, void))result)(&v22, 0);
        goto LABEL_3;
      }
LABEL_8:
      uint64_t v12 = v6;
      if (v6 == v2)
      {
        int v13 = v5;
        uint64_t v6 = v2;
        goto LABEL_24;
      }
      ++v6;
      LODWORD(v4) = (*(unsigned __int8 *)(v7 + v12) << v5) | ((-255 << v5) - 1) & v4;
      int v13 = v5 + 8;
      if ((v5 + 8) <= 0x1Fu)
      {
        if (v6 == v2)
        {
          uint64_t v6 = v2;
          if ((_BYTE)v5 == 0xF8)
          {
LABEL_40:
            *(void *)(v21 + 16) = 0;
            return result;
          }
        }
        else
        {
          uint64_t v14 = v12 + 2;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (*(unsigned __int8 *)(v7 + v6) << v13);
          int v13 = v5 + 16;
          if ((v5 + 8) > 0x17u) {
            goto LABEL_23;
          }
          uint64_t v6 = v2;
          if (v14 == v2) {
            goto LABEL_24;
          }
          int v15 = *(unsigned __int8 *)(v7 + v14);
          uint64_t v14 = v12 + 3;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (v15 << v13);
          int v13 = v5 + 24;
          if ((v5 + 16) > 0x17u) {
            goto LABEL_23;
          }
          uint64_t v6 = v2;
          if (v14 == v2) {
            goto LABEL_24;
          }
          int v16 = *(unsigned __int8 *)(v7 + v14);
          uint64_t v14 = v12 + 4;
          LODWORD(v4) = ((-255 << v13) - 1) & v4 | (v16 << v13);
          int v13 = v5 + 32;
          if (v5 < 0xE8u)
          {
LABEL_23:
            uint64_t v6 = v14;
          }
          else
          {
            uint64_t v6 = v2;
            if (v14 != v2)
            {
              uint64_t v17 = v12 + 5;
              LODWORD(v4) = ((-255 << v13) - 1) & v4 | (*(unsigned __int8 *)(v7 + v14) << v13);
              int v13 = v5 + 40;
              if ((v5 + 32) >= 0x18u) {
                uint64_t v6 = v17;
              }
              else {
                uint64_t v6 = v2;
              }
            }
          }
        }
      }
LABEL_24:
      if ((v4 & 0xC0E0) == 0x80C0)
      {
        if ((v4 & 0x1E) != 0)
        {
          char v18 = 16;
LABEL_27:
          int v24 = (unint64_t)v4 >> v18;
          unsigned __int8 v25 = v13 - v18;
          goto LABEL_3;
        }
      }
      else if ((v4 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v4 & 0x200F) != 0 && (v4 & 0x200F) != 0x200D)
        {
          char v18 = 24;
          goto LABEL_27;
        }
      }
      else if ((v4 & 0xC0C0C0F8) == 0x808080F0 && (v4 & 0x3007) != 0 && __rev16(v4 & 0x3007) <= 0x400)
      {
        char v18 = 32;
        goto LABEL_27;
      }
      __n128 result = sub_1005E3510();
      unint64_t v4 = (unint64_t)v4 >> ((8 * result) & 0x38);
      int v5 = v13 - 8 * result;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1003E5354(uint64_t a1, int64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6)
{
  if (a1 < 0) {
    __break(1u);
  }
  if (a1 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    int v15 = (char *)&v15 - v13;
    uint64_t v16 = a1;
    uint64_t v17 = 0;
    sub_1003D8D10((int64_t)&v15, a2, a3, a4, a5, a6);
    if (v6) {
      swift_willThrow();
    }
  }
  else
  {
    int v15 = (char *)swift_slowAlloc();
    uint64_t v16 = a1;
    uint64_t v17 = 0;
    sub_1003D8D10((int64_t)&v15, a2, a3, a4, a5, a6);
    swift_slowDealloc();
  }
  return swift_release();
}

unint64_t sub_1003E54D0()
{
  unint64_t result = qword_100714290;
  if (!qword_100714290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714290);
  }
  return result;
}

uint64_t sub_1003E5524(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 4;
  swift_beginAccess();
  uint64_t v5 = a1[4];
  if (!v5)
  {
    swift_retain();
    uint64_t result = sub_1003E690C((uint64_t)"euc-cn", (uint64_t)a1);
    if (!result)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v5 = result;
    *unint64_t v4 = result;
  }
  swift_endAccess();
  if (v5 == a2) {
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t v7 = a1[5];
  if (!v7)
  {
    swift_retain();
    uint64_t result = sub_1003E690C((uint64_t)"gb-2312-80", (uint64_t)a1);
    if (!result)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v7 = result;
    a1[5] = result;
  }
  swift_endAccess();
  if (v7 == a2) {
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t v8 = a1[6];
  if (!v8)
  {
    swift_retain();
    uint64_t result = sub_1003E690C((uint64_t)"gbk", (uint64_t)a1);
    if (!result)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v8 = result;
    a1[6] = result;
  }
  swift_endAccess();
  if (v8 == a2) {
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t v9 = a1[8];
  if (v9)
  {
LABEL_16:
    swift_endAccess();
    if (v9 != a2) {
      return a2;
    }
    int v10 = a1 + 9;
    swift_beginAccess();
    a2 = a1[9];
    if (a2) {
      goto LABEL_23;
    }
    swift_retain();
    uint64_t result = sub_1003E690C((uint64_t)"big5-hkscs", (uint64_t)a1);
    if (result)
    {
LABEL_22:
      a2 = result;
      *int v10 = result;
      goto LABEL_23;
    }
    __break(1u);
LABEL_20:
    int v10 = a1 + 7;
    swift_beginAccess();
    a2 = a1[7];
    if (!a2)
    {
      swift_retain();
      uint64_t result = sub_1003E690C((uint64_t)"gb-18030", (uint64_t)a1);
      if (result) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
LABEL_23:
    swift_endAccess();
    return a2;
  }
  swift_retain();
  uint64_t result = sub_1003E690C((uint64_t)"big5", (uint64_t)a1);
  if (result)
  {
    uint64_t v9 = result;
    a1[8] = result;
    goto LABEL_16;
  }
LABEL_29:
  __break(1u);
  return result;
}

char *sub_1003E574C@<X0>(char *result@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, unsigned __int8 a6@<W5>, unsigned __int8 *a7@<X6>, unsigned char *a8@<X8>)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a5 == 74) {
    int v9 = 23;
  }
  else {
    int v9 = byte_1006222D5[a5];
  }
  uint64_t result = (char *)CompactEncDet_detectEncoding(a2, a3, result, a4 & 1, v9, a6, a7);
  *a8 = (_BYTE)result;
  return result;
}

uint64_t sub_1003E57D8(char *a1, char *a2)
{
  return (byte_1006222D5[*a1] == byte_1006222D5[*a2]) & (a1[1] ^ a2[1] ^ 1u);
}

uint64_t sub_1003E5810(__int16 a1)
{
  uint64_t v2 = byte_1006222D5[(char)a1];
  uint64_t result = CompactEncDet_EncodingName(v2);
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  v6._uint64_t countAndFlagsBits = sub_1005E1E50();
  sub_1005E1E30(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 10016;
  v7._object = (void *)0xE200000000000000;
  sub_1005E1E30(v7);
  uint64_t result = CompactEncDet_MimeEncodingName(v2);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v8._uint64_t countAndFlagsBits = sub_1005E1E50();
  sub_1005E1E30(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8231;
  v9._object = (void *)0xE200000000000000;
  sub_1005E1E30(v9);
  if ((a1 & 0x100) != 0) {
    v4._uint64_t countAndFlagsBits = 0x656C6261696C6572;
  }
  else {
    v4._uint64_t countAndFlagsBits = 0x6261696C65726E75;
  }
  if ((a1 & 0x100) != 0) {
    uint64_t v5 = (void *)0xE800000000000000;
  }
  else {
    uint64_t v5 = (void *)0xEA0000000000656CLL;
  }
  v4._object = v5;
  sub_1005E1E30(v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1003E591C()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_1003E5810(v1 | *v0);
}

uint64_t sub_1003E5938()
{
  if (*v0) {
    return 0x656C6261696C6572;
  }
  else {
    return 0x6261696C65726E75;
  }
}

BOOL sub_1003E5978(char *a1, char *a2)
{
  return byte_1006222D5[*a1] == byte_1006222D5[*a2];
}

Swift::Int sub_1003E599C()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  sub_1005E3420(byte_1006222D5[v1]);
  return sub_1005E3470();
}

void sub_1003E59EC()
{
  sub_1005E3420(byte_1006222D5[*v0]);
}

Swift::Int sub_1003E5A24()
{
  uint64_t v1 = *v0;
  sub_1005E33F0();
  sub_1005E3420(byte_1006222D5[v1]);
  return sub_1005E3470();
}

uint64_t sub_1003E5A70@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003E5BBC(*a1);
  *a2 = result;
  return result;
}

void sub_1003E5A9C(unsigned char *a1@<X8>)
{
  *a1 = byte_1006222D5[*v1];
}

uint64_t sub_1003E5AB4()
{
  uint64_t result = CompactEncDet_EncodingName(byte_1006222D5[*v0]);
  if (result)
  {
    return sub_1005E1E50();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003E5AF4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003E663C(*a1);
  *a2 = result;
  return result;
}

void sub_1003E5B20(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1003E5B2C()
{
  uint64_t result = CompactEncDet_LanguageName(*v0);
  if (result)
  {
    return sub_1005E1E50();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1003E5B60(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    uint64_t result = a3(&var2);
    if (!v3) {
      return (void *)var2;
    }
  }
  else
  {
    uint64_t result = ((void *(*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      return (void *)BYTE1(var2);
    }
  }
  return result;
}

uint64_t sub_1003E5BBC(unsigned __int8 a1)
{
  if (a1 > 0x4Au) {
    return 74;
  }
  else {
    return byte_10062228A[(char)a1];
  }
}

uint64_t sub_1003E5BE4(int8x8_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, unsigned __int8 a7)
{
  unsigned __int8 v27 = 0;
  if (a1) {
    uint64_t v7 = a2 - (void)a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a5)
  {
    __chkstk_darwin();
    if ((v10 & 0x1000000000000000) != 0 || !(a5 & 0x2000000000000000 | a4 & 0x1000000000000000))
    {
      type metadata accessor for CompactEncDet_Encoding(0);
      sub_1005E2C50();
      unsigned __int8 v18 = v26;
      goto LABEL_23;
    }
    int v11 = (int8x8_t *)__chkstk_darwin();
    if ((a5 & 0x2000000000000000) == 0)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
LABEL_10:
        unsigned __int8 v18 = sub_1003E5B60(v16, v17, (void *(*)(uint64_t *__return_ptr))sub_1003E5FB4);
        goto LABEL_23;
      }
LABEL_33:
      uint64_t v16 = sub_1005E2D30();
      goto LABEL_10;
    }
    v25[0] = a4;
    v25[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    if (v12 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v12 <= 0x7FFFFFFF)
    {
      if (v14 == 74) {
        int v20 = 23;
      }
      else {
        int v20 = byte_1006222D5[v14];
      }
      unsigned __int8 v18 = CompactEncDet_detectEncoding(v11, v12, (char *)v25, v13 & 1, v20, v15, &v27);
      goto LABEL_23;
    }
    __break(1u);
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a6 == 74) {
    int v19 = 23;
  }
  else {
    int v19 = byte_1006222D5[a6];
  }
  unsigned __int8 v18 = CompactEncDet_detectEncoding(a1, v7, 0, a3 & 1, v19, a7, &v27);
LABEL_23:
  unsigned __int8 v21 = sub_1003E5BBC(v18);
  if (v27) {
    int v22 = 256;
  }
  else {
    int v22 = 0;
  }
  unsigned int v23 = v22 & 0xFFFFFF00 | v21;
  if (v21 == 74) {
    return 512;
  }
  else {
    return v23;
  }
}

uint64_t sub_1003E5E60(unsigned char *a1, unsigned __int8 *a2, char a3, int8x8_t *a4, uint64_t a5, char a6, uint64_t *a7)
{
  if (a3)
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    char v14 = 74;
  }
  else
  {
    if (a1 && a2 - a1 > 119 || (unsigned __int8 v13 = sub_1003D3FDC(a1, (uint64_t)a2), v14 = sub_1003E5BBC(v13), v14 == 74)) {
      char v14 = 74;
    }
    uint64_t v15 = sub_1003A9E84(a1, a2, 0);
    uint64_t v17 = v16;
  }
  __int16 v18 = sub_1003E5BE4(a4, a5, a6 & 1, v15, v17, v14, 0x1Au);
  swift_bridgeObjectRelease();
  if ((v18 & 0xFF00) == 0x200) {
    return 0;
  }
  uint64_t result = CompactEncDet_MimeEncodingName(byte_1006222D5[(char)v18]);
  if (result)
  {
    uint64_t v20 = result;
    swift_retain();
    uint64_t result = sub_1003E690C(v20, (uint64_t)a7);
    if (result) {
      return sub_1003E5524(a7, result);
    }
  }
  return result;
}

char *sub_1003E5F88@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1003E574C(a1, *(int8x8_t **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(unsigned char *)(v2 + 33), *(unsigned char *)(v2 + 34), *(unsigned __int8 **)(v2 + 40), a2);
}

void *sub_1003E5FB4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for CharacterSetDetection.DetectedEncoding(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for CharacterSetDetection.DetectedEncoding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003E60D0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.DetectedEncoding()
{
  return &type metadata for CharacterSetDetection.DetectedEncoding;
}

unsigned char *storeEnumTagSinglePayload for CharacterSetDetection.DetectedEncoding.Reliability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003E61D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.DetectedEncoding.Reliability()
{
  return &type metadata for CharacterSetDetection.DetectedEncoding.Reliability;
}

uint64_t getEnumTagSinglePayload for CharacterSetDetection.Encoding(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xB7) {
    goto LABEL_17;
  }
  if (a2 + 73 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 73) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 73;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 73;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x4A;
  int v8 = v6 - 74;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CharacterSetDetection.Encoding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 73 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 73) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xB7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xB6)
  {
    unsigned int v6 = ((a2 - 183) >> 8) + 1;
    *uint64_t result = a2 + 73;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003E6368);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 73;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.Encoding()
{
  return &type metadata for CharacterSetDetection.Encoding;
}

uint64_t getEnumTagSinglePayload for CharacterSetDetection.Language(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x60) {
    goto LABEL_17;
  }
  if (a2 + 160 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 160) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 160;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 160;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 160;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA1;
  int v8 = v6 - 161;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CharacterSetDetection.Language(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 160 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 160) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x60) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x5F)
  {
    unsigned int v6 = ((a2 - 96) >> 8) + 1;
    *uint64_t result = a2 - 96;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003E64FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 - 96;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterSetDetection.Language()
{
  return &type metadata for CharacterSetDetection.Language;
}

unint64_t sub_1003E6538()
{
  unint64_t result = qword_100714298;
  if (!qword_100714298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714298);
  }
  return result;
}

unint64_t sub_1003E6590()
{
  unint64_t result = qword_1007142A0;
  if (!qword_1007142A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142A0);
  }
  return result;
}

unint64_t sub_1003E65E8()
{
  unint64_t result = qword_1007142A8;
  if (!qword_1007142A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142A8);
  }
  return result;
}

uint64_t sub_1003E663C(uint64_t result)
{
  if ((char)result >= -95) {
    unsigned int v1 = -95;
  }
  else {
    unsigned int v1 = (char)result;
  }
  if ((result & 0x80u) == 0) {
    return result;
  }
  else {
    return v1;
  }
}

ValueMetadata *type metadata accessor for CharacterSetDetection()
{
  return &type metadata for CharacterSetDetection;
}

uint64_t getEnumTagSinglePayload for ICUCanonicalConverterName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUCanonicalConverterName(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICUCanonicalConverterName()
{
  return &type metadata for ICUCanonicalConverterName;
}

uint64_t sub_1003E66F8()
{
  int v0 = ucnv_countAvailable();
  uint64_t result = (uint64_t)sub_1003EF7B8(0, v0 & ~(v0 >> 31), 0, (char *)_swiftEmptyArrayStorage);
  if ((v0 & 0x80000000) == 0)
  {
    uint64_t v2 = result;
    if (!v0) {
      return v2;
    }
    int v3 = 0;
    while (v0 != v3)
    {
      uint64_t result = ucnv_getAvailableName();
      if (result)
      {
        uint64_t v4 = result;
        unint64_t v6 = *(void *)(v2 + 16);
        unint64_t v5 = *(void *)(v2 + 24);
        if (v6 >= v5 >> 1)
        {
          uint64_t result = (uint64_t)sub_1003EF7B8((char *)(v5 > 1), v6 + 1, 1, (char *)v2);
          uint64_t v2 = result;
        }
        *(void *)(v2 + 16) = v6 + 1;
        *(void *)(v2 + 8 * v6 + 32) = v4;
      }
      if (v0 == ++v3) {
        return v2;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1003E67C8()
{
  unint64_t result = qword_1007142B0;
  if (!qword_1007142B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142B0);
  }
  return result;
}

uint64_t sub_1003E681C()
{
  sub_1005E1C90();
  __chkstk_darwin();
  sub_1005E1C80();
  uint64_t result = sub_1005E1C50();
  if (!v1) {
    return 0;
  }
  return result;
}

uint64_t sub_1003E68A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E690C(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalName = ucnv_getCanonicalName();
  if (CanonicalName)
  {
    uint64_t v4 = CanonicalName;
    if (*(void *)(a2 + 16))
    {
      uint64_t v5 = *(void *)(a2 + 16);
    }
    else
    {
      uint64_t v5 = sub_1003E66F8();
      *(void *)(a2 + 16) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    char v6 = sub_1003E68A8(v4, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_36;
    }
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(v7 + 16);
      if (v9)
      {
LABEL_8:
        uint64_t v10 = *(void *)(v8 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!ucnv_compareNames())
        {
          uint64_t v4 = v10;
LABEL_35:
          swift_bridgeObjectRelease_n();
LABEL_36:
          swift_release();
          return v4;
        }
        if (v9 != 1)
        {
          uint64_t v11 = 5;
          while (1)
          {
            uint64_t v12 = v11 - 3;
            if (__OFADD__(v11 - 4, 1)) {
              __break(1u);
            }
            uint64_t v13 = *(void *)(v8 + 8 * v11);
            if (!ucnv_compareNames()) {
              break;
            }
            ++v11;
            if (v12 == v9) {
              goto LABEL_14;
            }
          }
          uint64_t v4 = v13;
          goto LABEL_35;
        }
LABEL_14:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = sub_1003E66F8();
      *(void *)(a2 + 16) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain();
LABEL_17:
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v14)
  {
    uint64_t v15 = sub_1003E66F8();
    *(void *)(a2 + 16) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16) {
      goto LABEL_20;
    }
LABEL_31:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16) {
    goto LABEL_31;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)(v15 + 32 + 8 * v17);
    unsigned int v18 = ucnv_countAliases();
    if (!v18) {
      goto LABEL_22;
    }
    unsigned int v19 = v18;
    uint64_t v20 = v18 + 1;
    sub_10000566C(&qword_1007142B8);
    unsigned __int8 v21 = (void *)sub_1005E2150();
    void v21[2] = v20;
    v21[4] = 0;
    bzero(v21 + 5, 8 * v19);
    ucnv_getAliases();
    uint64_t v22 = v21[2];
    if (v22) {
      break;
    }
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    if (++v17 == v16)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  uint64_t v23 = 0;
  while (!v21[v23 + 4] || ucnv_compareNames())
  {
    if (v22 == ++v23) {
      goto LABEL_21;
    }
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_1003E6C54(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v16[1] = 0;
  if (!unorm2_getNFCInstance())
  {
    sub_1003BE520();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 0;
    *(unsigned char *)(v13 + 4) = 0;
    swift_willThrow();
    return a3;
  }
  unint64_t v9 = sub_1003E7300(a1, a2, a3, a4);
  if ((uint64_t)(v9 + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((2 * v9) & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if ((uint64_t)(2 * v9 + 0x4000000000000000) < 0) {
    goto LABEL_16;
  }
  uint64_t v10 = 4 * v9;
  swift_bridgeObjectRetain();
  if (v10 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v12 = sub_1003E84F8((_DWORD *)((char *)v16 - v11), a1, a2, a3, a4);
    if (v4) {
      swift_willThrow();
    }
    else {
      a3 = v12;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = (_WORD *)swift_slowAlloc();
    a3 = sub_1003E84F8(v15, a1, a2, a3, a4);
    swift_slowDealloc();
    swift_bridgeObjectRelease();
  }
  return a3;
}

uint64_t sub_1003E6E68@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1003E70AC((uint64_t)a1, a2);
  if (v3) {
    return result;
  }
  uint64_t v8 = result;
  if (result >= a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (2 * a2 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  if (2 * a2 + 0x4000000000000000 < 0) {
    goto LABEL_17;
  }
  if (4 * a2 <= 1024 || swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    uint64_t v20 = sub_1003E7184(a1, a2, (char *)&v19 - v9, 2 * a2, v8);
    uint64_t v21 = v10;
    uint64_t v22 = v11;
    uint64_t v23 = v12;
    sub_10000566C(&qword_1007142C0);
    sub_1003E7604();
    sub_1003E7660();
    uint64_t result = sub_1005E1CF0();
    if (v13)
    {
      *a3 = result;
      a3[1] = v13;
      return result;
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = (void *)swift_slowAlloc();
  uint64_t v20 = sub_1003E7184(a1, a2, v14, 2 * a2, v8);
  uint64_t v21 = v15;
  uint64_t v22 = v16;
  uint64_t v23 = v17;
  sub_10000566C(&qword_1007142C0);
  sub_1003E7604();
  sub_1003E7660();
  uint64_t result = sub_1005E1CF0();
  if (!v18)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *a3 = result;
  a3[1] = v18;
  return swift_slowDealloc();
}

uint64_t sub_1003E70AC(uint64_t a1, uint64_t a2)
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (a2 > 0x7FFFFFFF) {
    goto LABEL_5;
  }
  return (int)unorm2_spanQuickCheckYes();
}

uint64_t sub_1003E7184(void *__src, uint64_t a2, void *__dst, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a5 && a4)
  {
    if (a5 >= a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a5;
    }
    memcpy(__dst, __src, 2 * v8);
  }
  if (a2 < a5) {
    goto LABEL_16;
  }
  if ((unint64_t)a5 >> 31)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 - a5 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if ((unorm2_normalizeSecondAndAppend() & 0x80000000) != 0) {
    goto LABEL_21;
  }
  return 0;
}

unint64_t sub_1003E7300(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_10037BDAC(a1, a3, a4);
  unint64_t result = sub_10037BDAC(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_1005E1D20();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_1005E2D30();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_1005E1D30();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_1005E2D30();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_1003E7514(uint64_t a1)
{
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_1005E1F50();
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  unint64_t v9 = sub_1003E6C54(v2, v4, v6, v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRelease();
    return v9;
  }
  return a1;
}

unint64_t sub_1003E7604()
{
  unint64_t result = qword_1007142C8;
  if (!qword_1007142C8)
  {
    sub_10000744C(&qword_1007142C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142C8);
  }
  return result;
}

unint64_t sub_1003E7660()
{
  unint64_t result = qword_1007142D0;
  if (!qword_1007142D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142D0);
  }
  return result;
}

uint64_t sub_1003E76B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *a1;
  ucnv_setFallback();
  if (a2) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = sub_1003E7738(a2, v10, 1, v9, (uint64_t)a1, 1);
  if (!v4)
  {
    uint64_t v12 = a1[3];
    *a4 = a1[2];
    a4[1] = v12;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1003E7738(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 < 0) {
    goto LABEL_31;
  }
  uint64_t v12 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v7;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  while (1)
  {
    if (v25) {
      uint64_t v15 = v26 - v25;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v12 < 0 || v15 < v12)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    if (v7 < 0 || v15 < v7) {
      goto LABEL_26;
    }
    int MinCharSize = ucnv_getMinCharSize();
    if (!MinCharSize) {
      goto LABEL_27;
    }
    uint64_t v17 = (v7 - v12) / MinCharSize;
    BOOL v18 = __OFADD__(v17, 3);
    uint64_t v19 = v17 + 3;
    if (v18) {
      goto LABEL_28;
    }
    if (v19 + 0x4000000000000000 < 0) {
      goto LABEL_29;
    }
    uint64_t v20 = 2 * v19;
    if (2 * v19 < 0) {
      goto LABEL_30;
    }
    if (v20 < 1025 || (swift_stdlib_isStackAllocationSafe() & 1) != 0) {
      break;
    }
    uint64_t v21 = swift_slowAlloc();
    sub_1003E7928(&v23, v21, v21 + v20, a3 & 1, a4, a5, a6 & 1);
    uint64_t result = swift_slowDealloc();
    if (v6) {
      return result;
    }
LABEL_7:
    uint64_t v12 = v23;
    uint64_t v7 = v24;
    if (v23 == v24) {
      return result;
    }
  }
  __chkstk_darwin();
  uint64_t result = sub_1003E7928(&v23, (uint64_t)&v22 - v13, (uint64_t)&v22 + v20 - v13, a3 & 1, a4, a5, a6 & 1);
  if (!v6) {
    goto LABEL_7;
  }
  return swift_willThrow();
}

uint64_t sub_1003E7928(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  if (v13) {
    uint64_t v15 = v13 + *a1;
  }
  else {
    uint64_t v15 = 0;
  }
  ucnv_toUnicode();
  if (v15)
  {
    uint64_t v16 = v14 - v13;
    if (!v13) {
      uint64_t v16 = 0;
    }
    if (v12 < 0 || v16 < v12)
    {
      __break(1u);
    }
    else if (v11 >= v12)
    {
      *a1 = v12;
      a1[1] = v11;
      a1[2] = v13;
      a1[3] = v14;
      goto LABEL_11;
    }
    __break(1u);
    __break(1u);
    goto LABEL_21;
  }
LABEL_11:
  if (a2)
  {
    if (!a2)
    {
      v17._object = 0;
LABEL_16:
      v17._uint64_t countAndFlagsBits = a2;
      uint64_t result = sub_1003E7B24(v17, a6, a7 & 1);
      if (v7) {
        return result;
      }
      return 1;
    }
    if (a2 - a2 >= -1)
    {
      v17._object = (void *)((a2 - a2) / 2);
      goto LABEL_16;
    }
LABEL_21:
    __break(1u);
  }
  return 1;
}

uint64_t sub_1003E7B24(Swift::String a1, uint64_t a2, char a3)
{
  uint64_t countAndFlagsBits = (unsigned __int16 *)a1._countAndFlagsBits;
  if (*(unsigned char *)(a2 + 13) != 1 && (a3 & 1) != 0 && (uint64_t)a1._object >= 201)
  {
    Swift::String v22 = a1;
    sub_10000566C(&qword_1007142F0);
    sub_100007494(&qword_1007142F8, &qword_1007142F0);
    sub_1003E7660();
    a1._uint64_t countAndFlagsBits = sub_1005E1CF0();
    if (!a1._object) {
      goto LABEL_43;
    }
    sub_1005E1E30(a1);
    a1._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
    return a1._countAndFlagsBits;
  }
  *(unsigned char *)(a2 + 13) = 1;
  if (a1._countAndFlagsBits) {
    uint64_t v5 = a1._countAndFlagsBits + 2 * (uint64_t)a1._object;
  }
  else {
    uint64_t v5 = 0;
  }
  while (1)
  {
    LODWORD(v10) = *(_DWORD *)(a2 + 8);
    unsigned int v11 = *(unsigned __int8 *)(a2 + 12);
    int v23 = v10;
    char v24 = v11;
    if (v11) {
      break;
    }
    if (!countAndFlagsBits || countAndFlagsBits == (unsigned __int16 *)v5)
    {
      unsigned int v13 = v10;
LABEL_41:
      *(_DWORD *)(a2 + 8) = v13;
      *(unsigned char *)(a2 + 12) = 0;
      return a1._countAndFlagsBits;
    }
    a1._uint64_t countAndFlagsBits = *countAndFlagsBits;
    uint64_t v12 = countAndFlagsBits + 1;
    if ((*countAndFlagsBits & 0xF800) != 0xD800)
    {
      char v6 = 0;
      ++countAndFlagsBits;
      goto LABEL_10;
    }
    LODWORD(v10) = v10 & 0xFFFF0000 | LODWORD(a1._countAndFlagsBits);
    unsigned int v11 = 16;
    ++countAndFlagsBits;
    if (v12 == (unsigned __int16 *)v5)
    {
LABEL_28:
      unsigned int v13 = v10;
      goto LABEL_29;
    }
LABEL_16:
    uint64_t countAndFlagsBits = v12 + 1;
    unsigned int v13 = ((-65535 << v11) - 1) & v10 | (*v12 << v11);
    char v14 = v11 + 16;
    if ((v11 + 16) < 0x20u)
    {
      if (countAndFlagsBits == (unsigned __int16 *)v5) {
        goto LABEL_21;
      }
      uint64_t countAndFlagsBits = v12 + 2;
      unsigned int v13 = ((-65535 << v14) - 1) & v13 | (v12[1] << v14);
      char v14 = v11 + 32;
      if (v11 >= 0xE0)
      {
        if (countAndFlagsBits == (unsigned __int16 *)v5
          || (unsigned int v13 = ((-65535 << v11) - 1) & v13 | (v12[2] << v11), v14 = v11 + 48, (v11 + 48) < 0x20u))
        {
LABEL_21:
          LOBYTE(v11) = v14;
          uint64_t countAndFlagsBits = (unsigned __int16 *)v5;
          if (!v14) {
            goto LABEL_41;
          }
          goto LABEL_29;
        }
        uint64_t countAndFlagsBits = v12 + 3;
      }
    }
    LOBYTE(v11) = v14;
LABEL_29:
    unsigned int v15 = v13 & 0xFC00FC00;
    if ((v13 & 0xFC00FC00) == 0xDC00D800) {
      char v16 = 32;
    }
    else {
      char v16 = 16;
    }
    char v6 = v11 - v16;
    BOOL v17 = v15 == -603924480;
    if (v15 == -603924480) {
      char v18 = 32;
    }
    else {
      char v18 = 16;
    }
    unint64_t v10 = (unint64_t)v13 >> v18;
    if (!v17)
    {
      *(_DWORD *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 12) = v6;
      sub_1003BE520();
      swift_allocError();
      *(_DWORD *)uint64_t v20 = 0;
      *(unsigned char *)(v20 + 4) = 1;
      a1._uint64_t countAndFlagsBits = swift_willThrow();
      return a1._countAndFlagsBits;
    }
LABEL_10:
    *(_DWORD *)(a2 + 8) = v10;
    *(unsigned char *)(a2 + 12) = v6;
    uint64_t v7 = *(void **)(a2 + 24);
    v22._uint64_t countAndFlagsBits = *(void *)(a2 + 16);
    v22._object = v7;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0xE000000000000000;
    sub_1005E1D60();
    uint64_t v9 = v22._countAndFlagsBits;
    object = v22._object;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = object;
    a1._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
  }
  if ((v10 & 0xF800) == 0xD800)
  {
    if (!countAndFlagsBits) {
      goto LABEL_28;
    }
    uint64_t v12 = countAndFlagsBits;
    if (countAndFlagsBits == (unsigned __int16 *)v5) {
      goto LABEL_28;
    }
    goto LABEL_16;
  }
  sub_1003E84A4();
  a1._uint64_t countAndFlagsBits = (uint64_t)UnsafeExtractedAttachment.part.modify();
  char v19 = *((unsigned char *)a1._object + 4);
  if (v19)
  {
    *(_DWORD *)a1._object = *((unsigned __int16 *)a1._object + 1);
    *((unsigned char *)a1._object + 4) = v19 - 16;
    ((void (*)(Swift::String *, void))a1._countAndFlagsBits)(&v22, 0);
    LODWORD(v10) = v23;
    char v6 = v24;
    goto LABEL_10;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return a1._countAndFlagsBits;
}

uint64_t sub_1003E7EA4@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  sub_1005E2070();
  uint64_t result = sub_1005E1D70();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *sub_1003E7F1C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

unint64_t sub_1003E7F70(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      uint64_t result = sub_1000C6E1C(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if (result)
    {
      return result;
    }
    return result & 0xC | sub_100374F04(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

void *sub_1003E8040@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *(*a3)(void *__return_ptr, uint64_t, void *)@<X3>, void *a4@<X8>)
{
  char v18 = a4;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v11 = sub_1001F94DC(0, *a2, v10, v9);
  uint64_t result = (void *)sub_1001F94DC(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  unsigned int v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v14 = a1 + v11;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t result = a3(v17, v14, v13);
  if (!v4)
  {
    uint64_t v15 = v17[1];
    char v16 = v18;
    void *v18 = v17[0];
    v16[1] = v15;
  }
  return result;
}

uint64_t sub_1003E810C(unsigned char *a1, unsigned __int8 *a2, char a3, uint64_t a4, char a5, uint64_t *a6, int8x8_t *a7, uint64_t a8)
{
  if (!a7
    || (uint64_t v11 = a8 - (void)a7, (int8x8_t *)a8 == a7)
    || (uint64_t v13 = sub_1003E5E60(a1, a2, a3 & 1, a7, a8, a5 & 1, a6)) == 0)
  {
    swift_release();
    return 0;
  }
  uint64_t v14 = v13;
  swift_beginAccess();
  uint64_t v15 = a6[3];
  if (v15)
  {
LABEL_8:
    swift_endAccess();
    if (v15 == v14)
    {
      uint64_t v17 = sub_10000566C(&qword_100714100);
      _OWORD v21[3] = v17;
      v21[4] = sub_100007494(&qword_1007142D8, &qword_100714100);
      char v18 = (void *)swift_allocObject();
      v21[0] = v18;
      _OWORD v18[2] = 0;
      v18[3] = v11;
      void v18[4] = a7;
      v18[5] = a8;
      sub_10003BCDC(v21, v17);
      __chkstk_darwin();
      uint64_t v19 = __chkstk_darwin();
      uint64_t v12 = (uint64_t)sub_1003E7F1C(v19, v20, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003B531C);
      _s13IMAP2Behavior4TaskOwxx_0((uint64_t)v21);
      swift_release();
    }
    else
    {
      __chkstk_darwin();
      uint64_t v12 = sub_1003AAF54(v14, (uint64_t)a6, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1003E83B4);
      swift_release();
    }
    return v12;
  }
  swift_retain();
  uint64_t result = sub_1003E690C((uint64_t)"utf-8", (uint64_t)a6);
  if (result)
  {
    uint64_t v15 = result;
    a6[3] = result;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E83B4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1003E76B4(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_1003E83D4()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003E83E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1003E7EA4(a1);
}

unint64_t sub_1003E8450()
{
  unint64_t result = qword_1007142E0;
  if (!qword_1007142E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142E0);
  }
  return result;
}

unint64_t sub_1003E84A4()
{
  unint64_t result = qword_1007142E8;
  if (!qword_1007142E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007142E8);
  }
  return result;
}

uint64_t sub_1003E84F8(_WORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v31 = a1;
  unint64_t v6 = a3 >> 14;
  if (a3 >> 14 != a2 >> 14)
  {
    uint64_t v24 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t v12 = 4 << v11;
    if ((a5 & 0x2000000000000000) != 0) {
      uint64_t v13 = HIBYTE(a5) & 0xF;
    }
    else {
      uint64_t v13 = a4 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v26 = v13;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    unint64_t v15 = a2;
    while (1)
    {
      sub_1003E7F70(v15, a2, a3, a4, a5);
      if ((a5 & 0x1000000000000000) != 0)
      {
        uint64_t result = sub_1005E2C70();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v28 = a4;
          uint64_t v29 = v25;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          sub_1005E2D30();
        }
        uint64_t result = sub_1005E2D40();
      }
      unsigned int v17 = result;
      if (v15 & 0xC) != v12 && (v15) {
        break;
      }
      if ((v15 & 0xC) == v12)
      {
        uint64_t result = sub_1000C6E1C(v15, a4, a5);
        unint64_t v15 = result;
      }
      if (v26 <= v15 >> 16) {
        goto LABEL_44;
      }
      if (v15) {
        goto LABEL_24;
      }
      unint64_t v15 = v15 & 0xC | sub_100374F04(v15, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_25:
        unint64_t v18 = v15 >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v28 = a4;
          uint64_t v29 = v25;
          int v20 = *((unsigned __int8 *)&v28 + v18);
        }
        else
        {
          uint64_t v19 = v24;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v19 = sub_1005E2D30();
          }
          int v20 = *(unsigned __int8 *)(v19 + v18);
        }
        int v21 = (char)v20;
        unsigned int v22 = __clz(v20 ^ 0xFF) - 24;
        if (v21 >= 0) {
          LOBYTE(v22) = 1;
        }
        unint64_t v15 = ((v18 + v22) << 16) | 5;
        goto LABEL_35;
      }
LABEL_34:
      unint64_t v15 = sub_1005E1D20();
LABEL_35:
      if (v17 >= 0x10000)
      {
        unsigned int v17 = ((v17 + 983040) >> 10) & 0x3FF | ((v17 & 0x3FF) << 16) | 0xDC00D800;
        v31[v14 + 1] = HIWORD(v17);
        uint64_t v23 = 2;
      }
      else
      {
        uint64_t v23 = 1;
      }
      uint64_t v7 = v14 + v23;
      v31[v14] = v17;
      v14 += v23;
      if (v6 == v15 >> 14)
      {
        uint64_t result = swift_bridgeObjectRelease();
        if ((v7 & 0x8000000000000000) == 0) {
          goto LABEL_41;
        }
LABEL_45:
        __break(1u);
        return result;
      }
    }
    if (v26 <= v15 >> 16)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_24:
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_34;
  }
  uint64_t v7 = 0;
LABEL_41:
  uint64_t result = sub_1003E6E68(v31, v7, &v30);
  if (!v5) {
    return v30;
  }
  return result;
}

uint64_t sub_1003E87A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_10039DF8C(a1, (uint64_t)v21);
  sub_10039DF8C((uint64_t)v21, (uint64_t)v22);
  if ((v23 & 0xF0) != 0x50) {
    goto LABEL_8;
  }
  v23 &= 0xFu;
  sub_1003E88FC((uint64_t)v22, (uint64_t)v24);
  sub_1003E88FC((uint64_t)v24, (uint64_t)v25);
  if (v26) {
    goto LABEL_8;
  }
  if (sub_1003BB304(v25[0], v25[1]) == 1819112552 && v10 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v11 = 1;
    goto LABEL_9;
  }
  char v12 = sub_1005E3290();
  swift_bridgeObjectRelease();
  if (v12) {
    char v11 = 1;
  }
  else {
LABEL_8:
  }
    char v11 = 0;
LABEL_9:
  uint64_t v13 = (unsigned char *)sub_1003B1B84();
  unint64_t v15 = v14;
  char v17 = v16;
  sub_1003B0F88(a1);
  if (a4) {
    uint64_t v18 = a4 + a3;
  }
  else {
    uint64_t v18 = 0;
  }
  if (a4) {
    uint64_t v19 = (int8x8_t *)(a4 + a2);
  }
  else {
    uint64_t v19 = 0;
  }
  return sub_1003E810C(v13, v15, v17 & 1, 0, v11, a5, v19, v18);
}

uint64_t sub_1003E88FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_100713A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for ICUError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ICUError()
{
  return &type metadata for ICUError;
}

ValueMetadata *type metadata accessor for UnsafeConverter()
{
  return &type metadata for UnsafeConverter;
}

uint64_t sub_1003E8998(uint64_t a1, uint64_t a2)
{
  return sub_1003E8CC4(a1, a2, (uint64_t (*)(void))sub_1003E89B0);
}

uint64_t sub_1003E89B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result == a2)
  {
LABEL_2:
    if (result == a2) {
      return result;
    }
    uint64_t v4 = a4 - a3;
    if (!a3) {
      uint64_t v4 = 0;
    }
    while (1)
    {
      uint64_t v5 = a2 - 1;
      if (__OFSUB__(a2, 1)) {
        break;
      }
      if (v5 >= a2 || v5 < result || v5 < 0 || v5 >= v4) {
        goto LABEL_28;
      }
      unsigned int v6 = *(unsigned __int8 *)(a3 + v5);
      BOOL v7 = v6 > 0x20;
      uint64_t v8 = (1 << v6) & 0x100002600;
      if (!v7 && v8 != 0)
      {
        --a2;
        if (result != v5) {
          continue;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 <= result) {
      uint64_t v10 = result;
    }
    else {
      uint64_t v10 = a2;
    }
    while (v10 != result)
    {
      unsigned int v11 = *(unsigned __int8 *)(a3 + result);
      BOOL v7 = v11 > 0x20;
      uint64_t v12 = (1 << v11) & 0x100002600;
      if (v7 || v12 == 0) {
        goto LABEL_2;
      }
      if (a2 == ++result) {
        return a2;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003E8A7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result == a2)
  {
    int v4 = 0;
    return v4 | ((result == a2) << 8);
  }
  uint64_t v5 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a4 - a3;
    if (!a3) {
      uint64_t v6 = 0;
    }
    if (v5 < a2 && v5 >= result && (v5 & 0x8000000000000000) == 0 && v5 < v6)
    {
      int v4 = *(unsigned __int8 *)(a3 + v5);
      return v4 | ((result == a2) << 8);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1003E8AE0(unint64_t result, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a6) {
    uint64_t v7 = a7 - a6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a4 < 0 || v7 < a4) {
    goto LABEL_18;
  }
  if ((a5 & 0x8000000000000000) != 0 || v7 < (uint64_t)a5) {
    goto LABEL_19;
  }
  if ((uint64_t)(a5 - a4) < a2) {
    return 0;
  }
  unint64_t v8 = a4 + a2;
  if (__OFADD__(a4, a2)) {
    goto LABEL_20;
  }
  if ((v8 & 0x8000000000000000) != 0 || v7 < (uint64_t)v8) {
    goto LABEL_21;
  }
  if (v8 < a4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 <= a5) {
    return sub_1003E8B64(result, a2, a3, a4, a4 + a2, a6, a7, v8);
  }
LABEL_23:
  __break(1u);
  return result;
}

unint64_t sub_1003E8B64@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X8>)
{
  if ((a3 & 1) == 0)
  {
    if (result)
    {
      sub_1003E8D18((unsigned __int8 *)result, a2, a4, a5, a6, a7, &v17);
      return v17;
    }
    __break(1u);
    goto LABEL_13;
  }
  a8 = HIDWORD(result);
  if (HIDWORD(result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >> 11 == 27)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  LODWORD(a8) = WORD1(result);
  if (WORD1(result) > 0x10u)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_15:
    int v10 = (result & 0x3F) << 8;
    unsigned int v11 = (v10 | (result >> 6)) + 33217;
    unsigned int v12 = (v10 | (result >> 6) & 0x3F) << 8;
    unsigned int v13 = (((v12 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v14 = (v12 | (result >> 12)) + 8487393;
    if (a8) {
      unsigned int v8 = v13;
    }
    else {
      unsigned int v8 = v14;
    }
    if (result < 0x800) {
      unsigned int v8 = v11;
    }
    goto LABEL_10;
  }
  if (result > 0xFF)
  {
    __break(1u);
    goto LABEL_22;
  }
  unsigned int v8 = (result + 1);
LABEL_10:
  unsigned int v9 = __clz(v8);
  uint64_t v16 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v9 >> 3)) & 7)));
  sub_1003E8D18((unsigned __int8 *)&v16, 4 - (v9 >> 3), a4, a5, a6, a7, &v15);
  return v15;
}

uint64_t sub_1003E8CAC(uint64_t a1, uint64_t a2)
{
  return sub_1003E8CC4(a1, a2, (uint64_t (*)(void))sub_1003E8DCC);
}

uint64_t sub_1003E8CC4(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result) {
    uint64_t v3 = a2 - result;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a3(0);
    if (v5) {
      return v5 + v4;
    }
    else {
      return 0;
    }
  }
  return result;
}

unsigned __int8 *sub_1003E8D18@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v7 = &result[a2];
  if (!result) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a6 - a5;
  if (!a5) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = a3;
  while (1)
  {
    if (v9 == a4)
    {
      int v10 = 0;
      uint64_t v11 = a4;
      if (!result) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    if (v9 < a3 || v9 >= a4) {
      break;
    }
    if (v9 < 0 || v9 >= v8) {
      goto LABEL_25;
    }
    uint64_t v11 = v9 + 1;
    int v10 = *(unsigned __int8 *)(a5 + v9) | 0x20;
    if (!result)
    {
LABEL_17:
      int v13 = 0;
      int v12 = 1;
      if (v9 == a4) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
LABEL_14:
    if (result == v7) {
      goto LABEL_17;
    }
    int v12 = 0;
    int v14 = *result++;
    int v13 = v14;
    if (v9 == a4) {
      goto LABEL_23;
    }
LABEL_18:
    if (v10 == v13) {
      int v15 = v12;
    }
    else {
      int v15 = 1;
    }
    uint64_t v9 = v11;
    if (v15 == 1)
    {
      LOBYTE(v12) = 0;
LABEL_23:
      *a7 = v12;
      return result;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1003E8DCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result == a2)
  {
LABEL_2:
    if (result == a2) {
      return result;
    }
    uint64_t v4 = a4 - a3;
    if (!a3) {
      uint64_t v4 = 0;
    }
    while (1)
    {
      uint64_t v5 = a2 - 1;
      if (__OFSUB__(a2, 1)) {
        break;
      }
      if (v5 >= a2 || v5 < result || v5 < 0 || v5 >= v4) {
        goto LABEL_30;
      }
      int v6 = *(unsigned __int8 *)(a3 + v5);
      if (v6 == 32 || v6 == 9)
      {
        --a2;
        if (result != v5) {
          continue;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 <= result) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = a2;
    }
    while (v8 != result)
    {
      int v9 = *(unsigned __int8 *)(a3 + result);
      if (v9 != 32 && v9 != 9) {
        goto LABEL_2;
      }
      if (a2 == ++result) {
        return a2;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1003E8E70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  if (a3) {
    uint64_t v7 = a4 - a3;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 < 0) {
    goto LABEL_47;
  }
  uint64_t v8 = result;
  uint64_t v9 = 0;
  if (!v7)
  {
LABEL_35:
    if (v8) {
      uint64_t v18 = v9;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v8) {
      uint64_t v19 = v8 + v9;
    }
    else {
      uint64_t v19 = 0;
    }
    return sub_1003DAEDC(0, v18, v8, v19, a5, a6, a7);
  }
  uint64_t v10 = 0;
  uint64_t v11 = a3 + 2;
  while (1)
  {
    if (v7 < v10 + 1) {
      goto LABEL_44;
    }
    int v12 = *(unsigned __int8 *)(a3 + v10);
    if (v12 == 37) {
      break;
    }
    ++v10;
LABEL_32:
    *(unsigned char *)(v8 + v9) = v12;
    if (__OFADD__(v9++, 1)) {
      goto LABEL_45;
    }
    if (v10 == v7) {
      goto LABEL_34;
    }
  }
  if (v10 + 1 == v7) {
    goto LABEL_34;
  }
  if (v7 < v10 + 2) {
    goto LABEL_46;
  }
  if (v10 + 2 == v7)
  {
LABEL_34:
    if (v9 < 0) {
      goto LABEL_48;
    }
    goto LABEL_35;
  }
  uint64_t v13 = v10 + 4;
  while (1)
  {
    uint64_t v10 = v13 - 1;
    if (v7 < v13 - 1) {
      break;
    }
    char v14 = *(unsigned char *)(v11 + v13 - 5);
    char v15 = *(unsigned char *)(v11 + v13 - 4);
    if ((v14 - 58) > 0xF5u)
    {
      uint64_t result = 208;
    }
    else if ((v14 - 71) > 0xF9u)
    {
      uint64_t result = 201;
    }
    else
    {
      uint64_t result = (v14 - 103);
      if (result <= 0xF9) {
        goto LABEL_23;
      }
      uint64_t result = 169;
    }
    if ((v15 - 58) > 0xF5u)
    {
      char v16 = -48;
LABEL_31:
      LOBYTE(v12) = (v15 + v16) | (16 * (v14 + result));
      goto LABEL_32;
    }
    if ((v15 - 71) > 0xF9u)
    {
      char v16 = -55;
      goto LABEL_31;
    }
    if ((v15 - 103) >= 0xFAu)
    {
      char v16 = -87;
      goto LABEL_31;
    }
LABEL_23:
    if (v13 - v7 == 1) {
      goto LABEL_34;
    }
    if (v7 < v13) {
      goto LABEL_43;
    }
    v13 += 2;
    if (v13 - v7 == 2) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1003E9014@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005E1D70();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1003E904C(Swift::String a1, uint64_t a2, char a3)
{
  if (a1._countAndFlagsBits) {
    uint64_t v3 = (uint64_t)a1._object - a1._countAndFlagsBits;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < 0) {
    goto LABEL_121;
  }
  if (v3)
  {
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    uint64_t v6 = 0;
    do
    {
      if (v6 >= v3)
      {
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        return a1._countAndFlagsBits;
      }
      int v7 = *(unsigned __int8 *)(countAndFlagsBits + v6);
      BOOL v8 = v7 == 10 || v7 == 13;
      uint64_t v9 = v6;
      if (!v8)
      {
        uint64_t v9 = v3;
        if (v6 + 1 != v3)
        {
          if (v6 + 1 >= v3) {
            goto LABEL_128;
          }
          int v25 = *(unsigned __int8 *)(countAndFlagsBits + v6 + 1);
          BOOL v26 = v25 == 10 || v25 == 13;
          uint64_t v9 = v6 + 1;
          if (v26) {
            goto LABEL_13;
          }
          uint64_t v27 = v6 + 2;
          while (v3 != v27)
          {
            int v28 = *(unsigned __int8 *)(countAndFlagsBits + v27++);
            if (v28 == 10 || v28 == 13)
            {
              uint64_t v9 = v27 - 1;
              goto LABEL_71;
            }
          }
          uint64_t v9 = v3;
        }
LABEL_71:
        if (v9 < v6)
        {
          __break(1u);
          goto LABEL_111;
        }
      }
LABEL_13:
      if (v3 < v9) {
        goto LABEL_117;
      }
      a1._uint64_t countAndFlagsBits = v9 - v6;
      if (v9 == v6)
      {
        BOOL v10 = 0;
      }
      else
      {
        uint64_t v11 = v9 - 1;
        if (__OFSUB__(v9, 1)) {
          goto LABEL_122;
        }
        if (v11 >= v9 || v11 < v6 || v11 < 0 || v11 >= v3) {
          goto LABEL_123;
        }
        int v12 = *(unsigned __int8 *)(countAndFlagsBits + v11);
        BOOL v10 = v12 == 32 || v12 == 9;
      }
      if (v6 < 0) {
        goto LABEL_118;
      }
      if (v9 < 0) {
        goto LABEL_119;
      }
      sub_1005E1D10(a1._countAndFlagsBits);
      a1._uint64_t countAndFlagsBits = 0;
      uint64_t v14 = v6;
      if (v9 != v6)
      {
        while (v14 >= v6 && v14 < v9)
        {
          int v22 = *(unsigned __int8 *)(countAndFlagsBits + v14);
          uint64_t v23 = v14 + 1;
          if ((v22 - 1) <= 0x7D)
          {
            if (v22 != 92 || (a3 & 1) == 0) {
              goto LABEL_59;
            }
            if (v23 == v9) {
              goto LABEL_30;
            }
            if (v23 >= v9) {
              break;
            }
            int v24 = *(unsigned __int8 *)(countAndFlagsBits + v23);
            uint64_t v23 = v14 + 2;
            if ((v24 - 1) <= 0x7D)
            {
LABEL_59:
              uint64_t v35 = a1._countAndFlagsBits;
              sub_1005E1D60();
              a1._uint64_t countAndFlagsBits = v35;
            }
          }
          uint64_t v14 = v23;
          if (v23 == v9) {
            goto LABEL_30;
          }
        }
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
LABEL_30:
      a1._object = (void *)0xE000000000000000;
      sub_1005E1E30(a1);
      a1._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
      uint64_t v15 = v3;
      if (v9 == v3) {
        goto LABEL_45;
      }
      if (v9 >= v3) {
        goto LABEL_124;
      }
      int v16 = *(unsigned __int8 *)(countAndFlagsBits + v9);
      if (v16 == 10 || v16 == 13)
      {
        uint64_t v15 = v3;
        if (v9 + 1 != v3)
        {
          uint64_t v15 = v9 + 1;
          while (v15 < v3)
          {
            int v17 = *(unsigned __int8 *)(countAndFlagsBits + v15);
            if (v17 != 13 && v17 != 10) {
              goto LABEL_44;
            }
            if (v3 == ++v15)
            {
              uint64_t v15 = v3;
              goto LABEL_44;
            }
          }
          goto LABEL_113;
        }
LABEL_44:
        if (v15 < v9) {
          goto LABEL_120;
        }
LABEL_45:
        if (v10) {
          goto LABEL_46;
        }
        goto LABEL_87;
      }
      uint64_t v15 = v9;
      if (v10)
      {
LABEL_46:
        if (v15 == v3) {
          return a1._countAndFlagsBits;
        }
        if (v15 >= v3) {
          goto LABEL_126;
        }
        int v19 = *(unsigned __int8 *)(countAndFlagsBits + v15);
        if (v19 == 9 || v19 == 32)
        {
          uint64_t v6 = v15 + 1;
          if (v15 + 1 == v3) {
            return a1._countAndFlagsBits;
          }
          while (v6 < v3)
          {
            int v20 = *(unsigned __int8 *)(countAndFlagsBits + v6);
            if (v20 != 32 && v20 != 9)
            {
              if (v6 >= v15) {
                goto LABEL_106;
              }
              goto LABEL_114;
            }
            if (v3 == ++v6) {
              return a1._countAndFlagsBits;
            }
          }
          goto LABEL_112;
        }
        uint64_t v6 = v15;
        continue;
      }
LABEL_87:
      uint64_t v30 = v3;
      if (v15 != v3)
      {
        if (v15 >= v3) {
          goto LABEL_127;
        }
        int v31 = *(unsigned __int8 *)(countAndFlagsBits + v15);
        if (v31 == 9 || (uint64_t v30 = v15, v31 == 32))
        {
          uint64_t v30 = v3;
          if (v15 + 1 != v3)
          {
            uint64_t v30 = v15 + 1;
            while (v30 < v3)
            {
              int v32 = *(unsigned __int8 *)(countAndFlagsBits + v30);
              if (v32 != 32 && v32 != 9)
              {
                if (v30 < v15) {
                  goto LABEL_125;
                }
                goto LABEL_105;
              }
              if (v3 == ++v30)
              {
                uint64_t v30 = v3;
                goto LABEL_105;
              }
            }
            goto LABEL_115;
          }
        }
      }
LABEL_105:
      uint64_t v6 = v30 - (v15 < v30);
LABEL_106:
      ;
    }
    while (v6 != v3);
  }
  return a1._countAndFlagsBits;
}

uint64_t sub_1003E93E4(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned __int8 *a5, char a6, uint64_t a7, uint64_t *a8, uint64_t a9)
{
  if (a2) {
    uint64_t v9 = a3 - a2;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 < 0) {
    goto LABEL_43;
  }
  uint64_t v13 = 0;
  if (!v9)
  {
LABEL_35:
    char v23 = a6 & 1;
    uint64_t v24 = result + v13;
    if (!result)
    {
      uint64_t v13 = 0;
      uint64_t v24 = 0;
    }
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = v13;
    uint64_t v27 = result;
    uint64_t v28 = v24;
    char v29 = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    char v25 = sub_1003DB948(&v26, a4, a5, v23, a8, a9);
    swift_release();
    swift_bridgeObjectRelease();
    return v25 & 1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a2 + 2;
  while (1)
  {
    if (v9 < v14 + 1) {
      goto LABEL_40;
    }
    int v16 = *(unsigned __int8 *)(a2 + v14);
    if (v16 == 37) {
      break;
    }
    ++v14;
LABEL_32:
    *(unsigned char *)(result + v13) = v16;
    if (__OFADD__(v13++, 1)) {
      goto LABEL_41;
    }
    if (v14 == v9) {
      goto LABEL_34;
    }
  }
  if (v14 + 1 == v9) {
    goto LABEL_34;
  }
  if (v9 < v14 + 2) {
    goto LABEL_42;
  }
  if (v14 + 2 == v9)
  {
LABEL_34:
    if (v13 < 0) {
      goto LABEL_44;
    }
    goto LABEL_35;
  }
  uint64_t v17 = v14 + 4;
  while (1)
  {
    uint64_t v14 = v17 - 1;
    if (v9 < v17 - 1) {
      break;
    }
    char v18 = *(unsigned char *)(v15 + v17 - 5);
    char v19 = *(unsigned char *)(v15 + v17 - 4);
    if ((v18 - 58) > 0xF5u)
    {
      char v20 = -48;
    }
    else if ((v18 - 71) > 0xF9u)
    {
      char v20 = -55;
    }
    else
    {
      if ((v18 - 103) <= 0xF9u) {
        goto LABEL_23;
      }
      char v20 = -87;
    }
    if ((v19 - 58) > 0xF5u)
    {
      char v21 = -48;
LABEL_31:
      LOBYTE(v16) = (v19 + v21) | (16 * (v18 + v20));
      goto LABEL_32;
    }
    if ((v19 - 71) > 0xF9u)
    {
      char v21 = -55;
      goto LABEL_31;
    }
    if ((v19 - 103) >= 0xFAu)
    {
      char v21 = -87;
      goto LABEL_31;
    }
LABEL_23:
    if (v17 - v9 == 1) {
      goto LABEL_34;
    }
    if (v9 < v17) {
      goto LABEL_39;
    }
    v17 += 2;
    if (v17 - v9 == 2) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void sub_1003E9608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = sub_1005E3530();
  uint64_t v8 = *(void *)(v32 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  Swift::Int v11 = sub_1001F94DC(a1, a2, a3, a4);
  sub_1005E1D10(v11);
  char v12 = 0;
  LODWORD(v13) = 0;
  int v14 = 0;
  uint64_t v15 = a4 - a3;
  if (!a3) {
    uint64_t v15 = 0;
  }
  uint64_t v33 = a3;
  uint64_t v34 = v15;
  int v16 = (void (**)(char *, uint64_t))(v8 + 8);
  int v31 = 8 * a2;
  uint64_t v17 = a1;
  uint64_t v18 = a1;
  while (1)
  {
    while (1)
    {
      char v19 = v12;
      int v37 = v13;
      unsigned __int8 v38 = v14;
      if (!(_BYTE)v14) {
        break;
      }
      if ((v13 & 0x80) == 0)
      {
        sub_1003E54D0();
        char v29 = UnsafeExtractedAttachment.part.modify();
        sub_10036A0BC(0);
        ((void (*)(uint64_t *, void))v29)(&v35, 0);
        goto LABEL_53;
      }
LABEL_13:
      if (v18 == a2)
      {
        uint64_t v18 = a2;
        goto LABEL_49;
      }
      if (v18 < v17 || v18 >= a2) {
        goto LABEL_71;
      }
      if (v18 < 0 || v18 >= v34) {
        goto LABEL_72;
      }
      uint64_t v21 = v18 + 1;
      LODWORD(v13) = (*(unsigned __int8 *)(v33 + v18) << v14) | ((-255 << v14) - 1) & v13;
      int v22 = v14 + 8;
      if ((v14 + 8) > 0x1Fu)
      {
LABEL_47:
        int v14 = v22;
LABEL_48:
        uint64_t v18 = v21;
        goto LABEL_49;
      }
      if (v21 != a2)
      {
        if (v18 < v17 || v21 >= a2) {
          goto LABEL_71;
        }
        if (v18 < 0 || v21 >= v34) {
          goto LABEL_72;
        }
        int v23 = *(unsigned __int8 *)(v33 + v21);
        uint64_t v21 = v18 + 2;
        LODWORD(v13) = (v23 << v22) | ((-255 << v22) - 1) & v13;
        int v22 = v14 + 16;
        if ((v14 + 16) > 0x1Fu) {
          goto LABEL_47;
        }
        if (v21 != a2)
        {
          if (v18 < v17 || v21 >= a2) {
            goto LABEL_71;
          }
          if (v18 < 0 || v21 >= v34) {
            goto LABEL_72;
          }
          int v24 = *(unsigned __int8 *)(v33 + v21);
          uint64_t v21 = v18 + 3;
          LODWORD(v13) = (v24 << v22) | ((-255 << v22) - 1) & v13;
          int v22 = v14 + 24;
          if ((v14 + 24) > 0x1Fu) {
            goto LABEL_47;
          }
          if (v21 != a2)
          {
            if (v18 < v17 || v21 >= a2) {
              goto LABEL_71;
            }
            if (v18 < 0 || v21 >= v34) {
              goto LABEL_72;
            }
            int v25 = *(unsigned __int8 *)(v33 + v21);
            uint64_t v21 = v18 + 4;
            LODWORD(v13) = (v25 << v22) | ((-255 << v22) - 1) & v13;
            if (v14 < 0xE0u)
            {
              v14 += 32;
              goto LABEL_48;
            }
            if (v21 != a2)
            {
              if (v18 < v17 || v21 >= a2) {
                goto LABEL_71;
              }
              if (v18 < 0 || v21 >= v34) {
                goto LABEL_72;
              }
              LODWORD(v13) = (*(unsigned __int8 *)(v33 + v21) << v14) | ((-255 << v14) - 1) & v13;
              if ((v14 + 40) >= 0x20u)
              {
                v18 += 5;
                v14 += 40;
                goto LABEL_49;
              }
            }
          }
        }
      }
      int v14 = v31 + v14 - 8 * v18;
      uint64_t v18 = a2;
      if (!(_BYTE)v14) {
        return;
      }
LABEL_49:
      if ((v13 & 0xC0E0) == 0x80C0)
      {
        if ((v13 & 0x1E) != 0)
        {
          char v26 = 16;
LABEL_52:
          int v37 = (unint64_t)v13 >> v26;
          unsigned __int8 v38 = v14 - v26;
          goto LABEL_53;
        }
      }
      else if ((v13 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v13 & 0x200F) != 0 && (v13 & 0x200F) != 0x200D)
        {
          char v26 = 24;
          goto LABEL_52;
        }
      }
      else if ((v13 & 0xC0C0C0F8) == 0x808080F0 && (v13 & 0x3007) != 0 && __rev16(v13 & 0x3007) <= 0x400)
      {
        char v26 = 32;
        goto LABEL_52;
      }
      int v28 = sub_1005E3510();
      char v12 = 0;
      unint64_t v13 = (unint64_t)v13 >> ((8 * v28) & 0x38);
      v14 -= 8 * v28;
    }
    if (v18 == a2) {
      return;
    }
    if (v18 < v17 || v18 >= a2) {
      break;
    }
    if (v18 < 0 || v18 >= v34) {
      goto LABEL_70;
    }
    int v20 = *(unsigned __int8 *)(v33 + v18++);
    if ((v20 & 0x80) != 0)
    {
      LODWORD(v13) = v13 & 0xFFFFFF00 | v20;
      int v14 = 8;
      goto LABEL_13;
    }
LABEL_53:
    LODWORD(v13) = v37;
    int v14 = v38;
    sub_1005E3540();
    char v27 = sub_1005E3520();
    (*v16)(v10, v32);
    if (v27)
    {
      char v12 = 1;
      if ((v19 & 1) == 0)
      {
        v41._uint64_t countAndFlagsBits = 32;
        v41._object = (void *)0xE100000000000000;
        sub_1005E1E30(v41);
        char v12 = 1;
      }
    }
    else
    {
      uint64_t v35 = v39;
      unint64_t v36 = v40;
      sub_1005E1D60();
      char v12 = 0;
      uint64_t v39 = v35;
      unint64_t v40 = v36;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

void sub_1003E9BE0(uint64_t a1, uint64_t a2, char a3)
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = sub_1003E89B0(0, v4, a1, a2);
    if (a3)
    {
      sub_1003E9608(v6, v7, v8, v9);
    }
    else
    {
      __chkstk_darwin();
      sub_1003E7F1C(v10, v11, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1003B531C);
    }
  }
}

uint64_t sub_1003E9CD0()
{
  unint64_t v1 = (unint64_t)v0[1] >> 14;
  if (v1 == (unint64_t)*v0 >> 14) {
    return 0;
  }
  uint64_t v2 = sub_1005E2930();
  swift_bridgeObjectRetain();
  unint64_t v3 = sub_1005E2900();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1 >= v3 >> 14)
  {
    uint64_t v5 = sub_1005E2940();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v5;
    v0[1] = v7;
    v0[2] = v9;
    v0[3] = v11;
    return v2;
  }
  __break(1u);
  return result;
}

void sub_1003E9DC8()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  if ((v1 ^ *v0) >= 0x4000)
  {
    unint64_t v4 = v0[2];
    unint64_t v3 = v0[3];
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1005E2930();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    if (v5 == 91 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        return;
      }
    }
    unint64_t v33 = v4;
    unint64_t v34 = v1;
    unint64_t v35 = v3;
    swift_bridgeObjectRetain();
    sub_1003E9CD0();
    swift_bridgeObjectRelease();
    unint64_t v10 = v0[1] >> 14;
    if (v10 == *v0 >> 14) {
      goto LABEL_32;
    }
    unint64_t v11 = sub_1005E2930();
    unint64_t v13 = v12;
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_1005E2900();
    swift_bridgeObjectRelease();
    if (v10 < v14 >> 14)
    {
LABEL_41:
      __break(1u);
    }
    else
    {
      unint64_t v15 = sub_1005E2940();
      unint64_t v17 = v16;
      unint64_t v19 = v18;
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      *uint64_t v0 = v15;
      v0[1] = v17;
      v0[2] = v19;
      v0[3] = v21;
      if (v11 == 2573 && v13 == 0xE200000000000000 || (sub_1005E3290() & 1) != 0 || (sub_1005E1A00() & 1) == 0)
      {
LABEL_31:
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRelease();
        *uint64_t v0 = v2;
        v0[1] = v34;
        v0[2] = v33;
        v0[3] = v35;
        return;
      }
      char v22 = 0;
      while (1)
      {
        unint64_t v23 = sub_100374D14(v11, v13);
        if ((v23 & 0x100000000) != 0) {
          break;
        }
        if ((v23 & 0xFFFFFF80) != 0) {
          goto LABEL_31;
        }
        unint64_t v24 = sub_100374D14(v11, v13);
        if ((v24 & 0x100000000) != 0) {
          goto LABEL_43;
        }
        int v25 = v24;
        swift_bridgeObjectRelease();
        if ((v25 & 0xFFFFFF00) != 0)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v25 == 93)
        {
          if ((v22 & 1) == 0) {
            goto LABEL_32;
          }
          swift_bridgeObjectRelease();
          return;
        }
        if (v25 <= 0x2Fu || v25 >= 0x40u || v17 >> 14 == v15 >> 14) {
          goto LABEL_32;
        }
        unint64_t v11 = sub_1005E2930();
        unint64_t v13 = v26;
        swift_bridgeObjectRetain();
        unint64_t v27 = sub_1005E2900();
        swift_bridgeObjectRelease();
        if (v17 >> 14 < v27 >> 14) {
          goto LABEL_40;
        }
        unint64_t v15 = sub_1005E2940();
        unint64_t v17 = v28;
        unint64_t v30 = v29;
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        *uint64_t v0 = v15;
        v0[1] = v17;
        v0[2] = v30;
        v0[3] = v32;
        if ((v11 != 2573 || v13 != 0xE200000000000000) && (sub_1005E3290() & 1) == 0)
        {
          char v22 = 1;
          if (sub_1005E1A00()) {
            continue;
          }
        }
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
  }
}

uint64_t sub_1003EA164()
{
  uint64_t v0 = sub_1005E09D0();
  sub_10034E5B4(v0, qword_100714300);
  sub_1003461B0(v0, (uint64_t)qword_100714300);
  return sub_1005E09B0();
}

void sub_1003EA1CC()
{
  off_100714318 = &off_1006EB288;
}

void sub_1003EA1E0()
{
  off_100714320 = &off_1006EB4E8;
}

uint64_t sub_1003EA1F4()
{
  sub_10000566C(&qword_100714328);
  __chkstk_darwin();
  unint64_t v1 = (char *)&v129 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v2 = sub_1005E1F50();
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  int v131 = 0;
  char v9 = (char *)_swiftEmptyArrayStorage;
  int v130 = 1;
  unint64_t v10 = &qword_100713000;
  uint64_t v135 = v1;
  while (1)
  {
LABEL_2:
    uint64_t v132 = v9;
LABEL_3:
    unint64_t v11 = v4;
    unint64_t v12 = v4 >> 14;
    if (v4 >> 14 == v2 >> 14)
    {
      unint64_t v13 = v6;
      uint64_t v14 = v8;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    unint64_t v15 = v6;
    sub_1005E2930();
    unint64_t v16 = v11;
    swift_bridgeObjectRelease();
    char v17 = sub_1005E19F0();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      unint64_t v13 = v15;
      uint64_t v14 = v8;
      goto LABEL_10;
    }
    sub_1005E2930();
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_1005E2900();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12 < v18 >> 14)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      return result;
    }
    unint64_t v20 = v9;
    unint64_t v2 = sub_1005E2940();
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    uint64_t v14 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = v22 >> 14;
    if (v22 >> 14 == v2 >> 14)
    {
      unint64_t v11 = v22;
      unint64_t v13 = v24;
      unint64_t v10 = &qword_100713000;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    unint64_t v16 = v22;
    sub_1005E2930();
    swift_bridgeObjectRelease();
    char v58 = sub_1005E19F0();
    swift_bridgeObjectRelease();
    unint64_t v13 = v24;
    char v9 = v20;
    unint64_t v10 = &qword_100713000;
    if (v58) {
      break;
    }
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1005E2930();
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    unint64_t v11 = v16;
    if (v27 == 91 && v29 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v30 = sub_1005E3290();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0) {
        goto LABEL_13;
      }
    }
    unint64_t v92 = v2 >> 14;
    unint64_t v10 = (uint64_t *)(v16 >> 14);
    swift_bridgeObjectRetain();
    if (v2 >> 14 == v16 >> 14)
    {
      unint64_t v93 = (uint64_t *)(v2 >> 14);
      unint64_t v139 = v16;
      unint64_t v94 = v13;
      unint64_t v13 = v11;
      unint64_t v140 = v94;
      unint64_t v141 = v2;
    }
    else
    {
      sub_1005E2930();
      swift_bridgeObjectRetain();
      unint64_t v95 = sub_1005E2900();
      uint64_t result = swift_bridgeObjectRelease();
      if ((unint64_t)v10 < v95 >> 14) {
        goto LABEL_137;
      }
      unint64_t v140 = v13;
      unint64_t v141 = v2;
      unint64_t v139 = v16;
      unint64_t v2 = sub_1005E2940();
      unint64_t v13 = v96;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = (uint64_t *)(v13 >> 14);
      unint64_t v93 = (uint64_t *)(v2 >> 14);
    }
    uint64_t v137 = v93;
    if (v93 == v10) {
      goto LABEL_134;
    }
    uint64_t v136 = (uint64_t *)v92;
    swift_bridgeObjectRetain();
    if (sub_1005E2930() == 93 && v97 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_84:
      swift_bridgeObjectRelease();
      goto LABEL_85;
    }
    char v98 = sub_1005E3290();
    swift_bridgeObjectRelease();
    if (v98) {
      goto LABEL_84;
    }
    if (v10 == (uint64_t *)((unint64_t)sub_1005E2900() >> 14)) {
      goto LABEL_133;
    }
    if (sub_1005E2930() != 93 || v114 != 0xE100000000000000)
    {
      uint64_t v138 = v14;
      while (1)
      {
        char v115 = sub_1005E3290();
        swift_bridgeObjectRelease();
        if (v115) {
          goto LABEL_84;
        }
        if (v10 == (uint64_t *)((unint64_t)sub_1005E2900() >> 14)) {
          goto LABEL_133;
        }
        if (sub_1005E2930() == 93 && v116 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_84;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_85:
    unint64_t v99 = (unint64_t)sub_1005E2900() >> 14;
    if ((unint64_t)v10 < v99) {
      goto LABEL_134;
    }
    unint64_t v2 = sub_1005E2940();
    unint64_t v101 = v100;
    unint64_t v6 = v102;
    uint64_t v8 = v103;
    uint64_t result = swift_bridgeObjectRelease();
    if (v99 < (unint64_t)v136) {
      goto LABEL_136;
    }
    uint64_t v104 = sub_1005E2940();
    unint64_t v140 = v105;
    unint64_t v141 = v104;
    uint64_t v107 = v106;
    uint64_t v109 = v108;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v10 = &qword_100713000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v9 = sub_1003EFF78(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v111 = *((void *)v9 + 2);
    unint64_t v110 = *((void *)v9 + 3);
    if (v111 >= v110 >> 1) {
      char v9 = sub_1003EFF78((char *)(v110 > 1), v111 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v111 + 1;
    uint64_t v112 = &v9[32 * v111];
    unint64_t v113 = v140;
    *((void *)v112 + 4) = v141;
    *((void *)v112 + 5) = v113;
    *((void *)v112 + 6) = v107;
    *((void *)v112 + 7) = v109;
    swift_bridgeObjectRelease();
    int v130 = v131;
    unint64_t v1 = v135;
    unint64_t v4 = v101;
  }
  while (1)
  {
    sub_1005E2930();
    swift_bridgeObjectRetain();
    unint64_t v59 = sub_1005E2900();
    swift_bridgeObjectRelease();
    if (v26 < v59 >> 14)
    {
LABEL_132:
      __break(1u);
LABEL_133:
      swift_bridgeObjectRelease();
      goto LABEL_134;
    }
    unint64_t v2 = sub_1005E2940();
    unint64_t v16 = v60;
    unint64_t v13 = v61;
    uint64_t v63 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v63;
    unint64_t v26 = v16 >> 14;
    if (v16 >> 14 == v2 >> 14) {
      break;
    }
    swift_bridgeObjectRetain();
    sub_1005E2930();
    swift_bridgeObjectRelease();
    char v64 = sub_1005E19F0();
    swift_bridgeObjectRelease();
    if ((v64 & 1) == 0) {
      goto LABEL_10;
    }
  }
  unint64_t v11 = v16;
LABEL_13:
  if (v10[324] != -1) {
    swift_once();
  }
  unint64_t v10 = (uint64_t *)*((void *)off_100714318 + 2);
  uint64_t v136 = (uint64_t *)(v11 >> 14);
  uint64_t v137 = (uint64_t *)(v2 >> 14);
  char v9 = (char *)qword_100714300;
  uint64_t v138 = v14;
  unint64_t v139 = v11;
  unint64_t v140 = v13;
  unint64_t v141 = v2;
  if (!v10)
  {
LABEL_47:
    if (qword_100713A28 != -1) {
      swift_once();
    }
    unint64_t v10 = (uint64_t *)*((void *)off_100714320 + 2);
    if (v10)
    {
      uint64_t v133 = swift_bridgeObjectRetain();
      unint64_t v2 = v133 + 40;
      do
      {
        uint64_t v66 = *(void *)(v2 - 8);
        uint64_t v65 = *(void *)v2;
        swift_bridgeObjectRetain();
        sub_1005E1DC0();
        unint64_t v67 = sub_1005E2920();
        if (v68)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v13 = v67 >> 14;
          if (v67 >> 14 < (unint64_t)v137) {
            goto LABEL_123;
          }
          unint64_t v144 = v141;
          unint64_t v145 = v11;
          unint64_t v146 = v140;
          uint64_t v147 = v14;
          uint64_t v142 = v66;
          uint64_t v143 = v65;
          uint64_t v69 = qword_100713A18;
          swift_bridgeObjectRetain();
          if (v69 != -1) {
            swift_once();
          }
          uint64_t v70 = sub_1005E09D0();
          uint64_t v71 = sub_1003461B0(v70, (uint64_t)qword_100714300);
          uint64_t v72 = *(void *)(v70 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v1, v71, v70);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v1, 0, 1, v70);
          sub_1003EB600();
          sub_1003AE8A4();
          uint64_t v73 = sub_1005E29B0();
          sub_1003EB654((uint64_t)v1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v14 = v138;
          unint64_t v11 = v139;
          if (!v73)
          {
            if ((unint64_t)v136 < v13) {
              goto LABEL_125;
            }
            swift_bridgeObjectRetain();
            uint64_t v74 = sub_1005E2940();
            unint64_t v76 = v75;
            unint64_t v78 = v77;
            uint64_t v80 = v79;
            swift_bridgeObjectRelease();
            unint64_t v144 = v74;
            unint64_t v145 = v76;
            unint64_t v146 = v78;
            uint64_t v147 = v80;
            sub_1003E9DC8();
            unint64_t v13 = v145;
            char v9 = (char *)(v145 >> 14);
            if (v145 >> 14 != v144 >> 14)
            {
              uint64_t v81 = sub_1005E2930();
              uint64_t v83 = v82;
              swift_bridgeObjectRetain();
              unint64_t v84 = sub_1005E2900();
              swift_bridgeObjectRelease();
              if ((unint64_t)v9 < v84 >> 14) {
                goto LABEL_131;
              }
              uint64_t v85 = sub_1005E2940();
              unint64_t v4 = v86;
              unint64_t v88 = v87;
              uint64_t v8 = v89;
              swift_bridgeObjectRelease();
              if (v81 == 58 && v83 == 0xE100000000000000)
              {
                unint64_t v2 = v85;
                unint64_t v6 = v88;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v1 = v135;
LABEL_70:
                swift_bridgeObjectRelease();
                int v131 = v130;
                char v9 = v132;
                unint64_t v10 = &qword_100713000;
                goto LABEL_2;
              }
              char v90 = sub_1005E3290();
              unint64_t v1 = v135;
              if (v90)
              {
                unint64_t v2 = v85;
                unint64_t v6 = v88;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_70;
              }
              unint64_t v134 = v4;
              uint64_t v14 = v138;
              if (v81 == 10140911 && v83 == 0xA300000000000000)
              {
                unint64_t v2 = v85;
                unint64_t v6 = v88;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_73:
                swift_bridgeObjectRelease();
                int v131 = v130;
                char v9 = v132;
                unint64_t v10 = &qword_100713000;
                unint64_t v4 = v134;
                goto LABEL_2;
              }
              char v91 = sub_1005E3290();
              swift_bridgeObjectRelease();
              if (v91)
              {
                unint64_t v2 = v85;
                unint64_t v6 = v88;
                swift_bridgeObjectRelease();
                goto LABEL_73;
              }
            }
            swift_bridgeObjectRelease();
            char v9 = (char *)qword_100714300;
            unint64_t v11 = v139;
          }
        }
        v2 += 16;
        unint64_t v10 = (uint64_t *)((char *)v10 - 1);
      }
      while (v10);
      swift_bridgeObjectRelease();
      unint64_t v2 = v141;
    }
    unint64_t v13 = v11;
    char v9 = v132;
    unint64_t v10 = v136;
    goto LABEL_105;
  }
  uint64_t v133 = swift_bridgeObjectRetain();
  unint64_t v2 = v133 + 40;
  while (2)
  {
    uint64_t v32 = *(void *)(v2 - 8);
    uint64_t v31 = *(void *)v2;
    swift_bridgeObjectRetain();
    sub_1005E1DC0();
    unint64_t v33 = sub_1005E2920();
    if (v34)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      v2 += 16;
      unint64_t v10 = (uint64_t *)((char *)v10 - 1);
      if (!v10)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v141;
        goto LABEL_47;
      }
      continue;
    }
    break;
  }
  unint64_t v13 = v33 >> 14;
  if (v33 >> 14 >= (unint64_t)v137)
  {
    unint64_t v144 = v141;
    unint64_t v145 = v11;
    unint64_t v146 = v140;
    uint64_t v147 = v14;
    uint64_t v142 = v32;
    uint64_t v143 = v31;
    uint64_t v35 = qword_100713A18;
    swift_bridgeObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v36 = sub_1005E09D0();
    uint64_t v37 = sub_1003461B0(v36, (uint64_t)qword_100714300);
    uint64_t v38 = *(void *)(v36 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v1, v37, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v1, 0, 1, v36);
    sub_1003EB600();
    sub_1003AE8A4();
    uint64_t v39 = sub_1005E29B0();
    sub_1003EB654((uint64_t)v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v138;
    unint64_t v11 = v139;
    if (!v39)
    {
      if ((unint64_t)v136 < v13) {
        goto LABEL_124;
      }
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1005E2940();
      unint64_t v42 = v41;
      unint64_t v44 = v43;
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      unint64_t v144 = v40;
      unint64_t v145 = v42;
      unint64_t v146 = v44;
      uint64_t v147 = v46;
      sub_1003E9DC8();
      unint64_t v13 = v145;
      char v9 = (char *)(v145 >> 14);
      if (v145 >> 14 != v144 >> 14)
      {
        uint64_t v47 = sub_1005E2930();
        uint64_t v49 = v48;
        swift_bridgeObjectRetain();
        unint64_t v50 = sub_1005E2900();
        swift_bridgeObjectRelease();
        if ((unint64_t)v9 < v50 >> 14)
        {
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        uint64_t v51 = sub_1005E2940();
        unint64_t v4 = v52;
        unint64_t v54 = v53;
        uint64_t v8 = v55;
        swift_bridgeObjectRelease();
        if (v47 == 58 && v49 == 0xE100000000000000)
        {
          unint64_t v2 = v51;
          unint64_t v6 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v1 = v135;
LABEL_41:
          swift_bridgeObjectRelease();
          int v130 = v131;
          char v9 = v132;
          unint64_t v10 = &qword_100713000;
          goto LABEL_3;
        }
        char v56 = sub_1005E3290();
        unint64_t v1 = v135;
        if (v56)
        {
          unint64_t v2 = v51;
          unint64_t v6 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
        unint64_t v134 = v4;
        uint64_t v14 = v138;
        if (v47 == 10140911 && v49 == 0xA300000000000000)
        {
          unint64_t v2 = v51;
          unint64_t v6 = v54;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_44:
          swift_bridgeObjectRelease();
          int v130 = v131;
          char v9 = v132;
          unint64_t v10 = &qword_100713000;
          unint64_t v4 = v134;
          goto LABEL_3;
        }
        char v57 = sub_1005E3290();
        swift_bridgeObjectRelease();
        if (v57)
        {
          unint64_t v2 = v51;
          unint64_t v6 = v54;
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      char v9 = (char *)qword_100714300;
      unint64_t v11 = v139;
    }
    goto LABEL_18;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_134:
  swift_bridgeObjectRelease();
LABEL_105:
  if (v137 != v10)
  {
    do
    {
      swift_bridgeObjectRetain();
      sub_1005E2930();
      swift_bridgeObjectRelease();
      char v117 = sub_1005E19F0();
      swift_bridgeObjectRelease();
      if ((v117 & 1) == 0) {
        break;
      }
      sub_1005E2930();
      swift_bridgeObjectRetain();
      unint64_t v118 = sub_1005E2900();
      swift_bridgeObjectRelease();
      if ((unint64_t)v10 < v118 >> 14)
      {
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      unint64_t v2 = sub_1005E2940();
      unint64_t v13 = v119;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = (uint64_t *)(v13 >> 14);
    }
    while (v13 >> 14 != v2 >> 14);
  }
  while ((v2 ^ v13) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    sub_1005E2910();
    sub_1005E2930();
    swift_bridgeObjectRelease();
    char v120 = sub_1005E19F0();
    swift_bridgeObjectRelease();
    if ((v120 & 1) == 0) {
      break;
    }
    if (v2 >> 14 == v13 >> 14) {
      goto LABEL_128;
    }
    sub_1005E2910();
    sub_1005E2930();
    if (v2 >> 14 > (unint64_t)sub_1005E2910() >> 14) {
      goto LABEL_129;
    }
    unint64_t v2 = sub_1005E2940();
    unint64_t v13 = v121;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v122 = sub_1005E1D00();
  unint64_t v124 = v123;
  swift_bridgeObjectRelease();
  if (*((void *)v9 + 2))
  {
    uint64_t v125 = HIBYTE(v124) & 0xF;
    if ((v124 & 0x2000000000000000) == 0) {
      uint64_t v125 = v122 & 0xFFFFFFFFFFFFLL;
    }
    if (v125)
    {
      unint64_t v144 = (unint64_t)v9;
      sub_10000566C(&qword_100714330);
      sub_1003EB5A4();
      sub_1003EB600();
      uint64_t v126 = sub_1005E2060();
      unint64_t v128 = v127;
      swift_bridgeObjectRelease();
      unint64_t v144 = v126;
      unint64_t v145 = v128;
      swift_bridgeObjectRetain();
      v148._uint64_t countAndFlagsBits = 32;
      v148._object = (void *)0xE100000000000000;
      sub_1005E1E30(v148);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v149._uint64_t countAndFlagsBits = v122;
      v149._object = (void *)v124;
      sub_1005E1E30(v149);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v144;
    }
    swift_bridgeObjectRelease();
    unint64_t v144 = (unint64_t)v9;
    sub_10000566C(&qword_100714330);
    sub_1003EB5A4();
    sub_1003EB600();
    uint64_t v122 = sub_1005E2060();
  }
  swift_bridgeObjectRelease();
  return v122;
}

unint64_t sub_1003EB5A4()
{
  unint64_t result = qword_100714338;
  if (!qword_100714338)
  {
    sub_10000744C(&qword_100714330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714338);
  }
  return result;
}

unint64_t sub_1003EB600()
{
  unint64_t result = qword_100714340;
  if (!qword_100714340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714340);
  }
  return result;
}

uint64_t sub_1003EB654(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100714328);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003EB6B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2 - result;
  if (!result) {
    uint64_t v4 = 0;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v4;
    *(void *)(a4 + 16) = result;
    *(void *)(a4 + 24) = a2;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = v4;
    *(void *)(a4 + 48) = result;
    *(void *)(a4 + 56) = a2;
    *(unsigned char *)(a4 + 64) = a3;
  }
  return result;
}

unint64_t sub_1003EB6E0(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6275732D6F747561;
      break;
    case 2:
      unint64_t result = 6513506;
      break;
    case 3:
      unint64_t result = 25443;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x2D746E65746E6F63;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0x2D746E65746E6F63;
      break;
    case 10:
      unint64_t result = 1702125924;
      break;
    case 11:
      unint64_t result = 1836020326;
      break;
    case 12:
      unint64_t result = 0x64692D7473696CLL;
      break;
    case 13:
      unint64_t result = 0x2D6567617373656DLL;
      break;
    case 14:
      unint64_t result = 0x7265762D656D696DLL;
      break;
    case 15:
      unint64_t result = 0x69726F6972702D78;
      break;
    case 16:
      unint64_t result = 0x6465766965636572;
      break;
    case 17:
      unint64_t result = 0x702D6E7275746572;
      break;
    case 18:
      unint64_t result = 0x7463656A627573;
      break;
    case 19:
      unint64_t result = 28532;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_1003EB924()
{
  char v1 = *v0;
  sub_1005E33F0();
  sub_1003EB6E0(v1);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003EB988()
{
  sub_1003EB6E0(*v0);
  sub_1005E1DB0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003EB9DC()
{
  char v1 = *v0;
  sub_1005E33F0();
  sub_1003EB6E0(v1);
  sub_1005E1DB0();
  swift_bridgeObjectRelease();
  return sub_1005E3470();
}

uint64_t sub_1003EBA3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1003ECA68();
  *a1 = result;
  return result;
}

unint64_t sub_1003EBA6C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1003EB6E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003EBA98(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1003EB6E0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1003EB6E0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1005E3290();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1003EBB24(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v6 = (unsigned __int8 *)(a3 + 32);
    int64_t v7 = a2 - a1;
    do
    {
      unsigned int v12 = *v6++;
      uint64_t v11 = v12;
      unint64_t v13 = 0xD000000000000016;
      unint64_t v14 = 0x80000001005E97B0;
      switch(v12)
      {
        case 1u:
          unint64_t v14 = 0xEE0064657474696DLL;
          unint64_t v13 = 0x6275732D6F747561;
          break;
        case 2u:
          unint64_t v14 = 0xE300000000000000;
          unint64_t v13 = 6513506;
          break;
        case 3u:
          unint64_t v14 = 0xE200000000000000;
          unint64_t v13 = 25443;
          break;
        case 4u:
          unint64_t v15 = "length";
          goto LABEL_11;
        case 5u:
          unint64_t v15 = "content-description";
LABEL_11:
          unint64_t v14 = (unint64_t)v15 | 0x8000000000000000;
          unint64_t v13 = 0xD000000000000013;
          break;
        case 6u:
          unint64_t v13 = 0x2D746E65746E6F63;
          goto LABEL_20;
        case 7u:
          unint64_t v13 = 0xD000000000000010;
          unint64_t v14 = 0x80000001005E9820;
          break;
        case 8u:
          unint64_t v13 = 0xD000000000000019;
          unint64_t v14 = 0x80000001005E9840;
          break;
        case 9u:
          unint64_t v14 = 0xEC00000065707974;
          unint64_t v13 = 0x2D746E65746E6F63;
          break;
        case 0xAu:
          unint64_t v14 = 0xE400000000000000;
          unint64_t v13 = 1702125924;
          break;
        case 0xBu:
          unint64_t v14 = 0xE400000000000000;
          unint64_t v13 = 1836020326;
          break;
        case 0xCu:
          unint64_t v14 = 0xE700000000000000;
          unint64_t v13 = 0x64692D7473696CLL;
          break;
        case 0xDu:
          unint64_t v13 = 0x2D6567617373656DLL;
LABEL_20:
          unint64_t v14 = 0xEA00000000006469;
          break;
        case 0xEu:
          unint64_t v14 = 0xEC0000006E6F6973;
          unint64_t v13 = 0x7265762D656D696DLL;
          break;
        case 0xFu:
          unint64_t v14 = 0xEA00000000007974;
          unint64_t v13 = 0x69726F6972702D78;
          break;
        case 0x10u:
          unint64_t v14 = 0xE800000000000000;
          unint64_t v13 = 0x6465766965636572;
          break;
        case 0x11u:
          unint64_t v14 = 0xEB00000000687461;
          unint64_t v13 = 0x702D6E7275746572;
          break;
        case 0x12u:
          unint64_t v14 = 0xE700000000000000;
          unint64_t v13 = 0x7463656A627573;
          break;
        case 0x13u:
          unint64_t v14 = 0xE200000000000000;
          unint64_t v13 = 28532;
          break;
        default:
          break;
      }
      if ((v14 & 0x1000000000000000) != 0)
      {
        Swift::Int v16 = sub_1005E1E80();
        swift_bridgeObjectRelease();
        if (a1) {
          goto LABEL_32;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((v14 & 0x2000000000000000) != 0) {
          Swift::Int v16 = HIBYTE(v14) & 0xF;
        }
        else {
          Swift::Int v16 = v13 & 0x7F7F7F7F7F7FLL;
        }
        if (a1)
        {
LABEL_32:
          if (v16 == v7) {
            goto LABEL_3;
          }
          goto LABEL_4;
        }
      }
      if (!v16)
      {
LABEL_3:
        unint64_t v8 = sub_1003EB6E0(v11);
        char v10 = sub_1003DA920(v8, v9, a1, a2, (void (*)(uint64_t *__return_ptr, void *))sub_1003CB500);
        swift_bridgeObjectRelease();
        if (v10) {
          return v11;
        }
      }
LABEL_4:
      --v3;
    }
    while (v3);
  }
  return 20;
}

uint64_t sub_1003EBE94(char *a1, char *a2)
{
  char v4 = sub_1003B07AC(0, (uint64_t)a1, (uint64_t)a2);
  char v5 = sub_1003B07AC(1, (uint64_t)a1, (uint64_t)a2);
  unsigned __int8 v6 = sub_1003B07AC(2, (uint64_t)a1, (uint64_t)a2);
  unsigned __int8 v7 = sub_1003B07AC(3, (uint64_t)a1, (uint64_t)a2);
  BOOL v8 = v4 == 120 && v5 == 45;
  int v9 = v8;
  if (v8 && v6 == 97 && v7 == 112)
  {
    char v10 = a1;
    uint64_t v11 = a2;
    uint64_t v12 = 0;
  }
  else
  {
    switch(v4)
    {
      case 'a':
        if (v5 != 117 || v6 != 116 || v7 != 111) {
          goto LABEL_48;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 1;
        break;
      case 'b':
        if (v5 != 99 || v6 != 99 || v7) {
          goto LABEL_48;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 2;
        break;
      case 'c':
        if (v5 == 111)
        {
          if (v6 == 110 && v7 == 116)
          {
            uint64_t result = sub_1003EBB24(a1, a2, (uint64_t)&off_1006EAB08);
            goto LABEL_54;
          }
        }
        else if (v5 == 99 && !(v6 | v7))
        {
          char v10 = a1;
          uint64_t v11 = a2;
          uint64_t v12 = 3;
          break;
        }
        goto LABEL_48;
      case 'd':
        if (v5 != 97 || v6 != 116 || v7 != 101) {
          goto LABEL_48;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 10;
        break;
      case 'f':
        if (v5 != 114 || v6 != 111 || v7 != 109) {
          goto LABEL_48;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 11;
        break;
      case 'l':
        if (v5 != 105 || v6 != 115 || v7 != 116) {
          goto LABEL_48;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 12;
        break;
      case 'm':
        if (v5 == 105)
        {
          if (v6 == 109 && v7 == 101)
          {
            char v10 = a1;
            uint64_t v11 = a2;
            uint64_t v12 = 14;
            break;
          }
        }
        else if (v5 == 101 && v6 == 115 && v7 == 115)
        {
          char v10 = a1;
          uint64_t v11 = a2;
          uint64_t v12 = 13;
          break;
        }
LABEL_48:
        if (v6 != 112) {
          int v9 = 0;
        }
        if (v9 == 1 && v7 == 114)
        {
          char v10 = a1;
          uint64_t v11 = a2;
          uint64_t v12 = 15;
          break;
        }
        if (v4 == 116)
        {
          if (v5 == 111 && !v6 && !v7)
          {
            char v10 = a1;
            uint64_t v11 = a2;
            uint64_t v12 = 19;
            break;
          }
          return 20;
        }
        if (v4 == 115)
        {
          if (v5 == 117 && v6 == 98 && v7 == 106)
          {
            char v10 = a1;
            uint64_t v11 = a2;
            uint64_t v12 = 18;
            break;
          }
          return 20;
        }
        if (v4 != 114 || v5 != 101) {
          return 20;
        }
        if (v6 != 116)
        {
          if (v6 == 99 && v7 == 101)
          {
            char v10 = a1;
            uint64_t v11 = a2;
            uint64_t v12 = 16;
            break;
          }
          return 20;
        }
        if (v7 != 117) {
          return 20;
        }
        char v10 = a1;
        uint64_t v11 = a2;
        uint64_t v12 = 17;
        break;
      default:
        goto LABEL_48;
    }
  }
  uint64_t result = sub_1003AF30C(v10, v11, v12);
LABEL_54:
  if (result == 20) {
    return 20;
  }
  return result;
}

char *sub_1003EC298@<X0>(char *result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  unsigned __int8 v7 = result;
  if (!result)
  {
    if (!a3)
    {
      uint64_t v11 = 0;
      uint64_t v14 = 0;
      a2 = 0;
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  char v10 = &result[a3];
  uint64_t v11 = result;
  if (!a3) {
    goto LABEL_9;
  }
  uint64_t v12 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v12 < 0 || v12 >= a3)
  {
LABEL_49:
    __break(1u);
    JUMPOUT(0x1003EC5D4);
  }
  unint64_t v13 = &result[v12];
  uint64_t v11 = &result[a3];
  if (result[v12] != 58 || (uint64_t result = (char *)sub_1003EBE94(result, v13), v11 = v13, result == 20))
  {
LABEL_9:
    if (a2 - v7 >= a3)
    {
      uint64_t v14 = (uint64_t)&v7[a3];
LABEL_13:
      uint64_t v15 = 0;
      unint64_t v16 = a4 & 1 | 0xA000000000000000;
      char v10 = v7;
      goto LABEL_14;
    }
    goto LABEL_46;
  }
  if (a2 - v7 < a3)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v11 = a2;
  unint64_t v16 = 0x1000000000000000;
  uint64_t v14 = 0;
  a2 = 0;
  uint64_t v15 = 0;
  switch((char)result)
  {
    case 1:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x800000000000000;
      break;
    case 2:
      break;
    case 3:
      uint64_t v14 = 0;
      a2 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0x1800000000000000;
      break;
    case 4:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x2000000000000000;
      break;
    case 5:
      uint64_t result = (char *)sub_1003DD04C((unint64_t)&v7[a3], (uint64_t)v11, a4 & 1);
      a2 = (char *)_swiftEmptyArrayStorage;
      if (v18)
      {
        unint64_t v19 = result;
        unint64_t v20 = (char *)v17;
        uint64_t v21 = v18;
        unsigned __int8 v22 = sub_1003ACC54((uint64_t)result, v17);
        uint64_t v14 = v22 == 3;
        if (v22 == 3) {
          char v10 = v19;
        }
        else {
          char v10 = (char *)v22;
        }
        if (v22 == 3) {
          uint64_t v11 = v20;
        }
        else {
          uint64_t v11 = 0;
        }
        v23[0] = (char *)_swiftEmptyArrayStorage;
        sub_1003DA114(v21, v23);
        uint64_t result = (char *)swift_bridgeObjectRelease();
        a2 = v23[0];
      }
      else
      {
        uint64_t v14 = 1;
      }
      uint64_t v15 = 0;
      unint64_t v16 = 0x2800000000000000;
      break;
    case 6:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x3000000000000000;
      break;
    case 7:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x3800000000000000;
      break;
    case 8:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x4000000000000000;
      break;
    case 9:
      uint64_t result = (char *)sub_1003B2418((unint64_t)&v7[a3], (uint64_t)v11, a4 & 1, (uint64_t)v23);
      char v10 = v23[0];
      uint64_t v11 = v23[1];
      uint64_t v14 = (uint64_t)v23[2];
      a2 = v23[3];
      uint64_t v15 = v25;
      unint64_t v16 = v24 | 0x4800000000000000;
      break;
    case 10:
      uint64_t v14 = 0;
      a2 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0x5000000000000000;
      break;
    case 11:
      uint64_t v14 = 0;
      a2 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0x5800000000000000;
      break;
    case 12:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x6000000000000000;
      break;
    case 13:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x6800000000000000;
      break;
    case 14:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x7000000000000000;
      break;
    case 15:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x7800000000000000;
      break;
    case 16:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x8000000000000000;
      break;
    case 17:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x8800000000000000;
      break;
    case 18:
      a2 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      unint64_t v16 = 0x9000000000000000;
      break;
    case 19:
      uint64_t v14 = 0;
      a2 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0x9800000000000000;
      break;
    default:
      a2 = 0;
      unint64_t v16 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = a4 & 1;
      break;
  }
LABEL_14:
  *a5 = v10;
  a5[1] = v11;
  a5[2] = v14;
  a5[3] = a2;
  a5[4] = v16;
  a5[5] = v15;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader.Value()
{
  return &type metadata for UnsafeHeader.Value;
}

uint64_t destroy for UnsafeHeader(uint64_t a1)
{
  return sub_1003BE4A4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t *initializeWithCopy for UnsafeHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  sub_1003C4D0C(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for UnsafeHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  sub_1003C4D0C(*a2, v4, v5, v6, v7);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  sub_1003BE4A4(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for UnsafeHeader(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  long long v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v8;
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1003BE4A4(v3, v5, v4, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnsafeHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 32) >> 5) & 0xFFFFFFF8 | (*(void *)(a1 + 32) >> 1) & 7;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UnsafeHeader(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = (32 * -a2) & 0x1FFFFFFF00 | (2 * (-a2 & 7));
      *(void *)(a1 + 40) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1003EC838(uint64_t a1)
{
  return *(void *)(a1 + 32) >> 59;
}

uint64_t sub_1003EC844(uint64_t result)
{
  *(void *)(result + 32) &= 0x7FFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1003EC854(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(result + 32) & 0xF1 | (a2 << 59);
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader()
{
  return &type metadata for UnsafeHeader;
}

uint64_t getEnumTagSinglePayload for UnsafeHeader.Field.Known(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UnsafeHeader.Field.Known(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *double result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003EC9D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeader.Field.Known()
{
  return &type metadata for UnsafeHeader.Field.Known;
}

unint64_t sub_1003ECA14()
{
  unint64_t result = qword_100714348;
  if (!qword_100714348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714348);
  }
  return result;
}

uint64_t sub_1003ECA68()
{
  unint64_t v0 = sub_1005E3320();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14) {
    return 20;
  }
  else {
    return v0;
  }
}

ValueMetadata *type metadata accessor for UnsafeHeader.Field()
{
  return &type metadata for UnsafeHeader.Field;
}

uint64_t sub_1003ECACC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 64);
  sub_1003CA88C(*(unsigned char *)(v0 + 64), v1, v2, v3);
  if (v7)
  {
LABEL_5:
    uint64_t v8 = v2;
    if (v2 < v1)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    goto LABEL_6;
  }
  uint64_t v8 = v6;
  if (v6 < v1)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v2 < v6)
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  *(void *)(v0 + 32) = v8;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v4;
  sub_1003CAAD0(0x3Au, v1, v8, v3);
  if (v10) {
    return 0;
  }
  uint64_t v11 = v9;
  if (v8 != v2)
  {
    uint64_t v13 = v3;
    while (2)
    {
      uint64_t v14 = v2 - v8;
      if (v2 > v8)
      {
        uint64_t v15 = v3 + v8;
        int v16 = *(unsigned __int8 *)(v3 + v8);
        if (v16 == 32 || v16 == 9)
        {
          switch(v5)
          {
            case 1:
              uint64_t v18 = v2;
              if (!v3) {
                goto LABEL_61;
              }
              unsigned __int8 v22 = (char *)memchr((void *)(v3 + v8), 13, v2 - v8);
              uint64_t v18 = v2;
              if (!v22) {
                goto LABEL_61;
              }
              uint64_t v18 = v2;
              unint64_t v23 = &v22[-v15];
              if ((uint64_t)&v22[-v15] < 0) {
                goto LABEL_61;
              }
              unsigned __int8 v24 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_80;
              }
              uint64_t v18 = v2;
              if (v14 < (uint64_t)v24) {
                goto LABEL_61;
              }
              if (__OFADD__(v23, v8)) {
                goto LABEL_86;
              }
              uint64_t v18 = (uint64_t)&v24[v8];
              if (__OFADD__(v24, v8)) {
                goto LABEL_87;
              }
              if ((uint64_t)v24 < (uint64_t)v23 || v18 < (uint64_t)&v23[v8]) {
                goto LABEL_88;
              }
              goto LABEL_59;
            case 2:
              uint64_t v18 = v2;
              if (!v3) {
                goto LABEL_61;
              }
              uint64_t v25 = (char *)memchr((void *)(v3 + v8), 10, v2 - v8);
              uint64_t v18 = v2;
              if (!v25) {
                goto LABEL_61;
              }
              uint64_t v18 = v2;
              unint64_t v26 = &v25[-v15];
              if ((uint64_t)&v25[-v15] < 0) {
                goto LABEL_61;
              }
              uint64_t v27 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_81;
              }
              uint64_t v18 = v2;
              if (v14 < (uint64_t)v27) {
                goto LABEL_61;
              }
              if (__OFADD__(v26, v8)) {
                goto LABEL_89;
              }
              uint64_t v18 = (uint64_t)&v27[v8];
              if (__OFADD__(v27, v8)) {
                goto LABEL_90;
              }
              if ((uint64_t)v27 < (uint64_t)v26 || v18 < (uint64_t)&v26[v8]) {
                goto LABEL_91;
              }
              goto LABEL_59;
            case 3:
              uint64_t v18 = v2;
              if (!v3) {
                goto LABEL_61;
              }
              uint64_t v28 = (char *)memchr((void *)(v3 + v8), 10, v2 - v8);
              uint64_t v18 = v2;
              if (!v28) {
                goto LABEL_61;
              }
              uint64_t v18 = v2;
              uint64_t v29 = &v28[-v15];
              if ((uint64_t)&v28[-v15] < 0) {
                goto LABEL_61;
              }
              char v30 = v29 + 1;
              if (__OFADD__(v29, 1)) {
                goto LABEL_82;
              }
              uint64_t v18 = v2;
              if (v14 < (uint64_t)v30) {
                goto LABEL_61;
              }
              uint64_t v31 = (uint64_t)&v29[v8];
              if (__OFADD__(v29, v8)) {
                goto LABEL_92;
              }
              uint64_t v18 = (uint64_t)&v30[v8];
              if (__OFADD__(v30, v8)) {
                goto LABEL_93;
              }
              if ((uint64_t)v30 < (uint64_t)v29 || v18 < v31) {
                goto LABEL_94;
              }
              if (v8 < v31 && v31 > v2) {
                goto LABEL_95;
              }
LABEL_59:
              if (v18 < v8) {
                goto LABEL_74;
              }
              if (v2 < v18) {
                goto LABEL_75;
              }
LABEL_61:
              *(void *)(v0 + 32) = v18;
              *(void *)(v0 + 40) = v2;
              *(void *)(v0 + 48) = v3;
              *(void *)(v0 + 56) = v4;
              if (v18 < v1) {
                goto LABEL_71;
              }
              if (v1 < *(void *)v0) {
                goto LABEL_72;
              }
              if (*(void *)(v0 + 8) < v18) {
                goto LABEL_73;
              }
              uint64_t v13 = *(void *)(v0 + 16);
              uint64_t v8 = v18;
              if (v18 == v2) {
                break;
              }
              continue;
            default:
              uint64_t v18 = v2;
              if (!v3) {
                goto LABEL_61;
              }
              unint64_t v19 = (char *)memmem((const void *)(v3 + v8), v2 - v8, "\r\n", 2uLL);
              uint64_t v18 = v2;
              if (!v19) {
                goto LABEL_61;
              }
              uint64_t v18 = v2;
              unint64_t v20 = &v19[-v15];
              if ((uint64_t)&v19[-v15] < 0) {
                goto LABEL_61;
              }
              uint64_t v21 = v20 + 2;
              if (__OFADD__(v20, 2)) {
                goto LABEL_79;
              }
              uint64_t v18 = v2;
              if (v14 < (uint64_t)v21) {
                goto LABEL_61;
              }
              if (__OFADD__(v20, v8)) {
                goto LABEL_83;
              }
              uint64_t v18 = (uint64_t)&v21[v8];
              if (__OFADD__(v21, v8)) {
                goto LABEL_84;
              }
              if ((uint64_t)v21 < (uint64_t)v20 || v18 < (uint64_t)&v20[v8]) {
                goto LABEL_85;
              }
              goto LABEL_59;
          }
        }
        uint64_t v3 = v13;
        goto LABEL_66;
      }
      break;
    }
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
LABEL_66:
  if (__OFSUB__(v11, v1))
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
    JUMPOUT(0x1003ECE6CLL);
  }
  if (v3) {
    return v3 + v1;
  }
  else {
    return 0;
  }
}

uint64_t WatchOSHeaderInfo.to.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WatchOSHeaderInfo.bcc.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t WatchOSHeaderInfo.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  uint64_t v4 = sub_1005E0970();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for WatchOSHeaderInfo()
{
  uint64_t result = qword_1007143A8;
  if (!qword_1007143A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t WatchOSHeaderInfo.date.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  uint64_t v4 = sub_1005E0970();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

Swift::UInt32 (__swiftcall *WatchOSHeaderInfo.date.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

uint64_t WatchOSHeaderInfo.init(from:to:cc:bcc:subject:messageIDHeader:date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  uint64_t v11 = (char *)a9 + *(int *)(type metadata accessor for WatchOSHeaderInfo() + 40);
  uint64_t v12 = sub_1005E0970();
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  return v13(v11, a11, v12);
}

uint64_t WatchOSHeaderInfo.init(message:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10000566C(&qword_100714098);
  __chkstk_darwin();
  char v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v17[-v8];
  uint64_t v10 = type metadata accessor for WatchOSHeaderInfo();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v15 = &v17[-v14];
  *uint64_t v15 = 0;
  v15[1] = 0;
  sub_1003D0340(a1, (uint64_t (*)(void))sub_1003ED344, a2, (uint64_t)v9);
  sub_1003ED478(a1, type metadata accessor for Message);
  swift_release();
  sub_10001FDF0((uint64_t)v9, (uint64_t)v7, &qword_100714098);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    sub_100007A48((uint64_t)v7, &qword_100714098);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a3, 1, 1, v10);
  }
  else
  {
    sub_1003ED3B0((uint64_t)v7, (uint64_t)v13);
    swift_bridgeObjectRelease();
    sub_1003ED3B0((uint64_t)v13, (uint64_t)v15);
    sub_1003ED414((uint64_t)v15, a3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a3, 0, 1, v10);
    return sub_1003ED478((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for WatchOSHeaderInfo);
  }
}

uint64_t sub_1003ED344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  swift_retain();
  return sub_1003EDC70(a1, a2, a3, a4, v5, a5);
}

uint64_t sub_1003ED3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchOSHeaderInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003ED414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchOSHeaderInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003ED478(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for WatchOSHeaderInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = (char *)a1 + v9;
    a1[8] = a2[8];
    uint64_t v10 = sub_1005E0970();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v15, v14, v10);
  }
  return v3;
}

uint64_t destroy for WatchOSHeaderInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_1005E0970();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for WatchOSHeaderInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v12 = (char *)a2 + v8;
  uint64_t v13 = (char *)a1 + v8;
  a1[8] = a2[8];
  uint64_t v9 = sub_1005E0970();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v13, v12, v9);
  return a1;
}

void *assignWithCopy for WatchOSHeaderInfo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1005E0970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for WatchOSHeaderInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_1005E0970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for WatchOSHeaderInfo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_1005E0970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchOSHeaderInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003EDA50);
}

uint64_t sub_1003EDA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1005E0970();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WatchOSHeaderInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003EDB14);
}

uint64_t sub_1003EDB14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1005E0970();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1003EDBBC()
{
  uint64_t result = sub_1005E0970();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1003EDC70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v211 = a4;
  long long v212 = a5;
  uint64_t v207 = a6;
  uint64_t v206 = sub_1005E0970();
  uint64_t v210 = *(void **)(v206 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000566C(&qword_100713D38);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v190 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v190 - v16;
  __chkstk_darwin();
  unint64_t v19 = (char *)&v190 - v18;
  int v20 = sub_1003D521C(3, a1, a2, a3, v211);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  LODWORD(v205) = v20;
  uint64_t v211 = 0;
  long long v198 = v17;
  long long v199 = v15;
  uint64_t v193 = v11;
  uint64_t v208 = v13;
  uint64_t v209 = v10;
  uint64_t v25 = v210;
  uint64_t v195 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v210[7];
  uint64_t v196 = v210 + 7;
  v195(v19, 1, 1, v206);
  if (v24 < 0) {
    goto LABEL_255;
  }
  uint64_t v26 = (uint64_t)v19;
  if (v22) {
    uint64_t v27 = v22 + v24;
  }
  else {
    uint64_t v27 = 0;
  }
  sub_1003EB6B4(v22, v27, (char)v205, (uint64_t)&v219);
  uint64_t v28 = (char *)sub_1003ECACC();
  if (v31 == 2)
  {
    swift_release();
    uint64_t v32 = v207;
LABEL_230:
    sub_100007A48(v26, &qword_100713D38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_231:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_232;
  }
  long long v197 = v19;
  uint64_t v33 = 0;
  uint64_t v201 = 0;
  uint64_t v202 = 0;
  uint64_t v200 = 0;
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  uint64_t v194 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 6);
  v190 = (void (**)(char *, uint64_t, uint64_t))(v25 + 4);
  char v34 = _swiftEmptyArrayStorage;
  uint64_t v204 = _swiftEmptyArrayStorage;
  uint64_t v205 = _swiftEmptyArrayStorage;
  uint64_t v36 = (uint64_t)v208;
  uint64_t v35 = v209;
  uint64_t v37 = v211;
  uint64_t v38 = v212;
  while (2)
  {
    sub_1003EC298(v28, v29, v30, v31 & 1, v220);
    sub_1003B52C0((uint64_t)v220, (uint64_t)&v240);
    switch(v242 >> 59)
    {
      case 2uLL:
        uint64_t v211 = v33;
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        uint64_t v40 = v240;
        uint64_t v41 = v241;
        swift_bridgeObjectRelease();
        if (v40) {
          uint64_t v42 = v41 - v40;
        }
        else {
          uint64_t v42 = 0;
        }
        if (v42 < 0) {
          goto LABEL_251;
        }
        uint64_t v210 = v34;
        uint64_t v43 = sub_1003E89B0(0, v42, v40, v41);
        if (v45) {
          uint64_t v46 = v45 + v44;
        }
        else {
          uint64_t v46 = 0;
        }
        if (v45) {
          uint64_t v47 = v45 + v43;
        }
        else {
          uint64_t v47 = 0;
        }
        int64_t v214 = 0;
        unint64_t v215 = 0xE000000000000000;
        uint64_t v48 = v46 - v47;
        if (v47) {
          Swift::Int v49 = v46 - v47;
        }
        else {
          Swift::Int v49 = 0;
        }
        swift_retain();
        sub_1005E1D10(v49);
        char v213 = 0;
        if (v47)
        {
          if (v48 < 0) {
            goto LABEL_260;
          }
          if (v48 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
          {
            uint64_t v216 = (char *)swift_slowAlloc();
            uint64_t v217 = v46 - v47;
            uint64_t v218 = 0;
            sub_1003D8D10((int64_t)&v216, &v214, v47, v46, v212, &v213);
            swift_slowDealloc();
            goto LABEL_122;
          }
        }
        else
        {
          uint64_t v48 = 0;
        }
        __chkstk_darwin();
        uint64_t v216 = (char *)&v190 - v109;
        uint64_t v217 = v48;
        uint64_t v218 = 0;
        sub_1003D8D10((int64_t)&v216, &v214, v47, v46, v212, &v213);
        if (v37) {
          goto LABEL_264;
        }
LABEL_122:
        swift_release();
        unint64_t v110 = v215;
        NSString v111 = sub_1005E1BD0();
        id v112 = IMAP2EmailCore_ECEmailAddressesFromHeader(v111);

        sub_1003B42AC();
        unint64_t v113 = sub_1005E20C0();

        if (v113 >> 62)
        {
          unint64_t v115 = v113;
          swift_bridgeObjectRetain();
          uint64_t v114 = sub_1005E2FB0();
        }
        else
        {
          uint64_t v114 = *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
          unint64_t v115 = v113;
          swift_bridgeObjectRetain();
        }
        uint64_t v205 = (void *)v37;
        uint64_t v203 = v110;
        if (v114)
        {
          if (v114 < 1) {
            goto LABEL_257;
          }
          uint64_t v116 = 0;
          unint64_t v117 = v115;
          unint64_t v118 = v115 & 0xC000000000000001;
          unint64_t v119 = (char *)_swiftEmptyArrayStorage;
          while (2)
          {
            if (v118) {
              id v120 = (id)sub_1005E2CF0();
            }
            else {
              id v120 = *(id *)(v117 + 8 * v116 + 32);
            }
            unint64_t v121 = v120;
            uint64_t v122 = sub_1003B3600(v120, 0);

            uint64_t v123 = v122[2];
            int64_t v124 = *((void *)v119 + 2);
            int64_t v125 = v124 + v123;
            if (__OFADD__(v124, v123)) {
              goto LABEL_237;
            }
            char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && v125 <= *((void *)v119 + 3) >> 1)
            {
              if (!v122[2])
              {
LABEL_127:
                if (v123) {
                  goto LABEL_240;
                }
LABEL_128:
                swift_bridgeObjectRelease();
                if (v114 == ++v116) {
                  goto LABEL_195;
                }
                continue;
              }
            }
            else
            {
              if (v124 <= v125) {
                int64_t v127 = v124 + v123;
              }
              else {
                int64_t v127 = v124;
              }
              unint64_t v119 = sub_1003EFAFC(isUniquelyReferenced_nonNull_native, v127, 1, v119);
              if (!v122[2]) {
                goto LABEL_127;
              }
            }
            break;
          }
          if ((*((void *)v119 + 3) >> 1) - *((void *)v119 + 2) < v123) {
            goto LABEL_244;
          }
          swift_arrayInitWithCopy();
          if (v123)
          {
            uint64_t v128 = *((void *)v119 + 2);
            BOOL v107 = __OFADD__(v128, v123);
            uint64_t v129 = v128 + v123;
            if (v107) {
              goto LABEL_247;
            }
            *((void *)v119 + 2) = v129;
          }
          goto LABEL_128;
        }
        unint64_t v119 = (char *)_swiftEmptyArrayStorage;
LABEL_195:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v38 = v212;
        swift_retain();
        uint64_t v37 = (uint64_t)v205;
        uint64_t v205 = sub_1003F08E4((uint64_t)v119, (uint64_t)v38);
        goto LABEL_208;
      case 3uLL:
        uint64_t v211 = v33;
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        uint64_t v51 = v240;
        uint64_t v52 = v241;
        swift_bridgeObjectRelease();
        if (v51) {
          uint64_t v53 = v52 - v51;
        }
        else {
          uint64_t v53 = 0;
        }
        if (v53 < 0) {
          goto LABEL_252;
        }
        uint64_t v210 = v34;
        uint64_t v54 = sub_1003E89B0(0, v53, v51, v52);
        if (v56) {
          uint64_t v57 = v56 + v55;
        }
        else {
          uint64_t v57 = 0;
        }
        if (v56) {
          uint64_t v58 = v56 + v54;
        }
        else {
          uint64_t v58 = 0;
        }
        int64_t v214 = 0;
        unint64_t v215 = 0xE000000000000000;
        uint64_t v59 = v57 - v58;
        if (v58) {
          Swift::Int v60 = v57 - v58;
        }
        else {
          Swift::Int v60 = 0;
        }
        swift_retain();
        sub_1005E1D10(v60);
        char v213 = 0;
        if (v58)
        {
          if (v59 < 0) {
            goto LABEL_261;
          }
          if (v59 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
          {
            uint64_t v216 = (char *)swift_slowAlloc();
            uint64_t v217 = v57 - v58;
            uint64_t v218 = 0;
            sub_1003D8D10((int64_t)&v216, &v214, v58, v57, v212, &v213);
            swift_slowDealloc();
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v59 = 0;
        }
        __chkstk_darwin();
        uint64_t v216 = (char *)&v190 - v87;
        uint64_t v217 = v59;
        uint64_t v218 = 0;
        sub_1003D8D10((int64_t)&v216, &v214, v58, v57, v212, &v213);
        if (v37) {
          goto LABEL_264;
        }
LABEL_98:
        swift_release();
        unint64_t v88 = v215;
        NSString v89 = sub_1005E1BD0();
        id v90 = IMAP2EmailCore_ECEmailAddressesFromHeader(v89);

        sub_1003B42AC();
        unint64_t v91 = sub_1005E20C0();

        if (v91 >> 62)
        {
          unint64_t v93 = v91;
          swift_bridgeObjectRetain();
          uint64_t v92 = sub_1005E2FB0();
          uint64_t v203 = v88;
          uint64_t v204 = (void *)v37;
          if (!v92) {
            goto LABEL_206;
          }
LABEL_100:
          if (v92 < 1) {
            goto LABEL_256;
          }
          uint64_t v94 = 0;
          unint64_t v95 = v93;
          unint64_t v96 = v93 & 0xC000000000000001;
          uint64_t v97 = (char *)_swiftEmptyArrayStorage;
          while (1)
          {
            if (v96) {
              id v98 = (id)sub_1005E2CF0();
            }
            else {
              id v98 = *(id *)(v95 + 8 * v94 + 32);
            }
            unint64_t v99 = v98;
            unint64_t v100 = sub_1003B3600(v98, 0);

            uint64_t v101 = v100[2];
            int64_t v102 = *((void *)v97 + 2);
            int64_t v103 = v102 + v101;
            if (__OFADD__(v102, v101)) {
              goto LABEL_236;
            }
            uint64_t v104 = (char *)swift_isUniquelyReferenced_nonNull_native();
            if (v104 && v103 <= *((void *)v97 + 3) >> 1)
            {
              if (!v100[2]) {
                goto LABEL_102;
              }
            }
            else
            {
              if (v102 <= v103) {
                int64_t v105 = v102 + v101;
              }
              else {
                int64_t v105 = v102;
              }
              uint64_t v97 = sub_1003EFAFC(v104, v105, 1, v97);
              if (!v100[2])
              {
LABEL_102:
                if (v101) {
                  goto LABEL_239;
                }
                goto LABEL_103;
              }
            }
            if ((*((void *)v97 + 3) >> 1) - *((void *)v97 + 2) < v101) {
              goto LABEL_243;
            }
            swift_arrayInitWithCopy();
            if (v101)
            {
              uint64_t v106 = *((void *)v97 + 2);
              BOOL v107 = __OFADD__(v106, v101);
              uint64_t v108 = v106 + v101;
              if (v107) {
                goto LABEL_248;
              }
              *((void *)v97 + 2) = v108;
            }
LABEL_103:
            swift_bridgeObjectRelease();
            if (v92 == ++v94) {
              goto LABEL_207;
            }
          }
        }
        uint64_t v92 = *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v93 = v91;
        swift_bridgeObjectRetain();
        uint64_t v203 = v88;
        uint64_t v204 = (void *)v37;
        if (v92) {
          goto LABEL_100;
        }
LABEL_206:
        uint64_t v97 = (char *)_swiftEmptyArrayStorage;
LABEL_207:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v38 = v212;
        swift_retain();
        uint64_t v37 = (uint64_t)v204;
        uint64_t v204 = sub_1003F08E4((uint64_t)v97, (uint64_t)v38);
LABEL_208:
        swift_bridgeObjectRelease();
        swift_release();
        sub_1003BE46C((uint64_t)v220);
        uint64_t v36 = (uint64_t)v208;
        uint64_t v35 = v209;
        char v34 = v210;
        uint64_t v33 = v211;
LABEL_10:
        uint64_t v28 = (char *)sub_1003ECACC();
        if (v31 != 2) {
          continue;
        }
        swift_release();
        uint64_t v177 = v206;
        uint64_t v32 = v207;
        uint64_t v178 = v200;
        if (!v200)
        {
          uint64_t v26 = (uint64_t)v197;
          goto LABEL_230;
        }
        if (!v201)
        {
          sub_100007A48((uint64_t)v197, &qword_100713D38);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_231;
        }
        sub_10001FDF0((uint64_t)v197, v36, &qword_100713D38);
        if ((*v194)(v36, 1, v177) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100007A48(v36, &qword_100713D38);
LABEL_232:
          uint64_t v179 = type metadata accessor for WatchOSHeaderInfo();
          return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 56))(v32, 1, 1, v179);
        }
        unint64_t v181 = v34;
        uint64_t v182 = v178;
        unint64_t v183 = *v190;
        (*v190)(v35, v36, v177);
        uint64_t v184 = type metadata accessor for WatchOSHeaderInfo();
        uint64_t v185 = v177;
        uint64_t v186 = v184;
        v183((char *)v32 + *(int *)(v184 + 40), (uint64_t)v35, v185);
        *uint64_t v32 = v202;
        v32[1] = v33;
        unint64_t v187 = v204;
        v32[2] = (uint64_t)v181;
        v32[3] = (uint64_t)v187;
        uint64_t v188 = v191;
        v32[4] = (uint64_t)v205;
        v32[5] = v188;
        uint64_t v189 = v192;
        v32[6] = v182;
        v32[7] = v189;
        unsigned char v32[8] = v201;
        return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56))(v32, 0, 1, v186);
      case 0xAuLL:
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1003BDB1C((uint64_t)v220, v38, (uint64_t)v223);
        sub_10001FDF0((uint64_t)v223, (uint64_t)v234, &qword_100713E10);
        if (v235 == 255) {
          goto LABEL_10;
        }
        sub_1003BC9AC(v234, (uint64_t)v236);
        sub_1003BC9AC(v236, (uint64_t)&v237);
        if (v239 != 10)
        {
          sub_1003F0AD0((uint64_t)v223);
          goto LABEL_10;
        }
        uint64_t v71 = v34;
        uint64_t v72 = v237;
        uint64_t v73 = v238;
        uint64_t v74 = v199;
        if ((v238 & 0x1000000000000000) != 0) {
          goto LABEL_224;
        }
        if ((v238 & 0x2000000000000000) != 0)
        {
          uint64_t v216 = (char *)v237;
          uint64_t v217 = v238 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v75 = (const char *)&v216;
          goto LABEL_200;
        }
        if ((v237 & 0x1000000000000000) != 0)
        {
          unint64_t v75 = (const char *)((v238 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_200:
          sub_1003C7470(v75, v199);
          goto LABEL_201;
        }
LABEL_224:
        sub_1005E2C50();
LABEL_201:
        uint64_t v168 = v206;
        if ((*v194)((uint64_t)v74, 1, v206) == 1)
        {
          uint64_t v169 = v73;
          uint64_t v170 = v198;
          sub_1003C64C8(v72, v169, v198);
          sub_100007A48((uint64_t)v74, &qword_100713D38);
        }
        else
        {
          uint64_t v170 = v198;
          (*v190)(v198, (uint64_t)v74, v168);
          v195(v170, 0, 1, v168);
        }
        uint64_t v38 = v212;
        sub_1003F0AD0((uint64_t)v223);
        uint64_t v171 = (uint64_t)v197;
        sub_100007A48((uint64_t)v197, &qword_100713D38);
        sub_10001FDF0((uint64_t)v170, v171, &qword_100713D38);
        char v34 = v71;
        goto LABEL_10;
      case 0xBuLL:
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        uint64_t v76 = v240;
        uint64_t v77 = v241;
        swift_bridgeObjectRelease();
        if (v76) {
          uint64_t v78 = v77 - v76;
        }
        else {
          uint64_t v78 = 0;
        }
        if (v78 < 0) {
          goto LABEL_254;
        }
        uint64_t v210 = v34;
        uint64_t v79 = sub_1003E89B0(0, v78, v76, v77);
        if (v81) {
          uint64_t v82 = v81 + v80;
        }
        else {
          uint64_t v82 = 0;
        }
        if (v81) {
          uint64_t v83 = v81 + v79;
        }
        else {
          uint64_t v83 = 0;
        }
        int64_t v214 = 0;
        unint64_t v215 = 0xE000000000000000;
        uint64_t v84 = v82 - v83;
        if (v83) {
          Swift::Int v85 = v82 - v83;
        }
        else {
          Swift::Int v85 = 0;
        }
        swift_retain();
        sub_1005E1D10(v85);
        char v213 = 0;
        if (v83)
        {
          if (v84 < 0) {
            goto LABEL_263;
          }
          if (v84 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
          {
            uint64_t v216 = (char *)swift_slowAlloc();
            uint64_t v217 = v82 - v83;
            uint64_t v218 = 0;
            sub_1003D8D10((int64_t)&v216, &v214, v83, v82, v212, &v213);
            uint64_t v211 = v37;
            swift_slowDealloc();
            goto LABEL_172;
          }
        }
        else
        {
          uint64_t v84 = 0;
        }
        __chkstk_darwin();
        uint64_t v216 = (char *)&v190 - v150;
        uint64_t v217 = v84;
        uint64_t v218 = 0;
        sub_1003D8D10((int64_t)&v216, &v214, v83, v82, v212, &v213);
        if (v37)
        {
LABEL_264:
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1003EF348);
        }
        uint64_t v211 = 0;
LABEL_172:
        unint64_t v151 = v215;
        NSString v152 = sub_1005E1BD0();
        id v153 = IMAP2EmailCore_ECEmailAddressesFromHeader(v152);

        sub_1003B42AC();
        unint64_t v154 = sub_1005E20C0();

        if (v154 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v155 = sub_1005E2FB0();
          uint64_t v203 = v151;
          if (v155)
          {
LABEL_174:
            if (v155 < 1) {
              goto LABEL_259;
            }
            uint64_t v156 = 0;
            unint64_t v157 = (char *)_swiftEmptyArrayStorage;
            while (2)
            {
              if ((v154 & 0xC000000000000001) != 0) {
                id v158 = (id)sub_1005E2CF0();
              }
              else {
                id v158 = *(id *)(v154 + 8 * v156 + 32);
              }
              unint64_t v159 = v158;
              unint64_t v160 = sub_1003B3600(v158, 0);

              uint64_t v161 = v160[2];
              int64_t v162 = *((void *)v157 + 2);
              int64_t v163 = v162 + v161;
              if (__OFADD__(v162, v161))
              {
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
LABEL_247:
                __break(1u);
LABEL_248:
                __break(1u);
LABEL_249:
                __break(1u);
LABEL_250:
                __break(1u);
LABEL_251:
                __break(1u);
LABEL_252:
                __break(1u);
LABEL_253:
                __break(1u);
LABEL_254:
                __break(1u);
LABEL_255:
                __break(1u);
LABEL_256:
                __break(1u);
LABEL_257:
                __break(1u);
LABEL_258:
                __break(1u);
LABEL_259:
                __break(1u);
LABEL_260:
                __break(1u);
LABEL_261:
                __break(1u);
LABEL_262:
                __break(1u);
LABEL_263:
                __break(1u);
              }
              unint64_t v164 = (char *)swift_isUniquelyReferenced_nonNull_native();
              if (v164 && v163 <= *((void *)v157 + 3) >> 1)
              {
                if (!v160[2])
                {
LABEL_176:
                  if (v161) {
                    goto LABEL_242;
                  }
LABEL_177:
                  swift_bridgeObjectRelease();
                  if (v155 == ++v156) {
                    goto LABEL_215;
                  }
                  continue;
                }
              }
              else
              {
                if (v162 <= v163) {
                  int64_t v165 = v162 + v161;
                }
                else {
                  int64_t v165 = v162;
                }
                unint64_t v157 = sub_1003EFAFC(v164, v165, 1, v157);
                if (!v160[2]) {
                  goto LABEL_176;
                }
              }
              break;
            }
            if ((*((void *)v157 + 3) >> 1) - *((void *)v157 + 2) < v161) {
              goto LABEL_246;
            }
            swift_arrayInitWithCopy();
            if (v161)
            {
              uint64_t v166 = *((void *)v157 + 2);
              BOOL v107 = __OFADD__(v166, v161);
              uint64_t v167 = v166 + v161;
              if (v107) {
                goto LABEL_250;
              }
              *((void *)v157 + 2) = v167;
            }
            goto LABEL_177;
          }
        }
        else
        {
          uint64_t v155 = *(void *)((v154 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v203 = v151;
          if (v155) {
            goto LABEL_174;
          }
        }
        unint64_t v157 = (char *)_swiftEmptyArrayStorage;
LABEL_215:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (*((void *)v157 + 2))
        {
          long long v172 = *((_OWORD *)v157 + 5);
          long long v245 = *((_OWORD *)v157 + 4);
          long long v246 = v172;
          long long v173 = *((_OWORD *)v157 + 7);
          long long v247 = *((_OWORD *)v157 + 6);
          long long v248 = v173;
          long long v174 = *((_OWORD *)v157 + 3);
          long long v243 = *((_OWORD *)v157 + 2);
          long long v244 = v174;
          sub_10001FDF0((uint64_t)&v243, (uint64_t)v249, &qword_100713AA8);
          sub_1003BE4C8((uint64_t)&v243);
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001FDF0((uint64_t)v249, (uint64_t)&v250, &qword_100713AA8);
          uint64_t v36 = (uint64_t)v208;
          uint64_t v35 = v209;
          char v34 = v210;
          uint64_t v37 = v211;
          if (!*((void *)&v250 + 1)) {
            goto LABEL_8;
          }
          uint64_t v175 = HIBYTE(*((void *)&v250 + 1)) & 0xFLL;
          if ((*((void *)&v250 + 1) & 0x2000000000000000) == 0) {
            uint64_t v175 = v250 & 0xFFFFFFFFFFFFLL;
          }
          if (!v175 || v244 == v250 || (sub_1005E3290() & 1) != 0)
          {
LABEL_8:
            uint64_t v38 = v212;
            uint64_t v202 = sub_1003B3030((uint64_t)v212);
            uint64_t v33 = v39;
            sub_1003BE574((uint64_t)&v243);
LABEL_9:
            sub_1003BE46C((uint64_t)v220);
          }
          else
          {
            uint64_t v216 = (char *)sub_1003B3B78();
            uint64_t v217 = v176;
            v251._uint64_t countAndFlagsBits = 15392;
            v251._object = (void *)0xE200000000000000;
            sub_1005E1E30(v251);
            uint64_t v38 = v212;
            v252._uint64_t countAndFlagsBits = sub_1003B3030((uint64_t)v212);
            sub_1005E1E30(v252);
            swift_bridgeObjectRelease();
            v253._uint64_t countAndFlagsBits = 62;
            v253._object = (void *)0xE100000000000000;
            sub_1005E1E30(v253);
            sub_1003BE574((uint64_t)&v243);
            sub_1003BE46C((uint64_t)v220);
            uint64_t v33 = v217;
            uint64_t v202 = (uint64_t)v216;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v38 = v212;
          swift_release();
          sub_1003BE46C((uint64_t)v220);
          uint64_t v202 = 0;
          uint64_t v33 = 0;
          uint64_t v36 = (uint64_t)v208;
          uint64_t v35 = v209;
          char v34 = v210;
          uint64_t v37 = v211;
        }
        goto LABEL_10;
      case 0xDuLL:
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1003BDB1C((uint64_t)v220, v38, (uint64_t)v222);
        sub_10001FDF0((uint64_t)v222, (uint64_t)v229, &qword_100713E10);
        if (v230 != 255)
        {
          sub_1003BC9AC(v229, (uint64_t)v231);
          sub_1003BC9AC(v231, (uint64_t)v232);
          if (v233 == 13)
          {
            uint64_t v192 = v232[0];
            uint64_t v86 = v232[1];
            swift_bridgeObjectRelease();
            uint64_t v201 = v86;
          }
          else
          {
            sub_1003F0AD0((uint64_t)v222);
          }
        }
        goto LABEL_10;
      case 0x12uLL:
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        swift_retain();
        sub_1003BDB1C((uint64_t)v220, v38, (uint64_t)v221);
        sub_10001FDF0((uint64_t)v221, (uint64_t)v224, &qword_100713E10);
        if (v225 != 255)
        {
          sub_1003BC9AC(v224, (uint64_t)v226);
          sub_1003BC9AC(v226, (uint64_t)v227);
          if (v228 == 18)
          {
            uint64_t v191 = v227[0];
            uint64_t v50 = v227[1];
            swift_bridgeObjectRelease();
            uint64_t v200 = v50;
          }
          else
          {
            sub_1003F0AD0((uint64_t)v221);
          }
        }
        goto LABEL_10;
      case 0x13uLL:
        uint64_t v211 = v33;
        v242 &= 0x7FFFFFFFFFFFFFFuLL;
        uint64_t v61 = v240;
        uint64_t v62 = v241;
        swift_bridgeObjectRelease();
        if (v61) {
          uint64_t v63 = v62 - v61;
        }
        else {
          uint64_t v63 = 0;
        }
        if (v63 < 0) {
          goto LABEL_253;
        }
        uint64_t v64 = sub_1003E89B0(0, v63, v61, v62);
        if (v66) {
          uint64_t v67 = v66 + v65;
        }
        else {
          uint64_t v67 = 0;
        }
        if (v66) {
          uint64_t v68 = v66 + v64;
        }
        else {
          uint64_t v68 = 0;
        }
        int64_t v214 = 0;
        unint64_t v215 = 0xE000000000000000;
        uint64_t v69 = v67 - v68;
        if (v68) {
          Swift::Int v70 = v67 - v68;
        }
        else {
          Swift::Int v70 = 0;
        }
        swift_retain();
        sub_1005E1D10(v70);
        char v213 = 0;
        if (v68)
        {
          if (v69 < 0) {
            goto LABEL_262;
          }
          if (v69 >= 1025 && (swift_stdlib_isStackAllocationSafe() & 1) == 0)
          {
            uint64_t v216 = (char *)swift_slowAlloc();
            uint64_t v217 = v67 - v68;
            uint64_t v218 = 0;
            sub_1003D8D10((int64_t)&v216, &v214, v68, v67, v212, &v213);
            swift_slowDealloc();
            goto LABEL_147;
          }
        }
        else
        {
          uint64_t v69 = 0;
        }
        __chkstk_darwin();
        uint64_t v216 = (char *)&v190 - v130;
        uint64_t v217 = v69;
        uint64_t v218 = 0;
        sub_1003D8D10((int64_t)&v216, &v214, v68, v67, v212, &v213);
        if (v37) {
          goto LABEL_264;
        }
LABEL_147:
        swift_release();
        uint64_t v210 = (void *)v215;
        NSString v131 = sub_1005E1BD0();
        id v132 = IMAP2EmailCore_ECEmailAddressesFromHeader(v131);

        sub_1003B42AC();
        unint64_t v133 = sub_1005E20C0();

        if (!(v133 >> 62))
        {
          uint64_t v134 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
          unint64_t v135 = v133;
          swift_bridgeObjectRetain();
          uint64_t v203 = v37;
          if (v134) {
            goto LABEL_149;
          }
          goto LABEL_211;
        }
        unint64_t v135 = v133;
        swift_bridgeObjectRetain();
        uint64_t v134 = sub_1005E2FB0();
        uint64_t v203 = v37;
        if (!v134)
        {
LABEL_211:
          unint64_t v139 = (char *)_swiftEmptyArrayStorage;
LABEL_212:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v38 = v212;
          swift_retain();
          uint64_t v37 = v203;
          char v34 = sub_1003F08E4((uint64_t)v139, (uint64_t)v38);
          swift_bridgeObjectRelease();
          swift_release();
          sub_1003BE46C((uint64_t)v220);
          uint64_t v36 = (uint64_t)v208;
          uint64_t v35 = v209;
          uint64_t v33 = v211;
          goto LABEL_10;
        }
LABEL_149:
        if (v134 < 1) {
          goto LABEL_258;
        }
        uint64_t v136 = 0;
        unint64_t v137 = v135;
        unint64_t v138 = v135 & 0xC000000000000001;
        unint64_t v139 = (char *)_swiftEmptyArrayStorage;
        break;
      default:
        goto LABEL_9;
    }
    break;
  }
  while (1)
  {
    if (v138) {
      id v140 = (id)sub_1005E2CF0();
    }
    else {
      id v140 = *(id *)(v137 + 8 * v136 + 32);
    }
    unint64_t v141 = v140;
    uint64_t v142 = sub_1003B3600(v140, 0);

    uint64_t v143 = v142[2];
    int64_t v144 = *((void *)v139 + 2);
    int64_t v145 = v144 + v143;
    if (__OFADD__(v144, v143)) {
      goto LABEL_238;
    }
    unint64_t v146 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (v146 && v145 <= *((void *)v139 + 3) >> 1)
    {
      if (v142[2]) {
        goto LABEL_165;
      }
    }
    else
    {
      if (v144 <= v145) {
        int64_t v147 = v144 + v143;
      }
      else {
        int64_t v147 = v144;
      }
      unint64_t v139 = sub_1003EFAFC(v146, v147, 1, v139);
      if (v142[2])
      {
LABEL_165:
        if ((*((void *)v139 + 3) >> 1) - *((void *)v139 + 2) < v143) {
          goto LABEL_245;
        }
        swift_arrayInitWithCopy();
        if (v143)
        {
          uint64_t v148 = *((void *)v139 + 2);
          BOOL v107 = __OFADD__(v148, v143);
          uint64_t v149 = v148 + v143;
          if (v107) {
            goto LABEL_249;
          }
          *((void *)v139 + 2) = v149;
        }
        goto LABEL_152;
      }
    }
    if (v143) {
      goto LABEL_241;
    }
LABEL_152:
    swift_bridgeObjectRelease();
    if (v134 == ++v136) {
      goto LABEL_212;
    }
  }
}

char *sub_1003EF390(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714420);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = v8 << 6;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EF488(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714430);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1003EF590(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714470);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    uint64_t v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10000566C(&qword_100714478);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EF6CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100713C88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EF7B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714408);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EF8B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714400);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EF9B0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1003EF9D8(a1, a2, a3, a4, &qword_100714428);
}

char *sub_1003EF9C4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1003EF9D8(a1, a2, a3, a4, &qword_100714438);
}

char *sub_1003EF9D8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000566C(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  size_t v14 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9]) {
      memmove(v13, v14, 56 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1003EFAFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100713C70);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EFC18(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714460);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EFD38(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714468);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EFE58(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714458);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003EFF78(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714450);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003F007C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_1007140D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003F0180(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714110);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1003F028C(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000566C(&qword_100714448);
  uint64_t v10 = *(void *)(type metadata accessor for ReplacementNode() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for ReplacementNode() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_1003F0460(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714440);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1003F0578(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_1007143F8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1003F067C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714410);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1003F0780(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000566C(&qword_100714418);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1003F0884(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1003F0578(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1003F08A4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1003F067C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1003F08C4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1003F0780(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1003F08E4(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_1003F0884(0, v2, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    char v5 = (long long *)(a1 + 32);
    do
    {
      long long v6 = v5[3];
      long long v23 = v5[2];
      long long v24 = v6;
      long long v7 = v5[5];
      long long v25 = v5[4];
      long long v26 = v7;
      long long v8 = v5[1];
      long long v21 = *v5;
      long long v22 = v8;
      sub_10001FDF0((uint64_t)&v21, (uint64_t)v27, &qword_100713AA8);
      sub_10001FDF0((uint64_t)v27, (uint64_t)&v28, &qword_100713AA8);
      if (!*((void *)&v28 + 1)) {
        goto LABEL_9;
      }
      uint64_t v9 = HIBYTE(*((void *)&v28 + 1)) & 0xFLL;
      if ((*((void *)&v28 + 1) & 0x2000000000000000) == 0) {
        uint64_t v9 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (v9 && v22 != v28 && (sub_1005E3290() & 1) == 0)
      {
        sub_1003BE4C8((uint64_t)&v21);
        unint64_t v19 = sub_1003B3B78();
        uint64_t v20 = v16;
        v30._uint64_t countAndFlagsBits = 15392;
        v30._object = (void *)0xE200000000000000;
        sub_1005E1E30(v30);
        v31._uint64_t countAndFlagsBits = sub_1003B3030(a2);
        sub_1005E1E30(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 62;
        v32._object = (void *)0xE100000000000000;
        sub_1005E1E30(v32);
        sub_1003BE574((uint64_t)&v21);
        uint64_t v10 = v19;
        uint64_t v12 = v20;
      }
      else
      {
LABEL_9:
        sub_1003BE4C8((uint64_t)&v21);
        uint64_t v10 = sub_1003B3030(a2);
        uint64_t v12 = v11;
        sub_1003BE574((uint64_t)&v21);
      }
      uint64_t v29 = v3;
      unint64_t v14 = v3[2];
      unint64_t v13 = v3[3];
      if (v14 >= v13 >> 1)
      {
        sub_1003F0884((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v3 = v29;
      }
      _OWORD v3[2] = v14 + 1;
      uint64_t v15 = &v3[2 * v14];
      void v15[4] = v10;
      v15[5] = v12;
      v5 += 6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1003F0AD0(uint64_t a1)
{
  return a1;
}

IMAP2Persistence::AccountLoggerID __swiftcall AccountLoggerID.init(accountIdentifier:)(Swift::String_optional accountIdentifier)
{
  unint64_t object = (unint64_t)accountIdentifier.value._object;
  uint64_t countAndFlagsBits = accountIdentifier.value._countAndFlagsBits;
  uint64_t v3 = sub_10000566C(&qword_100714480);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1005E09A0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v27) = 0;
  if (!object) {
    return 0;
  }
  sub_1005E0980();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1003F0E64((uint64_t)v5);
    if ((object & 0x1000000000000000) != 0)
    {
      uint64_t countAndFlagsBits = sub_1003F13C0();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      unint64_t object = v24;
      if ((v24 & 0x2000000000000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((object & 0x2000000000000000) == 0)
    {
LABEL_5:
      if ((countAndFlagsBits & 0x1000000000000000) != 0)
      {
        uint64_t v10 = (uint64_t *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v11 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v10 = (uint64_t *)sub_1005E2D30();
      }
      uint64_t v12 = 4;
      if (v11 < 4) {
        uint64_t v12 = v11;
      }
      if (!v10) {
        uint64_t v12 = 0;
      }
      if (v12 < 0) {
        __break(1u);
      }
      if (v10) {
        unint64_t v13 = (char *)v10 + v11;
      }
      else {
        unint64_t v13 = 0;
      }
      uint64_t v14 = v12;
      goto LABEL_23;
    }
    uint64_t v25 = countAndFlagsBits;
    uint64_t v26 = object & 0xFFFFFFFFFFFFFFLL;
    if ((object & 0xC00000000000000) != 0) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = HIBYTE(object) & 0xF;
    }
    unint64_t v13 = (char *)&v25 + (HIBYTE(object) & 0xF);
    uint64_t v10 = &v25;
LABEL_23:
    sub_1003F1600(0, v14, (uint64_t)v10, (uint64_t)v13, (uint64_t)&v27 + 4);
    swift_bridgeObjectRelease();
    return (IMAP2Persistence::AccountLoggerID)bswap32(HIDWORD(v27));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  uint64_t v25 = sub_1005E0990();
  LOWORD(v26) = v16;
  BYTE2(v26) = v17;
  BYTE3(v26) = v18;
  BYTE4(v26) = v19;
  BYTE5(v26) = v20;
  BYTE6(v26) = v21;
  HIBYTE(v26) = v22;
  sub_1003F1600(0, 4, (uint64_t)&v25, (uint64_t)&v27, (uint64_t)&v27 + 4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (IMAP2Persistence::AccountLoggerID)bswap32(HIDWORD(v27));
}

uint64_t sub_1003F0E64(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_100714480);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AccountLoggerID.debugDescription.getter()
{
  sub_1003F16E0();
  uint64_t v0 = sub_1005E1F20();
  uint64_t v2 = v1;
  uint64_t result = sub_1005E1DC0();
  Swift::Int v4 = 8 - result;
  if (__OFSUB__(8, result))
  {
    __break(1u);
  }
  else
  {
    v6._uint64_t countAndFlagsBits = 48;
    v6._unint64_t object = (void *)0xE100000000000000;
    uint64_t v5 = sub_1005E1F10(v6, v4);
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = v0;
    v7._unint64_t object = v2;
    sub_1005E1E30(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1003F0F70()
{
  sub_1003F16E0();
  uint64_t v0 = sub_1005E1F20();
  uint64_t v2 = v1;
  uint64_t result = sub_1005E1DC0();
  Swift::Int v4 = 8 - result;
  if (__OFSUB__(8, result))
  {
    __break(1u);
  }
  else
  {
    v6._uint64_t countAndFlagsBits = 48;
    v6._unint64_t object = (void *)0xE100000000000000;
    uint64_t v5 = sub_1005E1F10(v6, v4);
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = v0;
    v7._unint64_t object = v2;
    sub_1005E1E30(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

IMAP2Persistence::EngineAccountMailboxLoggerID __swiftcall EngineAccountMailboxLoggerID.init(engine:account:mailbox:)(IMAP2Tracing::EngineLoggerID engine, IMAP2Persistence::AccountLoggerID account, NIOIMAPCore2::MailboxName mailbox)
{
  uint64_t v3 = engine.id.rawValue | (*(void *)&account.rawValue << 32);
  rawValue = mailbox.bytes._rawValue;
  Swift::UInt32 value = mailbox._hashValue._value;
  result.mailbox.bytes._rawValue = rawValue;
  result.engine = (IMAP2Tracing::EngineLoggerID)v3;
  result.account = *(IMAP2Persistence::AccountLoggerID *)((char *)&v3 + 4);
  result.mailbox._hashValue._Swift::UInt32 value = value;
  return result;
}

uint64_t variable initialization expression of FlagsWithModifications.originalFlags()
{
  return 2;
}

unint64_t variable initialization expression of Activity.statuses()
{
  return sub_1003F104C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1003F104C(uint64_t a1)
{
  uint64_t v2 = sub_10000566C(&qword_1007144A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    Swift::String v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000566C(&qword_1007144B0);
  uint64_t v6 = sub_1005E2FF0();
  Swift::String v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1003F1898(v12, (uint64_t)v5);
    uint64_t v14 = *v5;
    Swift::UInt v15 = v5[1];
    unint64_t result = sub_1003F643C(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v19 = (uint64_t *)(v7[6] + 16 * result);
    *char v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Activity.MailboxStatus(0);
    unint64_t result = sub_1003F1900(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    long long v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Activity.accountError@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F134C(type metadata accessor for ConnectionStatus.Error, a1);
}

uint64_t variable initialization expression of Activity.MailboxStatus.Info.fetch()
{
  return 0;
}

uint64_t variable initialization expression of FlagsUpdate.junk()
{
  return 3;
}

uint64_t variable initialization expression of MessageMetadata.messageHeader@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F134C(type metadata accessor for MessageMetadata.UnparsedHeader, a1);
}

uint64_t variable initialization expression of MessageSectionData.Segment.initial@<X0>(uint64_t a1@<X8>)
{
  sub_10013668C((uint64_t)v3);
  return sub_10001FDF0((uint64_t)v3, a1, &qword_100714490);
}

uint64_t variable initialization expression of MessageSectionData.Segment.Initial.bodyStructure@<X0>(uint64_t a1@<X8>)
{
  sub_10013E020((uint64_t)v3);
  return sub_10001FDF0((uint64_t)v3, a1, &qword_100714498);
}

uint64_t variable initialization expression of RemoteMailbox.specialUse()
{
  return 7;
}

double variable initialization expression of RemoteMailbox.status@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 41) = 1;
  return result;
}

uint64_t variable initialization expression of ConnectionStatus.Error.details@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F134C(type metadata accessor for ConnectionStatus.Error.Details, a1);
}

uint64_t variable initialization expression of ConnectionStatus.Error.backedOffUntil@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F134C((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_1003F134C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t sub_1003F13C0()
{
  unint64_t v0 = sub_1005E1F50();
  uint64_t v4 = sub_1003F1440(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1003F1440(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10008436C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unint64_t v11 = sub_1003F1598(v9, 0),
          unint64_t v12 = sub_10008446C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = sub_1005E1D80();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return sub_1005E1D80();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  sub_1005E2D30();
LABEL_4:
  return sub_1005E1D80();
}

void *sub_1003F1598(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000566C(&qword_1007144B8);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  long long v4[2] = a1;
  _OWORD v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1003F1600(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = __chkstk_darwin(result);
    __chkstk_darwin(v9);
    if (v5)
    {
      uint64_t v7 = v6 - v5;
      uint64_t v8 = v5;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    return sub_1003F1A1C(v8, v7);
  }
  return result;
}

unint64_t sub_1003F16E0()
{
  unint64_t result = qword_100714488;
  if (!qword_100714488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100714488);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountLoggerID()
{
  return &type metadata for AccountLoggerID;
}

void *initializeBufferWithCopyOfBuffer for FetchedWindow(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for EngineAndAccountLoggerID()
{
  return &type metadata for EngineAndAccountLoggerID;
}

uint64_t sub_1003F1768(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EngineAccountMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for EngineAccountMailboxLoggerID(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EngineAccountMailboxLoggerID(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for EngineAccountMailboxLoggerID()
{
  return &type metadata for EngineAccountMailboxLoggerID;
}

void type metadata accessor for ThermalState(uint64_t a1)
{
}

uint64_t sub_1003F1898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007144A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003F1900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Activity.MailboxStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003F1964(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = sub_1001F94DC(0, *a3, v9, v8);
  uint64_t result = sub_1001F94DC(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v13 = a1 + v10;
  }
  else {
    uint64_t v13 = 0;
  }
  return a4(v13, v12);
}

uint64_t sub_1003F1A1C(uint64_t a1, uint64_t a2)
{
  return sub_1003F1964(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

uint64_t static Action.FetchedWindowUpdate.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_1003F2604(a1, a2 & 1, a3, a4 & 1);
}

uint64_t static Action.UnreadCountOutsideWindowOfInterest.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  return sub_1003F2638(a1, a2, a3, a4 & 0x1FF, a5, a6, a7, a8 & 0x1FF);
}

uint64_t sub_1003F1A78(void *a1, void *a2)
{
  return static Action.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t Action.kind.getter(unint64_t a1)
{
  unint64_t v2 = (a1 >> 58) & 0x3C | (a1 >> 1) & 3;
  uint64_t result = 1;
  switch(v2)
  {
    case 1uLL:
      uint64_t result = 3;
      break;
    case 2uLL:
      uint64_t result = 4;
      break;
    case 3uLL:
      uint64_t result = 5;
      break;
    case 4uLL:
      uint64_t result = 6;
      break;
    case 5uLL:
      uint64_t result = 7;
      break;
    case 6uLL:
      uint64_t result = 8;
      break;
    case 7uLL:
      uint64_t result = 9;
      break;
    case 8uLL:
      uint64_t result = 10;
      break;
    case 9uLL:
      uint64_t result = 11;
      break;
    case 0xAuLL:
      uint64_t result = 12;
      break;
    case 0xBuLL:
      uint64_t result = 13;
      break;
    case 0xCuLL:
      uint64_t result = 14;
      break;
    case 0xDuLL:
      uint64_t result = 15;
      break;
    case 0xEuLL:
      uint64_t result = 16;
      break;
    case 0xFuLL:
      uint64_t result = 17;
      break;
    case 0x10uLL:
      uint64_t result = 18;
      break;
    case 0x11uLL:
      uint64_t result = 19;
      break;
    case 0x12uLL:
      uint64_t result = 20;
      break;
    case 0x13uLL:
      uint64_t result = 21;
      break;
    case 0x14uLL:
      uint64_t result = 22;
      break;
    case 0x15uLL:
      uint64_t result = 23;
      break;
    case 0x16uLL:
      uint64_t result = 24;
      break;
    case 0x17uLL:
      uint64_t result = 25;
      break;
    case 0x18uLL:
      uint64_t result = 30;
      break;
    case 0x19uLL:
      uint64_t result = 31;
      break;
    case 0x1AuLL:
      uint64_t result = 33;
      break;
    case 0x1BuLL:
      uint64_t result = 26;
      break;
    case 0x1CuLL:
      uint64_t result = 27;
      break;
    case 0x1DuLL:
      uint64_t result = 28;
      break;
    case 0x1EuLL:
      uint64_t result = 29;
      break;
    case 0x1FuLL:
      uint64_t result = 32;
      break;
    case 0x20uLL:
      uint64_t result = 34;
      break;
    case 0x21uLL:
      uint64_t result = 35;
      break;
    case 0x22uLL:
      uint64_t result = 36;
      break;
    case 0x23uLL:
      uint64_t result = 37;
      break;
    case 0x24uLL:
      uint64_t result = 38;
      break;
    case 0x25uLL:
      uint64_t result = 39;
      break;
    case 0x26uLL:
      uint64_t result = 40;
      break;
    case 0x27uLL:
      uint64_t result = 41;
      break;
    case 0x28uLL:
      uint64_t result = 42;
      break;
    case 0x29uLL:
      uint64_t result = 43;
      break;
    case 0x2AuLL:
      uint64_t result = 44;
      break;
    case 0x2BuLL:
      uint64_t result = 2 * (a1 != 0xA000000000000006);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t Action.Kind.description.getter(char a1)
{
  unint64_t result = 0x6944656E69676E65;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64657243646E6573;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x614E657461647075;
      break;
    case 5:
    case 13:
    case 17:
    case 34:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000022;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0x617373654D746567;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    case 16:
      unint64_t result = 0xD000000000000025;
      break;
    case 18:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000021;
      break;
    case 20:
      unint64_t result = 0xD000000000000012;
      break;
    case 21:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000017;
      break;
    case 23:
      unint64_t result = 0xD000000000000018;
      break;
    case 24:
      unint64_t result = 0xD000000000000016;
      break;
    case 25:
      unint64_t result = 0x6C46657461647075;
      break;
    case 26:
      unint64_t result = 0xD000000000000018;
      break;
    case 27:
      unint64_t result = 0xD000000000000018;
      break;
    case 28:
      unint64_t result = 0xD000000000000010;
      break;
    case 29:
      unint64_t result = 0xD000000000000016;
      break;
    case 30:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 31:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 32:
      unint64_t result = 0xD000000000000019;
      break;
    case 33:
      unint64_t result = 0xD000000000000014;
      break;
    case 35:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 36:
      unint64_t result = 0xD000000000000012;
      break;
    case 37:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 38:
      unint64_t result = 0xD000000000000011;
      break;
    case 39:
      unint64_t result = 0xD000000000000010;
      break;
    case 40:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 41:
      unint64_t result = 0xD000000000000019;
      break;
    case 42:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 43:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 44:
      unint64_t result = 0xD00000000000001DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1003F2200()
{
  return Action.Kind.description.getter(*v0);
}

uint64_t ActionID.next.getter(int a1)
{
  return (a1 + 1) & 0xFFFFFF;
}

uint64_t ActionID.description.getter()
{
  return sub_1005E1F20();
}

uint64_t sub_1003F2254()
{
  return sub_1005E1F20();
}

uint64_t MailboxMetadata.init(validity:fetchedWindow:highestModificationSequenceValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_DWORD *)a6 = result;
  *(unsigned char *)(a6 + 4) = BYTE4(result) & 1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

BOOL sub_1003F22C0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return _s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0((BOOL)v5, (uint64_t)v7);
}

IMAP2Persistence::MailboxSyncStatus __swiftcall MailboxSyncStatus.init(latestSyncedChange:serverUnreadCount:)(IMAP2Persistence::ChangeID_optional latestSyncedChange, Swift::Int_optional serverUnreadCount)
{
  serverUnreadCount.is_nil &= 1u;
  unint64_t v2 = latestSyncedChange.value.rawValue | ((unint64_t)latestSyncedChange.is_nil << 32);
  result.serverUnreadCount = serverUnreadCount;
  result.latestSyncedChange = (IMAP2Persistence::ChangeID_optional)v2;
  *(_WORD *)result.gap5 = *(_WORD *)((char *)&v2 + 5);
  result.gap5[2] = HIBYTE(v2);
  return result;
}

uint64_t static MailboxSyncStatus.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a1 & 0x100000000) != 0)
  {
    if ((a4 & 0x100000000) == 0) {
      return 0;
    }
LABEL_6:
    if (a3)
    {
      if (a6) {
        return 1;
      }
    }
    else if ((a6 & 1) == 0 && a2 == a5)
    {
      return 1;
    }
    return 0;
  }
  int v6 = a1;
  uint64_t result = 0;
  if ((a4 & 0x100000000) == 0 && v6 == a4) {
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1003F237C(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4))
  {
    if (!*(unsigned char *)(a2 + 4)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != *(_DWORD *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a2 + 16)) {
      return 1;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
      char v4 = *(unsigned char *)(a2 + 16);
    }
    else {
      char v4 = 1;
    }
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

unint64_t MessageFlagUpdate.flags.getter(uint64_t a1, unsigned int a2)
{
  return __PAIR64__(a2, HIDWORD(a1));
}

uint64_t MessageFlagUpdate.flags.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 4) = result;
  *(unsigned char *)(v2 + 12) = a2;
  return result;
}

unint64_t MessageFlagUpdate.init(message:flags:gmailLabels:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 2 && a4 == 0) {
    return 0;
  }
  else {
    return a1 | (unint64_t)(a2 << 32);
  }
}

BOOL static MessageFlagUpdate.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)&var10[4] = HIDWORD(a4);
  *(void *)&var10[8] = a5;
  uint64_t v6 = *(void *)&var10[4];
  *(_DWORD *)var10 = a1;
  *(void *)&var10[4] = __PAIR64__(a2, HIDWORD(a1));
  var10[12] = BYTE4(a2);
  uint64_t v7 = *(void *)var10;
  uint64_t v8 = *(void *)&var10[8];
  *(_DWORD *)var10 = a4;
  *(void *)&var10[4] = v6;
  var10[12] = BYTE4(a5);
  return sub_1003F26C0(v7, v8, a3, *(uint64_t *)var10, *(uint64_t *)&var10[8], a6);
}

BOOL sub_1003F2478(uint64_t a1, uint64_t a2)
{
  *(void *)((char *)&v4 + 4) = *(void *)(a1 + 4);
  BYTE12(v4) = *(unsigned char *)(a1 + 12);
  long long v2 = v4;
  LODWORD(v4) = *(_DWORD *)a2;
  *(void *)((char *)&v4 + 4) = *(void *)(a2 + 4);
  BYTE12(v4) = *(unsigned char *)(a2 + 12);
  return sub_1003F26C0(v2, *((uint64_t *)&v2 + 1), *(void *)(a1 + 16), v4, *((uint64_t *)&v4 + 1), *(void *)(a2 + 16));
}

uint64_t static Action.UnreadCountOutsideWindowOfInterest.Count.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_1003F2798(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1);
}

uint64_t sub_1003F24D0(uint64_t a1, uint64_t a2)
{
  return sub_1003F2638(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 25) << 8), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned __int8 *)(a2 + 24) | (unsigned __int16)(*(unsigned __int8 *)(a2 + 25) << 8));
}

uint64_t Action.UnreadCountOutsideWindowOfInterest.Count.serverUnreadCount.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1003F2528(uint64_t a1, uint64_t a2)
{
  return sub_1003F2798(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_1003F2554(uint64_t a1, uint64_t a2)
{
  return sub_1003F2604(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL _s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0(BOOL result, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 4);
  if (*(unsigned char *)(result + 4))
  {
    if (!*(unsigned char *)(a2 + 4)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)result != *(_DWORD *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  char v3 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(result + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a2 + 8) != *(void *)(result + 8)) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if (*(unsigned char *)(result + 32)) {
    return (*(unsigned char *)(a2 + 32) & 1) != 0;
  }
  if (*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (((v5 | v4) & 0x8000000000000000) == 0) {
    return v5 == v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003F2604(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  BOOL v5 = (a4 & 1) == 0 && a3 == a1;
  unsigned int v6 = a4 & (a3 == 0);
  if (a1) {
    unsigned int v6 = a4 & (a3 != 0);
  }
  if (a2) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t sub_1003F2638(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  if ((a4 & 0x100) != 0)
  {
    if (a3 | a2 | a1 || (_BYTE)a4)
    {
      if ((_BYTE)a8) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = (a7 | a6 | a5) == 0;
      }
      unsigned int v10 = !v11;
    }
    else
    {
      if ((_BYTE)a8) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = (a7 | a6 | a5) == 0;
      }
      unsigned int v10 = v9;
    }
    if ((a8 & 0x100) != 0) {
      return v10;
    }
    else {
      return 0;
    }
  }
  else
  {
    if ((a8 & 0x100) == 0 && a1 == a5 && a6 == a2)
    {
      if (a4)
      {
        if (a8) {
          return 1;
        }
      }
      else if ((a8 & 1) == 0 && a3 == a7)
      {
        return 1;
      }
    }
    return 0;
  }
}

BOOL sub_1003F26C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 != a1) {
    return 0;
  }
  if (BYTE4(a1) == 2)
  {
    if (BYTE4(a4) != 2) {
      return 0;
    }
  }
  else if (BYTE4(a4) == 2 {
         || (sub_10040B324(__PAIR64__(a2, HIDWORD(a1)) & 0xFFFFFFFF01010101, SBYTE4(a2), __PAIR64__(a5, HIDWORD(a4)) & 0xFFFFFFFF01010101, BYTE4(a5)) & 1) == 0)
  }
  {
    return 0;
  }
  if (a3)
  {
    if (!a6) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    char v9 = sub_100013754(v8, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v9 & 1) != 0;
  }
  return !a6;
}

uint64_t sub_1003F2798(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = 0;
  if (a1 == a5 && a6 == a2)
  {
    if (a4)
    {
      if (a8) {
        return 1;
      }
    }
    else if ((a8 & 1) == 0 && a3 == a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int _s16IMAP2Persistence6ActionO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2)
{
  unint64_t v224 = a2;
  type metadata accessor for Activity(0);
  __chkstk_darwin();
  uint64_t v221 = (uint64_t *)((char *)&v217 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v220 = (uint64_t *)((char *)&v217 - v3);
  type metadata accessor for MessageSectionData(0);
  __chkstk_darwin();
  BOOL v5 = (char *)&v217 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v217 - v6;
  type metadata accessor for MessageHeader();
  __chkstk_darwin();
  uint64_t v222 = (uint64_t)&v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v223 = (uint64_t)&v217 - v9;
  sub_10000566C(&qword_1007144D8);
  __chkstk_darwin();
  BOOL v11 = (char *)&v217 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v219 = (uint64_t)&v217 - v12;
  sub_10000566C(&qword_1007144E0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v217 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __int16 v16 = (char *)&v217 - v15;
  __chkstk_darwin();
  unint64_t v18 = (char *)&v217 - v17;
  __chkstk_darwin();
  uint64_t v20 = (char *)&v217 - v19;
  __chkstk_darwin();
  uint64_t v22 = (char *)&v217 - v21;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v217 - v24;
  switch((v23 >> 58) & 0x3C | (v23 >> 1) & 3)
  {
    case 1uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 1) {
        goto LABEL_226;
      }
      uint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v28 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100440A6C(v27, v28);
    case 2uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 2) {
        goto LABEL_226;
      }
      uint64_t v30 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18);
      uint64_t v31 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v32 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v33 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v34 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18);
      uint64_t v35 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      return static Mailbox.__derived_struct_equals(_:_:)(v32, v30, v31, v33, v34, v35);
    case 3uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 3) {
        goto LABEL_226;
      }
      uint64_t v36 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v37 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_1004365D0(v36, v37);
    case 4uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 4) {
        goto LABEL_226;
      }
      Swift::Int v38 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v39 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100440A70(v38, v39);
    case 5uLL:
      uint64_t v40 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v41 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18);
      __n128 v42 = *(__n128 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      v234[0] = *(__n128 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      v234[1] = v42;
      char v235 = *(unsigned char *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x40);
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 5) {
        goto LABEL_226;
      }
      uint64_t v43 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v44 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18);
      __n128 v45 = *(__n128 *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x30);
      v228[0] = *(__n128 *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      v228[1] = v45;
      char v229 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x40);
      if (v41 != v44 || !sub_100357CFC(v40, v43)) {
        goto LABEL_226;
      }
      char v26 = _s16IMAP2Persistence15MailboxMetadataV23__derived_struct_equalsySbAC_ACtFZ_0((BOOL)v234, (uint64_t)v228);
      return v26 & 1;
    case 6uLL:
      unint64_t v46 = v224;
      if (((v46 >> 58) & 0x3C | (v46 >> 1) & 3) == 6) {
        goto LABEL_135;
      }
      goto LABEL_226;
    case 7uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 7) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v47 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      char v48 = *(unsigned char *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v49 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      char v50 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      if (v48)
      }
        goto LABEL_82;
      if ((v50 & 1) != 0 || !static FetchedWindow.__derived_struct_equals(_:_:)(v47, v49)) {
        goto LABEL_226;
      }
      goto LABEL_208;
    case 8uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 8) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v51 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v52 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v53 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      uint64_t v54 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v55 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v56 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x30);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      BOOL v57 = static FetchedWindow.__derived_struct_equals(_:_:)(v51, v54) && v52 == v55;
      }
      char v26 = v53 == v56 && v57;
      return v26 & 1;
    case 9uLL:
      uint64_t v58 = (uint64_t *)swift_projectBox();
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 9) {
        goto LABEL_226;
      }
      uint64_t v59 = v58;
      uint64_t v60 = *v58;
      uint64_t v61 = v58[1];
      uint64_t v62 = *(int *)(sub_10000566C(&qword_100714508) + 48);
      uint64_t v63 = (uint64_t)v59 + v62;
      uint64_t v64 = (uint64_t *)swift_projectBox();
      uint64_t v65 = *v64;
      uint64_t v66 = v64[1];
      uint64_t v67 = (uint64_t)v64 + v62;
      sub_1000079E4(v63, (uint64_t)v25, &qword_1007144E0);
      sub_1000079E4(v67, (uint64_t)v22, &qword_1007144E0);
      if (v61 == v66 && sub_100357CFC(v60, v65))
      {
        char v26 = sub_100439A0C();
        sub_100007A48((uint64_t)v22, &qword_1007144E0);
        uint64_t v68 = (uint64_t)v25;
        goto LABEL_67;
      }
      long long v212 = &qword_1007144E0;
      sub_100007A48((uint64_t)v22, &qword_1007144E0);
      uint64_t v213 = (uint64_t)v25;
      goto LABEL_213;
    case 0xAuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xA) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v69 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v70 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      char v71 = *(unsigned char *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      uint64_t v72 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v73 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      char v74 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x30);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10))|| (sub_100415A88(v69, v72) & 1) == 0)
      {
        goto LABEL_226;
      }
      if (v71)
      {
        if (v74) {
          goto LABEL_208;
        }
      }
      else
      {
        if (v73 == v70) {
          char v214 = v74;
        }
        else {
          char v214 = 1;
        }
        if ((v214 & 1) == 0) {
          goto LABEL_208;
        }
      }
      goto LABEL_226;
    case 0xBuLL:
      unint64_t v75 = (uint64_t *)swift_projectBox();
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xB) {
        goto LABEL_226;
      }
      uint64_t v76 = v75;
      uint64_t v77 = *v75;
      uint64_t v78 = v75[1];
      uint64_t v79 = *(int *)(sub_10000566C(&qword_100714500) + 48);
      uint64_t v80 = (uint64_t)v76 + v79;
      uint64_t v81 = (uint64_t *)swift_projectBox();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      uint64_t v84 = (uint64_t)v81 + v79;
      sub_1000079E4(v80, (uint64_t)v20, &qword_1007144E0);
      sub_1000079E4(v84, (uint64_t)v18, &qword_1007144E0);
      if (v78 == v83 && sub_100357CFC(v77, v82))
      {
        char v26 = sub_100439A0C();
        sub_100007A48((uint64_t)v18, &qword_1007144E0);
        uint64_t v68 = (uint64_t)v20;
        goto LABEL_67;
      }
      long long v212 = &qword_1007144E0;
      sub_100007A48((uint64_t)v18, &qword_1007144E0);
      uint64_t v213 = (uint64_t)v20;
      goto LABEL_213;
    case 0xCuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xC) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v85 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v86 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      int v87 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      uint64_t v88 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v89 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      char v90 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x30);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10))|| !static FetchedWindow.__derived_struct_equals(_:_:)(v85, v88))
      {
        goto LABEL_226;
      }
      if (v87)
      {
        if (v86)
        {
          if (v89) {
            char v26 = v90;
          }
          else {
            char v26 = 0;
          }
        }
        else if (v89)
        {
          char v26 = 0;
        }
        else
        {
          char v26 = v90;
        }
      }
      else
      {
        char v26 = (v89 == v86) & ~v90;
      }
      return v26 & 1;
    case 0xDuLL:
      unint64_t v91 = (uint64_t *)swift_projectBox();
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xD) {
        goto LABEL_226;
      }
      uint64_t v92 = v91;
      uint64_t v93 = *v91;
      uint64_t v94 = v91[1];
      uint64_t v95 = *(int *)(sub_10000566C(&qword_100714500) + 48);
      uint64_t v96 = (uint64_t)v92 + v95;
      uint64_t v97 = (uint64_t *)swift_projectBox();
      uint64_t v98 = *v97;
      uint64_t v99 = v97[1];
      uint64_t v100 = (uint64_t)v97 + v95;
      sub_1000079E4(v96, (uint64_t)v16, &qword_1007144E0);
      sub_1000079E4(v100, (uint64_t)v14, &qword_1007144E0);
      if (v94 != v99 || !sub_100357CFC(v93, v98))
      {
        long long v212 = &qword_1007144E0;
        sub_100007A48((uint64_t)v14, &qword_1007144E0);
        uint64_t v213 = (uint64_t)v16;
        goto LABEL_213;
      }
      char v26 = sub_100439A0C();
      sub_100007A48((uint64_t)v14, &qword_1007144E0);
      uint64_t v68 = (uint64_t)v16;
LABEL_67:
      sub_100007A48(v68, &qword_1007144E0);
      return v26 & 1;
    case 0xEuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xE) {
        goto LABEL_226;
      }
      uint64_t v101 = v224 & 0xFFFFFFFFFFFFFF9;
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v102 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v103 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      unint64_t v224 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v104 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      __int16 v105 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x38);
      __int16 v106 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x39);
      uint64_t v107 = *(void *)(v101 + 32);
      uint64_t v108 = *(void *)(v101 + 40);
      uint64_t v109 = *(void *)(v101 + 48);
      __int16 v110 = *(unsigned __int8 *)(v101 + 56);
      __int16 v111 = *(unsigned __int8 *)(v101 + 57);
      if (!sub_100357CFC(v102, *(void *)(v101 + 16))) {
        goto LABEL_226;
      }
      uint64_t v112 = v224;
      return sub_1003F2638(v112, v103, v104, v105 | (unsigned __int16)(v106 << 8), v107, v108, v109, v110 | (unsigned __int16)(v111 << 8));
    case 0xFuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0xF) {
        goto LABEL_226;
      }
      uint64_t v113 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v114 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100436BE8(v113, v114);
    case 0x10uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x10) {
        goto LABEL_226;
      }
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v115 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      char v116 = *(unsigned char *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v117 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      char v50 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      if (v116)
      }
      {
LABEL_82:
        if (v50) {
          goto LABEL_208;
        }
      }
      else if ((v50 & 1) == 0 && static FetchModificationResponse.__derived_struct_equals(_:_:)(v115, v117))
      {
        goto LABEL_208;
      }
      goto LABEL_226;
    case 0x11uLL:
      unint64_t v118 = (int *)sub_10000566C(&qword_1007144F8);
      uint64_t v119 = swift_projectBox();
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x11) {
        goto LABEL_226;
      }
      LODWORD(v223) = *(unsigned __int8 *)(v119 + 16);
      uint64_t v120 = v118[20];
      uint64_t v218 = *(void *)(v119 + v120);
      uint64_t v121 = v118[24];
      uint64_t v220 = *(uint64_t **)(v119 + v121);
      LODWORD(v222) = *(unsigned __int8 *)(v119 + v120 + 8);
      uint64_t v123 = *(void *)v119;
      uint64_t v122 = *(void *)(v119 + 8);
      uint64_t v124 = v118[16];
      uint64_t v125 = v119 + v124;
      uint64_t v126 = swift_projectBox();
      uint64_t v128 = *(void *)v126;
      uint64_t v127 = *(void *)(v126 + 8);
      LODWORD(v224) = *(unsigned __int8 *)(v126 + 16);
      uint64_t v129 = v126 + v124;
      uint64_t v217 = *(void *)(v126 + v120);
      LODWORD(v221) = *(unsigned __int8 *)(v126 + v120 + 8);
      uint64_t v130 = *(uint64_t **)(v126 + v121);
      uint64_t v131 = v125;
      uint64_t v132 = v219;
      sub_1000079E4(v131, v219, &qword_1007144D8);
      sub_1000079E4(v129, (uint64_t)v11, &qword_1007144D8);
      if (v122 == v127 && sub_100357CFC(v123, v128) && (sub_100439A10(v223, v224) & 1) != 0)
      {
        char v133 = sub_100437884();
        sub_100007A48((uint64_t)v11, &qword_1007144D8);
        sub_100007A48(v132, &qword_1007144D8);
        if ((v133 & 1) == 0) {
          goto LABEL_226;
        }
        if (v222)
        {
          if (!v221) {
            goto LABEL_226;
          }
          goto LABEL_235;
        }
        char v215 = (char)v221;
        if (v218 != v217) {
          char v215 = 1;
        }
        if ((v215 & 1) == 0)
        {
LABEL_235:
          char v26 = v220 == v130;
          return v26 & 1;
        }
      }
      else
      {
        long long v212 = &qword_1007144D8;
        sub_100007A48((uint64_t)v11, &qword_1007144D8);
        uint64_t v213 = v132;
LABEL_213:
        sub_100007A48(v213, v212);
      }
      goto LABEL_226;
    case 0x12uLL:
      unint64_t v134 = v224;
      if (((v134 >> 58) & 0x3C | (v134 >> 1) & 3) != 0x12) {
        goto LABEL_226;
      }
      goto LABEL_113;
    case 0x13uLL:
      uint64_t v181 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v182 = *(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18);
      uint64_t v183 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x1C);
      int v184 = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      int v185 = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x24);
      sub_1003F4CAC((v23 & 0xFFFFFFFFFFFFFF9) + 40, (uint64_t)v233);
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x13) {
        goto LABEL_226;
      }
      uint64_t v186 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v187 = *(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18);
      uint64_t v188 = *(unsigned __int8 *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x1C);
      uint64_t v189 = (v224 & 0xFFFFFFFFFFFFFF9) + 40;
      int v190 = *(_DWORD *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      LODWORD(v224) = *(_DWORD *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x24);
      sub_1003F4CAC(v189, (uint64_t)v232);
      if ((v182 | (v182 << 32)) != (v187 | (v187 << 32)) || !sub_100357CFC(v181, v186)) {
        goto LABEL_226;
      }
      sub_100370DFC((uint64_t)v233, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10013AAE4);
      sub_100370DFC((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10013AAE4);
      if ((sub_100439A10(v183, v188) & 1) == 0
        || !static IUID.__derived_struct_equals(_:_:)(v184, v190)
        || v185 != v224)
      {
        sub_100370DFC((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
        sub_100370DFC((uint64_t)v233, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
        goto LABEL_226;
      }
      sub_1003F4CAC((uint64_t)v233, (uint64_t)v231);
      if (sub_10006196C((uint64_t)v231) == 1)
      {
        sub_1003F4CAC((uint64_t)v232, (uint64_t)v228);
        if (sub_10006196C((uint64_t)v228) == 1) {
          goto LABEL_208;
        }
        goto LABEL_240;
      }
      sub_1003F4CAC((uint64_t)v232, (uint64_t)v227);
      if (sub_10006196C((uint64_t)v227) == 1)
      {
LABEL_240:
        sub_1003F4CAC((uint64_t)v233, (uint64_t)v228);
        sub_1003F4CAC((uint64_t)v232, (uint64_t)&v230);
        sub_100370BF0((uint64_t)v228);
        goto LABEL_226;
      }
      sub_1003F4CAC((uint64_t)v233, (uint64_t)v225);
      sub_10013A988((uint64_t)v225, (uint64_t)v234);
      sub_1003F4CAC((uint64_t)v232, (uint64_t)v226);
      sub_10013A988((uint64_t)v226, (uint64_t)v228);
      sub_100370DFC((uint64_t)v233, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10013AAE4);
      sub_100370DFC((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10013AAE4);
      char v216 = static MessageAttribute.BodyStructure.__derived_enum_equals(_:_:)(v234, v228);
      sub_100370DFC((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
      sub_100370DFC((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
      sub_100370DFC((uint64_t)v233, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
      sub_100370DFC((uint64_t)v233, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006133C);
      if (v216) {
LABEL_208:
      }
        char v26 = 1;
      else {
LABEL_226:
      }
        char v26 = 0;
      return v26 & 1;
    case 0x14uLL:
      uint64_t v135 = swift_projectBox();
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x14) {
        goto LABEL_226;
      }
      uint64_t v136 = v135;
      uint64_t v137 = *(void *)v135;
      uint64_t v139 = *(unsigned int *)(v135 + 8);
      int v138 = *(_DWORD *)(v135 + 12);
      uint64_t v140 = *(int *)(sub_10000566C(&qword_1007144E8) + 64);
      uint64_t v141 = v136 + v140;
      uint64_t v142 = swift_projectBox();
      uint64_t v143 = *(void *)v142;
      uint64_t v145 = *(unsigned int *)(v142 + 8);
      int v144 = *(_DWORD *)(v142 + 12);
      uint64_t v146 = v142 + v140;
      uint64_t v147 = v141;
      uint64_t v148 = v223;
      sub_1003F4BE4(v147, v223, (uint64_t (*)(void))type metadata accessor for MessageHeader);
      uint64_t v149 = v146;
      uint64_t v150 = v222;
      sub_1003F4BE4(v149, v222, (uint64_t (*)(void))type metadata accessor for MessageHeader);
      if ((v139 | (v139 << 32)) != (v145 | (v145 << 32))
        || !sub_100357CFC(v137, v143)
        || !static IUID.__derived_struct_equals(_:_:)(v138, v144))
      {
        goto LABEL_225;
      }
      uint64_t v151 = sub_1005E1710();
      uint64_t v152 = sub_1005E1710();
      if (*(void *)(v151 + 16) == *(void *)(v152 + 16))
      {
        char v153 = sub_10040C138(v151, v152);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1003F4C4C(v150, (uint64_t (*)(void))type metadata accessor for MessageHeader);
        sub_1003F4C4C(v148, (uint64_t (*)(void))type metadata accessor for MessageHeader);
        if (v153) {
          goto LABEL_208;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_225:
        sub_1003F4C4C(v150, (uint64_t (*)(void))type metadata accessor for MessageHeader);
        sub_1003F4C4C(v148, (uint64_t (*)(void))type metadata accessor for MessageHeader);
      }
      goto LABEL_226;
    case 0x15uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x15) {
        goto LABEL_226;
      }
      uint64_t v154 = swift_projectBox();
      uint64_t v155 = swift_projectBox();
      sub_1003F4BE4(v154, (uint64_t)v7, type metadata accessor for MessageSectionData);
      sub_1003F4BE4(v155, (uint64_t)v5, type metadata accessor for MessageSectionData);
      char v26 = _s16IMAP2Persistence18MessageSectionDataV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v5);
      sub_1003F4C4C((uint64_t)v5, type metadata accessor for MessageSectionData);
      sub_1003F4C4C((uint64_t)v7, type metadata accessor for MessageSectionData);
      return v26 & 1;
    case 0x16uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x16) {
        goto LABEL_226;
      }
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v156 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x1C);
      int v157 = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v158 = *(unsigned __int8 *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x1C);
      int v159 = *(_DWORD *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10))|| (sub_100439A10(v156, v158) & 1) == 0)
      {
        goto LABEL_226;
      }
      return static IUID.__derived_struct_equals(_:_:)(v157, v159);
    case 0x17uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x17) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      uint64_t v191 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v192 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      return sub_100415BE8(v191, v192);
      }
    case 0x18uLL:
      unint64_t v134 = v224;
      if (((v134 >> 58) & 0x3C | (v134 >> 1) & 3) != 0x18) {
        goto LABEL_226;
      }
      goto LABEL_113;
    case 0x19uLL:
      unint64_t v134 = v224;
      if (((v134 >> 58) & 0x3C | (v134 >> 1) & 3) != 0x19) {
        goto LABEL_226;
      }
LABEL_113:
      uint64_t v160 = v23 & 0xFFFFFFFFFFFFFF9;
      uint64_t v161 = v134 & 0xFFFFFFFFFFFFFF9;
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v134 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      goto LABEL_121;
    case 0x1AuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x1A) {
        goto LABEL_226;
      }
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18)) {
        goto LABEL_226;
      }
      Swift::Int v193 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v194 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      return sub_100436D90(v193, v194);
      }
    case 0x1BuLL:
      unint64_t v162 = v224;
      if (((v162 >> 58) & 0x3C | (v162 >> 1) & 3) != 0x1B) {
        goto LABEL_226;
      }
      goto LABEL_120;
    case 0x1CuLL:
      unint64_t v163 = v224;
      if (((v163 >> 58) & 0x3C | (v163 >> 1) & 3) == 0x1C) {
        goto LABEL_184;
      }
      goto LABEL_226;
    case 0x1DuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x1D) {
        goto LABEL_226;
      }
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v200 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      unint64_t v201 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      unint64_t v202 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x30);
      char v203 = *(unsigned char *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x38);
      uint64_t v204 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      unint64_t v205 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v206 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x30);
      char v207 = *(unsigned char *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x38);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      sub_100008D24(v200, v201);
      }
      sub_100008D24(v204, v205);
      char v208 = sub_100439A14(v200, v201, v204, v205);
      sub_1000094D4(v204, v205);
      sub_1000094D4(v200, v201);
      if ((v208 & 1) == 0) {
        goto LABEL_226;
      }
      if (v203)
      {
        if (v207) {
          goto LABEL_208;
        }
      }
      else if ((v207 & 1) == 0 && v202 == v206 && !((v206 ^ v202) >> 32))
      {
        goto LABEL_208;
      }
      goto LABEL_226;
    case 0x1EuLL:
      unint64_t v163 = v224;
      if (((v163 >> 58) & 0x3C | (v163 >> 1) & 3) != 0x1E) {
        goto LABEL_226;
      }
LABEL_184:
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v163 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v163 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v195 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      unint64_t v196 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x28);
      uint64_t v197 = *(void *)((v163 & 0xFFFFFFFFFFFFFF9) + 0x20);
      unint64_t v198 = *(void *)((v163 & 0xFFFFFFFFFFFFFF9) + 0x28);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v163 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      sub_100008D24(v195, v196);
      }
      sub_100008D24(v197, v198);
      char v199 = sub_100439A14(v195, v196, v197, v198);
      sub_1000094D4(v197, v198);
      sub_1000094D4(v195, v196);
      return v199 & 1;
    case 0x1FuLL:
      unint64_t v162 = v224;
      if (((v162 >> 58) & 0x3C | (v162 >> 1) & 3) != 0x1F) {
        goto LABEL_226;
      }
LABEL_120:
      uint64_t v160 = v23 & 0xFFFFFFFFFFFFFF9;
      uint64_t v161 = v162 & 0xFFFFFFFFFFFFFF9;
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v162 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v162 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
LABEL_121:
      uint64_t v164 = *(void *)(v160 + 32);
      uint64_t v165 = *(void *)(v161 + 32);
      char v26 = sub_100357CFC(*(void *)(v160 + 16), *(void *)(v161 + 16)) && v164 == v165;
      return v26 & 1;
    case 0x20uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x20) {
        goto LABEL_226;
      }
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v166 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v167 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      return sub_100436F14(v166, v167);
      }
    case 0x21uLL:
      unint64_t v46 = v224;
      if (((v46 >> 58) & 0x3C | (v46 >> 1) & 3) != 0x21) {
        goto LABEL_226;
      }
      goto LABEL_135;
    case 0x22uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x22) {
        goto LABEL_226;
      }
      uint64_t v168 = *(void **)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v169 = *(void **)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100415968(v168, v169);
    case 0x23uLL:
      unint64_t v46 = v224;
      if (((v46 >> 58) & 0x3C | (v46 >> 1) & 3) != 0x23) {
        goto LABEL_226;
      }
LABEL_135:
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) != *(void *)((v46 & 0xFFFFFFFFFFFFFF9) + 0x18)
        || !sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v46 & 0xFFFFFFFFFFFFFF9) + 0x10)))
      {
        goto LABEL_226;
      }
      goto LABEL_208;
    case 0x24uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x24) {
        goto LABEL_226;
      }
      uint64_t v170 = swift_projectBox();
      uint64_t v171 = swift_projectBox();
      uint64_t v172 = v170;
      long long v173 = v220;
      sub_1003F4BE4(v172, (uint64_t)v220, type metadata accessor for Activity);
      uint64_t v174 = v171;
      uint64_t v175 = v221;
      sub_1003F4BE4(v174, (uint64_t)v221, type metadata accessor for Activity);
      char v26 = _s16IMAP2Persistence8ActivityV23__derived_struct_equalsySbAC_ACtFZ_0(v173, v175);
      sub_1003F4C4C((uint64_t)v175, type metadata accessor for Activity);
      sub_1003F4C4C((uint64_t)v173, type metadata accessor for Activity);
      return v26 & 1;
    case 0x25uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x25) {
        goto LABEL_226;
      }
      uint64_t v176 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v177 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_10043715C(v176, v177);
    case 0x26uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x26
        || *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10) != *(_DWORD *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10))
      {
        goto LABEL_226;
      }
      uint64_t v209 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18);
      uint64_t v210 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18);
      return sub_1004373B0(v209, v210);
    case 0x27uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x27) {
        goto LABEL_226;
      }
      uint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v28 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100440A6C(v27, v28);
    case 0x28uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x28) {
        goto LABEL_226;
      }
      if ((*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32)) != (*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) | ((unint64_t)*(unsigned int *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18) << 32))) {
        goto LABEL_226;
      }
      uint64_t v178 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x20);
      uint64_t v179 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x20);
      if (!sub_100357CFC(*(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10), *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)))goto LABEL_226; {
      return sub_100440D18(v178, v179);
      }
    case 0x29uLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x29) {
        goto LABEL_226;
      }
      uint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10);
      uint64_t v28 = *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10);
      return sub_100440A6C(v27, v28);
    case 0x2AuLL:
      if (((v224 >> 58) & 0x3C | (v224 >> 1) & 3) != 0x2A) {
        goto LABEL_226;
      }
      char v26 = *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x10) == *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x10)
         && *(void *)((v23 & 0xFFFFFFFFFFFFFF9) + 0x18) == *(void *)((v224 & 0xFFFFFFFFFFFFFF9) + 0x18);
      return v26 & 1;
    case 0x2BuLL:
      int v180 = (v224 >> 58) & 0x3C | (v224 >> 1) & 3;
      if (v23 == 0xA000000000000006)
      {
        if (v180 == 43 && v224 == 0xA000000000000006) {
          goto LABEL_208;
        }
        goto LABEL_226;
      }
      if (v180 != 43 || v224 != 0xA00000000000000ELL) {
        goto LABEL_226;
      }
      goto LABEL_208;
    default:
      if ((v224 >> 58) & 0x3C | (v224 >> 1) & 3) {
        goto LABEL_226;
      }
      char v26 = *(_DWORD *)(v23 + 16) == *(_DWORD *)(v224 + 16);
      return v26 & 1;
  }
}

unint64_t sub_1003F4338()
{
  unint64_t result = qword_1007144C8;
  if (!qword_1007144C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007144C8);
  }
  return result;
}

unint64_t sub_1003F4390()
{
  unint64_t result = qword_1007144D0;
  if (!qword_1007144D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007144D0);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for Action(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1003F4418(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1003F4418(unint64_t result)
{
  switch((result >> 58) & 0x3C | (result >> 1) & 3)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
      unint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for Action(unint64_t *a1)
{
  return sub_1003F4510(*a1);
}

unint64_t sub_1003F4510(unint64_t result)
{
  switch((result >> 58) & 0x3C | (result >> 1) & 3)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
      unint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t *assignWithCopy for Action(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1003F4418(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1003F4510(v4);
  return a1;
}

void *initializeWithTake for SearchRequest.Predicate(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for Action(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1003F4510(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x55 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 85);
  }
  unsigned int v3 = ((((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7) >> 1) & 0xFFFFFFBF | ((*(void *)a1 & 1) << 6)) ^ 0x7F;
  if (v3 >= 0x54) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x54)
  {
    *(void *)unint64_t result = a2 - 85;
    if (a3 >= 0x55) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x55) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 6) & 1 | (2 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1003F4728(void *a1)
{
  unsigned int v1 = (*a1 >> 58) & 0x3C | (*a1 >> 1) & 3;
  if (v1 <= 0x2A) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 43;
  }
}

void *sub_1003F474C(void *result)
{
  *result &= 0xFFFFFFFFFFFFFF9uLL;
  return result;
}

unint64_t *sub_1003F4760(unint64_t *result, uint64_t a2)
{
  if (a2 < 0x2B) {
    *unint64_t result = (a2 << 58) & 0xF000000000000000 | (2 * (a2 & 3)) | *result & 0xFFFFFFFFFFFFFF8;
  }
  else {
    *unint64_t result = (8 * (a2 - 43)) | 0xA000000000000006;
  }
  return result;
}

ValueMetadata *type metadata accessor for Action()
{
  return &type metadata for Action;
}

unsigned char *initializeBufferWithCopyOfBuffer for SyncRequest.Kind(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Action.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD4) {
    goto LABEL_17;
  }
  if (a2 + 44 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 44) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 44;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 44;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 44;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2D;
  int v8 = v6 - 45;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Action.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD3)
  {
    unsigned int v6 = ((a2 - 212) >> 8) + 1;
    *unint64_t result = a2 + 44;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003F4914);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 44;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Action.Kind()
{
  return &type metadata for Action.Kind;
}

ValueMetadata *type metadata accessor for ActionID()
{
  return &type metadata for ActionID;
}

__n128 initializeWithCopy for MailboxMetadata(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MailboxMetadata()
{
  return &type metadata for MailboxMetadata;
}

__n128 initializeWithTake for SyncRequest(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for MailboxSyncStatus()
{
  return &type metadata for MailboxSyncStatus;
}

uint64_t sub_1003F49A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessageFlagUpdate(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 4);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 4) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for SearchRequest.Predicate.Day(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MessageFlagUpdate(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessageFlagUpdate()
{
  return &type metadata for MessageFlagUpdate;
}

__n128 initializeWithCopy for Action.UnreadCountOutsideWindowOfInterest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Action.UnreadCountOutsideWindowOfInterest(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Action.UnreadCountOutsideWindowOfInterest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 26) = v3;
  return result;
}

uint64_t sub_1003F4B1C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1003F4B38(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(unsigned char *)(result + 25) = 1;
  }
  else
  {
    *(unsigned char *)(result + 25) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Action.UnreadCountOutsideWindowOfInterest()
{
  return &type metadata for Action.UnreadCountOutsideWindowOfInterest;
}

__n128 initializeWithCopy for Action.UnreadCountOutsideWindowOfInterest.Count(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Action.UnreadCountOutsideWindowOfInterest.Count()
{
  return &type metadata for Action.UnreadCountOutsideWindowOfInterest.Count;
}

uint64_t initializeBufferWithCopyOfBuffer for Action.FetchedWindowUpdate(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Action.FetchedWindowUpdate(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Action.FetchedWindowUpdate()
{
  return &type metadata for Action.FetchedWindowUpdate;
}

uint64_t sub_1003F4BE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003F4C4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003F4CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000566C(&qword_1007144F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Activity.init(mailboxesWithPendingWork:accountError:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = sub_1003F104C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = (uint64_t)a3 + *(int *)(type metadata accessor for Activity(0) + 24);
  uint64_t v7 = type metadata accessor for ConnectionStatus.Error(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  a3[1] = a1;
  return sub_1003F9708(a2, v6);
}

uint64_t Activity.MailboxStatus.Info.fetch.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Activity.MailboxStatus.Info.fetch.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 8) = result;
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t Activity.MailboxStatus.Info.isSyncing.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (a4 >> 8) & 1;
}

uint64_t Activity.MailboxStatus.Info.isSyncing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

Swift::UInt32 (__swiftcall *Activity.MailboxStatus.Info.isSyncing.modify())(IMAP2Persistence::CredentialsRequestID)
{
  return UInt32.init(_:);
}

IMAP2Persistence::Activity::MailboxStatus::Info __swiftcall Activity.MailboxStatus.Info.init(isCheckingForNewMessages:fetch:isSyncing:)(Swift::Bool isCheckingForNewMessages, IMAP2Persistence::Activity::MailboxStatus::Info::FetchProgress_optional fetch, Swift::Bool isSyncing)
{
  if (isSyncing) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  BOOL v4 = isCheckingForNewMessages;
  *(_WORD *)&fetch.is_nil = v3 & 0xFFFE | fetch.is_nil;
  result.fetch = fetch;
  result.isCheckingForNewMessages = v4;
  *(_DWORD *)result.gap1 = *(_DWORD *)((char *)&v4 + 1);
  *(_WORD *)&result.gap1[4] = *(_WORD *)((char *)&v4 + 5);
  result.gap1[6] = HIBYTE(v4);
  result.isSyncing = v5;
  return result;
}

uint64_t static Activity.MailboxStatus.Info.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, __int16 a4, int a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  if ((a1 ^ a5)) {
    return 0;
  }
  if (a4)
  {
    if ((a8 & 1) == 0) {
      return 0;
    }
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  }
  uint64_t result = 0;
  if ((a8 & 1) == 0 && a2 == a6 && a3 == a7) {
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  }
  return result;
}

uint64_t sub_1003F4E8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[24])
  {
    if ((a2[24] & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (a2[24]) {
      return 0;
    }
    if (*((void *)a1 + 1) != *((void *)a2 + 1) || *((void *)a1 + 2) != *((void *)a2 + 2)) {
      return 0;
    }
  }
  return a1[25] ^ a2[25] ^ 1u;
}

uint64_t Activity.MailboxStatus.isSelectedAndInSync.getter()
{
  type metadata accessor for Activity.MailboxStatus(0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F9858(v0, (uint64_t)v2, type metadata accessor for Activity.MailboxStatus);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1003F97F8((uint64_t)v2, type metadata accessor for Activity.MailboxStatus);
  }
  else if ((*v2 & 1) == 0)
  {
    char v3 = (v2[24] | (*((void *)v2 + 1) == 0)) & (v2[25] ^ 1);
    return v3 & 1;
  }
  char v3 = 0;
  return v3 & 1;
}

uint64_t Activity.subscript.getter@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X1>, uint64_t a3@<X8>)
{
  sub_10000566C(&qword_100714510);
  __chkstk_darwin();
  int v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for ConnectionStatus.Error(0);
  uint64_t v9 = *(void *)(v37 - 8);
  __chkstk_darwin();
  uint64_t v36 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000566C(&qword_100714518);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Activity.MailboxStatus(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  __int16 v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v38 = v3;
  Swift::UInt v39 = a2;
  uint64_t v17 = *v3;
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v40 = a3;
  if (v18)
  {
    uint64_t v19 = swift_bridgeObjectRetain();
    unint64_t v20 = sub_1003F643C(v19, a2);
    if (v21)
    {
      sub_1003F9858(*(void *)(v17 + 56) + *(void *)(v14 + 72) * v20, (uint64_t)v12, type metadata accessor for Activity.MailboxStatus);
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v22(v12, 0, 1, v13);
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v22(v12, 1, 1, v13);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
    {
      sub_1003F9790((uint64_t)v12, (uint64_t)v16, type metadata accessor for Activity.MailboxStatus);
      uint64_t v33 = (uint64_t)v16;
      uint64_t v27 = v40;
      sub_1003F9790(v33, v40, type metadata accessor for Activity.MailboxStatus);
LABEL_12:
      uint64_t v31 = v27;
      uint64_t v32 = 0;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v31, v32, 1, v13);
    }
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v22(v12, 1, 1, v13);
  }
  sub_100007A48((uint64_t)v12, &qword_100714518);
  uint64_t v23 = type metadata accessor for Activity(0);
  uint64_t v24 = v38;
  sub_1000079E4((uint64_t)v38 + *(int *)(v23 + 24), (uint64_t)v8, &qword_100714510);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v37);
  Swift::UInt v26 = v39;
  if (v25 == 1)
  {
    sub_100007A48((uint64_t)v8, &qword_100714510);
    if ((sub_1003F5408(a1, v26, v24[1]) & 1) == 0)
    {
      uint64_t v31 = v40;
      uint64_t v32 = 1;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v31, v32, 1, v13);
    }
    uint64_t v27 = v40;
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  uint64_t v28 = v36;
  sub_1003F9790((uint64_t)v8, v36, type metadata accessor for ConnectionStatus.Error);
  uint64_t v29 = v28;
  uint64_t v30 = v40;
  sub_1003F9790(v29, v40, type metadata accessor for ConnectionStatus.Error);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = v30;
  uint64_t v32 = 0;
  return ((uint64_t (*)(void, void, void, void))v22)(v31, v32, 1, v13);
}

uint64_t sub_1003F5408(uint64_t a1, Swift::UInt a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_1005E33F0();
  sub_1005E3410(a2);
  Swift::Int v6 = sub_1005E3470();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  uint64_t v9 = ~v7;
  while (1)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v8);
    if (v10[1] == a2)
    {
      uint64_t v11 = *v10;
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12 == *(void *)(a1 + 16))
      {
        if (!v12 || v11 == a1) {
          return 1;
        }
        if (*(unsigned __int8 *)(v11 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v12 == 1) {
            return 1;
          }
          if (*(unsigned __int8 *)(v11 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v12 == 2) {
              return 1;
            }
            if (*(unsigned __int8 *)(v11 + 34) == *(unsigned __int8 *)(a1 + 34)) {
              break;
            }
          }
        }
      }
    }
LABEL_4:
    unint64_t v8 = (v8 + 1) & v9;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + 35);
  uint64_t v14 = v12 - 3;
  uint64_t v15 = (unsigned __int8 *)(a1 + 35);
  while (v14)
  {
    int v17 = *v13++;
    int v16 = v17;
    int v18 = *v15++;
    --v14;
    if (v16 != v18) {
      goto LABEL_4;
    }
  }
  return 1;
}

uint64_t sub_1003F5560(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_1005E33F0();
  Swift::UInt v6 = a2 | ((unint64_t)a2 << 32);
  sub_1005E3410(v6);
  Swift::Int v7 = sub_1005E3470();
  uint64_t v8 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(a3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = ~v8;
  while (1)
  {
    uint64_t v11 = *(void *)(a3 + 48) + 16 * v9;
    if ((*(unsigned int *)(v11 + 8) | ((unint64_t)*(unsigned int *)(v11 + 8) << 32)) == v6)
    {
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13 == *(void *)(a1 + 16))
      {
        if (!v13 || v12 == a1) {
          return 1;
        }
        if (*(unsigned __int8 *)(v12 + 32) == *(unsigned __int8 *)(a1 + 32))
        {
          if (v13 == 1) {
            return 1;
          }
          if (*(unsigned __int8 *)(v12 + 33) == *(unsigned __int8 *)(a1 + 33))
          {
            if (v13 == 2) {
              return 1;
            }
            if (*(unsigned __int8 *)(v12 + 34) == *(unsigned __int8 *)(a1 + 34)) {
              break;
            }
          }
        }
      }
    }
LABEL_4:
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(a3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v14 = (unsigned __int8 *)(v12 + 35);
  uint64_t v15 = v13 - 3;
  int v16 = (unsigned __int8 *)(a1 + 35);
  while (v15)
  {
    int v18 = *v14++;
    int v17 = v18;
    int v19 = *v16++;
    --v15;
    if (v17 != v19) {
      goto LABEL_4;
    }
  }
  return 1;
}

uint64_t Activity.subscript.setter(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v6 = sub_10000566C(&qword_100714518);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = type metadata accessor for Activity.MailboxStatus(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000079E4(a1, (uint64_t)v11, &qword_100714518);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100007A48((uint64_t)v11, &qword_100714518);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
    swift_bridgeObjectRetain();
    sub_1003F5948((uint64_t)v9, a2, a3);
    sub_1003F81C0(a2, a3);
    sub_100007A48(a1, &qword_100714518);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1003F9790((uint64_t)v11, (uint64_t)v15, type metadata accessor for Activity.MailboxStatus);
    sub_1003F9858((uint64_t)v15, (uint64_t)v9, type metadata accessor for Activity.MailboxStatus);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    sub_1003F5948((uint64_t)v9, a2, a3);
    sub_100007A48(a1, &qword_100714518);
    return sub_1003F97F8((uint64_t)v15, type metadata accessor for Activity.MailboxStatus);
  }
}

uint64_t sub_1003F5948(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  BOOL v4 = v3;
  uint64_t v8 = sub_10000566C(&qword_100714518);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Activity.MailboxStatus(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100007A48(a1, &qword_100714518);
    sub_1003F801C(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_100007A48((uint64_t)v10, &qword_100714518);
  }
  else
  {
    sub_1003F9790(a1, (uint64_t)v13, type metadata accessor for Activity.MailboxStatus);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *BOOL v4 = 0x8000000000000000;
    sub_1003F8AF0((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *BOOL v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void (*Activity.subscript.modify(void *a1, uint64_t a2, Swift::UInt a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  _OWORD v7[2] = v3;
  *uint64_t v7 = a2;
  size_t v8 = *(void *)(*(void *)(sub_10000566C(&qword_100714518) - 8) + 64);
  v7[3] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v7[4] = v9;
  Activity.subscript.getter(a2, a3, (uint64_t)v9);
  return sub_1003F5BD0;
}

void sub_1003F5BD0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  BOOL v4 = (void *)(*a1)[4];
  Swift::UInt v5 = (*a1)[1];
  uint64_t v6 = **a1;
  if (a2)
  {
    sub_1000079E4((*a1)[4], (uint64_t)v3, &qword_100714518);
    swift_bridgeObjectRetain();
    Activity.subscript.setter((uint64_t)v3, v6, v5);
    sub_100007A48((uint64_t)v4, &qword_100714518);
  }
  else
  {
    swift_bridgeObjectRetain();
    Activity.subscript.setter((uint64_t)v4, v6, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Activity.isServerUnavailable.getter()
{
  sub_10000566C(&qword_100714510);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ConnectionStatus.Error(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (unsigned __int8 *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Activity(0);
  sub_1000079E4(v0 + *(int *)(v7 + 24), (uint64_t)v2, &qword_100714510);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100007A48((uint64_t)v2, &qword_100714510);
  }
  else
  {
    sub_1003F9790((uint64_t)v2, (uint64_t)v6, type metadata accessor for ConnectionStatus.Error);
    int v8 = *v6;
    sub_1003F97F8((uint64_t)v6, type metadata accessor for ConnectionStatus.Error);
    if (v8 == 2) {
      return 1;
    }
  }
  return 0;
}

uint64_t Activity.accountStatus.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10000566C(&qword_100714510);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConnectionStatus.Error(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v9 = type metadata accessor for Activity.MailboxStatus(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a1, 1, 1, v9);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Activity(0);
    sub_1000079E4(v1 + *(int *)(v12 + 24), (uint64_t)v4, &qword_100714510);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100007A48((uint64_t)v4, &qword_100714510);
    }
    else
    {
      sub_1003F9790((uint64_t)v4, (uint64_t)v8, type metadata accessor for ConnectionStatus.Error);
      sub_1003F9790((uint64_t)v8, a1, type metadata accessor for ConnectionStatus.Error);
    }
    uint64_t v13 = type metadata accessor for Activity.MailboxStatus(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
}

uint64_t Activity.allMailboxIDs.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t Activity.MailboxStatus.debugDescription.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for ConnectionStatus.Error(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v13 - v4;
  type metadata accessor for Activity.MailboxStatus(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F9858(v1, (uint64_t)v7, type metadata accessor for Activity.MailboxStatus);
  uint64_t v8 = 0x697463656E6E6F63;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1003F9790((uint64_t)v7, (uint64_t)v5, type metadata accessor for ConnectionStatus.Error);
      sub_1003F9858((uint64_t)v5, (uint64_t)v3, type metadata accessor for ConnectionStatus.Error);
      uint64_t v8 = sub_1005E1CC0();
      sub_1003F97F8((uint64_t)v5, type metadata accessor for ConnectionStatus.Error);
      return v8;
    case 2u:
      return v8;
    case 3u:
      return 0xD000000000000010;
    default:
      uint64_t v9 = *((void *)v7 + 1);
      uint64_t v10 = *((void *)v7 + 2);
      if (*v7)
      {
        uint64_t v8 = 0xD000000000000010;
        if (v7[24]) {
          return v8;
        }
        unint64_t v15 = 0;
        unint64_t v16 = 0xE000000000000000;
        sub_1005E2C80(26);
        swift_bridgeObjectRelease();
        unint64_t v15 = 0xD000000000000012;
        unint64_t v16 = 0x80000001005EA320;
        uint64_t v14 = v10;
        v17._uint64_t countAndFlagsBits = sub_1005E3230();
        sub_1005E1E30(v17);
        swift_bridgeObjectRelease();
        v18._uint64_t countAndFlagsBits = 761687853;
        v18._unint64_t object = (void *)0xE400000000000000;
        sub_1005E1E30(v18);
        uint64_t v11 = v9 + v10;
        if (!__OFADD__(v9, v10)) {
          goto LABEL_15;
        }
        __break(1u);
LABEL_14:
        unint64_t v15 = 0;
        unint64_t v16 = 0xE000000000000000;
        sub_1005E2C80(17);
        swift_bridgeObjectRelease();
        unint64_t v15 = 0x676E696863746566;
        unint64_t v16 = 0xE90000000000002DLL;
        uint64_t v14 = v10;
        v19._uint64_t countAndFlagsBits = sub_1005E3230();
        sub_1005E1E30(v19);
        swift_bridgeObjectRelease();
        v20._uint64_t countAndFlagsBits = 761687853;
        v20._unint64_t object = (void *)0xE400000000000000;
        sub_1005E1E30(v20);
        uint64_t v11 = v9 + v10;
        if (__OFADD__(v9, v10))
        {
          __break(1u);
          JUMPOUT(0x1003F6428);
        }
LABEL_15:
        uint64_t v14 = v11;
        v21._uint64_t countAndFlagsBits = sub_1005E3230();
        sub_1005E1E30(v21);
        swift_bridgeObjectRelease();
        return v15;
      }
      if (!v7[24]) {
        goto LABEL_14;
      }
      if (v7[25]) {
        return 0x676E69636E7973;
      }
      else {
        return 0x636E79732D6E69;
      }
  }
}

unint64_t sub_1003F643C(uint64_t a1, Swift::UInt a2)
{
  sub_1005E33F0();
  sub_1005E3410(a2);
  Swift::Int v4 = sub_1005E3470();
  return sub_1003F66D4(a1, a2, v4);
}

unint64_t sub_1003F64B0(uint64_t a1, unint64_t a2)
{
  sub_1005E33F0();
  sub_100008D24(a1, a2);
  sub_1005E08B0();
  sub_1000094D4(a1, a2);
  Swift::Int v4 = sub_1005E3470();
  return sub_1003F67D4(a1, a2, v4);
}

unint64_t sub_1003F6540(uint64_t a1, unsigned int a2)
{
  sub_1005E33F0();
  sub_1005E3410(a2 | ((unint64_t)a2 << 32));
  Swift::Int v4 = sub_1005E3470();
  return sub_1003F7280(a1, a2, v4);
}

unint64_t sub_1003F65B8(unsigned __int8 *a1)
{
  sub_1005E33F0();
  sub_1005E3410(*a1);
  sub_1005E3440(*((_DWORD *)a1 + 1));
  sub_1005E3410(*((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned int *)a1 + 4) << 32));
  long long v4 = *(_OWORD *)(a1 + 24);
  sub_10000FAA8((uint64_t)&v4);
  sub_1005E08B0();
  sub_10000FAD8((uint64_t)&v4);
  Swift::Int v2 = sub_1005E3470();
  return sub_1003F738C(a1, v2);
}

unint64_t sub_1003F6668(Swift::UInt32 a1)
{
  sub_1005E33F0();
  sub_1005E3440(a1);
  Swift::Int v2 = sub_1005E3470();
  return sub_100024A28(a1, v2);
}

unint64_t sub_1003F66D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    while (1)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      if (v8[1] == a2)
      {
        uint64_t v9 = *v8;
        uint64_t v10 = *(void *)(v9 + 16);
        if (v10 == *(void *)(a1 + 16))
        {
          if (!v10 || v9 == a1) {
            return result;
          }
          if (*(unsigned __int8 *)(v9 + 32) == *(unsigned __int8 *)(a1 + 32))
          {
            if (v10 == 1) {
              return result;
            }
            if (*(unsigned __int8 *)(v9 + 33) == *(unsigned __int8 *)(a1 + 33))
            {
              if (v10 == 2) {
                return result;
              }
              if (*(unsigned __int8 *)(v9 + 34) == *(unsigned __int8 *)(a1 + 34)) {
                break;
              }
            }
          }
        }
      }
LABEL_3:
      unint64_t result = (result + 1) & v7;
      if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    uint64_t v11 = (unsigned __int8 *)(v9 + 35);
    uint64_t v12 = v10 - 3;
    uint64_t v13 = (unsigned __int8 *)(a1 + 35);
    while (v12)
    {
      int v15 = *v11++;
      int v14 = v15;
      int v16 = *v13++;
      --v12;
      if (v14 != v16) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

unint64_t sub_1003F67D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v10 = a2 >> 62;
    uint64_t v86 = ~v5;
    unint64_t v78 = HIDWORD(a1);
    size_t v83 = HIDWORD(a1) - (int)a1;
    uint64_t v84 = v3 + 64;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v82 = v11;
    unint64_t v85 = a2 >> 62;
    uint64_t v81 = (int)a1;
    uint64_t v79 = a1 >> 32;
    uint64_t v77 = (a1 >> 32) - (int)a1;
    uint64_t v87 = v10;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_100008D24(v14, v13);
          sub_100008D24(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v87)
      {
        case 1:
          size_t v18 = v83;
          if (v82) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_1000094D4(v14, v13);
              sub_1000094D4(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                sub_100008D24(a1, a2);
                int v25 = (char *)sub_1005E0550();
                if (!v25) {
                  goto LABEL_33;
                }
                uint64_t v26 = sub_1005E0580();
                if (__OFSUB__((int)v14, v26)) {
                  goto LABEL_127;
                }
                v25 += (int)v14 - v26;
LABEL_33:
                sub_1005E0570();
                LODWORD(v10) = v85;
                if (v85)
                {
                  if (v85 == 1)
                  {
                    if (v79 < v81) {
                      goto LABEL_136;
                    }
                    swift_retain();
                    uint64_t v27 = (char *)sub_1005E0550();
                    if (v27)
                    {
                      uint64_t v28 = sub_1005E0580();
                      if (__OFSUB__(v81, v28)) {
                        goto LABEL_143;
                      }
                      v27 += v81 - v28;
                    }
                    uint64_t v29 = sub_1005E0570();
                    size_t v30 = v77;
                    if (v29 < v77) {
                      size_t v30 = v29;
                    }
                    if (!v25) {
                      goto LABEL_145;
                    }
                    if (!v27) {
                      goto LABEL_146;
                    }
                    int v31 = memcmp(v25, v27, v30);
                    sub_1000094D4(a1, a2);
                    sub_1000094D4(a1, a2);
                    sub_1000094D4(v14, v13);
                    sub_1000094D4(v14, v13);
                    uint64_t v4 = v84;
                    if (!v31) {
                      return v6;
                    }
                  }
                  else
                  {
                    uint64_t v66 = *(void *)(a1 + 16);
                    uint64_t v76 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v67 = sub_1005E0550();
                    if (v67)
                    {
                      uint64_t v68 = v67;
                      uint64_t v69 = sub_1005E0580();
                      if (__OFSUB__(v66, v69)) {
                        goto LABEL_142;
                      }
                      uint64_t v70 = (const void *)(v68 + v66 - v69);
                    }
                    else
                    {
                      uint64_t v70 = 0;
                    }
                    BOOL v21 = __OFSUB__(v76, v66);
                    int64_t v71 = v76 - v66;
                    uint64_t v4 = v84;
                    if (v21) {
                      goto LABEL_137;
                    }
                    uint64_t v72 = sub_1005E0570();
                    if (v72 >= v71) {
                      size_t v73 = v71;
                    }
                    else {
                      size_t v73 = v72;
                    }
                    if (!v25) {
                      goto LABEL_156;
                    }
                    LODWORD(v10) = v85;
                    if (!v70) {
                      goto LABEL_157;
                    }
                    int v59 = memcmp(v25, v70, v73);
                    swift_release();
LABEL_116:
                    swift_release();
                    sub_1000094D4(a1, a2);
                    sub_1000094D4(v14, v13);
                    sub_1000094D4(v14, v13);
                    uint64_t v7 = v80;
                    if (!v59) {
                      return v6;
                    }
                  }
                }
                else
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v25) {
                    goto LABEL_155;
                  }
                  int v42 = memcmp(v25, __s1, __n);
                  sub_1000094D4(a1, a2);
LABEL_103:
                  sub_1000094D4(v14, v13);
                  sub_1000094D4(v14, v13);
                  if (!v42) {
                    return v6;
                  }
                }
                break;
              case 2uLL:
                uint64_t v32 = *(void *)(v14 + 16);
                sub_100008D24(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v33 = sub_1005E0550();
                if (v33)
                {
                  uint64_t v34 = v33;
                  uint64_t v35 = sub_1005E0580();
                  if (__OFSUB__(v32, v35)) {
                    goto LABEL_126;
                  }
                  uint64_t v36 = (const void *)(v34 + v32 - v35);
                }
                else
                {
                  uint64_t v36 = 0;
                }
                sub_1005E0570();
                uint64_t v4 = v84;
                LODWORD(v10) = v85;
                if (!v85)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v36) {
                    goto LABEL_152;
                  }
                  int v59 = memcmp(v36, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v85 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v43 = (char *)sub_1005E0550();
                  if (v43)
                  {
                    uint64_t v44 = sub_1005E0580();
                    if (__OFSUB__(v81, v44)) {
                      goto LABEL_141;
                    }
                    v43 += v81 - v44;
                  }
                  uint64_t v45 = sub_1005E0570();
                  size_t v46 = v77;
                  if (v45 < v77) {
                    size_t v46 = v45;
                  }
                  if (!v36) {
                    goto LABEL_148;
                  }
                  if (!v43) {
                    goto LABEL_149;
                  }
                  int v47 = memcmp(v36, v43, v46);
                  sub_1000094D4(a1, a2);
                  swift_release();
                }
                else
                {
                  uint64_t v60 = *(void *)(a1 + 16);
                  uint64_t v75 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v61 = (char *)sub_1005E0550();
                  if (v61)
                  {
                    uint64_t v62 = sub_1005E0580();
                    if (__OFSUB__(v60, v62)) {
                      goto LABEL_140;
                    }
                    v61 += v60 - v62;
                  }
                  BOOL v21 = __OFSUB__(v75, v60);
                  int64_t v63 = v75 - v60;
                  if (v21) {
                    goto LABEL_135;
                  }
                  uint64_t v64 = sub_1005E0570();
                  if (v64 >= v63) {
                    size_t v65 = v63;
                  }
                  else {
                    size_t v65 = v64;
                  }
                  if (!v36) {
                    goto LABEL_153;
                  }
                  LODWORD(v10) = v85;
                  if (!v61) {
                    goto LABEL_154;
                  }
                  int v47 = memcmp(v36, v61, v65);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                swift_release();
                sub_1000094D4(a1, a2);
                sub_1000094D4(v14, v13);
                sub_1000094D4(v14, v13);
                uint64_t v7 = v80;
                uint64_t v4 = v84;
                if (!v47) {
                  return v6;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v10) {
                  goto LABEL_58;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_129;
                  }
                  sub_100008D24(a1, a2);
                  uint64_t v37 = sub_1005E0550();
                  if (!v37) {
                    goto LABEL_147;
                  }
                  uint64_t v23 = v37;
                  uint64_t v38 = sub_1005E0580();
                  unint64_t v10 = v81 - v38;
                  if (__OFSUB__(v81, v38)) {
                    goto LABEL_134;
                  }
LABEL_53:
                  uint64_t v39 = sub_1005E0570();
                  if (v39 >= v77) {
                    size_t v40 = v77;
                  }
                  else {
                    size_t v40 = v39;
                  }
                  int v41 = memcmp(__s1, (const void *)(v23 + v10), v40);
                  sub_1000094D4(a1, a2);
                  sub_1000094D4(v14, v13);
                  sub_1000094D4(v14, v13);
                  LODWORD(v10) = v85;
                  if (!v41) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v54 = *(void *)(a1 + 16);
                  uint64_t v55 = *(void *)(a1 + 24);
                  sub_100008D24(a1, a2);
                  swift_retain();
                  swift_retain();
                  char v50 = (char *)sub_1005E0550();
                  if (v50)
                  {
                    uint64_t v56 = sub_1005E0580();
                    if (__OFSUB__(v54, v56)) {
                      goto LABEL_139;
                    }
                    v50 += v54 - v56;
                  }
                  int64_t v52 = v55 - v54;
                  if (__OFSUB__(v55, v54)) {
                    goto LABEL_132;
                  }
                  uint64_t v53 = sub_1005E0570();
                  if (!v50) {
                    goto LABEL_151;
                  }
LABEL_82:
                  if (v53 >= v52) {
                    size_t v57 = v52;
                  }
                  else {
                    size_t v57 = v53;
                  }
                  int v58 = memcmp(__s1, v50, v57);
                  swift_release();
                  swift_release();
                  sub_1000094D4(a1, a2);
                  sub_1000094D4(v14, v13);
                  sub_1000094D4(v14, v13);
                  uint64_t v7 = v80;
                  uint64_t v4 = v84;
                  LODWORD(v10) = v85;
                  if (!v58) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v10)
                {
LABEL_58:
                  __int16 __s2 = a1;
                  char v90 = BYTE2(a1);
                  char v91 = BYTE3(a1);
                  char v92 = v78;
                  char v93 = BYTE5(a1);
                  char v94 = BYTE6(a1);
                  char v95 = HIBYTE(a1);
                  __int16 v96 = a2;
                  char v97 = BYTE2(a2);
                  char v98 = BYTE3(a2);
                  char v99 = BYTE4(a2);
                  char v100 = BYTE5(a2);
                  int v42 = memcmp(__s1, &__s2, __n);
                  goto LABEL_103;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_128;
                  }
                  sub_100008D24(a1, a2);
                  uint64_t v22 = sub_1005E0550();
                  if (!v22)
                  {
                    sub_1005E0570();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    sub_1005E0570();
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x1003F7250);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = sub_1005E0580();
                  unint64_t v10 = v81 - v24;
                  if (__OFSUB__(v81, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_53;
                }
                uint64_t v48 = *(void *)(a1 + 16);
                uint64_t v49 = *(void *)(a1 + 24);
                sub_100008D24(a1, a2);
                swift_retain();
                swift_retain();
                char v50 = (char *)sub_1005E0550();
                if (v50)
                {
                  uint64_t v51 = sub_1005E0580();
                  if (__OFSUB__(v48, v51)) {
                    goto LABEL_138;
                  }
                  v50 += v48 - v51;
                }
                int64_t v52 = v49 - v48;
                if (__OFSUB__(v49, v48)) {
                  goto LABEL_131;
                }
                uint64_t v53 = sub_1005E0570();
                if (!v50) {
                  goto LABEL_150;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_1000094D4(v14, v13);
            sub_1000094D4(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v86;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1003F7280(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    while (1)
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      if ((*(unsigned int *)(v8 + 8) | ((unint64_t)*(unsigned int *)(v8 + 8) << 32)) == (a2 | ((unint64_t)a2 << 32)))
      {
        uint64_t v9 = *(void *)v8;
        uint64_t v10 = *(void *)(v9 + 16);
        if (v10 == *(void *)(a1 + 16))
        {
          if (!v10 || v9 == a1) {
            return result;
          }
          if (*(unsigned __int8 *)(v9 + 32) == *(unsigned __int8 *)(a1 + 32))
          {
            if (v10 == 1) {
              return result;
            }
            if (*(unsigned __int8 *)(v9 + 33) == *(unsigned __int8 *)(a1 + 33))
            {
              if (v10 == 2) {
                return result;
              }
              if (*(unsigned __int8 *)(v9 + 34) == *(unsigned __int8 *)(a1 + 34)) {
                break;
              }
            }
          }
        }
      }
LABEL_3:
      unint64_t result = (result + 1) & v7;
      if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    BOOL v11 = (unsigned __int8 *)(v9 + 35);
    uint64_t v12 = v10 - 3;
    unint64_t v13 = (unsigned __int8 *)(a1 + 35);
    while (v12)
    {
      int v15 = *v11++;
      int v14 = v15;
      int v16 = *v13++;
      --v12;
      if (v14 != v16) {
        goto LABEL_3;
      }
    }
  }
  return result;
}