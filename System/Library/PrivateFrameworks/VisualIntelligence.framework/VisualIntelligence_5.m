uint64_t sub_1DCFE6774()
{
  uint64_t v0;
  uint64_t vars8;

  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1DCFE67B4(void *a1, void *a2)
{
  return sub_1DCFE54E8(a1, a2, *(void *)(v2 + 16), *(void (**)(void *))(v2 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_1DCFE67D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EspressoModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DCFE683C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1DCFE6874(uint64_t a1, void *a2)
{
  return sub_1DCFE55B4(a1, a2, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24), type metadata accessor for EspressoRequest, (uint64_t)&off_1F3839ED0);
}

uint64_t sub_1DCFE68AC(uint64_t a1, void *a2)
{
  return sub_1DCFE55B4(a1, a2, *(void (**)(void *))(v2 + 16), *(void *)(v2 + 24), (uint64_t (*)(void))type metadata accessor for E5Request, (uint64_t)&off_1F383D170);
}

uint64_t sub_1DCFE68E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1DCFE694C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1DCFE69B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1DD0481A8();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  v6 = (unint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1, v2, v4);
  int v7 = (*(uint64_t (**)(unint64_t *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x1E4FBCAE8])
  {
    v8 = *(uint64_t (**)(unint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    int v7 = v8(v6, v2);
    unint64_t v9 = *v6;
    if ((*v6 & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    uint64_t v10 = 1000000000;
    if (is_mul_ok(v9, 0x3B9ACA00uLL)) {
      return v9 * v10;
    }
    __break(1u);
  }
  if (v7 != *MEMORY[0x1E4FBCAC8]) {
    goto LABEL_9;
  }
  v11 = *(uint64_t (**)(unint64_t *, uint64_t))(v3 + 96);
  v3 += 96;
  int v7 = v11(v6, v2);
  unint64_t v9 = *v6;
  if ((*v6 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  uint64_t v10 = 1000000;
  if (is_mul_ok(v9, 0xF4240uLL)) {
    return v9 * v10;
  }
  __break(1u);
LABEL_9:
  if (v7 == *MEMORY[0x1E4FBCAB0])
  {
    (*(void (**)(unint64_t *, uint64_t))(v3 + 96))(v6, v2);
    unint64_t v9 = *v6;
    if ((*v6 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = 1000;
      if (is_mul_ok(v9, 0x3E8uLL)) {
        return v9 * v10;
      }
      __break(1u);
LABEL_20:
      uint64_t result = sub_1DD048CA8();
      __break(1u);
      return result;
    }
    goto LABEL_16;
  }
  if (v7 != *MEMORY[0x1E4FBCAA8]) {
    goto LABEL_17;
  }
  (*(void (**)(unint64_t *, uint64_t))(v3 + 96))(v6, v2);
  uint64_t result = *v6;
  if ((*v6 & 0x8000000000000000) != 0)
  {
LABEL_16:
    int v7 = sub_1DD048C98();
    __break(1u);
LABEL_17:
    if (v7 == *MEMORY[0x1E4FBCAD0]) {
      return -1;
    }
    goto LABEL_20;
  }
  return result;
}

ValueMetadata *_s19NetworkTimeoutErrorVMa()
{
  return &_s19NetworkTimeoutErrorVN;
}

uint64_t sub_1DCFE6C7C(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v46 = (int *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  v47 = (int *)((char *)&v44 - v9);
  MEMORY[0x1F4188790](v10);
  v50 = (int *)((char *)&v44 - v11);
  uint64_t v12 = type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0);
  MEMORY[0x1F4188790](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84CE0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v45 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v48 = (uint64_t)&v44 - v18;
  MEMORY[0x1F4188790](v19);
  v21 = (char *)&v44 - v20;
  MEMORY[0x1F4188790](v22);
  v24 = (char *)&v44 - v23;
  uint64_t v49 = *(int *)(v12 + 20);
  uint64_t v25 = *(void *)(v2 + v49)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1DCD2889C(v25, (uint64_t)v24, &qword_1EBE84CE0);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v25) = v26(v24, 1, v5);
  uint64_t v27 = (uint64_t)v24;
  uint64_t v28 = v2;
  sub_1DCD2479C(v27, &qword_1EBE84CE0);
  sub_1DCF30F00(v2, (uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if (v25 == 1)
  {
    sub_1DCFE816C((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
LABEL_15:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  uint64_t v29 = *(void *)&v14[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1DCD2889C(v29, (uint64_t)v21, &qword_1EBE84CE0);
  int v30 = v26(v21, 1, v5);
  v31 = v50;
  if (v30 == 1)
  {
    int *v50 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C((uint64_t)v21, &qword_1EBE84CE0);
  }
  else
  {
    sub_1DCFE9378((uint64_t)v21, (uint64_t)v50, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  sub_1DCFE816C((uint64_t)v14, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  int v32 = *v31;
  sub_1DCFE816C((uint64_t)v31, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (v32 < 1) {
    goto LABEL_15;
  }
  if (a2 >= a1) {
    a2 = a1;
  }
  uint64_t v33 = v49;
  uint64_t v34 = *(void *)(v28 + v49)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  uint64_t v35 = v48;
  sub_1DCD2889C(v34, v48, &qword_1EBE84CE0);
  if (v26((char *)v35, 1, v5) == 1)
  {
    v36 = v47;
    int *v47 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C(v35, &qword_1EBE84CE0);
  }
  else
  {
    v36 = v47;
    sub_1DCFE9378(v35, (uint64_t)v47, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  int v37 = *v36;
  sub_1DCFE816C((uint64_t)v36, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (a2 <= (double)v37) {
    goto LABEL_15;
  }
  uint64_t v38 = *(void *)(v28 + v33)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  uint64_t v39 = v45;
  sub_1DCD2889C(v38, v45, &qword_1EBE84CE0);
  int v40 = v26((char *)v39, 1, v5);
  v41 = v46;
  if (v40 == 1)
  {
    int *v46 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C(v39, &qword_1EBE84CE0);
  }
  else
  {
    sub_1DCFE9378(v39, (uint64_t)v46, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  int v43 = *v41;
  sub_1DCFE816C((uint64_t)v41, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  *(double *)&uint64_t result = (double)v43;
  return result;
}

uint64_t sub_1DCFE71F8(unsigned __int8 *a1, int64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE86078);
  MEMORY[0x1F4188790](v5 - 8);
  v89 = &v77[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v88 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig(0);
  uint64_t v81 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v8 = &v77[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84F20);
  MEMORY[0x1F4188790](v87);
  v86 = &v77[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  v90 = &v77[-v11];
  MEMORY[0x1F4188790](v12);
  v85 = &v77[-v13];
  uint64_t v14 = type metadata accessor for VisualUnderstanding.ImageRegion() - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v77[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned int v18 = *a1;
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19)
  {
LABEL_15:
    uint64_t v41 = *(void *)(v2 + *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20));
    v42 = (unsigned char *)(v41
                  + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__enableDomainSelectionOnlyForE5);
    swift_beginAccess();
    if (*v42 == 1)
    {
      if (v18 > 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v43 = sub_1DD048FA8();
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        if ((v43 & 1) == 0) {
          return result;
        }
      }
    }
    swift_beginAccess();
    uint64_t v45 = *(void *)(v41 + 16);
    uint64_t v46 = *(void *)(v45 + 64);
    unint64_t v82 = v45 + 64;
    uint64_t v47 = 1 << *(unsigned char *)(v45 + 32);
    uint64_t v48 = -1;
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    unint64_t v49 = v48 & v46;
    int64_t v83 = (unint64_t)(v47 + 63) >> 6;
    v50 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v81 + 48);
    uint64_t v84 = v45;
    swift_bridgeObjectRetain_n();
    int64_t v51 = 0;
    while (1)
    {
      if (v49)
      {
        unint64_t v56 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        unint64_t v57 = v56 | (v51 << 6);
      }
      else
      {
        int64_t v58 = v51 + 1;
        if (__OFADD__(v51, 1))
        {
          __break(1u);
          goto LABEL_55;
        }
        if (v58 >= v83) {
          goto LABEL_48;
        }
        unint64_t v59 = *(void *)(v82 + 8 * v58);
        ++v51;
        if (!v59)
        {
          int64_t v51 = v58 + 1;
          if (v58 + 1 >= v83) {
            goto LABEL_48;
          }
          unint64_t v59 = *(void *)(v82 + 8 * v51);
          if (!v59)
          {
            int64_t v51 = v58 + 2;
            if (v58 + 2 >= v83) {
              goto LABEL_48;
            }
            unint64_t v59 = *(void *)(v82 + 8 * v51);
            if (!v59)
            {
              int64_t v51 = v58 + 3;
              if (v58 + 3 >= v83) {
                goto LABEL_48;
              }
              unint64_t v59 = *(void *)(v82 + 8 * v51);
              if (!v59)
              {
                int64_t v51 = v58 + 4;
                if (v58 + 4 >= v83) {
                  goto LABEL_48;
                }
                unint64_t v59 = *(void *)(v82 + 8 * v51);
                if (!v59)
                {
                  int64_t v60 = v58 + 5;
                  if (v60 >= v83)
                  {
LABEL_48:
                    swift_release();
                    swift_bridgeObjectRelease();
                    return 0;
                  }
                  unint64_t v59 = *(void *)(v82 + 8 * v60);
                  if (!v59)
                  {
                    while (1)
                    {
                      int64_t v51 = v60 + 1;
                      if (__OFADD__(v60, 1)) {
                        break;
                      }
                      if (v51 >= v83) {
                        goto LABEL_48;
                      }
                      unint64_t v59 = *(void *)(v82 + 8 * v51);
                      ++v60;
                      if (v59) {
                        goto LABEL_44;
                      }
                    }
LABEL_55:
                    __break(1u);
                    JUMPOUT(0x1DCFE8034);
                  }
                  int64_t v51 = v60;
                }
              }
            }
          }
        }
LABEL_44:
        unint64_t v49 = (v59 - 1) & v59;
        unint64_t v57 = __clz(__rbit64(v59)) + (v51 << 6);
      }
      uint64_t v61 = *(void *)(v84 + 56);
      v62 = (uint64_t *)(*(void *)(v84 + 48) + 16 * v57);
      uint64_t v63 = *v62;
      uint64_t v64 = v62[1];
      v65 = (int *)(type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0) - 8);
      uint64_t v66 = v61 + *(void *)(*(void *)v65 + 72) * v57;
      uint64_t v67 = v87;
      v68 = v85;
      sub_1DCF30F00(v66, (uint64_t)&v85[*(int *)(v87 + 48)], type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      void *v68 = v63;
      v68[1] = v64;
      v69 = v90;
      sub_1DCFE8104((uint64_t)v68, (uint64_t)v90);
      uint64_t v70 = *(int *)(v67 + 48);
      v71 = v86;
      uint64_t v72 = (uint64_t)v86 + v70;
      uint64_t v73 = v69[1];
      void *v86 = *v69;
      v71[1] = v73;
      sub_1DCF30F00((uint64_t)v69 + v70, v72, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      uint64_t v74 = *(void *)(v72 + v65[7])
          + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__domainSelectionConfig;
      swift_beginAccess();
      v75 = v89;
      sub_1DCD2889C(v74, (uint64_t)v89, &qword_1EBE86078);
      uint64_t v76 = v88;
      if ((*v50)(v75, 1, v88) == 1)
      {
        *uint64_t v8 = 0;
        uint64_t v52 = MEMORY[0x1E4FBC860];
        *((void *)v8 + 1) = MEMORY[0x1E4FBC860];
        *((void *)v8 + 2) = v52;
        *((_DWORD *)v8 + 6) = 0;
        *((void *)v8 + 4) = 0;
        v8[40] = 1;
        swift_bridgeObjectRetain();
        sub_1DD047BE8();
        v53 = &v8[*(int *)(v76 + 40)];
        uint64_t v54 = type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig.RichLabelConfig(0);
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
        sub_1DCD2479C((uint64_t)v75, &qword_1EBE86078);
      }
      else
      {
        sub_1DCFE9378((uint64_t)v75, (uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig);
        swift_bridgeObjectRetain();
      }
      sub_1DCFE816C(v72, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      int v55 = *v8;
      sub_1DCFE816C((uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainSelectionConfig);
      sub_1DCD2479C((uint64_t)v90, &qword_1EBE84F20);
      if (v55 == 1)
      {
        swift_release();
        goto LABEL_53;
      }
    }
  }
  unsigned int v78 = v18;
  uint64_t v79 = v2;
  unint64_t v20 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v21 = *(void *)(v15 + 72);
  int64_t v83 = a2;
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  unint64_t v82 = v20;
  uint64_t v80 = v21;
  while (1)
  {
    sub_1DCF30F00(v20 + v21 * v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for VisualUnderstanding.ImageRegion);
    uint64_t v23 = *((void *)v17 + 6);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24) {
      break;
    }
LABEL_4:
    ++v22;
    sub_1DCFE816C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for VisualUnderstanding.ImageRegion);
    if (v22 == v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = v79;
      unsigned int v18 = v78;
      goto LABEL_15;
    }
  }
  uint64_t v84 = v22;
  swift_bridgeObjectRetain_n();
  long long v25 = *(_OWORD *)(v23 + 144);
  long long v97 = *(_OWORD *)(v23 + 128);
  long long v98 = v25;
  *(_OWORD *)v99 = *(_OWORD *)(v23 + 160);
  *(_OWORD *)&v99[13] = *(_OWORD *)(v23 + 173);
  long long v26 = *(_OWORD *)(v23 + 80);
  long long v93 = *(_OWORD *)(v23 + 64);
  long long v94 = v26;
  long long v27 = *(_OWORD *)(v23 + 112);
  long long v95 = *(_OWORD *)(v23 + 96);
  long long v96 = v27;
  long long v28 = *(_OWORD *)(v23 + 48);
  long long v91 = *(_OWORD *)(v23 + 32);
  long long v92 = v28;
  uint64_t v29 = v24 - 1;
  uint64_t v30 = 192;
  while (BYTE12(v98) != 1)
  {
LABEL_12:
    if (!v29)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v20 = v82;
      uint64_t v21 = v80;
      uint64_t v22 = v84;
      goto LABEL_4;
    }
    long long v34 = *(_OWORD *)(v23 + v30 + 16);
    long long v91 = *(_OWORD *)(v23 + v30);
    long long v92 = v34;
    long long v35 = *(_OWORD *)(v23 + v30 + 32);
    long long v36 = *(_OWORD *)(v23 + v30 + 48);
    long long v37 = *(_OWORD *)(v23 + v30 + 80);
    long long v95 = *(_OWORD *)(v23 + v30 + 64);
    long long v96 = v37;
    long long v93 = v35;
    long long v94 = v36;
    long long v38 = *(_OWORD *)(v23 + v30 + 96);
    long long v39 = *(_OWORD *)(v23 + v30 + 112);
    long long v40 = *(_OWORD *)(v23 + v30 + 128);
    *(_OWORD *)&v99[13] = *(_OWORD *)(v23 + v30 + 141);
    long long v98 = v39;
    *(_OWORD *)v99 = v40;
    long long v97 = v38;
    v30 += 160;
    --v29;
  }
  int v31 = v91;
  switch((char)v91)
  {
    case 19:
      swift_bridgeObjectRelease();
      break;
    default:
      char v32 = sub_1DD048FA8();
      sub_1DCD32CC8((uint64_t)&v91);
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
        switch(v31)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
            char v33 = sub_1DD048FA8();
            swift_bridgeObjectRelease();
            sub_1DCD32DD4((uint64_t)&v91);
            if ((v33 & 1) == 0) {
              goto LABEL_12;
            }
            goto LABEL_52;
          case 20:
            swift_bridgeObjectRelease();
            break;
          default:
            JUMPOUT(0);
        }
      }
      sub_1DCD32DD4((uint64_t)&v91);
      break;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1DCFE816C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for VisualUnderstanding.ImageRegion);
LABEL_53:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1DCFE8104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DCFE816C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1DCFE81CC(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  v62 = (int *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v63 = (int *)((char *)&v60 - v10);
  MEMORY[0x1F4188790](v11);
  v69 = (char *)&v60 - v12;
  MEMORY[0x1F4188790](v13);
  v68 = (int *)((char *)&v60 - v14);
  uint64_t v15 = type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0);
  MEMORY[0x1F4188790](v15);
  v65 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84CE0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v61 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v64 = (uint64_t)&v60 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v66 = (uint64_t)&v60 - v25;
  MEMORY[0x1F4188790](v26);
  long long v28 = (char *)&v60 - v27;
  MEMORY[0x1F4188790](v29);
  int v31 = (char *)&v60 - v30;
  uint64_t v67 = *(int *)(v15 + 20);
  uint64_t v32 = *(void *)(v3 + v67)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1DCD2889C(v32, (uint64_t)v31, &qword_1EBE84CE0);
  char v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v32) = v33(v31, 1, v6);
  uint64_t v34 = (uint64_t)v31;
  uint64_t v35 = v3;
  sub_1DCD2479C(v34, &qword_1EBE84CE0);
  sub_1DCF30F00(v3, (uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if (v32 == 1)
  {
    sub_1DCFE816C((uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
LABEL_18:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  uint64_t v36 = v15;
  uint64_t v37 = *(void *)&v19[*(int *)(v15 + 20)]
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  sub_1DCD2889C(v37, (uint64_t)v28, &qword_1EBE84CE0);
  int v38 = v33(v28, 1, v6);
  uint64_t v39 = v6;
  long long v40 = v68;
  if (v38 == 1)
  {
    int *v68 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C((uint64_t)v28, &qword_1EBE84CE0);
  }
  else
  {
    sub_1DCFE9378((uint64_t)v28, (uint64_t)v68, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  sub_1DCFE816C((uint64_t)v19, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  int v41 = *v40;
  sub_1DCFE816C((uint64_t)v40, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  v42 = (int *)v69;
  if (v41 < 1) {
    goto LABEL_18;
  }
  uint64_t v43 = v67;
  uint64_t v44 = *(void *)(v35 + v67)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  uint64_t v45 = v44;
  uint64_t v46 = v66;
  sub_1DCD2889C(v45, v66, &qword_1EBE84CE0);
  if (v33((char *)v46, 1, v6) == 1)
  {
    int *v42 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C(v46, &qword_1EBE84CE0);
  }
  else
  {
    sub_1DCFE9378(v46, (uint64_t)v42, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  uint64_t v47 = (uint64_t)v65;
  int v48 = *v42;
  sub_1DCFE816C((uint64_t)v42, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  sub_1DCF30F00(v35, v47, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((double)v48 >= a1)
  {
    sub_1DCFE816C(v47, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
    goto LABEL_18;
  }
  uint64_t v49 = *(void *)(v47 + *(int *)(v36 + 20))
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  uint64_t v50 = v64;
  sub_1DCD2889C(v49, v64, &qword_1EBE84CE0);
  if (v33((char *)v50, 1, v39) == 1)
  {
    int64_t v51 = v63;
    *uint64_t v63 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C(v50, &qword_1EBE84CE0);
  }
  else
  {
    int64_t v51 = v63;
    sub_1DCFE9378(v50, (uint64_t)v63, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  int v52 = *v51;
  sub_1DCFE816C((uint64_t)v51, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  sub_1DCFE816C(v47, type metadata accessor for Argos_Protos_Queryflow_ParseConfig);
  if ((double)v52 >= a2) {
    goto LABEL_18;
  }
  uint64_t v53 = *(void *)(v35 + v43)
      + OBJC_IVAR____TtCV18VisualIntelligence34Argos_Protos_Queryflow_ParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__imageResizeConfig;
  swift_beginAccess();
  uint64_t v54 = v61;
  sub_1DCD2889C(v53, v61, &qword_1EBE84CE0);
  int v55 = v33((char *)v54, 1, v39);
  unint64_t v56 = v62;
  if (v55 == 1)
  {
    int *v62 = 0;
    sub_1DD047BE8();
    sub_1DCD2479C(v54, &qword_1EBE84CE0);
  }
  else
  {
    sub_1DCFE9378(v54, (uint64_t)v62, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  }
  int v58 = *v56;
  sub_1DCFE816C((uint64_t)v56, type metadata accessor for Argos_Protos_Queryflow_ImageResizeConfig);
  if (a2 >= a1) {
    double v59 = a1;
  }
  else {
    double v59 = a2;
  }
  *(double *)&uint64_t result = (double)v58 / v59 * a1;
  return result;
}

BOOL sub_1DCFE894C(char *a1, double *a2, double *a3, double a4, double a5)
{
  uint64_t v6 = v5;
  double v57 = a5;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84C88);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v53 - v15;
  char v17 = *a1;
  double v18 = *a2;
  double v19 = a2[1];
  CGFloat v20 = a2[2];
  CGFloat v21 = a2[3];
  double v22 = *a3;
  double v23 = a3[1];
  double v56 = a3[2];
  double v55 = a3[3];
  uint64_t v58 = *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20);
  uint64_t v24 = *(void *)(v6 + v58);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = sub_1DCD9C35C(v17);
  uint64_t v28 = v27;
  if (*(void *)(v25 + 16))
  {
    uint64_t v29 = v26;
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_1DCEAD1A4(v29, v28);
    if (v31)
    {
      unint64_t v32 = v30;
      uint64_t v33 = *(void *)(v25 + 56);
      uint64_t v34 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v54 = v6;
      char v36 = v17;
      uint64_t v37 = v35;
      sub_1DCF30F00(v33 + *(void *)(v35 + 72) * v32, (uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v16, 0, 1, v34);
      char v17 = v36;
      uint64_t v6 = v54;
    }
    else
    {
      uint64_t v34 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v16, 1, 1, v34);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v16, 1, 1, v34);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
  uint64_t v38 = *(void *)(v34 - 8);
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v39(v16, 1, v34) == 1)
  {
    sub_1DCD2479C((uint64_t)v16, &qword_1EBE84C88);
  }
  else
  {
    long long v40 = (float *)(*(void *)&v16[*(int *)(v34 + 20)]
                  + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__minimumObjectSize);
    swift_beginAccess();
    float v41 = *v40;
    sub_1DCFE816C((uint64_t)v16, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    if (v41 > 0.0)
    {
      uint64_t v42 = *(void *)(v6 + v58);
      goto LABEL_12;
    }
  }
  uint64_t v42 = *(void *)(v6 + v58);
  swift_beginAccess();
  float v41 = *(float *)(v42 + 28);
LABEL_12:
  swift_beginAccess();
  uint64_t v43 = *(void *)(v42 + 16);
  uint64_t v44 = sub_1DCD9C35C(v17);
  uint64_t v46 = v45;
  if (*(void *)(v43 + 16))
  {
    uint64_t v47 = v44;
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_1DCEAD1A4(v47, v46);
    if (v49)
    {
      sub_1DCF30F00(*(void *)(v43 + 56) + *(void *)(v38 + 72) * v48, (uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v13, 0, 1, v34);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v13, 1, 1, v34);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v13, 1, 1, v34);
  }
  swift_bridgeObjectRelease();
  if (v39(v13, 1, v34) == 1)
  {
    sub_1DCD2479C((uint64_t)v13, &qword_1EBE84C88);
  }
  else
  {
    uint64_t v50 = (unsigned __int8 *)(*(void *)&v13[*(int *)(v34 + 20)]
                            + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__useRefinedRegionAsObjectRegion);
    swift_beginAccess();
    LODWORD(v50) = *v50;
    sub_1DCFE816C((uint64_t)v13, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    if (v50)
    {
      double v18 = v22;
      double v19 = v23;
      CGFloat v20 = v56;
      CGFloat v21 = v55;
    }
  }
  v59.origin.x = v18;
  v59.origin.y = v19;
  v59.size.width = v20;
  v59.size.height = v21;
  double v51 = v41;
  if (CGRectGetWidth(v59) * a4 < v51) {
    return 0;
  }
  v60.origin.x = v18;
  v60.origin.y = v19;
  v60.size.width = v20;
  v60.size.height = v21;
  return CGRectGetHeight(v60) * v57 >= v51;
}

float sub_1DCFE8EDC(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE84C88);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *a1;
  uint64_t v14 = *(int *)(type metadata accessor for Argos_Protos_Queryflow_ParseConfig(0) + 20);
  uint64_t v15 = *(void *)(v3 + v14);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = sub_1DCD9C35C(v13);
  uint64_t v19 = v18;
  if (*(void *)(v16 + 16))
  {
    uint64_t v20 = v17;
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1DCEAD1A4(v20, v19);
    if (v22)
    {
      sub_1DCF30F00(*(void *)(v16 + 56) + *(void *)(v10 + 72) * v21, (uint64_t)v8, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1DCD2479C((uint64_t)v8, &qword_1EBE84C88);
    uint64_t v23 = *(void *)(v3 + v14);
    swift_beginAccess();
    return *(float *)(v23 + 24);
  }
  else
  {
    uint64_t v25 = sub_1DCFE9378((uint64_t)v8, (uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
    MEMORY[0x1F4188790](v25);
    v31[-2] = v12;
    uint64_t v26 = sub_1DCFB3C70((void (*)(uint64_t *__return_ptr, void *))sub_1DCFE93E0, (uint64_t)&v31[-4], a2);
    unint64_t v27 = sub_1DCFE9320((uint64_t)v26);
    swift_bridgeObjectRelease();
    if ((v27 & 0x100000000) != 0 || (float v24 = *(float *)&v27, *(float *)&v27 <= 0.0))
    {
      uint64_t v28 = (float *)(*(void *)&v12[*(int *)(v9 + 20)]
                    + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__boxScoreThreshold);
      swift_beginAccess();
      float v24 = *v28;
      if (*v28 <= 0.0)
      {
        uint64_t v29 = *(void *)(v3 + v14);
        swift_beginAccess();
        float v24 = *(float *)(v29 + 24);
      }
    }
    sub_1DCFE816C((uint64_t)v12, type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig);
  }
  return v24;
}

uint64_t sub_1DCFE9240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = (uint64_t *)(*(void *)(a2
                             + *(int *)(type metadata accessor for Argos_Protos_Queryflow_DomainParseConfig(0) + 20))
                 + OBJC_IVAR____TtCV18VisualIntelligence40Argos_Protos_Queryflow_DomainParseConfigP33_7DF24988070CDFF9E5CDF6DD63AA88A313_StorageClass__ontologyBoxScoreThresholds);
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *v6;
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1DCEAD1A4(v5, v4);
    if (v10) {
      int v11 = *(_DWORD *)(*(void *)(v8 + 56) + 4 * v9);
    }
    else {
      int v11 = 0;
    }
    char v12 = v10 ^ 1;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    int v11 = 0;
    char v12 = 1;
  }
  *(_DWORD *)a3 = v11;
  *(unsigned char *)(a3 + 4) = v12 & 1;
  return result;
}

unint64_t sub_1DCFE9320(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    float v2 = *(float *)(a1 + 32);
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v4 = (float *)(a1 + 36);
      do
      {
        float v5 = *v4++;
        float v6 = v5;
        if (v5 < v2) {
          float v2 = v6;
        }
        --v3;
      }
      while (v3);
    }
    uint64_t v7 = LODWORD(v2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_1DCFE9378(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1DCFE93E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1DCFE9240(a1, *(void *)(v2 + 16), a2);
}

void sub_1DCFE93FC(void *a1)
{
  uint64_t v3 = sub_1DD046478();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  float v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v12 - v8;
  sub_1DCFE9850((uint64_t)v12 - v8);
  sub_1DCF3D194();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = sub_1DCF3D1D4((uint64_t)v6, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    id v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for OCRTitleModel();
    *(void *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for OCRTitleModelInput()
{
  return self;
}

uint64_t type metadata accessor for OCRTitleModelOutput()
{
  return self;
}

uint64_t sub_1DCFE9850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1DD046478();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE848E0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = (void *)sub_1DD0483D8();
  char v12 = (void *)sub_1DD0483D8();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1DD046438();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OCRTitleModel()
{
  return self;
}

void sub_1DCFE9AE0(void *a1)
{
  uint64_t v3 = sub_1DD046478();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v12 - v8;
  sub_1DCFEA058((uint64_t)v12 - v8);
  sub_1DCF3D194();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = sub_1DCF3D1D4((uint64_t)v6, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    id v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for EncryptedSearchLTR();
    *(void *)(swift_allocObject() + 16) = v11;
  }
}

id sub_1DCFE9CD8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 3235704 && a2 == 0xE300000000000000;
  if (v3 || (sub_1DD048FA8() & 1) != 0)
  {
    uint64_t v6 = v2 + 2;
    return objc_msgSend(self, sel_featureValueWithMultiArray_, *v6);
  }
  if (a1 == 0x745F6E69616D6F64 && a2 == 0xEA00000000006761 || (sub_1DD048FA8() & 1) != 0)
  {
    uint64_t v6 = v2 + 3;
    return objc_msgSend(self, sel_featureValueWithMultiArray_, *v6);
  }
  if (a1 == 1802723693 && a2 == 0xE400000000000000 || (sub_1DD048FA8() & 1) != 0)
  {
    uint64_t v6 = v2 + 4;
    return objc_msgSend(self, sel_featureValueWithMultiArray_, *v6);
  }
  return 0;
}

uint64_t sub_1DCFE9E7C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EncryptedSearchLTRInput()
{
  return self;
}

uint64_t type metadata accessor for EncryptedSearchLTROutput()
{
  return self;
}

uint64_t sub_1DCFEA058@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1DD046478();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE848E0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = (void *)sub_1DD0483D8();
  char v12 = (void *)sub_1DD0483D8();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1DD046438();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EncryptedSearchLTR()
{
  return self;
}

void sub_1DCFEA2DC(void *a1)
{
  uint64_t v3 = sub_1DD046478();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v12 - v8;
  sub_1DCFEA730((uint64_t)v12 - v8);
  sub_1DCF3D194();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = sub_1DCF3D1D4((uint64_t)v6, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    id v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for TitleClassificationModel();
    *(void *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for TitleClassificationModelInput()
{
  return self;
}

uint64_t type metadata accessor for TitleClassificationModelOutput()
{
  return self;
}

uint64_t sub_1DCFEA730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1DD046478();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE848E0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = (void *)sub_1DD0483D8();
  char v12 = (void *)sub_1DD0483D8();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1DD046438();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TitleClassificationModel()
{
  return self;
}

void sub_1DCFEA9B4(void *a1)
{
  uint64_t v3 = sub_1DD046478();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v12 - v8;
  sub_1DCFEAE08((uint64_t)v12 - v8);
  sub_1DCF3D194();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = sub_1DCF3D1D4((uint64_t)v6, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    id v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for OCRAddressModel();
    *(void *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for OCRAddressModelInput()
{
  return self;
}

uint64_t type metadata accessor for OCRAddressModelOutput()
{
  return self;
}

uint64_t sub_1DCFEAE08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1DD046478();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE848E0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = (void *)sub_1DD0483D8();
  char v12 = (void *)sub_1DD0483D8();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1DD046438();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OCRAddressModel()
{
  return self;
}

void sub_1DCFEB094(void *a1)
{
  uint64_t v3 = sub_1DD046478();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)v12 - v8;
  sub_1DCFEB4E8((uint64_t)v12 - v8);
  sub_1DCF3D194();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = sub_1DCF3D1D4((uint64_t)v6, (uint64_t)a1);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    id v11 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    type metadata accessor for CategoryClassificationModel();
    *(void *)(swift_allocObject() + 16) = v11;
  }
}

uint64_t type metadata accessor for CategoryClassificationModelInput()
{
  return self;
}

uint64_t type metadata accessor for CategoryClassificationModelOutput()
{
  return self;
}

uint64_t sub_1DCFEB4E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1DD046478();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE848E0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v11 = (void *)sub_1DD0483D8();
  char v12 = (void *)sub_1DD0483D8();
  id v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (v13)
  {
    sub_1DD046438();

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if (result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CategoryClassificationModel()
{
  return self;
}

uint64_t sub_1DCFEB76C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EAB04A50);
  uint64_t v3 = sub_1DD048B68();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v24 = a1 + 32;
  do
  {
    uint64_t v6 = *(unsigned __int8 *)(v24 + v4);
    sub_1DD0490B8();
    sub_1DCDE45B4(v6);
    sub_1DD0484F8();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1DD049108();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xE700000000000000;
        unint64_t v14 = 0x38343938333851;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x363736323251;
            break;
          case 2:
            unint64_t v13 = 0xE900000000000036;
            unint64_t v14 = 0x3935373131353651;
            break;
          case 3:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x343836323151;
            break;
          case 4:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x353437343151;
            break;
          case 5:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 909457233;
            break;
          case 6:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 959592273;
            break;
          case 7:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 875835729;
            break;
          case 8:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 909390161;
            break;
          case 9:
            unint64_t v13 = 0xE500000000000000;
            unint64_t v14 = 0x3331313551;
            break;
          case 0xA:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x363038333451;
            break;
          case 0xB:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x313138303151;
            break;
          case 0xC:
            unint64_t v14 = 0x3937343138373551;
            unint64_t v13 = 0xE900000000000035;
            break;
          case 0xD:
            unint64_t v14 = 0x39363130343351;
            break;
          case 0xE:
            unint64_t v13 = 0xE500000000000000;
            unint64_t v14 = 0x3439323551;
            break;
          case 0xF:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x303634313151;
            break;
          case 0x10:
            unint64_t v13 = 0xE400000000000000;
            unint64_t v14 = 825701713;
            break;
          case 0x11:
            unint64_t v14 = 0x39373931313851;
            break;
          case 0x12:
            unint64_t v14 = 0x36323436383351;
            break;
          case 0x13:
            unint64_t v14 = 909457489;
            unint64_t v13 = 0xE400000000000000;
            break;
          case 0x14:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x3331323530333351;
            break;
          case 0x15:
            unint64_t v14 = 0x31393135323151;
            break;
          case 0x16:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x3130303132393251;
            break;
          case 0x17:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x343330313151;
            break;
          case 0x18:
            unint64_t v14 = 0x35383739323451;
            break;
          case 0x19:
            unint64_t v14 = 0x34393538303251;
            break;
          case 0x1A:
            unint64_t v14 = 0x31363830363851;
            break;
          case 0x1B:
            unint64_t v14 = 0x39343536343751;
            break;
          case 0x1C:
            unint64_t v14 = 0x37333835363451;
            break;
          case 0x1D:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x3538393839383851;
            break;
          case 0x1E:
            unint64_t v13 = 0xE900000000000038;
            unint64_t v14 = 0x3234353231373151;
            break;
          case 0x1F:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x3238303539363351;
            break;
          case 0x20:
            unint64_t v13 = 0xE600000000000000;
            unint64_t v14 = 0x303530303451;
            break;
          case 0x21:
            unint64_t v13 = 0x80000001DD066F50;
            unint64_t v14 = 0xD000000000000011;
            break;
          case 0x22:
            unint64_t v14 = 0x33313138353251;
            break;
          case 0x23:
            unint64_t v13 = 0xE800000000000000;
            unint64_t v14 = 0x3432333338373151;
            break;
          default:
            break;
        }
        unint64_t v15 = 0xE700000000000000;
        uint64_t v16 = 0x38343938333851;
        switch(v6)
        {
          case 1:
            unint64_t v15 = 0xE600000000000000;
            if (v14 == 0x363736323251) {
              goto LABEL_110;
            }
            goto LABEL_111;
          case 2:
            unint64_t v15 = 0xE900000000000036;
            if (v14 != 0x3935373131353651) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 3:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x343836323151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 4:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x353437343151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 5:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 909457233) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 6:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 959592273) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 7:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 875835729) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 8:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 909390161) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 9:
            unint64_t v15 = 0xE500000000000000;
            if (v14 != 0x3331313551) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 10:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x363038333451) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 11:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x313138303151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 12:
            unint64_t v15 = 0xE900000000000035;
            if (v14 != 0x3937343138373551) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 13:
            uint64_t v17 = 0x363130343351;
            goto LABEL_94;
          case 14:
            unint64_t v15 = 0xE500000000000000;
            if (v14 != 0x3439323551) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 15:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x303634313151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 16:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 825701713) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 17:
            uint64_t v17 = 0x373931313851;
            goto LABEL_94;
          case 18:
            if (v14 != 0x36323436383351) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 19:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 909457489) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 20:
            unint64_t v15 = 0xE800000000000000;
            if (v14 != 0x3331323530333351) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 21:
            uint64_t v18 = 0x393135323151;
            goto LABEL_91;
          case 22:
            unint64_t v15 = 0xE800000000000000;
            if (v14 != 0x3130303132393251) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 23:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x343330313151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 24:
            if (v14 != 0x35383739323451) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 25:
            if (v14 != 0x34393538303251) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 26:
            uint64_t v18 = 0x363830363851;
LABEL_91:
            if (v14 != (v18 & 0xFFFFFFFFFFFFLL | 0x31000000000000)) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 27:
            uint64_t v17 = 0x343536343751;
LABEL_94:
            if (v14 != (v17 & 0xFFFFFFFFFFFFLL | 0x39000000000000)) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 28:
            if (v14 != 0x37333835363451) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 29:
            unint64_t v15 = 0xE800000000000000;
            if (v14 != 0x3538393839383851) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 30:
            unint64_t v15 = 0xE900000000000038;
            if (v14 != 0x3234353231373151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 31:
            unint64_t v15 = 0xE800000000000000;
            if (v14 != 0x3238303539363351) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 32:
            unint64_t v15 = 0xE600000000000000;
            if (v14 != 0x303530303451) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 33:
            unint64_t v15 = 0x80000001DD066F50;
            if (v14 != 0xD000000000000011) {
              goto LABEL_111;
            }
            goto LABEL_110;
          case 34:
            uint64_t v16 = 0x33313138353251;
            goto LABEL_109;
          case 35:
            unint64_t v15 = 0xE800000000000000;
            if (v14 != 0x3432333338373151) {
              goto LABEL_111;
            }
            goto LABEL_110;
          default:
LABEL_109:
            if (v14 != v16) {
              goto LABEL_111;
            }
LABEL_110:
            if (v13 == v15)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_111:
            char v19 = sub_1DD048FA8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v19) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_116;
            }
            break;
        }
      }
    }
LABEL_116:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v20 = *(void *)(v3 + 16);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
      JUMPOUT(0x1DCFEC024);
    }
    *(void *)(v3 + 16) = v22;
LABEL_4:
    ++v4;
  }
  while (v4 != v1);
  return v3;
}

uint64_t sub_1DCFEC144(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE86908);
    uint64_t v3 = sub_1DD048B68();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      uint64_t v7 = (uint64_t *)(v6 + 16 * v4);
      uint64_t v8 = *v7;
      int v9 = *((unsigned __int8 *)v7 + 8);
      sub_1DD0490B8();
      sub_1DCE10BA4();
      sub_1DD048368();
      uint64_t result = sub_1DD049108();
      uint64_t v11 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v12 = result & v11;
      unint64_t v13 = (result & (unint64_t)v11) >> 6;
      uint64_t v14 = *(void *)(v5 + 8 * v13);
      uint64_t v15 = 1 << (result & v11);
      uint64_t v16 = *(void *)(v3 + 48);
      if ((v15 & v14) != 0)
      {
        do
        {
          BOOL v21 = (uint64_t *)(v16 + 16 * v12);
          if (*((unsigned char *)v21 + 8)) {
            uint64_t v22 = *v21 != 0;
          }
          else {
            uint64_t v22 = *v21;
          }
          if (v9)
          {
            if (v8)
            {
              if (v22 == 1) {
                goto LABEL_3;
              }
            }
            else if (!v22)
            {
              goto LABEL_3;
            }
          }
          else if (v22 == v8)
          {
            goto LABEL_3;
          }
          unint64_t v12 = (v12 + 1) & v11;
          unint64_t v13 = v12 >> 6;
          uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
          uint64_t v15 = 1 << v12;
        }
        while ((v14 & (1 << v12)) != 0);
      }
      *(void *)(v5 + 8 * v13) = v15 | v14;
      uint64_t v17 = v16 + 16 * v12;
      *(void *)uint64_t v17 = v8;
      *(unsigned char *)(v17 + 8) = v9;
      uint64_t v18 = *(void *)(v3 + 16);
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19) {
        break;
      }
      *(void *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC870];
  }
  return result;
}

uint64_t sub_1DCFEC2D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBE86910);
    uint64_t v3 = sub_1DD048B68();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_1DD0490B8();
      swift_bridgeObjectRetain();
      sub_1DD0484F8();
      uint64_t result = sub_1DD049108();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_1DD048FA8(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          BOOL v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_1DD048FA8();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      BOOL v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

float faiss::fvec_norms_L2(faiss *this, faiss *a2, unint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    uint64_t v8 = 4 * a3;
    do
    {
      float result = sqrtf(faiss::fvec_norm_L2sqr(a2, a3));
      *(float *)this = result;
      this = (faiss *)((char *)this + 4);
      a2 = (faiss *)((char *)a2 + v8);
      --v4;
    }
    while (v4);
  }
  return result;
}

void faiss::fvec_norms_L2sqr(faiss *this, faiss *a2, unint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    uint64_t v8 = 4 * a3;
    do
    {
      *(float *)this = faiss::fvec_norm_L2sqr(a2, a3);
      this = (faiss *)((char *)this + 4);
      a2 = (faiss *)((char *)a2 + v8);
      --v4;
    }
    while (v4);
  }
}

void faiss::fvec_renorm_L2(unint64_t this, uint64_t a2, float *a3, float *a4)
{
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 4 * this;
    int v9 = a3;
    do
    {
      float v10 = faiss::fvec_norm_L2sqr((faiss *)&a3[v7 * this], this);
      if (v10 > 0.0 && this)
      {
        float v11 = 1.0 / sqrtf(v10);
        unint64_t v12 = v9;
        unint64_t v13 = this;
        do
        {
          *unint64_t v12 = v11 * *v12;
          ++v12;
          --v13;
        }
        while (v13);
      }
      ++v7;
      int v9 = (float *)((char *)v9 + v8);
    }
    while (v7 != a2);
  }
}

void faiss::knn_inner_product(uint64_t a1, const float *a2, unint64_t a3, unint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v9 = a6->u64[1];
  if (v9 >= faiss::distance_compute_min_k_reservoir)
  {
    int v36 = a6->i64[0];
    int8x16_t v37 = vextq_s8(a6[1], a6[1], 8uLL);
    *(_OWORD *)long long v40 = 0u;
    *(_OWORD *)float v41 = 0u;
    long long v42 = 0u;
    long long __p = 0u;
    uint64_t v44 = 0;
    unint64_t v38 = v9;
    unint64_t v39 = (2 * v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5) {
        operator new[]();
      }
    }
    else
    {
      faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(&alpha, (uint64_t)&v36);
      if (a4)
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = alpha;
          unint64_t v25 = *((void *)alpha + 3);
          unint64_t v26 = *((void *)alpha + 4);
          if (v25 >= v26) {
            __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
          }
          v51[0] = v46;
          v51[1] = (uint64_t)v49;
          v51[2] = 0;
          v51[3] = v25;
          v51[4] = v26;
          int v52 = -8388609;
          uint64_t v53 = v23;
          if (a5)
          {
            uint64_t v27 = 0;
            uint64_t v28 = a2;
            do
            {
              float v29 = faiss::fvec_inner_product((faiss *)(a1 + 4 * v23 * a3), v28, a3);
              faiss::ReservoirTopN<faiss::CMin<float,long long>>::add((uint64_t)v51, v27++, v29);
              v28 += a3;
            }
            while (a5 != v27);
            uint64_t v24 = alpha;
            uint64_t v30 = v53;
            unint64_t v25 = *((void *)alpha + 3);
          }
          else
          {
            uint64_t v30 = v23;
          }
          faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result(v51, (float *)(*((void *)v24 + 1) + 4 * v30 * v25), (uint64_t *)(*((void *)v24 + 2) + 8 * v30 * v25));
          ++v23;
        }
        while (v23 != a4);
      }
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete((void *)v46);
      }
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v41[1])
    {
      *(void **)&long long v42 = v41[1];
      operator delete(v41[1]);
    }
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
  }
  else
  {
    int v36 = a6->i64[0];
    int8x16_t v37 = vextq_s8(a6[1], a6[1], 8uLL);
    unint64_t v38 = v9;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5) {
        operator new[]();
      }
    }
    else
    {
      alpha = &v36;
      uint64_t v46 = v9;
      if (a4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 4 * a3;
        do
        {
          uint64_t v14 = v46;
          uint64_t v15 = *((void *)alpha + 1);
          uint64_t v16 = (_DWORD *)(v15 + 4 * v46 * v12);
          uint64_t v47 = (uint64_t)v16;
          uint64_t v17 = *((void *)alpha + 2);
          uint64_t v48 = v17 + 8 * v46 * v12;
          if (v46)
          {
            uint64_t v18 = (void *)(v17 + v46 * v11);
            BOOL v19 = (_DWORD *)(v15 + v46 * v10);
            do
            {
              *v19++ = -8388609;
              *v18++ = -1;
              --v14;
            }
            while (v14);
          }
          uint64_t v34 = v10;
          LODWORD(v49) = *v16;
          if (a5)
          {
            uint64_t v20 = 0;
            BOOL v21 = a2;
            do
            {
              float v22 = faiss::fvec_inner_product((faiss *)(a1 + 4 * v12 * a3), v21, a3);
              faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::add_result((uint64_t)&alpha, v20++, v22);
              BOOL v21 = (const float *)((char *)v21 + v13);
            }
            while (a5 != v20);
          }
          faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::end(&alpha);
          ++v12;
          v11 += 8;
          uint64_t v10 = v34 + 4;
        }
        while (v12 != a4);
      }
    }
  }
}

void sub_1DCFECC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::~ReservoirResultHandler(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::knn_L2sqr(uint64_t a1, const float *a2, unint64_t a3, unint64_t a4, uint64_t a5, int8x16_t *a6)
{
  unint64_t v9 = a6->u64[1];
  if (v9 >= faiss::distance_compute_min_k_reservoir)
  {
    int v36 = a6->i64[0];
    int8x16_t v37 = vextq_s8(a6[1], a6[1], 8uLL);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long __p = 0u;
    uint64_t v44 = 0;
    unint64_t v38 = v9;
    unint64_t v39 = (2 * v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5) {
        operator new[]();
      }
    }
    else
    {
      faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(&alpha, (uint64_t)&v36);
      if (a4)
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = alpha;
          unint64_t v25 = *((void *)alpha + 3);
          unint64_t v26 = *((void *)alpha + 4);
          if (v25 >= v26) {
            __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
          }
          v51[0] = v46;
          v51[1] = (uint64_t)v49;
          v51[2] = 0;
          v51[3] = v25;
          v51[4] = v26;
          int v52 = 2139095039;
          uint64_t v53 = v23;
          if (a5)
          {
            uint64_t v27 = 0;
            uint64_t v28 = a2;
            do
            {
              float v29 = faiss::fvec_L2sqr((faiss *)(a1 + 4 * v23 * a3), v28, a3);
              faiss::ReservoirTopN<faiss::CMax<float,long long>>::add((uint64_t)v51, v27++, v29);
              v28 += a3;
            }
            while (a5 != v27);
            uint64_t v24 = alpha;
            uint64_t v30 = v53;
            unint64_t v25 = *((void *)alpha + 3);
          }
          else
          {
            uint64_t v30 = v23;
          }
          faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result(v51, (float *)(*((void *)v24 + 1) + 4 * v30 * v25), (uint64_t *)(*((void *)v24 + 2) + 8 * v30 * v25));
          ++v23;
        }
        while (v23 != a4);
      }
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete((void *)v46);
      }
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (*((void *)&v41 + 1))
    {
      *(void *)&long long v42 = *((void *)&v41 + 1);
      operator delete(*((void **)&v41 + 1));
    }
    if ((void)v40)
    {
      *((void *)&v40 + 1) = v40;
      operator delete((void *)v40);
    }
  }
  else
  {
    int v36 = a6->i64[0];
    int8x16_t v37 = vextq_s8(a6[1], a6[1], 8uLL);
    unint64_t v38 = v9;
    if (faiss::distance_compute_blas_threshold <= a4)
    {
      if (a4 && a5) {
        operator new[]();
      }
    }
    else
    {
      alpha = &v36;
      uint64_t v46 = v9;
      if (a4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 4 * a3;
        do
        {
          uint64_t v14 = v46;
          uint64_t v15 = *((void *)alpha + 1);
          uint64_t v16 = (_DWORD *)(v15 + 4 * v46 * v12);
          uint64_t v47 = (uint64_t)v16;
          uint64_t v17 = *((void *)alpha + 2);
          uint64_t v48 = v17 + 8 * v46 * v12;
          if (v46)
          {
            uint64_t v18 = (void *)(v17 + v46 * v11);
            BOOL v19 = (_DWORD *)(v15 + v46 * v10);
            do
            {
              *v19++ = 2139095039;
              *v18++ = -1;
              --v14;
            }
            while (v14);
          }
          uint64_t v35 = v10;
          LODWORD(v49) = *v16;
          if (a5)
          {
            uint64_t v20 = 0;
            BOOL v21 = a2;
            do
            {
              float v22 = faiss::fvec_L2sqr((faiss *)(a1 + 4 * v12 * a3), v21, a3);
              faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::add_result((uint64_t)&alpha, v20++, v22);
              BOOL v21 = (const float *)((char *)v21 + v13);
            }
            while (a5 != v20);
          }
          faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::end(&alpha);
          ++v12;
          v11 += 8;
          uint64_t v10 = v35 + 4;
        }
        while (v12 != a4);
      }
    }
  }
}

void sub_1DCFED71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  MEMORY[0x1E01AF650](v34, 0x1000C8052888210);
  MEMORY[0x1E01AF650](a33, 0x1000C8052888210);
  faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::~ReservoirResultHandler(&a34);
  _Unwind_Resume(a1);
}

uint64_t faiss::range_search_L2sqr(faiss *this, const float *a2, unint64_t a3, unint64_t a4, uint64_t a5, faiss::RangeSearchResult *a6, float a7, faiss::RangeSearchResult *a8)
{
  uint64_t v18 = a6;
  float v19 = a7;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 0;
  if (faiss::distance_compute_blas_threshold <= a4)
  {
    if (a4 && a5) {
      operator new[]();
    }
  }
  else
  {
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(alpha, a6);
    float v25 = v19;
    unint64_t v26 = 0;
    if (a4)
    {
      uint64_t v10 = 0;
      do
      {
        unint64_t v26 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)alpha, v10);
        if (a5)
        {
          uint64_t v11 = 0;
          uint64_t v12 = a2;
          do
          {
            float v13 = faiss::fvec_L2sqr((faiss *)((char *)this + 4 * v10 * a3), v12, a3);
            if (v25 > v13) {
              faiss::RangeQueryResult::add(v26, v13, v11);
            }
            ++v11;
            v12 += a3;
          }
          while (a5 != v11);
        }
        ++v10;
      }
      while (v10 != a4);
    }
    faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler((faiss::RangeSearchPartialResult *)alpha);
  }
  return faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&v18);
}

void sub_1DCFEDC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x1E01AF650](v28, 0x1000C8052888210);
  MEMORY[0x1E01AF650](a27, 0x1000C8052888210);
  faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t faiss::range_search_inner_product(faiss *this, const float *a2, unint64_t a3, unint64_t a4, uint64_t a5, faiss::RangeSearchResult *a6, float a7, faiss::RangeSearchResult *a8)
{
  uint64_t v18 = a6;
  float v19 = a7;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 0;
  if (faiss::distance_compute_blas_threshold <= a4)
  {
    if (a4 && a5) {
      operator new[]();
    }
  }
  else
  {
    faiss::RangeSearchPartialResult::RangeSearchPartialResult(alpha, a6);
    float v25 = v19;
    unint64_t v26 = 0;
    if (a4)
    {
      uint64_t v10 = 0;
      do
      {
        unint64_t v26 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)alpha, v10);
        if (a5)
        {
          uint64_t v11 = 0;
          uint64_t v12 = a2;
          do
          {
            float v13 = faiss::fvec_inner_product((faiss *)((char *)this + 4 * v10 * a3), v12, a3);
            if (v25 < v13) {
              faiss::RangeQueryResult::add(v26, v13, v11);
            }
            ++v11;
            v12 += a3;
          }
          while (a5 != v11);
        }
        ++v10;
      }
      while (v10 != a4);
    }
    faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler((faiss::RangeSearchPartialResult *)alpha);
  }
  return faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)&v18);
}

void sub_1DCFEDF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler((uint64_t)va);
  _Unwind_Resume(a1);
}

void faiss::fvec_inner_products_by_idx(faiss *this, float *a2, const float *a3, const float *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    uint64_t v12 = 0;
    uint64_t v19 = 8 * a7;
    uint64_t v20 = 4 * a7;
    do
    {
      if (a7)
      {
        float v13 = a4;
        uint64_t v14 = a7;
        uint64_t v15 = (float *)this;
        do
        {
          uint64_t v17 = *(void *)v13;
          v13 += 2;
          uint64_t v16 = v17;
          if ((v17 & 0x8000000000000000) == 0) {
            *uint64_t v15 = faiss::fvec_inner_product((faiss *)&a2[v12 * a5], &a3[v16 * a5], a5);
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
      ++v12;
      this = (faiss *)((char *)this + v20);
      a4 = (const float *)((char *)a4 + v19);
    }
    while (v12 != a6);
  }
}

void faiss::fvec_L2sqr_by_idx(faiss *this, float *a2, const float *a3, const float *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    uint64_t v12 = 0;
    uint64_t v19 = 8 * a7;
    uint64_t v20 = 4 * a7;
    do
    {
      if (a7)
      {
        float v13 = a4;
        uint64_t v14 = a7;
        uint64_t v15 = (float *)this;
        do
        {
          uint64_t v17 = *(void *)v13;
          v13 += 2;
          uint64_t v16 = v17;
          if ((v17 & 0x8000000000000000) == 0) {
            *uint64_t v15 = faiss::fvec_L2sqr((faiss *)&a2[v12 * a5], &a3[v16 * a5], a5);
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
      ++v12;
      this = (faiss *)((char *)this + v20);
      a4 = (const float *)((char *)a4 + v19);
    }
    while (v12 != a6);
  }
}

void faiss::pairwise_indexed_L2sqr(unint64_t this, uint64_t a2, uint64_t a3, const float *a4, const float *a5, const float *a6, uint64_t *a7, float *a8)
{
  if (a2)
  {
    uint64_t v13 = a2;
    do
    {
      uint64_t v16 = *(void *)a4;
      a4 += 2;
      uint64_t v15 = v16;
      if ((v16 & 0x8000000000000000) == 0 && (*(void *)a6 & 0x8000000000000000) == 0) {
        *(float *)a7 = faiss::fvec_L2sqr((faiss *)(a3 + 4 * v15 * this), &a5[*(void *)a6 * this], this);
      }
      a7 = (uint64_t *)((char *)a7 + 4);
      a6 += 2;
      --v13;
    }
    while (v13);
  }
}

void faiss::pairwise_indexed_inner_product(unint64_t this, uint64_t a2, uint64_t a3, const float *a4, const float *a5, const float *a6, uint64_t *a7, float *a8)
{
  if (a2)
  {
    uint64_t v13 = a2;
    do
    {
      uint64_t v16 = *(void *)a4;
      a4 += 2;
      uint64_t v15 = v16;
      if ((v16 & 0x8000000000000000) == 0 && (*(void *)a6 & 0x8000000000000000) == 0) {
        *(float *)a7 = faiss::fvec_inner_product((faiss *)(a3 + 4 * v15 * this), &a5[*(void *)a6 * this], this);
      }
      a7 = (uint64_t *)((char *)a7 + 4);
      a6 += 2;
      --v13;
    }
    while (v13);
  }
}

char *faiss::knn_inner_products_by_idx(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v54 = result;
  if (!a5) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = a7[1];
  do
  {
    uint64_t v13 = a7[2];
    uint64_t v12 = a7[3];
    uint64_t v14 = a7[1];
    if (v11)
    {
      uint64_t v15 = (void *)(v13 + v14 * v9);
      unint64_t v16 = v11;
      uint64_t v17 = (_DWORD *)(v12 + v14 * v8);
      do
      {
        *v17++ = -8388609;
        *v15++ = -1;
        --v16;
      }
      while (v16);
    }
    uint64_t v61 = v9;
    uint64_t v62 = v8;
    uint64_t v63 = v10;
    uint64_t v59 = v14;
    uint64_t v60 = v12;
    uint64_t v18 = (float *)(v12 + 4 * v14 * v10);
    uint64_t v58 = v13;
    uint64_t v19 = (uint64_t *)(v13 + 8 * v14 * v10);
    if (!a6) {
      goto LABEL_23;
    }
    uint64_t v20 = 0;
    uint64_t v21 = a3 + 8 * v63 * a6;
    long long v22 = v18 - 1;
    int v23 = v19 - 1;
    do
    {
      uint64_t v24 = *(void *)(v21 + 8 * v20);
      if (v24 < 0) {
        break;
      }
      float v25 = faiss::fvec_inner_product((faiss *)&v54[4 * v63 * a4], (const float *)(a2 + 4 * v24 * a4), a4);
      if (v25 <= *v18) {
        goto LABEL_22;
      }
      uint64_t v26 = *(void *)(v21 + 8 * v20);
      if (v11 < 2)
      {
        uint64_t v27 = 1;
        goto LABEL_21;
      }
      uint64_t v28 = 3;
      unint64_t v29 = 2;
      uint64_t v30 = 1;
      while (1)
      {
        float v31 = v22[v29];
        if (v28 != v11 + 1)
        {
          float v32 = v22[v28];
          if (v31 >= v32) {
            break;
          }
        }
        if (v31 > v25) {
          goto LABEL_20;
        }
LABEL_18:
        uint64_t v27 = v29;
        v22[v30] = v31;
        v23[v30] = v23[v29];
        v29 *= 2;
        uint64_t v28 = (2 * v27) | 1;
        uint64_t v30 = v27;
        if (v29 > v11) {
          goto LABEL_21;
        }
      }
      float v31 = v22[v28];
      unint64_t v29 = v28;
      if (v32 <= v25) {
        goto LABEL_18;
      }
LABEL_20:
      uint64_t v27 = v30;
LABEL_21:
      v22[v27] = v25;
      v23[v27] = v26;
LABEL_22:
      ++v20;
    }
    while (v20 != a6);
LABEL_23:
    if (!v11)
    {
      unint64_t v34 = 0;
      uint64_t v38 = v61;
      uint64_t v37 = v62;
      uint64_t v39 = v63;
      goto LABEL_42;
    }
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v35 = v18 - 1;
    int v36 = v19 - 1;
    uint64_t v38 = v61;
    uint64_t v37 = v62;
    uint64_t v39 = v63;
    while (2)
    {
      float v40 = *v18;
      uint64_t v41 = *v19;
      unint64_t v42 = v11 - v33;
      float v43 = v35[v11 - v33];
      if (v11 - v33 < 2)
      {
        uint64_t v44 = 1;
        goto LABEL_37;
      }
      uint64_t v45 = 3;
      unint64_t v46 = 2;
      uint64_t v47 = 1;
      while (2)
      {
        float v48 = v35[v46];
        if (v45 == v42 + 1 || (float v49 = v35[v45], v48 < v49))
        {
          if (v43 < v48) {
            break;
          }
          goto LABEL_33;
        }
        float v48 = v35[v45];
        unint64_t v46 = v45;
        if (v43 >= v49)
        {
LABEL_33:
          uint64_t v44 = v46;
          v35[v47] = v48;
          v36[v47] = v36[v46];
          v46 *= 2;
          uint64_t v45 = (2 * v44) | 1;
          uint64_t v47 = v44;
          if (v46 > v42) {
            goto LABEL_36;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = v47;
LABEL_36:
      float v43 = v35[v42];
LABEL_37:
      v35[v44] = v43;
      v36[v44] = v36[v42];
      unint64_t v50 = v11 + ~v34;
      v18[v50] = v40;
      v19[v50] = v41;
      if (v41 != -1) {
        ++v34;
      }
      if (++v33 != v11) {
        continue;
      }
      break;
    }
LABEL_42:
    memmove(v18, &v18[v11 - v34], 4 * v34);
    float result = (char *)memmove(v19, &v19[v11 - v34], 8 * v34);
    uint64_t v51 = v11 - v34;
    if (v11 > v34)
    {
      int v52 = (void *)(v58 + v59 * v38 + 8 * v34);
      uint64_t v53 = (_DWORD *)(v60 + v59 * v37 + 4 * v34);
      do
      {
        *v53++ = -8388609;
        *v52++ = -1;
        --v51;
      }
      while (v51);
    }
    uint64_t v10 = v39 + 1;
    uint64_t v9 = v38 + 8;
    uint64_t v8 = v37 + 4;
  }
  while (v10 != a5);
  return result;
}

char *faiss::knn_L2sqr_by_idx(char *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v53 = result;
  if (!a5) {
    return result;
  }
  uint64_t v7 = a7;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = a7[1];
  do
  {
    uint64_t v14 = v7[2];
    uint64_t v13 = v7[3];
    unint64_t v15 = v7[1];
    if (v15)
    {
      unint64_t v16 = (void *)(v14 + v15 * v10);
      uint64_t v17 = v7[1];
      uint64_t v18 = (_DWORD *)(v13 + v15 * v9);
      do
      {
        *v18++ = 2139095039;
        *v16++ = -1;
        --v17;
      }
      while (v17);
    }
    unint64_t v59 = v15;
    uint64_t v60 = v13;
    uint64_t v19 = (float *)(v13 + 4 * v15 * v11);
    uint64_t v58 = v14;
    uint64_t v20 = (uint64_t *)(v14 + 8 * v15 * v11);
    uint64_t v61 = v11;
    if (a6)
    {
      uint64_t v56 = v10;
      uint64_t v57 = v9;
      uint64_t v21 = 0;
      long long v22 = (faiss *)&v53[4 * v11 * a4];
      uint64_t v23 = a3 + 8 * v11 * a6;
      uint64_t v24 = v19 - 1;
      float v25 = v20 - 1;
      while (1)
      {
        float v26 = faiss::fvec_L2sqr(v22, (const float *)(a2 + 4 * *(void *)(v23 + 8 * v21) * a4), a4);
        if (v26 >= *v19) {
          goto LABEL_21;
        }
        uint64_t v27 = *(void *)(v23 + 8 * v21);
        if (v12 < 2)
        {
          uint64_t v28 = 1;
          goto LABEL_20;
        }
        uint64_t v29 = 3;
        unint64_t v30 = 2;
        uint64_t v31 = 1;
        while (1)
        {
          float v32 = v24[v30];
          if (v29 != v12 + 1)
          {
            float v33 = v24[v29];
            if (v32 <= v33) {
              break;
            }
          }
          if (v32 < v26) {
            goto LABEL_19;
          }
LABEL_17:
          uint64_t v28 = v30;
          v24[v31] = v32;
          v25[v31] = v25[v30];
          v30 *= 2;
          uint64_t v29 = (2 * v28) | 1;
          uint64_t v31 = v28;
          if (v30 > v12) {
            goto LABEL_20;
          }
        }
        float v32 = v24[v29];
        unint64_t v30 = v29;
        if (v33 >= v26) {
          goto LABEL_17;
        }
LABEL_19:
        uint64_t v28 = v31;
LABEL_20:
        v24[v28] = v26;
        v25[v28] = v27;
LABEL_21:
        if (++v21 == a6)
        {
          uint64_t v7 = a7;
          unint64_t v15 = a7[1];
          uint64_t v10 = v56;
          uint64_t v9 = v57;
          break;
        }
      }
    }
    if (!v15)
    {
      unint64_t v35 = 0;
      goto LABEL_42;
    }
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    int v36 = v19 - 1;
    uint64_t v37 = v20 - 1;
    do
    {
      float v38 = *v19;
      uint64_t v39 = *v20;
      unint64_t v40 = v15 - v34;
      float v41 = v36[v15 - v34];
      if (v15 - v34 < 2)
      {
        uint64_t v42 = 1;
        goto LABEL_37;
      }
      uint64_t v43 = 3;
      unint64_t v44 = 2;
      uint64_t v45 = 1;
      while (1)
      {
        float v46 = v36[v44];
        if (v43 != v40 + 1)
        {
          float v47 = v36[v43];
          if (v46 <= v47) {
            break;
          }
        }
        if (v41 > v46) {
          goto LABEL_35;
        }
LABEL_33:
        uint64_t v42 = v44;
        v36[v45] = v46;
        v37[v45] = v37[v44];
        v44 *= 2;
        uint64_t v43 = (2 * v42) | 1;
        uint64_t v45 = v42;
        if (v44 > v40) {
          goto LABEL_36;
        }
      }
      float v46 = v36[v43];
      unint64_t v44 = v43;
      if (v41 <= v47) {
        goto LABEL_33;
      }
LABEL_35:
      uint64_t v42 = v45;
LABEL_36:
      float v41 = v36[v40];
LABEL_37:
      v36[v42] = v41;
      v37[v42] = v37[v40];
      unint64_t v48 = v15 + ~v35;
      v19[v48] = v38;
      v20[v48] = v39;
      if (v39 != -1) {
        ++v35;
      }
      ++v34;
    }
    while (v34 != v15);
LABEL_42:
    memmove(v19, &v19[v15 - v35], 4 * v35);
    float result = (char *)memmove(v20, &v20[v15 - v35], 8 * v35);
    unint64_t v49 = v15 - v35;
    if (v15 > v35)
    {
      unint64_t v50 = (void *)(v58 + v59 * v10 + 8 * v35);
      uint64_t v51 = (_DWORD *)(v60 + v59 * v9 + 4 * v35);
      do
      {
        *v51++ = 2139095039;
        *v50++ = -1;
        --v49;
      }
      while (v49);
    }
    uint64_t v11 = v61 + 1;
    v10 += 8;
    v9 += 4;
  }
  while (v61 + 1 != a5);
  return result;
}

uint64_t faiss::pairwise_L2sqr(uint64_t this, uint64_t a2, faiss *a3, uint64_t a4, float *a5, float *a6, float *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 && a4)
  {
    uint64_t v14 = this;
    uint64_t v15 = a9;
    if (a7 == (float *)-1) {
      uint64_t v16 = this;
    }
    else {
      uint64_t v16 = (uint64_t)a7;
    }
    if (a8 == -1) {
      uint64_t v17 = this;
    }
    else {
      uint64_t v17 = a8;
    }
    if (a9 == -1) {
      uint64_t v15 = a4;
    }
    uint64_t v30 = v15;
    int v31 = v17;
    if (a4 >= 1)
    {
      uint64_t v18 = (faiss *)a5;
      uint64_t v19 = 4 * v17;
      uint64_t v20 = a6;
      uint64_t v21 = a4;
      do
      {
        *v20++ = faiss::fvec_norm_L2sqr(v18, v14);
        uint64_t v18 = (faiss *)((char *)v18 + v19);
        --v21;
      }
      while (v21);
    }
    if (a2 > 1)
    {
      uint64_t v22 = 1;
      uint64_t v23 = v30;
      do
      {
        float v24 = faiss::fvec_norm_L2sqr((faiss *)((char *)a3 + 4 * v22 * v16), v14);
        float v25 = a6;
        uint64_t v26 = a4;
        if (a4 >= 1)
        {
          do
          {
            v25[v23] = v24 + *v25;
            ++v25;
            --v26;
          }
          while (v26);
        }
        ++v22;
        v23 += v30;
      }
      while (v22 != a2);
    }
    float v27 = faiss::fvec_norm_L2sqr(a3, v14);
    if (a4 >= 1)
    {
      uint64_t v28 = a6;
      uint64_t v29 = a4;
      do
      {
        *uint64_t v28 = v27 + *v28;
        ++v28;
        --v29;
      }
      while (v29);
    }
    int m = a4;
    int k = v14;
    int n = a2;
    int lda = v31;
    int v37 = v16;
    float beta = 1.0;
    int v35 = v30;
    float alpha = -2.0;
    return sgemm_("Transposed", "Not transposed", &m, &n, &k, &alpha, a5, &lda, (float *)a3, &v37, &beta, a6, &v35);
  }
  return this;
}

float *faiss::inner_product_to_L2sqr(float *this, float *a2, float *a3, const float *a4, uint64_t a5)
{
  if (a4)
  {
    for (i = 0; i != a4; i = (const float *)((char *)i + 1))
    {
      uint64_t v6 = a3;
      uint64_t v7 = this;
      for (uint64_t j = a5; j; --j)
      {
        float v9 = *v6++;
        *uint64_t v7 = (float)(a2[(void)i] + v9) + (float)(*v7 * -2.0);
        ++v7;
      }
      this += a5;
    }
  }
  return this;
}

float faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::add_result(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v3 = *(float **)(a1 + 16);
  if (*v3 >= result) {
    return result;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v3 - 1;
  uint64_t v6 = *(void *)(a1 + 24) - 8;
  if (v4 < 2)
  {
    uint64_t v7 = 1;
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  unint64_t v9 = 2;
  uint64_t v10 = 3;
  while (1)
  {
    float v11 = v5[v9];
    if (v10 != v4 + 1)
    {
      float v12 = v5[v10];
      if (v11 >= v12) {
        break;
      }
    }
    if (v11 > result) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v7 = v9;
    v5[v8] = v11;
    *(void *)(v6 + 8 * v8) = *(void *)(v6 + 8 * v9);
    v9 *= 2;
    uint64_t v10 = (2 * v7) | 1;
    uint64_t v8 = v7;
    if (v9 > v4) {
      goto LABEL_13;
    }
  }
  float v11 = v5[v10];
  unint64_t v9 = v10;
  if (v12 <= result) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v7 = v8;
LABEL_13:
  v5[v7] = result;
  *(void *)(v6 + 8 * v7) = a2;
  float result = *v3;
  *(float *)(a1 + 32) = *v3;
  return result;
}

void *faiss::HeapResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::end(void *a1)
{
  unint64_t v2 = a1[1];
  uint64_t v1 = (int *)a1[2];
  uint64_t v3 = (uint64_t *)a1[3];
  if (!v2)
  {
    unint64_t v5 = 0;
    goto LABEL_20;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = v1 - 1;
  uint64_t v7 = v3 - 1;
  do
  {
    int v8 = *v1;
    uint64_t v9 = *v3;
    unint64_t v10 = v2 - v4;
    float v11 = *(float *)&v6[v2 - v4];
    if (v2 - v4 < 2)
    {
      uint64_t v12 = 1;
      goto LABEL_15;
    }
    uint64_t v13 = 3;
    unint64_t v14 = 2;
    uint64_t v15 = 1;
    while (1)
    {
      float v16 = *(float *)&v6[v14];
      if (v13 != v10 + 1)
      {
        float v17 = *(float *)&v6[v13];
        if (v16 >= v17) {
          break;
        }
      }
      if (v11 < v16) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t v12 = v14;
      *(float *)&v6[v15] = v16;
      v7[v15] = v7[v14];
      v14 *= 2;
      uint64_t v13 = (2 * v12) | 1;
      uint64_t v15 = v12;
      if (v14 > v10) {
        goto LABEL_14;
      }
    }
    float v16 = *(float *)&v6[v13];
    unint64_t v14 = v13;
    if (v11 >= v17) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v12 = v15;
LABEL_14:
    float v11 = *(float *)&v6[v10];
LABEL_15:
    *(float *)&v6[v12] = v11;
    v7[v12] = v7[v10];
    unint64_t v18 = v2 + ~v5;
    v1[v18] = v8;
    v3[v18] = v9;
    if (v9 != -1) {
      ++v5;
    }
    ++v4;
  }
  while (v4 != v2);
LABEL_20:
  memmove(v1, &v1[v2 - v5], 4 * v5);
  float result = memmove(v3, &v3[v2 - v5], 8 * v5);
  unint64_t v20 = v2 - v5;
  if (v2 > v5)
  {
    uint64_t v21 = &v3[v5];
    uint64_t v22 = &v1[v5];
    do
    {
      *v22++ = -8388609;
      *v21++ = -1;
      --v20;
    }
    while (v20);
  }
  return result;
}

void *faiss::HeapResultHandler<faiss::CMin<float,long long>>::add_results(void *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = result[4];
  unint64_t v5 = result[5];
  if (v4 < v5)
  {
    uint64_t v6 = result[1];
    uint64_t v7 = a4 - 4 * a2;
    uint64_t v8 = result[2] - 8;
    for (uint64_t i = result[4]; i != v5; ++i)
    {
      if (a3 <= a2) {
        continue;
      }
      uint64_t v10 = result[3] * i;
      float v11 = (float *)(v6 + 4 * v10);
      uint64_t v12 = v11 - 1;
      float v13 = *v11;
      uint64_t v14 = v8 + 8 * v10;
      unint64_t v15 = a2;
      do
      {
        float v16 = *(float *)(v7 + 4 * (i - v4) * (a3 - a2) + 4 * v15);
        if (v13 >= v16) {
          goto LABEL_18;
        }
        unint64_t v17 = result[3];
        if (v17 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_17;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          float v22 = v12[v20];
          if (v19 != v17 + 1)
          {
            float v23 = v12[v19];
            if (v22 >= v23) {
              break;
            }
          }
          if (v22 > v16) {
            goto LABEL_16;
          }
LABEL_14:
          uint64_t v18 = v20;
          v12[v21] = v22;
          *(void *)(v14 + 8 * v21) = *(void *)(v14 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v17) {
            goto LABEL_17;
          }
        }
        float v22 = v12[v19];
        unint64_t v20 = v19;
        if (v23 <= v16) {
          goto LABEL_14;
        }
LABEL_16:
        uint64_t v18 = v21;
LABEL_17:
        v12[v18] = v16;
        *(void *)(v14 + 8 * v18) = v15;
        float v13 = *v11;
LABEL_18:
        ++v15;
      }
      while (v15 != a3);
    }
  }
  return result;
}

void *faiss::HeapResultHandler<faiss::CMin<float,long long>>::end_multiple(void *result)
{
  unint64_t v1 = result[4];
  if (v1 >= result[5]) {
    return result;
  }
  unint64_t v2 = result;
  uint64_t v3 = 8 * v1;
  uint64_t v4 = 4 * v1;
  do
  {
    uint64_t v6 = v2[2];
    unint64_t v5 = v2[3];
    uint64_t v7 = (int *)(v2[1] + 4 * v5 * v1);
    uint64_t v8 = (uint64_t *)(v6 + 8 * v5 * v1);
    uint64_t v27 = v2[1];
    if (!v5)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    float v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v5 - v9;
      float v16 = *(float *)&v11[v5 - v9];
      if (v5 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        float v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          float v22 = *(float *)&v11[v18];
          if (v21 >= v22) {
            break;
          }
        }
        if (v16 < v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      float v21 = *(float *)&v11[v18];
      unint64_t v19 = v18;
      if (v16 >= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      float v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v5 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v5);
LABEL_22:
    memmove(v7, &v7[v5 - v10], 4 * v10);
    float result = memmove((void *)(v6 + 8 * v5 * v1), &v8[v5 - v10], 8 * v10);
    unint64_t v24 = v5 - v10;
    if (v5 > v10)
    {
      float v25 = (void *)(v6 + v5 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v5 * v4 + 4 * v10);
      do
      {
        *v26++ = -8388609;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v1;
    v3 += 8;
    v4 += 4;
  }
  while (v1 < v2[5]);
  return result;
}

void *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::~SingleResultHandler(void *a1)
{
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::SingleResultHandler::SingleResultHandler(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = a1 + 4;
  std::vector<float>::vector(a1 + 1, *(void *)(a2 + 32));
  std::vector<long long>::vector(v4, *(void *)(a2 + 32));
  return a1;
}

void sub_1DCFEF0B4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DCFEF12C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::add(uint64_t a1, uint64_t a2, float a3)
{
  if (*(float *)(a1 + 40) < a3)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 == *(void *)(a1 + 32))
    {
      faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy(a1);
      uint64_t v6 = *(void *)(a1 + 16);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    *(float *)(*(void *)a1 + 4 * v6) = a3;
    *(void *)(v7 + 8 * v6) = a2;
    *(void *)(a1 + 16) = v6 + 1;
  }
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy(uint64_t a1)
{
  if (*(void *)(a1 + 16) != *(void *)(a1 + 32)) {
    faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy();
  }
  *(float *)(a1 + 40) = MEMORY[0x1E01AF230](*(void *)a1, *(void *)(a1 + 8));
}

void *faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result(uint64_t *a1, float *__dst, uint64_t *a3)
{
  unint64_t v7 = a1[2];
  unint64_t v6 = a1[3];
  if (v6 >= v7) {
    uint64_t v8 = a1[2];
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    uint64_t v12 = __dst - 1;
    int v13 = a3 - 1;
    do
    {
      unint64_t v14 = v9++;
      float v15 = *(float *)(v10 + 4 * v14);
      uint64_t v16 = *(void *)(v11 + 8 * v14);
      if (v14)
      {
        unint64_t v17 = v9;
        while (1)
        {
          uint64_t v18 = v17 >> 1;
          float v19 = v12[v17 >> 1];
          if (v19 <= v15) {
            break;
          }
          v12[v17] = v19;
          v13[v17] = v13[v18];
          BOOL v20 = v17 > 3;
          v17 >>= 1;
          if (!v20) {
            goto LABEL_13;
          }
        }
        uint64_t v18 = v17;
      }
      else
      {
        uint64_t v18 = 1;
      }
LABEL_13:
      v12[v18] = v15;
      v13[v18] = v16;
      unint64_t v7 = a1[2];
      unint64_t v6 = a1[3];
      if (v6 >= v7) {
        unint64_t v21 = a1[2];
      }
      else {
        unint64_t v21 = a1[3];
      }
    }
    while (v21 > v9);
  }
  unint64_t v22 = v7 - v6;
  if (v7 < v6)
  {
    if (!v7)
    {
      unint64_t v24 = 0;
      goto LABEL_55;
    }
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    float v25 = __dst - 1;
    uint64_t v26 = a3 - 1;
    while (1)
    {
      float v27 = *__dst;
      uint64_t v28 = *a3;
      unint64_t v29 = v7 - v23;
      float v30 = v25[v7 - v23];
      if (v7 - v23 < 2)
      {
        uint64_t v31 = 1;
        goto LABEL_32;
      }
      uint64_t v32 = 3;
      unint64_t v33 = 2;
      uint64_t v34 = 1;
      while (1)
      {
        float v35 = v25[v33];
        if (v32 != v29 + 1)
        {
          float v36 = v25[v32];
          if (v35 >= v36) {
            break;
          }
        }
        if (v30 < v35) {
          goto LABEL_30;
        }
LABEL_28:
        uint64_t v31 = v33;
        v25[v34] = v35;
        v26[v34] = v26[v33];
        v33 *= 2;
        uint64_t v32 = (2 * v31) | 1;
        uint64_t v34 = v31;
        if (v33 > v29) {
          goto LABEL_31;
        }
      }
      float v35 = v25[v32];
      unint64_t v33 = v32;
      if (v30 >= v36) {
        goto LABEL_28;
      }
LABEL_30:
      uint64_t v31 = v34;
LABEL_31:
      float v30 = v25[v29];
LABEL_32:
      v25[v31] = v30;
      v26[v31] = v26[v29];
      unint64_t v37 = v7 + ~v24;
      __dst[v37] = v27;
      a3[v37] = v28;
      if (v28 != -1) {
        ++v24;
      }
      if (++v23 == v7)
      {
LABEL_55:
        memmove(__dst, &__dst[v7 - v24], 4 * v24);
        float result = memmove(a3, &a3[v7 - v24], 8 * v24);
        uint64_t v53 = v7 - v24;
        if (v7 > v24)
        {
          uint64_t v54 = &a3[v24];
          double v55 = &__dst[v24];
          do
          {
            *v55++ = -3.4028e38;
            *v54++ = -1;
            --v53;
          }
          while (v53);
        }
        uint64_t v56 = a1[2];
        uint64_t v57 = a1[3] - v56;
        if (v57)
        {
          uint64_t v58 = &__dst[v56];
          unint64_t v59 = &a3[v56];
          do
          {
            *v58++ = -3.4028e38;
            *v59++ = -1;
            --v57;
          }
          while (v57);
        }
        return result;
      }
    }
  }
  uint64_t v38 = a1[1];
  uint64_t v39 = *a1 + 4 * v6;
  if (!v38)
  {
    if (v7 == v6) {
      goto LABEL_78;
    }
    uint64_t v60 = 0;
    uint64_t v61 = __dst - 1;
    uint64_t v62 = a3 - 1;
LABEL_64:
    float v63 = *(float *)(v39 + 4 * v60);
    if (*__dst >= v63) {
      goto LABEL_77;
    }
    if (v6 < 2)
    {
      uint64_t v64 = 1;
      goto LABEL_76;
    }
    uint64_t v65 = 3;
    unint64_t v66 = 2;
    uint64_t v67 = 1;
    while (1)
    {
      float v68 = v61[v66];
      if (v65 == v6 + 1 || (float v69 = v61[v65], v68 < v69))
      {
        if (v68 > v63) {
          goto LABEL_75;
        }
      }
      else
      {
        float v68 = v61[v65];
        unint64_t v66 = v65;
        if (v69 > v63)
        {
LABEL_75:
          uint64_t v64 = v67;
LABEL_76:
          v61[v64] = v63;
          v62[v64] = v60;
LABEL_77:
          if (++v60 == v22) {
            goto LABEL_78;
          }
          goto LABEL_64;
        }
      }
      uint64_t v64 = v66;
      v61[v67] = v68;
      v62[v67] = v62[v66];
      v66 *= 2;
      uint64_t v65 = (2 * v64) | 1;
      uint64_t v67 = v64;
      if (v66 > v6) {
        goto LABEL_76;
      }
    }
  }
  if (v7 == v6) {
    goto LABEL_78;
  }
  uint64_t v40 = 0;
  float v41 = __dst - 1;
  uint64_t v42 = a3 - 1;
  uint64_t v43 = v38 + 8 * v6;
  do
  {
    float v44 = *(float *)(v39 + 4 * v40);
    if (*__dst >= v44) {
      goto LABEL_52;
    }
    uint64_t v45 = *(void *)(v43 + 8 * v40);
    if (v6 < 2)
    {
      uint64_t v46 = 1;
      goto LABEL_51;
    }
    uint64_t v47 = 3;
    unint64_t v48 = 2;
    uint64_t v49 = 1;
    while (1)
    {
      float v50 = v41[v48];
      if (v47 != v6 + 1)
      {
        float v51 = v41[v47];
        if (v50 >= v51) {
          break;
        }
      }
      if (v50 > v44) {
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v46 = v48;
      v41[v49] = v50;
      v42[v49] = v42[v48];
      v48 *= 2;
      uint64_t v47 = (2 * v46) | 1;
      uint64_t v49 = v46;
      if (v48 > v6) {
        goto LABEL_51;
      }
    }
    float v50 = v41[v47];
    unint64_t v48 = v47;
    if (v51 <= v44) {
      goto LABEL_48;
    }
LABEL_50:
    uint64_t v46 = v49;
LABEL_51:
    v41[v46] = v44;
    v42[v46] = v45;
LABEL_52:
    ++v40;
  }
  while (v40 != v22);
LABEL_78:
  if (!v6)
  {
    unint64_t v71 = 0;
    goto LABEL_97;
  }
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  uint64_t v72 = __dst - 1;
  uint64_t v73 = a3 - 1;
  while (2)
  {
    float v74 = *__dst;
    uint64_t v75 = *a3;
    unint64_t v76 = v6 - v70;
    float v77 = v72[v6 - v70];
    if (v6 - v70 < 2)
    {
      uint64_t v78 = 1;
      goto LABEL_92;
    }
    uint64_t v79 = 3;
    unint64_t v80 = 2;
    uint64_t v81 = 1;
    while (2)
    {
      float v82 = v72[v80];
      if (v79 == v76 + 1 || (float v83 = v72[v79], v82 < v83))
      {
        if (v77 < v82) {
          break;
        }
        goto LABEL_88;
      }
      float v82 = v72[v79];
      unint64_t v80 = v79;
      if (v77 >= v83)
      {
LABEL_88:
        uint64_t v78 = v80;
        v72[v81] = v82;
        v73[v81] = v73[v80];
        v80 *= 2;
        uint64_t v79 = (2 * v78) | 1;
        uint64_t v81 = v78;
        if (v80 > v76) {
          goto LABEL_91;
        }
        continue;
      }
      break;
    }
    uint64_t v78 = v81;
LABEL_91:
    float v77 = v72[v76];
LABEL_92:
    v72[v78] = v77;
    v73[v78] = v73[v76];
    unint64_t v84 = v6 + ~v71;
    __dst[v84] = v74;
    a3[v84] = v75;
    if (v75 != -1) {
      ++v71;
    }
    if (++v70 != v6) {
      continue;
    }
    break;
  }
LABEL_97:
  memmove(__dst, &__dst[v6 - v71], 4 * v71);
  float result = memmove(a3, &a3[v6 - v71], 8 * v71);
  uint64_t v85 = v6 - v71;
  if (v6 > v71)
  {
    v86 = &a3[v71];
    uint64_t v87 = &__dst[v71];
    do
    {
      *v87++ = -3.4028e38;
      *v86++ = -1;
      --v85;
    }
    while (v85);
  }
  return result;
}

void faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::begin_multiple(void *a1, unint64_t a2, unint64_t a3)
{
  a1[5] = a2;
  a1[6] = a3;
  unint64_t v6 = a3 - a2;
  unint64_t v7 = a1 + 4;
  std::vector<float>::resize((uint64_t)(a1 + 7), a1[4] * (a3 - a2));
  std::vector<long long>::resize((uint64_t)(a1 + 10), *v7 * v6);
  unint64_t v8 = a1[13];
  a1[14] = v8;
  BOOL v9 = a3 >= a2;
  unint64_t v10 = a3 - a2;
  if (v10 != 0 && v9)
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = a1[4];
      uint64_t v13 = a1[7] + 4 * v12 * v11;
      uint64_t v14 = a1[10] + 8 * v12 * v11;
      uint64_t v16 = v14;
      uint64_t v17 = v13;
      if (v8 >= a1[15])
      {
        unint64_t v8 = std::vector<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(a1 + 13, a1 + 3, a1 + 4, &v17, &v16);
      }
      else
      {
        unint64_t v15 = a1[3];
        *(void *)unint64_t v8 = v13;
        *(void *)(v8 + 8) = v14;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = v15;
        *(void *)(v8 + 32) = v12;
        if (v15 >= v12) {
          __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
        }
        *(_DWORD *)(v8 + 40) = -8388609;
        v8 += 48;
        a1[14] = v8;
      }
      a1[14] = v8;
      ++v11;
    }
    while (v10 != v11);
  }
}

void sub_1DCFEF82C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::add_results(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a1[5];
  unint64_t v4 = a1[6];
  if (v5 < v4)
  {
    uint64_t v10 = 4 * (a3 - a2);
    do
    {
      if (a3 > a2)
      {
        unint64_t v11 = v5 - a1[5];
        uint64_t v12 = a1[13] + 48 * v11;
        uint64_t v13 = (float *)(a4 + v10 * v11);
        uint64_t v14 = a2;
        do
        {
          float v15 = *v13++;
          faiss::ReservoirTopN<faiss::CMin<float,long long>>::add(v12, v14++, v15);
        }
        while (a3 != v14);
        unint64_t v4 = a1[6];
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void *faiss::ReservoirResultHandler<faiss::CMin<float,long long>>::end_multiple(void *result)
{
  unint64_t v1 = result[5];
  if (v1 < result[6])
  {
    uint64_t v2 = result;
    uint64_t v3 = 48 * v1;
    do
    {
      float result = faiss::ReservoirTopN<faiss::CMin<float,long long>>::to_result((uint64_t *)(v2[13] - 48 * v2[5] + v3), (float *)(v2[1] + 4 * v2[3] * v1), (uint64_t *)(v2[2] + 8 * v2[3] * v1));
      ++v1;
      v3 += 48;
    }
    while (v1 < v2[6]);
  }
  return result;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    float v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v13);
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    float v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t std::vector<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(uint64_t *a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)(a1 + 2), v12);
    uint64_t v15 = v14;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v13[48 * v6];
  std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>((uint64_t)(a1 + 2), v16, a2, a3, a4, a5);
  uint64_t v17 = v16 + 48;
  float v19 = (char *)*a1;
  uint64_t v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *((_OWORD *)v18 - 3);
      long long v21 = *((_OWORD *)v18 - 2);
      *(_OWORD *)(v16 - 20) = *(_OWORD *)(v18 - 20);
      *(_OWORD *)(v16 - 48) = v20;
      *(_OWORD *)(v16 - 32) = v21;
      v16 -= 48;
      v18 -= 48;
    }
    while (v18 != v19);
    uint64_t v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v13[48 * v15];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1DCFEFD3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void *a5, uint64_t *a6)
{
  unint64_t v6 = *a3;
  unint64_t v7 = *a4;
  uint64_t v8 = *a6;
  *(void *)a2 = *a5;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  if (v6 >= v7) {
    std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>();
  }
  *(_DWORD *)(a2 + 40) = -8388609;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

float faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::add_result(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v3 = *(float **)(a1 + 16);
  if (*v3 <= result) {
    return result;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v3 - 1;
  uint64_t v6 = *(void *)(a1 + 24) - 8;
  if (v4 < 2)
  {
    uint64_t v7 = 1;
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  unint64_t v9 = 2;
  uint64_t v10 = 3;
  while (1)
  {
    float v11 = v5[v9];
    if (v10 != v4 + 1)
    {
      float v12 = v5[v10];
      if (v11 <= v12) {
        break;
      }
    }
    if (v11 < result) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v7 = v9;
    v5[v8] = v11;
    *(void *)(v6 + 8 * v8) = *(void *)(v6 + 8 * v9);
    v9 *= 2;
    uint64_t v10 = (2 * v7) | 1;
    uint64_t v8 = v7;
    if (v9 > v4) {
      goto LABEL_13;
    }
  }
  float v11 = v5[v10];
  unint64_t v9 = v10;
  if (v12 >= result) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v7 = v8;
LABEL_13:
  v5[v7] = result;
  *(void *)(v6 + 8 * v7) = a2;
  float result = *v3;
  *(float *)(a1 + 32) = *v3;
  return result;
}

void *faiss::HeapResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::end(void *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v1 = (int *)a1[2];
  uint64_t v3 = (uint64_t *)a1[3];
  if (!v2)
  {
    unint64_t v5 = 0;
    goto LABEL_20;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = v1 - 1;
  uint64_t v7 = v3 - 1;
  do
  {
    int v8 = *v1;
    uint64_t v9 = *v3;
    unint64_t v10 = v2 - v4;
    float v11 = *(float *)&v6[v2 - v4];
    if (v2 - v4 < 2)
    {
      uint64_t v12 = 1;
      goto LABEL_15;
    }
    uint64_t v13 = 3;
    unint64_t v14 = 2;
    uint64_t v15 = 1;
    while (1)
    {
      float v16 = *(float *)&v6[v14];
      if (v13 != v10 + 1)
      {
        float v17 = *(float *)&v6[v13];
        if (v16 <= v17) {
          break;
        }
      }
      if (v11 > v16) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t v12 = v14;
      *(float *)&v6[v15] = v16;
      v7[v15] = v7[v14];
      v14 *= 2;
      uint64_t v13 = (2 * v12) | 1;
      uint64_t v15 = v12;
      if (v14 > v10) {
        goto LABEL_14;
      }
    }
    float v16 = *(float *)&v6[v13];
    unint64_t v14 = v13;
    if (v11 <= v17) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v12 = v15;
LABEL_14:
    float v11 = *(float *)&v6[v10];
LABEL_15:
    *(float *)&v6[v12] = v11;
    v7[v12] = v7[v10];
    unint64_t v18 = v2 + ~v5;
    v1[v18] = v8;
    v3[v18] = v9;
    if (v9 != -1) {
      ++v5;
    }
    ++v4;
  }
  while (v4 != v2);
LABEL_20:
  memmove(v1, &v1[v2 - v5], 4 * v5);
  float result = memmove(v3, &v3[v2 - v5], 8 * v5);
  unint64_t v20 = v2 - v5;
  if (v2 > v5)
  {
    long long v21 = &v3[v5];
    unint64_t v22 = &v1[v5];
    do
    {
      *v22++ = 2139095039;
      *v21++ = -1;
      --v20;
    }
    while (v20);
  }
  return result;
}

void *faiss::HeapResultHandler<faiss::CMax<float,long long>>::add_results(void *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = result[4];
  unint64_t v5 = result[5];
  if (v4 < v5)
  {
    uint64_t v6 = result[1];
    uint64_t v7 = a4 - 4 * a2;
    uint64_t v8 = result[2] - 8;
    for (uint64_t i = result[4]; i != v5; ++i)
    {
      if (a3 <= a2) {
        continue;
      }
      uint64_t v10 = result[3] * i;
      float v11 = (float *)(v6 + 4 * v10);
      uint64_t v12 = v11 - 1;
      float v13 = *v11;
      uint64_t v14 = v8 + 8 * v10;
      unint64_t v15 = a2;
      do
      {
        float v16 = *(float *)(v7 + 4 * (i - v4) * (a3 - a2) + 4 * v15);
        if (v13 <= v16) {
          goto LABEL_18;
        }
        unint64_t v17 = result[3];
        if (v17 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_17;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          float v22 = v12[v20];
          if (v19 != v17 + 1)
          {
            float v23 = v12[v19];
            if (v22 <= v23) {
              break;
            }
          }
          if (v22 < v16) {
            goto LABEL_16;
          }
LABEL_14:
          uint64_t v18 = v20;
          v12[v21] = v22;
          *(void *)(v14 + 8 * v21) = *(void *)(v14 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v17) {
            goto LABEL_17;
          }
        }
        float v22 = v12[v19];
        unint64_t v20 = v19;
        if (v23 >= v16) {
          goto LABEL_14;
        }
LABEL_16:
        uint64_t v18 = v21;
LABEL_17:
        v12[v18] = v16;
        *(void *)(v14 + 8 * v18) = v15;
        float v13 = *v11;
LABEL_18:
        ++v15;
      }
      while (v15 != a3);
    }
  }
  return result;
}

void *faiss::HeapResultHandler<faiss::CMax<float,long long>>::end_multiple(void *result)
{
  unint64_t v1 = result[4];
  if (v1 >= result[5]) {
    return result;
  }
  unint64_t v2 = result;
  uint64_t v3 = 8 * v1;
  uint64_t v4 = 4 * v1;
  do
  {
    uint64_t v6 = v2[2];
    unint64_t v5 = v2[3];
    uint64_t v7 = (int *)(v2[1] + 4 * v5 * v1);
    uint64_t v8 = (uint64_t *)(v6 + 8 * v5 * v1);
    uint64_t v27 = v2[1];
    if (!v5)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    float v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v5 - v9;
      float v16 = *(float *)&v11[v5 - v9];
      if (v5 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        float v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          float v22 = *(float *)&v11[v18];
          if (v21 <= v22) {
            break;
          }
        }
        if (v16 > v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      float v21 = *(float *)&v11[v18];
      unint64_t v19 = v18;
      if (v16 <= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      float v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v5 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v5);
LABEL_22:
    memmove(v7, &v7[v5 - v10], 4 * v10);
    float result = memmove((void *)(v6 + 8 * v5 * v1), &v8[v5 - v10], 8 * v10);
    unint64_t v24 = v5 - v10;
    if (v5 > v10)
    {
      float v25 = (void *)(v6 + v5 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v5 * v4 + 4 * v10);
      do
      {
        *v26++ = 2139095039;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v1;
    v3 += 8;
    v4 += 4;
  }
  while (v1 < v2[5]);
  return result;
}

void faiss::ReservoirTopN<faiss::CMax<float,long long>>::add(uint64_t a1, uint64_t a2, float a3)
{
  if (*(float *)(a1 + 40) > a3)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 == *(void *)(a1 + 32))
    {
      faiss::ReservoirTopN<faiss::CMax<float,long long>>::shrink_fuzzy(a1);
      uint64_t v6 = *(void *)(a1 + 16);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    *(float *)(*(void *)a1 + 4 * v6) = a3;
    *(void *)(v7 + 8 * v6) = a2;
    *(void *)(a1 + 16) = v6 + 1;
  }
}

void faiss::ReservoirTopN<faiss::CMax<float,long long>>::shrink_fuzzy(uint64_t a1)
{
  if (*(void *)(a1 + 16) != *(void *)(a1 + 32)) {
    faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy();
  }
  *(float *)(a1 + 40) = MEMORY[0x1E01AF220](*(void *)a1, *(void *)(a1 + 8));
}

void *faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result(uint64_t *a1, float *__dst, uint64_t *a3)
{
  unint64_t v7 = a1[2];
  unint64_t v6 = a1[3];
  if (v6 >= v7) {
    uint64_t v8 = a1[2];
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    uint64_t v12 = __dst - 1;
    int v13 = a3 - 1;
    do
    {
      unint64_t v14 = v9++;
      float v15 = *(float *)(v10 + 4 * v14);
      uint64_t v16 = *(void *)(v11 + 8 * v14);
      if (v14)
      {
        unint64_t v17 = v9;
        while (1)
        {
          uint64_t v18 = v17 >> 1;
          float v19 = v12[v17 >> 1];
          if (v19 >= v15) {
            break;
          }
          v12[v17] = v19;
          v13[v17] = v13[v18];
          BOOL v20 = v17 > 3;
          v17 >>= 1;
          if (!v20) {
            goto LABEL_13;
          }
        }
        uint64_t v18 = v17;
      }
      else
      {
        uint64_t v18 = 1;
      }
LABEL_13:
      v12[v18] = v15;
      v13[v18] = v16;
      unint64_t v7 = a1[2];
      unint64_t v6 = a1[3];
      if (v6 >= v7) {
        unint64_t v21 = a1[2];
      }
      else {
        unint64_t v21 = a1[3];
      }
    }
    while (v21 > v9);
  }
  unint64_t v22 = v7 - v6;
  if (v7 < v6)
  {
    if (!v7)
    {
      unint64_t v24 = 0;
      goto LABEL_55;
    }
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    float v25 = __dst - 1;
    uint64_t v26 = a3 - 1;
    while (1)
    {
      float v27 = *__dst;
      uint64_t v28 = *a3;
      unint64_t v29 = v7 - v23;
      float v30 = v25[v7 - v23];
      if (v7 - v23 < 2)
      {
        uint64_t v31 = 1;
        goto LABEL_32;
      }
      uint64_t v32 = 3;
      unint64_t v33 = 2;
      uint64_t v34 = 1;
      while (1)
      {
        float v35 = v25[v33];
        if (v32 != v29 + 1)
        {
          float v36 = v25[v32];
          if (v35 <= v36) {
            break;
          }
        }
        if (v30 > v35) {
          goto LABEL_30;
        }
LABEL_28:
        uint64_t v31 = v33;
        v25[v34] = v35;
        v26[v34] = v26[v33];
        v33 *= 2;
        uint64_t v32 = (2 * v31) | 1;
        uint64_t v34 = v31;
        if (v33 > v29) {
          goto LABEL_31;
        }
      }
      float v35 = v25[v32];
      unint64_t v33 = v32;
      if (v30 <= v36) {
        goto LABEL_28;
      }
LABEL_30:
      uint64_t v31 = v34;
LABEL_31:
      float v30 = v25[v29];
LABEL_32:
      v25[v31] = v30;
      v26[v31] = v26[v29];
      unint64_t v37 = v7 + ~v24;
      __dst[v37] = v27;
      a3[v37] = v28;
      if (v28 != -1) {
        ++v24;
      }
      if (++v23 == v7)
      {
LABEL_55:
        memmove(__dst, &__dst[v7 - v24], 4 * v24);
        float result = memmove(a3, &a3[v7 - v24], 8 * v24);
        uint64_t v53 = v7 - v24;
        if (v7 > v24)
        {
          uint64_t v54 = &a3[v24];
          double v55 = &__dst[v24];
          do
          {
            *v55++ = 3.4028e38;
            *v54++ = -1;
            --v53;
          }
          while (v53);
        }
        uint64_t v56 = a1[2];
        uint64_t v57 = a1[3] - v56;
        if (v57)
        {
          uint64_t v58 = &__dst[v56];
          unint64_t v59 = &a3[v56];
          do
          {
            *v58++ = 3.4028e38;
            *v59++ = -1;
            --v57;
          }
          while (v57);
        }
        return result;
      }
    }
  }
  uint64_t v38 = a1[1];
  uint64_t v39 = *a1 + 4 * v6;
  if (!v38)
  {
    if (v7 == v6) {
      goto LABEL_78;
    }
    uint64_t v60 = 0;
    uint64_t v61 = __dst - 1;
    uint64_t v62 = a3 - 1;
LABEL_64:
    float v63 = *(float *)(v39 + 4 * v60);
    if (*__dst <= v63) {
      goto LABEL_77;
    }
    if (v6 < 2)
    {
      uint64_t v64 = 1;
      goto LABEL_76;
    }
    uint64_t v65 = 3;
    unint64_t v66 = 2;
    uint64_t v67 = 1;
    while (1)
    {
      float v68 = v61[v66];
      if (v65 == v6 + 1 || (float v69 = v61[v65], v68 > v69))
      {
        if (v68 < v63) {
          goto LABEL_75;
        }
      }
      else
      {
        float v68 = v61[v65];
        unint64_t v66 = v65;
        if (v69 < v63)
        {
LABEL_75:
          uint64_t v64 = v67;
LABEL_76:
          v61[v64] = v63;
          v62[v64] = v60;
LABEL_77:
          if (++v60 == v22) {
            goto LABEL_78;
          }
          goto LABEL_64;
        }
      }
      uint64_t v64 = v66;
      v61[v67] = v68;
      v62[v67] = v62[v66];
      v66 *= 2;
      uint64_t v65 = (2 * v64) | 1;
      uint64_t v67 = v64;
      if (v66 > v6) {
        goto LABEL_76;
      }
    }
  }
  if (v7 == v6) {
    goto LABEL_78;
  }
  uint64_t v40 = 0;
  float v41 = __dst - 1;
  uint64_t v42 = a3 - 1;
  uint64_t v43 = v38 + 8 * v6;
  do
  {
    float v44 = *(float *)(v39 + 4 * v40);
    if (*__dst <= v44) {
      goto LABEL_52;
    }
    uint64_t v45 = *(void *)(v43 + 8 * v40);
    if (v6 < 2)
    {
      uint64_t v46 = 1;
      goto LABEL_51;
    }
    uint64_t v47 = 3;
    unint64_t v48 = 2;
    uint64_t v49 = 1;
    while (1)
    {
      float v50 = v41[v48];
      if (v47 != v6 + 1)
      {
        float v51 = v41[v47];
        if (v50 <= v51) {
          break;
        }
      }
      if (v50 < v44) {
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v46 = v48;
      v41[v49] = v50;
      v42[v49] = v42[v48];
      v48 *= 2;
      uint64_t v47 = (2 * v46) | 1;
      uint64_t v49 = v46;
      if (v48 > v6) {
        goto LABEL_51;
      }
    }
    float v50 = v41[v47];
    unint64_t v48 = v47;
    if (v51 >= v44) {
      goto LABEL_48;
    }
LABEL_50:
    uint64_t v46 = v49;
LABEL_51:
    v41[v46] = v44;
    v42[v46] = v45;
LABEL_52:
    ++v40;
  }
  while (v40 != v22);
LABEL_78:
  if (!v6)
  {
    unint64_t v71 = 0;
    goto LABEL_97;
  }
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  uint64_t v72 = __dst - 1;
  uint64_t v73 = a3 - 1;
  while (2)
  {
    float v74 = *__dst;
    uint64_t v75 = *a3;
    unint64_t v76 = v6 - v70;
    float v77 = v72[v6 - v70];
    if (v6 - v70 < 2)
    {
      uint64_t v78 = 1;
      goto LABEL_92;
    }
    uint64_t v79 = 3;
    unint64_t v80 = 2;
    uint64_t v81 = 1;
    while (2)
    {
      float v82 = v72[v80];
      if (v79 == v76 + 1 || (float v83 = v72[v79], v82 > v83))
      {
        if (v77 > v82) {
          break;
        }
        goto LABEL_88;
      }
      float v82 = v72[v79];
      unint64_t v80 = v79;
      if (v77 <= v83)
      {
LABEL_88:
        uint64_t v78 = v80;
        v72[v81] = v82;
        v73[v81] = v73[v80];
        v80 *= 2;
        uint64_t v79 = (2 * v78) | 1;
        uint64_t v81 = v78;
        if (v80 > v76) {
          goto LABEL_91;
        }
        continue;
      }
      break;
    }
    uint64_t v78 = v81;
LABEL_91:
    float v77 = v72[v76];
LABEL_92:
    v72[v78] = v77;
    v73[v78] = v73[v76];
    unint64_t v84 = v6 + ~v71;
    __dst[v84] = v74;
    a3[v84] = v75;
    if (v75 != -1) {
      ++v71;
    }
    if (++v70 != v6) {
      continue;
    }
    break;
  }
LABEL_97:
  memmove(__dst, &__dst[v6 - v71], 4 * v71);
  float result = memmove(a3, &a3[v6 - v71], 8 * v71);
  uint64_t v85 = v6 - v71;
  if (v6 > v71)
  {
    v86 = &a3[v71];
    uint64_t v87 = &__dst[v71];
    do
    {
      *v87++ = 3.4028e38;
      *v86++ = -1;
      --v85;
    }
    while (v85);
  }
  return result;
}

void faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::begin_multiple(void *a1, unint64_t a2, unint64_t a3)
{
  a1[5] = a2;
  a1[6] = a3;
  unint64_t v6 = a3 - a2;
  unint64_t v7 = a1 + 4;
  std::vector<float>::resize((uint64_t)(a1 + 7), a1[4] * (a3 - a2));
  std::vector<long long>::resize((uint64_t)(a1 + 10), *v7 * v6);
  unint64_t v8 = a1[13];
  a1[14] = v8;
  BOOL v9 = a3 >= a2;
  unint64_t v10 = a3 - a2;
  if (v10 != 0 && v9)
  {
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = a1[4];
      uint64_t v13 = a1[7] + 4 * v12 * v11;
      uint64_t v14 = a1[10] + 8 * v12 * v11;
      uint64_t v16 = v14;
      uint64_t v17 = v13;
      if (v8 >= a1[15])
      {
        unint64_t v8 = std::vector<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(a1 + 13, a1 + 3, a1 + 4, &v17, &v16);
      }
      else
      {
        unint64_t v15 = a1[3];
        *(void *)unint64_t v8 = v13;
        *(void *)(v8 + 8) = v14;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = v15;
        *(void *)(v8 + 32) = v12;
        if (v15 >= v12) {
          __assert_rtn("ReservoirTopN", "ResultHandler.h", 148, "n < capacity");
        }
        *(_DWORD *)(v8 + 40) = 2139095039;
        v8 += 48;
        a1[14] = v8;
      }
      a1[14] = v8;
      ++v11;
    }
    while (v10 != v11);
  }
}

void sub_1DCFF09C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::add_results(void *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a1[5];
  unint64_t v4 = a1[6];
  if (v5 < v4)
  {
    uint64_t v10 = 4 * (a3 - a2);
    do
    {
      if (a3 > a2)
      {
        unint64_t v11 = v5 - a1[5];
        uint64_t v12 = a1[13] + 48 * v11;
        uint64_t v13 = (float *)(a4 + v10 * v11);
        uint64_t v14 = a2;
        do
        {
          float v15 = *v13++;
          faiss::ReservoirTopN<faiss::CMax<float,long long>>::add(v12, v14++, v15);
        }
        while (a3 != v14);
        unint64_t v4 = a1[6];
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void *faiss::ReservoirResultHandler<faiss::CMax<float,long long>>::end_multiple(void *result)
{
  unint64_t v1 = result[5];
  if (v1 < result[6])
  {
    uint64_t v2 = result;
    uint64_t v3 = 48 * v1;
    do
    {
      float result = faiss::ReservoirTopN<faiss::CMax<float,long long>>::to_result((uint64_t *)(v2[13] - 48 * v2[5] + v3), (float *)(v2[1] + 4 * v2[3] * v1), (uint64_t *)(v2[2] + 8 * v2[3] * v1));
      ++v1;
      v3 += 48;
    }
    while (v1 < v2[6]);
  }
  return result;
}

uint64_t std::vector<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::__emplace_back_slow_path<long long &,unsigned long &,float *,long long *>(uint64_t *a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)(a1 + 2), v12);
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t)&v13[48 * v6];
  std::allocator<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMax<float,long long>>,long long &,unsigned long &,float *,long long *>((uint64_t)(a1 + 2), v16, a2, a3, a4, a5);
  uint64_t v17 = v16 + 48;
  float v19 = (char *)*a1;
  uint64_t v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *((_OWORD *)v18 - 3);
      long long v21 = *((_OWORD *)v18 - 2);
      *(_OWORD *)(v16 - 20) = *(_OWORD *)(v18 - 20);
      *(_OWORD *)(v16 - 48) = v20;
      *(_OWORD *)(v16 - 32) = v21;
      v16 -= 48;
      v18 -= 48;
    }
    while (v18 != v19);
    uint64_t v18 = (char *)*a1;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = (uint64_t)&v13[48 * v15];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_1DCFF0C40(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<faiss::ReservoirTopN<faiss::CMax<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMax<float,long long>>,long long &,unsigned long &,float *,long long *>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void *a5, uint64_t *a6)
{
  unint64_t v6 = *a3;
  unint64_t v7 = *a4;
  uint64_t v8 = *a6;
  *(void *)a2 = *a5;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  if (v6 >= v7) {
    std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>();
  }
  *(_DWORD *)(a2 + 40) = 2139095039;
}

uint64_t faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::~RangeSearchResultHandler(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  if (*(void *)(a1 + 40) != *(void *)(a1 + 32)) {
    faiss::RangeSearchPartialResult::merge((uint64_t **)(a1 + 32), 1);
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::SingleResultHandler::~SingleResultHandler(faiss::RangeSearchPartialResult *a1)
{
  faiss::RangeSearchPartialResult::finalize(a1);
  uint64_t v2 = (void *)*((void *)a1 + 6);
  if (v2)
  {
    *((void *)a1 + 7) = v2;
    operator delete(v2);
  }
  faiss::BufferList::~BufferList(a1);
}

int *faiss::RangeSearchResultHandler<faiss::CMax<float,long long>>::add_results(int *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 7);
  unint64_t v9 = result[20];
  uint64_t v10 = *((void *)result + 8);
  if (v9 < (v10 - v8) >> 3 && *(void *)(v8 + 8 * v9) == a2)
  {
    unint64_t v11 = *(faiss::RangeSearchPartialResult **)(*((void *)result + 4) + 8 * v9);
    int v12 = v9 + 1;
  }
  else
  {
    if (a2 || v10 == v8) {
      operator new();
    }
    unint64_t v11 = (faiss::RangeSearchPartialResult *)**((void **)result + 4);
    int v12 = 1;
  }
  result[20] = v12;
  unint64_t v13 = *((void *)result + 2);
  if (v13 < *((void *)result + 3))
  {
    do
    {
      uint64_t v14 = *((void *)v7 + 2);
      float result = (int *)faiss::RangeSearchPartialResult::new_result(v11, v13);
      if (a3 > a2)
      {
        uint64_t v15 = (faiss::RangeQueryResult *)result;
        uint64_t v16 = (float *)(a4 + 4 * (v13 - v14) * (a3 - a2));
        uint64_t v17 = a2;
        do
        {
          float v18 = *v16++;
          float v19 = v18;
          if (*((float *)v7 + 2) > v18) {
            float result = (int *)faiss::RangeQueryResult::add(v15, v19, v17);
          }
          ++v17;
        }
        while (a3 != v17);
      }
      ++v13;
    }
    while (v13 < *((void *)v7 + 3));
  }
  return result;
}

void sub_1DCFF0FFC(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x1020C401FFB0C44);
  _Unwind_Resume(a1);
}

int *faiss::RangeSearchResultHandler<faiss::CMin<float,long long>>::add_results(int *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 7);
  unint64_t v9 = result[20];
  uint64_t v10 = *((void *)result + 8);
  if (v9 < (v10 - v8) >> 3 && *(void *)(v8 + 8 * v9) == a2)
  {
    unint64_t v11 = *(faiss::RangeSearchPartialResult **)(*((void *)result + 4) + 8 * v9);
    int v12 = v9 + 1;
  }
  else
  {
    if (a2 || v10 == v8) {
      operator new();
    }
    unint64_t v11 = (faiss::RangeSearchPartialResult *)**((void **)result + 4);
    int v12 = 1;
  }
  result[20] = v12;
  unint64_t v13 = *((void *)result + 2);
  if (v13 < *((void *)result + 3))
  {
    do
    {
      uint64_t v14 = *((void *)v7 + 2);
      float result = (int *)faiss::RangeSearchPartialResult::new_result(v11, v13);
      if (a3 > a2)
      {
        uint64_t v15 = (faiss::RangeQueryResult *)result;
        uint64_t v16 = (float *)(a4 + 4 * (v13 - v14) * (a3 - a2));
        uint64_t v17 = a2;
        do
        {
          float v18 = *v16++;
          float v19 = v18;
          if (*((float *)v7 + 2) < v18) {
            float result = (int *)faiss::RangeQueryResult::add(v15, v19, v17);
          }
          ++v17;
        }
        while (a3 != v17);
      }
      ++v13;
    }
    while (v13 < *((void *)v7 + 3));
  }
  return result;
}

void sub_1DCFF12D0(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x1020C401FFB0C44);
  _Unwind_Resume(a1);
}

void faiss::ReservoirTopN<faiss::CMin<float,long long>>::shrink_fuzzy()
{
  __assert_rtn("shrink_fuzzy", "ResultHandler.h", 166, "i == capacity");
}

void std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>::construct[abi:ne180100]<faiss::ReservoirTopN<faiss::CMin<float,long long>>,long long &,unsigned long &,float *,long long *>()
{
}

uint64_t faiss::HeapArray<faiss::CMin<float,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) + 4 * *(void *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMin<float,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + 8 * *(void *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::heapify(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = 0;
    unint64_t v4 = (uint64_t *)result[2];
    uint64_t v3 = (_DWORD *)result[3];
    uint64_t v5 = result[1];
    do
    {
      if (v5)
      {
        unint64_t v6 = v3;
        float result = v4;
        uint64_t v7 = v5;
        do
        {
          *v6++ = -8388609;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a6 == -1) {
    unint64_t v6 = *result;
  }
  else {
    unint64_t v6 = a6;
  }
  unint64_t v7 = v6 + a5;
  if (v7 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn();
  }
  if (v7 > a5)
  {
    unint64_t v8 = result[3];
    unint64_t v9 = result[1];
    uint64_t v10 = result[2] - 8;
    for (unint64_t i = a5; i != v7; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v12 = 0;
      unint64_t v13 = (float *)(v8 + 4 * v9 * i);
      uint64_t v14 = v13 - 1;
      float result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        float v15 = *(float *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 >= v15) {
          goto LABEL_22;
        }
        if (v9 < 2)
        {
          uint64_t v16 = 1;
          goto LABEL_21;
        }
        uint64_t v17 = 3;
        unint64_t v18 = 2;
        uint64_t v19 = 1;
        while (1)
        {
          float v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            float v21 = v14[v17];
            if (v20 >= v21) {
              break;
            }
          }
          if (v20 > v15) {
            goto LABEL_20;
          }
LABEL_18:
          uint64_t v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          uint64_t v17 = (2 * v16) | 1;
          uint64_t v19 = v16;
          if (v18 > v9) {
            goto LABEL_21;
          }
        }
        float v20 = v14[v17];
        unint64_t v18 = v17;
        if (v21 <= v15) {
          goto LABEL_18;
        }
LABEL_20:
        uint64_t v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

float *faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (!a4)
  {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn();
  }
  if (a7 == -1) {
    uint64_t v7 = *(void *)result;
  }
  else {
    uint64_t v7 = a7;
  }
  unint64_t v8 = v7 + a6;
  if (v8 > *(void *)result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids();
  }
  if (v8 > a6)
  {
    uint64_t v9 = *((void *)result + 3);
    unint64_t v10 = *((void *)result + 1);
    uint64_t v11 = *((void *)result + 2) - 8;
    for (unint64_t i = a6; i != v8; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (float *)(v9 + 4 * v10 * i);
      float result = v14 - 1;
      unint64_t v15 = v11 + 8 * v10 * i;
      do
      {
        float v16 = *(float *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 >= v16) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_22;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          float v22 = result[v20];
          if (v19 != v10 + 1)
          {
            float v23 = result[v19];
            if (v22 >= v23) {
              break;
            }
          }
          if (v22 > v16) {
            goto LABEL_21;
          }
LABEL_19:
          uint64_t v18 = v20;
          result[v21] = v22;
          *(void *)(v15 + 8 * v21) = *(void *)(v15 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v10) {
            goto LABEL_22;
          }
        }
        float v22 = result[v19];
        unint64_t v20 = v19;
        if (v23 <= v16) {
          goto LABEL_19;
        }
LABEL_21:
        uint64_t v18 = v21;
LABEL_22:
        result[v18] = v16;
        *(void *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::reorder(unint64_t *result)
{
  if (!*result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v1[2];
    unint64_t v6 = v1[1];
    uint64_t v7 = (int *)(v1[3] + 4 * v6 * v4);
    unint64_t v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    unint64_t v27 = v1[3];
    if (!v6)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v6 - v9;
      float v16 = *(float *)&v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        float v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          float v22 = *(float *)&v11[v18];
          if (v21 >= v22) {
            break;
          }
        }
        if (v16 < v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      float v21 = *(float *)&v11[v18];
      unint64_t v19 = v18;
      if (v16 >= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      float v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    float result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    unint64_t v24 = v6 - v10;
    if (v6 > v10)
    {
      float v25 = (void *)(v5 + v6 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = -8388609;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMin<float,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result[3];
    uint64_t v6 = result[1];
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = -1;
        float v9 = 3.4028e38;
        do
        {
          if (*(float *)(v5 + 4 * v7) < v9)
          {
            uint64_t v8 = v7;
            float v9 = *(float *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v8 = -1;
        float v9 = 3.4028e38;
        if (!a2) {
          goto LABEL_10;
        }
      }
      *(float *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        uint64_t v10 = result[2];
        if (v10)
        {
          if (v8 != -1) {
            uint64_t v8 = *(void *)(v10 + 8 * (v8 + v6 * v4));
          }
        }
        *(void *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMax<float,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) + 4 * *(void *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMax<float,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + 8 * *(void *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::heapify(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = 0;
    uint64_t v4 = (uint64_t *)result[2];
    uint64_t v3 = (_DWORD *)result[3];
    uint64_t v5 = result[1];
    do
    {
      if (v5)
      {
        uint64_t v6 = v3;
        float result = v4;
        uint64_t v7 = v5;
        do
        {
          *v6++ = 2139095039;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a6 == -1) {
    unint64_t v6 = *result;
  }
  else {
    unint64_t v6 = a6;
  }
  unint64_t v7 = v6 + a5;
  if (v7 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn();
  }
  if (v7 > a5)
  {
    unint64_t v8 = result[3];
    unint64_t v9 = result[1];
    uint64_t v10 = result[2] - 8;
    for (unint64_t i = a5; i != v7; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v12 = 0;
      int v13 = (float *)(v8 + 4 * v9 * i);
      uint64_t v14 = v13 - 1;
      float result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        float v15 = *(float *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 <= v15) {
          goto LABEL_22;
        }
        if (v9 < 2)
        {
          uint64_t v16 = 1;
          goto LABEL_21;
        }
        uint64_t v17 = 3;
        unint64_t v18 = 2;
        uint64_t v19 = 1;
        while (1)
        {
          float v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            float v21 = v14[v17];
            if (v20 <= v21) {
              break;
            }
          }
          if (v20 < v15) {
            goto LABEL_20;
          }
LABEL_18:
          uint64_t v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          uint64_t v17 = (2 * v16) | 1;
          uint64_t v19 = v16;
          if (v18 > v9) {
            goto LABEL_21;
          }
        }
        float v20 = v14[v17];
        unint64_t v18 = v17;
        if (v21 >= v15) {
          goto LABEL_18;
        }
LABEL_20:
        uint64_t v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

float *faiss::HeapArray<faiss::CMax<float,long long>>::addn_with_ids(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (!a4)
  {
    faiss::HeapArray<faiss::CMax<float,long long>>::addn();
  }
  if (a7 == -1) {
    uint64_t v7 = *(void *)result;
  }
  else {
    uint64_t v7 = a7;
  }
  unint64_t v8 = v7 + a6;
  if (v8 > *(void *)result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids();
  }
  if (v8 > a6)
  {
    uint64_t v9 = *((void *)result + 3);
    unint64_t v10 = *((void *)result + 1);
    uint64_t v11 = *((void *)result + 2) - 8;
    for (unint64_t i = a6; i != v8; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (float *)(v9 + 4 * v10 * i);
      float result = v14 - 1;
      unint64_t v15 = v11 + 8 * v10 * i;
      do
      {
        float v16 = *(float *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 <= v16) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_22;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          float v22 = result[v20];
          if (v19 != v10 + 1)
          {
            float v23 = result[v19];
            if (v22 <= v23) {
              break;
            }
          }
          if (v22 < v16) {
            goto LABEL_21;
          }
LABEL_19:
          uint64_t v18 = v20;
          result[v21] = v22;
          *(void *)(v15 + 8 * v21) = *(void *)(v15 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v10) {
            goto LABEL_22;
          }
        }
        float v22 = result[v19];
        unint64_t v20 = v19;
        if (v23 >= v16) {
          goto LABEL_19;
        }
LABEL_21:
        uint64_t v18 = v21;
LABEL_22:
        result[v18] = v16;
        *(void *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::reorder(unint64_t *result)
{
  if (!*result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v1[2];
    unint64_t v6 = v1[1];
    uint64_t v7 = (int *)(v1[3] + 4 * v6 * v4);
    unint64_t v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    unint64_t v27 = v1[3];
    if (!v6)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v6 - v9;
      float v16 = *(float *)&v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        float v21 = *(float *)&v11[v19];
        if (v18 != v15 + 1)
        {
          float v22 = *(float *)&v11[v18];
          if (v21 <= v22) {
            break;
          }
        }
        if (v16 > v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        *(float *)&v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      float v21 = *(float *)&v11[v18];
      unint64_t v19 = v18;
      if (v16 <= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      float v16 = *(float *)&v11[v15];
LABEL_17:
      *(float *)&v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    float result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    unint64_t v24 = v6 - v10;
    if (v6 > v10)
    {
      float v25 = (void *)(v5 + v6 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 2139095039;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMax<float,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result[3];
    uint64_t v6 = result[1];
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = -1;
        float v9 = -3.4028e38;
        do
        {
          if (*(float *)(v5 + 4 * v7) > v9)
          {
            uint64_t v8 = v7;
            float v9 = *(float *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v8 = -1;
        float v9 = -3.4028e38;
        if (!a2) {
          goto LABEL_10;
        }
      }
      *(float *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        uint64_t v10 = result[2];
        if (v10)
        {
          if (v8 != -1) {
            uint64_t v8 = *(void *)(v10 + 8 * (v8 + v6 * v4));
          }
        }
        *(void *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMin<int,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) + 4 * *(void *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMin<int,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + 8 * *(void *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::heapify(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = 0;
    uint64_t v4 = (uint64_t *)result[2];
    uint64_t v3 = (_DWORD *)result[3];
    uint64_t v5 = result[1];
    do
    {
      if (v5)
      {
        uint64_t v6 = v3;
        float result = v4;
        uint64_t v7 = v5;
        do
        {
          *v6++ = 0x80000000;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a6 == -1) {
    unint64_t v6 = *result;
  }
  else {
    unint64_t v6 = a6;
  }
  unint64_t v7 = v6 + a5;
  if (v7 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn();
  }
  if (v7 > a5)
  {
    unint64_t v8 = result[3];
    unint64_t v9 = result[1];
    uint64_t v10 = result[2] - 8;
    for (unint64_t i = a5; i != v7; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v12 = 0;
      int v13 = (_DWORD *)(v8 + 4 * v9 * i);
      uint64_t v14 = v13 - 1;
      float result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        int v15 = *(_DWORD *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 >= v15) {
          goto LABEL_22;
        }
        if (v9 < 2)
        {
          uint64_t v16 = 1;
          goto LABEL_21;
        }
        uint64_t v17 = 3;
        unint64_t v18 = 2;
        uint64_t v19 = 1;
        while (1)
        {
          int v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            int v21 = v14[v17];
            if (v20 >= v21) {
              break;
            }
          }
          if (v20 > v15) {
            goto LABEL_20;
          }
LABEL_18:
          uint64_t v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          uint64_t v17 = (2 * v16) | 1;
          uint64_t v19 = v16;
          if (v18 > v9) {
            goto LABEL_21;
          }
        }
        int v20 = v14[v17];
        unint64_t v18 = v17;
        if (v21 <= v15) {
          goto LABEL_18;
        }
LABEL_20:
        uint64_t v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a4)
  {
    faiss::HeapArray<faiss::CMin<int,long long>>::addn();
  }
  if (a7 == -1) {
    unint64_t v7 = *result;
  }
  else {
    unint64_t v7 = a7;
  }
  unint64_t v8 = v7 + a6;
  if (v8 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids();
  }
  if (v8 > a6)
  {
    unint64_t v9 = result[3];
    unint64_t v10 = result[1];
    uint64_t v11 = result[2] - 8;
    for (unint64_t i = a6; i != v8; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (_DWORD *)(v9 + 4 * v10 * i);
      float result = (unint64_t *)(v14 - 1);
      unint64_t v15 = v11 + 8 * v10 * i;
      do
      {
        int v16 = *(_DWORD *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 >= v16) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_22;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          int v22 = *((_DWORD *)result + v20);
          if (v19 != v10 + 1)
          {
            int v23 = *((_DWORD *)result + v19);
            if (v22 >= v23) {
              break;
            }
          }
          if (v22 > v16) {
            goto LABEL_21;
          }
LABEL_19:
          uint64_t v18 = v20;
          *((_DWORD *)result + v21) = v22;
          *(void *)(v15 + 8 * v21) = *(void *)(v15 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v10) {
            goto LABEL_22;
          }
        }
        int v22 = *((_DWORD *)result + v19);
        unint64_t v20 = v19;
        if (v23 <= v16) {
          goto LABEL_19;
        }
LABEL_21:
        uint64_t v18 = v21;
LABEL_22:
        *((_DWORD *)result + v18) = v16;
        *(void *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::reorder(unint64_t *result)
{
  if (!*result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v1[2];
    unint64_t v6 = v1[1];
    unint64_t v7 = (int *)(v1[3] + 4 * v6 * v4);
    unint64_t v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    unint64_t v27 = v1[3];
    if (!v6)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v6 - v9;
      int v16 = v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        int v21 = v11[v19];
        if (v18 != v15 + 1)
        {
          int v22 = v11[v18];
          if (v21 >= v22) {
            break;
          }
        }
        if (v16 < v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      int v21 = v11[v18];
      unint64_t v19 = v18;
      if (v16 >= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      int v16 = v11[v15];
LABEL_17:
      v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    float result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    unint64_t v24 = v6 - v10;
    if (v6 > v10)
    {
      float v25 = (void *)(v5 + v6 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 0x80000000;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMin<int,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result[3];
    uint64_t v6 = result[1];
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = -1;
        int v9 = 0x7FFFFFFF;
        do
        {
          if (*(_DWORD *)(v5 + 4 * v7) < v9)
          {
            uint64_t v8 = v7;
            int v9 = *(_DWORD *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2) {
          goto LABEL_10;
        }
      }
      else
      {
        int v9 = 0x7FFFFFFF;
        uint64_t v8 = -1;
        if (!a2) {
          goto LABEL_10;
        }
      }
      *(_DWORD *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        uint64_t v10 = result[2];
        if (v10)
        {
          if (v8 != -1) {
            uint64_t v8 = *(void *)(v10 + 8 * (v8 + v6 * v4));
          }
        }
        *(void *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t faiss::HeapArray<faiss::CMax<int,long long>>::get_val(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) + 4 * *(void *)(a1 + 8) * a2;
}

uint64_t faiss::HeapArray<faiss::CMax<int,long long>>::get_ids(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) + 8 * *(void *)(a1 + 8) * a2;
}

uint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::heapify(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = 0;
    uint64_t v4 = (uint64_t *)result[2];
    uint64_t v3 = (_DWORD *)result[3];
    uint64_t v5 = result[1];
    do
    {
      if (v5)
      {
        uint64_t v6 = v3;
        float result = v4;
        uint64_t v7 = v5;
        do
        {
          *v6++ = 0x7FFFFFFF;
          *result++ = -1;
          --v7;
        }
        while (v7);
      }
      ++v2;
      v4 += v5;
      v3 += v5;
    }
    while (v2 != v1);
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::addn(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a6 == -1) {
    unint64_t v6 = *result;
  }
  else {
    unint64_t v6 = a6;
  }
  unint64_t v7 = v6 + a5;
  if (v7 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn();
  }
  if (v7 > a5)
  {
    unint64_t v8 = result[3];
    unint64_t v9 = result[1];
    uint64_t v10 = result[2] - 8;
    for (unint64_t i = a5; i != v7; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v12 = 0;
      int v13 = (_DWORD *)(v8 + 4 * v9 * i);
      uint64_t v14 = v13 - 1;
      float result = (unint64_t *)(v10 + 8 * v9 * i);
      do
      {
        int v15 = *(_DWORD *)(a3 + 4 * (i - a5) * a2 + 4 * v12);
        if (*v13 <= v15) {
          goto LABEL_22;
        }
        if (v9 < 2)
        {
          uint64_t v16 = 1;
          goto LABEL_21;
        }
        uint64_t v17 = 3;
        unint64_t v18 = 2;
        uint64_t v19 = 1;
        while (1)
        {
          int v20 = v14[v18];
          if (v17 != v9 + 1)
          {
            int v21 = v14[v17];
            if (v20 <= v21) {
              break;
            }
          }
          if (v20 < v15) {
            goto LABEL_20;
          }
LABEL_18:
          uint64_t v16 = v18;
          v14[v19] = v20;
          result[v19] = result[v18];
          v18 *= 2;
          uint64_t v17 = (2 * v16) | 1;
          uint64_t v19 = v16;
          if (v18 > v9) {
            goto LABEL_21;
          }
        }
        int v20 = v14[v17];
        unint64_t v18 = v17;
        if (v21 >= v15) {
          goto LABEL_18;
        }
LABEL_20:
        uint64_t v16 = v19;
LABEL_21:
        v14[v16] = v15;
        result[v16] = v12 + a4;
LABEL_22:
        ++v12;
      }
      while (v12 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::addn_with_ids(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a4)
  {
    faiss::HeapArray<faiss::CMax<int,long long>>::addn();
  }
  if (a7 == -1) {
    unint64_t v7 = *result;
  }
  else {
    unint64_t v7 = a7;
  }
  unint64_t v8 = v7 + a6;
  if (v8 > *result) {
    faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids();
  }
  if (v8 > a6)
  {
    unint64_t v9 = result[3];
    unint64_t v10 = result[1];
    uint64_t v11 = result[2] - 8;
    for (unint64_t i = a6; i != v8; ++i)
    {
      if (!a2) {
        continue;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (_DWORD *)(v9 + 4 * v10 * i);
      float result = (unint64_t *)(v14 - 1);
      unint64_t v15 = v11 + 8 * v10 * i;
      do
      {
        int v16 = *(_DWORD *)(a3 + 4 * (i - a6) * a2 + 4 * v13);
        if (*v14 <= v16) {
          goto LABEL_23;
        }
        uint64_t v17 = *(void *)(a4 + 8 * (i - a6) * a5 + 8 * v13);
        if (v10 < 2)
        {
          uint64_t v18 = 1;
          goto LABEL_22;
        }
        uint64_t v19 = 3;
        unint64_t v20 = 2;
        uint64_t v21 = 1;
        while (1)
        {
          int v22 = *((_DWORD *)result + v20);
          if (v19 != v10 + 1)
          {
            int v23 = *((_DWORD *)result + v19);
            if (v22 <= v23) {
              break;
            }
          }
          if (v22 < v16) {
            goto LABEL_21;
          }
LABEL_19:
          uint64_t v18 = v20;
          *((_DWORD *)result + v21) = v22;
          *(void *)(v15 + 8 * v21) = *(void *)(v15 + 8 * v20);
          v20 *= 2;
          uint64_t v19 = (2 * v18) | 1;
          uint64_t v21 = v18;
          if (v20 > v10) {
            goto LABEL_22;
          }
        }
        int v22 = *((_DWORD *)result + v19);
        unint64_t v20 = v19;
        if (v23 >= v16) {
          goto LABEL_19;
        }
LABEL_21:
        uint64_t v18 = v21;
LABEL_22:
        *((_DWORD *)result + v18) = v16;
        *(void *)(v15 + 8 * v18) = v17;
LABEL_23:
        ++v13;
      }
      while (v13 != a2);
    }
  }
  return result;
}

unint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::reorder(unint64_t *result)
{
  if (!*result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v1[2];
    unint64_t v6 = v1[1];
    unint64_t v7 = (int *)(v1[3] + 4 * v6 * v4);
    unint64_t v8 = (uint64_t *)(v5 + 8 * v6 * v4);
    unint64_t v27 = v1[3];
    if (!v6)
    {
      unint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 - 1;
    uint64_t v12 = v8 - 1;
    do
    {
      int v13 = *v7;
      uint64_t v14 = *v8;
      unint64_t v15 = v6 - v9;
      int v16 = v11[v6 - v9];
      if (v6 - v9 < 2)
      {
        uint64_t v17 = 1;
        goto LABEL_17;
      }
      uint64_t v18 = 3;
      unint64_t v19 = 2;
      uint64_t v20 = 1;
      while (1)
      {
        int v21 = v11[v19];
        if (v18 != v15 + 1)
        {
          int v22 = v11[v18];
          if (v21 <= v22) {
            break;
          }
        }
        if (v16 > v21) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v17 = v19;
        v11[v20] = v21;
        v12[v20] = v12[v19];
        v19 *= 2;
        uint64_t v18 = (2 * v17) | 1;
        uint64_t v20 = v17;
        if (v19 > v15) {
          goto LABEL_16;
        }
      }
      int v21 = v11[v18];
      unint64_t v19 = v18;
      if (v16 <= v22) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v17 = v20;
LABEL_16:
      int v16 = v11[v15];
LABEL_17:
      v11[v17] = v16;
      v12[v17] = v12[v15];
      unint64_t v23 = v6 + ~v10;
      v7[v23] = v13;
      v8[v23] = v14;
      if (v14 != -1) {
        ++v10;
      }
      ++v9;
    }
    while (v9 != v6);
LABEL_22:
    memmove(v7, &v7[v6 - v10], 4 * v10);
    float result = (unint64_t *)memmove((void *)(v5 + 8 * v6 * v4), &v8[v6 - v10], 8 * v10);
    unint64_t v24 = v6 - v10;
    if (v6 > v10)
    {
      float v25 = (void *)(v5 + v6 * v3 + 8 * v10);
      uint64_t v26 = (_DWORD *)(v27 + v6 * v2 + 4 * v10);
      do
      {
        *v26++ = 0x7FFFFFFF;
        *v25++ = -1;
        --v24;
      }
      while (v24);
    }
    ++v4;
    v3 += 8;
    v2 += 4;
  }
  while (v4 < *v1);
  return result;
}

uint64_t *faiss::HeapArray<faiss::CMax<int,long long>>::per_line_extrema(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = result[3];
    uint64_t v6 = result[1];
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = -1;
        signed int v9 = 0x80000000;
        do
        {
          if (*(_DWORD *)(v5 + 4 * v7) > v9)
          {
            uint64_t v8 = v7;
            signed int v9 = *(_DWORD *)(v5 + 4 * v7);
          }
          ++v7;
        }
        while (v6 != v7);
        if (!a2) {
          goto LABEL_10;
        }
      }
      else
      {
        signed int v9 = 0x80000000;
        uint64_t v8 = -1;
        if (!a2) {
          goto LABEL_10;
        }
      }
      *(_DWORD *)(a2 + 4 * v4) = v9;
LABEL_10:
      if (a3)
      {
        uint64_t v10 = result[2];
        if (v10)
        {
          if (v8 != -1) {
            uint64_t v8 = *(void *)(v10 + 8 * (v8 + v6 * v4));
          }
        }
        *(void *)(a3 + 8 * v4) = v8;
      }
      ++v4;
      v5 += 4 * v6;
    }
    while (v4 != v3);
  }
  return result;
}

void faiss::HeapArray<faiss::CMin<float,long long>>::addn()
{
  __assert_rtn("addn", "Heap.cpp", 34, "i0 >= 0 && i0 + ni <= nh");
}

{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMin<float,long long>>::addn_with_ids()
{
  __assert_rtn("addn_with_ids", "Heap.cpp", 64, "i0 >= 0 && i0 + ni <= nh");
}

uint64_t faiss::RandomGenerator::RandomGenerator(uint64_t this, unsigned int a2)
{
  *(_DWORD *)this = a2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    a2 = i + 1812433253 * (a2 ^ (a2 >> 30));
    *(_DWORD *)(this + 4 * i) = a2;
  }
  *(void *)(this + 2496) = 0;
  return this;
}

{
  uint64_t i;

  *(_DWORD *)this = a2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    a2 = i + 1812433253 * (a2 ^ (a2 >> 30));
    *(_DWORD *)(this + 4 * i) = a2;
  }
  *(void *)(this + 2496) = 0;
  return this;
}

uint64_t faiss::RandomGenerator::rand_int(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

unint64_t faiss::RandomGenerator::rand_int64(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v2 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF;
  return v2 | ((unint64_t)(std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & 0x7FFFFFFF) << 31);
}

uint64_t faiss::RandomGenerator::rand_int(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, unsigned int a2)
{
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       % a2;
}

float faiss::RandomGenerator::rand_float(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       * 2.3283e-10;
}

double faiss::RandomGenerator::rand_double(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  return (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
       / 4294967300.0;
}

uint64_t faiss::float_rand(faiss *this, float *a2)
{
  MEMORY[0x1F4188790](this);
  unint64_t v4 = v3;
  uint64_t v18 = v5;
  v21.__x_[0] = v2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    v21.__x_[i] = v2;
  }
  v21.__i_ = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v19 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21) & 0x7FFFFFFF;
  uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
  unint64_t v8 = 0;
  int v9 = result & 0x7FFFFFFF;
  if (v4 <= 0x3FF) {
    char v10 = 0;
  }
  else {
    char v10 = 10;
  }
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = v19 + v9 * v8;
    v20.__x_[0] = v11;
    for (uint64_t j = 1; j != 624; ++j)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v20.__x_[j] = v11;
    }
    v20.__i_ = 0;
    unint64_t v13 = (v8 * v4) >> v10;
    unint64_t v14 = ((v8 + 1) * v4) >> v10;
    unint64_t v15 = v14 - v13;
    if (v14 > v13)
    {
      int v16 = (float *)(v18 + 4 * v13);
      do
      {
        uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v20);
        *v16++ = (float)result * 2.3283e-10;
        --v15;
      }
      while (v15);
    }
    if (v4 < 0x400) {
      break;
    }
  }
  while (v8++ < 0x3FF);
  return result;
}

void faiss::float_randn(faiss *this, float *a2)
{
  MEMORY[0x1F4188790](this);
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  v24.__x_[0] = v2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    v24.__x_[i] = v2;
  }
  v24.__i_ = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  unint64_t v8 = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  char v9 = 10;
  if (v4 <= 0x3FF) {
    char v9 = 0;
  }
  char v20 = v9;
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v10 = v22 + v21 * v8;
    v23.__x_[0] = v10;
    for (uint64_t j = 1; j != 624; ++j)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v10 = j + 1812433253 * (v10 ^ (v10 >> 30));
      v23.__x_[j] = v10;
    }
    v23.__i_ = 0;
    unint64_t v12 = (v8 * v4) >> v20;
    unint64_t v13 = ((v8 + 1) * v4) >> v20;
    if (v12 < v13)
    {
      int v14 = 0;
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      do
      {
        if (!v14)
        {
          do
          {
            double v16 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23)
                / 4294967300.0
                * 2.0
                + -1.0;
            double v17 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23)
                / 4294967300.0
                * 2.0
                + -1.0;
            double v15 = v17 * v17 + v16 * v16;
          }
          while (v15 >= 1.0);
        }
        float v18 = v16 * sqrt(log(v15) * -2.0 / v15);
        *(float *)(v6 + 4 * v12) = v18;
        int v14 = 1 - v14;
        ++v12;
        double v16 = v17;
      }
      while (v12 != v13);
    }
    if (v4 < 0x400) {
      break;
    }
  }
  while (v8++ < 0x3FF);
}

uint64_t faiss::int64_rand(faiss *this, uint64_t *a2)
{
  MEMORY[0x1F4188790](this);
  unint64_t v4 = v3;
  uint64_t v19 = v5;
  v22.__x_[0] = v2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    v22.__x_[i] = v2;
  }
  v22.__i_ = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22) & 0x7FFFFFFF;
  uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22);
  unint64_t v8 = 0;
  int v9 = result & 0x7FFFFFFF;
  if (v4 <= 0x3FF) {
    char v10 = 0;
  }
  else {
    char v10 = 10;
  }
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = v20 + v9 * v8;
    v21.__x_[0] = v11;
    for (uint64_t j = 1; j != 624; ++j)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v21.__x_[j] = v11;
    }
    v21.__i_ = 0;
    unint64_t v13 = (v8 * v4) >> v10;
    unint64_t v14 = ((v8 + 1) * v4) >> v10;
    unint64_t v15 = v14 - v13;
    if (v14 > v13)
    {
      double v16 = (unint64_t *)(v19 + 8 * v13);
      do
      {
        uint64_t v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21) & 0x7FFFFFFF;
        uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        *v16++ = v17 | ((unint64_t)(result & 0x7FFFFFFF) << 31);
        --v15;
      }
      while (v15);
    }
    if (v4 < 0x400) {
      break;
    }
  }
  while (v8++ < 0x3FF);
  return result;
}

uint64_t faiss::int64_rand_max(faiss *this, uint64_t *a2)
{
  MEMORY[0x1F4188790](this);
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v20 = v7;
  v24.__x_[0] = v2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    v24.__x_[i] = v2;
  }
  v24.__i_ = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24) & 0x7FFFFFFF;
  uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v24);
  unint64_t v10 = 0;
  int v21 = result & 0x7FFFFFFF;
  if (v6 <= 0x3FF) {
    char v11 = 0;
  }
  else {
    char v11 = 10;
  }
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12 = v22 + v21 * v10;
    v23.__x_[0] = v12;
    for (uint64_t j = 1; j != 624; ++j)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12 = j + 1812433253 * (v12 ^ (v12 >> 30));
      v23.__x_[j] = v12;
    }
    v23.__i_ = 0;
    unint64_t v14 = (v10 * v6) >> v11;
    unint64_t v15 = ((v10 + 1) * v6) >> v11;
    unint64_t v16 = v15 - v14;
    if (v15 > v14)
    {
      uint64_t v17 = (unint64_t *)(v20 + 8 * v14);
      do
      {
        uint64_t v18 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23) & 0x7FFFFFFF;
        uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v23);
        *v17++ = (v18 | ((unint64_t)(result & 0x7FFFFFFF) << 31)) % v4;
        --v16;
      }
      while (v16);
    }
    if (v6 < 0x400) {
      break;
    }
  }
  while (v10++ < 0x3FF);
  return result;
}

uint64_t faiss::rand_perm(uint64_t this, int *a2, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = this;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; uint64_t i = (int *)((char *)i + 1))
      *(_DWORD *)(this + 4 * i) = i;
  }
  v10.__x_[0] = a3;
  for (uint64_t j = 1; j != 624; ++j)
  {
    a3 = j + 1812433253 * (a3 ^ (a3 >> 30));
    v10.__x_[j] = a3;
  }
  v10.__i_ = 0;
  if ((unint64_t)a2 >= 2)
  {
    uint64_t v7 = 0;
    do
    {
      this = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v10);
      uint64_t v8 = v7 + (int)(this % v3);
      int v9 = *(_DWORD *)(v4 + 4 * v7);
      *(_DWORD *)(v4 + 4 * v7) = *(_DWORD *)(v4 + 4 * v8);
      *(_DWORD *)(v4 + 4 * v8) = v9;
      unint64_t v3 = (int *)((char *)v3 - 1);
      ++v7;
    }
    while (v3 != (int *)1);
  }
  return this;
}

uint64_t faiss::byte_rand(faiss *this, unsigned __int8 *a2)
{
  MEMORY[0x1F4188790](this);
  unint64_t v4 = v3;
  uint64_t v19 = v5;
  v22.__x_[0] = v2;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    v22.__x_[i] = v2;
  }
  v22.__i_ = 0;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22) & 0x7FFFFFFF;
  uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v22);
  unint64_t v8 = 0;
  int v9 = result & 0x7FFFFFFF;
  if (v4 <= 0x3FF) {
    char v10 = 0;
  }
  else {
    char v10 = 10;
  }
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = v20 + v9 * v8;
    v21.__x_[0] = v11;
    for (uint64_t j = 1; j != 624; ++j)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = j + 1812433253 * (v11 ^ (v11 >> 30));
      v21.__x_[j] = v11;
    }
    v21.__i_ = 0;
    unint64_t v13 = (v8 * v4) >> v10;
    unint64_t v14 = ((v8 + 1) * v4) >> v10;
    unint64_t v15 = v14 - v13;
    if (v14 > v13)
    {
      unint64_t v16 = (unsigned char *)(v19 + v13);
      do
      {
        char v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        uint64_t result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v21);
        *v16++ = v17;
        --v15;
      }
      while (v15);
    }
    if (v4 < 0x400) {
      break;
    }
  }
  while (v8++ < 0x3FF);
  return result;
}

std::string *faiss::get_compile_options@<X0>(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "OPTIMIZE ");
  return std::string::append(a1, "NEON");
}

void sub_1DCFF33E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double faiss::getmillisecs(faiss *this)
{
  gettimeofday(&v2, 0);
  return (double)v2.tv_usec * 0.001 + (double)v2.tv_sec * 1000.0;
}

uint64_t faiss::get_cycles(faiss *this)
{
  return 0;
}

uint64_t faiss::get_mem_usage_kb(faiss *this)
{
  return 0;
}

uint64_t faiss::reflection(uint64_t this, const float *a2, float *a3, unint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 4 * a4;
    do
    {
      if (a5)
      {
        uint64_t v7 = 0;
        uint64_t v8 = this;
        do
        {
          if (a4)
          {
            unint64_t v9 = 0;
            float v10 = 0.0;
            uint64_t v11 = 1;
            float v12 = 0.0;
            do
            {
              float v12 = v12 + (float)(*(float *)(v8 + v11 * 4 - 4) * a2[v11 - 1]);
              float v10 = v10 + (float)(*(float *)(v8 + v11 * 4) * a2[v11]);
              v9 += 2;
              v11 += 2;
            }
            while (v9 < a4);
            uint64_t v13 = 0;
            float v14 = (float)(v12 + v10) * -2.0;
            do
            {
              a2[v13] = a2[v13] + (float)(v14 * *(float *)(v8 + 4 * v13));
              ++v13;
            }
            while (a4 != v13);
          }
          ++v7;
          v8 += v6;
        }
        while (v7 != a5);
      }
      uint64_t v5 = (float *)((char *)v5 + 1);
      a2 = (const float *)((char *)a2 + v6);
    }
    while (v5 != a3);
  }
  return this;
}

uint64_t faiss::reflection_ref(uint64_t this, const float *a2, float *a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 4 * a4;
    do
    {
      if (a5)
      {
        uint64_t v7 = 0;
        uint64_t v8 = this;
        do
        {
          if (a4)
          {
            uint64_t v9 = 0;
            double v10 = 0.0;
            do
            {
              double v10 = v10 + (float)(*(float *)(v8 + 4 * v9) * a2[v9]);
              ++v9;
            }
            while (a4 != v9);
            uint64_t v11 = 0;
            double v12 = v10 * -2.0;
            do
            {
              float v13 = a2[v11] + v12 * *(float *)(v8 + 4 * v11);
              a2[v11++] = v13;
            }
            while (a4 != v11);
          }
          ++v7;
          v8 += v6;
        }
        while (v7 != a5);
      }
      uint64_t v5 = (float *)((char *)v5 + 1);
      a2 = (const float *)((char *)a2 + v6);
    }
    while (v5 != a3);
  }
  return this;
}

void faiss::matrix_qr(faiss *this, __CLPK_integer a2, __CLPK_real *a3, float *a4)
{
  if ((int)this < a2)
  {
    memset(&v15, 0, sizeof(v15));
    int v5 = snprintf(0, 0, "Error: '%s' failed", "m >= n");
    std::string::resize(&v15, v5 + 1, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v15;
    }
    else {
      uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v15.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v6, size, "Error: '%s' failed", "m >= n");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v15, "void faiss::matrix_qr(int, int, float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/utils.cpp", 234);
  }
  __int lda = (int)this;
  __int k = a2;
  __int n = a2;
  std::vector<float>::vector(&v15, a2);
  __lworint k = -1;
  *(void *)__info = 0;
  sgeqrf_(&__lda, &__n, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, (__CLPK_real *)__info, &__lwork, &__info[1]);
  __lworint k = (unint64_t)*(float *)__info;
  std::vector<float>::vector(__work, __lwork);
  sgeqrf_(&__lda, &__n, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, __work[0], &__lwork, &__info[1]);
  sorgqr_(&__lda, &__n, &__k, a3, &__lda, (__CLPK_real *)v15.__r_.__value_.__l.__data_, __work[0], &__lwork, &__info[1]);
  if (__work[0])
  {
    __work[1] = __work[0];
    operator delete(__work[0]);
  }
  if (v15.__r_.__value_.__r.__words[0])
  {
    v15.__r_.__value_.__l.__size_ = v15.__r_.__value_.__r.__words[0];
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1DCFF378C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  if (*(char *)(v12 - 17) < 0) {
    operator delete(*(void **)(v12 - 40));
  }
  _Unwind_Resume(a1);
}

void faiss::FaissException::~FaissException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F383ED88;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F383ED88;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1E01AF670);
}

uint64_t faiss::ranklist_handle_ties(uint64_t this, uint64_t a2, float *a3, const float *a4)
{
  if ((int)this >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = this;
    int v7 = -1;
    float v8 = -1.0e38;
    do
    {
      float v10 = a3[v5];
      if (v10 != v8)
      {
        if (v5 > v7 + 1)
        {
          this = std::__sort<std::__less<long long,long long> &,long long *>();
          float v10 = a3[v5];
        }
        float v8 = v10;
        int v7 = v5;
      }
      ++v5;
      a2 += 8;
    }
    while (v6 != v5);
  }
  return this;
}

uint64_t faiss::merge_result_table_with(faiss *this, unint64_t a2, uint64_t a3, uint64_t *a4, float *a5, const uint64_t *a6, const float *a7, uint64_t a8, uint64_t a9)
{
  char v40 = (char)a7;
  std::vector<long long>::vector(__p, a2);
  std::vector<float>::vector(__src, a2);
  uint64_t v12 = __src[0];
  if (this)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    float v35 = __p[0];
    while (1)
    {
      std::string v15 = (void *)(a3 + 8 * v13 * a2);
      unint64_t v16 = (char *)a4 + 4 * v13 * a2;
      char v17 = &a5[2 * v13 * a2];
      uint64_t v18 = (char *)a6 + 4 * v13 * a2;
      if ((v40 & 1) == 0) {
        break;
      }
      if (a2)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v21 = (float *)__src[0];
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22 = __p[0];
        unint64_t v23 = a2;
        while (1)
        {
          uint64_t v24 = v15[v20];
          if (v24 < 0) {
            break;
          }
          float v25 = *(float *)&v16[4 * v20];
          float v26 = *(float *)&v18[4 * v19];
          if (v25 >= v26) {
            goto LABEL_10;
          }
          float *v21 = v25;
          *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22 = v24;
          ++v20;
LABEL_13:
          ++v21;
          ++v22;
          if (!--v23) {
            goto LABEL_27;
          }
        }
        float v26 = *(float *)&v18[4 * v19];
LABEL_10:
        if (v26 >= 0.0)
        {
          float *v21 = v26;
          *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22 = *(void *)&v17[2 * v19++] + a8;
        }
        else
        {
          float *v21 = NAN;
          *std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v22 = -1;
        }
        goto LABEL_13;
      }
LABEL_26:
      uint64_t v19 = 0;
LABEL_27:
      v14 += v19;
      memcpy(v16, v12, 4 * a2);
      memcpy(v15, v35, 8 * a2);
      if ((faiss *)++v13 == this)
      {
        uint64_t v12 = __src[0];
        if (__src[0]) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }
    }
    if (!a2) {
      goto LABEL_26;
    }
    uint64_t v19 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = (float *)__src[0];
    unint64_t v29 = __p[0];
    unint64_t v30 = a2;
    while (1)
    {
      uint64_t v31 = v15[v27];
      if (v31 < 0) {
        break;
      }
      float v32 = *(float *)&v16[4 * v27];
      float v33 = *(float *)&v18[4 * v19];
      if (v32 <= v33) {
        goto LABEL_21;
      }
      *uint64_t v28 = v32;
      *unint64_t v29 = v31;
      ++v27;
LABEL_24:
      ++v28;
      ++v29;
      if (!--v30) {
        goto LABEL_27;
      }
    }
    float v33 = *(float *)&v18[4 * v19];
LABEL_21:
    if (v33 >= 0.0)
    {
      *uint64_t v28 = v33;
      *unint64_t v29 = *(void *)&v17[2 * v19++] + a8;
    }
    else
    {
      *uint64_t v28 = NAN;
      *unint64_t v29 = -1;
    }
    goto LABEL_24;
  }
  uint64_t v14 = 0;
  if (__src[0])
  {
LABEL_29:
    __src[1] = v12;
    operator delete(v12);
  }
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v14;
}

void sub_1DCFF3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ranklist_intersection_size(faiss *this, uint64_t a2, faiss *a3, uint64_t a4, const uint64_t *a5)
{
  do
  {
    uint64_t v7 = a4;
    float v8 = a3;
    a4 = a2;
    a3 = this;
    this = v8;
    a2 = v7;
  }
  while (v8 > a3);
  operator new[]();
}

double faiss::imbalance_factor(faiss *this, int *a2, const int *a3)
{
  if ((int)this < 1)
  {
    double v5 = 0.0;
    double v4 = 0.0;
  }
  else
  {
    uint64_t v3 = this;
    double v4 = 0.0;
    double v5 = 0.0;
    do
    {
      int v6 = *a2++;
      double v5 = v5 + (double)v6;
      double v4 = v4 + (double)v6 * (double)v6;
      --v3;
    }
    while (v3);
  }
  return v4 * (double)(int)this / (v5 * v5);
}

double faiss::imbalance_factor(faiss *this, int a2, uint64_t *a3, const uint64_t *a4)
{
  int v6 = (int)this;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v18, a2, &__x);
  begiint n = v18.__begin_;
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = *a3++;
      ++begin[v9];
      --v8;
    }
    while (v8);
  }
  if (a2 >= 1)
  {
    uint64_t v10 = a2;
    double v11 = 0.0;
    uint64_t v12 = begin;
    double v13 = 0.0;
    do
    {
      int v14 = *v12++;
      double v13 = v13 + (double)v14;
      double v11 = v11 + (double)v14 * (double)v14;
      --v10;
    }
    while (v10);
    double v15 = v11 * (double)a2 / (v13 * v13);
    goto LABEL_9;
  }
  double v15 = (double)a2 * 0.0 / 0.0;
  if (begin)
  {
LABEL_9:
    v18.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

uint64_t faiss::ivec_hist(faiss *this, uint64_t a2, const int *a3, void *a4, int *a5)
{
  int v6 = (int)a3;
  bzero(a4, 4 * (int)a3);
  for (uint64_t result = 0; this; this = (faiss *)((char *)this - 1))
  {
    uint64_t v10 = *(unsigned int *)(a2 - 4 + 4 * (void)this);
    if ((v10 & 0x80000000) != 0 || (int)v10 >= v6) {
      uint64_t result = (result + 1);
    }
    else {
      ++*((_DWORD *)a4 + v10);
    }
  }
  return result;
}

void faiss::bincode_hist(faiss *this, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int *a5)
{
  if ((a2 & 7) != 0)
  {
    memset(&v24, 0, sizeof(v24));
    int v20 = snprintf(0, 0, "Error: '%s' failed", "nbits % 8 == 0");
    std::string::resize((std::string *)&v24, v20 + 1, 0);
    if (SHIBYTE(v24.__end_cap_.__value_) >= 0) {
      begiint n = (char *)&v24;
    }
    else {
      begiint n = (char *)v24.__begin_;
    }
    if (SHIBYTE(v24.__end_cap_.__value_) >= 0) {
      size_t value_high = HIBYTE(v24.__end_cap_.__value_);
    }
    else {
      size_t value_high = (size_t)v24.__end_;
    }
    snprintf(begin, value_high, "Error: '%s' failed", "nbits % 8 == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v24, "void faiss::bincode_hist(size_t, size_t, const uint8_t *, int *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/utils.cpp", 410);
  }
  unint64_t v9 = a2 >> 3;
  std::vector<int>::vector(&v24, a2 >> 3 << 8);
  uint64_t v10 = v24.__begin_;
  if (this)
  {
    double v11 = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9;
    }
    do
    {
      if (a2 >= 8)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v12;
        do
        {
          unsigned int v15 = *a3++;
          ++v10[v13 & 0xFFFFFF00 | (unint64_t)v15];
          v13 += 256;
          --v14;
        }
        while (v14);
      }
      double v11 = (faiss *)((char *)v11 + 1);
    }
    while (v11 != this);
  }
  bzero(a4, 4 * a2);
  if (a2 >= 8)
  {
    uint64_t v16 = 0;
    if (v9 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v9;
    }
    do
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        for (uint64_t j = 0; j != 8; ++j)
        {
          if ((i >> j)) {
            *(_DWORD *)&a4[32 * (v16 & 0x1FFFFFFF) + 4 * j] += v10[(v16 << 8) + i];
          }
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
  if (v10)
  {
    v24.__end_ = v10;
    operator delete(v10);
  }
}

void sub_1DCFF4020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::ivec_checksum(faiss *this, uint64_t a2, const int *a3)
{
  for (uint64_t result = 112909; this; this = (faiss *)((char *)this - 1))
    uint64_t result = 65713 * result + 1686049 * *(int *)(a2 - 4 + 4 * (void)this);
  return result;
}

uint64_t faiss::fvec_argsort(unint64_t this, uint64_t a2, const float *a3, unint64_t *a4)
{
  if (this)
  {
    for (uint64_t i = 0; i != (faiss *)this; uint64_t i = (faiss *)((char *)i + 1))
      *(void *)&a3[2 * (void)i] = i;
  }
  uint64_t v8 = a2;
  unint64_t v5 = 126 - 2 * __clz(this);
  if (this) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
}

void faiss::fvec_argsort_parallel(faiss *this, unint64_t a2, const float *a3, unint64_t *a4)
{
}

uint64_t faiss::fvecs_maybe_subsample(faiss *this, int **a2, unint64_t *a3, uint64_t a4, const float *a5, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type a6)
{
  uint64_t v7 = *a2;
  if (v7 > (int *)a3)
  {
    if (a5)
    {
      printf("  Input training set too big (max size is %zd), sampling %zd / %zd vectors\n", (size_t)a3, (size_t)a3, (size_t)v7);
      uint64_t v7 = *a2;
    }
    std::vector<int>::vector(&v10, (std::vector<int>::size_type)v7);
    faiss::rand_perm((uint64_t)v10.__begin_, *a2, a6);
    operator new[]();
  }
  return a4;
}

void sub_1DCFF42E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float faiss::binary_to_real(faiss *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  if (this)
  {
    for (unint64_t i = 0; (faiss *)i != this; ++i)
    {
      float result = (float)(2 * ((*(unsigned __int8 *)(a2 + (i >> 3)) >> (i & 7)) & 1) - 1);
      *(float *)&a3[4 * i] = result;
    }
  }
  return result;
}

unint64_t faiss::real_to_binary(unint64_t this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  if (this >= 8)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = 0;
      char v6 = 0;
      do
      {
        int v7 = 1 << v5;
        if (*(float *)(a2 + 4 * v5) <= 0.0) {
          LOBYTE(v7) = 0;
        }
        v6 |= v7;
        ++v5;
      }
      while (v5 != 8);
      *((unsigned char *)a3 + v4++) = v6;
      a2 += 32;
    }
    while (v4 != this >> 3);
  }
  return this;
}

unint64_t faiss::hash_bytes(faiss *this, uint64_t a2)
{
  uint64_t v2 = (unint64_t)*(unsigned __int8 *)this << 7;
  if (a2 >= 1)
  {
    uint64_t v3 = (const unsigned __int8 *)(a2 + 1);
    do
    {
      unsigned int v4 = *(unsigned __int8 *)this;
      this = (faiss *)((char *)this + 1);
      uint64_t v2 = (1000003 * v2) ^ v4;
      --v3;
    }
    while ((unint64_t)v3 > 1);
  }
  return v2 ^ a2;
}

uint64_t faiss::check_openmp(faiss *this)
{
  return 0;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    int v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1DCFF4438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1DCFF44B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgsortComparator &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  double v11 = (uint64_t *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          double v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v43 = *(a2 - 1);
                uint64_t v44 = *v12;
                if (*(float *)(*a3 + 4 * v43) < *(float *)(*a3 + 4 * *v12))
                {
                  *uint64_t v12 = v43;
                  *(a2 - 1) = v44;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                uint64_t v45 = v12 + 1;
                uint64_t v46 = v12 + 2;
                uint64_t v47 = v12 + 3;
                uint64_t v48 = *(a2 - 1);
                uint64_t v49 = v12[3];
                uint64_t v50 = *a3;
                if (*(float *)(*a3 + 4 * v48) < *(float *)(*a3 + 4 * v49))
                {
                  uint64_t *v47 = v48;
                  *(a2 - 1) = v49;
                  uint64_t v51 = *v47;
                  uint64_t v52 = *v46;
                  float v53 = *(float *)(v50 + 4 * *v47);
                  if (v53 < *(float *)(v50 + 4 * *v46))
                  {
                    uint64_t *v46 = v51;
                    uint64_t *v47 = v52;
                    uint64_t v54 = *v45;
                    if (v53 < *(float *)(v50 + 4 * *v45))
                    {
                      v12[1] = v51;
                      void v12[2] = v54;
                      uint64_t v55 = *v12;
                      if (v53 < *(float *)(v50 + 4 * *v12))
                      {
                        *uint64_t v12 = v51;
                        v12[1] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v56 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = *a3;
                  unint64_t v59 = v12;
                  do
                  {
                    uint64_t v61 = *v59;
                    uint64_t v60 = v59[1];
                    unint64_t v59 = v56;
                    float v62 = *(float *)(v58 + 4 * v60);
                    if (v62 < *(float *)(v58 + 4 * v61))
                    {
                      uint64_t v63 = v57;
                      while (1)
                      {
                        *(uint64_t *)((char *)v12 + v63 + 8) = v61;
                        if (!v63) {
                          break;
                        }
                        uint64_t v61 = *(uint64_t *)((char *)v12 + v63 - 8);
                        v63 -= 8;
                        if (v62 >= *(float *)(v58 + 4 * v61))
                        {
                          uint64_t v64 = (uint64_t *)((char *)v12 + v63 + 8);
                          goto LABEL_80;
                        }
                      }
                      uint64_t v64 = v12;
LABEL_80:
                      *uint64_t v64 = v60;
                    }
                    uint64_t v56 = v59 + 1;
                    v57 += 8;
                  }
                  while (v59 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              long long v93 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v94 = *a3;
                do
                {
                  uint64_t v96 = *v11;
                  uint64_t v95 = v11[1];
                  double v11 = v93;
                  float v97 = *(float *)(v94 + 4 * v95);
                  if (v97 < *(float *)(v94 + 4 * v96))
                  {
                    do
                    {
                      *long long v93 = v96;
                      uint64_t v96 = *(v93 - 2);
                      --v93;
                    }
                    while (v97 < *(float *)(v94 + 4 * v96));
                    *long long v93 = v95;
                  }
                  long long v93 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v65 = (v14 - 2) >> 1;
              uint64_t v66 = *a3;
              int64_t v67 = v65;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  uint64_t v70 = &v12[v69];
                  if (2 * v68 + 2 < (uint64_t)v14 && *(float *)(v66 + 4 * *v70) < *(float *)(v66 + 4 * v70[1]))
                  {
                    ++v70;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  float result = (uint64_t)&v12[v68];
                  uint64_t v71 = *v70;
                  uint64_t v72 = *(void *)result;
                  float v73 = *(float *)(v66 + 4 * *(void *)result);
                  if (*(float *)(v66 + 4 * *v70) >= v73)
                  {
                    do
                    {
                      float v74 = v70;
                      *(void *)float result = v71;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v75 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      uint64_t v70 = &v12[v69];
                      uint64_t v76 = v75 + 2;
                      if (v76 < (uint64_t)v14 && *(float *)(v66 + 4 * *v70) < *(float *)(v66 + 4 * v70[1]))
                      {
                        ++v70;
                        uint64_t v69 = v76;
                      }
                      uint64_t v71 = *v70;
                      float result = (uint64_t)v74;
                    }
                    while (*(float *)(v66 + 4 * *v70) >= v73);
                    *float v74 = v72;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v77 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v78 = 0;
                uint64_t v79 = *v12;
                uint64_t v80 = *a3;
                uint64_t v81 = v12;
                do
                {
                  float v82 = v81;
                  v81 += v78 + 1;
                  uint64_t v83 = 2 * v78;
                  uint64_t v78 = (2 * v78) | 1;
                  uint64_t v84 = v83 + 2;
                  if (v84 < v77)
                  {
                    float result = *v81;
                    if (*(float *)(v80 + 4 * *v81) < *(float *)(v80 + 4 * v81[1]))
                    {
                      ++v81;
                      uint64_t v78 = v84;
                    }
                  }
                  *float v82 = *v81;
                }
                while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                if (v81 == --a2)
                {
                  *uint64_t v81 = v79;
                }
                else
                {
                  *uint64_t v81 = *a2;
                  *a2 = v79;
                  uint64_t v85 = (char *)v81 - (char *)v12 + 8;
                  if (v85 >= 9)
                  {
                    unint64_t v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                    uint64_t v87 = &v12[v86];
                    uint64_t v88 = *v87;
                    uint64_t v89 = *v81;
                    float v90 = *(float *)(v80 + 4 * *v81);
                    if (*(float *)(v80 + 4 * *v87) < v90)
                    {
                      do
                      {
                        long long v91 = v87;
                        *uint64_t v81 = v88;
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        uint64_t v87 = &v12[v86];
                        uint64_t v88 = *v87;
                        uint64_t v81 = v91;
                      }
                      while (*(float *)(v80 + 4 * *v87) < v90);
                      *long long v91 = v89;
                    }
                  }
                }
              }
              while (v77-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            uint64_t v17 = *v11;
            *double v11 = *v16;
            *uint64_t v16 = v17;
          }
          else
          {
          }
          --a4;
          uint64_t v18 = *v11;
          uint64_t v19 = *a3;
          if (a5) {
            break;
          }
          float v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v11 - 1)) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(float *)(v19 + 4 * *(a2 - 1)))
          {
            float v35 = v11 + 1;
            do
            {
              uint64_t v12 = v35;
              if (v35 >= a2) {
                break;
              }
              ++v35;
            }
            while (v20 >= *(float *)(v19 + 4 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v34 = v12[1];
              ++v12;
            }
            while (v20 >= *(float *)(v19 + 4 * v34));
          }
          float v36 = a2;
          if (v12 < a2)
          {
            float v36 = a2;
            do
              uint64_t v37 = *--v36;
            while (v20 < *(float *)(v19 + 4 * v37));
          }
          if (v12 < v36)
          {
            uint64_t v38 = *v12;
            uint64_t v39 = *v36;
            do
            {
              *uint64_t v12 = v39;
              uint64_t *v36 = v38;
              do
              {
                uint64_t v40 = v12[1];
                ++v12;
                uint64_t v38 = v40;
              }
              while (v20 >= *(float *)(v19 + 4 * v40));
              do
              {
                uint64_t v41 = *--v36;
                uint64_t v39 = v41;
              }
              while (v20 < *(float *)(v19 + 4 * v41));
            }
            while (v12 < v36);
          }
          uint64_t v42 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *double v11 = *v42;
          }
          a5 = 0;
          uint64_t *v42 = v18;
        }
        float v20 = *(float *)(v19 + 4 * v18);
LABEL_13:
        uint64_t v21 = 0;
        do
          uint64_t v22 = v11[++v21];
        while (*(float *)(v19 + 4 * v22) < v20);
        unint64_t v23 = &v11[v21];
        std::vector<int> v24 = a2;
        if (v21 == 1)
        {
          std::vector<int> v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *--v24;
          }
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        else
        {
          do
            uint64_t v25 = *--v24;
          while (*(float *)(v19 + 4 * v25) >= v20);
        }
        if (v23 >= v24)
        {
          float v32 = v23 - 1;
        }
        else
        {
          uint64_t v27 = *v24;
          uint64_t v28 = &v11[v21];
          unint64_t v29 = v24;
          do
          {
            *uint64_t v28 = v27;
            *unint64_t v29 = v22;
            do
            {
              uint64_t v30 = v28[1];
              ++v28;
              uint64_t v22 = v30;
            }
            while (*(float *)(v19 + 4 * v30) < v20);
            do
            {
              uint64_t v31 = *--v29;
              uint64_t v27 = v31;
            }
            while (*(float *)(v19 + 4 * v31) >= v20);
          }
          while (v28 < v29);
          float v32 = v28 - 1;
        }
        if (v32 != v11) {
          *double v11 = *v32;
        }
        *float v32 = v18;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        a5 = 0;
        uint64_t v12 = v32 + 1;
      }
      uint64_t v12 = v32 + 1;
      if (result) {
        break;
      }
      if (!v33) {
        goto LABEL_34;
      }
    }
    a2 = v32;
    if (!v33) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *a4;
  float v7 = *(float *)(*a4 + 4 * *a2);
  float v8 = *(float *)(*a4 + 4 * *result);
  uint64_t v9 = *a3;
  float v10 = *(float *)(*a4 + 4 * *a3);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *result;
      if (*(float *)(v6 + 4 * *a2) < *(float *)(v6 + 4 * *result))
      {
        *float result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *float result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 4 * *a3) >= v8) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *float result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      uint64_t v21 = a1 + 1;
      uint64_t v22 = a1 + 2;
      unint64_t v23 = a1 + 3;
      uint64_t v24 = *(a2 - 1);
      uint64_t v25 = a1[3];
      uint64_t v26 = *a3;
      if (*(float *)(*a3 + 4 * v24) < *(float *)(*a3 + 4 * v25))
      {
        *unint64_t v23 = v24;
        *(a2 - 1) = v25;
        uint64_t v27 = *v23;
        uint64_t v28 = *v22;
        float v29 = *(float *)(v26 + 4 * *v23);
        if (v29 < *(float *)(v26 + 4 * *v22))
        {
          *uint64_t v22 = v27;
          *unint64_t v23 = v28;
          uint64_t v30 = *v21;
          if (v29 < *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (v29 < *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          float v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v20 = a1;
LABEL_13:
      *float v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgsortComparator &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v11 = *a3;
  uint64_t v12 = *a5;
  if (*(float *)(*a5 + 4 * *a4) < *(float *)(*a5 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) < *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) < *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void *faiss::RangeSearchResult::RangeSearchResult(void *this, uint64_t a2, int a3)
{
  *this = &unk_1F383F120;
  this[1] = a2;
  if (a3) {
    operator new[]();
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0x40000;
  return this;
}

void faiss::RangeSearchResult::do_allocation(faiss::RangeSearchResult *this)
{
  if (!*((void *)this + 3) && !*((void *)this + 4))
  {
    uint64_t v1 = (void *)*((void *)this + 2);
    if (*((void *)this + 1))
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = v1[v2];
        v1[v2] = v3;
        v3 += v4;
        ++v2;
        unint64_t v5 = *((void *)this + 1);
      }
      while (v5 > v2);
      v1[v5] = v3;
    }
    else
    {
      *uint64_t v1 = 0;
    }
    operator new[]();
  }
  memset(&v10, 0, sizeof(v10));
  int v6 = snprintf(0, 0, "Error: '%s' failed", "labels == nullptr && distances == nullptr");
  std::string::resize(&v10, v6 + 1, 0);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v7 = &v10;
  }
  else {
    float v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v10.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v7, size, "Error: '%s' failed", "labels == nullptr && distances == nullptr");
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(exception, &v10, "virtual void faiss::RangeSearchResult::do_allocation()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/AuxIndexStructures.cpp", 40);
}

void sub_1DCFF51E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::RangeSearchResult::~RangeSearchResult(faiss::RangeSearchResult *this)
{
  *(void *)this = &unk_1F383F120;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x1E01AF650](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x1E01AF650](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x1E01AF650](v4, 0x1000C8000313F17);
  }
}

{
  uint64_t vars8;

  faiss::RangeSearchResult::~RangeSearchResult(this);
  JUMPOUT(0x1E01AF670);
}

void *faiss::BufferList::BufferList(void *this, uint64_t a2)
{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = a2;
  return this;
}

{
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = a2;
  return this;
}

void faiss::BufferList::~BufferList(faiss::BufferList *this)
{
  uint64_t v2 = (char *)*((void *)this + 2);
  if (v2 != *((char **)this + 1))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v2 = (char *)*((void *)this + 1);
    do
    {
      if (*(void *)&v2[v3])
      {
        MEMORY[0x1E01AF650](*(void *)&v2[v3], 0x1000C8000313F17);
        uint64_t v2 = (char *)*((void *)this + 1);
      }
      if (*(void *)&v2[v3 + 8])
      {
        MEMORY[0x1E01AF650](*(void *)&v2[v3 + 8], 0x1000C8052888210);
        uint64_t v2 = (char *)*((void *)this + 1);
      }
      ++v4;
      v3 += 16;
    }
    while (v4 < (uint64_t)(*((void *)this + 2) - (void)v2) >> 4);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

faiss::BufferList *faiss::BufferList::add(faiss::BufferList *this, uint64_t a2, float a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3 == *(void *)this) {
    faiss::BufferList::append_buffer(this);
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v6 = *(void *)(v4 - 16);
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v6 + 8 * v3) = a2;
  *(float *)(v5 + 4 * v3) = a3;
  *((void *)this + 4) = v3 + 1;
  return this;
}

void faiss::BufferList::append_buffer(faiss::BufferList *this)
{
}

void *faiss::BufferList::copy_range(void *this, unint64_t a2, unint64_t a3, char *__dst, float *a5)
{
  if (a3)
  {
    unint64_t v7 = a3;
    uint64_t v8 = this;
    unint64_t v9 = a2 / *this;
    unint64_t v10 = a2 % *this;
    do
    {
      if (v10 + v7 >= *v8) {
        unint64_t v11 = *v8 - v10;
      }
      else {
        unint64_t v11 = v7;
      }
      uint64_t v12 = (void *)(v8[1] + 16 * v9);
      uint64_t v13 = v12[1];
      memcpy(__dst, (const void *)(*v12 + 8 * v10), 8 * v11);
      this = memcpy(a5, (const void *)(v13 + 4 * v10), 4 * v11);
      unint64_t v10 = 0;
      __dst += 8 * v11;
      ++v9;
      a5 += v11;
      v7 -= v11;
    }
    while (v7);
  }
  return this;
}

faiss::BufferList *faiss::RangeQueryResult::add(faiss::RangeQueryResult *this, float a2, uint64_t a3)
{
  uint64_t v3 = (faiss::BufferList *)*((void *)this + 2);
  ++*((void *)this + 1);
  return faiss::BufferList::add(v3, a3, a2);
}

void *faiss::RangeSearchPartialResult::RangeSearchPartialResult(void *this, faiss::RangeSearchResult *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  *this = v2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = v2;
  this[5] = a2;
  this[7] = 0;
  this[8] = 0;
  this[6] = 0;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)a2 + 5);
  *this = v2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = v2;
  this[5] = a2;
  this[7] = 0;
  this[8] = 0;
  this[6] = 0;
  return this;
}

void *faiss::RangeSearchPartialResult::new_result(faiss::RangeSearchPartialResult *this, uint64_t a2)
{
  unint64_t v6 = *((void *)this + 8);
  uint64_t v4 = (char *)this + 64;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>((uint64_t)v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[24 * v11];
    float v17 = &v15[24 * v14];
    *(void *)uint64_t v16 = a2;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = this;
    uint64_t v8 = v16 + 24;
    uint64_t v19 = (char *)*((void *)this + 6);
    uint64_t v18 = (char *)*((void *)this + 7);
    if (v18 != v19)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v16 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v16 - 24) = v20;
        v16 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    *((void *)this + 6) = v16;
    *((void *)this + 7) = v8;
    *((void *)this + 8) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    v7[1] = 0;
    uint64_t v8 = v7 + 3;
    v7[2] = this;
  }
  *((void *)this + 7) = v8;
  return v8 - 3;
}

void *faiss::RangeSearchPartialResult::finalize(faiss::RangeSearchPartialResult *this)
{
  faiss::RangeSearchPartialResult::set_lims(this);
  (***((void (****)(void))this + 5))(*((void *)this + 5));
  return faiss::RangeSearchPartialResult::copy_result(this, 0);
}

void *faiss::RangeSearchPartialResult::set_lims(void *this)
{
  uint64_t v1 = this[6];
  uint64_t v2 = this[7] - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 24;
    uint64_t v4 = *(void *)(this[5] + 16);
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    unint64_t v5 = (void *)(v1 + 8);
    do
    {
      *(void *)(v4 + 8 * *(v5 - 1)) = *v5;
      v5 += 3;
      --v3;
    }
    while (v3);
  }
  return this;
}

void *faiss::RangeSearchPartialResult::copy_result(void *this, int a2)
{
  uint64_t v2 = this[6];
  if (this[7] != v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v2 + v5;
      unint64_t v9 = (void *)v4[5];
      uint64_t v10 = *(void *)(v9[2] + 8 * *(void *)(v2 + v5));
      this = faiss::BufferList::copy_range(v4, v7, *(void *)(v2 + v5 + 8), (char *)(v9[3] + 8 * v10), (float *)(v9[4] + 4 * v10));
      if (a2) {
        *(void *)(*(void *)(v4[5] + 16) + 8 * *(void *)(v2 + v5)) += *(void *)(v8 + 8);
      }
      v7 += *(void *)(v8 + 8);
      ++v6;
      uint64_t v2 = v4[6];
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[7] - v2) >> 3) > v6);
  }
  return this;
}

uint64_t **faiss::RangeSearchPartialResult::merge(uint64_t **result, int a2)
{
  unint64_t v3 = *result;
  uint64_t v2 = result[1];
  unint64_t v4 = (char *)v2 - (char *)*result;
  if ((v4 >> 3))
  {
    unint64_t v6 = (uint64_t *)result;
    uint64_t v7 = *(void *)(*v3 + 40);
    uint64_t v8 = *(void *)(v7 + 8);
    while (v3 != v2)
    {
      uint64_t v9 = *v3;
      if (*v3)
      {
        uint64_t v10 = *(uint64_t **)(v9 + 48);
        unint64_t v11 = *(uint64_t **)(v9 + 56);
        if (v10 != v11)
        {
          uint64_t v12 = *(void *)(v7 + 16);
          do
          {
            uint64_t v13 = *v10;
            uint64_t v14 = v10[1];
            v10 += 3;
            *(void *)(v12 + 8 * v13) += v14;
          }
          while (v10 != v11);
        }
      }
      ++v3;
    }
    BOOL result = (uint64_t **)(**(uint64_t (***)(uint64_t))v7)(v7);
    if ((int)(v4 >> 3) >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v4 & 0x7FFFFFFF8;
      do
      {
        BOOL result = *(uint64_t ***)(*v6 + v15);
        if (result)
        {
          BOOL result = (uint64_t **)faiss::RangeSearchPartialResult::copy_result(result, 1);
          if (a2)
          {
            uint64_t v17 = *v6;
            uint64_t v18 = *(faiss::BufferList **)(*v6 + v15);
            if (v18)
            {
              uint64_t v19 = (void *)*((void *)v18 + 6);
              if (v19)
              {
                *((void *)v18 + 7) = v19;
                operator delete(v19);
              }
              faiss::BufferList::~BufferList(v18);
              BOOL result = (uint64_t **)MEMORY[0x1E01AF670]();
              uint64_t v17 = *v6;
            }
            *(void *)(v17 + v15) = 0;
          }
        }
        v15 += 8;
      }
      while (v16 != v15);
    }
    long long v20 = *(void **)(v7 + 16);
    if (v8) {
      BOOL result = (uint64_t **)memmove(v20 + 1, *(const void **)(v7 + 16), 8 * v8);
    }
    *long long v20 = 0;
  }
  return result;
}

void *faiss::IDSelectorRange::IDSelectorRange(void *this, uint64_t a2, uint64_t a3)
{
  *this = &unk_1F383EE90;
  this[1] = a2;
  this[2] = a3;
  return this;
}

{
  *this = &unk_1F383EE90;
  this[1] = a2;
  this[2] = a3;
  return this;
}

BOOL faiss::IDSelectorRange::is_member(faiss::IDSelectorRange *this, uint64_t a2)
{
  return *((void *)this + 1) <= a2 && *((void *)this + 2) > a2;
}

void *faiss::IDSelectorArray::IDSelectorArray(void *this, uint64_t a2, const uint64_t *a3)
{
  *this = &unk_1F383EE40;
  this[1] = a2;
  this[2] = a3;
  return this;
}

{
  *this = &unk_1F383EE40;
  this[1] = a2;
  this[2] = a3;
  return this;
}

BOOL faiss::IDSelectorArray::is_member(faiss::IDSelectorArray *this, uint64_t a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (*v3 == a2) {
    return 1;
  }
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    uint64_t v7 = v3[v5++];
  }
  while (v7 != a2);
  return v6 < v2;
}

faiss::IDSelectorBatch *faiss::IDSelectorBatch::IDSelectorBatch(faiss::IDSelectorBatch *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  *(void *)this = &unk_1F383EE68;
  *(_OWORD *)((char *)this + 8) = 0u;
  unint64_t v6 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  int v7 = 1;
  do
    unint64_t v8 = 1 << (v7++ - 1);
  while (v8 < a2);
  *((_DWORD *)this + 18) = v7 + 3;
  *((void *)this + 10) = ~(-1 << (v7 + 3));
  char v12 = 0;
  std::vector<unsigned char>::__append((void *)this + 6, 1 << v7, &v12);
  for (; v4; --v4)
  {
    uint64_t v9 = *a3++;
    int64_t v11 = v9;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)v6, (unint64_t *)&v11, &v11);
    v11 &= *((void *)this + 10);
    *(unsigned char *)(*((void *)this + 6) + (v11 >> 3)) |= 1 << (v11 & 7);
  }
  return this;
}

void sub_1DCFF5C88(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 56) = v5;
    operator delete(v5);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL faiss::IDSelectorBatch::is_member(faiss::IDSelectorBatch *this, unint64_t a2)
{
  unint64_t v3 = a2;
  return ((*(unsigned __int8 *)(*((void *)this + 6) + ((uint64_t)(*((void *)this + 10) & a2) >> 3)) >> (*((unsigned char *)this + 80) & a2 & 7)) & 1) != 0
      && std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)this + 1, &v3) != 0;
}

uint64_t *faiss::InterruptCallback::get_instance(faiss::InterruptCallback *this)
{
  {
    __cxa_atexit((void (*)(void *))std::unique_ptr<faiss::InterruptCallback>::~unique_ptr[abi:ne180100], &faiss::InterruptCallback::get_instance(void)::instance, &dword_1DCCF9000);
  }
  return &faiss::InterruptCallback::get_instance(void)::instance;
}

uint64_t *std::unique_ptr<faiss::InterruptCallback>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  return a1;
}

std::mutex *faiss::InterruptCallback::get_lock(faiss::InterruptCallback *this)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &faiss::InterruptCallback::get_lock(void)::lock, &dword_1DCCF9000);
  }
  return &faiss::InterruptCallback::get_lock(void)::lock;
}

uint64_t faiss::InterruptCallback::clear_instance(faiss::InterruptCallback *this)
{
  faiss::InterruptCallback::get_instance(this);
  uint64_t result = faiss::InterruptCallback::get_instance(void)::instance;
  faiss::InterruptCallback::get_instance(void)::instance = 0;
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v2();
  }
  return result;
}

uint64_t *faiss::InterruptCallback::check(faiss::InterruptCallback *this)
{
  uint64_t result = faiss::InterruptCallback::get_instance(this);
  if (faiss::InterruptCallback::get_instance(void)::instance)
  {
    faiss::InterruptCallback::get_instance((faiss::InterruptCallback *)result);
    uint64_t result = (uint64_t *)(**(uint64_t (***)(uint64_t))faiss::InterruptCallback::get_instance(void)::instance)(faiss::InterruptCallback::get_instance(void)::instance);
    if (result)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v3, "computation interrupted");
      faiss::FaissException::FaissException(exception, v3, "static void faiss::InterruptCallback::check()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/AuxIndexStructures.cpp", 279);
    }
  }
  return result;
}

void sub_1DCFF5F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::InterruptCallback::is_interrupted(faiss::InterruptCallback *this)
{
  instance = faiss::InterruptCallback::get_instance(this);
  if (!faiss::InterruptCallback::get_instance(void)::instance) {
    return 0;
  }
  faiss::InterruptCallback::get_lock((faiss::InterruptCallback *)instance);
  std::mutex::lock(&faiss::InterruptCallback::get_lock(void)::lock);
  faiss::InterruptCallback::get_instance(v2);
  uint64_t v3 = (**(uint64_t (***)(void))faiss::InterruptCallback::get_instance(void)::instance)();
  std::mutex::unlock(&faiss::InterruptCallback::get_lock(void)::lock);
  return v3;
}

void sub_1DCFF6048(_Unwind_Exception *a1)
{
}

unint64_t faiss::InterruptCallback::get_period_hint(faiss::InterruptCallback *this)
{
  if (!faiss::InterruptCallback::get_instance(void)::instance) {
    return 0x40000000;
  }
  if ((unint64_t)this + 1 > 0x5F5E100) {
    return 1;
  }
  return 0x5F5E100 / ((unint64_t)this + 1);
}

void faiss::IDSelectorRange::~IDSelectorRange(faiss::IDSelectorRange *this)
{
}

void faiss::IDSelectorArray::~IDSelectorArray(faiss::IDSelectorArray *this)
{
}

void faiss::IDSelectorBatch::~IDSelectorBatch(faiss::IDSelectorBatch *this)
{
  faiss::IDSelectorBatch::~IDSelectorBatch(this);
  JUMPOUT(0x1E01AF670);
}

{
  void *v2;

  *(void *)this = &unk_1F383EE68;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  int v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      int v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      char v12 = operator new(v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    int v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      int v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1DCFF656C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void *faiss::FaissException::FaissException(void *a1, long long *a2)
{
  *a1 = &unk_1F383ED88;
  unint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1DCFF69B4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::FaissException::FaissException(uint64_t a1, uint64_t a2, const char *a3, const char *a4, int a5)
{
  *(void *)a1 = &unk_1F383ED88;
  *(void *)(a1 + 8) = 0;
  unint64_t v10 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v11 = (const char *)a2;
  }
  else {
    unint64_t v11 = *(const char **)a2;
  }
  int v12 = snprintf(0, 0, "Error in %s at %s:%d: %s", a3, a4, a5, v11);
  std::string::resize(v10, v12 + 1, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    unint64_t v10 = *(std::string **)(a1 + 8);
    size_t v13 = *(void *)(a1 + 16);
  }
  else
  {
    size_t v13 = *(unsigned __int8 *)(a1 + 31);
  }
  if (*(char *)(a2 + 23) >= 0) {
    BOOL v14 = (const char *)a2;
  }
  else {
    BOOL v14 = *(const char **)a2;
  }
  snprintf((char *)v10, v13, "Error in %s at %s:%d: %s", a3, a4, a5, v14);
  return a1;
}

void sub_1DCFF6ABC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::FaissException::what(faiss::FaissException *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

const std::exception_ptr **faiss::handleExceptions(const std::exception_ptr **result)
{
  unint64_t v2 = (char *)result[1] - (char *)*result;
  if (v2 == 16)
  {
    v3.__ptr_ = std::exception_ptr::exception_ptr(&v10, *result + 1);
    std::rethrow_exception(v3);
    goto LABEL_7;
  }
  if (v2 >= 0x11)
  {
    long long v4 = result;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    uint64_t v1 = *v4;
    if (*v4 == v4[1])
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      faiss::FaissException::FaissException(exception, &v7);
    }
    while (1)
    {
      std::exception_ptr::exception_ptr(&v8, v1 + 1);
      v6.__ptr_ = &v8;
      std::rethrow_exception(v6);
LABEL_7:
      __break(1u);
    }
  }
  return result;
}

void sub_1DCFF6C18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception_ptr a13)
{
  std::exception_ptr::~exception_ptr(&a13);
  uint64_t v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    unint64_t v23 = v22;
    if ((*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, 28);
      uint64_t v26 = (void *)std::ostream::operator<<();
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v17, 2);
      uint64_t v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
      size_t v29 = strlen(v28);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v14, 36);
      uint64_t v24 = (void *)std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v15, 1);
    __cxa_end_catch();
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v14, 36);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v15, 1);
    __cxa_end_catch();
  }
  if (v18 + 16 == v19) {
    JUMPOUT(0x1DCFF6B8CLL);
  }
  JUMPOUT(0x1DCFF6C00);
}

void sub_1DCFF6D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  size_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  std::exception_ptr v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1DCFF705C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1E01AF5F0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E01AF5F0](a1 + 128);
  return a1;
}

void faiss::demangle_cpp_symbol(faiss *this@<X0>, void *a2@<X8>)
{
  int status = -1;
  uint64_t v4 = __cxa_demangle((const char *)this, 0, 0, &status);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!status) {
    MEMORY[0x1E01AF3E0](a2, v4);
  }
  free(v4);
}

void sub_1DCFF7224(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    std::exception_ptr v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E01AF430](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1E01AF440](v13);
  return a1;
}

void sub_1DCFF7490(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1E01AF440](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DCFF7470);
}

void sub_1DCFF74E4(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      size_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1DCFF7664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

double faiss::SimulatedAnnealingParameters::SimulatedAnnealingParameters(faiss::SimulatedAnnealingParameters *this)
{
  double result = 0.7;
  *(_OWORD *)this = xmmword_1DD063B20;
  *((_OWORD *)this + 1) = xmmword_1DD063B30;
  *((_WORD *)this + 16) = 0;
  return result;
}

{
  double result;

  double result = 0.7;
  *(_OWORD *)this = xmmword_1DD063B20;
  *((_OWORD *)this + 1) = xmmword_1DD063B30;
  *((_WORD *)this + 16) = 0;
  return result;
}

double faiss::PermutationObjective::cost_update(faiss::PermutationObjective *this, const int *a2, int a3, int a4)
{
  double v8 = (**(double (***)(faiss::PermutationObjective *))this)(this);
  std::vector<int>::vector(&v13, *((int *)this + 2));
  begiint n = v13.__begin_;
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      begin[v10] = a2[v10];
      ++v10;
    }
    while (v10 < *((int *)this + 2));
  }
  begin[a3] = a2[a4];
  begin[a4] = a2[a3];
  double v11 = (**(double (***)(faiss::PermutationObjective *))this)(this);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  return v11 - v8;
}

void sub_1DCFF786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer(faiss::SimulatedAnnealingOptimizer *this, faiss::PermutationObjective *a2, const faiss::SimulatedAnnealingParameters *a3)
{
  long long v3 = *(_OWORD *)a3;
  long long v4 = *((_OWORD *)a3 + 1);
  *((void *)this + 5) = *((void *)a3 + 4);
  *((void *)this + 6) = a2;
  *(_OWORD *)((char *)this + 24) = v4;
  *(_OWORD *)((char *)this + 8) = v3;
  *(void *)this = &unk_1F383FA88;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 2);
  *((void *)this + 8) = 0;
  operator new();
}

void sub_1DCFF79E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::SimulatedAnnealingOptimizer::~SimulatedAnnealingOptimizer(faiss::SimulatedAnnealingOptimizer *this)
{
  *(void *)this = &unk_1F383FA88;
  uint64_t v1 = *((void *)this + 9);
  if (v1) {
    MEMORY[0x1E01AF670](v1, 0x1000C407BAC9B3ELL);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F383FA88;
  uint64_t v1 = *((void *)this + 9);
  if (v1) {
    MEMORY[0x1E01AF670](v1, 0x1000C407BAC9B3ELL);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F383FA88;
  uint64_t v1 = *((void *)this + 9);
  if (v1) {
    MEMORY[0x1E01AF670](v1, 0x1000C407BAC9B3ELL);
  }
  JUMPOUT(0x1E01AF670);
}

double faiss::SimulatedAnnealingOptimizer::run_optimization(faiss::SimulatedAnnealingOptimizer *this, int *a2)
{
  if (*((int *)this + 7) < 1) {
    return 1.0e30;
  }
  int v4 = 0;
  double v5 = 1.0e30;
  do
  {
    std::vector<int>::vector(&v22, *((int *)this + 14));
    LODWORD(v6) = *((_DWORD *)this + 14);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      begiint n = v22.__begin_;
      do
      {
        begin[v7] = v7;
        ++v7;
      }
      while (v7 < *((int *)this + 14));
      LODWORD(v6) = *((_DWORD *)this + 14);
    }
    if (*((unsigned char *)this + 41)) {
      BOOL v9 = (int)v6 < 1;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      int v10 = 0;
      uint64_t v11 = 0;
      do
      {
        int v12 = faiss::RandomGenerator::rand_int(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this+ 9), (int)v6 + v10);
        std::vector<int>::pointer v13 = v22.__begin_;
        int v14 = v22.__begin_[v11];
        v22.__begin_[v11] = v22.__begin_[(int)v11 + v12];
        v13[(int)v11++ + v12] = v14;
        uint64_t v6 = *((int *)this + 14);
        --v10;
      }
      while (v11 < v6);
    }
    double v15 = faiss::SimulatedAnnealingOptimizer::optimize(this, v22.__begin_);
    uint64_t v16 = (FILE *)*((void *)this + 8);
    if (v16) {
      fputc(10, v16);
    }
    float v17 = v15;
    double v18 = v17;
    if (*((int *)this + 9) >= 2)
    {
      if (v5 <= v18) {
        uint64_t v19 = "";
      }
      else {
        uint64_t v19 = "keep";
      }
      printf("    optimization run %d: cost=%g %s\n", v4, v17, v19);
    }
    unint64_t v20 = v22.__begin_;
    if (v5 > v18)
    {
      memcpy(a2, v22.__begin_, 4 * *((int *)this + 14));
      double v5 = v18;
    }
    if (v20)
    {
      v22.__end_ = v20;
      operator delete(v20);
    }
    ++v4;
  }
  while (v4 < *((_DWORD *)this + 7));
  return v5;
}

void sub_1DCFF7D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double faiss::SimulatedAnnealingOptimizer::optimize(faiss::SimulatedAnnealingOptimizer *this, int *a2)
{
  double v4 = (***((double (****)(void))this + 6))(*((void *)this + 6));
  *((double *)this + 10) = v4;
  unsigned int v5 = -1;
  do
    ++v5;
  while (*((_DWORD *)this + 14) > 1 << v5);
  if (*((int *)this + 6) >= 1)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    double v9 = *((double *)this + 1);
    int v10 = (FILE **)MEMORY[0x1E4F143D8];
    do
    {
      double v11 = *((double *)this + 2);
      int v12 = *((unsigned __int8 *)this + 40);
      uint64_t v13 = faiss::RandomGenerator::rand_int(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this+ 9), *((_DWORD *)this + 14));
      int v14 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)*((void *)this + 9);
      if (v12)
      {
        uint64_t v15 = (1 << faiss::RandomGenerator::rand_int(v14, v5)) ^ v13;
      }
      else
      {
        unsigned int v16 = faiss::RandomGenerator::rand_int(v14, *((_DWORD *)this + 14) - 1);
        if (v16 == v13) {
          uint64_t v15 = v16 + 1;
        }
        else {
          uint64_t v15 = v16;
        }
      }
      double v9 = v9 * v11;
      double v17 = (*(double (**)(void, int *, uint64_t, uint64_t))(**((void **)this + 6) + 8))(*((void *)this + 6), a2, v13, v15);
      if (v17 < 0.0
        || v9 > faiss::RandomGenerator::rand_float(*((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)this
                                                   + 9)))
      {
        int v18 = a2[(int)v13];
        a2[(int)v13] = a2[(int)v15];
        a2[(int)v15] = v18;
        double v4 = v4 + v17;
        ++v8;
        if (v17 >= 0.0) {
          ++v7;
        }
      }
      int v19 = *((_DWORD *)this + 9);
      if (v19 > 2 || (10000 * (v6 / 0x2710u) == v6 ? (BOOL v20 = v19 == 2) : (BOOL v20 = 0), v20))
      {
        printf("      iteration %d cost %g temp %g n_swap %d (%d hot)     \r", v6, v4, v9, v8, v7);
        fflush(*v10);
      }
      uint64_t v21 = (FILE *)*((void *)this + 8);
      if (v21) {
        fprintf(v21, "%d %g %g %d %d\n", v6, v4, v9, v8, v7);
      }
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 6));
  }
  if (*((int *)this + 9) > 1) {
    putchar(10);
  }
  return v4;
}

long double faiss::ReproduceDistancesObjective::dis_weight(faiss::ReproduceDistancesObjective *this, double a2)
{
  return exp(-(*((double *)this + 2) * a2));
}

double faiss::ReproduceDistancesObjective::get_source_dis(faiss::ReproduceDistancesObjective *this, int a2, int a3)
{
  return *(double *)(*((void *)this + 3) + 8 * (a3 + *((_DWORD *)this + 2) * a2));
}

double faiss::ReproduceDistancesObjective::compute_cost(faiss::ReproduceDistancesObjective *this, const int *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  double v4 = (double *)*((void *)this + 6);
  unsigned int v5 = (double *)*((void *)this + 7);
  uint64_t v6 = 8 * v2;
  double result = 0.0;
  uint64_t v8 = *((void *)this + 3);
  do
  {
    uint64_t v9 = v2;
    int v10 = a2;
    double v11 = v5;
    int v12 = v4;
    do
    {
      double v13 = *v12++;
      double v14 = v13;
      double v15 = *v11++;
      double v16 = v15;
      LODWORD(v15) = *v10++;
      double v17 = *(double *)(v8 + 8 * (a2[v3] * (int)v2 + LODWORD(v15)));
      double result = result + v16 * ((v14 - v17) * (v14 - v17));
      --v9;
    }
    while (v9);
    ++v3;
    double v4 = (double *)((char *)v4 + v6);
    unsigned int v5 = (double *)((char *)v5 + v6);
  }
  while (v3 != v2);
  return result;
}

double faiss::ReproduceDistancesObjective::cost_update(faiss::ReproduceDistancesObjective *this, const int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1) {
    return 0.0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  uint64_t v7 = (int)a3;
  unint64_t v8 = 8 * v4 * (unint64_t)a4;
  unint64_t v9 = 8 * v4 * (unint64_t)a3;
  double result = 0.0;
  do
  {
    if (v5 == v6)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *((void *)this + 3);
      do
      {
        double v13 = *(double *)(*((void *)this + 6) + v9 + 8 * v11);
        double v14 = v13 - *(double *)(v12 + 8 * (a2[v6] * (int)v4 + a2[v11]));
        double v15 = v14 * v14;
        if (a4 == v11) {
          unsigned int v16 = v6;
        }
        else {
          unsigned int v16 = v11;
        }
        if (v6 == v11) {
          unsigned int v16 = a4;
        }
        double v17 = *(double *)(v12 + 8 * (a2[a4] * (int)v4 + a2[v16]));
        double result = result
               - *(double *)(*((void *)this + 7) + v9 + 8 * v11) * v15
               + *(double *)(*((void *)this + 7) + v9 + 8 * v11) * ((v13 - v17) * (v13 - v17));
        ++v11;
      }
      while (v4 != v11);
    }
    else
    {
      uint64_t v18 = *((void *)this + 6);
      if (v5 == a4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *((void *)this + 3);
        uint64_t v21 = v18 + v8;
        do
        {
          double v22 = *(double *)(v21 + 8 * v19);
          double v23 = v22 - *(double *)(v20 + 8 * (a2[a4] * (int)v4 + a2[v19]));
          double v24 = v23 * v23;
          if (a4 == v19) {
            unsigned int v25 = v6;
          }
          else {
            unsigned int v25 = v19;
          }
          if (v6 == v19) {
            unsigned int v25 = a4;
          }
          double v26 = *(double *)(v20 + 8 * (a2[v7] * (int)v4 + a2[v25]));
          double result = result
                 - *(double *)(*((void *)this + 7) + v8 + 8 * v19) * v24
                 + *(double *)(*((void *)this + 7) + v8 + 8 * v19) * ((v22 - v26) * (v22 - v26));
          ++v19;
        }
        while (v4 != v19);
      }
      else
      {
        uint64_t v27 = v5 * v4 + v7;
        double v28 = *(double *)(v18 + 8 * v27);
        uint64_t v29 = *((void *)this + 7);
        double v30 = *(double *)(v29 + 8 * v27);
        LODWORD(v27) = a2[v5] * v4;
        uint64_t v31 = *((void *)this + 3);
        double v32 = *(double *)(v31 + 8 * ((int)v27 + a2[v7]));
        double v33 = *(double *)(v31 + 8 * (a2[a4] + (int)v27));
        uint64_t v34 = v5 * v4 + (int)a4;
        double result = result
               - v30 * ((v28 - v32) * (v28 - v32))
               + v30 * ((v28 - v33) * (v28 - v33))
               - *(double *)(v29 + 8 * v34) * ((*(double *)(v18 + 8 * v34) - v33) * (*(double *)(v18 + 8 * v34) - v33))
               + *(double *)(v29 + 8 * v34) * ((*(double *)(v18 + 8 * v34) - v32) * (*(double *)(v18 + 8 * v34) - v32));
      }
    }
    ++v5;
  }
  while (v5 != v4);
  return result;
}

faiss::ReproduceDistancesObjective *faiss::ReproduceDistancesObjective::ReproduceDistancesObjective(faiss::ReproduceDistancesObjective *this, int a2, double *a3, const double *a4, double a5)
{
  *(void *)this = &unk_1F383FA58;
  *((double *)this + 2) = a5;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = a4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 2) = a2;
  faiss::ReproduceDistancesObjective::set_affine_target_dis(this, a3);
  return this;
}

void sub_1DCFF824C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ReproduceDistancesObjective::set_affine_target_dis(faiss::ReproduceDistancesObjective *this, double *a2)
{
  uint64_t v2 = a2;
  int v4 = *((_DWORD *)this + 2);
  LODWORD(v5) = v4 * v4;
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  if (v4)
  {
    unint64_t v9 = a2;
    uint64_t v10 = (v4 * v4);
    do
    {
      double v11 = *v9++;
      double v8 = v8 + v11;
      double v7 = v7 + v11 * v11;
      --v10;
    }
    while (v10);
  }
  double v12 = (double)v5;
  double v13 = v8 / (double)v5;
  double v14 = sqrt(v7 / (double)v5 - v13 * v13);
  double v15 = 0.0;
  if (v4)
  {
    unsigned int v16 = (double *)*((void *)this + 6);
    uint64_t v17 = (v4 * v4);
    double v6 = 0.0;
    do
    {
      double v18 = *v16++;
      double v15 = v15 + v18;
      double v6 = v6 + v18 * v18;
      --v17;
    }
    while (v17);
  }
  double v19 = v15 / v12;
  double v20 = sqrt(v6 / v12 - v19 * v19);
  printf("map mean %g std %g -> mean %g std %g\n", v13, v14, v15 / v12, v20);
  std::vector<double>::resize((uint64_t)this + 24, (v4 * v4));
  std::vector<double>::resize((uint64_t)this + 56, (v4 * v4));
  if (v4)
  {
    uint64_t v21 = (double *)*((void *)this + 3);
    double v22 = (double *)*((void *)this + 6);
    double v23 = (long double *)*((void *)this + 7);
    if (v5 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v5;
    }
    do
    {
      double v24 = *v2++;
      *v21++ = v19 + (v24 - v13) / v14 * v20;
      double v25 = *v22++;
      *v23++ = exp(-(*((double *)this + 2) * v25));
      --v5;
    }
    while (v5);
  }
}

double faiss::ReproduceDistancesObjective::compute_mean_stdev(faiss::ReproduceDistancesObjective *this, const double *a2, double *a3, double *a4, double *a5)
{
  if (a2)
  {
    double v5 = 0.0;
    double v6 = a2;
    double v7 = 0.0;
    do
    {
      double v8 = *(double *)this;
      this = (faiss::ReproduceDistancesObjective *)((char *)this + 8);
      double v5 = v5 + v8;
      double v7 = v7 + v8 * v8;
      double v6 = (const double *)((char *)v6 - 1);
    }
    while (v6);
  }
  else
  {
    double v7 = 0.0;
    double v5 = 0.0;
  }
  double result = v5 / (double)(unint64_t)a2;
  *a3 = result;
  *a4 = sqrt(v7 / (double)(unint64_t)a2 - result * result);
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

double faiss::PolysemousTraining::PolysemousTraining(faiss::PolysemousTraining *this)
{
  *(_OWORD *)this = xmmword_1DD063B20;
  *((_OWORD *)this + 1) = xmmword_1DD063B30;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)&double result = 1;
  *(void *)((char *)this + 36) = 1;
  *((void *)this + 6) = 0x3FE62E42FEFA39EFLL;
  *((void *)this + 7) = 0x500000000;
  *((void *)this + 8) = 0;
  return result;
}

{
  double result;

  *(_OWORD *)this = xmmword_1DD063B20;
  *((_OWORD *)this + 1) = xmmword_1DD063B30;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)&double result = 1;
  *(void *)((char *)this + 36) = 1;
  *((void *)this + 6) = 0x3FE62E42FEFA39EFLL;
  *((void *)this + 7) = 0x500000000;
  *((void *)this + 8) = 0;
  return result;
}

unint64_t faiss::PolysemousTraining::optimize_reproduce_distances(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v58 = *((void *)a2 + 3);
  uint64_t v4 = *((void *)a2 + 5);
  int v59 = *((_DWORD *)a2 + 4);
  unint64_t result = faiss::PolysemousTraining::memory_usage_per_thread(this, a2);
  unint64_t v6 = *((void *)this + 7);
  uint64_t v57 = this;
  if (result >= v6)
  {
    unint64_t v51 = result;
    memset(__str, 0, 24);
    int v52 = snprintf(0, 0, "Error: '%s' failed: Polysemous training will use %zd bytes per thread, while the max is set to %zd", "mem1 < max_memory", result, v6);
    std::string::resize(__str, v52 + 1, 0);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v53 = __str;
    }
    else {
      float v53 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str[0].__r_.__value_.__l.__size_;
    }
    snprintf((char *)v53, size, "Error: '%s' failed: Polysemous training will use %zd bytes per thread, while the max is set to %zd", "mem1 < max_memory", v51, *((void *)this + 7));
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, __str, "void faiss::PolysemousTraining::optimize_reproduce_distances(ProductQuantizer &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 789);
  }
  if (*((void *)a2 + 1))
  {
    uint64_t v7 = v4;
    __int n = (int)v4;
    unsigned int v8 = 1 << v59 << v59;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    unint64_t v60 = (1 << v59 << v59);
    double v10 = (double)(int)v8;
    uint64_t v61 = v9;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    float v73 = 0;
    uint64_t v11 = *((void *)a2 + 13);
    if ((int)v4 >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = 0;
        do
        {
          double v14 = faiss::fvec_L2sqr((faiss *)(v11 + 4 * v12 * (int)v58), (const float *)(v11 + 4 * v13 * (int)v58), (int)v58);
          double v15 = v72;
          if (v72 >= v73)
          {
            uint64_t v17 = (double *)v71;
            uint64_t v18 = ((char *)v72 - (unsigned char *)v71) >> 3;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = (char *)v73 - (unsigned char *)v71;
            if (((char *)v73 - (unsigned char *)v71) >> 2 > v19) {
              unint64_t v19 = v20 >> 2;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              double v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v73, v21);
              uint64_t v17 = (double *)v71;
              double v15 = v72;
            }
            else
            {
              double v22 = 0;
            }
            double v23 = (double *)&v22[8 * v18];
            *double v23 = v14;
            unsigned int v16 = v23 + 1;
            while (v15 != v17)
            {
              uint64_t v24 = *((void *)v15-- - 1);
              *((void *)v23-- - 1) = v24;
            }
            uint64_t v71 = v23;
            uint64_t v72 = v16;
            float v73 = (double *)&v22[8 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *uint64_t v72 = v14;
            unsigned int v16 = v15 + 1;
          }
          uint64_t v72 = v16;
          ++v13;
        }
        while (v13 != v7);
        ++v12;
      }
      while (v12 != v7);
    }
    std::vector<int>::vector(&v70, __n);
    double v25 = *((double *)v57 + 6);
    uint64_t v63 = &unk_1F383EC28;
    double v66 = v25;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    int v65 = v59;
    int v64 = 1 << v59;
    double v26 = (double *)v71;
    if (v60 == ((char *)v72 - (unsigned char *)v71) >> 3)
    {
      double v27 = 0.0;
      uint64_t v28 = v61;
      double v29 = 0.0;
      do
      {
        double v30 = *v26++;
        double v27 = v27 + v30;
        double v29 = v29 + v30 * v30;
        --v28;
      }
      while (v28);
      std::vector<double>::resize((uint64_t)&v67, v60);
      uint64_t v31 = 0;
      double v32 = v27 / v10;
      double v33 = sqrt(v29 / v10 - v32 * v32);
      uint64_t v34 = (double *)v69;
      while (1)
      {
        double v35 = (double)(v65 / 2) + (*((double *)v71 + v31) - v32) / v33 * sqrt((double)(v65 / 4));
        *(double *)(v67 + 8 * v31) = v35;
        double v36 = exp(-(v66 * v35));
        double v37 = v36;
        if ((unint64_t)v34 >= *((void *)&v69 + 1))
        {
          uint64_t v39 = (double *)*((void *)&v68 + 1);
          uint64_t v40 = ((uint64_t)v34 - *((void *)&v68 + 1)) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = *((void *)&v69 + 1) - *((void *)&v68 + 1);
          if ((uint64_t)(*((void *)&v69 + 1) - *((void *)&v68 + 1)) >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v69 + 8, v43);
            uint64_t v39 = (double *)*((void *)&v68 + 1);
            uint64_t v34 = (double *)v69;
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v45 = (double *)&v44[8 * v40];
          *uint64_t v45 = v37;
          uint64_t v38 = v45 + 1;
          while (v34 != v39)
          {
            uint64_t v46 = *((void *)v34-- - 1);
            *((void *)v45-- - 1) = v46;
          }
          *((void *)&v68 + 1) = v45;
          *(void *)&long long v69 = v38;
          *((void *)&v69 + 1) = &v44[8 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *uint64_t v34 = v36;
          uint64_t v38 = v34 + 1;
        }
        *(void *)&long long v69 = v38;
        ++v31;
        uint64_t v34 = v38;
        if (v31 == v61) {
          faiss::SimulatedAnnealingOptimizer::SimulatedAnnealingOptimizer((faiss::SimulatedAnnealingOptimizer *)v62, (faiss::PermutationObjective *)&v63, v57);
        }
      }
    }
    memset(__str, 0, 24);
    int v47 = snprintf(0, 0, "Error: '%s' failed", "dis_table.size() == n * n");
    std::string::resize(__str, v47 + 1, 0);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = __str;
    }
    else {
      uint64_t v48 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v49 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v49 = __str[0].__r_.__value_.__l.__size_;
    }
    snprintf((char *)v48, v49, "Error: '%s' failed", "dis_table.size() == n * n");
    uint64_t v50 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v50, __str, "faiss::(anonymous namespace)::ReproduceWithHammingObjective::ReproduceWithHammingObjective(int, const std::vector<double> &, double)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 276);
  }
  return result;
}

void sub_1DCFF8DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  __cxa_free_exception(v66);
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::PolysemousTraining::memory_usage_per_thread(faiss::PolysemousTraining *this, const faiss::ProductQuantizer *a2)
{
  uint64_t result = *((unsigned int *)this + 9);
  if (result)
  {
    uint64_t v3 = *((void *)a2 + 5);
    if (result == 2)
    {
      return 4 * v3 * v3 * v3;
    }
    else
    {
      if (result != 1)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v5, "Invalid optmization type");
        faiss::FaissException::FaissException(exception, v5, "size_t faiss::PolysemousTraining::memory_usage_per_thread(const ProductQuantizer &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 985);
      }
      return 24 * v3 * v3;
    }
  }
  return result;
}

void sub_1DCFF8FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::anonymous namespace'::ReproduceWithHammingObjective::~ReproduceWithHammingObjective(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this)
{
  *(void *)this = &unk_1F383EC28;
  unint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x1E01AF670);
}

void faiss::PolysemousTraining::optimize_ranking(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2, unint64_t a3, const float *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((void *)a2 + 3);
  std::vector<unsigned char>::vector(v29, *((void *)a2 + 4) * a3);
  faiss::ProductQuantizer::compute_codes(a2, a4, v29[0], a3);
  if (*((void *)a2 + 2) != 8)
  {
    memset(__p, 0, 24);
    int v20 = snprintf(0, 0, "Error: '%s' failed", "pq.nbits == 8");
    std::string::resize(__p, v20 + 1, 0);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p[0].__r_.__value_.__l.__size_;
    }
    snprintf((char *)v21, size, "Error: '%s' failed", "pq.nbits == 8");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, __p, "void faiss::PolysemousTraining::optimize_ranking(ProductQuantizer &, size_t, const float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/PolysemousTraining.cpp", 859);
  }
  if (!a3) {
    faiss::ProductQuantizer::compute_sdc_table(a2);
  }
  double v25 = a4;
  if (*((void *)a2 + 1))
  {
    uint64_t v26 = a3 - (a3 >> 2);
    memset(&v28, 0, sizeof(v28));
    memset(__dst, 0, sizeof(__dst));
    if (a3)
    {
      std::vector<float>::vector(__p, (int)v7 * a3);
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        memcpy((void *)(__p[0].__r_.__value_.__r.__words[0] + v8), &v25[*(void *)a2 * v9++], 4 * (int)v7);
        v8 += 4 * (int)v7;
      }
      while (a3 != v9);
      std::vector<unsigned int>::resize(&v28, a3);
      uint64_t v10 = *((void *)a2 + 4);
      uint64_t v11 = v29[0];
      unint64_t v12 = a3;
      begiint n = v28.__begin_;
      do
      {
        *begin++ = *v11;
        v11 += v10;
        --v12;
      }
      while (v12);
      double v14 = (faiss *)__p[0].__r_.__value_.__r.__words[0];
      std::vector<float>::resize((uint64_t)__dst, v26 * (a3 >> 2));
      faiss::pairwise_L2sqr((int)v7, a3 >> 2, v14, v26, (float *)v14 + (int)v7 * (a3 >> 2), (float *)__dst[0], (float *)0xFFFFFFFFFFFFFFFFLL, -1, -1, v24);
      double v15 = (faiss *)__p[0].__r_.__value_.__r.__words[0];
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v16 = *((void *)a2 + 5);
      std::vector<unsigned int>::resize(&v28, 2 * v16);
      if (v16)
      {
        uint64_t v17 = 0;
        std::vector<int>::pointer v18 = v28.__begin_;
        unint64_t v19 = &v28.__begin_[v16];
        do
        {
          v19[v17] = v17;
          v18[v17] = v17;
          ++v17;
        }
        while (v16 != v17);
      }
      std::vector<float>::resize((uint64_t)__dst, v16 * v16);
      double v15 = (faiss *)memcpy(__dst[0], *((const void **)a2 + 16), 4 * v16 * v16);
    }
    faiss::getmillisecs(v15);
    operator new();
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_1DCFF9760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  __cxa_free_exception(v55);
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void faiss::PolysemousTraining::optimize_pq_for_hamming(faiss::PolysemousTraining *this, faiss::ProductQuantizer *a2, unint64_t a3, const float *a4)
{
  int v5 = *((_DWORD *)this + 9);
  if (v5)
  {
    if (v5 == 1) {
      faiss::PolysemousTraining::optimize_reproduce_distances(this, a2);
    }
    else {
      faiss::PolysemousTraining::optimize_ranking(this, a2, a3, a4);
    }
  }
  faiss::ProductQuantizer::compute_sdc_table(a2);
}

void faiss::ReproduceDistancesObjective::~ReproduceDistancesObjective(faiss::ReproduceDistancesObjective *this)
{
  faiss::ReproduceDistancesObjective::~ReproduceDistancesObjective(this);
  JUMPOUT(0x1E01AF670);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F383FA58;
  std::vector<int>::size_type v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

double faiss::anonymous namespace'::ReproduceWithHammingObjective::compute_cost(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this, const int *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (double *)*((void *)this + 3);
  int v5 = (double *)*((void *)this + 6);
  uint64_t v6 = 8 * v2;
  double result = 0.0;
  do
  {
    uint64_t v8 = *((unsigned int *)this + 2);
    uint64_t v9 = a2;
    uint64_t v10 = v5;
    uint64_t v11 = v4;
    do
    {
      double v12 = *v11++;
      double v13 = v12;
      double v14 = *v10++;
      double v15 = v14;
      LODWORD(v14) = *v9++;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)(LODWORD(v14) ^ a2[v3]));
      v16.i16[0] = vaddlv_u8(v16);
      double result = result + v15 * ((v13 - (double)v16.i32[0]) * (v13 - (double)v16.i32[0]));
      --v8;
    }
    while (v8);
    ++v3;
    uint64_t v4 = (double *)((char *)v4 + v6);
    int v5 = (double *)((char *)v5 + v6);
  }
  while (v3 != v2);
  return result;
}

double faiss::anonymous namespace'::ReproduceWithHammingObjective::cost_update(faiss::_anonymous_namespace_::ReproduceWithHammingObjective *this, const int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1) {
    return 0.0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = (int)a3;
  uint64_t v9 = (int)a4;
  unint64_t v10 = 8 * v4 * (unint64_t)a4;
  unint64_t v11 = 8 * v4 * (unint64_t)a3;
  double result = 0.0;
  do
  {
    if (v5 == v7)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        double v14 = *(double *)(*((void *)this + 3) + v11 + 8 * i);
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[i] ^ a2[v7]));
        v15.i16[0] = vaddlv_u8(v15);
        double v16 = (v14 - (double)v15.i32[0]) * (v14 - (double)v15.i32[0]);
        if (v6 == i) {
          int v17 = v7;
        }
        else {
          int v17 = i;
        }
        if (v7 == i) {
          int v17 = v6;
        }
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[v17] ^ a2[v9]));
        v18.i16[0] = vaddlv_u8(v18);
        double result = result
               - *(double *)(*((void *)this + 6) + v11 + 8 * i) * v16
               + *(double *)(*((void *)this + 6) + v11 + 8 * i)
               * ((v14 - (double)v18.i32[0])
                * (v14 - (double)v18.i32[0]));
      }
    }
    else if (v5 == v6)
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        double v20 = *(double *)(*((void *)this + 3) + v10 + 8 * j);
        uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[j] ^ a2[v6]));
        v21.i16[0] = vaddlv_u8(v21);
        double v22 = (v20 - (double)v21.i32[0]) * (v20 - (double)v21.i32[0]);
        if (v6 == j) {
          int v23 = v7;
        }
        else {
          int v23 = j;
        }
        if (v7 == j) {
          int v23 = v6;
        }
        uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)(a2[v23] ^ a2[v8]));
        v24.i16[0] = vaddlv_u8(v24);
        double result = result
               - *(double *)(*((void *)this + 6) + v10 + 8 * j) * v22
               + *(double *)(*((void *)this + 6) + v10 + 8 * j)
               * ((v20 - (double)v24.i32[0])
                * (v20 - (double)v24.i32[0]));
      }
    }
    else
    {
      uint64_t v25 = v5 * v4 + v8;
      uint64_t v26 = *((void *)this + 3);
      double v27 = *(double *)(v26 + 8 * v25);
      uint64_t v28 = *((void *)this + 6);
      double v29 = *(double *)(v28 + 8 * v25);
      LODWORD(v25) = a2[v5];
      uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(a2[v8] ^ v25));
      v30.i16[0] = vaddlv_u8(v30);
      double v31 = (double)v30.i32[0];
      uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(a2[v9] ^ v25));
      v32.i16[0] = vaddlv_u8(v32);
      double v33 = (double)v32.i32[0];
      uint64_t v34 = v5 * v4 + v9;
      double result = result
             - v29 * ((v27 - v31) * (v27 - v31))
             + v29 * ((v27 - v33) * (v27 - v33))
             - *(double *)(v28 + 8 * v34) * ((*(double *)(v26 + 8 * v34) - v33) * (*(double *)(v26 + 8 * v34) - v33))
             + *(double *)(v28 + 8 * v34) * ((*(double *)(v26 + 8 * v34) - v31) * (*(double *)(v26 + 8 * v34) - v31));
    }
    ++v5;
  }
  while (v5 != v4);
  return result;
}

faiss::RankingScore2 *faiss::RankingScore2::RankingScore2(faiss::RankingScore2 *this, int a2, int a3, int a4, const unsigned int *a5, const unsigned int *a6, const float *a7)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_1F383ED58;
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
  *((_DWORD *)this + 12) = a4;
  *((void *)this + 7) = a5;
  *((void *)this + 8) = a6;
  *((void *)this + 9) = a7;
  *((_DWORD *)this + 2) = 1 << a2;
  *((_DWORD *)this + 3) = 1 << a2;
  std::vector<float>::resize((uint64_t)this + 16, 1 << a2 << a2 << a2);
  faiss::RankingScore2::init_n_gt(this);
  return this;
}

void sub_1DCFF9D54(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void faiss::RankingScore2::init_n_gt(faiss::RankingScore2 *this)
{
  LODWORD(v1) = *((_DWORD *)this + 11);
  if ((int)v1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v5 = *((void *)this + 8);
      uint64_t v4 = *((void *)this + 9);
      int v6 = *((_DWORD *)this + 12);
      int v7 = *(_DWORD *)(*((void *)this + 7) + 4 * v3);
      int v8 = *((_DWORD *)this + 3);
      uint64_t v9 = *((void *)this + 2);
      printf("init gt for q=%d/%d    \r", v3, v1);
      fflush((FILE *)*MEMORY[0x1E4F143D8]);
      std::vector<int>::vector(&v46, *((int *)this + 12));
      begiint n = v46.__begin_;
      std::vector<std::vector<int>>::vector(v45, *((int *)this + 3));
      int v11 = *((_DWORD *)this + 12);
      if (v11 < 1)
      {
        unint64_t v14 = v11;
      }
      else
      {
        uint64_t v12 = 0;
        do
        {
          begin[v12] = v12;
          ++v12;
          int v13 = *((_DWORD *)this + 12);
        }
        while (v12 < v13);
        unint64_t v14 = v13;
        int v11 = *((_DWORD *)this + 12);
      }
      uint64_t v42 = v9;
      int v43 = v8;
      int v44 = v7;
      uint8x8_t v15 = &begin[v14];
      uint64_t v47 = v4 + 4 * v6 * (int)v3;
      unint64_t v16 = 126 - 2 * __clz(v14);
      if (v11) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>((uint64_t)begin, v15, &v47, v17, 1);
      if (*((int *)this + 12) >= 1)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = v45[0] + 24 * *(unsigned int *)(v5 + 4 * begin[v18]);
          uint8x8_t v21 = (_DWORD **)(v19 + 8);
          double v20 = *(_DWORD **)(v19 + 8);
          int v23 = (void *)(v19 + 16);
          unint64_t v22 = *(void *)(v19 + 16);
          if ((unint64_t)v20 >= v22)
          {
            uint64_t v25 = *(_DWORD **)v19;
            uint64_t v26 = ((uint64_t)v20 - *(void *)v19) >> 2;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 1 > v27) {
              unint64_t v27 = v28 >> 1;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              uint8x8_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v23, v29);
              double v20 = *v21;
              uint64_t v25 = *(_DWORD **)v19;
            }
            else
            {
              uint8x8_t v30 = 0;
            }
            double v31 = &v30[4 * v26];
            *(_DWORD *)double v31 = v18;
            uint8x8_t v24 = v31 + 4;
            while (v20 != v25)
            {
              int v32 = *--v20;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            *(void *)uint64_t v19 = v31;
            std::string *v21 = v24;
            *int v23 = &v30[4 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *double v20 = v18;
            uint8x8_t v24 = v20 + 1;
          }
          std::string *v21 = v24;
          ++v18;
        }
        while (v18 < *((int *)this + 12));
      }
      int v33 = *((_DWORD *)this + 3);
      if (v33 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v42 + 4 * (v43 * v44 * v43);
        do
        {
          if (v33 <= 0)
          {
            uint64_t v41 = v33;
          }
          else
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v45[0] + 24 * v34);
            do
            {
              double v39 = faiss::RankingScore2::accum_gt_weight_diff((uint64_t)this, v38, (uint64_t *)(v45[0] + v36));
              int v33 = *((_DWORD *)this + 3);
              uint64_t v40 = v37 + (int)v34 * v33;
              *(float *)&double v39 = v39 + *(float *)(v35 + 4 * v40);
              *(_DWORD *)(v35 + 4 * v40) = LODWORD(v39);
              ++v37;
              v36 += 24;
            }
            while (v37 < v33);
            uint64_t v41 = v33;
          }
          ++v34;
        }
        while (v34 < v41);
      }
      uint64_t v48 = (void **)v45;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v48);
      if (v46.__begin_)
      {
        v46.__end_ = v46.__begin_;
        operator delete(v46.__begin_);
      }
      ++v3;
      uint64_t v1 = *((int *)this + 11);
    }
    while (v3 < v1);
  }
}

void sub_1DCFFA054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double faiss::Score3Computer<float,double>::compute_cost(uint64_t a1, uint64_t a2)
{
  return -faiss::Score3Computer<float,double>::compute(a1, a2);
}

double faiss::Score3Computer<float,double>::cost_update(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  return -faiss::Score3Computer<float,double>::compute_update(a1, a2, a3, a4);
}

void faiss::RankingScore2::~RankingScore2(faiss::RankingScore2 *this)
{
  *(void *)this = &unk_1F383EDB0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383EDB0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::Score3Computer<float,double>::~Score3Computer(void *a1)
{
  *a1 = &unk_1F383EDB0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

double faiss::RankingScore2::accum_gt_weight_diff(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v3 = a2[1] - *a2;
  if ((int)(v3 >> 2) < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  uint64_t v6 = *a3;
  unint64_t v7 = (a3[1] - *a3) >> 2;
  uint64_t v8 = (v3 >> 2);
  double result = 0.0;
  do
  {
    int v10 = *(_DWORD *)(*a2 + 4 * v4);
    if ((int)v5 < (int)v7)
    {
      int v11 = (int *)(v6 + 4 * (int)v5);
      uint64_t v12 = (int)v7 - (uint64_t)(int)v5;
      while (1)
      {
        int v13 = *v11++;
        if (v10 < v13) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        if (!--v12)
        {
          uint64_t v5 = (a3[1] - *a3) >> 2;
          break;
        }
      }
    }
    double v14 = 0.0;
    if (v7 > (int)v5)
    {
      unint64_t v15 = (int)v5;
      do
        double v14 = v14 + 1.0 / (double)(*(_DWORD *)(v6 + 4 * v15++) - v10 + 1);
      while (v7 > v15);
    }
    double result = result + 1.0 / (double)(v10 + 1) * v14;
    ++v4;
  }
  while (v4 != v8);
  return result;
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DCFFA350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int v10 = (int *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (*(float *)(*a3 + 4 * v22) < *(float *)(*a3 + 4 * v23))
          {
            *int v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *int v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(*a3 + 4 * *(v11 - 1)) >= *(float *)(*a3 + 4 * *v11))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(v11, a2, a3);
      int v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, v19, a3);
    int v11 = v19 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,false>(v10, v19, a3, -v13, a5 & 1);
      int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(v11, a2, a3);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *a3;
      char v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v3;
        float v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10) {
              break;
            }
            uint64_t v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 4 * v8))
            {
              int v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          int v11 = result;
LABEL_10:
          *int v11 = v7;
        }
        uint64_t v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        double result = v3;
        float v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          do
          {
            *uint64_t v3 = v6;
            uint64_t v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 4 * v6));
          *uint64_t v3 = v5;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a4;
  float v7 = *(float *)(*a4 + 4 * v4);
  float v8 = *(float *)(*a4 + 4 * v5);
  uint64_t v9 = *a3;
  float v10 = *(float *)(*a4 + 4 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v13 = *a3;
    if (*(float *)(v6 + 4 * v13) >= v8) {
      return 1;
    }
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v12)) {
      return 1;
    }
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  float v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    float v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      uint64_t v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    int v10 = *v6;
    int v11 = *a2;
    do
    {
      int *v6 = v11;
      *a2 = v10;
      do
      {
        uint64_t v12 = v6[1];
        ++v6;
        int v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        uint64_t v13 = *--a2;
        int v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::IndirectSort &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  float v6 = *(float *)(*a3 + 4 * v4);
  do
    uint64_t v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  float v8 = &a1[v3];
  uint64_t v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      uint64_t v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      uint64_t v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    int v12 = *a2;
    int v13 = v7;
    uint64_t v14 = v8;
    unint64_t v15 = a2;
    do
    {
      int *v14 = v12;
      *unint64_t v15 = v13;
      do
      {
        uint64_t v16 = v14[1];
        ++v14;
        int v13 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        uint64_t v17 = *--v15;
        int v12 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    uint64_t v9 = v14 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *uint64_t v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          char v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      *char v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          int *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      uint64_t v18 = a2 - 1;
      do
      {
        int v19 = *a1;
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *uint64_t v20 = v19;
        }
        else
        {
          *uint64_t v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (int *)(result + 4 * (v5 + 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          uint64_t v13 = v7;
          *a4 = v10;
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v15;
          }
          uint64_t v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        *uint64_t v13 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      uint64_t v3 = v9;
    }
    *uint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::IndirectSort &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(int *)(a2 - 4);
    uint64_t v7 = (_DWORD *)(a2 - 4);
    int v8 = v9;
    uint64_t v10 = *a3;
    float v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        float v12 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      *float v12 = v8;
    }
  }
  return result;
}

double faiss::Score3Computer<float,double>::compute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = 4 * (v2 - 1);
  double result = 0.0;
  do
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a2 + 4 * v3);
    uint64_t v9 = v4;
    do
    {
      uint64_t v10 = 0;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_DWORD *)(a2 + 4 * v7) ^ v8));
      v11.i16[0] = vaddlv_u8(v11);
      unsigned int v12 = v11.i32[0];
      do
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_DWORD *)(a2 + v10) ^ v8));
        v13.i16[0] = vaddlv_u8(v13);
        if (v12 < v13.i32[0]) {
          double result = result + *(float *)(v9 + v10);
        }
        v10 += 4;
      }
      while (4 * v2 != v10);
      v9 += v5 + 4;
      ++v7;
    }
    while (v7 != v2);
    v4 += (v5 + 8) * (v2 - 1) + 4;
    ++v3;
  }
  while (v3 != v2);
  return result;
}

double faiss::Score3Computer<float,double>::compute_update(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  if (a3 == a4) {
    faiss::Score3Computer<float,double>::compute_update();
  }
  if ((int)a3 >= (int)a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = a3;
  }
  if ((int)a3 <= (int)a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = a3;
  }
  if (*(int *)(a1 + 12) < 1) {
    return 0.0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(float **)(a1 + 16);
  double v10 = 0.0;
  do
  {
    int v11 = a2[v8];
    if (v6 == v8) {
      int v12 = v5;
    }
    else {
      int v12 = v8;
    }
    if (v5 == v8) {
      int v12 = v6;
    }
    unsigned int v13 = a2[v12];
    double v10 = v10 + faiss::Score3Computer<float,double>::update_i_cross(a1, a2, v5, v6, a2[v8], v13, v9);
    if (v13 != v11) {
      double v10 = v10 + faiss::Score3Computer<float,double>::update_i_plane(a1, (uint64_t)a2, v5, v6, v11, v13, (uint64_t)v9);
    }
    uint64_t v14 = *(int *)(a1 + 12);
    v9 += (v14 * v14);
    ++v8;
  }
  while (v8 < v14);
  return v10;
}

double faiss::Score3Computer<float,double>::update_i_cross(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, float *a7)
{
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1) {
    return 0.0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a4;
  uint64_t v16 = (int)a3;
  int8x8_t v17 = (int8x8_t)vdup_n_s32(a6);
  uint64_t v18 = (int)a4;
  int8x8_t v19 = (int8x8_t)vdup_n_s32(a5);
  double v20 = 0.0;
  float64x2_t v21 = 0uLL;
  uint64_t v22 = a3;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  do
  {
    int v23 = a2[v14];
    if (v15 == v14) {
      int v24 = v22;
    }
    else {
      int v24 = v14;
    }
    if (v22 == v14) {
      int v24 = v15;
    }
    int v25 = a2[v24];
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(v25 ^ a6));
    v26.i16[0] = vaddlv_u8(v26);
    unsigned int v27 = v26.i32[0];
    uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)(int)(v23 ^ a5));
    v28.i16[0] = vaddlv_u8(v28);
    v29.i32[0] = a2[v18];
    v29.i32[1] = a2[v16];
    unsigned int v30 = v28.i32[0];
    int8x8_t v31 = veor_s8((int8x8_t)__PAIR64__(v29.u32[0], v29.u32[1]), v17);
    v32.i64[0] = v31.i32[0];
    v32.i64[1] = v31.i32[1];
    uint32x2_t v33 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v32))))), (uint32x2_t)vdup_n_s32(v27));
    v32.i64[0] = v33.i32[0];
    v32.i64[1] = v33.i32[1];
    v34.f32[0] = a7[v18];
    v34.f32[1] = a7[v16];
    float64x2_t v35 = vcvtq_f64_f32(v34);
    float64x2_t v36 = (float64x2_t)vandq_s8((int8x16_t)vaddq_f64(v35, v21), v32);
    int8x8_t v37 = veor_s8(v29, v19);
    v32.i64[0] = v37.i32[0];
    v32.i64[1] = v37.i32[1];
    uint32x2_t v38 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v32))))), (uint32x2_t)vdup_n_s32(v30));
    v32.i64[0] = v38.i32[0];
    v32.i64[1] = v38.i32[1];
    float64x2_t v39 = vsubq_f64(v36, (float64x2_t)vandq_s8((int8x16_t)v35, v32));
    double v20 = v39.f64[0] + v20 + v39.f64[1];
    if (v25 != v23)
    {
      double updated = faiss::Score3Computer<float,double>::update_j_line(a1, a2, a3, a4, a5, a6, v23, v25, a7);
      uint64_t v22 = v42;
      uint64_t v15 = v43;
      float64x2_t v21 = 0uLL;
      double v20 = v20 + updated;
      int v7 = *(_DWORD *)(a1 + 12);
    }
    a7 += v7;
    ++v14;
  }
  while (v14 < v7);
  return v20;
}

double faiss::Score3Computer<float,double>::update_i_plane(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if ((int)v7 < 1) {
    return 0.0;
  }
  uint64_t v8 = 0;
  v9.i64[0] = a5;
  v9.i64[1] = a6;
  int8x16_t v10 = v9;
  uint64_t v11 = 4 * v7;
  double result = 0.0;
  do
  {
    if (v8 != a3 && v8 != a4)
    {
      uint64_t v13 = 0;
      uint32x2_t v14 = (uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8((int8x16_t)vdupq_n_s64(*(int *)(a2 + 4 * v8)), v10))))));
      do
      {
        if (4 * a3 != v13 && 4 * a4 != v13)
        {
          double v15 = *(float *)(a7 + v13);
          uint32x2_t v16 = vcgt_u32((uint32x2_t)vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8((int8x16_t)vdupq_n_s64(*(int *)(a2 + v13)), v10)))))), v14);
          double v17 = -0.0;
          if (v16.i8[4]) {
            double v17 = *(float *)(a7 + v13);
          }
          double v18 = result + v17;
          if ((v16.i8[0] & 1) == 0) {
            double v15 = 0.0;
          }
          double result = v18 - v15;
        }
        v13 += 4;
      }
      while (v11 != v13);
    }
    ++v8;
    a7 += v11;
  }
  while (v8 != v7);
  return result;
}

double faiss::Score3Computer<float,double>::update_j_line(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, int a8, float *a9)
{
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  if ((int)v9 < 1) {
    return 0.0;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(a8 ^ a6));
  v11.i16[0] = vaddlv_u8(v11);
  unsigned int v12 = v11.i32[0];
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)(a7 ^ a5));
  v13.i16[0] = vaddlv_u8(v13);
  unsigned int v14 = v13.i32[0];
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  double result = 0.0;
  do
  {
    if (v16 && v15)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ a6));
      v18.i16[0] = vaddlv_u8(v18);
      double v19 = *a9;
      BOOL v20 = v12 >= v18.i32[0];
      double v21 = -0.0;
      if (!v20) {
        double v21 = *a9;
      }
      double v22 = result + v21;
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ a5));
      v23.i16[0] = vaddlv_u8(v23);
      if (v14 >= v23.i32[0]) {
        double v19 = 0.0;
      }
      double result = v22 - v19;
    }
    --v16;
    ++a9;
    ++a2;
    --v15;
    --v9;
  }
  while (v9);
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    double v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DCFFB8D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begiint n = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begiint n = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    double v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void faiss::Score3Computer<float,double>::compute_update()
{
  __assert_rtn("compute_update", "PolysemousTraining.cpp", 485, "iw != jw");
}

faiss::ProductQuantizer *faiss::ProductQuantizer::ProductQuantizer(faiss::ProductQuantizer *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  faiss::ClusteringParameters::ClusteringParameters((faiss::ProductQuantizer *)((char *)this + 56));
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  faiss::ProductQuantizer::set_derived_values(this);
  return this;
}

void sub_1DCFFBACC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[16];
  if (v3)
  {
    v1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[13];
  if (v4)
  {
    v1[14] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void faiss::ProductQuantizer::set_derived_values(faiss::ProductQuantizer *this)
{
  uint64_t v1 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if (*(void *)this % v2)
  {
    memset(&v10, 0, sizeof(v10));
    int v6 = snprintf(0, 0, "Error: '%s' failed: The dimension of the vector (d) should be a multiple of the number of subquantizers (M)", "d % M == 0");
    std::string::resize(&v10, v6 + 1, 0);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v10;
    }
    else {
      uint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v10.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v7, size, "Error: '%s' failed: The dimension of the vector (d) should be a multiple of the number of subquantizers (M)", "d % M == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v10, "void faiss::ProductQuantizer::set_derived_values()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 186);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 3) = *(void *)this / v2;
  *((void *)this + 4) = (v4 * v2 + 7) >> 3;
  uint64_t v5 = 1 << v4;
  *((void *)this + 5) = v5;
  std::vector<float>::resize((uint64_t)this + 104, v1 * v5);
  *((unsigned char *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
}

void sub_1DCFFBC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

faiss::ProductQuantizer *faiss::ProductQuantizer::ProductQuantizer(faiss::ProductQuantizer *this)
{
  return faiss::ProductQuantizer::ProductQuantizer(this, 0, 1, 0);
}

{
  return faiss::ProductQuantizer::ProductQuantizer(this, 0, 1, 0);
}

void *faiss::ProductQuantizer::set_params(faiss::ProductQuantizer *this, const float *a2, int a3)
{
  uint64_t v3 = *((void *)this + 3) * *((void *)this + 5);
  return memcpy((void *)(*((void *)this + 13) + 4 * v3 * a3), a2, 4 * v3);
}

void faiss::ProductQuantizer::train(faiss::ProductQuantizer *this, int a2, const float *a3)
{
  int v4 = *((_DWORD *)this + 13);
  if ((v4 - 3) < 2)
  {
    unint64_t v5 = *((void *)this + 3);
    if (v5 < *((void *)this + 2)) {
      printf("cannot train hypercube: nbits=%zd > log2(d=%zd)\n", *((void *)this + 2), v5);
    }
LABEL_16:
    operator new[]();
  }
  if (v4 != 2) {
    goto LABEL_16;
  }
  faiss::Clustering::Clustering((faiss::Clustering *)&v14, *((_DWORD *)this + 6), *((_DWORD *)this + 10), (faiss::ProductQuantizer *)((char *)this + 56));
  if (*((unsigned char *)this + 48))
  {
    char v15 = 1;
    puts("Training all PQ slices at once");
  }
  faiss::IndexFlat::IndexFlat((uint64_t)v11, *((void *)this + 3), 1);
  v11[0] = &unk_1F383E438;
  if (*((void *)this + 12)) {
    int v6 = (faiss::Index *)*((void *)this + 12);
  }
  else {
    int v6 = (faiss::Index *)v11;
  }
  faiss::Clustering::train((faiss::Clustering *)&v14, *((void *)this + 1) * a2, a3, v6, 0);
  if (*((void *)this + 1))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)this + 3) * *((void *)this + 5);
      memcpy((void *)(*((void *)this + 13) + 4 * v8 * v7++), __src, 4 * v8);
    }
    while (*((void *)this + 1) > v7);
  }
  v11[0] = &unk_1F383FD80;
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
  faiss::Index::~Index((faiss::Index *)v11);
  faiss::Clustering::~Clustering((faiss::Clustering *)&v14);
}

void sub_1DCFFC310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void faiss::IndexFlatL2::~IndexFlatL2(faiss::IndexFlatL2 *this)
{
  *(void *)this = &unk_1F383FD80;
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383FD80;
  unint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::ProductQuantizer::compute_code(uint64_t this, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  if (v3 == 16)
  {
    faiss::compute_code<faiss::PQEncoder16>(this, a2, a3);
  }
  else if (v3 == 8)
  {
    faiss::compute_code<faiss::PQEncoder8>(this, a2, a3);
  }
  else
  {
    faiss::compute_code<faiss::PQEncoderGeneric>((void *)this, a2, a3);
  }
}

void faiss::compute_code<faiss::PQEncoder8>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  std::vector<float>::vector(__p, *(void *)(a1 + 40));
  if (*(_DWORD *)(a1 + 16) != 8) {
    __assert_rtn("PQEncoder8", "ProductQuantizer-inl.h", 47, "8 == nbits");
  }
  if (*(void *)(a1 + 8))
  {
    unint64_t v6 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * *(void *)(a1 + 24) * v6), (const float *)(*(void *)(a1 + 104) + 4 * *(void *)(a1 + 24) * v6 * *(void *)(a1 + 40)), *(void *)(a1 + 24), *(void *)(a1 + 40));
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7)
      {
        uint64_t v8 = 0;
        char v9 = 0;
        float v10 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v8) < v10)
          {
            float v10 = *((float *)__p[0] + v8);
            char v9 = v8;
          }
          ++v8;
        }
        while (v7 != v8);
      }
      else
      {
        char v9 = 0;
      }
      *a3++ = v9;
      ++v6;
    }
    while (v6 < *(void *)(a1 + 8));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DCFFC51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::compute_code<faiss::PQEncoder16>(uint64_t a1, uint64_t a2, _WORD *a3)
{
  std::vector<float>::vector(__p, *(void *)(a1 + 40));
  if (*(_DWORD *)(a1 + 16) != 16) {
    __assert_rtn("PQEncoder16", "ProductQuantizer-inl.h", 56, "16 == nbits");
  }
  if (*(void *)(a1 + 8))
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * *(void *)(a1 + 24) * v6), (const float *)(*(void *)(a1 + 104) + 4 * *(void *)(a1 + 24) * v6 * v7), *(void *)(a1 + 24), v7);
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7)
      {
        uint64_t v8 = 0;
        __int16 v9 = 0;
        float v10 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v8) < v10)
          {
            float v10 = *((float *)__p[0] + v8);
            __int16 v9 = v8;
          }
          ++v8;
        }
        while (v7 != v8);
      }
      else
      {
        __int16 v9 = 0;
      }
      *a3++ = v9;
      ++v6;
    }
    while (v6 < *(void *)(a1 + 8));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DCFFC650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::compute_code<faiss::PQEncoderGeneric>(void *a1, uint64_t a2, unsigned char *a3)
{
  std::vector<float>::vector(__p, a1[5]);
  uint64_t v6 = a1[2];
  if ((int)v6 > 64) {
    __assert_rtn("PQEncoderGeneric", "ProductQuantizer-inl.h", 15, "nbits <= 64");
  }
  if (a1[1])
  {
    unint64_t v7 = 0;
    unsigned __int8 v8 = 0;
    char v9 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)__p[0], (faiss *)(a2 + 4 * a1[3] * v7), (const float *)(a1[13] + 4 * a1[3] * v7 * a1[5]), a1[3], a1[5]);
      uint64_t v10 = a1[5];
      if (v10)
      {
        unint64_t v11 = 0;
        unint64_t v12 = 0;
        float v13 = 1.0e20;
        do
        {
          if (*((float *)__p[0] + v11) < v13)
          {
            float v13 = *((float *)__p[0] + v11);
            unint64_t v12 = v11;
          }
          ++v11;
        }
        while (v10 != v11);
      }
      else
      {
        unint64_t v12 = 0;
      }
      v9 |= v12 << v8;
      if ((int)(v6 + v8) < 8)
      {
        v8 += v6;
      }
      else
      {
        unint64_t v14 = v12 >> (8 - v8);
        *a3++ = v9;
        int v15 = v6 - 8 + v8;
        if (v15 >= 8)
        {
          unsigned int v16 = v15 >> 3;
          do
          {
            *a3++ = v14;
            v14 >>= 8;
            --v16;
          }
          while (v16);
        }
        unsigned __int8 v8 = (v8 + v6) & 7;
        char v9 = v14;
      }
      ++v7;
    }
    while (v7 < a1[1]);
    if (v8) {
      *a3 = v9;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

_DWORD *faiss::ProductQuantizer::decode(_DWORD *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 == 16) {
    return faiss::decode<faiss::PQDecoder16>(this, a2, a3);
  }
  if (v3 == 8) {
    return faiss::decode<faiss::PQDecoder8>(this, a2, a3);
  }
  return faiss::decode<faiss::PQDecoderGeneric>(this, (unsigned __int8 *)a2, a3);
}

_DWORD *faiss::decode<faiss::PQDecoder8>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if (result[4] != 8) {
    faiss::decode<faiss::PQDecoder8>();
  }
  uint64_t v3 = result;
  if (*((void *)result + 1))
  {
    unint64_t v6 = 0;
    do
    {
      double result = memcpy((void *)(a3 + 4 * v3[3] * v6), (const void *)(v3[13] + 4 * (*(unsigned __int8 *)(a2 + v6) + v3[5] * v6) * v3[3]), 4 * v3[3]);
      ++v6;
    }
    while (v6 < v3[1]);
  }
  return result;
}

_DWORD *faiss::decode<faiss::PQDecoder16>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if (result[4] != 16) {
    faiss::decode<faiss::PQDecoder16>();
  }
  uint64_t v3 = result;
  if (*((void *)result + 1))
  {
    unint64_t v6 = 0;
    do
    {
      double result = memcpy((void *)(a3 + 4 * v3[3] * v6), (const void *)(v3[13] + 4 * (*(unsigned __int16 *)(a2 + 2 * v6) + v3[5] * v6) * v3[3]), 4 * v3[3]);
      ++v6;
    }
    while (v6 < v3[1]);
  }
  return result;
}

void *faiss::decode<faiss::PQDecoderGeneric>(void *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = result[2];
  if ((int)v3 > 64) {
    faiss::decode<faiss::PQDecoderGeneric>();
  }
  int v4 = result;
  if (result[1])
  {
    unint64_t v7 = 0;
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
    do
    {
      if (!(_BYTE)v8) {
        LODWORD(v9) = *a2;
      }
      uint64_t v10 = v9 >> v8;
      int v11 = v3 + v8;
      unsigned int v12 = v11 - 8;
      if (v11 < 8)
      {
        LOBYTE(v8) = v3 + v8;
      }
      else
      {
        char v13 = 8 - v8;
        unint64_t v14 = a2 + 1;
        if (v12 < 8)
        {
          ++a2;
        }
        else
        {
          unsigned int v15 = v12 >> 3;
          uint64_t v16 = v15 - 1;
          do
          {
            unsigned int v17 = *v14++;
            v10 |= (unint64_t)v17 << v13;
            v13 += 8;
            --v15;
          }
          while (v15);
          a2 += v16 + 2;
        }
        int v8 = ((_BYTE)v8 + (_BYTE)v3) & 7;
        if (v8)
        {
          uint64_t v9 = *a2;
          v10 |= v9 << v13;
        }
      }
      double result = memcpy((void *)(a3 + 4 * v4[3] * v7), (const void *)(v4[13] + 4 * ((v10 & ~(-1 << v3)) + v4[5] * v7) * v4[3]), 4 * v4[3]);
      ++v7;
    }
    while (v7 < v4[1]);
  }
  return result;
}

_DWORD *faiss::ProductQuantizer::decode(_DWORD *this, const unsigned __int8 *a2, float *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = (uint64_t)this;
    for (uint64_t i = 0; i != a4; ++i)
      this = faiss::ProductQuantizer::decode((_DWORD *)v7, (uint64_t)&a2[*(void *)(v7 + 32) * i], (uint64_t)&a3[*(void *)v7 * i]);
  }
  return this;
}

void *faiss::ProductQuantizer::compute_code_from_distance_table(void *this, const float *a2, unsigned __int8 *a3)
{
  uint64_t v3 = this[2];
  if ((int)v3 > 64) {
    faiss::ProductQuantizer::compute_code_from_distance_table();
  }
  unint64_t v4 = this[1];
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned __int8 v6 = 0;
    unsigned __int8 v7 = 0;
    do
    {
      uint64_t v8 = this[5];
      if (v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
        float v11 = 1.0e20;
        do
        {
          if (a2[v9] < v11)
          {
            float v11 = a2[v9];
            unint64_t v10 = v9;
          }
          ++v9;
        }
        while (v8 != v9);
        a2 += v8;
      }
      else
      {
        unint64_t v10 = 0;
      }
      v7 |= v10 << v6;
      if ((int)(v3 + v6) < 8)
      {
        v6 += v3;
      }
      else
      {
        unint64_t v12 = v10 >> (8 - v6);
        *a3++ = v7;
        int v13 = v3 - 8 + v6;
        if (v13 >= 8)
        {
          unsigned int v14 = v13 >> 3;
          do
          {
            *a3++ = v12;
            v12 >>= 8;
            --v14;
          }
          while (v14);
        }
        unsigned __int8 v6 = (v6 + v3) & 7;
        unint64_t v4 = this[1];
        unsigned __int8 v7 = v12;
      }
      ++v5;
    }
    while (v5 < v4);
    if (v6) {
      *a3 = v7;
    }
  }
  return this;
}

void *faiss::ProductQuantizer::compute_codes_with_assign_index(void *this, const float *a2, unsigned __int8 *a3)
{
  uint64_t v3 = this[12];
  if (!v3 || (unint64_t v4 = this, this[3] != *(_DWORD *)(v3 + 8)))
  {
    memset(&v9, 0, sizeof(v9));
    int v5 = snprintf(0, 0, "Error: '%s' failed", "assign_index && assign_index->d == dsub");
    std::string::resize(&v9, v5 + 1, 0);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v6 = &v9;
    }
    else {
      unsigned __int8 v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v9.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v6, size, "Error: '%s' failed", "assign_index && assign_index->d == dsub");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v9, "void faiss::ProductQuantizer::compute_codes_with_assign_index(const float *, uint8_t *, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 424);
  }
  if (this[1])
  {
    (*(void (**)(void))(*(void *)this[12] + 64))(this[12]);
    (*(void (**)(void))(*(void *)v4[12] + 24))(v4[12]);
    operator new[]();
  }
  return this;
}

void sub_1DCFFD0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

#error "1DCFFD258: call analysis failed (funcsize=95)"

void sub_1DCFFD2CC(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::compute_distance_tables(faiss::ProductQuantizer *this, uint64_t a2, const float *a3, float *a4, int32x4_t a5, int32x4_t a6, float32x4_t a7, int32x4_t a8, int32x4_t a9, int32x4_t a10, int32x4_t a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,size_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v67 = *((void *)this + 3);
  if (v67 == 2)
  {
    if (*((void *)this + 2) <= 7uLL)
    {
      unint64_t v68 = *(void *)this;
      unint64_t v69 = *((void *)this + 5);
      std::vector<int> v70 = (uint64_t *)*((void *)this + 13);
      faiss::compute_PQ_dis_tables_dsub2(v68, v69, v70, a2, (uint64_t)a3, 0, (uint64_t)a4, a5, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44,
        a45,
        a46,
        a47,
        a48,
        a49,
        a50,
        a51,
        a52,
        a53,
        a54,
        a55,
        a56,
        a57,
        a58,
        a59,
        a6,
        a7,
        a8,
        a9,
        a10,
        a11,
        a12,
        a60,
        a61,
        a62,
        a63);
      return;
    }
    goto LABEL_7;
  }
  if (v67 < 0x10)
  {
LABEL_7:
    if (a2)
    {
      for (uint64_t i = 0; i != a2; ++i)
        faiss::ProductQuantizer::compute_distance_table(this, &a3[*(void *)this * i], &a4[*((void *)this + 5) * i * *((void *)this + 1)]);
    }
    return;
  }
  unint64_t v72 = *((void *)this + 1);
  if (v72)
  {
    for (unint64_t j = 0; j < v72; ++j)
    {
      faiss::pairwise_L2sqr(*((void *)this + 3), a2, (faiss *)&a3[*((void *)this + 3) * j], *((void *)this + 5), (float *)(*((void *)this + 13) + 4 * *((void *)this + 3) * j * *((void *)this + 5)), &a4[*((void *)this + 5) * j], *(float **)this, *((void *)this + 3), *((void *)this + 5) * v72, v74);
      unint64_t v72 = *((void *)this + 1);
    }
  }
}

void faiss::ProductQuantizer::compute_distance_table(faiss::ProductQuantizer *this, const float *a2, float *a3)
{
  if (*((void *)this + 1))
  {
    unint64_t v6 = 0;
    do
    {
      faiss::fvec_L2sqr_ny((faiss *)&a3[*((void *)this + 5) * v6], (faiss *)&a2[*((void *)this + 3) * v6], (const float *)(*((void *)this + 13) + 4 * *((void *)this + 5) * v6 * *((void *)this + 3)), *((void *)this + 3), *((void *)this + 5));
      ++v6;
    }
    while (v6 < *((void *)this + 1));
  }
}

uint64_t faiss::ProductQuantizer::compute_inner_prod_table(uint64_t this, const float *a2, float *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (*(void *)(this + 8))
  {
    uint64_t v8 = this;
    unint64_t v9 = 0;
    do
    {
      this = faiss::fvec_inner_products_ny((faiss *)&a3[*(void *)(v8 + 40) * v9], (float *)&a2[*(void *)(v8 + 24) * v9], (const float *)(*(void *)(v8 + 104) + 4 * *(void *)(v8 + 40) * v9 * *(void *)(v8 + 24)), *(const float **)(v8 + 24), *(void *)(v8 + 40), a6);
      ++v9;
    }
    while (v9 < *(void *)(v8 + 8));
  }
  return this;
}

unint64_t faiss::ProductQuantizer::compute_inner_prod_tables(unint64_t this, uint64_t a2, const float *a3, float *a4, uint64_t a5, unint64_t a6, int32x4_t a7, int32x4_t a8, float32x4_t a9, int32x4_t a10, int32x4_t a11, int32x4_t a12, int32x4_t a13, int32x4_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,size_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  double v66 = (uint64_t *)this;
  unint64_t v67 = *(void *)(this + 24);
  if (v67 == 2)
  {
    if (*(void *)(this + 16) <= 7uLL)
    {
      unint64_t v68 = *(void *)this;
      unint64_t v69 = v66[5];
      std::vector<int> v70 = (uint64_t *)v66[13];
      return faiss::compute_PQ_dis_tables_dsub2(v68, v69, v70, a2, (uint64_t)a3, 1, (uint64_t)a4, a7, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
               a27,
               a28,
               a29,
               a30,
               a31,
               a32,
               a33,
               a34,
               a35,
               a36,
               a37,
               a38,
               a39,
               a40,
               a41,
               a42,
               a43,
               a44,
               a45,
               a46,
               a47,
               a48,
               a49,
               a50,
               a51,
               a52,
               a53,
               a54,
               a55,
               a56,
               a57,
               a58,
               a59,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a60,
               a61,
               a62,
               a63);
    }
    goto LABEL_7;
  }
  if (v67 < 0x10)
  {
LABEL_7:
    if (a2)
    {
      for (uint64_t i = 0; i != a2; ++i)
        this = faiss::ProductQuantizer::compute_inner_prod_table((uint64_t)v66, &a3[*v66 * i], &a4[v66[5] * i * v66[1]], (uint64_t)a4, a5, a6);
    }
    return this;
  }
  unint64_t v72 = *(void *)(this + 8);
  if (v72)
  {
    for (unint64_t j = 0; j < v72; ++j)
    {
      uint64_t v74 = v66[5];
      int n = a2;
      int v83 = v74 * v72;
      uint64_t v75 = v66[3];
      int lda = v75;
      int m = v74;
      uint64_t v76 = *v66;
      float alpha = 1.0;
      int ldb = v76;
      int v77 = 0;
      this = sgemm_("Transposed", "Not transposed", &m, &n, &lda, &alpha, (float *)(v66[13] + 4 * v75 * j * v74), &lda, (float *)&a3[v75 * j], &ldb, (float *)&v77, &a4[v74 * j], &v83);
      unint64_t v72 = v66[1];
    }
  }
  return this;
}

#error "1DCFFD750: call analysis failed (funcsize=523)"

void sub_1DCFFDF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(a1);
}

#error "1DCFFE014: call analysis failed (funcsize=523)"

void sub_1DCFFE7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::compute_sdc_table(faiss::ProductQuantizer *this)
{
  std::vector<float>::resize((uint64_t)this + 128, *((void *)this + 5) * *((void *)this + 1) * *((void *)this + 5));
  uint64_t v2 = *((void *)this + 1);
  if (*((void *)this + 3) >= 4uLL)
  {
    if (v2)
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *((void *)this + 5);
        uint64_t v12 = *((void *)this + 3);
        int v13 = (faiss *)(*((void *)this + 13) + 4 * v11 * v10 * v12);
        faiss::pairwise_L2sqr(v12, v11, v13, v11, (float *)v13, (float *)(*((void *)this + 16) + 4 * v11 * v10++ * v11), (float *)v12, v12, v11, v14);
      }
      while (*((void *)this + 1) > v10);
    }
  }
  else
  {
    unint64_t v3 = *((void *)this + 5);
    if (v3 * v2)
    {
      unint64_t v4 = 0;
      unsigned int v5 = 1;
      do
      {
        unint64_t v6 = v4 / v3 * v3;
        unint64_t v7 = *((void *)this + 3);
        uint64_t v8 = (const float *)(*((void *)this + 13) + 4 * v6 * v7);
        faiss::fvec_L2sqr_ny((faiss *)(*((void *)this + 16) + 4 * v6 * v3 + 4 * v4 % v3 * v3), (faiss *)&v8[v7 * (v4 % v3)], v8, v7, v3);
        unint64_t v4 = v5;
        unint64_t v3 = *((void *)this + 5);
      }
      while (v3 * *((void *)this + 1) > v5++);
    }
  }
}

void *faiss::ProductQuantizer::search_sdc(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  if (result[5] * result[1] * result[5] != (uint64_t)(result[17] - result[16]) >> 2)
  {
    memset(&v71, 0, sizeof(v71));
    int v55 = snprintf(0, 0, "Error: '%s' failed", "sdc_table.size() == M * ksub * ksub");
    std::string::resize(&v71, v55 + 1, 0);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v56 = &v71;
    }
    else {
      uint64_t v56 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v71.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v56, size, "Error: '%s' failed", "sdc_table.size() == M * ksub * ksub");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v71, "void faiss::ProductQuantizer::search_sdc(const uint8_t *, size_t, const uint8_t *, const size_t, float_maxheap_array_t *, BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 751);
  }
  unint64_t v7 = result;
  if (result[2] != 8)
  {
    memset(&v71, 0, sizeof(v71));
    int v59 = snprintf(0, 0, "Error: '%s' failed", "nbits == 8");
    std::string::resize(&v71, v59 + 1, 0);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v60 = &v71;
    }
    else {
      unint64_t v60 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v61 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v61 = v71.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v60, v61, "Error: '%s' failed", "nbits == 8");
    float v62 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v62, &v71, "void faiss::ProductQuantizer::search_sdc(const uint8_t *, size_t, const uint8_t *, const size_t, float_maxheap_array_t *, BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/ProductQuantizer.cpp", 752);
  }
  if (!a3) {
    return result;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = a6[1];
  if (v12) {
    int v13 = a7;
  }
  else {
    int v13 = 0;
  }
  int v68 = v13;
  char v65 = a7;
  uint64_t v63 = a3;
  int v64 = a6;
  do
  {
    uint64_t v15 = a6[2];
    uint64_t v14 = a6[3];
    uint64_t v16 = v7[4];
    if (v68)
    {
      unsigned int v17 = (void *)(v15 + v10);
      int v18 = (_DWORD *)(v14 + v9);
      unint64_t v19 = v12;
      do
      {
        *v18++ = 2139095039;
        *v17++ = -1;
        --v19;
      }
      while (v19);
    }
    uint64_t v69 = v15;
    uint64_t v70 = v14;
    BOOL v20 = (uint64_t *)(v15 + 8 * v11 * v12);
    double result = (void *)(v14 + 4 * v11 * v12);
    if (!a5) {
      goto LABEL_32;
    }
    uint64_t v21 = 0;
    uint64_t v22 = v7[16];
    uint64_t v23 = v7[1];
    int v24 = (char *)result - 4;
    int v25 = v20 - 1;
    uint64_t v26 = a4;
    do
    {
      if (v23)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v7[5];
        float v29 = 0.0;
        uint64_t v30 = v22;
        do
        {
          float v29 = v29
              + *(float *)(v30 + 4
                               * (*(unsigned __int8 *)(v26 + v27) + v28 * *(unsigned __int8 *)(a2 + v16 * v11 + v27)));
          ++v27;
          v30 += 4 * v28 * v28;
        }
        while (v23 != v27);
      }
      else
      {
        float v29 = 0.0;
      }
      if (v29 >= *(float *)result) {
        goto LABEL_31;
      }
      if (v12 < 2)
      {
        uint64_t v31 = 1;
        goto LABEL_30;
      }
      uint64_t v32 = 3;
      unint64_t v33 = 2;
      uint64_t v34 = 1;
      while (1)
      {
        float v35 = *(float *)&v24[4 * v33];
        if (v32 != v12 + 1)
        {
          float v36 = *(float *)&v24[4 * v32];
          if (v35 <= v36) {
            break;
          }
        }
        if (v35 < v29) {
          goto LABEL_29;
        }
LABEL_27:
        uint64_t v31 = v33;
        *(float *)&v24[4 * v34] = v35;
        v25[v34] = v25[v33];
        v33 *= 2;
        uint64_t v32 = (2 * v31) | 1;
        uint64_t v34 = v31;
        if (v33 > v12) {
          goto LABEL_30;
        }
      }
      float v35 = *(float *)&v24[4 * v32];
      unint64_t v33 = v32;
      if (v36 >= v29) {
        goto LABEL_27;
      }
LABEL_29:
      uint64_t v31 = v34;
LABEL_30:
      *(float *)&v24[4 * v31] = v29;
      v25[v31] = v21;
LABEL_31:
      v26 += v16;
      ++v21;
    }
    while (v21 != a5);
LABEL_32:
    if ((a7 & 1) == 0) {
      goto LABEL_55;
    }
    if (!v12)
    {
      unint64_t v38 = 0;
      goto LABEL_52;
    }
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    float64x2_t v39 = (char *)result - 4;
    uint64_t v40 = v20 - 1;
    while (2)
    {
      float v41 = *(float *)result;
      uint64_t v42 = *v20;
      unint64_t v43 = v12 - v37;
      float v44 = *(float *)&v39[4 * (v12 - v37)];
      if (v12 - v37 < 2)
      {
        uint64_t v45 = 1;
        goto LABEL_47;
      }
      uint64_t v46 = 3;
      unint64_t v47 = 2;
      uint64_t v48 = 1;
      while (2)
      {
        float v49 = *(float *)&v39[4 * v47];
        if (v46 == v43 + 1 || (float v50 = *(float *)&v39[4 * v46], v49 > v50))
        {
          if (v44 > v49) {
            break;
          }
          goto LABEL_43;
        }
        float v49 = *(float *)&v39[4 * v46];
        unint64_t v47 = v46;
        if (v44 <= v50)
        {
LABEL_43:
          uint64_t v45 = v47;
          *(float *)&v39[4 * v48] = v49;
          v40[v48] = v40[v47];
          v47 *= 2;
          uint64_t v46 = (2 * v45) | 1;
          uint64_t v48 = v45;
          if (v47 > v43) {
            goto LABEL_46;
          }
          continue;
        }
        break;
      }
      uint64_t v45 = v48;
LABEL_46:
      float v44 = *(float *)&v39[4 * v43];
LABEL_47:
      *(float *)&v39[4 * v45] = v44;
      v40[v45] = v40[v43];
      unint64_t v51 = v12 + ~v38;
      *((float *)result + v51) = v41;
      v20[v51] = v42;
      if (v42 != -1) {
        ++v38;
      }
      if (++v37 != v12) {
        continue;
      }
      break;
    }
LABEL_52:
    memmove(result, (char *)result + 4 * v12 + -4 * v38, 4 * v38);
    double result = memmove(v20, &v20[v12 - v38], 8 * v38);
    uint64_t v52 = v12 - v38;
    LOBYTE(a7) = v65;
    a3 = v63;
    a6 = v64;
    if (v12 > v38)
    {
      uint64_t v53 = v69 + 8 * v38;
      uint64_t v54 = v70 + 4 * v38;
      do
      {
        *(_DWORD *)(v54 + v9) = 2139095039;
        *(void *)(v53 + v10) = -1;
        v53 += 8;
        v54 += 4;
        --v52;
      }
      while (v52);
    }
LABEL_55:
    ++v11;
    v10 += 8 * v12;
    v9 += 4 * v12;
  }
  while (v11 != a3);
  return result;
}

void sub_1DCFFEE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::PCAMatrix::~PCAMatrix(faiss::PCAMatrix *this)
{
  *(void *)this = &unk_1F383FE60;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  faiss::LinearTransform::~LinearTransform(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F383FE60;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::LinearTransform::~LinearTransform(faiss::LinearTransform *this)
{
  *(void *)this = &unk_1F383EEB8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::Clustering::~Clustering(faiss::Clustering *this)
{
  *(void *)this = &unk_1F383E160;
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  faiss::Clustering::~Clustering(this);
  JUMPOUT(0x1E01AF670);
}

unsigned __int8 *faiss::pq_estimators_from_tables_M4<unsigned char,faiss::CMax<float,long long>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  if (!a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3 + 4 * a4;
  uint64_t v9 = v8 + 4 * a4;
  uint64_t v10 = v9 + 4 * a4;
  uint64_t v11 = a6 - 1;
  uint64_t v12 = a7 - 8;
  do
  {
    float v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 <= v13) {
      goto LABEL_16;
    }
    if (a5 < 2)
    {
      uint64_t v14 = 1;
      goto LABEL_15;
    }
    uint64_t v15 = 3;
    unint64_t v16 = 2;
    uint64_t v17 = 1;
    while (1)
    {
      float v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        float v19 = v11[v15];
        if (v18 <= v19) {
          break;
        }
      }
      if (v18 < v13) {
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v14 = v16;
      v11[v17] = v18;
      *(void *)(v12 + 8 * v17) = *(void *)(v12 + 8 * v16);
      v16 *= 2;
      uint64_t v15 = (2 * v14) | 1;
      uint64_t v17 = v14;
      if (v16 > a5) {
        goto LABEL_15;
      }
    }
    float v18 = v11[v15];
    unint64_t v16 = v15;
    if (v19 >= v13) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(void *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned char,faiss::CMax<float,long long>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  if (!a3) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a7 - 1;
  uint64_t v10 = a8 - 8;
  uint64_t v11 = 16 * a5;
  uint64_t v12 = 12 * a5;
  uint64_t v13 = 8 * a5;
  uint64_t v14 = 4 * a5;
  do
  {
    if (result)
    {
      unint64_t v15 = 0;
      float v16 = 0.0;
      uint64_t v17 = a4;
      do
      {
        float v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *(unsigned __int8 *)(a2 + v15))
                                    + *(float *)(v17 + v14 + 4 * *(unsigned __int8 *)(a2 + v15 + 1)))
                            + *(float *)(v17 + v13 + 4 * *(unsigned __int8 *)(a2 + v15 + 2)))
                    + *(float *)(v17 + v12 + 4 * *(unsigned __int8 *)(a2 + v15 + 3)));
        v15 += 4;
        v17 += v11;
      }
      while (v15 < (int)result);
      a2 += v15;
    }
    else
    {
      float v16 = 0.0;
    }
    if (*a7 <= v16) {
      goto LABEL_21;
    }
    if (a6 < 2)
    {
      uint64_t v18 = 1;
      goto LABEL_20;
    }
    uint64_t v19 = 3;
    unint64_t v20 = 2;
    uint64_t v21 = 1;
    while (1)
    {
      float v22 = v9[v20];
      if (v19 != a6 + 1)
      {
        float v23 = v9[v19];
        if (v22 <= v23) {
          break;
        }
      }
      if (v22 < v16) {
        goto LABEL_19;
      }
LABEL_17:
      uint64_t v18 = v20;
      v9[v21] = v22;
      *(void *)(v10 + 8 * v21) = *(void *)(v10 + 8 * v20);
      v20 *= 2;
      uint64_t v19 = (2 * v18) | 1;
      uint64_t v21 = v18;
      if (v20 > a6) {
        goto LABEL_20;
      }
    }
    float v22 = v9[v19];
    unint64_t v20 = v19;
    if (v23 >= v16) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v18 = v21;
LABEL_20:
    v9[v18] = v16;
    *(void *)(v10 + 8 * v18) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int16 *faiss::pq_estimators_from_tables_M4<unsigned short,faiss::CMax<float,long long>>(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  if (!a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3 + 4 * a4;
  uint64_t v9 = v8 + 4 * a4;
  uint64_t v10 = v9 + 4 * a4;
  uint64_t v11 = a6 - 1;
  uint64_t v12 = a7 - 8;
  do
  {
    float v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 <= v13) {
      goto LABEL_16;
    }
    if (a5 < 2)
    {
      uint64_t v14 = 1;
      goto LABEL_15;
    }
    uint64_t v15 = 3;
    unint64_t v16 = 2;
    uint64_t v17 = 1;
    while (1)
    {
      float v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        float v19 = v11[v15];
        if (v18 <= v19) {
          break;
        }
      }
      if (v18 < v13) {
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v14 = v16;
      v11[v17] = v18;
      *(void *)(v12 + 8 * v17) = *(void *)(v12 + 8 * v16);
      v16 *= 2;
      uint64_t v15 = (2 * v14) | 1;
      uint64_t v17 = v14;
      if (v16 > a5) {
        goto LABEL_15;
      }
    }
    float v18 = v11[v15];
    unint64_t v16 = v15;
    if (v19 >= v13) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(void *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned short,faiss::CMax<float,long long>>(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  if (!a3) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a7 - 1;
  uint64_t v10 = a8 - 8;
  uint64_t v11 = 16 * a5;
  uint64_t v12 = 12 * a5;
  uint64_t v13 = 8 * a5;
  uint64_t v14 = 4 * a5;
  do
  {
    if (result)
    {
      unint64_t v15 = 0;
      float v16 = 0.0;
      uint64_t v17 = a4;
      do
      {
        float v18 = a2 + 4;
        float v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *a2) + *(float *)(v17 + v14 + 4 * a2[1]))
                            + *(float *)(v17 + v13 + 4 * a2[2]))
                    + *(float *)(v17 + v12 + 4 * a2[3]));
        v15 += 4;
        v17 += v11;
        a2 += 4;
      }
      while (v15 < (int)result);
      a2 = v18;
    }
    else
    {
      float v16 = 0.0;
    }
    if (*a7 <= v16) {
      goto LABEL_21;
    }
    if (a6 < 2)
    {
      uint64_t v19 = 1;
      goto LABEL_20;
    }
    uint64_t v20 = 3;
    unint64_t v21 = 2;
    uint64_t v22 = 1;
    while (1)
    {
      float v23 = v9[v21];
      if (v20 != a6 + 1)
      {
        float v24 = v9[v20];
        if (v23 <= v24) {
          break;
        }
      }
      if (v23 < v16) {
        goto LABEL_19;
      }
LABEL_17:
      uint64_t v19 = v21;
      v9[v22] = v23;
      *(void *)(v10 + 8 * v22) = *(void *)(v10 + 8 * v21);
      v21 *= 2;
      uint64_t v20 = (2 * v19) | 1;
      uint64_t v22 = v19;
      if (v21 > a6) {
        goto LABEL_20;
      }
    }
    float v23 = v9[v20];
    unint64_t v21 = v20;
    if (v24 >= v16) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v19 = v22;
LABEL_20:
    v9[v19] = v16;
    *(void *)(v10 + 8 * v19) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int8 *faiss::pq_estimators_from_tables_M4<unsigned char,faiss::CMin<float,long long>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  if (!a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3 + 4 * a4;
  uint64_t v9 = v8 + 4 * a4;
  uint64_t v10 = v9 + 4 * a4;
  uint64_t v11 = a6 - 1;
  uint64_t v12 = a7 - 8;
  do
  {
    float v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 >= v13) {
      goto LABEL_16;
    }
    if (a5 < 2)
    {
      uint64_t v14 = 1;
      goto LABEL_15;
    }
    uint64_t v15 = 3;
    unint64_t v16 = 2;
    uint64_t v17 = 1;
    while (1)
    {
      float v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        float v19 = v11[v15];
        if (v18 >= v19) {
          break;
        }
      }
      if (v18 > v13) {
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v14 = v16;
      v11[v17] = v18;
      *(void *)(v12 + 8 * v17) = *(void *)(v12 + 8 * v16);
      v16 *= 2;
      uint64_t v15 = (2 * v14) | 1;
      uint64_t v17 = v14;
      if (v16 > a5) {
        goto LABEL_15;
      }
    }
    float v18 = v11[v15];
    unint64_t v16 = v15;
    if (v19 <= v13) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(void *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned char,faiss::CMin<float,long long>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  if (!a3) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a7 - 1;
  uint64_t v10 = a8 - 8;
  uint64_t v11 = 16 * a5;
  uint64_t v12 = 12 * a5;
  uint64_t v13 = 8 * a5;
  uint64_t v14 = 4 * a5;
  do
  {
    if (result)
    {
      unint64_t v15 = 0;
      float v16 = 0.0;
      uint64_t v17 = a4;
      do
      {
        float v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *(unsigned __int8 *)(a2 + v15))
                                    + *(float *)(v17 + v14 + 4 * *(unsigned __int8 *)(a2 + v15 + 1)))
                            + *(float *)(v17 + v13 + 4 * *(unsigned __int8 *)(a2 + v15 + 2)))
                    + *(float *)(v17 + v12 + 4 * *(unsigned __int8 *)(a2 + v15 + 3)));
        v15 += 4;
        v17 += v11;
      }
      while (v15 < (int)result);
      a2 += v15;
    }
    else
    {
      float v16 = 0.0;
    }
    if (*a7 >= v16) {
      goto LABEL_21;
    }
    if (a6 < 2)
    {
      uint64_t v18 = 1;
      goto LABEL_20;
    }
    uint64_t v19 = 3;
    unint64_t v20 = 2;
    uint64_t v21 = 1;
    while (1)
    {
      float v22 = v9[v20];
      if (v19 != a6 + 1)
      {
        float v23 = v9[v19];
        if (v22 >= v23) {
          break;
        }
      }
      if (v22 > v16) {
        goto LABEL_19;
      }
LABEL_17:
      uint64_t v18 = v20;
      v9[v21] = v22;
      *(void *)(v10 + 8 * v21) = *(void *)(v10 + 8 * v20);
      v20 *= 2;
      uint64_t v19 = (2 * v18) | 1;
      uint64_t v21 = v18;
      if (v20 > a6) {
        goto LABEL_20;
      }
    }
    float v22 = v9[v19];
    unint64_t v20 = v19;
    if (v23 <= v16) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v18 = v21;
LABEL_20:
    v9[v18] = v16;
    *(void *)(v10 + 8 * v18) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

unsigned __int16 *faiss::pq_estimators_from_tables_M4<unsigned short,faiss::CMin<float,long long>>(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float *a6, uint64_t a7)
{
  if (!a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3 + 4 * a4;
  uint64_t v9 = v8 + 4 * a4;
  uint64_t v10 = v9 + 4 * a4;
  uint64_t v11 = a6 - 1;
  uint64_t v12 = a7 - 8;
  do
  {
    float v13 = (float)((float)(*(float *)(a3 + 4 * *result) + *(float *)(v8 + 4 * result[1]))
                + *(float *)(v9 + 4 * result[2]))
        + *(float *)(v10 + 4 * result[3]);
    if (*a6 >= v13) {
      goto LABEL_16;
    }
    if (a5 < 2)
    {
      uint64_t v14 = 1;
      goto LABEL_15;
    }
    uint64_t v15 = 3;
    unint64_t v16 = 2;
    uint64_t v17 = 1;
    while (1)
    {
      float v18 = v11[v16];
      if (v15 != a5 + 1)
      {
        float v19 = v11[v15];
        if (v18 >= v19) {
          break;
        }
      }
      if (v18 > v13) {
        goto LABEL_14;
      }
LABEL_12:
      uint64_t v14 = v16;
      v11[v17] = v18;
      *(void *)(v12 + 8 * v17) = *(void *)(v12 + 8 * v16);
      v16 *= 2;
      uint64_t v15 = (2 * v14) | 1;
      uint64_t v17 = v14;
      if (v16 > a5) {
        goto LABEL_15;
      }
    }
    float v18 = v11[v15];
    unint64_t v16 = v15;
    if (v19 <= v13) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v14 = v17;
LABEL_15:
    v11[v14] = v13;
    *(void *)(v12 + 8 * v14) = v7;
LABEL_16:
    result += 4;
    ++v7;
  }
  while (v7 != a2);
  return result;
}

uint64_t faiss::pq_estimators_from_tables_Mmul4<unsigned short,faiss::CMin<float,long long>>(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, float *a7, uint64_t a8)
{
  if (!a3) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a7 - 1;
  uint64_t v10 = a8 - 8;
  uint64_t v11 = 16 * a5;
  uint64_t v12 = 12 * a5;
  uint64_t v13 = 8 * a5;
  uint64_t v14 = 4 * a5;
  do
  {
    if (result)
    {
      unint64_t v15 = 0;
      float v16 = 0.0;
      uint64_t v17 = a4;
      do
      {
        float v18 = a2 + 4;
        float v16 = v16
            + (float)((float)((float)(*(float *)(v17 + 4 * *a2) + *(float *)(v17 + v14 + 4 * a2[1]))
                            + *(float *)(v17 + v13 + 4 * a2[2]))
                    + *(float *)(v17 + v12 + 4 * a2[3]));
        v15 += 4;
        v17 += v11;
        a2 += 4;
      }
      while (v15 < (int)result);
      a2 = v18;
    }
    else
    {
      float v16 = 0.0;
    }
    if (*a7 >= v16) {
      goto LABEL_21;
    }
    if (a6 < 2)
    {
      uint64_t v19 = 1;
      goto LABEL_20;
    }
    uint64_t v20 = 3;
    unint64_t v21 = 2;
    uint64_t v22 = 1;
    while (1)
    {
      float v23 = v9[v21];
      if (v20 != a6 + 1)
      {
        float v24 = v9[v20];
        if (v23 >= v24) {
          break;
        }
      }
      if (v23 > v16) {
        goto LABEL_19;
      }
LABEL_17:
      uint64_t v19 = v21;
      v9[v22] = v23;
      *(void *)(v10 + 8 * v22) = *(void *)(v10 + 8 * v21);
      v21 *= 2;
      uint64_t v20 = (2 * v19) | 1;
      uint64_t v22 = v19;
      if (v21 > a6) {
        goto LABEL_20;
      }
    }
    float v23 = v9[v20];
    unint64_t v21 = v20;
    if (v24 <= v16) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v19 = v22;
LABEL_20:
    v9[v19] = v16;
    *(void *)(v10 + 8 * v19) = v8;
LABEL_21:
    ++v8;
  }
  while (v8 != a3);
  return result;
}

void faiss::decode<faiss::PQDecoder8>()
{
  __assert_rtn("PQDecoder8", "ProductQuantizer-inl.h", 100, "8 == nbits_in");
}

void faiss::decode<faiss::PQDecoder16>()
{
  __assert_rtn("PQDecoder16", "ProductQuantizer-inl.h", 109, "16 == nbits_in");
}

void faiss::decode<faiss::PQDecoderGeneric>()
{
  __assert_rtn("PQDecoderGeneric", "ProductQuantizer-inl.h", 69, "nbits <= 64");
}

void faiss::ProductQuantizer::compute_code_from_distance_table()
{
  __assert_rtn("PQEncoderGeneric", "ProductQuantizer-inl.h", 15, "nbits <= 64");
}

float faiss::fvec_L2sqr_ref(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = result + (float)((float)(v5 - v6) * (float)(v5 - v6));
  }
  return result;
}

float faiss::fvec_L1_ref(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = result + vabds_f32(v5, v6);
  }
  return result;
}

float faiss::fvec_Linf_ref(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = fmaxf(result, vabds_f32(v5, v6));
  }
  return result;
}

float faiss::fvec_inner_product_ref(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = result + (float)(v5 * v6);
  }
  return result;
}

double faiss::fvec_norm_L2sqr_ref(faiss *this, const float *a2)
{
  if (!a2) {
    return 0.0;
  }
  double result = 0.0;
  do
  {
    float v3 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    double result = result + (float)(v3 * v3);
    a2 = (const float *)((char *)a2 - 1);
  }
  while (a2);
  *(float *)&double result = result;
  return result;
}

void faiss::fvec_L2sqr_ny_ref(faiss *this, faiss *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = a5;
    uint64_t v10 = 4 * a4;
    do
    {
      *(float *)this = faiss::fvec_L2sqr(a2, a3, a4);
      this = (faiss *)((char *)this + 4);
      a3 = (const float *)((char *)a3 + v10);
      --v5;
    }
    while (v5);
  }
}

float faiss::fvec_L2sqr(faiss *this, const float *a2, unint64_t a3)
{
  unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = 0uLL;
    float v6 = this;
    uint64_t v7 = a2;
    do
    {
      float32x4_t v8 = *(float32x4_t *)v6;
      float v6 = (faiss *)((char *)v6 + 16);
      float32x4_t v9 = v8;
      float32x4_t v10 = *(float32x4_t *)v7;
      v7 += 4;
      float32x4_t v11 = vsubq_f32(v9, v10);
      float32x4_t v5 = vmlaq_f32(v5, v11, v11);
      v4 += 4;
    }
    while (v4 < v3);
    unint64_t v12 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    unint64_t v12 = 0;
    float32x4_t v5 = 0uLL;
  }
  float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  uint64_t v14 = (char *)(a3 - v12);
  if (a3 > v12)
  {
    unint64_t v15 = (float *)&a2[v12];
    float v16 = (float *)((char *)this + 4 * v12);
    do
    {
      float v17 = *v16++;
      float v18 = v17;
      float v19 = *v15++;
      float result = result + (float)((float)(v18 - v19) * (float)(v18 - v19));
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t faiss::fvec_inner_products_ny_ref(uint64_t this, float *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      unint64_t v7 = 0;
      if (v6)
      {
        unint64_t v8 = 0;
        float32x4_t v9 = 0uLL;
        do
        {
          float32x4_t v9 = vmlaq_f32(v9, *(float32x4_t *)((char *)a3 + v7), *(float32x4_t *)((char *)a2 + v7));
          v8 += 4;
          v7 += 16;
        }
        while (v8 < v6);
        unint64_t v7 = (((a4 & 0xFFFFFFFFFFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      }
      else
      {
        float32x4_t v9 = 0uLL;
      }
      float v10 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9));
      if (v7 < a4)
      {
        do
        {
          float v10 = v10 + (float)(a2[v7] * a3[v7]);
          ++v7;
        }
        while (a4 != v7);
      }
      *(float *)(this + 4 * v5++) = v10;
      a3 += a4;
    }
    while (v5 != a5);
  }
  return this;
}

float faiss::fvec_inner_product(faiss *this, const float *a2, unint64_t a3)
{
  unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = 0uLL;
    unint64_t v6 = this;
    unint64_t v7 = a2;
    do
    {
      float32x4_t v8 = *(float32x4_t *)v6;
      unint64_t v6 = (faiss *)((char *)v6 + 16);
      float32x4_t v9 = v8;
      float32x4_t v10 = *(float32x4_t *)v7;
      v7 += 4;
      float32x4_t v5 = vmlaq_f32(v5, v10, v9);
      v4 += 4;
    }
    while (v4 < v3);
    unint64_t v11 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    unint64_t v11 = 0;
    float32x4_t v5 = 0uLL;
  }
  float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  uint64_t v13 = (char *)(a3 - v11);
  if (a3 > v11)
  {
    uint64_t v14 = (float *)&a2[v11];
    unint64_t v15 = (float *)((char *)this + 4 * v11);
    do
    {
      float v16 = *v15++;
      float v17 = v16;
      float v18 = *v14++;
      float result = result + (float)(v17 * v18);
      --v13;
    }
    while (v13);
  }
  return result;
}

float faiss::fvec_norm_L2sqr(faiss *this, unint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    float32x4_t v4 = 0uLL;
    float32x4_t v5 = this;
    do
    {
      float32x4_t v6 = *(float32x4_t *)v5;
      float32x4_t v5 = (faiss *)((char *)v5 + 16);
      float32x4_t v4 = vmlaq_f32(v4, v6, v6);
      v2 += 4;
    }
    while (v2 < v3);
    unint64_t v2 = ((v3 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else
  {
    float32x4_t v4 = 0uLL;
  }
  float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v4, v4));
  float32x4_t v8 = (char *)(a2 - v2);
  if (a2 > v2)
  {
    float32x4_t v9 = (float *)((char *)this + 4 * v2);
    do
    {
      float v10 = *v9++;
      float result = result + (float)(v10 * v10);
      --v8;
    }
    while (v8);
  }
  return result;
}

void faiss::fvec_L2sqr_ny(faiss *this, faiss *a2, const float *a3, unint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v5 = a5;
    uint64_t v10 = 4 * a4;
    do
    {
      *(float *)this = faiss::fvec_L2sqr(a2, a3, a4);
      this = (faiss *)((char *)this + 4);
      a3 = (const float *)((char *)a3 + v10);
      --v5;
    }
    while (v5);
  }
}

float faiss::fvec_L1(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = result + vabds_f32(v5, v6);
  }
  return result;
}

float faiss::fvec_Linf(faiss *this, float *a2, const float *a3)
{
  for (float result = 0.0; a3; a3 = (const float *)((char *)a3 - 1))
  {
    float v4 = *(float *)this;
    this = (faiss *)((char *)this + 4);
    float v5 = v4;
    float v6 = *a2++;
    float result = fmaxf(result, vabds_f32(v5, v6));
  }
  return result;
}

uint64_t faiss::fvec_madd(uint64_t this, float *a2, float *a3, float a4, float *a5, float *a6)
{
  for (; this; --this)
  {
    float v6 = *a2++;
    float v7 = v6;
    float v8 = *a3++;
    *a5++ = v7 + (float)(a4 * v8);
  }
  return this;
}

uint64_t faiss::fvec_madd_and_argmin(uint64_t this, uint64_t a2, const float *a3, float a4, const float *a5, float *a6)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = this;
  uint64_t v7 = 0;
  LODWORD(this) = -1;
  float v8 = 1.0e20;
  do
  {
    float v9 = *(float *)(a2 + 4 * v7) + (float)(a4 * a3[v7]);
    a5[v7] = v9;
    if (v9 >= v8)
    {
      this = this;
    }
    else
    {
      float v8 = v9;
      this = v7;
    }
    ++v7;
  }
  while (v6 != v7);
  return this;
}

unint64_t faiss::compute_PQ_dis_tables_dsub2(unint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, size_t __na, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int32x4_t __dst,float32x4_t a54,int32x4_t a55,int32x4_t a56,int32x4_t a57,int32x4_t a58,int32x4_t a59,int32x4_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a64 = *MEMORY[0x1E4F143B8];
  if ((a2 & 7) != 0)
  {
    a22 = 0uLL;
    a23 = 0;
    int v115 = snprintf(0, 0, "Error: '%s' failed", "ksub % 8 == 0");
    std::string::resize((std::string *)&a22, v115 + 1, 0);
    if (a23 >= 0) {
      v116 = (char *)&a22;
    }
    else {
      v116 = (char *)a22;
    }
    if (a23 >= 0) {
      size_t v117 = HIBYTE(a23);
    }
    else {
      size_t v117 = *((void *)&a22 + 1);
    }
    snprintf(v116, v117, "Error: '%s' failed", "ksub % 8 == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &a22, "void faiss::compute_PQ_dis_tables_dsub2(size_t, size_t, const float *, size_t, const float *, BOOL, float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/distances_simd.cpp", 931);
  }
  if (result >= 2)
  {
    int v122 = 0;
    unint64_t v66 = 0;
    unint64_t v67 = result >> 1;
    uint64_t v135 = 2 * a2;
    uint64_t v120 = 32 * a2;
    uint64_t v68 = 8 * a2;
    unint64_t v69 = 4;
    uint64_t v128 = 3 * a2;
    unint64_t v129 = result;
    unint64_t v130 = a2;
    do
    {
      unint64_t v121 = v69;
      if (v69 >= v67) {
        int v70 = v67;
      }
      else {
        int v70 = v69;
      }
      unint64_t v71 = v66 + 4;
      if (a2)
      {
        unint64_t v127 = 0;
        int v72 = v122 + v70;
        if (v71 >= v67) {
          unint64_t v73 = v67;
        }
        else {
          unint64_t v73 = v66 + 4;
        }
        uint64_t v74 = (int)v73;
        uint64_t v75 = a5 + 8 * v66;
        int v136 = v73 - v66;
        __int n = 8 * ((v73 - v66) & 0x7FFFFFFF);
        uint64_t v133 = v75;
        unint64_t v76 = (int)v73 - v66;
        int v77 = a3;
        unint64_t vars8 = v73;
        unint64_t v134 = v66 + 4;
        unint64_t v131 = v66;
        do
        {
          uint64_t v78 = 0;
          uint64_t v79 = v77;
          do
          {
            if ((int)v66 < (int)v73)
            {
              uint64_t v80 = 0;
              uint64_t v81 = v79;
              do
              {
                __dst.i64[v80++] = *v81;
                uint64_t v81 = (uint64_t *)((char *)v81 + v68);
              }
              while (v72 != v80);
              a8 = __dst;
            }
            float32x4_t v82 = a54;
            int v83 = (int32x4_t *)(&a22 + 2 * v78);
            *int v83 = a8;
            v83[1] = (int32x4_t)v82;
            ++v78;
            ++v79;
          }
          while (v78 != 8);
          v126 = v77;
          if (a4)
          {
            uint64_t v84 = 0;
            uint64_t v85 = a7 + 4 * v127;
            do
            {
              if (v74 == v71)
              {
                unint64_t v86 = (float32x4_t *)(v75 + 4 * v84 * result);
                float32x4_t v88 = *v86;
                float32x4_t v87 = v86[1];
              }
              else
              {
                float32x4_t v87 = 0uLL;
                __dst = 0u;
                a54 = 0u;
                if (v136 < 1)
                {
                  float32x4_t v88 = 0uLL;
                }
                else
                {
                  memcpy(&__dst, (const void *)(v75 + 4 * v84 * result), __n);
                  unint64_t v71 = v134;
                  uint64_t v85 = a7 + 4 * v127;
                  uint64_t v75 = v133;
                  a2 = v130;
                  unint64_t v66 = v131;
                  float result = v129;
                  float32x4_t v88 = (float32x4_t)__dst;
                  float32x4_t v87 = a54;
                }
              }
              unint64_t v89 = (v66 + v84 * v67) * a2;
              uint64_t v90 = 0;
              long long v91 = (float32x4_t *)&a25;
              if (a6)
              {
                do
                {
                  float32x4_t v92 = vmulq_f32(v88, v91[-2]);
                  float32x4_t v93 = vmulq_f32(v87, v91[-1]);
                  float32x4_t v94 = *v91;
                  float32x4_t v95 = v91[1];
                  v91 += 4;
                  uint64_t v96 = (float32x4_t *)&__dst.i8[v90];
                  *uint64_t v96 = vpaddq_f32(v92, vmulq_f32(v88, v94));
                  v96[1] = vpaddq_f32(v93, vmulq_f32(v87, v95));
                  v90 += 32;
                }
                while (v90 != 128);
                float v97 = (int32x4_t *)(v85 + 4 * v89);
                a8 = __dst;
                int32x4_t v98 = (int32x4_t)a54;
                int32x4_t v99 = a55;
                int32x4_t v100 = a56;
                int32x4_t v101 = a57;
                int32x4_t v102 = a58;
                int32x4_t v103 = a59;
                int32x4_t v104 = a60;
                switch(v76)
                {
                  case 1uLL:
                    goto LABEL_33;
                  case 2uLL:
                    goto LABEL_32;
                  case 3uLL:
                    goto LABEL_31;
                  case 4uLL:
                    goto LABEL_30;
                  default:
                    break;
                }
              }
              else
              {
                do
                {
                  float32x4_t v105 = vsubq_f32(v88, v91[-2]);
                  float32x4_t v106 = vsubq_f32(v87, v91[-1]);
                  float32x4_t v107 = *v91;
                  float32x4_t v108 = v91[1];
                  v91 += 4;
                  float32x4_t v109 = vsubq_f32(v88, v107);
                  float32x4_t v110 = vsubq_f32(v87, v108);
                  v111 = (float32x4_t *)&__dst.i8[v90];
                  float32x4_t *v111 = vpaddq_f32(vmulq_f32(v105, v105), vmulq_f32(v109, v109));
                  v111[1] = vpaddq_f32(vmulq_f32(v106, v106), vmulq_f32(v110, v110));
                  v90 += 32;
                }
                while (v90 != 128);
                float v97 = (int32x4_t *)(v85 + 4 * v89);
                a8 = __dst;
                int32x4_t v98 = (int32x4_t)a54;
                int32x4_t v99 = a55;
                int32x4_t v100 = a56;
                int32x4_t v101 = a57;
                int32x4_t v102 = a58;
                int32x4_t v103 = a59;
                int32x4_t v104 = a60;
                switch(v76)
                {
                  case 1uLL:
                    goto LABEL_33;
                  case 2uLL:
                    goto LABEL_32;
                  case 3uLL:
                    goto LABEL_31;
                  case 4uLL:
LABEL_30:
                    v112 = (int32x4_t *)((char *)v97 + 4 * v128);
                    int32x4_t *v112 = vuzp2q_s32(v98, v100);
                    v112[1] = vuzp2q_s32(v102, v104);
LABEL_31:
                    v113 = (int32x4_t *)((char *)v97 + 4 * v135);
                    int32x4_t *v113 = vuzp1q_s32(v98, v100);
                    v113[1] = vuzp1q_s32(v102, v104);
LABEL_32:
                    v114 = (int32x4_t *)((char *)v97 + 4 * a2);
                    int32x4_t *v114 = vuzp2q_s32(a8, v99);
                    v114[1] = vuzp2q_s32(v101, v103);
LABEL_33:
                    a8 = vuzp1q_s32(a8, v99);
                    *float v97 = a8;
                    v97[1] = vuzp1q_s32(v101, v103);
                    break;
                  default:
                    break;
                }
              }
              ++v84;
            }
            while (v84 != a4);
          }
          int v77 = v126 + 8;
          v127 += 8;
          LODWORD(v73) = vars8;
        }
        while (v127 < a2);
      }
      unint64_t v69 = v121 + 4;
      v122 -= 4;
      a3 = (uint64_t *)((char *)a3 + v120);
      unint64_t v66 = v71;
    }
    while (v71 < v67);
  }
  return result;
}

void sub_1DD00022C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_free_exception(v38);
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::InvertedLists::InvertedLists(void *this, uint64_t a2, uint64_t a3)
{
  *this = &unk_1F383ECC8;
  this[1] = a2;
  this[2] = a3;
  return this;
}

uint64_t faiss::InvertedLists::get_single_id(faiss::InvertedLists *this, uint64_t a2, unint64_t a3)
{
  if ((**(uint64_t (***)(faiss::InvertedLists *))this)(this) <= a3) {
    faiss::InvertedLists::get_single_id();
  }
  return *(void *)((*(uint64_t (**)(faiss::InvertedLists *, uint64_t))(*(void *)this + 16))(this, a2)
                   + 8 * a3);
}

unint64_t faiss::InvertedLists::get_single_code(faiss::InvertedLists *this, uint64_t a2, unint64_t a3)
{
  if ((**(uint64_t (***)(faiss::InvertedLists *))this)(this) <= a3) {
    faiss::InvertedLists::get_single_code();
  }
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t))(*(void *)this + 8))(this, a2)
       + *((void *)this + 2) * a3;
}

uint64_t faiss::InvertedLists::add_entry(faiss::InvertedLists *this, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  uint64_t v5 = a3;
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t, uint64_t, uint64_t *, const unsigned __int8 *))(*(void *)this + 72))(this, a2, 1, &v5, a4);
}

uint64_t faiss::InvertedLists::update_entry(faiss::InvertedLists *this, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned __int8 *a5)
{
  uint64_t v6 = a4;
  return (*(uint64_t (**)(faiss::InvertedLists *, uint64_t, uint64_t, uint64_t, uint64_t *, const unsigned __int8 *))(*(void *)this + 88))(this, a2, a3, 1, &v6, a5);
}

void *faiss::InvertedLists::reset(void *this)
{
  if (this[1])
  {
    uint64_t v1 = this;
    unint64_t v2 = 0;
    do
      this = (void *)(*(uint64_t (**)(void *, unint64_t, void))(*v1 + 96))(v1, v2++, 0);
    while (v2 < v1[1]);
  }
  return this;
}

void faiss::InvertedLists::merge_from(faiss::InvertedLists *this, faiss::InvertedLists *a2, uint64_t a3)
{
  if (*((void *)this + 1))
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = (**(uint64_t (***)(faiss::InvertedLists *, unint64_t))a2)(a2, v6);
      unint64_t v21 = a2;
      uint64_t v8 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(void *)a2 + 16))(a2, v6);
      uint64_t v22 = (uint64_t *)v8;
      unint64_t v23 = v6;
      if (a3)
      {
        std::vector<long long>::vector(&__p, v7);
        float v9 = __p;
        if (v7)
        {
          uint64_t v10 = v22;
          unint64_t v11 = __p;
          unint64_t v12 = v7;
          do
          {
            uint64_t v13 = *v10++;
            *v11++ = v13 + a3;
            --v12;
          }
          while (v12);
        }
        unint64_t v15 = a2;
        uint64_t v16 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(void *)a2 + 8))(a2, v6);
        unint64_t v17 = v6;
        (*(void (**)(faiss::InvertedLists *, unint64_t, unint64_t, void *, uint64_t))(*(void *)this + 72))(this, v6, v7, v9, v16);
        faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v15);
        if (__p)
        {
          float v19 = __p;
          operator delete(__p);
        }
      }
      else
      {
        uint64_t v14 = v8;
        long long __p = a2;
        float v19 = (void *)(*(uint64_t (**)(faiss::InvertedLists *, unint64_t))(*(void *)a2 + 8))(a2, v6);
        unint64_t v20 = v6;
        (*(void (**)(faiss::InvertedLists *, unint64_t, unint64_t, uint64_t, void *))(*(void *)this + 72))(this, v6, v7, v14, v19);
        faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&__p);
      }
      (*(void (**)(faiss::InvertedLists *, unint64_t, void))(*(void *)a2 + 96))(a2, v6, 0);
      faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v21);
      ++v6;
    }
    while (v6 < *((void *)this + 1));
  }
}

void sub_1DD000714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

double faiss::InvertedLists::imbalance_factor(faiss::InvertedLists *this)
{
  std::vector<int>::vector(&v9, *((void *)this + 1));
  if (*((void *)this + 1))
  {
    unint64_t v3 = 0;
    do
    {
      int v4 = (**(uint64_t (***)(faiss::InvertedLists *, unint64_t))this)(this, v3);
      begiint n = v9.__begin_;
      v9.__begin_[v3++] = v4;
      unint64_t v6 = (faiss *)*((void *)this + 1);
    }
    while (v3 < (unint64_t)v6);
  }
  else
  {
    unint64_t v6 = 0;
    begiint n = v9.__begin_;
  }
  double v7 = faiss::imbalance_factor(v6, begin, v2);
  if (v9.__begin_)
  {
    v9.__end_ = v9.__begin_;
    operator delete(v9.__begin_);
  }
  return v7;
}

void sub_1DD00081C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::InvertedLists::print_stats(faiss::InvertedLists *this)
{
  std::vector<int>::vector(&v8, 0x28uLL);
  begiint n = v8.__begin_;
  if (*((void *)this + 1))
  {
    unint64_t v3 = 0;
    do
    {
      if (v8.__end_ != begin)
      {
        unint64_t v4 = 0;
        while ((unint64_t)(**(uint64_t (***)(faiss::InvertedLists *, unint64_t))this)(this, v3) >> v4)
        {
          ++v4;
          begiint n = v8.__begin_;
          if (v4 >= v8.__end_ - v8.__begin_) {
            goto LABEL_9;
          }
        }
        begiint n = v8.__begin_;
        ++v8.__begin_[v4];
      }
LABEL_9:
      ++v3;
    }
    while (v3 < *((void *)this + 1));
  }
  std::vector<int>::pointer end = v8.__end_;
  if (v8.__end_ != begin)
  {
    unint64_t v6 = 0;
    do
    {
      int v7 = begin[v6];
      if (v7)
      {
        printf("list size in < %d: %d instances\n", 1 << v6, v7);
        begiint n = v8.__begin_;
        std::vector<int>::pointer end = v8.__end_;
      }
      ++v6;
    }
    while (v6 < end - begin);
  }
  if (begin)
  {
    v8.__end_ = begin;
    operator delete(begin);
  }
}

void sub_1DD000958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t faiss::InvertedLists::compute_ntotal(faiss::InvertedLists *this)
{
  if (!*((void *)this + 1)) {
    return 0;
  }
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  do
    v3 += (**(uint64_t (***)(faiss::InvertedLists *, uint64_t))this)(this, v2++);
  while (v2 < *((void *)this + 1));
  return v3;
}

faiss::ArrayInvertedLists *faiss::ArrayInvertedLists::ArrayInvertedLists(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3)
{
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *(void *)this = &unk_1F383F148;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  std::vector<std::vector<long long>>::resize((uint64_t *)this + 6, a2);
  std::vector<std::vector<unsigned char>>::resize(v5, a2);
  return this;
}

void sub_1DD000A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        std::vector<int> v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned char>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned char>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        std::vector<int> v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t faiss::ArrayInvertedLists::add_entries(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3, const uint64_t *a4, const unsigned __int8 *a5)
{
  if (!a3) {
    return 0;
  }
  if (*((void *)this + 1) <= a2) {
    faiss::ArrayInvertedLists::add_entries();
  }
  uint64_t v10 = (void *)(*((void *)this + 6) + 24 * a2);
  uint64_t v11 = v10[1] - *v10;
  uint64_t v12 = v11 >> 3;
  unint64_t v13 = a3 + (v11 >> 3);
  std::vector<long long>::resize((uint64_t)v10, v13);
  memcpy((void *)(*(void *)(*((void *)this + 6) + 24 * a2) + v11), a4, 8 * a3);
  uint64_t v14 = *((void *)this + 2);
  unint64_t v15 = (unint64_t *)(*((void *)this + 3) + 24 * a2);
  unint64_t v16 = *v15;
  unint64_t v17 = v15[1] - *v15;
  if (v14 * v13 <= v17)
  {
    if (v14 * v13 < v17) {
      v15[1] = v16 + v14 * v13;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v15, v14 * v13 - v17);
    uint64_t v14 = *((void *)this + 2);
    unint64_t v16 = *(void *)(*((void *)this + 3) + 24 * a2);
  }
  memcpy((void *)(v16 + v14 * v12), a5, v14 * a3);
  return v12;
}

uint64_t faiss::ArrayInvertedLists::list_size(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((void *)this + 1) <= a2) {
    faiss::ArrayInvertedLists::list_size();
  }
  return (uint64_t)(*(void *)(*((void *)this + 6) + 24 * a2 + 8) - *(void *)(*((void *)this + 6) + 24 * a2)) >> 3;
}

uint64_t faiss::ArrayInvertedLists::get_codes(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((void *)this + 1) <= a2) {
    faiss::ArrayInvertedLists::get_codes();
  }
  return *(void *)(*((void *)this + 3) + 24 * a2);
}

uint64_t faiss::ArrayInvertedLists::get_ids(faiss::ArrayInvertedLists *this, unint64_t a2)
{
  if (*((void *)this + 1) <= a2) {
    faiss::ArrayInvertedLists::get_ids();
  }
  return *(void *)(*((void *)this + 6) + 24 * a2);
}

void faiss::ArrayInvertedLists::resize(faiss::ArrayInvertedLists *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = 3 * a2;
  std::vector<long long>::resize(*((void *)this + 6) + 24 * a2, a3);
  unint64_t v6 = (unint64_t *)(*((void *)this + 3) + 8 * v5);
  unint64_t v7 = *((void *)this + 2) * a3;
  unint64_t v8 = v6[1] - *v6;
  if (v7 <= v8)
  {
    if (v7 < v8) {
      v6[1] = *v6 + v7;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v6, v7 - v8);
  }
}

void *faiss::ArrayInvertedLists::update_entries(faiss::ArrayInvertedLists *this, unint64_t a2, uint64_t a3, uint64_t a4, void *__src, const unsigned __int8 *a6)
{
  if (*((void *)this + 1) <= a2) {
    faiss::ArrayInvertedLists::update_entries();
  }
  uint64_t v10 = *(void *)(*((void *)this + 6) + 24 * a2);
  if (a4 + a3 > (unint64_t)((*(void *)(*((void *)this + 6) + 24 * a2 + 8) - v10) >> 3)) {
    faiss::ArrayInvertedLists::update_entries();
  }
  memcpy((void *)(v10 + 8 * a3), __src, 8 * a4);
  uint64_t v12 = *((void *)this + 2);
  unint64_t v13 = (void *)(*(void *)(*((void *)this + 3) + 24 * a2) + v12 * a3);
  return memcpy(v13, a6, v12 * a4);
}

void faiss::ArrayInvertedLists::~ArrayInvertedLists(faiss::ArrayInvertedLists *this)
{
  *(void *)this = &unk_1F383F148;
  uint64_t v1 = (void **)((char *)this + 24);
  unint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = v1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(void *)this = &unk_1F383F148;
  uint64_t v1 = (void **)((char *)this + 24);
  unint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = v1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F383F148;
  unint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1E01AF670](this, 0x10A1C40A1EC57E1);
}

void faiss::ReadOnlyInvertedLists::add_entries(faiss::ReadOnlyInvertedLists *this, unint64_t a2, unint64_t a3, const uint64_t *a4, const unsigned __int8 *a5)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual size_t faiss::ReadOnlyInvertedLists::add_entries(size_t, size_t, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 191);
}

void sub_1DD0010A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::ReadOnlyInvertedLists::update_entries(faiss::ReadOnlyInvertedLists *this, unint64_t a2, unint64_t a3, unint64_t a4, const uint64_t *a5, const unsigned __int8 *a6)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v7, "not implemented");
  faiss::FaissException::FaissException(exception, v7, "virtual void faiss::ReadOnlyInvertedLists::update_entries(size_t, size_t, size_t, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 200);
}

void sub_1DD001160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::ReadOnlyInvertedLists::resize(faiss::ReadOnlyInvertedLists *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "not implemented");
  faiss::FaissException::FaissException(exception, v2, "virtual void faiss::ReadOnlyInvertedLists::resize(size_t, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 204);
}

void sub_1DD001218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

faiss::HStackInvertedLists *faiss::HStackInvertedLists::HStackInvertedLists(faiss::HStackInvertedLists *this, int a2, const faiss::InvertedLists **a3)
{
  if (a2 < 1) {
    long long v5 = 0uLL;
  }
  else {
    long long v5 = *(_OWORD *)((char *)*a3 + 8);
  }
  *(_OWORD *)((char *)this + 8) = v5;
  *(void *)this = &unk_1F383F3B8;
  *((void *)this + 3) = 0;
  unint64_t v6 = (char **)((char *)this + 24);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (a2 < 1)
  {
    memset(&v30, 0, sizeof(v30));
    int v26 = snprintf(0, 0, "Error: '%s' failed", "nil > 0");
    std::string::resize(&v30, v26 + 1, 0);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v30;
    }
    else {
      uint64_t v27 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v30.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v27, size, "Error: '%s' failed", "nil > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v30, "faiss::HStackInvertedLists::HStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 215);
  }
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<int> v9 = (void *)((char *)this + 40);
  uint64_t v10 = a2;
  do
  {
    if ((unint64_t)v7 >= *v9)
    {
      uint64_t v11 = (v7 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = *v9 - (void)*v6;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 40, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      int v16 = &v15[8 * v11];
      *(void *)int v16 = a3[v8];
      unint64_t v7 = v16 + 8;
      float v18 = (char *)*((void *)this + 3);
      unint64_t v17 = (char *)*((void *)this + 4);
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        unint64_t v17 = *v6;
      }
      *((void *)this + 3) = v16;
      *((void *)this + 4) = v7;
      *((void *)this + 5) = &v15[8 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)unint64_t v7 = a3[v8];
      v7 += 8;
    }
    *((void *)this + 4) = v7;
    unint64_t v20 = a3[v8];
    if (*((void *)v20 + 2) != *((void *)this + 2) || *((void *)v20 + 1) != *((void *)this + 1))
    {
      memset(&v30, 0, sizeof(v30));
      int v22 = snprintf(0, 0, "Error: '%s' failed", "ils_in[i]->code_size == code_size && ils_in[i]->nlist == nlist");
      std::string::resize(&v30, v22 + 1, 0);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v23 = &v30;
      }
      else {
        unint64_t v23 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v24 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v24 = v30.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v23, v24, "Error: '%s' failed", "ils_in[i]->code_size == code_size && ils_in[i]->nlist == nlist");
      int v25 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v25, &v30, "faiss::HStackInvertedLists::HStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 219);
    }
    ++v8;
  }
  while (v8 != v10);
  return this;
}

void sub_1DD001550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::HStackInvertedLists::list_size(faiss::HStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (*((void *)this + 4) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    v6 += (***(uint64_t (****)(void, uint64_t))(v2 + 8 * v5))(*(void *)(v2 + 8 * v5), a2);
    ++v5;
    uint64_t v2 = *((void *)this + 3);
  }
  while (v5 < (*((void *)this + 4) - v2) >> 3);
  return v6;
}

void faiss::HStackInvertedLists::get_codes(faiss::HStackInvertedLists *this)
{
}

void faiss::HStackInvertedLists::get_single_code(faiss::HStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *((void *)this + 3);
  if (*((void *)this + 4) == v4)
  {
    uint64_t v9 = a3;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = (***(uint64_t (****)(void, uint64_t))(v4 + 8 * v7))(*(void *)(v4 + 8 * v7), a2);
      uint64_t v9 = v3 - v8;
      if (v3 < v8) {
        operator new[]();
      }
      ++v7;
      uint64_t v4 = *((void *)this + 3);
      v3 -= v8;
    }
    while (v7 < (*((void *)this + 4) - v4) >> 3);
  }
  memset(&v14, 0, sizeof(v14));
  int v10 = snprintf(0, 0, "offset %zd unknown", v9);
  std::string::resize(&v14, v10 + 1, 0);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v14;
  }
  else {
    uint64_t v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v14.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v11, size, "offset %zd unknown", v9);
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(exception, &v14, "virtual const uint8_t *faiss::HStackInvertedLists::get_single_code(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 260);
}

void sub_1DD001938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::HStackInvertedLists::release_codes(faiss::HStackInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  if (a3) {
    JUMPOUT(0x1E01AF650);
  }
}

void faiss::HStackInvertedLists::get_ids(faiss::HStackInvertedLists *this)
{
}

uint64_t faiss::HStackInvertedLists::get_single_id(faiss::HStackInvertedLists *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *((void *)this + 3);
  if (*((void *)this + 4) == v4)
  {
    uint64_t v10 = a3;
LABEL_5:
    memset(&v18, 0, sizeof(v18));
    uint64_t v11 = v10;
    int v12 = snprintf(0, 0, "offset %zd unknown", v10);
    std::string::resize(&v18, v12 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v18;
    }
    else {
      uint64_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v18.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v13, size, "offset %zd unknown", v11);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "virtual Index::idx_t faiss::HStackInvertedLists::get_single_id(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 291);
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v4 + 8 * v7);
    unint64_t v9 = (**(uint64_t (***)(uint64_t, uint64_t))v8)(v8, a2);
    uint64_t v10 = v3 - v9;
    if (v3 < v9) {
      break;
    }
    ++v7;
    uint64_t v4 = *((void *)this + 3);
    v3 -= v9;
    if (v7 >= (*((void *)this + 4) - v4) >> 3) {
      goto LABEL_5;
    }
  }
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v8 + 40);
  return v16(v8, a2, v3);
}

void sub_1DD001C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::HStackInvertedLists::release_ids(faiss::HStackInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  if (a3) {
    JUMPOUT(0x1E01AF650);
  }
}

uint64_t faiss::HStackInvertedLists::prefetch_lists(uint64_t this, const uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(this + 24);
  if (*(void *)(this + 32) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    do
    {
      this = (*(uint64_t (**)(void, const uint64_t *, uint64_t))(**(void **)(v3 + 8 * v7) + 56))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 24);
    }
    while (v7 < (*(void *)(v6 + 32) - v3) >> 3);
  }
  return this;
}

void *faiss::SliceInvertedLists::SliceInvertedLists(void *this, const faiss::InvertedLists *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 2);
  this[1] = a4 - a3;
  this[2] = v4;
  *this = &unk_1F383F328;
  this[3] = a2;
  this[4] = a3;
  this[5] = a4;
  return this;
}

{
  uint64_t v4;

  uint64_t v4 = *((void *)a2 + 2);
  this[1] = a4 - a3;
  this[2] = v4;
  *this = &unk_1F383F328;
  this[3] = a2;
  this[4] = a3;
  this[5] = a4;
  return this;
}

uint64_t faiss::SliceInvertedLists::list_size(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t v2 = (uint64_t (***)(void, unint64_t))*((void *)this + 3);
  uint64_t v4 = **v2;
  return v4(v2, v3);
}

unint64_t faiss::anonymous namespace'::translate_list_no(faiss::_anonymous_namespace_ *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0 || *((void *)this + 1) <= a2)
  {
    memset(&v7, 0, sizeof(v7));
    int v3 = snprintf(0, 0, "Error: '%s' failed", "list_no >= 0 && list_no < sil->nlist");
    std::string::resize(&v7, v3 + 1, 0);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &v7;
    }
    else {
      uint64_t v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
    }
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v7.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v4, size, "Error: '%s' failed", "list_no >= 0 && list_no < sil->nlist");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v7, "idx_t faiss::(anonymous namespace)::translate_list_no(const SliceInvertedLists *, idx_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 315);
  }
  return *((void *)this + 4) + a2;
}

void sub_1DD001EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::SliceInvertedLists::get_codes(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v2 + 8);
  return v4(v2, v3);
}

uint64_t faiss::SliceInvertedLists::get_single_code(faiss::SliceInvertedLists *this, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v4 + 48);
  return v6(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::release_codes(faiss::SliceInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, unint64_t, const unsigned __int8 *))(*(void *)v4 + 24);
  return v6(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::get_ids(faiss::SliceInvertedLists *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(*(void *)v2 + 16);
  return v4(v2, v3);
}

uint64_t faiss::SliceInvertedLists::get_single_id(faiss::SliceInvertedLists *this, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v4 + 40);
  return v6(v4, v5, a3);
}

uint64_t faiss::SliceInvertedLists::release_ids(faiss::SliceInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, unint64_t, const uint64_t *))(*(void *)v4 + 32);
  return v6(v4, v5, a3);
}

void faiss::SliceInvertedLists::prefetch_lists(faiss::SliceInvertedLists *this, const uint64_t *a2, int a3)
{
  long long __p = 0;
  unint64_t v21 = 0;
  int v22 = 0;
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      unint64_t v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0)
      {
        unint64_t v9 = v8;
        uint64_t v10 = v21;
        if (v21 >= v22)
        {
          int v12 = __p;
          uint64_t v13 = v21 - __p;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = (char *)v22 - (char *)__p;
          if (((char *)v22 - (char *)__p) >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v22, v16);
            int v12 = __p;
            uint64_t v10 = v21;
          }
          else
          {
            unint64_t v17 = 0;
          }
          std::string v18 = (unint64_t *)&v17[8 * v13];
          *std::string v18 = v9;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            unint64_t v19 = *--v10;
            *--std::string v18 = v19;
          }
          long long __p = v18;
          int v22 = (unint64_t *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          unint64_t *v21 = v8;
          uint64_t v11 = v21 + 1;
        }
        unint64_t v21 = v11;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  if (__p) {
    operator delete(__p);
  }
}

void sub_1DD0022E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

faiss::VStackInvertedLists *faiss::VStackInvertedLists::VStackInvertedLists(faiss::VStackInvertedLists *this, int a2, const faiss::InvertedLists **a3)
{
  if (a2 < 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
      v7 += *((void *)a3[v6++] + 1);
    while (a2 != v6);
    uint64_t v8 = *((void *)*a3 + 2);
  }
  *((void *)this + 1) = v7;
  *((void *)this + 2) = v8;
  *(void *)this = &unk_1F383F6E0;
  *(_OWORD *)((char *)this + 24) = 0u;
  unint64_t v9 = (char **)((char *)this + 24);
  uint64_t v10 = (void *)((char *)this + 48);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a2 <= 0)
  {
    memset(&v34, 0, sizeof(v34));
    int v30 = snprintf(0, 0, "Error: '%s' failed", "nil > 0");
    std::string::resize(&v34, v30 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v34;
    }
    else {
      uint64_t v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v34.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v31, size, "Error: '%s' failed", "nil > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "faiss::VStackInvertedLists::VStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 413);
  }
  std::vector<long long>::resize((uint64_t)this + 48, (a2 + 1));
  uint64_t v11 = 0;
  int v12 = (void *)((char *)this + 40);
  uint64_t v13 = (char *)*((void *)this + 4);
  do
  {
    if ((unint64_t)v13 >= *v12)
    {
      uint64_t v14 = (v13 - *v9) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = *v12 - (void)*v9;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        std::string v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 40, v17);
      }
      else {
        std::string v18 = 0;
      }
      unint64_t v19 = &v18[8 * v14];
      *(void *)unint64_t v19 = a3[v11];
      uint64_t v13 = v19 + 8;
      unint64_t v21 = (char *)*((void *)this + 3);
      unint64_t v20 = (char *)*((void *)this + 4);
      if (v20 != v21)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v19 - 1) = v22;
          v19 -= 8;
        }
        while (v20 != v21);
        unint64_t v20 = *v9;
      }
      *((void *)this + 3) = v19;
      *((void *)this + 4) = v13;
      *((void *)this + 5) = &v18[8 * v17];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)uint64_t v13 = a3[v11];
      v13 += 8;
    }
    *((void *)this + 4) = v13;
    unint64_t v23 = a3[v11];
    if (*((void *)v23 + 2) != *((void *)this + 2))
    {
      memset(&v34, 0, sizeof(v34));
      int v26 = snprintf(0, 0, "Error: '%s' failed", "ils_in[i]->code_size == code_size");
      std::string::resize(&v34, v26 + 1, 0);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &v34;
      }
      else {
        uint64_t v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v28 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v28 = v34.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v27, v28, "Error: '%s' failed", "ils_in[i]->code_size == code_size");
      float v29 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v29, &v34, "faiss::VStackInvertedLists::VStackInvertedLists(int, const InvertedLists **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 417);
    }
    uint64_t v24 = *((void *)v23 + 1) + *(void *)(*v10 + 8 * v11++);
    *(void *)(*v10 + 8 * v11) = v24;
  }
  while (v11 != a2);
  return this;
}

void sub_1DD002650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v18);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v20 = *v17;
  if (*v17)
  {
    *(void *)(v15 + 56) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 32) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::VStackInvertedLists::list_size(faiss::VStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = ***(uint64_t (****)(void))(*((void *)this + 3)
  return v2();
}

uint64_t faiss::anonymous namespace'::translate_list_no(faiss::_anonymous_namespace_ *this, uint64_t a2)
{
  if (a2 < 0 || *((void *)this + 1) <= (unint64_t)a2)
  {
    memset(&v13, 0, sizeof(v13));
    int v9 = snprintf(0, 0, "Error: '%s' failed", "list_no >= 0 && list_no < vil->nlist");
    std::string::resize(&v13, v9 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v13;
    }
    else {
      uint64_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v13.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v10, size, "Error: '%s' failed", "list_no >= 0 && list_no < vil->nlist");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v13, "int faiss::(anonymous namespace)::translate_list_no(const VStackInvertedLists *, idx_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 384);
  }
  uint64_t v2 = (*((void *)this + 4) - *((void *)this + 3)) >> 3;
  uint64_t v3 = *((void *)this + 6);
  if ((int)v2 < 2)
  {
    uint64_t result = 0;
    uint64_t v8 = 1;
  }
  else
  {
    LODWORD(result) = 0;
    do
    {
      int v5 = v2 + result;
      if ((int)v2 + (int)result < 0 != __OFADD__(v2, result)) {
        ++v5;
      }
      int v6 = v5 >> 1;
      uint64_t v7 = *(void *)(v3 + 8 * v6);
      if (v7 <= a2) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = result;
      }
      if (v7 > a2) {
        LODWORD(v2) = v6;
      }
    }
    while ((int)result + 1 < (int)v2);
    uint64_t v8 = (int)result + 1;
  }
  if (*(void *)(v3 + 8 * (int)result) > a2 || *(void *)(v3 + 8 * v8) <= a2) {
  return result;
  }
}

void sub_1DD002890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::VStackInvertedLists::get_codes(faiss::VStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 8);
  return v2();
}

uint64_t faiss::VStackInvertedLists::get_single_code(faiss::VStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 48);
  return v2();
}

uint64_t faiss::VStackInvertedLists::release_codes(faiss::VStackInvertedLists *this, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 24);
  return v3();
}

uint64_t faiss::VStackInvertedLists::get_ids(faiss::VStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 16);
  return v2();
}

uint64_t faiss::VStackInvertedLists::get_single_id(faiss::VStackInvertedLists *this, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 40);
  return v2();
}

uint64_t faiss::VStackInvertedLists::release_ids(faiss::VStackInvertedLists *this, uint64_t a2, const uint64_t *a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 3)
                           + 32);
  return v3();
}

void faiss::VStackInvertedLists::prefetch_lists(faiss::VStackInvertedLists *this, uint64_t *a2, int a3)
{
  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v34, a3, (const std::vector<int>::value_type *)&__x);
  std::vector<int>::size_type v6 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3;
  LODWORD(v32.__begin_) = 0;
  std::vector<int>::vector(&__x, v6, (const std::vector<int>::value_type *)&v32);
  uint64_t v7 = a3;
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a2[v8];
      if ((v9 & 0x8000000000000000) == 0)
      {
        v34.__begin_[v8] = v10;
        ++__x.__begin_[v10];
      }
      ++v8;
    }
    while (a3 != v8);
  }
  std::vector<int>::size_type v11 = ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3) + 1;
  LODWORD(__p[0]) = 0;
  std::vector<int>::vector(&v32, v11, (const std::vector<int>::value_type *)__p);
  uint64_t v12 = *((void *)this + 4) - *((void *)this + 3);
  if (v12)
  {
    uint64_t v13 = v12 >> 3;
    begiint n = __x.__begin_;
    if ((unint64_t)(v12 >> 3) <= 1) {
      uint64_t v13 = 1;
    }
    std::vector<int>::pointer v15 = v32.__begin_ + 1;
    int v16 = *v32.__begin_;
    do
    {
      int v17 = *begin++;
      v16 += v17;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  std::vector<long long>::vector(__p, *(v32.__end_ - 1));
  if (a3 >= 1)
  {
    std::vector<int>::pointer v18 = v34.__begin_;
    std::vector<int>::pointer v19 = v32.__begin_;
    unint64_t v20 = __p[0];
    do
    {
      uint64_t v22 = *a2++;
      uint64_t v21 = v22;
      if ((v22 & 0x8000000000000000) == 0)
      {
        uint64_t v23 = *v18;
        uint64_t v24 = v19[v23];
        uint64_t v25 = v21 - *(void *)(*((void *)this + 6) + 8 * v23);
        v19[v23] = v24 + 1;
        v20[v24] = v25;
      }
      ++v18;
      --v7;
    }
    while (v7);
  }
  uint64_t v27 = *((void *)this + 3);
  uint64_t v26 = *((void *)this + 4);
  if (v26 != v27)
  {
    unint64_t v28 = 0;
    int v29 = 0;
    do
    {
      int v30 = __x.__begin_[v28];
      if (v30 >= 1)
      {
        (*(void (**)(void, char *, void))(**(void **)(v27 + 8 * v28) + 56))(*(void *)(v27 + 8 * v28), (char *)__p[0] + 8 * v29, __x.__begin_[v28]);
        uint64_t v27 = *((void *)this + 3);
        uint64_t v26 = *((void *)this + 4);
      }
      v29 += v30;
      ++v28;
    }
    while (v28 < (v26 - v27) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
}

void sub_1DD002D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *faiss::MaskedInvertedLists::MaskedInvertedLists(void *this, const faiss::InvertedLists *a2, const faiss::InvertedLists *a3)
{
  uint64_t v4 = *((void *)a2 + 1);
  uint64_t v3 = *((void *)a2 + 2);
  this[1] = v4;
  this[2] = v3;
  *this = &unk_1F383F5A8;
  this[3] = a2;
  this[4] = a3;
  if (*((void *)a3 + 1) != v4)
  {
    memset(&v13, 0, sizeof(v13));
    int v5 = snprintf(0, 0, "Error: '%s' failed", "il1->nlist == nlist");
    std::string::resize(&v13, v5 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<int>::size_type v6 = &v13;
    }
    else {
      std::vector<int>::size_type v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v13.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v6, size, "Error: '%s' failed", "il1->nlist == nlist");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v13, "faiss::MaskedInvertedLists::MaskedInvertedLists(const InvertedLists *, const InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 513);
  }
  if (*((void *)a3 + 2) != v3)
  {
    memset(&v13, 0, sizeof(v13));
    int v9 = snprintf(0, 0, "Error: '%s' failed", "il1->code_size == code_size");
    std::string::resize(&v13, v9 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v13;
    }
    else {
      int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v11 = v13.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v10, v11, "Error: '%s' failed", "il1->code_size == code_size");
    uint64_t v12 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v12, &v13, "faiss::MaskedInvertedLists::MaskedInvertedLists(const InvertedLists *, const InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 514);
  }
  return this;
}

void sub_1DD002FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::MaskedInvertedLists::list_size(faiss::MaskedInvertedLists *this)
{
  uint64_t result = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  if (!result)
  {
    uint64_t v3 = (uint64_t (*)(void))***((void ***)this + 4);
    return v3();
  }
  return result;
}

uint64_t faiss::MaskedInvertedLists::get_codes(faiss::MaskedInvertedLists *this)
{
  uint64_t v2 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v3 = 24;
  if (!v2) {
    uint64_t v3 = 32;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)((char *)this + v3) + 8);
  return v4();
}

uint64_t faiss::MaskedInvertedLists::get_ids(faiss::MaskedInvertedLists *this)
{
  uint64_t v2 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v3 = 24;
  if (!v2) {
    uint64_t v3 = 32;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)((char *)this + v3) + 16);
  return v4();
}

uint64_t faiss::MaskedInvertedLists::release_codes(faiss::MaskedInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v4 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v5 = 24;
  if (!v4) {
    uint64_t v5 = 32;
  }
  std::vector<int>::size_type v6 = *(uint64_t (**)(void))(**(void **)((char *)this + v5) + 24);
  return v6();
}

uint64_t faiss::MaskedInvertedLists::release_ids(faiss::MaskedInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  uint64_t v4 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v5 = 24;
  if (!v4) {
    uint64_t v5 = 32;
  }
  std::vector<int>::size_type v6 = *(uint64_t (**)(void))(**(void **)((char *)this + v5) + 32);
  return v6();
}

uint64_t faiss::MaskedInvertedLists::get_single_id(faiss::MaskedInvertedLists *this)
{
  uint64_t v2 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v3 = 24;
  if (!v2) {
    uint64_t v3 = 32;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)((char *)this + v3) + 40);
  return v4();
}

uint64_t faiss::MaskedInvertedLists::get_single_code(faiss::MaskedInvertedLists *this)
{
  uint64_t v2 = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  uint64_t v3 = 24;
  if (!v2) {
    uint64_t v3 = 32;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)((char *)this + v3) + 48);
  return v4();
}

void faiss::MaskedInvertedLists::prefetch_lists(faiss::MaskedInvertedLists *this, const uint64_t *a2, int a3)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  long long __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0)
      {
        uint64_t v8 = (***((uint64_t (****)(void, const uint64_t))this + 3))(*((void *)this + 3), a2[v5]);
        if (v8) {
          p_p = &v25;
        }
        else {
          p_p = &__p;
        }
        if (v8) {
          int v10 = &v27;
        }
        else {
          int v10 = &v24;
        }
        size_t v11 = (uint64_t *)p_p[1];
        uint64_t v12 = (uint64_t *)p_p[2];
        if (v11 >= v12)
        {
          uint64_t v14 = (uint64_t *)*p_p;
          uint64_t v15 = ((char *)v11 - (unsigned char *)*p_p) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = (char *)v12 - (char *)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            std::vector<int>::pointer v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)v10, v18);
            uint64_t v14 = (uint64_t *)*p_p;
            size_t v11 = (uint64_t *)p_p[1];
          }
          else
          {
            std::vector<int>::pointer v19 = 0;
          }
          unint64_t v20 = (uint64_t *)&v19[8 * v15];
          *unint64_t v20 = v7;
          std::string v13 = v20 + 1;
          while (v11 != v14)
          {
            uint64_t v21 = *--v11;
            *--unint64_t v20 = v21;
          }
          *p_p = v20;
          p_p[1] = v13;
          p_p[2] = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *size_t v11 = v7;
          std::string v13 = v11 + 1;
        }
        p_p[1] = v13;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  (*(void (**)(void))(**((void **)this + 4) + 56))(*((void *)this + 4));
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_1DD003664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 faiss::StopWordsInvertedLists::StopWordsInvertedLists(faiss::StopWordsInvertedLists *this, const faiss::InvertedLists *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *(void *)this = &unk_1F383F948;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  return result;
}

{
  __n128 result;

  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *(void *)this = &unk_1F383F948;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  return result;
}

unint64_t faiss::StopWordsInvertedLists::list_size(faiss::StopWordsInvertedLists *this)
{
  unint64_t result = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  if (result >= *((void *)this + 4)) {
    return 0;
  }
  return result;
}

uint64_t faiss::StopWordsInvertedLists::get_codes(faiss::StopWordsInvertedLists *this)
{
  if ((unint64_t)(***((uint64_t (****)(void))this + 3))(*((void *)this + 3)) >= *((void *)this + 4)) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 8);
  return v2();
}

uint64_t faiss::StopWordsInvertedLists::get_ids(faiss::StopWordsInvertedLists *this)
{
  if ((unint64_t)(***((uint64_t (****)(void))this + 3))(*((void *)this + 3)) >= *((void *)this + 4)) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 16);
  return v2();
}

unint64_t faiss::StopWordsInvertedLists::release_codes(faiss::StopWordsInvertedLists *this, unint64_t a2, const unsigned __int8 *a3)
{
  unint64_t result = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  if (result < *((void *)this + 4))
  {
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 3) + 24);
    return v5();
  }
  return result;
}

unint64_t faiss::StopWordsInvertedLists::release_ids(faiss::StopWordsInvertedLists *this, unint64_t a2, const uint64_t *a3)
{
  unint64_t result = (***((uint64_t (****)(void))this + 3))(*((void *)this + 3));
  if (result < *((void *)this + 4))
  {
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 3) + 32);
    return v5();
  }
  return result;
}

uint64_t faiss::StopWordsInvertedLists::get_single_id(faiss::StopWordsInvertedLists *this)
{
  if ((unint64_t)(***((uint64_t (****)(void))this + 3))(*((void *)this + 3)) >= *((void *)this + 4))
  {
    memset(&v8, 0, sizeof(v8));
    int v4 = snprintf(0, 0, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v8.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v5, size, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "virtual idx_t faiss::StopWordsInvertedLists::get_single_id(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 610);
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 40);
  return v2();
}

void sub_1DD003B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::StopWordsInvertedLists::get_single_code(faiss::StopWordsInvertedLists *this)
{
  if ((unint64_t)(***((uint64_t (****)(void))this + 3))(*((void *)this + 3)) >= *((void *)this + 4))
  {
    memset(&v8, 0, sizeof(v8));
    int v4 = snprintf(0, 0, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v8.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v5, size, "Error: '%s' failed", "il0->list_size(list_no) < maxsize");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "virtual const uint8_t *faiss::StopWordsInvertedLists::get_single_code(size_t, size_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/InvertedLists.cpp", 617);
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 48);
  return v2();
}

void sub_1DD003CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::StopWordsInvertedLists::prefetch_lists(faiss::StopWordsInvertedLists *this, const uint64_t *a2, int a3)
{
  long long __p = 0;
  std::vector<int>::pointer v19 = 0;
  unint64_t v20 = 0;
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a2[v5];
      if ((v7 & 0x8000000000000000) == 0
        && (unint64_t)(***((uint64_t (****)(void, const uint64_t))this + 3))(*((void *)this + 3), a2[v5]) < *((void *)this + 4))
      {
        std::string v8 = v19;
        if (v19 >= v20)
        {
          int v10 = __p;
          uint64_t v11 = v19 - __p;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = (char *)v20 - (char *)__p;
          if (((char *)v20 - (char *)__p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)&v20, v14);
            int v10 = __p;
            std::string v8 = v19;
          }
          else
          {
            uint64_t v15 = 0;
          }
          unint64_t v16 = (uint64_t *)&v15[8 * v11];
          *unint64_t v16 = v7;
          int v9 = v16 + 1;
          while (v8 != v10)
          {
            uint64_t v17 = *--v8;
            *--unint64_t v16 = v17;
          }
          long long __p = v16;
          unint64_t v20 = (uint64_t *)&v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *std::vector<int>::pointer v19 = v7;
          int v9 = v19 + 1;
        }
        std::vector<int>::pointer v19 = v9;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  if (__p) {
    operator delete(__p);
  }
}

void sub_1DD003EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::HStackInvertedLists::~HStackInvertedLists(faiss::HStackInvertedLists *this)
{
  *(void *)this = &unk_1F383F3B8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383F3B8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::SliceInvertedLists::~SliceInvertedLists(faiss::SliceInvertedLists *this)
{
}

void faiss::VStackInvertedLists::~VStackInvertedLists(faiss::VStackInvertedLists *this)
{
  *(void *)this = &unk_1F383F6E0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F383F6E0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::MaskedInvertedLists::~MaskedInvertedLists(faiss::MaskedInvertedLists *this)
{
}

void faiss::StopWordsInvertedLists::~StopWordsInvertedLists(faiss::StopWordsInvertedLists *this)
{
}

void faiss::InvertedLists::ScopedCodes::~ScopedCodes(faiss::InvertedLists::ScopedCodes *this)
{
}

void faiss::InvertedLists::ScopedIds::~ScopedIds(faiss::InvertedLists::ScopedIds *this)
{
}

void std::vector<std::vector<long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DD0042B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned char>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::RangeQueryResult>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DD004648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    char v12 = &v7[v11];
    long long v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      long long v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void faiss::InvertedLists::get_single_id()
{
}

void faiss::InvertedLists::get_single_code()
{
}

void faiss::ArrayInvertedLists::add_entries()
{
}

void faiss::ArrayInvertedLists::list_size()
{
}

void faiss::ArrayInvertedLists::get_codes()
{
}

void faiss::ArrayInvertedLists::get_ids()
{
}

void faiss::ArrayInvertedLists::update_entries()
{
  __assert_rtn("update_entries", "InvertedLists.cpp", 175, "n_entry + offset <= ids[list_no].size()");
}

{
  __assert_rtn("update_entries", "InvertedLists.cpp", 174, "list_no < nlist");
}

void faiss::anonymous namespace'::translate_list_no()
{
  __assert_rtn("translate_list_no", "InvertedLists.cpp", 395, "list_no >= cumsz[i0] && list_no < cumsz[i0 + 1]");
}

void faiss::pairwise_extra_distances(const float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int a6, float *a7, const float *a8, float a9, uint64_t a10, uint64_t a11)
{
  if (a2 && a4)
  {
    char v12 = a7;
    uint64_t v16 = a10;
    uint64_t v15 = a11;
    if (a8 == (const float *)-1) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = a8;
    }
    if (a10 == -1) {
      uint64_t v16 = (uint64_t)a1;
    }
    if (a11 == -1) {
      uint64_t v15 = a4;
    }
    unint64_t v73 = v17;
    uint64_t v76 = v15;
    if (a6 <= 19)
    {
      switch(a6)
      {
        case 1:
          if (a2 >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v77 = v15;
            uint64_t v19 = 4 * v16;
            do
            {
              unint64_t v20 = v12;
              if (a4 >= 1)
              {
                uint64_t v21 = a5;
                uint64_t v22 = v12;
                uint64_t v23 = a4;
                do
                {
                  *v22++ = faiss::fvec_L2sqr((faiss *)(a3 + 4 * v18 * (void)v73), v21, (unint64_t)a1);
                  uint64_t v21 = (const float *)((char *)v21 + v19);
                  --v23;
                }
                while (v23);
              }
              ++v18;
              char v12 = &v20[v77];
            }
            while (v18 != a2);
          }
          return;
        case 2:
          if (a2 >= 1)
          {
            uint64_t v66 = 0;
            uint64_t v79 = v15;
            uint64_t v67 = 4 * v16;
            do
            {
              uint64_t v68 = v12;
              if (a4 >= 1)
              {
                unint64_t v69 = a5;
                int v70 = v12;
                uint64_t v71 = a4;
                do
                {
                  *v70++ = faiss::fvec_L1((faiss *)(a3 + 4 * v66 * (void)v73), v69, a1);
                  unint64_t v69 = (float *)((char *)v69 + v67);
                  --v71;
                }
                while (v71);
              }
              ++v66;
              char v12 = &v68[v79];
            }
            while (v66 != a2);
          }
          return;
        case 3:
          if (a2 >= 1)
          {
            uint64_t v53 = 0;
            uint64_t v78 = v15;
            uint64_t v54 = 4 * v16;
            do
            {
              int v55 = v12;
              if (a4 >= 1)
              {
                uint64_t v56 = a5;
                uint64_t v57 = v12;
                uint64_t v58 = a4;
                do
                {
                  *v57++ = faiss::fvec_Linf((faiss *)(a3 + 4 * v53 * (void)v73), v56, a1);
                  uint64_t v56 = (float *)((char *)v56 + v54);
                  --v58;
                }
                while (v58);
              }
              ++v53;
              char v12 = &v55[v78];
            }
            while (v53 != a2);
          }
          return;
        case 4:
          if (a2 >= 1)
          {
            uint64_t v60 = 0;
            uint64_t v61 = 4 * v16;
            uint64_t v75 = 4 * (void)v17;
            do
            {
              if (a4 >= 1)
              {
                uint64_t v62 = 0;
                uint64_t v63 = a5;
                do
                {
                  if (a1)
                  {
                    int v64 = 0;
                    float v65 = 0.0;
                    do
                    {
                      float v65 = v65 + powf(vabds_f32(*(float *)(a3 + 4 * (void)v64), v63[(void)v64]), a9);
                      int v64 = (const float *)((char *)v64 + 1);
                    }
                    while (a1 != v64);
                  }
                  else
                  {
                    float v65 = 0.0;
                  }
                  v12[v60 * v76 + v62++] = v65;
                  uint64_t v63 = (float *)((char *)v63 + v61);
                }
                while (v62 != a4);
              }
              ++v60;
              a3 += v75;
            }
            while (v60 != a2);
          }
          return;
        default:
          goto LABEL_84;
      }
    }
    switch(a6)
    {
      case 20:
        if (a2 >= 1)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 4 * v16;
          uint64_t v48 = 4 * (void)v17;
          do
          {
            if (a4 >= 1)
            {
              uint64_t v49 = 0;
              float v50 = a5;
              do
              {
                if (a1)
                {
                  unint64_t v51 = 0;
                  float v52 = 0.0;
                  do
                  {
                    float v52 = v52
                        + (float)(vabds_f32(*(float *)(a3 + 4 * (void)v51), v50[(void)v51])
                                / (float)(fabsf(*(float *)(a3 + 4 * (void)v51)) + fabsf(v50[(void)v51])));
                    unint64_t v51 = (const float *)((char *)v51 + 1);
                  }
                  while (a1 != v51);
                }
                else
                {
                  float v52 = 0.0;
                }
                a7[v46 * v76 + v49++] = v52;
                float v50 = (float *)((char *)v50 + v47);
              }
              while (v49 != a4);
            }
            ++v46;
            a3 += v48;
          }
          while (v46 != a2);
        }
        break;
      case 21:
        if (a2 >= 1)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 4 * v16;
          uint64_t v37 = 4 * (void)v17;
          do
          {
            if (a4 >= 1)
            {
              uint64_t v38 = 0;
              float64x2_t v39 = a5;
              do
              {
                if (a1)
                {
                  uint64_t v40 = 0;
                  float v41 = 0.0;
                  float v42 = 0.0;
                  do
                  {
                    float v43 = *(float *)(a3 + 4 * (void)v40);
                    float v44 = v39[(void)v40];
                    float v41 = v41 + vabds_f32(v43, v44);
                    float v42 = v42 + fabsf(v43 + v44);
                    uint64_t v40 = (const float *)((char *)v40 + 1);
                  }
                  while (a1 != v40);
                  float v45 = v41 / v42;
                }
                else
                {
                  float v45 = NAN;
                }
                a7[v35 * v76 + v38++] = v45;
                float64x2_t v39 = (float *)((char *)v39 + v36);
              }
              while (v38 != a4);
            }
            ++v35;
            a3 += v37;
          }
          while (v35 != a2);
        }
        break;
      case 22:
        if (a2 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 4 * v16;
          uint64_t v74 = 4 * (void)v17;
          do
          {
            if (a4 >= 1)
            {
              uint64_t v26 = 0;
              uint64_t v27 = a5;
              do
              {
                if (a1)
                {
                  unint64_t v28 = 0;
                  float v29 = 0.0;
                  do
                  {
                    float v30 = *(float *)(a3 + 4 * (void)v28);
                    float v31 = v27[(void)v28];
                    float v32 = (float)(v30 + v31) * 0.5;
                    float v33 = logf(v32 / v30);
                    float v29 = v29 + (float)((float)-(float)(v31 * logf(v32 / v31)) - (float)(v30 * v33));
                    unint64_t v28 = (const float *)((char *)v28 + 1);
                  }
                  while (a1 != v28);
                  float v34 = v29 * 0.5;
                }
                else
                {
                  float v34 = 0.0;
                }
                v12[v24 * v76 + v26++] = v34;
                uint64_t v27 = (float *)((char *)v27 + v25);
              }
              while (v26 != a4);
            }
            ++v24;
            a3 += v74;
          }
          while (v24 != a2);
        }
        break;
      default:
LABEL_84:
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v82, "metric type not implemented");
        faiss::FaissException::FaissException(exception, v82, "void faiss::pairwise_extra_distances(int64_t, int64_t, const float *, int64_t, const float *, MetricType, float, float *, int64_t, int64_t, int64_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 162);
    }
  }
}

void sub_1DD004FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

unint64_t faiss::knn_extra_metrics(uint64_t a1, float *a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6, void *a7, float a8)
{
  if (a6 <= 19)
  {
    switch(a6)
    {
      case 1:
        unint64_t v9 = a7[1];
        unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        unint64_t v365 = result;
        unint64_t v11 = a4;
        if (!a4) {
          return result;
        }
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v351 = 4 * result;
        uint64_t v358 = 8 * result;
        while (1)
        {
          unint64_t v372 = v14 + v365;
          if (v14 + v365 < v11) {
            unint64_t v11 = v14 + v365;
          }
          uint64_t v380 = v13;
          uint64_t v387 = v12;
          uint64_t v15 = v12;
          unint64_t v394 = v11;
LABEL_8:
          if (v14 < v11) {
            break;
          }
          unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          uint64_t v13 = v380 + v358;
          uint64_t v12 = v387 + v351;
          unint64_t v11 = a4;
          unint64_t v14 = v372;
          if (v372 >= a4) {
            return result;
          }
        }
        uint64_t v17 = a7[2];
        uint64_t v16 = a7[3];
        uint64_t v18 = a7[1];
        if (v9)
        {
          uint64_t v19 = (void *)(v17 + v18 * v13);
          unint64_t v20 = v9;
          uint64_t v21 = (_DWORD *)(v16 + v18 * v15);
          do
          {
            *v21++ = 2139095039;
            *v19++ = -1;
            --v20;
          }
          while (v20);
        }
        uint64_t v415 = v16;
        uint64_t v422 = v13;
        uint64_t v432 = v15;
        unint64_t v439 = v14;
        uint64_t v401 = v17;
        uint64_t v408 = v18;
        uint64_t v22 = (float *)(v16 + 4 * v18 * v14);
        uint64_t v23 = (uint64_t *)(v17 + 8 * v18 * v14);
        if (!a5) {
          goto LABEL_28;
        }
        uint64_t v24 = 0;
        uint64_t v25 = a2;
        uint64_t v26 = (faiss *)(a1 + 4 * v14 * a3);
        uint64_t v27 = v22 - 1;
        unint64_t v28 = v23 - 1;
        do
        {
          float v29 = faiss::fvec_L2sqr(v26, v25, a3);
          if (v29 >= *v22) {
            goto LABEL_27;
          }
          if (v9 < 2)
          {
            uint64_t v30 = 1;
            goto LABEL_26;
          }
          uint64_t v31 = 3;
          unint64_t v32 = 2;
          uint64_t v33 = 1;
          while (1)
          {
            float v34 = v27[v32];
            if (v31 == v9 + 1 || (float v35 = v27[v31], v34 > v35))
            {
              if (v34 < v29) {
                break;
              }
              goto LABEL_23;
            }
            float v34 = v27[v31];
            unint64_t v32 = v31;
            if (v35 < v29) {
              break;
            }
LABEL_23:
            uint64_t v30 = v32;
            v27[v33] = v34;
            v28[v33] = v28[v32];
            v32 *= 2;
            uint64_t v31 = (2 * v30) | 1;
            uint64_t v33 = v30;
            if (v32 > v9) {
              goto LABEL_26;
            }
          }
          uint64_t v30 = v33;
LABEL_26:
          v27[v30] = v29;
          v28[v30] = v24;
LABEL_27:
          v25 += a3;
          ++v24;
        }
        while (v24 != a5);
LABEL_28:
        if (!v9)
        {
          unint64_t v37 = 0;
          goto LABEL_47;
        }
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        uint64_t v38 = v22 - 1;
        float64x2_t v39 = v23 - 1;
LABEL_30:
        float v40 = *v22;
        uint64_t v41 = *v23;
        unint64_t v42 = v9 - v36;
        float v43 = v38[v9 - v36];
        if (v9 - v36 < 2)
        {
          uint64_t v44 = 1;
          goto LABEL_42;
        }
        uint64_t v45 = 3;
        unint64_t v46 = 2;
        uint64_t v47 = 1;
        while (1)
        {
          float v48 = v38[v46];
          if (v45 == v42 + 1 || (float v49 = v38[v45], v48 > v49))
          {
            if (v43 > v48) {
              goto LABEL_40;
            }
          }
          else
          {
            float v48 = v38[v45];
            unint64_t v46 = v45;
            if (v43 > v49)
            {
LABEL_40:
              uint64_t v44 = v47;
LABEL_41:
              float v43 = v38[v42];
LABEL_42:
              v38[v44] = v43;
              v39[v44] = v39[v42];
              unint64_t v50 = v9 + ~v37;
              v22[v50] = v40;
              v23[v50] = v41;
              if (v41 != -1) {
                ++v37;
              }
              if (++v36 == v9)
              {
LABEL_47:
                memmove(v22, &v22[v9 - v37], 4 * v37);
                unint64_t result = (unint64_t)memmove(v23, &v23[v9 - v37], 8 * v37);
                uint64_t v51 = v9 - v37;
                if (v9 > v37)
                {
                  float v52 = (void *)(v401 + v408 * v422 + 8 * v37);
                  uint64_t v53 = (_DWORD *)(v415 + v408 * v432 + 4 * v37);
                  do
                  {
                    *v53++ = 2139095039;
                    *v52++ = -1;
                    --v51;
                  }
                  while (v51);
                }
                unint64_t v14 = v439 + 1;
                uint64_t v13 = v422 + 8;
                uint64_t v15 = v432 + 4;
                unint64_t v11 = v394;
                goto LABEL_8;
              }
              goto LABEL_30;
            }
          }
          uint64_t v44 = v46;
          v38[v47] = v48;
          v39[v47] = v39[v46];
          v46 *= 2;
          uint64_t v45 = (2 * v44) | 1;
          uint64_t v47 = v44;
          if (v46 > v42) {
            goto LABEL_41;
          }
        }
      case 2:
        unint64_t v300 = a7[1];
        unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        unint64_t v371 = result;
        unint64_t v301 = a4;
        if (!a4) {
          return result;
        }
        uint64_t v302 = 0;
        uint64_t v303 = 0;
        unint64_t v304 = 0;
        uint64_t v357 = 4 * result;
        uint64_t v364 = 8 * result;
        while (1)
        {
          unint64_t v378 = v304 + v371;
          if (v304 + v371 < v301) {
            unint64_t v301 = v304 + v371;
          }
          uint64_t v386 = v303;
          uint64_t v393 = v302;
          uint64_t v305 = v302;
          unint64_t v400 = v301;
LABEL_329:
          if (v304 < v301) {
            break;
          }
          unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          uint64_t v303 = v386 + v364;
          uint64_t v302 = v393 + v357;
          unint64_t v301 = a4;
          unint64_t v304 = v378;
          if (v378 >= a4) {
            return result;
          }
        }
        uint64_t v307 = a7[2];
        uint64_t v306 = a7[3];
        uint64_t v308 = a7[1];
        if (v300)
        {
          v309 = (void *)(v307 + v308 * v303);
          unint64_t v310 = v300;
          v311 = (_DWORD *)(v306 + v308 * v305);
          do
          {
            *v311++ = 2139095039;
            *v309++ = -1;
            --v310;
          }
          while (v310);
        }
        uint64_t v421 = v306;
        uint64_t v428 = v303;
        uint64_t v438 = v305;
        unint64_t v445 = v304;
        uint64_t v407 = v307;
        uint64_t v414 = v308;
        v312 = (float *)(v306 + 4 * v308 * v304);
        v313 = (uint64_t *)(v307 + 8 * v308 * v304);
        if (!a5) {
          goto LABEL_349;
        }
        uint64_t v314 = 0;
        v315 = a2;
        v316 = (faiss *)(a1 + 4 * v304 * a3);
        v317 = v312 - 1;
        v318 = v313 - 1;
        do
        {
          float v319 = faiss::fvec_L1(v316, v315, (const float *)a3);
          if (v319 >= *v312) {
            goto LABEL_348;
          }
          if (v300 < 2)
          {
            uint64_t v320 = 1;
            goto LABEL_347;
          }
          uint64_t v321 = 3;
          unint64_t v322 = 2;
          uint64_t v323 = 1;
          while (1)
          {
            float v324 = v317[v322];
            if (v321 == v300 + 1 || (float v325 = v317[v321], v324 > v325))
            {
              if (v324 < v319) {
                break;
              }
              goto LABEL_344;
            }
            float v324 = v317[v321];
            unint64_t v322 = v321;
            if (v325 < v319) {
              break;
            }
LABEL_344:
            uint64_t v320 = v322;
            v317[v323] = v324;
            v318[v323] = v318[v322];
            v322 *= 2;
            uint64_t v321 = (2 * v320) | 1;
            uint64_t v323 = v320;
            if (v322 > v300) {
              goto LABEL_347;
            }
          }
          uint64_t v320 = v323;
LABEL_347:
          v317[v320] = v319;
          v318[v320] = v314;
LABEL_348:
          v315 += a3;
          ++v314;
        }
        while (v314 != a5);
LABEL_349:
        if (!v300)
        {
          unint64_t v327 = 0;
          goto LABEL_368;
        }
        uint64_t v326 = 0;
        unint64_t v327 = 0;
        v328 = v312 - 1;
        v329 = v313 - 1;
LABEL_351:
        float v330 = *v312;
        uint64_t v331 = *v313;
        unint64_t v332 = v300 - v326;
        float v333 = v328[v300 - v326];
        if (v300 - v326 < 2)
        {
          uint64_t v334 = 1;
          goto LABEL_363;
        }
        uint64_t v335 = 3;
        unint64_t v336 = 2;
        uint64_t v337 = 1;
        while (1)
        {
          float v338 = v328[v336];
          if (v335 == v332 + 1 || (float v339 = v328[v335], v338 > v339))
          {
            if (v333 > v338) {
              goto LABEL_361;
            }
          }
          else
          {
            float v338 = v328[v335];
            unint64_t v336 = v335;
            if (v333 > v339)
            {
LABEL_361:
              uint64_t v334 = v337;
LABEL_362:
              float v333 = v328[v332];
LABEL_363:
              v328[v334] = v333;
              v329[v334] = v329[v332];
              unint64_t v340 = v300 + ~v327;
              v312[v340] = v330;
              v313[v340] = v331;
              if (v331 != -1) {
                ++v327;
              }
              if (++v326 == v300)
              {
LABEL_368:
                memmove(v312, &v312[v300 - v327], 4 * v327);
                unint64_t result = (unint64_t)memmove(v313, &v313[v300 - v327], 8 * v327);
                uint64_t v341 = v300 - v327;
                if (v300 > v327)
                {
                  v342 = (void *)(v407 + v414 * v428 + 8 * v327);
                  v343 = (_DWORD *)(v421 + v414 * v438 + 4 * v327);
                  do
                  {
                    *v343++ = 2139095039;
                    *v342++ = -1;
                    --v341;
                  }
                  while (v341);
                }
                unint64_t v304 = v445 + 1;
                uint64_t v303 = v428 + 8;
                uint64_t v305 = v438 + 4;
                unint64_t v301 = v400;
                goto LABEL_329;
              }
              goto LABEL_351;
            }
          }
          uint64_t v334 = v336;
          v328[v337] = v338;
          v329[v337] = v329[v336];
          v336 *= 2;
          uint64_t v335 = (2 * v334) | 1;
          uint64_t v337 = v334;
          if (v336 > v332) {
            goto LABEL_362;
          }
        }
      case 3:
        unint64_t v207 = a7[1];
        unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        unint64_t v369 = result;
        unint64_t v208 = a4;
        if (!a4) {
          return result;
        }
        uint64_t v209 = 0;
        uint64_t v210 = 0;
        unint64_t v211 = 0;
        uint64_t v355 = 4 * result;
        uint64_t v362 = 8 * result;
        while (1)
        {
          unint64_t v376 = v211 + v369;
          if (v211 + v369 < v208) {
            unint64_t v208 = v211 + v369;
          }
          uint64_t v384 = v210;
          uint64_t v391 = v209;
          uint64_t v212 = v209;
          unint64_t v398 = v208;
LABEL_224:
          if (v211 < v208) {
            break;
          }
          unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          uint64_t v210 = v384 + v362;
          uint64_t v209 = v391 + v355;
          unint64_t v208 = a4;
          unint64_t v211 = v376;
          if (v376 >= a4) {
            return result;
          }
        }
        uint64_t v214 = a7[2];
        uint64_t v213 = a7[3];
        uint64_t v215 = a7[1];
        if (v207)
        {
          v216 = (void *)(v214 + v215 * v210);
          unint64_t v217 = v207;
          v218 = (_DWORD *)(v213 + v215 * v212);
          do
          {
            *v218++ = 2139095039;
            *v216++ = -1;
            --v217;
          }
          while (v217);
        }
        uint64_t v419 = v213;
        uint64_t v426 = v210;
        uint64_t v436 = v212;
        unint64_t v443 = v211;
        uint64_t v405 = v214;
        uint64_t v412 = v215;
        v219 = (float *)(v213 + 4 * v215 * v211);
        v220 = (uint64_t *)(v214 + 8 * v215 * v211);
        if (!a5) {
          goto LABEL_244;
        }
        uint64_t v221 = 0;
        v222 = a2;
        v223 = (faiss *)(a1 + 4 * v211 * a3);
        v224 = v219 - 1;
        v225 = v220 - 1;
        do
        {
          float v226 = faiss::fvec_Linf(v223, v222, (const float *)a3);
          if (v226 >= *v219) {
            goto LABEL_243;
          }
          if (v207 < 2)
          {
            uint64_t v227 = 1;
            goto LABEL_242;
          }
          uint64_t v228 = 3;
          unint64_t v229 = 2;
          uint64_t v230 = 1;
          while (1)
          {
            float v231 = v224[v229];
            if (v228 == v207 + 1 || (float v232 = v224[v228], v231 > v232))
            {
              if (v231 < v226) {
                break;
              }
              goto LABEL_239;
            }
            float v231 = v224[v228];
            unint64_t v229 = v228;
            if (v232 < v226) {
              break;
            }
LABEL_239:
            uint64_t v227 = v229;
            v224[v230] = v231;
            v225[v230] = v225[v229];
            v229 *= 2;
            uint64_t v228 = (2 * v227) | 1;
            uint64_t v230 = v227;
            if (v229 > v207) {
              goto LABEL_242;
            }
          }
          uint64_t v227 = v230;
LABEL_242:
          v224[v227] = v226;
          v225[v227] = v221;
LABEL_243:
          v222 += a3;
          ++v221;
        }
        while (v221 != a5);
LABEL_244:
        if (!v207)
        {
          unint64_t v234 = 0;
          uint64_t v238 = v436;
          unint64_t v237 = v443;
          goto LABEL_263;
        }
        uint64_t v233 = 0;
        unint64_t v234 = 0;
        v235 = v219 - 1;
        v236 = v220 - 1;
        uint64_t v238 = v436;
        unint64_t v237 = v443;
LABEL_246:
        float v239 = *v219;
        uint64_t v240 = *v220;
        unint64_t v241 = v207 - v233;
        float v242 = v235[v207 - v233];
        if (v207 - v233 < 2)
        {
          uint64_t v243 = 1;
          goto LABEL_258;
        }
        uint64_t v244 = 3;
        unint64_t v245 = 2;
        uint64_t v246 = 1;
        while (1)
        {
          float v247 = v235[v245];
          if (v244 == v241 + 1 || (float v248 = v235[v244], v247 > v248))
          {
            if (v242 > v247) {
              goto LABEL_256;
            }
          }
          else
          {
            float v247 = v235[v244];
            unint64_t v245 = v244;
            if (v242 > v248)
            {
LABEL_256:
              uint64_t v243 = v246;
LABEL_257:
              float v242 = v235[v241];
LABEL_258:
              v235[v243] = v242;
              v236[v243] = v236[v241];
              unint64_t v249 = v207 + ~v234;
              v219[v249] = v239;
              v220[v249] = v240;
              if (v240 != -1) {
                ++v234;
              }
              if (++v233 == v207)
              {
LABEL_263:
                memmove(v219, &v219[v207 - v234], 4 * v234);
                unint64_t result = (unint64_t)memmove(v220, &v220[v207 - v234], 8 * v234);
                uint64_t v250 = v207 - v234;
                if (v207 > v234)
                {
                  v251 = (void *)(v405 + v412 * v426 + 8 * v234);
                  v252 = (_DWORD *)(v419 + v412 * v238 + 4 * v234);
                  do
                  {
                    *v252++ = 2139095039;
                    *v251++ = -1;
                    --v250;
                  }
                  while (v250);
                }
                unint64_t v211 = v237 + 1;
                uint64_t v210 = v426 + 8;
                uint64_t v212 = v238 + 4;
                unint64_t v208 = v398;
                goto LABEL_224;
              }
              goto LABEL_246;
            }
          }
          uint64_t v243 = v245;
          v235[v246] = v247;
          v236[v246] = v236[v245];
          v245 *= 2;
          uint64_t v244 = (2 * v243) | 1;
          uint64_t v246 = v243;
          if (v245 > v241) {
            goto LABEL_257;
          }
        }
      case 4:
        unint64_t v254 = a7[1];
        unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
        unint64_t v356 = result;
        unint64_t v255 = a4;
        if (!a4) {
          return result;
        }
        uint64_t v256 = 0;
        uint64_t v257 = 0;
        unint64_t v258 = 0;
        uint64_t v348 = 4 * result;
        uint64_t v350 = 8 * result;
        uint64_t v444 = 4 * a3;
        uint64_t v346 = 4 * result * a3;
        while (1)
        {
          unint64_t v259 = v258 + v356;
          unint64_t v363 = v258 + v356;
          uint64_t v370 = v257;
          if (v258 + v356 >= v255) {
            unint64_t v259 = v255;
          }
          uint64_t v260 = a1;
          uint64_t v377 = v256;
          uint64_t v261 = v256;
          unint64_t v385 = v259;
LABEL_274:
          if (v258 < v259) {
            break;
          }
          unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
          uint64_t v257 = v370 + v350;
          uint64_t v256 = v377 + v348;
          a1 += v346;
          unint64_t v258 = v363;
          unint64_t v255 = a4;
          if (v363 >= a4) {
            return result;
          }
        }
        uint64_t v263 = a7[2];
        uint64_t v262 = a7[3];
        uint64_t v264 = a7[1];
        if (v254)
        {
          v265 = (void *)(v263 + v264 * v257);
          unint64_t v266 = v254;
          v267 = (_DWORD *)(v262 + v264 * v261);
          do
          {
            *v267++ = 2139095039;
            *v265++ = -1;
            --v266;
          }
          while (v266);
        }
        uint64_t v413 = v257;
        uint64_t v420 = v261;
        unint64_t v427 = v258;
        uint64_t v399 = v264;
        uint64_t v406 = v262;
        v268 = (float *)(v262 + 4 * v264 * v258);
        uint64_t v392 = v263;
        v437 = (char *)(v263 + 8 * v264 * v258);
        if (!a5) {
          goto LABEL_299;
        }
        uint64_t v269 = 0;
        v270 = v268 - 1;
        v271 = v437 - 8;
        v272 = a2;
        break;
      default:
        goto LABEL_374;
    }
    do
    {
      if (a3)
      {
        uint64_t v273 = 0;
        float v274 = 0.0;
        do
        {
          float v274 = v274 + powf(vabds_f32(*(float *)(v260 + 4 * v273), v272[v273]), a8);
          ++v273;
        }
        while (a3 != v273);
      }
      else
      {
        float v274 = 0.0;
      }
      if (v274 >= *v268) {
        goto LABEL_298;
      }
      if (v254 < 2)
      {
        uint64_t v275 = 1;
        goto LABEL_297;
      }
      uint64_t v276 = 3;
      unint64_t v277 = 2;
      uint64_t v278 = 1;
      while (1)
      {
        float v279 = v270[v277];
        if (v276 == v254 + 1 || (float v280 = v270[v276], v279 > v280))
        {
          if (v279 < v274) {
            break;
          }
          goto LABEL_294;
        }
        float v279 = v270[v276];
        unint64_t v277 = v276;
        if (v280 < v274) {
          break;
        }
LABEL_294:
        uint64_t v275 = v277;
        v270[v278] = v279;
        *(void *)&v271[8 * v278] = *(void *)&v271[8 * v277];
        v277 *= 2;
        uint64_t v276 = (2 * v275) | 1;
        uint64_t v278 = v275;
        if (v277 > v254) {
          goto LABEL_297;
        }
      }
      uint64_t v275 = v278;
LABEL_297:
      v270[v275] = v274;
      *(void *)&v271[8 * v275] = v269;
LABEL_298:
      ++v269;
      v272 = (float *)((char *)v272 + v444);
    }
    while (v269 != a5);
LABEL_299:
    if (!v254)
    {
      unint64_t v282 = 0;
      v284 = v437;
      goto LABEL_318;
    }
    uint64_t v281 = 0;
    unint64_t v282 = 0;
    v283 = v268 - 1;
    v284 = v437;
    v285 = v437 - 8;
LABEL_301:
    float v286 = *v268;
    uint64_t v287 = *(void *)v437;
    unint64_t v288 = v254 - v281;
    float v289 = v283[v254 - v281];
    if (v254 - v281 < 2)
    {
      uint64_t v290 = 1;
      goto LABEL_313;
    }
    uint64_t v291 = 3;
    unint64_t v292 = 2;
    uint64_t v293 = 1;
    while (1)
    {
      float v294 = v283[v292];
      if (v291 == v288 + 1 || (float v295 = v283[v291], v294 > v295))
      {
        if (v289 > v294) {
          goto LABEL_311;
        }
      }
      else
      {
        float v294 = v283[v291];
        unint64_t v292 = v291;
        if (v289 > v295)
        {
LABEL_311:
          uint64_t v290 = v293;
LABEL_312:
          float v289 = v283[v288];
LABEL_313:
          v283[v290] = v289;
          *(void *)&v285[8 * v290] = *(void *)&v285[8 * v288];
          unint64_t v296 = v254 + ~v282;
          v268[v296] = v286;
          *(void *)&v437[8 * v296] = v287;
          if (v287 != -1) {
            ++v282;
          }
          if (++v281 == v254)
          {
LABEL_318:
            memmove(v268, &v268[v254 - v282], 4 * v282);
            unint64_t result = (unint64_t)memmove(v284, &v284[8 * v254 + -8 * v282], 8 * v282);
            uint64_t v297 = v254 - v282;
            if (v254 > v282)
            {
              v298 = (void *)(v392 + v399 * v413 + 8 * v282);
              v299 = (_DWORD *)(v406 + v399 * v420 + 4 * v282);
              do
              {
                *v299++ = 2139095039;
                *v298++ = -1;
                --v297;
              }
              while (v297);
            }
            unint64_t v258 = v427 + 1;
            uint64_t v257 = v413 + 8;
            uint64_t v261 = v420 + 4;
            v260 += v444;
            unint64_t v259 = v385;
            goto LABEL_274;
          }
          goto LABEL_301;
        }
      }
      uint64_t v290 = v292;
      v283[v293] = v294;
      *(void *)&v285[8 * v293] = *(void *)&v285[8 * v292];
      v292 *= 2;
      uint64_t v291 = (2 * v290) | 1;
      uint64_t v293 = v290;
      if (v292 > v288) {
        goto LABEL_312;
      }
    }
  }
  if (a6 == 20)
  {
    unint64_t v160 = a7[1];
    unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
    unint64_t v161 = a4;
    unint64_t v375 = result;
    if (!a4) {
      return result;
    }
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    unint64_t v164 = 0;
    uint64_t v361 = 4 * result;
    uint64_t v368 = 8 * result;
    uint64_t v165 = 4 * a3;
    uint64_t v354 = 4 * result * a3;
    while (1)
    {
      unint64_t v166 = v164 + v375;
      unint64_t v383 = v164 + v375;
      uint64_t v390 = v163;
      if (v164 + v375 >= v161) {
        unint64_t v166 = v161;
      }
      uint64_t v167 = a1;
      uint64_t v397 = v162;
      unint64_t v404 = v166;
      uint64_t v168 = v162;
LABEL_169:
      if (v164 < v166) {
        break;
      }
      unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      uint64_t v163 = v390 + v368;
      uint64_t v162 = v397 + v361;
      a1 += v354;
      unint64_t v161 = a4;
      unint64_t v164 = v383;
      if (v383 >= a4) {
        return result;
      }
    }
    uint64_t v169 = a7[2];
    uint64_t v170 = a7[3];
    uint64_t v171 = a7[1];
    if (v160)
    {
      v172 = (void *)(v169 + v171 * v163);
      unint64_t v173 = v160;
      v174 = (_DWORD *)(v170 + v171 * v168);
      do
      {
        *v174++ = 2139095039;
        *v172++ = -1;
        --v173;
      }
      while (v173);
    }
    uint64_t v435 = v163;
    uint64_t v442 = v168;
    uint64_t v418 = v171;
    v175 = (float *)(v170 + 4 * v171 * v164);
    v176 = (uint64_t *)(v169 + 8 * v171 * v164);
    if (!a5) {
      goto LABEL_194;
    }
    uint64_t v177 = 0;
    v178 = v175 - 1;
    v179 = v176 - 1;
    v180 = a2;
    do
    {
      if (a3)
      {
        uint64_t v181 = 0;
        float v182 = 0.0;
        do
        {
          float v182 = v182
               + (float)(vabds_f32(*(float *)(v167 + 4 * v181), v180[v181])
                       / (float)(fabsf(*(float *)(v167 + 4 * v181)) + fabsf(v180[v181])));
          ++v181;
        }
        while (a3 != v181);
      }
      else
      {
        float v182 = 0.0;
      }
      if (v182 >= *v175) {
        goto LABEL_193;
      }
      if (v160 < 2)
      {
        uint64_t v183 = 1;
        goto LABEL_192;
      }
      uint64_t v184 = 3;
      unint64_t v185 = 2;
      uint64_t v186 = 1;
      while (1)
      {
        float v187 = v178[v185];
        if (v184 == v160 + 1 || (float v188 = v178[v184], v187 > v188))
        {
          if (v187 < v182) {
            break;
          }
          goto LABEL_189;
        }
        float v187 = v178[v184];
        unint64_t v185 = v184;
        if (v188 < v182) {
          break;
        }
LABEL_189:
        uint64_t v183 = v185;
        v178[v186] = v187;
        v179[v186] = v179[v185];
        v185 *= 2;
        uint64_t v184 = (2 * v183) | 1;
        uint64_t v186 = v183;
        if (v185 > v160) {
          goto LABEL_192;
        }
      }
      uint64_t v183 = v186;
LABEL_192:
      v178[v183] = v182;
      v179[v183] = v177;
LABEL_193:
      ++v177;
      v180 = (float *)((char *)v180 + v165);
    }
    while (v177 != a5);
LABEL_194:
    uint64_t v425 = v170;
    uint64_t v411 = v169;
    if (!v160)
    {
      unint64_t v190 = 0;
      goto LABEL_213;
    }
    uint64_t v189 = 0;
    unint64_t v190 = 0;
    v191 = v175 - 1;
    v192 = v176 - 1;
LABEL_196:
    float v193 = *v175;
    uint64_t v194 = *v176;
    unint64_t v195 = v160 - v189;
    float v196 = v191[v160 - v189];
    if (v160 - v189 < 2)
    {
      uint64_t v197 = 1;
      goto LABEL_208;
    }
    uint64_t v198 = 3;
    unint64_t v199 = 2;
    uint64_t v200 = 1;
    while (1)
    {
      float v201 = v191[v199];
      if (v198 == v195 + 1 || (float v202 = v191[v198], v201 > v202))
      {
        if (v196 > v201) {
          goto LABEL_206;
        }
      }
      else
      {
        float v201 = v191[v198];
        unint64_t v199 = v198;
        if (v196 > v202)
        {
LABEL_206:
          uint64_t v197 = v200;
LABEL_207:
          float v196 = v191[v195];
LABEL_208:
          v191[v197] = v196;
          v192[v197] = v192[v195];
          unint64_t v203 = v160 + ~v190;
          v175[v203] = v193;
          v176[v203] = v194;
          if (v194 != -1) {
            ++v190;
          }
          if (++v189 == v160)
          {
LABEL_213:
            memmove(v175, &v175[v160 - v190], 4 * v190);
            unint64_t result = (unint64_t)memmove(v176, &v176[v160 - v190], 8 * v190);
            uint64_t v204 = v160 - v190;
            if (v160 > v190)
            {
              v205 = (void *)(v411 + v418 * v435 + 8 * v190);
              v206 = (_DWORD *)(v425 + v418 * v442 + 4 * v190);
              do
              {
                *v206++ = 2139095039;
                *v205++ = -1;
                --v204;
              }
              while (v204);
            }
            ++v164;
            uint64_t v163 = v435 + 8;
            uint64_t v168 = v442 + 4;
            v167 += v165;
            unint64_t v166 = v404;
            goto LABEL_169;
          }
          goto LABEL_196;
        }
      }
      uint64_t v197 = v199;
      v191[v200] = v201;
      v192[v200] = v192[v199];
      v199 *= 2;
      uint64_t v198 = (2 * v197) | 1;
      uint64_t v200 = v197;
      if (v199 > v195) {
        goto LABEL_207;
      }
    }
  }
  if (a6 == 21)
  {
    unint64_t v109 = a7[1];
    unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
    unint64_t v374 = result;
    unint64_t v110 = a4;
    if (!a4) {
      return result;
    }
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    unint64_t v113 = 0;
    uint64_t v360 = 4 * result;
    uint64_t v367 = 8 * result;
    uint64_t v114 = 4 * a3;
    uint64_t v353 = 4 * result * a3;
    while (1)
    {
      unint64_t v115 = v113 + v374;
      unint64_t v382 = v113 + v374;
      uint64_t v389 = v112;
      if (v113 + v374 >= v110) {
        unint64_t v115 = v110;
      }
      uint64_t v116 = a1;
      uint64_t v396 = v111;
      unint64_t v403 = v115;
      uint64_t v117 = v112;
LABEL_116:
      if (v113 < v115) {
        break;
      }
      unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      uint64_t v112 = v389 + v367;
      uint64_t v111 = v396 + v360;
      a1 += v353;
      unint64_t v110 = a4;
      unint64_t v113 = v382;
      if (v382 >= a4) {
        return result;
      }
    }
    uint64_t v119 = a7[2];
    uint64_t v118 = a7[3];
    uint64_t v120 = a7[1];
    if (v109)
    {
      unint64_t v121 = (void *)(v119 + v120 * v117);
      unint64_t v122 = v109;
      v123 = (_DWORD *)(v118 + v120 * v111);
      do
      {
        *v123++ = 2139095039;
        *v121++ = -1;
        --v122;
      }
      while (v122);
    }
    v124 = (float *)(v118 + 4 * v120 * v113);
    v125 = (uint64_t *)(v119 + 8 * v120 * v113);
    if (!a5) {
      goto LABEL_139;
    }
    uint64_t v126 = 0;
    unint64_t v127 = v124 - 1;
    uint64_t v128 = v125 - 1;
    unint64_t v129 = a2;
    do
    {
      if (!a3) {
        goto LABEL_138;
      }
      uint64_t v130 = 0;
      float v131 = 0.0;
      float v132 = 0.0;
      do
      {
        float v133 = *(float *)(v116 + 4 * v130);
        float v134 = v129[v130];
        float v131 = v131 + vabds_f32(v133, v134);
        float v132 = v132 + fabsf(v133 + v134);
        ++v130;
      }
      while (a3 != v130);
      float v135 = v131 / v132;
      if (v135 >= *v124) {
        goto LABEL_138;
      }
      if (v109 < 2)
      {
        uint64_t v136 = 1;
        goto LABEL_137;
      }
      uint64_t v137 = 3;
      unint64_t v138 = 2;
      uint64_t v139 = 1;
      while (1)
      {
        float v140 = v127[v138];
        if (v137 == v109 + 1 || (float v141 = v127[v137], v140 > v141))
        {
          if (v140 < v135) {
            break;
          }
          goto LABEL_134;
        }
        float v140 = v127[v137];
        unint64_t v138 = v137;
        if (v141 < v135) {
          break;
        }
LABEL_134:
        uint64_t v136 = v138;
        v127[v139] = v140;
        v128[v139] = v128[v138];
        v138 *= 2;
        uint64_t v137 = (2 * v136) | 1;
        uint64_t v139 = v136;
        if (v138 > v109) {
          goto LABEL_137;
        }
      }
      uint64_t v136 = v139;
LABEL_137:
      v127[v136] = v135;
      v128[v136] = v126;
LABEL_138:
      ++v126;
      unint64_t v129 = (float *)((char *)v129 + v114);
    }
    while (v126 != a5);
LABEL_139:
    uint64_t v434 = v117;
    unint64_t v441 = v113;
    uint64_t v417 = v120;
    uint64_t v424 = v118;
    uint64_t v410 = v119;
    if (!v109)
    {
      unint64_t v143 = 0;
      goto LABEL_158;
    }
    uint64_t v142 = 0;
    unint64_t v143 = 0;
    v144 = v124 - 1;
    v145 = v125 - 1;
LABEL_141:
    float v146 = *v124;
    uint64_t v147 = *v125;
    unint64_t v148 = v109 - v142;
    float v149 = v144[v109 - v142];
    if (v109 - v142 < 2)
    {
      uint64_t v150 = 1;
      goto LABEL_153;
    }
    uint64_t v151 = 3;
    unint64_t v152 = 2;
    uint64_t v153 = 1;
    while (1)
    {
      float v154 = v144[v152];
      if (v151 == v148 + 1 || (float v155 = v144[v151], v154 > v155))
      {
        if (v149 > v154) {
          goto LABEL_151;
        }
      }
      else
      {
        float v154 = v144[v151];
        unint64_t v152 = v151;
        if (v149 > v155)
        {
LABEL_151:
          uint64_t v150 = v153;
LABEL_152:
          float v149 = v144[v148];
LABEL_153:
          v144[v150] = v149;
          v145[v150] = v145[v148];
          unint64_t v156 = v109 + ~v143;
          v124[v156] = v146;
          v125[v156] = v147;
          if (v147 != -1) {
            ++v143;
          }
          if (++v142 == v109)
          {
LABEL_158:
            memmove(v124, &v124[v109 - v143], 4 * v143);
            unint64_t result = (unint64_t)memmove(v125, &v125[v109 - v143], 8 * v143);
            uint64_t v157 = v109 - v143;
            if (v109 > v143)
            {
              v158 = (void *)(v410 + v417 * v434 + 8 * v143);
              v159 = (_DWORD *)(v424 + v417 * v111 + 4 * v143);
              do
              {
                *v159++ = 2139095039;
                *v158++ = -1;
                --v157;
              }
              while (v157);
            }
            unint64_t v113 = v441 + 1;
            uint64_t v117 = v434 + 8;
            v111 += 4;
            v116 += v114;
            unint64_t v115 = v403;
            goto LABEL_116;
          }
          goto LABEL_141;
        }
      }
      uint64_t v150 = v152;
      v144[v153] = v154;
      v145[v153] = v145[v152];
      v152 *= 2;
      uint64_t v151 = (2 * v150) | 1;
      uint64_t v153 = v150;
      if (v152 > v148) {
        goto LABEL_152;
      }
    }
  }
  if (a6 != 22)
  {
LABEL_374:
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v447, "metric type not implemented");
    faiss::FaissException::FaissException(exception, v447, "void faiss::knn_extra_metrics(const float *, const float *, size_t, size_t, size_t, MetricType, float, float_maxheap_array_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 191);
  }
  unint64_t v54 = a7[1];
  unint64_t result = faiss::InterruptCallback::get_period_hint((faiss::InterruptCallback *)(a5 * a3));
  unint64_t v352 = result;
  unint64_t v55 = a4;
  if (a4)
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    unint64_t v59 = v54 + 1;
    uint64_t v347 = 4 * result;
    uint64_t v349 = 8 * result;
    unint64_t v433 = v54;
    uint64_t v440 = 4 * a3;
    uint64_t v345 = 4 * result * a3;
    while (1)
    {
      unint64_t v60 = v58 + v352;
      unint64_t v359 = v58 + v352;
      uint64_t v366 = v57;
      if (v58 + v352 >= v55) {
        unint64_t v60 = v55;
      }
      uint64_t v61 = a1;
      uint64_t v373 = v56;
      uint64_t v62 = v56;
      unint64_t v381 = v60;
LABEL_61:
      if (v58 < v60) {
        break;
      }
      unint64_t result = (unint64_t)faiss::InterruptCallback::check((faiss::InterruptCallback *)result);
      uint64_t v57 = v366 + v349;
      uint64_t v56 = v373 + v347;
      a1 += v345;
      unint64_t v58 = v359;
      unint64_t v55 = a4;
      if (v359 >= a4) {
        return result;
      }
    }
    uint64_t v64 = a7[2];
    uint64_t v63 = a7[3];
    uint64_t v65 = a7[1];
    if (v54)
    {
      uint64_t v66 = (void *)(v64 + v65 * v57);
      unint64_t v67 = v54;
      uint64_t v68 = (_DWORD *)(v63 + v65 * v62);
      do
      {
        *v68++ = 2139095039;
        *v66++ = -1;
        --v67;
      }
      while (v67);
    }
    uint64_t v409 = v57;
    uint64_t v416 = v62;
    unint64_t v423 = v58;
    uint64_t v395 = v65;
    uint64_t v402 = v63;
    unint64_t v69 = (float *)(v63 + 4 * v65 * v58);
    uint64_t v388 = v64;
    int v70 = (void *)(v64 + 8 * v65 * v58);
    if (!a5) {
      goto LABEL_86;
    }
    uint64_t v71 = 0;
    int v72 = v69 - 1;
    unint64_t v73 = v70 - 1;
    uint64_t v74 = a2;
    do
    {
      if (a3)
      {
        uint64_t v75 = v69;
        uint64_t v76 = v70;
        uint64_t v77 = 0;
        float v78 = 0.0;
        do
        {
          float v79 = *(float *)(v61 + 4 * v77);
          float v80 = v74[v77];
          float v81 = (float)(v79 + v80) * 0.5;
          float v82 = logf(v81 / v79);
          float v78 = v78 + (float)((float)-(float)(v80 * logf(v81 / v80)) - (float)(v79 * v82));
          ++v77;
        }
        while (a3 != v77);
        float v83 = v78 * 0.5;
        int v70 = v76;
        unint64_t v69 = v75;
        unint64_t v54 = v433;
      }
      else
      {
        float v83 = 0.0;
      }
      if (v83 >= *v69) {
        goto LABEL_85;
      }
      if (v54 < 2)
      {
        uint64_t v84 = 1;
        goto LABEL_84;
      }
      uint64_t v85 = 3;
      unint64_t v86 = 2;
      uint64_t v87 = 1;
      while (1)
      {
        float v88 = v72[v86];
        if (v85 == v59 || (float v89 = v72[v85], v88 > v89))
        {
          if (v88 < v83) {
            break;
          }
          goto LABEL_81;
        }
        float v88 = v72[v85];
        unint64_t v86 = v85;
        if (v89 < v83) {
          break;
        }
LABEL_81:
        uint64_t v84 = v86;
        v72[v87] = v88;
        v73[v87] = v73[v86];
        v86 *= 2;
        uint64_t v85 = (2 * v84) | 1;
        uint64_t v87 = v84;
        if (v86 > v54) {
          goto LABEL_84;
        }
      }
      uint64_t v84 = v87;
LABEL_84:
      v72[v84] = v83;
      v73[v84] = v71;
LABEL_85:
      ++v71;
      uint64_t v74 = (float *)((char *)v74 + v440);
    }
    while (v71 != a5);
LABEL_86:
    if (!v54)
    {
      unint64_t v91 = 0;
      unint64_t v94 = v423;
      goto LABEL_105;
    }
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    float32x4_t v92 = v69 - 1;
    float32x4_t v93 = v70 - 1;
    unint64_t v94 = v423;
LABEL_88:
    float v95 = *v69;
    uint64_t v96 = *v70;
    unint64_t v97 = v54 - v90;
    float v98 = v92[v54 - v90];
    if (v54 - v90 < 2)
    {
      uint64_t v99 = 1;
      goto LABEL_100;
    }
    uint64_t v100 = 3;
    unint64_t v101 = 2;
    uint64_t v102 = 1;
    while (1)
    {
      float v103 = v92[v101];
      if (v100 == v97 + 1 || (float v104 = v92[v100], v103 > v104))
      {
        if (v98 > v103) {
          goto LABEL_98;
        }
      }
      else
      {
        float v103 = v92[v100];
        unint64_t v101 = v100;
        if (v98 > v104)
        {
LABEL_98:
          uint64_t v99 = v102;
LABEL_99:
          float v98 = v92[v97];
LABEL_100:
          v92[v99] = v98;
          v93[v99] = v93[v97];
          unint64_t v105 = v54 + ~v91;
          v69[v105] = v95;
          v70[v105] = v96;
          if (v96 != -1) {
            ++v91;
          }
          if (++v90 == v54)
          {
LABEL_105:
            memmove(v69, &v69[v54 - v91], 4 * v91);
            unint64_t result = (unint64_t)memmove(v70, &v70[v54 - v91], 8 * v91);
            uint64_t v106 = v54 - v91;
            if (v54 > v91)
            {
              float32x4_t v107 = (void *)(v388 + v395 * v409 + 8 * v91);
              float32x4_t v108 = (_DWORD *)(v402 + v395 * v416 + 4 * v91);
              do
              {
                *v108++ = 2139095039;
                *v107++ = -1;
                --v106;
              }
              while (v106);
            }
            unint64_t v58 = v94 + 1;
            uint64_t v57 = v409 + 8;
            uint64_t v62 = v416 + 4;
            v61 += v440;
            unint64_t v60 = v381;
            goto LABEL_61;
          }
          goto LABEL_88;
        }
      }
      uint64_t v99 = v101;
      v92[v102] = v103;
      v93[v102] = v93[v101];
      v101 *= 2;
      uint64_t v100 = (2 * v99) | 1;
      uint64_t v102 = v99;
      if (v101 > v97) {
        goto LABEL_99;
      }
    }
  }
  return result;
}

void sub_1DD0068F4(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 137) < 0)
  {
    operator delete(*(void **)(v3 - 160));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void faiss::get_extra_distance_computer(uint64_t a1, int a2)
{
  if (a2 > 19)
  {
    switch(a2)
    {
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        operator new();
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      default:
        break;
    }
  }
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v3, "metric type not implemented");
  faiss::FaissException::FaissException(exception, v3, "DistanceComputer *faiss::get_extra_distance_computer(size_t, MetricType, float, size_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/extra_distances.cpp", 217);
}

void sub_1DD006BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 32), (const float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(void *)(a1 + 8));
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_L2sqr((faiss *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a3), (const float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(void *)(a1 + 8));
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)1>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_L1(*(faiss **)(a1 + 32), (float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_L1((faiss *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a3), (float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)2>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::operator()(uint64_t a1, uint64_t a2)
{
  return faiss::fvec_Linf(*(faiss **)(a1 + 32), (float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_Linf((faiss *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a3), (float *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 8) * a2), *(const float **)(a1 + 8));
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)3>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

double faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::operator()(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (float *)a1[4];
  uint64_t v4 = (float *)(a1[5] + 4 * v2 * a2);
  double result = 0.0;
  do
  {
    float v6 = *v3++;
    float v7 = v6;
    float v8 = *v4++;
    *(float *)&double result = *(float *)&result + (float)(vabds_f32(v7, v8) / (float)(fabsf(v7) + fabsf(v8)));
    --v2;
  }
  while (v2);
  return result;
}

double faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (float *)(v4 + 4 * v3 * a3);
  float v6 = (float *)(v4 + 4 * v3 * a2);
  double result = 0.0;
  do
  {
    float v8 = *v5++;
    float v9 = v8;
    float v10 = *v6++;
    *(float *)&double result = *(float *)&result + (float)(vabds_f32(v9, v10) / (float)(fabsf(v9) + fabsf(v10)));
    --v3;
  }
  while (v3);
  return result;
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)20>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::operator()(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return NAN;
  }
  uint64_t v3 = (float *)a1[4];
  uint64_t v4 = (float *)(a1[5] + 4 * v2 * a2);
  float v5 = 0.0;
  float v6 = 0.0;
  do
  {
    float v7 = *v3++;
    float v8 = v7;
    float v9 = *v4++;
    float v5 = v5 + vabds_f32(v8, v9);
    float v6 = v6 + fabsf(v8 + v9);
    --v2;
  }
  while (v2);
  return v5 / v6;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return NAN;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  float v5 = (float *)(v4 + 4 * v3 * a3);
  float v6 = (float *)(v4 + 4 * v3 * a2);
  float v7 = 0.0;
  float v8 = 0.0;
  do
  {
    float v9 = *v5++;
    float v10 = v9;
    float v11 = *v6++;
    float v7 = v7 + vabds_f32(v10, v11);
    float v8 = v8 + fabsf(v10 + v11);
    --v3;
  }
  while (v3);
  return v7 / v8;
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)21>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::operator()(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (float *)a1[4];
    uint64_t v4 = (float *)(a1[5] + 4 * v2 * a2);
    float v5 = 0.0;
    do
    {
      float v6 = *v3++;
      float v7 = v6;
      float v8 = *v4++;
      float v9 = (float)(v7 + v8) * 0.5;
      float v10 = logf(v9 / v7);
      float v5 = v5 + (float)((float)-(float)(v8 * logf(v9 / v8)) - (float)(v7 * v10));
      --v2;
    }
    while (v2);
  }
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    float v5 = (float *)(v4 + 4 * v3 * a3);
    float v6 = (float *)(v4 + 4 * v3 * a2);
    float v7 = 0.0;
    do
    {
      float v8 = *v5++;
      float v9 = v8;
      float v10 = *v6++;
      float v11 = (float)(v9 + v10) * 0.5;
      float v12 = logf(v11 / v9);
      float v7 = v7 + (float)((float)-(float)(v10 * logf(v11 / v10)) - (float)(v9 * v12));
      --v3;
    }
    while (v3);
  }
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)22>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = *(float **)(a1 + 32);
  uint64_t v4 = (float *)(*(void *)(a1 + 40) + 4 * v2 * a2);
  float v5 = *(float *)(a1 + 16);
  float v6 = 0.0;
  do
  {
    float v7 = *v3++;
    float v8 = v7;
    float v9 = *v4++;
    float v6 = v6 + powf(vabds_f32(v8, v9), v5);
    --v2;
  }
  while (v2);
  return v6;
}

float faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::symmetric_dis(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  float v5 = (float *)(v4 + 4 * v3 * a3);
  float v6 = (float *)(v4 + 4 * v3 * a2);
  float v7 = *(float *)(a1 + 16);
  float v8 = 0.0;
  do
  {
    float v9 = *v5++;
    float v10 = v9;
    float v11 = *v6++;
    float v8 = v8 + powf(vabds_f32(v10, v11), v7);
    --v3;
  }
  while (v3);
  return v8;
}

void faiss::anonymous namespace'::ExtraDistanceComputer<faiss::VectorDistance<(faiss::MetricType)4>>::~ExtraDistanceComputer()
{
}

uint64_t faiss::hamming<64ul>(void *a1, void *a2)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)(*a2 ^ *a1));
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

float faiss::hamming<128ul>(int8x16_t *a1, int8x16_t *a2)
{
  int32x2_t v2 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a2, *a1))))));
  LODWORD(result) = vadd_s32(vdup_lane_s32(v2, 1), v2).u32[0];
  return result;
}

uint64_t faiss::hamming<256ul>(int8x16_t *a1, int8x16_t *a2)
{
  return vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a2, *a1))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a2[1], a1[1])))))));
}

uint64_t faiss::hamming(faiss *this, const unint64_t *a2, const unint64_t *a3)
{
  for (uint64_t i = 0; a3; a3 = (const unint64_t *)((char *)a3 - 1))
  {
    uint64_t v5 = *(void *)this;
    this = (faiss *)((char *)this + 8);
    uint64_t v4 = v5;
    uint64_t v6 = *a2++;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)(v6 ^ v4));
    v7.i16[0] = vaddlv_u8(v7);
    uint64_t i = (i + v7.i32[0]);
  }
  return i;
}

uint64_t *faiss::hammings(uint64_t *this, const unint64_t *a2, const unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  unint64_t v7 = a5 * (void)a3;
  if (a5 * (void)a3)
  {
    unint64_t v8 = 0;
    unint64_t v9 = a5 * a4;
    uint64_t v10 = 8 * a5;
    do
    {
      if (v9)
      {
        unint64_t v11 = 0;
        float v12 = a2;
        do
        {
          int v13 = 0;
          if (a5)
          {
            unint64_t v14 = this;
            uint64_t v15 = v12;
            uint64_t v16 = a5;
            do
            {
              uint64_t v18 = *v14++;
              uint64_t v17 = v18;
              uint64_t v19 = *v15++;
              uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)(v19 ^ v17));
              v20.i16[0] = vaddlv_u8(v20);
              v13 += v20.i32[0];
              --v16;
            }
            while (v16);
          }
          *(_DWORD *)(a6 + 4 * v11) = v13;
          v11 += a5;
          float v12 = (const unint64_t *)((char *)v12 + v10);
        }
        while (v11 < v9);
      }
      v8 += a5;
      this = (uint64_t *)((char *)this + v10);
    }
    while (v8 < v7);
  }
  return this;
}

float *faiss::fvec2bitvec(float *this, float *a2, unsigned __int8 *a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = v3 + 8;
      unsigned int v5 = a3 - v3;
      if (v4 <= (unint64_t)a3) {
        uint64_t v6 = 8;
      }
      else {
        uint64_t v6 = v5;
      }
      if ((int)v6 < 1)
      {
        char v7 = 0;
      }
      else
      {
        char v7 = 0;
        char v8 = 1;
        unint64_t v9 = this;
        do
        {
          float v10 = *v9++;
          if (v10 >= 0.0) {
            char v11 = v8;
          }
          else {
            char v11 = 0;
          }
          v7 |= v11;
          v8 *= 2;
          --v6;
        }
        while (v6);
      }
      *(unsigned char *)a2 = v7;
      a2 = (float *)((char *)a2 + 1);
      this += 8;
      unint64_t v3 = v4;
    }
    while (v4 < (unint64_t)a3);
  }
  return this;
}

float *faiss::fvecs2bitvecs(float *this, float *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    char v7 = this;
    unint64_t v8 = (unint64_t)(a3 + 7) >> 3;
    uint64_t v9 = 4 * (void)a3;
    do
    {
      this = faiss::fvec2bitvec(v7, a2, a3);
      a2 = (float *)((char *)a2 + v8);
      char v7 = (float *)((char *)v7 + v9);
      --v4;
    }
    while (v4);
  }
  return this;
}

void faiss::bitvecs2fvecs(faiss *this, const unsigned __int8 *a2, faiss *a3, float *a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    unint64_t v8 = ((unint64_t)a3 + 7) >> 3;
    uint64_t v9 = 4 * (void)a3;
    do
    {
      faiss::binary_to_real(a3, (uint64_t)this, a2, a4);
      a2 += v9;
      this = (faiss *)((char *)this + v8);
      uint64_t v4 = (float *)((char *)v4 - 1);
    }
    while (v4);
  }
}

unint64_t *faiss::bitvec_print(unint64_t *this, const unsigned __int8 *a2)
{
  if (a2)
  {
    unint64_t v3 = this;
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = 0;
      unint64_t v6 = *v3;
      int v7 = 64;
      do
      {
        unint64_t v5 = v6 & 1 | (2 * v5);
        v6 >>= 1;
        --v7;
      }
      while (v7);
      if (v4 < (unint64_t)a2)
      {
        unint64_t v8 = 0;
        do
        {
          printf("%d", v5 & 1);
          unint64_t v9 = v8 + 1;
          if (v8 > 0x3E) {
            break;
          }
          v5 >>= 1;
          ++v8;
        }
        while (v9 + v4 < (unint64_t)a2);
        v4 += v9;
      }
      ++v3;
      this = (unint64_t *)putchar(32);
    }
    while (v4 < (unint64_t)a2);
  }
  return this;
}

void faiss::bitvec_shuffle(faiss *this, unint64_t a2, uint64_t a3, unsigned int *a4, const int *a5, const unsigned __int8 *a6, unsigned __int8 *a7)
{
  if (a3)
  {
    float v12 = a4;
    uint64_t v13 = a3;
    do
    {
      unsigned int v15 = *v12++;
      unint64_t v14 = v15;
      if ((v15 & 0x80000000) != 0 || v14 >= a2)
      {
        memset(&v24, 0, sizeof(v24));
        int v20 = snprintf(0, 0, "Error: '%s' failed", "order[i] >= 0 && order[i] < da");
        std::string::resize(&v24, v20 + 1, 0);
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &v24;
        }
        else {
          uint64_t v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
        }
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v24.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v21, size, "Error: '%s' failed", "order[i] >= 0 && order[i] < da");
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v24, "void faiss::bitvec_shuffle(size_t, size_t, size_t, const int *, const uint8_t *, uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 433);
      }
      --v13;
    }
    while (v13);
  }
  if (this)
  {
    uint64_t v16 = 0;
    unint64_t v17 = (a2 + 7) >> 3;
    unint64_t v18 = (unint64_t)(a3 + 7) >> 3;
    do
    {
      bzero((void *)&a6[(void)v16 * v18], (unint64_t)(a3 + 7) >> 3);
      if (a3)
      {
        unint64_t v19 = 0;
        do
        {
          a6[(void)v16 * v18 + (v19 >> 3)] |= ((*((unsigned __int8 *)a5 + (void)v16 * v17 + ((int)a4[v19] >> 3)) >> (a4[v19] & 7)) & 1) << (v19 & 7);
          ++v19;
        }
        while (a3 != v19);
      }
      uint64_t v16 = (faiss *)((char *)v16 + 1);
    }
    while (v16 != this);
  }
}

void sub_1DD00761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *faiss::hammings(uint64_t *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  if ((a5 & 7) != 0)
  {
    memset(&v20, 0, sizeof(v20));
    int v16 = snprintf(0, 0, "Error: '%s' failed", "ncodes % 8 == 0");
    std::string::resize(&v20, v16 + 1, 0);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v17 = &v20;
    }
    else {
      unint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v20.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v17, size, "Error: '%s' failed", "ncodes % 8 == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v20, "void faiss::hammings(const uint8_t *, const uint8_t *, size_t, size_t, size_t, hamdis_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 464);
  }
  *((void *)&v7 + 1) = a5;
  *(void *)&long long v7 = a5 - 8;
  switch((unint64_t)(v7 >> 3))
  {
    case 0uLL:
      if (a3)
      {
        for (uint64_t i = 0; i != a3; ++i)
        {
          if (a4)
          {
            uint64_t v9 = this[(void)i];
            float v10 = a2;
            char v11 = a6;
            uint64_t v12 = a4;
            do
            {
              uint64_t v13 = v10->i64[0];
              float v10 = (int8x16_t *)((char *)v10 + 8);
              uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)(v13 ^ v9));
              v14.i16[0] = vaddlv_u8(v14);
              *v11++ = v14.i32[0];
              --v12;
            }
            while (v12);
          }
          a6 += a4;
        }
      }
      break;
    case 1uLL:
      this = (uint64_t *)faiss::hammings<128ul>((uint64_t)this, a2, (uint64_t)a3, a4, a6);
      break;
    case 3uLL:
      this = (uint64_t *)faiss::hammings<256ul>((uint64_t)this, a2, (uint64_t)a3, a4, a6);
      break;
    case 7uLL:
      this = (uint64_t *)faiss::hammings<512ul>((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a6);
      break;
    default:
      uint64_t v15 = 8 * a5;
      this = faiss::hammings(this, (const unint64_t *)a2, (const unint64_t *)a3, a4, v15, (uint64_t)a6, a7);
      break;
  }
  return this;
}

void sub_1DD00783C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::hammings<128ul>(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        int8x16_t v6 = *(int8x16_t *)(result + 16 * i);
        long long v7 = a2;
        unint64_t v8 = a5;
        uint64_t v9 = a4;
        do
        {
          int8x16_t v10 = *v7++;
          int32x2_t v11 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, v6))))));
          *v8++ = vadd_s32(vdup_lane_s32(v11, 1), v11).u32[0];
          --v9;
        }
        while (v9);
      }
      a5 += a4;
    }
  }
  return result;
}

uint64_t faiss::hammings<256ul>(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        int8x16_t v6 = (int8x16_t *)(result + 32 * i);
        int8x16_t v8 = *v6;
        int8x16_t v7 = v6[1];
        uint64_t v9 = a2;
        int8x16_t v10 = a5;
        uint64_t v11 = a4;
        do
        {
          int8x16_t v13 = *v9;
          int8x16_t v12 = v9[1];
          v9 += 2;
          *v10++ = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v13, v8))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v12, v7)))))));
          --v11;
        }
        while (v11);
      }
      a5 += a4;
    }
  }
  return result;
}

uint64_t faiss::hammings<512ul>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        uint64_t v6 = 0;
        uint64_t v7 = a2;
        do
        {
          uint64_t v8 = 0;
          int32x4_t v9 = 0uLL;
          do
          {
            int32x4_t v9 = vaddq_s32(v9, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v7 + v8), *(int8x16_t *)(result + v8)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v7 + v8 + 16), *(int8x16_t *)(result + v8 + 16))))))));
            v8 += 32;
          }
          while (v8 != 64);
          *(_DWORD *)(a5 + 4 * i * a4 + 4 * v6++) = vaddvq_s32(v9);
          v7 += 64;
        }
        while (v6 != a4);
      }
      result += 64;
    }
  }
  return result;
}

void faiss::hammings_knn_hc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *((void *)&v5 + 1) = a5;
  *(void *)&long long v5 = a5 - 4;
  switch((unint64_t)(v5 >> 2))
  {
    case 0uLL:
      faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
    case 1uLL:
      faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
    case 3uLL:
      faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
    case 7uLL:
      faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
    default:
      faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
  }
}

void faiss::hammings_knn_mc(faiss *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, int *a8, uint64_t *a9)
{
  *((void *)&v9 + 1) = a6;
  *(void *)&long long v9 = a6 - 4;
  switch((unint64_t)(v9 >> 2))
  {
    case 0uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v11, 33 * (void)a3, __x);
      operator new[]();
    case 1uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v11, 65 * (void)a3, __x);
      operator new[]();
    case 3uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v11, 129 * (void)a3, __x);
      operator new[]();
    case 7uLL:
      __x[0] = 0;
      std::vector<int>::vector(&v11, 257 * (void)a3, __x);
      operator new[]();
    default:
      __x[0] = 0;
      std::vector<int>::vector(&v11, (int)((8 * a6) | 1) * (void)a3, __x);
      operator new[]();
  }
}

void sub_1DD009390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::hamming_range_search(faiss *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, int a5, uint64_t a6, faiss::RangeSearchResult *a7, faiss::RangeSearchResult *a8)
{
  *((void *)&v13 + 1) = a6;
  *(void *)&long long v13 = a6 - 4;
  switch((unint64_t)(v13 >> 2))
  {
    case 0uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if (a6 != 4) {
          __assert_rtn("set", "hamming-inl.h", 86, "code_size == 4");
        }
        uint64_t v14 = 0;
        do
        {
          int v15 = *(_DWORD *)((char *)this + v14 * a6);
          int v16 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v14);
          if (a4)
          {
            unint64_t v18 = v16;
            uint64_t v19 = 0;
            std::string v20 = (const unsigned __int8 *)a2;
            do
            {
              v17.i32[0] = *(_DWORD *)v20 ^ v15;
              int8x8_t v17 = vcnt_s8(v17);
              v17.i16[0] = vaddlv_u8((uint8x8_t)v17);
              if (v17.i32[0] < a5) {
                faiss::RangeQueryResult::add(v18, (float)v17.i32[0], v19);
              }
              v20 += a6;
              ++v19;
            }
            while (a4 != v19);
          }
          ++v14;
        }
        while ((const unsigned __int8 *)v14 != a3);
      }
      goto LABEL_41;
    case 1uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if (a6 != 8) {
          __assert_rtn("set", "hamming-inl.h", 105, "code_size == 8");
        }
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = *(void *)((char *)this + v28 * a6);
          uint64_t v30 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v28);
          if (a4)
          {
            uint64_t v31 = v30;
            uint64_t v32 = 0;
            uint64_t v33 = (const unsigned __int8 *)a2;
            do
            {
              uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v33 ^ v29));
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.i32[0] < a5) {
                faiss::RangeQueryResult::add(v31, (float)v34.i32[0], v32);
              }
              v33 += a6;
              ++v32;
            }
            while (a4 != v32);
          }
          ++v28;
        }
        while ((const unsigned __int8 *)v28 != a3);
      }
      goto LABEL_41;
    case 3uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if (a6 != 16) {
          __assert_rtn("set", "hamming-inl.h", 124, "code_size == 16");
        }
        uint64_t v21 = 0;
        do
        {
          int8x16_t v52 = *(int8x16_t *)((char *)this + v21 * a6);
          uint64_t v22 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v21);
          if (a4)
          {
            uint64_t v23 = v22;
            uint64_t v24 = 0;
            uint64_t v25 = a2;
            do
            {
              int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v25, v52))))));
              int v27 = vadd_s32(vdup_lane_s32(v26, 1), v26).u32[0];
              if (v27 < a5) {
                faiss::RangeQueryResult::add(v23, (float)v27, v24);
              }
              uint64_t v25 = (int8x16_t *)((char *)v25 + a6);
              ++v24;
            }
            while (a4 != v24);
          }
          ++v21;
        }
        while ((const unsigned __int8 *)v21 != a3);
      }
      goto LABEL_41;
    case 7uLL:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        if (a6 != 32) {
          __assert_rtn("set", "hamming-inl.h", 173, "code_size == 32");
        }
        uint64_t v35 = 0;
        do
        {
          uint64_t v36 = (int8x16_t *)((char *)this + v35 * a6);
          int8x16_t v51 = *v36;
          int8x16_t v53 = v36[1];
          unint64_t v37 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v35);
          if (a4)
          {
            uint64_t v38 = v37;
            uint64_t v39 = 0;
            float v40 = a2;
            do
            {
              int v41 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*v40, v51))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v40[1], v53)))))));
              if (v41 < a5) {
                faiss::RangeQueryResult::add(v38, (float)v41, v39);
              }
              float v40 = (int8x16_t *)((char *)v40 + a6);
              ++v39;
            }
            while (a4 != v39);
          }
          ++v35;
        }
        while ((const unsigned __int8 *)v35 != a3);
      }
LABEL_41:
      faiss::RangeSearchPartialResult::finalize((faiss::RangeSearchPartialResult *)v57);
      break;
    default:
      faiss::RangeSearchPartialResult::RangeSearchPartialResult(v57, a7);
      if (a3)
      {
        uint64_t v43 = 0;
        int v44 = a6 - (v42 & 0xFFFFFFF8);
        do
        {
          unint64_t v54 = (char *)this + v43 * a6;
          int v55 = (int)a6 / 8;
          int v56 = v44;
          uint64_t v45 = (faiss::RangeQueryResult *)faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v57, v43);
          if (a4)
          {
            unint64_t v46 = v45;
            uint64_t v47 = 0;
            float v48 = (const unsigned __int8 *)a2;
            do
            {
              int v49 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v54, v48);
              if (v49 < a5) {
                faiss::RangeQueryResult::add(v46, (float)v49, v47);
              }
              v48 += a6;
              ++v47;
            }
            while (a4 != v47);
          }
          ++v43;
        }
        while ((const unsigned __int8 *)v43 != a3);
      }
      faiss::RangeSearchPartialResult::finalize((faiss::RangeSearchPartialResult *)v57);
      break;
  }
  if (__p)
  {
    unint64_t v59 = __p;
    operator delete(__p);
  }
  faiss::BufferList::~BufferList((faiss::BufferList *)v57);
}

void sub_1DD0098FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  faiss::BufferList::~BufferList((faiss::BufferList *)&a18);
  _Unwind_Resume(a1);
}

int8x16_t *faiss::hamming_count_thres(int8x16_t *this, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, __int32 a5, uint64_t a6, void *a7, unint64_t *a8)
{
  *((void *)&v8 + 1) = a6;
  *(void *)&long long v8 = a6 - 8;
  switch((unint64_t)(v8 >> 3))
  {
    case 0uLL:
      uint64_t v9 = 0;
      if (a3)
      {
        for (uint64_t i = 0; i != a3; ++i)
        {
          if (a4)
          {
            uint64_t v11 = a4;
            int8x16_t v12 = a2;
            do
            {
              uint64_t v13 = v12->i64[0];
              int8x16_t v12 = (int8x16_t *)((char *)v12 + 8);
              uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)(v13 ^ this->i64[0]));
              v14.i16[0] = vaddlv_u8(v14);
              if (v14.i32[0] <= a5) {
                ++v9;
              }
              --v11;
            }
            while (v11);
          }
          this = (int8x16_t *)((char *)this + 8);
        }
      }
      goto LABEL_24;
    case 1uLL:
      return faiss::hamming_count_thres<128ul>(this, a2, (uint64_t)a3, a4, a5, a7);
    case 3uLL:
      return faiss::hamming_count_thres<256ul>(this, a2, (uint64_t)a3, a4, a5, a7);
    case 7uLL:
      uint64_t v9 = 0;
      if (a3)
      {
        for (unint64_t j = 0; j != a3; ++j)
        {
          if (a4)
          {
            uint64_t v16 = 0;
            int8x8_t v17 = a2;
            do
            {
              uint64_t v18 = 0;
              int32x4_t v19 = 0uLL;
              do
              {
                int32x4_t v19 = vaddq_s32(v19, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v17[v18], this[v18]))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v17[v18 + 1], this[v18 + 1])))))));
                v18 += 2;
              }
              while (v18 != 4);
              if (vaddvq_s32(v19) <= a5) {
                ++v9;
              }
              v17 += 4;
              ++v16;
            }
            while (v16 != a4);
          }
          this += 4;
        }
      }
LABEL_24:
      *a7 = v9;
      return this;
    default:
      memset(&v25, 0, sizeof(v25));
      int v21 = snprintf(0, 0, "not implemented for %zu bits", a6);
      std::string::resize(&v25, v21 + 1, 0);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v25;
      }
      else {
        uint64_t v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v25.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v22, size, "not implemented for %zu bits", a6);
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v25, "void faiss::hamming_count_thres(const uint8_t *, const uint8_t *, size_t, size_t, hamdis_t, size_t, size_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 649);
  }
}

void sub_1DD009BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int8x16_t *faiss::hamming_count_thres<128ul>(int8x16_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, __int32 a5, void *a6)
{
  uint64_t v6 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        uint64_t v8 = a4;
        uint64_t v9 = a2;
        do
        {
          int8x16_t v10 = *v9++;
          int32x2_t v11 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, *result))))));
          if (vadd_s32(vdup_lane_s32(v11, 1), v11).i32[0] <= a5) {
            ++v6;
          }
          --v8;
        }
        while (v8);
      }
      ++result;
    }
  }
  *a6 = v6;
  return result;
}

int8x16_t *faiss::hamming_count_thres<256ul>(int8x16_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v6 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        uint64_t v8 = a4;
        uint64_t v9 = a2;
        do
        {
          int8x16_t v11 = *v9;
          int8x16_t v10 = v9[1];
          v9 += 2;
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v11, *result))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(v10, result[1]))))))) <= a5)++v6; {
          --v8;
          }
        }
        while (v8);
      }
      result += 2;
    }
  }
  *a6 = v6;
  return result;
}

int8x16_t *faiss::crosshamming_count_thres(int8x16_t *this, const unsigned __int8 *a2, __int32 a3, uint64_t a4, void *a5, unint64_t *a6)
{
  *((void *)&v6 + 1) = a4;
  *(void *)&long long v6 = a4 - 8;
  switch((unint64_t)(v6 >> 3))
  {
    case 0uLL:
      uint64_t v7 = 0;
      if (a2)
      {
        uint64_t v8 = 0;
        uint64_t v9 = a2 - 1;
        do
        {
          if (++v8 < a2)
          {
            int8x16_t v10 = 0;
            do
            {
              uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(this[1].i64[(void)v10] ^ this->i64[0]));
              v11.i16[0] = vaddlv_u8(v11);
              if (v11.i32[0] <= a3) {
                ++v7;
              }
              ++v10;
            }
            while (v9 != v10);
          }
          this = (int8x16_t *)((char *)this + 8);
          --v9;
        }
        while (v8 != a2);
      }
      *a5 = v7;
      break;
    case 1uLL:
      this = faiss::crosshamming_count_thres<128ul>(this, (unint64_t)a2, a3, a5);
      break;
    case 3uLL:
      this = faiss::crosshamming_count_thres<256ul>(this, (unint64_t)a2, a3, a5);
      break;
    case 7uLL:
      this = (int8x16_t *)faiss::crosshamming_count_thres<512ul>((uint64_t)this, (unint64_t)a2, a3, a5);
      break;
    default:
      memset(&v17, 0, sizeof(v17));
      int v13 = snprintf(0, 0, "not implemented for %zu bits", a4);
      std::string::resize(&v17, v13 + 1, 0);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint8x8_t v14 = &v17;
      }
      else {
        uint8x8_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v17.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v14, size, "not implemented for %zu bits", a4);
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v17, "void faiss::crosshamming_count_thres(const uint8_t *, size_t, hamdis_t, size_t, size_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 674);
  }
  return this;
}

void sub_1DD009ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int8x16_t *faiss::crosshamming_count_thres<128ul>(int8x16_t *result, unint64_t a2, __int32 a3, void *a4)
{
  uint64_t v4 = 0;
  if (a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a2;
    do
    {
      if (++v5 < a2)
      {
        uint64_t v7 = 1;
        do
        {
          int32x2_t v8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[v7], *result))))));
          if (vadd_s32(vdup_lane_s32(v8, 1), v8).i32[0] <= a3) {
            ++v4;
          }
          ++v7;
        }
        while (v6 != v7);
      }
      ++result;
      --v6;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

int8x16_t *faiss::crosshamming_count_thres<256ul>(int8x16_t *result, unint64_t a2, int a3, void *a4)
{
  uint64_t v4 = 0;
  if (a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a2 - 1;
    do
    {
      if (++v5 < a2)
      {
        uint64_t v7 = 0;
        do
        {
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2 * v7 + 1], *result))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2 * v7 + 2], result[1]))))))) <= a3)++v4; {
          ++v7;
          }
        }
        while (v6 != v7);
      }
      result += 2;
      --v6;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

uint64_t faiss::crosshamming_count_thres<512ul>(uint64_t result, unint64_t a2, int a3, void *a4)
{
  uint64_t v4 = 0;
  if (a2)
  {
    uint64_t v5 = 0;
    do
    {
      if (++v5 < a2)
      {
        uint64_t v6 = result + 16;
        uint64_t v7 = v5;
        do
        {
          uint64_t v8 = 0;
          int32x4_t v9 = 0uLL;
          do
          {
            int32x4_t v9 = vaddq_s32(v9, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v6 + v8), *(int8x16_t *)(result + v8)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v6 + v8 + 16), *(int8x16_t *)(result + v8 + 16))))))));
            v8 += 32;
          }
          while (v8 != 64);
          if (vaddvq_s32(v9) <= a3) {
            ++v4;
          }
          v6 += 64;
          ++v7;
        }
        while (v7 != a2);
      }
      result += 64;
    }
    while (v5 != a2);
  }
  *a4 = v4;
  return result;
}

uint64_t faiss::match_hamming_thres(int8x16_t *this, const unsigned __int8 *a2, const unsigned __int8 *a3, uint64_t a4, signed __int32 a5, uint64_t a6, const unsigned __int8 **a7, uint64_t *a8, int *a9)
{
  *((void *)&v9 + 1) = a6;
  *(void *)&long long v9 = a6 - 8;
  switch((unint64_t)(v9 >> 3))
  {
    case 0uLL:
      uint64_t v10 = 0;
      if (a3)
      {
        for (uint64_t i = 0; i != a3; ++i)
        {
          if (a4)
          {
            for (unint64_t j = 0; j != (const unsigned __int8 *)a4; ++j)
            {
              uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * (void)j] ^ this->i64[0]));
              v13.i16[0] = vaddlv_u8(v13);
              if (v13.i32[0] <= a5)
              {
                *a7 = i;
                a7[1] = j;
                a7 += 2;
                ++v10;
                *(_DWORD *)a8 = v13.i32[0];
                a8 = (uint64_t *)((char *)a8 + 4);
              }
            }
          }
          this = (int8x16_t *)((char *)this + 8);
        }
      }
      uint64_t result = v10;
      break;
    case 1uLL:
      uint64_t result = faiss::match_hamming_thres<128ul>(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (signed __int32 *)a8);
      break;
    case 3uLL:
      uint64_t result = faiss::match_hamming_thres<256ul>(this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (int *)a8);
      break;
    case 7uLL:
      uint64_t result = faiss::match_hamming_thres<512ul>((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, a5, a7, (int *)a8);
      break;
    default:
      memset(&v20, 0, sizeof(v20));
      int v16 = snprintf(0, 0, "not implemented for %zu bits", a6);
      std::string::resize(&v20, v16 + 1, 0);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v17 = &v20;
      }
      else {
        std::string v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v20.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v17, size, "not implemented for %zu bits", a6);
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v20, "size_t faiss::match_hamming_thres(const uint8_t *, const uint8_t *, size_t, size_t, hamdis_t, size_t, int64_t *, hamdis_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/hamming.cpp", 702);
  }
  return result;
}

void sub_1DD00A2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::match_hamming_thres<128ul>(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, signed __int32 a5, void *a6, signed __int32 *a7)
{
  uint64_t v7 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        for (uint64_t j = 0; j != a4; ++j)
        {
          int32x2_t v10 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 16 * j), *a1))))));
          signed __int32 v11 = vadd_s32(vdup_lane_s32(v10, 1), v10).u32[0];
          if (v11 <= a5)
          {
            *a6 = i;
            a6[1] = j;
            a6 += 2;
            ++v7;
            *a7++ = v11;
          }
        }
      }
      ++a1;
    }
  }
  return v7;
}

uint64_t faiss::match_hamming_thres<256ul>(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, int *a7)
{
  uint64_t v7 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        for (uint64_t j = 0; j != a4; ++j)
        {
          int v10 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 32 * j), *a1))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(a2 + 32 * j + 16), a1[1])))))));
          if (v10 <= a5)
          {
            *a6 = i;
            a6[1] = j;
            a6 += 2;
            ++v7;
            *a7++ = v10;
          }
        }
      }
      a1 += 2;
    }
  }
  return v7;
}

uint64_t faiss::match_hamming_thres<512ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, int *a7)
{
  uint64_t v7 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (a4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a2;
        do
        {
          uint64_t v11 = 0;
          int32x4_t v12 = 0uLL;
          do
          {
            int32x4_t v12 = vaddq_s32(v12, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v10 + v11), *(int8x16_t *)(a1 + v11)))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*(int8x16_t *)(v10 + v11 + 16), *(int8x16_t *)(a1 + v11 + 16))))))));
            v11 += 32;
          }
          while (v11 != 64);
          int v13 = vaddvq_s32(v12);
          if (v13 <= a5)
          {
            *a6 = i;
            a6[1] = v9;
            a6 += 2;
            ++v7;
            *a7++ = v13;
          }
          v10 += 64;
          ++v9;
        }
        while (v9 != a4);
      }
      a1 += 64;
    }
  }
  return v7;
}

void *faiss::generalized_hammings_knn_hc(void *result, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = result[1];
  if (a6) {
    faiss::HeapArray<faiss::CMax<int,long long>>::heapify();
  }
  if ((int)*result >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *result;
    uint64_t v14 = result[2];
    uint64_t v13 = result[3];
    unint64_t v15 = (int)v10;
    uint64_t v16 = result[1] & 0xFFFFFFFELL;
    uint64_t v17 = (int)v10 + 1;
    int v18 = a5 & 7;
    uint64_t v19 = ((int)a5 / 8);
    v20.i64[0] = 0x101010101010101;
    v20.i64[1] = 0x101010101010101;
    uint64_t v21 = a2;
    do
    {
      uint64_t v22 = v11 * a5;
      uint64_t result = (void *)(v13 + 4 * v11 * v15);
      uint64_t v23 = v14 + 8 * v11 * v15;
      if (a5 == 32)
      {
        if (!a4) {
          goto LABEL_81;
        }
        uint64_t v38 = 0;
        uint64_t v39 = (int8x16_t *)(a2 + v22);
        int8x16_t v41 = *v39;
        int8x16_t v40 = v39[1];
        int v42 = (char *)result - 4;
        uint64_t v43 = v23 - 8;
        int v44 = a3;
LABEL_27:
        int8x16_t v45 = veorq_s8(v44[1], v40);
        int8x16_t v46 = veorq_s8(*v44, v41);
        int8x16_t v47 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v45, 1uLL), v45);
        int8x16_t v48 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v46, 1uLL), v46);
        int8x16_t v49 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v47, 2uLL), v47);
        int8x16_t v50 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v48, 2uLL), v48);
        int v51 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v50, 4uLL), v50), v20))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v49, 4uLL), v49), v20)))))));
        if (v51 >= *(_DWORD *)result) {
          goto LABEL_40;
        }
        if (!v16)
        {
          uint64_t v57 = 1;
          goto LABEL_39;
        }
        uint64_t v52 = 3;
        unint64_t v53 = 2;
        uint64_t v54 = 1;
        while (1)
        {
          int v55 = *(_DWORD *)&v42[4 * v53];
          if (v52 == v17 || (int v56 = *(_DWORD *)&v42[4 * v52], v55 > v56))
          {
            if (v55 < v51) {
              goto LABEL_38;
            }
          }
          else
          {
            int v55 = *(_DWORD *)&v42[4 * v52];
            unint64_t v53 = v52;
            if (v56 < v51)
            {
LABEL_38:
              uint64_t v57 = v54;
LABEL_39:
              *(_DWORD *)&v42[4 * v57] = v51;
              *(void *)(v43 + 8 * v57) = v38;
LABEL_40:
              v44 += 2;
              if (++v38 == a4) {
                goto LABEL_81;
              }
              goto LABEL_27;
            }
          }
          uint64_t v57 = v53;
          *(_DWORD *)&v42[4 * v54] = v55;
          *(void *)(v43 + 8 * v54) = *(void *)(v43 + 8 * v53);
          v53 *= 2;
          uint64_t v52 = (2 * v57) | 1;
          uint64_t v54 = v57;
          if (v53 > v15) {
            goto LABEL_39;
          }
        }
      }
      if (a5 == 16)
      {
        if (!a4) {
          goto LABEL_81;
        }
        uint64_t v58 = 0;
        int8x16_t v59 = *(int8x16_t *)(a2 + v22);
        unint64_t v60 = (char *)result - 4;
        uint64_t v61 = v23 - 8;
        uint64_t v62 = a3;
LABEL_44:
        int8x16_t v63 = *v62++;
        int8x16_t v64 = veorq_s8(v63, v59);
        int8x16_t v65 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v64, 1uLL), v64);
        int8x16_t v66 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v65, 2uLL), v65);
        *(int32x2_t *)v66.i8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v66, 4uLL), v66), v20))))));
        signed __int32 v67 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(int32x2_t *)v66.i8).u32[0];
        if (v67 >= *(_DWORD *)result) {
          goto LABEL_57;
        }
        if (!v16)
        {
          uint64_t v73 = 1;
          goto LABEL_56;
        }
        uint64_t v68 = 3;
        unint64_t v69 = 2;
        uint64_t v70 = 1;
        while (1)
        {
          signed __int32 v71 = *(_DWORD *)&v60[4 * v69];
          if (v68 == v17 || (signed __int32 v72 = *(_DWORD *)&v60[4 * v68], v71 > v72))
          {
            if (v71 < v67) {
              goto LABEL_55;
            }
          }
          else
          {
            signed __int32 v71 = *(_DWORD *)&v60[4 * v68];
            unint64_t v69 = v68;
            if (v72 < v67)
            {
LABEL_55:
              uint64_t v73 = v70;
LABEL_56:
              *(_DWORD *)&v60[4 * v73] = v67;
              *(void *)(v61 + 8 * v73) = v58;
LABEL_57:
              if (++v58 == a4) {
                goto LABEL_81;
              }
              goto LABEL_44;
            }
          }
          uint64_t v73 = v69;
          *(_DWORD *)&v60[4 * v70] = v71;
          *(void *)(v61 + 8 * v70) = *(void *)(v61 + 8 * v69);
          v69 *= 2;
          uint64_t v68 = (2 * v73) | 1;
          uint64_t v70 = v73;
          if (v69 > v15) {
            goto LABEL_56;
          }
        }
      }
      if (a5 != 8)
      {
        if (v18) {
          faiss::generalized_hammings_knn_hc();
        }
        if (!a4) {
          goto LABEL_81;
        }
        uint64_t v74 = 0;
        uint64_t v75 = (char *)result - 4;
        uint64_t v76 = v23 - 8;
        uint64_t v77 = a3;
LABEL_62:
        if ((int)a5 < 8)
        {
          int v79 = 0;
        }
        else
        {
          uint64_t v78 = 0;
          int v79 = 0;
          do
          {
            unint64_t v80 = v77->i64[v78] ^ *(void *)(v21 + 8 * v78) | ((unint64_t)(v77->i64[v78] ^ *(void *)(v21 + 8 * v78)) >> 1);
            uint8x8_t v81 = (uint8x8_t)vcnt_s8((int8x8_t)((v80 | (v80 >> 2) | ((v80 | (v80 >> 2)) >> 4)) & 0x101010101010101));
            v81.i16[0] = vaddlv_u8(v81);
            v79 += v81.i32[0];
            ++v78;
          }
          while (v19 != v78);
        }
        if (v79 >= *(_DWORD *)result) {
          goto LABEL_80;
        }
        if (!v16)
        {
          uint64_t v87 = 1;
          goto LABEL_79;
        }
        uint64_t v82 = 3;
        unint64_t v83 = 2;
        uint64_t v84 = 1;
        while (1)
        {
          int v85 = *(_DWORD *)&v75[4 * v83];
          if (v82 == v17 || (int v86 = *(_DWORD *)&v75[4 * v82], v85 > v86))
          {
            if (v85 < v79) {
              goto LABEL_78;
            }
          }
          else
          {
            int v85 = *(_DWORD *)&v75[4 * v82];
            unint64_t v83 = v82;
            if (v86 < v79)
            {
LABEL_78:
              uint64_t v87 = v84;
LABEL_79:
              *(_DWORD *)&v75[4 * v87] = v79;
              *(void *)(v76 + 8 * v87) = v74;
LABEL_80:
              uint64_t v77 = (int8x16_t *)((char *)v77 + a5);
              if (++v74 == a4) {
                goto LABEL_81;
              }
              goto LABEL_62;
            }
          }
          uint64_t v87 = v83;
          *(_DWORD *)&v75[4 * v84] = v85;
          *(void *)(v76 + 8 * v84) = *(void *)(v76 + 8 * v83);
          v83 *= 2;
          uint64_t v82 = (2 * v87) | 1;
          uint64_t v84 = v87;
          if (v83 > v15) {
            goto LABEL_79;
          }
        }
      }
      if (!a4) {
        goto LABEL_81;
      }
      uint64_t v24 = 0;
      unint64_t v25 = *(void *)(a2 + v22);
      int32x2_t v26 = (char *)result - 4;
      uint64_t v27 = v23 - 8;
      uint64_t v28 = (uint64_t *)a3;
      do
      {
        uint64_t v29 = *v28++;
        unint64_t v30 = v29 ^ v25 | ((v29 ^ v25) >> 1) | ((v29 ^ v25 | ((v29 ^ v25) >> 1)) >> 2);
        uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)((v30 | (v30 >> 4)) & 0x101010101010101));
        v31.i16[0] = vaddlv_u8(v31);
        if (*(_DWORD *)result <= v31.i32[0]) {
          goto LABEL_23;
        }
        if (!v16)
        {
          uint64_t v37 = 1;
          goto LABEL_22;
        }
        uint64_t v32 = 3;
        unint64_t v33 = 2;
        uint64_t v34 = 1;
        while (1)
        {
          int v35 = *(_DWORD *)&v26[4 * v33];
          if (v32 != v17)
          {
            int v36 = *(_DWORD *)&v26[4 * v32];
            if (v35 <= v36) {
              break;
            }
          }
          if (v35 < v31.i32[0]) {
            goto LABEL_21;
          }
LABEL_18:
          uint64_t v37 = v33;
          *(_DWORD *)&v26[4 * v34] = v35;
          *(void *)(v27 + 8 * v34) = *(void *)(v27 + 8 * v33);
          v33 *= 2;
          uint64_t v32 = (2 * v37) | 1;
          uint64_t v34 = v37;
          if (v33 > v15) {
            goto LABEL_22;
          }
        }
        int v35 = *(_DWORD *)&v26[4 * v32];
        unint64_t v33 = v32;
        if (v36 >= v31.i32[0]) {
          goto LABEL_18;
        }
LABEL_21:
        uint64_t v37 = v34;
LABEL_22:
        *(_DWORD *)&v26[4 * v37] = v31.i32[0];
        *(void *)(v27 + 8 * v37) = v24;
LABEL_23:
        ++v24;
      }
      while (v24 != a4);
LABEL_81:
      ++v11;
      v21 += a5;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t faiss::HammingComputerDefault::hamming(faiss::HammingComputerDefault *this, const unsigned __int8 *a2)
{
  uint64_t result = 0;
  uint64_t v4 = *(void *)this;
  int v5 = *((_DWORD *)this + 2);
  uint64_t v6 = v5;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  switch(v5 & 7)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      goto LABEL_4;
    default:
      while (1)
      {
        BOOL v14 = __OFSUB__(v5, 8);
        v5 -= 8;
        if (v5 < 0 != v14) {
          break;
        }
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v7] ^ *(void *)(v4 + 8 * v7)));
        v15.i16[0] = vaddlv_u8(v15);
        LODWORD(result) = result + v15.i32[0];
        ++v7;
LABEL_4:
        uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v7] ^ *(void *)(v4 + 8 * v7)));
        v16.i16[0] = vaddlv_u8(v16);
        LODWORD(result) = result + v16.i32[0];
        int v8 = v7 + 1;
LABEL_5:
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v8] ^ *(void *)(v4 + 8 * v8)));
        v17.i16[0] = vaddlv_u8(v17);
        LODWORD(result) = result + v17.i32[0];
        int v9 = v8 + 1;
LABEL_6:
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v9] ^ *(void *)(v4 + 8 * v9)));
        v18.i16[0] = vaddlv_u8(v18);
        LODWORD(result) = result + v18.i32[0];
        int v10 = v9 + 1;
LABEL_7:
        uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v10] ^ *(void *)(v4 + 8 * v10)));
        v19.i16[0] = vaddlv_u8(v19);
        LODWORD(result) = result + v19.i32[0];
        int v11 = v10 + 1;
LABEL_8:
        uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v11] ^ *(void *)(v4 + 8 * v11)));
        v20.i16[0] = vaddlv_u8(v20);
        LODWORD(result) = result + v20.i32[0];
        int v12 = v11 + 1;
LABEL_9:
        uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v12] ^ *(void *)(v4 + 8 * v12)));
        v21.i16[0] = vaddlv_u8(v21);
        LODWORD(result) = result + v21.i32[0];
        int v13 = v12 + 1;
LABEL_10:
        uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&a2[8 * v13] ^ *(void *)(v4 + 8 * v13)));
        v22.i16[0] = vaddlv_u8(v22);
        uint64_t result = (result + v22.i32[0]);
        int v7 = v13 + 1;
      }
      int v23 = *((_DWORD *)this + 3);
      if (v23)
      {
        int v24 = v23 - 1;
        unint64_t v25 = (unsigned char *)(v4 + 8 * v6);
        int32x2_t v26 = &a2[8 * v6];
        switch(v24)
        {
          case 0:
            goto LABEL_19;
          case 1:
            goto LABEL_18;
          case 2:
            goto LABEL_17;
          case 3:
            goto LABEL_16;
          case 4:
            goto LABEL_15;
          case 5:
            goto LABEL_14;
          case 6:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[6] ^ v25[6]];
LABEL_14:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[5] ^ v25[5]];
LABEL_15:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[4] ^ v25[4]];
LABEL_16:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[3] ^ v25[3]];
LABEL_17:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[2] ^ v25[2]];
LABEL_18:
            LODWORD(result) = result + faiss::hamdis_tab_ham_bytes[v26[1] ^ v25[1]];
LABEL_19:
            uint64_t result = result + faiss::hamdis_tab_ham_bytes[*v26 ^ *v25];
            break;
          default:
            return result;
        }
      }
      return result;
  }
}

uint64_t *faiss::HCounterState<faiss::HammingComputer4>::update_counter(uint64_t *result, _DWORD *a2, uint64_t a3, int8x8_t a4)
{
  int v4 = *((_DWORD *)result + 5);
  a4.i32[0] = *((_DWORD *)result + 4) ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a4);
  v5.i16[0] = vaddlv_u8(v5);
  BOOL v6 = v5.i32[0] >= v4;
  if (v5.i32[0] <= v4)
  {
    int v7 = *((_DWORD *)result + 8);
    if (v6)
    {
      int v15 = *((_DWORD *)result + 7);
      if (v15 < v7)
      {
        *((_DWORD *)result + 7) = v15 + 1;
        uint64_t v16 = *result;
        *(void *)(result[1] + 8 * (v15 + v7 * v5.i32[0])) = a3;
        *(_DWORD *)(v16 + 4 * v5.u32[0]) = v15 + 1;
      }
    }
    else
    {
      uint64_t v8 = *result;
      uint64_t v9 = result[1];
      int v10 = *(_DWORD *)(*result + 4 * v5.u32[0]);
      *(_DWORD *)(*result + 4 * v5.u32[0]) = v10 + 1;
      *(void *)(v9 + 8 * (v10 + v7 * v5.i32[0])) = a3;
      int v11 = *((_DWORD *)result + 6) + 1;
      int v12 = *((_DWORD *)result + 8);
      *((_DWORD *)result + 6) = v11;
      if (v11 == v12)
      {
        int v13 = *((_DWORD *)result + 5);
        do
        {
          if (v13 < 1) {
            break;
          }
          *((_DWORD *)result + 5) = --v13;
          int v14 = *(_DWORD *)(v8 + 4 * v13);
          *((_DWORD *)result + 6) = v11 - v14;
          *((_DWORD *)result + 7) = v14;
        }
        while (!v14);
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t *faiss::HCounterState<faiss::HammingComputer8>::update_counter(uint64_t *result, void *a2, uint64_t a3)
{
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)(result[2] ^ *a2));
  v3.i16[0] = vaddlv_u8(v3);
  int v4 = *((_DWORD *)result + 6);
  if (v4 >= v3.i32[0])
  {
    int v5 = *((_DWORD *)result + 9);
    if (v4 <= v3.i32[0])
    {
      int v13 = *((_DWORD *)result + 8);
      if (v13 < v5)
      {
        *((_DWORD *)result + 8) = v13 + 1;
        uint64_t v14 = *result;
        *(void *)(result[1] + 8 * (v13 + v5 * v3.i32[0])) = a3;
        *(_DWORD *)(v14 + 4 * v3.u32[0]) = v13 + 1;
      }
    }
    else
    {
      uint64_t v6 = *result;
      uint64_t v7 = result[1];
      int v8 = *(_DWORD *)(*result + 4 * v3.u32[0]);
      *(_DWORD *)(*result + 4 * v3.u32[0]) = v8 + 1;
      *(void *)(v7 + 8 * (v8 + v5 * v3.i32[0])) = a3;
      int v9 = *((_DWORD *)result + 7) + 1;
      int v10 = *((_DWORD *)result + 9);
      *((_DWORD *)result + 7) = v9;
      if (v9 == v10)
      {
        int v11 = *((_DWORD *)result + 6);
        do
        {
          if (v11 < 1) {
            break;
          }
          *((_DWORD *)result + 6) = --v11;
          int v12 = *(_DWORD *)(v6 + 4 * v11);
          *((_DWORD *)result + 7) = v9 - v12;
          *((_DWORD *)result + 8) = v12;
        }
        while (!v12);
      }
    }
  }
  return result;
}

int8x16_t *faiss::HCounterState<faiss::HammingComputer16>::update_counter(int8x16_t *result, int8x16_t *a2, uint64_t a3)
{
  int32x2_t v3 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[1], *a2))))));
  unsigned __int32 v4 = vadd_s32(vdup_lane_s32(v3, 1), v3).u32[0];
  signed __int32 v5 = result[2].i32[0];
  if ((int)v4 <= v5)
  {
    __int32 v6 = result[2].i32[3];
    if ((int)v4 >= v5)
    {
      __int32 v14 = result[2].i32[2];
      if (v14 < v6)
      {
        result[2].i32[2] = v14 + 1;
        uint64_t v15 = result->i64[0];
        *(void *)(result->i64[1] + 8 * (int)(v14 + v6 * v4)) = a3;
        *(_DWORD *)(v15 + 4 * v4) = v14 + 1;
      }
    }
    else
    {
      uint64_t v7 = result->i64[0];
      uint64_t v8 = result->i64[1];
      int v9 = *(_DWORD *)(result->i64[0] + 4 * v4);
      *(_DWORD *)(result->i64[0] + 4 * v4) = v9 + 1;
      *(void *)(v8 + 8 * (int)(v9 + v6 * v4)) = a3;
      int v10 = result[2].i32[1] + 1;
      __int32 v11 = result[2].i32[3];
      result[2].i32[1] = v10;
      if (v10 == v11)
      {
        int v12 = result[2].i32[0];
        do
        {
          if (v12 < 1) {
            break;
          }
          result[2].i32[0] = --v12;
          __int32 v13 = *(_DWORD *)(v7 + 4 * v12);
          result[2].i32[1] = v10 - v13;
          result[2].i32[2] = v13;
        }
        while (!v13);
      }
    }
  }
  return result;
}

int8x16_t *faiss::HCounterState<faiss::HammingComputer32>::update_counter(int8x16_t *result, int8x16_t *a2, uint64_t a3)
{
  unsigned int v3 = vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[1], *a2))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(result[2], a2[1])))))));
  signed int v4 = result[3].i32[0];
  if ((int)v3 <= v4)
  {
    __int32 v5 = result[3].i32[3];
    if ((int)v3 >= v4)
    {
      __int32 v13 = result[3].i32[2];
      if (v13 < v5)
      {
        result[3].i32[2] = v13 + 1;
        uint64_t v14 = result->i64[0];
        *(void *)(result->i64[1] + 8 * (int)(v13 + v5 * v3)) = a3;
        *(_DWORD *)(v14 + 4 * v3) = v13 + 1;
      }
    }
    else
    {
      uint64_t v6 = result->i64[0];
      uint64_t v7 = result->i64[1];
      int v8 = *(_DWORD *)(result->i64[0] + 4 * v3);
      *(_DWORD *)(result->i64[0] + 4 * v3) = v8 + 1;
      *(void *)(v7 + 8 * (int)(v8 + v5 * v3)) = a3;
      int v9 = result[3].i32[1] + 1;
      __int32 v10 = result[3].i32[3];
      result[3].i32[1] = v9;
      if (v9 == v10)
      {
        int v11 = result[3].i32[0];
        do
        {
          if (v11 < 1) {
            break;
          }
          result[3].i32[0] = --v11;
          __int32 v12 = *(_DWORD *)(v6 + 4 * v11);
          result[3].i32[1] = v9 - v12;
          result[3].i32[2] = v12;
        }
        while (!v12);
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer32>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t faiss::HCounterState<faiss::HammingComputerDefault>::update_counter(uint64_t *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)(a1 + 2), a2);
  int v6 = *((_DWORD *)a1 + 8);
  if ((int)result <= v6)
  {
    int v7 = *((_DWORD *)a1 + 11);
    if ((int)result >= v6)
    {
      int v14 = *((_DWORD *)a1 + 10);
      if (v14 < v7)
      {
        *((_DWORD *)a1 + 10) = v14 + 1;
        uint64_t v15 = *a1;
        *(void *)(a1[1] + 8 * (v14 + v7 * (int)result)) = a3;
        *(_DWORD *)(v15 + 4 * (int)result) = v14 + 1;
      }
    }
    else
    {
      uint64_t v8 = *a1;
      uint64_t v9 = a1[1];
      int v10 = *(_DWORD *)(*a1 + 4 * (int)result);
      *(_DWORD *)(*a1 + 4 * (int)result) = v10 + 1;
      *(void *)(v9 + 8 * (v10 + v7 * (int)result)) = a3;
      int v11 = *((_DWORD *)a1 + 9) + 1;
      LODWORD(v9) = *((_DWORD *)a1 + 11);
      *((_DWORD *)a1 + 9) = v11;
      if (v11 == v9)
      {
        int v12 = *((_DWORD *)a1 + 8);
        do
        {
          if (v12 < 1) {
            break;
          }
          *((_DWORD *)a1 + 8) = --v12;
          int v13 = *(_DWORD *)(v8 + 4 * v12);
          *((_DWORD *)a1 + 9) = v11 - v13;
          *((_DWORD *)a1 + 10) = v13;
        }
        while (!v13);
      }
    }
  }
  return result;
}

void faiss::generalized_hammings_knn_hc()
{
  __assert_rtn("GenHammingComputerM8", "hamming-inl.h", 445, "code_size % 8 == 0");
}

float faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>(float *a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4) {
    return 0.0;
  }
  if (a5 >= a3)
  {
    if (a6) {
      *a6 = a5;
    }
    return -3.4028e38;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    int v29 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v29 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v30 = &v34;
    }
    else {
      unint64_t v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v34.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v30, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<float, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v9 = a4;
  int v12 = 0;
  float v13 = *a1;
  float v14 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v15 = &a1[a3];
  float v16 = *(v15 - 1);
  if (*a1 <= v14) {
    float v17 = *a1;
  }
  else {
    float v17 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (*a1 <= v14) {
    float v13 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v17 >= v16) {
    float v18 = v17;
  }
  else {
    float v18 = *(v15 - 1);
  }
  float v19 = 3.4028e38;
  float v20 = -3.4028e38;
  if (v13 >= v16) {
    float v21 = v18;
  }
  else {
    float v21 = v13;
  }
  while (2)
  {
    uint64_t v22 = 0;
    unint64_t v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      float v23 = a1[v22];
      if (v23 <= v21)
      {
        if (v23 != v21) {
          goto LABEL_21;
        }
        int v24 = &v34;
      }
      else
      {
        int v24 = (std::string *)&v33;
      }
      ++v24->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v22;
    }
    while (a3 != v22);
    unint64_t v25 = v33;
    if (v33 <= v9)
    {
      float v19 = v21;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v9) {
        goto LABEL_26;
      }
      unint64_t v27 = v9;
    }
    else
    {
      float v20 = v21;
      if (v33 <= a5)
      {
        unint64_t v27 = v33;
        break;
      }
LABEL_26:
      float v26 = faiss::partitioning::sample_threshold_median3<faiss::CMin<float,long long>>((uint64_t)a1, a3, v19, v20);
      if (v26 != v19)
      {
        float v21 = v26;
        if (++v12 == 200)
        {
          unint64_t v27 = 0;
          break;
        }
        continue;
      }
      unint64_t v27 = 0;
    }
    break;
  }
  if ((uint64_t)(v27 - v25) < 0)
  {
    float v21 = nextafterf(v21, INFINITY);
    unint64_t v27 = v9;
  }
  else
  {
    unint64_t v9 = v27 - v25;
    if (v27 - v25 > v34.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v27 != (int)faiss::partitioning::compress_array<faiss::CMin<float,long long>>(a1, a2, a3, v9, v21)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v27;
  }
  return v21;
}

void sub_1DD00B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float faiss::partitioning::partition_fuzzy_median3<faiss::CMax<float,long long>>(float *a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4) {
    return 0.0;
  }
  if (a5 >= a3)
  {
    if (a6) {
      *a6 = a5;
    }
    return 3.4028e38;
  }
  if (a3 <= 2)
  {
    memset(&v34, 0, sizeof(v34));
    int v29 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v34, v29 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v30 = &v34;
    }
    else {
      unint64_t v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v34.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v30, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<float, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v9 = a4;
  int v12 = 0;
  float v13 = *a1;
  float v14 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v15 = &a1[a3];
  float v16 = *(v15 - 1);
  if (*a1 <= v14) {
    float v17 = *a1;
  }
  else {
    float v17 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (*a1 <= v14) {
    float v13 = *(float *)((char *)a1 + ((2 * a3) & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v17 >= v16) {
    float v18 = v17;
  }
  else {
    float v18 = *(v15 - 1);
  }
  float v19 = -3.4028e38;
  float v20 = 3.4028e38;
  if (v13 >= v16) {
    float v21 = v18;
  }
  else {
    float v21 = v13;
  }
  while (2)
  {
    uint64_t v22 = 0;
    unint64_t v33 = 0;
    v34.__r_.__value_.__r.__words[0] = 0;
    do
    {
      float v23 = a1[v22];
      if (v23 >= v21)
      {
        if (v23 != v21) {
          goto LABEL_21;
        }
        int v24 = &v34;
      }
      else
      {
        int v24 = (std::string *)&v33;
      }
      ++v24->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v22;
    }
    while (a3 != v22);
    unint64_t v25 = v33;
    if (v33 <= v9)
    {
      float v19 = v21;
      if (v34.__r_.__value_.__r.__words[0] + v33 < v9) {
        goto LABEL_26;
      }
      unint64_t v27 = v9;
    }
    else
    {
      float v20 = v21;
      if (v33 <= a5)
      {
        unint64_t v27 = v33;
        break;
      }
LABEL_26:
      float v26 = faiss::partitioning::sample_threshold_median3<faiss::CMax<float,long long>>((uint64_t)a1, a3, v19, v20);
      if (v26 != v19)
      {
        float v21 = v26;
        if (++v12 == 200)
        {
          unint64_t v27 = 0;
          break;
        }
        continue;
      }
      unint64_t v27 = 0;
    }
    break;
  }
  if ((uint64_t)(v27 - v25) < 0)
  {
    float v21 = nextafterf(v21, -INFINITY);
    unint64_t v27 = v9;
  }
  else
  {
    unint64_t v9 = v27 - v25;
    if (v27 - v25 > v34.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v27 != (int)faiss::partitioning::compress_array<faiss::CMax<float,long long>>(a1, a2, a3, v9, v21)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v27;
  }
  return v21;
}

void sub_1DD00B684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMin<unsigned short,long long>>(unsigned __int16 *a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4)
  {
    if (a6)
    {
      unsigned __int16 v16 = 0;
      *a6 = 0xFFFFLL;
      return v16;
    }
    return 0;
  }
  if (a5 >= a3)
  {
    if (a6)
    {
      unsigned __int16 v16 = 0;
      *a6 = a5;
      return v16;
    }
    return 0;
  }
  if (a3 <= 2)
  {
    memset(&v32, 0, sizeof(v32));
    int v25 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v32, v25 + 1, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v26 = &v32;
    }
    else {
      float v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v26, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v32, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<unsigned short, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v8 = a4;
  int v10 = 0;
  unsigned __int16 v11 = 0;
  unsigned int v12 = *a1;
  unsigned int v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13) {
    unsigned int v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else {
    unsigned int v14 = *a1;
  }
  if (v12 <= v13) {
    unsigned int v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  unsigned int v15 = a1[a3 - 1];
  if (v14 <= v15) {
    LOWORD(v14) = a1[a3 - 1];
  }
  if (v12 >= v15) {
    unsigned __int16 v16 = v14;
  }
  else {
    unsigned __int16 v16 = v12;
  }
  unsigned __int16 v17 = -1;
  while (2)
  {
    uint64_t v18 = 0;
    unint64_t v31 = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    do
    {
      unsigned int v19 = a1[v18];
      if (v19 <= v16)
      {
        if (v19 != v16) {
          goto LABEL_21;
        }
        float v20 = &v32;
      }
      else
      {
        float v20 = (std::string *)&v31;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    unint64_t v21 = v31;
    if (v31 <= v8)
    {
      unsigned __int16 v17 = v16;
      if (v32.__r_.__value_.__r.__words[0] + v31 < v8) {
        goto LABEL_26;
      }
      unint64_t v23 = v8;
    }
    else
    {
      unsigned __int16 v11 = v16;
      if (v31 <= a5)
      {
        unint64_t v23 = v31;
        break;
      }
LABEL_26:
      int v22 = faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>((uint64_t)a1, a3, v17, v11);
      if (v22 != v17)
      {
        unsigned __int16 v16 = v22;
        if (++v10 == 200)
        {
          unint64_t v23 = 0;
          break;
        }
        continue;
      }
      unint64_t v23 = 0;
    }
    break;
  }
  if ((uint64_t)(v23 - v21) < 0)
  {
    ++v16;
    unint64_t v23 = v8;
  }
  else
  {
    unint64_t v8 = v23 - v21;
    if (v23 - v21 > v32.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v23 != (int)faiss::partitioning::compress_array<faiss::CMin<unsigned short,long long>>(a1, a2, a3, v16, v8)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v23;
  }
  return v16;
}

void sub_1DD00B958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMax<unsigned short,long long>>(unsigned __int16 *a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4)
  {
    unsigned __int16 v16 = 0;
    if (a6) {
      *a6 = 0;
    }
    return v16;
  }
  if (a5 >= a3)
  {
    if (a6) {
      *a6 = a5;
    }
    return (unsigned __int16)-1;
  }
  if (a3 <= 2)
  {
    memset(&v32, 0, sizeof(v32));
    int v25 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v32, v25 + 1, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v26 = &v32;
    }
    else {
      float v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v26, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v32, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<unsigned short, long long>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v8 = a4;
  int v10 = 0;
  unsigned __int16 v11 = 0;
  unsigned int v12 = *a1;
  unsigned int v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13) {
    unsigned int v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else {
    unsigned int v14 = *a1;
  }
  if (v12 <= v13) {
    unsigned int v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  unsigned int v15 = a1[a3 - 1];
  if (v14 <= v15) {
    LOWORD(v14) = a1[a3 - 1];
  }
  if (v12 >= v15) {
    unsigned __int16 v16 = v14;
  }
  else {
    unsigned __int16 v16 = v12;
  }
  unsigned __int16 v17 = -1;
  while (2)
  {
    uint64_t v18 = 0;
    unint64_t v31 = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    do
    {
      unsigned int v19 = a1[v18];
      if (v19 >= v16)
      {
        if (v19 != v16) {
          goto LABEL_21;
        }
        float v20 = &v32;
      }
      else
      {
        float v20 = (std::string *)&v31;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    unint64_t v21 = v31;
    if (v31 <= v8)
    {
      unsigned __int16 v11 = v16;
      if (v32.__r_.__value_.__r.__words[0] + v31 < v8) {
        goto LABEL_26;
      }
      unint64_t v23 = v8;
    }
    else
    {
      unsigned __int16 v17 = v16;
      if (v31 <= a5)
      {
        unint64_t v23 = v31;
        break;
      }
LABEL_26:
      int v22 = faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>((uint64_t)a1, a3, v11, v17);
      if (v22 != v11)
      {
        unsigned __int16 v16 = v22;
        if (++v10 == 200)
        {
          unint64_t v23 = 0;
          break;
        }
        continue;
      }
      unint64_t v23 = 0;
    }
    break;
  }
  if ((uint64_t)(v23 - v21) < 0)
  {
    --v16;
    unint64_t v23 = v8;
  }
  else
  {
    unint64_t v8 = v23 - v21;
    if (v23 - v21 > v32.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v23 != (int)faiss::partitioning::compress_array<faiss::CMax<unsigned short,long long>>(a1, a2, a3, v16, v8)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v23;
  }
  return v16;
}

void sub_1DD00BC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMin<unsigned short,int>>(unsigned __int16 *a1, _DWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4)
  {
    if (a6)
    {
      unsigned __int16 v16 = 0;
      *a6 = 0xFFFFLL;
      return v16;
    }
    return 0;
  }
  if (a5 >= a3)
  {
    if (a6)
    {
      unsigned __int16 v16 = 0;
      *a6 = a5;
      return v16;
    }
    return 0;
  }
  if (a3 <= 2)
  {
    memset(&v32, 0, sizeof(v32));
    int v25 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v32, v25 + 1, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v26 = &v32;
    }
    else {
      float v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v26, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v32, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMin<unsigned short, int>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v8 = a4;
  int v10 = 0;
  unsigned __int16 v11 = 0;
  unsigned int v12 = *a1;
  unsigned int v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13) {
    unsigned int v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else {
    unsigned int v14 = *a1;
  }
  if (v12 <= v13) {
    unsigned int v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  unsigned int v15 = a1[a3 - 1];
  if (v14 <= v15) {
    LOWORD(v14) = a1[a3 - 1];
  }
  if (v12 >= v15) {
    unsigned __int16 v16 = v14;
  }
  else {
    unsigned __int16 v16 = v12;
  }
  unsigned __int16 v17 = -1;
  while (2)
  {
    uint64_t v18 = 0;
    unint64_t v31 = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    do
    {
      unsigned int v19 = a1[v18];
      if (v19 <= v16)
      {
        if (v19 != v16) {
          goto LABEL_21;
        }
        float v20 = &v32;
      }
      else
      {
        float v20 = (std::string *)&v31;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    unint64_t v21 = v31;
    if (v31 <= v8)
    {
      unsigned __int16 v17 = v16;
      if (v32.__r_.__value_.__r.__words[0] + v31 < v8) {
        goto LABEL_26;
      }
      unint64_t v23 = v8;
    }
    else
    {
      unsigned __int16 v11 = v16;
      if (v31 <= a5)
      {
        unint64_t v23 = v31;
        break;
      }
LABEL_26:
      int v22 = faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>((uint64_t)a1, a3, v17, v11);
      if (v22 != v17)
      {
        unsigned __int16 v16 = v22;
        if (++v10 == 200)
        {
          unint64_t v23 = 0;
          break;
        }
        continue;
      }
      unint64_t v23 = 0;
    }
    break;
  }
  if ((uint64_t)(v23 - v21) < 0)
  {
    ++v16;
    unint64_t v23 = v8;
  }
  else
  {
    unint64_t v8 = v23 - v21;
    if (v23 - v21 > v32.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v23 != (int)faiss::partitioning::compress_array<faiss::CMin<unsigned short,int>>(a1, a2, a3, v16, v8)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v23;
  }
  return v16;
}

void sub_1DD00BEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::partitioning::partition_fuzzy_median3<faiss::CMax<unsigned short,int>>(unsigned __int16 *a1, _DWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t *a6)
{
  if (!a4)
  {
    unsigned __int16 v16 = 0;
    if (a6) {
      *a6 = 0;
    }
    return v16;
  }
  if (a5 >= a3)
  {
    if (a6) {
      *a6 = a5;
    }
    return (unsigned __int16)-1;
  }
  if (a3 <= 2)
  {
    memset(&v32, 0, sizeof(v32));
    int v25 = snprintf(0, 0, "Error: '%s' failed", "n >= 3");
    std::string::resize(&v32, v25 + 1, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v26 = &v32;
    }
    else {
      float v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v26, size, "Error: '%s' failed", "n >= 3");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v32, "typename C::T faiss::partitioning::partition_fuzzy_median3(typename C::T *, typename C::TI *, size_t, size_t, size_t, size_t *) [C = faiss::CMax<unsigned short, int>]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/utils/partitioning.cpp", 146);
  }
  unint64_t v8 = a4;
  int v10 = 0;
  unsigned __int16 v11 = 0;
  unsigned int v12 = *a1;
  unsigned int v13 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  if (v12 >= v13) {
    unsigned int v14 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else {
    unsigned int v14 = *a1;
  }
  if (v12 <= v13) {
    unsigned int v12 = *(unsigned __int16 *)((char *)a1 + (a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  unsigned int v15 = a1[a3 - 1];
  if (v14 <= v15) {
    LOWORD(v14) = a1[a3 - 1];
  }
  if (v12 >= v15) {
    unsigned __int16 v16 = v14;
  }
  else {
    unsigned __int16 v16 = v12;
  }
  unsigned __int16 v17 = -1;
  while (2)
  {
    uint64_t v18 = 0;
    unint64_t v31 = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    do
    {
      unsigned int v19 = a1[v18];
      if (v19 >= v16)
      {
        if (v19 != v16) {
          goto LABEL_21;
        }
        float v20 = &v32;
      }
      else
      {
        float v20 = (std::string *)&v31;
      }
      ++v20->__r_.__value_.__r.__words[0];
LABEL_21:
      ++v18;
    }
    while (a3 != v18);
    unint64_t v21 = v31;
    if (v31 <= v8)
    {
      unsigned __int16 v11 = v16;
      if (v32.__r_.__value_.__r.__words[0] + v31 < v8) {
        goto LABEL_26;
      }
      unint64_t v23 = v8;
    }
    else
    {
      unsigned __int16 v17 = v16;
      if (v31 <= a5)
      {
        unint64_t v23 = v31;
        break;
      }
LABEL_26:
      int v22 = faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>((uint64_t)a1, a3, v11, v17);
      if (v22 != v11)
      {
        unsigned __int16 v16 = v22;
        if (++v10 == 200)
        {
          unint64_t v23 = 0;
          break;
        }
        continue;
      }
      unint64_t v23 = 0;
    }
    break;
  }
  if ((uint64_t)(v23 - v21) < 0)
  {
    --v16;
    unint64_t v23 = v8;
  }
  else
  {
    unint64_t v8 = v23 - v21;
    if (v23 - v21 > v32.__r_.__value_.__r.__words[0]) {
      faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
    }
  }
  if (v23 != (int)faiss::partitioning::compress_array<faiss::CMax<unsigned short,int>>(a1, a2, a3, v16, v8)) {
    faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>();
  }
  if (a6) {
    *a6 = v23;
  }
  return v16;
}

void sub_1DD00C1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint16x8_t *faiss::simd_partitioning::find_minimax(uint16x8_t *this, unint64_t a2, _WORD *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  if (a2 < 0x10)
  {
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v6.i16[0] = 0;
  }
  else
  {
    __int32 v5 = this + 1;
    uint16x8_t v6 = 0uLL;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    unint64_t v8 = 15;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    uint16x8_t v10 = 0uLL;
    do
    {
      uint16x8_t v11 = v5[-1];
      uint16x8_t v9 = vminq_u16(v11, v9);
      uint16x8_t v7 = vminq_u16(*v5, v7);
      uint16x8_t v6 = vmaxq_u16(v11, v6);
      uint16x8_t v10 = vmaxq_u16(*v5, v10);
      v5 += 2;
      v8 += 16;
    }
    while (v8 < a2);
  }
  uint64_t v12 = 0;
  uint16x8_t vars0 = v9;
  *a3 = v9.i16[0];
  *a4 = v6.i16[0];
  do
  {
    unsigned int v13 = vars0.u16[v12 + 1];
    if (v13 >= (unsigned __int16)*a3) {
      LOWORD(v13) = *a3;
    }
    *a3 = v13;
    unsigned int v14 = *(unsigned __int16 *)((char *)&vars0 + v12 * 2 + 34);
    if (*a4 > v14) {
      LOWORD(v14) = *a4;
    }
    *a4 = v14;
    ++v12;
  }
  while (v12 != 15);
  unsigned int v15 = (char *)(a2 - (a2 & 0xFFFFFFFFFFFFFFF0));
  if (a2 > (a2 & 0xFFFFFFFFFFFFFFF0))
  {
    unsigned __int16 v16 = &this[2 * (a2 >> 4)];
    do
    {
      unsigned int v17 = v16->u16[0];
      if (v17 >= (unsigned __int16)*a3) {
        LOWORD(v17) = *a3;
      }
      *a3 = v17;
      unsigned int v18 = *a4;
      unsigned int v20 = v16->u16[0];
      unsigned __int16 v16 = (uint16x8_t *)((char *)v16 + 2);
      __int16 v19 = v20;
      if (v18 <= v20) {
        LOWORD(v18) = v19;
      }
      *a4 = v18;
      --v15;
    }
    while (v15);
  }
  return this;
}

unsigned __int16 *faiss::simd_histogram_16(unsigned __int16 *this, const unsigned __int16 *a2, int a3, int a4, _OWORD *a5, int *a6)
{
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  uint64_t v6 = (int)a2;
  if (a4 < 0)
  {
    if (a2)
    {
      do
      {
        unsigned int v11 = *this++;
        ++*((_DWORD *)a5 + v11);
        --v6;
      }
      while (v6);
    }
  }
  else if (a2)
  {
    int v7 = (16 << a4) + a3;
    if (v7 >= 0x10000) {
      LOWORD(v7) = 0;
    }
    unsigned int v8 = (unsigned __int16)(v7 + ~(_WORD)a3);
    do
    {
      __int16 v9 = *this++;
      unsigned __int16 v10 = v9 - a3;
      if (v8 >= (unsigned __int16)(v9 - a3)) {
        ++*((_DWORD *)a5 + (v10 >> a4));
      }
      --v6;
    }
    while (v6);
  }
  return this;
}

unsigned __int16 *faiss::simd_histogram_8(unsigned __int16 *this, const unsigned __int16 *a2, unsigned int a3, int a4, _OWORD *a5, int *a6)
{
  *a5 = 0u;
  a5[1] = 0u;
  uint64_t v6 = (int)a2;
  if (a4 < 0)
  {
    if (a2)
    {
      do
      {
        unsigned int v10 = *this++;
        ++*((_DWORD *)a5 + v10);
        --v6;
      }
      while (v6);
    }
  }
  else if (a2)
  {
    do
    {
      unsigned int v7 = *this++;
      unsigned __int16 v8 = v7 - a3;
      if (v7 >= a3)
      {
        unsigned int v9 = v8 >> a4;
        if (v9 <= 7) {
          ++*((_DWORD *)a5 + v9);
        }
      }
      --v6;
    }
    while (v6);
  }
  return this;
}

void *faiss::PartitionStats::reset(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t *faiss::PartitionStats::get_partition_stats(faiss::PartitionStats *this)
{
  {
    faiss::PartitionStats::get_partition_stats(void)::_stats = 0;
    unk_1EAB1CB60 = 0;
  }
  return &faiss::PartitionStats::get_partition_stats(void)::_stats;
}

float faiss::partitioning::sample_threshold_median3<faiss::CMin<float,long long>>(uint64_t a1, int a2, float result, float a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    while (1)
    {
      float v7 = *(float *)(a1 + 4 * (v4 % a2));
      if (v7 < result && v7 > a4)
      {
        *(&v11 + v5++) = v7;
        if (v5 == 3) {
          break;
        }
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5) {
          return v11;
        }
        return result;
      }
    }
    uint64_t result = v11;
    if (v11 <= v12) {
      float v9 = v11;
    }
    else {
      float v9 = v12;
    }
    if (v11 <= v12) {
      uint64_t result = v12;
    }
    if (v9 >= v13) {
      float v10 = v9;
    }
    else {
      float v10 = v13;
    }
    if (result >= v13) {
      return v10;
    }
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<float,long long>>(float *a1, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a4) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  float v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    float v9 = *v7;
    if (*v7 <= a5)
    {
      if (a4)
      {
        if (v9 == a5)
        {
          a1[result] = v9;
          a2[result++] = *v8;
          --a4;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    ++v7;
    --a3;
  }
  while (a3);
  if (a4) {
    goto LABEL_12;
  }
  return result;
}

float faiss::partitioning::sample_threshold_median3<faiss::CMax<float,long long>>(uint64_t a1, int a2, float result, float a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    while (1)
    {
      float v7 = *(float *)(a1 + 4 * (v4 % a2));
      if (v7 > result && v7 < a4)
      {
        *(&v11 + v5++) = v7;
        if (v5 == 3) {
          break;
        }
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5) {
          return v11;
        }
        return result;
      }
    }
    uint64_t result = v11;
    if (v11 <= v12) {
      float v9 = v11;
    }
    else {
      float v9 = v12;
    }
    if (v11 <= v12) {
      uint64_t result = v12;
    }
    if (v9 >= v13) {
      float v10 = v9;
    }
    else {
      float v10 = v13;
    }
    if (result >= v13) {
      return v10;
    }
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<float,long long>>(float *a1, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a4) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  float v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    float v9 = *v7;
    if (*v7 >= a5)
    {
      if (a4)
      {
        if (v9 == a5)
        {
          a1[result] = v9;
          a2[result++] = *v8;
          --a4;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    ++v7;
    --a3;
  }
  while (a3);
  if (a4) {
    goto LABEL_12;
  }
  return result;
}

uint64_t faiss::partitioning::sample_threshold_median3<faiss::CMin<unsigned short,long long>>(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    while (1)
    {
      unsigned int v7 = *(unsigned __int16 *)(a1 + 2 * (v4 % a2));
      if (v7 < a3 && v7 > a4)
      {
        *(&v13 + v5++) = v7;
        if (v5 == 3) {
          break;
        }
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5) {
          return v13;
        }
        return a3;
      }
    }
    unsigned int v9 = v13;
    if (v13 >= v14) {
      unsigned int v10 = v14;
    }
    else {
      unsigned int v10 = v13;
    }
    if (v13 <= v14) {
      unsigned int v9 = v14;
    }
    if (v10 <= v15) {
      unsigned int v11 = v15;
    }
    else {
      unsigned int v11 = v10;
    }
    if (v9 >= v15) {
      return v11;
    }
    else {
      return v9;
    }
  }
  return a3;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<unsigned short,long long>>(unsigned __int16 *a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  unsigned int v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    if (v10 <= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          a2[result++] = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5) {
    goto LABEL_12;
  }
  return result;
}

uint64_t faiss::partitioning::sample_threshold_median3<faiss::CMax<unsigned short,long long>>(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = a2;
    while (1)
    {
      unsigned int v7 = *(unsigned __int16 *)(a1 + 2 * (v4 % a2));
      if (v7 > a3 && v7 < a4)
      {
        *(&v13 + v5++) = v7;
        if (v5 == 3) {
          break;
        }
      }
      v4 += 6700417;
      if (!--v6)
      {
        if (v5) {
          return v13;
        }
        return a3;
      }
    }
    unsigned int v9 = v13;
    if (v13 >= v14) {
      unsigned int v10 = v14;
    }
    else {
      unsigned int v10 = v13;
    }
    if (v13 <= v14) {
      unsigned int v9 = v14;
    }
    if (v10 <= v15) {
      unsigned int v11 = v15;
    }
    else {
      unsigned int v11 = v10;
    }
    if (v9 >= v15) {
      return v11;
    }
    else {
      return v9;
    }
  }
  return a3;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<unsigned short,long long>>(unsigned __int16 *a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  unsigned int v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    if (v10 >= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          a2[result++] = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5) {
    goto LABEL_12;
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMin<unsigned short,int>>(unsigned __int16 *a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  unsigned int v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    if (v10 <= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          a2[result++] = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5) {
    goto LABEL_12;
  }
  return result;
}

uint64_t faiss::partitioning::compress_array<faiss::CMax<unsigned short,int>>(unsigned __int16 *a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!a3)
  {
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
LABEL_12:
    faiss::partitioning::compress_array<faiss::CMin<float,long long>>();
  }
  uint64_t result = 0;
  unsigned int v7 = a1;
  unsigned __int16 v8 = a2;
  do
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    if (v10 >= a4)
    {
      if (a5)
      {
        if (v9 == a4)
        {
          a1[result] = a4;
          a2[result++] = *v8;
          --a5;
        }
      }
    }
    else
    {
      a1[result] = v9;
      a2[result++] = *v8;
    }
    ++v8;
    --a3;
  }
  while (a3);
  if (a5) {
    goto LABEL_12;
  }
  return result;
}

void faiss::partitioning::partition_fuzzy_median3<faiss::CMin<float,long long>>()
{
  __assert_rtn("partition_fuzzy_median3", "partitioning.cpp", 211, "wp == q");
}

{
  __assert_rtn("partition_fuzzy_median3", "partitioning.cpp", 206, "n_eq_1 <= n_eq");
}

void faiss::partitioning::compress_array<faiss::CMin<float,long long>>()
{
  __assert_rtn("compress_array", "partitioning.cpp", 113, "n_eq == 0");
}

void faiss::WorkerThread::WorkerThread(faiss::WorkerThread *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 850045863;
  *(void *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 9) = 1018212795;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  faiss::WorkerThread::startThread(this);
}

void sub_1DD00CC44(_Unwind_Exception *a1, atomic_ullong *a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    if (!atomic_fetch_add(a2 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*a2 + 16))(a2);
    }
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100](v5);
  std::condition_variable::~condition_variable(v4);
  std::mutex::~mutex(v3);
  std::thread::~thread(v2);
  _Unwind_Resume(a1);
}

void faiss::WorkerThread::startThread(faiss::WorkerThread *this)
{
}

void faiss::WorkerThread::add(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 120)) {
    operator new();
  }
  operator new();
}

void sub_1DD00CFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  std::promise<BOOL>::~promise(v3);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (!atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  std::promise<BOOL>::~promise((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::future<BOOL>::get(std::__assoc_sub_state **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  std::__assoc_state<BOOL>::move(v1);
  uint64_t v3 = v2;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    ((void (*)(std::__assoc_sub_state *))v1->__on_zero_shared)(v1);
  }
  return v3;
}

void sub_1DD00D0F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::future<BOOL>::get(v1);
  }
  _Unwind_Resume(exception_object);
}

void faiss::WorkerThread::~WorkerThread(faiss::WorkerThread *this)
{
  faiss::WorkerThread::stop(this);
  faiss::WorkerThread::waitForThreadExit((std::thread *)this);
  std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100]((void *)this + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  std::thread::~thread((std::thread *)this);
}

void faiss::WorkerThread::stop(faiss::WorkerThread *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 120) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 72));
  std::mutex::unlock(v2);
}

void faiss::WorkerThread::waitForThreadExit(std::thread *this)
{
}

void sub_1DD00D1D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::promise<BOOL>::set_value(uint64_t *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  if (!v2) {
    std::__throw_future_error[abi:ne180100](3u);
  }
  std::__assoc_state<BOOL>::set_value<BOOL>(v2, a2);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::emplace_back<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  *(void *)(std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v8, a2) + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  unsigned __int16 v13 = (void *)(v12 + 8 * (v11 / 0x66));
  uint64_t v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4080;
  }
  return v14 - 40;
}

void faiss::WorkerThread::threadMain(faiss::WorkerThread *this)
{
}

void faiss::WorkerThread::threadLoop(faiss::WorkerThread *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  std::pair<std::function<void ()(void)>,std::promise<BOOL>>::pair[abi:ne180100]<true,0>((uint64_t)v1);
}

void sub_1DD00D558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10, int a11, uint64_t a12)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  std::promise<BOOL>::~promise(v12);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void faiss::anonymous namespace'::runCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  char v4 = 1;
  std::promise<BOOL>::set_value(a2, &v4);
}

void sub_1DD00D608(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  std::promise<BOOL>::set_exception(v9, &a9);
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1DD00D5F0);
}

void sub_1DD00D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void *std::pair<std::function<void ()(void)>,std::promise<BOOL>>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1, a2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = a1[4];
  a1[4] = v4;
  std::promise<BOOL>::~promise(&v6);
  return a1;
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::pop_front(int64x2_t *a1)
{
  uint64_t v2 = (void *)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
  std::promise<BOOL>::~promise(v2 + 4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DD064110);
  return std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::promise<BOOL>::set_exception(std::__assoc_sub_state **a1, const std::exception_ptr *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    std::__throw_future_error[abi:ne180100](3u);
  }
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(v2, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_1DD00D804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1E01AF670);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::exception_ptr v3 = std::future_category();
  MEMORY[0x1E01AF410](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2E8], MEMORY[0x1E4FBA218]);
}

void sub_1DD00D8F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::pair<std::function<void ()(void)>,std::promise<BOOL>>::pair[abi:ne180100]<true,0>(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  operator new();
}

void sub_1DD00D998(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<BOOL>::set_value<BOOL>(uint64_t a1, unsigned char *a2)
{
  std::exception_ptr v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(unsigned char *)(a1 + 140) = *a2;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1DD00DA3C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  std::exception_ptr v3 = (void **)a1[2];
  if (v3 == v2)
  {
    std::exception_ptr v4 = a1 + 5;
    std::exception_ptr v3 = (void **)a1[1];
  }
  else
  {
    std::exception_ptr v4 = a1 + 5;
    unint64_t v5 = a1[4];
    std::exception_ptr v6 = &v2[v5 / 0x66];
    unint64_t v7 = (char *)*v6 + 40 * (v5 % 0x66);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != (void *)v8)
    {
      do
      {
        std::promise<BOOL>::~promise(v7 + 4);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
        v7 += 5;
        if ((char *)v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v9 = v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != (void *)v8);
      uint64_t v2 = (void **)a1[1];
      std::exception_ptr v3 = (void **)a1[2];
    }
  }
  *std::exception_ptr v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      std::exception_ptr v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 51;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unsigned __int16 v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::exception_ptr v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F383FE98;
  return result;
}

void std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F383FE98;
}

uint64_t std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<faiss::WorkerThread::WorkerThread(void)::$_0,std::allocator<faiss::WorkerThread::WorkerThread(void)::$_0>,void ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__assoc_state<BOOL>::move(std::__assoc_sub_state *a1)
{
  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1DD00DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *(const void **)v3;
  *(void *)uint64_t v3 = 0;
  pthread_setspecific(v1->__key_, v2);
  faiss::WorkerThread::threadMain(*(faiss::WorkerThread **)(v3 + 8));
}

void sub_1DD00DEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,faiss::WorkerThread::startThread(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x1E01AF670](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1E01AF490]();
    JUMPOUT(0x1E01AF670);
  }
  return result;
}

void std::__assoc_state<BOOL>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x1E4FBA480] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1E01AF670);
}

uint64_t std::__assoc_state<BOOL>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t *std::promise<BOOL>::~promise(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((*(unsigned char *)(v2 + 136) & 1) == 0)
    {
      v7.__ptr_ = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v7);
      uint64_t v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        std::exception_ptr v4 = std::future_category();
        MEMORY[0x1E01AF410](v6, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v6);
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA440] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x1E4FBA2E8], MEMORY[0x1E4FBA218]);
}

void sub_1DD00E1D0(void *a1)
{
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0) {
    std::__throw_future_error[abi:ne180100](1u);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_1DD00E258(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    std::exception_ptr v6 = (char *)a1[3];
    a1[4] = v4;
    std::exception_ptr v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int8x16_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int8x16_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int8x16_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1DD00E538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  std::exception_ptr v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    std::exception_ptr v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      std::exception_ptr v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        std::exception_ptr v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        std::exception_ptr v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        std::exception_ptr v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      std::exception_ptr v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)std::exception_ptr v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    std::exception_ptr v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *,std::allocator<std::pair<std::function<void ()(void)>,std::promise<BOOL>> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,std::promise<BOOL>>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x66) {
    a2 = 1;
  }
  if (v2 < 0xCC) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

atomic_ullong *std::future<BOOL>::get(atomic_ullong *result)
{
  if (!atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    return (atomic_ullong *)(*(uint64_t (**)(void))(*result + 16))();
  }
  return result;
}

void faiss::WorkerThread::threadMain()
{
}

double faiss::ClusteringParameters::ClusteringParameters(faiss::ClusteringParameters *this)
{
  *(void *)this = 0x100000019;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *(void *)&double result = 0x10000000027;
  *((void *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((void *)this + 4) = 0x8000;
  return result;
}

{
  double result;

  *(void *)this = 0x100000019;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  *(void *)&double result = 0x10000000027;
  *((void *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((void *)this + 4) = 0x8000;
  return result;
}

double faiss::Clustering::Clustering(faiss::Clustering *this, int a2, int a3)
{
  *((void *)this + 1) = 0x100000019;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
  *((void *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((void *)this + 5) = 0x8000;
  *(void *)this = &unk_1F383E160;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a3;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 1) = 0x100000019;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
  *((void *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((void *)this + 5) = 0x8000;
  *(void *)this = &unk_1F383E160;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a3;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

double faiss::Clustering::Clustering(faiss::Clustering *this, int a2, int a3, const faiss::ClusteringParameters *a4)
{
  long long v4 = *(_OWORD *)a4;
  uint64_t v5 = *((void *)a4 + 4);
  *(_OWORD *)((char *)this + 24) = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 8) = v4;
  *(void *)this = &unk_1F383E160;
  *((void *)this + 5) = v5;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a3;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

{
  long long v4;
  uint64_t v5;
  double result;

  long long v4 = *(_OWORD *)a4;
  uint64_t v5 = *((void *)a4 + 4);
  *(_OWORD *)((char *)this + 24) = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 8) = v4;
  *(void *)this = &unk_1F383E160;
  *((void *)this + 5) = v5;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = a3;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return result;
}

float faiss::Clustering::post_process_centroids(faiss::Clustering *this, uint64_t a2, uint64_t a3, float *a4)
{
  if (*((unsigned char *)this + 17)) {
    faiss::fvec_renorm_L2(*((void *)this + 6), *((void *)this + 7), *((float **)this + 8), a4);
  }
  if (*((unsigned char *)this + 18))
  {
    uint64_t v6 = (float *)*((void *)this + 8);
    uint64_t v7 = *((void *)this + 9) - (void)v6;
    if (v7)
    {
      unint64_t v8 = v7 >> 2;
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      do
      {
        float result = roundf(*v6);
        *v6++ = result;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t faiss::Clustering::train(faiss::Clustering *this, std::vector<int>::size_type a2, const float *a3, faiss::Index *a4, const float *a5)
{
  return faiss::Clustering::train_encoded(this, a2, (const unsigned __int8 *)a3, 0, a4, a5);
}

uint64_t faiss::Clustering::train_encoded(faiss::Clustering *this, std::vector<int>::size_type a2, const unsigned __int8 *a3, const faiss::Index *a4, faiss::Index *a5, const float *a6)
{
  std::vector<int>::size_type v7 = *((void *)this + 7);
  if (v7 > a2)
  {
    memset(&v60, 0, sizeof(v60));
    int v45 = snprintf(0, 0, "Error: '%s' failed: Number of training points (%lld) should be at least as large as number of clusters (%zd)", "nx >= k", a2, v7);
    std::string::resize((std::string *)&v60, v45 + 1, 0);
    if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
      begiint n = (char *)&v60;
    }
    else {
      begiint n = (char *)v60.__begin_;
    }
    if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
      size_t value_high = HIBYTE(v60.__end_cap_.__value_);
    }
    else {
      size_t value_high = (size_t)v60.__end_;
    }
    snprintf(begin, value_high, "Error: '%s' failed: Number of training points (%lld) should be at least as large as number of clusters (%zd)", "nx >= k", a2, *((void *)this + 7));
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v60, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 289);
  }
  if (a4)
  {
    uint64_t v12 = *((int *)a4 + 2);
    uint64_t v13 = *((void *)this + 6);
    uint64_t v57 = (void *)((char *)this + 48);
    if (v13 != v12)
    {
      memset(&v60, 0, sizeof(v60));
      int v49 = snprintf(0, 0, "Error: '%s' failed: Codec dimension %d not the same as data dimension %d", "(!codec || codec->d == d)", v12, v13);
      std::string::resize((std::string *)&v60, v49 + 1, 0);
      if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
        uint64_t v50 = (char *)&v60;
      }
      else {
        uint64_t v50 = (char *)v60.__begin_;
      }
      if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
        size_t end = HIBYTE(v60.__end_cap_.__value_);
      }
      else {
        size_t end = (size_t)v60.__end_;
      }
      snprintf(v50, end, "Error: '%s' failed: Codec dimension %d not the same as data dimension %d", "(!codec || codec->d == d)", *((_DWORD *)a4 + 2), *v57);
      uint64_t v52 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v52, &v60, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 295);
    }
    uint64_t v15 = (_DWORD *)((char *)a5 + 8);
    LODWORD(v14) = *((_DWORD *)a5 + 2);
    if (v12 == v14)
    {
      faiss::getmillisecs(this);
      (*(void (**)(const faiss::Index *))(*(void *)a4 + 128))(a4);
      goto LABEL_11;
    }
LABEL_65:
    memset(&v60, 0, sizeof(v60));
    int v53 = snprintf(0, 0, "Error: '%s' failed: Index dimension %d not the same as data dimension %d", "index.d == d", v14, v12);
    std::string::resize((std::string *)&v60, v53 + 1, 0);
    if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
      long long v54 = (char *)&v60;
    }
    else {
      long long v54 = (char *)v60.__begin_;
    }
    if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
      size_t v55 = HIBYTE(v60.__end_cap_.__value_);
    }
    else {
      size_t v55 = (size_t)v60.__end_;
    }
    snprintf(v54, v55, "Error: '%s' failed: Index dimension %d not the same as data dimension %d", "index.d == d", *v15, *v57);
    int v56 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v56, &v60, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 301);
  }
  unint64_t v16 = (void *)((char *)this + 48);
  uint64_t v12 = *((void *)this + 6);
  uint64_t v15 = (_DWORD *)((char *)a5 + 8);
  uint64_t v14 = *((int *)a5 + 2);
  uint64_t v57 = (void *)((char *)this + 48);
  if (v12 != v14) {
    goto LABEL_65;
  }
  faiss::getmillisecs(this);
  std::vector<int>::size_type v17 = *v16 * a2;
  if (v17)
  {
    uint64_t v18 = a3;
    do
    {
      if ((*(_DWORD *)v18 & 0x7FFFFFFFu) >= 0x7F800000)
      {
        memset(&v60, 0, sizeof(v60));
        int v41 = snprintf(0, 0, "Error: '%s' failed: input contains NaN's or Inf's", "std::isfinite(x[i])");
        std::string::resize((std::string *)&v60, v41 + 1, 0);
        if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
          uint64_t v42 = (char *)&v60;
        }
        else {
          uint64_t v42 = (char *)v60.__begin_;
        }
        if (SHIBYTE(v60.__end_cap_.__value_) >= 0) {
          size_t v43 = HIBYTE(v60.__end_cap_.__value_);
        }
        else {
          size_t v43 = (size_t)v60.__end_;
        }
        snprintf(v42, v43, "Error: '%s' failed: input contains NaN's or Inf's", "std::isfinite(x[i])");
        int v44 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v44, &v60, "void faiss::Clustering::train_encoded(idx_t, const uint8_t *, const Index *, Index &, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Clustering.cpp", 312);
      }
      v18 += 4;
      --v17;
    }
    while (v17);
  }
LABEL_11:
  uint64_t v19 = *((void *)this + 7);
  std::vector<int>::size_type v20 = v19 * *((int *)this + 7);
  if (v20 < a2)
  {
    if (*((unsigned char *)this + 16)) {
      printf("Sampling a subset of %zd / %lld for training\n", v20, a2);
    }
    std::vector<int>::vector(&v60, a2);
    faiss::rand_perm((uint64_t)v60.__begin_, (int *)a2, *((_DWORD *)this + 8));
    operator new[]();
  }
  std::vector<int>::size_type v21 = v19 * *((int *)this + 6);
  if (v21 > a2) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING clustering %lld points to %zd centroids: please provide at least %lld training points\n", a2, v19, v21);
  }
  uint64_t v22 = *((void *)this + 7);
  if (a2 != v22)
  {
    if (*((unsigned char *)this + 16))
    {
      printf("Clustering %lld points in %zdD to %zd clusters, redo %d times, %d iterations\n", a2, *((void *)this + 6), v22, *((_DWORD *)this + 3), *((_DWORD *)this + 2));
      if (a4)
      {
        uint64_t v24 = (*(uint64_t (**)(const faiss::Index *))(*(void *)a4 + 128))(a4);
        printf("Input data encoded in %zd bytes per vector\n", v24);
      }
    }
    operator new[]();
  }
  std::vector<int>::size_type v23 = a2;
  if (*((unsigned char *)this + 16))
  {
    printf("Number of training points (%lld) same as number of clusters, just copying\n", a2);
    std::vector<int>::size_type v23 = *((void *)this + 7);
  }
  std::vector<float>::resize((uint64_t)this + 64, v23 * *((void *)this + 6));
  if (a4) {
    (*(void (**)(const faiss::Index *, std::vector<int>::size_type, const unsigned __int8 *, void))(*(void *)a4 + 144))(a4, a2, a3, *((void *)this + 8));
  }
  else {
    memcpy(*((void **)this + 8), a3, 4 * *((void *)this + 6) * *((void *)this + 7));
  }
  unint64_t v25 = *((void *)this + 13);
  uint64_t v26 = (void *)*((void *)this + 12);
  if ((unint64_t)v26 >= v25)
  {
    uint64_t v28 = *((void *)this + 11);
    unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v26 - v28) >> 3);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x666666666666666) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - v28) >> 3);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x333333333333333) {
      unint64_t v32 = 0x666666666666666;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32) {
      unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)this + 104, v32);
    }
    else {
      unint64_t v33 = 0;
    }
    std::string v34 = &v33[40 * v29];
    int v35 = &v33[40 * v32];
    *(void *)std::string v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = 0x3FF0000000000000;
    *((void *)v34 + 4) = 0;
    unint64_t v27 = v34 + 40;
    uint64_t v37 = (char *)*((void *)this + 11);
    uint64_t v36 = (char *)*((void *)this + 12);
    if (v36 != v37)
    {
      do
      {
        long long v38 = *(_OWORD *)(v36 - 40);
        long long v39 = *(_OWORD *)(v36 - 24);
        *((void *)v34 - 1) = *((void *)v36 - 1);
        *(_OWORD *)(v34 - 24) = v39;
        *(_OWORD *)(v34 - 40) = v38;
        v34 -= 40;
        v36 -= 40;
      }
      while (v36 != v37);
      uint64_t v36 = (char *)*((void *)this + 11);
    }
    *((void *)this + 11) = v34;
    *((void *)this + 12) = v27;
    *((void *)this + 13) = v35;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *uint64_t v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = 0x3FF0000000000000;
    unint64_t v27 = v26 + 5;
    v26[4] = 0;
  }
  *((void *)this + 12) = v27;
  (*(void (**)(faiss::Index *))(*(void *)a5 + 64))(a5);
  return (*(uint64_t (**)(faiss::Index *, void, void))(*(void *)a5 + 24))(a5, *((void *)this + 7), *((void *)this + 8));
}

void sub_1DD010474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  if (a55) {
    operator delete(a55);
  }
  MEMORY[0x1E01AF650](a38, 0x1000C8052888210);
  MEMORY[0x1E01AF650](a42, 0x1000C8000313F17);
  if (v63) {
    MEMORY[0x1E01AF650](v63, 0x1000C8052888210);
  }
  if (v64) {
    MEMORY[0x1E01AF650](v64, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

float faiss::kmeans_clustering(faiss *this, std::vector<int>::size_type a2, uint64_t a3, const unsigned __int8 *a4, float *a5, float *a6)
{
  v16[1] = 0x100000019;
  char v18 = 0;
  uint64_t v19 = 0x10000000027;
  int v20 = 1234;
  uint64_t v21 = 0x8000;
  v16[0] = &unk_1F383E160;
  uint64_t v22 = (int)this;
  uint64_t v23 = (int)a3;
  *(_OWORD *)__src = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  BOOL v17 = a2 * (unint64_t)this * a3 > 0x40000000;
  faiss::IndexFlat::IndexFlat((uint64_t)v13, (int)this, 1);
  v13[0] = &unk_1F383E438;
  faiss::Clustering::train_encoded((faiss::Clustering *)v16, a2, a4, 0, (faiss::Index *)v13, 0);
  memcpy(a5, __src[0], 4 * (void)this * a3);
  float v11 = *(float *)(v26 - 40);
  v13[0] = &unk_1F383FD80;
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  faiss::Index::~Index((faiss::Index *)v13);
  faiss::Clustering::~Clustering((faiss::Clustering *)v16);
  return v11;
}

void sub_1DD0107E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

double faiss::ProgressiveDimClusteringParameters::ProgressiveDimClusteringParameters(faiss::ProgressiveDimClusteringParameters *this)
{
  *((unsigned char *)this + 12) = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((void *)this + 4) = 0x8000;
  *((_DWORD *)this + 10) = 10;
  *((unsigned char *)this + 44) = 1;
  *(void *)&double result = 0x10000000ALL;
  *(void *)this = 0x10000000ALL;
  return result;
}

{
  double result;

  *((unsigned char *)this + 12) = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0x10000000027;
  *((_DWORD *)this + 6) = 1234;
  *((void *)this + 4) = 0x8000;
  *((_DWORD *)this + 10) = 10;
  *((unsigned char *)this + 44) = 1;
  *(void *)&double result = 0x10000000ALL;
  *(void *)this = 0x10000000ALL;
  return result;
}

void faiss::ProgressiveDimIndexFactory::operator()()
{
}

void sub_1DD0108FC(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x1081C40E7E060E2);
  _Unwind_Resume(a1);
}

double faiss::ProgressiveDimClustering::ProgressiveDimClustering(faiss::ProgressiveDimClustering *this, int a2, int a3)
{
  *((unsigned char *)this + 20) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((void *)this + 5) = 0x8000;
  *((_DWORD *)this + 12) = 10;
  *((unsigned char *)this + 52) = 1;
  *((void *)this + 1) = 0x10000000ALL;
  *(void *)this = &unk_1F383F9D8;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *((unsigned char *)this + 20) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0x10000000027;
  *((_DWORD *)this + 8) = 1234;
  *((void *)this + 5) = 0x8000;
  *((_DWORD *)this + 12) = 10;
  *((unsigned char *)this + 52) = 1;
  *((void *)this + 1) = 0x10000000ALL;
  *(void *)this = &unk_1F383F9D8;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

double faiss::ProgressiveDimClustering::ProgressiveDimClustering(faiss::ProgressiveDimClustering *this, int a2, int a3, const faiss::ProgressiveDimClusteringParameters *a4)
{
  long long v4 = *(_OWORD *)a4;
  long long v5 = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)a4 + 2);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *(void *)this = &unk_1F383F9D8;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  long long v4;
  long long v5;
  double result;

  long long v4 = *(_OWORD *)a4;
  long long v5 = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)this + 40) = *((_OWORD *)a4 + 2);
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  *(void *)this = &unk_1F383F9D8;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void faiss::ProgressiveDimClustering::train(faiss::ProgressiveDimClustering *this, int *a2, const float *a3, faiss::ProgressiveDimIndexFactory *a4)
{
  long long v5 = this;
  faiss::PCAMatrix::PCAMatrix((uint64_t)v53, *((_DWORD *)this + 14), *((_DWORD *)this + 14), 0.0, 0);
  c__ = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  if (*((unsigned char *)v5 + 52))
  {
    if (*((unsigned char *)v5 + 16)) {
      puts("Training PCA transform");
    }
    faiss::PCAMatrix::train((faiss::PCAMatrix *)v53, a2, a3);
  }
  int v6 = *((_DWORD *)v5 + 12);
  if (v6 >= 1)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v36 = (char *)v5 + 8;
    int64_t v40 = (int64_t)a2;
    long long v39 = (char *)v5 + 72;
    uint64_t v35 = (uint64_t)v5 + 96;
    do
    {
      double v9 = pow((double)*((unint64_t *)v5 + 7), ((double)v8 + 1.0) / (double)v6);
      uint64_t v10 = (int)v9;
      if (*((unsigned char *)v5 + 16)) {
        printf("Progressive dim step %d: cluster in dimension %d\n", v8, (int)v9);
      }
      float v11 = (faiss::Index *)(**(uint64_t (***)(faiss::ProgressiveDimIndexFactory *, uint64_t))a4)(a4, v10);
      uint64_t v12 = v5;
      uint64_t v13 = *((void *)v5 + 8);
      long long v14 = *((_OWORD *)v36 + 1);
      *(_OWORD *)&v42[8] = *(_OWORD *)v36;
      long long v43 = v14;
      uint64_t v44 = *((void *)v36 + 4);
      int v38 = v10;
      uint64_t v15 = (int)v10;
      *(void *)uint64_t v42 = &unk_1F383E160;
      uint64_t v45 = (int)v10;
      uint64_t v46 = (int)v13;
      long long __dst = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      uint64_t v16 = 4 * (int)v10;
      if (v7 >= 1)
      {
        std::vector<float>::resize((uint64_t)&__dst, v13 * (int)v10);
        uint64_t v17 = *((void *)v5 + 8);
        if (v17 >= 1)
        {
          uint64_t v18 = v7;
          uint64_t v19 = (char *)__dst;
          int v20 = *(char **)v39;
          if ((int)v10 >= v18) {
            uint64_t v21 = v18;
          }
          else {
            uint64_t v21 = (int)v10;
          }
          size_t v22 = 4 * v21;
          uint64_t v23 = 4 * v18;
          do
          {
            memcpy(v19, v20, v22);
            v19 += v16;
            v20 += v23;
            --v17;
          }
          while (v17);
        }
      }
      std::vector<float>::vector(__p, v15 * v40);
      long long v5 = v12;
      if (v40 >= 1)
      {
        uint64_t v24 = *((void *)v12 + 7);
        if (v15 >= v24) {
          uint64_t v25 = *((void *)v12 + 7);
        }
        else {
          uint64_t v25 = v15;
        }
        long long v26 = (char *)__p[0];
        size_t v27 = 4 * v25;
        uint64_t v28 = 4 * v24;
        unint64_t v29 = a3;
        int64_t v30 = v40;
        do
        {
          memcpy(v26, v29, v27);
          v26 += v16;
          unint64_t v29 = (const float *)((char *)v29 + v28);
          --v30;
        }
        while (v30);
      }
      faiss::Clustering::train_encoded((faiss::Clustering *)v42, v40, (const unsigned __int8 *)__p[0], 0, v11, 0);
      if (v39 != (char *)&__dst) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v39, (char *)__dst, *((uint64_t *)&__dst + 1), (uint64_t)(*((void *)&__dst + 1) - __dst) >> 2);
      }
      std::vector<faiss::ClusteringIterationStats>::__insert_with_size[abi:ne180100]<std::__wrap_iter<faiss::ClusteringIterationStats*>,std::__wrap_iter<faiss::ClusteringIterationStats*>>(v35, *((void *)v12 + 13), *((char **)&v48 + 1), (char *)v49, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - *((void *)&v48 + 1)) >> 3));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      faiss::Clustering::~Clustering((faiss::Clustering *)v42);
      (*(void (**)(faiss::Index *))(*(void *)v11 + 8))(v11);
      ++v8;
      int v6 = *((_DWORD *)v12 + 12);
      int v7 = v38;
    }
    while (v8 < v6);
  }
  if (*((unsigned char *)v5 + 52))
  {
    if (*((unsigned char *)v5 + 16)) {
      puts("Revert PCA transform on centroids");
    }
    std::vector<float>::vector(v42, *((void *)v5 + 8) * *((void *)v5 + 7));
    faiss::LinearTransform::reverse_transform((faiss::LinearTransform *)v53, *((void *)v5 + 8), *((float **)v5 + 9), *(float **)v42);
    unint64_t v31 = (void *)*((void *)v5 + 9);
    *(_OWORD *)((char *)v5 + 72) = *(_OWORD *)v42;
    uint64_t v32 = *(void *)&v42[16];
    uint64_t v33 = *((void *)v5 + 11);
    *(void *)uint64_t v42 = v31;
    *(void *)&v42[16] = v33;
    *((void *)v5 + 11) = v32;
    if (v31)
    {
      *(void *)&v42[8] = v31;
      operator delete(v31);
    }
  }
  if (c__)
  {
    int v51 = c__;
    operator delete(c__);
  }
  v53[0] = &unk_1F383FE60;
  if (v58)
  {
    int8x16_t v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    size_t v55 = v54;
    operator delete(v54);
  }
  faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)v53);
}

void sub_1DD010EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  faiss::PCAMatrix::~PCAMatrix((faiss::PCAMatrix *)&a40);
  _Unwind_Resume(a1);
}

void faiss::ProgressiveDimIndexFactory::~ProgressiveDimIndexFactory(faiss::ProgressiveDimIndexFactory *this)
{
}

void faiss::ProgressiveDimClustering::~ProgressiveDimClustering(faiss::ProgressiveDimClustering *this)
{
  faiss::ProgressiveDimClustering::~ProgressiveDimClustering(this);
  JUMPOUT(0x1E01AF670);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F383F9D8;
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    double v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    double v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__assign_with_size[abi:ne180100]<faiss::ClusteringIterationStats*,faiss::ClusteringIterationStats*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<faiss::ClusteringIterationStats>::__vallocate[abi:ne180100](v7, v12);
    long long v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    double v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    double v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

char *std::vector<faiss::ClusteringIterationStats>::__insert_with_size[abi:ne180100]<std::__wrap_iter<faiss::ClusteringIterationStats*>,std::__wrap_iter<faiss::ClusteringIterationStats*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long long v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  int v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x666666666666666) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v39 = v9;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::HCounterState<faiss::HammingComputer4>>>(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v29 = &v19[40 * v15];
    long long __p = v19;
    uint64_t v36 = v29;
    int v38 = &v19[40 * v18];
    int64_t v30 = &v29[40 * a5];
    uint64_t v31 = 40 * a5;
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      *((void *)v29 + 4) = *((void *)v7 + 4);
      *(_OWORD *)unint64_t v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 40;
      v7 += 40;
      v31 -= 40;
    }
    while (v31);
    uint64_t v37 = v30;
    long long v5 = (char *)std::vector<faiss::ClusteringIterationStats>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      uint64_t v37 = &v36[(v37 - v36 - 40) % 0x28uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    uint64_t v21 = &__src[40 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[40 * a5];
    uint64_t v25 = &v23[-40 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        *((void *)v26 + 4) = *((void *)v25 + 4);
        *(_OWORD *)long long v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v25 += 40;
        v26 += 40;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[40 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD01150C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<faiss::ClusteringIterationStats>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(void **)(a2 + 8);
  int v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 40);
      long long v11 = *(_OWORD *)(v8 - 24);
      int v7 = (void *)(v9 - 40);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v11;
      *(_OWORD *)(v9 - 40) = v10;
      v8 -= 40;
      v9 -= 40;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v12 = a1[1];
  uint64_t v13 = *(void *)(a2 + 16);
  int64_t v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    int v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v13 + v14;
  unint64_t v15 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v15;
  unint64_t v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v16;
  uint64_t v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v17;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void faiss::IOReader::fileno(faiss::IOReader *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "IOReader does not support memory mapping");
  faiss::FaissException::FaissException(exception, v2, "virtual int faiss::IOReader::fileno()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 24);
}

void sub_1DD011720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IOWriter::fileno(faiss::IOWriter *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "IOWriter does not support memory mapping");
  faiss::FaissException::FaissException(exception, v2, "virtual int faiss::IOWriter::fileno()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 28);
}

void sub_1DD0117D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::VectorIOWriter::operator()(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = a4 * a3;
  if (a4 * a3)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (uint64_t *)(a1 + 32);
    size_t v9 = *(void *)(a1 + 40) - v7;
    if (v9 >= v9 + v5)
    {
      if (v9 > v9 + v5) {
        *(void *)(a1 + 40) += v5;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 32), a4 * a3);
      uint64_t v7 = *v8;
    }
    memcpy((void *)(v7 + v9), a2, v5);
  }
  return a4;
}

unint64_t faiss::VectorIOReader::operator()(void *a1, void *__dst, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[7];
  uint64_t v5 = a1[4];
  unint64_t v6 = a1[5] - v5;
  BOOL v7 = v6 > v4;
  unint64_t v8 = v6 - v4;
  if (!v7) {
    return 0;
  }
  unint64_t v9 = v8 / a3;
  if (v9 >= a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = v9;
  }
  uint64_t v10 = v12 * a3;
  if (v12 * a3)
  {
    memcpy(__dst, (const void *)(v5 + v4), v12 * a3);
    a1[7] += v10;
  }
  return v12;
}

uint64_t faiss::FileIOReader::FileIOReader(uint64_t this, __sFILE *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = a2;
  *(void *)this = &unk_1F383E5D0;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = a2;
  *(void *)this = &unk_1F383E5D0;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

faiss::FileIOReader *faiss::FileIOReader::FileIOReader(faiss::FileIOReader *this, const char *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_1F383E5D0;
  *((unsigned char *)this + 40) = 0;
  MEMORY[0x1E01AF3E0]((char *)this + 8);
  unint64_t v4 = fopen(a2, "rb");
  *((void *)this + 4) = v4;
  if (!v4)
  {
    memset(&v14, 0, sizeof(v14));
    unint64_t v6 = __error();
    BOOL v7 = strerror(*v6);
    int v8 = snprintf(0, 0, "Error: '%s' failed: could not open %s for reading: %s", "f", a2, v7);
    unint64_t v9 = &v14;
    std::string::resize(&v14, v8 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v14.__r_.__value_.__l.__size_;
      unint64_t v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    long long v11 = __error();
    unint64_t v12 = strerror(*v11);
    snprintf((char *)v9, size, "Error: '%s' failed: could not open %s for reading: %s", "f", a2, v12);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "faiss::FileIOReader::FileIOReader(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 68);
  }
  *((unsigned char *)this + 40) = 1;
  return this;
}

void sub_1DD011B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v20);
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)uint64_t v17 = v19;
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  _Unwind_Resume(a1);
}

void faiss::FileIOReader::~FileIOReader(faiss::FileIOReader *this)
{
  *(void *)this = &unk_1F383E5D0;
  if (*((unsigned char *)this + 40) && fclose(*((FILE **)this + 4)))
  {
    unint64_t v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      unint64_t v2 = *(const char **)v2;
    }
    BOOL v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    fprintf(v3, "file %s close error: %s", v2, v5);
  }
  *(void *)this = &unk_1F383FBF8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  faiss::FileIOReader::~FileIOReader(this);
  JUMPOUT(0x1E01AF670);
}

size_t faiss::FileIOReader::operator()(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  return fread(__ptr, __size, __nitems, *(FILE **)(a1 + 32));
}

uint64_t faiss::FileIOReader::fileno(FILE **this)
{
  return fileno(this[4]);
}

uint64_t faiss::FileIOWriter::FileIOWriter(uint64_t this, __sFILE *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = a2;
  *(void *)this = &unk_1F383E600;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = a2;
  *(void *)this = &unk_1F383E600;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

faiss::FileIOWriter *faiss::FileIOWriter::FileIOWriter(faiss::FileIOWriter *this, const char *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_1F383E600;
  *((unsigned char *)this + 40) = 0;
  MEMORY[0x1E01AF3E0]((char *)this + 8);
  unint64_t v4 = fopen(a2, "wb");
  *((void *)this + 4) = v4;
  if (!v4)
  {
    memset(&v14, 0, sizeof(v14));
    unint64_t v6 = __error();
    BOOL v7 = strerror(*v6);
    int v8 = snprintf(0, 0, "Error: '%s' failed: could not open %s for writing: %s", "f", a2, v7);
    unint64_t v9 = &v14;
    std::string::resize(&v14, v8 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v14.__r_.__value_.__l.__size_;
      unint64_t v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    long long v11 = __error();
    unint64_t v12 = strerror(*v11);
    snprintf((char *)v9, size, "Error: '%s' failed: could not open %s for writing: %s", "f", a2, v12);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "faiss::FileIOWriter::FileIOWriter(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 98);
  }
  *((unsigned char *)this + 40) = 1;
  return this;
}

void sub_1DD011E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v20);
  if (a17 < 0) {
    operator delete(__p);
  }
  *(void *)uint64_t v17 = v19;
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  _Unwind_Resume(a1);
}

void faiss::FileIOWriter::~FileIOWriter(faiss::FileIOWriter *this)
{
  *(void *)this = &unk_1F383E600;
  if (*((unsigned char *)this + 40) && fclose(*((FILE **)this + 4)))
  {
    unint64_t v2 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      unint64_t v2 = (const char *)*((void *)this + 1);
    }
    BOOL v3 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v4 = __error();
    uint64_t v5 = strerror(*v4);
    fprintf(v3, "file %s close error: %s", v2, v5);
  }
  *(void *)this = &unk_1F383FC28;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  faiss::FileIOWriter::~FileIOWriter(this);
  JUMPOUT(0x1E01AF670);
}

void sub_1DD011F88(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F383FC28;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DD01200C(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x10B3C40EC4B095CLL);
  _Unwind_Resume(a1);
}

size_t faiss::FileIOWriter::operator()(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  return fwrite(__ptr, __size, __nitems, *(FILE **)(a1 + 32));
}

uint64_t faiss::FileIOWriter::fileno(FILE **this)
{
  return fileno(this[4]);
}

uint64_t faiss::BufferedIOReader::BufferedIOReader(uint64_t a1, uint64_t a2, std::vector<char>::size_type __n)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F383EF28;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = __n;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::vector<char>::vector((std::vector<char> *)(a1 + 80), __n);
  return a1;
}

void sub_1DD0120BC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F383FBF8;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

size_t faiss::BufferedIOReader::operator()(uint64_t a1, char *__dst, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 * a3;
  if (!(a4 * a3)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v4 >= *(void *)(a1 + 72) - v8) {
    size_t v9 = *(void *)(a1 + 72) - v8;
  }
  else {
    size_t v9 = a4 * a3;
  }
  memcpy(__dst, (const void *)(*(void *)(a1 + 80) + v8), v9);
  size_t v10 = *(void *)(a1 + 64) + v9;
  *(void *)(a1 + 64) = v10;
  unint64_t v11 = v4 - v9;
  if (v11)
  {
    unint64_t v12 = &__dst[v9];
    do
    {
      if (v10 != *(void *)(a1 + 72)) {
        faiss::BufferedIOReader::operator()();
      }
      *(void *)(a1 + 64) = 0;
      unint64_t v13 = (***(uint64_t (****)(void, void, uint64_t, void))(a1 + 32))(*(void *)(a1 + 32), *(void *)(a1 + 80), 1, *(void *)(a1 + 40));
      *(void *)(a1 + 72) = v13;
      if (!v13) {
        break;
      }
      *(void *)(a1 + 48) += v13;
      size_t v10 = v11 >= v13 ? v13 : v11;
      memcpy(v12, *(const void **)(a1 + 80), v10);
      *(void *)(a1 + 64) = v10;
      v9 += v10;
      v12 += v10;
      v11 -= v10;
    }
    while (v11);
  }
  *(void *)(a1 + 56) += v9;
  return v9 / a3;
}

std::vector<char> *faiss::BufferedIOWriter::BufferedIOWriter(std::vector<char> *a1, char *a2, char *__n)
{
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  a1[1].__begin_ = 0;
  a1->__begin_ = (std::vector<char>::pointer)&unk_1F383EF58;
  a1[1].__end_ = a2;
  a1[1].__end_cap_.__value_ = __n;
  a1[2].__end_ = 0;
  a1[2].__end_cap_.__value_ = 0;
  std::vector<char>::vector(a1 + 3, (std::vector<char>::size_type)__n);
  return a1;
}

void sub_1DD012278(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F383FC28;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

size_t faiss::BufferedIOWriter::operator()(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 * a3;
  if (!(a4 * a3)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v4 >= *(void *)(a1 + 40) - v8) {
    size_t v9 = *(void *)(a1 + 40) - v8;
  }
  else {
    size_t v9 = a4 * a3;
  }
  memcpy((void *)(*(void *)(a1 + 72) + v8), a2, v9);
  size_t v10 = *(void *)(a1 + 64) + v9;
  *(void *)(a1 + 64) = v10;
  size_t v11 = v4 - v9;
  if (v11)
  {
    unint64_t v12 = &a2[v9];
    do
    {
      if (v10 != *(void *)(a1 + 40)) {
        faiss::BufferedIOWriter::operator()();
      }
      unint64_t v13 = 0;
      do
      {
        if (v13 >= 0x989680) {
          faiss::BufferedIOWriter::operator()();
        }
        uint64_t v14 = (***(uint64_t (****)(void, unint64_t, uint64_t, size_t))(a1 + 32))(*(void *)(a1 + 32), *(void *)(a1 + 72) + v13, 1, v10 - v13);
        if (!v14)
        {
          memset(&v20, 0, sizeof(v20));
          int v16 = snprintf(0, 0, "Error: '%s' failed", "written > 0");
          std::string::resize(&v20, v16 + 1, 0);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v20;
          }
          else {
            uint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v20.__r_.__value_.__l.__size_;
          }
          snprintf((char *)v17, size, "Error: '%s' failed", "written > 0");
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(exception, &v20, "virtual size_t faiss::BufferedIOWriter::operator()(const void *, size_t, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 203);
        }
        v13 += v14;
        size_t v10 = *(void *)(a1 + 40);
      }
      while (v13 != v10);
      if (v11 >= v13) {
        size_t v10 = v13;
      }
      else {
        size_t v10 = v11;
      }
      memcpy(*(void **)(a1 + 72), v12, v10);
      *(void *)(a1 + 64) = v10;
      v9 += v10;
      v12 += v10;
      v11 -= v10;
    }
    while (v11);
  }
  *(void *)(a1 + 56) += v9;
  return v9 / a3;
}

void sub_1DD0124A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::BufferedIOWriter::~BufferedIOWriter(faiss::BufferedIOWriter *this)
{
  *(void *)this = &unk_1F383EF58;
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (***((uint64_t (****)(void, uint64_t, uint64_t, uint64_t))this + 4))(*((void *)this + 4), *((void *)this + 9) + v3, 1, v2 - v3);
      if (!v4)
      {
        memset(&v10, 0, sizeof(v10));
        int v6 = snprintf(0, 0, "Error: '%s' failed", "written > 0");
        std::string::resize(&v10, v6 + 1, 0);
        if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v7 = &v10;
        }
        else {
          BOOL v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
        }
        if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v10.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v7, size, "Error: '%s' failed", "written > 0");
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v10, "virtual faiss::BufferedIOWriter::~BufferedIOWriter()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 224);
      }
      v3 += v4;
      uint64_t v2 = *((void *)this + 8);
    }
    while (v3 != v2);
  }
  uint64_t v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1F383FC28;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  faiss::BufferedIOWriter::~BufferedIOWriter(this);
  JUMPOUT(0x1E01AF670);
}

void sub_1DD012664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(void **)(v15 + 72);
  if (v18)
  {
    *(void *)(v15 + 80) = v18;
    operator delete(v18);
  }
  *(void *)uint64_t v15 = &unk_1F383FC28;
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_1DD012720(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x10B3C409958CBA3);
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc(faiss *this, const char *a2)
{
  if (strlen((const char *)this) != 4)
  {
    memset(&v8, 0, sizeof(v8));
    int v4 = snprintf(0, 0, "Error: '%s' failed", "4 == strlen(sx)");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v8.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v5, size, "Error: '%s' failed", "4 == strlen(sx)");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "uint32_t faiss::fourcc(const char *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 230);
  }
  return *(unsigned int *)this;
}

void sub_1DD012830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc(unsigned int *a1)
{
  int v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (*((void *)a1 + 1) != 4) {
      goto LABEL_7;
    }
    a1 = *(unsigned int **)a1;
  }
  else if (v1 != 4)
  {
LABEL_7:
    memset(&v7, 0, sizeof(v7));
    int v3 = snprintf(0, 0, "Error: '%s' failed", "sx.length() == 4");
    std::string::resize(&v7, v3 + 1, 0);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v4 = &v7;
    }
    else {
      int v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
    }
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v7.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v4, size, "Error: '%s' failed", "sx.length() == 4");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v7, "uint32_t faiss::fourcc(const std::string &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/io.cpp", 236);
  }
  return *a1;
}

void sub_1DD01295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::fourcc_inv(uint64_t this, uint64_t a2, char *a3)
{
  *(_DWORD *)a2 = this;
  *(unsigned char *)(a2 + 5) = 0;
  return this;
}

void *faiss::fourcc_inv@<X0>(faiss *this@<X0>, void *a2@<X8>)
{
  *(_DWORD *)__s = this;
  char v4 = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

void faiss::fourcc_inv_printable(faiss *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v5 = (int)this;
  char v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (uint64_t i = 0; i != 4; ++i)
  {
    int v4 = *((unsigned __int8 *)&v5 + i);
    if ((v4 - 32) > 0x5E)
    {
      snprintf(__str, 0xAuLL, "\\x%02x", *((unsigned __int8 *)&v5 + i));
      std::string::append(a2, __str);
    }
    else
    {
      std::string::push_back(a2, v4);
    }
  }
}

void sub_1DD012A94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void faiss::VectorIOWriter::~VectorIOWriter(faiss::VectorIOWriter *this)
{
  *(void *)this = &unk_1F383EE10;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FC28;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383EE10;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FC28;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::VectorIOReader::~VectorIOReader(faiss::VectorIOReader *this)
{
  *(void *)this = &unk_1F383EDE0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FBF8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383EDE0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FBF8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::BufferedIOReader::~BufferedIOReader(faiss::BufferedIOReader *this)
{
  *(void *)this = &unk_1F383EF28;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FBF8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383EF28;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FBF8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1E01AF670);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    int v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1DD012E54(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::BufferedIOReader::operator()()
{
  __assert_rtn("operator()", "io.cpp", 153, "b0 == b1");
}

void faiss::BufferedIOWriter::operator()()
{
}

{
  __assert_rtn("operator()", "io.cpp", 197, "b0 == bsz");
}

void faiss::IndexIVFFlat::IndexIVFFlat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

{
  faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
}

void faiss::IndexIVFFlat::add_core(faiss::IndexIVFFlat *this, unint64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  if (!*((unsigned char *)this + 25))
  {
    memset(&v16, 0, sizeof(v16));
    int v8 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v16, v8 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v9 = &v16;
    }
    else {
      size_t v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v16.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v9, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::IndexIVFFlat::add_core(idx_t, const float *, const int64_t *, const int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 48);
  }
  if (!a5)
  {
    memset(&v16, 0, sizeof(v16));
    int v12 = snprintf(0, 0, "Error: '%s' failed", "coarse_idx");
    std::string::resize(&v16, v12 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v16;
    }
    else {
      unint64_t v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v14 = v16.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v13, v14, "Error: '%s' failed", "coarse_idx");
    uint64_t v15 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v15, &v16, "virtual void faiss::IndexIVFFlat::add_core(idx_t, const float *, const int64_t *, const int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 49);
  }
  if (!*((void *)this + 14)) {
    faiss::IndexIVFFlat::add_core();
  }
  faiss::DirectMap::check_can_add((_DWORD *)this + 40, a4);
  faiss::DirectMapAdd::DirectMapAdd((faiss::DirectMapAdd *)&v16, (faiss::IndexIVFFlat *)((char *)this + 160), a2, a4);
  if (*((unsigned char *)this + 24)) {
    printf("IndexIVFFlat::add_core: added %lld / %lld vectors\n", 0, a2);
  }
  *((void *)this + 2) += a2;
  faiss::DirectMapAdd::~DirectMapAdd((faiss::DirectMapAdd *)&v16);
}

void sub_1DD013194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlat::encode_vectors(faiss::IndexIVFFlat *this, uint64_t a2, const float *__src, const uint64_t *a4, unsigned __int8 *__dst, char a6)
{
  if (a6)
  {
    uint64_t v11 = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFFlat *)((char *)this + 40));
    if (a2)
    {
      uint64_t v12 = v11;
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = a4[v13];
        uint64_t v15 = *((void *)this + 16) + v12;
        std::string v16 = &__dst[v15 * v13];
        if (v14 < 0)
        {
          bzero(&__dst[v15 * v13], *((void *)this + 16) + v12);
        }
        else
        {
          uint64_t v17 = &__src[v13 * *((int *)this + 2)];
          faiss::Level1Quantizer::encode_listno((uint64_t)this + 40, v14, v16);
          memcpy(&v16[v12], v17, *((void *)this + 16));
        }
        ++v13;
      }
      while (a2 != v13);
    }
  }
  else
  {
    size_t v18 = *((void *)this + 16) * a2;
    memcpy(__dst, __src, v18);
  }
}

uint64_t faiss::IndexIVFFlat::sa_decode(faiss::IndexIVFFlat *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  uint64_t result = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFFlat *)((char *)this + 40));
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = &a3[result];
    do
    {
      uint64_t result = (uint64_t)memcpy(&a4[v10 * *((int *)this + 2)], &v11[(*((void *)this + 16) + v9) * v10], *((void *)this + 16));
      ++v10;
    }
    while (a2 != v10);
  }
  return result;
}

void faiss::IndexIVFFlat::get_InvertedListScanner(faiss::IndexIVFFlat *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1 != 1)
  {
    if (!v1) {
      operator new();
    }
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "metric type not supported");
    faiss::FaissException::FaissException(exception, v3, "virtual InvertedListScanner *faiss::IndexIVFFlat::get_InvertedListScanner(BOOL) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 208);
  }
  operator new();
}

void sub_1DD013464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *faiss::IndexIVFFlat::reconstruct_from_offset(faiss::IndexIVFFlat *this, uint64_t a2, uint64_t a3, float *a4)
{
  char v6 = (const void *)(*(uint64_t (**)(void))(**((void **)this + 14) + 48))(*((void *)this + 14));
  size_t v7 = *((void *)this + 16);
  return memcpy(a4, v6, v7);
}

void faiss::IndexIVFFlatDedup::IndexIVFFlatDedup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

{
  faiss::IndexIVF::IndexIVF(a1, a2, a3, a4, 4 * a3, a5);
}

void faiss::IndexIVFFlatDedup::train(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3)
{
  long long v3 = 0u;
  long long v4 = 0u;
  int v5 = 1065353216;
  operator new[]();
}

void sub_1DD01378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEMORY[0x1E01AF650](v5, 0x1000C8052888210);
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::add_with_ids(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  if (*((unsigned char *)this + 25))
  {
    if (*((void *)this + 14))
    {
      if (!*((_DWORD *)this + 40)) {
        operator new[]();
      }
      memset(&v12, 0, sizeof(v12));
      int v8 = snprintf(0, 0, "Error: '%s' failed: IVFFlatDedup not implemented with direct_map", "direct_map.no()");
      std::string::resize(&v12, v8 + 1, 0);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v12;
      }
      else {
        uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v12.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v9, size, "Error: '%s' failed: IVFFlatDedup not implemented with direct_map", "direct_map.no()");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v12, "virtual void faiss::IndexIVFFlatDedup::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 264);
    }
    faiss::IndexIVFFlatDedup::add_with_ids();
  }
  memset(&v12, 0, sizeof(v12));
  int v4 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
  std::string::resize(&v12, v4 + 1, 0);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v12;
  }
  else {
    uint64_t v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v6 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v6 = v12.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v5, v6, "Error: '%s' failed", "is_trained");
  size_t v7 = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(v7, &v12, "virtual void faiss::IndexIVFFlatDedup::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 261);
}

void sub_1DD013A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::search_preassigned(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t *a5, float *a6, float *a7, uint64_t *a8, char a9, uint64_t a10)
{
  if (a9)
  {
    memset(&v41, 0, sizeof(v41));
    int v29 = snprintf(0, 0, "Error: '%s' failed: store_pairs not supported in IVFDedup", "!store_pairs");
    std::string::resize(&v41, v29 + 1, 0);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v30 = &v41;
    }
    else {
      int64_t v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v41.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v30, size, "Error: '%s' failed: store_pairs not supported in IVFDedup", "!store_pairs");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v41, "virtual void faiss::IndexIVFFlatDedup::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 342);
  }
  uint64_t v10 = a8;
  uint64_t v11 = a7;
  faiss::IndexIVF::search_preassigned(a1, a2, a3, a4, a5, a6, a7, a8, 0, a10, 0);
  std::vector<long long>::vector(&v41, a4);
  std::vector<float>::vector(__p, a4);
  if (a2 >= 1)
  {
    int v38 = v11;
    uint64_t v39 = 0;
    uint64_t v15 = (void *)(a1 + 232);
    uint64_t v36 = 8 * a4;
    uint64_t v37 = 4 * a4;
    int v16 = v10;
    long long v33 = v11;
    std::string v34 = v10;
    uint64_t v35 = a2;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        std::string v20 = &v10[v39 * a4];
        uint64_t v21 = &v11[v39 * a4];
        while (!std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v15, (unint64_t *)&v16[v18]))
        {
          --v19;
          ++v18;
          ++v17;
          if (!(a4 + v19)) {
            goto LABEL_18;
          }
        }
        uint64_t v22 = -v19;
        uint64_t v23 = v22;
        if (v22 >= a4)
        {
          std::string::size_type v27 = v41.__r_.__value_.__r.__words[0];
          long long v28 = __p[0];
        }
        else
        {
          do
          {
            uint64_t v24 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(v15, (unint64_t *)&v20[v22]);
            float v26 = v21[v22];
            std::string::size_type v27 = v41.__r_.__value_.__r.__words[0];
            *(void *)(v41.__r_.__value_.__r.__words[0] + 8 * v23) = v20[v22];
            long long v28 = __p[0];
            *((float *)__p[0] + v23++) = v26;
            if (v23 < a4)
            {
              while (v24 != v25)
              {
                *(void *)(v27 + 8 * v23) = v24[3];
                *(float *)&v28[v23++] = v26;
                if (v23 >= a4) {
                  break;
                }
                uint64_t v24 = (void *)*v24;
              }
            }
            ++v22;
          }
          while (v23 < a4);
        }
        memcpy(&v16[v18], (const void *)(v27 + v18 * 8), v36 - v18 * 8);
        memcpy(&v38[v17], &v28[v17], v37 - v17 * 4);
        uint64_t v11 = v33;
        uint64_t v10 = v34;
      }
LABEL_18:
      int v38 = (float *)((char *)v38 + v37);
      ++v39;
      int v16 = (uint64_t *)((char *)v16 + v36);
    }
    while (v39 != v35);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v41.__r_.__value_.__r.__words[0])
  {
    v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1DD013D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFFlatDedup::remove_ids(uint64_t a1, unsigned int (***a2)(void, uint64_t))
{
  memset(v53, 0, sizeof(v53));
  int v54 = 1065353216;
  long long __p = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  int v4 = *(void **)(a1 + 248);
  if (v4)
  {
    while (1)
    {
      unsigned int v5 = (**a2)(a2, v4[2]);
      uint64_t v6 = v4[3];
      size_t v7 = **a2;
      if (v5) {
        break;
      }
      if (v7(a2, v6))
      {
LABEL_26:
        int v4 = (void *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::erase((void *)(a1 + 232), v4);
        if (!v4)
        {
LABEL_27:
          uint64_t v21 = (long long *)__p;
          uint64_t v22 = (long long *)v51;
          while (v21 != v22)
            std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long,long long> &>((void *)(a1 + 232), v21++);
          goto LABEL_30;
        }
      }
      else
      {
        int v4 = (void *)*v4;
        if (!v4) {
          goto LABEL_27;
        }
      }
    }
    if ((((uint64_t (*)(void, uint64_t))v7)(a2, v6) & 1) == 0)
    {
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v53, v4 + 2))
      {
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 2);
        uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v53, v4 + 2, (uint64_t)&std::piecewise_construct, &v49)[3];
        uint64_t v9 = v4[3];
        uint64_t v10 = v51;
        if (v51 >= v52)
        {
          uint64_t v13 = (char *)__p;
          uint64_t v14 = (v51 - (unsigned char *)__p) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v52 - (unsigned char *)__p;
          if ((v52 - (unsigned char *)__p) >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>((uint64_t)&v52, v17);
            uint64_t v13 = (char *)__p;
            uint64_t v10 = v51;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = &v18[16 * v14];
          *(void *)uint64_t v19 = v8;
          *((void *)v19 + 1) = v9;
          std::string v20 = v19;
          if (v10 != v13)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
              v20 -= 16;
              v10 -= 16;
            }
            while (v10 != v13);
            uint64_t v13 = (char *)__p;
          }
          uint64_t v11 = v19 + 16;
          long long __p = v20;
          int v51 = v19 + 16;
          uint64_t v52 = &v18[16 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(void *)int v51 = v8;
          *((void *)v10 + 1) = v9;
          uint64_t v11 = v10 + 16;
        }
        int v51 = v11;
      }
      else
      {
        uint64_t v12 = v4[3];
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 2);
        std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v53, v4 + 2, (uint64_t)&std::piecewise_construct, &v49)[3] = v12;
      }
    }
    goto LABEL_26;
  }
LABEL_30:
  if (*(_DWORD *)(a1 + 160))
  {
    memset(&v49, 0, sizeof(v49));
    int v38 = snprintf(0, 0, "Error: '%s' failed: direct map remove not implemented", "direct_map.no()");
    std::string::resize(&v49, v38 + 1, 0);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v39 = &v49;
    }
    else {
      uint64_t v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v39, size, "Error: '%s' failed: direct map remove not implemented", "direct_map.no()");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v49, "virtual size_t faiss::IndexIVFFlatDedup::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 416);
  }
  std::vector<long long>::vector(&v49, *(void *)(a1 + 48));
  if (!*(void *)(a1 + 48)) {
    goto LABEL_50;
  }
  unint64_t v23 = 0;
  do
  {
    uint64_t v24 = (***(uint64_t (****)(void, unint64_t))(a1 + 112))(*(void *)(a1 + 112), v23);
    uint64_t v46 = *(void *)(a1 + 112);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v46 + 16))(v46, v23);
    unint64_t v48 = v23;
    if (v24 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = v24;
      while (1)
      {
        if ((**a2)(a2, *(void *)(v47 + 8 * v25)))
        {
          long long v43 = *(unint64_t **)(v47 + 8 * v25);
          if (!std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v53, (unint64_t *)&v43))
          {
            --v26;
            uint64_t v29 = *(void *)(a1 + 112);
            uint64_t v30 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v29 + 40))(v29, v23, v26);
            long long v43 = *(unint64_t **)(a1 + 112);
            uint64_t v44 = (*(uint64_t (**)(unint64_t *, unint64_t, uint64_t))(*v43 + 48))(v43, v23, v26);
            unint64_t v45 = v23;
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v29 + 80))(v29, v23, v25, v30, v44);
            faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v43);
            goto LABEL_39;
          }
          uint64_t v27 = *(void *)(a1 + 112);
          unint64_t v42 = *(void *)(v47 + 8 * v25);
          long long v43 = &v42;
          uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v53, &v42, (uint64_t)&std::piecewise_construct, &v43)[3];
          long long v43 = *(unint64_t **)(a1 + 112);
          uint64_t v44 = (*(uint64_t (**)(unint64_t *, unint64_t, uint64_t))(*v43 + 48))(v43, v23, v25);
          unint64_t v45 = v23;
          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 80))(v27, v23, v25, v28, v44);
          faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v43);
        }
        ++v25;
LABEL_39:
        if (v25 >= v26) {
          goto LABEL_43;
        }
      }
    }
    uint64_t v26 = v24;
LABEL_43:
    *(void *)(v49.__r_.__value_.__r.__words[0] + 8 * v23) = v24 - v26;
    faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v46);
    ++v23;
    unint64_t v31 = *(void *)(a1 + 48);
  }
  while (v23 < v31);
  if (!v31)
  {
LABEL_50:
    uint64_t v33 = 0;
    goto LABEL_51;
  }
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    uint64_t v34 = *(void *)(v49.__r_.__value_.__r.__words[0] + 8 * v32);
    if (v34 >= 1)
    {
      uint64_t v35 = *(void *)(a1 + 112);
      uint64_t v36 = (**(uint64_t (***)(uint64_t, unint64_t))v35)(v35, v32);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 96))(v35, v32, v36 - *(void *)(v49.__r_.__value_.__r.__words[0] + 8 * v32));
      v33 += v34;
      unint64_t v31 = *(void *)(a1 + 48);
    }
    ++v32;
  }
  while (v32 < v31);
LABEL_51:
  *(void *)(a1 + 16) -= v33;
  if (v49.__r_.__value_.__r.__words[0])
  {
    v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    int v51 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v53);
  return v33;
}

void sub_1DD0143F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  __cxa_free_exception(v26);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFFlatDedup::range_search(faiss::IndexIVFFlatDedup *this, uint64_t a2, const float *a3, float a4, faiss::RangeSearchResult *a5)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::IndexIVFFlatDedup::range_search(idx_t, const float *, float, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 464);
}

void sub_1DD014528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlatDedup::update_vectors(faiss::IndexIVFFlatDedup *this, int a2, const uint64_t *a3, const float *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexIVFFlatDedup::update_vectors(int, const idx_t *, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 468);
}

void sub_1DD0145E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlatDedup::reconstruct_from_offset(faiss::IndexIVFFlatDedup *this, uint64_t a2, uint64_t a3, float *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexIVFFlatDedup::reconstruct_from_offset(int64_t, int64_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFFlat.cpp", 473);
}

void sub_1DD014698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFFlat::~IndexIVFFlat(faiss::IndexIVFFlat *this)
{
  faiss::IndexIVF::~IndexIVF(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::IndexIVFFlatDedup::~IndexIVFFlatDedup(faiss::IndexIVFFlatDedup *this)
{
  *(void *)this = &unk_1F383EF88;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 232);
  faiss::IndexIVF::~IndexIVF(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F383EF88;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 232);
  faiss::IndexIVF::~IndexIVF(this);
  JUMPOUT(0x1E01AF670);
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::set_list(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::distance_to_code(uint64_t a1, const float *a2)
{
  return faiss::fvec_inner_product(*(faiss **)(a1 + 24), a2, *(void *)(a1 + 8));
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::scan_codes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7)
{
  if (!a2) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = a5 - 1;
  uint64_t v15 = a6 - 8;
  unint64_t v16 = a7 + 1;
  do
  {
    float v17 = faiss::fvec_inner_product(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(void *)(a1 + 8) * v12), *(void *)(a1 + 8));
    if (*a5 >= v17) {
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t v18 = v12 | (*(void *)(a1 + 32) << 32);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 8 * v12);
    }
    if (a7 < 2)
    {
      uint64_t v19 = 1;
      goto LABEL_18;
    }
    uint64_t v20 = 3;
    unint64_t v21 = 2;
    uint64_t v22 = 1;
    while (1)
    {
      float v23 = v14[v21];
      if (v20 != v16)
      {
        float v24 = v14[v20];
        if (v23 >= v24) {
          break;
        }
      }
      if (v23 > v17) {
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v19 = v21;
      v14[v22] = v23;
      *(void *)(v15 + 8 * v22) = *(void *)(v15 + 8 * v21);
      v21 *= 2;
      uint64_t v20 = (2 * v19) | 1;
      uint64_t v22 = v19;
      if (v21 > a7) {
        goto LABEL_18;
      }
    }
    float v23 = v14[v20];
    unint64_t v21 = v20;
    if (v24 <= v17) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v19 = v22;
LABEL_18:
    v14[v19] = v17;
    *(void *)(v15 + 8 * v19) = v18;
    ++v13;
LABEL_19:
    ++v12;
  }
  while (v12 != a2);
  return v13;
}

void faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *a5, float a6)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      float v13 = faiss::fvec_inner_product(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(void *)(a1 + 8) * i), *(void *)(a1 + 8));
      if (v13 > a6)
      {
        if (*(unsigned char *)(a1 + 16)) {
          uint64_t v14 = i | (*(void *)(a1 + 32) << 32);
        }
        else {
          uint64_t v14 = *(void *)(a4 + 8 * i);
        }
        faiss::RangeQueryResult::add(a5, v13, v14);
      }
    }
  }
}

void faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)0,faiss::CMin<float,long long>>::~IVFFlatScanner()
{
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::set_query(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::set_list(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

float faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::distance_to_code(uint64_t a1, const float *a2)
{
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 24), a2, *(void *)(a1 + 8));
}

uint64_t faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::scan_codes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7)
{
  if (!a2) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = a5 - 1;
  uint64_t v15 = a6 - 8;
  unint64_t v16 = a7 + 1;
  do
  {
    float v17 = faiss::fvec_L2sqr(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(void *)(a1 + 8) * v12), *(void *)(a1 + 8));
    if (*a5 <= v17) {
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t v18 = v12 | (*(void *)(a1 + 32) << 32);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 8 * v12);
    }
    if (a7 < 2)
    {
      uint64_t v19 = 1;
      goto LABEL_18;
    }
    uint64_t v20 = 3;
    unint64_t v21 = 2;
    uint64_t v22 = 1;
    while (1)
    {
      float v23 = v14[v21];
      if (v20 != v16)
      {
        float v24 = v14[v20];
        if (v23 <= v24) {
          break;
        }
      }
      if (v23 < v17) {
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v19 = v21;
      v14[v22] = v23;
      *(void *)(v15 + 8 * v22) = *(void *)(v15 + 8 * v21);
      v21 *= 2;
      uint64_t v20 = (2 * v19) | 1;
      uint64_t v22 = v19;
      if (v21 > a7) {
        goto LABEL_18;
      }
    }
    float v23 = v14[v20];
    unint64_t v21 = v20;
    if (v24 >= v17) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v19 = v22;
LABEL_18:
    v14[v19] = v17;
    *(void *)(v15 + 8 * v19) = v18;
    ++v13;
LABEL_19:
    ++v12;
  }
  while (v12 != a2);
  return v13;
}

void faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::scan_codes_range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, faiss::RangeQueryResult *a5, float a6)
{
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      float v13 = faiss::fvec_L2sqr(*(faiss **)(a1 + 24), (const float *)(a3 + 4 * *(void *)(a1 + 8) * i), *(void *)(a1 + 8));
      if (v13 < a6)
      {
        if (*(unsigned char *)(a1 + 16)) {
          uint64_t v14 = i | (*(void *)(a1 + 32) << 32);
        }
        else {
          uint64_t v14 = *(void *)(a4 + 8 * i);
        }
        faiss::RangeQueryResult::add(a5, v13, v14);
      }
    }
  }
}

void faiss::anonymous namespace'::IVFFlatScanner<(faiss::MetricType)1,faiss::CMax<float,long long>>::~IVFFlatScanner()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1DD014E2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_multi<std::pair<long long,long long> &>(void *a1, long long *a2)
{
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = 0;
  long long v5 = *a2;
  *((_OWORD *)v4 + 1) = *a2;
  v4[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4 + 2);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1DD014EAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__equal_range_multi<long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a1, a2);
  if (result)
  {
    int8x8_t v4 = result;
    do
      int8x8_t v4 = (void *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::remove(a1, a2, (uint64_t)&__p);
  int8x8_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void faiss::IndexIVFFlat::add_core()
{
}

void faiss::IndexIVFFlatDedup::add_with_ids()
{
}

void faiss::Index::range_search(faiss::Index *this, uint64_t a2, const float *a3, float a4, faiss::RangeSearchResult *a5)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "range search not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::Index::range_search(idx_t, const float *, float, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 27);
}

void sub_1DD015610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::assign(faiss::Index *this, uint64_t a2, const float *a3, uint64_t *a4, uint64_t a5)
{
  std::vector<float>::vector(__p, a5 * a2);
  (*(void (**)(faiss::Index *, uint64_t, const float *, uint64_t, void *, uint64_t *))(*(void *)this + 40))(this, a2, a3, a5, __p[0], a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD0156E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::Index::add_with_ids(faiss::Index *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "add_with_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::add_with_ids(idx_t, const float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 39);
}

void sub_1DD015784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::remove_ids()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "remove_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v1, "virtual size_t faiss::Index::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 43);
}

void sub_1DD01583C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::reconstruct(faiss::Index *this, uint64_t a2, float *a3)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "reconstruct not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::Index::reconstruct(idx_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 48);
}

void sub_1DD0158F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

int *faiss::Index::reconstruct_n(int *this, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 1)
  {
    uint64_t v7 = this;
    for (uint64_t i = 0; i != a3; ++i)
      this = (int *)(*(uint64_t (**)(int *, uint64_t, float *))(*(void *)v7 + 80))(v7, a2 + i, &a4[i * v7[2]]);
  }
  return this;
}

void *faiss::Index::search_and_reconstruct(faiss::Index *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6, float *a7)
{
  if (a4 <= 0)
  {
    memset(&v21, 0, sizeof(v21));
    int v17 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v21, v17 + 1, 0);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v18 = &v21;
    }
    else {
      size_t v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v21.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v18, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v21, "virtual void faiss::Index::search_and_reconstruct(idx_t, const float *, idx_t, float *, idx_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 64);
  }
  uint64_t result = (void *)(*(uint64_t (**)(faiss::Index *, uint64_t, const float *))(*(void *)this + 40))(this, a2, a3);
  if (a2 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v13;
      uint64_t v16 = a4;
      do
      {
        if (a6[v15] < 0) {
          uint64_t result = memset(&a7[v15 * *((int *)this + 2)], 255, 4 * *((int *)this + 2));
        }
        else {
          uint64_t result = (void *)(*(uint64_t (**)(faiss::Index *))(*(void *)this + 80))(this);
        }
        ++v15;
        --v16;
      }
      while (v16);
      ++v14;
      v13 += a4;
    }
    while (v14 != a2);
  }
  return result;
}

void sub_1DD015B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float faiss::Index::compute_residual(faiss::Index *this, float *a2, float *a3, uint64_t a4)
{
  (*(void (**)(faiss::Index *, uint64_t))(*(void *)this + 80))(this, a4);
  uint64_t v8 = *((int *)this + 2);
  if (v8)
  {
    do
    {
      float v9 = *a2++;
      float result = v9 - *a3;
      *a3++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

int *faiss::Index::compute_residual_n(int *this, uint64_t a2, const float *a3, float *a4, const uint64_t *a5)
{
  if (a2 >= 1)
  {
    float v9 = this;
    for (uint64_t i = 0; i != a2; ++i)
      this = (int *)(*(uint64_t (**)(int *, const float *, float *, const uint64_t))(*(void *)v9 + 104))(v9, &a3[i * v9[2]], &a4[i * v9[2]], a5[i]);
  }
  return this;
}

void faiss::Index::sa_code_size(faiss::Index *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v2, "virtual size_t faiss::Index::sa_code_size() const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 101);
}

void sub_1DD015D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::sa_encode(faiss::Index *this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::sa_encode(idx_t, const float *, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 105);
}

void sub_1DD015DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::sa_decode(faiss::Index *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "standalone codec not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::Index::sa_decode(idx_t, const uint8_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 109);
}

void sub_1DD015EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::Index::get_distance_computer(faiss::Index *this)
{
  if (*((_DWORD *)this + 7) == 1) {
    operator new();
  }
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "get_distance_computer() not implemented");
  faiss::FaissException::FaissException(exception, v2, "virtual DistanceComputer *faiss::Index::get_distance_computer() const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/Index.cpp", 148);
}

void sub_1DD015FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::anonymous namespace'::GenericDistanceComputer::set_query(uint64_t this, const float *a2)
{
  *(void *)(this + 48) = a2;
  return this;
}

float faiss::anonymous namespace'::GenericDistanceComputer::operator()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), a2, *(void *)(a1 + 24));
  int8x8_t v3 = *(faiss **)(a1 + 48);
  unint64_t v4 = *(const float **)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 8);
  return faiss::fvec_L2sqr(v3, v4, v5);
}

float faiss::anonymous namespace'::GenericDistanceComputer::symmetric_dis(faiss::_anonymous_namespace_::GenericDistanceComputer *this, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, void))(**((void **)this + 2) + 80))(*((void *)this + 2), a2, *((void *)this + 3));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 80))(*((void *)this + 2), a3, *((void *)this + 3) + 4 * *((void *)this + 1));
  unint64_t v5 = (const float *)*((void *)this + 3);
  unint64_t v6 = *((void *)this + 1);
  return faiss::fvec_L2sqr((faiss *)&v5[v6], v5, v6);
}

void faiss::anonymous namespace'::GenericDistanceComputer::~GenericDistanceComputer(faiss::_anonymous_namespace_::GenericDistanceComputer *this)
{
  *(void *)this = &unk_1F383EBF0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383EBF0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::IndexIVFPQ::IndexIVFPQ(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
}

void sub_1DD01638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  free(v15[53]);
  faiss::ProductQuantizer::~ProductQuantizer(v16);
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)v15);
  _Unwind_Resume(a1);
}

void faiss::ProductQuantizer::~ProductQuantizer(faiss::ProductQuantizer *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  int8x8_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
}

void faiss::IndexIVFPQ::train_residual(faiss::IndexIVFPQ *this, int *a2, const float *a3)
{
}

void faiss::IndexIVFPQ::train_residual_o(faiss::IndexIVFPQ *this, int *a2, const float *a3, float *a4)
{
  uint64_t v15 = a2;
  uint64_t v7 = (const float *)faiss::fvecs_maybe_subsample((faiss *)*((int *)this + 2), &v15, (unint64_t *)(*((void *)this + 35) * *((int *)this + 79)), (uint64_t)a3, (const float *)*((unsigned __int8 *)this + 24), *((_DWORD *)this + 80));
  uint64_t v8 = v7;
  if (v7 == a3) {
    float v9 = 0;
  }
  else {
    float v9 = v7;
  }
  if (*((unsigned char *)this + 232))
  {
    if (*((unsigned char *)this + 24)) {
      puts("computing residuals");
    }
    operator new[]();
  }
  char v10 = *((unsigned char *)this + 24);
  if (v10)
  {
    printf("training %zdx%zd product quantizer on %lld vectors in %dD\n", *((void *)this + 31), *((void *)this + 35), v15, *((_DWORD *)this + 2));
    char v10 = *((unsigned char *)this + 24);
  }
  *((unsigned char *)this + 288) = v10;
  faiss::ProductQuantizer::train((faiss::IndexIVFPQ *)((char *)this + 240), (int)v15, v8);
  if (!*((unsigned char *)this + 392)) {
    goto LABEL_17;
  }
  if (*((unsigned char *)this + 24)) {
    puts("doing polysemous training for PQ");
  }
  faiss::PolysemousTraining::PolysemousTraining((faiss::PolysemousTraining *)v12);
  unint64_t v11 = *((void *)this + 50) ? (faiss::PolysemousTraining *)*((void *)this + 50) : (faiss::PolysemousTraining *)v12;
  faiss::PolysemousTraining::optimize_pq_for_hamming(v11, (faiss::IndexIVFPQ *)((char *)this + 240), (unint64_t)v15, v8);
  if (v14 < 0)
  {
    operator delete(__p);
    if (a4) {
LABEL_18:
    }
      operator new[]();
  }
  else
  {
LABEL_17:
    if (a4) {
      goto LABEL_18;
    }
  }
  if (*((unsigned char *)this + 232)) {
    faiss::initialize_IVFPQ_precomputed_table(this + 420, *((void **)this + 5));
  }
  if (v9) {
    MEMORY[0x1E01AF650](v9, 0x1000C8052888210);
  }
}

void sub_1DD0167B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1E01AF650](v28, 0x1000C8077774924);
  if (v27)
  {
    MEMORY[0x1E01AF650](v27, 0x1000C8052888210);
    if (!v26) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_4;
  }
  MEMORY[0x1E01AF650](v26, 0x1000C8052888210);
  goto LABEL_4;
}

uint64_t faiss::IndexIVFPQ::precompute_table(void **this)
{
  return faiss::initialize_IVFPQ_precomputed_table((int)this + 420, this[5]);
}

void faiss::IndexIVFPQ::encode(faiss::IndexIVFPQ *this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  if (*((unsigned char *)this + 232))
  {
    std::vector<float>::vector(__p, *((int *)this + 2));
    (*(void (**)(void, const float *, void *, uint64_t))(**((void **)this + 5) + 104))(*((void *)this + 5), a3, __p[0], a2);
    faiss::ProductQuantizer::compute_code((uint64_t)this + 240, (uint64_t)__p[0], a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v8 = (char *)this + 240;
    faiss::ProductQuantizer::compute_code((uint64_t)v8, (uint64_t)a3, a4);
  }
}

void sub_1DD01696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::encode_multiple(faiss::IndexIVFPQ *this, uint64_t a2, uint64_t *a3, const float *a4, unsigned __int8 *a5, int a6)
{
  if (a6) {
    (*(void (**)(void, uint64_t, const float *, uint64_t *, uint64_t))(**((void **)this + 5) + 56))(*((void *)this + 5), a2, a4, a3, 1);
  }
  unint64_t v11 = *(uint64_t (**)(faiss::IndexIVFPQ *, uint64_t, const float *, uint64_t *, unsigned __int8 *, void))(*(void *)this + 160);
  return v11(this, a2, a4, a3, a5, 0);
}

void faiss::IndexIVFPQ::decode_multiple(faiss::IndexIVFPQ *this, uint64_t a2, const uint64_t *a3, const unsigned __int8 *a4, float *a5)
{
  faiss::ProductQuantizer::decode((_DWORD *)this + 60, a4, a5, a2);
  if (*((unsigned char *)this + 232))
  {
    std::vector<float>::vector(__p, *((int *)this + 2));
    if (a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        (*(void (**)(void, const uint64_t, void *))(**((void **)this + 5) + 80))(*((void *)this + 5), a3[v10], __p[0]);
        uint64_t v11 = *((int *)this + 2);
        if (v11)
        {
          unint64_t v12 = (float *)__p[0];
          uint64_t v13 = (float *)((char *)a5 + v9 * v11);
          do
          {
            float v14 = *v12++;
            *uint64_t v13 = v14 + *v13;
            ++v13;
            --v11;
          }
          while (v11);
        }
        ++v10;
        v9 += 4;
      }
      while (v10 != a2);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1DD016B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::add_core(faiss::IndexIVFPQ *this, uint64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  return faiss::IndexIVFPQ::add_core_o(this, a2, a3, a4, 0, a5);
}

uint64_t faiss::IndexIVFPQ::add_core_o(faiss::IndexIVFPQ *this, uint64_t a2, const float *a3, const uint64_t *a4, float *a5, const uint64_t *a6)
{
  unint64_t v6 = a6;
  uint64_t v7 = a4;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0x8000)
  {
    faiss::InterruptCallback::check(this);
    uint64_t v26 = (faiss *)faiss::DirectMap::check_can_add((_DWORD *)this + 40, v7);
    if (*((unsigned char *)this + 25))
    {
      faiss::getmillisecs(v26);
      if (v6)
      {
        faiss::getmillisecs(v27);
        operator new[]();
      }
      operator new[]();
    }
    memset(&__str, 0, sizeof(__str));
    int v28 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&__str, v28 + 1, 0);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str.__r_.__value_.__l.__size_;
    }
    snprintf((char *)p_str, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &__str, "void faiss::IndexIVFPQ::add_core_o(idx_t, const float *, const idx_t *, float *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 290);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x8000;
  uint64_t v13 = a6;
  do
  {
    float v14 = v6;
    uint64_t v15 = v11 + 0x8000;
    if (a2 >= v12) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = a2;
    }
    if (v15 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = v11 + 0x8000;
    }
    if (*((unsigned char *)this + 24)) {
      printf("IndexIVFPQ::add_core_o: adding %lld:%lld / %lld\n", v11, v17, a2);
    }
    uint64_t v18 = v16 + v10;
    uint64_t v19 = v11 * *((int *)this + 2);
    unint64_t v20 = &a3[v19];
    if (a4) {
      std::string v21 = v7;
    }
    else {
      std::string v21 = 0;
    }
    int v22 = &a5[v19];
    if (a5) {
      float v23 = v22;
    }
    else {
      float v23 = 0;
    }
    unint64_t v6 = v14;
    if (v14) {
      float v24 = v13;
    }
    else {
      float v24 = 0;
    }
    uint64_t result = faiss::IndexIVFPQ::add_core_o(this, v18, v20, v21, v23, v24);
    v13 += 0x8000;
    v7 += 0x8000;
    v12 += 0x8000;
    v10 -= 0x8000;
    v11 += 0x8000;
  }
  while (v15 < a2);
  return result;
}

void sub_1DD01708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_free_exception(v28);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::encode_vectors(faiss **this, int64_t a2, const float *a3, const float *a4, unsigned __int8 *a5, int a6)
{
  if (*((unsigned char *)this + 232)) {
    faiss::compute_residuals(this[5], (const faiss::Index *)a2, (uint64_t)a3, a4, (const uint64_t *)a5);
  }
  uint64_t result = faiss::ProductQuantizer::compute_codes((faiss::ProductQuantizer *)(this + 30), a3, a5, a2);
  if (a6)
  {
    uint64_t result = faiss::Level1Quantizer::coarse_code_size((faiss::Level1Quantizer *)(this + 5));
    int64_t v12 = a2 - 1;
    if (a2 >= 1)
    {
      uint64_t v13 = result;
      do
      {
        size_t v14 = (size_t)this[16];
        uint64_t v15 = &a5[(v14 + v13) * v12];
        memmove(&v15[v13], &a5[v14 * v12], v14);
        uint64_t result = faiss::Level1Quantizer::encode_listno((uint64_t)(this + 5), *(void *)&a4[2 * v12], v15);
        unint64_t v16 = v12-- + 1;
      }
      while (v16 > 1);
    }
  }
  return result;
}

void sub_1DD01724C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x1E01AF650](v1, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void faiss::compute_residuals(faiss *this, const faiss::Index *a2, uint64_t a3, const float *a4, const uint64_t *a5)
{
}

void faiss::IndexIVFPQ::sa_decode(faiss::IndexIVFPQ *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  uint64_t v7 = (faiss::IndexIVFPQ *)((char *)this + 40);
  uint64_t v8 = faiss::Level1Quantizer::coarse_code_size((faiss::IndexIVFPQ *)((char *)this + 40));
  std::vector<float>::vector(__p, *((int *)this + 2));
  uint64_t v18 = a2;
  if (a2 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = &a3[(*((void *)this + 16) + v8) * v10];
      unint64_t v12 = faiss::Level1Quantizer::decode_listno(v7, v11);
      uint64_t v13 = *((int *)this + 2);
      faiss::ProductQuantizer::decode((_DWORD *)this + 60, (uint64_t)&v11[v8], (uint64_t)&a4[v10 * v13]);
      if (*((unsigned char *)this + 232))
      {
        (*(void (**)(void, unint64_t, void *))(**(void **)v7 + 80))(*(void *)v7, v12, __p[0]);
        uint64_t v14 = *((int *)this + 2);
        if (v14)
        {
          uint64_t v15 = (float *)__p[0];
          unint64_t v16 = (float *)((char *)a4 + v9 * v13);
          do
          {
            float v17 = *v15++;
            *unint64_t v16 = v17 + *v16;
            ++v16;
            --v14;
          }
          while (v14);
        }
      }
      ++v10;
      v9 += 4;
    }
    while (v10 != v18);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DD017490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::IndexIVFPQ::reconstruct_from_offset(faiss::IndexIVFPQ *this, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 14) + 48))(*((void *)this + 14));
  if (*((unsigned char *)this + 232))
  {
    std::vector<float>::vector(__p, *((int *)this + 2));
    (*(void (**)(void, uint64_t, void *))(**((void **)this + 5) + 80))(*((void *)this + 5), a2, __p[0]);
    faiss::ProductQuantizer::decode((_DWORD *)this + 60, v7, (uint64_t)a4);
    uint64_t v8 = *((unsigned int *)this + 2);
    uint64_t v9 = __p[0];
    if ((int)v8 < 1)
    {
      if (!__p[0]) {
        return;
      }
    }
    else
    {
      uint64_t v10 = (float *)__p[0];
      do
      {
        float v11 = *v10++;
        *a4 = v11 + *a4;
        ++a4;
        --v8;
      }
      while (v8);
    }
    __p[1] = v9;
    operator delete(v9);
  }
  else
  {
    faiss::ProductQuantizer::decode((_DWORD *)this + 60, v7, (uint64_t)a4);
  }
}

void sub_1DD0175D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t faiss::IndexIVFPQ::scanListWithTable(uint64_t this, uint64_t a2, const unsigned __int8 *a3, faiss::KnnSearchResultsMetricBased *a4, float a5, const float *a6)
{
  if (a2)
  {
    uint64_t v11 = this;
    for (uint64_t i = 0; i != a2; ++i)
    {
      if (*(_DWORD *)(v11 + 256) != 8) {
        faiss::decode<faiss::PQDecoder8>();
      }
      uint64_t v13 = *(void *)(v11 + 248);
      float v14 = a5;
      if (v13)
      {
        uint64_t v15 = a6;
        float v14 = a5;
        unint64_t v16 = a3;
        do
        {
          int v17 = *v16++;
          float v14 = v14 + v15[v17];
          v15 += *(void *)(v11 + 280);
          --v13;
        }
        while (v13);
      }
      a3 += *(void *)(v11 + 272);
      this = faiss::KnnSearchResultsMetricBased::add((uint64_t)a4, i, v14);
    }
  }
  return this;
}

uint64_t faiss::KnnSearchResultsMetricBased::add(uint64_t this, uint64_t a2, float a3)
{
  int v3 = *(_DWORD *)(this + 48);
  if (v3 == 1)
  {
    uint64_t v7 = *(float **)(this + 24);
    if (*v7 <= a3) {
      return this;
    }
    uint64_t v8 = *(void *)(this + 8);
    if (v8) {
      uint64_t v6 = *(void *)(v8 + 8 * a2);
    }
    else {
      uint64_t v6 = a2 | (*(void *)this << 32);
    }
    unint64_t v18 = *(void *)(this + 16);
    uint64_t v10 = v7 - 1;
    uint64_t v11 = *(void *)(this + 32) - 8;
    if (v18 >= 2)
    {
      uint64_t v12 = 1;
      unint64_t v19 = 2;
      uint64_t v20 = 3;
      while (1)
      {
        float v21 = v10[v19];
        if (v20 == v18 + 1 || (float v22 = v10[v20], v21 > v22))
        {
          if (v21 < a3) {
            goto LABEL_30;
          }
        }
        else
        {
          float v21 = v10[v20];
          unint64_t v19 = v20;
          if (v22 < a3)
          {
LABEL_30:
            uint64_t v17 = v12;
            goto LABEL_31;
          }
        }
        uint64_t v17 = v19;
        v10[v12] = v21;
        *(void *)(v11 + 8 * v12) = *(void *)(v11 + 8 * v19);
        v19 *= 2;
        uint64_t v20 = (2 * v17) | 1;
        uint64_t v12 = v17;
        if (v19 > v18) {
          goto LABEL_31;
        }
      }
    }
    goto LABEL_21;
  }
  if (v3) {
    return this;
  }
  unint64_t v4 = *(float **)(this + 24);
  if (*v4 >= a3) {
    return this;
  }
  uint64_t v5 = *(void *)(this + 8);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8 * a2);
  }
  else {
    uint64_t v6 = a2 | (*(void *)this << 32);
  }
  unint64_t v9 = *(void *)(this + 16);
  uint64_t v10 = v4 - 1;
  uint64_t v11 = *(void *)(this + 32) - 8;
  if (v9 < 2)
  {
LABEL_21:
    uint64_t v17 = 1;
    goto LABEL_31;
  }
  uint64_t v12 = 1;
  unint64_t v13 = 2;
  uint64_t v14 = 3;
  do
  {
    float v15 = v10[v13];
    if (v14 == v9 + 1 || (float v16 = v10[v14], v15 < v16))
    {
      if (v15 > a3) {
        goto LABEL_30;
      }
    }
    else
    {
      float v15 = v10[v14];
      unint64_t v13 = v14;
      if (v16 > a3) {
        goto LABEL_30;
      }
    }
    uint64_t v17 = v13;
    v10[v12] = v15;
    *(void *)(v11 + 8 * v12) = *(void *)(v11 + 8 * v13);
    v13 *= 2;
    uint64_t v14 = (2 * v17) | 1;
    uint64_t v12 = v17;
  }
  while (v13 <= v9);
LABEL_31:
  v10[v17] = a3;
  *(void *)(v11 + 8 * v17) = v6;
  ++*(void *)(this + 40);
  return this;
}

#error "1DD017C54: call analysis failed (funcsize=398)"

void sub_1DD017EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_free_exception(v24);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::get_InvertedListScanner(faiss::IndexIVFPQ *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (v1 == 16)
  {
    int v3 = *((_DWORD *)this + 7);
    if (v3 == 1) {
      operator new();
    }
    if (!v3) {
      operator new();
    }
  }
  else if (v1 == 8)
  {
    int v2 = *((_DWORD *)this + 7);
    if (v2 == 1) {
      operator new();
    }
    if (!v2) {
      operator new();
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 7);
    if (v4 == 1) {
      operator new();
    }
    if (!v4) {
      operator new();
    }
  }
  return 0;
}

void sub_1DD0182C8(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF670](v1, 0x10F1C4060970A61);
  _Unwind_Resume(a1);
}

double faiss::IndexIVFPQStats::reset(faiss::IndexIVFPQStats *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

long long *faiss::IndexIVFPQStats::get_indexIVFPQ_stats(faiss::IndexIVFPQStats *this)
{
  {
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats = 0u;
    unk_1EAB1CB80 = 0u;
  }
  return &faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats;
}

faiss::IndexIVFPQ *faiss::IndexIVFPQ::IndexIVFPQ(faiss::IndexIVFPQ *this)
{
  int v2 = faiss::IndexIVF::IndexIVF(this);
  *(void *)int v2 = &unk_1F383E188;
  faiss::ProductQuantizer::ProductQuantizer((faiss::IndexIVF *)((char *)v2 + 240));
  *((unsigned char *)this + 392) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return this;
}

void sub_1DD01840C(_Unwind_Exception *a1)
{
  faiss::IndexIVF::~IndexIVF(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQ::find_duplicates(faiss::IndexIVFPQ *this, uint64_t *a2, unint64_t *a3)
{
  *a3 = 0;
  if (!*((void *)this + 6)) {
    return 0;
  }
  int v3 = this;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    std::vector<int>::size_type v6 = (***((uint64_t (****)(void, uint64_t))v3 + 14))(*((void *)v3 + 14), v5);
    std::vector<int>::vector(&v32, v6);
    if (v6)
    {
      uint64_t v7 = 0;
      begiint n = v32.__begin_;
      do
      {
        begin[v7] = v7;
        ++v7;
      }
      while (v6 != v7);
    }
    v31[0] = *((void *)v3 + 14);
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)v31[0] + 8))(v31[0], v5);
    unint64_t v10 = 126 - 2 * __clz(v32.__end_ - v32.__begin_);
    v31[1] = v9;
    v31[2] = v5;
    size_t v11 = *((void *)v3 + 16);
    uint64_t v28 = v9;
    size_t v29 = v11;
    if (v32.__end_ == v32.__begin_) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v10;
    }
    std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>((uint64_t)v32.__begin_, v32.__end_, (uint64_t)&v28, v12, 1);
    uint64_t v28 = *((void *)v3 + 14);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v5);
    size_t v29 = v13;
    uint64_t v30 = v5;
    uint64_t v25 = v5;
    if (v6)
    {
      uint64_t v14 = 0;
      std::vector<int>::pointer v15 = v32.__begin_;
      uint64_t v16 = 0xFFFFFFFFLL;
      do
      {
        if ((v16 & 0x80000000) == 0
          && (uint64_t v17 = v15[v16],
              uint64_t v18 = v15[v14],
              !memcmp((const void *)(v9 + v11 * v17), (const void *)(v9 + v11 * v18), v11)))
        {
          if (v14 == v16 + 1)
          {
            unint64_t v19 = a3[v4++];
            uint64_t v20 = *(void *)(v13 + 8 * v17);
            unint64_t v21 = v19 + 1;
            a3[v4] = v19 + 1;
            a2[v19] = v20;
          }
          else
          {
            unint64_t v21 = a3[v4];
          }
          uint64_t v22 = *(void *)(v13 + 8 * v18);
          a3[v4] = v21 + 1;
          a2[v21] = v22;
        }
        else
        {
          uint64_t v16 = v14;
        }
        ++v14;
      }
      while (v6 != v14);
    }
    faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v28);
    faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)v31);
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
    int v3 = this;
    uint64_t v5 = v25 + 1;
  }
  while ((unint64_t)(v25 + 1) < *((void *)this + 6));
  return v4;
}

void sub_1DD018650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVFPQ::~IndexIVFPQ(void **this)
{
  *this = &unk_1F383E188;
  free(this[53]);
  int v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  int v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *this = &unk_1F383E188;
  free(this[53]);
  int v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  int v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
  JUMPOUT(0x1E01AF670);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *this = &unk_1F383E188;
  free(this[53]);
  int v2 = this[46];
  if (v2)
  {
    this[47] = v2;
    operator delete(v2);
  }
  int v3 = this[43];
  if (v3)
  {
    this[44] = v3;
    operator delete(v3);
  }
  faiss::IndexIVF::~IndexIVF((faiss::IndexIVF *)this);
}

void faiss::AlignedTableTightAlloc<float,32>::resize(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) != a2)
  {
    memptr = 0;
    if (a2)
    {
      if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * a2, 0x100004052888210uLL))
      {
        exceptioint n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        std::vector<int>::size_type v6 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v6, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
      }
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
        memcpy(memptr, *(const void **)a1, 4 * v4);
      }
    }
    *(void *)(a1 + 8) = a2;
    free(*(void **)a1);
    *(void *)a1 = memptr;
  }
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  uint64_t v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::distance_to_code(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 16) != 8) {
    faiss::decode<faiss::PQDecoder8>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = 4 * *(void *)(v2 + 40);
    do
    {
      unsigned int v7 = *a2++;
      float result = result + *(float *)(v5 + 4 * v7);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes(unint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  unint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  int v15 = *(_DWORD *)(a1 + 224);
  uint64_t v196 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          uint64_t v73 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v73 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          uint64_t v18 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          uint64_t v76 = a5 - 1;
          uint64_t v77 = *(void *)(v73 + 32);
          uint64_t v78 = *(void *)(a1 + 64);
          uint64_t v79 = a6 - 8;
          uint64_t v80 = *(void *)(v73 + 8);
LABEL_93:
          float v81 = *(float *)(v12 + 216);
          if (v80)
          {
            uint64_t v82 = 0;
            uint64_t v83 = v78;
            do
            {
              float v81 = v81
                  + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v82) + 4 * a3->u8[v82])
                          + (float)(*(float *)(v83 + 4 * a3->u8[v82]) * -2.0));
              ++v82;
              v83 += 4 * *(void *)(v73 + 40);
            }
            while (v80 != v82);
          }
          if (*a5 >= v81) {
            goto LABEL_112;
          }
          if (a4) {
            uint64_t v84 = *(void *)(a4 + 8 * v75);
          }
          else {
            uint64_t v84 = v75 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v85 = 1;
            goto LABEL_111;
          }
          uint64_t v86 = 3;
          unint64_t v87 = 2;
          uint64_t v88 = 1;
          while (1)
          {
            float v89 = v76[v87];
            if (v86 == a7 + 1 || (float v90 = v76[v86], v89 < v90))
            {
              if (v89 > v81) {
                goto LABEL_110;
              }
            }
            else
            {
              float v89 = v76[v86];
              unint64_t v87 = v86;
              if (v90 > v81)
              {
LABEL_110:
                uint64_t v85 = v88;
LABEL_111:
                v76[v85] = v81;
                *(void *)(v79 + 8 * v85) = v84;
                uint64_t v18 = ++v74;
LABEL_112:
                a3 = (int8x16_t *)((char *)a3 + v77);
                if (++v75 == a2) {
                  return v18;
                }
                goto LABEL_93;
              }
            }
            uint64_t v85 = v87;
            v76[v88] = v89;
            *(void *)(v79 + 8 * v88) = *(void *)(v79 + 8 * v87);
            v87 *= 2;
            uint64_t v86 = (2 * v85) | 1;
            uint64_t v88 = v85;
            if (v87 > a7) {
              goto LABEL_111;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v198, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v198, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder8>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v36 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          uint64_t v18 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = a5 - 1;
          uint64_t v40 = *(void *)(v36 + 32);
          uint64_t v41 = *(void *)(a1 + 56);
          uint64_t v42 = a6 - 8;
          uint64_t v43 = *(void *)(v36 + 8);
LABEL_41:
          float v44 = *(float *)(v12 + 216);
          if (v43)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v41;
            do
            {
              float v44 = v44 + *(float *)(v46 + 4 * a3->u8[v45++]);
              v46 += 4 * *(void *)(v36 + 40);
            }
            while (v43 != v45);
          }
          if (*a5 >= v44) {
            goto LABEL_60;
          }
          if (a4) {
            uint64_t v47 = *(void *)(a4 + 8 * v38);
          }
          else {
            uint64_t v47 = v38 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v48 = 1;
            goto LABEL_59;
          }
          uint64_t v49 = 3;
          unint64_t v50 = 2;
          uint64_t v51 = 1;
          while (1)
          {
            float v52 = v39[v50];
            if (v49 == a7 + 1 || (float v53 = v39[v49], v52 < v53))
            {
              if (v52 > v44) {
                goto LABEL_58;
              }
            }
            else
            {
              float v52 = v39[v49];
              unint64_t v50 = v49;
              if (v53 > v44)
              {
LABEL_58:
                uint64_t v48 = v51;
LABEL_59:
                v39[v48] = v44;
                *(void *)(v42 + 8 * v48) = v47;
                uint64_t v18 = ++v37;
LABEL_60:
                a3 = (int8x16_t *)((char *)a3 + v40);
                if (++v38 == a2) {
                  return v18;
                }
                goto LABEL_41;
              }
            }
            uint64_t v48 = v50;
            v39[v51] = v52;
            *(void *)(v42 + 8 * v51) = *(void *)(v42 + 8 * v50);
            v50 *= 2;
            uint64_t v49 = (2 * v48) | 1;
            uint64_t v51 = v48;
            if (v50 > a7) {
              goto LABEL_59;
            }
          }
        }
      }
      return 0;
    }
    if (*(unsigned char *)(a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 40) + 80))(*(void *)(*(void *)(a1 + 8) + 40), v13, *(void *)(a1 + 72));
      float v91 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!a2) {
        return 0;
      }
    }
    else
    {
      float v91 = 0.0;
      if (!a2) {
        return 0;
      }
    }
    uint64_t v18 = 0;
    uint64_t v92 = 0;
    uint64_t v194 = v13 << 32;
    float32x4_t v93 = a5 - 1;
    uint64_t v94 = a6 - 8;
LABEL_117:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
    uint64_t v95 = *(void *)(*(void *)(v12 + 32) + 32);
    float v96 = v91 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v96) {
      goto LABEL_133;
    }
    if (v196) {
      uint64_t v97 = *(void *)(v196 + 8 * v92);
    }
    else {
      uint64_t v97 = v92 | v194;
    }
    if (a7 < 2)
    {
      uint64_t v98 = 1;
      goto LABEL_132;
    }
    uint64_t v99 = 3;
    unint64_t v100 = 2;
    uint64_t v101 = 1;
    while (1)
    {
      float v102 = v93[v100];
      if (v99 == a7 + 1 || (float v103 = v93[v99], v102 < v103))
      {
        if (v102 > v96) {
          goto LABEL_131;
        }
      }
      else
      {
        float v102 = v93[v99];
        unint64_t v100 = v99;
        if (v103 > v96)
        {
LABEL_131:
          uint64_t v98 = v101;
LABEL_132:
          v93[v98] = v96;
          *(void *)(v94 + 8 * v98) = v97;
          ++v18;
LABEL_133:
          a3 = (int8x16_t *)((char *)a3 + v95);
          if (++v92 == a2) {
            return v18;
          }
          goto LABEL_117;
        }
      }
      uint64_t v98 = v100;
      v93[v101] = v102;
      *(void *)(v94 + 8 * v101) = *(void *)(v94 + 8 * v100);
      v100 *= 2;
      uint64_t v99 = (2 * v98) | 1;
      uint64_t v101 = v98;
      if (v100 > a7) {
        goto LABEL_132;
      }
    }
  }
  if (v15 != 2) {
  uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(void *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          uint64_t v21 = 0;
          __int32 v121 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          unint64_t v122 = *(int8x16_t **)(a1 + 160);
          int8x16_t v123 = *v122;
          __int32 v124 = v122[1].i32[0];
          v125 = a5 - 1;
          uint64_t v126 = a6 - 8;
LABEL_162:
          int32x2_t v127 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v123))))));
          int8x8_t v128 = (int8x8_t)vadd_s32(vdup_lane_s32(v127, 1), v127);
          __int32 v129 = v128.i32[0];
          v128.i32[0] = a3[1].i32[0] ^ v124;
          uint8x8_t v130 = (uint8x8_t)vcnt_s8(v128);
          v130.i16[0] = vaddlv_u8(v130);
          a1 = v130.u32[0];
          if (v129 + v130.i32[0] >= v121) {
            goto LABEL_183;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v131 = *(float *)(v12 + 216);
          uint64_t v132 = *(void *)(v16 + 8);
          if (v132)
          {
            a1 = 0;
            uint64_t v133 = *(void *)(v12 + 56);
            do
            {
              float v131 = v131 + *(float *)(v133 + 4 * a3->u8[a1++]);
              v133 += 4 * *(void *)(v16 + 40);
            }
            while (v132 != a1);
          }
          ++v21;
          if (*a5 >= v131) {
            goto LABEL_183;
          }
          if (a4) {
            uint64_t v134 = *(void *)(a4 + 8 * v120);
          }
          else {
            uint64_t v134 = v120 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v135 = 1;
            goto LABEL_182;
          }
          uint64_t v136 = 3;
          a1 = 2;
          uint64_t v137 = 1;
          while (1)
          {
            float v138 = v125[a1];
            if (v136 == a7 + 1 || (float v139 = v125[v136], v138 < v139))
            {
              if (v138 > v131) {
                goto LABEL_181;
              }
            }
            else
            {
              float v138 = v125[v136];
              a1 = v136;
              if (v139 > v131)
              {
LABEL_181:
                uint64_t v135 = v137;
LABEL_182:
                v125[v135] = v131;
                *(void *)(v126 + 8 * v135) = v134;
                uint64_t v18 = ++v119;
LABEL_183:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v120 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_162;
              }
            }
            uint64_t v135 = a1;
            v125[v137] = v138;
            *(void *)(v126 + 8 * v137) = *(void *)(v126 + 8 * a1);
            a1 *= 2;
            uint64_t v136 = (2 * v135) | 1;
            uint64_t v137 = v135;
            if (a1 > a7) {
              goto LABEL_182;
            }
          }
        }
        goto LABEL_260;
      case 32:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v173 = 0;
          uint64_t v174 = 0;
          uint64_t v21 = 0;
          int v175 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          v176 = *(int8x16_t **)(a1 + 160);
          int8x16_t v178 = *v176;
          int8x16_t v177 = v176[1];
          v179 = a5 - 1;
          uint64_t v180 = a6 - 8;
LABEL_237:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v178))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v177))))))) >= v175)goto LABEL_258; {
          if (*(_DWORD *)(v16 + 16) != 8)
          }
            faiss::decode<faiss::PQDecoder8>();
          float v181 = *(float *)(v12 + 216);
          uint64_t v182 = *(void *)(v16 + 8);
          if (v182)
          {
            uint64_t v183 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v181 = v181 + *(float *)(a1 + 4 * a3->u8[v183++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v182 != v183);
          }
          ++v21;
          if (*a5 >= v181) {
            goto LABEL_258;
          }
          if (a4) {
            uint64_t v184 = *(void *)(a4 + 8 * v174);
          }
          else {
            uint64_t v184 = v174 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v185 = 1;
            goto LABEL_257;
          }
          uint64_t v186 = 3;
          unint64_t v187 = 2;
          a1 = 1;
          while (1)
          {
            float v188 = v179[v187];
            if (v186 == a7 + 1 || (float v189 = v179[v186], v188 < v189))
            {
              if (v188 > v181) {
                goto LABEL_256;
              }
            }
            else
            {
              float v188 = v179[v186];
              unint64_t v187 = v186;
              if (v189 > v181)
              {
LABEL_256:
                uint64_t v185 = a1;
LABEL_257:
                v179[v185] = v181;
                *(void *)(v180 + 8 * v185) = v184;
                uint64_t v18 = ++v173;
LABEL_258:
                a3 += 2;
                if (++v174 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_237;
              }
            }
            uint64_t v185 = v187;
            v179[a1] = v188;
            *(void *)(v180 + 8 * a1) = *(void *)(v180 + 8 * v187);
            v187 *= 2;
            uint64_t v186 = (2 * v185) | 1;
            a1 = v185;
            if (v187 > a7) {
              goto LABEL_257;
            }
          }
        }
        goto LABEL_260;
      case 64:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64_t v21 = 0;
          int v56 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v57 = *(int8x16_t **)(a1 + 160);
          int8x16_t v59 = v57[2];
          int8x16_t v58 = v57[3];
          int8x16_t v61 = *v57;
          int8x16_t v60 = v57[1];
          uint64_t v62 = a5 - 1;
          uint64_t v63 = a6 - 8;
LABEL_67:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v61))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v60)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v59))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v58)))))))) >= v56)goto LABEL_88; {
          if (*(_DWORD *)(v16 + 16) != 8)
          }
            faiss::decode<faiss::PQDecoder8>();
          float v64 = *(float *)(v12 + 216);
          uint64_t v65 = *(void *)(v16 + 8);
          if (v65)
          {
            uint64_t v66 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v64 = v64 + *(float *)(a1 + 4 * a3->u8[v66++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v65 != v66);
          }
          ++v21;
          if (*a5 >= v64) {
            goto LABEL_88;
          }
          if (a4) {
            uint64_t v67 = *(void *)(a4 + 8 * v55);
          }
          else {
            uint64_t v67 = v55 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v68 = 1;
            goto LABEL_87;
          }
          uint64_t v69 = 3;
          unint64_t v70 = 2;
          a1 = 1;
          while (1)
          {
            float v71 = v62[v70];
            if (v69 == a7 + 1 || (float v72 = v62[v69], v71 < v72))
            {
              if (v71 > v64) {
                goto LABEL_86;
              }
            }
            else
            {
              float v71 = v62[v69];
              unint64_t v70 = v69;
              if (v72 > v64)
              {
LABEL_86:
                uint64_t v68 = a1;
LABEL_87:
                v62[v68] = v64;
                *(void *)(v63 + 8 * v68) = v67;
                uint64_t v18 = ++v54;
LABEL_88:
                a3 += 4;
                if (++v55 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_67;
              }
            }
            uint64_t v68 = v70;
            v62[a1] = v71;
            *(void *)(v63 + 8 * a1) = *(void *)(v63 + 8 * v70);
            v70 *= 2;
            uint64_t v69 = (2 * v68) | 1;
            a1 = v68;
            if (v70 > a7) {
              goto LABEL_87;
            }
          }
        }
        goto LABEL_260;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v104 = 0;
          uint64_t v105 = 0;
          uint64_t v21 = 0;
          int v106 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int v107 = **(_DWORD **)(a1 + 160);
          float32x4_t v108 = a5 - 1;
          uint64_t v109 = a6 - 8;
LABEL_137:
          a8.i32[0] = a3->i32[0] ^ v107;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v106) {
            goto LABEL_158;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v110 = *(float *)(v12 + 216);
          uint64_t v111 = *(void *)(v16 + 8);
          if (v111)
          {
            a1 = 0;
            uint64_t v112 = *(void *)(v12 + 56);
            do
            {
              float v110 = v110 + *(float *)(v112 + 4 * a3->u8[a1++]);
              v112 += 4 * *(void *)(v16 + 40);
            }
            while (v111 != a1);
          }
          ++v21;
          if (*a5 >= v110) {
            goto LABEL_158;
          }
          if (a4) {
            uint64_t v113 = *(void *)(a4 + 8 * v105);
          }
          else {
            uint64_t v113 = v105 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v114 = 1;
            goto LABEL_157;
          }
          uint64_t v115 = 3;
          a1 = 2;
          uint64_t v116 = 1;
          while (1)
          {
            float v117 = v108[a1];
            if (v115 == a7 + 1 || (float v118 = v108[v115], v117 < v118))
            {
              if (v117 > v110) {
                goto LABEL_156;
              }
            }
            else
            {
              float v117 = v108[v115];
              a1 = v115;
              if (v118 > v110)
              {
LABEL_156:
                uint64_t v114 = v116;
LABEL_157:
                v108[v114] = v110;
                *(void *)(v109 + 8 * v114) = v113;
                uint64_t v18 = ++v104;
LABEL_158:
                a3 = (int8x16_t *)((char *)a3 + 4);
                if (++v105 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_137;
              }
            }
            uint64_t v114 = a1;
            v108[v116] = v117;
            *(void *)(v109 + 8 * v116) = *(void *)(v109 + 8 * a1);
            a1 *= 2;
            uint64_t v115 = (2 * v114) | 1;
            uint64_t v116 = v114;
            if (a1 > a7) {
              goto LABEL_157;
            }
          }
        }
        goto LABEL_260;
      case 8:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v157 = 0;
          uint64_t v158 = 0;
          uint64_t v21 = 0;
          int v159 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v160 = **(void **)(a1 + 160);
          unint64_t v161 = a5 - 1;
          uint64_t v162 = a6 - 8;
LABEL_212:
          uint8x8_t v163 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v160));
          v163.i16[0] = vaddlv_u8(v163);
          if (v159 <= v163.i32[0]) {
            goto LABEL_233;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v164 = *(float *)(v12 + 216);
          uint64_t v165 = *(void *)(v16 + 8);
          if (v165)
          {
            a1 = 0;
            uint64_t v166 = *(void *)(v12 + 56);
            do
            {
              float v164 = v164 + *(float *)(v166 + 4 * a3->u8[a1++]);
              v166 += 4 * *(void *)(v16 + 40);
            }
            while (v165 != a1);
          }
          ++v21;
          if (*a5 >= v164) {
            goto LABEL_233;
          }
          if (a4) {
            uint64_t v167 = *(void *)(a4 + 8 * v158);
          }
          else {
            uint64_t v167 = v158 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v168 = 1;
            goto LABEL_232;
          }
          uint64_t v169 = 3;
          a1 = 2;
          uint64_t v170 = 1;
          while (1)
          {
            float v171 = v161[a1];
            if (v169 == a7 + 1 || (float v172 = v161[v169], v171 < v172))
            {
              if (v171 > v164) {
                goto LABEL_231;
              }
            }
            else
            {
              float v171 = v161[v169];
              a1 = v169;
              if (v172 > v164)
              {
LABEL_231:
                uint64_t v168 = v170;
LABEL_232:
                v161[v168] = v164;
                *(void *)(v162 + 8 * v168) = v167;
                uint64_t v18 = ++v157;
LABEL_233:
                a3 = (int8x16_t *)((char *)a3 + 8);
                if (++v158 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_212;
              }
            }
            uint64_t v168 = a1;
            v161[v170] = v171;
            *(void *)(v162 + 8 * v170) = *(void *)(v162 + 8 * a1);
            a1 *= 2;
            uint64_t v169 = (2 * v168) | 1;
            uint64_t v170 = v168;
            if (a1 > a7) {
              goto LABEL_232;
            }
          }
        }
        goto LABEL_260;
      case 16:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          __int32 v22 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int8x16_t v23 = *(int8x16_t *)*(void *)(a1 + 160);
          float v24 = a5 - 1;
          uint64_t v25 = a6 - 8;
          while (1)
          {
            int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22) {
              goto LABEL_33;
            }
            if (*(_DWORD *)(v16 + 16) != 8) {
              faiss::decode<faiss::PQDecoder8>();
            }
            float v27 = *(float *)(v12 + 216);
            uint64_t v28 = *(void *)(v16 + 8);
            if (v28)
            {
              uint64_t v29 = 0;
              a1 = *(void *)(v12 + 56);
              do
              {
                float v27 = v27 + *(float *)(a1 + 4 * a3->u8[v29++]);
                a1 += 4 * *(void *)(v16 + 40);
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 >= v27) {
              goto LABEL_33;
            }
            if (a4) {
              uint64_t v30 = *(void *)(a4 + 8 * v20);
            }
            else {
              uint64_t v30 = v20 | (v13 << 32);
            }
            if (a7 < 2)
            {
              uint64_t v31 = 1;
              goto LABEL_32;
            }
            uint64_t v32 = 3;
            unint64_t v33 = 2;
            a1 = 1;
            while (1)
            {
              float v34 = v24[v33];
              if (v32 != a7 + 1)
              {
                float v35 = v24[v32];
                if (v34 >= v35) {
                  break;
                }
              }
              if (v34 > v27) {
                goto LABEL_31;
              }
LABEL_29:
              uint64_t v31 = v33;
              v24[a1] = v34;
              *(void *)(v25 + 8 * a1) = *(void *)(v25 + 8 * v33);
              v33 *= 2;
              uint64_t v32 = (2 * v31) | 1;
              a1 = v31;
              if (v33 > a7) {
                goto LABEL_32;
              }
            }
            float v34 = v24[v32];
            unint64_t v33 = v32;
            if (v35 <= v27) {
              goto LABEL_29;
            }
LABEL_31:
            uint64_t v31 = a1;
LABEL_32:
            v24[v31] = v27;
            *(void *)(v25 + 8 * v31) = v30;
            uint64_t v18 = ++v19;
LABEL_33:
            ++a3;
            if (++v20 == a2)
            {
LABEL_261:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              uint64_t v190 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_262;
            }
          }
        }
LABEL_260:
        uint64_t v21 = 0;
        goto LABEL_261;
    }
  }
  int v195 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v198 = *(void *)(a1 + 160);
  int v199 = (int)v17 / 8;
  int v200 = v17 - (v16 & 0xFFFFFFF8);
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v141 = 0;
    goto LABEL_267;
  }
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v193 = (int)v17;
  uint64_t v142 = a5 - 1;
  uint64_t v143 = a6 - 8;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v198, (const unsigned __int8 *)a3);
    if ((int)a1 >= v195) {
      goto LABEL_208;
    }
    uint64_t v144 = *(void *)(v12 + 32);
    if (*(_DWORD *)(v144 + 16) != 8) {
      faiss::decode<faiss::PQDecoder8>();
    }
    float v145 = *(float *)(v12 + 216);
    uint64_t v146 = *(void *)(v144 + 8);
    if (v146)
    {
      uint64_t v147 = 0;
      uint64_t v148 = *(void *)(v12 + 56);
      uint64_t v149 = 4 * *(void *)(v144 + 40);
      do
      {
        float v145 = v145 + *(float *)(v148 + 4 * a3->u8[v147++]);
        v148 += v149;
      }
      while (v146 != v147);
    }
    ++v141;
    if (*a5 >= v145) {
      goto LABEL_208;
    }
    if (v196) {
      uint64_t v150 = *(void *)(v196 + 8 * v140);
    }
    else {
      uint64_t v150 = v140 | (v13 << 32);
    }
    if (a7 < 2)
    {
      uint64_t v151 = 1;
      goto LABEL_207;
    }
    uint64_t v152 = 3;
    unint64_t v153 = 2;
    uint64_t v154 = 1;
    while (1)
    {
      float v155 = v142[v153];
      if (v152 != a7 + 1)
      {
        float v156 = v142[v152];
        if (v155 >= v156) {
          break;
        }
      }
      if (v155 > v145) {
        goto LABEL_206;
      }
LABEL_204:
      uint64_t v151 = v153;
      v142[v154] = v155;
      *(void *)(v143 + 8 * v154) = *(void *)(v143 + 8 * v153);
      v153 *= 2;
      uint64_t v152 = (2 * v151) | 1;
      uint64_t v154 = v151;
      if (v153 > a7) {
        goto LABEL_207;
      }
    }
    float v155 = v142[v152];
    unint64_t v153 = v152;
    if (v156 <= v145) {
      goto LABEL_204;
    }
LABEL_206:
    uint64_t v151 = v154;
LABEL_207:
    v142[v151] = v145;
    *(void *)(v143 + 8 * v151) = v150;
    ++v18;
LABEL_208:
    a3 = (int8x16_t *)((char *)a3 + v193);
    ++v140;
  }
  while (v140 != a2);
LABEL_267:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  uint64_t v190 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v141;
LABEL_262:
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v190;
  return v18;
}

void sub_1DD019944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  size_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v79 = 0;
            uint64_t v17 = 0;
            __int32 v80 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            float v81 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v82 = *v81;
            __int32 v83 = v81[1].i32[0];
            uint64_t v84 = v12 << 32;
            int8x16_t v146 = *v81;
            do
            {
              int32x2_t v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v82))))));
              int8x8_t v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              __int32 v87 = v86.i32[0];
              v86.i32[0] = a3[1].i32[0] ^ v83;
              uint8x8_t v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                uint64_t v89 = *((void *)v11 + 4);
                if (*(_DWORD *)(v89 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v90 = *((float *)v11 + 54);
                uint64_t v91 = *(void *)(v89 + 8);
                if (v91)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = *((void *)v11 + 7);
                  uint64_t v94 = 4 * *(void *)(v89 + 40);
                  do
                  {
                    float v90 = v90 + *(float *)(v93 + 4 * a3->u8[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 > v8)
                {
                  if (a4) {
                    uint64_t v95 = *(void *)(a4 + 8 * v79);
                  }
                  else {
                    uint64_t v95 = v79 | v84;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v90, v95);
                  int8x16_t v82 = v146;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            uint64_t v120 = 0;
            uint64_t v17 = 0;
            int v121 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            unint64_t v122 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v124 = *v122;
            int8x16_t v123 = v122[1];
            uint64_t v125 = v12 << 32;
            int8x16_t v143 = *v122;
            int8x16_t v147 = v123;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v124))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v123))))))) < v121)
              {
                uint64_t v126 = *((void *)v11 + 4);
                if (*(_DWORD *)(v126 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v127 = *((float *)v11 + 54);
                uint64_t v128 = *(void *)(v126 + 8);
                if (v128)
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = *((void *)v11 + 7);
                  uint64_t v131 = 4 * *(void *)(v126 + 40);
                  do
                  {
                    float v127 = v127 + *(float *)(v130 + 4 * a3->u8[v129++]);
                    v130 += v131;
                  }
                  while (v128 != v129);
                }
                ++v17;
                if (v127 > v8)
                {
                  if (a4) {
                    uint64_t v132 = *(void *)(a4 + 8 * v120);
                  }
                  else {
                    uint64_t v132 = v120 | v125;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v127, v132);
                  int8x16_t v124 = v143;
                  int8x16_t v123 = v147;
                }
              }
              a3 += 2;
              ++v120;
            }
            while (v120 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            uint64_t v39 = 0;
            uint64_t v17 = 0;
            int v40 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v41 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v43 = v41[2];
            int8x16_t v42 = v41[3];
            int8x16_t v45 = *v41;
            int8x16_t v44 = v41[1];
            uint64_t v46 = v12 << 32;
            int8x16_t v142 = v43;
            int8x16_t v145 = v42;
            int8x16_t v140 = *v41;
            int8x16_t v141 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v42)))))))) < v40)
              {
                uint64_t v47 = *((void *)v11 + 4);
                if (*(_DWORD *)(v47 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v48 = *((float *)v11 + 54);
                uint64_t v49 = *(void *)(v47 + 8);
                if (v49)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = *((void *)v11 + 7);
                  uint64_t v52 = 4 * *(void *)(v47 + 40);
                  do
                  {
                    float v48 = v48 + *(float *)(v51 + 4 * a3->u8[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 > v8)
                {
                  if (a4) {
                    uint64_t v53 = *(void *)(a4 + 8 * v39);
                  }
                  else {
                    uint64_t v53 = v39 | v46;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v48, v53);
                  int8x16_t v43 = v142;
                  int8x16_t v42 = v145;
                  int8x16_t v45 = v140;
                  int8x16_t v44 = v141;
                }
              }
              a3 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v68 = 0;
            uint64_t v17 = 0;
            int v69 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v70 = **((_DWORD **)a1 + 20);
            uint64_t v71 = v12 << 32;
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                uint64_t v72 = *((void *)v11 + 4);
                if (*(_DWORD *)(v72 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v73 = *((float *)v11 + 54);
                uint64_t v74 = *(void *)(v72 + 8);
                if (v74)
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *((void *)v11 + 7);
                  uint64_t v77 = 4 * *(void *)(v72 + 40);
                  do
                  {
                    float v73 = v73 + *(float *)(v76 + 4 * a3->u8[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 > v8)
                {
                  if (a4) {
                    uint64_t v78 = *(void *)(a4 + 8 * v68);
                  }
                  else {
                    uint64_t v78 = v68 | v71;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            uint64_t v108 = 0;
            uint64_t v17 = 0;
            int v109 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v110 = **((void **)a1 + 20);
            uint64_t v111 = v12 << 32;
            do
            {
              uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v110));
              v112.i16[0] = vaddlv_u8(v112);
              if (v109 > v112.i32[0])
              {
                uint64_t v113 = *((void *)v11 + 4);
                if (*(_DWORD *)(v113 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v114 = *((float *)v11 + 54);
                uint64_t v115 = *(void *)(v113 + 8);
                if (v115)
                {
                  uint64_t v116 = 0;
                  uint64_t v117 = *((void *)v11 + 7);
                  uint64_t v118 = 4 * *(void *)(v113 + 40);
                  do
                  {
                    float v114 = v114 + *(float *)(v117 + 4 * a3->u8[v116++]);
                    v117 += v118;
                  }
                  while (v115 != v116);
                }
                ++v17;
                if (v114 > v8)
                {
                  if (a4) {
                    uint64_t v119 = *(void *)(a4 + 8 * v108);
                  }
                  else {
                    uint64_t v119 = v108 | v111;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v114, v119);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v108;
            }
            while (v108 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            uint64_t v20 = v12 << 32;
            int8x16_t v144 = v19;
            do
            {
              int32x2_t v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                uint64_t v22 = *((void *)v11 + 4);
                if (*(_DWORD *)(v22 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = *(void *)(v22 + 8);
                if (v24)
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = *((void *)v11 + 7);
                  uint64_t v27 = 4 * *(void *)(v22 + 40);
                  do
                  {
                    float v23 = v23 + *(float *)(v26 + 4 * a3->u8[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4) {
                    uint64_t v28 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v28 = v16 | v20;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v28);
                  int8x16_t v19 = v144;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          uint64_t v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v133;
          return;
      }
    }
    int v96 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v148 = *((void *)a1 + 20);
    int v149 = (int)v15 / 8;
    int v150 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = (int)v15;
      uint64_t v100 = v12 << 32;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v148, (const unsigned __int8 *)a3);
        if ((int)a1 < v96)
        {
          uint64_t v101 = *((void *)v11 + 4);
          if (*(_DWORD *)(v101 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v102 = *((float *)v11 + 54);
          uint64_t v103 = *(void *)(v101 + 8);
          if (v103)
          {
            uint64_t v104 = 0;
            uint64_t v105 = *((void *)v11 + 7);
            uint64_t v106 = 4 * *(void *)(v101 + 40);
            do
            {
              float v102 = v102 + *(float *)(v105 + 4 * a3->u8[v104++]);
              v105 += v106;
            }
            while (v103 != v104);
          }
          ++v98;
          if (v102 > v8)
          {
            if (a4) {
              uint64_t v107 = *(void *)(a4 + 8 * v97);
            }
            else {
              uint64_t v107 = v97 | v100;
            }
            a1 = faiss::RangeQueryResult::add(this, v102, v107);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      uint64_t v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v54 = 0;
        uint64_t v55 = v12 << 32;
        do
        {
          uint64_t v56 = *((void *)v11 + 4);
          if (*(_DWORD *)(v56 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v57 = *((float *)v11 + 54);
          uint64_t v58 = *(void *)(v56 + 8);
          if (v58)
          {
            uint64_t v59 = *((void *)v11 + 8);
            int8x16_t v60 = (uint64_t *)*((void *)v11 + 14);
            int8x16_t v61 = a3;
            do
            {
              unsigned int v63 = v61->u8[0];
              int8x16_t v61 = (int8x16_t *)((char *)v61 + 1);
              uint64_t v62 = v63;
              uint64_t v64 = *v60++;
              float v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(void *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          uint64_t v65 = *(void *)(v56 + 32);
          if (v57 > v8)
          {
            if (a4) {
              uint64_t v66 = *(void *)(a4 + 8 * v54);
            }
            else {
              uint64_t v66 = v54 | v55;
            }
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          a3 = (int8x16_t *)((char *)a3 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v148, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v148, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder8>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v12 << 32;
        do
        {
          uint64_t v31 = *((void *)v11 + 4);
          if (*(_DWORD *)(v31 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v32 = *((float *)v11 + 54);
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33)
          {
            uint64_t v34 = *((void *)v11 + 7);
            float v35 = a3;
            do
            {
              unsigned int v36 = v35->u8[0];
              float v35 = (int8x16_t *)((char *)v35 + 1);
              float v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(void *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          uint64_t v37 = *(void *)(v31 + 32);
          if (v32 > v8)
          {
            if (a4) {
              uint64_t v38 = *(void *)(a4 + 8 * v29);
            }
            else {
              uint64_t v38 = v29 | v30;
            }
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          a3 = (int8x16_t *)((char *)a3 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)a1 + 1) + 40) + 80))(*(void *)(*((void *)a1 + 1) + 40), v12, *((void *)a1 + 9));
      float v67 = faiss::fvec_inner_product(*((faiss **)v11 + 9), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (!a2) {
        return;
      }
    }
    else
    {
      float v67 = 0.0;
      if (!a2) {
        return;
      }
    }
    uint64_t v134 = 0;
    uint64_t v135 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v136 = *(void *)(*((void *)v11 + 4) + 32);
      float v137 = v67 + faiss::fvec_inner_product(*((faiss **)v11 + 10), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (v137 > v8)
      {
        if (a4) {
          uint64_t v138 = *(void *)(a4 + 8 * v134);
        }
        else {
          uint64_t v138 = v134 | v135;
        }
        faiss::RangeQueryResult::add(this, v137, v138);
      }
      a3 = (int8x16_t *)((char *)a3 + v136);
      ++v134;
    }
    while (a2 != v134);
  }
}

void sub_1DD01A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

uint64_t faiss::anonymous namespace'::QueryTables::QueryTables(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v4 = *(int *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = a2 + 240;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v5 = a1 + 104;
  *(void *)(a1 + 152) = 0;
  int v6 = (unint64_t *)(a1 + 152);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::vector<float>::resize(a1 + 80, 2 * *(void *)(a2 + 280) * *(void *)(a2 + 248) + 2 * v4);
  uint64_t v7 = *(void *)(a1 + 80);
  float v8 = *(void **)(a1 + 24);
  unint64_t v9 = v8[1];
  unint64_t v10 = v9 * v8[5];
  uint64_t v11 = v7 + 4 * v10;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = v11 + 4 * v10;
  uint64_t v13 = v12 + 4 * *(int *)(a1 + 16);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  LODWORD(v12) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 44) = v12;
  if (v12)
  {
    unint64_t v14 = v8[4];
    uint64_t v15 = *(void *)(a1 + 152);
    unint64_t v16 = *(void *)(a1 + 160) - v15;
    BOOL v17 = v14 >= v16;
    size_t v18 = v14 - v16;
    if (v18 != 0 && v17)
    {
      std::vector<unsigned char>::__append(v6, v18);
      unint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
    }
    else if (!v17)
    {
      *(void *)(a1 + 160) = v15 + v14;
    }
  }
  *(void *)(a1 + 176) = 0;
  std::vector<float const*>::resize(v5, v9);
  return a1;
}

void sub_1DD01A554(_Unwind_Exception *a1)
{
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 160) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<float const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<float const*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<float const*>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    unint64_t v16 = &v14[8 * a2];
    size_t v18 = (char *)*a1;
    BOOL v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      BOOL v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void faiss::anonymous namespace'::QueryTables::init_query(faiss::_anonymous_namespace_::QueryTables *this, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  *((void *)this + 16) = a2;
  if (!*((_DWORD *)this + 8))
  {
    uint64_t v8 = *((void *)this + 3);
    unint64_t v9 = (float *)*((void *)this + 6);
    goto LABEL_6;
  }
  if (!*((unsigned char *)this + 36))
  {
    faiss::ProductQuantizer::compute_distance_table(*((faiss::ProductQuantizer **)this + 3), a2, *((float **)this + 6));
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 10))
  {
    uint64_t v8 = *((void *)this + 3);
    unint64_t v9 = (float *)*((void *)this + 7);
LABEL_6:
    faiss::ProductQuantizer::compute_inner_prod_table(v8, a2, v9, a4, a5, a6);
  }
LABEL_8:
  if (!*((unsigned char *)this + 36) && *((_DWORD *)this + 11))
  {
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = (unsigned char *)*((void *)this + 19);
    faiss::ProductQuantizer::compute_code(v10, (uint64_t)a2, v11);
  }
}

float faiss::anonymous namespace'::QueryTables::precompute_list_tables(faiss::_anonymous_namespace_::QueryTables *this)
{
  uint64_t cycles = faiss::get_cycles(this);
  uint64_t v4 = cycles;
  float v5 = 0.0;
  if (!*((unsigned char *)this + 36)) {
    goto LABEL_30;
  }
  if (!*((_DWORD *)this + 8))
  {
    (*(void (**)(void, void, void))(**(void **)(*(void *)this + 40) + 80))(*(void *)(*(void *)this + 40), *((void *)this + 17), *((void *)this + 9));
    float v5 = faiss::fvec_inner_product(*((faiss **)this + 16), *((const float **)this + 9), *((int *)this + 4));
    if (!*((_DWORD *)this + 11)) {
      goto LABEL_30;
    }
    uint64_t v26 = *((unsigned int *)this + 4);
    if ((int)v26 <= 0)
    {
      uint64_t v30 = *((void *)this + 8);
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = *((void *)this + 16);
      uint64_t v29 = 4 * v26;
      uint64_t v30 = *((void *)this + 8);
      uint64_t v31 = *((void *)this + 9);
      do
      {
        *(float *)(v30 + v27) = *(float *)(v28 + v27) - *(float *)(v31 + v27);
        v27 += 4;
      }
      while (v29 != v27);
    }
LABEL_29:
    faiss::ProductQuantizer::compute_code(*((void *)this + 3), v30, *((unsigned char **)this + 19));
    goto LABEL_30;
  }
  int v6 = *((_DWORD *)this + 10);
  if ((v6 + 1) < 2)
  {
    float v32 = (uint64_t *)((char *)this + 64);
    (*(void (**)(void, void, void, void))(**(void **)(*(void *)this + 40) + 104))(*(void *)(*(void *)this + 40), *((void *)this + 16), *((void *)this + 8), *((void *)this + 17));
    faiss::ProductQuantizer::compute_distance_table(*((faiss::ProductQuantizer **)this + 3), *((const float **)this + 8), *((float **)this + 6));
    if (!*((_DWORD *)this + 11)) {
      goto LABEL_30;
    }
LABEL_27:
    uint64_t v30 = *v32;
    goto LABEL_29;
  }
  if (v6 == 1)
  {
    float v5 = *((float *)this + 36);
    uint64_t v33 = *(void *)(*((void *)this + 3) + 40) * *(void *)(*((void *)this + 3) + 8);
    uint64_t cycles = faiss::fvec_madd(v33, (float *)(*(void *)(*(void *)this + 424) + 4 * *((void *)this + 17) * v33), *((float **)this + 7), -2.0, *((float **)this + 6), v3);
    if (!*((_DWORD *)this + 11)) {
      goto LABEL_30;
    }
    float v32 = (uint64_t *)((char *)this + 64);
    (*(void (**)(void, void, void, void))(**(void **)(*(void *)this + 40) + 104))(*(void *)(*(void *)this + 40), *((void *)this + 16), *((void *)this + 8), *((void *)this + 17));
    goto LABEL_27;
  }
  if (v6 == 2)
  {
    uint64_t v7 = *(const void **)(*(void *)this + 40);
    if (!v7 {
      || (float v5 = *((float *)this + 36),
    }
    {
      memset(&v43, 0, sizeof(v43));
      int v35 = snprintf(0, 0, "Error: '%s' failed", "miq");
      std::string::resize(&v43, v35 + 1, 0);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v36 = &v43;
      }
      else {
        unsigned int v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v43.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v36, size, "Error: '%s' failed", "miq");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v43, "float faiss::(anonymous namespace)::QueryTables::precompute_list_tables_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 730);
    }
    uint64_t v9 = cycles;
    unint64_t v10 = *(void *)(cycles + 48);
    if (v10)
    {
      uint64_t v39 = v4;
      uint64_t v40 = cycles;
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v13 = *((void *)this + 3);
      unint64_t v14 = *(void *)(v13 + 8) / v10;
      uint64_t v15 = *((void *)this + 17);
      unint64_t v16 = (float *)*((void *)this + 6);
      BOOL v17 = (float *)*((void *)this + 7);
      uint64_t v18 = (int)v14;
      uint64_t v41 = (int)v14;
      int v42 = v14;
      int v19 = v14;
      do
      {
        uint64_t v20 = *(void *)(v9 + 56);
        uint64_t v21 = v11 * v18;
        uint64_t cycles = *(void *)(v13 + 40);
        uint64_t v22 = (v11 * v18 + (int)(v15 & ~(-1 << v20)) * *(void *)(v13 + 8)) * cycles;
        uint64_t v23 = *(void *)(*(void *)this + 424) + 4 * v22;
        if (*((_DWORD *)this + 11))
        {
          if (v21 < ++v11 * v18)
          {
            uint64_t v24 = v12;
            do
            {
              *(unsigned char *)(*((void *)this + 19) + v24) = faiss::fvec_madd_and_argmin(cycles, v23, v17, -2.0, v16, v8);
              uint64_t v13 = *((void *)this + 3);
              uint64_t cycles = *(void *)(v13 + 40);
              v23 += 4 * cycles;
              v16 += cycles;
              v17 += cycles;
              ++v24;
            }
            while (v24 != v19);
            uint64_t v9 = v40;
            uint64_t v18 = v41;
          }
        }
        else
        {
          uint64_t cycles = faiss::fvec_madd(cycles * v18, (float *)(*(void *)(*(void *)this + 424) + 4 * v22), v17, -2.0, v16, v8);
          uint64_t v18 = v41;
          uint64_t v13 = *((void *)this + 3);
          uint64_t v25 = *(void *)(v13 + 40) * v41;
          v16 += v25;
          v17 += v25;
          ++v11;
        }
        v15 >>= v20;
        v12 += v42;
        v19 += v42;
      }
      while (*(void *)(v9 + 48) > (unint64_t)v11);
      uint64_t v4 = v39;
    }
  }
LABEL_30:
  *((void *)this + 22) += faiss::get_cycles((faiss *)cycles) - v4;
  return v5;
}

void sub_1DD01ABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float faiss::anonymous namespace'::QueryTables::precompute_list_table_pointers(faiss::_anonymous_namespace_::QueryTables *this)
{
  uint64_t cycles = (faiss *)faiss::get_cycles(this);
  int v3 = cycles;
  if (*((unsigned char *)this + 36))
  {
    if (!*((_DWORD *)this + 8))
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v28, "not implemented");
      faiss::FaissException::FaissException(exception, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 667);
    }
    int v4 = *((_DWORD *)this + 10);
    if (v4 == 2)
    {
      uint64_t v11 = *(const void **)(*(void *)this + 40);
      if (!v11 {
        || (float v5 = *((float *)this + 36),
      }
      {
        memset(&v28, 0, sizeof(v28));
        int v22 = snprintf(0, 0, "Error: '%s' failed", "miq");
        std::string::resize(&v28, v22 + 1, 0);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v28;
        }
        else {
          uint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v28.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v23, size, "Error: '%s' failed", "miq");
        uint64_t v25 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v25, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 784);
      }
      unint64_t v12 = *((void *)cycles + 6);
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = *((void *)this + 3);
        unint64_t v16 = *(void *)(v15 + 8) / v12;
        uint64_t v17 = *((void *)this + 17);
        uint64_t v18 = *((void *)cycles + 7);
        do
        {
          uint64_t v19 = v14 + (int)v16;
          if ((int)v16 >= 1)
          {
            uint64_t cycles = (faiss *)(*(void *)(*(void *)this + 424)
                             + 4
                             * (v13 * (int)v16 + *(void *)(v15 + 8) * (int)(v17 & ~(-1 << v18)))
                             * *(void *)(v15 + 40));
            do
            {
              *(void *)(*((void *)this + 13) + 8 * v14) = cycles;
              uint64_t v15 = *((void *)this + 3);
              uint64_t cycles = (faiss *)((char *)cycles + 4 * *(void *)(v15 + 40));
              ++v14;
            }
            while (v14 < v19);
          }
          v17 >>= v18;
          ++v13;
          uint64_t v14 = v19;
        }
        while (v13 != v12);
      }
    }
    else
    {
      if (v4 != 1)
      {
        uint64_t v27 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v28, "need precomputed tables");
        faiss::FaissException::FaissException(v27, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 804);
      }
      float v5 = *((float *)this + 36);
      uint64_t v6 = *((void *)this + 3);
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = *(void *)(*(void *)this + 424) + 4 * *(void *)(v6 + 40) * v7 * *((void *)this + 17);
        do
        {
          *(void *)(*((void *)this + 13) + 8 * v8) = v9;
          uint64_t v10 = *((void *)this + 3);
          v9 += 4 * *(void *)(v10 + 40);
          ++v8;
        }
        while (*(void *)(v10 + 8) > v8);
      }
    }
    if (*((_DWORD *)this + 11))
    {
      uint64_t v26 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v28, "not implemented");
      faiss::FaissException::FaissException(v26, &v28, "float faiss::(anonymous namespace)::QueryTables::precompute_list_table_pointers_L2()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 808);
    }
  }
  else
  {
    float v5 = 0.0;
  }
  *((void *)this + 22) += faiss::get_cycles(cycles) - (void)v3;
  return v5;
}

void sub_1DD01AF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  float v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::distance_to_code(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 16) != 8) {
    faiss::decode<faiss::PQDecoder8>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = 4 * *(void *)(v2 + 40);
    do
    {
      unsigned int v7 = *a2++;
      float result = result + *(float *)(v5 + 4 * v7);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::scan_codes(unint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  unint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  int v15 = *(_DWORD *)(a1 + 224);
  uint64_t v201 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          uint64_t v74 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v74 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          uint64_t v18 = 0;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = a5 - 1;
          uint64_t v78 = *(void *)(v74 + 32);
          uint64_t v79 = *(void *)(a1 + 64);
          uint64_t v80 = a6 - 8;
          uint64_t v81 = *(void *)(v74 + 8);
LABEL_95:
          float v82 = *(float *)(v12 + 216);
          if (v81)
          {
            uint64_t v83 = 0;
            uint64_t v84 = v79;
            do
            {
              float v82 = v82
                  + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v83) + 4 * a3->u8[v83])
                          + (float)(*(float *)(v84 + 4 * a3->u8[v83]) * -2.0));
              ++v83;
              v84 += 4 * *(void *)(v74 + 40);
            }
            while (v81 != v83);
          }
          if (*a5 <= v82) {
            goto LABEL_114;
          }
          if (v201) {
            uint64_t v85 = *(void *)(v201 + 8 * v76);
          }
          else {
            uint64_t v85 = v76 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v86 = 1;
            goto LABEL_113;
          }
          uint64_t v87 = 3;
          unint64_t v88 = 2;
          uint64_t v89 = 1;
          while (1)
          {
            float v90 = v77[v88];
            if (v87 == a7 + 1 || (float v91 = v77[v87], v90 > v91))
            {
              if (v90 < v82) {
                goto LABEL_112;
              }
            }
            else
            {
              float v90 = v77[v87];
              unint64_t v88 = v87;
              if (v91 < v82)
              {
LABEL_112:
                uint64_t v86 = v89;
LABEL_113:
                v77[v86] = v82;
                *(void *)(v80 + 8 * v86) = v85;
                uint64_t v18 = ++v75;
LABEL_114:
                a3 = (int8x16_t *)((char *)a3 + v78);
                if (++v76 == a2) {
                  return v18;
                }
                goto LABEL_95;
              }
            }
            uint64_t v86 = v88;
            v77[v89] = v90;
            *(void *)(v80 + 8 * v89) = *(void *)(v80 + 8 * v88);
            v88 *= 2;
            uint64_t v87 = (2 * v86) | 1;
            uint64_t v89 = v86;
            if (v88 > a7) {
              goto LABEL_113;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v203, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v203, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder8>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v36 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          uint64_t v18 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = a5 - 1;
          uint64_t v40 = *(void *)(v36 + 32);
          uint64_t v41 = *(void *)(a1 + 56);
          uint64_t v42 = a6 - 8;
          uint64_t v43 = *(void *)(v36 + 8);
LABEL_41:
          float v44 = *(float *)(v12 + 216);
          if (v43)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v41;
            uint64_t v47 = v201;
            do
            {
              float v44 = v44 + *(float *)(v46 + 4 * a3->u8[v45++]);
              v46 += 4 * *(void *)(v36 + 40);
            }
            while (v43 != v45);
          }
          else
          {
            uint64_t v47 = v201;
          }
          if (*a5 <= v44) {
            goto LABEL_62;
          }
          if (v47) {
            uint64_t v48 = *(void *)(v47 + 8 * v38);
          }
          else {
            uint64_t v48 = v38 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v49 = 1;
            goto LABEL_61;
          }
          uint64_t v50 = 3;
          unint64_t v51 = 2;
          uint64_t v52 = 1;
          while (1)
          {
            float v53 = v39[v51];
            if (v50 == a7 + 1 || (float v54 = v39[v50], v53 > v54))
            {
              if (v53 < v44) {
                goto LABEL_60;
              }
            }
            else
            {
              float v53 = v39[v50];
              unint64_t v51 = v50;
              if (v54 < v44)
              {
LABEL_60:
                uint64_t v49 = v52;
LABEL_61:
                v39[v49] = v44;
                *(void *)(v42 + 8 * v49) = v48;
                uint64_t v18 = ++v37;
LABEL_62:
                a3 = (int8x16_t *)((char *)a3 + v40);
                if (++v38 == a2) {
                  return v18;
                }
                goto LABEL_41;
              }
            }
            uint64_t v49 = v51;
            v39[v52] = v53;
            *(void *)(v42 + 8 * v52) = *(void *)(v42 + 8 * v51);
            v51 *= 2;
            uint64_t v50 = (2 * v49) | 1;
            uint64_t v52 = v49;
            if (v51 > a7) {
              goto LABEL_61;
            }
          }
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 44))
      {
        uint64_t v92 = (const float **)(a1 + 72);
        (*(void (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 40) + 104))(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 136), *(void *)(a1 + 72), v13);
      }
      else
      {
        uint64_t v92 = (const float **)(a1 + 136);
      }
      if (a2)
      {
        uint64_t v18 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = *v92;
        uint64_t v198 = v13 << 32;
        uint64_t v184 = a5 - 1;
        uint64_t v185 = a6 - 8;
LABEL_250:
        faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
        uint64_t v186 = *(void *)(*(void *)(v12 + 32) + 32);
        float v187 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v183, *(int *)(v12 + 24));
        if (*a5 <= v187) {
          goto LABEL_266;
        }
        if (v201) {
          uint64_t v188 = *(void *)(v201 + 8 * v182);
        }
        else {
          uint64_t v188 = v182 | v198;
        }
        if (a7 < 2)
        {
          uint64_t v189 = 1;
          goto LABEL_265;
        }
        uint64_t v190 = 3;
        unint64_t v191 = 2;
        uint64_t v192 = 1;
        while (1)
        {
          float v193 = v184[v191];
          if (v190 == a7 + 1 || (float v194 = v184[v190], v193 > v194))
          {
            if (v193 < v187) {
              goto LABEL_264;
            }
          }
          else
          {
            float v193 = v184[v190];
            unint64_t v191 = v190;
            if (v194 < v187)
            {
LABEL_264:
              uint64_t v189 = v192;
LABEL_265:
              v184[v189] = v187;
              *(void *)(v185 + 8 * v189) = v188;
              ++v18;
LABEL_266:
              a3 = (int8x16_t *)((char *)a3 + v186);
              if (++v182 == a2) {
                return v18;
              }
              goto LABEL_250;
            }
          }
          uint64_t v189 = v191;
          v184[v192] = v193;
          *(void *)(v185 + 8 * v192) = *(void *)(v185 + 8 * v191);
          v191 *= 2;
          uint64_t v190 = (2 * v189) | 1;
          uint64_t v192 = v189;
          if (v191 > a7) {
            goto LABEL_265;
          }
        }
      }
    }
    return 0;
  }
  if (v15 != 2) {
  uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(void *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          uint64_t v21 = 0;
          __int32 v110 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v111 = *(int8x16_t **)(a1 + 160);
          int8x16_t v112 = *v111;
          __int32 v113 = v111[1].i32[0];
          float v114 = a5 - 1;
          uint64_t v115 = a6 - 8;
LABEL_145:
          int32x2_t v116 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v112))))));
          int8x8_t v117 = (int8x8_t)vadd_s32(vdup_lane_s32(v116, 1), v116);
          __int32 v118 = v117.i32[0];
          v117.i32[0] = a3[1].i32[0] ^ v113;
          uint8x8_t v119 = (uint8x8_t)vcnt_s8(v117);
          v119.i16[0] = vaddlv_u8(v119);
          a1 = v119.u32[0];
          if (v118 + v119.i32[0] >= v110) {
            goto LABEL_166;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v120 = *(float *)(v12 + 216);
          uint64_t v121 = *(void *)(v16 + 8);
          if (v121)
          {
            a1 = 0;
            uint64_t v122 = *(void *)(v12 + 56);
            do
            {
              float v120 = v120 + *(float *)(v122 + 4 * a3->u8[a1++]);
              v122 += 4 * *(void *)(v16 + 40);
            }
            while (v121 != a1);
          }
          ++v21;
          if (*a5 <= v120) {
            goto LABEL_166;
          }
          if (a4) {
            uint64_t v123 = *(void *)(a4 + 8 * v109);
          }
          else {
            uint64_t v123 = v109 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v124 = 1;
            goto LABEL_165;
          }
          uint64_t v125 = 3;
          a1 = 2;
          uint64_t v126 = 1;
          while (1)
          {
            float v127 = v114[a1];
            if (v125 == a7 + 1 || (float v128 = v114[v125], v127 > v128))
            {
              if (v127 < v120) {
                goto LABEL_164;
              }
            }
            else
            {
              float v127 = v114[v125];
              a1 = v125;
              if (v128 < v120)
              {
LABEL_164:
                uint64_t v124 = v126;
LABEL_165:
                v114[v124] = v120;
                *(void *)(v115 + 8 * v124) = v123;
                uint64_t v18 = ++v108;
LABEL_166:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v109 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_145;
              }
            }
            uint64_t v124 = a1;
            v114[v126] = v127;
            *(void *)(v115 + 8 * v126) = *(void *)(v115 + 8 * a1);
            a1 *= 2;
            uint64_t v125 = (2 * v124) | 1;
            uint64_t v126 = v124;
            if (a1 > a7) {
              goto LABEL_165;
            }
          }
        }
        goto LABEL_243;
      case 32:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v163 = 0;
          uint64_t v164 = 0;
          uint64_t v21 = 0;
          int v165 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v166 = *(int8x16_t **)(a1 + 160);
          int8x16_t v168 = *v166;
          int8x16_t v167 = v166[1];
          uint64_t v169 = a5 - 1;
          uint64_t v170 = a6 - 8;
LABEL_220:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v168))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v167))))))) >= v165)goto LABEL_241; {
          if (*(_DWORD *)(v16 + 16) != 8)
          }
            faiss::decode<faiss::PQDecoder8>();
          float v171 = *(float *)(v12 + 216);
          uint64_t v172 = *(void *)(v16 + 8);
          if (v172)
          {
            uint64_t v173 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v171 = v171 + *(float *)(a1 + 4 * a3->u8[v173++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v172 != v173);
          }
          ++v21;
          if (*a5 <= v171) {
            goto LABEL_241;
          }
          if (a4) {
            uint64_t v174 = *(void *)(a4 + 8 * v164);
          }
          else {
            uint64_t v174 = v164 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v175 = 1;
            goto LABEL_240;
          }
          uint64_t v176 = 3;
          unint64_t v177 = 2;
          a1 = 1;
          while (1)
          {
            float v178 = v169[v177];
            if (v176 == a7 + 1 || (float v179 = v169[v176], v178 > v179))
            {
              if (v178 < v171) {
                goto LABEL_239;
              }
            }
            else
            {
              float v178 = v169[v176];
              unint64_t v177 = v176;
              if (v179 < v171)
              {
LABEL_239:
                uint64_t v175 = a1;
LABEL_240:
                v169[v175] = v171;
                *(void *)(v170 + 8 * v175) = v174;
                uint64_t v18 = ++v163;
LABEL_241:
                a3 += 2;
                if (++v164 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_220;
              }
            }
            uint64_t v175 = v177;
            v169[a1] = v178;
            *(void *)(v170 + 8 * a1) = *(void *)(v170 + 8 * v177);
            v177 *= 2;
            uint64_t v176 = (2 * v175) | 1;
            a1 = v175;
            if (v177 > a7) {
              goto LABEL_240;
            }
          }
        }
        goto LABEL_243;
      case 64:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v21 = 0;
          int v57 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v58 = *(int8x16_t **)(a1 + 160);
          int8x16_t v60 = v58[2];
          int8x16_t v59 = v58[3];
          int8x16_t v62 = *v58;
          int8x16_t v61 = v58[1];
          unsigned int v63 = a5 - 1;
          uint64_t v64 = a6 - 8;
LABEL_69:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v62))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v61)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v59)))))))) >= v57)goto LABEL_90; {
          if (*(_DWORD *)(v16 + 16) != 8)
          }
            faiss::decode<faiss::PQDecoder8>();
          float v65 = *(float *)(v12 + 216);
          uint64_t v66 = *(void *)(v16 + 8);
          if (v66)
          {
            uint64_t v67 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v65 = v65 + *(float *)(a1 + 4 * a3->u8[v67++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v66 != v67);
          }
          ++v21;
          if (*a5 <= v65) {
            goto LABEL_90;
          }
          if (a4) {
            uint64_t v68 = *(void *)(a4 + 8 * v56);
          }
          else {
            uint64_t v68 = v56 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v69 = 1;
            goto LABEL_89;
          }
          uint64_t v70 = 3;
          unint64_t v71 = 2;
          a1 = 1;
          while (1)
          {
            float v72 = v63[v71];
            if (v70 == a7 + 1 || (float v73 = v63[v70], v72 > v73))
            {
              if (v72 < v65) {
                goto LABEL_88;
              }
            }
            else
            {
              float v72 = v63[v70];
              unint64_t v71 = v70;
              if (v73 < v65)
              {
LABEL_88:
                uint64_t v69 = a1;
LABEL_89:
                v63[v69] = v65;
                *(void *)(v64 + 8 * v69) = v68;
                uint64_t v18 = ++v55;
LABEL_90:
                a3 += 4;
                if (++v56 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_69;
              }
            }
            uint64_t v69 = v71;
            v63[a1] = v72;
            *(void *)(v64 + 8 * a1) = *(void *)(v64 + 8 * v71);
            v71 *= 2;
            uint64_t v70 = (2 * v69) | 1;
            a1 = v69;
            if (v71 > a7) {
              goto LABEL_89;
            }
          }
        }
        goto LABEL_243;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          uint64_t v21 = 0;
          int v95 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int v96 = **(_DWORD **)(a1 + 160);
          uint64_t v97 = a5 - 1;
          uint64_t v98 = a6 - 8;
LABEL_120:
          a8.i32[0] = a3->i32[0] ^ v96;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v95) {
            goto LABEL_141;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v99 = *(float *)(v12 + 216);
          uint64_t v100 = *(void *)(v16 + 8);
          if (v100)
          {
            a1 = 0;
            uint64_t v101 = *(void *)(v12 + 56);
            do
            {
              float v99 = v99 + *(float *)(v101 + 4 * a3->u8[a1++]);
              v101 += 4 * *(void *)(v16 + 40);
            }
            while (v100 != a1);
          }
          ++v21;
          if (*a5 <= v99) {
            goto LABEL_141;
          }
          if (a4) {
            uint64_t v102 = *(void *)(a4 + 8 * v94);
          }
          else {
            uint64_t v102 = v94 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v103 = 1;
            goto LABEL_140;
          }
          uint64_t v104 = 3;
          a1 = 2;
          uint64_t v105 = 1;
          while (1)
          {
            float v106 = v97[a1];
            if (v104 == a7 + 1 || (float v107 = v97[v104], v106 > v107))
            {
              if (v106 < v99) {
                goto LABEL_139;
              }
            }
            else
            {
              float v106 = v97[v104];
              a1 = v104;
              if (v107 < v99)
              {
LABEL_139:
                uint64_t v103 = v105;
LABEL_140:
                v97[v103] = v99;
                *(void *)(v98 + 8 * v103) = v102;
                uint64_t v18 = ++v93;
LABEL_141:
                a3 = (int8x16_t *)((char *)a3 + 4);
                if (++v94 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_120;
              }
            }
            uint64_t v103 = a1;
            v97[v105] = v106;
            *(void *)(v98 + 8 * v105) = *(void *)(v98 + 8 * a1);
            a1 *= 2;
            uint64_t v104 = (2 * v103) | 1;
            uint64_t v105 = v103;
            if (a1 > a7) {
              goto LABEL_140;
            }
          }
        }
        goto LABEL_243;
      case 8:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v21 = 0;
          int v149 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v150 = **(void **)(a1 + 160);
          uint64_t v151 = a5 - 1;
          uint64_t v152 = a6 - 8;
LABEL_195:
          uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v150));
          v153.i16[0] = vaddlv_u8(v153);
          if (v149 <= v153.i32[0]) {
            goto LABEL_216;
          }
          if (*(_DWORD *)(v16 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v154 = *(float *)(v12 + 216);
          uint64_t v155 = *(void *)(v16 + 8);
          if (v155)
          {
            a1 = 0;
            uint64_t v156 = *(void *)(v12 + 56);
            do
            {
              float v154 = v154 + *(float *)(v156 + 4 * a3->u8[a1++]);
              v156 += 4 * *(void *)(v16 + 40);
            }
            while (v155 != a1);
          }
          ++v21;
          if (*a5 <= v154) {
            goto LABEL_216;
          }
          if (a4) {
            uint64_t v157 = *(void *)(a4 + 8 * v148);
          }
          else {
            uint64_t v157 = v148 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v158 = 1;
            goto LABEL_215;
          }
          uint64_t v159 = 3;
          a1 = 2;
          uint64_t v160 = 1;
          while (1)
          {
            float v161 = v151[a1];
            if (v159 == a7 + 1 || (float v162 = v151[v159], v161 > v162))
            {
              if (v161 < v154) {
                goto LABEL_214;
              }
            }
            else
            {
              float v161 = v151[v159];
              a1 = v159;
              if (v162 < v154)
              {
LABEL_214:
                uint64_t v158 = v160;
LABEL_215:
                v151[v158] = v154;
                *(void *)(v152 + 8 * v158) = v157;
                uint64_t v18 = ++v147;
LABEL_216:
                a3 = (int8x16_t *)((char *)a3 + 8);
                if (++v148 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_195;
              }
            }
            uint64_t v158 = a1;
            v151[v160] = v161;
            *(void *)(v152 + 8 * v160) = *(void *)(v152 + 8 * a1);
            a1 *= 2;
            uint64_t v159 = (2 * v158) | 1;
            uint64_t v160 = v158;
            if (a1 > a7) {
              goto LABEL_215;
            }
          }
        }
        goto LABEL_243;
      case 16:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          __int32 v22 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int8x16_t v23 = *(int8x16_t *)*(void *)(a1 + 160);
          uint64_t v24 = a5 - 1;
          uint64_t v25 = a6 - 8;
          while (1)
          {
            int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22) {
              goto LABEL_33;
            }
            if (*(_DWORD *)(v16 + 16) != 8) {
              faiss::decode<faiss::PQDecoder8>();
            }
            float v27 = *(float *)(v12 + 216);
            uint64_t v28 = *(void *)(v16 + 8);
            if (v28)
            {
              uint64_t v29 = 0;
              a1 = *(void *)(v12 + 56);
              do
              {
                float v27 = v27 + *(float *)(a1 + 4 * a3->u8[v29++]);
                a1 += 4 * *(void *)(v16 + 40);
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 <= v27) {
              goto LABEL_33;
            }
            if (a4) {
              uint64_t v30 = *(void *)(a4 + 8 * v20);
            }
            else {
              uint64_t v30 = v20 | (v13 << 32);
            }
            if (a7 < 2)
            {
              uint64_t v31 = 1;
              goto LABEL_32;
            }
            uint64_t v32 = 3;
            unint64_t v33 = 2;
            a1 = 1;
            while (1)
            {
              float v34 = v24[v33];
              if (v32 != a7 + 1)
              {
                float v35 = v24[v32];
                if (v34 <= v35) {
                  break;
                }
              }
              if (v34 < v27) {
                goto LABEL_31;
              }
LABEL_29:
              uint64_t v31 = v33;
              v24[a1] = v34;
              *(void *)(v25 + 8 * a1) = *(void *)(v25 + 8 * v33);
              v33 *= 2;
              uint64_t v32 = (2 * v31) | 1;
              a1 = v31;
              if (v33 > a7) {
                goto LABEL_32;
              }
            }
            float v34 = v24[v32];
            unint64_t v33 = v32;
            if (v35 >= v27) {
              goto LABEL_29;
            }
LABEL_31:
            uint64_t v31 = a1;
LABEL_32:
            v24[v31] = v27;
            *(void *)(v25 + 8 * v31) = v30;
            uint64_t v18 = ++v19;
LABEL_33:
            ++a3;
            if (++v20 == a2)
            {
LABEL_244:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              uint64_t v180 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_245;
            }
          }
        }
LABEL_243:
        uint64_t v21 = 0;
        goto LABEL_244;
    }
  }
  int v200 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v203 = *(void *)(a1 + 160);
  int v204 = (int)v17 / 8;
  int v205 = v17 - (v16 & 0xFFFFFFF8);
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v130 = 0;
    goto LABEL_270;
  }
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v196 = v13 << 32;
  uint64_t v197 = (int)v17;
  uint64_t v131 = a5 - 1;
  uint64_t v132 = a6 - 8;
  unint64_t v133 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v203, (const unsigned __int8 *)a3);
    if ((int)a1 >= v200) {
      goto LABEL_191;
    }
    uint64_t v134 = *(void *)(v12 + 32);
    if (*(_DWORD *)(v134 + 16) != 8) {
      faiss::decode<faiss::PQDecoder8>();
    }
    float v135 = *(float *)(v12 + 216);
    uint64_t v136 = *(void *)(v134 + 8);
    if (v136)
    {
      uint64_t v137 = 0;
      uint64_t v138 = *(void *)(v12 + 56);
      uint64_t v139 = 4 * *(void *)(v134 + 40);
      do
      {
        float v135 = v135 + *(float *)(v138 + 4 * a3->u8[v137++]);
        v138 += v139;
      }
      while (v136 != v137);
    }
    ++v130;
    if (*a5 <= v135) {
      goto LABEL_191;
    }
    if (v201) {
      uint64_t v140 = *(void *)(v201 + 8 * v129);
    }
    else {
      uint64_t v140 = v129 | v196;
    }
    if (a7 < 2)
    {
      uint64_t v141 = 1;
      goto LABEL_190;
    }
    uint64_t v142 = 3;
    unint64_t v143 = 2;
    uint64_t v144 = 1;
    while (1)
    {
      float v145 = v131[v143];
      if (v142 != v133)
      {
        float v146 = v131[v142];
        if (v145 <= v146) {
          break;
        }
      }
      if (v145 < v135) {
        goto LABEL_189;
      }
LABEL_187:
      uint64_t v141 = v143;
      v131[v144] = v145;
      *(void *)(v132 + 8 * v144) = *(void *)(v132 + 8 * v143);
      v143 *= 2;
      uint64_t v142 = (2 * v141) | 1;
      uint64_t v144 = v141;
      if (v143 > a7) {
        goto LABEL_190;
      }
    }
    float v145 = v131[v142];
    unint64_t v143 = v142;
    if (v146 >= v135) {
      goto LABEL_187;
    }
LABEL_189:
    uint64_t v141 = v144;
LABEL_190:
    v131[v141] = v135;
    *(void *)(v132 + 8 * v141) = v140;
    ++v18;
LABEL_191:
    a3 = (int8x16_t *)((char *)a3 + v197);
    ++v129;
  }
  while (v129 != a2);
LABEL_270:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  uint64_t v180 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v130;
LABEL_245:
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v180;
  return v18;
}

void sub_1DD01C110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  uint64_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v79 = 0;
            uint64_t v17 = 0;
            __int32 v80 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v81 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v82 = *v81;
            __int32 v83 = v81[1].i32[0];
            uint64_t v84 = v12 << 32;
            int8x16_t v147 = *v81;
            do
            {
              int32x2_t v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v82))))));
              int8x8_t v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              __int32 v87 = v86.i32[0];
              v86.i32[0] = a3[1].i32[0] ^ v83;
              uint8x8_t v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                uint64_t v89 = *((void *)v11 + 4);
                if (*(_DWORD *)(v89 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v90 = *((float *)v11 + 54);
                uint64_t v91 = *(void *)(v89 + 8);
                if (v91)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = *((void *)v11 + 7);
                  uint64_t v94 = 4 * *(void *)(v89 + 40);
                  do
                  {
                    float v90 = v90 + *(float *)(v93 + 4 * a3->u8[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 < v8)
                {
                  if (a4) {
                    uint64_t v95 = *(void *)(a4 + 8 * v79);
                  }
                  else {
                    uint64_t v95 = v79 | v84;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v90, v95);
                  int8x16_t v82 = v147;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            uint64_t v120 = 0;
            uint64_t v17 = 0;
            int v121 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v122 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v124 = *v122;
            int8x16_t v123 = v122[1];
            uint64_t v125 = v12 << 32;
            int8x16_t v144 = *v122;
            int8x16_t v148 = v123;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v124))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v123))))))) < v121)
              {
                uint64_t v126 = *((void *)v11 + 4);
                if (*(_DWORD *)(v126 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v127 = *((float *)v11 + 54);
                uint64_t v128 = *(void *)(v126 + 8);
                if (v128)
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = *((void *)v11 + 7);
                  uint64_t v131 = 4 * *(void *)(v126 + 40);
                  do
                  {
                    float v127 = v127 + *(float *)(v130 + 4 * a3->u8[v129++]);
                    v130 += v131;
                  }
                  while (v128 != v129);
                }
                ++v17;
                if (v127 < v8)
                {
                  if (a4) {
                    uint64_t v132 = *(void *)(a4 + 8 * v120);
                  }
                  else {
                    uint64_t v132 = v120 | v125;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v127, v132);
                  int8x16_t v124 = v144;
                  int8x16_t v123 = v148;
                }
              }
              a3 += 2;
              ++v120;
            }
            while (v120 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            uint64_t v39 = 0;
            uint64_t v17 = 0;
            int v40 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v41 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v43 = v41[2];
            int8x16_t v42 = v41[3];
            int8x16_t v45 = *v41;
            int8x16_t v44 = v41[1];
            uint64_t v46 = v12 << 32;
            int8x16_t v143 = v43;
            int8x16_t v146 = v42;
            int8x16_t v141 = *v41;
            int8x16_t v142 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v42)))))))) < v40)
              {
                uint64_t v47 = *((void *)v11 + 4);
                if (*(_DWORD *)(v47 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v48 = *((float *)v11 + 54);
                uint64_t v49 = *(void *)(v47 + 8);
                if (v49)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = *((void *)v11 + 7);
                  uint64_t v52 = 4 * *(void *)(v47 + 40);
                  do
                  {
                    float v48 = v48 + *(float *)(v51 + 4 * a3->u8[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 < v8)
                {
                  if (a4) {
                    uint64_t v53 = *(void *)(a4 + 8 * v39);
                  }
                  else {
                    uint64_t v53 = v39 | v46;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v48, v53);
                  int8x16_t v43 = v143;
                  int8x16_t v42 = v146;
                  int8x16_t v45 = v141;
                  int8x16_t v44 = v142;
                }
              }
              a3 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v68 = 0;
            uint64_t v17 = 0;
            int v69 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v70 = **((_DWORD **)a1 + 20);
            uint64_t v71 = v12 << 32;
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                uint64_t v72 = *((void *)v11 + 4);
                if (*(_DWORD *)(v72 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v73 = *((float *)v11 + 54);
                uint64_t v74 = *(void *)(v72 + 8);
                if (v74)
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *((void *)v11 + 7);
                  uint64_t v77 = 4 * *(void *)(v72 + 40);
                  do
                  {
                    float v73 = v73 + *(float *)(v76 + 4 * a3->u8[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 < v8)
                {
                  if (a4) {
                    uint64_t v78 = *(void *)(a4 + 8 * v68);
                  }
                  else {
                    uint64_t v78 = v68 | v71;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            uint64_t v108 = 0;
            uint64_t v17 = 0;
            int v109 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v110 = **((void **)a1 + 20);
            uint64_t v111 = v12 << 32;
            do
            {
              uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v110));
              v112.i16[0] = vaddlv_u8(v112);
              if (v109 > v112.i32[0])
              {
                uint64_t v113 = *((void *)v11 + 4);
                if (*(_DWORD *)(v113 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v114 = *((float *)v11 + 54);
                uint64_t v115 = *(void *)(v113 + 8);
                if (v115)
                {
                  uint64_t v116 = 0;
                  uint64_t v117 = *((void *)v11 + 7);
                  uint64_t v118 = 4 * *(void *)(v113 + 40);
                  do
                  {
                    float v114 = v114 + *(float *)(v117 + 4 * a3->u8[v116++]);
                    v117 += v118;
                  }
                  while (v115 != v116);
                }
                ++v17;
                if (v114 < v8)
                {
                  if (a4) {
                    uint64_t v119 = *(void *)(a4 + 8 * v108);
                  }
                  else {
                    uint64_t v119 = v108 | v111;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v114, v119);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v108;
            }
            while (v108 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            uint64_t v20 = v12 << 32;
            int8x16_t v145 = v19;
            do
            {
              int32x2_t v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                uint64_t v22 = *((void *)v11 + 4);
                if (*(_DWORD *)(v22 + 16) != 8) {
                  faiss::decode<faiss::PQDecoder8>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = *(void *)(v22 + 8);
                if (v24)
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = *((void *)v11 + 7);
                  uint64_t v27 = 4 * *(void *)(v22 + 40);
                  do
                  {
                    float v23 = v23 + *(float *)(v26 + 4 * a3->u8[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4) {
                    uint64_t v28 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v28 = v16 | v20;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v28);
                  int8x16_t v19 = v145;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          uint64_t v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v133;
          return;
      }
    }
    int v96 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v149 = *((void *)a1 + 20);
    int v150 = (int)v15 / 8;
    int v151 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = (int)v15;
      uint64_t v100 = v12 << 32;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v149, (const unsigned __int8 *)a3);
        if ((int)a1 < v96)
        {
          uint64_t v101 = *((void *)v11 + 4);
          if (*(_DWORD *)(v101 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v102 = *((float *)v11 + 54);
          uint64_t v103 = *(void *)(v101 + 8);
          if (v103)
          {
            uint64_t v104 = 0;
            uint64_t v105 = *((void *)v11 + 7);
            uint64_t v106 = 4 * *(void *)(v101 + 40);
            do
            {
              float v102 = v102 + *(float *)(v105 + 4 * a3->u8[v104++]);
              v105 += v106;
            }
            while (v103 != v104);
          }
          ++v98;
          if (v102 < v8)
          {
            if (a4) {
              uint64_t v107 = *(void *)(a4 + 8 * v97);
            }
            else {
              uint64_t v107 = v97 | v100;
            }
            a1 = faiss::RangeQueryResult::add(this, v102, v107);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      uint64_t v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v54 = 0;
        uint64_t v55 = v12 << 32;
        do
        {
          uint64_t v56 = *((void *)v11 + 4);
          if (*(_DWORD *)(v56 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v57 = *((float *)v11 + 54);
          uint64_t v58 = *(void *)(v56 + 8);
          if (v58)
          {
            uint64_t v59 = *((void *)v11 + 8);
            int8x16_t v60 = (uint64_t *)*((void *)v11 + 14);
            int8x16_t v61 = a3;
            do
            {
              unsigned int v63 = v61->u8[0];
              int8x16_t v61 = (int8x16_t *)((char *)v61 + 1);
              uint64_t v62 = v63;
              uint64_t v64 = *v60++;
              float v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(void *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          uint64_t v65 = *(void *)(v56 + 32);
          if (v57 < v8)
          {
            if (a4) {
              uint64_t v66 = *(void *)(a4 + 8 * v54);
            }
            else {
              uint64_t v66 = v54 | v55;
            }
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          a3 = (int8x16_t *)((char *)a3 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v149, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v149, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder8>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v12 << 32;
        do
        {
          uint64_t v31 = *((void *)v11 + 4);
          if (*(_DWORD *)(v31 + 16) != 8) {
            faiss::decode<faiss::PQDecoder8>();
          }
          float v32 = *((float *)v11 + 54);
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33)
          {
            uint64_t v34 = *((void *)v11 + 7);
            float v35 = a3;
            do
            {
              unsigned int v36 = v35->u8[0];
              float v35 = (int8x16_t *)((char *)v35 + 1);
              float v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(void *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          uint64_t v37 = *(void *)(v31 + 32);
          if (v32 < v8)
          {
            if (a4) {
              uint64_t v38 = *(void *)(a4 + 8 * v29);
            }
            else {
              uint64_t v38 = v29 | v30;
            }
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          a3 = (int8x16_t *)((char *)a3 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      uint64_t v67 = (const float **)((char *)a1 + 72);
      (*(void (**)(void, void, void, uint64_t))(**(void **)(*((void *)a1 + 1) + 40) + 104))(*(void *)(*((void *)a1 + 1) + 40), *((void *)a1 + 17), *((void *)a1 + 9), v12);
      if (!a2) {
        return;
      }
    }
    else
    {
      uint64_t v67 = (const float **)((char *)a1 + 136);
      if (!a2) {
        return;
      }
    }
    uint64_t v134 = 0;
    float v135 = *v67;
    uint64_t v136 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v137 = *(void *)(*((void *)v11 + 4) + 32);
      float v138 = faiss::fvec_L2sqr(*((faiss **)v11 + 10), v135, *((int *)v11 + 6));
      if (v138 < v8)
      {
        if (a4) {
          uint64_t v139 = *(void *)(a4 + 8 * v134);
        }
        else {
          uint64_t v139 = v134 | v136;
        }
        faiss::RangeQueryResult::add(this, v138, v139);
      }
      a3 = (int8x16_t *)((char *)a3 + v137);
      ++v134;
    }
    while (a2 != v134);
  }
}

void sub_1DD01CAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder8>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  uint64_t v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::distance_to_code(uint64_t a1, unsigned __int16 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 16) != 16) {
    faiss::decode<faiss::PQDecoder16>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = 4 * *(void *)(v2 + 40);
    do
    {
      unsigned int v7 = *a2++;
      float result = result + *(float *)(v5 + 4 * v7);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::scan_codes(unint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  unint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  int v15 = *(_DWORD *)(a1 + 224);
  uint64_t v196 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          uint64_t v73 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v73 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          uint64_t v18 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          uint64_t v76 = a5 - 1;
          uint64_t v77 = *(void *)(v73 + 32);
          uint64_t v78 = *(void *)(a1 + 64);
          uint64_t v79 = a6 - 8;
          uint64_t v80 = *(void *)(v73 + 8);
LABEL_93:
          float v81 = *(float *)(v12 + 216);
          if (v80)
          {
            uint64_t v82 = 0;
            uint64_t v83 = v78;
            do
            {
              float v81 = v81
                  + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v82) + 4 * a3->u16[v82])
                          + (float)(*(float *)(v83 + 4 * a3->u16[v82]) * -2.0));
              ++v82;
              v83 += 4 * *(void *)(v73 + 40);
            }
            while (v80 != v82);
          }
          if (*a5 >= v81) {
            goto LABEL_112;
          }
          if (a4) {
            uint64_t v84 = *(void *)(a4 + 8 * v75);
          }
          else {
            uint64_t v84 = v75 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v85 = 1;
            goto LABEL_111;
          }
          uint64_t v86 = 3;
          unint64_t v87 = 2;
          uint64_t v88 = 1;
          while (1)
          {
            float v89 = v76[v87];
            if (v86 == a7 + 1 || (float v90 = v76[v86], v89 < v90))
            {
              if (v89 > v81) {
                goto LABEL_110;
              }
            }
            else
            {
              float v89 = v76[v86];
              unint64_t v87 = v86;
              if (v90 > v81)
              {
LABEL_110:
                uint64_t v85 = v88;
LABEL_111:
                v76[v85] = v81;
                *(void *)(v79 + 8 * v85) = v84;
                uint64_t v18 = ++v74;
LABEL_112:
                a3 = (int8x16_t *)((char *)a3 + v77);
                if (++v75 == a2) {
                  return v18;
                }
                goto LABEL_93;
              }
            }
            uint64_t v85 = v87;
            v76[v88] = v89;
            *(void *)(v79 + 8 * v88) = *(void *)(v79 + 8 * v87);
            v87 *= 2;
            uint64_t v86 = (2 * v85) | 1;
            uint64_t v88 = v85;
            if (v87 > a7) {
              goto LABEL_111;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v198, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v198, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder16>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v36 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          uint64_t v18 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = a5 - 1;
          uint64_t v40 = *(void *)(v36 + 32);
          uint64_t v41 = *(void *)(a1 + 56);
          uint64_t v42 = a6 - 8;
          uint64_t v43 = *(void *)(v36 + 8);
LABEL_41:
          float v44 = *(float *)(v12 + 216);
          if (v43)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v41;
            do
            {
              float v44 = v44 + *(float *)(v46 + 4 * a3->u16[v45++]);
              v46 += 4 * *(void *)(v36 + 40);
            }
            while (v43 != v45);
          }
          if (*a5 >= v44) {
            goto LABEL_60;
          }
          if (a4) {
            uint64_t v47 = *(void *)(a4 + 8 * v38);
          }
          else {
            uint64_t v47 = v38 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v48 = 1;
            goto LABEL_59;
          }
          uint64_t v49 = 3;
          unint64_t v50 = 2;
          uint64_t v51 = 1;
          while (1)
          {
            float v52 = v39[v50];
            if (v49 == a7 + 1 || (float v53 = v39[v49], v52 < v53))
            {
              if (v52 > v44) {
                goto LABEL_58;
              }
            }
            else
            {
              float v52 = v39[v49];
              unint64_t v50 = v49;
              if (v53 > v44)
              {
LABEL_58:
                uint64_t v48 = v51;
LABEL_59:
                v39[v48] = v44;
                *(void *)(v42 + 8 * v48) = v47;
                uint64_t v18 = ++v37;
LABEL_60:
                a3 = (int8x16_t *)((char *)a3 + v40);
                if (++v38 == a2) {
                  return v18;
                }
                goto LABEL_41;
              }
            }
            uint64_t v48 = v50;
            v39[v51] = v52;
            *(void *)(v42 + 8 * v51) = *(void *)(v42 + 8 * v50);
            v50 *= 2;
            uint64_t v49 = (2 * v48) | 1;
            uint64_t v51 = v48;
            if (v50 > a7) {
              goto LABEL_59;
            }
          }
        }
      }
      return 0;
    }
    if (*(unsigned char *)(a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 40) + 80))(*(void *)(*(void *)(a1 + 8) + 40), v13, *(void *)(a1 + 72));
      float v91 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!a2) {
        return 0;
      }
    }
    else
    {
      float v91 = 0.0;
      if (!a2) {
        return 0;
      }
    }
    uint64_t v18 = 0;
    uint64_t v92 = 0;
    uint64_t v194 = v13 << 32;
    uint64_t v93 = a5 - 1;
    uint64_t v94 = a6 - 8;
LABEL_117:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
    uint64_t v95 = *(void *)(*(void *)(v12 + 32) + 32);
    float v96 = v91 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v96) {
      goto LABEL_133;
    }
    if (v196) {
      uint64_t v97 = *(void *)(v196 + 8 * v92);
    }
    else {
      uint64_t v97 = v92 | v194;
    }
    if (a7 < 2)
    {
      uint64_t v98 = 1;
      goto LABEL_132;
    }
    uint64_t v99 = 3;
    unint64_t v100 = 2;
    uint64_t v101 = 1;
    while (1)
    {
      float v102 = v93[v100];
      if (v99 == a7 + 1 || (float v103 = v93[v99], v102 < v103))
      {
        if (v102 > v96) {
          goto LABEL_131;
        }
      }
      else
      {
        float v102 = v93[v99];
        unint64_t v100 = v99;
        if (v103 > v96)
        {
LABEL_131:
          uint64_t v98 = v101;
LABEL_132:
          v93[v98] = v96;
          *(void *)(v94 + 8 * v98) = v97;
          ++v18;
LABEL_133:
          a3 = (int8x16_t *)((char *)a3 + v95);
          if (++v92 == a2) {
            return v18;
          }
          goto LABEL_117;
        }
      }
      uint64_t v98 = v100;
      v93[v101] = v102;
      *(void *)(v94 + 8 * v101) = *(void *)(v94 + 8 * v100);
      v100 *= 2;
      uint64_t v99 = (2 * v98) | 1;
      uint64_t v101 = v98;
      if (v100 > a7) {
        goto LABEL_132;
      }
    }
  }
  if (v15 != 2) {
  uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(void *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          uint64_t v21 = 0;
          __int32 v121 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v122 = *(int8x16_t **)(a1 + 160);
          int8x16_t v123 = *v122;
          __int32 v124 = v122[1].i32[0];
          uint64_t v125 = a5 - 1;
          uint64_t v126 = a6 - 8;
LABEL_162:
          int32x2_t v127 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v123))))));
          int8x8_t v128 = (int8x8_t)vadd_s32(vdup_lane_s32(v127, 1), v127);
          __int32 v129 = v128.i32[0];
          v128.i32[0] = a3[1].i32[0] ^ v124;
          uint8x8_t v130 = (uint8x8_t)vcnt_s8(v128);
          v130.i16[0] = vaddlv_u8(v130);
          a1 = v130.u32[0];
          if (v129 + v130.i32[0] >= v121) {
            goto LABEL_183;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v131 = *(float *)(v12 + 216);
          uint64_t v132 = *(void *)(v16 + 8);
          if (v132)
          {
            a1 = 0;
            uint64_t v133 = *(void *)(v12 + 56);
            do
            {
              float v131 = v131 + *(float *)(v133 + 4 * a3->u16[a1++]);
              v133 += 4 * *(void *)(v16 + 40);
            }
            while (v132 != a1);
          }
          ++v21;
          if (*a5 >= v131) {
            goto LABEL_183;
          }
          if (a4) {
            uint64_t v134 = *(void *)(a4 + 8 * v120);
          }
          else {
            uint64_t v134 = v120 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v135 = 1;
            goto LABEL_182;
          }
          uint64_t v136 = 3;
          a1 = 2;
          uint64_t v137 = 1;
          while (1)
          {
            float v138 = v125[a1];
            if (v136 == a7 + 1 || (float v139 = v125[v136], v138 < v139))
            {
              if (v138 > v131) {
                goto LABEL_181;
              }
            }
            else
            {
              float v138 = v125[v136];
              a1 = v136;
              if (v139 > v131)
              {
LABEL_181:
                uint64_t v135 = v137;
LABEL_182:
                v125[v135] = v131;
                *(void *)(v126 + 8 * v135) = v134;
                uint64_t v18 = ++v119;
LABEL_183:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v120 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_162;
              }
            }
            uint64_t v135 = a1;
            v125[v137] = v138;
            *(void *)(v126 + 8 * v137) = *(void *)(v126 + 8 * a1);
            a1 *= 2;
            uint64_t v136 = (2 * v135) | 1;
            uint64_t v137 = v135;
            if (a1 > a7) {
              goto LABEL_182;
            }
          }
        }
        goto LABEL_260;
      case 32:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v173 = 0;
          uint64_t v174 = 0;
          uint64_t v21 = 0;
          int v175 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v176 = *(int8x16_t **)(a1 + 160);
          int8x16_t v178 = *v176;
          int8x16_t v177 = v176[1];
          float v179 = a5 - 1;
          uint64_t v180 = a6 - 8;
LABEL_237:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v178))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v177))))))) >= v175)goto LABEL_258; {
          if (*(_DWORD *)(v16 + 16) != 16)
          }
            faiss::decode<faiss::PQDecoder16>();
          float v181 = *(float *)(v12 + 216);
          uint64_t v182 = *(void *)(v16 + 8);
          if (v182)
          {
            uint64_t v183 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v181 = v181 + *(float *)(a1 + 4 * a3->u16[v183++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v182 != v183);
          }
          ++v21;
          if (*a5 >= v181) {
            goto LABEL_258;
          }
          if (a4) {
            uint64_t v184 = *(void *)(a4 + 8 * v174);
          }
          else {
            uint64_t v184 = v174 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v185 = 1;
            goto LABEL_257;
          }
          uint64_t v186 = 3;
          unint64_t v187 = 2;
          a1 = 1;
          while (1)
          {
            float v188 = v179[v187];
            if (v186 == a7 + 1 || (float v189 = v179[v186], v188 < v189))
            {
              if (v188 > v181) {
                goto LABEL_256;
              }
            }
            else
            {
              float v188 = v179[v186];
              unint64_t v187 = v186;
              if (v189 > v181)
              {
LABEL_256:
                uint64_t v185 = a1;
LABEL_257:
                v179[v185] = v181;
                *(void *)(v180 + 8 * v185) = v184;
                uint64_t v18 = ++v173;
LABEL_258:
                a3 += 2;
                if (++v174 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_237;
              }
            }
            uint64_t v185 = v187;
            v179[a1] = v188;
            *(void *)(v180 + 8 * a1) = *(void *)(v180 + 8 * v187);
            v187 *= 2;
            uint64_t v186 = (2 * v185) | 1;
            a1 = v185;
            if (v187 > a7) {
              goto LABEL_257;
            }
          }
        }
        goto LABEL_260;
      case 64:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64_t v21 = 0;
          int v56 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          float v57 = *(int8x16_t **)(a1 + 160);
          int8x16_t v59 = v57[2];
          int8x16_t v58 = v57[3];
          int8x16_t v61 = *v57;
          int8x16_t v60 = v57[1];
          uint64_t v62 = a5 - 1;
          uint64_t v63 = a6 - 8;
LABEL_67:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v61))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v60)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v59))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v58)))))))) >= v56)goto LABEL_88; {
          if (*(_DWORD *)(v16 + 16) != 16)
          }
            faiss::decode<faiss::PQDecoder16>();
          float v64 = *(float *)(v12 + 216);
          uint64_t v65 = *(void *)(v16 + 8);
          if (v65)
          {
            uint64_t v66 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v64 = v64 + *(float *)(a1 + 4 * a3->u16[v66++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v65 != v66);
          }
          ++v21;
          if (*a5 >= v64) {
            goto LABEL_88;
          }
          if (a4) {
            uint64_t v67 = *(void *)(a4 + 8 * v55);
          }
          else {
            uint64_t v67 = v55 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v68 = 1;
            goto LABEL_87;
          }
          uint64_t v69 = 3;
          unint64_t v70 = 2;
          a1 = 1;
          while (1)
          {
            float v71 = v62[v70];
            if (v69 == a7 + 1 || (float v72 = v62[v69], v71 < v72))
            {
              if (v71 > v64) {
                goto LABEL_86;
              }
            }
            else
            {
              float v71 = v62[v69];
              unint64_t v70 = v69;
              if (v72 > v64)
              {
LABEL_86:
                uint64_t v68 = a1;
LABEL_87:
                v62[v68] = v64;
                *(void *)(v63 + 8 * v68) = v67;
                uint64_t v18 = ++v54;
LABEL_88:
                a3 += 4;
                if (++v55 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_67;
              }
            }
            uint64_t v68 = v70;
            v62[a1] = v71;
            *(void *)(v63 + 8 * a1) = *(void *)(v63 + 8 * v70);
            v70 *= 2;
            uint64_t v69 = (2 * v68) | 1;
            a1 = v68;
            if (v70 > a7) {
              goto LABEL_87;
            }
          }
        }
        goto LABEL_260;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v104 = 0;
          uint64_t v105 = 0;
          uint64_t v21 = 0;
          int v106 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int v107 = **(_DWORD **)(a1 + 160);
          uint64_t v108 = a5 - 1;
          uint64_t v109 = a6 - 8;
LABEL_137:
          a8.i32[0] = a3->i32[0] ^ v107;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v106) {
            goto LABEL_158;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v110 = *(float *)(v12 + 216);
          uint64_t v111 = *(void *)(v16 + 8);
          if (v111)
          {
            a1 = 0;
            uint64_t v112 = *(void *)(v12 + 56);
            do
            {
              float v110 = v110 + *(float *)(v112 + 4 * a3->u16[a1++]);
              v112 += 4 * *(void *)(v16 + 40);
            }
            while (v111 != a1);
          }
          ++v21;
          if (*a5 >= v110) {
            goto LABEL_158;
          }
          if (a4) {
            uint64_t v113 = *(void *)(a4 + 8 * v105);
          }
          else {
            uint64_t v113 = v105 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v114 = 1;
            goto LABEL_157;
          }
          uint64_t v115 = 3;
          a1 = 2;
          uint64_t v116 = 1;
          while (1)
          {
            float v117 = v108[a1];
            if (v115 == a7 + 1 || (float v118 = v108[v115], v117 < v118))
            {
              if (v117 > v110) {
                goto LABEL_156;
              }
            }
            else
            {
              float v117 = v108[v115];
              a1 = v115;
              if (v118 > v110)
              {
LABEL_156:
                uint64_t v114 = v116;
LABEL_157:
                v108[v114] = v110;
                *(void *)(v109 + 8 * v114) = v113;
                uint64_t v18 = ++v104;
LABEL_158:
                a3 = (int8x16_t *)((char *)a3 + 4);
                if (++v105 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_137;
              }
            }
            uint64_t v114 = a1;
            v108[v116] = v117;
            *(void *)(v109 + 8 * v116) = *(void *)(v109 + 8 * a1);
            a1 *= 2;
            uint64_t v115 = (2 * v114) | 1;
            uint64_t v116 = v114;
            if (a1 > a7) {
              goto LABEL_157;
            }
          }
        }
        goto LABEL_260;
      case 8:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v157 = 0;
          uint64_t v158 = 0;
          uint64_t v21 = 0;
          int v159 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v160 = **(void **)(a1 + 160);
          float v161 = a5 - 1;
          uint64_t v162 = a6 - 8;
LABEL_212:
          uint8x8_t v163 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v160));
          v163.i16[0] = vaddlv_u8(v163);
          if (v159 <= v163.i32[0]) {
            goto LABEL_233;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v164 = *(float *)(v12 + 216);
          uint64_t v165 = *(void *)(v16 + 8);
          if (v165)
          {
            a1 = 0;
            uint64_t v166 = *(void *)(v12 + 56);
            do
            {
              float v164 = v164 + *(float *)(v166 + 4 * a3->u16[a1++]);
              v166 += 4 * *(void *)(v16 + 40);
            }
            while (v165 != a1);
          }
          ++v21;
          if (*a5 >= v164) {
            goto LABEL_233;
          }
          if (a4) {
            uint64_t v167 = *(void *)(a4 + 8 * v158);
          }
          else {
            uint64_t v167 = v158 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v168 = 1;
            goto LABEL_232;
          }
          uint64_t v169 = 3;
          a1 = 2;
          uint64_t v170 = 1;
          while (1)
          {
            float v171 = v161[a1];
            if (v169 == a7 + 1 || (float v172 = v161[v169], v171 < v172))
            {
              if (v171 > v164) {
                goto LABEL_231;
              }
            }
            else
            {
              float v171 = v161[v169];
              a1 = v169;
              if (v172 > v164)
              {
LABEL_231:
                uint64_t v168 = v170;
LABEL_232:
                v161[v168] = v164;
                *(void *)(v162 + 8 * v168) = v167;
                uint64_t v18 = ++v157;
LABEL_233:
                a3 = (int8x16_t *)((char *)a3 + 8);
                if (++v158 == a2) {
                  goto LABEL_261;
                }
                goto LABEL_212;
              }
            }
            uint64_t v168 = a1;
            v161[v170] = v171;
            *(void *)(v162 + 8 * v170) = *(void *)(v162 + 8 * a1);
            a1 *= 2;
            uint64_t v169 = (2 * v168) | 1;
            uint64_t v170 = v168;
            if (a1 > a7) {
              goto LABEL_232;
            }
          }
        }
        goto LABEL_260;
      case 16:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          __int32 v22 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int8x16_t v23 = *(int8x16_t *)*(void *)(a1 + 160);
          int v24 = a5 - 1;
          uint64_t v25 = a6 - 8;
          while (1)
          {
            int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22) {
              goto LABEL_33;
            }
            if (*(_DWORD *)(v16 + 16) != 16) {
              faiss::decode<faiss::PQDecoder16>();
            }
            float v27 = *(float *)(v12 + 216);
            uint64_t v28 = *(void *)(v16 + 8);
            if (v28)
            {
              uint64_t v29 = 0;
              a1 = *(void *)(v12 + 56);
              do
              {
                float v27 = v27 + *(float *)(a1 + 4 * a3->u16[v29++]);
                a1 += 4 * *(void *)(v16 + 40);
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 >= v27) {
              goto LABEL_33;
            }
            if (a4) {
              uint64_t v30 = *(void *)(a4 + 8 * v20);
            }
            else {
              uint64_t v30 = v20 | (v13 << 32);
            }
            if (a7 < 2)
            {
              uint64_t v31 = 1;
              goto LABEL_32;
            }
            uint64_t v32 = 3;
            unint64_t v33 = 2;
            a1 = 1;
            while (1)
            {
              float v34 = v24[v33];
              if (v32 != a7 + 1)
              {
                float v35 = v24[v32];
                if (v34 >= v35) {
                  break;
                }
              }
              if (v34 > v27) {
                goto LABEL_31;
              }
LABEL_29:
              uint64_t v31 = v33;
              v24[a1] = v34;
              *(void *)(v25 + 8 * a1) = *(void *)(v25 + 8 * v33);
              v33 *= 2;
              uint64_t v32 = (2 * v31) | 1;
              a1 = v31;
              if (v33 > a7) {
                goto LABEL_32;
              }
            }
            float v34 = v24[v32];
            unint64_t v33 = v32;
            if (v35 <= v27) {
              goto LABEL_29;
            }
LABEL_31:
            uint64_t v31 = a1;
LABEL_32:
            v24[v31] = v27;
            *(void *)(v25 + 8 * v31) = v30;
            uint64_t v18 = ++v19;
LABEL_33:
            ++a3;
            if (++v20 == a2)
            {
LABEL_261:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              uint64_t v190 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_262;
            }
          }
        }
LABEL_260:
        uint64_t v21 = 0;
        goto LABEL_261;
    }
  }
  int v195 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v198 = *(void *)(a1 + 160);
  int v199 = (int)v17 / 8;
  int v200 = v17 - (v16 & 0xFFFFFFF8);
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v141 = 0;
    goto LABEL_267;
  }
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v193 = (int)v17;
  int8x16_t v142 = a5 - 1;
  uint64_t v143 = a6 - 8;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v198, (const unsigned __int8 *)a3);
    if ((int)a1 >= v195) {
      goto LABEL_208;
    }
    uint64_t v144 = *(void *)(v12 + 32);
    if (*(_DWORD *)(v144 + 16) != 16) {
      faiss::decode<faiss::PQDecoder16>();
    }
    float v145 = *(float *)(v12 + 216);
    uint64_t v146 = *(void *)(v144 + 8);
    if (v146)
    {
      uint64_t v147 = 0;
      uint64_t v148 = *(void *)(v12 + 56);
      uint64_t v149 = 4 * *(void *)(v144 + 40);
      do
      {
        float v145 = v145 + *(float *)(v148 + 4 * a3->u16[v147++]);
        v148 += v149;
      }
      while (v146 != v147);
    }
    ++v141;
    if (*a5 >= v145) {
      goto LABEL_208;
    }
    if (v196) {
      uint64_t v150 = *(void *)(v196 + 8 * v140);
    }
    else {
      uint64_t v150 = v140 | (v13 << 32);
    }
    if (a7 < 2)
    {
      uint64_t v151 = 1;
      goto LABEL_207;
    }
    uint64_t v152 = 3;
    unint64_t v153 = 2;
    uint64_t v154 = 1;
    while (1)
    {
      float v155 = v142[v153];
      if (v152 != a7 + 1)
      {
        float v156 = v142[v152];
        if (v155 >= v156) {
          break;
        }
      }
      if (v155 > v145) {
        goto LABEL_206;
      }
LABEL_204:
      uint64_t v151 = v153;
      v142[v154] = v155;
      *(void *)(v143 + 8 * v154) = *(void *)(v143 + 8 * v153);
      v153 *= 2;
      uint64_t v152 = (2 * v151) | 1;
      uint64_t v154 = v151;
      if (v153 > a7) {
        goto LABEL_207;
      }
    }
    float v155 = v142[v152];
    unint64_t v153 = v152;
    if (v156 <= v145) {
      goto LABEL_204;
    }
LABEL_206:
    uint64_t v151 = v154;
LABEL_207:
    v142[v151] = v145;
    *(void *)(v143 + 8 * v151) = v150;
    ++v18;
LABEL_208:
    a3 = (int8x16_t *)((char *)a3 + v193);
    ++v140;
  }
  while (v140 != a2);
LABEL_267:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  uint64_t v190 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v141;
LABEL_262:
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v190;
  return v18;
}

void sub_1DD01DCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  uint64_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v79 = 0;
            uint64_t v17 = 0;
            __int32 v80 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            float v81 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v82 = *v81;
            __int32 v83 = v81[1].i32[0];
            uint64_t v84 = v12 << 32;
            int8x16_t v146 = *v81;
            do
            {
              int32x2_t v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v82))))));
              int8x8_t v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              __int32 v87 = v86.i32[0];
              v86.i32[0] = a3[1].i32[0] ^ v83;
              uint8x8_t v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                uint64_t v89 = *((void *)v11 + 4);
                if (*(_DWORD *)(v89 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v90 = *((float *)v11 + 54);
                uint64_t v91 = *(void *)(v89 + 8);
                if (v91)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = *((void *)v11 + 7);
                  uint64_t v94 = 4 * *(void *)(v89 + 40);
                  do
                  {
                    float v90 = v90 + *(float *)(v93 + 4 * a3->u16[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 > v8)
                {
                  if (a4) {
                    uint64_t v95 = *(void *)(a4 + 8 * v79);
                  }
                  else {
                    uint64_t v95 = v79 | v84;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v90, v95);
                  int8x16_t v82 = v146;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            uint64_t v120 = 0;
            uint64_t v17 = 0;
            int v121 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v122 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v124 = *v122;
            int8x16_t v123 = v122[1];
            uint64_t v125 = v12 << 32;
            int8x16_t v143 = *v122;
            int8x16_t v147 = v123;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v124))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v123))))))) < v121)
              {
                uint64_t v126 = *((void *)v11 + 4);
                if (*(_DWORD *)(v126 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v127 = *((float *)v11 + 54);
                uint64_t v128 = *(void *)(v126 + 8);
                if (v128)
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = *((void *)v11 + 7);
                  uint64_t v131 = 4 * *(void *)(v126 + 40);
                  do
                  {
                    float v127 = v127 + *(float *)(v130 + 4 * a3->u16[v129++]);
                    v130 += v131;
                  }
                  while (v128 != v129);
                }
                ++v17;
                if (v127 > v8)
                {
                  if (a4) {
                    uint64_t v132 = *(void *)(a4 + 8 * v120);
                  }
                  else {
                    uint64_t v132 = v120 | v125;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v127, v132);
                  int8x16_t v124 = v143;
                  int8x16_t v123 = v147;
                }
              }
              a3 += 2;
              ++v120;
            }
            while (v120 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            uint64_t v39 = 0;
            uint64_t v17 = 0;
            int v40 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v41 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v43 = v41[2];
            int8x16_t v42 = v41[3];
            int8x16_t v45 = *v41;
            int8x16_t v44 = v41[1];
            uint64_t v46 = v12 << 32;
            int8x16_t v142 = v43;
            int8x16_t v145 = v42;
            int8x16_t v140 = *v41;
            int8x16_t v141 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v42)))))))) < v40)
              {
                uint64_t v47 = *((void *)v11 + 4);
                if (*(_DWORD *)(v47 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v48 = *((float *)v11 + 54);
                uint64_t v49 = *(void *)(v47 + 8);
                if (v49)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = *((void *)v11 + 7);
                  uint64_t v52 = 4 * *(void *)(v47 + 40);
                  do
                  {
                    float v48 = v48 + *(float *)(v51 + 4 * a3->u16[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 > v8)
                {
                  if (a4) {
                    uint64_t v53 = *(void *)(a4 + 8 * v39);
                  }
                  else {
                    uint64_t v53 = v39 | v46;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v48, v53);
                  int8x16_t v43 = v142;
                  int8x16_t v42 = v145;
                  int8x16_t v45 = v140;
                  int8x16_t v44 = v141;
                }
              }
              a3 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v68 = 0;
            uint64_t v17 = 0;
            int v69 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v70 = **((_DWORD **)a1 + 20);
            uint64_t v71 = v12 << 32;
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                uint64_t v72 = *((void *)v11 + 4);
                if (*(_DWORD *)(v72 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v73 = *((float *)v11 + 54);
                uint64_t v74 = *(void *)(v72 + 8);
                if (v74)
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *((void *)v11 + 7);
                  uint64_t v77 = 4 * *(void *)(v72 + 40);
                  do
                  {
                    float v73 = v73 + *(float *)(v76 + 4 * a3->u16[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 > v8)
                {
                  if (a4) {
                    uint64_t v78 = *(void *)(a4 + 8 * v68);
                  }
                  else {
                    uint64_t v78 = v68 | v71;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            uint64_t v108 = 0;
            uint64_t v17 = 0;
            int v109 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v110 = **((void **)a1 + 20);
            uint64_t v111 = v12 << 32;
            do
            {
              uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v110));
              v112.i16[0] = vaddlv_u8(v112);
              if (v109 > v112.i32[0])
              {
                uint64_t v113 = *((void *)v11 + 4);
                if (*(_DWORD *)(v113 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v114 = *((float *)v11 + 54);
                uint64_t v115 = *(void *)(v113 + 8);
                if (v115)
                {
                  uint64_t v116 = 0;
                  uint64_t v117 = *((void *)v11 + 7);
                  uint64_t v118 = 4 * *(void *)(v113 + 40);
                  do
                  {
                    float v114 = v114 + *(float *)(v117 + 4 * a3->u16[v116++]);
                    v117 += v118;
                  }
                  while (v115 != v116);
                }
                ++v17;
                if (v114 > v8)
                {
                  if (a4) {
                    uint64_t v119 = *(void *)(a4 + 8 * v108);
                  }
                  else {
                    uint64_t v119 = v108 | v111;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v114, v119);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v108;
            }
            while (v108 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            uint64_t v20 = v12 << 32;
            int8x16_t v144 = v19;
            do
            {
              int32x2_t v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                uint64_t v22 = *((void *)v11 + 4);
                if (*(_DWORD *)(v22 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = *(void *)(v22 + 8);
                if (v24)
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = *((void *)v11 + 7);
                  uint64_t v27 = 4 * *(void *)(v22 + 40);
                  do
                  {
                    float v23 = v23 + *(float *)(v26 + 4 * a3->u16[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4) {
                    uint64_t v28 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v28 = v16 | v20;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v28);
                  int8x16_t v19 = v144;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          uint64_t v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v133;
          return;
      }
    }
    int v96 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v148 = *((void *)a1 + 20);
    int v149 = (int)v15 / 8;
    int v150 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = (int)v15;
      uint64_t v100 = v12 << 32;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v148, (const unsigned __int8 *)a3);
        if ((int)a1 < v96)
        {
          uint64_t v101 = *((void *)v11 + 4);
          if (*(_DWORD *)(v101 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v102 = *((float *)v11 + 54);
          uint64_t v103 = *(void *)(v101 + 8);
          if (v103)
          {
            uint64_t v104 = 0;
            uint64_t v105 = *((void *)v11 + 7);
            uint64_t v106 = 4 * *(void *)(v101 + 40);
            do
            {
              float v102 = v102 + *(float *)(v105 + 4 * a3->u16[v104++]);
              v105 += v106;
            }
            while (v103 != v104);
          }
          ++v98;
          if (v102 > v8)
          {
            if (a4) {
              uint64_t v107 = *(void *)(a4 + 8 * v97);
            }
            else {
              uint64_t v107 = v97 | v100;
            }
            a1 = faiss::RangeQueryResult::add(this, v102, v107);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      uint64_t v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v54 = 0;
        uint64_t v55 = v12 << 32;
        do
        {
          uint64_t v56 = *((void *)v11 + 4);
          if (*(_DWORD *)(v56 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v57 = *((float *)v11 + 54);
          uint64_t v58 = *(void *)(v56 + 8);
          if (v58)
          {
            uint64_t v59 = *((void *)v11 + 8);
            int8x16_t v60 = (uint64_t *)*((void *)v11 + 14);
            int8x16_t v61 = a3;
            do
            {
              unsigned int v63 = v61->u16[0];
              int8x16_t v61 = (int8x16_t *)((char *)v61 + 2);
              uint64_t v62 = v63;
              uint64_t v64 = *v60++;
              float v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(void *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          uint64_t v65 = *(void *)(v56 + 32);
          if (v57 > v8)
          {
            if (a4) {
              uint64_t v66 = *(void *)(a4 + 8 * v54);
            }
            else {
              uint64_t v66 = v54 | v55;
            }
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          a3 = (int8x16_t *)((char *)a3 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v148, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v148, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoder16>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v12 << 32;
        do
        {
          uint64_t v31 = *((void *)v11 + 4);
          if (*(_DWORD *)(v31 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v32 = *((float *)v11 + 54);
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33)
          {
            uint64_t v34 = *((void *)v11 + 7);
            float v35 = a3;
            do
            {
              unsigned int v36 = v35->u16[0];
              float v35 = (int8x16_t *)((char *)v35 + 2);
              float v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(void *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          uint64_t v37 = *(void *)(v31 + 32);
          if (v32 > v8)
          {
            if (a4) {
              uint64_t v38 = *(void *)(a4 + 8 * v29);
            }
            else {
              uint64_t v38 = v29 | v30;
            }
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          a3 = (int8x16_t *)((char *)a3 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)a1 + 1) + 40) + 80))(*(void *)(*((void *)a1 + 1) + 40), v12, *((void *)a1 + 9));
      float v67 = faiss::fvec_inner_product(*((faiss **)v11 + 9), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (!a2) {
        return;
      }
    }
    else
    {
      float v67 = 0.0;
      if (!a2) {
        return;
      }
    }
    uint64_t v134 = 0;
    uint64_t v135 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v136 = *(void *)(*((void *)v11 + 4) + 32);
      float v137 = v67 + faiss::fvec_inner_product(*((faiss **)v11 + 10), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (v137 > v8)
      {
        if (a4) {
          uint64_t v138 = *(void *)(a4 + 8 * v134);
        }
        else {
          uint64_t v138 = v134 | v135;
        }
        faiss::RangeQueryResult::add(this, v137, v138);
      }
      a3 = (int8x16_t *)((char *)a3 + v136);
      ++v134;
    }
    while (a2 != v134);
  }
}

void sub_1DD01E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  uint64_t v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::distance_to_code(uint64_t a1, unsigned __int16 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 16) != 16) {
    faiss::decode<faiss::PQDecoder16>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = 4 * *(void *)(v2 + 40);
    do
    {
      unsigned int v7 = *a2++;
      float result = result + *(float *)(v5 + 4 * v7);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::scan_codes(unint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  unint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  int v15 = *(_DWORD *)(a1 + 224);
  uint64_t v201 = a4;
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          uint64_t v74 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v74 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          uint64_t v18 = 0;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = a5 - 1;
          uint64_t v78 = *(void *)(v74 + 32);
          uint64_t v79 = *(void *)(a1 + 64);
          uint64_t v80 = a6 - 8;
          uint64_t v81 = *(void *)(v74 + 8);
LABEL_95:
          float v82 = *(float *)(v12 + 216);
          if (v81)
          {
            uint64_t v83 = 0;
            uint64_t v84 = v79;
            do
            {
              float v82 = v82
                  + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v83) + 4 * a3->u16[v83])
                          + (float)(*(float *)(v84 + 4 * a3->u16[v83]) * -2.0));
              ++v83;
              v84 += 4 * *(void *)(v74 + 40);
            }
            while (v81 != v83);
          }
          if (*a5 <= v82) {
            goto LABEL_114;
          }
          if (v201) {
            uint64_t v85 = *(void *)(v201 + 8 * v76);
          }
          else {
            uint64_t v85 = v76 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v86 = 1;
            goto LABEL_113;
          }
          uint64_t v87 = 3;
          unint64_t v88 = 2;
          uint64_t v89 = 1;
          while (1)
          {
            float v90 = v77[v88];
            if (v87 == a7 + 1 || (float v91 = v77[v87], v90 > v91))
            {
              if (v90 < v82) {
                goto LABEL_112;
              }
            }
            else
            {
              float v90 = v77[v87];
              unint64_t v88 = v87;
              if (v91 < v82)
              {
LABEL_112:
                uint64_t v86 = v89;
LABEL_113:
                v77[v86] = v82;
                *(void *)(v80 + 8 * v86) = v85;
                uint64_t v18 = ++v75;
LABEL_114:
                a3 = (int8x16_t *)((char *)a3 + v78);
                if (++v76 == a2) {
                  return v18;
                }
                goto LABEL_95;
              }
            }
            uint64_t v86 = v88;
            v77[v89] = v90;
            *(void *)(v80 + 8 * v89) = *(void *)(v80 + 8 * v88);
            v88 *= 2;
            uint64_t v87 = (2 * v86) | 1;
            uint64_t v89 = v86;
            if (v88 > a7) {
              goto LABEL_113;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v203, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v203, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder16>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          if (*(_DWORD *)(v36 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          uint64_t v18 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = a5 - 1;
          uint64_t v40 = *(void *)(v36 + 32);
          uint64_t v41 = *(void *)(a1 + 56);
          uint64_t v42 = a6 - 8;
          uint64_t v43 = *(void *)(v36 + 8);
LABEL_41:
          float v44 = *(float *)(v12 + 216);
          if (v43)
          {
            uint64_t v45 = 0;
            uint64_t v46 = v41;
            uint64_t v47 = v201;
            do
            {
              float v44 = v44 + *(float *)(v46 + 4 * a3->u16[v45++]);
              v46 += 4 * *(void *)(v36 + 40);
            }
            while (v43 != v45);
          }
          else
          {
            uint64_t v47 = v201;
          }
          if (*a5 <= v44) {
            goto LABEL_62;
          }
          if (v47) {
            uint64_t v48 = *(void *)(v47 + 8 * v38);
          }
          else {
            uint64_t v48 = v38 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v49 = 1;
            goto LABEL_61;
          }
          uint64_t v50 = 3;
          unint64_t v51 = 2;
          uint64_t v52 = 1;
          while (1)
          {
            float v53 = v39[v51];
            if (v50 == a7 + 1 || (float v54 = v39[v50], v53 > v54))
            {
              if (v53 < v44) {
                goto LABEL_60;
              }
            }
            else
            {
              float v53 = v39[v50];
              unint64_t v51 = v50;
              if (v54 < v44)
              {
LABEL_60:
                uint64_t v49 = v52;
LABEL_61:
                v39[v49] = v44;
                *(void *)(v42 + 8 * v49) = v48;
                uint64_t v18 = ++v37;
LABEL_62:
                a3 = (int8x16_t *)((char *)a3 + v40);
                if (++v38 == a2) {
                  return v18;
                }
                goto LABEL_41;
              }
            }
            uint64_t v49 = v51;
            v39[v52] = v53;
            *(void *)(v42 + 8 * v52) = *(void *)(v42 + 8 * v51);
            v51 *= 2;
            uint64_t v50 = (2 * v49) | 1;
            uint64_t v52 = v49;
            if (v51 > a7) {
              goto LABEL_61;
            }
          }
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 44))
      {
        uint64_t v92 = (const float **)(a1 + 72);
        (*(void (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 40) + 104))(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 136), *(void *)(a1 + 72), v13);
      }
      else
      {
        uint64_t v92 = (const float **)(a1 + 136);
      }
      if (a2)
      {
        uint64_t v18 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = *v92;
        uint64_t v198 = v13 << 32;
        uint64_t v184 = a5 - 1;
        uint64_t v185 = a6 - 8;
LABEL_250:
        faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
        uint64_t v186 = *(void *)(*(void *)(v12 + 32) + 32);
        float v187 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v183, *(int *)(v12 + 24));
        if (*a5 <= v187) {
          goto LABEL_266;
        }
        if (v201) {
          uint64_t v188 = *(void *)(v201 + 8 * v182);
        }
        else {
          uint64_t v188 = v182 | v198;
        }
        if (a7 < 2)
        {
          uint64_t v189 = 1;
          goto LABEL_265;
        }
        uint64_t v190 = 3;
        unint64_t v191 = 2;
        uint64_t v192 = 1;
        while (1)
        {
          float v193 = v184[v191];
          if (v190 == a7 + 1 || (float v194 = v184[v190], v193 > v194))
          {
            if (v193 < v187) {
              goto LABEL_264;
            }
          }
          else
          {
            float v193 = v184[v190];
            unint64_t v191 = v190;
            if (v194 < v187)
            {
LABEL_264:
              uint64_t v189 = v192;
LABEL_265:
              v184[v189] = v187;
              *(void *)(v185 + 8 * v189) = v188;
              ++v18;
LABEL_266:
              a3 = (int8x16_t *)((char *)a3 + v186);
              if (++v182 == a2) {
                return v18;
              }
              goto LABEL_250;
            }
          }
          uint64_t v189 = v191;
          v184[v192] = v193;
          *(void *)(v185 + 8 * v192) = *(void *)(v185 + 8 * v191);
          v191 *= 2;
          uint64_t v190 = (2 * v189) | 1;
          uint64_t v192 = v189;
          if (v191 > a7) {
            goto LABEL_265;
          }
        }
      }
    }
    return 0;
  }
  if (v15 != 2) {
  uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(void *)(v16 + 32);
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          uint64_t v21 = 0;
          __int32 v110 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v111 = *(int8x16_t **)(a1 + 160);
          int8x16_t v112 = *v111;
          __int32 v113 = v111[1].i32[0];
          float v114 = a5 - 1;
          uint64_t v115 = a6 - 8;
LABEL_145:
          int32x2_t v116 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v112))))));
          int8x8_t v117 = (int8x8_t)vadd_s32(vdup_lane_s32(v116, 1), v116);
          __int32 v118 = v117.i32[0];
          v117.i32[0] = a3[1].i32[0] ^ v113;
          uint8x8_t v119 = (uint8x8_t)vcnt_s8(v117);
          v119.i16[0] = vaddlv_u8(v119);
          a1 = v119.u32[0];
          if (v118 + v119.i32[0] >= v110) {
            goto LABEL_166;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v120 = *(float *)(v12 + 216);
          uint64_t v121 = *(void *)(v16 + 8);
          if (v121)
          {
            a1 = 0;
            uint64_t v122 = *(void *)(v12 + 56);
            do
            {
              float v120 = v120 + *(float *)(v122 + 4 * a3->u16[a1++]);
              v122 += 4 * *(void *)(v16 + 40);
            }
            while (v121 != a1);
          }
          ++v21;
          if (*a5 <= v120) {
            goto LABEL_166;
          }
          if (a4) {
            uint64_t v123 = *(void *)(a4 + 8 * v109);
          }
          else {
            uint64_t v123 = v109 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v124 = 1;
            goto LABEL_165;
          }
          uint64_t v125 = 3;
          a1 = 2;
          uint64_t v126 = 1;
          while (1)
          {
            float v127 = v114[a1];
            if (v125 == a7 + 1 || (float v128 = v114[v125], v127 > v128))
            {
              if (v127 < v120) {
                goto LABEL_164;
              }
            }
            else
            {
              float v127 = v114[v125];
              a1 = v125;
              if (v128 < v120)
              {
LABEL_164:
                uint64_t v124 = v126;
LABEL_165:
                v114[v124] = v120;
                *(void *)(v115 + 8 * v124) = v123;
                uint64_t v18 = ++v108;
LABEL_166:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v109 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_145;
              }
            }
            uint64_t v124 = a1;
            v114[v126] = v127;
            *(void *)(v115 + 8 * v126) = *(void *)(v115 + 8 * a1);
            a1 *= 2;
            uint64_t v125 = (2 * v124) | 1;
            uint64_t v126 = v124;
            if (a1 > a7) {
              goto LABEL_165;
            }
          }
        }
        goto LABEL_243;
      case 32:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v163 = 0;
          uint64_t v164 = 0;
          uint64_t v21 = 0;
          int v165 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v166 = *(int8x16_t **)(a1 + 160);
          int8x16_t v168 = *v166;
          int8x16_t v167 = v166[1];
          uint64_t v169 = a5 - 1;
          uint64_t v170 = a6 - 8;
LABEL_220:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v168))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v167))))))) >= v165)goto LABEL_241; {
          if (*(_DWORD *)(v16 + 16) != 16)
          }
            faiss::decode<faiss::PQDecoder16>();
          float v171 = *(float *)(v12 + 216);
          uint64_t v172 = *(void *)(v16 + 8);
          if (v172)
          {
            uint64_t v173 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v171 = v171 + *(float *)(a1 + 4 * a3->u16[v173++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v172 != v173);
          }
          ++v21;
          if (*a5 <= v171) {
            goto LABEL_241;
          }
          if (a4) {
            uint64_t v174 = *(void *)(a4 + 8 * v164);
          }
          else {
            uint64_t v174 = v164 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v175 = 1;
            goto LABEL_240;
          }
          uint64_t v176 = 3;
          unint64_t v177 = 2;
          a1 = 1;
          while (1)
          {
            float v178 = v169[v177];
            if (v176 == a7 + 1 || (float v179 = v169[v176], v178 > v179))
            {
              if (v178 < v171) {
                goto LABEL_239;
              }
            }
            else
            {
              float v178 = v169[v176];
              unint64_t v177 = v176;
              if (v179 < v171)
              {
LABEL_239:
                uint64_t v175 = a1;
LABEL_240:
                v169[v175] = v171;
                *(void *)(v170 + 8 * v175) = v174;
                uint64_t v18 = ++v163;
LABEL_241:
                a3 += 2;
                if (++v164 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_220;
              }
            }
            uint64_t v175 = v177;
            v169[a1] = v178;
            *(void *)(v170 + 8 * a1) = *(void *)(v170 + 8 * v177);
            v177 *= 2;
            uint64_t v176 = (2 * v175) | 1;
            a1 = v175;
            if (v177 > a7) {
              goto LABEL_240;
            }
          }
        }
        goto LABEL_243;
      case 64:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v21 = 0;
          int v57 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v58 = *(int8x16_t **)(a1 + 160);
          int8x16_t v60 = v58[2];
          int8x16_t v59 = v58[3];
          int8x16_t v62 = *v58;
          int8x16_t v61 = v58[1];
          unsigned int v63 = a5 - 1;
          uint64_t v64 = a6 - 8;
LABEL_69:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v62))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v61)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v60))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v59)))))))) >= v57)goto LABEL_90; {
          if (*(_DWORD *)(v16 + 16) != 16)
          }
            faiss::decode<faiss::PQDecoder16>();
          float v65 = *(float *)(v12 + 216);
          uint64_t v66 = *(void *)(v16 + 8);
          if (v66)
          {
            uint64_t v67 = 0;
            a1 = *(void *)(v12 + 56);
            do
            {
              float v65 = v65 + *(float *)(a1 + 4 * a3->u16[v67++]);
              a1 += 4 * *(void *)(v16 + 40);
            }
            while (v66 != v67);
          }
          ++v21;
          if (*a5 <= v65) {
            goto LABEL_90;
          }
          if (a4) {
            uint64_t v68 = *(void *)(a4 + 8 * v56);
          }
          else {
            uint64_t v68 = v56 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v69 = 1;
            goto LABEL_89;
          }
          uint64_t v70 = 3;
          unint64_t v71 = 2;
          a1 = 1;
          while (1)
          {
            float v72 = v63[v71];
            if (v70 == a7 + 1 || (float v73 = v63[v70], v72 > v73))
            {
              if (v72 < v65) {
                goto LABEL_88;
              }
            }
            else
            {
              float v72 = v63[v70];
              unint64_t v71 = v70;
              if (v73 < v65)
              {
LABEL_88:
                uint64_t v69 = a1;
LABEL_89:
                v63[v69] = v65;
                *(void *)(v64 + 8 * v69) = v68;
                uint64_t v18 = ++v55;
LABEL_90:
                a3 += 4;
                if (++v56 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_69;
              }
            }
            uint64_t v69 = v71;
            v63[a1] = v72;
            *(void *)(v64 + 8 * a1) = *(void *)(v64 + 8 * v71);
            v71 *= 2;
            uint64_t v70 = (2 * v69) | 1;
            a1 = v69;
            if (v71 > a7) {
              goto LABEL_89;
            }
          }
        }
        goto LABEL_243;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          uint64_t v21 = 0;
          int v95 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int v96 = **(_DWORD **)(a1 + 160);
          uint64_t v97 = a5 - 1;
          uint64_t v98 = a6 - 8;
LABEL_120:
          a8.i32[0] = a3->i32[0] ^ v96;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v95) {
            goto LABEL_141;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v99 = *(float *)(v12 + 216);
          uint64_t v100 = *(void *)(v16 + 8);
          if (v100)
          {
            a1 = 0;
            uint64_t v101 = *(void *)(v12 + 56);
            do
            {
              float v99 = v99 + *(float *)(v101 + 4 * a3->u16[a1++]);
              v101 += 4 * *(void *)(v16 + 40);
            }
            while (v100 != a1);
          }
          ++v21;
          if (*a5 <= v99) {
            goto LABEL_141;
          }
          if (a4) {
            uint64_t v102 = *(void *)(a4 + 8 * v94);
          }
          else {
            uint64_t v102 = v94 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v103 = 1;
            goto LABEL_140;
          }
          uint64_t v104 = 3;
          a1 = 2;
          uint64_t v105 = 1;
          while (1)
          {
            float v106 = v97[a1];
            if (v104 == a7 + 1 || (float v107 = v97[v104], v106 > v107))
            {
              if (v106 < v99) {
                goto LABEL_139;
              }
            }
            else
            {
              float v106 = v97[v104];
              a1 = v104;
              if (v107 < v99)
              {
LABEL_139:
                uint64_t v103 = v105;
LABEL_140:
                v97[v103] = v99;
                *(void *)(v98 + 8 * v103) = v102;
                uint64_t v18 = ++v93;
LABEL_141:
                a3 = (int8x16_t *)((char *)a3 + 4);
                if (++v94 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_120;
              }
            }
            uint64_t v103 = a1;
            v97[v105] = v106;
            *(void *)(v98 + 8 * v105) = *(void *)(v98 + 8 * a1);
            a1 *= 2;
            uint64_t v104 = (2 * v103) | 1;
            uint64_t v105 = v103;
            if (a1 > a7) {
              goto LABEL_140;
            }
          }
        }
        goto LABEL_243;
      case 8:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v147 = 0;
          uint64_t v148 = 0;
          uint64_t v21 = 0;
          int v149 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v150 = **(void **)(a1 + 160);
          uint64_t v151 = a5 - 1;
          uint64_t v152 = a6 - 8;
LABEL_195:
          uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v150));
          v153.i16[0] = vaddlv_u8(v153);
          if (v149 <= v153.i32[0]) {
            goto LABEL_216;
          }
          if (*(_DWORD *)(v16 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v154 = *(float *)(v12 + 216);
          uint64_t v155 = *(void *)(v16 + 8);
          if (v155)
          {
            a1 = 0;
            uint64_t v156 = *(void *)(v12 + 56);
            do
            {
              float v154 = v154 + *(float *)(v156 + 4 * a3->u16[a1++]);
              v156 += 4 * *(void *)(v16 + 40);
            }
            while (v155 != a1);
          }
          ++v21;
          if (*a5 <= v154) {
            goto LABEL_216;
          }
          if (a4) {
            uint64_t v157 = *(void *)(a4 + 8 * v148);
          }
          else {
            uint64_t v157 = v148 | (v13 << 32);
          }
          if (a7 < 2)
          {
            uint64_t v158 = 1;
            goto LABEL_215;
          }
          uint64_t v159 = 3;
          a1 = 2;
          uint64_t v160 = 1;
          while (1)
          {
            float v161 = v151[a1];
            if (v159 == a7 + 1 || (float v162 = v151[v159], v161 > v162))
            {
              if (v161 < v154) {
                goto LABEL_214;
              }
            }
            else
            {
              float v161 = v151[v159];
              a1 = v159;
              if (v162 < v154)
              {
LABEL_214:
                uint64_t v158 = v160;
LABEL_215:
                v151[v158] = v154;
                *(void *)(v152 + 8 * v158) = v157;
                uint64_t v18 = ++v147;
LABEL_216:
                a3 = (int8x16_t *)((char *)a3 + 8);
                if (++v148 == a2) {
                  goto LABEL_244;
                }
                goto LABEL_195;
              }
            }
            uint64_t v158 = a1;
            v151[v160] = v161;
            *(void *)(v152 + 8 * v160) = *(void *)(v152 + 8 * a1);
            a1 *= 2;
            uint64_t v159 = (2 * v158) | 1;
            uint64_t v160 = v158;
            if (a1 > a7) {
              goto LABEL_215;
            }
          }
        }
        goto LABEL_243;
      case 16:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          __int32 v22 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          int8x16_t v23 = *(int8x16_t *)*(void *)(a1 + 160);
          int v24 = a5 - 1;
          uint64_t v25 = a6 - 8;
          while (1)
          {
            int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v23))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v22) {
              goto LABEL_33;
            }
            if (*(_DWORD *)(v16 + 16) != 16) {
              faiss::decode<faiss::PQDecoder16>();
            }
            float v27 = *(float *)(v12 + 216);
            uint64_t v28 = *(void *)(v16 + 8);
            if (v28)
            {
              uint64_t v29 = 0;
              a1 = *(void *)(v12 + 56);
              do
              {
                float v27 = v27 + *(float *)(a1 + 4 * a3->u16[v29++]);
                a1 += 4 * *(void *)(v16 + 40);
              }
              while (v28 != v29);
            }
            ++v21;
            if (*a5 <= v27) {
              goto LABEL_33;
            }
            if (a4) {
              uint64_t v30 = *(void *)(a4 + 8 * v20);
            }
            else {
              uint64_t v30 = v20 | (v13 << 32);
            }
            if (a7 < 2)
            {
              uint64_t v31 = 1;
              goto LABEL_32;
            }
            uint64_t v32 = 3;
            unint64_t v33 = 2;
            a1 = 1;
            while (1)
            {
              float v34 = v24[v33];
              if (v32 != a7 + 1)
              {
                float v35 = v24[v32];
                if (v34 <= v35) {
                  break;
                }
              }
              if (v34 < v27) {
                goto LABEL_31;
              }
LABEL_29:
              uint64_t v31 = v33;
              v24[a1] = v34;
              *(void *)(v25 + 8 * a1) = *(void *)(v25 + 8 * v33);
              v33 *= 2;
              uint64_t v32 = (2 * v31) | 1;
              a1 = v31;
              if (v33 > a7) {
                goto LABEL_32;
              }
            }
            float v34 = v24[v32];
            unint64_t v33 = v32;
            if (v35 >= v27) {
              goto LABEL_29;
            }
LABEL_31:
            uint64_t v31 = a1;
LABEL_32:
            v24[v31] = v27;
            *(void *)(v25 + 8 * v31) = v30;
            uint64_t v18 = ++v19;
LABEL_33:
            ++a3;
            if (++v20 == a2)
            {
LABEL_244:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              uint64_t v180 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v21;
              goto LABEL_245;
            }
          }
        }
LABEL_243:
        uint64_t v21 = 0;
        goto LABEL_244;
    }
  }
  int v200 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v203 = *(void *)(a1 + 160);
  int v204 = (int)v17 / 8;
  int v205 = v17 - (v16 & 0xFFFFFFF8);
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v130 = 0;
    goto LABEL_270;
  }
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v196 = v13 << 32;
  uint64_t v197 = (int)v17;
  uint64_t v131 = a5 - 1;
  uint64_t v132 = a6 - 8;
  unint64_t v133 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v203, (const unsigned __int8 *)a3);
    if ((int)a1 >= v200) {
      goto LABEL_191;
    }
    uint64_t v134 = *(void *)(v12 + 32);
    if (*(_DWORD *)(v134 + 16) != 16) {
      faiss::decode<faiss::PQDecoder16>();
    }
    float v135 = *(float *)(v12 + 216);
    uint64_t v136 = *(void *)(v134 + 8);
    if (v136)
    {
      uint64_t v137 = 0;
      uint64_t v138 = *(void *)(v12 + 56);
      uint64_t v139 = 4 * *(void *)(v134 + 40);
      do
      {
        float v135 = v135 + *(float *)(v138 + 4 * a3->u16[v137++]);
        v138 += v139;
      }
      while (v136 != v137);
    }
    ++v130;
    if (*a5 <= v135) {
      goto LABEL_191;
    }
    if (v201) {
      uint64_t v140 = *(void *)(v201 + 8 * v129);
    }
    else {
      uint64_t v140 = v129 | v196;
    }
    if (a7 < 2)
    {
      uint64_t v141 = 1;
      goto LABEL_190;
    }
    uint64_t v142 = 3;
    unint64_t v143 = 2;
    uint64_t v144 = 1;
    while (1)
    {
      float v145 = v131[v143];
      if (v142 != v133)
      {
        float v146 = v131[v142];
        if (v145 <= v146) {
          break;
        }
      }
      if (v145 < v135) {
        goto LABEL_189;
      }
LABEL_187:
      uint64_t v141 = v143;
      v131[v144] = v145;
      *(void *)(v132 + 8 * v144) = *(void *)(v132 + 8 * v143);
      v143 *= 2;
      uint64_t v142 = (2 * v141) | 1;
      uint64_t v144 = v141;
      if (v143 > a7) {
        goto LABEL_190;
      }
    }
    float v145 = v131[v142];
    unint64_t v143 = v142;
    if (v146 >= v135) {
      goto LABEL_187;
    }
LABEL_189:
    uint64_t v141 = v144;
LABEL_190:
    v131[v141] = v135;
    *(void *)(v132 + 8 * v141) = v140;
    ++v18;
LABEL_191:
    a3 = (int8x16_t *)((char *)a3 + v197);
    ++v129;
  }
  while (v129 != a2);
LABEL_270:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  uint64_t v180 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v130;
LABEL_245:
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v180;
  return v18;
}

void sub_1DD01F8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  uint64_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v79 = 0;
            uint64_t v17 = 0;
            __int32 v80 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v81 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v82 = *v81;
            __int32 v83 = v81[1].i32[0];
            uint64_t v84 = v12 << 32;
            int8x16_t v147 = *v81;
            do
            {
              int32x2_t v85 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v82))))));
              int8x8_t v86 = (int8x8_t)vadd_s32(vdup_lane_s32(v85, 1), v85);
              __int32 v87 = v86.i32[0];
              v86.i32[0] = a3[1].i32[0] ^ v83;
              uint8x8_t v88 = (uint8x8_t)vcnt_s8(v86);
              v88.i16[0] = vaddlv_u8(v88);
              if (v87 + v88.i32[0] < v80)
              {
                uint64_t v89 = *((void *)v11 + 4);
                if (*(_DWORD *)(v89 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v90 = *((float *)v11 + 54);
                uint64_t v91 = *(void *)(v89 + 8);
                if (v91)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = *((void *)v11 + 7);
                  uint64_t v94 = 4 * *(void *)(v89 + 40);
                  do
                  {
                    float v90 = v90 + *(float *)(v93 + 4 * a3->u16[v92++]);
                    v93 += v94;
                  }
                  while (v91 != v92);
                }
                ++v17;
                if (v90 < v8)
                {
                  if (a4) {
                    uint64_t v95 = *(void *)(a4 + 8 * v79);
                  }
                  else {
                    uint64_t v95 = v79 | v84;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v90, v95);
                  int8x16_t v82 = v147;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v79;
            }
            while (v79 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 32:
          if (a2)
          {
            uint64_t v120 = 0;
            uint64_t v17 = 0;
            int v121 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v122 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v124 = *v122;
            int8x16_t v123 = v122[1];
            uint64_t v125 = v12 << 32;
            int8x16_t v144 = *v122;
            int8x16_t v148 = v123;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v124))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v123))))))) < v121)
              {
                uint64_t v126 = *((void *)v11 + 4);
                if (*(_DWORD *)(v126 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v127 = *((float *)v11 + 54);
                uint64_t v128 = *(void *)(v126 + 8);
                if (v128)
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = *((void *)v11 + 7);
                  uint64_t v131 = 4 * *(void *)(v126 + 40);
                  do
                  {
                    float v127 = v127 + *(float *)(v130 + 4 * a3->u16[v129++]);
                    v130 += v131;
                  }
                  while (v128 != v129);
                }
                ++v17;
                if (v127 < v8)
                {
                  if (a4) {
                    uint64_t v132 = *(void *)(a4 + 8 * v120);
                  }
                  else {
                    uint64_t v132 = v120 | v125;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v127, v132);
                  int8x16_t v124 = v144;
                  int8x16_t v123 = v148;
                }
              }
              a3 += 2;
              ++v120;
            }
            while (v120 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 64:
          if (a2)
          {
            uint64_t v39 = 0;
            uint64_t v17 = 0;
            int v40 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v41 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v43 = v41[2];
            int8x16_t v42 = v41[3];
            int8x16_t v45 = *v41;
            int8x16_t v44 = v41[1];
            uint64_t v46 = v12 << 32;
            int8x16_t v143 = v43;
            int8x16_t v146 = v42;
            int8x16_t v141 = *v41;
            int8x16_t v142 = v44;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v45))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v44)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v43))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v42)))))))) < v40)
              {
                uint64_t v47 = *((void *)v11 + 4);
                if (*(_DWORD *)(v47 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v48 = *((float *)v11 + 54);
                uint64_t v49 = *(void *)(v47 + 8);
                if (v49)
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = *((void *)v11 + 7);
                  uint64_t v52 = 4 * *(void *)(v47 + 40);
                  do
                  {
                    float v48 = v48 + *(float *)(v51 + 4 * a3->u16[v50++]);
                    v51 += v52;
                  }
                  while (v49 != v50);
                }
                ++v17;
                if (v48 < v8)
                {
                  if (a4) {
                    uint64_t v53 = *(void *)(a4 + 8 * v39);
                  }
                  else {
                    uint64_t v53 = v39 | v46;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v48, v53);
                  int8x16_t v43 = v143;
                  int8x16_t v42 = v146;
                  int8x16_t v45 = v141;
                  int8x16_t v44 = v142;
                }
              }
              a3 += 4;
              ++v39;
            }
            while (v39 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v68 = 0;
            uint64_t v17 = 0;
            int v69 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v70 = **((_DWORD **)a1 + 20);
            uint64_t v71 = v12 << 32;
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v70;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v69)
              {
                uint64_t v72 = *((void *)v11 + 4);
                if (*(_DWORD *)(v72 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v73 = *((float *)v11 + 54);
                uint64_t v74 = *(void *)(v72 + 8);
                if (v74)
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *((void *)v11 + 7);
                  uint64_t v77 = 4 * *(void *)(v72 + 40);
                  do
                  {
                    float v73 = v73 + *(float *)(v76 + 4 * a3->u16[v75++]);
                    v76 += v77;
                  }
                  while (v74 != v75);
                }
                ++v17;
                if (v73 < v8)
                {
                  if (a4) {
                    uint64_t v78 = *(void *)(a4 + 8 * v68);
                  }
                  else {
                    uint64_t v78 = v68 | v71;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v73, v78);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v68;
            }
            while (v68 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 8:
          if (a2)
          {
            uint64_t v108 = 0;
            uint64_t v17 = 0;
            int v109 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v110 = **((void **)a1 + 20);
            uint64_t v111 = v12 << 32;
            do
            {
              uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v110));
              v112.i16[0] = vaddlv_u8(v112);
              if (v109 > v112.i32[0])
              {
                uint64_t v113 = *((void *)v11 + 4);
                if (*(_DWORD *)(v113 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v114 = *((float *)v11 + 54);
                uint64_t v115 = *(void *)(v113 + 8);
                if (v115)
                {
                  uint64_t v116 = 0;
                  uint64_t v117 = *((void *)v11 + 7);
                  uint64_t v118 = 4 * *(void *)(v113 + 40);
                  do
                  {
                    float v114 = v114 + *(float *)(v117 + 4 * a3->u16[v116++]);
                    v117 += v118;
                  }
                  while (v115 != v116);
                }
                ++v17;
                if (v114 < v8)
                {
                  if (a4) {
                    uint64_t v119 = *(void *)(a4 + 8 * v108);
                  }
                  else {
                    uint64_t v119 = v108 | v111;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v114, v119);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v108;
            }
            while (v108 != a2);
            goto LABEL_144;
          }
          goto LABEL_143;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            uint64_t v20 = v12 << 32;
            int8x16_t v145 = v19;
            do
            {
              int32x2_t v21 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v21, 1), v21).i32[0] < v18)
              {
                uint64_t v22 = *((void *)v11 + 4);
                if (*(_DWORD *)(v22 + 16) != 16) {
                  faiss::decode<faiss::PQDecoder16>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = *(void *)(v22 + 8);
                if (v24)
                {
                  uint64_t v25 = 0;
                  uint64_t v26 = *((void *)v11 + 7);
                  uint64_t v27 = 4 * *(void *)(v22 + 40);
                  do
                  {
                    float v23 = v23 + *(float *)(v26 + 4 * a3->u16[v25++]);
                    v26 += v27;
                  }
                  while (v24 != v25);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4) {
                    uint64_t v28 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v28 = v16 | v20;
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v28);
                  int8x16_t v19 = v145;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_144;
          }
LABEL_143:
          uint64_t v17 = 0;
LABEL_144:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_145:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v133;
          return;
      }
    }
    int v96 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v149 = *((void *)a1 + 20);
    int v150 = (int)v15 / 8;
    int v151 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = (int)v15;
      uint64_t v100 = v12 << 32;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v149, (const unsigned __int8 *)a3);
        if ((int)a1 < v96)
        {
          uint64_t v101 = *((void *)v11 + 4);
          if (*(_DWORD *)(v101 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v102 = *((float *)v11 + 54);
          uint64_t v103 = *(void *)(v101 + 8);
          if (v103)
          {
            uint64_t v104 = 0;
            uint64_t v105 = *((void *)v11 + 7);
            uint64_t v106 = 4 * *(void *)(v101 + 40);
            do
            {
              float v102 = v102 + *(float *)(v105 + 4 * a3->u16[v104++]);
              v105 += v106;
            }
            while (v103 != v104);
          }
          ++v98;
          if (v102 < v8)
          {
            if (a4) {
              uint64_t v107 = *(void *)(a4 + 8 * v97);
            }
            else {
              uint64_t v107 = v97 | v100;
            }
            a1 = faiss::RangeQueryResult::add(this, v102, v107);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v99);
        ++v97;
      }
      while (v97 != a2);
    }
    else
    {
      uint64_t v98 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v133 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v98;
    goto LABEL_145;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v54 = 0;
        uint64_t v55 = v12 << 32;
        do
        {
          uint64_t v56 = *((void *)v11 + 4);
          if (*(_DWORD *)(v56 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v57 = *((float *)v11 + 54);
          uint64_t v58 = *(void *)(v56 + 8);
          if (v58)
          {
            uint64_t v59 = *((void *)v11 + 8);
            int8x16_t v60 = (uint64_t *)*((void *)v11 + 14);
            int8x16_t v61 = a3;
            do
            {
              unsigned int v63 = v61->u16[0];
              int8x16_t v61 = (int8x16_t *)((char *)v61 + 2);
              uint64_t v62 = v63;
              uint64_t v64 = *v60++;
              float v57 = v57 + (float)(*(float *)(v64 + 4 * v62) + (float)(*(float *)(v59 + 4 * v62) * -2.0));
              v59 += 4 * *(void *)(v56 + 40);
              --v58;
            }
            while (v58);
          }
          uint64_t v65 = *(void *)(v56 + 32);
          if (v57 < v8)
          {
            if (a4) {
              uint64_t v66 = *(void *)(a4 + 8 * v54);
            }
            else {
              uint64_t v66 = v54 | v55;
            }
            faiss::RangeQueryResult::add(this, v57, v66);
          }
          a3 = (int8x16_t *)((char *)a3 + v65);
          ++v54;
        }
        while (v54 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v149, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v149, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoder16>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v12 << 32;
        do
        {
          uint64_t v31 = *((void *)v11 + 4);
          if (*(_DWORD *)(v31 + 16) != 16) {
            faiss::decode<faiss::PQDecoder16>();
          }
          float v32 = *((float *)v11 + 54);
          uint64_t v33 = *(void *)(v31 + 8);
          if (v33)
          {
            uint64_t v34 = *((void *)v11 + 7);
            float v35 = a3;
            do
            {
              unsigned int v36 = v35->u16[0];
              float v35 = (int8x16_t *)((char *)v35 + 2);
              float v32 = v32 + *(float *)(v34 + 4 * v36);
              v34 += 4 * *(void *)(v31 + 40);
              --v33;
            }
            while (v33);
          }
          uint64_t v37 = *(void *)(v31 + 32);
          if (v32 < v8)
          {
            if (a4) {
              uint64_t v38 = *(void *)(a4 + 8 * v29);
            }
            else {
              uint64_t v38 = v29 | v30;
            }
            faiss::RangeQueryResult::add(this, v32, v38);
          }
          a3 = (int8x16_t *)((char *)a3 + v37);
          ++v29;
        }
        while (v29 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      uint64_t v67 = (const float **)((char *)a1 + 72);
      (*(void (**)(void, void, void, uint64_t))(**(void **)(*((void *)a1 + 1) + 40) + 104))(*(void *)(*((void *)a1 + 1) + 40), *((void *)a1 + 17), *((void *)a1 + 9), v12);
      if (!a2) {
        return;
      }
    }
    else
    {
      uint64_t v67 = (const float **)((char *)a1 + 136);
      if (!a2) {
        return;
      }
    }
    uint64_t v134 = 0;
    float v135 = *v67;
    uint64_t v136 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v137 = *(void *)(*((void *)v11 + 4) + 32);
      float v138 = faiss::fvec_L2sqr(*((faiss **)v11 + 10), v135, *((int *)v11 + 6));
      if (v138 < v8)
      {
        if (a4) {
          uint64_t v139 = *(void *)(a4 + 8 * v134);
        }
        else {
          uint64_t v139 = v134 | v136;
        }
        faiss::RangeQueryResult::add(this, v138, v139);
      }
      a3 = (int8x16_t *)((char *)a3 + v137);
      ++v134;
    }
    while (a2 != v134);
  }
}

void sub_1DD0202E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoder16>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  uint64_t v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::distance_to_code(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v3 = v2[2];
  if ((int)v3 > 64) {
    faiss::decode<faiss::PQDecoderGeneric>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v5 = v2[1];
  if (v5)
  {
    uint64_t v6 = 0;
    LOBYTE(v7) = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = v2[5];
    do
    {
      if (!(_BYTE)v7) {
        LODWORD(v8) = *a2;
      }
      uint64_t v11 = v8 >> v7;
      int v12 = v3 + v7;
      unsigned int v13 = v12 - 8;
      if (v12 < 8)
      {
        LOBYTE(v7) = v3 + v7;
      }
      else
      {
        char v14 = 8 - v7;
        uint64_t v15 = a2 + 1;
        if (v13 < 8)
        {
          ++a2;
        }
        else
        {
          unsigned int v16 = v13 >> 3;
          uint64_t v17 = v16 - 1;
          do
          {
            unsigned int v18 = *v15++;
            v11 |= (unint64_t)v18 << v14;
            v14 += 8;
            --v16;
          }
          while (v16);
          a2 += v17 + 2;
        }
        int v7 = ((_BYTE)v7 + (_BYTE)v3) & 7;
        if (v7)
        {
          uint64_t v8 = *a2;
          v11 |= v8 << v14;
        }
      }
      float result = result + *(float *)(v9 + 4 * (v11 & ~(-1 << v3)));
      v9 += 4 * v10;
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::scan_codes(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  uint64_t v323 = a4;
  int v15 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          uint64_t v108 = *(void **)(a1 + 32);
          uint64_t v109 = v108[2];
          if ((int)v109 > 64) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          uint64_t v18 = 0;
          uint64_t v110 = 0;
          uint64_t v111 = 0;
          uint8x8_t v112 = a5 - 1;
          uint64_t v113 = a6 - 8;
          unint64_t v114 = a7 + 1;
          uint64_t v115 = v108[4];
          uint64_t v316 = *(void *)(a1 + 64);
          uint64_t v116 = v108[1];
          uint64_t v307 = v13 << 32;
LABEL_122:
          float v117 = *(float *)(v12 + 216);
          if (v116)
          {
            uint64_t v118 = 0;
            LOBYTE(v119) = 0;
            LODWORD(v120) = 0;
            uint64_t v121 = v316;
            uint64_t v122 = a3;
            do
            {
              if (!(_BYTE)v119) {
                LODWORD(v120) = v122->u8[0];
              }
              uint64_t v123 = v120 >> v119;
              int v124 = v109 + v119;
              unsigned int v125 = v124 - 8;
              if (v124 < 8)
              {
                LOBYTE(v119) = v109 + v119;
              }
              else
              {
                char v126 = 8 - v119;
                float v127 = &v122->u8[1];
                if (v125 < 8)
                {
                  uint64_t v122 = (int8x16_t *)((char *)v122 + 1);
                }
                else
                {
                  unsigned int v128 = v125 >> 3;
                  unsigned int v129 = (v125 >> 3) - 1;
                  do
                  {
                    unsigned int v130 = *v127++;
                    v123 |= (unint64_t)v130 << v126;
                    v126 += 8;
                    --v128;
                  }
                  while (v128);
                  uint64_t v122 = (int8x16_t *)((char *)v122 + v129 + 2);
                }
                int v119 = ((_BYTE)v119 + (_BYTE)v109) & 7;
                if (v119)
                {
                  uint64_t v120 = v122->u8[0];
                  v123 |= v120 << v126;
                }
              }
              float v117 = v117
                   + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v118)
                                      + 4 * (int)(v123 & ~(-1 << v109)))
                           + (float)(*(float *)(v121 + 4 * (int)(v123 & ~(-1 << v109))) * -2.0));
              v121 += 4 * v108[5];
              ++v118;
            }
            while (v118 != v116);
          }
          if (*a5 >= v117) {
            goto LABEL_152;
          }
          if (v323) {
            uint64_t v131 = *(void *)(v323 + 8 * v111);
          }
          else {
            uint64_t v131 = v111 | v307;
          }
          if (a7 < 2)
          {
            uint64_t v132 = 1;
            goto LABEL_151;
          }
          uint64_t v133 = 3;
          unint64_t v134 = 2;
          uint64_t v135 = 1;
          while (1)
          {
            float v136 = v112[v134];
            if (v133 == v114 || (float v137 = v112[v133], v136 < v137))
            {
              if (v136 > v117) {
                goto LABEL_150;
              }
            }
            else
            {
              float v136 = v112[v133];
              unint64_t v134 = v133;
              if (v137 > v117)
              {
LABEL_150:
                uint64_t v132 = v135;
LABEL_151:
                v112[v132] = v117;
                *(void *)(v113 + 8 * v132) = v131;
                uint64_t v18 = ++v110;
LABEL_152:
                a3 = (int8x16_t *)((char *)a3 + v115);
                if (++v111 == a2) {
                  return v18;
                }
                goto LABEL_122;
              }
            }
            uint64_t v132 = v134;
            v112[v135] = v136;
            *(void *)(v113 + 8 * v135) = *(void *)(v113 + 8 * v134);
            v134 *= 2;
            uint64_t v133 = (2 * v132) | 1;
            uint64_t v135 = v132;
            if (v134 > a7) {
              goto LABEL_151;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v325, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v325, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoderGeneric>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v47 = *(void **)(a1 + 32);
          uint64_t v48 = v47[2];
          if ((int)v48 > 64) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          uint64_t v18 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = a5 - 1;
          uint64_t v52 = a6 - 8;
          unint64_t v53 = a7 + 1;
          uint64_t v54 = v47[4];
          uint64_t v55 = *(void *)(a1 + 56);
          uint64_t v56 = v47[1];
          uint64_t v314 = v13 << 32;
LABEL_50:
          float v57 = *(float *)(v12 + 216);
          if (v56)
          {
            uint64_t v58 = 0;
            LOBYTE(v59) = 0;
            LODWORD(v60) = 0;
            uint64_t v61 = v55;
            uint64_t v62 = a3;
            do
            {
              if (!(_BYTE)v59) {
                LODWORD(v60) = v62->u8[0];
              }
              uint64_t v63 = v60 >> v59;
              int v64 = v48 + v59;
              unsigned int v65 = v64 - 8;
              if (v64 < 8)
              {
                LOBYTE(v59) = v48 + v59;
              }
              else
              {
                char v66 = 8 - v59;
                uint64_t v67 = &v62->u8[1];
                if (v65 < 8)
                {
                  uint64_t v62 = (int8x16_t *)((char *)v62 + 1);
                }
                else
                {
                  unsigned int v68 = v65 >> 3;
                  unsigned int v69 = v68 - 1;
                  do
                  {
                    unsigned int v70 = *v67++;
                    v63 |= (unint64_t)v70 << v66;
                    v66 += 8;
                    --v68;
                  }
                  while (v68);
                  uint64_t v62 = (int8x16_t *)((char *)v62 + v69 + 2);
                }
                int v59 = ((_BYTE)v59 + (_BYTE)v48) & 7;
                if (v59)
                {
                  uint64_t v60 = v62->u8[0];
                  v63 |= v60 << v66;
                }
              }
              float v57 = v57 + *(float *)(v61 + 4 * (v63 & ~(-1 << v48)));
              v61 += 4 * v47[5];
              ++v58;
            }
            while (v58 != v56);
          }
          if (*a5 >= v57) {
            goto LABEL_80;
          }
          if (v323) {
            uint64_t v71 = *(void *)(v323 + 8 * v50);
          }
          else {
            uint64_t v71 = v50 | v314;
          }
          if (a7 < 2)
          {
            uint64_t v72 = 1;
            goto LABEL_79;
          }
          uint64_t v73 = 3;
          unint64_t v74 = 2;
          uint64_t v75 = 1;
          while (1)
          {
            float v76 = v51[v74];
            if (v73 == v53 || (float v77 = v51[v73], v76 < v77))
            {
              if (v76 > v57) {
                goto LABEL_78;
              }
            }
            else
            {
              float v76 = v51[v73];
              unint64_t v74 = v73;
              if (v77 > v57)
              {
LABEL_78:
                uint64_t v72 = v75;
LABEL_79:
                v51[v72] = v57;
                *(void *)(v52 + 8 * v72) = v71;
                uint64_t v18 = ++v49;
LABEL_80:
                a3 = (int8x16_t *)((char *)a3 + v54);
                if (++v50 == a2) {
                  return v18;
                }
                goto LABEL_50;
              }
            }
            uint64_t v72 = v74;
            v51[v75] = v76;
            *(void *)(v52 + 8 * v75) = *(void *)(v52 + 8 * v74);
            v74 *= 2;
            uint64_t v73 = (2 * v72) | 1;
            uint64_t v75 = v72;
            if (v74 > a7) {
              goto LABEL_79;
            }
          }
        }
      }
      return 0;
    }
    if (*(unsigned char *)(a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 40) + 80))(*(void *)(*(void *)(a1 + 8) + 40), v13, *(void *)(a1 + 72));
      float v138 = faiss::fvec_inner_product(*(faiss **)(v12 + 72), *(const float **)(v12 + 136), *(int *)(v12 + 24));
      if (!a2) {
        return 0;
      }
    }
    else
    {
      float v138 = 0.0;
      if (!a2) {
        return 0;
      }
    }
    uint64_t v18 = 0;
    uint64_t v139 = 0;
    uint64_t v317 = v13 << 32;
    uint64_t v140 = a5 - 1;
    uint64_t v141 = a6 - 8;
LABEL_157:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
    uint64_t v142 = *(void *)(*(void *)(v12 + 32) + 32);
    float v143 = v138 + faiss::fvec_inner_product(*(faiss **)(v12 + 80), *(const float **)(v12 + 136), *(int *)(v12 + 24));
    if (*a5 >= v143) {
      goto LABEL_173;
    }
    if (v323) {
      uint64_t v144 = *(void *)(v323 + 8 * v139);
    }
    else {
      uint64_t v144 = v139 | v317;
    }
    if (a7 < 2)
    {
      uint64_t v145 = 1;
      goto LABEL_172;
    }
    uint64_t v146 = 3;
    unint64_t v147 = 2;
    uint64_t v148 = 1;
    while (1)
    {
      float v149 = v140[v147];
      if (v146 == a7 + 1 || (float v150 = v140[v146], v149 < v150))
      {
        if (v149 > v143) {
          goto LABEL_171;
        }
      }
      else
      {
        float v149 = v140[v146];
        unint64_t v147 = v146;
        if (v150 > v143)
        {
LABEL_171:
          uint64_t v145 = v148;
LABEL_172:
          v140[v145] = v143;
          *(void *)(v141 + 8 * v145) = v144;
          ++v18;
LABEL_173:
          a3 = (int8x16_t *)((char *)a3 + v142);
          if (++v139 == a2) {
            return v18;
          }
          goto LABEL_157;
        }
      }
      uint64_t v145 = v147;
      v140[v148] = v149;
      *(void *)(v141 + 8 * v148) = *(void *)(v141 + 8 * v147);
      v147 *= 2;
      uint64_t v146 = (2 * v145) | 1;
      uint64_t v148 = v145;
      if (v147 > a7) {
        goto LABEL_172;
      }
    }
  }
  if (v15 != 2) {
  unsigned int v16 = *(void **)(a1 + 32);
  }
  uint64_t v17 = v16[4];
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v179 = 0;
          uint64_t v20 = 0;
          __int32 v180 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          float v181 = *(int8x16_t **)(a1 + 160);
          int8x16_t v182 = *v181;
          uint64_t v183 = a5 - 1;
          uint64_t v184 = a6 - 8;
          __int32 v185 = v181[1].i32[0];
          unint64_t v186 = a7 + 1;
          uint64_t v302 = v13 << 32;
          uint64_t v309 = 0;
          a1 = 8;
          __int32 v319 = v180;
LABEL_211:
          int32x2_t v187 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v182))))));
          int8x8_t v188 = (int8x8_t)vadd_s32(vdup_lane_s32(v187, 1), v187);
          __int32 v189 = v188.i32[0];
          v188.i32[0] = a3[1].i32[0] ^ v185;
          uint8x8_t v190 = (uint8x8_t)vcnt_s8(v188);
          v190.i16[0] = vaddlv_u8(v190);
          if (v189 + v190.i32[0] >= v180) {
            goto LABEL_241;
          }
          uint64_t v191 = v16[2];
          if ((int)v191 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v192 = *(float *)(v12 + 216);
          uint64_t v193 = v16[1];
          if (v193)
          {
            uint64_t v194 = 0;
            LOBYTE(v195) = 0;
            LODWORD(v196) = 0;
            uint64_t v197 = *(void *)(v12 + 56);
            uint64_t v198 = a3;
            do
            {
              if (!(_BYTE)v195) {
                LODWORD(v196) = v198->u8[0];
              }
              uint64_t v199 = v196 >> v195;
              int v200 = v191 + v195;
              unsigned int v201 = v200 - 8;
              if (v200 < 8)
              {
                LOBYTE(v195) = v191 + v195;
                uint64_t v203 = v198;
              }
              else
              {
                char v202 = 8 - v195;
                uint64_t v203 = (int8x16_t *)&v198->i8[1];
                unsigned int v204 = v201 >> 3;
                if (v201 >= 8)
                {
                  do
                  {
                    unsigned int v205 = v203->u8[0];
                    uint64_t v203 = (int8x16_t *)((char *)v203 + 1);
                    v199 |= (unint64_t)v205 << v202;
                    v202 += 8;
                    --v204;
                  }
                  while (v204);
                  uint64_t v203 = (int8x16_t *)&v198->i8[(v201 >> 3) + 1];
                }
                int v195 = ((_BYTE)v195 + (_BYTE)v191) & 7;
                if (v195)
                {
                  uint64_t v196 = v203->u8[0];
                  v199 |= v196 << v202;
                }
              }
              float v192 = v192 + *(float *)(v197 + 4 * (v199 & ~(-1 << v191)));
              v197 += 4 * v16[5];
              ++v194;
              uint64_t v198 = v203;
            }
            while (v194 != v193);
          }
          ++v20;
          __int32 v180 = v319;
          if (*a5 >= v192) {
            goto LABEL_241;
          }
          if (v323) {
            uint64_t v206 = *(void *)(v323 + 8 * v179);
          }
          else {
            uint64_t v206 = v179 | v302;
          }
          if (a7 < 2)
          {
            uint64_t v207 = 1;
            goto LABEL_240;
          }
          uint64_t v208 = 3;
          unint64_t v209 = 2;
          uint64_t v210 = 1;
          while (1)
          {
            float v211 = v183[v209];
            if (v208 == v186 || (float v212 = v183[v208], v211 < v212))
            {
              if (v211 > v192) {
                goto LABEL_239;
              }
            }
            else
            {
              float v211 = v183[v208];
              unint64_t v209 = v208;
              if (v212 > v192)
              {
LABEL_239:
                uint64_t v207 = v210;
LABEL_240:
                v183[v207] = v192;
                *(void *)(v184 + 8 * v207) = v206;
                uint64_t v18 = ++v309;
LABEL_241:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v179 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_211;
              }
            }
            uint64_t v207 = v209;
            v183[v210] = v211;
            *(void *)(v184 + 8 * v210) = *(void *)(v184 + 8 * v209);
            v209 *= 2;
            uint64_t v208 = (2 * v207) | 1;
            uint64_t v210 = v207;
            if (v209 > a7) {
              goto LABEL_240;
            }
          }
        }
        break;
      case 32:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v270 = 0;
          uint64_t v20 = 0;
          int v271 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          v272 = *(int8x16_t **)(a1 + 160);
          uint64_t v273 = a5 - 1;
          uint64_t v274 = a6 - 8;
          int8x16_t v276 = *v272;
          int8x16_t v275 = v272[1];
          unint64_t v277 = a7 + 1;
          uint64_t v312 = v13 << 32;
          uint64_t v322 = 0;
LABEL_313:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v276))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v275))))))) >= v271)goto LABEL_343; {
          a1 = v16[2];
          }
          if ((int)a1 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v278 = *(float *)(v12 + 216);
          uint64_t v279 = v16[1];
          if (v279)
          {
            uint64_t v280 = 0;
            LOBYTE(v281) = 0;
            LODWORD(v282) = 0;
            uint64_t v283 = *(void *)(v12 + 56);
            v284 = a3;
            do
            {
              if (!(_BYTE)v281) {
                LODWORD(v282) = v284->u8[0];
              }
              uint64_t v285 = v282 >> v281;
              int v286 = a1 + v281;
              unsigned int v287 = v286 - 8;
              if (v286 < 8)
              {
                LOBYTE(v281) = a1 + v281;
                float v289 = v284;
              }
              else
              {
                char v288 = 8 - v281;
                float v289 = (int8x16_t *)&v284->i8[1];
                unsigned int v290 = v287 >> 3;
                if (v287 >= 8)
                {
                  do
                  {
                    unsigned int v291 = v289->u8[0];
                    float v289 = (int8x16_t *)((char *)v289 + 1);
                    v285 |= (unint64_t)v291 << v288;
                    v288 += 8;
                    --v290;
                  }
                  while (v290);
                  float v289 = (int8x16_t *)&v284->i8[(v287 >> 3) + 1];
                }
                int v281 = ((_BYTE)v281 + (_BYTE)a1) & 7;
                if (v281)
                {
                  uint64_t v282 = v289->u8[0];
                  v285 |= v282 << v288;
                }
              }
              float v278 = v278 + *(float *)(v283 + 4 * (v285 & ~(-1 << a1)));
              v283 += 4 * v16[5];
              ++v280;
              v284 = v289;
            }
            while (v280 != v279);
          }
          ++v20;
          if (*a5 >= v278) {
            goto LABEL_343;
          }
          if (v323) {
            a1 = *(void *)(v323 + 8 * v270);
          }
          else {
            a1 = v270 | v312;
          }
          if (a7 < 2)
          {
            uint64_t v292 = 1;
            goto LABEL_342;
          }
          uint64_t v293 = 3;
          unint64_t v294 = 2;
          uint64_t v295 = 1;
          while (1)
          {
            float v296 = v273[v294];
            if (v293 == v277 || (float v297 = v273[v293], v296 < v297))
            {
              if (v296 > v278) {
                goto LABEL_341;
              }
            }
            else
            {
              float v296 = v273[v293];
              unint64_t v294 = v293;
              if (v297 > v278)
              {
LABEL_341:
                uint64_t v292 = v295;
LABEL_342:
                v273[v292] = v278;
                *(void *)(v274 + 8 * v292) = a1;
                uint64_t v18 = ++v322;
LABEL_343:
                a3 += 2;
                if (++v270 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_313;
              }
            }
            uint64_t v292 = v294;
            v273[v295] = v296;
            *(void *)(v274 + 8 * v295) = *(void *)(v274 + 8 * v294);
            v294 *= 2;
            uint64_t v293 = (2 * v292) | 1;
            uint64_t v295 = v292;
            if (v294 > a7) {
              goto LABEL_342;
            }
          }
        }
        break;
      case 64:
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v78 = 0;
          uint64_t v20 = 0;
          int v79 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          __int32 v80 = *(int8x16_t **)(a1 + 160);
          int8x16_t v82 = v80[2];
          int8x16_t v81 = v80[3];
          __int32 v83 = a5 - 1;
          uint64_t v84 = a6 - 8;
          int8x16_t v86 = *v80;
          int8x16_t v85 = v80[1];
          unint64_t v87 = a7 + 1;
          uint64_t v306 = v13 << 32;
          uint64_t v315 = 0;
LABEL_87:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v86))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v85)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v82))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v81)))))))) >= v79)goto LABEL_117; {
          a1 = v16[2];
          }
          if ((int)a1 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v88 = *(float *)(v12 + 216);
          uint64_t v89 = v16[1];
          if (v89)
          {
            uint64_t v90 = 0;
            LOBYTE(v91) = 0;
            LODWORD(v92) = 0;
            uint64_t v93 = *(void *)(v12 + 56);
            uint64_t v94 = a3;
            do
            {
              if (!(_BYTE)v91) {
                LODWORD(v92) = v94->u8[0];
              }
              uint64_t v95 = v92 >> v91;
              int v96 = a1 + v91;
              unsigned int v97 = v96 - 8;
              if (v96 < 8)
              {
                LOBYTE(v91) = a1 + v91;
                uint64_t v99 = v94;
              }
              else
              {
                char v98 = 8 - v91;
                uint64_t v99 = (int8x16_t *)&v94->i8[1];
                unsigned int v100 = v97 >> 3;
                if (v97 >= 8)
                {
                  do
                  {
                    unsigned int v101 = v99->u8[0];
                    uint64_t v99 = (int8x16_t *)((char *)v99 + 1);
                    v95 |= (unint64_t)v101 << v98;
                    v98 += 8;
                    --v100;
                  }
                  while (v100);
                  uint64_t v99 = (int8x16_t *)&v94->i8[(v97 >> 3) + 1];
                }
                int v91 = ((_BYTE)v91 + (_BYTE)a1) & 7;
                if (v91)
                {
                  uint64_t v92 = v99->u8[0];
                  v95 |= v92 << v98;
                }
              }
              float v88 = v88 + *(float *)(v93 + 4 * (v95 & ~(-1 << a1)));
              v93 += 4 * v16[5];
              ++v90;
              uint64_t v94 = v99;
            }
            while (v90 != v89);
          }
          ++v20;
          if (*a5 >= v88) {
            goto LABEL_117;
          }
          if (v323) {
            a1 = *(void *)(v323 + 8 * v78);
          }
          else {
            a1 = v78 | v306;
          }
          if (a7 < 2)
          {
            uint64_t v102 = 1;
            goto LABEL_116;
          }
          uint64_t v103 = 3;
          unint64_t v104 = 2;
          uint64_t v105 = 1;
          while (1)
          {
            float v106 = v83[v104];
            if (v103 == v87 || (float v107 = v83[v103], v106 < v107))
            {
              if (v106 > v88) {
                goto LABEL_115;
              }
            }
            else
            {
              float v106 = v83[v103];
              unint64_t v104 = v103;
              if (v107 > v88)
              {
LABEL_115:
                uint64_t v102 = v105;
LABEL_116:
                v83[v102] = v88;
                *(void *)(v84 + 8 * v102) = a1;
                uint64_t v18 = ++v315;
LABEL_117:
                a3 += 4;
                if (++v78 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_87;
              }
            }
            uint64_t v102 = v104;
            v83[v105] = v106;
            *(void *)(v84 + 8 * v105) = *(void *)(v84 + 8 * v104);
            v104 *= 2;
            uint64_t v103 = (2 * v102) | 1;
            uint64_t v105 = v102;
            if (v104 > a7) {
              goto LABEL_116;
            }
          }
        }
        break;
      default:
LABEL_243:
        int v320 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
        uint64_t v325 = *(void *)(a1 + 160);
        int v326 = (int)v17 / 8;
        int v327 = v17 - (v16 & 0xFFFFFFF8);
        if (!a2)
        {
          uint64_t v303 = 0;
          uint64_t v214 = 0;
          goto LABEL_350;
        }
        uint64_t v213 = 0;
        uint64_t v214 = 0;
        uint64_t v303 = 0;
        uint64_t v310 = (int)v17;
        uint64_t v300 = v13 << 32;
        uint64_t v215 = a5 - 1;
        uint64_t v216 = a6 - 8;
        unint64_t v217 = a7 + 1;
LABEL_245:
        a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v325, (const unsigned __int8 *)a3);
        if ((int)a1 >= v320) {
          goto LABEL_275;
        }
        v218 = *(void **)(v12 + 32);
        uint64_t v219 = v218[2];
        if ((int)v219 >= 65) {
          faiss::decode<faiss::PQDecoderGeneric>();
        }
        float v220 = *(float *)(v12 + 216);
        uint64_t v221 = v218[1];
        if (v221)
        {
          uint64_t v222 = 0;
          LOBYTE(v223) = 0;
          LODWORD(v224) = 0;
          uint64_t v225 = *(void *)(v12 + 56);
          uint64_t v226 = v218[5];
          uint64_t v227 = a3;
          do
          {
            if (!(_BYTE)v223) {
              LODWORD(v224) = v227->u8[0];
            }
            uint64_t v228 = v224 >> v223;
            int v229 = v219 + v223;
            unsigned int v230 = v229 - 8;
            if (v229 < 8)
            {
              LOBYTE(v223) = v219 + v223;
              a1 = (uint64_t)v227;
            }
            else
            {
              char v231 = 8 - v223;
              a1 = (uint64_t)v227->i64 + 1;
              unsigned int v232 = v230 >> 3;
              if (v230 >= 8)
              {
                do
                {
                  unsigned int v233 = *(unsigned __int8 *)a1++;
                  v228 |= (unint64_t)v233 << v231;
                  v231 += 8;
                  --v232;
                }
                while (v232);
                a1 = (uint64_t)v227->i64 + (v230 >> 3) + 1;
              }
              int v223 = ((_BYTE)v223 + (_BYTE)v219) & 7;
              if (v223)
              {
                uint64_t v224 = *(unsigned __int8 *)a1;
                v228 |= v224 << v231;
              }
            }
            float v220 = v220 + *(float *)(v225 + 4 * (v228 & ~(-1 << v219)));
            v225 += 4 * v226;
            ++v222;
            uint64_t v227 = (int8x16_t *)a1;
          }
          while (v222 != v221);
        }
        ++v214;
        if (*a5 >= v220) {
          goto LABEL_275;
        }
        if (v323) {
          uint64_t v234 = *(void *)(v323 + 8 * v213);
        }
        else {
          uint64_t v234 = v213 | v300;
        }
        if (a7 < 2)
        {
          uint64_t v235 = 1;
          goto LABEL_274;
        }
        uint64_t v236 = 3;
        unint64_t v237 = 2;
        uint64_t v238 = 1;
        while (1)
        {
          float v239 = v215[v237];
          if (v236 == v217 || (float v240 = v215[v236], v239 < v240))
          {
            if (v239 > v220) {
              goto LABEL_273;
            }
          }
          else
          {
            float v239 = v215[v236];
            unint64_t v237 = v236;
            if (v240 > v220)
            {
LABEL_273:
              uint64_t v235 = v238;
LABEL_274:
              v215[v235] = v220;
              *(void *)(v216 + 8 * v235) = v234;
              ++v303;
LABEL_275:
              a3 = (int8x16_t *)((char *)a3 + v310);
              if (++v213 == a2)
              {
LABEL_350:
                faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
                *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) += v214;
                return v303;
              }
              goto LABEL_245;
            }
          }
          uint64_t v235 = v237;
          v215[v238] = v239;
          *(void *)(v216 + 8 * v238) = *(void *)(v216 + 8 * v237);
          v237 *= 2;
          uint64_t v236 = (2 * v235) | 1;
          uint64_t v238 = v235;
          if (v237 > a7) {
            goto LABEL_274;
          }
        }
    }
LABEL_345:
    uint64_t v20 = 0;
    goto LABEL_346;
  }
  if (v17 == 4)
  {
    uint64_t v18 = 0;
    if (a2)
    {
      uint64_t v151 = 0;
      uint64_t v20 = 0;
      int v152 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
      uint8x8_t v153 = a5 - 1;
      uint64_t v154 = a6 - 8;
      int v155 = **(_DWORD **)(a1 + 160);
      unint64_t v156 = a7 + 1;
      uint64_t v301 = v13 << 32;
      uint64_t v308 = 0;
      a1 = 8;
      int v318 = v152;
LABEL_177:
      a8.i32[0] = a3->i32[0] ^ v155;
      a8 = vcnt_s8(a8);
      a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
      if (a8.i32[0] >= v152) {
        goto LABEL_207;
      }
      uint64_t v157 = v16[2];
      if ((int)v157 >= 65) {
        faiss::decode<faiss::PQDecoderGeneric>();
      }
      float v158 = *(float *)(v12 + 216);
      uint64_t v159 = v16[1];
      if (v159)
      {
        uint64_t v160 = 0;
        LOBYTE(v161) = 0;
        LODWORD(v162) = 0;
        uint64_t v163 = *(void *)(v12 + 56);
        uint64_t v164 = a3;
        do
        {
          if (!(_BYTE)v161) {
            LODWORD(v162) = v164->u8[0];
          }
          uint64_t v165 = v162 >> v161;
          int v166 = v157 + v161;
          unsigned int v167 = v166 - 8;
          if (v166 < 8)
          {
            LOBYTE(v161) = v157 + v161;
            uint64_t v169 = v164;
          }
          else
          {
            char v168 = 8 - v161;
            uint64_t v169 = (int8x16_t *)&v164->i8[1];
            unsigned int v170 = v167 >> 3;
            if (v167 >= 8)
            {
              do
              {
                unsigned int v171 = v169->u8[0];
                uint64_t v169 = (int8x16_t *)((char *)v169 + 1);
                v165 |= (unint64_t)v171 << v168;
                v168 += 8;
                --v170;
              }
              while (v170);
              uint64_t v169 = (int8x16_t *)&v164->i8[(v167 >> 3) + 1];
            }
            int v161 = ((_BYTE)v161 + (_BYTE)v157) & 7;
            if (v161)
            {
              uint64_t v162 = v169->u8[0];
              v165 |= v162 << v168;
            }
          }
          float v158 = v158 + *(float *)(v163 + 4 * (v165 & ~(-1 << v157)));
          v163 += 4 * v16[5];
          ++v160;
          uint64_t v164 = v169;
        }
        while (v160 != v159);
      }
      ++v20;
      int v152 = v318;
      if (*a5 >= v158) {
        goto LABEL_207;
      }
      if (v323) {
        uint64_t v172 = *(void *)(v323 + 8 * v151);
      }
      else {
        uint64_t v172 = v151 | v301;
      }
      if (a7 < 2)
      {
        uint64_t v173 = 1;
        goto LABEL_206;
      }
      uint64_t v174 = 3;
      unint64_t v175 = 2;
      uint64_t v176 = 1;
      while (1)
      {
        float v177 = v153[v175];
        if (v174 == v156 || (float v178 = v153[v174], v177 < v178))
        {
          if (v177 > v158) {
            goto LABEL_205;
          }
        }
        else
        {
          float v177 = v153[v174];
          unint64_t v175 = v174;
          if (v178 > v158)
          {
LABEL_205:
            uint64_t v173 = v176;
LABEL_206:
            v153[v173] = v158;
            *(void *)(v154 + 8 * v173) = v172;
            uint64_t v18 = ++v308;
LABEL_207:
            a3 = (int8x16_t *)((char *)a3 + 4);
            if (++v151 == a2) {
              goto LABEL_346;
            }
            goto LABEL_177;
          }
        }
        uint64_t v173 = v175;
        v153[v176] = v177;
        *(void *)(v154 + 8 * v176) = *(void *)(v154 + 8 * v175);
        v175 *= 2;
        uint64_t v174 = (2 * v173) | 1;
        uint64_t v176 = v173;
        if (v175 > a7) {
          goto LABEL_206;
        }
      }
    }
    goto LABEL_345;
  }
  if (v17 == 8)
  {
    uint64_t v18 = 0;
    if (a2)
    {
      uint64_t v241 = 0;
      uint64_t v20 = 0;
      int v242 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
      uint64_t v243 = a5 - 1;
      uint64_t v244 = a6 - 8;
      uint64_t v245 = **(void **)(a1 + 160);
      unint64_t v246 = a7 + 1;
      uint64_t v304 = v13 << 32;
      uint64_t v311 = 0;
      a1 = 8;
      int v321 = v242;
LABEL_279:
      uint8x8_t v247 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v245));
      v247.i16[0] = vaddlv_u8(v247);
      if (v242 <= v247.i32[0]) {
        goto LABEL_309;
      }
      uint64_t v248 = v16[2];
      if ((int)v248 >= 65) {
        faiss::decode<faiss::PQDecoderGeneric>();
      }
      float v249 = *(float *)(v12 + 216);
      uint64_t v250 = v16[1];
      if (v250)
      {
        uint64_t v251 = 0;
        LOBYTE(v252) = 0;
        LODWORD(v253) = 0;
        uint64_t v254 = *(void *)(v12 + 56);
        unint64_t v255 = a3;
        do
        {
          if (!(_BYTE)v252) {
            LODWORD(v253) = v255->u8[0];
          }
          uint64_t v256 = v253 >> v252;
          int v257 = v248 + v252;
          unsigned int v258 = v257 - 8;
          if (v257 < 8)
          {
            LOBYTE(v252) = v248 + v252;
            uint64_t v260 = v255;
          }
          else
          {
            char v259 = 8 - v252;
            uint64_t v260 = (int8x16_t *)&v255->i8[1];
            unsigned int v261 = v258 >> 3;
            if (v258 >= 8)
            {
              do
              {
                unsigned int v262 = v260->u8[0];
                uint64_t v260 = (int8x16_t *)((char *)v260 + 1);
                v256 |= (unint64_t)v262 << v259;
                v259 += 8;
                --v261;
              }
              while (v261);
              uint64_t v260 = (int8x16_t *)&v255->i8[(v258 >> 3) + 1];
            }
            int v252 = ((_BYTE)v252 + (_BYTE)v248) & 7;
            if (v252)
            {
              uint64_t v253 = v260->u8[0];
              v256 |= v253 << v259;
            }
          }
          float v249 = v249 + *(float *)(v254 + 4 * (v256 & ~(-1 << v248)));
          v254 += 4 * v16[5];
          ++v251;
          unint64_t v255 = v260;
        }
        while (v251 != v250);
      }
      ++v20;
      int v242 = v321;
      if (*a5 >= v249) {
        goto LABEL_309;
      }
      if (v323) {
        uint64_t v263 = *(void *)(v323 + 8 * v241);
      }
      else {
        uint64_t v263 = v241 | v304;
      }
      if (a7 < 2)
      {
        uint64_t v264 = 1;
        goto LABEL_308;
      }
      uint64_t v265 = 3;
      unint64_t v266 = 2;
      uint64_t v267 = 1;
      while (1)
      {
        float v268 = v243[v266];
        if (v265 == v246 || (float v269 = v243[v265], v268 < v269))
        {
          if (v268 > v249) {
            goto LABEL_307;
          }
        }
        else
        {
          float v268 = v243[v265];
          unint64_t v266 = v265;
          if (v269 > v249)
          {
LABEL_307:
            uint64_t v264 = v267;
LABEL_308:
            v243[v264] = v249;
            *(void *)(v244 + 8 * v264) = v263;
            uint64_t v18 = ++v311;
LABEL_309:
            a3 = (int8x16_t *)((char *)a3 + 8);
            if (++v241 == a2) {
              goto LABEL_346;
            }
            goto LABEL_279;
          }
        }
        uint64_t v264 = v266;
        v243[v267] = v268;
        *(void *)(v244 + 8 * v267) = *(void *)(v244 + 8 * v266);
        v266 *= 2;
        uint64_t v265 = (2 * v264) | 1;
        uint64_t v267 = v264;
        if (v266 > a7) {
          goto LABEL_308;
        }
      }
    }
    goto LABEL_345;
  }
  if (v17 != 16) {
    goto LABEL_243;
  }
  uint64_t v18 = 0;
  if (!a2) {
    goto LABEL_345;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  __int32 v21 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v22 = a5 - 1;
  uint64_t v23 = a6 - 8;
  int8x16_t v24 = *(int8x16_t *)*(void *)(a1 + 160);
  unint64_t v25 = a7 + 1;
  uint64_t v305 = v13 << 32;
  uint64_t v313 = 0;
  do
  {
    int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v24))))));
    if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v21) {
      goto LABEL_42;
    }
    a1 = v16[2];
    if ((int)a1 >= 65) {
      faiss::decode<faiss::PQDecoderGeneric>();
    }
    float v27 = *(float *)(v12 + 216);
    uint64_t v28 = v16[1];
    if (v28)
    {
      uint64_t v29 = 0;
      LOBYTE(v30) = 0;
      LODWORD(v31) = 0;
      uint64_t v32 = *(void *)(v12 + 56);
      uint64_t v33 = a3;
      do
      {
        if (!(_BYTE)v30) {
          LODWORD(v31) = v33->u8[0];
        }
        uint64_t v34 = v31 >> v30;
        int v35 = a1 + v30;
        unsigned int v36 = v35 - 8;
        if (v35 < 8)
        {
          LOBYTE(v30) = a1 + v30;
          uint64_t v38 = v33;
        }
        else
        {
          char v37 = 8 - v30;
          uint64_t v38 = (int8x16_t *)&v33->i8[1];
          unsigned int v39 = v36 >> 3;
          if (v36 >= 8)
          {
            do
            {
              unsigned int v40 = v38->u8[0];
              uint64_t v38 = (int8x16_t *)((char *)v38 + 1);
              v34 |= (unint64_t)v40 << v37;
              v37 += 8;
              --v39;
            }
            while (v39);
            uint64_t v38 = (int8x16_t *)&v33->i8[(v36 >> 3) + 1];
          }
          int v30 = ((_BYTE)v30 + (_BYTE)a1) & 7;
          if (v30)
          {
            uint64_t v31 = v38->u8[0];
            v34 |= v31 << v37;
          }
        }
        float v27 = v27 + *(float *)(v32 + 4 * (v34 & ~(-1 << a1)));
        v32 += 4 * v16[5];
        ++v29;
        uint64_t v33 = v38;
      }
      while (v29 != v28);
    }
    ++v20;
    if (*a5 >= v27) {
      goto LABEL_42;
    }
    if (v323) {
      a1 = *(void *)(v323 + 8 * v19);
    }
    else {
      a1 = v19 | v305;
    }
    if (a7 < 2)
    {
      uint64_t v41 = 1;
      goto LABEL_41;
    }
    uint64_t v42 = 3;
    unint64_t v43 = 2;
    uint64_t v44 = 1;
    while (1)
    {
      float v45 = v22[v43];
      if (v42 != v25)
      {
        float v46 = v22[v42];
        if (v45 >= v46) {
          break;
        }
      }
      if (v45 > v27) {
        goto LABEL_40;
      }
LABEL_38:
      uint64_t v41 = v43;
      v22[v44] = v45;
      *(void *)(v23 + 8 * v44) = *(void *)(v23 + 8 * v43);
      v43 *= 2;
      uint64_t v42 = (2 * v41) | 1;
      uint64_t v44 = v41;
      if (v43 > a7) {
        goto LABEL_41;
      }
    }
    float v45 = v22[v42];
    unint64_t v43 = v42;
    if (v46 <= v27) {
      goto LABEL_38;
    }
LABEL_40:
    uint64_t v41 = v44;
LABEL_41:
    v22[v41] = v27;
    *(void *)(v23 + 8 * v41) = a1;
    uint64_t v18 = ++v313;
LABEL_42:
    ++a3;
    ++v19;
  }
  while (v19 != a2);
LABEL_346:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) += v20;
  return v18;
}

void sub_1DD021BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  uint64_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v125 = 0;
            uint64_t v17 = 0;
            __int32 v126 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            float v127 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v128 = *v127;
            __int32 v129 = v127[1].i32[0];
            int8x16_t v228 = *v127;
            do
            {
              int32x2_t v130 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v128))))));
              int8x8_t v131 = (int8x8_t)vadd_s32(vdup_lane_s32(v130, 1), v130);
              __int32 v132 = v131.i32[0];
              v131.i32[0] = a3[1].i32[0] ^ v129;
              uint8x8_t v133 = (uint8x8_t)vcnt_s8(v131);
              v133.i16[0] = vaddlv_u8(v133);
              if (v132 + v133.i32[0] < v126)
              {
                unint64_t v134 = (void *)*((void *)v11 + 4);
                uint64_t v135 = v134[2];
                if ((int)v135 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v136 = *((float *)v11 + 54);
                uint64_t v137 = v134[1];
                if (v137)
                {
                  uint64_t v138 = 0;
                  LOBYTE(v139) = 0;
                  LODWORD(v140) = 0;
                  uint64_t v141 = *((void *)v11 + 7);
                  uint64_t v142 = v134[5];
                  float v143 = a3;
                  do
                  {
                    if (!(_BYTE)v139) {
                      LODWORD(v140) = v143->u8[0];
                    }
                    uint64_t v144 = v140 >> v139;
                    int v145 = v135 + v139;
                    unsigned int v146 = v145 - 8;
                    if (v145 < 8)
                    {
                      LOBYTE(v139) = v135 + v139;
                      a1 = (faiss::BufferList *)v143;
                    }
                    else
                    {
                      char v147 = 8 - v139;
                      a1 = (faiss::BufferList *)&v143->i8[1];
                      unsigned int v148 = v146 >> 3;
                      if (v146 >= 8)
                      {
                        do
                        {
                          unsigned int v149 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v144 |= (unint64_t)v149 << v147;
                          v147 += 8;
                          --v148;
                        }
                        while (v148);
                        a1 = (faiss::BufferList *)&v143->i8[(v146 >> 3) + 1];
                      }
                      int v139 = ((_BYTE)v139 + (_BYTE)v135) & 7;
                      if (v139)
                      {
                        uint64_t v140 = *(unsigned __int8 *)a1;
                        v144 |= v140 << v147;
                      }
                    }
                    float v136 = v136 + *(float *)(v141 + 4 * (v144 & ~(-1 << v135)));
                    v141 += 4 * v142;
                    ++v138;
                    float v143 = (int8x16_t *)a1;
                  }
                  while (v138 != v137);
                }
                ++v17;
                if (v136 > v8)
                {
                  if (a4) {
                    uint64_t v150 = *(void *)(a4 + 8 * v125);
                  }
                  else {
                    uint64_t v150 = v125 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v136, v150);
                  int8x16_t v128 = v228;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v125;
            }
            while (v125 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 32:
          if (a2)
          {
            uint64_t v193 = 0;
            uint64_t v17 = 0;
            int v194 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v195 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v197 = *v195;
            int8x16_t v196 = v195[1];
            int8x16_t v225 = *v195;
            int8x16_t v229 = v196;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v197))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v196))))))) < v194)
              {
                uint64_t v198 = (void *)*((void *)v11 + 4);
                uint64_t v199 = v198[2];
                if ((int)v199 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v200 = *((float *)v11 + 54);
                uint64_t v201 = v198[1];
                if (v201)
                {
                  uint64_t v202 = 0;
                  LOBYTE(v203) = 0;
                  LODWORD(v204) = 0;
                  uint64_t v205 = *((void *)v11 + 7);
                  uint64_t v206 = v198[5];
                  uint64_t v207 = a3;
                  do
                  {
                    if (!(_BYTE)v203) {
                      LODWORD(v204) = v207->u8[0];
                    }
                    uint64_t v208 = v204 >> v203;
                    int v209 = v199 + v203;
                    unsigned int v210 = v209 - 8;
                    if (v209 < 8)
                    {
                      LOBYTE(v203) = v199 + v203;
                      a1 = (faiss::BufferList *)v207;
                    }
                    else
                    {
                      char v211 = 8 - v203;
                      a1 = (faiss::BufferList *)&v207->i8[1];
                      unsigned int v212 = v210 >> 3;
                      if (v210 >= 8)
                      {
                        do
                        {
                          unsigned int v213 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v208 |= (unint64_t)v213 << v211;
                          v211 += 8;
                          --v212;
                        }
                        while (v212);
                        a1 = (faiss::BufferList *)&v207->i8[(v210 >> 3) + 1];
                      }
                      int v203 = ((_BYTE)v203 + (_BYTE)v199) & 7;
                      if (v203)
                      {
                        uint64_t v204 = *(unsigned __int8 *)a1;
                        v208 |= v204 << v211;
                      }
                    }
                    float v200 = v200 + *(float *)(v205 + 4 * (v208 & ~(-1 << v199)));
                    v205 += 4 * v206;
                    ++v202;
                    uint64_t v207 = (int8x16_t *)a1;
                  }
                  while (v202 != v201);
                }
                ++v17;
                if (v200 > v8)
                {
                  if (a4) {
                    uint64_t v214 = *(void *)(a4 + 8 * v193);
                  }
                  else {
                    uint64_t v214 = v193 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v200, v214);
                  int8x16_t v197 = v225;
                  int8x16_t v196 = v229;
                }
              }
              a3 += 2;
              ++v193;
            }
            while (v193 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 64:
          if (a2)
          {
            uint64_t v59 = 0;
            uint64_t v17 = 0;
            int v60 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v61 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v63 = v61[2];
            int8x16_t v62 = v61[3];
            int8x16_t v65 = *v61;
            int8x16_t v64 = v61[1];
            int8x16_t v224 = v63;
            int8x16_t v227 = v62;
            int8x16_t v222 = *v61;
            int8x16_t v223 = v64;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v65))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v64)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v63))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v62)))))))) < v60)
              {
                char v66 = (void *)*((void *)v11 + 4);
                uint64_t v67 = v66[2];
                if ((int)v67 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v68 = *((float *)v11 + 54);
                uint64_t v69 = v66[1];
                if (v69)
                {
                  uint64_t v70 = 0;
                  LOBYTE(v71) = 0;
                  LODWORD(v72) = 0;
                  uint64_t v73 = *((void *)v11 + 7);
                  uint64_t v74 = v66[5];
                  uint64_t v75 = a3;
                  do
                  {
                    if (!(_BYTE)v71) {
                      LODWORD(v72) = v75->u8[0];
                    }
                    uint64_t v76 = v72 >> v71;
                    int v77 = v67 + v71;
                    unsigned int v78 = v77 - 8;
                    if (v77 < 8)
                    {
                      LOBYTE(v71) = v67 + v71;
                      a1 = (faiss::BufferList *)v75;
                    }
                    else
                    {
                      char v79 = 8 - v71;
                      a1 = (faiss::BufferList *)&v75->i8[1];
                      unsigned int v80 = v78 >> 3;
                      if (v78 >= 8)
                      {
                        do
                        {
                          unsigned int v81 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v76 |= (unint64_t)v81 << v79;
                          v79 += 8;
                          --v80;
                        }
                        while (v80);
                        a1 = (faiss::BufferList *)&v75->i8[(v78 >> 3) + 1];
                      }
                      int v71 = ((_BYTE)v71 + (_BYTE)v67) & 7;
                      if (v71)
                      {
                        uint64_t v72 = *(unsigned __int8 *)a1;
                        v76 |= v72 << v79;
                      }
                    }
                    float v68 = v68 + *(float *)(v73 + 4 * (v76 & ~(-1 << v67)));
                    v73 += 4 * v74;
                    ++v70;
                    uint64_t v75 = (int8x16_t *)a1;
                  }
                  while (v70 != v69);
                }
                ++v17;
                if (v68 > v8)
                {
                  if (a4) {
                    uint64_t v82 = *(void *)(a4 + 8 * v59);
                  }
                  else {
                    uint64_t v82 = v59 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v68, v82);
                  int8x16_t v63 = v224;
                  int8x16_t v62 = v227;
                  int8x16_t v65 = v222;
                  int8x16_t v64 = v223;
                }
              }
              a3 += 4;
              ++v59;
            }
            while (v59 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v105 = 0;
            uint64_t v17 = 0;
            int v106 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v107 = **((_DWORD **)a1 + 20);
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v107;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v106)
              {
                uint64_t v108 = (void *)*((void *)v11 + 4);
                uint64_t v109 = v108[2];
                if ((int)v109 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v110 = *((float *)v11 + 54);
                uint64_t v111 = v108[1];
                if (v111)
                {
                  uint64_t v112 = 0;
                  LOBYTE(v113) = 0;
                  LODWORD(v114) = 0;
                  uint64_t v115 = *((void *)v11 + 7);
                  uint64_t v116 = v108[5];
                  float v117 = a3;
                  do
                  {
                    if (!(_BYTE)v113) {
                      LODWORD(v114) = v117->u8[0];
                    }
                    uint64_t v118 = v114 >> v113;
                    int v119 = v109 + v113;
                    unsigned int v120 = v119 - 8;
                    if (v119 < 8)
                    {
                      LOBYTE(v113) = v109 + v113;
                      a1 = (faiss::BufferList *)v117;
                    }
                    else
                    {
                      char v121 = 8 - v113;
                      a1 = (faiss::BufferList *)&v117->i8[1];
                      unsigned int v122 = v120 >> 3;
                      if (v120 >= 8)
                      {
                        do
                        {
                          unsigned int v123 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v118 |= (unint64_t)v123 << v121;
                          v121 += 8;
                          --v122;
                        }
                        while (v122);
                        a1 = (faiss::BufferList *)&v117->i8[(v120 >> 3) + 1];
                      }
                      int v113 = ((_BYTE)v113 + (_BYTE)v109) & 7;
                      if (v113)
                      {
                        uint64_t v114 = *(unsigned __int8 *)a1;
                        v118 |= v114 << v121;
                      }
                    }
                    float v110 = v110 + *(float *)(v115 + 4 * (v118 & ~(-1 << v109)));
                    v115 += 4 * v116;
                    ++v112;
                    float v117 = (int8x16_t *)a1;
                  }
                  while (v112 != v111);
                }
                ++v17;
                if (v110 > v8)
                {
                  if (a4) {
                    uint64_t v124 = *(void *)(a4 + 8 * v105);
                  }
                  else {
                    uint64_t v124 = v105 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v110, v124);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v105;
            }
            while (v105 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 8:
          if (a2)
          {
            uint64_t v172 = 0;
            uint64_t v17 = 0;
            int v173 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v174 = **((void **)a1 + 20);
            do
            {
              uint8x8_t v175 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v174));
              v175.i16[0] = vaddlv_u8(v175);
              if (v173 > v175.i32[0])
              {
                uint64_t v176 = (void *)*((void *)v11 + 4);
                uint64_t v177 = v176[2];
                if ((int)v177 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v178 = *((float *)v11 + 54);
                uint64_t v179 = v176[1];
                if (v179)
                {
                  uint64_t v180 = 0;
                  LOBYTE(v181) = 0;
                  LODWORD(v182) = 0;
                  uint64_t v183 = *((void *)v11 + 7);
                  uint64_t v184 = v176[5];
                  __int32 v185 = a3;
                  do
                  {
                    if (!(_BYTE)v181) {
                      LODWORD(v182) = v185->u8[0];
                    }
                    uint64_t v186 = v182 >> v181;
                    int v187 = v177 + v181;
                    unsigned int v188 = v187 - 8;
                    if (v187 < 8)
                    {
                      LOBYTE(v181) = v177 + v181;
                      a1 = (faiss::BufferList *)v185;
                    }
                    else
                    {
                      char v189 = 8 - v181;
                      a1 = (faiss::BufferList *)&v185->i8[1];
                      unsigned int v190 = v188 >> 3;
                      if (v188 >= 8)
                      {
                        do
                        {
                          unsigned int v191 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v186 |= (unint64_t)v191 << v189;
                          v189 += 8;
                          --v190;
                        }
                        while (v190);
                        a1 = (faiss::BufferList *)&v185->i8[(v188 >> 3) + 1];
                      }
                      int v181 = ((_BYTE)v181 + (_BYTE)v177) & 7;
                      if (v181)
                      {
                        uint64_t v182 = *(unsigned __int8 *)a1;
                        v186 |= v182 << v189;
                      }
                    }
                    float v178 = v178 + *(float *)(v183 + 4 * (v186 & ~(-1 << v177)));
                    v183 += 4 * v184;
                    ++v180;
                    __int32 v185 = (int8x16_t *)a1;
                  }
                  while (v180 != v179);
                }
                ++v17;
                if (v178 > v8)
                {
                  if (a4) {
                    uint64_t v192 = *(void *)(a4 + 8 * v172);
                  }
                  else {
                    uint64_t v192 = v172 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v178, v192);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v172;
            }
            while (v172 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            int8x16_t v226 = v19;
            do
            {
              int32x2_t v20 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v20, 1), v20).i32[0] < v18)
              {
                __int32 v21 = (void *)*((void *)v11 + 4);
                uint64_t v22 = v21[2];
                if ((int)v22 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = v21[1];
                if (v24)
                {
                  uint64_t v25 = 0;
                  LOBYTE(v26) = 0;
                  LODWORD(v27) = 0;
                  uint64_t v28 = *((void *)v11 + 7);
                  uint64_t v29 = v21[5];
                  int v30 = a3;
                  do
                  {
                    if (!(_BYTE)v26) {
                      LODWORD(v27) = v30->u8[0];
                    }
                    uint64_t v31 = v27 >> v26;
                    int v32 = v22 + v26;
                    unsigned int v33 = v32 - 8;
                    if (v32 < 8)
                    {
                      LOBYTE(v26) = v22 + v26;
                      a1 = (faiss::BufferList *)v30;
                    }
                    else
                    {
                      char v34 = 8 - v26;
                      a1 = (faiss::BufferList *)&v30->i8[1];
                      unsigned int v35 = v33 >> 3;
                      if (v33 >= 8)
                      {
                        do
                        {
                          unsigned int v36 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v31 |= (unint64_t)v36 << v34;
                          v34 += 8;
                          --v35;
                        }
                        while (v35);
                        a1 = (faiss::BufferList *)&v30->i8[(v33 >> 3) + 1];
                      }
                      int v26 = ((_BYTE)v26 + (_BYTE)v22) & 7;
                      if (v26)
                      {
                        uint64_t v27 = *(unsigned __int8 *)a1;
                        v31 |= v27 << v34;
                      }
                    }
                    float v23 = v23 + *(float *)(v28 + 4 * (v31 & ~(-1 << v22)));
                    v28 += 4 * v29;
                    ++v25;
                    int v30 = (int8x16_t *)a1;
                  }
                  while (v25 != v24);
                }
                ++v17;
                if (v23 > v8)
                {
                  if (a4) {
                    uint64_t v37 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v37 = v16 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v37);
                  int8x16_t v19 = v226;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_229;
          }
LABEL_228:
          uint64_t v17 = 0;
LABEL_229:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v215 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_230:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v215;
          return;
      }
    }
    int v151 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v230 = *((void *)a1 + 20);
    int v231 = (int)v15 / 8;
    int v232 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      uint64_t v154 = (int)v15;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v230, (const unsigned __int8 *)a3);
        if ((int)a1 < v151)
        {
          int v155 = (void *)*((void *)v11 + 4);
          uint64_t v156 = v155[2];
          if ((int)v156 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v157 = *((float *)v11 + 54);
          uint64_t v158 = v155[1];
          if (v158)
          {
            uint64_t v159 = 0;
            LOBYTE(v160) = 0;
            LODWORD(v161) = 0;
            uint64_t v162 = *((void *)v11 + 7);
            uint64_t v163 = v155[5];
            uint64_t v164 = a3;
            do
            {
              if (!(_BYTE)v160) {
                LODWORD(v161) = v164->u8[0];
              }
              uint64_t v165 = v161 >> v160;
              int v166 = v156 + v160;
              unsigned int v167 = v166 - 8;
              if (v166 < 8)
              {
                LOBYTE(v160) = v156 + v160;
                a1 = (faiss::BufferList *)v164;
              }
              else
              {
                char v168 = 8 - v160;
                a1 = (faiss::BufferList *)&v164->i8[1];
                unsigned int v169 = v167 >> 3;
                if (v167 >= 8)
                {
                  do
                  {
                    unsigned int v170 = *(unsigned __int8 *)a1;
                    a1 = (faiss::BufferList *)((char *)a1 + 1);
                    v165 |= (unint64_t)v170 << v168;
                    v168 += 8;
                    --v169;
                  }
                  while (v169);
                  a1 = (faiss::BufferList *)&v164->i8[(v167 >> 3) + 1];
                }
                int v160 = ((_BYTE)v160 + (_BYTE)v156) & 7;
                if (v160)
                {
                  uint64_t v161 = *(unsigned __int8 *)a1;
                  v165 |= v161 << v168;
                }
              }
              float v157 = v157 + *(float *)(v162 + 4 * (v165 & ~(-1 << v156)));
              v162 += 4 * v163;
              ++v159;
              uint64_t v164 = (int8x16_t *)a1;
            }
            while (v159 != v158);
          }
          ++v153;
          if (v157 > v8)
          {
            if (a4) {
              uint64_t v171 = *(void *)(a4 + 8 * v152);
            }
            else {
              uint64_t v171 = v152 | (v12 << 32);
            }
            a1 = faiss::RangeQueryResult::add(this, v157, v171);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v154);
        ++v152;
      }
      while (v152 != a2);
    }
    else
    {
      uint64_t v153 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v215 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v153;
    goto LABEL_230;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v83 = 0;
        uint64_t v84 = v12 << 32;
        do
        {
          int8x16_t v85 = (void *)*((void *)v11 + 4);
          uint64_t v86 = v85[2];
          if ((int)v86 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v87 = *((float *)v11 + 54);
          uint64_t v88 = v85[1];
          if (v88)
          {
            uint64_t v89 = 0;
            LOBYTE(v90) = 0;
            LODWORD(v91) = 0;
            uint64_t v92 = *((void *)v11 + 8);
            uint64_t v93 = a3;
            do
            {
              if (!(_BYTE)v90) {
                LODWORD(v91) = v93->u8[0];
              }
              uint64_t v94 = v91 >> v90;
              int v95 = v86 + v90;
              unsigned int v96 = v95 - 8;
              if (v95 < 8)
              {
                LOBYTE(v90) = v86 + v90;
              }
              else
              {
                char v97 = 8 - v90;
                char v98 = &v93->u8[1];
                if (v96 < 8)
                {
                  uint64_t v93 = (int8x16_t *)((char *)v93 + 1);
                }
                else
                {
                  unsigned int v99 = v96 >> 3;
                  unsigned int v100 = v99 - 1;
                  do
                  {
                    unsigned int v101 = *v98++;
                    v94 |= (unint64_t)v101 << v97;
                    v97 += 8;
                    --v99;
                  }
                  while (v99);
                  uint64_t v93 = (int8x16_t *)((char *)v93 + v100 + 2);
                }
                int v90 = ((_BYTE)v90 + (_BYTE)v86) & 7;
                if (v90)
                {
                  uint64_t v91 = v93->u8[0];
                  v94 |= v91 << v97;
                }
              }
              float v87 = v87
                  + (float)(*(float *)(*(void *)(*((void *)v11 + 14) + 8 * v89) + 4 * (int)(v94 & ~(-1 << v86)))
                          + (float)(*(float *)(v92 + 4 * (int)(v94 & ~(-1 << v86))) * -2.0));
              v92 += 4 * v85[5];
              ++v89;
            }
            while (v89 != v88);
          }
          uint64_t v102 = v85[4];
          if (v87 > v8)
          {
            if (a4) {
              uint64_t v103 = *(void *)(a4 + 8 * v83);
            }
            else {
              uint64_t v103 = v83 | v84;
            }
            faiss::RangeQueryResult::add(this, v87, v103);
          }
          a3 = (int8x16_t *)((char *)a3 + v102);
          ++v83;
        }
        while (v83 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v230, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v230, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_INNER_PRODUCT, faiss::CMin<float, long long>, faiss::PQDecoderGeneric>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_INNER_PRODUCT, C = faiss::CMin<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v12 << 32;
        do
        {
          unsigned int v40 = (void *)*((void *)v11 + 4);
          uint64_t v41 = v40[2];
          if ((int)v41 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v42 = *((float *)v11 + 54);
          uint64_t v43 = v40[1];
          if (v43)
          {
            uint64_t v44 = 0;
            LOBYTE(v45) = 0;
            LODWORD(v46) = 0;
            uint64_t v47 = *((void *)v11 + 7);
            uint64_t v48 = a3;
            do
            {
              if (!(_BYTE)v45) {
                LODWORD(v46) = v48->u8[0];
              }
              uint64_t v49 = v46 >> v45;
              int v50 = v41 + v45;
              unsigned int v51 = v50 - 8;
              if (v50 < 8)
              {
                LOBYTE(v45) = v41 + v45;
              }
              else
              {
                char v52 = 8 - v45;
                unint64_t v53 = &v48->u8[1];
                if (v51 < 8)
                {
                  uint64_t v48 = (int8x16_t *)((char *)v48 + 1);
                }
                else
                {
                  unsigned int v54 = v51 >> 3;
                  unsigned int v55 = v54 - 1;
                  do
                  {
                    unsigned int v56 = *v53++;
                    v49 |= (unint64_t)v56 << v52;
                    v52 += 8;
                    --v54;
                  }
                  while (v54);
                  uint64_t v48 = (int8x16_t *)((char *)v48 + v55 + 2);
                }
                int v45 = ((_BYTE)v45 + (_BYTE)v41) & 7;
                if (v45)
                {
                  uint64_t v46 = v48->u8[0];
                  v49 |= v46 << v52;
                }
              }
              float v42 = v42 + *(float *)(v47 + 4 * (v49 & ~(-1 << v41)));
              v47 += 4 * v40[5];
              ++v44;
            }
            while (v44 != v43);
          }
          uint64_t v57 = v40[4];
          if (v42 > v8)
          {
            if (a4) {
              uint64_t v58 = *(void *)(a4 + 8 * v38);
            }
            else {
              uint64_t v58 = v38 | v39;
            }
            faiss::RangeQueryResult::add(this, v42, v58);
          }
          a3 = (int8x16_t *)((char *)a3 + v57);
          ++v38;
        }
        while (v38 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      (*(void (**)(void, uint64_t, void))(**(void **)(*((void *)a1 + 1) + 40) + 80))(*(void *)(*((void *)a1 + 1) + 40), v12, *((void *)a1 + 9));
      float v104 = faiss::fvec_inner_product(*((faiss **)v11 + 9), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (!a2) {
        return;
      }
    }
    else
    {
      float v104 = 0.0;
      if (!a2) {
        return;
      }
    }
    uint64_t v216 = 0;
    uint64_t v217 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v218 = *(void *)(*((void *)v11 + 4) + 32);
      float v219 = v104 + faiss::fvec_inner_product(*((faiss **)v11 + 10), *((const float **)v11 + 17), *((int *)v11 + 6));
      if (v219 > v8)
      {
        if (a4) {
          uint64_t v220 = *(void *)(a4 + 8 * v216);
        }
        else {
          uint64_t v220 = v216 | v217;
        }
        faiss::RangeQueryResult::add(this, v219, v220);
      }
      a3 = (int8x16_t *)((char *)a3 + v218);
      ++v216;
    }
    while (a2 != v216);
  }
}

void sub_1DD022BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::set_list(uint64_t a1, uint64_t a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 224);
  uint64_t v5 = (faiss::_anonymous_namespace_::QueryTables *)(a1 + 8);
  *(void *)(a1 + 144) = a2;
  *(float *)(a1 + 152) = a3;
  if (v4 == 1)
  {
  }
  else
  {
    if (v4 != 2) {
      return;
    }
  }
  *(float *)(a1 + 216) = v6;
}

float faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::distance_to_code(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 224) != 2) {
  uint64_t v2 = *(void **)(a1 + 32);
  }
  uint64_t v3 = v2[2];
  if ((int)v3 > 64) {
    faiss::decode<faiss::PQDecoderGeneric>();
  }
  float result = *(float *)(a1 + 216);
  uint64_t v5 = v2[1];
  if (v5)
  {
    uint64_t v6 = 0;
    LOBYTE(v7) = 0;
    LODWORD(v8) = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = v2[5];
    do
    {
      if (!(_BYTE)v7) {
        LODWORD(v8) = *a2;
      }
      uint64_t v11 = v8 >> v7;
      int v12 = v3 + v7;
      unsigned int v13 = v12 - 8;
      if (v12 < 8)
      {
        LOBYTE(v7) = v3 + v7;
      }
      else
      {
        char v14 = 8 - v7;
        uint64_t v15 = a2 + 1;
        if (v13 < 8)
        {
          ++a2;
        }
        else
        {
          unsigned int v16 = v13 >> 3;
          uint64_t v17 = v16 - 1;
          do
          {
            unsigned int v18 = *v15++;
            v11 |= (unint64_t)v18 << v14;
            v14 += 8;
            --v16;
          }
          while (v16);
          a2 += v17 + 2;
        }
        int v7 = ((_BYTE)v7 + (_BYTE)v3) & 7;
        if (v7)
        {
          uint64_t v8 = *a2;
          v11 |= v8 << v14;
        }
      }
      float result = result + *(float *)(v9 + 4 * (v11 & ~(-1 << v3)));
      v9 += 4 * v10;
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

faiss::IndexIVFPQStats *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::scan_codes(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, float *a5, uint64_t a6, unint64_t a7, int8x8_t a8)
{
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 220)) {
    a4 = 0;
  }
  uint64_t v319 = a4;
  int v15 = *(_DWORD *)(a1 + 224);
  if (*(int *)(a1 + 52) < 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (a2)
        {
          float v110 = *(void **)(a1 + 32);
          uint64_t v111 = v110[2];
          if ((int)v111 > 64) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          int v320 = 0;
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          uint64_t v114 = a5 - 1;
          uint64_t v115 = a6 - 8;
          unint64_t v116 = a7 + 1;
          uint64_t v117 = v110[4];
          uint64_t v118 = *(void *)(a1 + 64);
          uint64_t v119 = v110[1];
          uint64_t v313 = v13 << 32;
LABEL_122:
          float v120 = *(float *)(v12 + 216);
          if (v119)
          {
            uint64_t v121 = 0;
            LOBYTE(v122) = 0;
            LODWORD(v123) = 0;
            uint64_t v124 = v118;
            uint64_t v125 = a3;
            do
            {
              if (!(_BYTE)v122) {
                LODWORD(v123) = v125->u8[0];
              }
              uint64_t v126 = v123 >> v122;
              int v127 = v111 + v122;
              unsigned int v128 = v127 - 8;
              if (v127 < 8)
              {
                LOBYTE(v122) = v111 + v122;
              }
              else
              {
                char v129 = 8 - v122;
                int32x2_t v130 = &v125->u8[1];
                if (v128 < 8)
                {
                  uint64_t v125 = (int8x16_t *)((char *)v125 + 1);
                }
                else
                {
                  unsigned int v131 = v128 >> 3;
                  unsigned int v132 = v131 - 1;
                  do
                  {
                    unsigned int v133 = *v130++;
                    v126 |= (unint64_t)v133 << v129;
                    v129 += 8;
                    --v131;
                  }
                  while (v131);
                  uint64_t v125 = (int8x16_t *)((char *)v125 + v132 + 2);
                }
                int v122 = ((_BYTE)v122 + (_BYTE)v111) & 7;
                if (v122)
                {
                  uint64_t v123 = v125->u8[0];
                  v126 |= v123 << v129;
                }
              }
              float v120 = v120
                   + (float)(*(float *)(*(void *)(*(void *)(v12 + 112) + 8 * v121)
                                      + 4 * (int)(v126 & ~(-1 << v111)))
                           + (float)(*(float *)(v124 + 4 * (int)(v126 & ~(-1 << v111))) * -2.0));
              v124 += 4 * v110[5];
              ++v121;
            }
            while (v121 != v119);
          }
          if (*a5 <= v120) {
            goto LABEL_152;
          }
          if (v319) {
            uint64_t v134 = *(void *)(v319 + 8 * v113);
          }
          else {
            uint64_t v134 = v113 | v313;
          }
          if (a7 < 2)
          {
            uint64_t v135 = 1;
            goto LABEL_151;
          }
          uint64_t v136 = 3;
          unint64_t v137 = 2;
          uint64_t v138 = 1;
          while (1)
          {
            float v139 = v114[v137];
            if (v136 == v116 || (float v140 = v114[v136], v139 > v140))
            {
              if (v139 < v120) {
                goto LABEL_150;
              }
            }
            else
            {
              float v139 = v114[v136];
              unint64_t v137 = v136;
              if (v140 < v120)
              {
LABEL_150:
                uint64_t v135 = v138;
LABEL_151:
                v114[v135] = v120;
                *(void *)(v115 + 8 * v135) = v134;
                int v320 = (faiss::IndexIVFPQStats *)++v112;
LABEL_152:
                a3 = (int8x16_t *)((char *)a3 + v117);
                if (++v113 == a2) {
                  return v320;
                }
                goto LABEL_122;
              }
            }
            uint64_t v135 = v137;
            v114[v138] = v139;
            *(void *)(v115 + 8 * v138) = *(void *)(v115 + 8 * v137);
            v137 *= 2;
            uint64_t v136 = (2 * v135) | 1;
            uint64_t v138 = v135;
            if (v137 > a7) {
              goto LABEL_151;
            }
          }
        }
      }
      else
      {
        if (v15 != 2)
        {
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v322, "bad precomp mode");
          faiss::FaissException::FaissException(exception, &v322, "virtual size_t faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoderGeneric>::scan_codes(size_t, const uint8_t *, const idx_t *, float *, idx_t *, size_t) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1099);
        }
        if (a2)
        {
          uint64_t v47 = *(void **)(a1 + 32);
          uint64_t v48 = v47[2];
          if ((int)v48 > 64) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          int v320 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          unsigned int v51 = a5 - 1;
          uint64_t v52 = a6 - 8;
          unint64_t v53 = a7 + 1;
          uint64_t v54 = v47[4];
          uint64_t v55 = *(void *)(a1 + 56);
          uint64_t v56 = v47[1];
          uint64_t v57 = v13 << 32;
LABEL_50:
          float v58 = *(float *)(v12 + 216);
          if (v56)
          {
            uint64_t v59 = 0;
            LOBYTE(v60) = 0;
            LODWORD(v61) = 0;
            uint64_t v62 = v55;
            int8x16_t v63 = a3;
            do
            {
              if (!(_BYTE)v60) {
                LODWORD(v61) = v63->u8[0];
              }
              uint64_t v64 = v61 >> v60;
              int v65 = v48 + v60;
              unsigned int v66 = v65 - 8;
              if (v65 < 8)
              {
                LOBYTE(v60) = v48 + v60;
              }
              else
              {
                char v67 = 8 - v60;
                float v68 = &v63->u8[1];
                if (v66 < 8)
                {
                  int8x16_t v63 = (int8x16_t *)((char *)v63 + 1);
                }
                else
                {
                  unsigned int v69 = v66 >> 3;
                  unsigned int v70 = v69 - 1;
                  do
                  {
                    unsigned int v71 = *v68++;
                    v64 |= (unint64_t)v71 << v67;
                    v67 += 8;
                    --v69;
                  }
                  while (v69);
                  int8x16_t v63 = (int8x16_t *)((char *)v63 + v70 + 2);
                }
                int v60 = ((_BYTE)v60 + (_BYTE)v48) & 7;
                if (v60)
                {
                  uint64_t v61 = v63->u8[0];
                  v64 |= v61 << v67;
                }
              }
              float v58 = v58 + *(float *)(v62 + 4 * (v64 & ~(-1 << v48)));
              v62 += 4 * v47[5];
              ++v59;
            }
            while (v59 != v56);
          }
          if (*a5 <= v58) {
            goto LABEL_80;
          }
          if (v319) {
            uint64_t v72 = *(void *)(v319 + 8 * v50);
          }
          else {
            uint64_t v72 = v50 | v57;
          }
          if (a7 < 2)
          {
            uint64_t v73 = 1;
            goto LABEL_79;
          }
          uint64_t v74 = 3;
          unint64_t v75 = 2;
          uint64_t v76 = 1;
          while (1)
          {
            float v77 = v51[v75];
            if (v74 == v53 || (float v78 = v51[v74], v77 > v78))
            {
              if (v77 < v58) {
                goto LABEL_78;
              }
            }
            else
            {
              float v77 = v51[v74];
              unint64_t v75 = v74;
              if (v78 < v58)
              {
LABEL_78:
                uint64_t v73 = v76;
LABEL_79:
                v51[v73] = v58;
                *(void *)(v52 + 8 * v73) = v72;
                int v320 = (faiss::IndexIVFPQStats *)++v49;
LABEL_80:
                a3 = (int8x16_t *)((char *)a3 + v54);
                if (++v50 == a2) {
                  return v320;
                }
                goto LABEL_50;
              }
            }
            uint64_t v73 = v75;
            v51[v76] = v77;
            *(void *)(v52 + 8 * v76) = *(void *)(v52 + 8 * v75);
            v75 *= 2;
            uint64_t v74 = (2 * v73) | 1;
            uint64_t v76 = v73;
            if (v75 > a7) {
              goto LABEL_79;
            }
          }
        }
      }
      return 0;
    }
    if (*(unsigned char *)(a1 + 44))
    {
      uint64_t v141 = (const float **)(a1 + 72);
      (*(void (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 40) + 104))(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 136), *(void *)(a1 + 72), v13);
      if (!a2) {
        return 0;
      }
    }
    else
    {
      uint64_t v141 = (const float **)(a1 + 136);
      if (!a2) {
        return 0;
      }
    }
    int v320 = 0;
    uint64_t v142 = 0;
    float v143 = *v141;
    uint64_t v144 = a5 - 1;
    uint64_t v145 = a6 - 8;
LABEL_157:
    faiss::ProductQuantizer::decode(*(_DWORD **)(v12 + 32), (uint64_t)a3, *(void *)(v12 + 80));
    uint64_t v146 = *(void *)(*(void *)(v12 + 32) + 32);
    float v147 = faiss::fvec_L2sqr(*(faiss **)(v12 + 80), v143, *(int *)(v12 + 24));
    if (*a5 <= v147) {
      goto LABEL_173;
    }
    if (v319) {
      uint64_t v148 = *(void *)(v319 + 8 * v142);
    }
    else {
      uint64_t v148 = v142 | (v13 << 32);
    }
    if (a7 < 2)
    {
      uint64_t v149 = 1;
      goto LABEL_172;
    }
    uint64_t v150 = 3;
    unint64_t v151 = 2;
    uint64_t v152 = 1;
    while (1)
    {
      float v153 = v144[v151];
      if (v150 == a7 + 1 || (float v154 = v144[v150], v153 > v154))
      {
        if (v153 < v147) {
          goto LABEL_171;
        }
      }
      else
      {
        float v153 = v144[v150];
        unint64_t v151 = v150;
        if (v154 < v147)
        {
LABEL_171:
          uint64_t v149 = v152;
LABEL_172:
          v144[v149] = v147;
          *(void *)(v145 + 8 * v149) = v148;
          int v320 = (faiss::IndexIVFPQStats *)((char *)v320 + 1);
LABEL_173:
          a3 = (int8x16_t *)((char *)a3 + v146);
          if (++v142 == a2) {
            return v320;
          }
          goto LABEL_157;
        }
      }
      uint64_t v149 = v151;
      v144[v152] = v153;
      *(void *)(v145 + 8 * v152) = *(void *)(v145 + 8 * v151);
      v151 *= 2;
      uint64_t v150 = (2 * v149) | 1;
      uint64_t v152 = v149;
      if (v151 > a7) {
        goto LABEL_172;
      }
    }
  }
  if (v15 != 2) {
  unsigned int v16 = *(void **)(a1 + 32);
  }
  uint64_t v17 = v16[4];
  if (v17 > 19)
  {
    switch(v17)
    {
      case 20:
        if (a2)
        {
          int v320 = 0;
          uint64_t v183 = 0;
          uint64_t v20 = 0;
          __int32 v184 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          __int32 v185 = *(int8x16_t **)(a1 + 160);
          int8x16_t v186 = *v185;
          int v187 = a5 - 1;
          uint64_t v188 = a6 - 8;
          __int32 v189 = v185[1].i32[0];
          unint64_t v190 = a7 + 1;
          uint64_t v308 = v13 << 32;
          uint64_t v315 = 0;
          a1 = 8;
LABEL_211:
          int32x2_t v191 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v186))))));
          int8x8_t v192 = (int8x8_t)vadd_s32(vdup_lane_s32(v191, 1), v191);
          __int32 v193 = v192.i32[0];
          v192.i32[0] = a3[1].i32[0] ^ v189;
          uint8x8_t v194 = (uint8x8_t)vcnt_s8(v192);
          v194.i16[0] = vaddlv_u8(v194);
          if (v193 + v194.i32[0] >= v184) {
            goto LABEL_241;
          }
          uint64_t v195 = v16[2];
          if ((int)v195 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v196 = *(float *)(v12 + 216);
          uint64_t v197 = v16[1];
          if (v197)
          {
            uint64_t v198 = 0;
            LOBYTE(v199) = 0;
            LODWORD(v200) = 0;
            uint64_t v201 = *(void *)(v12 + 56);
            uint64_t v202 = a3;
            do
            {
              if (!(_BYTE)v199) {
                LODWORD(v200) = v202->u8[0];
              }
              uint64_t v203 = v200 >> v199;
              int v204 = v195 + v199;
              unsigned int v205 = v204 - 8;
              if (v204 < 8)
              {
                LOBYTE(v199) = v195 + v199;
                uint64_t v207 = v202;
              }
              else
              {
                char v206 = 8 - v199;
                uint64_t v207 = (int8x16_t *)&v202->i8[1];
                unsigned int v208 = v205 >> 3;
                if (v205 >= 8)
                {
                  do
                  {
                    unsigned int v209 = v207->u8[0];
                    uint64_t v207 = (int8x16_t *)((char *)v207 + 1);
                    v203 |= (unint64_t)v209 << v206;
                    v206 += 8;
                    --v208;
                  }
                  while (v208);
                  uint64_t v207 = (int8x16_t *)&v202->i8[(v205 >> 3) + 1];
                }
                int v199 = ((_BYTE)v199 + (_BYTE)v195) & 7;
                if (v199)
                {
                  uint64_t v200 = v207->u8[0];
                  v203 |= v200 << v206;
                }
              }
              float v196 = v196 + *(float *)(v201 + 4 * (v203 & ~(-1 << v195)));
              v201 += 4 * v16[5];
              ++v198;
              uint64_t v202 = v207;
            }
            while (v198 != v197);
          }
          ++v20;
          if (*a5 <= v196) {
            goto LABEL_241;
          }
          if (v319) {
            uint64_t v210 = *(void *)(v319 + 8 * v183);
          }
          else {
            uint64_t v210 = v183 | v308;
          }
          if (a7 < 2)
          {
            uint64_t v211 = 1;
            goto LABEL_240;
          }
          uint64_t v212 = 3;
          unint64_t v213 = 2;
          uint64_t v214 = 1;
          while (1)
          {
            float v215 = v187[v213];
            if (v212 == v190 || (float v216 = v187[v212], v215 > v216))
            {
              if (v215 < v196) {
                goto LABEL_239;
              }
            }
            else
            {
              float v215 = v187[v212];
              unint64_t v213 = v212;
              if (v216 < v196)
              {
LABEL_239:
                uint64_t v211 = v214;
LABEL_240:
                v187[v211] = v196;
                *(void *)(v188 + 8 * v211) = v210;
                int v320 = (faiss::IndexIVFPQStats *)++v315;
LABEL_241:
                a3 = (int8x16_t *)((char *)a3 + 20);
                if (++v183 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_211;
              }
            }
            uint64_t v211 = v213;
            v187[v214] = v215;
            *(void *)(v188 + 8 * v214) = *(void *)(v188 + 8 * v213);
            v213 *= 2;
            uint64_t v212 = (2 * v211) | 1;
            uint64_t v214 = v211;
            if (v213 > a7) {
              goto LABEL_240;
            }
          }
        }
        goto LABEL_345;
      case 32:
        if (a2)
        {
          int v320 = 0;
          uint64_t v274 = 0;
          uint64_t v275 = 0;
          uint64_t v20 = 0;
          int v276 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          unint64_t v277 = *(int8x16_t **)(a1 + 160);
          float v278 = a5 - 1;
          uint64_t v279 = a6 - 8;
          int8x16_t v281 = *v277;
          int8x16_t v280 = v277[1];
          unint64_t v282 = a7 + 1;
          uint64_t v318 = v13 << 32;
LABEL_313:
          if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v281))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v280))))))) >= v276)goto LABEL_343; {
          a1 = v16[2];
          }
          if ((int)a1 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v283 = *(float *)(v12 + 216);
          uint64_t v284 = v16[1];
          if (v284)
          {
            uint64_t v285 = 0;
            LOBYTE(v286) = 0;
            LODWORD(v287) = 0;
            uint64_t v288 = *(void *)(v12 + 56);
            float v289 = a3;
            do
            {
              if (!(_BYTE)v286) {
                LODWORD(v287) = v289->u8[0];
              }
              uint64_t v290 = v287 >> v286;
              int v291 = a1 + v286;
              unsigned int v292 = v291 - 8;
              if (v291 < 8)
              {
                LOBYTE(v286) = a1 + v286;
                unint64_t v294 = v289;
              }
              else
              {
                char v293 = 8 - v286;
                unint64_t v294 = (int8x16_t *)&v289->i8[1];
                unsigned int v295 = v292 >> 3;
                if (v292 >= 8)
                {
                  do
                  {
                    unsigned int v296 = v294->u8[0];
                    unint64_t v294 = (int8x16_t *)((char *)v294 + 1);
                    v290 |= (unint64_t)v296 << v293;
                    v293 += 8;
                    --v295;
                  }
                  while (v295);
                  unint64_t v294 = (int8x16_t *)&v289->i8[(v292 >> 3) + 1];
                }
                int v286 = ((_BYTE)v286 + (_BYTE)a1) & 7;
                if (v286)
                {
                  uint64_t v287 = v294->u8[0];
                  v290 |= v287 << v293;
                }
              }
              float v283 = v283 + *(float *)(v288 + 4 * (v290 & ~(-1 << a1)));
              v288 += 4 * v16[5];
              ++v285;
              float v289 = v294;
            }
            while (v285 != v284);
          }
          ++v20;
          if (*a5 <= v283) {
            goto LABEL_343;
          }
          if (v319) {
            a1 = *(void *)(v319 + 8 * v275);
          }
          else {
            a1 = v275 | v318;
          }
          if (a7 < 2)
          {
            uint64_t v297 = 1;
            goto LABEL_342;
          }
          uint64_t v298 = 3;
          unint64_t v299 = 2;
          uint64_t v300 = 1;
          while (1)
          {
            float v301 = v278[v299];
            if (v298 == v282 || (float v302 = v278[v298], v301 > v302))
            {
              if (v301 < v283) {
                goto LABEL_341;
              }
            }
            else
            {
              float v301 = v278[v298];
              unint64_t v299 = v298;
              if (v302 < v283)
              {
LABEL_341:
                uint64_t v297 = v300;
LABEL_342:
                v278[v297] = v283;
                *(void *)(v279 + 8 * v297) = a1;
                int v320 = (faiss::IndexIVFPQStats *)++v274;
LABEL_343:
                a3 += 2;
                if (++v275 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_313;
              }
            }
            uint64_t v297 = v299;
            v278[v300] = v301;
            *(void *)(v279 + 8 * v300) = *(void *)(v279 + 8 * v299);
            v299 *= 2;
            uint64_t v298 = (2 * v297) | 1;
            uint64_t v300 = v297;
            if (v299 > a7) {
              goto LABEL_342;
            }
          }
        }
        goto LABEL_345;
      case 64:
        if (a2)
        {
          int v320 = 0;
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          uint64_t v20 = 0;
          int v81 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v82 = *(int8x16_t **)(a1 + 160);
          int8x16_t v84 = v82[2];
          int8x16_t v83 = v82[3];
          int8x16_t v85 = a5 - 1;
          uint64_t v86 = a6 - 8;
          int8x16_t v88 = *v82;
          int8x16_t v87 = v82[1];
          unint64_t v89 = a7 + 1;
          uint64_t v312 = v13 << 32;
LABEL_87:
          if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v88))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v87)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v84))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v83)))))))) >= v81)goto LABEL_117; {
          a1 = v16[2];
          }
          if ((int)a1 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v90 = *(float *)(v12 + 216);
          uint64_t v91 = v16[1];
          if (v91)
          {
            uint64_t v92 = 0;
            LOBYTE(v93) = 0;
            LODWORD(v94) = 0;
            uint64_t v95 = *(void *)(v12 + 56);
            unsigned int v96 = a3;
            do
            {
              if (!(_BYTE)v93) {
                LODWORD(v94) = v96->u8[0];
              }
              uint64_t v97 = v94 >> v93;
              int v98 = a1 + v93;
              unsigned int v99 = v98 - 8;
              if (v98 < 8)
              {
                LOBYTE(v93) = a1 + v93;
                unsigned int v101 = v96;
              }
              else
              {
                char v100 = 8 - v93;
                unsigned int v101 = (int8x16_t *)&v96->i8[1];
                unsigned int v102 = v99 >> 3;
                if (v99 >= 8)
                {
                  do
                  {
                    unsigned int v103 = v101->u8[0];
                    unsigned int v101 = (int8x16_t *)((char *)v101 + 1);
                    v97 |= (unint64_t)v103 << v100;
                    v100 += 8;
                    --v102;
                  }
                  while (v102);
                  unsigned int v101 = (int8x16_t *)&v96->i8[(v99 >> 3) + 1];
                }
                int v93 = ((_BYTE)v93 + (_BYTE)a1) & 7;
                if (v93)
                {
                  uint64_t v94 = v101->u8[0];
                  v97 |= v94 << v100;
                }
              }
              float v90 = v90 + *(float *)(v95 + 4 * (v97 & ~(-1 << a1)));
              v95 += 4 * v16[5];
              ++v92;
              unsigned int v96 = v101;
            }
            while (v92 != v91);
          }
          ++v20;
          if (*a5 <= v90) {
            goto LABEL_117;
          }
          if (v319) {
            a1 = *(void *)(v319 + 8 * v80);
          }
          else {
            a1 = v80 | v312;
          }
          if (a7 < 2)
          {
            uint64_t v104 = 1;
            goto LABEL_116;
          }
          uint64_t v105 = 3;
          unint64_t v106 = 2;
          uint64_t v107 = 1;
          while (1)
          {
            float v108 = v85[v106];
            if (v105 == v89 || (float v109 = v85[v105], v108 > v109))
            {
              if (v108 < v90) {
                goto LABEL_115;
              }
            }
            else
            {
              float v108 = v85[v105];
              unint64_t v106 = v105;
              if (v109 < v90)
              {
LABEL_115:
                uint64_t v104 = v107;
LABEL_116:
                v85[v104] = v90;
                *(void *)(v86 + 8 * v104) = a1;
                int v320 = (faiss::IndexIVFPQStats *)++v79;
LABEL_117:
                a3 += 4;
                if (++v80 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_87;
              }
            }
            uint64_t v104 = v106;
            v85[v107] = v108;
            *(void *)(v86 + 8 * v107) = *(void *)(v86 + 8 * v106);
            v106 *= 2;
            uint64_t v105 = (2 * v104) | 1;
            uint64_t v107 = v104;
            if (v106 > a7) {
              goto LABEL_116;
            }
          }
        }
        goto LABEL_345;
    }
  }
  else
  {
    switch(v17)
    {
      case 4:
        if (a2)
        {
          int v320 = 0;
          uint64_t v155 = 0;
          uint64_t v20 = 0;
          int v156 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          float v157 = a5 - 1;
          uint64_t v158 = a6 - 8;
          int v159 = **(_DWORD **)(a1 + 160);
          unint64_t v160 = a7 + 1;
          uint64_t v307 = v13 << 32;
          uint64_t v314 = 0;
          a1 = 8;
LABEL_177:
          a8.i32[0] = a3->i32[0] ^ v159;
          a8 = vcnt_s8(a8);
          a8.i16[0] = vaddlv_u8((uint8x8_t)a8);
          if (a8.i32[0] >= v156) {
            goto LABEL_207;
          }
          uint64_t v161 = v16[2];
          if ((int)v161 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v162 = *(float *)(v12 + 216);
          uint64_t v163 = v16[1];
          if (v163)
          {
            uint64_t v164 = 0;
            LOBYTE(v165) = 0;
            LODWORD(v166) = 0;
            uint64_t v167 = *(void *)(v12 + 56);
            char v168 = a3;
            do
            {
              if (!(_BYTE)v165) {
                LODWORD(v166) = v168->u8[0];
              }
              uint64_t v169 = v166 >> v165;
              int v170 = v161 + v165;
              unsigned int v171 = v170 - 8;
              if (v170 < 8)
              {
                LOBYTE(v165) = v161 + v165;
                int v173 = v168;
              }
              else
              {
                char v172 = 8 - v165;
                int v173 = (int8x16_t *)&v168->i8[1];
                unsigned int v174 = v171 >> 3;
                if (v171 >= 8)
                {
                  do
                  {
                    unsigned int v175 = v173->u8[0];
                    int v173 = (int8x16_t *)((char *)v173 + 1);
                    v169 |= (unint64_t)v175 << v172;
                    v172 += 8;
                    --v174;
                  }
                  while (v174);
                  int v173 = (int8x16_t *)&v168->i8[(v171 >> 3) + 1];
                }
                int v165 = ((_BYTE)v165 + (_BYTE)v161) & 7;
                if (v165)
                {
                  uint64_t v166 = v173->u8[0];
                  v169 |= v166 << v172;
                }
              }
              float v162 = v162 + *(float *)(v167 + 4 * (v169 & ~(-1 << v161)));
              v167 += 4 * v16[5];
              ++v164;
              char v168 = v173;
            }
            while (v164 != v163);
          }
          ++v20;
          if (*a5 <= v162) {
            goto LABEL_207;
          }
          if (v319) {
            uint64_t v176 = *(void *)(v319 + 8 * v155);
          }
          else {
            uint64_t v176 = v155 | v307;
          }
          if (a7 < 2)
          {
            uint64_t v177 = 1;
            goto LABEL_206;
          }
          uint64_t v178 = 3;
          unint64_t v179 = 2;
          uint64_t v180 = 1;
          while (1)
          {
            float v181 = v157[v179];
            if (v178 == v160 || (float v182 = v157[v178], v181 > v182))
            {
              if (v181 < v162) {
                goto LABEL_205;
              }
            }
            else
            {
              float v181 = v157[v178];
              unint64_t v179 = v178;
              if (v182 < v162)
              {
LABEL_205:
                uint64_t v177 = v180;
LABEL_206:
                v157[v177] = v162;
                *(void *)(v158 + 8 * v177) = v176;
                int v320 = (faiss::IndexIVFPQStats *)++v314;
LABEL_207:
                a3 = (int8x16_t *)((char *)a3 + 4);
                if (++v155 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_177;
              }
            }
            uint64_t v177 = v179;
            v157[v180] = v181;
            *(void *)(v158 + 8 * v180) = *(void *)(v158 + 8 * v179);
            v179 *= 2;
            uint64_t v178 = (2 * v177) | 1;
            uint64_t v180 = v177;
            if (v179 > a7) {
              goto LABEL_206;
            }
          }
        }
        goto LABEL_345;
      case 8:
        if (a2)
        {
          int v320 = 0;
          uint64_t v245 = 0;
          uint64_t v20 = 0;
          int v246 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint8x8_t v247 = a5 - 1;
          uint64_t v248 = a6 - 8;
          uint64_t v249 = **(void **)(a1 + 160);
          unint64_t v250 = a7 + 1;
          uint64_t v310 = v13 << 32;
          uint64_t v317 = 0;
          a1 = 8;
LABEL_279:
          uint8x8_t v251 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v249));
          v251.i16[0] = vaddlv_u8(v251);
          if (v246 <= v251.i32[0]) {
            goto LABEL_309;
          }
          uint64_t v252 = v16[2];
          if ((int)v252 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v253 = *(float *)(v12 + 216);
          uint64_t v254 = v16[1];
          if (v254)
          {
            uint64_t v255 = 0;
            LOBYTE(v256) = 0;
            LODWORD(v257) = 0;
            uint64_t v258 = *(void *)(v12 + 56);
            char v259 = a3;
            do
            {
              if (!(_BYTE)v256) {
                LODWORD(v257) = v259->u8[0];
              }
              uint64_t v260 = v257 >> v256;
              int v261 = v252 + v256;
              unsigned int v262 = v261 - 8;
              if (v261 < 8)
              {
                LOBYTE(v256) = v252 + v256;
                uint64_t v264 = v259;
              }
              else
              {
                char v263 = 8 - v256;
                uint64_t v264 = (int8x16_t *)&v259->i8[1];
                unsigned int v265 = v262 >> 3;
                if (v262 >= 8)
                {
                  do
                  {
                    unsigned int v266 = v264->u8[0];
                    uint64_t v264 = (int8x16_t *)((char *)v264 + 1);
                    v260 |= (unint64_t)v266 << v263;
                    v263 += 8;
                    --v265;
                  }
                  while (v265);
                  uint64_t v264 = (int8x16_t *)&v259->i8[(v262 >> 3) + 1];
                }
                int v256 = ((_BYTE)v256 + (_BYTE)v252) & 7;
                if (v256)
                {
                  uint64_t v257 = v264->u8[0];
                  v260 |= v257 << v263;
                }
              }
              float v253 = v253 + *(float *)(v258 + 4 * (v260 & ~(-1 << v252)));
              v258 += 4 * v16[5];
              ++v255;
              char v259 = v264;
            }
            while (v255 != v254);
          }
          ++v20;
          if (*a5 <= v253) {
            goto LABEL_309;
          }
          if (v319) {
            uint64_t v267 = *(void *)(v319 + 8 * v245);
          }
          else {
            uint64_t v267 = v245 | v310;
          }
          if (a7 < 2)
          {
            uint64_t v268 = 1;
            goto LABEL_308;
          }
          uint64_t v269 = 3;
          unint64_t v270 = 2;
          uint64_t v271 = 1;
          while (1)
          {
            float v272 = v247[v270];
            if (v269 == v250 || (float v273 = v247[v269], v272 > v273))
            {
              if (v272 < v253) {
                goto LABEL_307;
              }
            }
            else
            {
              float v272 = v247[v269];
              unint64_t v270 = v269;
              if (v273 < v253)
              {
LABEL_307:
                uint64_t v268 = v271;
LABEL_308:
                v247[v268] = v253;
                *(void *)(v248 + 8 * v268) = v267;
                int v320 = (faiss::IndexIVFPQStats *)++v317;
LABEL_309:
                a3 = (int8x16_t *)((char *)a3 + 8);
                if (++v245 == a2) {
                  goto LABEL_346;
                }
                goto LABEL_279;
              }
            }
            uint64_t v268 = v270;
            v247[v271] = v272;
            *(void *)(v248 + 8 * v271) = *(void *)(v248 + 8 * v270);
            v270 *= 2;
            uint64_t v269 = (2 * v268) | 1;
            uint64_t v271 = v268;
            if (v270 > a7) {
              goto LABEL_308;
            }
          }
        }
        goto LABEL_345;
      case 16:
        if (a2)
        {
          int v320 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          __int32 v21 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
          uint64_t v22 = a5 - 1;
          uint64_t v23 = a6 - 8;
          int8x16_t v24 = *(int8x16_t *)*(void *)(a1 + 160);
          unint64_t v25 = a7 + 1;
          uint64_t v311 = v13 << 32;
          while (1)
          {
            int32x2_t v26 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v24))))));
            if (vadd_s32(vdup_lane_s32(v26, 1), v26).i32[0] >= v21) {
              goto LABEL_42;
            }
            a1 = v16[2];
            if ((int)a1 >= 65) {
              faiss::decode<faiss::PQDecoderGeneric>();
            }
            float v27 = *(float *)(v12 + 216);
            uint64_t v28 = v16[1];
            if (v28)
            {
              uint64_t v29 = 0;
              LOBYTE(v30) = 0;
              LODWORD(v31) = 0;
              uint64_t v32 = *(void *)(v12 + 56);
              unsigned int v33 = a3;
              do
              {
                if (!(_BYTE)v30) {
                  LODWORD(v31) = v33->u8[0];
                }
                uint64_t v34 = v31 >> v30;
                int v35 = a1 + v30;
                unsigned int v36 = v35 - 8;
                if (v35 < 8)
                {
                  LOBYTE(v30) = a1 + v30;
                  uint64_t v38 = v33;
                }
                else
                {
                  char v37 = 8 - v30;
                  uint64_t v38 = (int8x16_t *)&v33->i8[1];
                  unsigned int v39 = v36 >> 3;
                  if (v36 >= 8)
                  {
                    do
                    {
                      unsigned int v40 = v38->u8[0];
                      uint64_t v38 = (int8x16_t *)((char *)v38 + 1);
                      v34 |= (unint64_t)v40 << v37;
                      v37 += 8;
                      --v39;
                    }
                    while (v39);
                    uint64_t v38 = (int8x16_t *)&v33->i8[(v36 >> 3) + 1];
                  }
                  int v30 = ((_BYTE)v30 + (_BYTE)a1) & 7;
                  if (v30)
                  {
                    uint64_t v31 = v38->u8[0];
                    v34 |= v31 << v37;
                  }
                }
                float v27 = v27 + *(float *)(v32 + 4 * (v34 & ~(-1 << a1)));
                v32 += 4 * v16[5];
                ++v29;
                unsigned int v33 = v38;
              }
              while (v29 != v28);
            }
            ++v20;
            if (*a5 <= v27) {
              goto LABEL_42;
            }
            if (v319) {
              a1 = *(void *)(v319 + 8 * v19);
            }
            else {
              a1 = v19 | v311;
            }
            if (a7 < 2)
            {
              uint64_t v41 = 1;
              goto LABEL_41;
            }
            uint64_t v42 = 3;
            unint64_t v43 = 2;
            uint64_t v44 = 1;
            while (1)
            {
              float v45 = v22[v43];
              if (v42 != v25)
              {
                float v46 = v22[v42];
                if (v45 <= v46) {
                  break;
                }
              }
              if (v45 < v27) {
                goto LABEL_40;
              }
LABEL_38:
              uint64_t v41 = v43;
              v22[v44] = v45;
              *(void *)(v23 + 8 * v44) = *(void *)(v23 + 8 * v43);
              v43 *= 2;
              uint64_t v42 = (2 * v41) | 1;
              uint64_t v44 = v41;
              if (v43 > a7) {
                goto LABEL_41;
              }
            }
            float v45 = v22[v42];
            unint64_t v43 = v42;
            if (v46 >= v27) {
              goto LABEL_38;
            }
LABEL_40:
            uint64_t v41 = v44;
LABEL_41:
            v22[v41] = v27;
            *(void *)(v23 + 8 * v41) = a1;
            int v320 = (faiss::IndexIVFPQStats *)++v18;
LABEL_42:
            ++a3;
            if (++v19 == a2)
            {
LABEL_346:
              faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
              uint64_t v303 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v20;
              goto LABEL_347;
            }
          }
        }
LABEL_345:
        int v320 = 0;
        uint64_t v20 = 0;
        goto LABEL_346;
    }
  }
  int v316 = *(_DWORD *)(*(void *)(a1 + 8) + 416);
  uint64_t v322 = *(void *)(a1 + 160);
  int v323 = (int)v17 / 8;
  int v324 = v17 - (v16 & 0xFFFFFFF8);
  if (!a2)
  {
    int v320 = 0;
    uint64_t v218 = 0;
    goto LABEL_352;
  }
  int v320 = 0;
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  uint64_t v306 = v13 << 32;
  uint64_t v309 = (int)v17;
  float v219 = a5 - 1;
  uint64_t v220 = a6 - 8;
  unint64_t v221 = a7 + 1;
  do
  {
    a1 = faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v322, (const unsigned __int8 *)a3);
    if ((int)a1 >= v316) {
      goto LABEL_275;
    }
    int8x16_t v222 = *(void **)(v12 + 32);
    uint64_t v223 = v222[2];
    if ((int)v223 >= 65) {
      faiss::decode<faiss::PQDecoderGeneric>();
    }
    float v224 = *(float *)(v12 + 216);
    uint64_t v225 = v222[1];
    if (v225)
    {
      uint64_t v226 = 0;
      LOBYTE(v227) = 0;
      LODWORD(v228) = 0;
      uint64_t v229 = *(void *)(v12 + 56);
      uint64_t v230 = v222[5];
      int v231 = a3;
      do
      {
        if (!(_BYTE)v227) {
          LODWORD(v228) = v231->u8[0];
        }
        uint64_t v232 = v228 >> v227;
        int v233 = v223 + v227;
        unsigned int v234 = v233 - 8;
        if (v233 < 8)
        {
          LOBYTE(v227) = v223 + v227;
          a1 = (uint64_t)v231;
        }
        else
        {
          char v235 = 8 - v227;
          a1 = (uint64_t)v231->i64 + 1;
          unsigned int v236 = v234 >> 3;
          if (v234 >= 8)
          {
            do
            {
              unsigned int v237 = *(unsigned __int8 *)a1++;
              v232 |= (unint64_t)v237 << v235;
              v235 += 8;
              --v236;
            }
            while (v236);
            a1 = (uint64_t)v231->i64 + (v234 >> 3) + 1;
          }
          int v227 = ((_BYTE)v227 + (_BYTE)v223) & 7;
          if (v227)
          {
            uint64_t v228 = *(unsigned __int8 *)a1;
            v232 |= v228 << v235;
          }
        }
        float v224 = v224 + *(float *)(v229 + 4 * (v232 & ~(-1 << v223)));
        v229 += 4 * v230;
        ++v226;
        int v231 = (int8x16_t *)a1;
      }
      while (v226 != v225);
    }
    ++v218;
    if (*a5 <= v224) {
      goto LABEL_275;
    }
    if (v319) {
      uint64_t v238 = *(void *)(v319 + 8 * v217);
    }
    else {
      uint64_t v238 = v217 | v306;
    }
    if (a7 < 2)
    {
      uint64_t v239 = 1;
      goto LABEL_274;
    }
    uint64_t v240 = 3;
    unint64_t v241 = 2;
    uint64_t v242 = 1;
    while (1)
    {
      float v243 = v219[v241];
      if (v240 != v221)
      {
        float v244 = v219[v240];
        if (v243 <= v244) {
          break;
        }
      }
      if (v243 < v224) {
        goto LABEL_273;
      }
LABEL_271:
      uint64_t v239 = v241;
      v219[v242] = v243;
      *(void *)(v220 + 8 * v242) = *(void *)(v220 + 8 * v241);
      v241 *= 2;
      uint64_t v240 = (2 * v239) | 1;
      uint64_t v242 = v239;
      if (v241 > a7) {
        goto LABEL_274;
      }
    }
    float v243 = v219[v240];
    unint64_t v241 = v240;
    if (v244 >= v224) {
      goto LABEL_271;
    }
LABEL_273:
    uint64_t v239 = v242;
LABEL_274:
    v219[v239] = v224;
    *(void *)(v220 + 8 * v239) = v238;
    int v320 = (faiss::IndexIVFPQStats *)((char *)v320 + 1);
LABEL_275:
    a3 = (int8x16_t *)((char *)a3 + v309);
    ++v217;
  }
  while (v217 != a2);
LABEL_352:
  faiss::IndexIVFPQStats::get_indexIVFPQ_stats((faiss::IndexIVFPQStats *)a1);
  uint64_t v303 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v218;
LABEL_347:
  *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v303;
  return v320;
}

void sub_1DD024480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::scan_codes_range(faiss::BufferList *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, faiss::RangeQueryResult *this, double a6)
{
  float v8 = *(float *)&a6;
  uint64_t v11 = a1;
  uint64_t v12 = *((void *)a1 + 18);
  if (*((unsigned char *)a1 + 220)) {
    a4 = 0;
  }
  int v14 = *((_DWORD *)a1 + 56);
  if (*((int *)a1 + 13) >= 1)
  {
    if (v14 != 2) {
    uint64_t v15 = *(void *)(*((void *)a1 + 4) + 32);
    }
    if (v15 > 19)
    {
      switch(v15)
      {
        case 20:
          if (a2)
          {
            uint64_t v125 = 0;
            uint64_t v17 = 0;
            __int32 v126 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v127 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v128 = *v127;
            __int32 v129 = v127[1].i32[0];
            int8x16_t v229 = *v127;
            do
            {
              int32x2_t v130 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v128))))));
              int8x8_t v131 = (int8x8_t)vadd_s32(vdup_lane_s32(v130, 1), v130);
              __int32 v132 = v131.i32[0];
              v131.i32[0] = a3[1].i32[0] ^ v129;
              uint8x8_t v133 = (uint8x8_t)vcnt_s8(v131);
              v133.i16[0] = vaddlv_u8(v133);
              if (v132 + v133.i32[0] < v126)
              {
                uint64_t v134 = (void *)*((void *)v11 + 4);
                uint64_t v135 = v134[2];
                if ((int)v135 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v136 = *((float *)v11 + 54);
                uint64_t v137 = v134[1];
                if (v137)
                {
                  uint64_t v138 = 0;
                  LOBYTE(v139) = 0;
                  LODWORD(v140) = 0;
                  uint64_t v141 = *((void *)v11 + 7);
                  uint64_t v142 = v134[5];
                  float v143 = a3;
                  do
                  {
                    if (!(_BYTE)v139) {
                      LODWORD(v140) = v143->u8[0];
                    }
                    uint64_t v144 = v140 >> v139;
                    int v145 = v135 + v139;
                    unsigned int v146 = v145 - 8;
                    if (v145 < 8)
                    {
                      LOBYTE(v139) = v135 + v139;
                      a1 = (faiss::BufferList *)v143;
                    }
                    else
                    {
                      char v147 = 8 - v139;
                      a1 = (faiss::BufferList *)&v143->i8[1];
                      unsigned int v148 = v146 >> 3;
                      if (v146 >= 8)
                      {
                        do
                        {
                          unsigned int v149 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v144 |= (unint64_t)v149 << v147;
                          v147 += 8;
                          --v148;
                        }
                        while (v148);
                        a1 = (faiss::BufferList *)&v143->i8[(v146 >> 3) + 1];
                      }
                      int v139 = ((_BYTE)v139 + (_BYTE)v135) & 7;
                      if (v139)
                      {
                        uint64_t v140 = *(unsigned __int8 *)a1;
                        v144 |= v140 << v147;
                      }
                    }
                    float v136 = v136 + *(float *)(v141 + 4 * (v144 & ~(-1 << v135)));
                    v141 += 4 * v142;
                    ++v138;
                    float v143 = (int8x16_t *)a1;
                  }
                  while (v138 != v137);
                }
                ++v17;
                if (v136 < v8)
                {
                  if (a4) {
                    uint64_t v150 = *(void *)(a4 + 8 * v125);
                  }
                  else {
                    uint64_t v150 = v125 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v136, v150);
                  int8x16_t v128 = v229;
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 20);
              ++v125;
            }
            while (v125 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 32:
          if (a2)
          {
            uint64_t v193 = 0;
            uint64_t v17 = 0;
            int v194 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v195 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v197 = *v195;
            int8x16_t v196 = v195[1];
            int8x16_t v226 = *v195;
            int8x16_t v230 = v196;
            do
            {
              if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v197))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v196))))))) < v194)
              {
                uint64_t v198 = (void *)*((void *)v11 + 4);
                uint64_t v199 = v198[2];
                if ((int)v199 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v200 = *((float *)v11 + 54);
                uint64_t v201 = v198[1];
                if (v201)
                {
                  uint64_t v202 = 0;
                  LOBYTE(v203) = 0;
                  LODWORD(v204) = 0;
                  uint64_t v205 = *((void *)v11 + 7);
                  uint64_t v206 = v198[5];
                  uint64_t v207 = a3;
                  do
                  {
                    if (!(_BYTE)v203) {
                      LODWORD(v204) = v207->u8[0];
                    }
                    uint64_t v208 = v204 >> v203;
                    int v209 = v199 + v203;
                    unsigned int v210 = v209 - 8;
                    if (v209 < 8)
                    {
                      LOBYTE(v203) = v199 + v203;
                      a1 = (faiss::BufferList *)v207;
                    }
                    else
                    {
                      char v211 = 8 - v203;
                      a1 = (faiss::BufferList *)&v207->i8[1];
                      unsigned int v212 = v210 >> 3;
                      if (v210 >= 8)
                      {
                        do
                        {
                          unsigned int v213 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v208 |= (unint64_t)v213 << v211;
                          v211 += 8;
                          --v212;
                        }
                        while (v212);
                        a1 = (faiss::BufferList *)&v207->i8[(v210 >> 3) + 1];
                      }
                      int v203 = ((_BYTE)v203 + (_BYTE)v199) & 7;
                      if (v203)
                      {
                        uint64_t v204 = *(unsigned __int8 *)a1;
                        v208 |= v204 << v211;
                      }
                    }
                    float v200 = v200 + *(float *)(v205 + 4 * (v208 & ~(-1 << v199)));
                    v205 += 4 * v206;
                    ++v202;
                    uint64_t v207 = (int8x16_t *)a1;
                  }
                  while (v202 != v201);
                }
                ++v17;
                if (v200 < v8)
                {
                  if (a4) {
                    uint64_t v214 = *(void *)(a4 + 8 * v193);
                  }
                  else {
                    uint64_t v214 = v193 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v200, v214);
                  int8x16_t v197 = v226;
                  int8x16_t v196 = v230;
                }
              }
              a3 += 2;
              ++v193;
            }
            while (v193 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 64:
          if (a2)
          {
            uint64_t v59 = 0;
            uint64_t v17 = 0;
            int v60 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v61 = (int8x16_t *)*((void *)a1 + 20);
            int8x16_t v63 = v61[2];
            int8x16_t v62 = v61[3];
            int8x16_t v65 = *v61;
            int8x16_t v64 = v61[1];
            int8x16_t v225 = v63;
            int8x16_t v228 = v62;
            int8x16_t v223 = *v61;
            int8x16_t v224 = v64;
            do
            {
              if (vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v65))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[1], v64)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[2], v63))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(a3[3], v62)))))))) < v60)
              {
                unsigned int v66 = (void *)*((void *)v11 + 4);
                uint64_t v67 = v66[2];
                if ((int)v67 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v68 = *((float *)v11 + 54);
                uint64_t v69 = v66[1];
                if (v69)
                {
                  uint64_t v70 = 0;
                  LOBYTE(v71) = 0;
                  LODWORD(v72) = 0;
                  uint64_t v73 = *((void *)v11 + 7);
                  uint64_t v74 = v66[5];
                  unint64_t v75 = a3;
                  do
                  {
                    if (!(_BYTE)v71) {
                      LODWORD(v72) = v75->u8[0];
                    }
                    uint64_t v76 = v72 >> v71;
                    int v77 = v67 + v71;
                    unsigned int v78 = v77 - 8;
                    if (v77 < 8)
                    {
                      LOBYTE(v71) = v67 + v71;
                      a1 = (faiss::BufferList *)v75;
                    }
                    else
                    {
                      char v79 = 8 - v71;
                      a1 = (faiss::BufferList *)&v75->i8[1];
                      unsigned int v80 = v78 >> 3;
                      if (v78 >= 8)
                      {
                        do
                        {
                          unsigned int v81 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v76 |= (unint64_t)v81 << v79;
                          v79 += 8;
                          --v80;
                        }
                        while (v80);
                        a1 = (faiss::BufferList *)&v75->i8[(v78 >> 3) + 1];
                      }
                      int v71 = ((_BYTE)v71 + (_BYTE)v67) & 7;
                      if (v71)
                      {
                        uint64_t v72 = *(unsigned __int8 *)a1;
                        v76 |= v72 << v79;
                      }
                    }
                    float v68 = v68 + *(float *)(v73 + 4 * (v76 & ~(-1 << v67)));
                    v73 += 4 * v74;
                    ++v70;
                    unint64_t v75 = (int8x16_t *)a1;
                  }
                  while (v70 != v69);
                }
                ++v17;
                if (v68 < v8)
                {
                  if (a4) {
                    uint64_t v82 = *(void *)(a4 + 8 * v59);
                  }
                  else {
                    uint64_t v82 = v59 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v68, v82);
                  int8x16_t v63 = v225;
                  int8x16_t v62 = v228;
                  int8x16_t v65 = v223;
                  int8x16_t v64 = v224;
                }
              }
              a3 += 4;
              ++v59;
            }
            while (v59 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
      }
    }
    else
    {
      switch(v15)
      {
        case 4:
          if (a2)
          {
            uint64_t v105 = 0;
            uint64_t v17 = 0;
            int v106 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int v107 = **((_DWORD **)a1 + 20);
            do
            {
              LODWORD(a6) = a3->i32[0] ^ v107;
              a6 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&a6));
              LOWORD(a6) = vaddlv_u8(*(uint8x8_t *)&a6);
              if (SLODWORD(a6) < v106)
              {
                float v108 = (void *)*((void *)v11 + 4);
                uint64_t v109 = v108[2];
                if ((int)v109 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v110 = *((float *)v11 + 54);
                uint64_t v111 = v108[1];
                if (v111)
                {
                  uint64_t v112 = 0;
                  LOBYTE(v113) = 0;
                  LODWORD(v114) = 0;
                  uint64_t v115 = *((void *)v11 + 7);
                  uint64_t v116 = v108[5];
                  uint64_t v117 = a3;
                  do
                  {
                    if (!(_BYTE)v113) {
                      LODWORD(v114) = v117->u8[0];
                    }
                    uint64_t v118 = v114 >> v113;
                    int v119 = v109 + v113;
                    unsigned int v120 = v119 - 8;
                    if (v119 < 8)
                    {
                      LOBYTE(v113) = v109 + v113;
                      a1 = (faiss::BufferList *)v117;
                    }
                    else
                    {
                      char v121 = 8 - v113;
                      a1 = (faiss::BufferList *)&v117->i8[1];
                      unsigned int v122 = v120 >> 3;
                      if (v120 >= 8)
                      {
                        do
                        {
                          unsigned int v123 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v118 |= (unint64_t)v123 << v121;
                          v121 += 8;
                          --v122;
                        }
                        while (v122);
                        a1 = (faiss::BufferList *)&v117->i8[(v120 >> 3) + 1];
                      }
                      int v113 = ((_BYTE)v113 + (_BYTE)v109) & 7;
                      if (v113)
                      {
                        uint64_t v114 = *(unsigned __int8 *)a1;
                        v118 |= v114 << v121;
                      }
                    }
                    float v110 = v110 + *(float *)(v115 + 4 * (v118 & ~(-1 << v109)));
                    v115 += 4 * v116;
                    ++v112;
                    uint64_t v117 = (int8x16_t *)a1;
                  }
                  while (v112 != v111);
                }
                ++v17;
                if (v110 < v8)
                {
                  if (a4) {
                    uint64_t v124 = *(void *)(a4 + 8 * v105);
                  }
                  else {
                    uint64_t v124 = v105 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v110, v124);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 4);
              ++v105;
            }
            while (v105 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 8:
          if (a2)
          {
            uint64_t v172 = 0;
            uint64_t v17 = 0;
            int v173 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            uint64_t v174 = **((void **)a1 + 20);
            do
            {
              uint8x8_t v175 = (uint8x8_t)vcnt_s8((int8x8_t)(a3->i64[0] ^ v174));
              v175.i16[0] = vaddlv_u8(v175);
              if (v173 > v175.i32[0])
              {
                uint64_t v176 = (void *)*((void *)v11 + 4);
                uint64_t v177 = v176[2];
                if ((int)v177 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v178 = *((float *)v11 + 54);
                uint64_t v179 = v176[1];
                if (v179)
                {
                  uint64_t v180 = 0;
                  LOBYTE(v181) = 0;
                  LODWORD(v182) = 0;
                  uint64_t v183 = *((void *)v11 + 7);
                  uint64_t v184 = v176[5];
                  __int32 v185 = a3;
                  do
                  {
                    if (!(_BYTE)v181) {
                      LODWORD(v182) = v185->u8[0];
                    }
                    uint64_t v186 = v182 >> v181;
                    int v187 = v177 + v181;
                    unsigned int v188 = v187 - 8;
                    if (v187 < 8)
                    {
                      LOBYTE(v181) = v177 + v181;
                      a1 = (faiss::BufferList *)v185;
                    }
                    else
                    {
                      char v189 = 8 - v181;
                      a1 = (faiss::BufferList *)&v185->i8[1];
                      unsigned int v190 = v188 >> 3;
                      if (v188 >= 8)
                      {
                        do
                        {
                          unsigned int v191 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v186 |= (unint64_t)v191 << v189;
                          v189 += 8;
                          --v190;
                        }
                        while (v190);
                        a1 = (faiss::BufferList *)&v185->i8[(v188 >> 3) + 1];
                      }
                      int v181 = ((_BYTE)v181 + (_BYTE)v177) & 7;
                      if (v181)
                      {
                        uint64_t v182 = *(unsigned __int8 *)a1;
                        v186 |= v182 << v189;
                      }
                    }
                    float v178 = v178 + *(float *)(v183 + 4 * (v186 & ~(-1 << v177)));
                    v183 += 4 * v184;
                    ++v180;
                    __int32 v185 = (int8x16_t *)a1;
                  }
                  while (v180 != v179);
                }
                ++v17;
                if (v178 < v8)
                {
                  if (a4) {
                    uint64_t v192 = *(void *)(a4 + 8 * v172);
                  }
                  else {
                    uint64_t v192 = v172 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v178, v192);
                }
              }
              a3 = (int8x16_t *)((char *)a3 + 8);
              ++v172;
            }
            while (v172 != a2);
            goto LABEL_229;
          }
          goto LABEL_228;
        case 16:
          if (a2)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            __int32 v18 = *(_DWORD *)(*((void *)a1 + 1) + 416);
            int8x16_t v19 = *(int8x16_t *)*((void *)a1 + 20);
            int8x16_t v227 = v19;
            do
            {
              int32x2_t v20 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(veorq_s8(*a3, v19))))));
              if (vadd_s32(vdup_lane_s32(v20, 1), v20).i32[0] < v18)
              {
                __int32 v21 = (void *)*((void *)v11 + 4);
                uint64_t v22 = v21[2];
                if ((int)v22 >= 65) {
                  faiss::decode<faiss::PQDecoderGeneric>();
                }
                float v23 = *((float *)v11 + 54);
                uint64_t v24 = v21[1];
                if (v24)
                {
                  uint64_t v25 = 0;
                  LOBYTE(v26) = 0;
                  LODWORD(v27) = 0;
                  uint64_t v28 = *((void *)v11 + 7);
                  uint64_t v29 = v21[5];
                  int v30 = a3;
                  do
                  {
                    if (!(_BYTE)v26) {
                      LODWORD(v27) = v30->u8[0];
                    }
                    uint64_t v31 = v27 >> v26;
                    int v32 = v22 + v26;
                    unsigned int v33 = v32 - 8;
                    if (v32 < 8)
                    {
                      LOBYTE(v26) = v22 + v26;
                      a1 = (faiss::BufferList *)v30;
                    }
                    else
                    {
                      char v34 = 8 - v26;
                      a1 = (faiss::BufferList *)&v30->i8[1];
                      unsigned int v35 = v33 >> 3;
                      if (v33 >= 8)
                      {
                        do
                        {
                          unsigned int v36 = *(unsigned __int8 *)a1;
                          a1 = (faiss::BufferList *)((char *)a1 + 1);
                          v31 |= (unint64_t)v36 << v34;
                          v34 += 8;
                          --v35;
                        }
                        while (v35);
                        a1 = (faiss::BufferList *)&v30->i8[(v33 >> 3) + 1];
                      }
                      int v26 = ((_BYTE)v26 + (_BYTE)v22) & 7;
                      if (v26)
                      {
                        uint64_t v27 = *(unsigned __int8 *)a1;
                        v31 |= v27 << v34;
                      }
                    }
                    float v23 = v23 + *(float *)(v28 + 4 * (v31 & ~(-1 << v22)));
                    v28 += 4 * v29;
                    ++v25;
                    int v30 = (int8x16_t *)a1;
                  }
                  while (v25 != v24);
                }
                ++v17;
                if (v23 < v8)
                {
                  if (a4) {
                    uint64_t v37 = *(void *)(a4 + 8 * v16);
                  }
                  else {
                    uint64_t v37 = v16 | (v12 << 32);
                  }
                  a1 = faiss::RangeQueryResult::add(this, v23, v37);
                  int8x16_t v19 = v227;
                }
              }
              ++a3;
              ++v16;
            }
            while (v16 != a2);
            goto LABEL_229;
          }
LABEL_228:
          uint64_t v17 = 0;
LABEL_229:
          faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
          uint64_t v215 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v17;
LABEL_230:
          *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) = v215;
          return;
      }
    }
    int v151 = *(_DWORD *)(*((void *)a1 + 1) + 416);
    uint64_t v231 = *((void *)a1 + 20);
    int v232 = (int)v15 / 8;
    int v233 = v15 - (v6 & 0xFFFFFFF8);
    if (a2)
    {
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      uint64_t v154 = (int)v15;
      do
      {
        a1 = (faiss::BufferList *)faiss::HammingComputerDefault::hamming((faiss::HammingComputerDefault *)&v231, (const unsigned __int8 *)a3);
        if ((int)a1 < v151)
        {
          uint64_t v155 = (void *)*((void *)v11 + 4);
          uint64_t v156 = v155[2];
          if ((int)v156 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v157 = *((float *)v11 + 54);
          uint64_t v158 = v155[1];
          if (v158)
          {
            uint64_t v159 = 0;
            LOBYTE(v160) = 0;
            LODWORD(v161) = 0;
            uint64_t v162 = *((void *)v11 + 7);
            uint64_t v163 = v155[5];
            uint64_t v164 = a3;
            do
            {
              if (!(_BYTE)v160) {
                LODWORD(v161) = v164->u8[0];
              }
              uint64_t v165 = v161 >> v160;
              int v166 = v156 + v160;
              unsigned int v167 = v166 - 8;
              if (v166 < 8)
              {
                LOBYTE(v160) = v156 + v160;
                a1 = (faiss::BufferList *)v164;
              }
              else
              {
                char v168 = 8 - v160;
                a1 = (faiss::BufferList *)&v164->i8[1];
                unsigned int v169 = v167 >> 3;
                if (v167 >= 8)
                {
                  do
                  {
                    unsigned int v170 = *(unsigned __int8 *)a1;
                    a1 = (faiss::BufferList *)((char *)a1 + 1);
                    v165 |= (unint64_t)v170 << v168;
                    v168 += 8;
                    --v169;
                  }
                  while (v169);
                  a1 = (faiss::BufferList *)&v164->i8[(v167 >> 3) + 1];
                }
                int v160 = ((_BYTE)v160 + (_BYTE)v156) & 7;
                if (v160)
                {
                  uint64_t v161 = *(unsigned __int8 *)a1;
                  v165 |= v161 << v168;
                }
              }
              float v157 = v157 + *(float *)(v162 + 4 * (v165 & ~(-1 << v156)));
              v162 += 4 * v163;
              ++v159;
              uint64_t v164 = (int8x16_t *)a1;
            }
            while (v159 != v158);
          }
          ++v153;
          if (v157 < v8)
          {
            if (a4) {
              uint64_t v171 = *(void *)(a4 + 8 * v152);
            }
            else {
              uint64_t v171 = v152 | (v12 << 32);
            }
            a1 = faiss::RangeQueryResult::add(this, v157, v171);
          }
        }
        a3 = (int8x16_t *)((char *)a3 + v154);
        ++v152;
      }
      while (v152 != a2);
    }
    else
    {
      uint64_t v153 = 0;
    }
    faiss::IndexIVFPQStats::get_indexIVFPQ_stats(a1);
    uint64_t v215 = *((void *)&faiss::IndexIVFPQStats::get_indexIVFPQ_stats(void)::_stats + 1) + v153;
    goto LABEL_230;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a2)
      {
        uint64_t v83 = 0;
        uint64_t v84 = v12 << 32;
        do
        {
          int8x16_t v85 = (void *)*((void *)v11 + 4);
          uint64_t v86 = v85[2];
          if ((int)v86 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v87 = *((float *)v11 + 54);
          uint64_t v88 = v85[1];
          if (v88)
          {
            uint64_t v89 = 0;
            LOBYTE(v90) = 0;
            LODWORD(v91) = 0;
            uint64_t v92 = *((void *)v11 + 8);
            int v93 = a3;
            do
            {
              if (!(_BYTE)v90) {
                LODWORD(v91) = v93->u8[0];
              }
              uint64_t v94 = v91 >> v90;
              int v95 = v86 + v90;
              unsigned int v96 = v95 - 8;
              if (v95 < 8)
              {
                LOBYTE(v90) = v86 + v90;
              }
              else
              {
                char v97 = 8 - v90;
                int v98 = &v93->u8[1];
                if (v96 < 8)
                {
                  int v93 = (int8x16_t *)((char *)v93 + 1);
                }
                else
                {
                  unsigned int v99 = v96 >> 3;
                  unsigned int v100 = v99 - 1;
                  do
                  {
                    unsigned int v101 = *v98++;
                    v94 |= (unint64_t)v101 << v97;
                    v97 += 8;
                    --v99;
                  }
                  while (v99);
                  int v93 = (int8x16_t *)((char *)v93 + v100 + 2);
                }
                int v90 = ((_BYTE)v90 + (_BYTE)v86) & 7;
                if (v90)
                {
                  uint64_t v91 = v93->u8[0];
                  v94 |= v91 << v97;
                }
              }
              float v87 = v87
                  + (float)(*(float *)(*(void *)(*((void *)v11 + 14) + 8 * v89) + 4 * (int)(v94 & ~(-1 << v86)))
                          + (float)(*(float *)(v92 + 4 * (int)(v94 & ~(-1 << v86))) * -2.0));
              v92 += 4 * v85[5];
              ++v89;
            }
            while (v89 != v88);
          }
          uint64_t v102 = v85[4];
          if (v87 < v8)
          {
            if (a4) {
              uint64_t v103 = *(void *)(a4 + 8 * v83);
            }
            else {
              uint64_t v103 = v83 | v84;
            }
            faiss::RangeQueryResult::add(this, v87, v103);
          }
          a3 = (int8x16_t *)((char *)a3 + v102);
          ++v83;
        }
        while (v83 != a2);
      }
    }
    else
    {
      if (v14 != 2)
      {
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v231, "bad precomp mode");
        faiss::FaissException::FaissException(exception, &v231, "virtual void faiss::(anonymous namespace)::IVFPQScanner<faiss::METRIC_L2, faiss::CMax<float, long long>, faiss::PQDecoderGeneric>::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const [METRIC_TYPE = faiss::METRIC_L2, C = faiss::CMax<float, long long>, PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQ.cpp", 1126);
      }
      if (a2)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v12 << 32;
        do
        {
          unsigned int v40 = (void *)*((void *)v11 + 4);
          uint64_t v41 = v40[2];
          if ((int)v41 >= 65) {
            faiss::decode<faiss::PQDecoderGeneric>();
          }
          float v42 = *((float *)v11 + 54);
          uint64_t v43 = v40[1];
          if (v43)
          {
            uint64_t v44 = 0;
            LOBYTE(v45) = 0;
            LODWORD(v46) = 0;
            uint64_t v47 = *((void *)v11 + 7);
            uint64_t v48 = a3;
            do
            {
              if (!(_BYTE)v45) {
                LODWORD(v46) = v48->u8[0];
              }
              uint64_t v49 = v46 >> v45;
              int v50 = v41 + v45;
              unsigned int v51 = v50 - 8;
              if (v50 < 8)
              {
                LOBYTE(v45) = v41 + v45;
              }
              else
              {
                char v52 = 8 - v45;
                unint64_t v53 = &v48->u8[1];
                if (v51 < 8)
                {
                  uint64_t v48 = (int8x16_t *)((char *)v48 + 1);
                }
                else
                {
                  unsigned int v54 = v51 >> 3;
                  unsigned int v55 = v54 - 1;
                  do
                  {
                    unsigned int v56 = *v53++;
                    v49 |= (unint64_t)v56 << v52;
                    v52 += 8;
                    --v54;
                  }
                  while (v54);
                  uint64_t v48 = (int8x16_t *)((char *)v48 + v55 + 2);
                }
                int v45 = ((_BYTE)v45 + (_BYTE)v41) & 7;
                if (v45)
                {
                  uint64_t v46 = v48->u8[0];
                  v49 |= v46 << v52;
                }
              }
              float v42 = v42 + *(float *)(v47 + 4 * (v49 & ~(-1 << v41)));
              v47 += 4 * v40[5];
              ++v44;
            }
            while (v44 != v43);
          }
          uint64_t v57 = v40[4];
          if (v42 < v8)
          {
            if (a4) {
              uint64_t v58 = *(void *)(a4 + 8 * v38);
            }
            else {
              uint64_t v58 = v38 | v39;
            }
            faiss::RangeQueryResult::add(this, v42, v58);
          }
          a3 = (int8x16_t *)((char *)a3 + v57);
          ++v38;
        }
        while (v38 != a2);
      }
    }
  }
  else
  {
    if (*((unsigned char *)a1 + 44))
    {
      uint64_t v104 = (const float **)((char *)a1 + 72);
      (*(void (**)(void, void, void, uint64_t))(**(void **)(*((void *)a1 + 1) + 40) + 104))(*(void *)(*((void *)a1 + 1) + 40), *((void *)a1 + 17), *((void *)a1 + 9), v12);
      if (!a2) {
        return;
      }
    }
    else
    {
      uint64_t v104 = (const float **)((char *)a1 + 136);
      if (!a2) {
        return;
      }
    }
    uint64_t v216 = 0;
    uint64_t v217 = *v104;
    uint64_t v218 = v12 << 32;
    do
    {
      faiss::ProductQuantizer::decode(*((_DWORD **)v11 + 4), (uint64_t)a3, *((void *)v11 + 10));
      uint64_t v219 = *(void *)(*((void *)v11 + 4) + 32);
      float v220 = faiss::fvec_L2sqr(*((faiss **)v11 + 10), v217, *((int *)v11 + 6));
      if (v220 < v8)
      {
        if (a4) {
          uint64_t v221 = *(void *)(a4 + 8 * v216);
        }
        else {
          uint64_t v221 = v216 | v218;
        }
        faiss::RangeQueryResult::add(this, v220, v221);
      }
      a3 = (int8x16_t *)((char *)a3 + v219);
      ++v216;
    }
    while (a2 != v216);
  }
}

void sub_1DD025468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void *faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  return a1;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)1,faiss::CMax<float,long long>,faiss::PQDecoderGeneric>::~IVFPQScanner(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1E01AF670);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          float result = memcmp((const void *)(*(void *)a3 + *(void *)(a3 + 8) * v22), (const void *)(*(void *)a3 + *(void *)(a3 + 8) * v23), *(void *)(a3 + 8));
          if ((int)result >= 1)
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, v11 + 1, a2 - 1, (uint64_t *)a3);
          break;
        case 4uLL:
          float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, v11 + 1, v11 + 2, a2 - 1, (uint64_t *)a3);
          break;
        case 5uLL:
          float result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, (uint64_t *)a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, &v11[v15 >> 1], a2 - 1, (uint64_t *)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11 + 1, v17 - 1, a2 - 2, (uint64_t *)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3, (uint64_t *)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v17 - 1, v17, &v11[v16 + 1], (uint64_t *)a3);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(&v11[v15 >> 1], v11, a2 - 1, (uint64_t *)a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (memcmp((const void *)(*(void *)a3 + *(void *)(a3 + 8) * *(v11 - 1)), (const void *)(*(void *)a3 + *(void *)(a3 + 8) * *v11), *(void *)(a3 + 8)) <= 0)
    {
      float result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(v11, a2, (uint64_t *)a3);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    int8x16_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(v11, a2, (uint64_t *)a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      float result = std::__introsort<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, a2, (uint64_t *)a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(v11, a2, (uint64_t *)a3);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    int v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0;
      uint64_t v8 = *a3;
      size_t v7 = a3[1];
      uint64_t v9 = result;
      do
      {
        uint64_t v11 = *v9;
        uint64_t v10 = v9[1];
        uint64_t v9 = v5;
        float result = (int *)memcmp((const void *)(v8 + v7 * v10), (const void *)(v8 + v7 * v11), v7);
        if ((int)result >= 1)
        {
          uint64_t v12 = v6;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = v11;
            if (!v12) {
              break;
            }
            uint64_t v11 = *(int *)((char *)v4 + v12 - 4);
            float result = (int *)memcmp((const void *)(v8 + v7 * v10), (const void *)(v8 + v7 * v11), v7);
            v12 -= 4;
            if ((int)result <= 0)
            {
              uint64_t v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v10;
        }
        char v5 = v9 + 1;
        v6 += 4;
      }
      while (v9 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    int v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = *a3;
      size_t v6 = a3[1];
      do
      {
        uint64_t v9 = *v4;
        uint64_t v8 = v4[1];
        int v4 = v5;
        float result = (int *)memcmp((const void *)(v7 + v6 * v8), (const void *)(v7 + v6 * v9), v6);
        if ((int)result >= 1)
        {
          uint64_t v10 = v4;
          do
          {
            *uint64_t v10 = v9;
            uint64_t v9 = *(v10 - 2);
            float result = (int *)memcmp((const void *)(v7 + v6 * v8), (const void *)(v7 + v6 * v9), v6);
            --v10;
          }
          while ((int)result > 0);
          *uint64_t v10 = v8;
        }
        char v5 = v4 + 1;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  uint64_t v9 = *a4;
  size_t v8 = a4[1];
  uint64_t v10 = (const void *)(*a4 + v8 * v6);
  uint64_t v11 = (const void *)(*a4 + v8 * v7);
  int v12 = memcmp(v10, v11, v8);
  uint64_t v13 = *a3;
  int v14 = memcmp((const void *)(v9 + v8 * v13), v10, v8);
  if (v12 > 0)
  {
    if (v14 >= 1)
    {
      *a1 = v13;
      *a3 = v7;
      return 1;
    }
    *a1 = v6;
    *a2 = v7;
    uint64_t v17 = *a3;
    if (memcmp((const void *)(v9 + v8 * v17), v11, v8) < 1) {
      return 1;
    }
    *a2 = v17;
    *a3 = v7;
    return 2;
  }
  if (v14 >= 1)
  {
    *a2 = v13;
    *a3 = v6;
    uint64_t v15 = *a2;
    uint64_t v16 = *a1;
    if (memcmp((const void *)(v9 + v8 * v15), (const void *)(v9 + v8 * v16), v8) < 1) {
      return 1;
    }
    *a1 = v15;
    *a2 = v16;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *a1;
  uint64_t v7 = *a3;
  size_t v6 = a3[1];
  size_t v8 = (const void *)(*a3 + v6 * v5);
  if (memcmp(v8, (const void *)(*a3 + v6 * *(a2 - 1)), v6) <= 0)
  {
    uint64_t v11 = a1 + 1;
    do
    {
      uint64_t v9 = v11;
      if (v11 >= v3) {
        break;
      }
      ++v11;
    }
    while (memcmp(v8, (const void *)(v7 + v6 * *v9), v6) < 1);
  }
  else
  {
    uint64_t v9 = a1;
    do
    {
      uint64_t v10 = v9[1];
      ++v9;
    }
    while (memcmp(v8, (const void *)(v7 + v6 * v10), v6) <= 0);
  }
  if (v9 < v3)
  {
    do
      uint64_t v12 = *--v3;
    while (memcmp(v8, (const void *)(v7 + v6 * v12), v6) > 0);
  }
  if (v9 < v3)
  {
    int v13 = *v9;
    int v14 = *v3;
    do
    {
      *uint64_t v9 = v14;
      *uint64_t v3 = v13;
      do
      {
        uint64_t v15 = v9[1];
        ++v9;
        int v13 = v15;
      }
      while (memcmp(v8, (const void *)(v7 + v6 * v15), v6) < 1);
      do
      {
        uint64_t v16 = *--v3;
        int v14 = v16;
      }
      while (memcmp(v8, (const void *)(v7 + v6 * v16), v6) > 0);
    }
    while (v9 < v3);
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v5;
  return v9;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,faiss::CodeCmp &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = *a1;
  uint64_t v8 = *a3;
  size_t v7 = a3[1];
  uint64_t v9 = (const void *)(*a3 + v7 * v6);
  do
    uint64_t v10 = a1[++v5];
  while (memcmp((const void *)(v8 + v7 * v10), v9, v7) > 0);
  uint64_t v11 = &a1[v5];
  uint64_t v12 = &a1[v5 - 1];
  if (v5 == 1)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      uint64_t v14 = *--a2;
    }
    while (memcmp((const void *)(v8 + v7 * v14), v9, v7) <= 0);
  }
  else
  {
    do
      uint64_t v13 = *--a2;
    while (memcmp((const void *)(v8 + v7 * v13), v9, v7) < 1);
  }
  if (v11 < a2)
  {
    int v22 = v6;
    int v15 = *a2;
    int v16 = v10;
    uint64_t v17 = v11;
    int v18 = a2;
    do
    {
      *uint64_t v17 = v15;
      *int v18 = v16;
      do
      {
        uint64_t v19 = v17[1];
        ++v17;
        int v16 = v19;
      }
      while (memcmp((const void *)(v8 + v7 * v19), v9, v7) > 0);
      do
      {
        uint64_t v20 = *--v18;
        int v15 = v20;
      }
      while (memcmp((const void *)(v8 + v7 * v20), v9, v7) < 1);
    }
    while (v17 < v18);
    uint64_t v12 = v17 - 1;
    LODWORD(v6) = v22;
  }
  if (v12 != a1) {
    *a1 = *v12;
  }
  *uint64_t v12 = v6;
  return v12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, uint64_t a3)
{
  int v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (memcmp((const void *)(*(void *)a3 + *(void *)(a3 + 8) * v8), (const void *)(*(void *)a3 + *(void *)(a3 + 8) * v9), *(void *)(a3 + 8)) >= 1)
      {
        *a1 = v8;
        *(v4 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a2 - 1, (uint64_t *)a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, (uint64_t *)a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, (uint64_t *)a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a1 + 1, a1 + 2, (uint64_t *)a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v12 = 0;
      uint64_t v14 = *(void *)a3;
      size_t v13 = *(void *)(a3 + 8);
      uint64_t v15 = 12;
      int v22 = v4;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v10;
    if (memcmp((const void *)(v14 + v13 * v16), (const void *)(v14 + v13 * v17), v13) >= 1)
    {
      uint64_t v18 = v15;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v17;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v17 = *(int *)((char *)a1 + v18 - 8);
        int v20 = memcmp((const void *)(v14 + v13 * v16), (const void *)(v14 + v13 * v17), v13);
        uint64_t v18 = v19;
        if (v20 <= 0)
        {
          BOOL v21 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      BOOL v21 = a1;
LABEL_12:
      int v4 = v22;
      int *v21 = v16;
      if (++v12 == 8) {
        return v11 + 1 == v22;
      }
    }
    uint64_t v10 = v11;
    v15 += 4;
    if (++v11 == v4) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v13 = *a5;
  size_t v12 = a5[1];
  uint64_t result = memcmp((const void *)(v13 + v12 * v10), (const void *)(v13 + v12 * v11), v12);
  if ((int)result >= 1)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v15 = *a3;
    uint64_t v16 = *a2;
    uint64_t result = memcmp((const void *)(v13 + v12 * v15), (const void *)(v13 + v12 * v16), v12);
    if ((int)result >= 1)
    {
      *a2 = v15;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v18 = *a1;
      uint64_t result = memcmp((const void *)(v13 + v12 * v17), (const void *)(v13 + v12 * v18), v12);
      if ((int)result >= 1)
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v13 = *a4;
  uint64_t v15 = *a6;
  size_t v14 = a6[1];
  uint64_t result = memcmp((const void *)(v15 + v14 * v12), (const void *)(v15 + v14 * v13), v14);
  if ((int)result >= 1)
  {
    *a4 = v12;
    *a5 = v13;
    uint64_t v17 = *a4;
    uint64_t v18 = *a3;
    uint64_t result = memcmp((const void *)(v15 + v14 * v17), (const void *)(v15 + v14 * v18), v14);
    if ((int)result >= 1)
    {
      *a3 = v17;
      *a4 = v18;
      uint64_t v19 = *a3;
      uint64_t v20 = *a2;
      uint64_t result = memcmp((const void *)(v15 + v14 * v19), (const void *)(v15 + v14 * v20), v14);
      if ((int)result >= 1)
      {
        *a2 = v19;
        *a3 = v20;
        uint64_t v21 = *a2;
        uint64_t v22 = *a1;
        uint64_t result = memcmp((const void *)(v15 + v14 * v21), (const void *)(v15 + v14 * v22), v14);
        if ((int)result >= 1)
        {
          *a1 = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (char **)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      size_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (memcmp((const void *)(*(void *)a4 + *(void *)(a4 + 8) * v15), (const void *)(*(void *)a4 + *(void *)(a4 + 8) * v16), *(void *)(a4 + 8)) >= 1)
        {
          int *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (char **)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      uint64_t v18 = a2 - 1;
      do
      {
        int v19 = *a1;
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(a1, (uint64_t *)a4, v17);
        if (v18 == v20)
        {
          *uint64_t v20 = v19;
        }
        else
        {
          *uint64_t v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), (uint64_t *)a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(uint64_t result, char **a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v8 = a3;
      uint64_t v9 = ((uint64_t)a4 - result) >> 1;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (int *)(result + 4 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      int v13 = *v11;
      if (v9 + 2 >= a3)
      {
        uint64_t v15 = *a2;
        size_t v14 = (size_t)a2[1];
      }
      else
      {
        uint64_t v21 = v11[1];
        size_t v14 = (size_t)a2[1];
        __s2 = *a2;
        if (memcmp(&(*a2)[v14 * v13], &(*a2)[v14 * v21], v14) > 0)
        {
          int v13 = v21;
          ++v11;
          uint64_t v10 = v12;
        }
        uint64_t v15 = __s2;
      }
      uint64_t v16 = *v5;
      __s2a = &v15[v14 * v16];
      uint64_t result = memcmp(&v15[v14 * v13], __s2a, v14);
      if ((int)result <= 0)
      {
        int v22 = v16;
        uint64_t v23 = v8;
        uint64_t v24 = v7;
        do
        {
          uint64_t v17 = v11;
          *uint64_t v5 = v13;
          if (v7 < v10) {
            break;
          }
          uint64_t v18 = (2 * v10) | 1;
          unint64_t v11 = (int *)(v6 + 4 * v18);
          uint64_t v10 = 2 * v10 + 2;
          int v13 = *v11;
          if (v10 >= v8)
          {
            uint64_t v10 = v18;
          }
          else
          {
            uint64_t v19 = v11[1];
            int v20 = memcmp(&v15[v14 * v13], &v15[v14 * v19], v14);
            if (v20 > 0)
            {
              int v13 = v19;
              ++v11;
            }
            uint64_t v8 = v23;
            uint64_t v7 = v24;
            if (v20 <= 0) {
              uint64_t v10 = v18;
            }
          }
          uint64_t result = memcmp(&v15[v14 * v13], __s2a, v14);
          uint64_t v5 = v17;
        }
        while ((int)result < 1);
        *uint64_t v17 = v22;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  size_t v8 = a2[1];
  uint64_t v17 = *a2;
  do
  {
    uint64_t v9 = &a1[v5];
    int v12 = v9[1];
    uint64_t v10 = v9 + 1;
    int v11 = v12;
    uint64_t v13 = (2 * v5) | 1;
    uint64_t v14 = 2 * v5 + 2;
    if (v14 >= a3)
    {
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      uint64_t v15 = (int)v10[1];
      if (memcmp((const void *)(v17 + v8 * v11), (const void *)(v17 + v8 * v15), v8) <= 0)
      {
        uint64_t v5 = v13;
      }
      else
      {
        int v11 = v15;
        ++v10;
        uint64_t v5 = v14;
      }
    }
    *a1 = v11;
    a1 = v10;
  }
  while (v5 <= v7);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,faiss::CodeCmp &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v8 = *v7;
    uint64_t v9 = (_DWORD *)(a2 - 4);
    uint64_t v10 = *(int *)(a2 - 4);
    uint64_t v12 = *a3;
    size_t v11 = a3[1];
    uint64_t v13 = (const void *)(*a3 + v11 * v10);
    uint64_t result = memcmp((const void *)(*a3 + v11 * v8), v13, v11);
    if ((int)result >= 1)
    {
      do
      {
        uint64_t v14 = v7;
        *uint64_t v9 = v8;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (int *)(v5 + 4 * v6);
        uint64_t v8 = *v7;
        uint64_t result = memcmp((const void *)(v12 + v11 * v8), v13, v11);
        uint64_t v9 = v14;
      }
      while ((int)result > 0);
      _DWORD *v14 = v10;
    }
  }
  return result;
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::distance_to_code()
{
  __assert_rtn("distance_to_code", "IndexIVFPQ.cpp", 1062, "precompute_mode == 2");
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes()
{
  __assert_rtn("scan_codes", "IndexIVFPQ.cpp", 1090, "precompute_mode == 2");
}

void faiss::anonymous namespace'::IVFPQScanner<(faiss::MetricType)0,faiss::CMin<float,long long>,faiss::PQDecoder8>::scan_codes_range()
{
  __assert_rtn("scan_codes_range", "IndexIVFPQ.cpp", 1117, "precompute_mode == 2");
}

void faiss::anonymous namespace'::QueryTables::QueryTables(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 112) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 88) = v6;
    operator delete(v6);
  }
}

void faiss::IndexBinary::range_search(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, int a4, faiss::RangeSearchResult *a5)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "range search not implemented");
  faiss::FaissException::FaissException(exception, v6, "virtual void faiss::IndexBinary::range_search(idx_t, const uint8_t *, int, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 26);
}

void sub_1DD026870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::assign(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, uint64_t *a4, uint64_t a5)
{
  std::vector<int>::vector(&v10, a5 * a2);
  (*(void (**)(faiss::IndexBinary *, uint64_t, const unsigned __int8 *, uint64_t, std::vector<int>::pointer, uint64_t *))(*(void *)this + 40))(this, a2, a3, a5, v10.__begin_, a4);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
}

void sub_1DD026948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void faiss::IndexBinary::add_with_ids(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, const uint64_t *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "add_with_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexBinary::add_with_ids(idx_t, const uint8_t *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 36);
}

void sub_1DD0269E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::remove_ids()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "remove_ids not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v1, "virtual size_t faiss::IndexBinary::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 40);
}

void sub_1DD026A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexBinary::reconstruct(faiss::IndexBinary *this, uint64_t a2, unsigned __int8 *a3)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "reconstruct not implemented for this type of index");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::IndexBinary::reconstruct(idx_t, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 45);
}

void sub_1DD026B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

int *faiss::IndexBinary::reconstruct_n(int *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  if (a3 >= 1)
  {
    uint64_t v7 = this;
    for (uint64_t i = 0; i != a3; ++i)
      this = (int *)(*(uint64_t (**)(int *, uint64_t, unsigned __int8 *))(*(void *)v7 + 72))(v7, a2 + i, &a4[i * v7[2]]);
  }
  return this;
}

void *faiss::IndexBinary::search_and_reconstruct(faiss::IndexBinary *this, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, int *a5, uint64_t *a6, unsigned __int8 *a7)
{
  if (a4 <= 0)
  {
    memset(&v21, 0, sizeof(v21));
    int v17 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v21, v17 + 1, 0);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v21;
    }
    else {
      uint64_t v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v21.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v18, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v21, "virtual void faiss::IndexBinary::search_and_reconstruct(idx_t, const uint8_t *, idx_t, int32_t *, idx_t *, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexBinary.cpp", 61);
  }
  uint64_t result = (void *)(*(uint64_t (**)(faiss::IndexBinary *, uint64_t, const unsigned __int8 *))(*(void *)this + 40))(this, a2, a3);
  if (a2 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v13;
      uint64_t v16 = a4;
      do
      {
        if (a6[v15] < 0) {
          uint64_t result = memset(&a7[v15 * *((int *)this + 2)], 255, *((int *)this + 2));
        }
        else {
          uint64_t result = (void *)(*(uint64_t (**)(faiss::IndexBinary *))(*(void *)this + 72))(this);
        }
        ++v15;
        --v16;
      }
      while (v16);
      ++v14;
      v13 += a4;
    }
    while (v14 != a2);
  }
  return result;
}

void sub_1DD026DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexBinary::display(faiss::IndexBinary *this)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  return printf("Index: %s  -> %lld elements\n", (const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), *((void *)this + 2));
}

void faiss::IndexIVFPQR::IndexIVFPQR(faiss::IndexIVFPQR *this, faiss::Index *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1DD026EE8(_Unwind_Exception *a1)
{
  faiss::IndexIVFPQ::~IndexIVFPQ(v1);
  _Unwind_Resume(a1);
}

faiss::IndexIVFPQR *faiss::IndexIVFPQR::IndexIVFPQR(faiss::IndexIVFPQR *this)
{
  uint64_t v2 = faiss::IndexIVFPQ::IndexIVFPQ(this);
  *(void *)uint64_t v2 = &unk_1F383E4E0;
  faiss::ProductQuantizer::ProductQuantizer((faiss::IndexIVFPQ *)((char *)v2 + 448));
  *((void *)this + 77) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_DWORD *)this + 156) = 1065353216;
  *((unsigned char *)this + 232) = 1;
  return this;
}

void sub_1DD026FE4(_Unwind_Exception *a1)
{
  faiss::IndexIVFPQ::~IndexIVFPQ(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQR::reset(faiss::IndexIVFPQR *this)
{
  uint64_t result = faiss::IndexIVF::reset(this);
  *((void *)this + 76) = *((void *)this + 75);
  return result;
}

void faiss::IndexIVFPQR::train_residual(faiss::IndexIVFPQR *this, uint64_t a2, const float *a3)
{
}

void sub_1DD027110(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVFPQR::add_with_ids(faiss::IndexIVFPQR *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
  return (*(uint64_t (**)(faiss::IndexIVFPQR *, uint64_t, const float *, const uint64_t *, void))(*(void *)this + 152))(this, a2, a3, a4, 0);
}

void faiss::IndexIVFPQR::add_core(faiss::IndexIVFPQR *this, uint64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
}

void sub_1DD02726C(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void faiss::IndexIVFPQR::search_preassigned(faiss *a1)
{
}

void sub_1DD027954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void faiss::IndexIVFPQR::reconstruct_from_offset(faiss::IndexIVFPQR *this, uint64_t a2, uint64_t a3, float *a4)
{
  unint64_t v4 = a4;
  faiss::IndexIVFPQ::reconstruct_from_offset(this, a2, a3, a4);
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), a2, a3);
  if (v8 < 0 || (uint64_t v9 = v8, v8 >= *((void *)this + 2))) {
    faiss::IndexIVFPQR::reconstruct_from_offset();
  }
  std::vector<float>::vector(__p, *((int *)this + 2));
  faiss::ProductQuantizer::decode((_DWORD *)this + 112, *((void *)this + 75) + *((void *)this + 60) * v9, (uint64_t)__p[0]);
  uint64_t v10 = *((unsigned int *)this + 2);
  size_t v11 = __p[0];
  if ((int)v10 < 1)
  {
    if (!__p[0]) {
      return;
    }
  }
  else
  {
    uint64_t v12 = (float *)__p[0];
    do
    {
      float v13 = *v12++;
      *unint64_t v4 = v13 + *v4;
      ++v4;
      --v10;
    }
    while (v10);
  }
  __p[1] = v11;
  operator delete(v11);
}

void sub_1DD027AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *faiss::IndexIVFPQR::merge_from(faiss::IndexIVFPQR *this, faiss::IndexIVF *lpsrc, uint64_t a3)
{
  if (!v6)
  {
    memset(&v13, 0, sizeof(v13));
    int v9 = snprintf(0, 0, "Error: '%s' failed", "other");
    std::string::resize(&v13, v9 + 1, 0);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v13;
    }
    else {
      uint64_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v13.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v10, size, "Error: '%s' failed", "other");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v13, "virtual void faiss::IndexIVFPQR::merge_from(IndexIVF &, idx_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQR.cpp", 206);
  }
  uint64_t v7 = v6;
  faiss::IndexIVF::merge_from((faiss::InvertedLists **)this, (faiss::InvertedLists **)lpsrc, a3);
  uint64_t result = std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)this + 600, *((char **)this + 76), v7[75], v7[76], v7[76] - v7[75]);
  v7[76] = v7[75];
  return result;
}

void sub_1DD027C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVFPQR::remove_ids()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "not implemented");
  faiss::FaissException::FaissException(exception, v1, "virtual size_t faiss::IndexIVFPQR::remove_ids(const IDSelector &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVFPQR.cpp", 218);
}

void sub_1DD027CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexIVFPQR::~IndexIVFPQR(faiss::IndexIVFPQR *this)
{
  faiss::IndexIVFPQR::~IndexIVFPQR(this);
  JUMPOUT(0x1E01AF670);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F383E4E0;
  uint64_t v2 = (void *)*((void *)this + 75);
  if (v2)
  {
    *((void *)this + 76) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 72);
  if (v3)
  {
    *((void *)this + 73) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 69);
  if (v4)
  {
    *((void *)this + 70) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1F383E188;
  free(*((void **)this + 53));
  uint64_t v5 = (void *)*((void *)this + 46);
  if (v5)
  {
    *((void *)this + 47) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 43);
  if (v6)
  {
    *((void *)this + 44) = v6;
    operator delete(v6);
  }
  faiss::IndexIVF::~IndexIVF(this);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint64_t v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    std::string v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      int v16 = operator new(v15);
    }
    else {
      int v16 = 0;
    }
    int v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    int v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      int v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      int v32 = v26;
      do
      {
        char v33 = *--v31;
        *--int v32 = v33;
      }
      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    char v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    unsigned int v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    int v20 = *(char **)(a1 + 8);
LABEL_17:
    std::string v21 = &v5[v6];
    int v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void faiss::IndexIVFPQR::reconstruct_from_offset()
{
  __assert_rtn("reconstruct_from_offset", "IndexIVFPQR.cpp", 195, "0 <= id && id < ntotal");
}

uint64_t faiss::IndexFlat::IndexFlat(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = 0;
  *(void *)uint64_t result = &unk_1F383FD80;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = 0;
  *(void *)uint64_t result = &unk_1F383FD80;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

char *faiss::IndexFlat::add(faiss::IndexFlat *this, uint64_t a2, float *a3)
{
  uint64_t result = std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)this + 40, *((void *)this + 6), (char *)a3, (char *)&a3[*((int *)this + 2) * a2], *((int *)this + 2) * a2);
  *((void *)this + 2) += a2;
  return result;
}

void *faiss::IndexFlat::reset(void *this)
{
  this[6] = this[5];
  this[2] = 0;
  return this;
}

void faiss::IndexFlat::search(faiss::IndexFlat *this, unint64_t a2, const float *a3, int64_t a4, float *a5, uint64_t *a6)
{
  if (a4 <= 0)
  {
    memset(&v12, 0, sizeof(v12));
    int v8 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v12, v8 + 1, 0);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v12;
    }
    else {
      uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v12.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v9, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v12, "virtual void faiss::IndexFlat::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexFlat.cpp", 40);
  }
  int v7 = *((_DWORD *)this + 7);
  if (v7 == 1)
  {
    v12.__r_.__value_.__r.__words[0] = a2;
    v12.__r_.__value_.__l.__size_ = a4;
    v12.__r_.__value_.__r.__words[2] = (std::string::size_type)a6;
    std::string v13 = a5;
    faiss::knn_L2sqr((uint64_t)a3, *((const float **)this + 5), *((int *)this + 2), a2, *((void *)this + 2), (int8x16_t *)&v12);
  }
  else
  {
    v12.__r_.__value_.__r.__words[0] = a2;
    v12.__r_.__value_.__l.__size_ = a4;
    v12.__r_.__value_.__r.__words[2] = (std::string::size_type)a6;
    std::string v13 = a5;
    if (v7) {
      faiss::knn_extra_metrics((uint64_t)a3, *((float **)this + 5), *((int *)this + 2), a2, *((void *)this + 2), v7, &v12, *((float *)this + 8));
    }
    else {
      faiss::knn_inner_product((uint64_t)a3, *((const float **)this + 5), *((int *)this + 2), a2, *((void *)this + 2), (int8x16_t *)&v12);
    }
  }
}

void sub_1DD02826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexFlat::range_search(faiss::IndexFlat *this, unint64_t a2, faiss *a3, float a4, faiss::RangeSearchResult *a5, uint64_t a6, uint64_t a7, faiss::RangeSearchResult *a8)
{
  int v10 = *((_DWORD *)this + 7);
  if (v10 == 1)
  {
    size_t v15 = (const float *)*((void *)this + 5);
    unint64_t v16 = *((int *)this + 2);
    uint64_t v17 = *((void *)this + 2);
    return faiss::range_search_L2sqr(a3, v15, v16, a2, v17, a5, a4, a8);
  }
  else
  {
    if (v10)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v19, "metric type not supported");
      faiss::FaissException::FaissException(exception, v19, "virtual void faiss::IndexFlat::range_search(idx_t, const float *, float, RangeSearchResult *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexFlat.cpp", 71);
    }
    size_t v11 = (const float *)*((void *)this + 5);
    unint64_t v12 = *((int *)this + 2);
    uint64_t v13 = *((void *)this + 2);
    return faiss::range_search_inner_product(a3, v11, v12, a2, v13, a5, a4, a8);
  }
}

void sub_1DD0283A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexFlat::compute_distance_subset(faiss::IndexFlat *this, uint64_t a2, float *a3, uint64_t a4, faiss *a5, const float *a6)
{
  int v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    uint64_t v9 = (const float *)*((void *)this + 5);
    unint64_t v10 = *((int *)this + 2);
    faiss::fvec_L2sqr_by_idx(a5, a3, v9, a6, v10, a2, a4);
  }
  else
  {
    if (v6)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "metric type not supported");
      faiss::FaissException::FaissException(exception, v12, "void faiss::IndexFlat::compute_distance_subset(idx_t, const float *, idx_t, float *, const idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexFlat.cpp", 90);
    }
    int v7 = (const float *)*((void *)this + 5);
    unint64_t v8 = *((int *)this + 2);
    faiss::fvec_inner_products_by_idx(a5, a3, v7, a6, v8, a2, a4);
  }
}

void sub_1DD0284F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::IndexFlat::remove_ids(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if (((**a2)(a2, v5) & 1) == 0)
      {
        if (v5 > v6) {
          memmove((void *)(*(void *)(a1 + 40) + 4 * v6 * *(int *)(a1 + 8)), (const void *)(*(void *)(a1 + 40) + 4 * v5 * *(int *)(a1 + 8)), 4 * *(int *)(a1 + 8));
        }
        ++v6;
      }
      ++v5;
      uint64_t v3 = *(void *)(a1 + 16);
    }
    while (v5 < v3);
  }
  uint64_t v7 = v3 - v6;
  if (v3 != v6)
  {
    *(void *)(a1 + 16) = v6;
    std::vector<float>::resize(a1 + 40, v6 * *(int *)(a1 + 8));
  }
  return v7;
}

void faiss::IndexFlat::get_distance_computer(faiss::IndexFlat *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1)
  {
    if (v1 == 1) {
      operator new();
    }
    uint64_t v2 = *((int *)this + 2);
    faiss::get_extra_distance_computer(v2, v1);
  }
  operator new();
}

void *faiss::IndexFlat::reconstruct(faiss::IndexFlat *this, uint64_t a2, float *__dst)
{
  return memcpy(__dst, (const void *)(*((void *)this + 5) + 4 * *((int *)this + 2) * a2), 4 * *((int *)this + 2));
}

uint64_t faiss::IndexFlat::sa_code_size(faiss::IndexFlat *this)
{
  return 4 * *((int *)this + 2);
}

void *faiss::IndexFlat::sa_encode(faiss::IndexFlat *this, uint64_t a2, const float *__src, unsigned __int8 *__dst)
{
  return memcpy(__dst, __src, 4 * a2 * *((int *)this + 2));
}

void *faiss::IndexFlat::sa_decode(faiss::IndexFlat *this, uint64_t a2, const unsigned __int8 *__src, float *__dst)
{
  return memcpy(__dst, __src, 4 * a2 * *((int *)this + 2));
}

uint64_t faiss::IndexFlat1D::IndexFlat1D(uint64_t this, char a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 256;
  *(void *)(this + 28) = 1;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F383E2E8;
  *(unsigned char *)(this + 64) = a2;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 256;
  *(void *)(this + 28) = 1;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F383E2E8;
  *(unsigned char *)(this + 64) = a2;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

uint64_t faiss::IndexFlat1D::update_permutation(faiss::IndexFlat1D *this)
{
  std::vector<long long>::resize((uint64_t)this + 72, *((void *)this + 2));
  int64_t v3 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 5);
  uint64_t v5 = (const float *)*((void *)this + 9);
  if (v3 > 999999)
  {
    faiss::fvec_argsort_parallel((faiss *)v3, v4, v5, v2);
  }
  return faiss::fvec_argsort(v3, v4, v5, v2);
}

char *faiss::IndexFlat1D::add(faiss::IndexFlat1D *this, uint64_t a2, float *a3)
{
  uint64_t result = std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>((uint64_t)this + 40, *((void *)this + 6), (char *)a3, (char *)&a3[*((int *)this + 2) * a2], *((int *)this + 2) * a2);
  *((void *)this + 2) += a2;
  if (*((unsigned char *)this + 64))
  {
    return (char *)faiss::IndexFlat1D::update_permutation(this);
  }
  return result;
}

void *faiss::IndexFlat1D::reset(void *this)
{
  this[6] = this[5];
  this[2] = 0;
  this[10] = this[9];
  return this;
}

void *faiss::IndexFlat1D::search(void *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6)
{
  if (a4 <= 0)
  {
    memset(&v34, 0, sizeof(v34));
    int v26 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v34, v26 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v34;
    }
    else {
      uint64_t v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v34.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v27, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v34, "virtual void faiss::IndexFlat1D::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexFlat.cpp", 237);
  }
  uint64_t v6 = (void *)this[9];
  if (this[2] != (uint64_t)(this[10] - (void)v6) >> 3)
  {
    memset(&v34, 0, sizeof(v34));
    int v30 = snprintf(0, 0, "Error: '%s' failed: Call update_permutation before search", "perm.size() == ntotal");
    std::string::resize(&v34, v30 + 1, 0);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v34;
    }
    else {
      uint64_t v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v32 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v32 = v34.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v31, v32, "Error: '%s' failed: Call update_permutation before search", "perm.size() == ntotal");
    char v33 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v33, &v34, "virtual void faiss::IndexFlat1D::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexFlat.cpp", 240);
  }
  if (a2 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = this[5];
    do
    {
      float v9 = a3[v7];
      if (*(float *)(v8 + 4 * *v6) <= v9)
      {
        uint64_t v10 = this[2];
        uint64_t v14 = v10 - 1;
        if (*(float *)(v8 + 4 * v6[v10 - 1]) > v9)
        {
          if (v10 < 2)
          {
            uint64_t v14 = 0;
          }
          else
          {
            uint64_t v14 = 0;
            do
            {
              uint64_t v15 = v10 + v14;
              if (v10 + v14 < 0 != __OFADD__(v10, v14)) {
                ++v15;
              }
              uint64_t v16 = v15 >> 1;
              if (*(float *)(v8 + 4 * v6[v16]) > v9) {
                uint64_t v10 = v16;
              }
              else {
                uint64_t v14 = v16;
              }
            }
            while (v14 + 1 < v10);
          }
          uint64_t v18 = 0;
          while (1)
          {
            uint64_t v19 = v6[v14];
            uint64_t v20 = v6[v10];
            float v21 = v9 - *(float *)(v8 + 4 * v19);
            float v22 = *(float *)(v8 + 4 * v20) - v9;
            if (v21 >= v22)
            {
              a5[v18] = v22;
              a6[v18] = v20;
              if (++v10 >= this[2])
              {
                uint64_t v17 = v18 + 1;
                goto LABEL_34;
              }
            }
            else
            {
              a5[v18] = v21;
              a6[v18] = v19;
              if (v14-- < 1)
              {
                uint64_t v11 = v18 + 1;
                goto LABEL_7;
              }
            }
            if (++v18 >= a4) {
              goto LABEL_39;
            }
          }
        }
        uint64_t v17 = 0;
LABEL_34:
        if (v17 < a4)
        {
          do
          {
            if (v14 < 0)
            {
              uint64_t v24 = -1;
              float v25 = INFINITY;
            }
            else
            {
              uint64_t v24 = v6[v14];
              float v25 = v9 - *(float *)(v8 + 4 * v24);
              --v14;
            }
            a5[v17] = v25;
            a6[v17++] = v24;
          }
          while (a4 != v17);
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
LABEL_7:
        if (v11 < a4)
        {
          do
          {
            if (v10 >= this[2])
            {
              uint64_t v12 = -1;
              float v13 = INFINITY;
            }
            else
            {
              uint64_t v12 = v6[v10];
              float v13 = *(float *)(v8 + 4 * v12) - v9;
              ++v10;
            }
            a5[v11] = v13;
            a6[v11++] = v12;
          }
          while (a4 != v11);
        }
      }
LABEL_39:
      ++v7;
      a6 += a4;
      a5 += a4;
    }
    while (v7 != a2);
  }
  return this;
}

void sub_1DD028C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexFlat::~IndexFlat(faiss::IndexFlat *this)
{
  *(void *)this = &unk_1F383FD80;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383FD80;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::IndexFlat1D::~IndexFlat1D(faiss::IndexFlat1D *this)
{
  *(void *)this = &unk_1F383E2E8;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FD80;
  int64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F383E2E8;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383FD80;
  int64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1E01AF670);
}

uint64_t faiss::anonymous namespace'::FlatL2Dis::set_query(uint64_t this, const float *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

float faiss::anonymous namespace'::FlatL2Dis::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ++*(void *)(a1 + 40);
  return faiss::fvec_L2sqr(*(faiss **)(a1 + 24), (const float *)(v2 + 4 * *(void *)(a1 + 8) * a2), *(void *)(a1 + 8));
}

float faiss::anonymous namespace'::FlatL2Dis::symmetric_dis(faiss::_anonymous_namespace_::FlatL2Dis *this, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_L2sqr((faiss *)(*((void *)this + 4) + 4 * *((void *)this + 1) * a3), (const float *)(*((void *)this + 4) + 4 * *((void *)this + 1) * a2), *((void *)this + 1));
}

void faiss::anonymous namespace'::FlatL2Dis::~FlatL2Dis(faiss::_anonymous_namespace_::FlatL2Dis *this)
{
}

uint64_t faiss::anonymous namespace'::FlatIPDis::set_query(uint64_t this, const float *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

float faiss::anonymous namespace'::FlatIPDis::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ++*(void *)(a1 + 40);
  return faiss::fvec_inner_product(*(faiss **)(a1 + 24), (const float *)(v2 + 4 * *(void *)(a1 + 8) * a2), *(void *)(a1 + 8));
}

float faiss::anonymous namespace'::FlatIPDis::symmetric_dis(faiss::_anonymous_namespace_::FlatIPDis *this, uint64_t a2, uint64_t a3)
{
  return faiss::fvec_inner_product((faiss *)(*((void *)this + 4) + 4 * *((void *)this + 1) * a3), (const float *)(*((void *)this + 4) + 4 * *((void *)this + 1) * a2), *((void *)this + 1));
}

void faiss::anonymous namespace'::FlatIPDis::~FlatIPDis(faiss::_anonymous_namespace_::FlatIPDis *this)
{
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float const*,float const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    float v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    long long __p = v18;
    std::string v34 = v28;
    unsigned int v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    int v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    unsigned int v35 = v30;
    uint64_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    float v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[4 * a5];
    float v25 = &v23[-4 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)int v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  float v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DD0290F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  float v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t faiss::read_VectorTransform(faiss *this, faiss::IOReader *a2)
{
  int v147 = 0;
  uint64_t v3 = (**(uint64_t (***)(faiss *, int *, uint64_t, uint64_t))this)(this, &v147, 4, 1);
  if (v3 != 1)
  {
    uint64_t v28 = v3;
    memset(&v146, 0, sizeof(v146));
    uint64_t v29 = (char *)this + 8;
    int v30 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      int v30 = *(const char **)v29;
    }
    int v31 = __error();
    size_t v32 = strerror(*v31);
    int v33 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v30, v28, 1uLL, v32);
    std::string v34 = &v146;
    std::string::resize(&v146, v33 + 1, 0);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v146.__r_.__value_.__l.__size_;
      std::string v34 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      uint64_t v29 = *(const char **)v29;
    }
    unsigned int v36 = __error();
    uint64_t v37 = strerror(*v36);
    snprintf((char *)v34, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v29, v28, 1uLL, v37);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 77);
  }
  int v5 = v147;
  if (v5 == faiss::fourcc((faiss *)"rrot", v4)
    || (int v7 = v147, v7 == faiss::fourcc((faiss *)"PCAm", v6))
    || (int v8 = v147, v8 == faiss::fourcc((faiss *)"LTra", v6))
    || (int v9 = v147, v9 == faiss::fourcc((faiss *)"PcAm", v6))
    || (int v10 = v147, v10 == faiss::fourcc((faiss *)"Viqm", v6)))
  {
    int v11 = v147;
    if (v11 == faiss::fourcc((faiss *)"rrot", v6)) {
      operator new();
    }
    int v13 = v147;
    if (v13 == faiss::fourcc((faiss *)"PCAm", v12)
      || (int v15 = v147, v15 == faiss::fourcc((faiss *)"PcAm", v14)))
    {
      operator new();
    }
    uint64_t v17 = (**(uint64_t (***)(faiss *, uint64_t, uint64_t, uint64_t, __n128))this)(this, 17, 1, 1, v16);
    if (v17 != 1)
    {
      uint64_t v72 = v17;
      memset(&v146, 0, sizeof(v146));
      uint64_t v73 = (char *)this + 8;
      uint64_t v74 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        uint64_t v74 = *(const char **)v73;
      }
      unint64_t v75 = __error();
      uint64_t v76 = strerror(*v75);
      int v77 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v74, v72, 1uLL, v76);
      unsigned int v78 = &v146;
      std::string::resize(&v146, v77 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v79 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v79 = v146.__r_.__value_.__l.__size_;
        unsigned int v78 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 31) < 0) {
        uint64_t v73 = *(const char **)v73;
      }
      unsigned int v80 = __error();
      unsigned int v81 = strerror(*v80);
      snprintf((char *)v78, v79, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v73, v72, 1uLL, v81);
      uint64_t v82 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v82, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 97);
    }
    unint64_t v145 = 0;
    uint64_t v18 = (**(uint64_t (***)(faiss *, unint64_t *, uint64_t, uint64_t))this)(this, &v145, 8, 1);
    if (v18 != 1)
    {
      uint64_t v83 = v18;
      memset(&v146, 0, sizeof(v146));
      uint64_t v84 = (char *)this + 8;
      int8x16_t v85 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        int8x16_t v85 = *(const char **)v84;
      }
      uint64_t v86 = __error();
      float v87 = strerror(*v86);
      int v88 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v85, v83, 1uLL, v87);
      uint64_t v89 = &v146;
      std::string::resize(&v146, v88 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v90 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v90 = v146.__r_.__value_.__l.__size_;
        uint64_t v89 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 31) < 0) {
        uint64_t v84 = *(const char **)v84;
      }
      uint64_t v91 = __error();
      uint64_t v92 = strerror(*v91);
      snprintf((char *)v89, v90, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v84, v83, 1uLL, v92);
      int v93 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v93, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 98);
    }
    if (v145 >> 40)
    {
      memset(&v146, 0, sizeof(v146));
      int v94 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      std::string::resize(&v146, v94 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v95 = &v146;
      }
      else {
        int v95 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v96 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v96 = v146.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v95, v96, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      char v97 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v97, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 98);
    }
    std::vector<float>::resize(24, v145);
    uint64_t v19 = (**(uint64_t (***)(faiss *, void, uint64_t, unint64_t))this)(this, MEMORY[0x18], 4, v145);
    unint64_t v20 = v145;
    if (v19 != v145)
    {
      uint64_t v98 = v19;
      memset(&v146, 0, sizeof(v146));
      unsigned int v99 = (char *)this + 8;
      unsigned int v100 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        unsigned int v100 = *(const char **)v99;
      }
      unsigned int v101 = __error();
      uint64_t v102 = strerror(*v101);
      int v103 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v100, v98, v20, v102);
      uint64_t v104 = &v146;
      std::string::resize(&v146, v103 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v105 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v105 = v146.__r_.__value_.__l.__size_;
        uint64_t v104 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 31) < 0) {
        unsigned int v99 = *(const char **)v99;
      }
      unint64_t v106 = v145;
      int v107 = __error();
      float v108 = strerror(*v107);
      snprintf((char *)v104, v105, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v99, v98, v106, v108);
      uint64_t v109 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v109, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 98);
    }
    unint64_t v145 = 0;
    uint64_t v21 = (**(uint64_t (***)(faiss *, unint64_t *, uint64_t, uint64_t))this)(this, &v145, 8, 1);
    if (v21 != 1)
    {
      uint64_t v110 = v21;
      memset(&v146, 0, sizeof(v146));
      uint64_t v111 = (char *)this + 8;
      uint64_t v112 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        uint64_t v112 = *(const char **)v111;
      }
      int v113 = __error();
      uint64_t v114 = strerror(*v113);
      int v115 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v112, v110, 1uLL, v114);
      uint64_t v116 = &v146;
      std::string::resize(&v146, v115 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v117 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v117 = v146.__r_.__value_.__l.__size_;
        uint64_t v116 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 31) < 0) {
        uint64_t v111 = *(const char **)v111;
      }
      uint64_t v118 = __error();
      int v119 = strerror(*v118);
      snprintf((char *)v116, v117, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v111, v110, 1uLL, v119);
      unsigned int v120 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v120, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 99);
    }
    if (v145 >> 40)
    {
      memset(&v146, 0, sizeof(v146));
      int v121 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      std::string::resize(&v146, v121 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v122 = &v146;
      }
      else {
        unsigned int v122 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v123 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v123 = v146.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v122, v123, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      uint64_t v124 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v124, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 99);
    }
    std::vector<float>::resize(48, v145);
    uint64_t v22 = (**(uint64_t (***)(faiss *, void, uint64_t, unint64_t))this)(this, MEMORY[0x30], 4, v145);
    unint64_t v23 = v145;
    if (v22 != v145)
    {
      uint64_t v125 = v22;
      memset(&v146, 0, sizeof(v146));
      __int32 v126 = (char *)this + 8;
      int v127 = (char *)this + 8;
      if (*((char *)this + 31) < 0) {
        int v127 = *(const char **)v126;
      }
      int8x16_t v128 = __error();
      __int32 v129 = strerror(*v128);
      int v130 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v127, v125, v23, v129);
      int8x8_t v131 = &v146;
      std::string::resize(&v146, v130 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v132 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v132 = v146.__r_.__value_.__l.__size_;
        int8x8_t v131 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if (*((char *)this + 31) < 0) {
        __int32 v126 = *(const char **)v126;
      }
      unint64_t v133 = v145;
      uint64_t v134 = __error();
      uint64_t v135 = strerror(*v134);
      snprintf((char *)v131, v132, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v126, v125, v133, v135);
      float v136 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v136, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 99);
    }
    if (MEMORY[0xC] * (uint64_t)MEMORY[8] > (unint64_t)((uint64_t)(MEMORY[0x20] - MEMORY[0x18]) >> 2))
    {
      memset(&v146, 0, sizeof(v146));
      int v137 = snprintf(0, 0, "Error: '%s' failed", "lt->A.size() >= lt->d_in * lt->d_out");
      std::string::resize(&v146, v137 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v138 = &v146;
      }
      else {
        uint64_t v138 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v139 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v139 = v146.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v138, v139, "Error: '%s' failed", "lt->A.size() >= lt->d_in * lt->d_out");
      uint64_t v140 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v140, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 100);
    }
    if (MEMORY[0x11] && MEMORY[0xC] > (unint64_t)((uint64_t)(MEMORY[0x38] - MEMORY[0x30]) >> 2))
    {
      memset(&v146, 0, sizeof(v146));
      int v141 = snprintf(0, 0, "Error: '%s' failed", "!lt->have_bias || lt->b.size() >= lt->d_out");
      std::string::resize(&v146, v141 + 1, 0);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v142 = &v146;
      }
      else {
        uint64_t v142 = (std::string *)v146.__r_.__value_.__r.__words[0];
      }
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v143 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v143 = v146.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v142, v143, "Error: '%s' failed", "!lt->have_bias || lt->b.size() >= lt->d_out");
      uint64_t v144 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v144, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 101);
    }
    faiss::LinearTransform::set_is_orthonormal(0);
  }
  uint64_t v24 = (**(uint64_t (***)(faiss *, uint64_t, uint64_t, uint64_t))this)(this, 8, 4, 1);
  if (v24 != 1)
  {
    uint64_t v39 = v24;
    memset(&v146, 0, sizeof(v146));
    unsigned int v40 = (char *)this + 8;
    uint64_t v41 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v41 = *(const char **)v40;
    }
    float v42 = __error();
    uint64_t v43 = strerror(*v42);
    int v44 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v41, v39, 1uLL, v43);
    int v45 = &v146;
    std::string::resize(&v146, v44 + 1, 0);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v46 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v46 = v146.__r_.__value_.__l.__size_;
      int v45 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      unsigned int v40 = *(const char **)v40;
    }
    uint64_t v47 = __error();
    uint64_t v48 = strerror(*v47);
    snprintf((char *)v45, v46, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v40, v39, 1uLL, v48);
    uint64_t v49 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v49, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 105);
  }
  uint64_t v25 = (**(uint64_t (***)(faiss *, uint64_t, uint64_t, uint64_t))this)(this, 12, 4, 1);
  if (v25 != 1)
  {
    uint64_t v50 = v25;
    memset(&v146, 0, sizeof(v146));
    unsigned int v51 = (char *)this + 8;
    char v52 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      char v52 = *(const char **)v51;
    }
    unint64_t v53 = __error();
    unsigned int v54 = strerror(*v53);
    int v55 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v52, v50, 1uLL, v54);
    unsigned int v56 = &v146;
    std::string::resize(&v146, v55 + 1, 0);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v57 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v57 = v146.__r_.__value_.__l.__size_;
      unsigned int v56 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      unsigned int v51 = *(const char **)v51;
    }
    uint64_t v58 = __error();
    uint64_t v59 = strerror(*v58);
    snprintf((char *)v56, v57, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v51, v50, 1uLL, v59);
    int v60 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v60, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 106);
  }
  uint64_t v26 = (**(uint64_t (***)(faiss *, uint64_t, uint64_t, uint64_t))this)(this, 16, 1, 1);
  if (v26 != 1)
  {
    uint64_t v61 = v26;
    memset(&v146, 0, sizeof(v146));
    int8x16_t v62 = (char *)this + 8;
    int8x16_t v63 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      int8x16_t v63 = *(const char **)v62;
    }
    int8x16_t v64 = __error();
    int8x16_t v65 = strerror(*v64);
    int v66 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v63, v61, 1uLL, v65);
    uint64_t v67 = &v146;
    std::string::resize(&v146, v66 + 1, 0);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v68 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v68 = v146.__r_.__value_.__l.__size_;
      uint64_t v67 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      int8x16_t v62 = *(const char **)v62;
    }
    uint64_t v69 = __error();
    uint64_t v70 = strerror(*v69);
    snprintf((char *)v67, v68, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v62, v61, 1uLL, v70);
    int v71 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v71, &v146, "VectorTransform *faiss::read_VectorTransform(IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 107);
  }
  return 0;
}

void sub_1DD02A264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::read_InvertedLists(faiss *this, faiss::IOReader *a2)
{
  char v2 = (char)a2;
  int v22 = 0;
  uint64_t v4 = (**(uint64_t (***)(faiss *, int *, uint64_t, uint64_t))this)(this, &v22, 4, 1);
  if (v4 != 1)
  {
    uint64_t v11 = v4;
    memset(&v23, 0, sizeof(v23));
    int64_t v12 = (char *)this + 8;
    int v13 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      int v13 = *(const char **)v12;
    }
    unint64_t v14 = __error();
    int v15 = strerror(*v14);
    int v16 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v13, v11, 1uLL, v15);
    uint64_t v17 = &v23;
    std::string::resize(&v23, v16 + 1, 0);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v23.__r_.__value_.__l.__size_;
      uint64_t v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      int64_t v12 = *(const char **)v12;
    }
    uint64_t v19 = __error();
    unint64_t v20 = strerror(*v19);
    snprintf((char *)v17, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v12, v11, 1uLL, v20);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v23, "InvertedLists *faiss::read_InvertedLists(IOReader *, int)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 215);
  }
  int v6 = v22;
  if (v6 == faiss::fourcc((faiss *)"il00", v5))
  {
    fwrite("read_InvertedLists: WARN! inverted lists not stored with IVF object\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  else
  {
    int v8 = v22;
    int v9 = faiss::fourcc((faiss *)"ilar", v7);
    if ((v2 & 8) == 0 && v8 == v9) {
      operator new();
    }
  }
  return 0;
}

void sub_1DD02B6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  __cxa_free_exception(v31);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void faiss::read_ProductQuantizer(faiss *this, const char *a2)
{
  faiss::FileIOReader::FileIOReader((faiss::FileIOReader *)v3, (const char *)this);
  faiss::read_ProductQuantizer((faiss *)v3, v2);
}

void sub_1DD02B850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void faiss::read_ProductQuantizer(faiss *this, faiss::IOReader *a2)
{
}

void sub_1DD02B8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  faiss::ScopeDeleter1<faiss::ProductQuantizer>::~ScopeDeleter1((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t faiss::read_ProductQuantizer(faiss *this, faiss::ProductQuantizer *a2, faiss::IOReader *a3)
{
  uint64_t v5 = (**(uint64_t (***)(faiss::ProductQuantizer *, faiss *, uint64_t, uint64_t))a2)(a2, this, 8, 1);
  if (v5 != 1)
  {
    uint64_t v11 = v5;
    memset(&v72, 0, sizeof(v72));
    int64_t v12 = (char *)a2 + 8;
    int v13 = (char *)a2 + 8;
    if (*((char *)a2 + 31) < 0) {
      int v13 = *(const char **)v12;
    }
    unint64_t v14 = __error();
    int v15 = strerror(*v14);
    int v16 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v13, v11, 1uLL, v15);
    std::string::resize(&v72, v16 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v72;
    }
    else {
      uint64_t v17 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v72.__r_.__value_.__l.__size_;
    }
    if (*((char *)a2 + 31) < 0) {
      int64_t v12 = *(const char **)v12;
    }
    uint64_t v19 = __error();
    unint64_t v20 = strerror(*v19);
    snprintf((char *)v17, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v12, v11, 1uLL, v20);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 276);
  }
  uint64_t v6 = (**(uint64_t (***)(faiss::ProductQuantizer *, char *, uint64_t, uint64_t))a2)(a2, (char *)this + 8, 8, 1);
  if (v6 != 1)
  {
    uint64_t v22 = v6;
    memset(&v72, 0, sizeof(v72));
    std::string v23 = (char *)a2 + 8;
    uint64_t v24 = (char *)a2 + 8;
    if (*((char *)a2 + 31) < 0) {
      uint64_t v24 = *(const char **)v23;
    }
    uint64_t v25 = __error();
    uint64_t v26 = strerror(*v25);
    int v27 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v24, v22, 1uLL, v26);
    uint64_t v28 = &v72;
    std::string::resize(&v72, v27 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v29 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v29 = v72.__r_.__value_.__l.__size_;
      uint64_t v28 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0) {
      std::string v23 = *(const char **)v23;
    }
    int v30 = __error();
    int v31 = strerror(*v30);
    snprintf((char *)v28, v29, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v23, v22, 1uLL, v31);
    size_t v32 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v32, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 277);
  }
  uint64_t v7 = (**(uint64_t (***)(faiss::ProductQuantizer *, char *, uint64_t, uint64_t))a2)(a2, (char *)this + 16, 8, 1);
  if (v7 != 1)
  {
    uint64_t v33 = v7;
    memset(&v72, 0, sizeof(v72));
    std::string v34 = (char *)a2 + 8;
    unsigned int v35 = (char *)a2 + 8;
    if (*((char *)a2 + 31) < 0) {
      unsigned int v35 = *(const char **)v34;
    }
    unsigned int v36 = __error();
    uint64_t v37 = strerror(*v36);
    int v38 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v35, v33, 1uLL, v37);
    uint64_t v39 = &v72;
    std::string::resize(&v72, v38 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v40 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v40 = v72.__r_.__value_.__l.__size_;
      uint64_t v39 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0) {
      std::string v34 = *(const char **)v34;
    }
    uint64_t v41 = __error();
    float v42 = strerror(*v41);
    snprintf((char *)v39, v40, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v34, v33, 1uLL, v42);
    uint64_t v43 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v43, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 278);
  }
  faiss::ProductQuantizer::set_derived_values(this);
  unint64_t v71 = 0;
  uint64_t v8 = (**(uint64_t (***)(faiss::ProductQuantizer *, unint64_t *, uint64_t, uint64_t))a2)(a2, &v71, 8, 1);
  if (v8 != 1)
  {
    uint64_t v44 = v8;
    memset(&v72, 0, sizeof(v72));
    int v45 = (char *)a2 + 8;
    size_t v46 = (char *)a2 + 8;
    if (*((char *)a2 + 31) < 0) {
      size_t v46 = *(const char **)v45;
    }
    uint64_t v47 = __error();
    uint64_t v48 = strerror(*v47);
    int v49 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v46, v44, 1uLL, v48);
    uint64_t v50 = &v72;
    std::string::resize(&v72, v49 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v51 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v51 = v72.__r_.__value_.__l.__size_;
      uint64_t v50 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0) {
      int v45 = *(const char **)v45;
    }
    char v52 = __error();
    unint64_t v53 = strerror(*v52);
    snprintf((char *)v50, v51, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v45, v44, 1uLL, v53);
    unsigned int v54 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v54, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 280);
  }
  if (v71 >> 40)
  {
    memset(&v72, 0, sizeof(v72));
    int v55 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
    std::string::resize(&v72, v55 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v56 = &v72;
    }
    else {
      unsigned int v56 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v57 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v57 = v72.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v56, v57, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
    uint64_t v58 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v58, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 280);
  }
  std::vector<float>::resize((uint64_t)this + 104, v71);
  uint64_t result = (**(uint64_t (***)(faiss::ProductQuantizer *, void, uint64_t, unint64_t))a2)(a2, *((void *)this + 13), 4, v71);
  unint64_t v10 = v71;
  if (result != v71)
  {
    uint64_t v59 = result;
    memset(&v72, 0, sizeof(v72));
    int v60 = (char *)a2 + 8;
    uint64_t v61 = (char *)a2 + 8;
    if (*((char *)a2 + 31) < 0) {
      uint64_t v61 = *(const char **)v60;
    }
    int8x16_t v62 = __error();
    int8x16_t v63 = strerror(*v62);
    int v64 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v61, v59, v10, v63);
    int8x16_t v65 = &v72;
    std::string::resize(&v72, v64 + 1, 0);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v66 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v66 = v72.__r_.__value_.__l.__size_;
      int8x16_t v65 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0) {
      int v60 = *(const char **)v60;
    }
    unint64_t v67 = v71;
    size_t v68 = __error();
    uint64_t v69 = strerror(*v68);
    snprintf((char *)v65, v66, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v60, v59, v67, v69);
    uint64_t v70 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v70, &v72, "void faiss::read_ProductQuantizer(ProductQuantizer *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 280);
  }
  return result;
}

void sub_1DD02C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::read_index(faiss *this, faiss::IOReader *a2)
{
  int v38 = 0;
  uint64_t v3 = (**(uint64_t (***)(faiss *, int *, uint64_t, uint64_t))this)(this, &v38, 4, 1);
  if (v3 != 1)
  {
    uint64_t v27 = v3;
    memset(&v39, 0, sizeof(v39));
    uint64_t v28 = (char *)this + 8;
    size_t v29 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      size_t v29 = *(const char **)v28;
    }
    int v30 = __error();
    int v31 = strerror(*v30);
    int v32 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v29, v27, 1uLL, v31);
    uint64_t v33 = &v39;
    std::string::resize(&v39, v32 + 1, 0);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v39.__r_.__value_.__l.__size_;
      uint64_t v33 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 31) < 0) {
      uint64_t v28 = *(const char **)v28;
    }
    unsigned int v35 = __error();
    unsigned int v36 = strerror(*v35);
    snprintf((char *)v33, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v28, v27, 1uLL, v36);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v39, "Index *faiss::read_index(IOReader *, int)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 453);
  }
  int v5 = v38;
  if (v5 == faiss::fourcc((faiss *)"IxFI", v4)
    || (int v7 = v38, v7 == faiss::fourcc((faiss *)"IxF2", v6))
    || (int v8 = v38, v8 == faiss::fourcc((faiss *)"IxFl", v6)))
  {
    int v9 = v38;
    if (v9 == faiss::fourcc((faiss *)"IxFI", v6)) {
      operator new();
    }
    faiss::fourcc((faiss *)"IxF2", v10);
    operator new();
  }
  int v12 = v38;
  if (v12 == faiss::fourcc((faiss *)"IvPQ", v6)
    || (int v14 = v38, v14 == faiss::fourcc((faiss *)"IvQR", v13))
    || (int v15 = v38, v15 == faiss::fourcc((faiss *)"IwPQ", v13))
    || (int v16 = v38, v16 == faiss::fourcc((faiss *)"IwQR", v13)))
  {
    int v17 = v38;
    if (faiss::fourcc((faiss *)"IvQR", v13) != v17) {
      faiss::fourcc((faiss *)"IvPQ", v18);
    }
    if (faiss::fourcc((faiss *)"IvQR", v18) == v17
      || faiss::fourcc((faiss *)"IwQR", v19) == v17)
    {
      operator new();
    }
    operator new();
  }
  int v20 = v38;
  if (v20 == faiss::fourcc((faiss *)"IxMp", v13)
    || (int v22 = v38, v22 == faiss::fourcc((faiss *)"IxM2", v21)))
  {
    int v23 = v38;
    if (v23 == faiss::fourcc((faiss *)"IxM2", v21)) {
      operator new();
    }
    operator new();
  }
  int v24 = v38;
  if (v24 == faiss::fourcc((faiss *)"Imiq", v21)) {
    operator new();
  }
  int v26 = v38;
  if (v26 == faiss::fourcc((faiss *)"IwFl", v25)) {
    operator new();
  }
  return 0;
}

{
  uint64_t index;
  unsigned char v5[48];

  faiss::FileIOReader::FileIOReader((faiss::FileIOReader *)v5, (const char *)this);
  index = faiss::read_index((faiss *)v5, a2);
  faiss::FileIOReader::~FileIOReader((faiss::FileIOReader *)v5);
  return index;
}

void sub_1DD02DAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::read_index_header(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 8, 4, 1);
  if (v4 != 1)
  {
    uint64_t v10 = v4;
    memset(&v88, 0, sizeof(v88));
    uint64_t v11 = (const char *)(a2 + 8);
    int v12 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      int v12 = *(const char **)v11;
    }
    int v13 = __error();
    int v14 = strerror(*v13);
    int v15 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v12, v10, 1uLL, v14);
    std::string::resize(&v88, v15 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v16 = &v88;
    }
    else {
      int v16 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v88.__r_.__value_.__l.__size_;
    }
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v11 = *(const char **)v11;
    }
    uint64_t v18 = __error();
    uint64_t v19 = strerror(*v18);
    snprintf((char *)v16, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v11, v10, 1uLL, v19);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 62);
  }
  uint64_t v5 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 16, 8, 1);
  if (v5 != 1)
  {
    uint64_t v21 = v5;
    memset(&v88, 0, sizeof(v88));
    int v22 = (const char *)(a2 + 8);
    int v23 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      int v23 = *(const char **)v22;
    }
    int v24 = __error();
    uint64_t v25 = strerror(*v24);
    int v26 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v23, v21, 1uLL, v25);
    uint64_t v27 = &v88;
    std::string::resize(&v88, v26 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v28 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v28 = v88.__r_.__value_.__l.__size_;
      uint64_t v27 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 31) < 0) {
      int v22 = *(const char **)v22;
    }
    size_t v29 = __error();
    int v30 = strerror(*v29);
    snprintf((char *)v27, v28, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v22, v21, 1uLL, v30);
    int v31 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v31, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 63);
  }
  uint64_t v87 = 0;
  uint64_t v6 = (**(uint64_t (***)(uint64_t, uint64_t *, uint64_t, uint64_t))a2)(a2, &v87, 8, 1);
  if (v6 != 1)
  {
    uint64_t v32 = v6;
    memset(&v88, 0, sizeof(v88));
    uint64_t v33 = (const char *)(a2 + 8);
    std::string v34 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      std::string v34 = *(const char **)v33;
    }
    unsigned int v35 = __error();
    unsigned int v36 = strerror(*v35);
    int v37 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v34, v32, 1uLL, v36);
    int v38 = &v88;
    std::string::resize(&v88, v37 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v39 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v39 = v88.__r_.__value_.__l.__size_;
      int v38 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v33 = *(const char **)v33;
    }
    size_t v40 = __error();
    uint64_t v41 = strerror(*v40);
    snprintf((char *)v38, v39, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v33, v32, 1uLL, v41);
    float v42 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v42, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 65);
  }
  uint64_t v7 = (**(uint64_t (***)(uint64_t, uint64_t *, uint64_t, uint64_t))a2)(a2, &v87, 8, 1);
  if (v7 != 1)
  {
    uint64_t v43 = v7;
    memset(&v88, 0, sizeof(v88));
    uint64_t v44 = (const char *)(a2 + 8);
    int v45 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      int v45 = *(const char **)v44;
    }
    size_t v46 = __error();
    uint64_t v47 = strerror(*v46);
    int v48 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v45, v43, 1uLL, v47);
    int v49 = &v88;
    std::string::resize(&v88, v48 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v50 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v50 = v88.__r_.__value_.__l.__size_;
      int v49 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v44 = *(const char **)v44;
    }
    size_t v51 = __error();
    char v52 = strerror(*v51);
    snprintf((char *)v49, v50, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v44, v43, 1uLL, v52);
    unint64_t v53 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v53, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 66);
  }
  uint64_t v8 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 25, 1, 1);
  if (v8 != 1)
  {
    uint64_t v54 = v8;
    memset(&v88, 0, sizeof(v88));
    int v55 = (const char *)(a2 + 8);
    unsigned int v56 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      unsigned int v56 = *(const char **)v55;
    }
    size_t v57 = __error();
    uint64_t v58 = strerror(*v57);
    int v59 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v56, v54, 1uLL, v58);
    int v60 = &v88;
    std::string::resize(&v88, v59 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v61 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v61 = v88.__r_.__value_.__l.__size_;
      int v60 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 31) < 0) {
      int v55 = *(const char **)v55;
    }
    int8x16_t v62 = __error();
    int8x16_t v63 = strerror(*v62);
    snprintf((char *)v60, v61, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v55, v54, 1uLL, v63);
    int v64 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v64, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 67);
  }
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 28, 4, 1);
  if (result != 1)
  {
    uint64_t v65 = result;
    memset(&v88, 0, sizeof(v88));
    size_t v66 = (const char *)(a2 + 8);
    unint64_t v67 = (const char *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      unint64_t v67 = *(const char **)v66;
    }
    size_t v68 = __error();
    uint64_t v69 = strerror(*v68);
    int v70 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v67, v65, 1uLL, v69);
    unint64_t v71 = &v88;
    std::string::resize(&v88, v70 + 1, 0);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v72 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v72 = v88.__r_.__value_.__l.__size_;
      unint64_t v71 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 31) < 0) {
      size_t v66 = *(const char **)v66;
    }
    uint64_t v73 = __error();
    uint64_t v74 = strerror(*v73);
    snprintf((char *)v71, v72, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v66, v65, 1uLL, v74);
    unint64_t v75 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v75, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 68);
  }
  if (*(int *)(a1 + 28) >= 2)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 32, 4, 1);
    if (result != 1)
    {
      uint64_t v76 = result;
      memset(&v88, 0, sizeof(v88));
      int v77 = (const char *)(a2 + 8);
      unsigned int v78 = (const char *)(a2 + 8);
      if (*(char *)(a2 + 31) < 0) {
        unsigned int v78 = *(const char **)v77;
      }
      size_t v79 = __error();
      unsigned int v80 = strerror(*v79);
      int v81 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v78, v76, 1uLL, v80);
      uint64_t v82 = &v88;
      std::string::resize(&v88, v81 + 1, 0);
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v83 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v83 = v88.__r_.__value_.__l.__size_;
        uint64_t v82 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      if (*(char *)(a2 + 31) < 0) {
        int v77 = *(const char **)v77;
      }
      uint64_t v84 = __error();
      int8x16_t v85 = strerror(*v84);
      snprintf((char *)v82, v83, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v77, v76, 1uLL, v85);
      uint64_t v86 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v86, &v88, "void faiss::read_index_header(Index *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 70);
    }
  }
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_1DD02E5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::read_ivf_header(uint64_t a1, char *a2, uint64_t *a3)
{
  faiss::read_index_header(a1, (uint64_t)a2);
  uint64_t v6 = (unint64_t *)(a1 + 48);
  uint64_t v7 = (**(uint64_t (***)(char *, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 48, 8, 1);
  if (v7 != 1)
  {
    uint64_t v53 = v7;
    memset(&v139, 0, sizeof(v139));
    uint64_t v54 = a2 + 8;
    int v55 = a2 + 8;
    if (a2[31] < 0) {
      int v55 = *(const char **)v54;
    }
    unsigned int v56 = __error();
    size_t v57 = strerror(*v56);
    int v58 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v55, v53, 1uLL, v57);
    int v59 = &v139;
    std::string::resize(&v139, v58 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t size = v139.__r_.__value_.__l.__size_;
      int v59 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if (a2[31] < 0) {
      uint64_t v54 = *(const char **)v54;
    }
    size_t v61 = __error();
    int8x16_t v62 = strerror(*v61);
    snprintf((char *)v59, size, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v54, v53, 1uLL, v62);
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v139, "void faiss::read_ivf_header(IndexIVF *, IOReader *, std::vector<std::vector<Index::idx_t>> *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 390);
  }
  uint64_t v8 = (**(uint64_t (***)(char *, uint64_t, uint64_t, uint64_t))a2)(a2, a1 + 136, 8, 1);
  if (v8 != 1)
  {
    uint64_t v64 = v8;
    memset(&v139, 0, sizeof(v139));
    uint64_t v65 = a2 + 8;
    size_t v66 = a2 + 8;
    if (a2[31] < 0) {
      size_t v66 = *(const char **)v65;
    }
    unint64_t v67 = __error();
    size_t v68 = strerror(*v67);
    int v69 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v66, v64, 1uLL, v68);
    int v70 = &v139;
    std::string::resize(&v139, v69 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v71 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v71 = v139.__r_.__value_.__l.__size_;
      int v70 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if (a2[31] < 0) {
      uint64_t v65 = *(const char **)v65;
    }
    size_t v72 = __error();
    uint64_t v73 = strerror(*v72);
    snprintf((char *)v70, v71, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v65, v64, 1uLL, v73);
    uint64_t v74 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v74, &v139, "void faiss::read_ivf_header(IndexIVF *, IOReader *, std::vector<std::vector<Index::idx_t>> *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 391);
  }
  *(void *)(a1 + 40) = faiss::read_index((faiss *)a2, 0, v9);
  *(unsigned char *)(a1 + 57) = 1;
  if (a3)
  {
    std::vector<std::vector<long long>>::resize(a3, *v6);
    if (*v6)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        v138.__r_.__value_.__r.__words[0] = 0;
        uint64_t v12 = (**(uint64_t (***)(char *, std::string *, uint64_t, uint64_t))a2)(a2, &v138, 8, 1);
        if (v12 != 1)
        {
          uint64_t v42 = v12;
          memset(&v139, 0, sizeof(v139));
          uint64_t v43 = a2 + 8;
          uint64_t v44 = a2 + 8;
          if (a2[31] < 0) {
            uint64_t v44 = *(const char **)v43;
          }
          int v45 = __error();
          size_t v46 = strerror(*v45);
          int v47 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v44, v42, 1uLL, v46);
          int v48 = &v139;
          std::string::resize(&v139, v47 + 1, 0);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            size_t v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else
          {
            size_t v49 = v139.__r_.__value_.__l.__size_;
            int v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if (a2[31] < 0) {
            uint64_t v43 = *(const char **)v43;
          }
          size_t v50 = __error();
          size_t v51 = strerror(*v50);
          snprintf((char *)v48, v49, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v43, v42, 1uLL, v51);
          char v52 = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(v52, &v139, "void faiss::read_ivf_header(IndexIVF *, IOReader *, std::vector<std::vector<Index::idx_t>> *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 397);
        }
        if (v138.__r_.__value_.__r.__words[0] >> 40)
        {
          memset(&v139, 0, sizeof(v139));
          int v38 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
          std::string::resize(&v139, v38 + 1, 0);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v39 = &v139;
          }
          else {
            size_t v39 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v40 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v40 = v139.__r_.__value_.__l.__size_;
          }
          snprintf((char *)v39, v40, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
          uint64_t v41 = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(v41, &v139, "void faiss::read_ivf_header(IndexIVF *, IOReader *, std::vector<std::vector<Index::idx_t>> *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 397);
        }
        std::vector<long long>::resize(*a3 + v10, v138.__r_.__value_.__r.__words[0]);
        uint64_t v13 = (**(uint64_t (***)(char *, void, uint64_t, std::string::size_type))a2)(a2, *(void *)(*a3 + v10), 8, v138.__r_.__value_.__r.__words[0]);
        if (v13 != v138.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v25 = v138.__r_.__value_.__r.__words[0];
          uint64_t v26 = v13;
          memset(&v139, 0, sizeof(v139));
          uint64_t v27 = a2 + 8;
          size_t v28 = a2 + 8;
          if (a2[31] < 0) {
            size_t v28 = *(const char **)v27;
          }
          size_t v29 = __error();
          int v30 = strerror(*v29);
          int v31 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v28, v26, v25, v30);
          uint64_t v32 = &v139;
          std::string::resize(&v139, v31 + 1, 0);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            size_t v33 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else
          {
            size_t v33 = v139.__r_.__value_.__l.__size_;
            uint64_t v32 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if (a2[31] < 0) {
            uint64_t v27 = *(const char **)v27;
          }
          std::string::size_type v34 = v138.__r_.__value_.__r.__words[0];
          unsigned int v35 = __error();
          unsigned int v36 = strerror(*v35);
          snprintf((char *)v32, v33, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v27, v26, v34, v36);
          int v37 = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(v37, &v139, "void faiss::read_ivf_header(IndexIVF *, IOReader *, std::vector<std::vector<Index::idx_t>> *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 397);
        }
        ++v11;
        v10 += 24;
      }
      while (v11 < *v6);
    }
  }
  char v140 = 0;
  uint64_t v14 = (**(uint64_t (***)(char *, char *, uint64_t, uint64_t))a2)(a2, &v140, 1, 1);
  if (v14 != 1)
  {
    uint64_t v75 = v14;
    memset(&v139, 0, sizeof(v139));
    uint64_t v76 = a2 + 8;
    int v77 = a2 + 8;
    if (a2[31] < 0) {
      int v77 = *(const char **)v76;
    }
    unsigned int v78 = __error();
    size_t v79 = strerror(*v78);
    int v80 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v77, v75, 1uLL, v79);
    int v81 = &v139;
    std::string::resize(&v139, v80 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v82 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v82 = v139.__r_.__value_.__l.__size_;
      int v81 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if (a2[31] < 0) {
      uint64_t v76 = *(const char **)v76;
    }
    size_t v83 = __error();
    uint64_t v84 = strerror(*v83);
    snprintf((char *)v81, v82, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v76, v75, 1uLL, v84);
    int8x16_t v85 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v85, &v139, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 370);
  }
  *(_DWORD *)(a1 + 160) = v140;
  v138.__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (**(uint64_t (***)(char *, std::string *, uint64_t, uint64_t))a2)(a2, &v138, 8, 1);
  if (v15 != 1)
  {
    uint64_t v86 = v15;
    memset(&v139, 0, sizeof(v139));
    uint64_t v87 = a2 + 8;
    std::string v88 = a2 + 8;
    if (a2[31] < 0) {
      std::string v88 = *(const char **)v87;
    }
    uint64_t v89 = __error();
    size_t v90 = strerror(*v89);
    int v91 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v88, v86, 1uLL, v90);
    uint64_t v92 = &v139;
    std::string::resize(&v139, v91 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v93 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v93 = v139.__r_.__value_.__l.__size_;
      uint64_t v92 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if (a2[31] < 0) {
      uint64_t v87 = *(const char **)v87;
    }
    int v94 = __error();
    int v95 = strerror(*v94);
    snprintf((char *)v92, v93, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v87, v86, 1uLL, v95);
    size_t v96 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v96, &v139, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 372);
  }
  if (v138.__r_.__value_.__r.__words[0] >> 40)
  {
    memset(&v139, 0, sizeof(v139));
    int v97 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
    std::string::resize(&v139, v97 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v98 = &v139;
    }
    else {
      uint64_t v98 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v99 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v99 = v139.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v98, v99, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
    unsigned int v100 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v100, &v139, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 372);
  }
  std::vector<long long>::resize(a1 + 168, v138.__r_.__value_.__r.__words[0]);
  uint64_t v16 = (**(uint64_t (***)(char *, void, uint64_t, std::string::size_type))a2)(a2, *(void *)(a1 + 168), 8, v138.__r_.__value_.__r.__words[0]);
  std::string::size_type v17 = v138.__r_.__value_.__r.__words[0];
  if (v16 != v138.__r_.__value_.__r.__words[0])
  {
    uint64_t v101 = v16;
    memset(&v139, 0, sizeof(v139));
    uint64_t v102 = a2 + 8;
    int v103 = a2 + 8;
    if (a2[31] < 0) {
      int v103 = *(const char **)v102;
    }
    uint64_t v104 = __error();
    size_t v105 = strerror(*v104);
    int v106 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v103, v101, v17, v105);
    int v107 = &v139;
    std::string::resize(&v139, v106 + 1, 0);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size_t v108 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size_t v108 = v139.__r_.__value_.__l.__size_;
      int v107 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if (a2[31] < 0) {
      uint64_t v102 = *(const char **)v102;
    }
    std::string::size_type v109 = v138.__r_.__value_.__r.__words[0];
    uint64_t v110 = __error();
    uint64_t v111 = strerror(*v110);
    snprintf((char *)v107, v108, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v102, v101, v109, v111);
    uint64_t v112 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v112, &v139, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 372);
  }
  if (*(_DWORD *)(a1 + 160) == 2)
  {
    memset(&v139, 0, sizeof(v139));
    int v141 = 0;
    uint64_t v18 = (**(uint64_t (***)(char *, std::string **, uint64_t, uint64_t))a2)(a2, &v141, 8, 1);
    if (v18 != 1)
    {
      memset(&v138, 0, sizeof(v138));
      int v113 = a2 + 8;
      uint64_t v114 = a2 + 8;
      if (a2[31] < 0) {
        uint64_t v114 = *(const char **)v113;
      }
      int v115 = __error();
      uint64_t v116 = strerror(*v115);
      int v117 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v114, v18, 1uLL, v116);
      uint64_t v118 = &v138;
      std::string::resize(&v138, v117 + 1, 0);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v119 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v119 = v138.__r_.__value_.__l.__size_;
        uint64_t v118 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (a2[31] < 0) {
        int v113 = *(const char **)v113;
      }
      unsigned int v120 = __error();
      int v121 = strerror(*v120);
      snprintf((char *)v118, v119, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (1)", v113, v18, 1uLL, v121);
      unsigned int v122 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v122, &v138, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 376);
    }
    if ((unint64_t)v141 >> 40)
    {
      memset(&v138, 0, sizeof(v138));
      int v123 = snprintf(0, 0, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      std::string::resize(&v138, v123 + 1, 0);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v124 = &v138;
      }
      else {
        uint64_t v124 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v125 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v125 = v138.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v124, v125, "Error: '%s' failed", "size >= 0 && size < (uint64_t{1} << 40)");
      __int32 v126 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v126, &v138, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 376);
    }
    std::vector<std::pair<long long,long long>>::resize((uint64_t)&v139, (unint64_t)v141);
    uint64_t v19 = (std::string *)(**(uint64_t (***)(char *, std::string::size_type, uint64_t, std::string *))a2)(a2, v139.__r_.__value_.__r.__words[0], 16, v141);
    int v20 = v141;
    if (v19 != v141)
    {
      memset(&v138, 0, sizeof(v138));
      int v127 = a2 + 8;
      int8x16_t v128 = a2 + 8;
      if (a2[31] < 0) {
        int8x16_t v128 = *(const char **)v127;
      }
      __int32 v129 = __error();
      int v130 = strerror(*v129);
      int v131 = snprintf(0, 0, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v128, (size_t)v19, (size_t)v20, v130);
      size_t v132 = &v138;
      std::string::resize(&v138, v131 + 1, 0);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size_t v133 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size_t v133 = v138.__r_.__value_.__l.__size_;
        size_t v132 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (a2[31] < 0) {
        int v127 = *(const char **)v127;
      }
      uint64_t v134 = v141;
      uint64_t v135 = __error();
      float v136 = strerror(*v135);
      snprintf((char *)v132, v133, "Error: '%s' failed: read error in %s: %zd != %zd (%s)", "ret == (size)", v127, (size_t)v19, (size_t)v134, v136);
      int v137 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v137, &v138, "void faiss::read_direct_map(DirectMap *, IOReader *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 376);
    }
    uint64_t v21 = a1 + 192;
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1 + 192, vcvtps_u32_f32((float)(unint64_t)((uint64_t)(v139.__r_.__value_.__l.__size_ - v139.__r_.__value_.__r.__words[0]) >> 4)/ *(float *)(a1 + 224)));
    std::string::size_type v23 = v139.__r_.__value_.__l.__size_;
    int v22 = (_OWORD *)v139.__r_.__value_.__r.__words[0];
    if (v139.__r_.__value_.__r.__words[0] != v139.__r_.__value_.__l.__size_)
    {
      do
      {
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = *v22;
        std::string::size_type v24 = v138.__r_.__value_.__l.__size_;
        int v141 = &v138;
        std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v21, (unint64_t *)&v138, (uint64_t)&std::piecewise_construct, (void **)&v141)[3] = v24;
        ++v22;
      }
      while (v22 != (_OWORD *)v23);
      int v22 = (_OWORD *)v139.__r_.__value_.__r.__words[0];
    }
    if (v22)
    {
      v139.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
      operator delete(v22);
    }
  }
}

void sub_1DD02F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_free_exception(v26);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::read_InvertedLists(faiss *this, faiss::IndexIVF *a2, faiss::IOReader *a3)
{
  uint64_t result = faiss::read_InvertedLists(a2, a3);
  if (result)
  {
    if (*(void *)(result + 8) != *((void *)this + 6))
    {
      memset(&v14, 0, sizeof(v14));
      int v6 = snprintf(0, 0, "Error: '%s' failed", "ils->nlist == ivf->nlist");
      std::string::resize(&v14, v6 + 1, 0);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v14;
      }
      else {
        uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v14.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v7, size, "Error: '%s' failed", "ils->nlist == ivf->nlist");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v14, "void faiss::read_InvertedLists(IndexIVF *, IOReader *, int)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 266);
    }
    uint64_t v5 = *(void *)(result + 16);
    if (v5 != -1 && v5 != *((void *)this + 16))
    {
      memset(&v14, 0, sizeof(v14));
      int v10 = snprintf(0, 0, "Error: '%s' failed", "ils->code_size == InvertedLists::INVALID_CODE_SIZE || ils->code_size == ivf->code_size");
      std::string::resize(&v14, v10 + 1, 0);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v14;
      }
      else {
        unint64_t v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v12 = v14.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v11, v12, "Error: '%s' failed", "ils->code_size == InvertedLists::INVALID_CODE_SIZE || ils->code_size == ivf->code_size");
      uint64_t v13 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v13, &v14, "void faiss::read_InvertedLists(IndexIVF *, IOReader *, int)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/impl/index_read.cpp", 269);
    }
  }
  *((void *)this + 14) = result;
  *((unsigned char *)this + 120) = 1;
  return result;
}

void sub_1DD02F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::read_index(__sFILE *this, __sFILE *a2)
{
  faiss::FileIOReader::FileIOReader((uint64_t)v5, this);
  uint64_t index = faiss::read_index((faiss *)v5, (faiss::IOReader *)a2);
  faiss::FileIOReader::~FileIOReader((faiss::FileIOReader *)v5);
  return index;
}

void sub_1DD02F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DD02F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t faiss::read_VectorTransform(faiss *this, const char *a2)
{
  faiss::FileIOReader::FileIOReader((faiss::FileIOReader *)v5, (const char *)this);
  VectorTransforint m = faiss::read_VectorTransform((faiss *)v5, v2);
  faiss::FileIOReader::~FileIOReader((faiss::FileIOReader *)v5);
  return VectorTransform;
}

void sub_1DD02F960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

faiss::MultiIndexQuantizer *faiss::MultiIndexQuantizer::MultiIndexQuantizer(faiss::MultiIndexQuantizer *this)
{
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *(void *)this = &unk_1F383F638;
  faiss::ProductQuantizer::ProductQuantizer((faiss::MultiIndexQuantizer *)((char *)this + 40));
  return this;
}

void sub_1DD02F9D0(_Unwind_Exception *a1)
{
  faiss::Index::~Index(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<long long,long long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<std::pair<long long,long long>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<std::pair<long long,long long>>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::BufferList::Buffer>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    std::string v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    std::string::size_type v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      std::string::size_type v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD02FB90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *faiss::ScopeDeleter1<faiss::ProductQuantizer>::~ScopeDeleter1(void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)v2[16];
    if (v3)
    {
      v2[17] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v2[13];
    if (v4)
    {
      v2[14] = v4;
      operator delete(v4);
    }
    MEMORY[0x1E01AF670](v2, 0x10A0C40B82B9555);
  }
  return a1;
}

uint64_t faiss::IndexPQ::IndexPQ(uint64_t a1, int a2, unint64_t a3, unint64_t a4, int a5)
{
  int v5 = a4;
  int v6 = a3;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F383FB50;
  faiss::ProductQuantizer::ProductQuantizer((faiss::ProductQuantizer *)(a1 + 40), a2, a3, a4);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  faiss::PolysemousTraining::PolysemousTraining((faiss::PolysemousTraining *)(a1 + 224));
  *(unsigned char *)(a1 + 25) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 320) = v5 * v6 + 1;
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 316) = 0;
  return a1;
}

void sub_1DD02FCC0(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *((void *)v1 + 25) = v5;
    operator delete(v5);
  }
  faiss::ProductQuantizer::~ProductQuantizer(v2);
  faiss::Index::~Index(v1);
  _Unwind_Resume(a1);
}

faiss::IndexPQ *faiss::IndexPQ::IndexPQ(faiss::IndexPQ *this)
{
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *(void *)this = &unk_1F383FB50;
  faiss::ProductQuantizer::ProductQuantizer((faiss::IndexPQ *)((char *)this + 40));
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  faiss::PolysemousTraining::PolysemousTraining((faiss::IndexPQ *)((char *)this + 224));
  *((_DWORD *)this + 7) = 1;
  *((unsigned char *)this + 25) = 0;
  *((unsigned char *)this + 216) = 0;
  *((_DWORD *)this + 80) = *((_DWORD *)this + 12) * *((_DWORD *)this + 14) + 1;
  *((_DWORD *)this + 78) = 0;
  *((unsigned char *)this + 316) = 0;
  return this;
}

void sub_1DD02FDA4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  int v6 = *v4;
  if (*v4)
  {
    *((void *)v1 + 25) = v6;
    operator delete(v6);
  }
  faiss::ProductQuantizer::~ProductQuantizer(v2);
  faiss::Index::~Index(v1);
  _Unwind_Resume(a1);
}

void faiss::IndexPQ::train(faiss::IndexPQ *this, uint64_t a2, const float *a3)
{
  if (*((unsigned char *)this + 216))
  {
    if (a2 / 4 >= *((int *)this + 66)) {
      unint64_t v5 = *((int *)this + 66);
    }
    else {
      unint64_t v5 = a2 / 4;
    }
    uint64_t v6 = a2 - v5;
    if (*((unsigned char *)this + 24))
    {
      uint64_t v7 = "these";
      if (!v5) {
        uint64_t v7 = "centroids";
      }
      printf("PQ training on %lld points, remains %lld points: training polysemous on %s\n", a2 - v5, v5, v7);
    }
    faiss::ProductQuantizer::train((faiss::IndexPQ *)((char *)this + 40), v6, a3);
    faiss::PolysemousTraining::optimize_pq_for_hamming((faiss::IndexPQ *)((char *)this + 224), (faiss::IndexPQ *)((char *)this + 40), v5, &a3[v6 * *((int *)this + 2)]);
  }
  else
  {
    faiss::ProductQuantizer::train((faiss::IndexPQ *)((char *)this + 40), a2, a3);
  }
  *((unsigned char *)this + 25) = 1;
}

uint64_t faiss::IndexPQ::add(faiss::IndexPQ *this, unint64_t a2, const float *a3)
{
  if (!*((unsigned char *)this + 25))
  {
    memset(&v18, 0, sizeof(v18));
    int v14 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v18, v14 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v18;
    }
    else {
      uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v18.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v15, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "virtual void faiss::IndexPQ::add(idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 73);
  }
  uint64_t v8 = *((void *)this + 24);
  uint64_t v6 = (unint64_t *)((char *)this + 192);
  uint64_t v7 = v8;
  uint64_t v9 = *(v6 - 22);
  uint64_t v10 = *(v6 - 15);
  unint64_t v11 = (v9 + a2) * v10;
  unint64_t v12 = v6[1] - v8;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      *((void *)this + 25) = v7 + v11;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v6, v11 - v12);
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = *((void *)this + 9);
    uint64_t v7 = *((void *)this + 24);
  }
  uint64_t result = faiss::ProductQuantizer::compute_codes((faiss::IndexPQ *)((char *)this + 40), a3, (unsigned __int8 *)(v7 + v10 * v9), a2);
  *((void *)this + 2) += a2;
  return result;
}

void sub_1DD03001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::IndexPQ::add_encoded(faiss::IndexPQ *this, uint64_t a2, const unsigned __int8 *a3)
{
  if (!*((unsigned char *)this + 25))
  {
    memset(&v18, 0, sizeof(v18));
    int v14 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v18, v14 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v18;
    }
    else {
      uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v18.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v15, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "void faiss::IndexPQ::add_encoded(idx_t, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 80);
  }
  uint64_t v8 = *((void *)this + 24);
  uint64_t v6 = (unint64_t *)((char *)this + 192);
  uint64_t v7 = v8;
  uint64_t v9 = *(v6 - 22);
  uint64_t v10 = *(v6 - 15);
  unint64_t v11 = (v9 + a2) * v10;
  unint64_t v12 = v6[1] - v8;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      *((void *)this + 25) = v7 + v11;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v6, v11 - v12);
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = *((void *)this + 9);
    uint64_t v7 = *((void *)this + 24);
  }
  uint64_t result = memcpy((void *)(v7 + v10 * v9), a3, v10 * a2);
  *((void *)this + 2) += a2;
  return result;
}

void sub_1DD03019C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexPQ::remove_ids(void *a1, uint64_t (***a2)(void, uint64_t))
{
  uint64_t v3 = a1[2];
  if (v3 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if (((**a2)(a2, v5) & 1) == 0)
      {
        if (v5 > v6) {
          memmove((void *)(a1[24] + a1[9] * v6), (const void *)(a1[24] + a1[9] * v5), a1[9]);
        }
        ++v6;
      }
      ++v5;
      uint64_t v3 = a1[2];
    }
    while (v5 < v3);
  }
  uint64_t v7 = v3 - v6;
  if (v3 != v6)
  {
    uint64_t v8 = a1[24];
    a1[2] = v6;
    unint64_t v9 = a1[9] * v6;
    unint64_t v10 = a1[25] - v8;
    if (v9 <= v10)
    {
      if (v9 < v10) {
        a1[25] = v8 + v9;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a1 + 24, v9 - v10);
    }
  }
  return v7;
}

void *faiss::IndexPQ::reset(void *this)
{
  this[25] = this[24];
  this[2] = 0;
  return this;
}

_DWORD *faiss::IndexPQ::reconstruct_n(_DWORD *this, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3)
  {
    if (a2 < 0 || (uint64_t v6 = (uint64_t)this, a3 + a2 > *((void *)this + 2)))
    {
      memset(&v13, 0, sizeof(v13));
      int v9 = snprintf(0, 0, "Error: '%s' failed", "ni == 0 || (i0 >= 0 && i0 + ni <= ntotal)");
      std::string::resize(&v13, v9 + 1, 0);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v10 = &v13;
      }
      else {
        unint64_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v13.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v10, size, "Error: '%s' failed", "ni == 0 || (i0 >= 0 && i0 + ni <= ntotal)");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v13, "virtual void faiss::IndexPQ::reconstruct_n(idx_t, idx_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 114);
    }
    if (a3 >= 1)
    {
      for (uint64_t i = 0; i != a3; ++i)
        this = faiss::ProductQuantizer::decode((_DWORD *)(v6 + 40), *(void *)(v6 + 192) + *(void *)(v6 + 72) * (a2 + i), (uint64_t)&a4[i * *(int *)(v6 + 8)]);
    }
  }
  return this;
}

void sub_1DD030414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *faiss::IndexPQ::reconstruct(faiss::IndexPQ *this, uint64_t a2, float *a3)
{
  if (a2 < 0 || *((void *)this + 2) <= a2)
  {
    memset(&v10, 0, sizeof(v10));
    int v6 = snprintf(0, 0, "Error: '%s' failed", "key >= 0 && key < ntotal");
    std::string::resize(&v10, v6 + 1, 0);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v10;
    }
    else {
      uint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v10.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v7, size, "Error: '%s' failed", "key >= 0 && key < ntotal");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v10, "virtual void faiss::IndexPQ::reconstruct(idx_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 122);
  }
  uint64_t v3 = *((void *)this + 24) + *((void *)this + 9) * a2;
  uint64_t v4 = (_DWORD *)((char *)this + 40);
  return faiss::ProductQuantizer::decode(v4, v3, (uint64_t)a3);
}

void sub_1DD03054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexPQ::get_distance_computer(faiss::IndexPQ *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1 != 16)
  {
    if (v1 == 8) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1DD030704(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  MEMORY[0x1E01AF670](v1, 0x10F1C40E4390973);
  _Unwind_Resume(a1);
}

uint64_t *faiss::IndexPQ::search(faiss::IndexPQ *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6)
{
  if (a4 <= 0)
  {
    memset(&v27, 0, sizeof(v27));
    int v15 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v27, v15 + 1, 0);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v27;
    }
    else {
      uint64_t v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v27.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v16, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v27, "virtual void faiss::IndexPQ::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 214);
  }
  if (!*((unsigned char *)this + 25))
  {
    memset(&v27, 0, sizeof(v27));
    int v19 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v27, v19 + 1, 0);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v27;
    }
    else {
      int v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v21 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v21 = v27.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v20, v21, "Error: '%s' failed", "is_trained");
    int v22 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v22, &v27, "virtual void faiss::IndexPQ::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 216);
  }
  int v8 = *((_DWORD *)this + 78);
  if ((v8 - 4) >= 2)
  {
    if (v8) {
      operator new[]();
    }
    int v10 = *((_DWORD *)this + 7);
    unint64_t v11 = (char *)this + 40;
    v27.__r_.__value_.__r.__words[0] = a2;
    v27.__r_.__value_.__l.__size_ = a4;
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)a6;
    size_t v28 = a5;
    if (v10 == 1) {
      unint64_t v12 = (faiss::IndexPQStats *)faiss::ProductQuantizer::search(v11, a3, a2, *((void *)this + 24), *((void *)this + 2), &v27, 1);
    }
    else {
      unint64_t v12 = (faiss::IndexPQStats *)faiss::ProductQuantizer::search_ip(v11, a3, a2, *((void *)this + 24), *((void *)this + 2), &v27, 1);
    }
    indexPQ_stats = faiss::IndexPQStats::get_indexPQ_stats(v12);
    faiss::IndexPQStats::get_indexPQ_stats(void)::_stats += a2;
    uint64_t v14 = *((void *)this + 2);
    uint64_t result = faiss::IndexPQStats::get_indexPQ_stats((faiss::IndexPQStats *)indexPQ_stats);
    qword_1EAB1CBA0 += v14 * a2;
  }
  else
  {
    if (*((_DWORD *)this + 7) != 1)
    {
      memset(&v27, 0, sizeof(v27));
      int v23 = snprintf(0, 0, "Error: '%s' failed", "metric_type == METRIC_L2");
      std::string::resize(&v27, v23 + 1, 0);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = &v27;
      }
      else {
        std::string::size_type v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v25 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v25 = v27.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v24, v25, "Error: '%s' failed", "metric_type == METRIC_L2");
      uint64_t v26 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v26, &v27, "virtual void faiss::IndexPQ::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 234);
    }
    return (uint64_t *)faiss::IndexPQ::search_core_polysemous(this, a2, a3, a4, a5, a6);
  }
  return result;
}

void sub_1DD030D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v17);
  if (a16 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1E01AF650](v16, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *faiss::IndexPQStats::get_indexPQ_stats(faiss::IndexPQStats *this)
{
  {
    faiss::IndexPQStats::get_indexPQ_stats(void)::_stats = 0;
    qword_1EAB1CBA0 = 0;
    qword_1EAB1CBA8 = 0;
  }
  return &faiss::IndexPQStats::get_indexPQ_stats(void)::_stats;
}

#error "1DD030F14: call analysis failed (funcsize=1355)"

void sub_1DD032484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  if (*(char *)(v14 - 89) < 0) {
    operator delete(*(void **)(v14 - 112));
  }
  _Unwind_Resume(a1);
}

void *faiss::IndexPQStats::reset(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t faiss::IndexPQ::sa_code_size(faiss::IndexPQ *this)
{
  return *((void *)this + 9);
}

uint64_t faiss::IndexPQ::sa_encode(faiss::IndexPQ *this, unint64_t a2, const float *a3, unsigned __int8 *a4)
{
  return faiss::ProductQuantizer::compute_codes((faiss::IndexPQ *)((char *)this + 40), a3, a4, a2);
}

_DWORD *faiss::IndexPQ::sa_decode(faiss::IndexPQ *this, uint64_t a2, const unsigned __int8 *a3, float *a4)
{
  return faiss::ProductQuantizer::decode((_DWORD *)this + 10, a3, a4, a2);
}

void faiss::IndexPQ::hamming_distance_table(faiss::IndexPQ *this, uint64_t a2, const float *a3, int *a4)
{
}

void sub_1DD032670(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void faiss::IndexPQ::hamming_distance_histogram(faiss::IndexPQ *this, uint64_t a2, const float *a3, uint64_t a4, const float *a5, uint64_t *a6)
{
  if (*((_DWORD *)this + 7) == 1)
  {
    if ((*((void *)this + 9) & 7) == 0)
    {
      if (*((void *)this + 7) == 8) {
        operator new[]();
      }
      memset(&__p, 0, sizeof(__p));
      int v14 = snprintf(0, 0, "Error: '%s' failed", "pq.nbits == 8");
      std::string::resize(&__p, v14 + 1, 0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      snprintf((char *)p_p, size, "Error: '%s' failed", "pq.nbits == 8");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &__p, "void faiss::IndexPQ::hamming_distance_histogram(idx_t, const float *, idx_t, const float *, int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 500);
    }
    memset(&__p, 0, sizeof(__p));
    int v10 = snprintf(0, 0, "Error: '%s' failed", "pq.code_size % 8 == 0");
    std::string::resize(&__p, v10 + 1, 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v11 = &__p;
    }
    else {
      unint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v12 = __p.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v11, v12, "Error: '%s' failed", "pq.code_size % 8 == 0");
    std::string v13 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v13, &__p, "void faiss::IndexPQ::hamming_distance_histogram(idx_t, const float *, idx_t, const float *, int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 499);
  }
  memset(&__p, 0, sizeof(__p));
  int v6 = snprintf(0, 0, "Error: '%s' failed", "metric_type == METRIC_L2");
  std::string::resize(&__p, v6 + 1, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &__p;
  }
  else {
    uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v8 = __p.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v7, v8, "Error: '%s' failed", "metric_type == METRIC_L2");
  int v9 = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(v9, &__p, "void faiss::IndexPQ::hamming_distance_histogram(idx_t, const float *, idx_t, const float *, int64_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 498);
}

void sub_1DD032B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

faiss::MultiIndexQuantizer *faiss::MultiIndexQuantizer::MultiIndexQuantizer(faiss::MultiIndexQuantizer *this, int a2, unint64_t a3, unint64_t a4)
{
  *((_DWORD *)this + 2) = a2;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *(void *)this = &unk_1F383F638;
  faiss::ProductQuantizer::ProductQuantizer((faiss::MultiIndexQuantizer *)((char *)this + 40), a2, a3, a4);
  *((unsigned char *)this + 25) = 0;
  *((unsigned char *)this + 88) = *((unsigned char *)this + 24);
  return this;
}

void sub_1DD032C68(_Unwind_Exception *a1)
{
  faiss::Index::~Index(v1);
  _Unwind_Resume(a1);
}

void faiss::MultiIndexQuantizer::train(faiss::MultiIndexQuantizer *this, int a2, const float *a3)
{
  *((unsigned char *)this + 88) = *((unsigned char *)this + 24);
  faiss::ProductQuantizer::train((faiss::MultiIndexQuantizer *)((char *)this + 40), a2, a3);
  *((unsigned char *)this + 25) = 1;
  *((void *)this + 2) = 1;
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    uint64_t v5 = 1;
    do
    {
      v5 *= *((void *)this + 10);
      --v4;
    }
    while (v4);
    *((void *)this + 2) = v5;
  }
}

#error "1DD032E28: call analysis failed (funcsize=639)"

void sub_1DD03378C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  __cxa_free_exception(v34);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::anonymous namespace'::MinSumK<float,faiss::anonymous namespace'::SemiSortedArray<float>,false>::~MinSumK(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    MEMORY[0x1E01AF650](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    MEMORY[0x1E01AF650](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  return a1;
}

void *faiss::MultiIndexQuantizer::reconstruct(void *this, uint64_t a2, float *__dst)
{
  if (this[6])
  {
    uint64_t v5 = this;
    unint64_t v6 = 0;
    uint64_t v7 = this[8];
    do
    {
      uint64_t v8 = v5[7];
      uint64_t v9 = a2 & ~(-1 << v8);
      a2 >>= v8;
      this = memcpy(__dst, (const void *)(v5[18] + 4 * (v9 + v5[10] * v6) * v7), 4 * v7);
      uint64_t v7 = v5[8];
      __dst += v7;
      ++v6;
    }
    while (v5[6] > v6);
  }
  return this;
}

void faiss::MultiIndexQuantizer::add(faiss::MultiIndexQuantizer *this, uint64_t a2, const float *a3)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "This index has virtual elements, it does not support add");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::MultiIndexQuantizer::add(idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 1013);
}

void sub_1DD0339BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::MultiIndexQuantizer::reset(faiss::MultiIndexQuantizer *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "This index has virtual elements, it does not support reset");
  faiss::FaissException::FaissException(exception, v2, "virtual void faiss::MultiIndexQuantizer::reset()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 1019);
}

void sub_1DD033A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

faiss::MultiIndexQuantizer2 *faiss::MultiIndexQuantizer2::MultiIndexQuantizer2(faiss::MultiIndexQuantizer2 *this, int a2, unint64_t a3, unint64_t a4, faiss::Index **a5)
{
  uint64_t v8 = faiss::MultiIndexQuantizer::MultiIndexQuantizer(this, a2, a3, a4);
  *(void *)uint64_t v8 = &unk_1F383F770;
  *((void *)v8 + 24) = 0;
  uint64_t v9 = (void *)((char *)v8 + 192);
  *((void *)v8 + 25) = 0;
  *((void *)v8 + 26) = 0;
  std::vector<float const*>::resize((uint64_t)v8 + 192, a3);
  if (a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 8);
    do
    {
      size_t v12 = a5[v10];
      if (v11 != *((_DWORD *)v12 + 2))
      {
        memset(&v18, 0, sizeof(v18));
        int v14 = snprintf(0, 0, "Error: '%s' failed: Provided sub-index has incorrect size", "indexes[i]->d == pq.dsub");
        std::string::resize(&v18, v14 + 1, 0);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v15 = &v18;
        }
        else {
          int v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v18.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v15, size, "Error: '%s' failed: Provided sub-index has incorrect size", "indexes[i]->d == pq.dsub");
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v18, "faiss::MultiIndexQuantizer2::MultiIndexQuantizer2(int, size_t, size_t, Index **)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 1036);
      }
      *(void *)(*v9 + 8 * v10++) = v12;
    }
    while (a3 != v10);
  }
  *((unsigned char *)this + 216) = 0;
  return this;
}

void sub_1DD033C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::string v18 = *v16;
  if (*v16)
  {
    *((void *)v15 + 25) = v18;
    operator delete(v18);
  }
  faiss::MultiIndexQuantizer::~MultiIndexQuantizer(v15);
  _Unwind_Resume(a1);
}

void faiss::MultiIndexQuantizer::~MultiIndexQuantizer(faiss::MultiIndexQuantizer *this)
{
  *(void *)this = &unk_1F383F638;
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F383F638;
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1E01AF670);
}

faiss::MultiIndexQuantizer2 *faiss::MultiIndexQuantizer2::MultiIndexQuantizer2(faiss::MultiIndexQuantizer2 *this, int a2, unint64_t a3, faiss::Index *a4, faiss::Index *a5)
{
  uint64_t v8 = faiss::MultiIndexQuantizer::MultiIndexQuantizer(this, a2, 2uLL, a3);
  *((void *)v8 + 24) = 0;
  *(void *)uint64_t v8 = &unk_1F383F770;
  *((void *)v8 + 25) = 0;
  *((void *)v8 + 26) = 0;
  uint64_t v9 = *((int *)a4 + 2);
  if (*((void *)v8 + 8) != v9 || v9 != *((_DWORD *)a5 + 2))
  {
    memset(&v15, 0, sizeof(v15));
    int v11 = snprintf(0, 0, "Error: '%s' failed: Provided sub-index has incorrect size", "assign_index_0->d == pq.dsub && assign_index_1->d == pq.dsub");
    std::string::resize(&v15, v11 + 1, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = &v15;
    }
    else {
      size_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v15.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v12, size, "Error: '%s' failed: Provided sub-index has incorrect size", "assign_index_0->d == pq.dsub && assign_index_1->d == pq.dsub");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v15, "faiss::MultiIndexQuantizer2::MultiIndexQuantizer2(int, size_t, Index *, Index *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 1050);
  }
  std::vector<float const*>::resize((uint64_t)v8 + 192, 2uLL);
  **((void **)this + 24) = a4;
  *(void *)(*((void *)this + 24) + 8) = a5;
  *((unsigned char *)this + 216) = 0;
  return this;
}

void sub_1DD033E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  int v19 = *v16;
  if (*v16)
  {
    *((void *)v15 + 25) = v19;
    operator delete(v19);
  }
  faiss::MultiIndexQuantizer::~MultiIndexQuantizer(v15);
  _Unwind_Resume(a1);
}

void faiss::MultiIndexQuantizer2::train(faiss::MultiIndexQuantizer2 *this, int a2, const float *a3)
{
  faiss::MultiIndexQuantizer::train(this, a2, a3);
  if (*((void *)this + 6))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 24) + 8 * v4);
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      ++v4;
    }
    while (*((void *)this + 6) > v4);
  }
}

void faiss::MultiIndexQuantizer2::search(faiss::MultiIndexQuantizer2 *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6)
{
  if (a2)
  {
    if (*((void *)this + 10) >= a4) {
      LODWORD(v8) = a4;
    }
    else {
      uint64_t v8 = *((void *)this + 10);
    }
    if (!v8)
    {
      memset(&v39, 0, sizeof(v39));
      int v29 = snprintf(0, 0, "Error: '%s' failed", "k2");
      std::string::resize(&v39, v29 + 1, 0);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v30 = &v39;
      }
      else {
        int v30 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v39.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v30, size, "Error: '%s' failed", "k2");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v39, "virtual void faiss::MultiIndexQuantizer2::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 1075);
    }
    uint64_t v10 = a2;
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = *((void *)this + 8);
    int v38 = v8;
    uint64_t v36 = (int)v8;
    uint64_t v13 = (int)v8 * a2;
    std::vector<long long>::vector(v45, v13 * v11);
    std::vector<float>::vector(v44, v13 * v11);
    uint64_t v35 = a4;
    std::vector<float>::vector(v43, v12 * v10);
    uint64_t v37 = v10;
    if (v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        std::string v15 = (char *)v43[0];
        if (v10 >= 1)
        {
          int v16 = &a3[i * v12];
          do
          {
            memcpy(v15, v16, 4 * v12);
            v16 += *((int *)this + 2);
            v15 += 4 * v12;
            --v10;
          }
          while (v10);
          std::string v15 = (char *)v43[0];
          uint64_t v10 = v37;
        }
        uint64_t v17 = *(void *)(*((void *)this + 24) + 8 * i);
        (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *, char *))(*(void *)v17 + 40))(v17, v10, v15, v36, (char *)v44[0] + 4 * v13 * i, (char *)v45[0] + 8 * v13 * i);
      }
    }
    if (v35 != 1)
    {
      unsigned int v27 = *((_DWORD *)this + 12);
      unsigned int v28 = *((_DWORD *)this + 14);
      v39.__r_.__value_.__r.__words[0] = __PAIR64__(v27, v35);
      v39.__r_.__value_.__l.__size_ = __PAIR64__(v38, v28);
      *(_OWORD *)std::string __p = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      v39.__r_.__value_.__r.__words[2] = (int)(v27 * v35);
      if (1 << v28 >= v38) {
        operator new[]();
      }
      __assert_rtn("MinSumK", "IndexPQ.cpp", 782, "N <= (1 << nbit)");
    }
    if (v38 != 1) {
      __assert_rtn("search", "IndexPQ.cpp", 1100, "k2 == 1");
    }
    if (v10 >= 1)
    {
      uint64_t v18 = 0;
      int v19 = (float *)v44[0];
      int v20 = v45[0];
      do
      {
        if (v11 < 1)
        {
          uint64_t v22 = 0;
          float v23 = 0.0;
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          float v23 = 0.0;
          uint64_t v24 = v11;
          size_t v25 = v19;
          uint64_t v26 = v20;
          do
          {
            v22 |= *v26 << v21;
            float v23 = v23 + *v25;
            v21 += *((void *)this + 7);
            v26 += v10;
            v25 += v10;
            --v24;
          }
          while (v24);
        }
        a5[v18] = v23;
        a6[v18++] = v22;
        ++v20;
        ++v19;
      }
      while (v18 != v10);
    }
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
    if (v44[0])
    {
      v44[1] = v44[0];
      operator delete(v44[0]);
    }
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
  }
}

void sub_1DD0347F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  __cxa_free_exception(v31);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::anonymous namespace'::MinSumK<float,faiss::anonymous namespace'::PreSortedArray<float>,false>::~MinSumK(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    MEMORY[0x1E01AF650](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    MEMORY[0x1E01AF650](v3, 0x1000C8052888210);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  return a1;
}

void faiss::IndexPQ::~IndexPQ(void **this)
{
  *this = &unk_1F383FB50;
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  uint64_t v2 = this[24];
  if (v2)
  {
    this[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[21];
  if (v3)
  {
    this[22] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[18];
  if (v4)
  {
    this[19] = v4;
    operator delete(v4);
  }
  faiss::Index::~Index((faiss::Index *)this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *this = &unk_1F383FB50;
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  uint64_t v2 = this[24];
  if (v2)
  {
    this[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[21];
  if (v3)
  {
    this[22] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[18];
  if (v4)
  {
    this[19] = v4;
    operator delete(v4);
  }
  faiss::Index::~Index((faiss::Index *)this);
  JUMPOUT(0x1E01AF670);
}

void faiss::MultiIndexQuantizer2::~MultiIndexQuantizer2(faiss::MultiIndexQuantizer2 *this)
{
  *(void *)this = &unk_1F383F770;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383F638;
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  faiss::Index::~Index(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F383F770;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F383F638;
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  faiss::Index::~Index(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder8>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(faiss::ProductQuantizer **)(a1 + 48);
  uint64_t v9 = *(float **)(a1 + 64);
  if (v7 == 1) {
    faiss::ProductQuantizer::compute_distance_table(v8, a2, v9);
  }
  else {
    faiss::ProductQuantizer::compute_inner_prod_table((uint64_t)v8, a2, v9, a4, a5, a6);
  }
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder8>::operator()(void *result, uint64_t a2)
{
  uint64_t v2 = result[6];
  if (*(_DWORD *)(v2 + 16) != 8) {
    faiss::decode<faiss::PQDecoder8>();
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3)
  {
    unint64_t v4 = (unsigned __int8 *)(result[4] + result[5] * a2);
    uint64_t v5 = result[8];
    float v6 = 0.0;
    do
    {
      unsigned int v7 = *v4++;
      float v6 = v6 + *(float *)(v5 + 4 * v7);
      v5 += 1024;
      --v3;
    }
    while (v3);
  }
  ++result[11];
  return result;
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder8>::symmetric_dis(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[7];
  if (!v3)
  {
    memset(&v18, 0, sizeof(v18));
    int v14 = snprintf(0, 0, "Error: '%s' failed", "sdc");
    std::string::resize(&v18, v14 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v15 = &v18;
    }
    else {
      std::string v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v18.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v15, size, "Error: '%s' failed", "sdc");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "virtual float faiss::(anonymous namespace)::PQDistanceComputer<faiss::PQDecoder8>::symmetric_dis(idx_t, idx_t) [PQDecoder = faiss::PQDecoder8]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 154);
  }
  uint64_t v4 = result[6];
  if (*(_DWORD *)(v4 + 16) != 8) {
    faiss::decode<faiss::PQDecoder8>();
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    uint64_t v6 = result[4];
    uint64_t v7 = result[5];
    uint64_t v8 = (unsigned __int8 *)(v6 + v7 * a3);
    uint64_t v9 = (unsigned __int8 *)(v6 + v7 * a2);
    float v10 = 0.0;
    do
    {
      unsigned int v12 = *v9++;
      uint64_t v11 = v12;
      unsigned int v13 = *v8++;
      float v10 = v10 + *(float *)(v3 + ((4 * v11) | ((unint64_t)v13 << 10)));
      v3 += 0x40000;
      --v5;
    }
    while (v5);
  }
  ++result[11];
  return result;
}

void sub_1DD034DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder8>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383E998;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder8>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383E998;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder16>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(faiss::ProductQuantizer **)(a1 + 48);
  uint64_t v9 = *(float **)(a1 + 64);
  if (v7 == 1) {
    faiss::ProductQuantizer::compute_distance_table(v8, a2, v9);
  }
  else {
    faiss::ProductQuantizer::compute_inner_prod_table((uint64_t)v8, a2, v9, a4, a5, a6);
  }
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder16>::operator()(void *result, uint64_t a2)
{
  uint64_t v2 = result[6];
  if (*(_DWORD *)(v2 + 16) != 16) {
    faiss::decode<faiss::PQDecoder16>();
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3)
  {
    uint64_t v4 = (unsigned __int16 *)(result[4] + result[5] * a2);
    uint64_t v5 = result[8];
    float v6 = 0.0;
    do
    {
      unsigned int v7 = *v4++;
      float v6 = v6 + *(float *)(v5 + 4 * v7);
      v5 += 0x40000;
      --v3;
    }
    while (v3);
  }
  ++result[11];
  return result;
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder16>::symmetric_dis(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[7];
  if (!v3)
  {
    memset(&v18, 0, sizeof(v18));
    int v14 = snprintf(0, 0, "Error: '%s' failed", "sdc");
    std::string::resize(&v18, v14 + 1, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v15 = &v18;
    }
    else {
      std::string v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v18.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v15, size, "Error: '%s' failed", "sdc");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v18, "virtual float faiss::(anonymous namespace)::PQDistanceComputer<faiss::PQDecoder16>::symmetric_dis(idx_t, idx_t) [PQDecoder = faiss::PQDecoder16]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 154);
  }
  uint64_t v4 = result[6];
  if (*(_DWORD *)(v4 + 16) != 16) {
    faiss::decode<faiss::PQDecoder16>();
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    uint64_t v6 = result[4];
    uint64_t v7 = result[5];
    uint64_t v8 = (unsigned __int16 *)(v6 + v7 * a3);
    uint64_t v9 = (unsigned __int16 *)(v6 + v7 * a2);
    float v10 = 0.0;
    do
    {
      unsigned int v12 = *v9++;
      uint64_t v11 = v12;
      unsigned int v13 = *v8++;
      float v10 = v10 + *(float *)(v3 + ((4 * v11) | ((unint64_t)v13 << 18)));
      v3 += 0x400000000;
      --v5;
    }
    while (v5);
  }
  ++result[11];
  return result;
}

void sub_1DD0350B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder16>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383E9D0;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoder16>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383E9D0;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoderGeneric>::set_query(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(faiss::ProductQuantizer **)(a1 + 48);
  uint64_t v9 = *(float **)(a1 + 64);
  if (v7 == 1) {
    faiss::ProductQuantizer::compute_distance_table(v8, a2, v9);
  }
  else {
    faiss::ProductQuantizer::compute_inner_prod_table((uint64_t)v8, a2, v9, a4, a5, a6);
  }
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoderGeneric>::operator()(void *result, uint64_t a2)
{
  uint64_t v2 = result[6];
  uint64_t v3 = *(void *)(v2 + 16);
  if ((int)v3 > 64) {
    faiss::decode<faiss::PQDecoderGeneric>();
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    LOBYTE(v6) = 0;
    LODWORD(v7) = 0;
    uint64_t v8 = (unsigned __int8 *)(result[4] + result[5] * a2);
    uint64_t v9 = result[8];
    float v10 = 0.0;
    do
    {
      if (!(_BYTE)v6) {
        LODWORD(v7) = *v8;
      }
      uint64_t v11 = v7 >> v6;
      int v12 = v3 + v6;
      unsigned int v13 = v12 - 8;
      if (v12 < 8)
      {
        LOBYTE(v6) = v3 + v6;
      }
      else
      {
        char v14 = 8 - v6;
        std::string v15 = v8 + 1;
        if (v13 < 8)
        {
          ++v8;
        }
        else
        {
          unsigned int v16 = v13 >> 3;
          uint64_t v17 = v16 - 1;
          do
          {
            unsigned int v18 = *v15++;
            v11 |= (unint64_t)v18 << v14;
            v14 += 8;
            --v16;
          }
          while (v16);
          v8 += v17 + 2;
        }
        int v6 = ((_BYTE)v6 + (_BYTE)v3) & 7;
        if (v6)
        {
          uint64_t v7 = *v8;
          v11 |= v7 << v14;
        }
      }
      float v10 = v10 + *(float *)(v9 + 4 * (v11 & ~(-1 << v3)));
      v9 += 4 * (1 << v3);
      ++v5;
    }
    while (v5 != v4);
  }
  ++result[11];
  return result;
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoderGeneric>::symmetric_dis(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[7];
  if (!v3)
  {
    memset(&v37, 0, sizeof(v37));
    int v33 = snprintf(0, 0, "Error: '%s' failed", "sdc");
    std::string::resize(&v37, v33 + 1, 0);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = &v37;
    }
    else {
      std::string::size_type v34 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v37.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v34, size, "Error: '%s' failed", "sdc");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v37, "virtual float faiss::(anonymous namespace)::PQDistanceComputer<faiss::PQDecoderGeneric>::symmetric_dis(idx_t, idx_t) [PQDecoder = faiss::PQDecoderGeneric]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexPQ.cpp", 154);
  }
  uint64_t v4 = result[6];
  uint64_t v5 = *(void *)(v4 + 16);
  if ((int)v5 >= 65) {
    faiss::decode<faiss::PQDecoderGeneric>();
  }
  uint64_t v6 = *(void *)(v4 + 8);
  if (v6)
  {
    uint64_t v7 = 0;
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
    LOBYTE(v10) = 0;
    LODWORD(v11) = 0;
    uint64_t v12 = result[4];
    uint64_t v13 = result[5];
    char v14 = (unsigned __int8 *)(v12 + v13 * a3);
    std::string v15 = (unsigned __int8 *)(v12 + v13 * a2);
    float v16 = 0.0;
    do
    {
      if (!(_BYTE)v10) {
        LODWORD(v9) = *v15;
      }
      uint64_t v17 = v9 >> v10;
      int v18 = v5 + v10;
      unsigned int v19 = v18 - 8;
      if (v18 < 8)
      {
        LOBYTE(v10) = v5 + v10;
      }
      else
      {
        char v20 = 8 - v10;
        uint64_t v21 = v15 + 1;
        if (v19 < 8)
        {
          ++v15;
        }
        else
        {
          unsigned int v22 = v19 >> 3;
          uint64_t v23 = v22 - 1;
          do
          {
            unsigned int v24 = *v21++;
            v17 |= (unint64_t)v24 << v20;
            v20 += 8;
            --v22;
          }
          while (v22);
          v15 += v23 + 2;
        }
        int v10 = ((_BYTE)v10 + (_BYTE)v5) & 7;
        if (v10)
        {
          uint64_t v9 = *v15;
          v17 |= v9 << v20;
        }
      }
      if (!(_BYTE)v8) {
        LODWORD(v11) = *v14;
      }
      uint64_t v25 = v11 >> v8;
      int v26 = v5 + v8;
      unsigned int v27 = v26 - 8;
      if (v26 < 8)
      {
        LOBYTE(v8) = v5 + v8;
      }
      else
      {
        char v28 = 8 - v8;
        int v29 = v14 + 1;
        if (v27 < 8)
        {
          ++v14;
        }
        else
        {
          unsigned int v30 = v27 >> 3;
          uint64_t v31 = v30 - 1;
          do
          {
            unsigned int v32 = *v29++;
            v25 |= (unint64_t)v32 << v28;
            v28 += 8;
            --v30;
          }
          while (v30);
          v14 += v31 + 2;
        }
        int v8 = ((_BYTE)v8 + (_BYTE)v5) & 7;
        if (v8)
        {
          uint64_t v11 = *v14;
          v25 |= v11 << v28;
        }
      }
      float v16 = v16 + *(float *)(v3 + 4 * (((v25 & ~(-1 << v5)) << v5) + (v17 & ~(-1 << v5))));
      v3 += 4 * (1 << (2 * v5));
      ++v7;
    }
    while (v7 != v6);
  }
  ++result[11];
  return result;
}

void sub_1DD035568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoderGeneric>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383EA08;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void faiss::anonymous namespace'::PQDistanceComputer<faiss::PQDecoderGeneric>::~PQDistanceComputer(void *a1)
{
  *a1 = &unk_1F383EA08;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void **std::vector<faiss::anonymous namespace'::SemiSortedArray<float>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float faiss::anonymous namespace'::SemiSortedArray<float>::get_diff(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 <= a2) {
  return *(float *)(*(void *)a1 + 4 * *(int *)(*(void *)(a1 + 16) + 4 * a2))
  }
       - *(float *)(*(void *)a1 + 4 * *(int *)(*(void *)(a1 + 16) + 4 * a2 - 4));
}

uint64_t faiss::anonymous namespace'::SemiSortedArray<float>::grow(uint64_t result, int a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 8);
  if (v3 > a2)
  {
    uint64_t v4 = *(int *)(result + 40);
    uint64_t v5 = (a2 - v4);
    int v6 = v3 - v4;
    uint64_t v7 = *(void *)result;
    int v8 = (int *)(*(void *)(result + 16) + 4 * v4);
    if ((int)v5 >= 2)
    {
      uint64_t v9 = v8 - 1;
      uint64_t v10 = 1;
      do
      {
        uint64_t v11 = v8[v10++];
        float v12 = *(float *)(v7 + 4 * v11);
        unint64_t v13 = v10;
        while (1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = v9[v13 >> 1];
          if (v12 <= *(float *)(v7 + 4 * v15)) {
            break;
          }
          v9[v13] = v15;
          BOOL v16 = v13 > 3;
          v13 >>= 1;
          if (!v16) {
            goto LABEL_9;
          }
        }
        unint64_t v14 = v13;
LABEL_9:
        v9[v14] = v11;
      }
      while (v10 != v5);
    }
    uint64_t v17 = v8 - 1;
    uint64_t v18 = (int)v5;
    do
    {
      uint64_t v19 = v8[v18];
      uint64_t v20 = *v8;
      float v21 = *(float *)(v7 + 4 * v19);
      if (*(float *)(v7 + 4 * v20) <= v21) {
        goto LABEL_29;
      }
      uint64_t v22 = v17[(int)v5];
      if (v5 < 2)
      {
        *int v8 = v22;
        uint64_t result = (int)v5;
        goto LABEL_28;
      }
      float v23 = *(float *)(v7 + 4 * v22);
      uint64_t v24 = 3;
      unint64_t v25 = 2;
      uint64_t v26 = 1;
      while (1)
      {
        uint64_t v27 = v17[v25];
        float v28 = *(float *)(v7 + 4 * v27);
        if (v24 == (int)v5 + 1 || (float v29 = *(float *)(v7 + 4 * v17[v24]), v28 > v29))
        {
          if (v23 > v28) {
            break;
          }
          goto LABEL_20;
        }
        LODWORD(v27) = v17[v24];
        unint64_t v25 = v24;
        if (v23 > v29) {
          break;
        }
LABEL_20:
        v17[v26] = v27;
        uint64_t v30 = v25;
        v25 *= 2;
        uint64_t v24 = (2 * v30) | 1;
        uint64_t v26 = v30;
        if (v25 > (int)v5) {
          goto LABEL_23;
        }
      }
      uint64_t v30 = v26;
LABEL_23:
      v17[v30] = v17[(int)v5];
      unint64_t v31 = (int)v5;
      while (1)
      {
        uint64_t result = v31 >> 1;
        uint64_t v32 = v17[v31 >> 1];
        if (v21 <= *(float *)(v7 + 4 * v32)) {
          break;
        }
        v17[v31] = v32;
        BOOL v16 = v31 > 3;
        v31 >>= 1;
        if (!v16) {
          goto LABEL_28;
        }
      }
      uint64_t result = v31;
LABEL_28:
      v17[result] = v19;
      v8[v18] = v20;
LABEL_29:
      ++v18;
    }
    while (v18 != v6);
    if ((int)v5 < 2) {
      goto LABEL_41;
    }
LABEL_31:
    uint64_t v33 = v5;
    float v34 = *(float *)(v7 + 4 * v17[v5--]);
    int v35 = *v8;
    uint64_t v36 = 3;
    unint64_t v37 = 2;
    uint64_t v38 = 1;
    while (1)
    {
      uint64_t v39 = v17[v37];
      float v40 = *(float *)(v7 + 4 * v39);
      if (v36 == v33 + 1 || (float v41 = *(float *)(v7 + 4 * v17[v36]), v40 > v41))
      {
        if (v34 > v40) {
          goto LABEL_39;
        }
      }
      else
      {
        LODWORD(v39) = v17[v36];
        unint64_t v37 = v36;
        if (v34 > v41)
        {
LABEL_39:
          uint64_t result = v38;
LABEL_40:
          v17[result] = v17[v33];
          v8[v5] = v35;
          if (v33 <= 2)
          {
LABEL_41:
            *(_DWORD *)(v2 + 40) = a2;
            return result;
          }
          goto LABEL_31;
        }
      }
      v17[v38] = v39;
      uint64_t result = v37;
      v37 *= 2;
      uint64_t v36 = (2 * result) | 1;
      uint64_t v38 = result;
      if (v37 > v33) {
        goto LABEL_40;
      }
    }
  }
  long long v42 = *(int **)(result + 24);
  uint64_t v43 = (int *)(*(void *)(result + 16) + 4 * *(int *)(result + 40));
  unint64_t v44 = 126 - 2 * __clz(v42 - v43);
  uint64_t v46 = *(void *)v2;
  if (v42 == v43) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v44;
  }
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(v2 + 8);
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgSort<float> &,int *,false>(int *result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    float v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if (*(float *)(*a3 + 4 * v44) < *(float *)(*a3 + 4 * v45))
                {
                  *float v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                uint64_t v46 = v12 + 2;
                int v47 = v12 + 3;
                uint64_t v48 = *(a2 - 1);
                uint64_t v49 = v12[3];
                uint64_t v50 = *a3;
                if (*(float *)(*a3 + 4 * v48) < *(float *)(*a3 + 4 * v49))
                {
                  int *v47 = v48;
                  *(a2 - 1) = v49;
                  uint64_t v51 = *v47;
                  uint64_t v52 = *v46;
                  float v53 = *(float *)(v50 + 4 * v51);
                  if (v53 < *(float *)(v50 + 4 * v52))
                  {
                    int *v46 = v51;
                    int *v47 = v52;
                    uint64_t v54 = v12[1];
                    if (v53 < *(float *)(v50 + 4 * v54))
                    {
                      v12[1] = v51;
                      void v12[2] = v54;
                      uint64_t v55 = *v12;
                      if (v53 < *(float *)(v50 + 4 * v55))
                      {
                        *float v12 = v51;
                        v12[1] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                unsigned int v56 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = *a3;
                  int v59 = v12;
                  do
                  {
                    uint64_t v61 = *v59;
                    uint64_t v60 = v59[1];
                    int v59 = v56;
                    float v62 = *(float *)(v58 + 4 * v60);
                    if (v62 < *(float *)(v58 + 4 * v61))
                    {
                      uint64_t v63 = v57;
                      while (1)
                      {
                        *(int *)((char *)v12 + v63 + 4) = v61;
                        if (!v63) {
                          break;
                        }
                        uint64_t v61 = *(int *)((char *)v12 + v63 - 4);
                        v63 -= 4;
                        if (v62 >= *(float *)(v58 + 4 * v61))
                        {
                          uint64_t v64 = (int *)((char *)v12 + v63 + 4);
                          goto LABEL_80;
                        }
                      }
                      uint64_t v64 = v12;
LABEL_80:
                      *uint64_t v64 = v60;
                    }
                    unsigned int v56 = v59 + 1;
                    v57 += 4;
                  }
                  while (v59 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              size_t v93 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v94 = *a3;
                do
                {
                  uint64_t v96 = *v11;
                  uint64_t v95 = v11[1];
                  uint64_t v11 = v93;
                  float v97 = *(float *)(v94 + 4 * v95);
                  if (v97 < *(float *)(v94 + 4 * v96))
                  {
                    do
                    {
                      *size_t v93 = v96;
                      uint64_t v96 = *(v93 - 2);
                      --v93;
                    }
                    while (v97 < *(float *)(v94 + 4 * v96));
                    *size_t v93 = v95;
                  }
                  size_t v93 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v65 = (v14 - 2) >> 1;
              uint64_t v66 = *a3;
              int64_t v67 = v65;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  int v70 = &v12[v69];
                  if (2 * v68 + 2 < (uint64_t)v14 && *(float *)(v66 + 4 * *v70) < *(float *)(v66 + 4 * v70[1]))
                  {
                    ++v70;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  size_t v71 = &v12[v68];
                  uint64_t result = (int *)*v70;
                  uint64_t v72 = *v71;
                  float v73 = *(float *)(v66 + 4 * v72);
                  if (*(float *)(v66 + 4 * (void)result) >= v73)
                  {
                    do
                    {
                      uint64_t v74 = v70;
                      int *v71 = (int)result;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v75 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      int v70 = &v12[v69];
                      uint64_t v76 = v75 + 2;
                      if (v76 < (uint64_t)v14 && *(float *)(v66 + 4 * *v70) < *(float *)(v66 + 4 * v70[1]))
                      {
                        ++v70;
                        uint64_t v69 = v76;
                      }
                      uint64_t result = (int *)*v70;
                      size_t v71 = v74;
                    }
                    while (*(float *)(v66 + 4 * (void)result) >= v73);
                    *uint64_t v74 = v72;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v77 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v78 = 0;
                int v79 = *v12;
                uint64_t v80 = *a3;
                int v81 = v12;
                do
                {
                  size_t v82 = v81;
                  v81 += v78 + 1;
                  uint64_t v83 = 2 * v78;
                  uint64_t v78 = (2 * v78) | 1;
                  uint64_t v84 = v83 + 2;
                  if (v84 < v77)
                  {
                    uint64_t result = (int *)*v81;
                    if (*(float *)(v80 + 4 * (void)result) < *(float *)(v80 + 4 * v81[1]))
                    {
                      ++v81;
                      uint64_t v78 = v84;
                    }
                  }
                  *size_t v82 = *v81;
                }
                while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                if (v81 == --a2)
                {
                  *int v81 = v79;
                }
                else
                {
                  *int v81 = *a2;
                  *a2 = v79;
                  uint64_t v85 = (char *)v81 - (char *)v12 + 4;
                  if (v85 >= 5)
                  {
                    unint64_t v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
                    uint64_t v87 = &v12[v86];
                    uint64_t v88 = *v87;
                    uint64_t v89 = *v81;
                    float v90 = *(float *)(v80 + 4 * v89);
                    if (*(float *)(v80 + 4 * v88) < v90)
                    {
                      do
                      {
                        int v91 = v87;
                        *int v81 = v88;
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        uint64_t v87 = &v12[v86];
                        uint64_t v88 = *v87;
                        int v81 = v91;
                      }
                      while (*(float *)(v80 + 4 * v88) < v90);
                      *int v91 = v89;
                    }
                  }
                }
              }
              while (v77-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          BOOL v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            int v17 = *v11;
            *uint64_t v11 = *v16;
            *BOOL v16 = v17;
          }
          else
          {
          }
          --a4;
          int v18 = *v11;
          uint64_t v19 = *a3;
          if (a5) {
            break;
          }
          float v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v11 - 1)) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(float *)(v19 + 4 * *(a2 - 1)))
          {
            uint64_t v36 = v11 + 1;
            do
            {
              float v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v20 >= *(float *)(v19 + 4 * *v12));
          }
          else
          {
            float v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v20 >= *(float *)(v19 + 4 * v35));
          }
          unint64_t v37 = a2;
          if (v12 < a2)
          {
            unint64_t v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v20 < *(float *)(v19 + 4 * v38));
          }
          if (v12 < v37)
          {
            int v39 = *v12;
            int v40 = *v37;
            do
            {
              *float v12 = v40;
              *unint64_t v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                int v39 = v41;
              }
              while (v20 >= *(float *)(v19 + 4 * v41));
              do
              {
                uint64_t v42 = *--v37;
                int v40 = v42;
              }
              while (v20 < *(float *)(v19 + 4 * v42));
            }
            while (v12 < v37);
          }
          uint64_t v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v43;
          }
          a5 = 0;
          *uint64_t v43 = v18;
        }
        float v20 = *(float *)(v19 + 4 * v18);
LABEL_13:
        uint64_t v21 = 0;
        do
          uint64_t v22 = v11[++v21];
        while (*(float *)(v19 + 4 * v22) < v20);
        float v23 = &v11[v21];
        uint64_t v24 = a2;
        if (v21 == 1)
        {
          uint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *--v24;
          }
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        else
        {
          do
            uint64_t v25 = *--v24;
          while (*(float *)(v19 + 4 * v25) >= v20);
        }
        if (v23 >= v24)
        {
          uint64_t v33 = v23 - 1;
        }
        else
        {
          int v27 = *v24;
          int v28 = v22;
          float v29 = &v11[v21];
          uint64_t v30 = v24;
          do
          {
            *float v29 = v27;
            *uint64_t v30 = v28;
            do
            {
              uint64_t v31 = v29[1];
              ++v29;
              int v28 = v31;
            }
            while (*(float *)(v19 + 4 * v31) < v20);
            do
            {
              uint64_t v32 = *--v30;
              int v27 = v32;
            }
            while (*(float *)(v19 + 4 * v32) >= v20);
          }
          while (v29 < v30);
          uint64_t v33 = v29 - 1;
        }
        if (v33 != v11) {
          *uint64_t v11 = *v33;
        }
        *uint64_t v33 = v18;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        a5 = 0;
        float v12 = v33 + 1;
      }
      float v12 = v33 + 1;
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgSort<float> &,int *>(int *result, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *a4;
  float v7 = *(float *)(*a4 + 4 * v4);
  float v8 = *(float *)(*a4 + 4 * v5);
  uint64_t v9 = *a3;
  float v10 = *(float *)(*a4 + 4 * v9);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *a2;
      uint64_t v12 = *result;
      if (*(float *)(v6 + 4 * v11) < *(float *)(v6 + 4 * v12))
      {
        *uint64_t result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *uint64_t result = v4;
      *a2 = v5;
      uint64_t v13 = *a3;
      if (*(float *)(v6 + 4 * v13) >= v8) {
        return result;
      }
      *a2 = v13;
    }
    else
    {
      *uint64_t result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgSort<float> &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = *a3;
      if (*(float *)(*a3 + 4 * v23) < *(float *)(*a3 + 4 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          int *v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          float v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v20 = a1;
LABEL_13:
      *float v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,faiss::anonymous namespace'::ArgSort<float> &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::IndexIDMapTemplate(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(void *)(result + 28) = 1;
  *(void *)BOOL result = &unk_1F383F280;
  *(void *)(result + 40) = a2;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  if (*(void *)(a2 + 16))
  {
    memset(&v6, 0, sizeof(v6));
    int v2 = snprintf(0, 0, "Error: '%s' failed: index must be empty on input", "index->ntotal == 0");
    std::string::resize(&v6, v2 + 1, 0);
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = &v6;
    }
    else {
      int v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
    }
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v6.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v3, size, "Error: '%s' failed: index must be empty on input", "index->ntotal == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v6, "faiss::IndexIDMapTemplate<faiss::Index>::IndexIDMapTemplate(IndexT *) [IndexT = faiss::Index]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 33);
  }
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void sub_1DD036610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, faiss::Index *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *a10;
  if (*a10)
  {
    *((void *)a11 + 8) = v19;
    operator delete(v19);
  }
  faiss::Index::~Index(a11);
  _Unwind_Resume(a1);
}

void faiss::IndexIDMapTemplate<faiss::Index>::add_with_ids(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
  if (a2 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void **)(a1 + 56);
    uint64_t v9 = (void *)(a1 + 72);
    float v10 = *(char **)(a1 + 64);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v12 = (char *)*v8;
        uint64_t v13 = (v10 - (unsigned char *)*v8) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 72, v16);
          uint64_t v12 = *(char **)(a1 + 56);
          float v10 = *(char **)(a1 + 64);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[8 * v13];
        *(void *)uint64_t v18 = *(void *)(a4 + 8 * v7);
        uint64_t v11 = v18 + 8;
        while (v10 != v12)
        {
          uint64_t v19 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v18 - 1) = v19;
          v18 -= 8;
        }
        *(void *)(a1 + 56) = v18;
        *(void *)(a1 + 64) = v11;
        *(void *)(a1 + 72) = &v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(void *)float v10 = *(void *)(a4 + 8 * v7);
        uint64_t v11 = v10 + 8;
      }
      *(void *)(a1 + 64) = v11;
      ++v7;
      float v10 = v11;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 16) = *(void *)(*(void *)(a1 + 40) + 16);
}

void faiss::IndexIDMapTemplate<faiss::Index>::add()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "add does not make sense with IndexIDMap, use add_with_ids");
  faiss::FaissException::FaissException(exception, v1, "virtual void faiss::IndexIDMapTemplate<faiss::Index>::add(idx_t, const typename IndexT::component_t *) [IndexT = faiss::Index]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 46);
}

void sub_1DD036838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::search(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
  uint64_t v11 = a4 * a2;
  if (a4 * a2 >= 1)
  {
    do
    {
      uint64_t v12 = *a6;
      if ((*a6 & 0x8000000000000000) == 0) {
        uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
      }
      *a6++ = v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::train(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(*(void *)(a1 + 40) + 25);
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::reset(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40));
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::remove_ids(uint64_t a1, uint64_t (***a2)(void, void))
{
  uint64_t v4 = (void *)(a1 + 56);
  v9[0] = &unk_1F383EA40;
  v9[1] = a1 + 56;
  v9[2] = a2;
  uint64_t v5 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40), v9);
  if (*(uint64_t *)(a1 + 16) < 1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (((**a2)(a2, *(void *)(*v4 + 8 * v6)) & 1) == 0) {
        *(void *)(*v4 + 8 * v7++) = *(void *)(*v4 + 8 * v6);
      }
      ++v6;
    }
    while (v6 < *(void *)(a1 + 16));
  }
  if (v7 != *(void *)(*(void *)(a1 + 40) + 16)) {
    faiss::IndexIDMapTemplate<faiss::Index>::remove_ids();
  }
  *(void *)(a1 + 16) = v7;
  std::vector<long long>::resize((uint64_t)v4, v7);
  return v5;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::range_search(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
  uint64_t v7 = *(void *)(a4[2] + 8 * a4[1]);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)a4[3];
    do
    {
      uint64_t v9 = *v8;
      if ((*v8 & 0x8000000000000000) == 0) {
        uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
      }
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

void faiss::IndexIDMapTemplate<faiss::Index>::~IndexIDMapTemplate(faiss::Index *this)
{
  *(void *)this = &unk_1F383F280;
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = *((void *)this + 5);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  int v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  faiss::Index::~Index(this);
}

void faiss::IndexIDMapTemplate<faiss::Index>::~IndexIDMapTemplate()
{
}

{
  while (1)
    ;
}

uint64_t faiss::IndexIDMapTemplate<faiss::Index>::IndexIDMapTemplate(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(void *)(result + 28) = 1;
  *(void *)uint64_t result = &unk_1F383F280;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(void *)(result + 28) = 1;
  *(void *)uint64_t result = &unk_1F383F280;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::IndexIDMapTemplate(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 24) = 256;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 1;
  *(void *)uint64_t result = &unk_1F383F210;
  *(void *)(result + 32) = a2;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  if (*(void *)(a2 + 16))
  {
    memset(&v6, 0, sizeof(v6));
    int v2 = snprintf(0, 0, "Error: '%s' failed: index must be empty on input", "index->ntotal == 0");
    std::string::resize(&v6, v2 + 1, 0);
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = &v6;
    }
    else {
      int v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
    }
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v6.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v3, size, "Error: '%s' failed: index must be empty on input", "index->ntotal == 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v6, "faiss::IndexIDMapTemplate<faiss::IndexBinary>::IndexIDMapTemplate(IndexT *) [IndexT = faiss::IndexBinary]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 33);
  }
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void sub_1DD036DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, faiss::IndexBinary *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *a10;
  if (*a10)
  {
    *((void *)a11 + 7) = v19;
    operator delete(v19);
  }
  faiss::IndexBinary::~IndexBinary(a11);
  _Unwind_Resume(a1);
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::add_with_ids(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (a2 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void **)(a1 + 48);
    uint64_t v9 = (void *)(a1 + 64);
    float v10 = *(char **)(a1 + 56);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v12 = (char *)*v8;
        uint64_t v13 = (v10 - (unsigned char *)*v8) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a1 + 64, v16);
          uint64_t v12 = *(char **)(a1 + 48);
          float v10 = *(char **)(a1 + 56);
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[8 * v13];
        *(void *)uint64_t v18 = *(void *)(a4 + 8 * v7);
        uint64_t v11 = v18 + 8;
        while (v10 != v12)
        {
          uint64_t v19 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v18 - 1) = v19;
          v18 -= 8;
        }
        *(void *)(a1 + 48) = v18;
        *(void *)(a1 + 56) = v11;
        *(void *)(a1 + 64) = &v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(void *)float v10 = *(void *)(a4 + 8 * v7);
        uint64_t v11 = v10 + 8;
      }
      *(void *)(a1 + 56) = v11;
      ++v7;
      float v10 = v11;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 16) = *(void *)(*(void *)(a1 + 32) + 16);
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::add()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "add does not make sense with IndexIDMap, use add_with_ids");
  faiss::FaissException::FaissException(exception, v1, "virtual void faiss::IndexIDMapTemplate<faiss::IndexBinary>::add(idx_t, const typename IndexT::component_t *) [IndexT = faiss::IndexBinary]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 46);
}

void sub_1DD03700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::search(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  uint64_t v11 = a4 * a2;
  if (a4 * a2 >= 1)
  {
    do
    {
      uint64_t v12 = *a6;
      if ((*a6 & 0x8000000000000000) == 0) {
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8 * v12);
      }
      *a6++ = v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::train(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(*(void *)(a1 + 32) + 25);
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::reset(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::remove_ids(uint64_t a1, uint64_t (***a2)(void, void))
{
  uint64_t v4 = (void *)(a1 + 48);
  v9[0] = &unk_1F383EA40;
  v9[1] = a1 + 48;
  v9[2] = a2;
  uint64_t v5 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), v9);
  if (*(uint64_t *)(a1 + 16) < 1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (((**a2)(a2, *(void *)(*v4 + 8 * v6)) & 1) == 0) {
        *(void *)(*v4 + 8 * v7++) = *(void *)(*v4 + 8 * v6);
      }
      ++v6;
    }
    while (v6 < *(void *)(a1 + 16));
  }
  if (v7 != *(void *)(*(void *)(a1 + 32) + 16)) {
    faiss::IndexIDMapTemplate<faiss::IndexBinary>::remove_ids();
  }
  *(void *)(a1 + 16) = v7;
  std::vector<long long>::resize((uint64_t)v4, v7);
  return v5;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::range_search(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32));
  uint64_t v8 = *(void *)(a5[2] + 8 * a5[1]);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)a5[3];
    do
    {
      uint64_t v10 = *v9;
      if ((*v9 & 0x8000000000000000) == 0) {
        uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8 * v10);
      }
      *v9++ = v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::~IndexIDMapTemplate(faiss::IndexBinary *this)
{
  *(void *)this = &unk_1F383F210;
  if (*((unsigned char *)this + 40))
  {
    uint64_t v2 = *((void *)this + 4);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  int v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  faiss::IndexBinary::~IndexBinary(this);
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::~IndexIDMapTemplate()
{
}

{
  while (1)
    ;
}

uint64_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::IndexIDMapTemplate(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(_DWORD *)(result + 28) = 1;
  *(void *)uint64_t result = &unk_1F383F210;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 256;
  *(_DWORD *)(result + 28) = 1;
  *(void *)uint64_t result = &unk_1F383F210;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void faiss::IndexIDMap2Template<faiss::Index>::IndexIDMap2Template()
{
}

{
  faiss::IndexIDMapTemplate<faiss::Index>::IndexIDMapTemplate();
}

void *faiss::IndexIDMap2Template<faiss::Index>::construct_rev_map(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 10);
  uint64_t result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(a1 + 10);
  if (a1[2])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (unint64_t *)(a1[7] + v4);
      uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6);
      result[3] = v5++;
      v4 += 8;
    }
    while (v5 < a1[2]);
  }
  return result;
}

void faiss::IndexIDMap2Template<faiss::Index>::add_with_ids()
{
}

void faiss::IndexIDMap2Template<faiss::Index>::remove_ids()
{
}

uint64_t faiss::IndexIDMap2Template<faiss::Index>::reconstruct(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 80), &v7);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 80))(v4, v5[3], a3);
}

void sub_1DD0376CC(uint64_t a1, uint64_t a2, std::string *a3)
{
}

void sub_1DD037798(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DD0377C0);
}

void faiss::IndexIDMap2Template<faiss::Index>::~IndexIDMap2Template(void *a1)
{
  *a1 = &unk_1F383F4B8;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 10));
  faiss::IndexIDMapTemplate<faiss::Index>::~IndexIDMapTemplate();
}

{
  uint64_t vars8;

  *a1 = &unk_1F383F4B8;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 10));
  faiss::IndexIDMapTemplate<faiss::Index>::~IndexIDMapTemplate();
}

{
  *a1 = &unk_1F383F4B8;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 10));
  faiss::IndexIDMapTemplate<faiss::Index>::~IndexIDMapTemplate();
}

double faiss::IndexIDMap2Template<faiss::Index>::IndexIDMap2Template(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(void *)(a1 + 28) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F383F4B8;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(void *)(a1 + 28) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F383F4B8;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  return result;
}

void faiss::IndexIDMap2Template<faiss::IndexBinary>::IndexIDMap2Template()
{
}

{
  faiss::IndexIDMapTemplate<faiss::IndexBinary>::IndexIDMapTemplate();
}

void *faiss::IndexIDMap2Template<faiss::IndexBinary>::construct_rev_map(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 9);
  double result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(a1 + 9);
  if (a1[2])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (unint64_t *)(a1[6] + v4);
      double result = std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6);
      result[3] = v5++;
      v4 += 8;
    }
    while (v5 < a1[2]);
  }
  return result;
}

void faiss::IndexIDMap2Template<faiss::IndexBinary>::add_with_ids()
{
}

void faiss::IndexIDMap2Template<faiss::IndexBinary>::remove_ids()
{
}

uint64_t faiss::IndexIDMap2Template<faiss::IndexBinary>::reconstruct(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 72), &v7);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 72))(v4, v5[3], a3);
}

void sub_1DD037BF4(uint64_t a1, uint64_t a2, std::string *a3)
{
}

void sub_1DD037CC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DD037CE8);
}

void faiss::IndexIDMap2Template<faiss::IndexBinary>::~IndexIDMap2Template(void *a1)
{
  *a1 = &unk_1F383F448;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 9));
  faiss::IndexIDMapTemplate<faiss::IndexBinary>::~IndexIDMapTemplate();
}

{
  uint64_t vars8;

  *a1 = &unk_1F383F448;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 9));
  faiss::IndexIDMapTemplate<faiss::IndexBinary>::~IndexIDMapTemplate();
}

{
  *a1 = &unk_1F383F448;
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(a1 + 9));
  faiss::IndexIDMapTemplate<faiss::IndexBinary>::~IndexIDMapTemplate();
}

double faiss::IndexIDMap2Template<faiss::IndexBinary>::IndexIDMap2Template(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F383F448;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return result;
}

{
  double result;

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F383F448;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return result;
}

double faiss::IndexSplitVectors::IndexSplitVectors(faiss::IndexSplitVectors *this, int a2, char a3)
{
  *((_DWORD *)this + 2) = a2;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *(void *)this = &unk_1F383F078;
  *((unsigned char *)this + 36) = 0;
  *((unsigned char *)this + 37) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *(void *)this = &unk_1F383F078;
  *((unsigned char *)this + 36) = 0;
  *((unsigned char *)this + 37) = a3;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

uint64_t faiss::IndexSplitVectors::add_sub_index(faiss::IndexSplitVectors *this, faiss::Index *a2)
{
  unint64_t v6 = *((void *)this + 7);
  uint64_t v4 = (char *)this + 56;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)int v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 5);
    uint64_t v18 = (char *)*((void *)this + 6);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    *((void *)this + 5) = v16;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 6) = v8;
  return faiss::IndexSplitVectors::sync_with_sub_indexes((uint64_t)this);
}

uint64_t faiss::IndexSplitVectors::sync_with_sub_indexes(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 40);
  uint64_t v2 = *(uint64_t **)(this + 48);
  if (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = *(int *)(*v1 + 8);
    *(void *)(this + 64) = v4;
    int v5 = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(this + 28) = v5;
    *(unsigned char *)(this + 25) = *(unsigned char *)(v3 + 25);
    uint64_t v6 = *(void *)(v3 + 16);
    *(void *)(this + 16) = v6;
    uint64_t v7 = (char *)v2 - (char *)v1;
    if ((unint64_t)v7 >= 9)
    {
      unint64_t v8 = v7 >> 3;
      if (v8 <= 2) {
        unint64_t v8 = 2;
      }
      uint64_t v9 = v1 + 1;
      unint64_t v10 = v8 - 1;
      do
      {
        uint64_t v11 = *v9;
        if (v5 != *(_DWORD *)(*v9 + 28))
        {
          memset(&v20, 0, sizeof(v20));
          int v16 = snprintf(0, 0, "Error: '%s' failed", "metric_type == index->metric_type");
          std::string::resize(&v20, v16 + 1, 0);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v20;
          }
          else {
            uint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v20.__r_.__value_.__l.__size_;
          }
          snprintf((char *)v17, size, "Error: '%s' failed", "metric_type == index->metric_type");
          exceptioint n = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(exception, &v20, "void faiss::IndexSplitVectors::sync_with_sub_indexes()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 223);
        }
        if (v6 != *(void *)(v11 + 16))
        {
          memset(&v20, 0, sizeof(v20));
          int v12 = snprintf(0, 0, "Error: '%s' failed", "ntotal == index->ntotal");
          std::string::resize(&v20, v12 + 1, 0);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v13 = &v20;
          }
          else {
            uint64_t v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v14 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v14 = v20.__r_.__value_.__l.__size_;
          }
          snprintf((char *)v13, v14, "Error: '%s' failed", "ntotal == index->ntotal");
          uint64_t v15 = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(v15, &v20, "void faiss::IndexSplitVectors::sync_with_sub_indexes()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 224);
        }
        v4 += *(int *)(v11 + 8);
        *(void *)(this + 64) = v4;
        ++v9;
        --v10;
      }
      while (v10);
    }
  }
  return this;
}

void sub_1DD038250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexSplitVectors::add(faiss::IndexSplitVectors *this, uint64_t a2, const float *a3)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "not implemented");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::IndexSplitVectors::add(idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 230);
}

void sub_1DD038304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexSplitVectors::search(faiss::IndexSplitVectors *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a4 == 1)
  {
    if (*((void *)this + 8) == *((_DWORD *)this + 2)) {
      operator new[]();
    }
    memset(&v14, 0, sizeof(v14));
    int v10 = snprintf(0, 0, "Error: '%s' failed: not enough indexes compared to # dimensions", "sum_d == d");
    std::string::resize(&v14, v10 + 1, 0);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v14;
    }
    else {
      uint64_t v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v14.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v11, size, "Error: '%s' failed: not enough indexes compared to # dimensions", "sum_d == d");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v14, "virtual void faiss::IndexSplitVectors::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 241);
  }
  memset(&v14, 0, sizeof(v14));
  int v6 = snprintf(0, 0, "Error: '%s' failed: search implemented only for k=1", "k == 1");
  std::string::resize(&v14, v6 + 1, 0);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v14;
  }
  else {
    uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v8 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v8 = v14.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v7, v8, "Error: '%s' failed: search implemented only for k=1", "k == 1");
  uint64_t v9 = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(v9, &v14, "virtual void faiss::IndexSplitVectors::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 239);
}

void sub_1DD0389FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  __cxa_free_exception(v36);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)const::$_0::operator()(void *a1, int a2)
{
  uint64_t v3 = a1[7];
  if (*(unsigned char *)(v3 + 24)) {
    printf("begin query shard %d on %lld points\n", a2, *a1);
  }
  uint64_t v4 = *(uint64_t **)(v3 + 40);
  uint64_t v5 = 0;
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v4++;
      v5 += *(int *)(v7 + 8);
      --v6;
    }
    while (v6);
  }
  operator new[]();
}

void sub_1DD038D04(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void faiss::IndexSplitVectors::train(faiss::IndexSplitVectors *this, uint64_t a2, const float *a3)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "not implemented");
  faiss::FaissException::FaissException(exception, v4, "virtual void faiss::IndexSplitVectors::train(idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 316);
}

void sub_1DD038DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexSplitVectors::reset(faiss::IndexSplitVectors *this)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "not implemented");
  faiss::FaissException::FaissException(exception, v2, "virtual void faiss::IndexSplitVectors::reset()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 320);
}

void sub_1DD038E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void faiss::IndexSplitVectors::~IndexSplitVectors(faiss::IndexSplitVectors *this)
{
  *(void *)this = &unk_1F383F078;
  if (!*((unsigned char *)this + 36))
  {
    uint64_t v2 = (void *)*((void *)this + 5);
    goto LABEL_9;
  }
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = (unsigned char *)*((void *)this + 6);
  if (v3 != (unsigned char *)v2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v2[v4];
      if (v5)
      {
        (*(void (**)(void))(*(void *)v5 + 8))(v2[v4]);
        uint64_t v2 = (void *)*((void *)this + 5);
        uint64_t v3 = (unsigned char *)*((void *)this + 6);
      }
      ++v4;
    }
    while (v4 < (v3 - (unsigned char *)v2) >> 3);
LABEL_9:
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v3)
  {
LABEL_10:
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
LABEL_11:
  faiss::Index::~Index(this);
}

{
  uint64_t vars8;

  faiss::IndexSplitVectors::~IndexSplitVectors(this);
  JUMPOUT(0x1E01AF670);
}

uint64_t faiss::anonymous namespace'::IDTranslatedSelector::is_member(faiss::_anonymous_namespace_::IDTranslatedSelector *this, uint64_t a2)
{
  return (***((uint64_t (****)(void, void))this + 2))(*((void *)this + 2), *(void *)(**((void **)this + 1) + 8 * a2));
}

void faiss::anonymous namespace'::IDTranslatedSelector::~IDTranslatedSelector(faiss::_anonymous_namespace_::IDTranslatedSelector *this)
{
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    void v1[3] = 0;
  }
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6CB16A8, MEMORY[0x1E4FBA1D0]);
}

void sub_1DD039098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<std::unique_ptr<faiss::WorkerThread>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (faiss::WorkerThread **)**a1;
  if (v2)
  {
    unint64_t v4 = (faiss::WorkerThread **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<faiss::WorkerThread>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

faiss::WorkerThread *std::unique_ptr<faiss::WorkerThread>::reset[abi:ne180100](faiss::WorkerThread **a1, faiss::WorkerThread *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    faiss::WorkerThread::~WorkerThread(result);
    JUMPOUT(0x1E01AF670);
  }
  return result;
}

void std::vector<std::future<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::future<BOOL>>::__base_destruct_at_end[abi:ne180100]((atomic_ullong *)v2, (atomic_ullong)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_ullong *std::vector<std::future<BOOL>>::__base_destruct_at_end[abi:ne180100](atomic_ullong *result, atomic_ullong a2)
{
  uint64_t v3 = result;
  for (atomic_ullong i = result[1]; i != a2; i -= 8)
  {
    uint64_t v5 = *(atomic_ullong **)(i - 8);
    double result = v5;
    if (v5 && !atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      double result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
    }
  }
  v3[1] = a2;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<faiss::WorkerThread>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<faiss::WorkerThread>::reset[abi:ne180100]((faiss::WorkerThread **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_1F383FEF0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F383FEF0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1,std::allocator<faiss::IndexSplitVectors::search(long long,float const*,long long,float *,long long *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::vector<std::future<BOOL>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>,std::reverse_iterator<std::future<BOOL>*>,std::reverse_iterator<std::future<BOOL>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>,std::reverse_iterator<std::future<BOOL>*>,std::reverse_iterator<std::future<BOOL>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *--a3;
      *(void *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>>::operator()[abi:ne180100]((atomic_ullong *)a1);
  }
  return a1;
}

atomic_ullong *std::_AllocatorDestroyRangeReverse<std::allocator<std::future<BOOL>>,std::reverse_iterator<std::future<BOOL>*>>::operator()[abi:ne180100](atomic_ullong *result)
{
  uint64_t v1 = *(atomic_ullong ***)(result[2] + 8);
  for (uint64_t i = *(atomic_ullong ***)(result[1] + 8); v1 != i; ++v1)
  {
    uint64_t result = *v1;
    if (*v1)
    {
      if (!atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
        uint64_t result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
      }
    }
  }
  return result;
}

atomic_ullong *std::__split_buffer<std::future<BOOL>>::~__split_buffer(atomic_ullong *a1)
{
  if (*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

atomic_ullong *std::__split_buffer<std::future<BOOL>>::__destruct_at_end[abi:ne180100](atomic_ullong *result, uint64_t a2)
{
  atomic_ullong v2 = result[2];
  if (v2 != a2)
  {
    long long v4 = result;
    do
    {
      uint64_t result = *(atomic_ullong **)(v2 - 8);
      v4[2] = v2 - 8;
      if (result)
      {
        if (!atomic_fetch_add(result + 1, 0xFFFFFFFFFFFFFFFFLL)) {
          uint64_t result = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*result + 16))(result);
        }
      }
      atomic_ullong v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void faiss::IndexIDMapTemplate<faiss::Index>::remove_ids()
{
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Faiss assertion '%s' failed in %s at %s:%d\n", "j == index->ntotal", "virtual size_t faiss::IndexIDMapTemplate<faiss::Index>::remove_ids(const IDSelector &) [IndexT = faiss::Index]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 135);
  abort();
}

{
  while (1)
    ;
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::remove_ids()
{
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Faiss assertion '%s' failed in %s at %s:%d\n", "j == index->ntotal", "virtual size_t faiss::IndexIDMapTemplate<faiss::IndexBinary>::remove_ids(const IDSelector &) [IndexT = faiss::IndexBinary]", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/MetaIndexes.cpp", 135);
  abort();
}

{
  while (1)
    ;
}

double faiss::DirectMap::DirectMap(faiss::DirectMap *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  return result;
}

void faiss::DirectMap::set_type(uint64_t a1, unsigned int a2, void *a3, unint64_t a4)
{
  if (a2 >= 3)
  {
    memset(&v27, 0, sizeof(v27));
    int v20 = snprintf(0, 0, "Error: '%s' failed", "new_type == NoMap || new_type == Array || new_type == Hashtable");
    std::string::resize(&v27, v20 + 1, 0);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v27;
    }
    else {
      uint64_t v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v27.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v21, size, "Error: '%s' failed", "new_type == NoMap || new_type == Array || new_type == Hashtable");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v27, "void faiss::DirectMap::set_type(Type, const InvertedLists *, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 27);
  }
  unsigned int v4 = a2;
  if (*(_DWORD *)a1 != a2)
  {
    uint64_t v8 = (void *)(a1 + 8);
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    uint64_t v9 = a1 + 32;
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear((void *)(a1 + 32));
    *(_DWORD *)a1 = v4;
    if (v4)
    {
      if (v4 == 1)
      {
        v27.__r_.__value_.__r.__words[0] = -1;
        std::vector<long long>::resize(a1 + 8, a4, &v27);
      }
      else
      {
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__rehash<true>(a1 + 32, vcvtps_u32_f32((float)a4 / *(float *)(a1 + 64)));
      }
      if (a3[1])
      {
        std::string::size_type v10 = 0;
        unsigned int v24 = v4;
        do
        {
          uint64_t v11 = (*(uint64_t (**)(void *, std::string::size_type))*a3)(a3, v10);
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
          std::string::size_type v12 = (*(uint64_t (**)(void *, std::string::size_type))(*a3 + 16))(a3, v10);
          v27.__r_.__value_.__l.__size_ = v12;
          v27.__r_.__value_.__r.__words[2] = v10;
          if (v4 == 1)
          {
            if (v11)
            {
              for (uint64_t i = 0; i != v11; ++i)
              {
                unint64_t v14 = *(void *)(v12 + 8 * i);
                if ((v14 & 0x8000000000000000) != 0 || v14 >= a4)
                {
                  memset(&v26, 0, sizeof(v26));
                  int v16 = snprintf(0, 0, "Error: '%s' failed: direct map supported only for seuquential ids", "0 <= idlist[ofs] && idlist[ofs] < ntotal");
                  std::string::resize(&v26, v16 + 1, 0);
                  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v17 = &v26;
                  }
                  else {
                    uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
                  }
                  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t v18 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    size_t v18 = v26.__r_.__value_.__l.__size_;
                  }
                  snprintf((char *)v17, v18, "Error: '%s' failed: direct map supported only for seuquential ids", "0 <= idlist[ofs] && idlist[ofs] < ntotal");
                  uint64_t v19 = __cxa_allocate_exception(0x20uLL);
                  faiss::FaissException::FaissException(v19, &v26, "void faiss::DirectMap::set_type(Type, const InvertedLists *, size_t)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 54);
                }
                *(void *)(*v8 + 8 * v14) = i | (v10 << 32);
              }
            }
          }
          else if (v11)
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              unint64_t v25 = *(void *)(v27.__r_.__value_.__l.__size_ + 8 * j);
              v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
              std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9, &v25, (uint64_t)&std::piecewise_construct, &v26)[3] = j | (v10 << 32);
            }
          }
          faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v27);
          ++v10;
          unsigned int v4 = v24;
        }
        while (v10 < a3[1]);
      }
    }
  }
}

void sub_1DD039AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long long>::__append((void **)a1, a2 - v3, a3);
  }
}

void *faiss::DirectMap::clear(faiss::DirectMap *this)
{
  *((void *)this + 2) = *((void *)this + 1);
  return std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear((void *)this + 4);
}

uint64_t faiss::DirectMap::get(faiss::DirectMap *this, unint64_t a2)
{
  unint64_t v19 = a2;
  if (*(_DWORD *)this == 2)
  {
    uint64_t v8 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)this + 4, &v19);
    if (!v8)
    {
      memset(&v18, 0, sizeof(v18));
      int v14 = snprintf(0, 0, "Error: '%s' failed: key not found", "res != hashtable.end()");
      std::string::resize(&v18, v14 + 1, 0);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v15 = &v18;
      }
      else {
        long long v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v18.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v15, size, "Error: '%s' failed: key not found", "res != hashtable.end()");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v18, "DirectMap::idx_t faiss::DirectMap::get(idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 78);
    }
    return v8[3];
  }
  else
  {
    if (*(_DWORD *)this != 1)
    {
      char v13 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "direct map not initialized");
      faiss::FaissException::FaissException(v13, &v18, "DirectMap::idx_t faiss::DirectMap::get(idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 81);
    }
    if ((a2 & 0x8000000000000000) != 0 || (uint64_t v2 = *((void *)this + 1), a2 >= (*((void *)this + 2) - v2) >> 3))
    {
      memset(&v18, 0, sizeof(v18));
      int v9 = snprintf(0, 0, "Error: '%s' failed: invalid key", "key >= 0 && key < array.size()");
      std::string::resize(&v18, v9 + 1, 0);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v18;
      }
      else {
        std::string::size_type v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v11 = v18.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v10, v11, "Error: '%s' failed: invalid key", "key >= 0 && key < array.size()");
      std::string::size_type v12 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v12, &v18, "DirectMap::idx_t faiss::DirectMap::get(idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 72);
    }
    uint64_t result = *(void *)(v2 + 8 * a2);
    if (result < 0)
    {
      memset(&v18, 0, sizeof(v18));
      int v4 = snprintf(0, 0, "Error: '%s' failed: -1 entry in direct_map", "lo >= 0");
      std::string::resize(&v18, v4 + 1, 0);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v18;
      }
      else {
        uint64_t v5 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v6 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v6 = v18.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v5, v6, "Error: '%s' failed: -1 entry in direct_map", "lo >= 0");
      uint64_t v7 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v7, &v18, "DirectMap::idx_t faiss::DirectMap::get(idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 74);
    }
  }
  return result;
}

void sub_1DD039E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::DirectMap::add_single_id(faiss::DirectMap *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v26 = a2;
  int v4 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (char *)*((void *)this + 1);
      uint64_t v8 = (char *)*((void *)this + 2);
      if (a2 != (v8 - v7) >> 3) {
        faiss::DirectMap::add_single_id();
      }
      if (a3 < 0)
      {
        unint64_t v12 = *((void *)this + 3);
        if ((unint64_t)v8 < v12)
        {
          *(void *)uint64_t v8 = -1;
          size_t v11 = v8 + 8;
          goto LABEL_12;
        }
        if (!((a2 + 1) >> 61))
        {
          unint64_t v18 = v12 - (void)v7;
          unint64_t v19 = (uint64_t)(v12 - (void)v7) >> 2;
          if (v19 <= a2 + 1) {
            unint64_t v19 = a2 + 1;
          }
          if (v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 24, v20);
            uint64_t v7 = (char *)*((void *)this + 1);
            uint64_t v8 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = &v21[8 * a2];
          uint64_t v23 = &v21[8 * v20];
          *(void *)uint64_t v22 = -1;
          char v13 = v22 + 8;
          while (v8 != v7)
          {
            uint64_t v25 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v22 - 1) = v25;
            v22 -= 8;
          }
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v9 = a4 | (a3 << 32);
        unint64_t v10 = *((void *)this + 3);
        if ((unint64_t)v8 < v10)
        {
          *(void *)uint64_t v8 = v9;
          size_t v11 = v8 + 8;
LABEL_12:
          char v13 = v11;
LABEL_39:
          *((void *)this + 2) = v13;
          return;
        }
        if (!((a2 + 1) >> 61))
        {
          unint64_t v14 = v10 - (void)v7;
          unint64_t v15 = (uint64_t)(v10 - (void)v7) >> 2;
          if (v15 <= a2 + 1) {
            unint64_t v15 = a2 + 1;
          }
          if (v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>((uint64_t)this + 24, v16);
            uint64_t v7 = (char *)*((void *)this + 1);
            uint64_t v8 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v22 = &v17[8 * a2];
          uint64_t v23 = &v17[8 * v16];
          *(void *)uint64_t v22 = v9;
          char v13 = v22 + 8;
          while (v8 != v7)
          {
            uint64_t v24 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v22 - 1) = v24;
            v22 -= 8;
          }
LABEL_37:
          *((void *)this + 1) = v22;
          *((void *)this + 2) = v13;
          *((void *)this + 3) = v23;
          if (v7) {
            operator delete(v7);
          }
          goto LABEL_39;
        }
      }
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    if ((a3 & 0x8000000000000000) == 0 && v4 == 2)
    {
      std::string v27 = &v26;
      std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 32, &v26, (uint64_t)&std::piecewise_construct, &v27)[3] = a4 | (a3 << 32);
    }
  }
}

_DWORD *faiss::DirectMap::check_can_add(_DWORD *this, const uint64_t *a2)
{
  if (a2)
  {
    if (*this == 1)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v3, "cannot have array direct map and add with ids");
      faiss::FaissException::FaissException(exception, v3, "void faiss::DirectMap::check_can_add(const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 105);
    }
  }
  return this;
}

void sub_1DD03A148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

faiss::DirectMapAdd *faiss::DirectMapAdd::DirectMapAdd(faiss::DirectMapAdd *this, faiss::DirectMap *a2, unint64_t a3, const uint64_t *a4)
{
  *(void *)this = a2;
  int v5 = *(_DWORD *)a2;
  *((_DWORD *)this + 2) = *(_DWORD *)a2;
  *((void *)this + 3) = a3;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v5 == 2)
  {
    v12.__r_.__value_.__r.__words[0] = -1;
    std::vector<long long>::resize((uint64_t)this + 40, a3, &v12);
  }
  else if (v5 == 1)
  {
    if (a4)
    {
      memset(&v12, 0, sizeof(v12));
      int v8 = snprintf(0, 0, "Error: '%s' failed", "xids == nullptr");
      std::string::resize(&v12, v8 + 1, 0);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v12;
      }
      else {
        uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v12.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v9, size, "Error: '%s' failed", "xids == nullptr");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v12, "faiss::DirectMapAdd::DirectMapAdd(DirectMap &, size_t, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 114);
    }
    uint64_t v6 = (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3;
    *((void *)this + 2) = v6;
    v12.__r_.__value_.__r.__words[0] = -1;
    std::vector<long long>::resize((uint64_t)a2 + 8, a3 + v6, &v12);
  }
  return this;
}

void sub_1DD03A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v19 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 48) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::DirectMapAdd::add(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(this + 8);
  if (v4 == 2)
  {
    int v5 = (void *)(this + 40);
  }
  else
  {
    if (v4 != 1) {
      return this;
    }
    int v5 = (void *)(*(void *)this + 8);
    a2 += *(void *)(this + 16);
  }
  *(void *)(*v5 + 8 * a2) = a4 | (a3 << 32);
  return this;
}

void faiss::DirectMapAdd::~DirectMapAdd(faiss::DirectMapAdd *this)
{
  if (*((_DWORD *)this + 2) == 2 && *((void *)this + 3))
  {
    unint64_t v2 = 0;
    do
    {
      unint64_t v8 = 0;
      uint64_t v3 = *((void *)this + 4);
      if (v3) {
        unint64_t v4 = *(void *)(v3 + 8 * v2);
      }
      else {
        unint64_t v4 = v2 + *((void *)this + 2);
      }
      unint64_t v8 = v4;
      uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v2);
      uint64_t v6 = *(void *)this + 32;
      uint64_t v9 = &v8;
      std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, &v9)[3] = v5;
      ++v2;
    }
    while (*((void *)this + 3) > v2);
  }
  uint64_t v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
}

uint64_t faiss::DirectMap::remove_ids(_DWORD *a1, unsigned int (***a2)(const void *, void), void *a3)
{
  unint64_t v6 = a3[1];
  std::vector<long long>::vector(__p, v6);
  if (*a1 != 2)
  {
    if (*a1)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v36, "remove not supported with this direct_map format");
      faiss::FaissException::FaissException(exception, &v36, "size_t faiss::DirectMap::remove_ids(const IDSelector &, InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 209);
    }
    if (v6)
    {
      for (std::string::size_type i = 0; i != v6; ++i)
      {
        uint64_t v8 = (*(uint64_t (**)(void *, std::string::size_type))*a3)(a3, i);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
        v36.__r_.__value_.__l.__size_ = (*(uint64_t (**)(void *, std::string::size_type))(*a3 + 16))(a3, i);
        v36.__r_.__value_.__r.__words[2] = i;
        if (v8 < 1)
        {
          uint64_t v10 = v8;
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v10 = v8;
          do
          {
            if ((**a2)(a2, *(void *)(v36.__r_.__value_.__l.__size_ + 8 * v9)))
            {
              uint64_t v11 = (*(uint64_t (**)(void *, std::string::size_type, uint64_t))(*a3 + 40))(a3, i, --v10);
              uint64_t v33 = a3;
              uint64_t v34 = (*(uint64_t (**)(void *, std::string::size_type, uint64_t))(*a3 + 48))(a3, i, v10);
              std::string::size_type v35 = i;
              (*(void (**)(void *, std::string::size_type, uint64_t, uint64_t, uint64_t))(*a3 + 80))(a3, i, v9, v11, v34);
              faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v33);
            }
            else
            {
              ++v9;
            }
          }
          while (v9 < v10);
        }
        *((void *)__p[0] + i) = v8 - v10;
        faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v36);
      }
      uint64_t v12 = 0;
      for (uint64_t j = 0; j != v6; ++j)
      {
        uint64_t v14 = *((void *)__p[0] + j);
        if (v14 >= 1)
        {
          uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))*a3)(a3, j);
          (*(void (**)(void *, uint64_t, uint64_t))(*a3 + 96))(a3, j, v15 - *((void *)__p[0] + j));
          v12 += v14;
        }
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v12 = 0;
    goto LABEL_29;
  }
  if (!v16)
  {
    memset(&v36, 0, sizeof(v36));
    int v28 = snprintf(0, 0, "Error: '%s' failed: remove with hashtable works only with IDSelectorArray", "sela");
    std::string::resize(&v36, v28 + 1, 0);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v36;
    }
    else {
      uint64_t v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v36.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v29, size, "Error: '%s' failed: remove with hashtable works only with IDSelectorArray", "sela");
    uint64_t v31 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v31, &v36, "size_t faiss::DirectMap::remove_ids(const IDSelector &, InvertedLists *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 183);
  }
  uint64_t v17 = v16;
  if (!v16[1]) {
    goto LABEL_28;
  }
  uint64_t v12 = 0;
  unint64_t v18 = 0;
  unint64_t v19 = a1 + 8;
  do
  {
    uint64_t v33 = 0;
    uint64_t v33 = *(void **)(v17[2] + 8 * v18);
    unint64_t v20 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v19, (unint64_t *)&v33);
    uint64_t v21 = v20;
    if (v20)
    {
      unint64_t v22 = v20[3];
      uint64_t v23 = (*(uint64_t (**)(void *, unint64_t))*a3)(a3, HIDWORD(v22));
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::erase(v19, v21);
      uint64_t v24 = v23 - 1;
      if (v22 < (unint64_t)(v23 - 1))
      {
        uint64_t v32 = 0;
        uint64_t v25 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*a3 + 40))(a3, HIDWORD(v22), v23 - 1);
        uint64_t v32 = v25;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
        v36.__r_.__value_.__l.__size_ = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*a3 + 48))(a3, HIDWORD(v22), v24);
        v36.__r_.__value_.__r.__words[2] = HIDWORD(v22);
        (*(void (**)(void *, unint64_t, void, uint64_t, std::string::size_type))(*a3 + 80))(a3, HIDWORD(v22), v22, v25, v36.__r_.__value_.__l.__size_);
        faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v36);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
        std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v19, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, &v36)[3] = v22;
      }
      (*(void (**)(void *, unint64_t, uint64_t))(*a3 + 96))(a3, HIDWORD(v22), v24);
      ++v12;
    }
    ++v18;
  }
  while (v18 < v17[1]);
LABEL_29:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1DD03AA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

_DWORD *faiss::DirectMap::update_codes(_DWORD *this, faiss::InvertedLists *a2, int a3, unint64_t *a4, uint64_t *a5, const unsigned __int8 *a6)
{
  uint64_t v31 = this;
  if (*this != 1)
  {
    memset(&v32, 0, sizeof(v32));
    int v26 = snprintf(0, 0, "Error: '%s' failed", "type == Array");
    std::string::resize(&v32, v26 + 1, 0);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v27 = &v32;
    }
    else {
      std::string v27 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v32.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v27, size, "Error: '%s' failed", "type == Array");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v32, "void faiss::DirectMap::update_codes(InvertedLists *, int, const idx_t *, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 220);
  }
  if (a3)
  {
    uint64_t v30 = *((void *)a2 + 2);
    uint64_t v10 = a3;
    do
    {
      unint64_t v12 = *a4++;
      unint64_t v11 = v12;
      if ((v12 & 0x8000000000000000) != 0 || (uint64_t v13 = *((void *)v31 + 1), v11 >= (*((void *)v31 + 2) - v13) >> 3))
      {
        memset(&v32, 0, sizeof(v32));
        int v22 = snprintf(0, 0, "Error: '%s' failed: id to update out of range", "0 <= id && id < array.size()");
        std::string::resize(&v32, v22 + 1, 0);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v32;
        }
        else {
          uint64_t v23 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v24 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v24 = v32.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v23, v24, "Error: '%s' failed: id to update out of range", "0 <= id && id < array.size()");
        uint64_t v25 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v25, &v32, "void faiss::DirectMap::update_codes(InvertedLists *, int, const idx_t *, const idx_t *, const uint8_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/invlists/DirectMap.cpp", 227);
      }
      unint64_t v14 = *(void *)(v13 + 8 * v11);
      uint64_t v15 = v14;
      unint64_t v16 = HIDWORD(v14);
      uint64_t v17 = (**(uint64_t (***)(faiss::InvertedLists *, unint64_t))a2)(a2, HIDWORD(v14)) - 1;
      if (v14 != v17)
      {
        uint64_t v18 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(void *)a2 + 40))(a2, HIDWORD(v14), v17);
        *(void *)(*((void *)v31 + 1) + 8 * v18) = v14;
        uint64_t v19 = v18;
        uint64_t v20 = (*(uint64_t (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(void *)a2 + 48))(a2, v16, v17);
        (*(void (**)(faiss::InvertedLists *, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v16, v15, v19, v20);
      }
      (*(void (**)(faiss::InvertedLists *, unint64_t, uint64_t))(*(void *)a2 + 96))(a2, v16, v17);
      uint64_t v21 = *a5++;
      *(void *)(*((void *)v31 + 1) + 8 * v11) = (**(uint64_t (***)(faiss::InvertedLists *, uint64_t))a2)(a2, v21) | (v21 << 32);
      this = (_DWORD *)(*(uint64_t (**)(faiss::InvertedLists *, uint64_t, unint64_t, const unsigned __int8 *))(*(void *)a2 + 64))(a2, v21, v11, a6);
      a6 += v30;
      --v10;
    }
    while (v10);
  }
  return this;
}

void sub_1DD03AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<long long>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    int v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (std::string::size_type i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void faiss::DirectMap::add_single_id()
{
  __assert_rtn("add_single_id", "DirectMap.cpp", 90, "id == array.size()");
}

faiss::Level1Quantizer *faiss::Level1Quantizer::Level1Quantizer(faiss::Level1Quantizer *this, faiss::Index *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((_WORD *)this + 8) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::Level1Quantizer *)((char *)this + 24));
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 6) = 10;
  return this;
}

{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((_WORD *)this + 8) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::Level1Quantizer *)((char *)this + 24));
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 6) = 10;
  return this;
}

faiss::Level1Quantizer *faiss::Level1Quantizer::Level1Quantizer(faiss::Level1Quantizer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::Level1Quantizer *)((char *)this + 24));
  *((void *)this + 8) = 0;
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::Level1Quantizer *)((char *)this + 24));
  *((void *)this + 8) = 0;
  return this;
}

void faiss::Level1Quantizer::~Level1Quantizer(faiss::Level1Quantizer *this)
{
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
}

{
  uint64_t v2;

  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
}

void faiss::Level1Quantizer::train_q1(void *a1, std::vector<int>::size_type a2, const float *a3, int a4, int a5)
{
  uint64_t v10 = (faiss::Index *)*a1;
  uint64_t v11 = *((int *)v10 + 2);
  if (*((unsigned char *)v10 + 25) && *((void *)v10 + 2) == a1[1])
  {
    if (a4)
    {
      puts("IVF quantizer does not need training.");
    }
    return;
  }
  int v12 = *((unsigned __int8 *)a1 + 16);
  if (!*((unsigned char *)a1 + 16))
  {
    if (a4) {
      printf("Training level-1 quantizer on %zd vectors in %zdD\n", a2, v11);
    }
    double v20 = faiss::Clustering::Clustering((faiss::Clustering *)&v29, v11, *((_DWORD *)a1 + 2), (const faiss::ClusteringParameters *)(a1 + 3));
    (*(void (**)(double))(*(void *)*a1 + 64))(v20);
    uint64_t v21 = (faiss::Index *)a1[8];
    if (v21)
    {
      faiss::Clustering::train((faiss::Clustering *)&v29, a2, a3, v21, 0);
      (*(void (**)(void, void, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], v30);
    }
    else
    {
      faiss::Clustering::train((faiss::Clustering *)&v29, a2, a3, (faiss::Index *)*a1, 0);
    }
    *(unsigned char *)(*a1 + 25) = 1;
    goto LABEL_42;
  }
  if (v12 == 2)
  {
    if (a4)
    {
      if (a1[8]) {
        uint64_t v18 = "(user provided index)";
      }
      else {
        uint64_t v18 = "";
      }
      printf("Training L2 quantizer on %zd vectors in %zdD%s\n", a2, *((int *)v10 + 2), v18);
    }
    if (a5 != 1 && (a5 || !*((unsigned char *)a1 + 33)))
    {
      memset(&v29, 0, sizeof(v29));
      int v22 = snprintf(0, 0, "Error: '%s' failed", "metric_type == METRIC_L2 || (metric_type == METRIC_INNER_PRODUCT && cp.spherical)");
      std::string::resize(&v29, v22 + 1, 0);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v29;
      }
      else {
        uint64_t v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v29.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v23, size, "Error: '%s' failed", "metric_type == METRIC_L2 || (metric_type == METRIC_INNER_PRODUCT && cp.spherical)");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v29, "void faiss::Level1Quantizer::train_q1(size_t, const float *, BOOL, MetricType)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 104);
    }
    faiss::Clustering::Clustering((faiss::Clustering *)&v29, v11, *((_DWORD *)a1 + 2), (const faiss::ClusteringParameters *)(a1 + 3));
    uint64_t v19 = (faiss::Index *)a1[8];
    if (v19)
    {
      faiss::Clustering::train((faiss::Clustering *)&v29, a2, a3, v19, 0);
      if (!a4)
      {
LABEL_31:
        (*(void (**)(void, void, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], v30);
LABEL_42:
        faiss::Clustering::~Clustering((faiss::Clustering *)&v29);
        return;
      }
    }
    else
    {
      faiss::IndexFlat::IndexFlat((uint64_t)v26, v11, 1);
      v26[0] = &unk_1F383E438;
      faiss::Clustering::train((faiss::Clustering *)&v29, a2, a3, (faiss::Index *)v26, 0);
      v26[0] = &unk_1F383FD80;
      if (__p)
      {
        int v28 = __p;
        operator delete(__p);
      }
      faiss::Index::~Index((faiss::Index *)v26);
      if (!a4) {
        goto LABEL_31;
      }
    }
    puts("Adding centroids to quantizer");
    goto LABEL_31;
  }
  if (v12 == 1)
  {
    if (a4)
    {
      puts("IVF quantizer trains alone...");
      uint64_t v10 = (faiss::Index *)*a1;
    }
    (*(void (**)(faiss::Index *, std::vector<int>::size_type, const float *))(*(void *)v10 + 16))(v10, a2, a3);
    uint64_t v13 = (faiss::Index *)*a1;
    *((unsigned char *)v13 + 24) = a4;
    if (*((void *)v13 + 2) != a1[1])
    {
      memset(&v29, 0, sizeof(v29));
      int v14 = snprintf(0, 0, "Error: '%s' failed: nlist not consistent with quantizer size", "quantizer->ntotal == nlist");
      std::string::resize(&v29, v14 + 1, 0);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v29;
      }
      else {
        uint64_t v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v16 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v16 = v29.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v15, v16, "Error: '%s' failed: nlist not consistent with quantizer size", "quantizer->ntotal == nlist");
      uint64_t v17 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v17, &v29, "void faiss::Level1Quantizer::train_q1(size_t, const float *, BOOL, MetricType)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 79);
    }
  }
}

void sub_1DD03B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_free_exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::Level1Quantizer::coarse_code_size(faiss::Level1Quantizer *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t result = 0;
  unint64_t v3 = v1 - 1;
  if (v3)
  {
    do
    {
      ++result;
      BOOL v4 = v3 > 0xFF;
      v3 >>= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t faiss::Level1Quantizer::encode_listno(uint64_t this, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = *(void *)(this + 8) - 1;
  if (*(void *)(this + 8) != 1)
  {
    do
    {
      *a3++ = a2;
      a2 >>= 8;
      BOOL v4 = v3 > 0xFF;
      v3 >>= 8;
    }
    while (v4);
  }
  return this;
}

unint64_t faiss::Level1Quantizer::decode_listno(faiss::Level1Quantizer *this, const unsigned __int8 *a2)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = v2 - 1;
  if (v2 == 1)
  {
    unint64_t result = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t result = 0;
    do
    {
      unsigned int v6 = *a2++;
      result |= (unint64_t)v6 << v4;
      v4 += 8;
      BOOL v7 = v3 > 0xFF;
      v3 >>= 8;
    }
    while (v7);
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_8;
    }
  }
  if (result >= v2)
  {
LABEL_8:
    memset(&v12, 0, sizeof(v12));
    int v8 = snprintf(0, 0, "Error: '%s' failed", "list_no >= 0 && list_no < nlist");
    std::string::resize(&v12, v8 + 1, 0);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v12;
    }
    else {
      uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v12.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v9, size, "Error: '%s' failed", "list_no >= 0 && list_no < nlist");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v12, "Index::idx_t faiss::Level1Quantizer::decode_listno(const uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 148);
  }
  return result;
}

void sub_1DD03B8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::IndexIVF(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = &unk_1F383FAA8;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a4;
  *(_WORD *)(a1 + 56) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::ClusteringParameters *)(a1 + 64));
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 64) = 10;
  *(void *)a1 = &unk_1F383FC58;
  operator new();
}

void sub_1DD03BAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  faiss::DirectMap::~DirectMap(v16);
  if (*(unsigned char *)(v15 + 57))
  {
    uint64_t v19 = *(void *)(v15 + 40);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  faiss::Index::~Index((faiss::Index *)v15);
  _Unwind_Resume(a1);
}

void faiss::DirectMap::~DirectMap(faiss::DirectMap *this)
{
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 32);
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

faiss::IndexIVF *faiss::IndexIVF::IndexIVF(faiss::IndexIVF *this)
{
  *(void *)this = &unk_1F383FAA8;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 256;
  *(void *)((char *)this + 28) = 1;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  faiss::ClusteringParameters::ClusteringParameters((faiss::IndexIVF *)((char *)this + 64));
  *(void *)this = &unk_1F383FC58;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  *((_OWORD *)this + 8) = xmmword_1DD04EF10;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0x40000000000;
  faiss::DirectMap::DirectMap((faiss::IndexIVF *)((char *)this + 160));
  return this;
}

void sub_1DD03BC64(_Unwind_Exception *a1)
{
  if (*((unsigned char *)v1 + 57))
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
  }
  faiss::Index::~Index(v1);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVF::add(faiss::IndexIVF *this, uint64_t a2, const float *a3)
{
  return (*(uint64_t (**)(faiss::IndexIVF *, uint64_t, const float *, void))(*(void *)this + 32))(this, a2, a3, 0);
}

void faiss::IndexIVF::add_with_ids(faiss::IndexIVF *this, uint64_t a2, const float *a3, const uint64_t *a4)
{
}

void sub_1DD03BDD4(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVF::add_core(faiss::IndexIVF *this, uint64_t a2, const float *a3, const uint64_t *a4, const uint64_t *a5)
{
  unint64_t v5 = a5;
  if (a2 <= 0x10000)
  {
    if (a5)
    {
      if (*((unsigned char *)this + 25))
      {
        faiss::DirectMap::check_can_add((_DWORD *)this + 40, a4);
        uint64_t v18 = 0;
        if (a2)
        {
          uint64_t v19 = v5;
          uint64_t v20 = a2;
          do
          {
            unint64_t v21 = *v19++;
            v18 += v21 >> 63;
            --v20;
          }
          while (v20);
        }
        operator new[]();
      }
      memset(&v31, 0, sizeof(v31));
      int v26 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
      std::string::resize(&v31, v26 + 1, 0);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v27 = &v31;
      }
      else {
        std::string v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v31.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v27, size, "Error: '%s' failed", "is_trained");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v31, "virtual void faiss::IndexIVF::add_core(idx_t, const float *, const idx_t *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 225);
    }
    memset(&v31, 0, sizeof(v31));
    int v22 = snprintf(0, 0, "Error: '%s' failed", "coarse_idx");
    std::string::resize(&v31, v22 + 1, 0);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v23 = &v31;
    }
    else {
      uint64_t v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v24 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v24 = v31.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v23, v24, "Error: '%s' failed", "coarse_idx");
    uint64_t v25 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v25, &v31, "virtual void faiss::IndexIVF::add_core(idx_t, const float *, const idx_t *, const idx_t *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 224);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0x10000;
  std::string v12 = a4;
  do
  {
    uint64_t v13 = v10 + 0x10000;
    if (a2 >= v11) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = a2;
    }
    if (v13 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = v10 + 0x10000;
    }
    if (*((unsigned char *)this + 24)) {
      printf("   IndexIVF::add_with_ids %lld:%lld\n", v10, v15);
    }
    if (a4) {
      size_t v16 = v12;
    }
    else {
      size_t v16 = 0;
    }
    uint64_t result = (*(uint64_t (**)(faiss::IndexIVF *, uint64_t, const float *, const uint64_t *, const uint64_t *))(*(void *)this + 152))(this, v14 + v9, &a3[v10 * *((int *)this + 2)], v16, v5);
    v5 += 0x10000;
    v12 += 0x10000;
    v11 += 0x10000;
    v9 -= 0x10000;
    v10 += 0x10000;
  }
  while (v13 < a2);
  return result;
}

void sub_1DD03C158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::make_direct_map(faiss::IndexIVF *this, unsigned int a2)
{
}

void faiss::IndexIVF::set_direct_map_type(uint64_t a1, unsigned int a2)
{
}

void faiss::IndexIVF::search(faiss::IndexIVF *this, uint64_t a2, const float *a3, void *a4, float *a5, uint64_t *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((uint64_t)a4 <= 0)
  {
    memset(&v26, 0, 24);
    int v13 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize((std::string *)&v26, v13 + 1, 0);
    if (v26.__m_.__opaque[15] >= 0) {
      sig = (char *)&v26;
    }
    else {
      sig = (char *)v26.__m_.__sig;
    }
    if (v26.__m_.__opaque[15] >= 0) {
      size_t v15 = v26.__m_.__opaque[15];
    }
    else {
      size_t v15 = *(void *)v26.__m_.__opaque;
    }
    snprintf(sig, v15, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v26, "virtual void faiss::IndexIVF::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 298);
  }
  unsigned int v6 = (void *)*((void *)this + 17);
  if ((unint64_t)v6 >= *((void *)this + 6)) {
    unsigned int v6 = (void *)*((void *)this + 6);
  }
  if (!v6)
  {
    memset(&v26, 0, 24);
    int v17 = snprintf(0, 0, "Error: '%s' failed", "nprobe > 0");
    std::string::resize((std::string *)&v26, v17 + 1, 0);
    if (v26.__m_.__opaque[15] >= 0) {
      uint64_t v18 = (char *)&v26;
    }
    else {
      uint64_t v18 = (char *)v26.__m_.__sig;
    }
    if (v26.__m_.__opaque[15] >= 0) {
      size_t v19 = v26.__m_.__opaque[15];
    }
    else {
      size_t v19 = *(void *)v26.__m_.__opaque;
    }
    snprintf(v18, v19, "Error: '%s' failed", "nprobe > 0");
    uint64_t v20 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v20, &v26, "virtual void faiss::IndexIVF::search(idx_t, const float *, idx_t, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 301);
  }
  v25[3] = this;
  v25[4] = a4;
  v25[5] = v6;
  if ((*((_DWORD *)this + 38) & ~*((_DWORD *)this + 39)) != 0)
  {
    faiss::IndexIVFStats::get_indexIVF_stats(this);
    faiss::IndexIVF::search(long long,float const*,long long,float *,long long *)const::$_0::operator()();
  }
  int v8 = (faiss::IndexIVFStats *)std::vector<faiss::IndexIVFStats>::vector(v25, (int)a2);
  v26.__m_.__sig = 850045863;
  memset(v26.__m_.__opaque, 0, sizeof(v26.__m_.__opaque));
  std::string __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a2 << 32 > 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if ((int)a2 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = (int)a2;
    }
    uint64_t v21 = v11;
    do
    {
      if ((a2 + v9) / (int)a2 > v9 / (int)a2) {
        faiss::IndexIVF::search(long long,float const*,long long,float *,long long *)const::$_0::operator()();
      }
      v10 += 48;
      v9 += a2;
    }
    while (48 * v11 != v10);
    uint64_t v12 = 0;
    do
    {
      faiss::IndexIVFStats::get_indexIVF_stats(v8);
      faiss::IndexIVFStats::add((faiss::IndexIVFStats *)&faiss::IndexIVFStats::get_indexIVF_stats(void)::_stats, (const faiss::IndexIVFStats *)((char *)v25[0] + v12));
      v12 += 48;
    }
    while (48 * v21 != v12);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  std::mutex::~mutex(&v26);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_1DD03C624()
{
  if (v1 < 0) {
    operator delete(v0);
  }
  std::mutex::~mutex(&v3);
  if (v2) {
    JUMPOUT(0x1DD03C6D8);
  }
  JUMPOUT(0x1DD03C6E4);
}

void sub_1DD03C62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::mutex::unlock((std::mutex *)&a25);
  __cxa_end_catch();
  if (v26 < 0) {
    operator delete(v25);
  }
  std::mutex::~mutex(&v28);
  if (v27) {
    JUMPOUT(0x1DD03C6D8);
  }
  JUMPOUT(0x1DD03C6E4);
}

void sub_1DD03C648(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(v2);
}

void sub_1DD03C658(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (v21 < 0) {
        operator delete(v20);
      }
      std::mutex::~mutex(&v23);
      if (v22) {
        JUMPOUT(0x1DD03C6D8);
      }
      JUMPOUT(0x1DD03C6E4);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1DD03C6B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_free_exception(v30);
  if (a30 < 0) {
    JUMPOUT(0x1DD03C6D8);
  }
  _Unwind_Resume(v31);
}

void faiss::IndexIVF::search(long long,float const*,long long,float *,long long *)const::$_0::operator()()
{
}

void sub_1DD03C8D8(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v2, 0x1000C8052888210);
  MEMORY[0x1E01AF650](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

long long *faiss::IndexIVFStats::get_indexIVF_stats(faiss::IndexIVFStats *this)
{
  {
    xmmword_1EAB1CBC8 = 0u;
    *(_OWORD *)&qword_1EAB1CBD8 = 0u;
    faiss::IndexIVFStats::get_indexIVF_stats(void)::_stats = 0u;
  }
  return &faiss::IndexIVFStats::get_indexIVF_stats(void)::_stats;
}

int64x2_t faiss::IndexIVFStats::add(faiss::IndexIVFStats *this, const faiss::IndexIVFStats *a2)
{
  int64x2_t v2 = *((int64x2_t *)this + 1);
  *(int64x2_t *)this = vaddq_s64(*(int64x2_t *)this, *(int64x2_t *)a2);
  int64x2_t result = vaddq_s64(v2, *((int64x2_t *)a2 + 1));
  float64x2_t v4 = vaddq_f64(*((float64x2_t *)a2 + 2), *((float64x2_t *)this + 2));
  *((int64x2_t *)this + 1) = result;
  *((float64x2_t *)this + 2) = v4;
  return result;
}

void faiss::IndexIVF::search_preassigned(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t *a5, float *a6, float *a7, uint64_t *a8, char a9, uint64_t a10, void *a11)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  unint64_t v140 = a4;
  char v139 = a9;
  if (a4 <= 0)
  {
    memset(&v123, 0, sizeof(v123));
    int v91 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
    std::string::resize(&v123, v91 + 1, 0);
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v92 = &v123;
    }
    else {
      uint64_t v92 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v123.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v92, size, "Error: '%s' failed", "k > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v123, "virtual void faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 393);
  }
  std::string::size_type v12 = a1;
  int v13 = (uint64_t *)(a10 + 8);
  if (!a10) {
    int v13 = (uint64_t *)(a1 + 136);
  }
  uint64_t v14 = *v13;
  if (v14 >= *(void *)(a1 + 48)) {
    uint64_t v14 = *(void *)(a1 + 48);
  }
  uint64_t v118 = v14;
  if (v14 <= 0)
  {
    memset(&v123, 0, sizeof(v123));
    int v95 = snprintf(0, 0, "Error: '%s' failed", "nprobe > 0");
    std::string::resize(&v123, v95 + 1, 0);
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v96 = &v123;
    }
    else {
      uint64_t v96 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v97 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v97 = v123.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v96, v97, "Error: '%s' failed", "nprobe > 0");
    uint64_t v98 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v98, &v123, "virtual void faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 397);
  }
  if (a10) {
    uint64_t v18 = (uint64_t *)(a10 + 16);
  }
  else {
    uint64_t v18 = (uint64_t *)(a1 + 144);
  }
  uint64_t v19 = *v18;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  char v136 = 0;
  memset(v141.__m_.__opaque, 0, sizeof(v141.__m_.__opaque));
  v141.__m_.__sig = 850045863;
  *(void *)&v133[1] = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  int v20 = *(_DWORD *)(a1 + 152);
  int v21 = *(_DWORD *)(a1 + 156);
  *(void *)size_t v133 = (v21 & v20) == 0;
  size_t v132 = 0;
  size_t v132 = (void (***)(void, uint64_t))(*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 184))(a1);
  v131[0] = (void *)v12;
  v131[1] = &v140;
  v130[0] = v133;
  v130[1] = (void *)v12;
  v130[2] = &v140;
  v123.__r_.__value_.__r.__words[0] = v12;
  v123.__r_.__value_.__l.__size_ = (std::string::size_type)&v132;
  v123.__r_.__value_.__r.__words[2] = (std::string::size_type)&v138;
  uint64_t v124 = &v139;
  size_t v125 = &v137;
  __int32 v126 = &v140;
  int v127 = &v141;
  int8x16_t v128 = &v133[1];
  __int32 v129 = &v136;
  int v113 = a8;
  long long __dst = a7;
  std::string::size_type v117 = v12;
  uint64_t v110 = v132;
  switch(v20 & ~v21)
  {
    case 0:
    case 3:
      if (a2 < 1)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 4 * v118;
        uint64_t v27 = 8 * v118;
        uint64_t v111 = a2;
        do
        {
          if (!v136)
          {
            (**v132)(v132, a3 + 4 * v24 * *(int *)(v12 + 8));
            unint64_t v28 = v140;
            if (v133[0])
            {
              if (*(_DWORD *)(v12 + 28))
              {
                if (v140)
                {
                  std::string v29 = (uint64_t *)((char *)a8 + v140 * v23);
                  unint64_t v30 = v140;
                  std::string v31 = (_DWORD *)((char *)a7 + v140 * v22);
                  do
                  {
                    *v31++ = 2139095039;
                    *v29++ = -1;
                    --v30;
                  }
                  while (v30);
                }
              }
              else if (v140)
              {
                std::string v32 = (uint64_t *)((char *)a8 + v140 * v23);
                unint64_t v33 = v140;
                uint64_t v34 = (_DWORD *)((char *)a7 + v140 * v22);
                do
                {
                  *v34++ = -8388609;
                  *v32++ = -1;
                  --v33;
                }
                while (v33);
              }
            }
            unint64_t v35 = 0;
            std::string v36 = a8;
            uint64_t v37 = 0;
            unint64_t v38 = v28 * v24;
            int v39 = (int *)&a7[v38];
            int v40 = &v36[v38];
            do
            {
              v37 += faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_3::operator()((uint64_t *)&v123, a5[v35], (uint64_t)v39, (uint64_t)v40, a6[v35]);
              BOOL v41 = v37 < v19 || v19 == 0;
              ++v35;
            }
            while (v41 && v35 < v118);
            uint64_t v43 = (faiss::InterruptCallback *)faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_2::operator()(v130, v39, v40);
            v25 += v37;
            a2 = v111;
            a7 = __dst;
            std::string::size_type v12 = v117;
            if (faiss::InterruptCallback::is_interrupted(v43)) {
              char v136 = 1;
            }
            a8 = v113;
            uint64_t v26 = 4 * v118;
            uint64_t v27 = 8 * v118;
          }
          ++v24;
          v23 += 8;
          v22 += 4;
          a6 = (float *)((char *)a6 + v26);
          a5 = (int64_t *)((char *)a5 + v27);
        }
        while (v24 != a2);
      }
      goto LABEL_101;
    case 1:
      std::vector<long long>::vector(&v122, v140);
      std::vector<float>::vector(&__p, v140);
      if (a2)
      {
        uint64_t v44 = 0;
        uint64_t v114 = 0;
        uint64_t v45 = 0;
        uint64_t v25 = 0;
        uint64_t v112 = a2;
        while (1)
        {
          (**v132)(v132, a3 + 4 * v45 * *(int *)(v12 + 8));
          if (v133[0])
          {
            uint64_t v46 = __p;
            int v47 = (void *)v122.__r_.__value_.__r.__words[0];
            unint64_t v48 = v140;
            if (*(_DWORD *)(v12 + 28))
            {
              if (v140)
              {
                uint64_t v49 = v44;
                do
                {
                  *v46++ = 2139095039;
                  *v47++ = -1;
                  --v48;
                }
                while (v48);
                goto LABEL_50;
              }
            }
            else if (v140)
            {
              uint64_t v49 = v44;
              do
              {
                *v46++ = -8388609;
                *v47++ = -1;
                --v48;
              }
              while (v48);
              goto LABEL_50;
            }
          }
          uint64_t v49 = v44;
LABEL_50:
          uint64_t v50 = a5;
          uint64_t v51 = v118;
          uint64_t v52 = a6;
          do
          {
            int64_t v53 = *v50++;
            v25 += faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_3::operator()((uint64_t *)&v123, v53, (uint64_t)__p, (uint64_t)v122.__r_.__value_.__l.__data_, *v52++);
            --v51;
          }
          while (v51);
          unint64_t v54 = v140;
          uint64_t v55 = v49;
          a2 = v112;
          if (v133[0])
          {
            if (*(_DWORD *)(v12 + 28))
            {
              if (v140)
              {
                unsigned int v56 = (uint64_t *)((char *)v113 + v140 * v114);
                unint64_t v57 = v140;
                uint64_t v58 = (_DWORD *)((char *)__dst + v140 * v55);
                do
                {
                  *v58++ = 2139095039;
                  *v56++ = -1;
                  --v57;
                }
                while (v57);
              }
            }
            else if (v140)
            {
              int v59 = (uint64_t *)((char *)v113 + v140 * v114);
              unint64_t v60 = v140;
              uint64_t v61 = (_DWORD *)((char *)__dst + v140 * v55);
              do
              {
                *v61++ = -8388609;
                *v59++ = -1;
                --v60;
              }
              while (v60);
            }
          }
          unint64_t v62 = v54 * v45;
          uint64_t v63 = &__dst[v62];
          uint64_t v64 = &v113[v62];
          int64_t v65 = __p;
          faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_1::operator()(v131, (uint64_t)__p, (uint64_t)v122.__r_.__value_.__l.__data_, v63, (uint64_t)v64);
          uint64_t v66 = (int *)v63;
          std::string::size_type v12 = v117;
          faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_2::operator()(v130, v66, v64);
          ++v45;
          a6 += v118;
          a5 += v118;
          v114 += 8;
          uint64_t v44 = v55 + 4;
          if (v45 == v112)
          {
            if (!v65) {
              goto LABEL_99;
            }
            goto LABEL_91;
          }
        }
      }
      uint64_t v25 = 0;
      int64_t v65 = __p;
      if (!__p) {
        goto LABEL_99;
      }
LABEL_91:
      int v121 = v65;
      uint64_t v84 = v65;
LABEL_98:
      operator delete(v84);
LABEL_99:
      if (v122.__r_.__value_.__r.__words[0])
      {
        v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
        operator delete(v122.__r_.__value_.__l.__data_);
      }
LABEL_101:
      if (v110) {
        ((void (*)(void (***)(void, uint64_t)))(*v110)[6])(v110);
      }
      if (v136)
      {
        if (SHIBYTE(v135) < 0)
        {
          if (v134)
          {
            memset(&v123, 0, sizeof(v123));
            size_t v99 = *(const char **)&v133[1];
            goto LABEL_136;
          }
        }
        else if (HIBYTE(v135))
        {
          memset(&v123, 0, sizeof(v123));
          size_t v99 = &v133[1];
LABEL_136:
          int v105 = snprintf(0, 0, "search interrupted with: %s", v99);
          std::string::resize(&v123, v105 + 1, 0);
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v106 = &v123;
          }
          else {
            int v106 = (std::string *)v123.__r_.__value_.__r.__words[0];
          }
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v107 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v107 = v123.__r_.__value_.__l.__size_;
          }
          size_t v108 = &v133[1];
          if (v135 < 0) {
            size_t v108 = *(const char **)&v133[1];
          }
          snprintf((char *)v106, v107, "search interrupted with: %s", v108);
          std::string::size_type v109 = __cxa_allocate_exception(0x20uLL);
          faiss::FaissException::FaissException(v109, &v123, "virtual void faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 636);
        }
        unsigned int v100 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v123, "computation interrupted");
        faiss::FaissException::FaissException(v100, &v123, "virtual void faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 638);
      }
      if (a11)
      {
        uint64_t v89 = a11[1] + v138;
        *a11 += a2;
        a11[1] = v89;
        uint64_t v90 = a11[3] + v137;
        a11[2] += v25;
        a11[3] = v90;
      }
      if (SHIBYTE(v135) < 0) {
        operator delete(*(void **)&v133[1]);
      }
      std::mutex::~mutex(&v141);
      return;
    case 2:
      std::vector<long long>::vector(&v122, v140);
      std::vector<float>::vector(&__p, v140);
      if (a2 >= 1)
      {
        uint64_t v67 = 0;
        unint64_t v68 = v140;
        int v69 = v133[0];
        int v70 = a8;
        do
        {
          if (v69)
          {
            if (*(_DWORD *)(v12 + 28))
            {
              if (v68)
              {
                size_t v71 = a7;
                uint64_t v72 = v70;
                unint64_t v73 = v68;
                do
                {
                  *v71++ = 3.4028e38;
                  *v72++ = -1;
                  --v73;
                }
                while (v73);
              }
            }
            else if (v68)
            {
              for (uint64_t i = 0; i != v68; ++i)
              {
                a7[i] = -3.4028e38;
                v70[i] = -1;
              }
            }
          }
          ++v67;
          v70 += v68;
          a7 += v68;
        }
        while (v67 != a2);
      }
      if (v118 * a2 < 1)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v75 = 0;
        uint64_t v25 = 0;
        do
        {
          (**v132)(v132, a3 + 4 * v75 / v118 * *(int *)(v12 + 8));
          uint64_t v76 = __p;
          uint64_t v77 = v122.__r_.__value_.__r.__words[0];
          if (v133[0])
          {
            unint64_t v78 = v140;
            if (*(_DWORD *)(v12 + 28))
            {
              if (v140)
              {
                int v79 = __p;
                uint64_t v80 = (void *)v122.__r_.__value_.__r.__words[0];
                do
                {
                  *v79++ = 2139095039;
                  *v80++ = -1;
                  --v78;
                }
                while (v78);
              }
            }
            else if (v140)
            {
              int v81 = __p;
              size_t v82 = (void *)v122.__r_.__value_.__r.__words[0];
              do
              {
                *v81++ = -8388609;
                *v82++ = -1;
                --v78;
              }
              while (v78);
            }
          }
          uint64_t v83 = faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_3::operator()((uint64_t *)&v123, a5[v75], (uint64_t)v76, v77, a6[v75]);
          faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_1::operator()(v131, (uint64_t)__p, (uint64_t)v122.__r_.__value_.__l.__data_, &__dst[v140 * (v75 / v118)], (uint64_t)&a8[v140 * (v75 / v118)]);
          v25 += v83;
          ++v75;
        }
        while (v75 != v118 * a2);
      }
      uint64_t v85 = (int *)__dst;
      if (a2 >= 1)
      {
        unint64_t v86 = 8 * v140;
        unint64_t v87 = 4 * v140;
        uint64_t v88 = a2;
        do
        {
          faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_2::operator()(v130, v85, a8);
          a8 = (uint64_t *)((char *)a8 + v86);
          uint64_t v85 = (int *)((char *)v85 + v87);
          --v88;
        }
        while (v88);
      }
      uint64_t v84 = __p;
      if (!__p) {
        goto LABEL_99;
      }
      int v121 = __p;
      goto LABEL_98;
    default:
      memset(&v122, 0, sizeof(v122));
      int v101 = snprintf(0, 0, "parallel_mode %d not supported\n", v20 & ~v21);
      std::string::resize(&v122, v101 + 1, 0);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = &v122;
      }
      else {
        uint64_t v102 = (std::string *)v122.__r_.__value_.__r.__words[0];
      }
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v103 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v103 = v122.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v102, v103, "parallel_mode %d not supported\n", v20 & ~v21);
      uint64_t v104 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v104, &v122, "virtual void faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 629);
  }
}

void sub_1DD03D518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_free_exception(v35);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 48))(v36);
  }
  if (*(char *)(v37 - 201) < 0) {
    operator delete(*(void **)(v37 - 224));
  }
  std::mutex::~mutex((std::mutex *)(v37 - 160));
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_3::operator()(uint64_t *a1, int64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 < 0) {
    return 0;
  }
  uint64_t v7 = *a1;
  int64_t v8 = *(void *)(*a1 + 48);
  if (v8 <= a2)
  {
    memset(&v19, 0, sizeof(v19));
    int v14 = snprintf(0, 0, "Error: '%s' failed: Invalid key=%lld nlist=%zd\n", "key < (idx_t)nlist", a2, v8);
    std::string::resize(&v19, v14 + 1, 0);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v15 = &v19;
    }
    else {
      size_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v19.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v15, size, "Error: '%s' failed: Invalid key=%lld nlist=%zd\n", "key < (idx_t)nlist", a2, *(void *)(v7 + 48));
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v19, "auto faiss::IndexIVF::search_preassigned(idx_t, const float *, idx_t, const idx_t *, const float *, float *, idx_t *, BOOL, const IVFSearchParameters *, IndexIVFStats *)::(anonymous class)::operator()(idx_t, float, float *, idx_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 480);
  }
  uint64_t v12 = (***(uint64_t (****)(void, int64_t))(v7 + 112))(*(void *)(v7 + 112), a2);
  if (v12)
  {
    (*(void (**)(void, int64_t, float))(**(void **)a1[1] + 8))(*(void *)a1[1], a2, a5);
    ++*(void *)a1[2];
    v19.__r_.__value_.__r.__words[0] = *(void *)(v7 + 112);
    std::string::size_type v13 = (*(uint64_t (**)(std::string::size_type, int64_t))(*(void *)v19.__r_.__value_.__l.__data_
                                                                            + 8))(v19.__r_.__value_.__r.__words[0], a2);
    v19.__r_.__value_.__l.__size_ = v13;
    v19.__r_.__value_.__r.__words[2] = a2;
    if (!*(unsigned char *)a1[3]) {
      operator new();
    }
    *(void *)a1[4] += (*(uint64_t (**)(void, uint64_t, std::string::size_type, void, uint64_t, uint64_t, void))(**(void **)a1[1] + 24))(*(void *)a1[1], v12, v13, 0, a3, a4, *(void *)a1[5]);
    faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v19);
  }
  return v12;
}

void sub_1DD03DB44()
{
}

void sub_1DD03DB4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  std::mutex::unlock(v23);
  __cxa_end_catch();
  JUMPOUT(0x1DD03D9C0);
}

void sub_1DD03DB98(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1DD03D9C0);
}

void **faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_2::operator()(void **result, int *__dst, uint64_t *a3)
{
  if (!*(unsigned char *)*result) {
    return result;
  }
  unint64_t v5 = *result[2];
  if (*((_DWORD *)result[1] + 7))
  {
    if (!v5)
    {
      unint64_t v7 = 0;
      goto LABEL_40;
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    int64_t v8 = (char *)(__dst - 1);
    uint64_t v9 = a3 - 1;
    while (1)
    {
      int v10 = *__dst;
      uint64_t v11 = *a3;
      unint64_t v12 = v5 - v6;
      float v13 = *(float *)&v8[4 * (v5 - v6)];
      if (v5 - v6 < 2)
      {
        uint64_t v14 = 1;
        goto LABEL_17;
      }
      uint64_t v15 = 3;
      unint64_t v16 = 2;
      uint64_t v17 = 1;
      while (1)
      {
        float v18 = *(float *)&v8[4 * v16];
        if (v15 != v12 + 1)
        {
          float v19 = *(float *)&v8[4 * v15];
          if (v18 <= v19) {
            break;
          }
        }
        if (v13 > v18) {
          goto LABEL_15;
        }
LABEL_13:
        uint64_t v14 = v16;
        *(float *)&v8[4 * v17] = v18;
        v9[v17] = v9[v16];
        v16 *= 2;
        uint64_t v15 = (2 * v14) | 1;
        uint64_t v17 = v14;
        if (v16 > v12) {
          goto LABEL_16;
        }
      }
      float v18 = *(float *)&v8[4 * v15];
      unint64_t v16 = v15;
      if (v13 <= v19) {
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v14 = v17;
LABEL_16:
      float v13 = *(float *)&v8[4 * v12];
LABEL_17:
      *(float *)&v8[4 * v14] = v13;
      v9[v14] = v9[v12];
      unint64_t v20 = v5 + ~v7;
      __dst[v20] = v10;
      a3[v20] = v11;
      if (v11 != -1) {
        ++v7;
      }
      if (++v6 == v5)
      {
LABEL_40:
        memmove(__dst, &__dst[v5 - v7], 4 * v7);
        int64x2_t result = (void **)memmove(a3, &a3[v5 - v7], 8 * v7);
        unint64_t v36 = v5 - v7;
        if (v5 > v7)
        {
          uint64_t v37 = &a3[v7];
          unint64_t v38 = &__dst[v7];
          do
          {
            *v38++ = 2139095039;
            *v37++ = -1;
            --v36;
          }
          while (v36);
        }
        return result;
      }
    }
  }
  if (!v5)
  {
    unint64_t v22 = 0;
    goto LABEL_45;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = (char *)(__dst - 1);
  uint64_t v24 = a3 - 1;
  do
  {
    int v25 = *__dst;
    uint64_t v26 = *a3;
    unint64_t v27 = v5 - v21;
    float v28 = *(float *)&v23[4 * (v5 - v21)];
    if (v5 - v21 < 2)
    {
      uint64_t v29 = 1;
      goto LABEL_35;
    }
    uint64_t v30 = 3;
    unint64_t v31 = 2;
    uint64_t v32 = 1;
    while (1)
    {
      float v33 = *(float *)&v23[4 * v31];
      if (v30 != v27 + 1)
      {
        float v34 = *(float *)&v23[4 * v30];
        if (v33 >= v34) {
          break;
        }
      }
      if (v28 < v33) {
        goto LABEL_33;
      }
LABEL_31:
      uint64_t v29 = v31;
      *(float *)&v23[4 * v32] = v33;
      v24[v32] = v24[v31];
      v31 *= 2;
      uint64_t v30 = (2 * v29) | 1;
      uint64_t v32 = v29;
      if (v31 > v27) {
        goto LABEL_34;
      }
    }
    float v33 = *(float *)&v23[4 * v30];
    unint64_t v31 = v30;
    if (v28 >= v34) {
      goto LABEL_31;
    }
LABEL_33:
    uint64_t v29 = v32;
LABEL_34:
    float v28 = *(float *)&v23[4 * v27];
LABEL_35:
    *(float *)&v23[4 * v29] = v28;
    v24[v29] = v24[v27];
    unint64_t v35 = v5 + ~v22;
    __dst[v35] = v25;
    a3[v35] = v26;
    if (v26 != -1) {
      ++v22;
    }
    ++v21;
  }
  while (v21 != v5);
LABEL_45:
  memmove(__dst, &__dst[v5 - v22], 4 * v22);
  int64x2_t result = (void **)memmove(a3, &a3[v5 - v22], 8 * v22);
  unint64_t v39 = v5 - v22;
  if (v5 > v22)
  {
    int v40 = &a3[v22];
    BOOL v41 = &__dst[v22];
    do
    {
      *v41++ = -8388609;
      *v40++ = -1;
      --v39;
    }
    while (v39);
  }
  return result;
}

void **faiss::IndexIVF::search_preassigned(long long,float const*,long long,long long const*,float const*,float *,long long *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_1::operator()(void **result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5)
{
  unint64_t v5 = *result[1];
  if (!*((_DWORD *)*result + 7))
  {
    if (a3)
    {
      if (!v5) {
        return result;
      }
      uint64_t v17 = 0;
      float v18 = a4 - 1;
      uint64_t v19 = a5 - 8;
LABEL_23:
      float v20 = *(float *)(a2 + 4 * v17);
      if (*a4 >= v20) {
        goto LABEL_36;
      }
      uint64_t v21 = *(void *)(a3 + 8 * v17);
      if (v5 == 1)
      {
        uint64_t v22 = 1;
        goto LABEL_35;
      }
      uint64_t v23 = 3;
      unint64_t v24 = 2;
      uint64_t v25 = 1;
      while (1)
      {
        float v26 = v18[v24];
        if (v23 == v5 + 1 || (float v27 = v18[v23], v26 < v27))
        {
          if (v26 > v20) {
            goto LABEL_34;
          }
        }
        else
        {
          float v26 = v18[v23];
          unint64_t v24 = v23;
          if (v27 > v20)
          {
LABEL_34:
            uint64_t v22 = v25;
LABEL_35:
            v18[v22] = v20;
            *(void *)(v19 + 8 * v22) = v21;
LABEL_36:
            if (++v17 == v5) {
              return result;
            }
            goto LABEL_23;
          }
        }
        uint64_t v22 = v24;
        v18[v25] = v26;
        *(void *)(v19 + 8 * v25) = *(void *)(v19 + 8 * v24);
        v24 *= 2;
        uint64_t v23 = (2 * v22) | 1;
        uint64_t v25 = v22;
        if (v24 > v5) {
          goto LABEL_35;
        }
      }
    }
    if (!v5) {
      return result;
    }
    uint64_t v38 = 0;
    unint64_t v39 = a4 - 1;
    uint64_t v40 = a5 - 8;
LABEL_57:
    float v41 = *(float *)(a2 + 4 * v38);
    if (*a4 >= v41) {
      goto LABEL_70;
    }
    if (v5 == 1)
    {
      uint64_t v42 = 1;
      goto LABEL_69;
    }
    uint64_t v43 = 3;
    unint64_t v44 = 2;
    uint64_t v45 = 1;
    while (1)
    {
      float v46 = v39[v44];
      if (v43 == v5 + 1 || (float v47 = v39[v43], v46 < v47))
      {
        if (v46 > v41) {
          goto LABEL_68;
        }
      }
      else
      {
        float v46 = v39[v43];
        unint64_t v44 = v43;
        if (v47 > v41)
        {
LABEL_68:
          uint64_t v42 = v45;
LABEL_69:
          v39[v42] = v41;
          *(void *)(v40 + 8 * v42) = v38;
LABEL_70:
          if (++v38 == v5) {
            return result;
          }
          goto LABEL_57;
        }
      }
      uint64_t v42 = v44;
      v39[v45] = v46;
      *(void *)(v40 + 8 * v45) = *(void *)(v40 + 8 * v44);
      v44 *= 2;
      uint64_t v43 = (2 * v42) | 1;
      uint64_t v45 = v42;
      if (v44 > v5) {
        goto LABEL_69;
      }
    }
  }
  if (!a3)
  {
    if (!v5) {
      return result;
    }
    uint64_t v28 = 0;
    uint64_t v29 = a4 - 1;
    uint64_t v30 = a5 - 8;
LABEL_40:
    float v31 = *(float *)(a2 + 4 * v28);
    if (*a4 <= v31) {
      goto LABEL_53;
    }
    if (v5 == 1)
    {
      uint64_t v32 = 1;
      goto LABEL_52;
    }
    uint64_t v33 = 3;
    unint64_t v34 = 2;
    uint64_t v35 = 1;
    while (1)
    {
      float v36 = v29[v34];
      if (v33 == v5 + 1 || (float v37 = v29[v33], v36 > v37))
      {
        if (v36 < v31) {
          goto LABEL_51;
        }
      }
      else
      {
        float v36 = v29[v33];
        unint64_t v34 = v33;
        if (v37 < v31)
        {
LABEL_51:
          uint64_t v32 = v35;
LABEL_52:
          v29[v32] = v31;
          *(void *)(v30 + 8 * v32) = v28;
LABEL_53:
          if (++v28 == v5) {
            return result;
          }
          goto LABEL_40;
        }
      }
      uint64_t v32 = v34;
      v29[v35] = v36;
      *(void *)(v30 + 8 * v35) = *(void *)(v30 + 8 * v34);
      v34 *= 2;
      uint64_t v33 = (2 * v32) | 1;
      uint64_t v35 = v32;
      if (v34 > v5) {
        goto LABEL_52;
      }
    }
  }
  if (!v5) {
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v7 = a4 - 1;
  uint64_t v8 = a5 - 8;
  do
  {
    float v9 = *(float *)(a2 + 4 * v6);
    if (*a4 <= v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(a3 + 8 * v6);
    if (v5 == 1)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
    uint64_t v12 = 3;
    unint64_t v13 = 2;
    uint64_t v14 = 1;
    while (1)
    {
      float v15 = v7[v13];
      if (v12 != v5 + 1)
      {
        float v16 = v7[v12];
        if (v15 <= v16) {
          break;
        }
      }
      if (v15 < v9) {
        goto LABEL_16;
      }
LABEL_14:
      uint64_t v11 = v13;
      v7[v14] = v15;
      *(void *)(v8 + 8 * v14) = *(void *)(v8 + 8 * v13);
      v13 *= 2;
      uint64_t v12 = (2 * v11) | 1;
      uint64_t v14 = v11;
      if (v13 > v5) {
        goto LABEL_17;
      }
    }
    float v15 = v7[v12];
    unint64_t v13 = v12;
    if (v16 >= v9) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v11 = v14;
LABEL_17:
    v7[v11] = v9;
    *(void *)(v8 + 8 * v11) = v10;
LABEL_18:
    ++v6;
  }
  while (v6 != v5);
  return result;
}

void faiss::IndexIVF::range_search(faiss::IndexIVF *this, uint64_t a2, const float *a3, float a4, faiss::RangeSearchResult *a5)
{
}

void sub_1DD03E360(_Unwind_Exception *a1)
{
  MEMORY[0x1E01AF650](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::range_search_preassigned(std::string::size_type a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, faiss::RangeSearchResult *a6, uint64_t a7, uint64_t a8, float a9, void *a10)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  float v71 = a9;
  uint64_t v69 = a5;
  uint64_t v70 = a4;
  float v15 = (uint64_t *)(a8 + 8);
  if (!a8) {
    float v15 = (uint64_t *)(a1 + 136);
  }
  uint64_t v16 = *v15;
  if (v16 >= *(void *)(a1 + 48)) {
    uint64_t v16 = *(void *)(a1 + 48);
  }
  uint64_t v67 = 0;
  uint64_t v68 = v16;
  uint64_t v66 = 0;
  char v65 = 0;
  memset(v72.__m_.__opaque, 0, sizeof(v72.__m_.__opaque));
  v72.__m_.__sig = 850045863;
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  std::vector<faiss::RangeSearchPartialResult *>::vector(v61, 1uLL);
  faiss::RangeSearchPartialResult::RangeSearchPartialResult(v58, a6);
  unint64_t v57 = (void (***)(void, uint64_t))(*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)a1 + 184))(a1, a7);
  if (!v57)
  {
    memset(&v48, 0, sizeof(v48));
    int v32 = snprintf(0, 0, "Error: '%s' failed", "scanner.get()");
    std::string::resize(&v48, v32 + 1, 0);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v48;
    }
    else {
      uint64_t v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v48.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v33, size, "Error: '%s' failed", "scanner.get()");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v48, "void faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 721);
  }
  *(void *)v61[0] = v58;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  v48.__r_.__value_.__l.__size_ = (std::string::size_type)&v68;
  v48.__r_.__value_.__r.__words[2] = a1;
  uint64_t v49 = &v57;
  uint64_t v50 = &v69;
  uint64_t v51 = &v67;
  uint64_t v52 = &v66;
  int64_t v53 = &v71;
  unint64_t v54 = &v72;
  uint64_t v55 = (void **)&v62;
  unsigned int v56 = &v65;
  int v17 = *(_DWORD *)(a1 + 152);
  if (v17)
  {
    if (v17 != 2)
    {
      if (v17 != 1)
      {
        memset(&__p, 0, sizeof(__p));
        int v38 = snprintf(0, 0, "parallel_mode %d not supported\n", v17);
        std::string::resize(&__p, v38 + 1, 0);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v40 = __p.__r_.__value_.__l.__size_;
        }
        snprintf((char *)p_p, v40, "parallel_mode %d not supported\n", *(_DWORD *)(a1 + 152));
        float v41 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v41, &__p, "void faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 802);
      }
      if (!a2) {
        goto LABEL_32;
      }
      uint64_t v18 = 0;
      do
      {
        (**v57)(v57, a3 + 4 * v18 * *(int *)(a1 + 8));
        uint64_t v19 = faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v58, v18);
        if (v68 >= 1)
        {
          uint64_t v20 = (uint64_t)v19;
          for (uint64_t i = 0; i < v68; ++i)
            faiss::IndexIVF::range_search_preassigned(long long,float const*,float,long long const*,float const*,faiss::RangeSearchResult *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_0::operator()((uint64_t)&v48, v18, i, v20);
        }
        ++v18;
      }
      while (v18 != a2);
      goto LABEL_31;
    }
    std::vector<faiss::RangeQueryResult *>::vector(&__p, a2);
    uint64_t v22 = v68;
    if (v68 * a2 < 1)
    {
LABEL_23:
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = v23 / v22;
      if (!v24) {
        goto LABEL_21;
      }
      if (*v24 != v25) {
        break;
      }
LABEL_22:
      faiss::IndexIVF::range_search_preassigned(long long,float const*,float,long long const*,float const*,faiss::RangeSearchResult *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_0::operator()((uint64_t)&v48, v23 / v22, v23 % v22, (uint64_t)v24);
      ++v23;
      uint64_t v22 = v68;
      if (v23 >= v68 * a2) {
        goto LABEL_23;
      }
    }
    if (v25 <= *v24)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Faiss assertion '%s' failed in %s at %s:%d\n", "!qres || i > qres->qno", "void faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 795);
      abort();
    }
LABEL_21:
    unint64_t v24 = faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v58, v23 / v22);
    (**v57)(v57, a3 + 4 * v25 * *(int *)(a1 + 8));
    goto LABEL_22;
  }
  if (a2 < 1) {
    goto LABEL_33;
  }
  uint64_t v26 = 0;
  do
  {
    (**v57)(v57, a3 + 4 * v26 * *(int *)(a1 + 8));
    float v27 = faiss::RangeSearchPartialResult::new_result((faiss::RangeSearchPartialResult *)v58, v26);
    if (v68)
    {
      uint64_t v28 = (uint64_t)v27;
      for (unint64_t j = 0; j < v68; ++j)
        faiss::IndexIVF::range_search_preassigned(long long,float const*,float,long long const*,float const*,faiss::RangeSearchResult *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_0::operator()((uint64_t)&v48, v26, j, v28);
    }
    ++v26;
  }
  while (v26 != a2);
LABEL_31:
  if (*(_DWORD *)(a1 + 152))
  {
LABEL_32:
    faiss::RangeSearchPartialResult::merge((uint64_t **)v61, 0);
    goto LABEL_34;
  }
LABEL_33:
  faiss::RangeSearchPartialResult::finalize((faiss::RangeSearchPartialResult *)v58);
LABEL_34:
  uint64_t v30 = v57;
  unint64_t v57 = 0;
  if (v30) {
    ((void (*)(void (***)(void, void)))(*v30)[6])(v30);
  }
  if (v59)
  {
    unint64_t v60 = v59;
    operator delete(v59);
  }
  faiss::BufferList::~BufferList((faiss::BufferList *)v58);
  if (v65)
  {
    if (SHIBYTE(v64) < 0)
    {
      if (v63)
      {
        memset(&v48, 0, sizeof(v48));
        float v36 = v62;
        goto LABEL_67;
      }
    }
    else if (HIBYTE(v64))
    {
      memset(&v48, 0, sizeof(v48));
      float v36 = (const char *)&v62;
LABEL_67:
      int v42 = snprintf(0, 0, "search interrupted with: %s", v36);
      std::string::resize(&v48, v42 + 1, 0);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v43 = &v48;
      }
      else {
        uint64_t v43 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v44 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v44 = v48.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = (const char *)&v62;
      if (v64 < 0) {
        uint64_t v45 = v62;
      }
      snprintf((char *)v43, v44, "search interrupted with: %s", v45);
      float v46 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v46, &v48, "void faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 817);
    }
    float v37 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "computation interrupted");
    faiss::FaissException::FaissException(v37, &v48, "void faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 819);
  }
  if (a10)
  {
    uint64_t v31 = a10[1] + v67;
    *a10 += a2;
    a10[1] = v31;
    a10[2] += v66;
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete(v62);
  }
  std::mutex::~mutex(&v72);
}

void sub_1DD03EAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  __cxa_free_exception(v44);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 48))(a33);
  }
  faiss::RangeSearchPartialResult::~RangeSearchPartialResult((faiss::RangeSearchPartialResult *)&a34);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (*(char *)(v45 - 193) < 0) {
    operator delete(*(void **)(v45 - 216));
  }
  std::mutex::~mutex((std::mutex *)(v45 - 136));
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::range_search_preassigned(long long,float const*,float,long long const*,float const*,faiss::RangeSearchResult *,BOOL,faiss::IVFSearchParameters const*,faiss::IndexIVFStats *)const::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int64_t v4 = *(void *)(**(void **)a1 + 8 * (a3 + **(void **)(a1 + 8) * a2));
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    int64_t v8 = *(void *)(v7 + 48);
    if (v4 >= v8)
    {
      memset(&v20, 0, sizeof(v20));
      int v13 = snprintf(0, 0, "Error: '%s' failed: Invalid key=%lld at ik=%zd nlist=%zd\n", "key < (idx_t)nlist", v4, a3, v8);
      std::string::resize(&v20, v13 + 1, 0);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v20;
      }
      else {
        uint64_t v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v20.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v14, size, "Error: '%s' failed: Invalid key=%lld at ik=%zd nlist=%zd\n", "key < (idx_t)nlist", v4, a3, *(void *)(v7 + 48));
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v20, "auto faiss::IndexIVF::range_search_preassigned(idx_t, const float *, float, const idx_t *, const float *, RangeSearchResult *, BOOL, const IVFSearchParameters *, IndexIVFStats *)::(anonymous class)::operator()(size_t, size_t, RangeQueryResult &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 739);
    }
    uint64_t v11 = (***(uint64_t (****)(void, int64_t))(v7 + 112))(*(void *)(v7 + 112), v4);
    if (v11)
    {
      uint64_t v12 = v11;
      v20.__r_.__value_.__r.__words[0] = *(void *)(v7 + 112);
      v20.__r_.__value_.__l.__size_ = (*(uint64_t (**)(std::string::size_type, int64_t))(*(void *)v20.__r_.__value_.__l.__data_ + 8))(v20.__r_.__value_.__r.__words[0], v4);
      v20.__r_.__value_.__r.__words[2] = v4;
      uint64_t v17 = *(void *)(v7 + 112);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, int64_t))(*(void *)v17 + 16))(v17, v4);
      int64_t v19 = v4;
      (*(void (**)(void, int64_t, float))(***(void ***)(a1 + 24) + 8))(**(void **)(a1 + 24), v4, *(float *)(**(void **)(a1 + 32) + 4 * (a3 + **(void **)(a1 + 8) * a2)));
      ++**(void **)(a1 + 40);
      **(void **)(a1 + 48) += v12;
      (*(void (**)(void, uint64_t, std::string::size_type, uint64_t, uint64_t, float))(***(void ***)(a1 + 24)
                                                                                               + 32))(**(void **)(a1 + 24), v12, v20.__r_.__value_.__l.__size_, v18, a4, **(float **)(a1 + 56));
      faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v17);
      faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v20);
    }
  }
}

void sub_1DD03EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::string *a14, long long __p, void *__pa, uint64_t __p_8, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a21 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void sub_1DD03EF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)va);
  JUMPOUT(0x1DD03EF2CLL);
}

void sub_1DD03F054()
{
}

void sub_1DD03F05C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  std::mutex::unlock(v25);
  __cxa_end_catch();
  JUMPOUT(0x1DD03EF14);
}

void sub_1DD03F0A8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1DD03EF14);
}

void faiss::RangeSearchPartialResult::~RangeSearchPartialResult(faiss::RangeSearchPartialResult *this)
{
  int64x2_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  faiss::BufferList::~BufferList(this);
}

uint64_t faiss::IndexIVF::get_InvertedListScanner(faiss::IndexIVF *this)
{
  return 0;
}

uint64_t faiss::IndexIVF::reconstruct(faiss::IndexIVF *this, unint64_t a2, float *a3)
{
  unint64_t v5 = faiss::DirectMap::get((faiss::IndexIVF *)((char *)this + 160), a2);
  uint64_t v6 = *(uint64_t (**)(faiss::IndexIVF *, unint64_t, void, float *))(*(void *)this + 200);
  return v6(this, HIDWORD(v5), v5, a3);
}

void faiss::IndexIVF::reconstruct_n(faiss::IndexIVF *this, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 && (a2 < 0 || a3 + a2 > *((void *)this + 2)))
  {
    memset(&v17, 0, sizeof(v17));
    int v13 = snprintf(0, 0, "Error: '%s' failed", "ni == 0 || (i0 >= 0 && i0 + ni <= ntotal)");
    std::string::resize(&v17, v13 + 1, 0);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v17;
    }
    else {
      uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v17.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v14, size, "Error: '%s' failed", "ni == 0 || (i0 >= 0 && i0 + ni <= ntotal)");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v17, "virtual void faiss::IndexIVF::reconstruct_n(idx_t, idx_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 841);
  }
  if (*((void *)this + 6))
  {
    std::string::size_type v7 = 0;
    uint64_t v8 = a3 + a2;
    do
    {
      uint64_t v9 = (***((uint64_t (****)(void, std::string::size_type))this + 14))(*((void *)this + 14), v7);
      v17.__r_.__value_.__r.__words[0] = *((void *)this + 14);
      v17.__r_.__value_.__l.__size_ = (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v17.__r_.__value_.__l.__data_ + 16))(v17.__r_.__value_.__r.__words[0], v7);
      v17.__r_.__value_.__r.__words[2] = v7;
      if (v9)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v11 = *(void *)(v17.__r_.__value_.__l.__size_ + 8 * i);
          if (v11 >= a2 && v11 < v8) {
            (*(void (**)(faiss::IndexIVF *, std::string::size_type, uint64_t, float *))(*(void *)this + 200))(this, v7, i, &a4[(v11 - a2) * *((int *)this + 2)]);
          }
        }
      }
      faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v17);
      ++v7;
    }
    while (v7 < *((void *)this + 6));
  }
}

void sub_1DD03F374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVF::sa_code_size(faiss::IndexIVF *this)
{
  uint64_t v1 = *((void *)this + 6);
  unint64_t v2 = v1 - 1;
  if (v1 == 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      BOOL v4 = v2 > 0xFF;
      v2 >>= 8;
    }
    while (v4);
  }
  return *((void *)this + 16) + v3;
}

void faiss::IndexIVF::sa_encode(faiss::IndexIVF *this, uint64_t a2, const float *a3, unsigned __int8 *a4)
{
  if (*((unsigned char *)this + 25)) {
    operator new[]();
  }
  memset(&v8, 0, sizeof(v8));
  int v4 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
  std::string::resize(&v8, v4 + 1, 0);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &v8;
  }
  else {
    unint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v8.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v5, size, "Error: '%s' failed", "is_trained");
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(exception, &v8, "virtual void faiss::IndexIVF::sa_encode(idx_t, const float *, uint8_t *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 866);
}

void sub_1DD03F5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::search_and_reconstruct(faiss::IndexIVF *this, uint64_t a2, const float *a3, uint64_t a4, float *a5, uint64_t *a6, float *a7)
{
  if (a4 > 0)
  {
    if (*((void *)this + 17) >= *((void *)this + 6)) {
      uint64_t v7 = *((void *)this + 6);
    }
    else {
      uint64_t v7 = *((void *)this + 17);
    }
    if (v7) {
      operator new[]();
    }
    memset(&v16, 0, sizeof(v16));
    int v12 = snprintf(0, 0, "Error: '%s' failed", "nprobe > 0");
    std::string::resize(&v16, v12 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v16;
    }
    else {
      int v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v16.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v13, size, "Error: '%s' failed", "nprobe > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::IndexIVF::search_and_reconstruct(idx_t, const float *, idx_t, float *, idx_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 882);
  }
  memset(&v16, 0, sizeof(v16));
  int v8 = snprintf(0, 0, "Error: '%s' failed", "k > 0");
  std::string::resize(&v16, v8 + 1, 0);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v16;
  }
  else {
    uint64_t v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v10 = v16.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v9, v10, "Error: '%s' failed", "k > 0");
  uint64_t v11 = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(v11, &v16, "virtual void faiss::IndexIVF::search_and_reconstruct(idx_t, const float *, idx_t, float *, idx_t *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 879);
}

void sub_1DD03F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::reconstruct_from_offset(faiss::IndexIVF *this, uint64_t a2, uint64_t a3, float *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "reconstruct_from_offset not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::IndexIVF::reconstruct_from_offset(int64_t, int64_t, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 929);
}

void sub_1DD03FAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::IndexIVF::reset(faiss::IndexIVF *this)
{
  faiss::DirectMap::clear((faiss::IndexIVF *)((char *)this + 160));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 104))(*((void *)this + 14));
  *((void *)this + 2) = 0;
  return result;
}

uint64_t faiss::IndexIVF::remove_ids(uint64_t a1, unsigned int (***a2)(const void *, void))
{
  uint64_t result = faiss::DirectMap::remove_ids((_DWORD *)(a1 + 160), a2, *(void **)(a1 + 112));
  *(void *)(a1 + 16) -= result;
  return result;
}

void faiss::IndexIVF::update_vectors(faiss::IndexIVF *this, int a2, unint64_t *a3, const float *a4)
{
  uint64_t v9 = (_DWORD *)((char *)this + 160);
  int v8 = *((_DWORD *)this + 40);
  if (v8 == 1)
  {
    if (!*((unsigned char *)this + 25))
    {
      memset(&v24, 0, sizeof(v24));
      int v15 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
      std::string::resize(&v24, v15 + 1, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v16 = &v24;
      }
      else {
        int v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v24.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v16, size, "Error: '%s' failed", "is_trained");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v24, "virtual void faiss::IndexIVF::update_vectors(int, const idx_t *, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 959);
    }
    std::vector<long long>::vector(&v24, a2);
    (*(void (**)(void, void, const float *, std::string::size_type, uint64_t))(**((void **)this + 5)
                                                                                           + 56))(*((void *)this + 5), a2, a4, v24.__r_.__value_.__r.__words[0], 1);
    std::vector<unsigned char>::vector(&__p, *((void *)this + 16) * a2);
    (*(void (**)(faiss::IndexIVF *, void, const float *, std::string::size_type, std::string::size_type, void))(*(void *)this + 160))(this, a2, a4, v24.__r_.__value_.__r.__words[0], __p.__r_.__value_.__r.__words[0], 0);
    faiss::DirectMap::update_codes(v9, *((faiss::InvertedLists **)this + 14), a2, a3, (uint64_t *)v24.__r_.__value_.__l.__data_, (const unsigned __int8 *)__p.__r_.__value_.__l.__data_);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v24.__r_.__value_.__r.__words[0])
    {
      v24.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v8 != 2)
    {
      memset(&v24, 0, sizeof(v24));
      int v11 = snprintf(0, 0, "Error: '%s' failed", "direct_map.type == DirectMap::Array");
      std::string::resize(&v24, v11 + 1, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v24;
      }
      else {
        int v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v13 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v13 = v24.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v12, v13, "Error: '%s' failed", "direct_map.type == DirectMap::Array");
      uint64_t v14 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v14, &v24, "virtual void faiss::IndexIVF::update_vectors(int, const idx_t *, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 955);
    }
    faiss::IDSelectorArray::IDSelectorArray(&v24, a2, (const uint64_t *)a3);
    if ((*(uint64_t (**)(faiss::IndexIVF *, std::string *))(*(void *)this + 72))(this, &v24) != a2)
    {
      memset(&__p, 0, sizeof(__p));
      int v19 = snprintf(0, 0, "Error: '%s' failed: did not find all entries to remove", "nremove == n");
      std::string::resize(&__p, v19 + 1, 0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v21 = __p.__r_.__value_.__l.__size_;
      }
      snprintf((char *)p_p, v21, "Error: '%s' failed: did not find all entries to remove", "nremove == n");
      uint64_t v22 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v22, &__p, "virtual void faiss::IndexIVF::update_vectors(int, const idx_t *, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 950);
    }
    (*(void (**)(faiss::IndexIVF *, void, const float *, unint64_t *))(*(void *)this + 32))(this, a2, a4, a3);
  }
}

void sub_1DD03FF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::IndexIVF::train(faiss::IndexIVF *this, std::vector<int>::size_type a2, const float *a3)
{
  if (*((unsigned char *)this + 24))
  {
    puts("Training level-1 quantizer");
    BOOL v6 = *((unsigned char *)this + 24) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  faiss::Level1Quantizer::train_q1((void *)this + 5, a2, a3, v6, *((_DWORD *)this + 7));
  if (*((unsigned char *)this + 24)) {
    puts("Training IVF residual");
  }
  uint64_t result = (*(uint64_t (**)(faiss::IndexIVF *, std::vector<int>::size_type, const float *))(*(void *)this + 168))(this, a2, a3);
  *((unsigned char *)this + 25) = 1;
  return result;
}

uint64_t faiss::IndexIVF::train_residual(uint64_t this, uint64_t a2, const float *a3)
{
  if (*(unsigned char *)(this + 24)) {
    return puts("IndexIVF: no residual training");
  }
  return this;
}

BOOL faiss::IndexIVF::check_compatible_for_merge(faiss::IndexIVF *this, const faiss::IndexIVF *a2)
{
  if (*((_DWORD *)a2 + 2) != *((_DWORD *)this + 2))
  {
    memset(&v25, 0, sizeof(v25));
    int v5 = snprintf(0, 0, "Error: '%s' failed", "other.d == d");
    std::string::resize(&v25, v5 + 1, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v6 = &v25;
    }
    else {
      BOOL v6 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v25.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v6, size, "Error: '%s' failed", "other.d == d");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v25, "void faiss::IndexIVF::check_compatible_for_merge(const IndexIVF &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 991);
  }
  if (*((void *)a2 + 6) != *((void *)this + 6))
  {
    memset(&v25, 0, sizeof(v25));
    int v9 = snprintf(0, 0, "Error: '%s' failed", "other.nlist == nlist");
    std::string::resize(&v25, v9 + 1, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v25;
    }
    else {
      size_t v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v11 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v11 = v25.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v10, v11, "Error: '%s' failed", "other.nlist == nlist");
    int v12 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v12, &v25, "void faiss::IndexIVF::check_compatible_for_merge(const IndexIVF &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 992);
  }
  if (*((void *)a2 + 16) != *((void *)this + 16))
  {
    memset(&v25, 0, sizeof(v25));
    int v13 = snprintf(0, 0, "Error: '%s' failed", "other.code_size == code_size");
    std::string::resize(&v25, v13 + 1, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v25;
    }
    else {
      uint64_t v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v15 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v25.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v14, v15, "Error: '%s' failed", "other.code_size == code_size");
    int v16 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v16, &v25, "void faiss::IndexIVF::check_compatible_for_merge(const IndexIVF &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 993);
  }
  BOOL result = std::type_info::operator==[abi:ne180100](*(void *)(*(void *)this - 8), *(void *)(*(void *)a2 - 8));
  if (!result)
  {
    memset(&v25, 0, sizeof(v25));
    int v17 = snprintf(0, 0, "Error: '%s' failed: can only merge indexes of the same type", "typeid(*this) == typeid(other)");
    std::string::resize(&v25, v17 + 1, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v25;
    }
    else {
      uint64_t v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v19 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v19 = v25.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v18, v19, "Error: '%s' failed: can only merge indexes of the same type", "typeid(*this) == typeid(other)");
    std::string v20 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v20, &v25, "void faiss::IndexIVF::check_compatible_for_merge(const IndexIVF &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 996);
  }
  if (*((_DWORD *)this + 40) | *((_DWORD *)a2 + 40))
  {
    memset(&v25, 0, sizeof(v25));
    int v21 = snprintf(0, 0, "Error: '%s' failed: merge direct_map not implemented", "this->direct_map.no() && other.direct_map.no()");
    std::string::resize(&v25, v21 + 1, 0);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v25;
    }
    else {
      uint64_t v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v23 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v23 = v25.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v22, v23, "Error: '%s' failed: merge direct_map not implemented", "this->direct_map.no() && other.direct_map.no()");
    std::string v24 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v24, &v25, "void faiss::IndexIVF::check_compatible_for_merge(const IndexIVF &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 999);
  }
  return result;
}

void sub_1DD04050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::merge_from(faiss::InvertedLists **this, faiss::InvertedLists **a2, uint64_t a3)
{
  this[2] = (faiss::InvertedLists *)((char *)a2[2] + (void)this[2]);
  a2[2] = 0;
}

uint64_t faiss::IndexIVF::replace_invlists(uint64_t this, faiss::InvertedLists *a2, char a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 120))
  {
    this = *(void *)(this + 112);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 120))(this);
    }
    *(void *)(v5 + 112) = 0;
  }
  if (a2)
  {
    if (*((void *)a2 + 1) != *(void *)(v5 + 48))
    {
      memset(&v16, 0, sizeof(v16));
      int v8 = snprintf(0, 0, "Error: '%s' failed", "il->nlist == nlist");
      std::string::resize(&v16, v8 + 1, 0);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v16;
      }
      else {
        int v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v16.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v9, size, "Error: '%s' failed", "il->nlist == nlist");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v16, "void faiss::IndexIVF::replace_invlists(InvertedLists *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1018);
    }
    uint64_t v6 = *((void *)a2 + 2);
    if (v6 != -1 && v6 != *(void *)(v5 + 128))
    {
      memset(&v16, 0, sizeof(v16));
      int v12 = snprintf(0, 0, "Error: '%s' failed", "il->code_size == code_size || il->code_size == InvertedLists::INVALID_CODE_SIZE");
      std::string::resize(&v16, v12 + 1, 0);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v16;
      }
      else {
        int v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v14 = v16.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v13, v14, "Error: '%s' failed", "il->code_size == code_size || il->code_size == InvertedLists::INVALID_CODE_SIZE");
      size_t v15 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v15, &v16, "void faiss::IndexIVF::replace_invlists(InvertedLists *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1021);
    }
  }
  *(void *)(v5 + 112) = a2;
  *(unsigned char *)(v5 + 120) = a3;
  return this;
}

void sub_1DD0407B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::copy_subset_to(faiss::IndexIVF *this, faiss::IndexIVF *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *((void *)this + 6);
  if (v5 != *((void *)a2 + 6))
  {
    memset(&v53, 0, sizeof(v53));
    int v27 = snprintf(0, 0, "Error: '%s' failed", "nlist == other.nlist");
    std::string::resize(&v53, v27 + 1, 0);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v53;
    }
    else {
      uint64_t v28 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v53.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v28, size, "Error: '%s' failed", "nlist == other.nlist");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v53, "virtual void faiss::IndexIVF::copy_subset_to(IndexIVF &, int, idx_t, idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1032);
  }
  if (*((void *)this + 16) != *((void *)a2 + 16))
  {
    memset(&v53, 0, sizeof(v53));
    int v31 = snprintf(0, 0, "Error: '%s' failed", "code_size == other.code_size");
    std::string::resize(&v53, v31 + 1, 0);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v32 = &v53;
    }
    else {
      int v32 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v33 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v33 = v53.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v32, v33, "Error: '%s' failed", "code_size == other.code_size");
    unint64_t v34 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v34, &v53, "virtual void faiss::IndexIVF::copy_subset_to(IndexIVF &, int, idx_t, idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1033);
  }
  if (*((_DWORD *)a2 + 40))
  {
    memset(&v53, 0, sizeof(v53));
    int v35 = snprintf(0, 0, "Error: '%s' failed", "other.direct_map.no()");
    std::string::resize(&v53, v35 + 1, 0);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v36 = &v53;
    }
    else {
      float v36 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v37 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v37 = v53.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v36, v37, "Error: '%s' failed", "other.direct_map.no()");
    int v38 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v38, &v53, "virtual void faiss::IndexIVF::copy_subset_to(IndexIVF &, int, idx_t, idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1034);
  }
  unsigned int v8 = a3;
  if (a3 >= 3)
  {
    memset(&v53, 0, sizeof(v53));
    int v39 = snprintf(0, 0, "Error: '%s' failed: subset type %d not implemented", "subset_type == 0 || subset_type == 1 || subset_type == 2", a3);
    std::string::resize(&v53, v39 + 1, 0);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v40 = &v53;
    }
    else {
      size_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v41 = v53.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v40, v41, "Error: '%s' failed: subset type %d not implemented", "subset_type == 0 || subset_type == 1 || subset_type == 2", a3);
    int v42 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v42, &v53, "virtual void faiss::IndexIVF::copy_subset_to(IndexIVF &, int, idx_t, idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1038);
  }
  if (v5)
  {
    std::string::size_type v11 = 0;
    unint64_t v46 = 0;
    unint64_t v47 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)a2 + 14);
    while (1)
    {
      uint64_t v14 = (***((uint64_t (****)(void, std::string::size_type))this + 14))(*((void *)this + 14), v11);
      v53.__r_.__value_.__r.__words[0] = *((void *)this + 14);
      v53.__r_.__value_.__l.__size_ = (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)v53.__r_.__value_.__l.__data_ + 16))(v53.__r_.__value_.__r.__words[0], v11);
      v53.__r_.__value_.__r.__words[2] = v11;
      if (v8) {
        break;
      }
      if (v14)
      {
        uint64_t v49 = v12;
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t v24 = *(void *)(v53.__r_.__value_.__l.__size_ + 8 * i);
          BOOL v25 = v24 >= a4 && v24 < a5;
          if (v25)
          {
            uint64_t v26 = (*(uint64_t (**)(void, std::string::size_type, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), v11, i);
            uint64_t v50 = *((void *)this + 14);
            uint64_t v51 = (*(uint64_t (**)(uint64_t, std::string::size_type, uint64_t))(*(void *)v50 + 48))(v50, v11, i);
            std::string::size_type v52 = v11;
            (*(void (**)(uint64_t, std::string::size_type, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, v11, v26, v51);
            faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v50);
            ++*((void *)a2 + 2);
          }
        }
LABEL_29:
        uint64_t v12 = v49;
      }
LABEL_30:
      v12 += v14;
      faiss::InvertedLists::ScopedIds::~ScopedIds((faiss::InvertedLists::ScopedIds *)&v53);
      if (++v11 >= *((void *)this + 6)) {
        goto LABEL_33;
      }
    }
    if (v8 == 2)
    {
      uint64_t v49 = v12;
      uint64_t v17 = v14 + v12;
      unint64_t v18 = *((void *)this + 2);
      unint64_t v19 = (v14 + v12) * a4 / v18;
      unint64_t v20 = v19 - v46;
      unint64_t v44 = v17 * a5 / v18;
      unint64_t v45 = v19;
      unint64_t v21 = v44 - v47;
      BOOL v25 = v44 - v47 > v19 - v46;
      unint64_t v48 = v44 - v47 - (v19 - v46);
      if (v25)
      {
        do
        {
          uint64_t v22 = (*(uint64_t (**)(void, std::string::size_type, unint64_t))(**((void **)this + 14)
                                                                                            + 40))(*((void *)this + 14), v11, v20);
          uint64_t v50 = *((void *)this + 14);
          uint64_t v51 = (*(uint64_t (**)(uint64_t, std::string::size_type, unint64_t))(*(void *)v50 + 48))(v50, v11, v20);
          std::string::size_type v52 = v11;
          (*(void (**)(uint64_t, std::string::size_type, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, v11, v22, v51);
          faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v50);
          ++v20;
        }
        while (v20 < v21);
      }
      *((void *)a2 + 2) += v48;
      unsigned int v8 = a3;
      unint64_t v46 = v45;
      unint64_t v47 = v44;
    }
    else
    {
      if (v8 != 1 || !v14) {
        goto LABEL_30;
      }
      uint64_t v49 = v12;
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)(v53.__r_.__value_.__l.__size_ + 8 * j) % a4 == a5)
        {
          uint64_t v16 = (*(uint64_t (**)(void, std::string::size_type, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), v11, j);
          uint64_t v50 = *((void *)this + 14);
          uint64_t v51 = (*(uint64_t (**)(uint64_t, std::string::size_type, uint64_t))(*(void *)v50 + 48))(v50, v11, j);
          std::string::size_type v52 = v11;
          (*(void (**)(uint64_t, std::string::size_type, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, v11, v16, v51);
          faiss::InvertedLists::ScopedCodes::~ScopedCodes((faiss::InvertedLists::ScopedCodes *)&v50);
          ++*((void *)a2 + 2);
        }
      }
    }
    goto LABEL_29;
  }
  uint64_t v12 = 0;
LABEL_33:
  if (v12 != *((void *)this + 2)) {
    faiss::IndexIVF::copy_subset_to();
  }
}

void sub_1DD040EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::IndexIVF::~IndexIVF(faiss::IndexIVF *this)
{
  *(void *)this = &unk_1F383FC58;
  if (*((unsigned char *)this + 120))
  {
    uint64_t v2 = *((void *)this + 14);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 120))(v2);
    }
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)this + 192);
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  if (*((unsigned char *)this + 57))
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  faiss::Index::~Index(this);
}

double faiss::IndexIVFStats::reset(faiss::IndexIVFStats *this)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void faiss::InvertedListScanner::scan_codes_range()
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v1, "scan_codes_range not implemented");
  faiss::FaissException::FaissException(exception, v1, "virtual void faiss::InvertedListScanner::scan_codes_range(size_t, const uint8_t *, const idx_t *, float, RangeQueryResult &) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1126);
}

void sub_1DD0410D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

faiss::InvertedLists::ScopedIds *std::unique_ptr<faiss::InvertedLists::ScopedIds>::reset[abi:ne180100](faiss::InvertedLists::ScopedIds **a1, faiss::InvertedLists::ScopedIds *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    faiss::InvertedLists::ScopedIds::~ScopedIds(result);
    JUMPOUT(0x1E01AF670);
  }
  return result;
}

void *std::vector<faiss::IndexIVFStats>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<faiss::IndexIVFStats>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DD0411DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<faiss::IndexIVFStats>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<faiss::ReservoirTopN<faiss::CMin<float,long long>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::vector<faiss::RangeSearchPartialResult *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD0412A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<faiss::RangeQueryResult *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD041320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void faiss::IndexIVF::copy_subset_to()
{
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Faiss assertion '%s' failed in %s at %s:%d\n", "accu_n == ntotal", "virtual void faiss::IndexIVF::copy_subset_to(IndexIVF &, int, idx_t, idx_t) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/IndexIVF.cpp", 1093);
  abort();
}

void faiss::VectorTransform::apply(faiss::VectorTransform *this, uint64_t a2, const float *a3)
{
}

void faiss::VectorTransform::reverse_transform(faiss::VectorTransform *this, uint64_t a2, const float *a3, float *a4)
{
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "reverse transform not implemented");
  faiss::FaissException::FaissException(exception, v5, "virtual void faiss::VectorTransform::reverse_transform(idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 149);
}

void sub_1DD0414A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double faiss::LinearTransform::LinearTransform(faiss::LinearTransform *this, int a2, int a3, char a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *(void *)this = &unk_1F383EEB8;
  *((unsigned char *)this + 17) = a4;
  *((unsigned char *)this + 18) = 0;
  *((unsigned char *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *(void *)this = &unk_1F383EEB8;
  *((unsigned char *)this + 17) = a4;
  *((unsigned char *)this + 18) = 0;
  *((unsigned char *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  return result;
}

uint64_t faiss::LinearTransform::apply_noalloc(faiss::LinearTransform *this, uint64_t a2, float *b, float *c__)
{
  if (!*((unsigned char *)this + 16))
  {
    memset(&alpha, 0, sizeof(alpha));
    int v15 = snprintf(0, 0, "Error: '%s' failed: Transformation not trained yet", "is_trained");
    std::string::resize(&alpha, v15 + 1, 0);
    if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string alpha = &alpha;
    }
    else {
      p_std::string alpha = (std::string *)alpha.__r_.__value_.__r.__words[0];
    }
    if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(alpha.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = alpha.__r_.__value_.__l.__size_;
    }
    snprintf((char *)p_alpha, size, "Error: '%s' failed: Transformation not trained yet", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &alpha, "virtual void faiss::LinearTransform::apply_noalloc(Index::idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 167);
  }
  if (*((unsigned char *)this + 17))
  {
    uint64_t v4 = (int *)*((void *)this + 6);
    uint64_t v5 = *((int *)this + 3);
    if (v5 != (uint64_t)(*((void *)this + 7) - (void)v4) >> 2)
    {
      memset(&alpha, 0, sizeof(alpha));
      int v23 = snprintf(0, 0, "Error: '%s' failed: Bias not initialized", "b.size() == d_out");
      std::string::resize(&alpha, v23 + 1, 0);
      if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &alpha;
      }
      else {
        uint64_t v24 = (std::string *)alpha.__r_.__value_.__r.__words[0];
      }
      if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v25 = HIBYTE(alpha.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v25 = alpha.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v24, v25, "Error: '%s' failed: Bias not initialized", "b.size() == d_out");
      uint64_t v26 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v26, &alpha, "virtual void faiss::LinearTransform::apply_noalloc(Index::idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 171);
    }
    float v6 = 1.0;
    if (a2 >= 1)
    {
      uint64_t v7 = 0;
      unsigned int v8 = c__;
      do
      {
        uint64_t v9 = v5;
        size_t v10 = v4;
        if ((int)v5 >= 1)
        {
          do
          {
            int v11 = *v10++;
            *(_DWORD *)v8++ = v11;
            --v9;
          }
          while (v9);
        }
        ++v7;
      }
      while (v7 != a2);
    }
  }
  else
  {
    LODWORD(v5) = *((_DWORD *)this + 3);
    float v6 = 0.0;
  }
  float beta = v6;
  uint64_t v12 = (float *)*((void *)this + 3);
  int v13 = *((_DWORD *)this + 2);
  if (v13 * v5 != (uint64_t)(*((void *)this + 4) - (void)v12) >> 2)
  {
    memset(&alpha, 0, sizeof(alpha));
    int v19 = snprintf(0, 0, "Error: '%s' failed: Transformation matrix not initialized", "A.size() == d_out * d_in");
    std::string::resize(&alpha, v19 + 1, 0);
    if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v20 = &alpha;
    }
    else {
      unint64_t v20 = (std::string *)alpha.__r_.__value_.__r.__words[0];
    }
    if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v21 = HIBYTE(alpha.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v21 = alpha.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v20, v21, "Error: '%s' failed: Transformation matrix not initialized", "A.size() == d_out * d_in");
    uint64_t v22 = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(v22, &alpha, "virtual void faiss::LinearTransform::apply_noalloc(Index::idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 182);
  }
  LODWORD(alpha.__r_.__value_.__l.__data_) = 1065353216;
  int n = a2;
  int m = v5;
  int lda = v13;
  return sgemm_("Transposed", "Not transposed", &m, &n, &lda, (float *)&alpha, v12, &lda, b, &lda, &beta, c__, &m);
}

void sub_1DD041890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  if (*(char *)(v2 - 17) < 0) {
    operator delete(*(void **)(v2 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::LinearTransform::transform_transpose(faiss::LinearTransform *this, int a2, float *b, float *c__)
{
  if (*((unsigned char *)this + 17)) {
    operator new[]();
  }
  int v6 = *((_DWORD *)this + 2);
  int k = *((_DWORD *)this + 3);
  int lda = v6;
  int n = a2;
  float beta = 0.0;
  float alpha = 1.0;
  uint64_t result = sgemm_("Not", "Not", &lda, &n, &k, &alpha, *((float **)this + 3), &lda, b, &k, &beta, c__, &lda);
  if (b)
  {
    if (*((unsigned char *)this + 17)) {
      return MEMORY[0x1E01AF650](b, 0x1000C8052888210);
    }
  }
  return result;
}

void faiss::LinearTransform::set_is_orthonormal(faiss::LinearTransform *this)
{
  int v3 = *((_DWORD *)this + 2);
  int v2 = *((_DWORD *)this + 3);
  if (v2 > v3)
  {
    *((unsigned char *)this + 18) = 0;
    return;
  }
  if (!v2)
  {
    *((unsigned char *)this + 18) = 1;
    return;
  }
  if (v3 * v2 > (unint64_t)((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2)) {
    faiss::LinearTransform::set_is_orthonormal();
  }
  std::vector<float>::vector(c__, (v2 * v2));
  int v4 = *((_DWORD *)this + 3);
  int lda = *((_DWORD *)this + 2);
  float alpha = 1.0;
  int n = v4;
  int v12 = 0;
  sgemm_("Transposed", "Not", &n, &n, &lda, &alpha, *((float **)this + 3), &lda, *((float **)this + 3), &lda, (float *)&v12, c__[0], &n);
  *((unsigned char *)this + 18) = 1;
  uint64_t v5 = *((int *)this + 3);
  int v6 = c__[0];
  if ((int)v5 < 1)
  {
    if (!c__[0]) {
      return;
    }
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = c__[0];
    do
    {
      uint64_t v9 = 0;
      size_t v10 = v8;
      do
      {
        float v11 = *v10;
        if (v7 == v9) {
          float v11 = *v10 + -1.0;
        }
        if (fabsf(v11) > 0.00004) {
          *((unsigned char *)this + 18) = 0;
        }
        ++v9;
        v10 += v5;
      }
      while (v5 != v9);
      ++v7;
      ++v8;
    }
    while (v7 != v5);
  }
  c__[1] = v6;
  operator delete(v6);
}

void sub_1DD041B5C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t faiss::LinearTransform::reverse_transform(faiss::LinearTransform *this, int a2, float *a3, float *a4)
{
  if (!*((unsigned char *)this + 18))
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "reverse transform not implemented for non-orthonormal matrices");
    faiss::FaissException::FaissException(exception, v6, "virtual void faiss::LinearTransform::reverse_transform(idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 289);
  }
  return faiss::LinearTransform::transform_transpose(this, a2, a3, a4);
}

void sub_1DD041C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t faiss::LinearTransform::print_if_verbose(uint64_t result, const char *a2, void *a3, int a4, int a5)
{
  if (*(unsigned char *)(result + 72))
  {
    printf("matrix %s: %d*%d [\n", a2, a4, a5);
    if (a5 * a4 > (unint64_t)((uint64_t)(a3[1] - *a3) >> 3))
    {
      memset(&v16, 0, sizeof(v16));
      int v12 = snprintf(0, 0, "Error: '%s' failed", "mat.size() >= n * d");
      std::string::resize(&v16, v12 + 1, 0);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v16;
      }
      else {
        int v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v16.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v13, size, "Error: '%s' failed", "mat.size() >= n * d");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, &v16, "void faiss::LinearTransform::print_if_verbose(const char *, const std::vector<double> &, int, int) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 301);
    }
    if (a4 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a5;
        uint64_t v11 = v8;
        if (a5 >= 1)
        {
          do
          {
            printf("%10.5g ", *(double *)(*a3 + v11));
            v11 += 8;
            --v10;
          }
          while (v10);
        }
        putchar(10);
        ++v9;
        v8 += 8 * a5;
      }
      while (v9 != a4);
    }
    return puts("]");
  }
  return result;
}

void sub_1DD041E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::RandomRotationMatrix::init(faiss::RandomRotationMatrix *this)
{
  int v3 = *((_DWORD *)this + 2);
  int v2 = *((_DWORD *)this + 3);
  int v4 = (char *)this + 24;
  if (v2 <= v3)
  {
    std::vector<float>::resize((uint64_t)this + 24, v3 * v2);
    std::string v16 = (faiss *)*((void *)this + 3);
    faiss::float_randn(v16, (float *)(*((int *)this + 2) * (uint64_t)*((int *)this + 3)));
    faiss::matrix_qr((faiss *)*((unsigned int *)this + 2), *((_DWORD *)this + 3), (__CLPK_real *)v16, v17);
  }
  else
  {
    std::vector<float>::resize((uint64_t)this + 24, (v2 * v2));
    uint64_t v5 = (faiss *)*((void *)this + 3);
    faiss::float_randn(v5, (float *)(*((_DWORD *)this + 3) * *((_DWORD *)this + 3)));
    faiss::matrix_qr((faiss *)*((unsigned int *)this + 3), *((_DWORD *)this + 3), (__CLPK_real *)v5, v6);
    uint64_t v7 = *((unsigned int *)this + 3);
    uint64_t v8 = *((int *)this + 2);
    uint64_t v9 = *((unsigned int *)this + 2);
    if ((int)v7 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v5;
      do
      {
        if ((int)v8 >= 1)
        {
          uint64_t v12 = v9;
          int v13 = v5;
          uint64_t v14 = v11;
          do
          {
            int v15 = *(_DWORD *)v13;
            int v13 = (faiss *)((char *)v13 + 4);
            *(_DWORD *)uint64_t v14 = v15;
            uint64_t v14 = (faiss *)((char *)v14 + 4);
            --v12;
          }
          while (v12);
        }
        ++v10;
        uint64_t v11 = (faiss *)((char *)v11 + 4 * v8);
        uint64_t v5 = (faiss *)((char *)v5 + 4 * v7);
      }
      while (v10 != v7);
    }
    std::vector<float>::resize((uint64_t)v4, (int)v9 * (int)v7);
  }
  *((unsigned char *)this + 18) = 1;
  *((unsigned char *)this + 16) = 1;
}

void faiss::RandomRotationMatrix::train(faiss::RandomRotationMatrix *this, uint64_t a2, const float *a3)
{
}

uint64_t faiss::PCAMatrix::PCAMatrix(uint64_t this, int a2, int a3, float a4, char a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(unsigned char *)(this + 18) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(unsigned char *)(this + 72) = 0;
  *(void *)this = &unk_1F383FE60;
  *(float *)(this + 76) = a4;
  *(unsigned char *)(this + 80) = a5;
  *(_WORD *)(this + 16) = 256;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(void *)(this + 168) = 0;
  *(void *)(this + 88) = 1000;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(unsigned char *)(this + 18) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(unsigned char *)(this + 72) = 0;
  *(void *)this = &unk_1F383FE60;
  *(float *)(this + 76) = a4;
  *(unsigned char *)(this + 80) = a5;
  *(_WORD *)(this + 16) = 256;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(void *)(this + 168) = 0;
  *(void *)(this + 88) = 1000;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void faiss::PCAMatrix::train(faiss::PCAMatrix *this, int *a2, const float *a3)
{
  uint64_t v66 = (uint64_t)a2;
  int v4 = (float *)faiss::fvecs_maybe_subsample((faiss *)*((int *)this + 2), (int **)&v66, (unint64_t *)(*((void *)this + 11) * *((int *)this + 2)), (uint64_t)a3, (const float *)*((unsigned __int8 *)this + 72), 0x4D2u);
  uint64_t v5 = (float **)((char *)this + 104);
  *((void *)this + 14) = *((void *)this + 13);
  unint64_t v6 = *((int *)this + 2);
  v65[0] = 0;
  std::vector<float>::resize((uint64_t)this + 104, v6, v65);
  if (*((unsigned char *)this + 17))
  {
    uint64_t v7 = (_anonymous_namespace_ *)v66;
    uint64_t v8 = *((unsigned int *)this + 2);
    if (v66 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v4;
      do
      {
        if ((int)v8 >= 1)
        {
          uint64_t v11 = *v5;
          uint64_t v12 = v8;
          do
          {
            float v13 = *v10++;
            *uint64_t v11 = v13 + *v11;
            ++v11;
            --v12;
          }
          while (v12);
        }
        uint64_t v9 = (_anonymous_namespace_ *)((char *)v9 + 1);
      }
      while (v9 != v7);
    }
    if ((int)v8 >= 1)
    {
      float v14 = (float)(uint64_t)v7;
      int v15 = *v5;
      do
      {
        *int v15 = *v15 / v14;
        ++v15;
        --v8;
      }
      while (v8);
    }
  }
  if (*((unsigned char *)this + 72))
  {
    printf("mean=[");
    if (*((int *)this + 2) >= 1)
    {
      uint64_t v16 = 0;
      do
        printf("%g ", *(float *)(*((void *)this + 13) + 4 * v16++));
      while (v16 < *((int *)this + 2));
    }
    puts("]");
  }
  uint64_t v17 = *((int *)this + 2);
  if (v66 < v17)
  {
    std::vector<float>::vector(v65, v66 * v17);
    uint64_t v18 = v66;
    if (v66)
    {
      int v19 = 0;
      unint64_t v20 = *((int *)this + 2);
      size_t v21 = *(float **)v65;
      if (v20 <= 1) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = *((int *)this + 2);
      }
      uint64_t v23 = 4 * v20;
      do
      {
        if (v20)
        {
          uint64_t v24 = *v5;
          size_t v25 = v4;
          uint64_t v26 = v21;
          uint64_t v27 = v22;
          do
          {
            float v28 = *v25++;
            float v29 = v28;
            float v30 = *v24++;
            *v26++ = v29 - v30;
            --v27;
          }
          while (v27);
        }
        int v19 = (_anonymous_namespace_ *)((char *)v19 + 1);
        size_t v21 = (float *)((char *)v21 + v23);
        int v4 = (float *)((char *)v4 + v23);
      }
      while (v19 != (_anonymous_namespace_ *)v18);
    }
    std::vector<float>::vector(&b, v18 * v18);
    lda[0] = *((_DWORD *)this + 2);
    n[0] = v66;
    float beta = 0.0;
    float alpha = 1.0;
    ssyrk_("Up", "Transposed", n, lda, &alpha, *(float **)v65, lda, &beta, b, n);
    if (*((unsigned char *)this + 72))
    {
      if (*((int *)this + 2) <= 10)
      {
        int v31 = b;
        puts("gram=");
        uint64_t v32 = v66;
        if (v66 >= 1)
        {
          for (uint64_t i = 0; i < v66; ++i)
          {
            if (v32 >= 1)
            {
              uint64_t v34 = 0;
              do
              {
                float v35 = *v31++;
                printf("%10g ", v35);
                ++v34;
              }
              while (v66 > v34);
            }
            putchar(10);
            uint64_t v32 = v66;
          }
        }
      }
    }
    std::vector<double>::vector(lda, v66 * v66);
    float v36 = (int *)v66;
    if (v66)
    {
      uint64_t v37 = v66 * v66;
      int v38 = b;
      int v39 = *(double **)lda;
      if ((unint64_t)(v66 * v66) <= 1) {
        uint64_t v37 = 1;
      }
      do
      {
        float v40 = *v38++;
        *v39++ = v40;
        --v37;
      }
      while (v37);
    }
    std::vector<double>::vector(n, (unint64_t)v36);
  }
  std::vector<float>::resize((uint64_t)this + 152, (v17 * v17));
  c__ = (float *)*((void *)this + 19);
  uint64_t v42 = *((unsigned int *)this + 2);
  int v43 = v66;
  if ((int)v42 >= 1)
  {
    uint64_t v44 = 0;
    float v45 = (float)-v66;
    unint64_t v46 = *v5;
    unint64_t v47 = (float *)*((void *)this + 19);
    do
    {
      uint64_t v48 = v42;
      uint64_t v49 = v46;
      do
      {
        float v50 = *v49++;
        *v47++ = (float)(v46[v44] * v45) * v50;
        --v48;
      }
      while (v48);
      ++v44;
    }
    while (v44 != v42);
    int v43 = v66;
  }
  v65[0] = v42;
  LODWORD(b) = v43;
  lda[0] = 1065353216;
  ssyrk_("Up", "Non transposed", v65, (int *)&b, (float *)lda, v4, v65, (float *)lda, c__, v65);
  int v51 = *((_DWORD *)this + 2);
  if (*((unsigned char *)this + 72))
  {
    if (v51 <= 10)
    {
      puts("cov=");
      int v51 = *((_DWORD *)this + 2);
      if (v51 >= 1)
      {
        int v52 = 0;
        std::string v53 = c__;
        do
        {
          if (v51 >= 1)
          {
            int v54 = 0;
            do
            {
              float v55 = *v53++;
              printf("%10g ", v55);
              ++v54;
            }
            while (v54 < *((_DWORD *)this + 2));
          }
          putchar(10);
          ++v52;
          int v51 = *((_DWORD *)this + 2);
        }
        while (v52 < v51);
      }
    }
  }
  std::vector<double>::vector(v65, (v51 * v51));
  unint64_t v56 = *((int *)this + 2);
  if (v56)
  {
    LODWORD(v57) = v56 * v56;
    uint64_t v58 = *(float **)v65;
    if ((v56 * v56) <= 1) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = v57;
    }
    do
    {
      float v59 = *c__++;
      *(double *)uint64_t v58 = v59;
      v58 += 2;
      --v57;
    }
    while (v57);
  }
  std::vector<double>::vector(&b, v56);
}

void sub_1DD042760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v26 = *(void **)(v24 - 96);
  if (v26)
  {
    *(void *)(v24 - 88) = v26;
    operator delete(v26);
  }
  if (v23) {
    MEMORY[0x1E01AF650](v23, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void anonymous namespace'::eig(_anonymous_namespace_ *this, __CLPK_doublereal *__a, __CLPK_doublereal *__w, double *a4)
{
  __lworint k = -1;
  __CLPK_integer __info = 0;
  __int lda = (int)this;
  __worint k = 0.0;
  dsyev_("Vectors as well", "Upper", &__lda, __a, &__lda, __w, &__work, &__lwork, &__info);
  __lworint k = (int)__work;
  operator new[]();
}

void faiss::PCAMatrix::prepare_Ab(faiss::PCAMatrix *this)
{
  int v3 = *((_DWORD *)this + 2);
  int v2 = *((_DWORD *)this + 3);
  int v4 = (char *)*((void *)this + 19);
  uint64_t v5 = *((void *)this + 20);
  unint64_t v6 = (v5 - (uint64_t)v4) >> 2;
  if (v6 < v3 * v2)
  {
    memset(&__p, 0, sizeof(__p));
    int v47 = snprintf(0, 0, "Error: '%s' failed: PCA matrix cannot output %d dimensions from %d ", "d_out * d_in <= PCAMat.size()", v2, v3);
    std::string::resize(&__p, v47 + 1, 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    snprintf((char *)p_p, size, "Error: '%s' failed: PCA matrix cannot output %d dimensions from %d ", "d_out * d_in <= PCAMat.size()", *((_DWORD *)this + 3), *((_DWORD *)this + 2));
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &__p, "void faiss::PCAMatrix::prepare_Ab()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 613);
  }
  if (*((unsigned char *)this + 80))
  {
    if (*((_DWORD *)this + 24))
    {
      memset(&__p, 0, sizeof(__p));
      int v51 = snprintf(0, 0, "Error: '%s' failed: both balancing bins and applying a random rotation does not make sense", "balanced_bins == 0");
      std::string::resize(&__p, v51 + 1, 0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v52 = &__p;
      }
      else {
        int v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v53 = __p.__r_.__value_.__l.__size_;
      }
      snprintf((char *)v52, v53, "Error: '%s' failed: both balancing bins and applying a random rotation does not make sense", "balanced_bins == 0");
      int v54 = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(v54, &__p, "void faiss::PCAMatrix::prepare_Ab()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 668);
    }
    LODWORD(__p.__r_.__value_.__r.__words[1]) = *((_DWORD *)this + 3);
    HIDWORD(__p.__r_.__value_.__r.__words[1]) = v2;
    __p.__r_.__value_.__s.__data_[18] = 0;
    LOWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    *(_OWORD *)b = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    char v66 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F383F848;
    faiss::RandomRotationMatrix::init((faiss::RandomRotationMatrix *)&__p);
    uint64_t v7 = *((unsigned int *)this + 3);
    if (*((float *)this + 19) != 0.0 && (int)v7 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *((void *)this + 16);
      uint64_t v10 = b[0];
      do
      {
        float v11 = powf(*(float *)(v9 + 4 * v8), *((float *)this + 19));
        uint64_t v12 = v7;
        float v13 = v10;
        do
        {
          *float v13 = v11 * *v13;
          v13 += v7;
          --v12;
        }
        while (v12);
        ++v8;
        ++v10;
      }
      while (v8 != v7);
    }
    std::vector<float>::resize((uint64_t)this + 24, (int)v7 * (uint64_t)*((int *)this + 2));
    int v14 = *((_DWORD *)this + 3);
    LODWORD(lda.__begin_) = *((_DWORD *)this + 2);
    float alpha = 1.0;
    int k = v14;
    int v59 = 0;
    sgemm_("Not", "Not", (int *)&lda, &k, &k, &alpha, *((float **)this + 19), (int *)&lda, b[0], &k, (float *)&v59, *((float **)this + 3), (int *)&lda);
    faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)&__p);
  }
  else
  {
    uint64_t v27 = (void *)((char *)this + 24);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 24, v4, v5, v6);
    std::vector<float>::resize((uint64_t)this + 24, *((int *)this + 2) * (uint64_t)*((int *)this + 3));
    if (*((float *)this + 19) != 0.0)
    {
      uint64_t v28 = *((unsigned int *)this + 3);
      if ((int)v28 >= 1)
      {
        uint64_t v29 = 0;
        float v30 = (float *)*((void *)this + 3);
        uint64_t v31 = *((void *)this + 16);
        int v32 = *((_DWORD *)this + 2);
        do
        {
          float v33 = powf(*(float *)(v31 + 4 * v29), *((float *)this + 19));
          int v34 = v32;
          if (v32 >= 1)
          {
            do
            {
              *float v30 = v33 * *v30;
              ++v30;
              --v34;
            }
            while (v34);
          }
          ++v29;
        }
        while (v29 != v28);
      }
    }
    int v35 = *((_DWORD *)this + 24);
    if (v35)
    {
      uint64_t v36 = *((int *)this + 3);
      int v37 = (int)v36 / v35;
      if ((int)v36 % v35)
      {
        memset(&__p, 0, sizeof(__p));
        int v55 = snprintf(0, 0, "Error: '%s' failed", "d_out % balanced_bins == 0");
        std::string::resize(&__p, v55 + 1, 0);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v56 = &__p;
        }
        else {
          unint64_t v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v57 = __p.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v56, v57, "Error: '%s' failed", "d_out % balanced_bins == 0");
        uint64_t v58 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v58, &__p, "void faiss::PCAMatrix::prepare_Ab()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 630);
      }
      int v38 = (char *)*((void *)this + 3);
      *uint64_t v27 = 0;
      *((void *)this + 4) = 0;
      *((void *)this + 5) = 0;
      std::vector<float>::resize((uint64_t)this + 24, *((int *)this + 2) * v36);
      std::vector<float>::vector(&__p, *((int *)this + 24));
      std::vector<int>::vector(&lda, *((int *)this + 24));
      if (*((int *)this + 3) >= 1)
      {
        uint64_t v39 = 0;
        do
        {
          uint64_t v40 = *((unsigned int *)this + 24);
          begiint n = lda.__begin_;
          if ((int)v40 < 1)
          {
            int v43 = -1;
          }
          else
          {
            uint64_t v42 = 0;
            int v43 = -1;
            float v44 = 1.0e30;
            do
            {
              if (lda.__begin_[v42] < v37 && *(float *)(__p.__r_.__value_.__r.__words[0] + 4 * v42) < v44)
              {
                int v43 = v42;
                float v44 = *(float *)(__p.__r_.__value_.__r.__words[0] + 4 * v42);
              }
              ++v42;
            }
            while (v40 != v42);
          }
          int v45 = lda.__begin_[v43];
          *(float *)(__p.__r_.__value_.__r.__words[0] + 4 * v43) = *(float *)(*((void *)this + 16) + 4 * v39)
                                                                   + *(float *)(__p.__r_.__value_.__r.__words[0]
                                                                              + 4 * v43);
          begin[v43] = v45 + 1;
          memcpy((void *)(*((void *)this + 3) + 4 * *((_DWORD *)this + 2) * (v45 + v43 * v37)), &v38[4 * *((_DWORD *)this + 2) * (int)v39++], 4 * *((int *)this + 2));
        }
        while (v39 < *((int *)this + 3));
      }
      if (*((unsigned char *)this + 72))
      {
        printf("  bin accu=[");
        if (*((int *)this + 24) >= 1)
        {
          uint64_t v46 = 0;
          do
            printf("%g ", *(float *)(__p.__r_.__value_.__r.__words[0] + 4 * v46++));
          while (v46 < *((int *)this + 24));
        }
        puts("]");
      }
      if (lda.__begin_)
      {
        lda.__end_ = lda.__begin_;
        operator delete(lda.__begin_);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v38) {
        operator delete(v38);
      }
    }
  }
  *((void *)this + 7) = *((void *)this + 6);
  std::vector<float>::resize((uint64_t)this + 48, *((int *)this + 3));
  uint64_t v15 = *((unsigned int *)this + 3);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = *((unsigned int *)this + 2);
    uint64_t v19 = *((void *)this + 6);
    do
    {
      if ((int)v18 < 1)
      {
        float v22 = 0.0;
      }
      else
      {
        unint64_t v20 = (float *)*((void *)this + 13);
        size_t v21 = (float *)(*((void *)this + 3) + v16);
        float v22 = 0.0;
        uint64_t v23 = v18;
        do
        {
          float v24 = *v20++;
          float v25 = v24;
          float v26 = *v21++;
          float v22 = v22 - (float)(v25 * v26);
          --v23;
        }
        while (v23);
      }
      *(float *)(v19 + 4 * v17++) = v22;
      v16 += 4 * (int)v18;
    }
    while (v17 != v15);
  }
  *((unsigned char *)this + 18) = *((float *)this + 19) == 0.0;
}

void sub_1DD043108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::PCAMatrix::copy_from(faiss::PCAMatrix *this, const faiss::PCAMatrix *a2)
{
  if (!*((unsigned char *)a2 + 16))
  {
    memset(&v8, 0, sizeof(v8));
    int v4 = snprintf(0, 0, "Error: '%s' failed", "other.is_trained");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v8.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v5, size, "Error: '%s' failed", "other.is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "void faiss::PCAMatrix::copy_from(const PCAMatrix &)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 600);
  }
  if (this != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 152, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  }
  faiss::PCAMatrix::prepare_Ab(this);
  *((unsigned char *)this + 16) = 1;
}

void sub_1DD0432C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double faiss::ITQMatrix::ITQMatrix(faiss::ITQMatrix *this, int a2)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a2;
  *((unsigned char *)this + 18) = 0;
  *((_WORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  *(void *)this = &unk_1F383FD48;
  *(void *)&double result = 0x7B00000032;
  *(void *)((char *)this + 76) = 0x7B00000032;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a2;
  *((unsigned char *)this + 18) = 0;
  *((_WORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  *(void *)this = &unk_1F383FD48;
  *(void *)&double result = 0x7B00000032;
  *(void *)((char *)this + 76) = 0x7B00000032;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  return result;
}

void faiss::ITQMatrix::train(faiss::ITQMatrix *this, uint64_t a2, float *a3)
{
  int v6 = *((_DWORD *)this + 2);
  unint64_t v7 = v6 * (uint64_t)v6;
  std::vector<double>::vector(c__, v7);
  std::string v8 = (const void *)*((void *)this + 11);
  if (v7 == (uint64_t)(*((void *)this + 12) - (void)v8) >> 3)
  {
    memcpy(c__[0], v8, 8 * v7);
  }
  else
  {
    LODWORD(v50) = v6;
    HIDWORD(v50) = v6;
    char v52 = 0;
    __int16 v51 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    char v56 = 0;
    b = (double *)&unk_1F383F848;
    faiss::RandomRotationMatrix::init((faiss::RandomRotationMatrix *)&b);
    uint64_t v9 = v6 * (uint64_t)v6;
    if (v6)
    {
      uint64_t v10 = (float *)v53;
      float v11 = (double *)c__[0];
      if (v7 <= 1) {
        uint64_t v9 = 1;
      }
      do
      {
        float v12 = *v10++;
        *v11++ = v12;
        --v9;
      }
      while (v9);
    }
    faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)&b);
  }
  unint64_t v13 = v6 * a2;
  std::vector<double>::vector(&b, v13);
  if (v13)
  {
    int v14 = b;
    uint64_t v15 = v6 * a2;
    do
    {
      float v16 = *a3++;
      *v14++ = v16;
      --v15;
    }
    while (v15);
  }
  std::vector<double>::vector(a, v6 * a2);
  std::vector<double>::vector(__a, v7);
  std::vector<double>::vector(__u, v7);
  std::vector<double>::vector(__vt, v7);
  std::vector<double>::vector(__s, v6);
  if (*((int *)this + 19) >= 1)
  {
    int v17 = 0;
    do
    {
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "rotation", c__, v6, v6);
      lda[0] = v6;
      int n = a2;
      alpha.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
      v38.__r_.__value_.__r.__words[0] = 0;
      dgemm_("N", "N", lda, &n, lda, (double *)&alpha, (double *)c__[0], lda, b, lda, (double *)&v38, a[0], lda);
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "rotated_x", a, a2, v6);
      uint64_t v18 = a[0];
      uint64_t v19 = a[0];
      uint64_t v20 = v6 * a2;
      if (v13)
      {
        do
        {
          if (*v19 >= 0.0) {
            double v21 = 1.0;
          }
          else {
            double v21 = -1.0;
          }
          *v19++ = v21;
          --v20;
        }
        while (v20);
      }
      lda[0] = v6;
      int n = a2;
      alpha.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
      v38.__r_.__value_.__r.__words[0] = 0;
      dgemm_("N", "T", lda, lda, &n, (double *)&alpha, v18, lda, b, lda, (double *)&v38, __a[0], lda);
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "cov_mat", __a, v6, v6);
      __CLPK_integer v42 = -1;
      int n = v6;
      __CLPK_integer __info = 0;
      *(double *)std::vector<int> lda = 0.0;
      dgesvd_("A", "A", &n, &n, __a[0], &n, __s[0], __u[0], &n, __vt[0], &n, (__CLPK_doublereal *)lda, &v42, &__info);
      if (__info)
      {
        memset(&alpha, 0, sizeof(alpha));
        int v34 = snprintf(0, 0, "Error: '%s' failed", "info == 0");
        std::string::resize(&alpha, v34 + 1, 0);
        if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string alpha = &alpha;
        }
        else {
          p_std::string alpha = (std::string *)alpha.__r_.__value_.__r.__words[0];
        }
        if ((alpha.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(alpha.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = alpha.__r_.__value_.__l.__size_;
        }
        snprintf((char *)p_alpha, size, "Error: '%s' failed", "info == 0");
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &alpha, "virtual void faiss::ITQMatrix::train(Index::idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 814);
      }
      __CLPK_integer v42 = (int)*(double *)lda;
      std::vector<double>::vector(&alpha, (int)*(double *)lda);
      dgesvd_("A", "A", &n, &n, __a[0], &n, __s[0], __u[0], &n, __vt[0], &n, (__CLPK_doublereal *)alpha.__r_.__value_.__l.__data_, &v42, &__info);
      if (__info)
      {
        memset(&v38, 0, sizeof(v38));
        int v30 = snprintf(0, 0, "Error: '%s' failed: sgesvd returned info=%d", "info == 0", __info);
        std::string::resize(&v38, v30 + 1, 0);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v38;
        }
        else {
          uint64_t v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v32 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v32 = v38.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v31, v32, "Error: '%s' failed: sgesvd returned info=%d", "info == 0", __info);
        float v33 = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(v33, &v38, "virtual void faiss::ITQMatrix::train(Index::idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 831);
      }
      if (alpha.__r_.__value_.__r.__words[0])
      {
        alpha.__r_.__value_.__l.__size_ = alpha.__r_.__value_.__r.__words[0];
        operator delete(alpha.__r_.__value_.__l.__data_);
      }
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "u", __u, v6, v6);
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "vt", __vt, v6, v6);
      lda[0] = v6;
      alpha.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
      v38.__r_.__value_.__r.__words[0] = 0;
      dgemm_("N", "T", lda, lda, lda, (double *)&alpha, __u[0], lda, __vt[0], lda, (double *)&v38, (double *)c__[0], lda);
      faiss::LinearTransform::print_if_verbose((uint64_t)this, "final rot", c__, v6, v6);
      ++v17;
    }
    while (v17 < *((_DWORD *)this + 19));
  }
  std::vector<float>::resize((uint64_t)this + 24, v7);
  if (v6)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (double *)c__[0];
    float v24 = (float *)*((void *)this + 3);
    do
    {
      float v25 = v23;
      float v26 = v24;
      uint64_t v27 = v6;
      do
      {
        double v28 = *v25++;
        float v29 = v28;
        *float v26 = v29;
        v26 += v6;
        --v27;
      }
      while (v27);
      ++v22;
      ++v24;
      v23 += v6;
    }
    while (v22 != v6);
  }
  *((unsigned char *)this + 16) = 1;
  if (__s[0])
  {
    __s[1] = __s[0];
    operator delete(__s[0]);
  }
  if (__vt[0])
  {
    __vt[1] = __vt[0];
    operator delete(__vt[0]);
  }
  if (__u[0])
  {
    __u[1] = __u[0];
    operator delete(__u[0]);
  }
  if (__a[0])
  {
    __a[1] = __a[0];
    operator delete(__a[0]);
  }
  if (a[0])
  {
    a[1] = a[0];
    operator delete(a[0]);
  }
  if (b)
  {
    float v50 = b;
    operator delete(b);
  }
  if (c__[0])
  {
    c__[1] = c__[0];
    operator delete(c__[0]);
  }
}

void sub_1DD043A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  faiss::LinearTransform::~LinearTransform((faiss::LinearTransform *)(v45 - 208));
  int v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(void *)(v45 - 120) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::ITQTransform::ITQTransform(uint64_t this, int a2, int a3, char a4)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(unsigned char *)(this + 16) = 1;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_1F383E630;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 48) = a4;
  *(_DWORD *)(this + 64) = a3;
  *(_DWORD *)(this + 68) = a3;
  *(unsigned char *)(this + 74) = 0;
  *(_WORD *)(this + 72) = 0;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 112) = 0u;
  *(unsigned char *)(this + 128) = 0;
  *(void *)(this + 56) = &unk_1F383FD48;
  *(void *)(this + 132) = 0x7B00000032;
  *(void *)(this + 144) = 0;
  *(void *)(this + 152) = 0;
  *(void *)(this + 160) = 0;
  *(_DWORD *)(this + 184) = a2;
  *(_DWORD *)(this + 188) = a3;
  *(void *)(this + 176) = &unk_1F383EEB8;
  *(_WORD *)(this + 193) = 0;
  *(unsigned char *)(this + 192) = 0;
  *(_OWORD *)(this + 200) = 0u;
  *(_OWORD *)(this + 216) = 0u;
  *(_OWORD *)(this + 232) = 0u;
  *(unsigned char *)(this + 248) = 0;
  if (a2 != a3 && (a4 & 1) == 0)
  {
    memset(&v8, 0, sizeof(v8));
    int v4 = snprintf(0, 0, "Error: '%s' failed", "d_in == d_out");
    std::string::resize(&v8, v4 + 1, 0);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v8;
    }
    else {
      uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v8.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v5, size, "Error: '%s' failed", "d_in == d_out");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v8, "faiss::ITQTransform::ITQTransform(int, int, BOOL)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 870);
  }
  *(_DWORD *)(this + 168) = 10;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

void sub_1DD043D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, faiss::LinearTransform *a12, faiss::ITQMatrix *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0) {
    operator delete(__p);
  }
  faiss::LinearTransform::~LinearTransform(a12);
  faiss::ITQMatrix::~ITQMatrix(a13);
  double v21 = *a11;
  if (*a11)
  {
    *(void *)(a10 + 32) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void faiss::ITQMatrix::~ITQMatrix(faiss::ITQMatrix *this)
{
  *(void *)this = &unk_1F383FD48;
  int v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  faiss::LinearTransform::~LinearTransform(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383FD48;
  int v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::ITQTransform::train(faiss::ITQTransform *this, int *a2, const float *a3)
{
  unint64_t v13 = a2;
  if (!*((unsigned char *)this + 16))
  {
    uint64_t v5 = (faiss *)*((int *)this + 2);
    int v6 = *((_DWORD *)this + 42) * v5;
    if (v6 <= 0x8000) {
      uint64_t v7 = 0x8000;
    }
    else {
      uint64_t v7 = v6;
    }
    faiss::fvecs_maybe_subsample(v5, &v13, (unint64_t *)v7, (uint64_t)a3, 0, 0x4D2u);
    operator new[]();
  }
  memset(&v12, 0, sizeof(v12));
  int v8 = snprintf(0, 0, "Error: '%s' failed", "!is_trained");
  std::string::resize(&v12, v8 + 1, 0);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v12;
  }
  else {
    uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v12.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v9, size, "Error: '%s' failed", "!is_trained");
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(exception, &v12, "virtual void faiss::ITQTransform::train(idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 877);
}

void sub_1DD044288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void faiss::ITQTransform::apply_noalloc(faiss::ITQTransform *this, uint64_t a2, const float *a3, float *a4)
{
  if (*((unsigned char *)this + 16)) {
    operator new[]();
  }
  memset(&v8, 0, sizeof(v8));
  int v4 = snprintf(0, 0, "Error: '%s' failed: Transformation not trained yet", "is_trained");
  std::string::resize(&v8, v4 + 1, 0);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v8;
  }
  else {
    uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v8.__r_.__value_.__l.__size_;
  }
  snprintf((char *)v5, size, "Error: '%s' failed: Transformation not trained yet", "is_trained");
  exceptioint n = __cxa_allocate_exception(0x20uLL);
  faiss::FaissException::FaissException(exception, &v8, "virtual void faiss::ITQTransform::apply_noalloc(Index::idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 950);
}

void sub_1DD044504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double faiss::OPQMatrix::OPQMatrix(faiss::OPQMatrix *this, int a2, int a3, int a4)
{
  if (a4 == -1) {
    int v4 = a2;
  }
  else {
    int v4 = a4;
  }
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = v4;
  *((unsigned char *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  *(void *)this = &unk_1F383FE28;
  *((_DWORD *)this + 19) = a3;
  *(void *)&double result = 0x400000032;
  *((void *)this + 10) = 0x400000032;
  *((_DWORD *)this + 22) = 40;
  *((unsigned char *)this + 104) = 0;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 12) = 0x10000;
  *((void *)this + 14) = 0;
  return result;
}

{
  int v4;
  double result;

  if (a4 == -1) {
    int v4 = a2;
  }
  else {
    int v4 = a4;
  }
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = v4;
  *((unsigned char *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  *(void *)this = &unk_1F383FE28;
  *((_DWORD *)this + 19) = a3;
  *(void *)&double result = 0x400000032;
  *((void *)this + 10) = 0x400000032;
  *((_DWORD *)this + 22) = 40;
  *((unsigned char *)this + 104) = 0;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 12) = 0x10000;
  *((void *)this + 14) = 0;
  return result;
}

void faiss::OPQMatrix::train(unint64_t **this, int *a2, const float *a3)
{
  uint64_t v81 = (uint64_t)a2;
  uint64_t v5 = (const float *)faiss::fvecs_maybe_subsample((faiss *)*((int *)this + 2), (int **)&v81, this[12], (uint64_t)a3, (const float *)*((unsigned __int8 *)this + 104), 0x4D2u);
  int v6 = (float *)v5;
  if (v5 == a3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  int v8 = *((_DWORD *)this + 2);
  int v9 = *((_DWORD *)this + 3);
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  if (*((unsigned char *)this + 104)) {
    printf("OPQMatrix::train: training an OPQ rotation matrix for M=%d from %lld vectors in %dD -> %dD\n", *((_DWORD *)this + 19), v81, *((_DWORD *)this + 2), v9);
  }
  std::vector<float>::vector(b, v81 * (int)v10);
  std::vector<float>::vector(__p, (int)v10);
  float v11 = (int *)v81;
  std::string v12 = (float *)__p[0].__r_.__value_.__r.__words[0];
  if (v81)
  {
    unint64_t v13 = 0;
    uint64_t v14 = *((unsigned int *)this + 2);
    uint64_t v15 = v6;
    do
    {
      uint64_t v16 = v14;
      int v17 = v12;
      if ((int)v14 >= 1)
      {
        do
        {
          float v18 = *v15++;
          *int v17 = v18 + *v17;
          ++v17;
          --v16;
        }
        while (v16);
      }
      unint64_t v13 = (int *)((char *)v13 + 1);
    }
    while (v13 != v11);
    std::string v12 = (float *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    unint64_t v19 = v10;
    do
    {
      *std::string v12 = *v12 / (float)(uint64_t)v11;
      ++v12;
      --v19;
    }
    while (v19);
    std::string v12 = (float *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    uint64_t v20 = 0;
    double v21 = (float *)b[0];
    uint64_t v22 = *((unsigned int *)this + 2);
    do
    {
      uint64_t v23 = v22;
      float v24 = v12;
      if ((int)v22 >= 1)
      {
        do
        {
          float v25 = *v6++;
          float v26 = v25;
          float v27 = *v24++;
          *v21++ = v26 - v27;
          --v23;
        }
        while (v23);
      }
      v21 += (int)v10 - (uint64_t)(int)v22;
      uint64_t v20 = (int *)((char *)v20 + 1);
    }
    while (v20 != v11);
  }
  if (v12)
  {
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    operator delete(v12);
  }
  a = (float *)this[3];
  uint64_t v28 = (char *)this[4] - (char *)a;
  if (v28)
  {
    if ((int)v10 * (uint64_t)v9 != v28 >> 2)
    {
      memset(__p, 0, 24);
      int v29 = snprintf(0, 0, "Error: '%s' failed", "A.size() == d * d2");
      std::string::resize(__p, v29 + 1, 0);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v30 = __p;
      }
      else {
        int v30 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p[0].__r_.__value_.__l.__size_;
      }
      snprintf((char *)v30, size, "Error: '%s' failed", "A.size() == d * d2");
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      faiss::FaissException::FaissException(exception, __p, "virtual void faiss::OPQMatrix::train(Index::idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1056);
    }
  }
  else
  {
    std::vector<float>::resize((uint64_t)(this + 3), (int)v10 * (uint64_t)(int)v10);
    a = (float *)this[3];
    if (*((unsigned char *)this + 104)) {
      printf("  OPQMatrix::train: making random %zd*%zd rotation\n", (int)v10, (int)v10);
    }
    faiss::float_randn((faiss *)a, (float *)((int)v10 * (uint64_t)(int)v10));
    faiss::matrix_qr((faiss *)v10, v10, a, v33);
    std::vector<float>::resize((uint64_t)(this + 3), (int)v10 * (uint64_t)v9);
  }
  std::vector<float>::vector(c__, v81 * v9);
  std::vector<float>::vector(v78, v81 * v9);
  std::vector<float>::vector(v77, v81 * (int)v10);
  uint64_t v57 = (int)v10 * (uint64_t)(int)v10;
  std::vector<float>::vector(v76, 4 * v57);
  faiss::ProductQuantizer::ProductQuantizer((faiss::ProductQuantizer *)__p, v9, *((int *)this + 19), 8uLL);
  int v34 = (std::string *)this[14];
  if (v34) {
    int v35 = (std::string *)this[14];
  }
  else {
    int v35 = __p;
  }
  uint64_t v36 = (faiss *)std::vector<unsigned char>::vector(v70, v81 * v35[1].__r_.__value_.__l.__size_);
  uint64_t v56 = v9;
  int v58 = v9;
  double v37 = faiss::getmillisecs(v36);
  if (*((int *)this + 20) >= 1)
  {
    double v38 = v37;
    int v39 = 0;
    if (v34) {
      uint64_t v40 = v34;
    }
    else {
      uint64_t v40 = __p;
    }
    do
    {
      lda[0] = v10;
      int n = v81;
      int m = v58;
      float alpha = 1.0;
      int k = 0;
      sgemm_("Transposed", "Not transposed", &m, &n, lda, &alpha, a, lda, (float *)b[0], lda, (float *)&k, (float *)c__[0], &m);
      HIDWORD(v40[3].__r_.__value_.__r.__words[0]) = 1000;
      uint64_t v41 = 84;
      if (!v39) {
        uint64_t v41 = 88;
      }
      LODWORD(v40[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)((char *)this + v41);
      v40[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 104);
      faiss::ProductQuantizer::train((faiss::ProductQuantizer *)v35, v81, (const float *)c__[0]);
      if (*((unsigned char *)this + 104)) {
        puts("    encode / decode");
      }
      if (v40[4].__r_.__value_.__r.__words[0]) {
        faiss::ProductQuantizer::compute_codes_with_assign_index(v35, (const float *)c__[0], v70[0]);
      }
      else {
        faiss::ProductQuantizer::compute_codes((faiss::ProductQuantizer *)v35, (const float *)c__[0], v70[0], v81);
      }
      faiss::ProductQuantizer::decode(v35, v70[0], (float *)v78[0], v81);
      float v43 = faiss::fvec_L2sqr((faiss *)v78[0], (const float *)c__[0], v81 * v56);
      float v44 = (int *)v81;
      int v45 = *((unsigned __int8 *)this + 104);
      if (*((unsigned char *)this + 104))
      {
        float v46 = v43;
        int v47 = v40[2].__r_.__value_.__r.__words[1];
        double v48 = faiss::getmillisecs(v42);
        printf("    Iteration %d (%d PQ iterations):%.3f s, obj=%g\n", v39, v47, (v48 - v38) / 1000.0, (float)(v46 / (float)(uint64_t)v44));
        LODWORD(v44) = v81;
        int v45 = *((unsigned __int8 *)this + 104);
      }
      uint64_t v49 = (__CLPK_real *)v76[0];
      int n = v58;
      int m = v10;
      float alpha = 1.0;
      int k = (int)v44;
      int beta = 0;
      if (v45) {
        puts("    X * recons");
      }
      sgemm_("Not", "Transposed", &n, &m, &k, &alpha, (float *)v78[0], &n, (float *)b[0], &m, (float *)&beta, (float *)v77[0], &n);
      float v50 = &v49[v57];
      __CLPK_integer v63 = -1;
      __CLPK_integer ldc = -1;
      float v62 = 0.0;
      sgesvd_("All", "All", &n, &m, (__CLPK_real *)v77[0], &n, &v49[2 * v57], v50, &n, v49, &m, &v62, &ldc, &v63);
      __CLPK_integer ldc = (int)v62;
      std::vector<float>::vector(lda, (int)v62);
      sgesvd_("All", "All", &n, &m, (__CLPK_real *)v77[0], &n, &v49[2 * v57], v50, &n, v49, &m, *(__CLPK_real **)lda, &ldc, &v63);
      sgemm_("Transposed", "Transposed", &m, &n, &n, &alpha, v49, &m, v50, &n, (float *)&beta, a, &m);
      if (*(void *)lda)
      {
        uint64_t v61 = *(__CLPK_real **)lda;
        operator delete(*(void **)lda);
      }
      HIDWORD(v40[2].__r_.__value_.__r.__words[0]) = 1;
      ++v39;
    }
    while (v39 < *((_DWORD *)this + 20));
  }
  unsigned int v51 = *((_DWORD *)this + 2);
  if (v10 > v51)
  {
    LODWORD(v52) = *((_DWORD *)this + 3);
    if ((int)v52 < 1)
    {
      long long v55 = (char *)(this + 3);
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      long long v55 = (char *)(this + 3);
      do
      {
        memmove((char *)this[3] + 4 * v54 * *((int *)this + 2), (char *)this[3] + v53, 4 * *((int *)this + 2));
        ++v54;
        uint64_t v52 = *((int *)this + 3);
        v53 += 4 * (int)v10;
      }
      while (v54 < v52);
      unsigned int v51 = *((_DWORD *)this + 2);
    }
    std::vector<float>::resize((uint64_t)v55, (int)(v51 * v52));
  }
  *((unsigned char *)this + 16) = 1;
  *((unsigned char *)this + 18) = 1;
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v74)
  {
    uint64_t v75 = v74;
    operator delete(v74);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
  if (c__[0])
  {
    c__[1] = c__[0];
    operator delete(c__[0]);
  }
  if (b[0])
  {
    b[1] = b[0];
    operator delete(b[0]);
  }
  if (v7) {
    MEMORY[0x1E01AF650](v7, 0x1000C8052888210);
  }
}

void sub_1DD044DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  __cxa_free_exception(v40);
  if (a40 < 0) {
    operator delete(__p);
  }
  float v44 = *(void **)(v42 - 152);
  if (v44)
  {
    *(void *)(v42 - 144) = v44;
    operator delete(v44);
  }
  if (v41) {
    MEMORY[0x1E01AF650](v41, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::NormalizationTransform::NormalizationTransform(uint64_t this, int a2, float a3)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a2;
  *(unsigned char *)(this + 16) = 1;
  *(void *)this = &unk_1F383F910;
  *(float *)(this + 20) = a3;
  return this;
}

{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a2;
  *(unsigned char *)(this + 16) = 1;
  *(void *)this = &unk_1F383F910;
  *(float *)(this + 20) = a3;
  return this;
}

double faiss::NormalizationTransform::NormalizationTransform(faiss::NormalizationTransform *this)
{
  double result = NAN;
  *((void *)this + 1) = -1;
  *((unsigned char *)this + 16) = 1;
  *(void *)this = &unk_1F383F910;
  *((_DWORD *)this + 5) = -1082130432;
  return result;
}

{
  double result;

  double result = NAN;
  *((void *)this + 1) = -1;
  *((unsigned char *)this + 16) = 1;
  *(void *)this = &unk_1F383F910;
  *((_DWORD *)this + 5) = -1082130432;
  return result;
}

void faiss::NormalizationTransform::apply_noalloc(faiss::NormalizationTransform *this, uint64_t a2, const float *__src, float *__dst)
{
  if (*((float *)this + 5) != 2.0)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "not implemented");
    faiss::FaissException::FaissException(exception, v10, "virtual void faiss::NormalizationTransform::apply_noalloc(idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1217);
  }
  memcpy(__dst, __src, 4 * a2 * *((int *)this + 2));
  unint64_t v8 = *((int *)this + 2);
  faiss::fvec_renorm_L2(v8, a2, __dst, v7);
}

void sub_1DD0450C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *faiss::NormalizationTransform::reverse_transform(faiss::NormalizationTransform *this, uint64_t a2, const float *__src, float *__dst)
{
  return memcpy(__dst, __src, 4 * a2 * *((int *)this + 2));
}

uint64_t faiss::CenteringTransform::CenteringTransform(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F383F1D8;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a2;
  *(void *)this = &unk_1F383F1D8;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

void faiss::CenteringTransform::train(faiss::CenteringTransform *this, uint64_t a2, float *a3)
{
  if (a2 <= 0)
  {
    memset(&v20, 0, sizeof(v20));
    int v16 = snprintf(0, 0, "Error: '%s' failed: need at least one training vector", "n > 0");
    std::string::resize(&v20, v16 + 1, 0);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = &v20;
    }
    else {
      int v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v20.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v17, size, "Error: '%s' failed: need at least one training vector", "n > 0");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v20, "virtual void faiss::CenteringTransform::train(Index::idx_t, const float *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1237);
  }
  int v6 = (float **)((char *)this + 24);
  unint64_t v7 = *((int *)this + 2);
  LODWORD(v20.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 24, v7, &v20);
  uint64_t v8 = 0;
  unint64_t v9 = *((int *)this + 2);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = *((int *)this + 2);
  }
  do
  {
    while (!v9)
    {
      if (a2 == ++v8) {
        goto LABEL_14;
      }
    }
    float v11 = *v6;
    uint64_t v12 = v10;
    do
    {
      float v13 = *a3++;
      *float v11 = v13 + *v11;
      ++v11;
      --v12;
    }
    while (v12);
  }
  while (a2 - 1 != v8++);
  uint64_t v15 = *v6;
  do
  {
    *uint64_t v15 = *v15 / (float)a2;
    ++v15;
    --v9;
  }
  while (v9);
LABEL_14:
  *((unsigned char *)this + 16) = 1;
}

void sub_1DD0452FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::CenteringTransform::apply_noalloc(uint64_t this, uint64_t a2, float *a3, float *a4)
{
  if (!*(unsigned char *)(this + 16))
  {
    memset(&v16, 0, sizeof(v16));
    int v12 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v16, v12 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v13 = &v16;
    }
    else {
      float v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v16.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v13, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::CenteringTransform::apply_noalloc(idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1253);
  }
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    unsigned int v5 = *(_DWORD *)(this + 8);
    if (v5 <= 1) {
      int v6 = 1;
    }
    else {
      int v6 = *(_DWORD *)(this + 8);
    }
    do
    {
      if (v5)
      {
        unint64_t v7 = *(float **)(this + 24);
        uint64_t v8 = v6;
        do
        {
          float v9 = *a3++;
          float v10 = v9;
          float v11 = *v7++;
          *a4++ = v10 - v11;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a2);
  }
  return this;
}

void sub_1DD045454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t faiss::CenteringTransform::reverse_transform(uint64_t this, uint64_t a2, float *a3, float *a4)
{
  if (!*(unsigned char *)(this + 16))
  {
    memset(&v16, 0, sizeof(v16));
    int v12 = snprintf(0, 0, "Error: '%s' failed", "is_trained");
    std::string::resize(&v16, v12 + 1, 0);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v13 = &v16;
    }
    else {
      float v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v16.__r_.__value_.__l.__size_;
    }
    snprintf((char *)v13, size, "Error: '%s' failed", "is_trained");
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    faiss::FaissException::FaissException(exception, &v16, "virtual void faiss::CenteringTransform::reverse_transform(idx_t, const float *, float *) const", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1264);
  }
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    unsigned int v5 = *(_DWORD *)(this + 8);
    if (v5 <= 1) {
      int v6 = 1;
    }
    else {
      int v6 = *(_DWORD *)(this + 8);
    }
    do
    {
      if (v5)
      {
        unint64_t v7 = *(float **)(this + 24);
        uint64_t v8 = v6;
        do
        {
          float v9 = *a3++;
          float v10 = v9;
          float v11 = *v7++;
          *a4++ = v10 + v11;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a2);
  }
  return this;
}

void sub_1DD0455AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

faiss::RemapDimensionsTransform *faiss::RemapDimensionsTransform::RemapDimensionsTransform(faiss::RemapDimensionsTransform *this, int a2, int a3, int *a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((unsigned char *)this + 16) = 1;
  *(void *)this = &unk_1F383F9F8;
  *((void *)this + 3) = 0;
  uint64_t v8 = (_DWORD **)((char *)this + 24);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)this + 1, a3);
  if (a3 >= 1)
  {
    float v9 = *v8;
    uint64_t v10 = a3;
    do
    {
      int v12 = *a4++;
      int v11 = v12;
      *float v9 = v12;
      if (v12 != -1 && (v11 < 0 || v11 >= a2))
      {
        memset(&v18, 0, sizeof(v18));
        int v14 = snprintf(0, 0, "Error: '%s' failed", "map[i] == -1 || (map[i] >= 0 && map[i] < d_in)");
        std::string::resize(&v18, v14 + 1, 0);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v18;
        }
        else {
          uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v18.__r_.__value_.__l.__size_;
        }
        snprintf((char *)v15, size, "Error: '%s' failed", "map[i] == -1 || (map[i] >= 0 && map[i] < d_in)");
        exceptioint n = __cxa_allocate_exception(0x20uLL);
        faiss::FaissException::FaissException(exception, &v18, "faiss::RemapDimensionsTransform::RemapDimensionsTransform(int, int, const int *)", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 1285);
      }
      ++v9;
      --v10;
    }
    while (v10);
  }
  return this;
}

void sub_1DD04574C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::string v18 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 32) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

faiss::RemapDimensionsTransform *faiss::RemapDimensionsTransform::RemapDimensionsTransform(faiss::RemapDimensionsTransform *this, int a2, int a3, char a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  uint64_t v8 = (uint64_t *)((char *)this + 24);
  *(void *)this = &unk_1F383F9F8;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<int>::value_type __x = -1;
  std::vector<int>::resize((std::vector<int> *)this + 1, a3, &__x);
  if (a4)
  {
    if (a2 >= a3)
    {
      if (a3 >= 1)
      {
        int v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = *v8;
        do
        {
          *(_DWORD *)(v17 + 4 * v16++) = v15 / a3;
          v15 += a2;
        }
        while (a3 != v16);
      }
    }
    else if (a2 >= 1)
    {
      int v9 = 0;
      int v10 = 0;
      uint64_t v11 = *v8;
      do
      {
        *(_DWORD *)(v11 + 4 * (v9 / a2)) = v10++;
        v9 += a3;
      }
      while (a2 != v10);
    }
  }
  else
  {
    if (a2 >= a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v8;
      do
      {
        *(_DWORD *)(v14 + 4 * v13) = v13;
        ++v13;
      }
      while (v12 != v13);
    }
  }
  return this;
}

void sub_1DD0458BC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

uint64_t faiss::RemapDimensionsTransform::apply_noalloc(uint64_t this, uint64_t a2, const float *a3, float *a4)
{
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(unsigned int *)(this + 12);
    uint64_t v6 = *(int *)(this + 8);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(this + 24);
        do
        {
          uint64_t v9 = *(unsigned int *)(v8 + v7 * 4);
          if ((v9 & 0x80000000) != 0) {
            float v10 = 0.0;
          }
          else {
            float v10 = a3[v9];
          }
          a4[v7++] = v10;
        }
        while (v5 != v7);
      }
      a3 += v6;
      ++v4;
      a4 += (int)v5;
    }
    while (v4 != a2);
  }
  return this;
}

void faiss::RemapDimensionsTransform::reverse_transform(faiss::RemapDimensionsTransform *this, uint64_t a2, const float *a3, float *a4)
{
  uint64_t v4 = a4;
  bzero(a4, 4 * a2 * *((int *)this + 2));
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *((unsigned int *)this + 3);
    uint64_t v10 = *((int *)this + 2);
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *((void *)this + 3);
        do
        {
          uint64_t v13 = *(unsigned int *)(v12 + v11 * 4);
          if ((v13 & 0x80000000) == 0) {
            v4[v13] = a3[v11];
          }
          ++v11;
        }
        while (v9 != v11);
      }
      v4 += v10;
      ++v8;
      a3 += (int)v9;
    }
    while (v8 != a2);
  }
}

void faiss::RemapDimensionsTransform::~RemapDimensionsTransform(faiss::RemapDimensionsTransform *this)
{
  *(void *)this = &unk_1F383F9F8;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383F9F8;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::ITQTransform::~ITQTransform(faiss::ITQTransform *this)
{
  *(void *)this = &unk_1F383E630;
  faiss::LinearTransform::~LinearTransform((faiss::ITQTransform *)((char *)this + 176));
  *((void *)this + 7) = &unk_1F383FD48;
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  faiss::LinearTransform::~LinearTransform((faiss::ITQTransform *)((char *)this + 56));
  std::vector<int>::size_type v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F383E630;
  faiss::LinearTransform::~LinearTransform((faiss::ITQTransform *)((char *)this + 176));
  *((void *)this + 7) = &unk_1F383FD48;
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  faiss::LinearTransform::~LinearTransform((faiss::ITQTransform *)((char *)this + 56));
  std::vector<int>::size_type v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1E01AF670);
}

void faiss::OPQMatrix::~OPQMatrix(faiss::OPQMatrix *this)
{
  faiss::LinearTransform::~LinearTransform(this);
  JUMPOUT(0x1E01AF670);
}

void faiss::NormalizationTransform::~NormalizationTransform(faiss::NormalizationTransform *this)
{
}

void faiss::CenteringTransform::~CenteringTransform(faiss::CenteringTransform *this)
{
  *(void *)this = &unk_1F383F1D8;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F383F1D8;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1E01AF670);
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    }
    else {
      int v15 = 0;
    }
    std::string v18 = &v15[4 * v12];
    unint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    double v21 = v18;
    do
    {
      *(_DWORD *)double v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DD045FE4(_Unwind_Exception *exception_object)
{
  std::vector<int>::size_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      int v15 = 0;
    }
    std::string v18 = (int *)&v15[4 * v12];
    unint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    double v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = (int *)&v15[4 * v14];
    begiint n = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--std::string v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void faiss::LinearTransform::set_is_orthonormal()
{
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Faiss assertion '%s' failed in %s at %s:%d\n", "A.size() >= d_out * d_in", "void faiss::LinearTransform::set_is_orthonormal()", "/Library/Caches/com.apple.xbs/Sources/VisualSearch/VisualIntelligence/VisualIntelligence/Vendor/faiss_search/faiss/faiss/VectorTransform.cpp", 249);
  abort();
}

uint64_t sub_1DD046178()
{
  return MEMORY[0x1F40E3008]();
}

uint64_t sub_1DD046188()
{
  return MEMORY[0x1F40E3020]();
}

uint64_t sub_1DD046198()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_1DD0461A8()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_1DD0461B8()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_1DD0461C8()
{
  return MEMORY[0x1F40E30F0]();
}

uint64_t sub_1DD0461D8()
{
  return MEMORY[0x1F40E3108]();
}

uint64_t sub_1DD0461E8()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t sub_1DD0461F8()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t sub_1DD046208()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t sub_1DD046218()
{
  return MEMORY[0x1F40E32B0]();
}

uint64_t sub_1DD046228()
{
  return MEMORY[0x1F40E32C8]();
}

uint64_t sub_1DD046238()
{
  return MEMORY[0x1F40E3308]();
}

uint64_t sub_1DD046248()
{
  return MEMORY[0x1F40E33E8]();
}

uint64_t sub_1DD046258()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1DD046268()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t sub_1DD046278()
{
  return MEMORY[0x1F40E3590]();
}

uint64_t sub_1DD046288()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t sub_1DD046298()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1DD0462A8()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1DD0462B8()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1DD0462C8()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1DD0462D8()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1DD0462E8()
{
  return MEMORY[0x1F40E3A90]();
}

uint64_t sub_1DD0462F8()
{
  return MEMORY[0x1F40E3A98]();
}

uint64_t sub_1DD046308()
{
  return MEMORY[0x1F40E3AB0]();
}

uint64_t sub_1DD046318()
{
  return MEMORY[0x1F40E3AC0]();
}

uint64_t sub_1DD046328()
{
  return MEMORY[0x1F40E3F58]();
}

uint64_t sub_1DD046338()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t sub_1DD046348()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t sub_1DD046358()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t sub_1DD046368()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1DD046378()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1DD046388()
{
  return MEMORY[0x1F40E48D8]();
}

uint64_t sub_1DD046398()
{
  return MEMORY[0x1F40E48E8]();
}

uint64_t sub_1DD0463A8()
{
  return MEMORY[0x1F40E48F8]();
}

uint64_t sub_1DD0463B8()
{
  return MEMORY[0x1F40E4910]();
}

uint64_t sub_1DD0463C8()
{
  return MEMORY[0x1F40E4938]();
}

uint64_t sub_1DD0463D8()
{
  return MEMORY[0x1F40E4970]();
}

uint64_t sub_1DD0463E8()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1DD0463F8()
{
  return MEMORY[0x1F40E49D0]();
}

uint64_t sub_1DD046408()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t sub_1DD046418()
{
  return MEMORY[0x1F40E49F8]();
}

uint64_t sub_1DD046428()
{
  return MEMORY[0x1F40E4A50]();
}

uint64_t sub_1DD046438()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_1DD046448()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_1DD046458()
{
  return MEMORY[0x1F40E4B20]();
}

uint64_t sub_1DD046468()
{
  return MEMORY[0x1F40E4B30]();
}

uint64_t sub_1DD046478()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1DD046488()
{
  return MEMORY[0x1F40E4BE0]();
}

uint64_t sub_1DD046498()
{
  return MEMORY[0x1F40E4C30]();
}

uint64_t sub_1DD0464A8()
{
  return MEMORY[0x1F40E4C40]();
}

uint64_t sub_1DD0464B8()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1DD0464C8()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_1DD0464D8()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1DD0464E8()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1DD0464F8()
{
  return MEMORY[0x1F40E4E10]();
}

uint64_t sub_1DD046508()
{
  return MEMORY[0x1F40E4EF0]();
}

uint64_t sub_1DD046518()
{
  return MEMORY[0x1F40E5188]();
}

uint64_t sub_1DD046528()
{
  return MEMORY[0x1F40E51F0]();
}

uint64_t sub_1DD046538()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t sub_1DD046548()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t sub_1DD046558()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t sub_1DD046568()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1DD046578()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_1DD046588()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1DD046598()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1DD0465A8()
{
  return MEMORY[0x1F40E5500]();
}

uint64_t sub_1DD0465B8()
{
  return MEMORY[0x1F40E5510]();
}

uint64_t sub_1DD0465C8()
{
  return MEMORY[0x1F40E5728]();
}

uint64_t sub_1DD0465D8()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1DD0465E8()
{
  return MEMORY[0x1F40E5A58]();
}

uint64_t sub_1DD0465F8()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t sub_1DD046608()
{
  return MEMORY[0x1F40E5AF0]();
}

uint64_t sub_1DD046618()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t sub_1DD046628()
{
  return MEMORY[0x1F413C668]();
}

uint64_t sub_1DD046638()
{
  return MEMORY[0x1F413C678]();
}

uint64_t sub_1DD046648()
{
  return MEMORY[0x1F413C690]();
}

uint64_t sub_1DD046658()
{
  return MEMORY[0x1F413C698]();
}

uint64_t sub_1DD046668()
{
  return MEMORY[0x1F413C6F0]();
}

uint64_t sub_1DD046678()
{
  return MEMORY[0x1F413C700]();
}

uint64_t sub_1DD046688()
{
  return MEMORY[0x1F413C710]();
}

uint64_t sub_1DD046698()
{
  return MEMORY[0x1F413C720]();
}

uint64_t sub_1DD0466A8()
{
  return MEMORY[0x1F413C748]();
}

uint64_t sub_1DD0466B8()
{
  return MEMORY[0x1F413C750]();
}

uint64_t sub_1DD0466C8()
{
  return MEMORY[0x1F413C758]();
}

uint64_t sub_1DD0466D8()
{
  return MEMORY[0x1F413C768]();
}

uint64_t sub_1DD0466E8()
{
  return MEMORY[0x1F413C7F8]();
}

uint64_t sub_1DD0466F8()
{
  return MEMORY[0x1F413C800]();
}

uint64_t sub_1DD046708()
{
  return MEMORY[0x1F413C808]();
}

uint64_t sub_1DD046718()
{
  return MEMORY[0x1F413CC88]();
}

uint64_t sub_1DD046728()
{
  return MEMORY[0x1F413CC98]();
}

uint64_t sub_1DD046738()
{
  return MEMORY[0x1F413CCA0]();
}

uint64_t sub_1DD046748()
{
  return MEMORY[0x1F413CCB0]();
}

uint64_t sub_1DD046758()
{
  return MEMORY[0x1F413CCB8]();
}

uint64_t sub_1DD046768()
{
  return MEMORY[0x1F413CCD0]();
}

uint64_t sub_1DD046778()
{
  return MEMORY[0x1F413CCE0]();
}

uint64_t sub_1DD046788()
{
  return MEMORY[0x1F413D178]();
}

uint64_t sub_1DD046798()
{
  return MEMORY[0x1F413D180]();
}

uint64_t sub_1DD0467A8()
{
  return MEMORY[0x1F413D188]();
}

uint64_t sub_1DD0467B8()
{
  return MEMORY[0x1F413D198]();
}

uint64_t sub_1DD0467C8()
{
  return MEMORY[0x1F413D1A0]();
}

uint64_t sub_1DD0467D8()
{
  return MEMORY[0x1F413D1A8]();
}

uint64_t sub_1DD0467E8()
{
  return MEMORY[0x1F413D1B0]();
}

uint64_t sub_1DD0467F8()
{
  return MEMORY[0x1F413D1B8]();
}

uint64_t sub_1DD046808()
{
  return MEMORY[0x1F413D1C0]();
}

uint64_t sub_1DD046818()
{
  return MEMORY[0x1F413D1C8]();
}

uint64_t sub_1DD046828()
{
  return MEMORY[0x1F413D1D0]();
}

uint64_t sub_1DD046838()
{
  return MEMORY[0x1F413D1D8]();
}

uint64_t sub_1DD046848()
{
  return MEMORY[0x1F413D1E0]();
}

uint64_t sub_1DD046858()
{
  return MEMORY[0x1F413D1E8]();
}

uint64_t sub_1DD046868()
{
  return MEMORY[0x1F413D1F0]();
}

uint64_t sub_1DD046878()
{
  return MEMORY[0x1F413D1F8]();
}

uint64_t sub_1DD046888()
{
  return MEMORY[0x1F413D200]();
}

uint64_t sub_1DD046898()
{
  return MEMORY[0x1F413D208]();
}

uint64_t sub_1DD0468A8()
{
  return MEMORY[0x1F413D210]();
}

uint64_t sub_1DD0468B8()
{
  return MEMORY[0x1F413D218]();
}

uint64_t sub_1DD0468C8()
{
  return MEMORY[0x1F413D220]();
}

uint64_t sub_1DD0468D8()
{
  return MEMORY[0x1F413D228]();
}

uint64_t sub_1DD0468E8()
{
  return MEMORY[0x1F413D240]();
}

uint64_t sub_1DD0468F8()
{
  return MEMORY[0x1F413D248]();
}

uint64_t sub_1DD046908()
{
  return MEMORY[0x1F413D250]();
}

uint64_t sub_1DD046918()
{
  return MEMORY[0x1F413D258]();
}

uint64_t sub_1DD046928()
{
  return MEMORY[0x1F413D260]();
}

uint64_t sub_1DD046938()
{
  return MEMORY[0x1F413D268]();
}

uint64_t sub_1DD046948()
{
  return MEMORY[0x1F413D270]();
}

uint64_t sub_1DD046958()
{
  return MEMORY[0x1F413D2A0]();
}

uint64_t sub_1DD046968()
{
  return MEMORY[0x1F413D2A8]();
}

uint64_t sub_1DD046978()
{
  return MEMORY[0x1F413D2B8]();
}

uint64_t sub_1DD046988()
{
  return MEMORY[0x1F413D2C0]();
}

uint64_t sub_1DD046998()
{
  return MEMORY[0x1F413D2C8]();
}

uint64_t sub_1DD0469A8()
{
  return MEMORY[0x1F413D2D0]();
}

uint64_t sub_1DD0469B8()
{
  return MEMORY[0x1F413D2D8]();
}

uint64_t sub_1DD0469C8()
{
  return MEMORY[0x1F413D2E0]();
}

uint64_t sub_1DD0469D8()
{
  return MEMORY[0x1F413D300]();
}

uint64_t sub_1DD0469E8()
{
  return MEMORY[0x1F413D308]();
}

uint64_t sub_1DD0469F8()
{
  return MEMORY[0x1F413D310]();
}

uint64_t sub_1DD046A08()
{
  return MEMORY[0x1F413D338]();
}

uint64_t sub_1DD046A18()
{
  return MEMORY[0x1F413D340]();
}

uint64_t sub_1DD046A28()
{
  return MEMORY[0x1F413D348]();
}

uint64_t sub_1DD046A38()
{
  return MEMORY[0x1F413D350]();
}

uint64_t sub_1DD046A48()
{
  return MEMORY[0x1F413D358]();
}

uint64_t sub_1DD046A58()
{
  return MEMORY[0x1F413D360]();
}

uint64_t sub_1DD046A68()
{
  return MEMORY[0x1F413D690]();
}

uint64_t sub_1DD046A78()
{
  return MEMORY[0x1F413D788]();
}

uint64_t sub_1DD046A88()
{
  return MEMORY[0x1F413D790]();
}

uint64_t sub_1DD046A98()
{
  return MEMORY[0x1F413D8E8]();
}

uint64_t sub_1DD046AA8()
{
  return MEMORY[0x1F413D8F0]();
}

uint64_t sub_1DD046AB8()
{
  return MEMORY[0x1F413D8F8]();
}

uint64_t sub_1DD046AC8()
{
  return MEMORY[0x1F413D900]();
}

uint64_t sub_1DD046AD8()
{
  return MEMORY[0x1F413DA00]();
}

uint64_t sub_1DD046AE8()
{
  return MEMORY[0x1F413DA08]();
}

uint64_t sub_1DD046AF8()
{
  return MEMORY[0x1F413DA10]();
}

uint64_t sub_1DD046B08()
{
  return MEMORY[0x1F413DA18]();
}

uint64_t sub_1DD046B18()
{
  return MEMORY[0x1F413DA20]();
}

uint64_t sub_1DD046B28()
{
  return MEMORY[0x1F413DA28]();
}

uint64_t sub_1DD046B38()
{
  return MEMORY[0x1F413DA30]();
}

uint64_t sub_1DD046B48()
{
  return MEMORY[0x1F413DA40]();
}

uint64_t sub_1DD046B58()
{
  return MEMORY[0x1F413DA48]();
}

uint64_t sub_1DD046B68()
{
  return MEMORY[0x1F413DA50]();
}

uint64_t sub_1DD046B78()
{
  return MEMORY[0x1F413DBB0]();
}

uint64_t sub_1DD046B88()
{
  return MEMORY[0x1F413DBB8]();
}

uint64_t sub_1DD046B98()
{
  return MEMORY[0x1F413DBC0]();
}

uint64_t sub_1DD046BA8()
{
  return MEMORY[0x1F413DBC8]();
}

uint64_t sub_1DD046BB8()
{
  return MEMORY[0x1F413DBD0]();
}

uint64_t sub_1DD046BC8()
{
  return MEMORY[0x1F413DBD8]();
}

uint64_t sub_1DD046BD8()
{
  return MEMORY[0x1F413DBE0]();
}

uint64_t sub_1DD046BE8()
{
  return MEMORY[0x1F413DBE8]();
}

uint64_t sub_1DD046C08()
{
  return MEMORY[0x1F413DBF8]();
}

uint64_t sub_1DD046C18()
{
  return MEMORY[0x1F413DC00]();
}

uint64_t sub_1DD046C28()
{
  return MEMORY[0x1F413DC08]();
}

uint64_t sub_1DD046C38()
{
  return MEMORY[0x1F413DC10]();
}

uint64_t sub_1DD046C48()
{
  return MEMORY[0x1F413DDF8]();
}

uint64_t sub_1DD046C58()
{
  return MEMORY[0x1F413DE00]();
}

uint64_t sub_1DD046C68()
{
  return MEMORY[0x1F413DEA0]();
}

uint64_t sub_1DD046C78()
{
  return MEMORY[0x1F413DEA8]();
}

uint64_t sub_1DD046C88()
{
  return MEMORY[0x1F413DEB0]();
}

uint64_t sub_1DD046C98()
{
  return MEMORY[0x1F413DEB8]();
}

uint64_t sub_1DD046CA8()
{
  return MEMORY[0x1F413DEC0]();
}

uint64_t sub_1DD046CB8()
{
  return MEMORY[0x1F413DEC8]();
}

uint64_t sub_1DD046CC8()
{
  return MEMORY[0x1F413DED0]();
}

uint64_t sub_1DD046CD8()
{
  return MEMORY[0x1F413DED8]();
}

uint64_t sub_1DD046CE8()
{
  return MEMORY[0x1F413DEE0]();
}

uint64_t sub_1DD046CF8()
{
  return MEMORY[0x1F413DEE8]();
}

uint64_t sub_1DD046D08()
{
  return MEMORY[0x1F413DEF0]();
}

uint64_t sub_1DD046D18()
{
  return MEMORY[0x1F413DEF8]();
}

uint64_t sub_1DD046D28()
{
  return MEMORY[0x1F413DF00]();
}

uint64_t sub_1DD046D38()
{
  return MEMORY[0x1F413DF08]();
}

uint64_t sub_1DD046D48()
{
  return MEMORY[0x1F413DF10]();
}

uint64_t sub_1DD046D58()
{
  return MEMORY[0x1F413DF18]();
}

uint64_t sub_1DD046D68()
{
  return MEMORY[0x1F413DF20]();
}

uint64_t sub_1DD046D78()
{
  return MEMORY[0x1F413DF48]();
}

uint64_t sub_1DD046D88()
{
  return MEMORY[0x1F413DF50]();
}

uint64_t sub_1DD046D98()
{
  return MEMORY[0x1F413DF58]();
}

uint64_t sub_1DD046DA8()
{
  return MEMORY[0x1F413DF60]();
}

uint64_t sub_1DD046DB8()
{
  return MEMORY[0x1F413DF68]();
}

uint64_t sub_1DD046DC8()
{
  return MEMORY[0x1F413DF70]();
}

uint64_t sub_1DD046DD8()
{
  return MEMORY[0x1F413DF78]();
}

uint64_t sub_1DD046DE8()
{
  return MEMORY[0x1F413DF80]();
}

uint64_t sub_1DD046DF8()
{
  return MEMORY[0x1F413DF88]();
}

uint64_t sub_1DD046E08()
{
  return MEMORY[0x1F413DF90]();
}

uint64_t sub_1DD046E18()
{
  return MEMORY[0x1F413DF98]();
}

uint64_t sub_1DD046E28()
{
  return MEMORY[0x1F413E020]();
}

uint64_t sub_1DD046E38()
{
  return MEMORY[0x1F413E028]();
}

uint64_t sub_1DD046E48()
{
  return MEMORY[0x1F413E030]();
}

uint64_t sub_1DD046E58()
{
  return MEMORY[0x1F413E038]();
}

uint64_t sub_1DD046E68()
{
  return MEMORY[0x1F413E040]();
}

uint64_t sub_1DD046E78()
{
  return MEMORY[0x1F413E048]();
}

uint64_t sub_1DD046E88()
{
  return MEMORY[0x1F413E050]();
}

uint64_t sub_1DD046E98()
{
  return MEMORY[0x1F413E058]();
}

uint64_t sub_1DD046EA8()
{
  return MEMORY[0x1F413E060]();
}

uint64_t sub_1DD046EB8()
{
  return MEMORY[0x1F413E068]();
}

uint64_t sub_1DD046EC8()
{
  return MEMORY[0x1F413E148]();
}

uint64_t sub_1DD046ED8()
{
  return MEMORY[0x1F413E150]();
}

uint64_t sub_1DD046EE8()
{
  return MEMORY[0x1F413E158]();
}

uint64_t sub_1DD046EF8()
{
  return MEMORY[0x1F413E160]();
}

uint64_t sub_1DD046F08()
{
  return MEMORY[0x1F413E168]();
}

uint64_t sub_1DD046F18()
{
  return MEMORY[0x1F413E170]();
}

uint64_t sub_1DD046F28()
{
  return MEMORY[0x1F413E178]();
}

uint64_t sub_1DD046F38()
{
  return MEMORY[0x1F413E1F0]();
}

uint64_t sub_1DD046F48()
{
  return MEMORY[0x1F413E1F8]();
}

uint64_t sub_1DD046F58()
{
  return MEMORY[0x1F413E200]();
}

uint64_t sub_1DD046F68()
{
  return MEMORY[0x1F413E208]();
}

uint64_t sub_1DD046F78()
{
  return MEMORY[0x1F413E210]();
}

uint64_t sub_1DD046F88()
{
  return MEMORY[0x1F413E218]();
}

uint64_t sub_1DD046F98()
{
  return MEMORY[0x1F413E220]();
}

uint64_t sub_1DD046FA8()
{
  return MEMORY[0x1F413E228]();
}

uint64_t sub_1DD046FB8()
{
  return MEMORY[0x1F413E230]();
}

uint64_t sub_1DD046FC8()
{
  return MEMORY[0x1F413E238]();
}

uint64_t sub_1DD046FD8()
{
  return MEMORY[0x1F413E240]();
}

uint64_t sub_1DD046FE8()
{
  return MEMORY[0x1F413E248]();
}

uint64_t sub_1DD046FF8()
{
  return MEMORY[0x1F413E250]();
}

uint64_t sub_1DD047008()
{
  return MEMORY[0x1F413E258]();
}

uint64_t sub_1DD047018()
{
  return MEMORY[0x1F413E260]();
}

uint64_t sub_1DD047028()
{
  return MEMORY[0x1F413E268]();
}

uint64_t sub_1DD047038()
{
  return MEMORY[0x1F413E270]();
}

uint64_t sub_1DD047048()
{
  return MEMORY[0x1F413E278]();
}

uint64_t sub_1DD047058()
{
  return MEMORY[0x1F413E280]();
}

uint64_t sub_1DD047068()
{
  return MEMORY[0x1F413E288]();
}

uint64_t sub_1DD047078()
{
  return MEMORY[0x1F413E290]();
}

uint64_t sub_1DD047088()
{
  return MEMORY[0x1F413E298]();
}

uint64_t sub_1DD047098()
{
  return MEMORY[0x1F413E2A0]();
}

uint64_t sub_1DD0470A8()
{
  return MEMORY[0x1F413E2A8]();
}

uint64_t sub_1DD0470B8()
{
  return MEMORY[0x1F413E2B0]();
}

uint64_t sub_1DD0470C8()
{
  return MEMORY[0x1F413E2B8]();
}

uint64_t sub_1DD0470D8()
{
  return MEMORY[0x1F413E2C0]();
}

uint64_t sub_1DD0470E8()
{
  return MEMORY[0x1F413E2C8]();
}

uint64_t sub_1DD0470F8()
{
  return MEMORY[0x1F413E2D0]();
}

uint64_t sub_1DD047108()
{
  return MEMORY[0x1F413E2D8]();
}

uint64_t sub_1DD047118()
{
  return MEMORY[0x1F413E2E0]();
}

uint64_t sub_1DD047128()
{
  return MEMORY[0x1F413E2E8]();
}

uint64_t sub_1DD047138()
{
  return MEMORY[0x1F413E3C8]();
}

uint64_t sub_1DD047148()
{
  return MEMORY[0x1F413E3D0]();
}

uint64_t sub_1DD047158()
{
  return MEMORY[0x1F413E3D8]();
}

uint64_t sub_1DD047168()
{
  return MEMORY[0x1F413E3E0]();
}

uint64_t sub_1DD047178()
{
  return MEMORY[0x1F413E3E8]();
}

uint64_t sub_1DD047188()
{
  return MEMORY[0x1F413E3F0]();
}

uint64_t sub_1DD047198()
{
  return MEMORY[0x1F413E3F8]();
}

uint64_t sub_1DD0471A8()
{
  return MEMORY[0x1F413E400]();
}

uint64_t sub_1DD0471B8()
{
  return MEMORY[0x1F413E408]();
}

uint64_t sub_1DD0471C8()
{
  return MEMORY[0x1F413E410]();
}

uint64_t sub_1DD0471D8()
{
  return MEMORY[0x1F413E418]();
}

uint64_t sub_1DD0471E8()
{
  return MEMORY[0x1F413E420]();
}

uint64_t sub_1DD0471F8()
{
  return MEMORY[0x1F413E428]();
}

uint64_t sub_1DD047208()
{
  return MEMORY[0x1F413E430]();
}

uint64_t sub_1DD047218()
{
  return MEMORY[0x1F413E5F0]();
}

uint64_t sub_1DD047228()
{
  return MEMORY[0x1F413E5F8]();
}

uint64_t sub_1DD047238()
{
  return MEMORY[0x1F413E600]();
}

uint64_t sub_1DD047248()
{
  return MEMORY[0x1F413E608]();
}

uint64_t sub_1DD047258()
{
  return MEMORY[0x1F413E610]();
}

uint64_t sub_1DD047268()
{
  return MEMORY[0x1F413E618]();
}

uint64_t sub_1DD047278()
{
  return MEMORY[0x1F413E620]();
}

uint64_t sub_1DD047288()
{
  return MEMORY[0x1F413E628]();
}

uint64_t sub_1DD047298()
{
  return MEMORY[0x1F413E630]();
}

uint64_t sub_1DD0472A8()
{
  return MEMORY[0x1F413E638]();
}

uint64_t sub_1DD0472B8()
{
  return MEMORY[0x1F413E640]();
}

uint64_t sub_1DD0472C8()
{
  return MEMORY[0x1F413E648]();
}

uint64_t sub_1DD0472D8()
{
  return MEMORY[0x1F413E650]();
}

uint64_t sub_1DD0472E8()
{
  return MEMORY[0x1F413E7D0]();
}

uint64_t sub_1DD0472F8()
{
  return MEMORY[0x1F413E7D8]();
}

uint64_t sub_1DD047308()
{
  return MEMORY[0x1F413E7E0]();
}

uint64_t sub_1DD047318()
{
  return MEMORY[0x1F413E7E8]();
}

uint64_t sub_1DD047328()
{
  return MEMORY[0x1F413E7F0]();
}

uint64_t sub_1DD047338()
{
  return MEMORY[0x1F413E7F8]();
}

uint64_t sub_1DD047348()
{
  return MEMORY[0x1F413E800]();
}

uint64_t sub_1DD047358()
{
  return MEMORY[0x1F413E808]();
}

uint64_t sub_1DD047368()
{
  return MEMORY[0x1F413E810]();
}

uint64_t sub_1DD047378()
{
  return MEMORY[0x1F413E818]();
}

uint64_t sub_1DD047388()
{
  return MEMORY[0x1F413E8B0]();
}

uint64_t sub_1DD047398()
{
  return MEMORY[0x1F413E8B8]();
}

uint64_t sub_1DD0473A8()
{
  return MEMORY[0x1F413E8C0]();
}

uint64_t sub_1DD0473B8()
{
  return MEMORY[0x1F413E978]();
}

uint64_t sub_1DD0473C8()
{
  return MEMORY[0x1F413E980]();
}

uint64_t sub_1DD0473D8()
{
  return MEMORY[0x1F413E988]();
}

uint64_t sub_1DD0473E8()
{
  return MEMORY[0x1F413EA80]();
}

uint64_t sub_1DD0473F8()
{
  return MEMORY[0x1F413EA88]();
}

uint64_t sub_1DD047408()
{
  return MEMORY[0x1F413EA98]();
}

uint64_t sub_1DD047418()
{
  return MEMORY[0x1F413EAA0]();
}

uint64_t sub_1DD047428()
{
  return MEMORY[0x1F413EAB0]();
}

uint64_t sub_1DD047438()
{
  return MEMORY[0x1F413EAB8]();
}

uint64_t sub_1DD047448()
{
  return MEMORY[0x1F413EAC0]();
}

uint64_t sub_1DD047458()
{
  return MEMORY[0x1F413EAC8]();
}

uint64_t sub_1DD047468()
{
  return MEMORY[0x1F413EAD0]();
}

uint64_t sub_1DD047478()
{
  return MEMORY[0x1F413EAE0]();
}

uint64_t sub_1DD047488()
{
  return MEMORY[0x1F413EAF0]();
}

uint64_t sub_1DD047498()
{
  return MEMORY[0x1F413EB60]();
}

uint64_t sub_1DD0474A8()
{
  return MEMORY[0x1F413EB68]();
}

uint64_t sub_1DD0474B8()
{
  return MEMORY[0x1F413EB78]();
}

uint64_t sub_1DD0474C8()
{
  return MEMORY[0x1F413EB80]();
}

uint64_t sub_1DD0474D8()
{
  return MEMORY[0x1F413EB88]();
}

uint64_t sub_1DD0474E8()
{
  return MEMORY[0x1F413EBD8]();
}

uint64_t sub_1DD0474F8()
{
  return MEMORY[0x1F413EBE0]();
}

uint64_t sub_1DD047508()
{
  return MEMORY[0x1F413EBE8]();
}

uint64_t sub_1DD047518()
{
  return MEMORY[0x1F413EC90]();
}

uint64_t sub_1DD047528()
{
  return MEMORY[0x1F413EC98]();
}

uint64_t sub_1DD047538()
{
  return MEMORY[0x1F413ECA0]();
}

uint64_t sub_1DD047548()
{
  return MEMORY[0x1F413ECA8]();
}

uint64_t sub_1DD047558()
{
  return MEMORY[0x1F413ECB0]();
}

uint64_t sub_1DD047568()
{
  return MEMORY[0x1F413ECB8]();
}

uint64_t sub_1DD047578()
{
  return MEMORY[0x1F413ECC0]();
}

uint64_t sub_1DD047588()
{
  return MEMORY[0x1F413ECC8]();
}

uint64_t sub_1DD047598()
{
  return MEMORY[0x1F413ECD0]();
}

uint64_t sub_1DD0475A8()
{
  return MEMORY[0x1F413ECD8]();
}

uint64_t sub_1DD0475B8()
{
  return MEMORY[0x1F413ECE0]();
}

uint64_t sub_1DD0475C8()
{
  return MEMORY[0x1F413ECE8]();
}

uint64_t sub_1DD0475D8()
{
  return MEMORY[0x1F413ECF0]();
}

uint64_t sub_1DD0475E8()
{
  return MEMORY[0x1F413ECF8]();
}

uint64_t sub_1DD0475F8()
{
  return MEMORY[0x1F413ED00]();
}

uint64_t sub_1DD047608()
{
  return MEMORY[0x1F413ED08]();
}

uint64_t sub_1DD047618()
{
  return MEMORY[0x1F413ED10]();
}

uint64_t sub_1DD047628()
{
  return MEMORY[0x1F413ED18]();
}

uint64_t sub_1DD047638()
{
  return MEMORY[0x1F413ED20]();
}

uint64_t sub_1DD047648()
{
  return MEMORY[0x1F413ED28]();
}

uint64_t sub_1DD047658()
{
  return MEMORY[0x1F413ED30]();
}

uint64_t sub_1DD047668()
{
  return MEMORY[0x1F413ED38]();
}

uint64_t sub_1DD047678()
{
  return MEMORY[0x1F413ED40]();
}

uint64_t sub_1DD047688()
{
  return MEMORY[0x1F413ED48]();
}

uint64_t sub_1DD047698()
{
  return MEMORY[0x1F413ED50]();
}

uint64_t sub_1DD0476A8()
{
  return MEMORY[0x1F413ED58]();
}

uint64_t sub_1DD0476B8()
{
  return MEMORY[0x1F413ED60]();
}

uint64_t sub_1DD0476C8()
{
  return MEMORY[0x1F413ED68]();
}

uint64_t sub_1DD0476D8()
{
  return MEMORY[0x1F413ED70]();
}

uint64_t sub_1DD0476E8()
{
  return MEMORY[0x1F413ED78]();
}

uint64_t sub_1DD0476F8()
{
  return MEMORY[0x1F413ED80]();
}

uint64_t sub_1DD047708()
{
  return MEMORY[0x1F413ED88]();
}

uint64_t sub_1DD047718()
{
  return MEMORY[0x1F413ED90]();
}

uint64_t sub_1DD047728()
{
  return MEMORY[0x1F413ED98]();
}

uint64_t sub_1DD047738()
{
  return MEMORY[0x1F413EDA0]();
}

uint64_t sub_1DD047748()
{
  return MEMORY[0x1F413EDA8]();
}

uint64_t sub_1DD047758()
{
  return MEMORY[0x1F413EDB0]();
}

uint64_t sub_1DD047768()
{
  return MEMORY[0x1F413EDB8]();
}

uint64_t sub_1DD047778()
{
  return MEMORY[0x1F413EDC0]();
}

uint64_t sub_1DD047788()
{
  return MEMORY[0x1F413EDC8]();
}

uint64_t sub_1DD047798()
{
  return MEMORY[0x1F413EDD0]();
}

uint64_t sub_1DD0477A8()
{
  return MEMORY[0x1F413EDD8]();
}

uint64_t sub_1DD0477B8()
{
  return MEMORY[0x1F413EDE0]();
}

uint64_t sub_1DD0477C8()
{
  return MEMORY[0x1F413EDE8]();
}

uint64_t sub_1DD0477D8()
{
  return MEMORY[0x1F413EDF0]();
}

uint64_t sub_1DD0477E8()
{
  return MEMORY[0x1F413EE00]();
}

uint64_t sub_1DD0477F8()
{
  return MEMORY[0x1F413EE10]();
}

uint64_t sub_1DD047808()
{
  return MEMORY[0x1F413EE40]();
}

uint64_t sub_1DD047818()
{
  return MEMORY[0x1F413EE48]();
}

uint64_t sub_1DD047828()
{
  return MEMORY[0x1F413EE50]();
}

uint64_t sub_1DD047838()
{
  return MEMORY[0x1F413EE58]();
}

uint64_t sub_1DD047848()
{
  return MEMORY[0x1F413EEA8]();
}

uint64_t sub_1DD047858()
{
  return MEMORY[0x1F413EEB0]();
}

uint64_t sub_1DD047868()
{
  return MEMORY[0x1F413EEB8]();
}

uint64_t sub_1DD047878()
{
  return MEMORY[0x1F413EEC0]();
}

uint64_t sub_1DD047888()
{
  return MEMORY[0x1F413EEF8]();
}

uint64_t sub_1DD047898()
{
  return MEMORY[0x1F413EF00]();
}

uint64_t sub_1DD0478A8()
{
  return MEMORY[0x1F413EF38]();
}

uint64_t sub_1DD0478B8()
{
  return MEMORY[0x1F413EF40]();
}

uint64_t sub_1DD0478C8()
{
  return MEMORY[0x1F413EF48]();
}

uint64_t sub_1DD0478D8()
{
  return MEMORY[0x1F413EF58]();
}

uint64_t sub_1DD0478E8()
{
  return MEMORY[0x1F413EF60]();
}

uint64_t sub_1DD0478F8()
{
  return MEMORY[0x1F413F038]();
}

uint64_t sub_1DD047908()
{
  return MEMORY[0x1F413F040]();
}

uint64_t sub_1DD047918()
{
  return MEMORY[0x1F413F048]();
}

uint64_t sub_1DD047928()
{
  return MEMORY[0x1F413F050]();
}

uint64_t sub_1DD047938()
{
  return MEMORY[0x1F413F060]();
}

uint64_t sub_1DD047948()
{
  return MEMORY[0x1F413F078]();
}

uint64_t sub_1DD047958()
{
  return MEMORY[0x1F413F0A0]();
}

uint64_t sub_1DD047968()
{
  return MEMORY[0x1F413F0A8]();
}

uint64_t sub_1DD047978()
{
  return MEMORY[0x1F413F0B0]();
}

uint64_t sub_1DD047988()
{
  return MEMORY[0x1F413F0B8]();
}

uint64_t sub_1DD047998()
{
  return MEMORY[0x1F413F0F0]();
}

uint64_t sub_1DD0479A8()
{
  return MEMORY[0x1F413F0F8]();
}

uint64_t sub_1DD0479B8()
{
  return MEMORY[0x1F413F100]();
}

uint64_t sub_1DD0479C8()
{
  return MEMORY[0x1F413F108]();
}

uint64_t sub_1DD0479D8()
{
  return MEMORY[0x1F413F110]();
}

uint64_t sub_1DD0479E8()
{
  return MEMORY[0x1F413F118]();
}

uint64_t sub_1DD0479F8()
{
  return MEMORY[0x1F413F138]();
}

uint64_t sub_1DD047A08()
{
  return MEMORY[0x1F413F140]();
}

uint64_t sub_1DD047A18()
{
  return MEMORY[0x1F413F180]();
}

uint64_t sub_1DD047A28()
{
  return MEMORY[0x1F413F188]();
}

uint64_t sub_1DD047A38()
{
  return MEMORY[0x1F413F190]();
}

uint64_t sub_1DD047A48()
{
  return MEMORY[0x1F40E5F50]();
}

uint64_t sub_1DD047A58()
{
  return MEMORY[0x1F41875C8]();
}

uint64_t sub_1DD047A68()
{
  return MEMORY[0x1F41875D0]();
}

uint64_t sub_1DD047A78()
{
  return MEMORY[0x1F41875E0]();
}

uint64_t sub_1DD047A88()
{
  return MEMORY[0x1F41875F0]();
}

uint64_t sub_1DD047A98()
{
  return MEMORY[0x1F4187600]();
}

uint64_t sub_1DD047AA8()
{
  return MEMORY[0x1F4187650]();
}

uint64_t sub_1DD047AB8()
{
  return MEMORY[0x1F4187658]();
}

uint64_t sub_1DD047AC8()
{
  return MEMORY[0x1F4187660]();
}

uint64_t sub_1DD047AD8()
{
  return MEMORY[0x1F41882A0]();
}

uint64_t sub_1DD047AE8()
{
  return MEMORY[0x1F41882B0]();
}

uint64_t sub_1DD047AF8()
{
  return MEMORY[0x1F41882C0]();
}

uint64_t sub_1DD047B08()
{
  return MEMORY[0x1F41882D8]();
}

uint64_t sub_1DD047B18()
{
  return MEMORY[0x1F41882F0]();
}

uint64_t sub_1DD047B28()
{
  return MEMORY[0x1F4187688]();
}

uint64_t sub_1DD047B38()
{
  return MEMORY[0x1F4188348]();
}

uint64_t sub_1DD047B48()
{
  return MEMORY[0x1F4187698]();
}

uint64_t sub_1DD047B58()
{
  return MEMORY[0x1F41876A0]();
}

uint64_t sub_1DD047B68()
{
  return MEMORY[0x1F4126EC8]();
}

uint64_t sub_1DD047B78()
{
  return MEMORY[0x1F4126F98]();
}

uint64_t sub_1DD047B88()
{
  return MEMORY[0x1F4126FA0]();
}

uint64_t sub_1DD047B98()
{
  return MEMORY[0x1F4126FC0]();
}

uint64_t sub_1DD047BA8()
{
  return MEMORY[0x1F4127028]();
}

uint64_t sub_1DD047BB8()
{
  return MEMORY[0x1F4127030]();
}

uint64_t sub_1DD047BC8()
{
  return MEMORY[0x1F4127048]();
}

uint64_t sub_1DD047BD8()
{
  return MEMORY[0x1F4127060]();
}

uint64_t sub_1DD047BE8()
{
  return MEMORY[0x1F4127078]();
}

uint64_t sub_1DD047BF8()
{
  return MEMORY[0x1F4127088]();
}

uint64_t sub_1DD047C08()
{
  return MEMORY[0x1F41270D8]();
}

uint64_t sub_1DD047C18()
{
  return MEMORY[0x1F41270E0]();
}

uint64_t sub_1DD047C28()
{
  return MEMORY[0x1F4127110]();
}

uint64_t sub_1DD047C38()
{
  return MEMORY[0x1F4127118]();
}

uint64_t sub_1DD047C48()
{
  return MEMORY[0x1F4127128]();
}

uint64_t sub_1DD047C58()
{
  return MEMORY[0x1F4127138]();
}

uint64_t sub_1DD047C88()
{
  return MEMORY[0x1F4127168]();
}

uint64_t sub_1DD047C98()
{
  return MEMORY[0x1F4127170]();
}

uint64_t sub_1DD047CA8()
{
  return MEMORY[0x1F4127178]();
}

uint64_t sub_1DD047CB8()
{
  return MEMORY[0x1F4127180]();
}

uint64_t sub_1DD047CC8()
{
  return MEMORY[0x1F4127190]();
}

uint64_t sub_1DD047CD8()
{
  return MEMORY[0x1F41271A8]();
}

uint64_t sub_1DD047CE8()
{
  return MEMORY[0x1F41271C0]();
}

uint64_t sub_1DD047CF8()
{
  return MEMORY[0x1F41271D8]();
}

uint64_t sub_1DD047D08()
{
  return MEMORY[0x1F41271E0]();
}

uint64_t sub_1DD047D18()
{
  return MEMORY[0x1F41271E8]();
}

uint64_t sub_1DD047D28()
{
  return MEMORY[0x1F4127200]();
}

uint64_t sub_1DD047D38()
{
  return MEMORY[0x1F4127210]();
}

uint64_t sub_1DD047D48()
{
  return MEMORY[0x1F4127220]();
}

uint64_t sub_1DD047D58()
{
  return MEMORY[0x1F4127230]();
}

uint64_t sub_1DD047D68()
{
  return MEMORY[0x1F4127248]();
}

uint64_t sub_1DD047D78()
{
  return MEMORY[0x1F4127258]();
}

uint64_t sub_1DD047D88()
{
  return MEMORY[0x1F4127260]();
}

uint64_t sub_1DD047D98()
{
  return MEMORY[0x1F4127268]();
}

uint64_t sub_1DD047DA8()
{
  return MEMORY[0x1F4127270]();
}

uint64_t sub_1DD047DB8()
{
  return MEMORY[0x1F4127290]();
}

uint64_t sub_1DD047DC8()
{
  return MEMORY[0x1F41272A0]();
}

uint64_t sub_1DD047DD8()
{
  return MEMORY[0x1F41272B8]();
}

uint64_t sub_1DD047DE8()
{
  return MEMORY[0x1F41272C8]();
}

uint64_t sub_1DD047DF8()
{
  return MEMORY[0x1F41272E0]();
}

uint64_t sub_1DD047E08()
{
  return MEMORY[0x1F4127308]();
}

uint64_t sub_1DD047E18()
{
  return MEMORY[0x1F4127330]();
}

uint64_t sub_1DD047E28()
{
  return MEMORY[0x1F4127348]();
}

uint64_t sub_1DD047E38()
{
  return MEMORY[0x1F4127368]();
}

uint64_t sub_1DD047E58()
{
  return MEMORY[0x1F4127380]();
}

uint64_t sub_1DD047E68()
{
  return MEMORY[0x1F4127398]();
}

uint64_t sub_1DD047E78()
{
  return MEMORY[0x1F41273A0]();
}

uint64_t sub_1DD047E88()
{
  return MEMORY[0x1F41273B8]();
}

uint64_t sub_1DD047E98()
{
  return MEMORY[0x1F41273C0]();
}

uint64_t sub_1DD047EA8()
{
  return MEMORY[0x1F41273C8]();
}

uint64_t sub_1DD047EB8()
{
  return MEMORY[0x1F41273D8]();
}

uint64_t sub_1DD047EC8()
{
  return MEMORY[0x1F41273E0]();
}

uint64_t sub_1DD047ED8()
{
  return MEMORY[0x1F41273E8]();
}

uint64_t sub_1DD047EE8()
{
  return MEMORY[0x1F41273F8]();
}

uint64_t sub_1DD047EF8()
{
  return MEMORY[0x1F4127400]();
}

uint64_t sub_1DD047F08()
{
  return MEMORY[0x1F4127410]();
}

uint64_t sub_1DD047F18()
{
  return MEMORY[0x1F4127418]();
}

uint64_t sub_1DD047F28()
{
  return MEMORY[0x1F4127458]();
}

uint64_t sub_1DD047F38()
{
  return MEMORY[0x1F4127460]();
}

uint64_t sub_1DD047F48()
{
  return MEMORY[0x1F4127468]();
}

uint64_t sub_1DD047F58()
{
  return MEMORY[0x1F4127470]();
}

uint64_t sub_1DD047F68()
{
  return MEMORY[0x1F4127488]();
}

uint64_t sub_1DD047F78()
{
  return MEMORY[0x1F4127498]();
}

uint64_t sub_1DD047F88()
{
  return MEMORY[0x1F41274A8]();
}

uint64_t sub_1DD047F98()
{
  return MEMORY[0x1F41274B8]();
}

uint64_t sub_1DD047FA8()
{
  return MEMORY[0x1F41274C8]();
}

uint64_t sub_1DD047FB8()
{
  return MEMORY[0x1F41274D0]();
}

uint64_t sub_1DD047FC8()
{
  return MEMORY[0x1F41274E8]();
}

uint64_t sub_1DD047FD8()
{
  return MEMORY[0x1F4127660]();
}

uint64_t sub_1DD047FE8()
{
  return MEMORY[0x1F4127678]();
}

uint64_t sub_1DD047FF8()
{
  return MEMORY[0x1F4127680]();
}

uint64_t sub_1DD048008()
{
  return MEMORY[0x1F4127690]();
}

uint64_t sub_1DD048018()
{
  return MEMORY[0x1F4188510]();
}

uint64_t sub_1DD048028()
{
  return MEMORY[0x1F4188568]();
}

uint64_t sub_1DD048038()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_1DD048048()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1DD048058()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1DD048068()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1DD048078()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t sub_1DD048088()
{
  return MEMORY[0x1F40DB6C0]();
}

uint64_t sub_1DD048098()
{
  return MEMORY[0x1F40DB6F0]();
}

uint64_t sub_1DD0480A8()
{
  return MEMORY[0x1F40DB700]();
}

uint64_t sub_1DD0480B8()
{
  return MEMORY[0x1F4186BA0]();
}

uint64_t sub_1DD0480C8()
{
  return MEMORY[0x1F40D6950]();
}

uint64_t sub_1DD0480D8()
{
  return MEMORY[0x1F40D6C98]();
}

uint64_t sub_1DD0480E8()
{
  return MEMORY[0x1F40D6D80]();
}

uint64_t sub_1DD0480F8()
{
  return MEMORY[0x1F40D6E18]();
}

uint64_t sub_1DD048108()
{
  return MEMORY[0x1F4111B28]();
}

uint64_t sub_1DD048118()
{
  return MEMORY[0x1F4111B30]();
}

uint64_t sub_1DD048128()
{
  return MEMORY[0x1F4111B38]();
}

uint64_t sub_1DD048138()
{
  return MEMORY[0x1F4111B40]();
}

uint64_t sub_1DD048148()
{
  return MEMORY[0x1F4111B48]();
}

uint64_t sub_1DD048158()
{
  return MEMORY[0x1F4111B50]();
}

uint64_t sub_1DD048168()
{
  return MEMORY[0x1F4111B58]();
}

uint64_t sub_1DD048178()
{
  return MEMORY[0x1F4111B60]();
}

uint64_t sub_1DD048188()
{
  return MEMORY[0x1F4111B68]();
}

uint64_t sub_1DD048198()
{
  return MEMORY[0x1F4111B70]();
}

uint64_t sub_1DD0481A8()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t sub_1DD0481B8()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1DD0481C8()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1DD0481D8()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1DD0481E8()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_1DD0481F8()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_1DD048208()
{
  return MEMORY[0x1F4186EF8]();
}

uint64_t sub_1DD048218()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t sub_1DD048228()
{
  return MEMORY[0x1F4186F40]();
}

uint64_t sub_1DD048238()
{
  return MEMORY[0x1F40DFE98]();
}

uint64_t sub_1DD048248()
{
  return MEMORY[0x1F40DFEA0]();
}

uint64_t sub_1DD048258()
{
  return MEMORY[0x1F40DFF38]();
}

uint64_t sub_1DD048268()
{
  return MEMORY[0x1F40DFF40]();
}

uint64_t sub_1DD048278()
{
  return MEMORY[0x1F40DFF58]();
}

uint64_t sub_1DD048288()
{
  return MEMORY[0x1F40DFF70]();
}

uint64_t sub_1DD048298()
{
  return MEMORY[0x1F40DFFC0]();
}

uint64_t sub_1DD0482A8()
{
  return MEMORY[0x1F40DFFD8]();
}

uint64_t sub_1DD0482B8()
{
  return MEMORY[0x1F40E04A8]();
}

uint64_t sub_1DD0482C8()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1DD0482D8()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_1DD0482E8()
{
  return MEMORY[0x1F4183318]();
}

uint64_t sub_1DD0482F8()
{
  return MEMORY[0x1F4183370]();
}

uint64_t sub_1DD048308()
{
  return MEMORY[0x1F41833D0]();
}

uint64_t sub_1DD048318()
{
  return MEMORY[0x1F41833F0]();
}

uint64_t sub_1DD048328()
{
  return MEMORY[0x1F41834A0]();
}

uint64_t sub_1DD048338()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t sub_1DD048348()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_1DD048358()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1DD048368()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1DD048378()
{
  return MEMORY[0x1F4183690]();
}

uint64_t sub_1DD048388()
{
  return MEMORY[0x1F4188428]();
}

uint64_t sub_1DD048398()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1DD0483A8()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1DD0483B8()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1DD0483C8()
{
  return MEMORY[0x1F40DB758]();
}

uint64_t sub_1DD0483D8()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1DD0483E8()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1DD0483F8()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1DD048408()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1DD048418()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_1DD048428()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t sub_1DD048438()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t sub_1DD048448()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1DD048458()
{
  return MEMORY[0x1F40E6278]();
}

uint64_t sub_1DD048468()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1DD048478()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1DD048488()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_1DD048498()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t sub_1DD0484A8()
{
  return MEMORY[0x1F41838B0]();
}

uint64_t sub_1DD0484B8()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1DD0484C8()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1DD0484D8()
{
  return MEMORY[0x1F4183940]();
}

uint64_t sub_1DD0484E8()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1DD0484F8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1DD048508()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1DD048518()
{
  return MEMORY[0x1F4183A00]();
}

uint64_t sub_1DD048528()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_1DD048538()
{
  return MEMORY[0x1F4183A30]();
}

uint64_t sub_1DD048548()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1DD048558()
{
  return MEMORY[0x1F4183A50]();
}

uint64_t sub_1DD048568()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1DD048578()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1DD048588()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1DD048598()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1DD0485A8()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t sub_1DD0485B8()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1DD0485C8()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1DD0485D8()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_1DD0485E8()
{
  return MEMORY[0x1F4183B40]();
}

uint64_t sub_1DD0485F8()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t sub_1DD048608()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1DD048618()
{
  return MEMORY[0x1F4183B88]();
}

uint64_t sub_1DD048628()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1DD048638()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1DD048648()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_1DD048658()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t sub_1DD048668()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t sub_1DD048678()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t sub_1DD048688()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t sub_1DD048698()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1DD0486A8()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1DD0486B8()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1DD0486C8()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1DD0486D8()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1DD0486E8()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1DD0486F8()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1DD048708()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1DD048718()
{
  return MEMORY[0x1F4183F98]();
}

uint64_t sub_1DD048728()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1DD048738()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1DD048748()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1DD048758()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1DD048788()
{
  return MEMORY[0x1F4187E58]();
}

uint64_t sub_1DD048798()
{
  return MEMORY[0x1F4184008]();
}

uint64_t sub_1DD0487A8()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t sub_1DD0487B8()
{
  return MEMORY[0x1F41840E0]();
}

uint64_t sub_1DD0487C8()
{
  return MEMORY[0x1F40E6430]();
}

uint64_t sub_1DD0487D8()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t sub_1DD0487E8()
{
  return MEMORY[0x1F4184100]();
}

uint64_t sub_1DD0487F8()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1DD048808()
{
  return MEMORY[0x1F40E6478]();
}

uint64_t sub_1DD048818()
{
  return MEMORY[0x1F40DB780]();
}

uint64_t sub_1DD048828()
{
  return MEMORY[0x1F40DB790]();
}

uint64_t sub_1DD048838()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1DD048848()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_1DD048858()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1DD048868()
{
  return MEMORY[0x1F40E66B0]();
}

uint64_t sub_1DD048878()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_1DD048888()
{
  return MEMORY[0x1F4187040]();
}

uint64_t sub_1DD048898()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_1DD0488A8()
{
  return MEMORY[0x1F41870D8]();
}

uint64_t sub_1DD0488B8()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_1DD0488C8()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_1DD0488D8()
{
  return MEMORY[0x1F4187130]();
}

uint64_t sub_1DD0488E8()
{
  return MEMORY[0x1F4187168]();
}

uint64_t sub_1DD0488F8()
{
  return MEMORY[0x1F4187188]();
}

uint64_t sub_1DD048908()
{
  return MEMORY[0x1F4187198]();
}

uint64_t sub_1DD048918()
{
  return MEMORY[0x1F41871A0]();
}

uint64_t sub_1DD048928()
{
  return MEMORY[0x1F41871A8]();
}

uint64_t sub_1DD048938()
{
  return MEMORY[0x1F41871B0]();
}

uint64_t sub_1DD048948()
{
  return MEMORY[0x1F41871D0]();
}

uint64_t sub_1DD048958()
{
  return MEMORY[0x1F4187218]();
}

uint64_t sub_1DD048968()
{
  return MEMORY[0x1F4187230]();
}

uint64_t sub_1DD048978()
{
  return MEMORY[0x1F4188708]();
}

uint64_t sub_1DD048988()
{
  return MEMORY[0x1F4188710]();
}

uint64_t sub_1DD048998()
{
  return MEMORY[0x1F41872D0]();
}

uint64_t sub_1DD0489A8()
{
  return MEMORY[0x1F41872F8]();
}

uint64_t sub_1DD0489B8()
{
  return MEMORY[0x1F40E6910]();
}

uint64_t sub_1DD0489C8()
{
  return MEMORY[0x1F40E6978]();
}

uint64_t sub_1DD0489D8()
{
  return MEMORY[0x1F4188740]();
}

uint64_t sub_1DD0489E8()
{
  return MEMORY[0x1F4188758]();
}

uint64_t sub_1DD0489F8()
{
  return MEMORY[0x1F4103628]();
}

uint64_t sub_1DD048A08()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1DD048A18()
{
  return MEMORY[0x1F40DB7C8]();
}

uint64_t sub_1DD048A28()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1DD048A38()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1DD048A48()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t sub_1DD048A58()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1DD048A68()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t sub_1DD048A78()
{
  return MEMORY[0x1F40E6C98]();
}

uint64_t sub_1DD048A88()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_1DD048A98()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_1DD048AA8()
{
  return MEMORY[0x1F41876A8]();
}

uint64_t sub_1DD048AB8()
{
  return MEMORY[0x1F4184958]();
}

uint64_t sub_1DD048AC8()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1DD048AE8()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1DD048AF8()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1DD048B08()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t sub_1DD048B18()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_1DD048B28()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_1DD048B38()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t sub_1DD048B48()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1DD048B58()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1DD048B68()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1DD048B78()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_1DD048B88()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1DD048B98()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1DD048BA8()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1DD048BB8()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t sub_1DD048BC8()
{
  return MEMORY[0x1F4184D70]();
}

uint64_t sub_1DD048BD8()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1DD048BE8()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1DD048BF8()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t sub_1DD048C08()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t sub_1DD048C18()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1DD048C28()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1DD048C38()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1DD048C48()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1DD048C58()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1DD048C68()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1DD048C78()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1DD048C88()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1DD048C98()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1DD048CA8()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1DD048CB8()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t sub_1DD048CC8()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1DD048CD8()
{
  return MEMORY[0x1F4185358]();
}

uint64_t sub_1DD048CE8()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1DD048CF8()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1DD048D08()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1DD048D18()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1DD048D38()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1DD048D58()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t sub_1DD048D68()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t sub_1DD048D78()
{
  return MEMORY[0x1F41854F8]();
}

uint64_t sub_1DD048D88()
{
  return MEMORY[0x1F4185510]();
}

uint64_t sub_1DD048D98()
{
  return MEMORY[0x1F4185518]();
}

uint64_t sub_1DD048DA8()
{
  return MEMORY[0x1F4185520]();
}

uint64_t sub_1DD048DB8()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_1DD048DC8()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1DD048DD8()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_1DD048DE8()
{
  return MEMORY[0x1F4185578]();
}

uint64_t sub_1DD048DF8()
{
  return MEMORY[0x1F4185580]();
}

uint64_t sub_1DD048E08()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1DD048E18()
{
  return MEMORY[0x1F4185590]();
}

uint64_t sub_1DD048E28()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1DD048E38()
{
  return MEMORY[0x1F41855A8]();
}

uint64_t sub_1DD048E48()
{
  return MEMORY[0x1F41855B0]();
}

uint64_t sub_1DD048E58()
{
  return MEMORY[0x1F41855D8]();
}

uint64_t sub_1DD048E68()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t sub_1DD048E78()
{
  return MEMORY[0x1F4185608]();
}

uint64_t sub_1DD048E88()
{
  return MEMORY[0x1F4185628]();
}

uint64_t sub_1DD048E98()
{
  return MEMORY[0x1F4185648]();
}

uint64_t sub_1DD048EA8()
{
  return MEMORY[0x1F4185658]();
}

uint64_t sub_1DD048EB8()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1DD048EC8()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_1DD048ED8()
{
  return MEMORY[0x1F41856A0]();
}

uint64_t sub_1DD048EE8()
{
  return MEMORY[0x1F41856A8]();
}

uint64_t sub_1DD048EF8()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1DD048F08()
{
  return MEMORY[0x1F41856B8]();
}

uint64_t sub_1DD048F18()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1DD048F28()
{
  return MEMORY[0x1F41856D0]();
}

uint64_t sub_1DD048F38()
{
  return MEMORY[0x1F41856D8]();
}

uint64_t sub_1DD048F48()
{
  return MEMORY[0x1F4185700]();
}

uint64_t sub_1DD048F58()
{
  return MEMORY[0x1F4185730]();
}

uint64_t sub_1DD048F68()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1DD048F78()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1DD048F88()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t sub_1DD048F98()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t sub_1DD048FA8()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1DD048FB8()
{
  return MEMORY[0x1F4185A48]();
}

uint64_t sub_1DD048FC8()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t sub_1DD048FD8()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1DD048FE8()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t sub_1DD048FF8()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t sub_1DD049008()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_1DD049018()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1DD049028()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1DD049038()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1DD049048()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1DD049058()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1DD049068()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1DD049078()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1DD049098()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_1DD0490A8()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_1DD0490B8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1DD0490C8()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1DD0490D8()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1DD0490E8()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1DD0490F8()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_1DD049108()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1DD049118()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t sub_1DD049128()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1DD049138()
{
  return MEMORY[0x1F4185FF0]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t CKContainerEnvironmentString()
{
  return MEMORY[0x1F40D6288]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFDB0](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1F41471D8]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

CGRect VNImageRectForNormalizedRect(CGRect normalizedRect, size_t imageWidth, size_t imageHeight)
{
  MEMORY[0x1F4103630](imageWidth, imageHeight, (__n128)normalizedRect.origin, *(__n128 *)&normalizedRect.origin.y, (__n128)normalizedRect.size, *(__n128 *)&normalizedRect.size.height);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t VTPixelRotationSessionCreateWithRotationAndFlip()
{
  return MEMORY[0x1F4103498]();
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034A8](session, sourceBuffer, destinationBuffer);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1F41034D0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1F4103538](session, propertyKey, propertyValue);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void faiss::partition_fuzzy<faiss::CMax<float,long long>>()
{
  while (1)
    ;
}

void faiss::partition_fuzzy<faiss::CMin<float,long long>>()
{
  while (1)
    ;
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::add_with_ids()
{
  while (1)
    ;
}

void faiss::IndexIDMapTemplate<faiss::IndexBinary>::IndexIDMapTemplate()
{
  while (1)
    ;
}

void faiss::IndexIDMapTemplate<faiss::Index>::add_with_ids()
{
  while (1)
    ;
}

void faiss::IndexIDMapTemplate<faiss::Index>::IndexIDMapTemplate()
{
  while (1)
    ;
}

void faiss::IndexIDMap2Template<faiss::IndexBinary>::construct_rev_map()
{
  while (1)
    ;
}

void faiss::IndexIDMap2Template<faiss::Index>::construct_rev_map()
{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMax<float,long long>>::addn()
{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMax<int,long long>>::addn()
{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMax<int,long long>>::heapify()
{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMax<int,long long>>::reorder()
{
  while (1)
    ;
}

void faiss::HeapArray<faiss::CMin<int,long long>>::addn()
{
  while (1)
    ;
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E458](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x1F417E4A0](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x1F417E6D0](this, *(void *)&__ec.__val_, __ec.__cat_);
}

void std::future_error::~future_error(std::future_error *this)
{
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E898]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1F417E968](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9B0]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1F417EAA0]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1F417EC80]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1F417EEC8](this);
}

void std::exception::~exception(std::exception *this)
{
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x1F417EF08]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_typeid(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1F417EF58](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

{
  return MEMORY[0x1F41813D0]();
}

{
  return MEMORY[0x1F41813F0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1F4186398]();
}

void abort(void)
{
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

int dgemm_(char *transa, char *transb, int *m, int *n, int *k, double *alpha, double *a, int *lda, double *b, int *ldb, double *beta, double *c__, int *ldc)
{
  return MEMORY[0x1F40D16E8](transa, transb, m, n, k, alpha, a, lda);
}

int dgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__s, __CLPK_doublereal *__u, __CLPK_integer *__ldu, __CLPK_doublereal *__vt, __CLPK_integer *__ldvt, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1730](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

int dsyev_(char *__jobz, char *__uplo, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__w, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1798](__jobz, __uplo, __n, __a, __lda, __w, __work, __lwork);
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x1F4118070]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x1F4118098]();
}

uint64_t e5rt_e5_compiler_compile()
{
  return MEMORY[0x1F41180B8]();
}

uint64_t e5rt_e5_compiler_create()
{
  return MEMORY[0x1F41180D0]();
}

uint64_t e5rt_e5_compiler_options_create()
{
  return MEMORY[0x1F41180E0]();
}

uint64_t e5rt_e5_compiler_options_release()
{
  return MEMORY[0x1F4118100]();
}

uint64_t e5rt_e5_compiler_options_set_compute_device_types_mask()
{
  return MEMORY[0x1F4118118]();
}

uint64_t e5rt_e5_compiler_options_set_force_recompilation()
{
  return MEMORY[0x1F4118168]();
}

uint64_t e5rt_e5_compiler_release()
{
  return MEMORY[0x1F41181A0]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x1F41181C8]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x1F41181E0]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x1F41181E8]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x1F4118220]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options()
{
  return MEMORY[0x1F4118238]();
}

uint64_t e5rt_execution_stream_operation_get_input_names()
{
  return MEMORY[0x1F4118258]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x1F4118270]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x1F4118280]();
}

uint64_t e5rt_execution_stream_operation_get_output_names()
{
  return MEMORY[0x1F4118290]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x1F41182B0]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x1F41182D8]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x1F41182E8]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x1F4118308]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x1F4118350]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x1F4118360]();
}

uint64_t e5rt_io_port_bind_surface_object()
{
  return MEMORY[0x1F4118370]();
}

uint64_t e5rt_io_port_is_surface()
{
  return MEMORY[0x1F4118388]();
}

uint64_t e5rt_io_port_is_tensor()
{
  return MEMORY[0x1F4118390]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x1F4118398]();
}

uint64_t e5rt_io_port_retain_surface_desc()
{
  return MEMORY[0x1F41183B0]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x1F41183C0]();
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function()
{
  return MEMORY[0x1F41183E8]();
}

uint64_t e5rt_precompiled_compute_op_create_options_release()
{
  return MEMORY[0x1F4118400]();
}

uint64_t e5rt_program_function_release()
{
  return MEMORY[0x1F4118458]();
}

uint64_t e5rt_program_library_release()
{
  return MEMORY[0x1F4118498]();
}

uint64_t e5rt_program_library_retain_program_function()
{
  return MEMORY[0x1F41184A0]();
}

uint64_t e5rt_surface_desc_get_format()
{
  return MEMORY[0x1F41184B8]();
}

uint64_t e5rt_surface_desc_get_height()
{
  return MEMORY[0x1F41184C0]();
}

uint64_t e5rt_surface_desc_get_plane_count()
{
  return MEMORY[0x1F41184C8]();
}

uint64_t e5rt_surface_desc_get_width()
{
  return MEMORY[0x1F41184D0]();
}

uint64_t e5rt_surface_desc_release()
{
  return MEMORY[0x1F41184D8]();
}

uint64_t e5rt_surface_object_create_from_iosurface()
{
  return MEMORY[0x1F41184E8]();
}

uint64_t e5rt_surface_object_release()
{
  return MEMORY[0x1F41184F8]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x1F4118500]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x1F4118538]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x1F4118550]();
}

uint64_t e5rt_tensor_desc_dtype_release()
{
  return MEMORY[0x1F4118570]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x1F4118590]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x1F41185A0]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x1F41185B0]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x1F41185B8]();
}

uint64_t espresso_buffer_get_rank()
{
  return MEMORY[0x1F4118618]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_device_id_for_metal_device()
{
  return MEMORY[0x1F4118688]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x1F41186F8]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x1F4118760]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1F4118770]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

uint64_t espresso_plan_get_phase()
{
  return MEMORY[0x1F4118848]();
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40CCBA0](memptr, alignment, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

float nextafterf(float a1, float a2)
{
  MEMORY[0x1F40CD000](a1, a2);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40CD5F0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1F40CD658]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

double scalb(double a1, double a2)
{
  MEMORY[0x1F40CDE90](a1, a2);
  return result;
}

int sgemm_(char *transa, char *transb, int *m, int *n, int *k, float *alpha, float *a, int *lda, float *b, int *ldb, float *beta, float *c__, int *ldc)
{
  return MEMORY[0x1F40D17D8](transa, transb, m, n, k, alpha, a, lda);
}

int sgeqrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D17E0](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

int sgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__vt, __CLPK_integer *__ldvt, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1800](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sorgqr_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1818](__m, __n, __k, __a, __lda, __tau, __work, __lwork);
}

int ssyrk_(char *uplo, char *trans, int *n, int *k, float *alpha, float *a, int *lda, float *beta, float *c__, int *ldc)
{
  return MEMORY[0x1F40D1938](uplo, trans, n, k, alpha, a, lda, beta);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x1F41864A8]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_vmin(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}