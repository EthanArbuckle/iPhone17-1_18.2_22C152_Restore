@interface BWFigVideoCaptureDevice
+ (uint64_t)_autofocusProcessorImageControlModeFromImageControlMode:(uint64_t)a1;
+ (void)initialize;
- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfiguration;
- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfigurationForRecording;
- ($2825F4736939C4A6D3AD43837233062D)depthFormatDimensions;
- ($2825F4736939C4A6D3AD43837233062D)streamingSessionAnalyticsVideoDimensions;
- ($2825F4736939C4A6D3AD43837233062D)ultraHighResSensorRawPoolDimensions;
- ($354B6A80224A98E3360CA2136CEA4A11)sphereShiftState;
- ($3CC8671D27C23BF42ADDB32F2B5E48AE)exposureDuration;
- ($3CC8671D27C23BF42ADDB32F2B5E48AE)mostRecentPTS;
- ($3CC8671D27C23BF42ADDB32F2B5E48AE)zeroShutterLagEarliestAllowedPTS;
- ($E2C29196C7A5C696474C6955C5A9CE06)deviceWhiteBalanceGains;
- ($E2C29196C7A5C696474C6955C5A9CE06)grayWorldDeviceWhiteBalanceGains;
- (BOOL)_depthDataDeliveryOrStereoPhotoCaptureUseSecondaryStream:(BOOL)result primaryStream:(uint64_t)a2;
- (BOOL)_focusIsStable:(BOOL)result;
- (BOOL)_isLowLightSceneUsingFrameStatisticsByPortType:(uint64_t)a1;
- (BOOL)_ubAWBReflowEnabledForCaptureType:(uint64_t)a3 primaryPortType:(void *)a4 frameStatisticsByPortType:(void *)a5 previewMetadata:;
- (BOOL)_ubGenerateLTMCurveForCaptureStream:(void *)a3 frameStatistics:;
- (BOOL)_ubIsAutoFlashForSceneFlags:(int)a3 digitalFlashModeForSceneMonitoring:;
- (BOOL)_ubIsFlashAvailable;
- (BOOL)_ubUseSquareRootToneCurveForNonHDRCapturesUsingFrameStatistics:(void *)a3 captureParameters:(unint64_t)a4 sceneFlags:;
- (BOOL)_validateTimeMachineFramesUsingPreviewFramesMetadata:(uint64_t)a1;
- (BOOL)adaptiveOverscanEnabled;
- (BOOL)allocateResourcesCompatibleWithDepthDataDelivery;
- (BOOL)allocateResourcesCompatibleWithOverCapture;
- (BOOL)attachesUprightExifOrientationMetadataToStreamingFrames;
- (BOOL)backgroundBlurEnabled;
- (BOOL)backgroundBlurSupported;
- (BOOL)backgroundReplacementEnabled;
- (BOOL)backgroundReplacementSupported;
- (BOOL)bravoConstituentPhotoDeliveryEnabled;
- (BOOL)bravoStreamSelectionConfigurationForRecordingEnabled;
- (BOOL)captureInitiatedOnce;
- (BOOL)centerStageFieldOfViewRestrictedToWide;
- (BOOL)centerStageMetadataDeliveryEnabled;
- (BOOL)cinematicFramingEnabled;
- (BOOL)cinematicFramingSupported;
- (BOOL)cinematicVideoEnabled;
- (BOOL)clientExpectsCameraMountedInLandscapeOrientation;
- (BOOL)constantColorEnabled;
- (BOOL)deepFusionEnabled;
- (BOOL)depthDataDeliveryEnabled;
- (BOOL)depthFilteringEnabled;
- (BOOL)depthWithDeepFusionEnabled;
- (BOOL)digitalFlashEnabled;
- (BOOL)digitalFlashMetadataEnabled;
- (BOOL)disableTemporalNoiseReductionWhenStopping;
- (BOOL)disparityGenerationFromReferenceFramesSupported;
- (BOOL)faceDrivenAEAFEnabledByDefault;
- (BOOL)focusPixelsEnabled;
- (BOOL)frameSkippingWhenNotRecordingEnabled;
- (BOOL)fullBinSIFROnSecondaryCameraAllowed;
- (BOOL)gesturesEnabled;
- (BOOL)globalToneMappingEnabled;
- (BOOL)hasFlash;
- (BOOL)irisFrameHarvestingEnabled;
- (BOOL)isBravoVariant;
- (BOOL)isCMIOZoomStreamPropertySupported;
- (BOOL)isCenterStageActive;
- (BOOL)isDeskCamActive;
- (BOOL)isExternalVariant;
- (BOOL)isFlashScene;
- (BOOL)isHDRScene;
- (BOOL)isManualCinematicFramingActive;
- (BOOL)isPhotoFormat;
- (BOOL)isPortTypeUsingZoomBasedSourceSensorRaws:(id)a3;
- (BOOL)isPropertyObserved:(id)a3;
- (BOOL)isSISScene;
- (BOOL)isStillImageISPChromaNoiseReductionEnabled;
- (BOOL)isStillImageISPMultiBandNoiseReductionEnabled;
- (BOOL)isUltraWideStreamActive;
- (BOOL)learnedNRUltraHighResolutionDowngradeEnabled;
- (BOOL)learnedNRUltraHighResolutionDowngradeSupported;
- (BOOL)lumaHistogramsEnabled;
- (BOOL)manualCinematicFramingEnabled;
- (BOOL)midFrameSynchronizationEnabled;
- (BOOL)momentCaptureVideoRecordingSupported;
- (BOOL)needsToRelieveSystemPressure;
- (BOOL)optimizesZoomRampsForVISZoomSmoothing;
- (BOOL)overCaptureEnabled;
- (BOOL)overCaptureSuperWideMacroActive;
- (BOOL)parallaxMitigationBasedOnZoomFactorEnabled;
- (BOOL)portraitAutoSuggestEnabled;
- (BOOL)portraitPreviewForegroundBlurEnabled;
- (BOOL)portraitSceneMonitorUsesDisparityStatistics;
- (BOOL)previewVideoDepthNodeUnprepared;
- (BOOL)quadraHighResStillImageCaptureEnabled;
- (BOOL)reactionEffectsEnabled;
- (BOOL)reactionEffectsSupported;
- (BOOL)rebuildingGraphForTrueVideoTransition;
- (BOOL)redEyeReductionEnabled;
- (BOOL)redSaturationMitigationEnabled;
- (BOOL)restorationOfForcedOffOverCaptureActiveSlaveStreamEnabled;
- (BOOL)sensorRawPoolEnabled;
- (BOOL)sensorRawStillImageOutputsEnabled;
- (BOOL)setAutoFlashEnabled:(BOOL)a3 error:(id *)a4;
- (BOOL)shallowDepthOfFieldEffectEnabled;
- (BOOL)sifrStillImageCaptureEnabledIfAvailable;
- (BOOL)smartCameraEnabled;
- (BOOL)softISPEnabled;
- (BOOL)stereoFusionEnabled;
- (BOOL)stereoPhotoCaptureEnabled;
- (BOOL)stereoVideoCaptureEnabled;
- (BOOL)stillImageCaptureEnabled;
- (BOOL)stillImageFocusPixelDataCaptureWithDepthEnabled;
- (BOOL)stillImageGNRHDREnabled;
- (BOOL)stillImageSashimiRawCaptureWithDepthEnabled;
- (BOOL)stoppingForTrueVideoTransition;
- (BOOL)streamingSessionAnalyticsClientIsVOIP;
- (BOOL)streamingSessionAnalyticsHighlightRecoveryEnabled;
- (BOOL)streamingSessionAnalyticsMixWithOthersEnabled;
- (BOOL)studioLightingEnabled;
- (BOOL)studioLightingSupported;
- (BOOL)supportsWideColor;
- (BOOL)swfrEnabled;
- (BOOL)temporalNoiseReductionBand0Disabled;
- (BOOL)temporalNoiseReductionEnabled;
- (BOOL)temporalNoiseReductionRawEnabled;
- (BOOL)temporalNoiseReductionStrengthHighEnabled;
- (BOOL)timeOfFlightAFEnabled;
- (BOOL)trueVideoCaptureEnabled;
- (BOOL)ultraHighResolutionZeroShutterLagEnabled;
- (BOOL)ultraHighResolutionZeroShutterLagSupportEnabled;
- (BOOL)variableFrameRateControlEnabled;
- (BOOL)videoStabilizationModeUsesReducedOverscan;
- (BOOL)wideCaptureStreamAsStatsMasterPreferred;
- (BOOL)wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled;
- (BOOL)zeroShutterLagEnabled;
- (BOOL)zoomPIPSuspended;
- (BWAdaptiveBracketingController)adaptiveUnifiedBracketingController;
- (BWAttachedMediaTimeMachineDelegate)smartStyleAttachedMediaTimeMachineDelegate;
- (BWFigCaptureDevice)device;
- (BWFigVideoCaptureDevice)initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceClientPriority:(int)a12 error:(int *)a13;
- (BWFigVideoCaptureDevice)supplementalPointCloudCaptureDevice;
- (BWFigVideoCaptureDeviceCenterStageDelegate)centerStageDelegate;
- (BWFigVideoCaptureDeviceManualCinematicFramingDelegate)manualCinematicFramingDelegate;
- (BWFigVideoCaptureDeviceSubjectSelectionDelegate)subjectSelectionDelegate;
- (BWFigVideoCaptureStream)bravoSuperWideCaptureStream;
- (BWFigVideoCaptureStream)bravoTelephotoCaptureStream;
- (BWFigVideoCaptureStream)captureStream;
- (BWFigVideoCaptureStream)masterCaptureStream;
- (BWFigVideoCaptureStream)pearlInfraredCaptureStream;
- (BWFigVideoCaptureSynchronizedStreamsGroup)synchronizedStreamsGroup;
- (BWFrameStatisticsByPortType)_copyCurrentFrameStatistics;
- (BWMemoryPool)memoryPool;
- (BWPreviewTimeMachineProcessor)previewTimeMachineProcessor;
- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(void *)a6 bravoConstituentImageDeliveryDeviceTypes:(BWStillImageCaptureSettings *)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(long long *)a9 userInitiatedRequestPTS:(uint64_t)a10 frameStatisticsByPortType:;
- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithSettings:(uint64_t)a1;
- (BWStillImageCaptureSettings)_ubAdaptiveStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(unint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:;
- (BWStillImageCaptureSettings)_ubFlashStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(uint64_t)a6 frameStatisticsByPortType:(char)a7 deliverSushiRaw:(void *)a8 bravoConstituentImageDeliveryDeviceTypes:;
- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithID:(long long *)a3 userInitiatedRequestPTS:(unsigned int)a4 captureType:(uint64_t)a5 captureFlags:(uint64_t)a6 sceneFlags:(void *)a7 frameStatisticsByPortType:(void *)a8 metadata:(unsigned __int8)a9 deliverOriginalImage:(char)a10 deliverSushiRaw:(void *)a11 bravoConstituentImageDeliveryDeviceTypes:;
- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithSettings:(unsigned __int8)a3 speedOverQualityCaptureEnabled:(void *)a4 processingSupportProvider:;
- (BWStillImageCaptureSettings)_zeroShutterLagStillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(uint64_t)a6 bravoConstituentImageDeliveryDeviceTypes:(uint64_t)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(uint64_t)a9 userInitiatedRequestPTS:(unsigned int)a10 captureStreams:(uint64_t)a11 frameStatisticsByPortType:;
- (BWSupplementalPointCloudCaptureDeviceDelegate)supplementalPointCloudCaptureDeviceDelegate;
- (BWZoomCommandHandler)zoomCommandHandler;
- (CGRect)centerStageRectOfInterest;
- (CGRect)regionOfInterestWithoutOverscan;
- (CGRect)sensorRegionOfInterestForCameraControls;
- (CGSize)defaultAutoFocusTapWindowSize;
- (CGSize)defaultContinuousAutoFocusWindowSize;
- (CGSize)nonDestructiveCropSize;
- (NSArray)activePortTypes;
- (NSArray)bravoStreamSelectionEligibleFallbackPortTypes;
- (NSArray)captureStreams;
- (NSArray)captureStreamsByFocalLength;
- (NSArray)digitalFlashDetectedObjectTypes;
- (NSDictionary)baseZoomFactorsByPortType;
- (NSDictionary)clientBaseZoomFactorsByPortType;
- (NSDictionary)exifFocalLengthsByZoomFactor;
- (NSDictionary)faceDetectionConfiguration;
- (NSDictionary)moduleCalibrationByPortType;
- (NSDictionary)moduleInfoByPortType;
- (NSDictionary)sensorIDDictionaryByPortType;
- (NSDictionary)sensorRawPoolRequirements;
- (NSDictionary)stillImageSupportedHighResolutionFlavorsByPortType;
- (NSNumber)globalToneMappingEnabledOverride;
- (NSString)applicationID;
- (NSString)description;
- (NSString)lastScene;
- (NSString)lastStillCaptureStatus;
- (NSString)lastStillScene;
- (NSString)orientation;
- (NSString)preferredMasterPortType;
- (NSString)smartCameraStatus;
- (OS_dispatch_queue)streamSetPropertyAsyncQueue;
- (OpaqueCMClock)clock;
- (OpaqueFigSampleBufferProcessor)_autofocusProcessor;
- (_BYTE)_ubIsHDRCaptureUsingSceneFlags:(unsigned char *)result;
- (_BYTE)_updateSensorRegionsOfInterestBasedOnZoomFactor:(unsigned char *)result;
- (__CVBuffer)backgroundReplacementPixelBuffer;
- (__n128)_accumulateInvalidFramesForAnalytics:(uint64_t)a1;
- (char)_terminateCaptureAndEmitStillImageCaptureError:(char *)result stillImageCaptureNowOptions:(uint64_t)a2 stillImageCaptureStreamProperties:;
- (const)_globalToneMappingEnabled;
- (const)_isSwitchOverPreventingStillImageCaptureInProgress;
- (double)_accumulateTimeOfFLightStreamingTime:(double)result;
- (double)_setupZoomRampTuning;
- (double)_ubZeroShutterLagFrameSelectionForCaptureType:(uint64_t)a3@<X2> captureFlags:(void *)a4@<X3> captureParameters:(void *)a5@<X4> timeMachineFrameMetadata:(int)a6@<W5> mainFrameCount:(uint64_t)a7@<X6> userInitiatedRequestPTS:(uint64_t)a8@<X8>;
- (double)previewShiftInSensorSpace;
- (float)ISO;
- (float)_baseZoomFactorForZoomFactor:(uint64_t)a1;
- (float)_collectAPSStatistics:(float *)result;
- (float)_collectPearlTemperatureStatistics:(float *)result;
- (float)_exifFocalLengthOverrideForZoomFactor:(uint64_t)a1;
- (float)_minimumFrameRateForStreamingImageIntent:(void *)a3 masterPortType:;
- (float)_nextLargerBaseZoomFactorForRequestedZoomFactor:(uint64_t)a1;
- (float)_updateTimeOfFlightStreamingTime:(float)result;
- (float)backgroundBlurAperture;
- (float)cinematicVideoAverageRenderingTime;
- (float)cinematicVideoWorstCaseRenderingTime;
- (float)depthMaxFrameRate;
- (float)durationAlreadyWaitedForRecordingStop;
- (float)exposureTargetBias;
- (float)exposureTargetOffset;
- (float)lensPosition;
- (float)masterCaptureStreamLastFrameEIT;
- (float)maxContinuousZoomFactorForDepthDataDelivery;
- (float)maximumFrameRate;
- (float)minimumFrameRate;
- (float)overCapturePercentage;
- (float)parallaxMitigationStrengthAndTargetCaptureStream:(id *)a3;
- (float)requestedZoomFactorRelativeToPortType:(id)a3;
- (float)studioLightingIntensity;
- (float)timeLapseCaptureRate;
- (float)torchLevel;
- (float)uiBaseZoomFactor;
- (float)visionDataMaxFrameRate;
- (float)zoomFactor;
- (float)zoomPIPMinimumUIZoomFactor;
- (id)_autoExposureBracketValuesForSettings:(void *)a3 frameStatistics:;
- (id)_clientBracketSettingsWithSettings:(void *)a3 frameStatisticsByPortType:;
- (id)_collectAPSMacroInstabilityStatistics:(id *)result;
- (id)_initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceVendor:(id)a12 createAutofocusSampleBufferProcessorFunction:(void *)a13 cameraParameters:(id)a14 deviceClientPriority:(int)a15 error:(int *)a16;
- (id)_manualExposureBracketParametersForSettings:(void *)a3 frameStatistics:(int)a4 use8dot8FixedPointGain:;
- (id)_sensorRawPoolsRequirements;
- (id)_stillImageCaptureStateMachine;
- (id)_stillImageDispatchQueue;
- (id)_ubClientBracketStillImageCaptureSettings:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:;
- (id)cameraInfoByPortType;
- (id)cameraInfoByPortTypeIncludingLSCGains:(BOOL)a3 includeFocusPixelMap:(BOOL)a4 includeDefectivePixelTable:(BOOL)a5;
- (id)copyISPProcessingSessionWithType:(int)a3 error:(int *)a4;
- (id)digitalFlashExposureTimes;
- (id)preferredMasterPortTypeForZoomFactor:(float)a3;
- (id)sceneClassificationConfidences;
- (id)stillImageCaptureSettingsWithSettings:(id)a3 speedOverQualityCaptureEnabled:(BOOL)a4 processingSupportProvider:(id)a5;
- (int)_setupAutofocusSampleBufferProcessor;
- (int)autoImageControlMode;
- (int)captureStillImageNowWithSettings:(id)a3 captureSettings:(id)a4;
- (int)centerStageFramingMode;
- (int)depthDataBaseRotation;
- (int)depthType;
- (int)deviceType;
- (int)digitalFlashStatus;
- (int)maxOverscanVideoStabilizationMethod;
- (int)maxStillImageCaptureBufferCountForHDRMode:(int)a3 digitalFlashMode:(int)a4 qualityPrioritization:(int)a5 clientBracketCount:(int)a6 bravoConstituentImageDeliveryDeviceTypes:(id)a7;
- (int)numberOfActiveTimeMachines;
- (int)overheadCameraMode;
- (int)peakPowerSystemPressureLevel;
- (int)position;
- (int)sensorRawHighResolutionFlavorForDimensions:(id)a3;
- (int)setAutoImageControlMode:(int)a3;
- (int)setAutomaticallyAdjustsImageControlMode:(BOOL)a3;
- (int)setAutomaticallyAdjustsTorch:(BOOL)a3;
- (int)setContinuousAutoFocusRect:(CGRect)a3 isFocusRectInOverscanSpace:(BOOL)a4;
- (int)setExposureModeCustomWithExposureDuration:(id *)a3 minFrameRate:(double)a4 maxFrameRate:(double)a5 ISO:(float)a6 requestID:(int)a7;
- (int)setExposureModeLocked;
- (int)setExposureTargetBias:(float)a3 requestID:(int)a4;
- (int)setFaceDetectionDrivenImageProcessingMode:(int)a3;
- (int)setFocusModeAutoWithRect:(CGRect)a3 restrictToRect:(BOOL)a4 continuous:(BOOL)a5 smooth:(BOOL)a6 rangeRestrictionNear:(float)a7 rangeRestrictionFar:(float)a8 isFocusRectInOverscanSpace:(BOOL)a9;
- (int)setFocusModeManualWithLensPosition:(float)a3 requestID:(int)a4;
- (int)setImageControlMode:(int)a3;
- (int)setProvidesStortorgetMetadata:(BOOL)a3;
- (int)setStillImageSceneMonitoringFlashMode:(int)a3 hdrMode:(int)a4 qualityPrioritization:(int)a5 digitalFlashMode:(int)a6;
- (int)setSubjectAreaChangeMonitoringEnabled:(BOOL)a3;
- (int)setTorchLevel:(float)a3;
- (int)setWhiteBalanceModeAuto;
- (int)setWhiteBalanceModeLockedWithGains:(id)a3 requestID:(int)a4;
- (int)shallowDepthOfFieldEffectStatus;
- (int)shallowDepthOfFieldStagePreviewStatus;
- (int)stereoVideoCaptureStatus;
- (int)stillImageFusionScheme;
- (int)streamingDigitalFlashMode;
- (int)systemPressureLevel;
- (int)targetFrameRateWhenNotRecording;
- (int)temporalNoiseReductionBand0StrengthModulation;
- (int)thermalSystemPressureLevel;
- (int)timeOfFlightCameraType;
- (int)timeOfFlightProjectorMode;
- (int)unifiedBracketingMode;
- (int)updateStillImageSensorRawBufferPoolsWithRetainedBufferCount:(int)a3 zoomBasedRetainedBufferCount:(int)a4 ultraHighResolutionRetainedBufferCount:(int)a5;
- (int)videoStabilizationStrength;
- (int)zeroShutterLagTimeMachineBufferCapacity;
- (os_unfair_lock_s)_addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:(os_unfair_lock_s *)result;
- (os_unfair_lock_s)_ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream:(void *)a3 captureStreams:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 waitForTimeMachineToFill:(int *)a7 failureReasonOut:;
- (os_unfair_lock_s)_ubZeroShutterLagCancelWaitingForTimeMachines;
- (os_unfair_lock_s)_updateSlaveFrameRateForZoomFactor:(os_unfair_lock_s *)result;
- (os_unfair_lock_s)overCaptureActiveSlaveStreamForcedOff;
- (uint64_t)_addADRCExposureRealizedGainToStillImageSampleBuffer:(uint64_t)result;
- (uint64_t)_addAutofocusAndDiagnosticMetadata:(uint64_t)result;
- (uint64_t)_addDropFrameWaitingForTorchToRampUpKey:(uint64_t)result;
- (uint64_t)_addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:(void *)a3 captureSettings:(uint64_t)a4 portType:;
- (uint64_t)_addPreviewWhiteBalanceMetadataToStillImageSampleBuffer:(uint64_t)result;
- (uint64_t)_addValidationAndCoreRepairStatusesToSampleBuffer:(uint64_t)result;
- (uint64_t)_bravoCameraForOISOrSISCaptureType:(float)a3 stereoFusionMode:(float)a4 frameStatisticsByPortType:(uint64_t)a5 zoomFactor:(int)a6 stereoFusionLowerBoundZoomFactor:(void *)a7 stereoFusionUpperBoundZoomFactor:;
- (uint64_t)_captureStillImageNowOnStreamWithOptions:(void *)a3 captureStreamProperties:;
- (uint64_t)_captureStreamBasedSolelyOnZoomFactor:(uint64_t)a1;
- (uint64_t)_captureStreamForFaceDetectionWithMasterStreamSwitchoverSuspended:(uint64_t)a1;
- (uint64_t)_checkCriticalFocusError:(uint64_t)result;
- (uint64_t)_collectPearlProjectorUpTime:(int)a3 isStillImage:;
- (uint64_t)_convertStillImageCaptureSettings:(void *)a3 toStillImageCaptureNowOptions:(void *)a4 captureStreamPropertyValues:;
- (uint64_t)_copyAutofocusProcessorProperty:(uint64_t)a3 propertyValueOut:;
- (uint64_t)_copyAutofocusProcessorPropertyInternal:(void *)a3 propertyValueOut:;
- (uint64_t)_copyPortTypesFromStreams:(_DWORD *)a3 errOut:;
- (uint64_t)_createBWFigVideoCaptureStreamsForCaptureStreams:(void *)a3 attributeDictionaries:(void *)a4 cameraParameters:(uint64_t)a5 synchronizedStreamsGroup:(_OWORD *)a6 clientAuditToken:(uint64_t)a7 tccIdentity:(uint64_t)a8 mediaEnvironment:;
- (uint64_t)_currentSceneAllowsMotionFreezing:(uint64_t)result;
- (uint64_t)_deliverDepthDataForSettings:(uint64_t)result;
- (uint64_t)_depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:(uint64_t)result;
- (uint64_t)_deviceDidStopStreaming;
- (uint64_t)_initiateCaptureStillImageNowWithPTS:(uint64_t)a3 completionHandler:;
- (uint64_t)_isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:(uint64_t)result;
- (uint64_t)_ltmCurveForStreamingImageIntent:(uint64_t)result;
- (uint64_t)_overCaptureActiveSlaveStreamForZoomFactor:(char)a3 masterStream:(float)a4 currentFrameRate:(float)a5 preferWider:;
- (uint64_t)_overCaptureConfigureActiveSlaveStreamForMasterStream:(char)a3 zoomFactor:(float)a4 currentFrameRate:(float)a5 preferWider:;
- (uint64_t)_overCaptureLockedSlaveStreamForMasterStream:(uint64_t)a3 recommendedSlaveStream:;
- (uint64_t)_overCaptureMasterStreamForZoomFactor:(uint64_t)a1;
- (uint64_t)_postSDOFEffectStatus:(uint64_t)a3 SDOFStagePreviewStatus:;
- (uint64_t)_propagateStillImageSettings:(void *)a3 toCMIOCaptureOptions:;
- (uint64_t)_reportDeskViewStreamingSessionCoreAnalyticsData;
- (uint64_t)_reportStreamingSessionCoreAnalyticsData;
- (uint64_t)_resetAnalyticsData;
- (uint64_t)_resolveStillImageCaptureTypeFromStatisticsByPortType:(void *)a3 masterCaptureStream:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 stereoFusionMode:(int)a8 depthDataDeliveryEnabled:(void *)a9 bravoConstituentImageDeliveryDeviceTypes:(char)a10 burstQualityCaptureEnabled:(int)a11 clientBracketMode:(char)a12 forSceneMonitoring:(uint64_t *)a13 captureFlags:;
- (uint64_t)_resumeTimeMachines;
- (uint64_t)_returnStreamsToVendor;
- (uint64_t)_sendInitialValuesToPortraitEffectPropertiesDelegate:(double)a3;
- (uint64_t)_servicePropertyChangeNotifications:(uint64_t)result;
- (uint64_t)_serviceStereoVideoCaptureSceneMonitoringWithFrameStatisticsByPortType:(uint64_t)a3 sceneFlags:;
- (uint64_t)_setAutoImageControlMode:(void *)a3 completionHandler:;
- (uint64_t)_setAutofocusProcessorImageControlModeProperty:(uint64_t)result;
- (uint64_t)_setAutofocusProcessorProperty:(uint64_t)a3 propertyValue:;
- (uint64_t)_setAutofocusProcessorPropertyInternal:(const void *)a3 propertyValue:;
- (uint64_t)_setExposureModeAutoWithRect:(double)a3;
- (uint64_t)_setMinimumFrameRate:(uint64_t)result;
- (uint64_t)_setMinimumMasterToSlaveFrameRateRatio:(uint64_t)result;
- (uint64_t)_setPropertySensorRawBufferPoolRetainCount:(id *)a1;
- (uint64_t)_setSmoothFocusEnabled:(uint64_t)a1;
- (uint64_t)_setSynchronizedStreamsGroupProperty:(uint64_t)a3 value:;
- (uint64_t)_setupMacroFocusDetection;
- (uint64_t)_setupStillImageCaptureStateMachine;
- (uint64_t)_shouldDeferAutofocusProcessorProperty:(void *)a3 value:;
- (uint64_t)_shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:(int)a3 deviceMotionActivity:(void *)a4 frameStatisticsByPortType:;
- (uint64_t)_stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:(uint64_t)a3 masterPortType:(uint64_t)a4 captureType:(uint64_t)a5 captureFlags:;
- (uint64_t)_stillImageSceneTypeForCaptureStream:(void *)a3 frameStatisticsByPortType:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 digitalFlashMode:(uint64_t *)a8 sceneFlags:;
- (uint64_t)_suspendTimeMachineWithCompletionHandler:(uint64_t)result;
- (uint64_t)_tryZeroShutterLagReferenceFrameSelectionWithZeroShutterLagPTS:(uint64_t)a3 captureType:(uint64_t)a4 captureFlags:(const __CFArray *)a5 framesMetadata:(int)a6 frameCount:(_DWORD *)a7 referenceFrameBracketedCaptureSequenceNumberOut:(CMTime *)a8 preferredPTSOut:(void *)a9 selectedFramesRangeOut:;
- (uint64_t)_ubAddFrameParametersForDepthIfNeeded:(__int16)a3 captureFlags:;
- (uint64_t)_ubAddSensorRawOutputBuffersToStillImageCaptureOptionsIfNeeded:(void *)a3 stillImageCaptureOptionsOut:;
- (uint64_t)_ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:(void *)a3 unifiedBracketedCaptureParamsOut:;
- (uint64_t)_ubCBAFScanInProgressUsingFrameStatisticsByPortType:(void *)a3 portTypes:(void *)a4 timeMachineFramesMetadata:;
- (uint64_t)_ubConvertStillImageCaptureSettings:(int)a3 useSynchronizedStreamsGroup:(void *)a4 toStillImageCaptureNowOptions:(void *)a5 captureStreamPropertyValues:;
- (uint64_t)_ubDeliverDepthDataForSettings:(uint64_t)a3 speedOverQuality:(int)a4 sceneFlags:;
- (uint64_t)_ubEVZeroCountForCaptureType:(char)a3 sceneFlags:(int)a4 captureFlags:(void *)a5 frameStatistics:;
- (uint64_t)_ubEnableSphereForCaptureType:(uint64_t)result;
- (uint64_t)_ubEnabledOutputsForCaptureFlags:(int)a3 captureType:(uint64_t *)a4 baseCaptureFrameFlagsOut:(unint64_t *)a5 discardCaptureFrameFlagsOut:;
- (uint64_t)_ubHighResolutionNondisruptiveSwitchingFormatIndexForCaptureStream:(uint64_t)result;
- (uint64_t)_ubIsBravoMultiCameraCaptureForSettings:(int)a3 sceneFlags:(int)a4 deliverDepthData:;
- (uint64_t)_ubIsDigitalFlashCaptureForSettings:(int)a3 sceneFlags:;
- (uint64_t)_ubIsRequestedHighResolutionFlavorSupportedForCaptureType:(uint64_t)a3 portType:(int)a4 qualityPrioritization:(int)a5 requestedHighResolutionFlavor:(unint64_t)a6 sceneFlags:(char)a7 deliverDepthData:(char)a8 bravoConstituentPhotoCapture:(char)a9 autoDeferredProcessingEnabled:(char)a10 canDefer:(char)a11 demosaicedRawRequested:(unsigned char *)a12 isUltraHighResolutionDowngradeOut:;
- (uint64_t)_ubIsSuperWidePreferredOrCurrentPrimaryCaptureStreamInWideZoomRange;
- (uint64_t)_ubIsTimeMachineFramesUsableForHDRUsingTimeMachineFramesMetadata:(uint64_t)result portTypes:(void *)a2;
- (uint64_t)_ubResolveDigitalFlashStatusForSceneFlags:(int)a3 flashMode:;
- (uint64_t)_ubResolveStillImageCaptureFlagsForCaptureType:(unint64_t)a3 sceneFlags:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 hdrMode:(int)a7 speedOverQuality:(int)a8 speedOverQualityDowngrade:(int)a9 qualityPrioritization:(int)a10 highResolutionFlavor:(char)a11 ultraHighResolutionDowngrade:(unsigned __int8)a12 canDefer:(void *)a13 processingSupportProvider:(_DWORD *)a14 zeroShutterLagFailureReasonOut:(void *)a15 metadata:;
- (uint64_t)_ubResolveStillImageCaptureTypeWithSettings:(unint64_t)a3 sceneFlags:(int)a4 hdrMode:(int)a5 qualityPrioritization:(char)a6 clientBracket:(char)a7 canDefer:(uint64_t)a8 primaryPortType:(char *)a9 speedOverQualityInOut:(char *)a10 speedOverQualityDowngradeOut:;
- (uint64_t)_ubSphereOffsetsForAdaptiveBracketingParameters:(float)a3 pixelSize:;
- (uint64_t)_ubStillImageSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(unsigned int)a4 fusionEnabled:(void *)a5 metadata:(int)a6 sceneMonitoring:(float)a7 zoomFactorOverride:;
- (uint64_t)_ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:(void *)a3 frameStatistics:;
- (uint64_t)_ubUpdateSIFREnabled;
- (uint64_t)_ubValidateTimeMachineFramesMetadata:(int)a3 minimumValidCount:(void *)a4 primaryPortType:(void *)a5 portTypes:(void *)a6 frameStatisticsByPortType:(int)a7 deliverDepthData:;
- (uint64_t)_updateActionCameraMaxExposureDurationForFlickerFrequency:(uint64_t)result;
- (uint64_t)_updateAutoFocusRectIfNeededForZoomFactor:(uint64_t)a1;
- (uint64_t)_updateDeferredAutofocusProcessorPropertyStatesForProperty:(uint64_t)result;
- (uint64_t)_updateExposureRectIfNeededForZoomFactor:(uint64_t)a1;
- (uint64_t)_updateExposureStateForAutofocusProperty:(uint64_t)result;
- (uint64_t)_updateFaceDetectionStateForAutofocusProperty:(const void *)a3 propertyValue:;
- (uint64_t)_updateFrameSkippingRatio;
- (uint64_t)_updateGlobalToneMappingEnabled;
- (uint64_t)_updateImageControlModeStateForAutofocusProperty:(const void *)a3 propertyValue:;
- (uint64_t)_updateOrientationTotalTimes:(uint64_t)result;
- (uint64_t)_updateParallaxMitigationBasedOnZoomFactorEnabled;
- (uint64_t)_updateSensorRawPool;
- (uint64_t)_updateSensorRawPools;
- (uint64_t)_updateSensorRegionOfInterest:(double)a3 forZoomFactor:(double)a4 previewShiftInSensorSpace:(double)a5 streamProperty:(double)a6;
- (uint64_t)_updateSensorRegionOfInterestForActiveFraming;
- (uint64_t)_updateSlaveFrameRateForZoomFactor:(float)a3 masterCaptureStream:;
- (uint64_t)_updateStatsMasterForMasterStream:(uint64_t)result;
- (uint64_t)_updateStreamMetadataSettings;
- (uint64_t)_updateUltraHighResSensorRawPool;
- (uint64_t)_updateWhiteBalanceStateForAutofocusProperty:(const void *)a3 propertyValue:;
- (unint64_t)_evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:(void *)a3 resultOut:;
- (unint64_t)_serviceMacroFocusDetectionWithFrameStatisticsByPortType:(unint64_t)result;
- (unint64_t)_ubDigitalFlashSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(float)a4 snr:(uint64_t)a5 sphereAvailable:(uint64_t)a6 fusionEnabled:(int)a7 sceneMonitoring:;
- (unsigned)cinematicFramingControlMode;
- (unsigned)depthPixelFormat;
- (unsigned)learnedNRMode;
- (unsigned)sensorRawPixelFormat;
- (unsigned)streamingSessionAnalyticsPixelFormat;
- (unsigned)systemPressureFactors;
- (void)_addCoreMediaMetadataAttachmentsToStillImageSampleBuffer:(char)a3 fromTimeMachine:;
- (void)_addExifMetadata:(char)a3 fromTimeMachine:;
- (void)_addPortraitSceneMonitoringMetadataToSampleBuffer:(uint64_t)a1;
- (void)_addStateAttachmentsToVideoSampleBuffer:(uint64_t)a1 captureStream:(void *)a2;
- (void)_addStateInvariantAttachmentsToVideoSamplebuffer:(uint64_t)a1 captureStream:(const void *)a2;
- (void)_addStationaryFlagToMetadata:(void *)result;
- (void)_addStillImageSettingsToStillImageSampleBuffer:(uint64_t)a1;
- (void)_addSystemPressureAttachments:(uint64_t)a1;
- (void)_captureStillImageNowWithSettings:(uint64_t)a1;
- (void)_captureStreamByPortType:(uint64_t)a1;
- (void)_captureStreamsForBravoConstituentImageDeliveryDeviceTypes:(uint64_t)a1;
- (void)_captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:(uint64_t)a1;
- (void)_checkDegradedAutoFocus:(uint64_t)a1;
- (void)_checkSphereJitterDetection:(void *)result;
- (void)_collectSensorTemperatureStatistics:(void *)result;
- (void)_configureZoomFudging;
- (void)_copyStreamsForAttributes:(uint64_t)a3 deviceClientPriority:(int *)a4 errOut:;
- (void)_currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:(int)a3 forcingHDRSceneDetectionEnabled:(int)a4 forcingSISSceneDetectionEnabled:(int)a5 forcingDigitalFlashSceneDetectionEnabled:;
- (void)_deviceWillStartStreaming;
- (void)_handlePendingStillImageCaptureRequest;
- (void)_logStillImageCaptureTimingStatisticsForCoreAnalytics;
- (void)_overCaptureSelectLockedStreamsForRecommendedMasterStream:(float)a3 requestedZoomFactor:(float)a4 currentFrameRate:;
- (void)_postManualControlRequestCompletedWithName:(uint64_t)a3 requestID:(uint64_t)a4 timeDictionary:(void *)a5 additionalPayloadItems:;
- (void)_postNotificationWithName:(uint64_t)a3 payloadNewPropertyValue:;
- (void)_postNotificationWithPayload:(id)a3 notificationPayload:(id)a4;
- (void)_reportAPSOffsetEstimatorInfo;
- (void)_resetStillImageCaptureRequestState;
- (void)_resetStillImageCaptureRequestStateInternal;
- (void)_sendMasterStreamChangedNotificationWithPortType:(void *)result;
- (void)_sendPreferredMasterStreamChangedNotificationWithPortType:(void *)result;
- (void)_serviceAutoImageControlModeWithSampleBuffer:(uint64_t)a1 fromCaptureStream:(void *)target;
- (void)_serviceAutoTorchNotification:(uint64_t)a1 sampleBuffer:(void *)a2;
- (void)_serviceBravoStreamSelectionWithSampleBuffer:(void *)a3 fromCaptureStream:(uint64_t)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:;
- (void)_serviceCompletedRequestNotifications:(uint64_t)a1;
- (void)_serviceDeferredAutofocusProcessorPropertiesFromCaptureStream:(void *)a3 frameStatisticsByPortType:;
- (void)_serviceNondisruptiveSwitchingFormatForCaptureStream:(uint64_t)a3 frameStatistics:(int)a4 streamingImageIntent:(uint64_t)a5 isStationary:;
- (void)_serviceNondisruptiveSwitchingFormatWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:;
- (void)_servicePendingStillImageCapture;
- (void)_serviceRetryStillImageCaptureUsingFrameStatisticsByPortType:(uint64_t)a1;
- (void)_serviceSDOFSceneMonitoringWithCaptureStream:(uint64_t)a1 sampleBuffer:(void *)a2 frameStatisticsByPortType:(const void *)a3 flashModeForSceneMonitoring:(void *)a4 hdrModeForSceneMonitoring:(int)a5 qualityPrioritizationForSceneMonitoring:(int)a6 streamingImageIntent:(int)a7;
- (void)_serviceVariableFrameRateWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:;
- (void)_setISPZoomFactorSynchronously:(uint64_t)a1;
- (void)_setNewISPZoomFactorOnStream;
- (void)_stillImageCaptureStateMachineDidTransitionToInProgress;
- (void)_teardownAutoFocusSampleBufferProcessor;
- (void)_ubDetectedObjectsForDigitalFlashFromDetectedObjects:(CGFloat)a3 finalCropRect:(CGFloat)a4;
- (void)_ubSetupMetadataTimeMachine;
- (void)_ubWhiteBalanceMetadataByPortTypeFromFrameStatistics:(uint64_t)a3 masterPortType:;
- (void)_ubWhiteBalanceMetadataByPortTypeFromMetadata:(uint64_t)a1;
- (void)_updateBravoStreamSelectionForMasterStream:(int)a3 forceNotification:;
- (void)_updateBravoSwitchOverStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1;
- (void)_updateCurrentStillSmartCameraState;
- (void)_updateSDOFEffectStatus:(unsigned int)a3 newStagePreviewStatus:;
- (void)_updateSceneMonitorFocusStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1;
- (void)_updateStateUsingVideoSampleBuffer:(void *)a3 fromCaptureStream:;
- (void)_updateStereoVideoCaptureStatus:(os_unfair_lock_s *)a1;
- (void)_updateStreamingForegroundSegmentationNetworkUsingStage:(void *)result;
- (void)_updateStreamingImageIntentForChangedMasterStreamWithPortType:(uint64_t)a1;
- (void)_updateStreamingImageIntentTo:(int)a3 from:(void *)a4 masterPortType:;
- (void)_updateStreamingImageIntentWithNewImageControlMode:(int)a3 oldImageControlMode:;
- (void)_updateVariableFrameRateSettings;
- (void)cancelPrepareToCaptureStillImageNow;
- (void)captureStream:(id)a3 didCompleteStillImageCaptureWithPTS:(id *)a4 error:(int)a5;
- (void)captureStream:(id)a3 didDropVideoSampleBufferWithPTS:(id *)a4;
- (void)captureStream:(id)a3 didUpdatePreviewShift:(CGPoint)a4;
- (void)captureStream:(id)a3 willDiscardVideoSampleBuffer:(opaqueCMSampleBuffer *)a4;
- (void)captureStream:(id)a3 willEmitDepthSampleBuffer:(opaqueCMSampleBuffer *)a4;
- (void)captureStream:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4;
- (void)captureStream:(id)a3 willEmitStillImageSampleBuffer:(opaqueCMSampleBuffer *)a4 fromTimeMachine:(BOOL)a5;
- (void)captureStream:(id)a3 willEmitVideoSampleBuffer:(opaqueCMSampleBuffer *)a4 drivesCameraControls:(BOOL)a5;
- (void)captureStreamDidChangeActiveFormatIndex:(id)a3;
- (void)captureStreamDidStartStreaming:(id)a3;
- (void)captureStreamDidStopStreaming:(id)a3;
- (void)captureStreamFailedToStartStreaming:(id)a3;
- (void)captureStreamWillStartStreaming:(id)a3;
- (void)captureStreamWillStopCameraStreamingMonitor;
- (void)captureStreamWillStopStreaming:(id)a3;
- (void)dealloc;
- (void)drainNotifications;
- (void)initiateCaptureStillImageNowWithPTS:(id *)a3 completionHandler:(id)a4;
- (void)invalidateForParallelGraphRebuild;
- (void)panWithTranslation:(CGPoint)a3;
- (void)performBlockOnNotificationQueue:(id)a3;
- (void)performOneShotFraming;
- (void)performReactionEffect:(id)a3;
- (void)pointCloudCaptureDevice:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4;
- (void)prepareToCaptureStillImageNow:(id)a3;
- (void)rampToVideoZoomFactor:(float)a3 withRampType:(int)a4 rate:(float)a5 duration:(double)a6 commandID:(int)a7;
- (void)rampToVideoZoomFactor:(float)a3 withTuning:(int)a4 commandID:(int)a5;
- (void)registerForAEMatrixMetadata;
- (void)releaseResources;
- (void)resetFraming;
- (void)semanticStyleSceneTypeDidChange:(int)a3;
- (void)sendCalibrationDataToISP;
- (void)setAdaptiveOverscanEnabled:(BOOL)a3;
- (void)setAdaptiveUnifiedBracketingController:(id)a3;
- (void)setAllocateResourcesCompatibleWithDepthDataDelivery:(BOOL)a3;
- (void)setAllocateResourcesCompatibleWithOverCapture:(BOOL)a3;
- (void)setAttachesUprightExifOrientationMetadataToStreamingFrames:(BOOL)a3;
- (void)setAutoImageControlMode:(int)a3 completionHandler:(id)a4;
- (void)setBackgroundBlurAperture:(float)a3;
- (void)setBackgroundBlurEnabled:(BOOL)a3;
- (void)setBackgroundBlurSupported:(BOOL)a3;
- (void)setBackgroundReplacementEnabled:(BOOL)a3;
- (void)setBackgroundReplacementPixelBuffer:(__CVBuffer *)a3;
- (void)setBackgroundReplacementSupported:(BOOL)a3;
- (void)setBaseZoomFactorsByPortType:(id)a3;
- (void)setBravoConstituentPhotoDeliveryEnabled:(BOOL)a3;
- (void)setBravoStreamSelectionConfiguration:(id)a3;
- (void)setBravoStreamSelectionConfigurationForRecording:(id)a3;
- (void)setBravoStreamSelectionConfigurationForRecordingEnabled:(BOOL)a3;
- (void)setBravoStreamSelectionEligibleFallbackPortTypes:(id)a3;
- (void)setCaptureInitiatedOnce:(BOOL)a3;
- (void)setCenterStageActive:(BOOL)a3;
- (void)setCenterStageDelegate:(id)a3;
- (void)setCenterStageFieldOfViewRestrictedToWide:(BOOL)a3;
- (void)setCenterStageFramingMode:(int)a3;
- (void)setCenterStageMetadataDeliveryEnabled:(BOOL)a3;
- (void)setCenterStageRectOfInterest:(CGRect)a3;
- (void)setCinematicFramingControlMode:(unsigned int)a3;
- (void)setCinematicFramingEnabled:(BOOL)a3;
- (void)setCinematicFramingSupported:(BOOL)a3;
- (void)setCinematicVideoAverageRenderingTime:(float)a3;
- (void)setCinematicVideoEnabled:(BOOL)a3;
- (void)setCinematicVideoFocus:(id)a3;
- (void)setCinematicVideoWorstCaseRenderingTime:(float)a3;
- (void)setClientExpectsCameraMountedInLandscapeOrientation:(BOOL)a3;
- (void)setConstantColorEnabled:(BOOL)a3;
- (void)setDeepFusionEnabled:(BOOL)a3;
- (void)setDefaultAutoFocusTapWindowSize:(CGSize)a3;
- (void)setDefaultContinuousAutoFocusWindowSize:(CGSize)a3;
- (void)setDepthDataBaseRotation:(int)a3;
- (void)setDepthDataDeliveryEnabled:(BOOL)a3;
- (void)setDepthFilteringEnabled:(BOOL)a3;
- (void)setDepthFormatDimensions:(id)a3;
- (void)setDepthMaxFrameRate:(float)a3;
- (void)setDepthPixelFormat:(unsigned int)a3;
- (void)setDepthType:(int)a3;
- (void)setDepthWithDeepFusionEnabled:(BOOL)a3;
- (void)setDeskCamActive:(BOOL)a3;
- (void)setDigitalFlashDetectedObjectTypes:(id)a3;
- (void)setDigitalFlashEnabled:(BOOL)a3;
- (void)setDigitalFlashMetadataEnabled:(BOOL)a3;
- (void)setDisableTemporalNoiseReductionWhenStopping:(BOOL)a3;
- (void)setDisparityGenerationFromReferenceFramesSupported:(BOOL)a3;
- (void)setDurationAlreadyWaitedForRecordingStop:(float)a3;
- (void)setExifFocalLengthsByZoomFactor:(id)a3;
- (void)setFaceDetectionConfiguration:(id)a3;
- (void)setFaceDrivenAEAFEnabledByDefault:(BOOL)a3;
- (void)setFocusPixelsEnabled:(BOOL)a3;
- (void)setFrameSkippingWhenNotRecordingEnabled:(BOOL)a3;
- (void)setFullBinSIFROnSecondaryCameraAllowed:(BOOL)a3;
- (void)setGesturesEnabled:(BOOL)a3;
- (void)setGlobalToneMappingEnabled:(BOOL)a3;
- (void)setGlobalToneMappingEnabledOverride:(id)a3;
- (void)setISPZoomFactor:(float)a3 totalZoomFactor:(float)a4;
- (void)setIrisFrameHarvestingEnabled:(BOOL)a3;
- (void)setLearnedNRMode:(unsigned int)a3;
- (void)setLearnedNRUltraHighResolutionDowngradeEnabled:(BOOL)a3;
- (void)setLumaHistogramsEnabled:(BOOL)a3;
- (void)setManualCinematicFramingActive:(BOOL)a3;
- (void)setManualCinematicFramingDelegate:(id)a3;
- (void)setManualCinematicFramingEnabled:(BOOL)a3;
- (void)setMaxContinuousZoomFactorForDepthDataDelivery:(float)a3;
- (void)setMaxDepthFrameRateChangedDelegate:(id)a3;
- (void)setMaxExposureDurationClientOverride:(id *)a3;
- (void)setMaxOverscanVideoStabilizationMethod:(int)a3;
- (void)setMaxTorchLevel:(float)a3;
- (void)setMaximumFrameRate:(float)a3;
- (void)setMemoryPool:(id)a3;
- (void)setMidFrameSynchronizationEnabled:(BOOL)a3;
- (void)setMinimumFrameRate:(float)a3;
- (void)setMomentCaptureVideoRecordingSupported:(BOOL)a3;
- (void)setNonDestructiveCropSize:(CGSize)a3;
- (void)setNondisruptiveSwitchingFormatIndicesByPortType:(id)a3 maximumAllowedFrameRate:(int)a4 minimumFrameRate:(int)a5 maximumFrameRate:(int)a6;
- (void)setNondisruptiveSwitchingFormatIndicesByZoomFactorSIFRBinned:(id)a3 nondisruptiveSwitchingFormatIndicesByZoomFactorSIFRNonBinned:(id)a4 ultraHighResolutionNondisruptiveStreamingFormatIndex:(int)a5 mainFormatSIFRBinningFactor:(int)a6 forPortType:(id)a7 quadraSubPixelSwitchingParameters:(id)a8;
- (void)setNumberOfActiveTimeMachines:(int)a3;
- (void)setOptimizesZoomRampsForVISZoomSmoothing:(BOOL)a3;
- (void)setOverCaptureEnabled:(BOOL)a3;
- (void)setOverCapturePercentage:(float)a3;
- (void)setOverCaptureSuperWideMacroActive:(BOOL)a3;
- (void)setOverheadCameraMode:(int)a3;
- (void)setOverheadCameraModeChangeDelegate:(id)a3;
- (void)setPeakPowerSystemPressureLevel:(int)a3;
- (void)setPhotoFormat:(BOOL)a3;
- (void)setPortraitAutoSuggestEnabled:(BOOL)a3;
- (void)setPortraitEffectPropertiesDelegate:(id)a3;
- (void)setPortraitEffectStudioLightQuality:(int64_t)a3;
- (void)setPreferredMasterPortType:(id)a3;
- (void)setPreviewShiftInSensorSpace:(double)a3;
- (void)setPreviewTimeMachineProcessor:(id)a3;
- (void)setPreviewVideoDepthNodeUnprepared:(BOOL)a3;
- (void)setProperty:(id)a3 isObserved:(BOOL)a4;
- (void)setQuadraHighResStillImageCaptureEnabled:(BOOL)a3;
- (void)setReactionEffectsEnabled:(BOOL)a3;
- (void)setReactionEffectsSupported:(BOOL)a3;
- (void)setRebuildingGraphForTrueVideoTransition:(BOOL)a3;
- (void)setRedEyeReductionEnabled:(BOOL)a3;
- (void)setRedSaturationMitigationEnabled:(BOOL)a3;
- (void)setRegionOfInterestWithoutOverscan:(CGRect)a3;
- (void)setRestorationOfForcedOffOverCaptureActiveSlaveStreamEnabled:(BOOL)a3;
- (void)setSensorRawPoolEnabled:(BOOL)a3;
- (void)setSensorRawStillImageOutputsEnabled:(BOOL)a3;
- (void)setSensorRegionOfInterestForCameraControls:(CGRect)a3;
- (void)setShallowDepthOfFieldEffectEnabled:(BOOL)a3;
- (void)setSifrStillImageCaptureEnabledIfAvailable:(BOOL)a3;
- (void)setSmartCameraEnabled:(BOOL)a3;
- (void)setSmartCameraVersion:(id)a3;
- (void)setSmartStyleAttachedMediaTimeMachineDelegate:(id)a3;
- (void)setSoftISPEnabled:(BOOL)a3;
- (void)setStereoFusionEnabled:(BOOL)a3;
- (void)setStereoPhotoCaptureEnabled:(BOOL)a3;
- (void)setStereoVideoCaptureEnabled:(BOOL)a3;
- (void)setStillImageCaptureEnabled:(BOOL)a3;
- (void)setStillImageFocusPixelDataCaptureWithDepthEnabled:(BOOL)a3;
- (void)setStillImageFusionScheme:(int)a3;
- (void)setStillImageGNRHDREnabled:(BOOL)a3;
- (void)setStillImageISPChromaNoiseReductionEnabled:(BOOL)a3;
- (void)setStillImageISPMultiBandNoiseReductionEnabled:(BOOL)a3;
- (void)setStillImageSashimiRawCaptureWithDepthEnabled:(BOOL)a3;
- (void)setStillImageStabilizationSceneDetectionEnabled:(BOOL)a3;
- (void)setStillImageSupportedHighResolutionFlavorsByPortType:(id)a3;
- (void)setStoppingForTrueVideoTransition:(BOOL)a3;
- (void)setStreamingDigitalFlashMode:(int)a3;
- (void)setStreamingSessionAnalyticsClientIsVOIP:(BOOL)a3;
- (void)setStreamingSessionAnalyticsHighlightRecoveryEnabled:(BOOL)a3;
- (void)setStreamingSessionAnalyticsMixWithOthersEnabled:(BOOL)a3;
- (void)setStreamingSessionAnalyticsPixelFormat:(unsigned int)a3;
- (void)setStreamingSessionAnalyticsVideoDimensions:(id)a3;
- (void)setStudioLightingEnabled:(BOOL)a3;
- (void)setStudioLightingIntensity:(float)a3;
- (void)setStudioLightingSupported:(BOOL)a3;
- (void)setSubjectSelectionDelegate:(id)a3;
- (void)setSupplementalPointCloudCaptureDevice:(id)a3;
- (void)setSupplementalPointCloudCaptureDeviceDelegate:(id)a3;
- (void)setSwfrEnabled:(BOOL)a3;
- (void)setSystemPressureFactors:(unsigned int)a3;
- (void)setSystemPressureLevel:(int)a3;
- (void)setTargetFrameRateWhenNotRecording:(int)a3;
- (void)setTemporalNoiseReductionBand0Disabled:(BOOL)a3;
- (void)setTemporalNoiseReductionBand0StrengthModulation:(int)a3;
- (void)setTemporalNoiseReductionEnabled:(BOOL)a3;
- (void)setTemporalNoiseReductionRawEnabled:(BOOL)a3;
- (void)setTemporalNoiseReductionStrengthHighEnabled:(BOOL)a3;
- (void)setThermalSystemPressureLevel:(int)a3;
- (void)setTimeLapseCaptureRate:(float)a3;
- (void)setTimeOfFlightAFEnabled:(BOOL)a3;
- (void)setTimeOfFlightProjectorMode:(int)a3;
- (void)setTrueVideoCaptureEnabled:(BOOL)a3;
- (void)setUiBaseZoomFactor:(float)a3;
- (void)setUltraHighResSensorRawPoolDimensions:(id)a3;
- (void)setUltraHighResolutionZeroShutterLagEnabled:(BOOL)a3;
- (void)setUltraHighResolutionZeroShutterLagSupportEnabled:(BOOL)a3;
- (void)setUltraWideActive:(BOOL)a3;
- (void)setUnifiedBracketingMode:(int)a3;
- (void)setVariableFrameRateControlEnabled:(BOOL)a3;
- (void)setVideoStabilizationModeUsesReducedOverscan:(BOOL)a3;
- (void)setVideoStabilizationStrength:(int)a3;
- (void)setVisionDataMaxFrameRate:(float)a3;
- (void)setWideCaptureStreamAsStatsMasterPreferred:(BOOL)a3;
- (void)setWideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled:(BOOL)a3;
- (void)setZeroShutterLagEarliestAllowedPTS:(id *)a3;
- (void)setZeroShutterLagEnabled:(BOOL)a3;
- (void)setZeroShutterLagTimeMachineBufferCapacity:(int)a3;
- (void)setZoomFactor:(float)a3;
- (void)setZoomFactorChangedDelegate:(id)a3 forPortType:(id)a4;
- (void)setZoomPIPMinimumUIZoomFactor:(float)a3;
- (void)setZoomPIPSuspended:(BOOL)a3;
- (void)shutDownSystemPressuredDevice;
- (void)startPanningAtPoint:(CGPoint)a3;
- (void)startupFaceDetectionIfNeeded;
- (void)stopPointCloudCaptureForStillImageCaptureWithSettingsID:(int64_t)a3;
- (void)unregisterForAEMatrixMetadata;
- (void)updateClientAuditToken:(id *)a3;
- (void)updatePortraitSceneMonitoringRequiresStageThresholds:(BOOL)a3;
- (void)updateSDOFBackgroundShiftSum:(float)a3 invalidShiftRatio:(float)a4 closeCanonicalDisparityAverage:(float)a5 faceCanonicalDisparityAverages:(id)a6 erodedForegroundRatio:(float)a7 foregroundRatio:(float)a8 occluded:(BOOL)a9 faces:(id)a10 personSegmentationRatio:(float)a11;
- (void)updateSmartCameraStreamPropertiesWithInferenceResult:(id)a3;
- (void)updateSphereShiftStateWithSampleBuffer:(opaqueCMSampleBuffer *)a3;
- (void)zeroShutterLagCancelWaitingForTimeMachinesForSettingsID:(int64_t)a3;
- (void)zoomCommandHandler:(id)a3 didApplyZoomFactor:(float)a4 zoomFactorWithoutFudge:(float)a5 targetZoomFactor:(float)a6 rampComplete:(BOOL)a7 rampCommandID:(int)a8;
@end

@implementation BWFigVideoCaptureDevice

void __76__BWFigVideoCaptureDevice__postNotificationWithPayload_notificationPayload___block_invoke()
{
  v0 = (void *)MEMORY[0x1A6272C70]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
}

uint64_t __72__BWFigVideoCaptureDevice__setAutofocusProcessorProperty_propertyValue___block_invoke(uint64_t a1)
{
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(void *)(a1 + 32), *(void **)(a1 + 40), *(const void **)(a1 + 48));
}

uint64_t __130__BWFigVideoCaptureDevice__serviceNondisruptiveSwitchingFormatForCaptureStream_frameStatistics_streamingImageIntent_isStationary___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 1824);
  return result;
}

- (void)_sendMasterStreamChangedNotificationWithPortType:(void *)result
{
  v3[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    v2 = @"NewPropertyValue";
    v3[0] = a2;
    return objc_msgSend(result, "_postNotificationWithPayload:notificationPayload:", @"BravoMasterStreamChangedNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
  }
  return result;
}

- (void)setStudioLightingEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (self->_studioLightingEnabled != a3)
  {
    self->_studioLightingEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_studioLightingStartTime = v5;
    }
    else {
      self->_studioLightingTotalTime += v5 - self->_studioLightingStartTime;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * v10++) setStudioLightingEnabled:v3];
      }
      while (v8 != v10);
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (void)setReactionEffectsEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (self->_reactionEffectsEnabled != a3)
  {
    self->_reactionEffectsEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_reactionEffectsEnabledStartTime = v5;
    }
    else {
      self->_reactionEffectsEnabledTotalTime += v5 - self->_reactionEffectsEnabledStartTime;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * v10++) setReactionEffectsEnabled:v3];
      }
      while (v8 != v10);
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (void)setBackgroundReplacementEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (self->_backgroundReplacementEnabled != a3)
  {
    self->_backgroundReplacementEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_backgroundReplacementStartTime = v5;
    }
    else {
      self->_backgroundReplacementTotalTime += v5 - self->_backgroundReplacementStartTime;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * v10++) setBackgroundReplacementEnabled:v3];
      }
      while (v8 != v10);
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (void)setBackgroundBlurEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (self->_backgroundBlurEnabled != a3)
  {
    self->_backgroundBlurEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_backgroundBlurStartTime = v5;
    }
    else {
      self->_backgroundBlurTotalTime += v5 - self->_backgroundBlurStartTime;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * v10++) setBackgroundBlurEnabled:v3];
      }
      while (v8 != v10);
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (int)setTorchLevel:(float)a3
{
  v24[1] = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  float torchLevel = self->_torchLevel;
  if (a3 == -3.4028e38)
  {
    float v7 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    if (v7 <= torchLevel) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  float v7 = a3;
  if (a3 == 3.4028e38) {
LABEL_3:
  }
    float v7 = self->_torchLevel;
LABEL_4:
  if (v7 > torchLevel)
  {
    uint64_t v18 = v3;
    LODWORD(v17) = 0;
    FigDebugAssert3();
    BOOL v13 = 0;
    int v14 = 0;
    BOOL v12 = 0;
    int v11 = -16540;
  }
  else
  {
    float v8 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    if (v7 == v8)
    {
      int v11 = 0;
    }
    else
    {
      uint64_t v9 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
      *(float *)&double v10 = v7;
      int v11 = -[BWFigCaptureStream setProperty:value:](v9, "setProperty:value:", *MEMORY[0x1E4F54C70], [NSNumber numberWithFloat:v10]);
      if (v11) {
        float v7 = 0.0;
      }
      float v8 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    }
    BOOL v12 = v7 != v8;
    if (v7 != v8) {
      *(float *)&self->_torchWillBeEnabledForVideoRecording = v7;
    }
    BOOL v13 = v7 > 0.0;
    if (BYTE5(self->_autoTorchRampedUpTime.epoch) == v13)
    {
      int v14 = 0;
    }
    else
    {
      BYTE5(self->_autoTorchRampedUpTime.epoch) = v13;
      int v14 = 1;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  if (a3 == -3.4028e38)
  {
    v23 = @"NewPropertyValue";
    v24[0] = objc_msgSend(NSNumber, "numberWithBool:", torchLevel < 1.0, v17, v18);
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"TorchOverheated", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1]);
  }
  if (v14)
  {
    v21 = @"NewPropertyValue";
    uint64_t v22 = [NSNumber numberWithBool:v13];
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"TorchActive", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1]);
  }
  if (v12)
  {
    v19 = @"NewPropertyValue";
    *(float *)&double v15 = v7;
    uint64_t v20 = [NSNumber numberWithFloat:v15];
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"TorchLevel", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v20 forKeys:&v19 count:1]);
    os_unfair_lock_lock(&self->_clientAuditTokenLock);
    FigCaptureLogTorchPowerEvent(self->_clientPID, self->_applicationID, v7);
    os_unfair_lock_unlock(&self->_clientAuditTokenLock);
  }
  return v11;
}

- (void)_postManualControlRequestCompletedWithName:(uint64_t)a3 requestID:(uint64_t)a4 timeDictionary:(void *)a5 additionalPayloadItems:
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v10 = objc_alloc(MEMORY[0x1E4F1CA60]);
    int v11 = objc_msgSend(v10, "initWithObjectsAndKeys:", a4, @"NewPropertyValue", objc_msgSend(NSNumber, "numberWithInt:", a3), @"ManualControlRequestID", 0);
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    BOOL v12 = (void *)[a5 allKeys];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v18;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v18 != v15) {
            objc_enumerationMutation(v12);
          }
          objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(a5, "objectForKeyedSubscript:", *(void *)(*((void *)&v17 + 1) + 8 * v16)), *(void *)(*((void *)&v17 + 1) + 8 * v16));
          ++v16;
        }
        while (v14 != v16);
        uint64_t v14 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v14);
    }
    [a1 _postNotificationWithPayload:a2 notificationPayload:v11];
  }
}

- (uint64_t)_servicePropertyChangeNotifications:(uint64_t)result
{
  v89[1] = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CMTime v75 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  float v74 = 0.0;
  uint64_t v73 = 0;
  float v72 = 0.0;
  uint64_t v71 = 0;
  if (_servicePropertyChangeNotifications__sSendManualPropertyNotificationsOnceToken != -1) {
    dispatch_once(&_servicePropertyChangeNotifications__sSendManualPropertyNotificationsOnceToken, &__block_literal_global_329);
  }
  int v4 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54088]), "intValue");
  int v5 = *(_DWORD *)(v2 + 2608);
  int v6 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54080]), "intValue");
  int v7 = *(_DWORD *)(v2 + 2612);
  int v67 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E40]), "intValue");
  int v64 = *(_DWORD *)(v2 + 2616);
  int v8 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54090]), "intValue");
  int v65 = *(_DWORD *)(v2 + 2620);
  int v66 = v8;
  int v9 = [(id)v2 isBravoVariant];
  id v10 = v3;
  if (v9)
  {
    int v11 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
    uint64_t v12 = *MEMORY[0x1E4F52DD8];
    char v13 = [v11 isEqualToString:*MEMORY[0x1E4F52DD8]];
    id v10 = v3;
    if ((v13 & 1) == 0) {
      id v10 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54300]), "objectForKeyedSubscript:", v12);
    }
  }
  if (v10)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4F54058];
    if (*(_DWORD *)(v2 + 1864) != 8) {
      uint64_t v14 = (void *)MEMORY[0x1E4F53D98];
    }
    uint64_t v15 = (void *)[v10 objectForKeyedSubscript:*v14];
    if (v15) {
      float v16 = (float)((float)(int)[v15 intValue] / -255.0) + 1.0;
    }
    else {
      float v16 = 0.0;
    }
  }
  else
  {
    float v16 = *(float *)(v2 + 2640);
  }
  long long v17 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53E48]];
  if (v17)
  {
    [v17 doubleValue];
    CMTimeMakeWithSeconds(&v75, v18, 1000000000);
  }
  long long v19 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53F70]];
  float v20 = 0.0;
  float v21 = 0.0;
  if (v19)
  {
    [v19 floatValue];
    float v21 = v22;
  }
  v23 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53E38]];
  v24 = v23;
  if (v23)
  {
    [v23 floatValue];
    float v20 = v25;
  }
  v26 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C70]];
  v27 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C48]];
  uint64_t v28 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C10]];
  if (v26)
  {
    if (v27)
    {
      v29 = (void *)v28;
      if (v28)
      {
        [v26 floatValue];
        float v31 = v30;
        [v27 floatValue];
        float v33 = v32;
        [v29 floatValue];
        if (v31 >= v33) {
          float v35 = v33;
        }
        else {
          float v35 = v31;
        }
        if (v35 >= v34) {
          float v35 = v34;
        }
        *(float *)&uint64_t v73 = v31 / v35;
        *((float *)&v73 + 1) = v33 / v35;
        float v74 = v34 / v35;
      }
    }
  }
  v36 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C60]];
  v37 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C58]];
  uint64_t v38 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F53C50]];
  if (v36)
  {
    if (v37)
    {
      v39 = (void *)v38;
      if (v38)
      {
        [v36 floatValue];
        float v41 = v40;
        [v37 floatValue];
        float v43 = v42;
        [v39 floatValue];
        if (v41 >= v43) {
          float v45 = v43;
        }
        else {
          float v45 = v41;
        }
        if (v45 >= v44) {
          float v45 = v44;
        }
        *(float *)&uint64_t v71 = v41 / v45;
        *((float *)&v71 + 1) = v43 / v45;
        float v72 = v44 / v45;
      }
    }
  }
  v46 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53BD8]];
  v47 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53B98]];
  if (v46) {
    BOOL v48 = v47 == 0;
  }
  else {
    BOOL v48 = 1;
  }
  int v49 = !v48;
  float v50 = 0.0;
  if (!v48)
  {
    [v47 floatValue];
    float v52 = v51;
    [v46 floatValue];
    float v50 = log2f(v52 / v53);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 2632));
  if (v16 == *(float *)(v2 + 2640))
  {
    int v54 = 0;
  }
  else
  {
    *(float *)(v2 + 2640) = v16;
    int v54 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v4 <= v5) {
      int v54 = [(id)v2 isPropertyObserved:@"LensPosition"];
    }
  }
  CMTime time1 = v75;
  CMTime time2 = *(CMTime *)(v2 + 2644);
  if (CMTimeCompare(&time1, &time2))
  {
    *(CMTime *)(v2 + 2644) = v75;
    int v55 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v6 <= v7) {
      int v55 = [(id)v2 isPropertyObserved:@"ExposureDuration"];
    }
  }
  else
  {
    int v55 = 0;
  }
  if (v21 == *(float *)(v2 + 2668))
  {
    int v56 = 0;
    if (!v24) {
      goto LABEL_65;
    }
  }
  else
  {
    *(float *)(v2 + 2668) = v21;
    int v56 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v6 <= v7) {
      int v56 = [(id)v2 isPropertyObserved:@"ISO"];
    }
    if (!v24) {
      goto LABEL_65;
    }
  }
  if (v20 != *(float *)(v2 + 2672) || v67 > v64)
  {
    *(float *)(v2 + 2672) = v20;
    int v68 = 1;
    if (!v49) {
      goto LABEL_71;
    }
    goto LABEL_68;
  }
LABEL_65:
  int v68 = 0;
  if (!v49) {
    goto LABEL_71;
  }
LABEL_68:
  if (v50 != *(float *)(v2 + 2676))
  {
    *(float *)(v2 + 2676) = v50;
    if (_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications) {
      int v57 = 1;
    }
    else {
      int v57 = [(id)v2 isPropertyObserved:@"ExposureTargetOffset"];
    }
    goto LABEL_72;
  }
LABEL_71:
  int v57 = 0;
LABEL_72:
  if (v73 == *(void *)(v2 + 2680) && LODWORD(v74) == (unint64_t)*(unsigned int *)(v2 + 2688))
  {
    int v59 = 0;
  }
  else
  {
    *(void *)(v2 + 2680) = v73;
    *(float *)(v2 + 2688) = v74;
    int v59 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v66 <= v65) {
      int v59 = [(id)v2 isPropertyObserved:@"DeviceWhiteBalanceGains"];
    }
  }
  if (v71 == *(void *)(v2 + 2692) && LODWORD(v72) == (unint64_t)*(unsigned int *)(v2 + 2700))
  {
    int v61 = 0;
  }
  else
  {
    *(void *)(v2 + 2692) = v71;
    *(float *)(v2 + 2700) = v72;
    if (_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications) {
      int v61 = 1;
    }
    else {
      int v61 = [(id)v2 isPropertyObserved:@"GrayWorldDeviceWhiteBalanceGains"];
    }
  }
  result = pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 2632));
  if (!v54)
  {
    if (!v55) {
      goto LABEL_90;
    }
LABEL_102:
    v86 = @"NewPropertyValue";
    CFAllocatorRef v63 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time1 = v75;
    CFDictionaryRef v87 = CMTimeCopyAsDictionary(&time1, v63);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"ExposureDurationChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1));
    if (!v56) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  v88 = @"NewPropertyValue";
  *(float *)&double v62 = v16;
  v89[0] = [NSNumber numberWithFloat:v62];
  result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"LensPositionChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v89, &v88, 1));
  if (v55) {
    goto LABEL_102;
  }
LABEL_90:
  if (v56)
  {
LABEL_91:
    v84 = @"NewPropertyValue";
    *(float *)&double v62 = v21;
    uint64_t v85 = [NSNumber numberWithFloat:v62];
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"ISOChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1));
  }
LABEL_92:
  if (v68)
  {
    v82 = @"NewPropertyValue";
    *(float *)&double v62 = v20;
    uint64_t v83 = [NSNumber numberWithFloat:v62];
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"ExposureTargetBiasChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v83, &v82, 1));
  }
  if (v57)
  {
    v80 = @"NewPropertyValue";
    *(float *)&double v62 = v50;
    uint64_t v81 = [NSNumber numberWithFloat:v62];
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"ExposureTargetOffsetChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v81, &v80, 1));
  }
  if (v59)
  {
    v78 = @"NewPropertyValue";
    uint64_t v79 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v73 length:12];
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"WhiteBalanceGainsChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1));
  }
  if (v61)
  {
    v76 = @"NewPropertyValue";
    uint64_t v77 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v71 length:12];
    return objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", @"GrayWorldWhiteBalanceGainsChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1));
  }
  return result;
}

- (BOOL)isPropertyObserved:(id)a3
{
  uint64_t v3 = (void *)[*(id *)&self->_currentBiasedExposureCompletedID objectForKeyedSubscript:a3];
  return [v3 BOOLValue];
}

- (void)_postNotificationWithPayload:(id)a3 notificationPayload:(id)a4
{
  if (a3)
  {
    notificationQueue = self->_notificationQueue;
    if (notificationQueue)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __76__BWFigVideoCaptureDevice__postNotificationWithPayload_notificationPayload___block_invoke;
      block[3] = &unk_1E5C248A0;
      block[4] = a3;
      block[5] = self;
      block[6] = a4;
      dispatch_async(notificationQueue, block);
    }
  }
  else
  {
    FigDebugAssert3();
  }
}

- (BWFigVideoCaptureStream)bravoTelephotoCaptureStream
{
  return self->_bravoTelephotoCaptureStream;
}

- (NSArray)captureStreams
{
  return self->_captureStreams;
}

- (BOOL)overCaptureEnabled
{
  return self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
}

- (int)deviceType
{
  return self->_deviceType;
}

- (OS_dispatch_queue)streamSetPropertyAsyncQueue
{
  return self->_streamSetPropertyAsyncQueue;
}

uint64_t __70__BWFigVideoCaptureDevice__serviceAutoTorchNotification_sampleBuffer___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 1824);
  return result;
}

- (BOOL)sensorRawStillImageOutputsEnabled
{
  return self->_sensorRawStillImageOutputsEnabled;
}

- (BWFigVideoCaptureStream)pearlInfraredCaptureStream
{
  return self->_pearlInfraredCaptureStream;
}

- (int)maxStillImageCaptureBufferCountForHDRMode:(int)a3 digitalFlashMode:(int)a4 qualityPrioritization:(int)a5 clientBracketCount:(int)a6 bravoConstituentImageDeliveryDeviceTypes:(id)a7
{
  id v7 = a7;
  int v10 = a3;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a6 <= 1) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = a6;
  }
  if (v12 <= 2) {
    int v13 = 2;
  }
  else {
    int v13 = v12;
  }
  if (self->_redEyeReductionEnabled) {
    unsigned int v12 = v13;
  }
  if (v12 <= 3) {
    int v14 = 3;
  }
  else {
    int v14 = v12;
  }
  if (a3) {
    int v15 = v14;
  }
  else {
    int v15 = v12;
  }
  if (a5 >= 2)
  {
    if (v15 <= 4) {
      int v15 = 4;
    }
    if (self->_unifiedBracketingMode)
    {
      int v16 = v15 <= 5 ? 5 : v15;
      if (self->_hasDeepFusion && a5 > 2) {
        int v15 = v16;
      }
    }
  }
  if (a4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    ubCaptureParametersByPortType = self->_ubCaptureParametersByPortType;
    uint64_t v19 = [(NSDictionary *)ubCaptureParametersByPortType countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      int v21 = 0;
      uint64_t v22 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v36 != v22) {
            objc_enumerationMutation(ubCaptureParametersByPortType);
          }
          id v24 = [(NSDictionary *)self->_ubCaptureParametersByPortType objectForKeyedSubscript:*(void *)(*((void *)&v35 + 1) + 8 * i)];
          if (v21 <= (int)[v24 maxNumberOfFramesForAdaptiveBracketing]) {
            int v21 = [v24 maxNumberOfFramesForAdaptiveBracketing];
          }
        }
        uint64_t v20 = [(NSDictionary *)ubCaptureParametersByPortType countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v20);
    }
    else
    {
      int v21 = 0;
    }
    int v25 = v21 + 1;
    int v10 = a3;
    id v7 = a7;
  }
  else
  {
    int v25 = 0;
  }
  if (self->_bravoConstituentPhotoDeliveryEnabled && (int)[v7 count] >= 1) {
    int v26 = [v7 count];
  }
  else {
    int v26 = 1;
  }
  if (self->_stereoFusionEnabled || self->_bravoConstituentPhotoDeliveryEnabled || self->_depthDataDeliveryEnabled)
  {
    if (v26 <= 2) {
      int v26 = 2;
    }
  }
  else
  {
    if (v26 <= 2) {
      int v32 = 2;
    }
    else {
      int v32 = v26;
    }
    if (self->_stereoPhotoCaptureEnabled) {
      int v26 = v32;
    }
  }
  if (a5 <= 1 && a6 <= 0 && v10 == 0) {
    int v29 = v15;
  }
  else {
    int v29 = v15 + 1;
  }
  int v30 = v26 * v29;
  if (v30 <= v25) {
    return v25;
  }
  else {
    return v30;
  }
}

- (unsigned)sensorRawPixelFormat
{
  uint64_t v2 = [(BWFigVideoCaptureDevice *)self sensorRawPoolRequirements];
  if (v2
    && (id v3 = [(NSDictionary *)v2 objectForKeyedSubscript:*MEMORY[0x1E4F24D70]],
        objc_opt_class(),
        (objc_opt_isKindOfClass() & 1) != 0))
  {
    return [v3 intValue];
  }
  else
  {
    FigDebugAssert3();
    return 0;
  }
}

- (NSDictionary)sensorRawPoolRequirements
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v37 = 0;
  if (self->_multipleSensorRawBufferPoolsEnabled)
  {
    id v3 = -[BWFigVideoCaptureDevice _sensorRawPoolsRequirements]((id *)&self->super.isa);
    if (![v3 count]) {
      return 0;
    }
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v33 objects:v40 count:16];
    if (!v4) {
      return 0;
    }
    uint64_t v5 = v4;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v28 = *(void *)v34;
    uint64_t v9 = *MEMORY[0x1E4F24E10];
    uint64_t v10 = *MEMORY[0x1E4F24D08];
    obj = v3;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v34 != v28) {
          objc_enumerationMutation(obj);
        }
        unsigned int v12 = *(NSDictionary **)(*((void *)&v33 + 1) + 8 * i);
        int v13 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v9), "intValue");
        int v14 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v10), "intValue");
        BOOL v15 = !FigCaptureVideoDimensionsAreValid(v6 | (unint64_t)(v7 << 32));
        if (v13 < (int)v6) {
          BOOL v15 = 1;
        }
        if (v14 < (int)v7) {
          BOOL v15 = 1;
        }
        if (v15)
        {
          unsigned int v6 = v13;
          uint64_t v7 = v14;
        }
        else
        {
          uint64_t v7 = v7;
        }
        if (v15) {
          int v8 = v12;
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
    }
    while (v5);
    return v8;
  }
  if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
  {
    int v16 = [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup syncGroup];
    int v8 = [(BWFigCaptureSynchronizedStreamsGroup *)v16 getProperty:*MEMORY[0x1E4F55628] error:&v37];
    if (v37) {
      goto LABEL_35;
    }
  }
  else
  {
    long long v17 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    int v8 = [(BWFigCaptureStream *)v17 getProperty:*MEMORY[0x1E4F54B88] error:&v37];
    if (v37)
    {
LABEL_35:
      FigDebugAssert3();
      return v8;
    }
  }
  if ([(NSDictionary *)v8 count])
  {
    uint64_t v18 = *MEMORY[0x1E4F24E10];
    v39[0] = *MEMORY[0x1E4F24D90];
    v39[1] = v18;
    uint64_t v19 = *MEMORY[0x1E4F24C98];
    v39[2] = *MEMORY[0x1E4F24D08];
    v39[3] = v19;
    uint64_t v20 = *MEMORY[0x1E4F24D70];
    v39[4] = *MEMORY[0x1E4F24D78];
    v39[5] = v20;
    int v21 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:6];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v29 objects:v38 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v30;
LABEL_28:
      uint64_t v25 = 0;
      while (1)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(v21);
        }
        if (![(NSDictionary *)v8 objectForKeyedSubscript:*(void *)(*((void *)&v29 + 1) + 8 * v25)])break; {
        if (v23 == ++v25)
        }
        {
          uint64_t v23 = [v21 countByEnumeratingWithState:&v29 objects:v38 count:16];
          if (v23) {
            goto LABEL_28;
          }
          return v8;
        }
      }
    }
  }
  return v8;
}

- (void)setMaximumFrameRate:(float)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        *(float *)&double v7 = a3;
        [*(id *)(*((void *)&v12 + 1) + 8 * i) setMaximumFrameRate:v7];
      }
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }
  [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys requestedZoomFactor];
  -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)self, v11);
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (os_unfair_lock_s)_updateSlaveFrameRateForZoomFactor:(os_unfair_lock_s *)result
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result + 326;
    os_unfair_lock_lock(result + 326);
    uint64_t v5 = *(void **)(v3 + 1288);
    os_unfair_lock_unlock(v4);
    return (os_unfair_lock_s *)-[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](v3, v5, a2);
  }
  return result;
}

- (uint64_t)_setMinimumMasterToSlaveFrameRateRatio:(uint64_t)result
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    result = [*(id *)(result + 544) minimumMasterToSlaveFrameRateRatioSupported];
    if (result)
    {
      LODWORD(v4) = [*(id *)(v3 + 544) minimumMasterToSlaveFrameRateRatio];
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v5 = *(void **)(v3 + 552);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v12;
        if (v4 <= a2) {
          uint64_t v4 = a2;
        }
        else {
          uint64_t v4 = v4;
        }
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v12 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v11 + 1) + 8 * i);
            if ((int)[v10 masterToSlaveFrameRateRatio] < (int)a2) {
              [v10 setMasterToSlaveFrameRateRatio:v4];
            }
          }
          uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v7);
      }
      return [*(id *)(v3 + 544) setMinimumMasterToSlaveFrameRateRatio:a2];
    }
  }
  return result;
}

- (unint64_t)_ubDigitalFlashSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(float)a4 snr:(uint64_t)a5 sphereAvailable:(uint64_t)a6 fusionEnabled:(int)a7 sceneMonitoring:
{
  if (!a1) {
    return 0;
  }
  long long v11 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
  long long v12 = objc_msgSend(*(id *)(a1 + 2000), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
  [v11 integrationTime];
  double v14 = v13;
  [v11 gain];
  double v16 = v14 * v15;
  double v17 = 1.0;
  if ([v11 aeTarget] && objc_msgSend(v11, "aeAverage"))
  {
    double v18 = (double)[v11 aeTarget];
    double v17 = v18 / (double)[v11 aeAverage];
  }
  [v11 exposureBias];
  double v20 = v16 * v17 / exp2(v19);
  if (a7)
  {
    double v21 = *(double *)(a1 + 2192);
    if (v21 != 0.0 && v20 < v21 && fabs((v21 - v20) / ((v20 + v21) * 0.5)) < 0.2) {
      double v20 = *(double *)(a1 + 2192);
    }
    *(double *)(a1 + 2192) = v20;
  }
  [v12 digitalFlashRecommendRegularFlashSNRThreshold];
  float v23 = v22;
  [v12 digitalFlashBacklitRecommendRegularFlashSNRThreshold];
  float v25 = v24;
  if (a7)
  {
    float v26 = *(float *)(a1 + 2200);
    if (v26 != 0.0 && v26 < a4 && fabs((float)(v26 - a4) / ((float)(a4 + v26) * 0.5)) < 0.15) {
      a4 = *(float *)(a1 + 2200);
    }
    *(float *)(a1 + 2200) = a4;
  }
  [v12 digitalFlashAvailableEffectiveIntegrationTimeThreshold];
  double v28 = v27;
  [v12 digitalFlashRecommendedEffectiveIntegrationTimeThreshold];
  if (v20 >= v29) {
    unint64_t v30 = ((unint64_t)(v20 >= v28) << 10) | 0x800;
  }
  else {
    unint64_t v30 = (unint64_t)(v20 >= v28) << 10;
  }
  if (a4 < v25 && [v11 aeFaceAverage])
  {
    float v31 = (float)[v11 aeFaceAverage];
    float v32 = v31 - (float)[v11 aeAverage];
    float v33 = v32 / (float)[v11 aeAverage];
    if (a7)
    {
      long long v34 = *(void **)(a1 + 2216);
      if (v34)
      {
        [v34 addDataPoint:v33];
        [*(id *)(a1 + 2216) average];
        float v33 = v35;
        double v36 = *(double *)(a1 + 2208);
        if (v36 != 0.0 && fabs((v36 - v33) / ((v36 + v33) * 0.5)) < 0.1) {
          float v33 = v36;
        }
        *(double *)(a1 + 2208) = v33;
      }
    }
    [v12 digitalFlashBacklitRecommendRegularFlashAERelativeDifferenceThreshold];
    if (v33 <= v37) {
      v30 |= 0x20000uLL;
    }
  }
  if (a4 < v23) {
    v30 |= 0x8000uLL;
  }
  return v30;
}

- (void)_serviceNondisruptiveSwitchingFormatWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v40 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  float v43 = (void *)[v40 objectForKeyedSubscript:*MEMORY[0x1E4F54300]];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id obj = *(id *)(a1 + 552);
  uint64_t v7 = [obj countByEnumeratingWithState:&v51 objects:v60 count:16];
  if (!v7)
  {
    char v9 = 0;
    goto LABEL_17;
  }
  uint64_t v8 = v7;
  char v9 = 0;
  uint64_t v10 = *(void *)v52;
  uint64_t v11 = *MEMORY[0x1E4F540E8];
  do
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v52 != v10) {
        objc_enumerationMutation(obj);
      }
      double v13 = *(void **)(*((void *)&v51 + 1) + 8 * i);
      -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:](a1, v13, objc_msgSend(a4, "objectForKeyedSubscript:", objc_msgSend(v13, "portType")), a5, *(unsigned __int8 *)(a1 + 3072));
      int v14 = [v13 activeNondisruptiveSwitchingCommandID];
      if (v13 == a3)
      {
        float v15 = v40;
      }
      else
      {
        float v15 = objc_msgSend(v43, "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
        if (!v15)
        {
          uint64_t v16 = [v13 completedNondisruptiveSwitchingCommandID];
          goto LABEL_12;
        }
      }
      uint64_t v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v11), "intValue");
LABEL_12:
      int v17 = v16;
      if ((int)v16 > v14)
      {
        FigDebugAssert3();
        unsigned int v50 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_49;
      }
      [v13 setCompletedNondisruptiveSwitchingCommandID:v16];
      v9 |= v17 < v14;
    }
    uint64_t v8 = [obj countByEnumeratingWithState:&v51 objects:v60 count:16];
  }
  while (v8);
LABEL_17:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  char v18 = (*(unsigned char *)(a1 + 1286) == 0) | v9;
  *(unsigned char *)(a1 + 1286) = v9 & 1;
  if (v9)
  {
    if (*(unsigned char *)(a1 + 2592) && !*(unsigned char *)(a1 + 2593)) {
      *(unsigned char *)(a1 + 2593) = 1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
    if (v18) {
      return;
    }
  }
  char v42 = v18;
  long double v19 = (void *)[MEMORY[0x1E4F28E78] string];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  double v20 = *(void **)(a1 + 552);
  uint64_t v21 = [v20 countByEnumeratingWithState:&v45 objects:v55 count:16];
  if (!v21) {
    goto LABEL_35;
  }
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)v46;
  uint64_t v24 = *MEMORY[0x1E4F540E8];
  while (2)
  {
    uint64_t v25 = 0;
    while (2)
    {
      if (*(void *)v46 != v23) {
        objc_enumerationMutation(v20);
      }
      float v26 = *(void **)(*((void *)&v45 + 1) + 8 * v25);
      if (v26 == a3)
      {
        double v27 = v40;
      }
      else
      {
        double v27 = objc_msgSend(v43, "objectForKeyedSubscript:", objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * v25), "portType"));
        if (!v27)
        {
          uint64_t v28 = [v26 completedNondisruptiveSwitchingCommandID];
          goto LABEL_33;
        }
      }
      uint64_t v28 = objc_msgSend((id)objc_msgSend(v27, "objectForKeyedSubscript:", v24), "intValue");
LABEL_33:
      uint64_t v29 = v28;
      unint64_t v30 = (void *)[v26 portType];
      [v19 appendFormat:@"%@: Metadata ID:%d, active ID:%d.", BWPortTypeToDisplayString(v30, v31), v29, objc_msgSend(v26, "activeNondisruptiveSwitchingCommandID")];
      if (v22 != ++v25) {
        continue;
      }
      break;
    }
    uint64_t v22 = [v20 countByEnumeratingWithState:&v45 objects:v55 count:16];
    if (v22) {
      continue;
    }
    break;
  }
LABEL_35:
  if (v42)
  {
    if (dword_1EB4C4FF0)
    {
      unsigned int v50 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      float v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v33 = v50;
      if (os_log_type_enabled(v32, type)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34) {
        goto LABEL_47;
      }
      goto LABEL_49;
    }
  }
  else if (dword_1EB4C4FF0)
  {
    unsigned int v50 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    double v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v36 = v50;
    if (os_log_type_enabled(v35, type)) {
      unsigned int v37 = v36;
    }
    else {
      unsigned int v37 = v36 & 0xFFFFFFFE;
    }
    if (v37)
    {
LABEL_47:
      int v56 = 136315394;
      int v57 = "-[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatWithSampleBuffer:fromCaptureStream:frameStatis"
            "ticsByPortType:streamingImageIntent:]";
      __int16 v58 = 2112;
      int v59 = v19;
      _os_log_send_and_compose_impl();
    }
LABEL_49:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

- (uint64_t)_serviceStereoVideoCaptureSceneMonitoringWithFrameStatisticsByPortType:(uint64_t)a3 sceneFlags:
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = result;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id obj = *(id *)(result + 552);
    result = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)v13;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(obj);
          }
          char v9 = *(void **)(*((void *)&v12 + 1) + 8 * v8);
          unsigned int v11 = 1;
          os_unfair_lock_lock((os_unfair_lock_t)(v5 + 1540));
          LODWORD(v9) = objc_msgSend(*(id *)(v5 + 1528), "resolveStereoVideoCaptureStatusWithFrameStatistics:sceneFlags:stereoVideoCaptureStatusOut:", objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v9, "portType")), a3, &v11);
          os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 1540));
          if (v9) {
            -[BWFigVideoCaptureDevice _updateStereoVideoCaptureStatus:]((os_unfair_lock_s *)v5, v11);
          }
          ++v8;
        }
        while (v6 != v8);
        result = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

- (uint64_t)_updateSlaveFrameRateForZoomFactor:(float)a3 masterCaptureStream:
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v88 = [*(id *)(v5 + 560) indexOfObject:a2];
  v90 = (void *)[*(id *)(v5 + 1312) slaveStreamBlockingFocusAndExposureStability];
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id obj = *(id *)(v5 + 552);
  uint64_t v7 = [obj countByEnumeratingWithState:&v95 objects:v100 count:16];
  if (!v7)
  {
    unsigned int v9 = 0;
    goto LABEL_104;
  }
  uint64_t v8 = v7;
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)v96;
  uint64_t v86 = *MEMORY[0x1E4F52DD8];
  uint64_t v87 = *MEMORY[0x1E4F54BF0];
  do
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)v96 != v10) {
        objc_enumerationMutation(obj);
      }
      long long v12 = *(void **)(*((void *)&v95 + 1) + 8 * v11);
      if (v12 == a2)
      {
        uint64_t v18 = [a2 portType];
        long double v19 = v6;
        double v20 = &unk_1EFB01610;
        goto LABEL_92;
      }
      unsigned int v13 = *(_DWORD *)(v5 + 1376);
      uint64_t v14 = [*(id *)(v5 + 560) indexOfObject:*(void *)(*((void *)&v95 + 1) + 8 * v11)];
      if (*(unsigned char *)(v5 + 1464))
      {
        long long v15 = *(void **)(v5 + 1456);
        BOOL v16 = v15 ? v12 == v15 : v14 + 1 == v88;
        if (v16 && !*(unsigned char *)(v5 + 3640))
        {
          if (*(float *)(v5 + 1468) == 0.0)
          {
            unsigned int v13 = 0x7FFFFFFF;
          }
          else
          {
            [a2 maximumFrameRate];
            unsigned int v13 = vcvtps_s32_f32(v17 / *(float *)(v5 + 1468));
          }
        }
      }
      if (*(unsigned char *)(v5 + 1404) && v13 != 1 && *(float *)(v5 + 1364) <= a3 && *(float *)(v5 + 1368) >= a3) {
        unsigned int v13 = 1;
      }
      if (v13 != 1 && *(unsigned char *)(v5 + 1441) != 0) {
        unsigned int v13 = 1;
      }
      if (*(unsigned char *)(v5 + 3640) && !*(unsigned char *)(v5 + 3652) && v13 != 1 && *(unsigned char *)(v5 + 3849) == 0) {
        unsigned int v13 = 1;
      }
      if (([v12 firmwareTimeMachineEnabledWhenConfiguredAsSlave] & (v13 != 1)) != 0) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = v13;
      }
      [v12 streamingFrameRateForZoomPIPOverlay];
      if (v24 == 0.0)
      {
        if (![v12 streamingRequiredWhenConfiguredAsSlave] || v23 == 1)
        {
          if ([v12 visionDataRequiredWhenConfiguredAsSlave] && v23 != 1)
          {
            float v29 = *(float *)(v5 + 3168);
            [v12 maximumFrameRate];
            float v31 = v30;
            if (v29 > 0.0)
            {
              if (v29 >= v30)
              {
                [v12 maximumFrameRate];
                float v31 = v32;
              }
              else
              {
                float v31 = *(float *)(v5 + 3168);
              }
            }
            [v12 maximumFrameRate];
            LODWORD(v23) = vcvtps_s32_f32(v33 / v31);
          }
        }
        else
        {
          uint64_t v23 = 1;
        }
      }
      else
      {
        [*(id *)(v5 + 2736) appliedZoomFactorWithoutFudge];
        if (*(void **)(v5 + 568) == a2
          && (float v26 = *(float *)&v25,
              float v27 = *(float *)(v5 + 4032),
              objc_msgSend((id)objc_msgSend(v12, "portType"), "isEqualToString:", v86))
          && (*(float *)&double v25 = v26 * v27, (float)(v26 * v27) >= *(float *)(v5 + 4028))
          && *(int *)(v5 + 3828) <= 2
          && !*(unsigned char *)(v5 + 4036))
        {
          objc_msgSend(v12, "streamingFrameRateForZoomPIPOverlay", v25);
          float v55 = v54;
          [a2 maximumFrameRate];
          *(float *)&double v25 = *(float *)&v25 / v55;
          if ((int)v23 >= (int)*(float *)&v25) {
            unsigned int v56 = (int)*(float *)&v25;
          }
          else {
            unsigned int v56 = v23;
          }
          if (v23) {
            uint64_t v23 = v56;
          }
          else {
            uint64_t v23 = (int)*(float *)&v25;
          }
          uint64_t v28 = 1;
        }
        else
        {
          uint64_t v28 = 0;
        }
        objc_msgSend(v12, "setStreamingRequiredWhenConfiguredAsSlave:", v28, v25);
      }
      int v34 = [v12 streamingRequiredWhenConfiguredAsSlave];
      if (v12 == (void *)[*(id *)(v5 + 544) cameraControlsStatisticsMasterStream] && v23 != 1)
      {
        if (!v23) {
          goto LABEL_63;
        }
        [*(id *)(v5 + 496) maximumFrameRate];
        float v36 = 1.0;
        if (floorf(v35 / 30.0) > 1.0)
        {
          [*(id *)(v5 + 496) maximumFrameRate];
          float v36 = floorf(v37 / 30.0);
        }
        float v38 = (float)(int)v23;
        if (v36 <= (float)(int)v23)
        {
LABEL_63:
          [*(id *)(v5 + 496) maximumFrameRate];
          float v40 = floorf(v39 / 30.0);
          float v38 = 1.0;
          if (v40 > 1.0)
          {
            [*(id *)(v5 + 496) maximumFrameRate];
            float v38 = floorf(v41 / 30.0);
          }
        }
        uint64_t v23 = (int)v38;
      }
      if (v12 != v90)
      {
LABEL_67:
        int v42 = 0;
        goto LABEL_72;
      }
      if (*(unsigned char *)(v5 + 602))
      {
        int v42 = 1;
      }
      else
      {
        if (!*(unsigned char *)(v5 + 603)) {
          goto LABEL_67;
        }
        int v42 = objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v86);
      }
LABEL_72:
      if (*(unsigned char *)(v5 + 3640) && !*(unsigned char *)(v5 + 3849)) {
        int v42 = 0;
      }
      if (v42 && v23 != 1)
      {
        if (!v23) {
          goto LABEL_81;
        }
        [*(id *)(v5 + 496) maximumFrameRate];
        float v44 = 1.0;
        if (floorf(v43 / 30.0) > 1.0)
        {
          [*(id *)(v5 + 496) maximumFrameRate];
          float v44 = floorf(v45 / 30.0);
        }
        float v46 = (float)(int)v23;
        if (v44 <= (float)(int)v23)
        {
LABEL_81:
          [*(id *)(v5 + 496) maximumFrameRate];
          float v48 = floorf(v47 / 30.0);
          float v46 = 1.0;
          if (v48 > 1.0)
          {
            [*(id *)(v5 + 496) maximumFrameRate];
            float v46 = floorf(v49 / 30.0);
          }
        }
        uint64_t v23 = (int)v46;
      }
      if (v12 == *(void **)(v5 + 1456)
        && v23 != 1
        && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "stream"), "getPropertyIfSupported:error:", v87, 0), "BOOLValue"))
      {
        if (!v23
          || (float v50 = (float)(int)v23, [*(id *)(v5 + 496) minimumFrameRate], v51 <= (float)(int)v23))
        {
          [*(id *)(v5 + 496) minimumFrameRate];
          float v50 = v52;
        }
        uint64_t v23 = (int)v50;
      }
      v9 += v34;
      uint64_t v53 = [NSNumber numberWithInt:v23];
      uint64_t v18 = [v12 portType];
      long double v19 = v6;
      double v20 = (void *)v53;
LABEL_92:
      [v19 setObject:v20 forKeyedSubscript:v18];
      ++v11;
    }
    while (v8 != v11);
    uint64_t v57 = [obj countByEnumeratingWithState:&v95 objects:v100 count:16];
    uint64_t v8 = v57;
  }
  while (v57);
LABEL_104:
  if (!v90 || *(unsigned char *)(v5 + 602) || *(unsigned char *)(v5 + 603)) {
    goto LABEL_123;
  }
  if (v9 < *(_DWORD *)(v5 + 1320))
  {
    ++v9;
    float v58 = 30.0;
    goto LABEL_113;
  }
  float v58 = 30.0;
  if ([v90 streamingRequiredWhenConfiguredAsSlave])
  {
LABEL_113:
    int v60 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v90, "portType")), "intValue");
    if (v60)
    {
      float v61 = (float)v60;
      double v62 = (id *)(v5 + 496);
      [*(id *)(v5 + 496) maximumFrameRate];
      float v64 = floorf(v63 / v58);
      float v65 = 1.0;
      if (v64 > 1.0)
      {
        [*v62 maximumFrameRate];
        float v65 = floorf(v66 / v58);
      }
      if (v65 > v61) {
        goto LABEL_122;
      }
      [*v62 maximumFrameRate];
      float v61 = 1.0;
      if (floorf(v67 / v58) <= 1.0) {
        goto LABEL_122;
      }
    }
    else
    {
      [*(id *)(v5 + 496) maximumFrameRate];
      float v61 = 1.0;
      if (floorf(v68 / v58) <= 1.0)
      {
LABEL_122:
        objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", (int)v61), objc_msgSend(v90, "portType"));
        goto LABEL_123;
      }
      double v62 = (id *)(v5 + 496);
    }
    [*v62 maximumFrameRate];
    float v61 = floorf(v69 / v58);
    goto LABEL_122;
  }
  if (*(unsigned char *)(v5 + 604))
  {
    int v59 = *(_DWORD *)(v5 + 1396);
    if (v59)
    {
      float v58 = (float)v59;
      goto LABEL_113;
    }
  }
LABEL_123:
  if (v9 >= *(_DWORD *)(v5 + 1320) && !*(unsigned char *)(v5 + 604) || *(_DWORD *)(v5 + 1376) == *(_DWORD *)(v5 + 1384)) {
    goto LABEL_146;
  }
  [a2 baseZoomFactor];
  float v71 = v70;
  float v72 = (void *)v88;
  if (v88 >= [*(id *)(v5 + 560) count] - 1)
  {
    uint64_t v73 = 0;
    if (!v88) {
      goto LABEL_132;
    }
LABEL_130:
    if (v88 < [*(id *)(v5 + 560) count])
    {
      float v72 = (void *)[*(id *)(v5 + 560) objectAtIndexedSubscript:v88 - 1];
      goto LABEL_132;
    }
    float v72 = 0;
    if (!v73) {
      goto LABEL_135;
    }
LABEL_133:
    [v73 baseZoomFactor];
    float v75 = v74;
    float v76 = v71;
LABEL_137:
    float v77 = v71 + (float)((float)(v75 - v76) * 0.5);
    goto LABEL_138;
  }
  uint64_t v73 = (void *)[*(id *)(v5 + 560) objectAtIndexedSubscript:v88 + 1];
  if (v88) {
    goto LABEL_130;
  }
LABEL_132:
  if (v73) {
    goto LABEL_133;
  }
LABEL_135:
  if (v72)
  {
    [v72 baseZoomFactor];
    float v75 = v71;
    goto LABEL_137;
  }
  float v77 = 0.0;
LABEL_138:
  if (v77 > a3) {
    uint64_t v73 = v72;
  }
  if (v73)
  {
    if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v73, "portType")), "intValue"))
    {
      int v78 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v73, "portType")), "intValue");
      uint64_t v79 = *(unsigned int *)(v5 + 1384);
      if (v78 < (int)v79) {
        uint64_t v79 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v73, "portType")), "intValue");
      }
    }
    else
    {
      uint64_t v79 = *(unsigned int *)(v5 + 1384);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v79), objc_msgSend(v73, "portType"));
  }
LABEL_146:
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  v80 = *(void **)(v5 + 552);
  result = [v80 countByEnumeratingWithState:&v91 objects:v99 count:16];
  if (result)
  {
    uint64_t v81 = result;
    uint64_t v82 = *(void *)v92;
    do
    {
      uint64_t v83 = 0;
      do
      {
        if (*(void *)v92 != v82) {
          objc_enumerationMutation(v80);
        }
        v84 = *(void **)(*((void *)&v91 + 1) + 8 * v83);
        uint64_t v85 = objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v84, "portType"));
        if (v85) {
          objc_msgSend(v84, "setMasterToSlaveFrameRateRatio:", objc_msgSend(v85, "intValue"));
        }
        ++v83;
      }
      while (v81 != v83);
      result = [v80 countByEnumeratingWithState:&v91 objects:v99 count:16];
      uint64_t v81 = result;
    }
    while (result);
  }
  return result;
}

- (uint64_t)_updateFrameSkippingRatio
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 4268);
    int v3 = *(unsigned __int8 *)(result + 4264);
    [*(id *)(result + 496) minimumFrameRate];
    BOOL v5 = v2 < 1 || v3 == 0;
    if (!v5 && *(_DWORD *)(v1 + 4268) <= (int)v4)
    {
      [*(id *)(v1 + 496) minimumFrameRate];
      uint64_t v7 = (((int)v8 + *(_DWORD *)(v1 + 4268) - 1) / *(_DWORD *)(v1 + 4268));
    }
    else
    {
      uint64_t v7 = 1;
    }
    result = BWDeviceModelIsD9x();
    if (result)
    {
      result = [*(id *)(v1 + 552) count];
      if (result == 1)
      {
        unsigned int v9 = (void *)[*(id *)(v1 + 496) stream];
        uint64_t v10 = *MEMORY[0x1E4F54958];
        uint64_t v11 = [NSNumber numberWithInt:v7];
        return [v9 setPropertyIfSupported:v10 value:v11];
      }
    }
  }
  return result;
}

- (void)setRedEyeReductionEnabled:(BOOL)a3
{
  self->_redEyeReductionEnabled = a3;
}

- (int)depthType
{
  return self->_depthType;
}

- (BOOL)adaptiveOverscanEnabled
{
  return BYTE1(self->_cinematicVideoAverageRenderingTime);
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 2728) == 1)
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 2712) removeAllObjects];
    result = [*(id *)(*(void *)(v2 + 32) + 2720) removeAllObjects];
    *(_DWORD *)(*(void *)(v2 + 32) + 2728) = 0;
  }
  return result;
}

- (id)_initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceVendor:(id)a12 createAutofocusSampleBufferProcessorFunction:(void *)a13 cameraParameters:(id)a14 deviceClientPriority:(int)a15 error:(int *)a16
{
  v152[1] = *MEMORY[0x1E4F143B8];
  int v146 = 0;
  v145.receiver = self;
  v145.super_class = (Class)BWFigVideoCaptureDevice;
  uint64_t v22 = [(BWFigVideoCaptureDevice *)&v145 init];
  if (!v22)
  {
    float v41 = 0;
    int v42 = 0;
    float v43 = a16;
    goto LABEL_145;
  }
  if (!a3)
  {
    FigDebugAssert3();
LABEL_150:
    float v32 = 0;
LABEL_155:
    int v60 = a16;
    goto LABEL_42;
  }
  *((void *)v22 + 1) = a3;
  *((void *)v22 + 2) = a12;
  *((_DWORD *)v22 + 128) = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"Position"), "intValue");
  *((_DWORD *)v22 + 121) = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  *((void *)v22 + 65) = a4;
  long long v23 = *(_OWORD *)&a9->var0[4];
  *((_OWORD *)v22 + 2) = *(_OWORD *)a9->var0;
  *((_OWORD *)v22 + 3) = v23;
  long long v24 = *(_OWORD *)&a9->var0[4];
  long long v143 = *(_OWORD *)a9->var0;
  long long v144 = v24;
  *((_DWORD *)v22 + 16) = FigCaptureGetPIDFromAuditToken(&v143);
  long long v25 = *(_OWORD *)&a9->var0[4];
  long long v143 = *(_OWORD *)a9->var0;
  long long v144 = v25;
  v22[68] = FigCaptureClientIsRunningInXCTest(&v143) != 0;
  *((_DWORD *)v22 + 18) = 0;
  *((void *)v22 + 10) = [a8 copy];
  v22[488] = a7;
  *((void *)v22 + 3) = [*((id *)v22 + 1) copyProperty:@"Clock" error:&v146];
  if (v146)
  {
    FigDebugAssert3();
    a3 = 0;
    goto LABEL_150;
  }
  *((void *)v22 + 15) = (id)[*((id *)v22 + 1) supportedProperties];
  *((_OWORD *)v22 + 110) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)v22 + 111) = _Q0;
  id v31 = a5;
  if (!a5)
  {
    id v31 = a6;
    if (!a6)
    {
      v152[0] = a4;
      id v31 = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v152 count:1];
    }
  }
  float v32 = -[BWFigVideoCaptureDevice _copyStreamsForAttributes:deviceClientPriority:errOut:]((uint64_t)v22, v31, a15, &v146);
  if (v146
    || (*((void *)v22 + 14) = -[BWFigVideoCaptureDevice _copyPortTypesFromStreams:errOut:]((uint64_t)v22, v32, &v146),
        v146))
  {
    FigDebugAssert3();
    a3 = 0;
    goto LABEL_155;
  }
  uint64_t v33 = [a4 objectForKeyedSubscript:@"SynchronizedStreamsBaseZoomFactorOverrides"];
  id v120 = a4;
  uint64_t v34 = [a4 objectForKeyedSubscript:@"SynchronizedStreamsClientBaseZoomFactorsByPortType"];
  unint64_t v35 = [v32 count];
  float v36 = (void *)[*((id *)v22 + 1) supportedProperties];
  v121 = v32;
  if (![v36 objectForKeyedSubscript:*MEMORY[0x1E4F52D98]])
  {
    if (v35 < 2) {
      goto LABEL_19;
    }
LABEL_40:
    FigDebugAssert3();
    a3 = 0;
    goto LABEL_41;
  }
  id v37 = a5;
  uint64_t v38 = [*((id *)v22 + 1) copySynchronizedStreamsGroupForStreams:v32 error:0];
  if (v38)
  {
    float v39 = (void *)v38;
    a3 = [[BWFigVideoCaptureSynchronizedStreamsGroup alloc] initWithSynchronizedStreamsGroup:v38 activeStreams:v32 readOnly:v35 < 2 baseZoomFactorOverrides:v33 clientBaseZoomFactorsByPortType:v34 error:&v146];

    if (a3)
    {
      float v40 = v120;
      if (v35 >= 2) {
        *((void *)v22 + 68) = a3;
      }
      a5 = v37;
      goto LABEL_20;
    }
    FigDebugAssert3();
LABEL_41:
    int v60 = a16;
LABEL_42:

    if (v60)
    {
      int v61 = v146;
      if (!v146) {
        int v61 = -12780;
      }
      *int v60 = v61;
    }

    return 0;
  }
  if (v35 >= 2) {
    goto LABEL_40;
  }
LABEL_19:
  a3 = 0;
  float v40 = v120;
LABEL_20:
  long long v44 = *(_OWORD *)&a9->var0[4];
  long long v143 = *(_OWORD *)a9->var0;
  long long v144 = v44;
  int v146 = -[BWFigVideoCaptureDevice _createBWFigVideoCaptureStreamsForCaptureStreams:attributeDictionaries:cameraParameters:synchronizedStreamsGroup:clientAuditToken:tccIdentity:mediaEnvironment:]((uint64_t)v22, v32, v31, a14, (uint64_t)a3, &v143, (uint64_t)a10, (uint64_t)a11);
  if (v146)
  {
LABEL_154:
    FigDebugAssert3();
    goto LABEL_155;
  }
  *((void *)v22 + 70) = (id)[*((id *)v22 + 69) sortedArrayUsingComparator:&__block_literal_global_104];
  if (v35 >= 2)
  {
    if ([v22 isBravoVariant])
    {
      float v46 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v22, *MEMORY[0x1E4F52DD8]);
      *((void *)v22 + 62) = v46;
      if (!v46) {
        goto LABEL_154;
      }
      float v47 = (void *)*((void *)v22 + 72);
      if (!v47) {
        float v47 = v46;
      }
      *((void *)v22 + 161) = v47;
      *((void *)v22 + 162) = v47;
      *((void *)v22 + 71) = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v22, *MEMORY[0x1E4F52DF0]);
      unint64_t v48 = (unint64_t)-[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v22, *MEMORY[0x1E4F52DE8]);
      *((void *)v22 + 72) = v48;
      if (!(*((void *)v22 + 71) | v48)) {
        goto LABEL_154;
      }
      *((_DWORD *)v22 + 327) = 0;
      float v49 = (void *)[v40 objectForKeyedSubscript:@"SynchronizedStreamsSlaveFrameRates"];
      *((_DWORD *)v22 + 343) = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"NominalSlaveFrameRate"), "intValue");
      *((_DWORD *)v22 + 345) = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"ElevatedSlaveFrameRate"), "intValue");
      int v50 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"NominalSlaveFrameRateForDepthDataDelivery"), "intValue");
      *((_DWORD *)v22 + 347) = v50;
      if (!v50) {
        *((_DWORD *)v22 + 347) = *((_DWORD *)v22 + 343);
      }
      int v51 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"ElevatedSlaveFrameRateForDepthDataDelivery"), "intValue");
      *((_DWORD *)v22 + 348) = v51;
      if (!v51) {
        *((_DWORD *)v22 + 348) = *((_DWORD *)v22 + 345);
      }
      int v52 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"ElevatedSlaveFrameRateForDepthDataDeliveryWhenWaitingForExposureFocusStability"), "intValue");
      *((_DWORD *)v22 + 349) = v52;
      if (!v52) {
        *((_DWORD *)v22 + 349) = *((_DWORD *)v22 + 345);
      }
      *((_DWORD *)v22 + 350) = 2;
      uint64_t v53 = (void *)[v40 objectForKeyedSubscript:@"SynchronizedStreamsSwitchOverParameters"];
      *((void *)v22 + 164) = -[BWBravoStreamSelector initWithStreamSelectionAttributes:wideStream:teleStream:superWideStream:cameraCalibrationValid:]([BWBravoStreamSelector alloc], "initWithStreamSelectionAttributes:wideStream:teleStream:superWideStream:cameraCalibrationValid:", v53, *((void *)v22 + 62), *((void *)v22 + 71), *((void *)v22 + 72), objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "rearCameraCalibrationValid"));
      *((_DWORD *)v22 + 355) = 1;
      *((_DWORD *)v22 + 354) = objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", @"parallaxMitigationRampDuration"), "intValue");
      *((void *)v22 + 178) = [[BWRamp alloc] initWithName:@"ParallaxMitigationRamp"];
      *((_DWORD *)v22 + 352) = 0;
      -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)v22);
      float v54 = (void *)[v120 objectForKeyedSubscript:@"SynchronizedStreamsStereoFusionZoomFactorRange"];
      objc_msgSend((id)objc_msgSend(v54, "objectAtIndexedSubscript:", 0), "floatValue");
      *((_DWORD *)v22 + 341) = v55;
      objc_msgSend((id)objc_msgSend(v54, "objectAtIndexedSubscript:", 1), "floatValue");
      *((_DWORD *)v22 + 342) = v56;
      objc_msgSend((id)objc_msgSend(v120, "objectForKeyedSubscript:", @"SynchronizedStreamsOISSISStereoFusionTeleMinIntegrationTimeDenominator"), "doubleValue");
      *((double *)v22 + 294) = 1.0 / v57;
      objc_msgSend((id)objc_msgSend(v120, "objectForKeyedSubscript:", @"SynchronizedStreamsOISSISStereoFusionTeleMinGain"), "floatValue");
      *((_DWORD *)v22 + 590) = v58;
      int v59 = (void *)*((void *)v22 + 71);
      if (v59) {
        *((double *)v22 + 293) = fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary((void *)[v59 sensorIDDictionary]);
      }
      if (*((void *)v22 + 72)) {
        v22[601] = 0;
      }
    }
    else
    {
      int v62 = *((_DWORD *)v22 + 121);
      if (v62 != 12 && v62 != 6) {
        goto LABEL_155;
      }
      if (v62 == 6) {
        float v63 = (uint64_t *)MEMORY[0x1E4F52DF8];
      }
      else {
        float v63 = (uint64_t *)MEMORY[0x1E4F52E10];
      }
      float v64 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v22, *v63);
      *((void *)v22 + 62) = v64;
      *((void *)v22 + 161) = v64;
      if ([a5 count] == 2) {
        *((void *)v22 + 182) = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v22, *MEMORY[0x1E4F52E00]);
      }
    }
    float v65 = [[BWStreamStartStopSynchronizer alloc] initWithStreams:*((void *)v22 + 69) timeoutInSeconds:0.0];
    *((void *)v22 + 74) = v65;
    [(BWStreamStartStopSynchronizer *)v65 setWaitForMasterAEToSettle:(*((_DWORD *)v22 + 121) & 0xFFFFFFFE) == 8];
  }
  else
  {
    float v45 = (void *)[*((id *)v22 + 69) objectAtIndexedSubscript:0];
    *((void *)v22 + 62) = v45;
    [v45 portType];
    if (FigCFEqual() && *((_DWORD *)v22 + 121) != 20) {
      goto LABEL_154;
    }
  }
  unint64_t v118 = v35;
  v122 = v31;
  -[BWFigVideoCaptureDevice _setupMacroFocusDetection]((uint64_t)v22);
  *((void *)v22 + 66) = objc_msgSend((id)objc_msgSend(*((id *)v22 + 62), "stream"), "copyPropertyIfSupported:error:", @"Manufacturer", 0);
  uint64_t v66 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 62), "stream"), "copyPropertyIfSupported:error:", @"NonLocalizedName", 0);
  *((void *)v22 + 67) = v66;
  if (!v66) {
    *((void *)v22 + 67) = objc_msgSend((id)objc_msgSend(*((id *)v22 + 62), "stream"), "copyPropertyIfSupported:error:", @"LocalizedName", 0);
  }
  *((void *)v22 + 193) = FigDispatchQueueCreateWithPriority();
  *((void *)v22 + 309) = FigDispatchQueueCreateWithPriority();
  *((void *)v22 + 518) = FigDispatchQueueCreateWithPriority();
  *((_DWORD *)v22 + 660) = 1065353216;
  int v67 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"SoftISP"), "BOOLValue");
  v22[2048] = v67;
  if (v67)
  {
    *((void *)v22 + 257) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v139 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    float v68 = (void *)*((void *)v22 + 69);
    uint64_t v69 = [v68 countByEnumeratingWithState:&v139 objects:v151 count:16];
    if (v69)
    {
      uint64_t v70 = v69;
      uint64_t v71 = *(void *)v140;
      do
      {
        for (uint64_t i = 0; i != v70; ++i)
        {
          if (*(void *)v140 != v71) {
            objc_enumerationMutation(v68);
          }
          objc_msgSend(*((id *)v22 + 257), "setObject:forKeyedSubscript:", &unk_1EFB01580, objc_msgSend(*(id *)(*((void *)&v139 + 1) + 8 * i), "portType"));
        }
        uint64_t v70 = [v68 countByEnumeratingWithState:&v139 objects:v151 count:16];
      }
      while (v70);
    }
  }
  id v119 = a3;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  uint64_t v73 = (void *)*((void *)v22 + 12);
  uint64_t v74 = [v73 countByEnumeratingWithState:&v135 objects:v150 count:16];
  if (v74)
  {
    uint64_t v75 = v74;
    float v76 = 0;
    uint64_t v77 = *(void *)v136;
    do
    {
      for (uint64_t j = 0; j != v75; ++j)
      {
        if (*(void *)v136 != v77) {
          objc_enumerationMutation(v73);
        }
        uint64_t v79 = *(void *)(*((void *)&v135 + 1) + 8 * j);
        v80 = -[BWUBCaptureParameters initWithPortType:sensorIDDictionary:]([BWUBCaptureParameters alloc], "initWithPortType:sensorIDDictionary:", v79, [*((id *)v22 + 12) objectForKeyedSubscript:v79]);
        uint64_t v81 = v80;
        if (!v76 && v80) {
          float v76 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        }
        [v76 setObject:v81 forKeyedSubscript:v79];
      }
      uint64_t v75 = [v73 countByEnumeratingWithState:&v135 objects:v150 count:16];
    }
    while (v75);
  }
  else
  {
    float v76 = 0;
  }
  *((void *)v22 + 250) = [v76 copy];
  *((double *)v22 + 292) = fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary((void *)[*((id *)v22 + 62) sensorIDDictionary]);
  int v82 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"StillImageCaptureNowAfterAutofocusTimeout"), "BOOLValue");
  v22[1968] = v82;
  if (v82)
  {
    *((_DWORD *)v22 + 493) = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"StillImageContrastBasedAutofocusTimeout"), "intValue");
    *((_DWORD *)v22 + 494) = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"StillImagePhaseDetectionAutofocusTimeout"), "intValue");
  }
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  uint64_t v83 = (void *)*((void *)v22 + 69);
  uint64_t v84 = [v83 countByEnumeratingWithState:&v131 objects:v149 count:16];
  int v42 = v121;
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = *(void *)v132;
    do
    {
      for (uint64_t k = 0; k != v85; ++k)
      {
        if (*(void *)v132 != v86) {
          objc_enumerationMutation(v83);
        }
        *((_DWORD *)v22 + 32) |= BWActiveDeviceTypeFromPortType((void *)[*(id *)(*((void *)&v131 + 1) + 8 * k) portType]);
      }
      uint64_t v85 = [v83 countByEnumeratingWithState:&v131 objects:v149 count:16];
    }
    while (v85);
  }
  v22[1980] = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"Flash"), "BOOLValue");
  *((_DWORD *)v22 + 576) = 1097859072;
  unint64_t v88 = (void *)[*((id *)v22 + 65) objectForKeyedSubscript:@"AutoFlashNormalizedSNRThreshold"];
  if (v88)
  {
    [v88 floatValue];
    *((_DWORD *)v22 + 576) = v89;
  }
  *((void *)v22 + 287) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if ([v121 count])
  {
    unint64_t v90 = 0;
    do
    {
      uint64_t v91 = objc_msgSend((id)objc_msgSend(v122, "objectAtIndexedSubscript:", v90), "objectForKeyedSubscript:", @"AutoFlashNormalizedSNRThreshold");
      if (v91) {
        long long v92 = (void *)v91;
      }
      else {
        long long v92 = &unk_1EFB059E8;
      }
      objc_msgSend(*((id *)v22 + 287), "setObject:forKeyedSubscript:", v92, objc_msgSend(*((id *)v22 + 14), "objectAtIndexedSubscript:", v90++));
    }
    while ([v121 count] > v90);
  }
  v22[1981] = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"NightMode"), "BOOLValue");
  char v93 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"DigitalFlash"), "BOOLValue");
  v22[2144] = v93;
  if (v93)
  {
    id v94 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    long long v127 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v95 = (void *)*((void *)v22 + 250);
    uint64_t v96 = [v95 countByEnumeratingWithState:&v127 objects:v148 count:16];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = *(void *)v128;
      do
      {
        for (uint64_t m = 0; m != v97; ++m)
        {
          if (*(void *)v128 != v98) {
            objc_enumerationMutation(v95);
          }
          uint64_t v100 = *(void *)(*((void *)&v127 + 1) + 8 * m);
          objc_msgSend((id)objc_msgSend(*((id *)v22 + 250), "objectForKeyedSubscript:", v100), "digitalFlashAvailableEffectiveIntegrationTimeThreshold");
          [v94 addObject:v100];
        }
        uint64_t v97 = [v95 countByEnumeratingWithState:&v127 objects:v148 count:16];
      }
      while (v97);
    }
    *((void *)v22 + 270) = v94;
    v22[2172] = (int)FigCapturePlatformIdentifier() > 7;
    v22[2173] = 1;
    *((_DWORD *)v22 + 547) = -1;
    if (*((_DWORD *)v22 + 128) == 2 || (int)FigCapturePlatformIdentifier() >= 8)
    {
      *((void *)v22 + 289) = [[BWMovingWindowStats alloc] initWithWindowSize:6];
      *((void *)v22 + 277) = [[BWMovingWindowStats alloc] initWithWindowSize:8];
    }
    v22[2112] = 0;
    int v42 = v121;
  }
  if (v22[1442])
  {
    objc_msgSend((id)objc_msgSend(*((id *)v22 + 250), "objectForKeyedSubscript:", *MEMORY[0x1E4F52DE8]), "autoFlashMacroNormalizedSNRThreshold");
    *((void *)v22 + 291) = [[BWMovingWindowStats alloc] initWithWindowSize:6];
  }
  v22[2064] = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"DeepFusion"), "BOOLValue");
  *((_DWORD *)v22 + 572) = 0;
  *((_DWORD *)v22 + 613) = 1104150528;
  *((_DWORD *)v22 + 688) = 0;
  uint64_t v101 = objc_alloc_init(BWZoomCommandHandler);
  *((void *)v22 + 342) = v101;
  [(BWZoomCommandHandler *)v101 setZoomCompletionDelegate:v22];
  *((_DWORD *)v22 + 693) = 1036831949;
  *((void *)v22 + 343) = FigDispatchQueueCreateWithPriority();
  *((_DWORD *)v22 + 692) = 0;
  if ((int)FigCapturePlatformIdentifier() >= 3) {
    int v102 = 2;
  }
  else {
    int v102 = 3;
  }
  *((_DWORD *)v22 + 694) = v102;
  *(_WORD *)(v22 + 2785) = 257;
  *((_DWORD *)v22 + 695) = v102 + 3;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  v103 = (void *)*((void *)v22 + 69);
  uint64_t v104 = [v103 countByEnumeratingWithState:&v123 objects:v147 count:16];
  if (v104)
  {
    uint64_t v105 = v104;
    uint64_t v106 = *(void *)v124;
    while (2)
    {
      for (uint64_t n = 0; n != v105; ++n)
      {
        if (*(void *)v124 != v106) {
          objc_enumerationMutation(v103);
        }
        if ([*(id *)(*((void *)&v123 + 1) + 8 * n) isCMIOZoomFactorSupported])
        {
          v22[3056] = 1;
          goto LABEL_121;
        }
      }
      uint64_t v105 = [v103 countByEnumeratingWithState:&v123 objects:v147 count:16];
      if (v105) {
        continue;
      }
      break;
    }
  }
LABEL_121:
  *((void *)v22 + 194) = FigDispatchQueueCreateWithPriority();
  *((void *)v22 + 195) = FigDispatchQueueCreateWithPriority();
  *((void *)v22 + 196) = a13;
  *((void *)v22 + 197) = dispatch_queue_create("com.apple.bwgraph.capture-device-autofocus-processor", 0);
  *((void *)v22 + 198) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *((void *)v22 + 199) = FigSimpleMutexCreate();
  v22[1816] = 1;
  *(void *)(v22 + 1820) = 0;
  *((void *)v22 + 229) = 0x3FE0000000000000;
  *((_DWORD *)v22 + 460) = 0;
  objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"AutoFocusPositionSensorMode"), "intValue");
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  *((_DWORD *)v22 + 466) = CFPreferenceNumberWithDefault;
  if (CFPreferenceNumberWithDefault)
  {
    v109 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 62), "stream"), "supportedProperties");
    if (![v109 objectForKeyedSubscript:*MEMORY[0x1E4F547E8]]) {
      *((_DWORD *)v22 + 466) = 0;
    }
  }
  uint64_t v110 = 0;
  *((_DWORD *)v22 + 487) = 0;
  float v43 = a16;
  if (v118 >= 2)
  {
    if ([v22 isBravoVariant]) {
      uint64_t v110 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v120, "objectForKeyedSubscript:", @"SynchronizedStreamsSwitchOverParameters"), "objectForKeyedSubscript:", @"autoFocusRecommendedMasterPortTypeEnabled"), "BOOLValue");
    }
    else {
      uint64_t v110 = 0;
    }
  }
  *((void *)v22 + 244) = [[BWFrameStatisticsByPortType alloc] initWithPortTypes:*((void *)v22 + 14) autoFocusRecommendedMasterPortTypeEnabled:v110];
  *((void *)v22 + 245) = [[BWFrameStatisticsByPortType alloc] initWithPortTypes:*((void *)v22 + 14) autoFocusRecommendedMasterPortTypeEnabled:v110];
  if ([v42 count])
  {
    unint64_t v111 = 0;
    do
    {
      if (objc_msgSend((id)objc_msgSend(v122, "objectAtIndexedSubscript:", v111), "objectForKeyedSubscript:", @"SensorThermalLevelsByTemperature"))
      {
        id v112 = (id)*((void *)v22 + 512);
        if (!v112)
        {
          id v112 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
          *((void *)v22 + 512) = v112;
        }
        objc_msgSend(v112, "addObject:", objc_msgSend(*((id *)v22 + 14), "objectAtIndexedSubscript:", v111));
      }
      ++v111;
    }
    while ([v42 count] > v111);
  }
  if (*((void *)v22 + 512)) {
    *((void *)v22 + 513) = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(*((id *)v22 + 512), "count"));
  }
  uint64_t v113 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v22 + 2568) = *MEMORY[0x1E4F1F9F8];
  *((void *)v22 + 323) = *(void *)(v113 + 16);
  *((void *)v22 + 329) = FigSimpleMutexCreate();
  *((void *)v22 + 296) = FigSimpleMutexCreate();
  *((int32x4_t *)v22 + 163) = vdupq_n_s32(0xDEADBEEF);
  *((void *)v22 + 328) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *((_DWORD *)v22 + 624) = 0;
  *((_DWORD *)v22 + 326) = 0;
  *((_DWORD *)v22 + 320) = 0;
  *((_DWORD *)v22 + 313) = 0;
  *((void *)v22 + 338) = dispatch_queue_create("com.apple.bwgraph.capture-device-whitebalancegains", 0);
  *((void *)v22 + 339) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *((void *)v22 + 340) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v114 = objc_msgSend((id)objc_msgSend(*((id *)v22 + 62), "stream"), "supportedProperties");
  v22[3548] = [v114 objectForKeyedSubscript:*MEMORY[0x1E4F54B58]] != 0;
  v22[3624] = 0;
  CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)[*((id *)v22 + 65) objectForKeyedSubscript:@"DefaultAutoFocusTapWindowSize"], (CGSize *)v22 + 235);
  CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)[*((id *)v22 + 65) objectForKeyedSubscript:@"DefaultContinuousAutoFocusWindowSize"], (CGSize *)v22 + 236);
  v22[3848] = 1;
  v22[3856] = 1;
  v22[3672] = 1;
  v115 = (_OWORD *)MEMORY[0x1E4F1DAD8];
  *((_DWORD *)v22 + 919) = 0;
  *((_OWORD *)v22 + 230) = *v115;
  v22[1504] = 1;
  *((_DWORD *)v22 + 373) = 0;
  v22[1521] = 1;
  *((_DWORD *)v22 + 385) = 0;
  *((_DWORD *)v22 + 448) = 0;
  *(_OWORD *)(v22 + 1800) = 0u;
  v22[3145] = [*((id *)v22 + 62) hasSphere];
  v22[3146] = 1;
  *((_DWORD *)v22 + 787) = 1065353216;
  *((_DWORD *)v22 + 791) = 0;
  *((_DWORD *)v22 + 775) = 1065353216;
  *(void *)(v22 + 2124) = 0x100000001;
  v22[2456] = 1;
  *((_DWORD *)v22 + 615) = 3;
  -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)v22);
  *((void *)v22 + 59) = objc_alloc_init(BWStats);
  float v41 = v119;
  if (*((_DWORD *)v22 + 121) == 10) {
    *((_DWORD *)v22 + 965) = objc_msgSend((id)objc_msgSend(*((id *)v22 + 65), "objectForKeyedSubscript:", @"TimeOfFlightCameraType"), "intValue");
  }
  *((_DWORD *)v22 + 34) = 0;
  v22[148] = [*((id *)v22 + 62) isMultipleSensorRawBufferPoolsSupported];
  *((_DWORD *)v22 + 1012) = 0;
  -[BWFigVideoCaptureDevice _configureZoomFudging]((uint64_t)v22);
  *((_DWORD *)v22 + 984) = 2;
  *((_DWORD *)v22 + 76) = -1082130432;
  v22[308] = 0;
  *((_DWORD *)v22 + 68) = -1082130432;
  v22[276] = 0;
  v22[376] = 0;
  *((_DWORD *)v22 + 1030) = 0;
  *((void *)v22 + 519) = objc_alloc_init(BWDeviceOrientationMonitor);
  int v116 = *((_DWORD *)v22 + 121);
  if (v116 == 14)
  {
    [v22 setDeskCamActive:1];
    int v116 = *((_DWORD *)v22 + 121);
  }
  if (v116 == 7 && *((_DWORD *)v22 + 128) == 1) {
    [v22 setUltraWideActive:1];
  }
  *((_DWORD *)v22 + 1044) = 808464432;
  v22[4330] = 0;
  *(void *)(v22 + 4180) = 0;
  *((_WORD *)v22 + 2094) = 0;
  *((_DWORD *)v22 + 1048) = -1;
  *((_DWORD *)v22 + 1051) = 0;
  v22[4272] = FigCapturePlatformSupportsExclaves() != 0;
LABEL_145:

  if (v43) {
    *float v43 = v146;
  }
  return v22;
}

- (uint64_t)_updateStreamMetadataSettings
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 2145) || *(unsigned char *)(result + 2146))
    {
      char v2 = 1;
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v10 = *(void **)(result + 2000);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v24 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        char v2 = 0;
        uint64_t v13 = *(void *)v20;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v20 != v13) {
              objc_enumerationMutation(v10);
            }
            v2 |= objc_msgSend((id)objc_msgSend(*(id *)(v1 + 2000), "objectForKeyedSubscript:", *(void *)(*((void *)&v19 + 1) + 8 * i)), "referenceFrameSelectionMethod") == 3;
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v24 count:16];
        }
        while (v12);
      }
      else
      {
        char v2 = 0;
      }
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    int v3 = *(void **)(v1 + 552);
    result = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)v16;
      uint64_t v6 = v2 & 1;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(v3);
          }
          float v8 = *(void **)(*((void *)&v15 + 1) + 8 * v7);
          if (*(unsigned char *)(v1 + 2145)) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = *(unsigned char *)(v1 + 2146) != 0;
          }
          [*(id *)(*((void *)&v15 + 1) + 8 * v7) setAeStatisticsEnabled:v9];
          [v8 setRawFocusScoresEnabled:v6];
          ++v7;
        }
        while (v4 != v7);
        result = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
        uint64_t v4 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)setOverCaptureEnabled:(BOOL)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled != a3)
  {
    BOOL v3 = a3;
    self->_cinematicFramingFeedbackForCameraControlsROIEnabled = a3;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    captureStreams = self->_captureStreams;
    uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v14;
      double v9 = *MEMORY[0x1E4F1DAD8];
      double v10 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(captureStreams);
          }
          uint64_t v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          [v12 setOverCaptureEnabled:v3];
          objc_msgSend(v12, "setPreviewShift:", v9, v10);
          objc_msgSend(v12, "setPreviewShiftAtBaseZoom:", v9, v10);
        }
        uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }
    if (v3)
    {
      *(_DWORD *)((char *)&self->_memoryPool + 1) = 16843009;
      BYTE5(self->_memoryPool) = [(BWBravoStreamSelector *)self->_bravoStreamSelector superWideAutoSwitchingSupported];
      *(_DWORD *)&self->_standbySlaveFrameSkippingEnabledForOverCapture = 22;
    }
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (uint64_t)_updateParallaxMitigationBasedOnZoomFactorEnabled
{
  if (result)
  {
    uint64_t v1 = result;
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 520), "objectForKeyedSubscript:", @"SynchronizedStreamsSwitchOverParameters"), "objectForKeyedSubscript:", @"parallaxMitigationBasedOnZoomFactorEnabled"), "BOOLValue");
    BOOL v2 = result && !*(unsigned char *)(v1 + 3640) && (*(float *)(v1 + 4040) != 0.0 || *(unsigned char *)(v1 + 1464) == 0);
    if (*(unsigned char *)(v1 + 208)) {
      BOOL v2 = 0;
    }
    *(unsigned char *)(v1 + 1440) = v2;
  }
  return result;
}

- (uint64_t)_setupMacroFocusDetection
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (void *)[*(id *)(result + 560) firstObject];
    result = [v2 hasFocus];
    if (result)
    {
      if (*(void *)(v1 + 576))
      {
        *(unsigned char *)(v1 + 1442) = 1;
        [*(id *)(v1 + 1312) wideToSuperWideFocusDistance];
        if (v3 == 0.0) {
          float v3 = 14.0;
        }
        *(float *)(v1 + 1444) = v3;
        result = [*(id *)(v1 + 1312) superWideToWideFocusDistance];
        if (v4 == 0.0) {
          float v4 = 16.0;
        }
        goto LABEL_8;
      }
      uint64_t v5 = (void *)[v2 portType];
      uint64_t v6 = *MEMORY[0x1E4F52DE8];
      if (([v5 isEqualToString:*MEMORY[0x1E4F52DE8]] & 1) != 0
        || (uint64_t v7 = (void *)[v2 portType],
            result = [v7 isEqualToString:*MEMORY[0x1E4F52DD8]],
            result))
      {
        *(unsigned char *)(v1 + 1442) = 1;
        uint64_t v8 = (void *)[v2 stream];
        double v9 = (void *)[v8 getPropertyIfSupported:*MEMORY[0x1E4F54AE0] error:0];
        double v10 = (void *)[v2 stream];
        uint64_t v11 = [v10 getPropertyIfSupported:*MEMORY[0x1E4F54AD8] error:0];
        if (v9) {
          BOOL v12 = v11 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12)
        {
          long long v14 = (void *)v11;
          [v9 floatValue];
          float v16 = v15;
          [v14 floatValue];
          if (v16 <= v17) {
            uint64_t v18 = v14;
          }
          else {
            uint64_t v18 = v9;
          }
          result = [v18 floatValue];
          float v20 = v19 * 1.25;
          *(float *)(v1 + 1444) = v20;
          float v4 = v20 + 2.0;
LABEL_8:
          *(float *)(v1 + 1448) = v4;
          return result;
        }
        result = objc_msgSend((id)objc_msgSend(v2, "portType"), "isEqualToString:", v6);
        if (result) {
          uint64_t v13 = 0x4120000041000000;
        }
        else {
          uint64_t v13 = 0x41C0000041B00000;
        }
        *(void *)(v1 + 1444) = v13;
      }
    }
  }
  return result;
}

- (uint64_t)_copyPortTypesFromStreams:(_DWORD *)a3 errOut:
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a2, "count"));
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v6 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(a2);
          }
          objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v9++), "portType"));
        }
        while (v7 != v9);
        uint64_t v7 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
    *a3 = 0;
    return [v5 copy];
  }
  return result;
}

- (BOOL)isBravoVariant
{
  return (self->_deviceType < 0xAu) & (0x310u >> self->_deviceType);
}

- (BWZoomCommandHandler)zoomCommandHandler
{
  return (BWZoomCommandHandler *)self->_whiteBalanceGainsOrderedKeys;
}

- (void)_serviceNondisruptiveSwitchingFormatForCaptureStream:(uint64_t)a3 frameStatistics:(int)a4 streamingImageIntent:(uint64_t)a5 isStationary:
{
  if (a1)
  {
    uint64_t v58 = 0;
    int v59 = &v58;
    uint64_t v60 = 0x2020000000;
    int v61 = 0;
    if (![a2 zoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned]
      && ![a2 zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned])
    {
LABEL_58:
      _Block_object_dispose(&v58, 8);
      return;
    }
    [a2 baseZoomFactorAfterGDC];
    float v11 = v10;
    [*(id *)(a1 + 2736) requestedZoomFactor];
    if (v11 <= v12) {
      [*(id *)(a1 + 2736) requestedZoomFactor];
    }
    else {
      [a2 baseZoomFactorAfterGDC];
    }
    float v14 = v13;
    if (*(unsigned char *)(a1 + 4329))
    {
      [*(id *)(a1 + 2736) earlySwitchOverScaleFactorForZoomIn];
      if (v15 != 1.0)
      {
        [a2 baseZoomFactorAfterGDC];
        float v17 = v16;
        [*(id *)(a1 + 2736) requestedZoomFactor];
        float v19 = v18;
        [*(id *)(a1 + 2736) earlySwitchOverScaleFactorForZoomIn];
        if (v17 <= (float)(v19 / v20))
        {
          [*(id *)(a1 + 2736) requestedZoomFactor];
          float v23 = v22;
          [*(id *)(a1 + 2736) earlySwitchOverScaleFactorForZoomIn];
          float v14 = v23 / v24;
        }
        else
        {
          [a2 baseZoomFactorAfterGDC];
          float v14 = v21;
        }
        [*(id *)(a1 + 2736) rampTargetZoomFactor];
        if (v14 >= v25)
        {
          [*(id *)(a1 + 2736) rampTargetZoomFactor];
          float v14 = v26;
        }
      }
    }
    float v27 = *(NSObject **)(a1 + 1576);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __130__BWFigVideoCaptureDevice__serviceNondisruptiveSwitchingFormatForCaptureStream_frameStatistics_streamingImageIntent_isStationary___block_invoke;
    block[3] = &unk_1E5C246B8;
    block[4] = a1;
    block[5] = &v58;
    dispatch_sync(v27, block);
    uint64_t v28 = (void *)[(id)a1 masterCaptureStream];
    int v29 = *((_DWORD *)v59 + 6);
    [*(id *)(a1 + 2736) rampTargetZoomFactor];
    if (v30 == 0.0)
    {
      BOOL v34 = 0;
    }
    else
    {
      [*(id *)(a1 + 2736) rampTargetZoomFactor];
      float v32 = v31;
      [*(id *)(a1 + 2736) appliedZoomFactor];
      BOOL v34 = v32 < v33;
    }
    if (FigCapturePlatformIdentifier() != 9 || !*(unsigned char *)(a1 + 1464) || v28 == a2)
    {
      if (*(unsigned char *)(a1 + 2456))
      {
        if (v29 != 2
          && !*(unsigned char *)(a1 + 3640)
          && !*(unsigned char *)(a1 + 1464)
          && ([a2 streamingRequiredWhenConfiguredAsSlave] & 1) == 0)
        {
          unint64_t v35 = (void *)[a2 portType];
          if ([v35 isEqual:*MEMORY[0x1E4F52DD8]])
          {
            if (v34)
            {
              [*(id *)(a1 + 2736) rampTargetZoomFactor];
              if (v36 < *(float *)(a1 + 2788))
              {
                [a2 baseZoomFactorAfterGDC];
                float v14 = v37;
                *(_DWORD *)(a1 + 2464) = 0;
LABEL_34:
                [a2 baseZoomFactorAfterGDC];
                if (v14 == v40)
                {
LABEL_39:
                  if ([(id)a1 ultraHighResolutionZeroShutterLagEnabled])
                  {
                    if (*(unsigned char *)(a1 + 3207))
                    {
                      int v45 = [(id)a1 systemPressureLevel];
                      BOOL v46 = v45 < 2;
                      *(unsigned char *)(a1 + 3208) = v45 > 1;
                    }
                    else
                    {
                      BOOL v46 = 1;
                    }
                  }
                  else
                  {
                    BOOL v46 = 0;
                  }
                  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
                  int v47 = *(unsigned __int8 *)(a1 + 2592);
                  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
                  BOOL v48 = -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureUseSecondaryStream:primaryStream:](a1, (uint64_t)a2);
                  if (*(unsigned char *)(a1 + 1991))
                  {
                    if (*(unsigned char *)(a1 + 1441)) {
                      int v50 = 1;
                    }
                    else {
                      int v50 = v48;
                    }
                  }
                  else
                  {
                    int v50 = 0;
                  }
                  if (*(unsigned char *)(a1 + 1491)) {
                    v50 &= [a2 streamingRequiredWhenConfiguredAsSlave];
                  }
                  if (*(unsigned char *)(a1 + 4091)) {
                    uint64_t v51 = v46 | v50 ^ 1u;
                  }
                  else {
                    uint64_t v51 = 0;
                  }
                  if (a4 == 1) {
                    uint64_t v52 = 1;
                  }
                  else {
                    uint64_t v52 = 2 * (a4 == 2);
                  }
                  LOBYTE(v56) = v46;
                  *(float *)&double v49 = v14;
                  [a2 serviceNondisruptiveSwitchingFormatForZoomFactor:a3 frameStatistics:*((unsigned int *)v59 + 6) imageControlMode:v52 stillImageDigitalFlashMode:a5 isStationary:v51 binnedSIFROnSecondaryStreamAllowed:v47 != 0 ignoreZoomFactorAndQuadraSubPixelSceneMonitoring:v49 ultraHighResolutionZeroShutterLagEnabled:v56];
                  goto LABEL_58;
                }
                [*(id *)(a1 + 2736) predictRampZoomFactorAfterNumberOfFrames:4 settingZoomFactorOfInterest:0.0];
                float v42 = v41;
                if (v41 != 0.0)
                {
                  [a2 baseZoomFactorAfterGDC];
                  float v14 = v42;
                  if (v43 > v42)
                  {
                    [a2 baseZoomFactorAfterGDC];
                    float v14 = v44;
                  }
                }
LABEL_38:
                *(_DWORD *)(a1 + 2464) = 0;
                goto LABEL_39;
              }
            }
            if (*(void *)(a1 + 568))
            {
              uint64_t v53 = (void *)[v28 portType];
              if (![v53 isEqual:*MEMORY[0x1E4F52DF0]])
              {
                if (!v34) {
                  goto LABEL_38;
                }
                if (*(_DWORD *)(a1 + 2464))
                {
                  [a2 baseZoomFactorAfterGDC];
                  float v14 = v55;
                  --*(_DWORD *)(a1 + 2464);
                }
                goto LABEL_34;
              }
              [a2 baseZoomFactorAfterGDC];
              float v14 = v54;
              *(_DWORD *)(a1 + 2464) = *(_DWORD *)(a1 + 2460);
            }
LABEL_33:
            if (!v34) {
              goto LABEL_38;
            }
            goto LABEL_34;
          }
        }
      }
      uint64_t v38 = (void *)[a2 portType];
      if (![v38 isEqual:*MEMORY[0x1E4F52DE8]]
        || ![(id)a1 isBravoVariant])
      {
        goto LABEL_33;
      }
      if (v28 == a2)
      {
        if (!*(unsigned char *)(a1 + 3640))
        {
          if ([*(id *)(a1 + 1424) isRamping]) {
            goto LABEL_32;
          }
          if (!*(unsigned char *)(a1 + 3640)) {
            goto LABEL_33;
          }
        }
        if (*(unsigned char *)(a1 + 3696)) {
          goto LABEL_33;
        }
      }
    }
LABEL_32:
    [a2 baseZoomFactorAfterGDC];
    float v14 = v39;
    goto LABEL_33;
  }
}

- (BWFigVideoCaptureStream)masterCaptureStream
{
  p_currentMasterCaptureStreamLocuint64_t k = &self->_currentMasterCaptureStreamLock;
  os_unfair_lock_lock(&self->_currentMasterCaptureStreamLock);
  currentMasterCaptureStreauint64_t m = self->_currentMasterCaptureStream;
  os_unfair_lock_unlock(p_currentMasterCaptureStreamLock);
  return currentMasterCaptureStream;
}

- (BOOL)ultraHighResolutionZeroShutterLagEnabled
{
  BOOL v2 = self;
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  LOBYTE(v2) = BYTE6(v2->_mostRecentSmartCameraResult);
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return (char)v2;
}

- (BOOL)_depthDataDeliveryOrStereoPhotoCaptureUseSecondaryStream:(BOOL)result primaryStream:(uint64_t)a2
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 1464) || *(unsigned char *)(result + 209))
    {
      int v4 = objc_msgSend(*(id *)(result + 560), "indexOfObject:");
      if (v4 >= 1) {
        uint64_t v5 = [*(id *)(v3 + 560) objectAtIndexedSubscript:(v4 - 1)];
      }
      else {
        uint64_t v5 = 0;
      }
      return v5 == a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (BOOL)optimizesZoomRampsForVISZoomSmoothing
{
  return BYTE1(self->_firstValidFramePTS.timescale);
}

- (void)setISPZoomFactor:(float)a3 totalZoomFactor:(float)a4
{
  p_maxISPZoomFactor = &self->_maxISPZoomFactor;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  *((float *)&self->_zoomCommandHandler + 1) = a3;
  *((float *)&self->_zoomFactorUpdateQueue + 1) = a4;
  os_unfair_lock_unlock((os_unfair_lock_t)p_maxISPZoomFactor);
  uint64_t v8 = *(NSObject **)&self->_whiteBalanceModeForExif;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __60__BWFigVideoCaptureDevice_setISPZoomFactor_totalZoomFactor___block_invoke;
  block[3] = &unk_1E5C24430;
  block[4] = self;
  dispatch_async(v8, block);
}

- (void)setSmartCameraVersion:(id)a3
{
  int v3 = *(_DWORD *)&a3.var0;
  if (![(BWFigVideoCaptureStream *)self->_captureStream started])
  {
    unsigned __int16 v5 = ((_WORD)v3 << 8) | BYTE2(v3);
    uint64_t v6 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    uint64_t v7 = *MEMORY[0x1E4F54B68];
    uint64_t v8 = [NSNumber numberWithUnsignedShort:v5];
    [(BWFigCaptureStream *)v6 setProperty:v7 value:v8];
  }
}

- (void)setDepthDataDeliveryEnabled:(BOOL)a3
{
  if (self->_depthDataDeliveryEnabled != a3 && ![(BWFigVideoCaptureStream *)self->_captureStream started])
  {
    self->_depthDataDeliveryEnabled = a3;
    if (a3) {
      char v5 = 0;
    }
    else {
      char v5 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", @"NightMode"), "BOOLValue");
    }
    self->_hasNightMode = v5;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setMemoryPool:(id)a3
{
  if ([(BWFigVideoCaptureStream *)self->_captureStream started])
  {
    FigDebugAssert3();
  }
  else
  {
    id activeSensorRegionForCameraControls = self->_activeSensorRegionForCameraControls;
    if (activeSensorRegionForCameraControls != a3)
    {

      self->_id activeSensorRegionForCameraControls = ($470D365275581EF16070F5A11344F73E)a3;
    }
  }
}

- (void)setThermalSystemPressureLevel:(int)a3
{
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(self->_flickerAvoidanceMonitor) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setSystemPressureLevel:(int)a3
{
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  if (*(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) != a3)
  {
    if (a3 < 3)
    {
      LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque) = 0;
      if (self->_needsToRelieveSystemPressure) {
        BYTE1(self->_thermalSystemPressureLevel) = 0;
      }
    }
    else
    {
      LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque) = 1;
      if (self->_timeOfLastSystemPressureChange == -1)
      {
        mach_absolute_time();
        self->_timeOfLastSystemPressureChange = FigHostTimeToNanoseconds() / 0xF4240uLL;
      }
    }
    uint64_t v6 = (NSMutableDictionary *)mach_absolute_time();
    uint64_t v7 = *(int *)(&self->_adaptiveOverscanEnabled + 3);
    self->_previousInfraredFramePTS.epoch += FigHostTimeToNanoseconds() / 0xF4240uLL * v7;
    self->_sensorTemperatureStatsByPortType = v6;
    if (SLODWORD(self->_accumulatedSystemPressureLevel) < a3)
    {
      LODWORD(self->_accumulatedSystemPressureLevel) = a3;
      self->_maxSystemPressureLevel = self->_systemPressureLevel;
    }
    *(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) = a3;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setSystemPressureFactors:(unsigned int)a3
{
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  self->_systemPressureLevel = a3;
  if (*(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) == LODWORD(self->_accumulatedSystemPressureLevel)) {
    self->_maxSystemPressureLevel |= a3;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setPeakPowerSystemPressureLevel:(int)a3
{
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  HIDWORD(self->_flickerAvoidanceMonitor) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setTimeOfFlightAFEnabled:(BOOL)a3
{
  self->_allowSystemPressureToForceOffOverCaptureActiveSlaveStreauint64_t m = a3;
}

- (BOOL)supportsWideColor
{
  id v2 = [(NSDictionary *)self->_attributes objectForKeyedSubscript:@"WideColor"];
  return [v2 BOOLValue];
}

- (int)videoStabilizationStrength
{
  return HIDWORD(self->_defaultContinuousAutoFocusWindowSize.height);
}

- (uint64_t)_setupStillImageCaptureStateMachine
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 2544))
    {
      int v3 = 0;
    }
    else
    {
      if (*(unsigned char *)(result + 2049)) {
        uint64_t v2 = 1;
      }
      else {
        uint64_t v2 = 2;
      }
      int v3 = [[FigStateMachine alloc] initWithLabel:@"Still Image State Machine" stateCount:4 initialState:v2 owner:result];
      [(FigStateMachine *)v3 setPerformsAtomicStateTransitions:0];
      [(FigStateMachine *)v3 setLabel:@"WaitingForValidFrameStatistics" forState:1];
      [(FigStateMachine *)v3 setLabel:@"Idle" forState:2];
      [(FigStateMachine *)v3 setLabel:@"Pending" forState:4];
      [(FigStateMachine *)v3 setLabel:@"InProgress" forState:8];
      [(FigStateMachine *)v3 whenTransitioningFromState:4 toState:8 callHandler:&__block_literal_global_466];
      [(FigStateMachine *)v3 whenTransitioningFromState:1 toState:2 callHandler:&__block_literal_global_468];
      [(FigStateMachine *)v3 whenTransitioningFromState:8 toState:2 callHandler:&__block_literal_global_470];
      result = [(FigStateMachine *)v3 whenTransitioningFromState:2 toState:8 callHandler:&__block_literal_global_472];
    }
    *(void *)(v1 + 2544) = v3;
  }
  return result;
}

- (void)_addStationaryFlagToMetadata:(void *)result
{
  if (result)
  {
    uint64_t v2 = result;
    result = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (result)
    {
      int v3 = result;
      result = (void *)v2[383];
      if (result)
      {
        uint64_t v4 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(result, "isStationary"));
        uint64_t v5 = *MEMORY[0x1E4F53530];
        return (void *)[v3 setObject:v4 forKeyedSubscript:v5];
      }
    }
  }
  return result;
}

- (unint64_t)_serviceMacroFocusDetectionWithFrameStatisticsByPortType:(unint64_t)result
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unint64_t v3 = result;
    uint64_t v4 = *(void **)(result + 576);
    if (!v4) {
      uint64_t v4 = *(void **)(v3 + 496);
    }
    uint64_t v5 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v4, "portType"));
    BOOL v6 = -[BWFigVideoCaptureDevice _focusIsStable:](v3, v5);
    [v5 focusDistance];
    float v8 = v7;
    result = [a2 frameCount];
    if (result >= 0x1F && v6 && v8 > 0.0)
    {
      uint64_t v9 = 1448;
      if (!*(unsigned char *)(v3 + 1452)) {
        uint64_t v9 = 1444;
      }
      float v10 = *(float *)(v3 + v9);
      int v11 = v8 < v10;
      if (*(unsigned __int8 *)(v3 + 1452) != v11)
      {
        *(unsigned char *)(v3 + 1452) = v11;
        float v12 = @"NewPropertyValue";
        v13[0] = [NSNumber numberWithBool:v8 < v10];
        return objc_msgSend((id)v3, "_postNotificationWithPayload:notificationPayload:", @"MacroFocusNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1));
      }
    }
  }
  return result;
}

- (uint64_t)_stillImageSceneTypeForCaptureStream:(void *)a3 frameStatisticsByPortType:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 digitalFlashMode:(uint64_t *)a8 sceneFlags:
{
  if (result)
  {
    float v12 = (unsigned char *)result;
    if (a6 >= 2 || a5 | a4 | a7)
    {
      if (*(int *)(result + 2436) <= 2)
      {
        uint64_t v18 = 0;
        int v16 = -[BWFigVideoCaptureDevice _resolveStillImageCaptureTypeFromStatisticsByPortType:masterCaptureStream:flashMode:hdrMode:qualityPrioritization:stereoFusionMode:depthDataDeliveryEnabled:bravoConstituentImageDeliveryDeviceTypes:burstQualityCaptureEnabled:clientBracketMode:forSceneMonitoring:captureFlags:](result, a3, a2, 2 * (a4 != 0), 2 * (a5 != 0), a6, 0, 0, 0, 0, 0, 1, &v18);
        result = 0;
        unsigned int v17 = v16 - 2;
        if (v17 <= 4) {
          return dword_1A5F0CFFC[v17];
        }
      }
      else
      {
        if (a5) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = a6 <= 1;
        }
        unsigned int v14 = !v13;
        uint64_t v15 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](result, a2, a3, v14, 0, 1, NAN);
        if (a4
          && -[BWFigVideoCaptureDevice _ubIsAutoFlashForSceneFlags:digitalFlashModeForSceneMonitoring:]((uint64_t)v12, v15, a7))
        {
          result = 1;
        }
        else if (a5 && (-[BWFigVideoCaptureDevice _ubIsHDRCaptureUsingSceneFlags:](v12, v15) & 1) != 0)
        {
          result = 2;
        }
        else
        {
          result = 3;
        }
        if (a8) {
          *a8 = v15;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (BOOL)_ubIsAutoFlashForSceneFlags:(int)a3 digitalFlashModeForSceneMonitoring:
{
  if (!a1) {
    return 0;
  }
  if ((a2 & 0x20) != 0)
  {
    if (!a3 || (a2 & 0x4800) != 0) {
      return -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1);
    }
    uint64_t v3 = (a2 >> 29) & 1;
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  BOOL v5 = (~a2 & 0x10000800) == 0 && *(unsigned char *)(a1 + 2173) != 0;
  if ((v3 & 1) == 0 && !v5) {
    return 0;
  }
  return -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1);
}

- (uint64_t)_ubStillImageSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(unsigned int)a4 fusionEnabled:(void *)a5 metadata:(int)a6 sceneMonitoring:(float)a7 zoomFactorOverride:
{
  if (result)
  {
    uint64_t v11 = result;
    if ((unint64_t)[a3 frameCount] <= 3 && !*(unsigned char *)(v11 + 68)) {
      return 0;
    }
    float v12 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
    result = objc_msgSend(*(id *)(v11 + 2000), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
    if (result)
    {
      BOOL v13 = (void *)result;
      [a2 baseZoomFactor];
      float v15 = v14;
      char v100 = [v12 motionDataStatus];
      if ((v100 & 8) != 0) {
        unsigned int v101 = 0;
      }
      else {
        unsigned int v101 = [a2 hasSphere];
      }
      [v12 eit];
      double v17 = v16;
      [v12 sifrGain];
      float v19 = v18;
      if (*(unsigned char *)(v11 + 1452))
      {
        uint64_t v20 = 272629760;
      }
      else if (-[BWFigVideoCaptureDevice _ubIsSuperWidePreferredOrCurrentPrimaryCaptureStreamInWideZoomRange](v11))
      {
        uint64_t v20 = 0x10000000;
      }
      else
      {
        uint64_t v20 = 0;
      }
      id v109 = 0;
      -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:](v11, 0x1EFA5A500, (uint64_t)&v109);
      if ([v109 BOOLValue]) {
        v20 |= 4uLL;
      }

      if ([v12 hrEnabled]) {
        v20 |= 0x80uLL;
      }
      [v13 lowLightEffectiveIntegrationTimeThreshold];
      if (v17 <= v21) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = v20 | 8;
      }
      if (v19 > 0.0)
      {
        [v13 sifrMainEffectiveIntegrationTimeThreshold];
        if (v17 <= v23 || ([v13 sifrGainThreshold], v19 <= v24)) {
          v22 |= 2uLL;
        }
      }
      unsigned int v25 = [v12 ispDGain];
      [v12 ispDGainRangeExpansionFactor];
      float v27 = v26;
      [v13 lowLightHDRWithoutSIFRISPDGainThreshold];
      if (v28 > 0.0)
      {
        [v13 lowLightHDRWithoutSIFRISPDGainThreshold];
        if ((float)((float)v25 / (float)(v27 * 256.0)) < v29) {
          v22 |= 0x10000uLL;
        }
      }
      if (([a2 hasSphere] & 1) == 0)
      {
        [v13 longWithoutSphereEffectiveIntegrationTimeThreshold];
        if (v30 > 0.0)
        {
          [v13 longWithoutSphereEffectiveIntegrationTimeThreshold];
          if (v17 <= v31) {
            v22 |= 0x200uLL;
          }
        }
      }
      if (*(unsigned char *)(v11 + 2064) && *(unsigned char *)(v11 + 2065))
      {
        [v13 deepFusionEffectiveIntegrationTimeThreshold];
        if (v17 > v32 && ((v22 & 0xC) != 0 || !*(unsigned char *)(v11 + 1993))) {
          v22 |= 0x1000uLL;
        }
        char v33 = 1;
      }
      else
      {
        char v33 = 0;
      }
      if (*(unsigned char *)(v11 + 2048) && FigCaptureVideoDimensionsAreValid(*(void *)(v11 + 140)))
      {
        if ([a2 activeQuadraBinningFactor] == 1
          || (objc_msgSend((id)objc_msgSend(*(id *)(v11 + 2056), "objectForKeyedSubscript:", objc_msgSend(a2, "portType")), "intValue") & 0x80000000) != 0)
        {
          if (FigCaptureVideoDimensionsAreValid(*(void *)(v11 + 140))
            && FigCaptureVideoDimensionsAreEqual([*(id *)(v11 + 496) sensorDimensions], *(void *)(v11 + 140)))
          {
            v22 |= 0x200000uLL;
          }
          else if (([a2 activeNondisruptiveSwitchingFormatIndex] & 0x80000000) == 0)
          {
            float v37 = objc_msgSend((id)objc_msgSend(a2, "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(a2, "activeNondisruptiveSwitchingFormatIndex"));
            unsigned int v38 = objc_msgSend((id)objc_msgSend(v37, "objectForKeyedSubscript:", *MEMORY[0x1E4F55300]), "intValue");
            if (FigCaptureVideoDimensionsAreEqual(v38 | (unint64_t)(objc_msgSend((id)objc_msgSend(v37, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F8]), "intValue") << 32), *(void *)(v11 + 140)))
            {
              v22 |= 0x200000uLL;
            }
          }
        }
        else
        {
          if ((v33 & (a7 < (float)(v15 + v15))) != 0) {
            uint64_t v34 = v22 | 0x100000;
          }
          else {
            uint64_t v34 = v22;
          }
          uint64_t v35 = v34 | 0x200000;
          if (a7 < (float)(v15 + v15)) {
            uint64_t v22 = v35;
          }
          [v13 learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold];
          if (*(unsigned char *)(v11 + 2072))
          {
            [v13 learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold];
            if (v17 > v36) {
              v22 |= 0x1000000uLL;
            }
          }
        }
      }
      char v39 = v33 ^ 1;
      if (!*(unsigned char *)(v11 + 209)) {
        char v39 = 1;
      }
      if ((v39 & 1) == 0)
      {
        float v40 = (void *)[a2 portType];
        if ([v40 isEqualToString:*MEMORY[0x1E4F52DD8]])
        {
          if (a7 < (float)(v15 * 1.1) && v15 <= a7) {
            v22 |= 0x80000uLL;
          }
          if (*(unsigned char *)(v11 + 3204))
          {
            [v12 integrationTime];
            if (v42 > 0.00833333333) {
              v22 |= 0x4000000uLL;
            }
          }
          int v43 = [*(id *)(v11 + 560) indexOfObject:a2];
          if (v43 >= 1) {
            float v44 = (void *)[*(id *)(v11 + 560) objectAtIndexedSubscript:(v43 - 1)];
          }
          else {
            float v44 = 0;
          }
          int v45 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v44, "portType"));
          [v12 normalizedSNR];
          float v47 = v46;
          [v45 normalizedSNR];
          float v49 = v48;
          if (a6 && [*(id *)(v11 + 216) count])
          {
            v104[0] = MEMORY[0x1E4F143A8];
            v104[1] = 3221225472;
            uint64_t v105 = __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke;
            uint64_t v106 = &unk_1E5C2B9D0;
            uint64_t v107 = v11;
            v108 = a3;
            float v47 = __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke((uint64_t)v104, [a2 portType]);
            uint64_t v50 = [v44 portType];
            float v49 = v105((uint64_t)v104, v50);
          }
          [v13 stereoPhotoSNRThreshold];
          if (v47 < v51
            || ([v13 stereoPhotoSNRDifferenceSecondarySNRThreshold], v49 < v52)
            && ([v13 stereoPhotoSNRDifferenceThreshold], vabds_f32(v47, v49) > v53))
          {
            v22 |= 0x8000000uLL;
          }
        }
      }
      if (*(unsigned char *)(v11 + 1464))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 4048));
        float v54 = *(void **)(v11 + 4056);
        if (v54
          && ([v54 fudgedLowerBound], a7 >= v55)
          && ([*(id *)(v11 + 4056) fudgedUpperBound], v56 >= a7))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4048));
          v22 |= 0x800000uLL;
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4048));
        }
      }
      if (*(unsigned char *)(v11 + 1988))
      {
        [v13 redSaturationMainEffectiveIntegrationTimeThreshold];
        BOOL v58 = v17 <= v57;
        if (*(unsigned char *)(v11 + 1991))
        {
          double v59 = v57;
          [v13 redSaturationSIFRGainThreshold];
          if (v60 != 0.0)
          {
            BOOL v58 = v19 > 0.0;
            if (v19 > 0.0 && v17 > v59)
            {
              [v13 redSaturationSIFRGainThreshold];
              BOOL v58 = v19 <= v61;
            }
          }
        }
        if (v58) {
          v22 |= 0x100uLL;
        }
      }
      if (*(unsigned char *)(v11 + 3072)) {
        v22 |= 0x2000uLL;
      }
      if (!*(unsigned char *)(v11 + 1980))
      {
        uint64_t v65 = 0;
        float v66 = 0.0;
        goto LABEL_131;
      }
      int v62 = (void *)MEMORY[0x1E4F52DE8];
      if (*(void *)(v11 + 2328))
      {
        objc_msgSend((id)objc_msgSend(*(id *)(v11 + 2000), "objectForKeyedSubscript:", *MEMORY[0x1E4F52DE8]), "autoFlashMacroNormalizedSNRThreshold");
        float v64 = v63;
      }
      else
      {
        float v64 = NAN;
      }
      if (*(unsigned char *)(v11 + 2074))
      {
        [v13 autoFlashColorConstancyNormalizedSNRThreshold];
        [v13 autoFlashColorConstancyNormalizedSNRThreshold];
        float v68 = v67;
        uint64_t v69 = v12;
      }
      else
      {
        uint64_t v70 = objc_msgSend(*(id *)(v11 + 2296), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
        uint64_t v69 = v12;
        if (!v70)
        {
          uint64_t v70 = objc_msgSend(*(id *)(v11 + 2296), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v11 + 496), "portType"));
          uint64_t v69 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(*(id *)(v11 + 496), "portType"));
        }
        [v70 floatValue];
        float v68 = v71;
        if (a4)
        {
          if (v101)
          {
            fvcd_estimateOISOutputImageSNR(v69);
            float v66 = v72;
            uint64_t v65 = 3;
          }
          else
          {
            [v69 normalizedSNR];
            float v66 = v99 + 4.7712;
            uint64_t v65 = 2;
          }
          goto LABEL_109;
        }
      }
      [v69 normalizedSNR];
      float v66 = v73;
      uint64_t v65 = 1;
LABEL_109:
      objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *v62), "normalizedQsumSNR");
      float v75 = v74;
      if (a6)
      {
        float v76 = *(void **)(v11 + 2312);
        if (v76)
        {
          [v76 addDataPoint:v66];
          [*(id *)(v11 + 2312) average];
          float v66 = v77;
          float v78 = *(float *)(v11 + 2308);
          if (v78 != 0.0 && fabsf((float)(v78 - v66) / (float)((float)(v78 + v66) * 0.5)) < 0.2) {
            float v66 = *(float *)(v11 + 2308);
          }
          *(float *)(v11 + 2308) = v66;
        }
        uint64_t v79 = *(void **)(v11 + 2328);
        if (v79)
        {
          [v79 addDataPoint:v75];
          [*(id *)(v11 + 2328) average];
          float v75 = v80;
          float v81 = *(float *)(v11 + 2320);
          if (v81 != 0.0 && fabsf((float)(v81 - v75) / (float)((float)(v81 + v75) * 0.5)) < 0.2) {
            float v75 = *(float *)(v11 + 2320);
          }
          *(float *)(v11 + 2320) = v75;
        }
      }
      if (v75 >= v64) {
        uint64_t v82 = v22;
      }
      else {
        uint64_t v82 = v22 | 0x20000000;
      }
      if ((v22 & 0x10000000) == 0) {
        uint64_t v82 = v22;
      }
      if ((v82 & 0x20000000) != 0 || v66 < v68) {
        uint64_t v22 = v82 | 0x20;
      }
      else {
        uint64_t v22 = v82;
      }
LABEL_131:
      if (!*(unsigned char *)(v11 + 2144) || !*(unsigned char *)(v11 + 2145) && !*(unsigned char *)(v11 + 1490)) {
        goto LABEL_158;
      }
      if (!objc_msgSend(*(id *)(v11 + 2160), "containsObject:", objc_msgSend(a2, "portType"))) {
        goto LABEL_155;
      }
      int v84 = 0;
      if (!*(void *)(v11 + 2272) || (v22 & 0x800000) == 0) {
        goto LABEL_151;
      }
      uint64_t v85 = (void *)[a2 portType];
      if ([v85 isEqualToString:*MEMORY[0x1E4F52DD8]]) {
        BOOL v86 = a7 < (float)(v15 * 1.1) && v15 <= a7;
      }
      else {
        BOOL v86 = 0;
      }
      if (*(unsigned char *)(v11 + 1491) && *(void *)(v11 + 2272))
      {
        unsigned int v87 = [(id)v11 shallowDepthOfFieldEffectStatus];
        if (!v86)
        {
          int v84 = 0;
          if (v87 > 0xE || ((1 << v87) & 0x6202) == 0) {
            goto LABEL_151;
          }
LABEL_155:
          v22 |= 0x4000uLL;
          goto LABEL_158;
        }
      }
      else if (!v86)
      {
        goto LABEL_155;
      }
      int v84 = 1;
LABEL_151:
      if (*(unsigned char *)(v11 + 2172))
      {
        unint64_t v88 = *(void **)(v11 + 496);
        if (v88 != a2)
        {
          if ((v100 & 8) != 0)
          {
            uint64_t v89 = 0;
          }
          else
          {
            uint64_t v89 = [*(id *)(v11 + 496) hasSphere];
            unint64_t v88 = *(void **)(v11 + 496);
          }
          v22 |= -[BWFigVideoCaptureDevice _ubDigitalFlashSceneFlagsForCaptureStream:frameStatisticsByPortType:snr:sphereAvailable:fusionEnabled:sceneMonitoring:](v11, v88, a3, NAN, v89, a4, a6);
          if ((v84 & 1) == 0) {
            goto LABEL_158;
          }
          goto LABEL_157;
        }
      }
      v22 |= -[BWFigVideoCaptureDevice _ubDigitalFlashSceneFlagsForCaptureStream:frameStatisticsByPortType:snr:sphereAvailable:fusionEnabled:sceneMonitoring:](v11, a2, a3, v66, v101, a4, a6);
      if (v84) {
LABEL_157:
      }
        v22 |= 0x2000000uLL;
LABEL_158:
      [a5 setSnrType:v65];
      *(float *)&double v90 = v66;
      [a5 setSnr:v90];
      if (*(unsigned char *)(v11 + 1981))
      {
        if (*(_DWORD *)(v11 + 1984) == 1)
        {
          uint64_t v91 = (void *)[a2 portType];
          if ([v91 isEqualToString:*MEMORY[0x1E4F52DD8]])
          {
            [v13 nightModeMinGainThreshold];
            if (v92 <= 0.0)
            {
              int v95 = [v12 aeLimitsReached];
            }
            else
            {
              float v93 = v92;
              [v12 gain];
              int v95 = v94 >= v93;
            }
            if (v95) {
              v22 |= 0x10uLL;
            }
          }
        }
      }
      [v12 exposureBias];
      if (v96 >= 0.0) {
        uint64_t v97 = v22;
      }
      else {
        uint64_t v97 = v22 | 0x40;
      }
      if (v96 <= 0.0) {
        uint64_t v98 = v97;
      }
      else {
        uint64_t v98 = v22 | 0x40;
      }
      if ([v12 aeLocked]) {
        return v98 | 0x40000;
      }
      else {
        return v98;
      }
    }
  }
  return result;
}

- (int)shallowDepthOfFieldEffectStatus
{
  uint64_t v2 = self;
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  LODWORD(v2) = v2->_sdofEffectStatus;
  os_unfair_lock_unlock(p_sdofLock);
  return (int)v2;
}

- (uint64_t)_copyAutofocusProcessorProperty:(uint64_t)a3 propertyValueOut:
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = 0;
  float v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 1576);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __76__BWFigVideoCaptureDevice__copyAutofocusProcessorProperty_propertyValueOut___block_invoke;
  v6[3] = &unk_1E5C2B618;
  v6[4] = a1;
  v6[5] = &v7;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

- (uint64_t)_ubIsSuperWidePreferredOrCurrentPrimaryCaptureStreamInWideZoomRange
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 1442) && *(void *)(a1 + 576))
    {
      [*(id *)(a1 + 2736) requestedZoomFactor];
      uint64_t v3 = -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](v1, v2);
      uint64_t v4 = (os_unfair_lock_s *)(v1 + 1304);
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1304));
      uint64_t v5 = *(void *)(v1 + 576);
      if (v3 == v5) {
        uint64_t v1 = 0;
      }
      else {
        uint64_t v1 = *(void *)(v1 + 1296) == v5 || *(void *)(v1 + 1288) == v5;
      }
      os_unfair_lock_unlock(v4);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

- (BOOL)_focusIsStable:(BOOL)result
{
  if (result)
  {
    if ([a2 afStatus] == 4 || objc_msgSend(a2, "afStatus") == 3)
    {
      return 1;
    }
    else
    {
      [a2 focusingMethod];
      return FigCaptureStreamFocusingMethodIsPhaseDetectionBased() != 0;
    }
  }
  return result;
}

float __47__BWFigVideoCaptureDevice_setMinimumFrameRate___block_invoke(uint64_t a1)
{
  float result = *(float *)(a1 + 40);
  *(float *)(*(void *)(a1 + 32) + 2084) = result;
  return result;
}

- (void)setRegionOfInterestWithoutOverscan:(CGRect)a3
{
  self->_regionOfInterestWithoutOverscauint64_t n = a3;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.x = FigCaptureMetadataUtilitiesRectNormalizedToRect(a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, 0.0, 0.0, a3.size.width + a3.origin.x * 2.0);
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.y = v4;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.width = v5;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.height = v6;
}

- (NSArray)activePortTypes
{
  return self->_activePortTypes;
}

- (int)position
{
  return self->_position;
}

- (BOOL)variableFrameRateControlEnabled
{
  return BYTE3(self->_previewShiftInSensorSpace.x);
}

- (float)requestedZoomFactorRelativeToPortType:(id)a3
{
  -[BWFigVideoCaptureDevice _configureZoomFudging]((uint64_t)self);
  objc_msgSend(-[NSDictionary objectForKeyedSubscript:](-[BWFigVideoCaptureDevice baseZoomFactorsByPortType](self, "baseZoomFactorsByPortType"), "objectForKeyedSubscript:", a3), "floatValue");
  if (v5 == 0.0) {
    float v6 = 1.0;
  }
  else {
    float v6 = v5;
  }
  [(BWZoomCommandHandler *)[(BWFigVideoCaptureDevice *)self zoomCommandHandler] requestedZoomFactor];
  return v7 / v6;
}

- (void)captureStreamDidStartStreaming:(id)a3
{
  float v5 = (void *)[a3 stream];
  float v6 = (void *)[v5 getPropertyIfSupported:*MEMORY[0x1E4F54AC0] error:0];
  if (v6)
  {
    [v6 floatValue];
    float v8 = v7;
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    if (v9 == 0.0) {
      [a3 baseZoomFactor];
    }
    float v10 = v8 * v9;
  }
  else
  {
    float v10 = 1.0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  float v11 = *(float *)&self->_zoomCommandHandler;
  if (v11 <= v10) {
    float v11 = v10;
  }
  *(float *)&self->_zoomCommandHandler = v11;
  os_unfair_lock_unlock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  [(BWStreamStartStopSynchronizer *)self->_synchronizedStreamsStartStopSynchronizer streamDidStart:a3];
  if (self->_captureStream == a3)
  {
    if (v10 <= 1.0) {
      uint64_t lastRequestedZoomFactor_low = 0;
    }
    else {
      uint64_t lastRequestedZoomFactor_low = LODWORD(self->_lastRequestedZoomFactor);
    }
    [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys setTypicalISPZoomDelay:lastRequestedZoomFactor_low maxISPZoomDelay:LODWORD(self->_newTotalZoomFactor) clientCanCompensateForDelay:0];
  }
  BOOL v13 = (void *)[a3 portType];
  if ([v13 isEqualToString:*MEMORY[0x1E4F52DE0]]) {
    self->_timeOfFlightCameraUseCaseMask |= 2u;
  }
  if (self->_deviceType == 13 && self->_depthDataDeliveryEnabled) {
    self->_timeOfFlightCameraUseCaseMask |= 8u;
  }
  if (self->_supplementalPointCloudCaptureDevice) {
    self->_timeOfFlightCameraUseCaseMask |= 0x10u;
  }
  if (self->_bravoTelephotoCaptureStream == a3)
  {
    [a3 maxEIT];
    bravoStreamSelector = self->_bravoStreamSelector;
    -[BWBravoStreamSelector setTeleMaxEIT:](bravoStreamSelector, "setTeleMaxEIT:");
  }
}

- (void)_configureZoomFudging
{
  v71[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    float v64 = (void *)[*(id *)(a1 + 544) clientBaseZoomFactorsByPortType];
    if ([v64 count]
      || (uint64_t v57 = *MEMORY[0x1E4F52DE8],
          (BOOL v58 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, *MEMORY[0x1E4F52DE8])) == 0)
      || (double v59 = v58,
          [v58 baseZoomFactorAfterGDC],
          float v61 = v60,
          [v59 baseZoomFactor],
          v61 == v62))
    {
      uint64_t v2 = [v64 count];
    }
    else
    {
      uint64_t v70 = v57;
      v71[0] = &unk_1EFB059F8;
      float v64 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:&v70 count:1];
      uint64_t v2 = [v64 count];
    }
    if (!v2) {
      goto LABEL_36;
    }
    uint64_t v3 = (void *)[MEMORY[0x1E4F1CA48] array];
    CGFloat v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    if ([*(id *)(a1 + 560) count])
    {
      unint64_t v5 = 0;
      uint64_t v63 = *MEMORY[0x1E4F52E00];
      float v6 = 0.0;
      do
      {
        float v7 = objc_msgSend(*(id *)(a1 + 560), "objectAtIndexedSubscript:", v5, v63);
        float v8 = (void *)[v7 portType];
        if ([v64 objectForKeyedSubscript:v8] && (objc_msgSend(v8, "isEqualToString:", v63) & 1) == 0)
        {
          objc_msgSend((id)objc_msgSend(v64, "objectForKeyedSubscript:", v8), "floatValue");
          float v10 = v9;
          if (v9 == 0.0)
          {
            [v7 baseZoomFactor];
            float v10 = v11;
          }
          [v7 baseZoomFactorAfterGDC];
          float v13 = v12;
          *(float *)&double v14 = v10;
          objc_msgSend(v3, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v14));
          *(float *)&double v15 = v13;
          objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v15));
          float v6 = v10 + v10;
          double v16 = (void *)[v7 nondisruptiveSwitchingZoomFactors];
          long long v65 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          uint64_t v17 = [v16 countByEnumeratingWithState:&v65 objects:v69 count:16];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = *(void *)v66;
            do
            {
              for (uint64_t i = 0; i != v18; ++i)
              {
                if (*(void *)v66 != v19) {
                  objc_enumerationMutation(v16);
                }
                [*(id *)(*((void *)&v65 + 1) + 8 * i) floatValue];
                if (v21 > v13)
                {
                  float v22 = v21;
                  if ([*(id *)(a1 + 560) count] > v5 + 1)
                  {
                    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 560), "objectAtIndexedSubscript:", v5 + 1), "baseZoomFactorAfterGDC");
                    if (*(float *)&v23 <= v22) {
                      goto LABEL_22;
                    }
                  }
                  *(float *)&double v23 = (float)(v10 * v22) / v13;
                  objc_msgSend(v3, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v23));
                  *(float *)&double v24 = v22;
                  objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v24));
                  float v6 = (float)((float)(v10 * v22) / v13) + (float)((float)(v10 * v22) / v13);
                }
              }
              uint64_t v18 = [v16 countByEnumeratingWithState:&v65 objects:v69 count:16];
            }
            while (v18);
          }
        }
LABEL_22:
        ++v5;
      }
      while ([*(id *)(a1 + 560) count] > v5);
      if (v6 != 0.0)
      {
        *(float *)&double v25 = v6;
        objc_msgSend(v3, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v25));
        *(float *)&double v26 = v6;
        objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v26));
      }
    }
    if ((unint64_t)[v3 count] >= 2)
    {
      uint64_t v27 = [v3 count] - 1;
      float v28 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v27];
      if (v27)
      {
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = v29;
          objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", v29), "floatValue");
          float v32 = v31;
          objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", ++v29), "floatValue");
          float v34 = v33;
          objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v30), "floatValue");
          float v36 = v35;
          objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v29), "floatValue");
          if (v32 != v36 || v34 != *(float *)&v37)
          {
            LODWORD(v40) = LODWORD(v37);
            *(float *)&double v37 = v32;
            *(float *)&double v38 = v34;
            *(float *)&double v39 = v36;
            id v42 = +[BWZoomRange fudgedZoomRangeWithLower:v37 upperBound:v38 fudgedLowerBound:v39 fudgedUpperBound:v40];
            if (v42) {
              [v28 addObject:v42];
            }
          }
        }
        while (v29 != v27);
      }
    }
    else
    {
LABEL_36:
      float v28 = 0;
    }
    [*(id *)(a1 + 2736) setFudgedZoomRanges:v28];
    if (!*(unsigned char *)(a1 + 1464)
      || (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"VideoZoomFactorsForDepthDataDelivery"), "firstObject"), "floatValue"), *(float *)&v43 == 0.0))
    {
      uint64_t v56 = 0;
    }
    else
    {
      int v44 = LODWORD(v43);
      if (*(float *)(a1 + 4040) == 0.0) {
        float v45 = INFINITY;
      }
      else {
        float v45 = *(float *)(a1 + 4040);
      }
      [*(id *)(a1 + 2736) applyFudgeToZoomFactor:v43];
      int v47 = v46;
      *(float *)&double v48 = v45;
      [*(id *)(a1 + 2736) applyFudgeToZoomFactor:v48];
      int v50 = v49;
      float v51 = [BWZoomRange alloc];
      LODWORD(v52) = v44;
      *(float *)&double v53 = v45;
      LODWORD(v54) = v47;
      LODWORD(v55) = v50;
      uint64_t v56 = [(BWZoomRange *)v51 initWithLowerBound:v52 upperBound:v53 fudgedLowerBound:v54 fudgedUpperBound:v55];
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4048));

    *(void *)(a1 + 4056) = v56;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4048));
  }
}

- (void)_addExifMetadata:(char)a3 fromTimeMachine:
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    float v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    float v7 = v6;
    if ((a3 & 1) == 0)
    {
      uint64_t v62 = 0;
      uint64_t v63 = &v62;
      uint64_t v64 = 0x2020000000;
      int v65 = 0;
      if (!v6)
      {
        FigDebugAssert3();
        _Block_object_dispose(&v62, 8);
        return;
      }
      if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C68]), "BOOLValue"))
      {
        uint64_t v8 = [v7 objectForKeyedSubscript:*MEMORY[0x1E4F54090]];
        unsigned int v61 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v54 = 0;
        double v55 = &v54;
        uint64_t v56 = 0x3052000000;
        uint64_t v57 = __Block_byref_object_copy__37;
        BOOL v58 = __Block_byref_object_dispose__37;
        float v9 = *(NSObject **)(a1 + 2704);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke;
        block[3] = &unk_1E5C2B940;
        block[4] = a1;
        void block[5] = v8;
        void block[6] = &v62;
        void block[7] = &v54;
        dispatch_sync(v9, block);
        [(id)v55[5] getValue:&v60];
        if (v60 | v61 || *((_DWORD *)v63 + 6) == 1)
        {
          float v10 = *(NSObject **)(a1 + 2704);
          v52[0] = MEMORY[0x1E4F143A8];
          v52[1] = 3221225472;
          v52[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_2;
          v52[3] = &unk_1E5C24430;
          v52[4] = a1;
          float v11 = v52;
        }
        else
        {
          float v10 = *(NSObject **)(a1 + 2704);
          v51[0] = MEMORY[0x1E4F143A8];
          v51[1] = 3221225472;
          v51[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_3;
          v51[3] = &unk_1E5C24430;
          v51[4] = a1;
          float v11 = v51;
        }
        dispatch_sync(v10, v11);
        _Block_object_dispose(&v54, 8);
      }
      else
      {
        float v12 = *(NSObject **)(a1 + 2704);
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_4;
        v50[3] = &unk_1E5C24430;
        v50[4] = a1;
        dispatch_sync(v12, v50);
      }
      objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 2728)), @"ExifWhiteBalance");
      _Block_object_dispose(&v62, 8);
    }
    uint64_t v41 = a1;
    CMAttachmentBearerRef targeta = target;
    double v40 = objc_msgSend((id)CMGetAttachment(target, @"BWStillImageCaptureSettings", 0), "metadata");
    if ((unint64_t)[*(id *)(a1 + 552) count] >= 2)
    {
      uint64_t v13 = [v7 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      double v14 = *(void **)(a1 + 552);
      double v15 = 0;
      double v16 = 0;
      uint64_t v17 = [*(id *)(v41 + 552) countByEnumeratingWithState:&v46 objects:v67 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v47;
        uint64_t v19 = *MEMORY[0x1E4F52E00];
        do
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v47 != v18) {
              objc_enumerationMutation(v14);
            }
            float v21 = *(void **)(*((void *)&v46 + 1) + 8 * i);
            float v22 = (void *)[v21 portType];
            if (([v22 isEqualToString:v13] & 1) == 0
              && ([v22 isEqualToString:v19] & 1) == 0)
            {
              if (v15)
              {
                if (!v16) {
LABEL_23:
                }
                  double v16 = (void *)[MEMORY[0x1E4F1CA48] array];
              }
              else
              {
                double v15 = (void *)[MEMORY[0x1E4F1CA48] array];
                if (!v16) {
                  goto LABEL_23;
                }
              }
              double v23 = NSNumber;
              [v21 focalLength];
              objc_msgSend(v15, "addObject:", objc_msgSend(v23, "numberWithFloat:"));
              double v24 = NSNumber;
              [v21 lensFNumber];
              objc_msgSend(v16, "addObject:", objc_msgSend(v24, "numberWithFloat:"));
              continue;
            }
          }
          uint64_t v17 = [v14 countByEnumeratingWithState:&v46 objects:v67 count:16];
        }
        while (v17);
      }
      CMSetAttachment(targeta, @"ExifSlaveFocalLengths", v15, 1u);
      CMSetAttachment(targeta, @"ExifSlaveLensFNumbers", v16, 1u);
      if (![v40 deviceType])
      {
        [v40 setSlaveFocalLengths:v15];
        [v40 setSlaveLensFNumbers:v16];
      }
    }
    if (![v40 deviceType])
    {
      [v40 setDeviceType:*(unsigned int *)(v41 + 484)];
      [v40 setDevicePosition:*(unsigned int *)(v41 + 512)];
      objc_msgSend((id)CMGetAttachment(targeta, @"TotalZoomFactor", 0), "floatValue");
      objc_msgSend(v40, "setTotalZoomFactor:");
      objc_msgSend((id)CMGetAttachment(targeta, @"UIZoomFactor", 0), "floatValue");
      objc_msgSend(v40, "setUiZoomFactor:");
      float v28 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v29 = *(void **)(v41 + 552);
      uint64_t v30 = [v29 countByEnumeratingWithState:&v42 objects:v66 count:16];
      if (v30)
      {
        uint64_t v31 = *(void *)v43;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v43 != v31) {
              objc_enumerationMutation(v29);
            }
            float v33 = *(void **)(*((void *)&v42 + 1) + 8 * j);
            [v33 exifFocalLengthMultiplier];
            if (v34 != 0.0)
            {
              float v35 = NSNumber;
              [v33 exifFocalLengthMultiplier];
              objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_msgSend(v35, "numberWithFloat:"), objc_msgSend(v33, "portType"));
            }
          }
          uint64_t v30 = [v29 countByEnumeratingWithState:&v42 objects:v66 count:16];
        }
        while (v30);
      }
      [v40 setExifFocalLengthMultiplierByPortType:v28];
      [v40 totalZoomFactor];
      if (v36 != 0.0)
      {
        double v37 = *(void **)(v41 + 2736);
        [v40 totalZoomFactor];
        objc_msgSend(v37, "removeFudgeFromZoomFactor:");
        if (-[BWFigVideoCaptureDevice _exifFocalLengthOverrideForZoomFactor:](v41, v38) != 0.0) {
          objc_msgSend(v40, "setExifFocalLengthOverride:");
        }
      }
    }
    uint64_t v25 = v41;
    double v26 = *(const void **)(v41 + 528);
    if (v26)
    {
      CMSetAttachment(targeta, @"CameraManufacturer", v26, 1u);
      uint64_t v25 = v41;
    }
    uint64_t v27 = *(const void **)(v25 + 536);
    if (v27) {
      CMSetAttachment(targeta, @"CameraNonLocalizedName", v27, 1u);
    }
  }
}

- (void)_serviceSDOFSceneMonitoringWithCaptureStream:(uint64_t)a1 sampleBuffer:(void *)a2 frameStatisticsByPortType:(const void *)a3 flashModeForSceneMonitoring:(void *)a4 hdrModeForSceneMonitoring:(int)a5 qualityPrioritizationForSceneMonitoring:(int)a6 streamingImageIntent:(int)a7
{
  if (a1)
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    -[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](a1, a2, a4, a5, a6, a7, 0, &v56);
    int v52 = a6;
    int v53 = a7;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1492));
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v13 = *(void **)(a1 + 1512);
      double v14 = (void *)[*(id *)(a1 + 544) clientBaseZoomFactorsByPortType];
      objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E4F52DD8]), "floatValue");
      float v16 = v15 == 0.0 ? 1.0 : v15;
      [*(id *)(a1 + 2736) appliedZoomFactorWithoutFudge];
      float v18 = v17 / v16;
      [v13 zoomFactorForTuningParameters];
      if (vabds_f32(v18, v19) > 0.1)
      {
        uint64_t v20 = +[FigCaptureCameraParameters sharedInstance];
        uint64_t v21 = [*(id *)(a1 + 1288) portType];
        uint64_t v22 = [*(id *)(a1 + 1288) sensorIDString];
        *(float *)&double v23 = v18;
        uint64_t v24 = [(FigCaptureCameraParameters *)v20 portraitSceneMonitoringParametersForPortType:v21 sensorIDString:v22 zoomFactorRelativeToWidePortType:v23];
        if (v24)
        {
          *(float *)&double v25 = v18;
          [v13 updateTuningParameters:v24 zoomFactor:v25];
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
    int v26 = *(_DWORD *)(a1 + 3836);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
    LODWORD(v51) = v26;
    int v27 = objc_msgSend(*(id *)(a1 + 1512), "resolveSDOFStatusWithSampleBuffer:frameStatisticsByPortType:sceneFlags:flashOrTorchWillBeActive:digitalFlashWillFire:thermalPressureLevel:peakPowerPressureLevel:effectStatus:stagePreviewStatus:", a3, a4, v51, (char *)&v57 + 4, &v57);
    [*(id *)(a1 + 1512) focusDistanceToMaxAllowedFocusDistanceRatio];
    float v29 = v28;
    uint64_t v30 = *(void **)(a1 + 3752);
    uint64_t v31 = (CFStringRef *)MEMORY[0x1E4F53070];
    if (v30)
    {
      CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
      CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)[v30 objectForKeyedSubscript:@"CinematicVideoFocusPoint"], &point);
      float v32 = (void *)CMGetAttachment(a3, *v31, 0);
      rect.origin.x = 0.0;
      rect.origin.y = 0.0;
      __asm { FMOV            V0.2D, #1.0 }
      rect.size = _Q0;
      CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v32 objectForKeyedSubscript:*MEMORY[0x1E4F53260]], &rect);
      v58.x = FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(point.x, point.y, rect.origin.x, rect.origin.y, rect.size.width);
      DictionaryRepresentatiouint64_t n = CGPointCreateDictionaryRepresentation(v58);
      [*(id *)(a1 + 3752) setObject:DictionaryRepresentation forKeyedSubscript:@"CinematicVideoFocusPoint"];
      CMSetAttachment(a3, @"CinematicVideoFocusRequest", *(CFTypeRef *)(a1 + 3752), 1u);

      *(void *)(a1 + 3752) = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1492));
    if (!*(unsigned char *)(a1 + 1491)) {
      goto LABEL_47;
    }
    int v39 = objc_msgSend((id)CMGetAttachment(a3, @"DepthDisabled", 0), "BOOLValue");
    uint64_t v40 = *(void *)(a1 + 576);
    if (v40)
    {
      int v41 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1312), "eligibleFallbackPortTypes"), "containsObject:", objc_msgSend(*(id *)(a1 + 576), "portType"));
      if (*(unsigned char *)(a1 + 1452)) {
        LODWORD(v40) = v41;
      }
      else {
        LODWORD(v40) = 0;
      }
    }
    if ((v40 | v39) == 1)
    {
      uint64_t v57 = 0;
      int v27 = 1;
      if (((v40 ^ 1 | v39) & 1) == 0) {
        CMSetAttachment(a3, @"DepthDisabled", MEMORY[0x1E4F1CC38], 1u);
      }
    }
    if (*(unsigned char *)(a1 + 1491) && *(void *)(a1 + 2272))
    {
      if ((HIDWORD(v57) - 11) <= 1
        && (v56 & 0x2000000) == 0
        && (-[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v56, a5) == 2
         || [(id)a1 streamingDigitalFlashMode]))
      {
        HIDWORD(v57) = 0;
      }
    }
    else
    {
LABEL_47:
      if ((!*(unsigned char *)(a1 + 2145) || (v56 & 0x4000) != 0) && *(unsigned char *)(a1 + 1490) && (HIDWORD(v57) & 0xFFFFFFFB) == 1)
      {
        BOOL v42 = !v52 && v53 <= 1;
        unsigned int v43 = !v42;
        long long v44 = *(void **)(a1 + 496);
        [v44 baseZoomFactor];
        unsigned int v46 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](a1, v44, a4, v43, 0, 1, v45);
        if (-[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v46, a5))
        {
          if (HIDWORD(v57) == 1) {
            int v47 = 9;
          }
          else {
            int v47 = 10;
          }
          HIDWORD(v57) = v47;
        }
      }
    }
    if (v29 != 0.0)
    {
      long long v48 = (void *)CMGetAttachment(a3, *v31, 0);
      *(float *)&double v49 = v29;
      uint64_t v50 = [NSNumber numberWithFloat:v49];
      [v48 setObject:v50 forKeyedSubscript:*MEMORY[0x1E4F55BE0]];
    }
    if (v27) {
      -[BWFigVideoCaptureDevice _updateSDOFEffectStatus:newStagePreviewStatus:]((os_unfair_lock_s *)a1, HIDWORD(v57), v57);
    }
  }
}

- (void)_updateSDOFEffectStatus:(unsigned int)a3 newStagePreviewStatus:
{
  if (!a1) {
    return;
  }
  if (a2) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 0;
  }
  float v6 = a1 + 373;
  os_unfair_lock_lock(a1 + 373);
  if (a1[374]._os_unfair_lock_opaque == a2)
  {
    if (v5 == a1[375]._os_unfair_lock_opaque)
    {
      os_unfair_lock_unlock(v6);
      return;
    }
    goto LABEL_11;
  }
  a1[374]._os_unfair_lock_opaque = a2;
  if (v5 != a1[375]._os_unfair_lock_opaque) {
LABEL_11:
  }
    a1[375]._os_unfair_lock_opaque = v5;
  os_unfair_lock_unlock(v6);
  -[BWFigVideoCaptureDevice _postSDOFEffectStatus:SDOFStagePreviewStatus:]((uint64_t)a1, a2, v5);
}

- (BOOL)softISPEnabled
{
  return self->_softISPEnabled;
}

- (BOOL)redEyeReductionEnabled
{
  return self->_redEyeReductionEnabled;
}

- (BWFigVideoCaptureStream)captureStream
{
  return self->_captureStream;
}

- (BOOL)portraitAutoSuggestEnabled
{
  return self->_portraitAutoSuggestEnabled;
}

- (uint64_t)_setSynchronizedStreamsGroupProperty:(uint64_t)a3 value:
{
  if (result)
  {
    uint64_t v5 = result;
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 544), "syncGroup"), "supportedProperties"), "objectForKeyedSubscript:", a2))
    {
      float v6 = (void *)[*(id *)(v5 + 544) syncGroup];
    }
    else
    {
      float v6 = (void *)[*(id *)(v5 + 496) stream];
    }
    return [v6 setProperty:a2 value:a3];
  }
  return result;
}

void __60__BWFigVideoCaptureDevice_setISPZoomFactor_totalZoomFactor___block_invoke(uint64_t a1)
{
}

- (BOOL)portraitPreviewForegroundBlurEnabled
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = +[FigCaptureCameraParameters sharedInstance];
  CGFloat v4 = (void *)*MEMORY[0x1E4F52DD8];
  uint64_t v5 = [(BWFigVideoCaptureStream *)[(BWFigVideoCaptureDevice *)self captureStream] sensorIDString];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  float v6 = [(BWFigVideoCaptureDevice *)self activePortTypes];
  uint64_t v7 = [(NSArray *)v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = v7;
  float v15 = v4;
  uint64_t v9 = *(void *)v17;
  uint64_t v10 = *MEMORY[0x1E4F52DF0];
  uint64_t v11 = *MEMORY[0x1E4F52E00];
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v17 != v9) {
        objc_enumerationMutation(v6);
      }
      CGFloat v4 = *(void **)(*((void *)&v16 + 1) + 8 * i);
      if ([v4 isEqualToString:v10])
      {
        uint64_t v13 = [(BWFigVideoCaptureDevice *)self bravoTelephotoCaptureStream];
LABEL_13:
        uint64_t v5 = [(BWFigVideoCaptureStream *)v13 sensorIDString];
        goto LABEL_14;
      }
      if ([v4 isEqualToString:v11])
      {
        uint64_t v13 = [(BWFigVideoCaptureDevice *)self pearlInfraredCaptureStream];
        goto LABEL_13;
      }
    }
    uint64_t v8 = [(NSArray *)v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8) {
      continue;
    }
    break;
  }
  CGFloat v4 = v15;
LABEL_14:
  [(BWFigVideoCaptureDevice *)self requestedZoomFactorRelativeToPortType:v4];
  return -[FigCaptureCameraParameters portraitPreviewForegroundBlurEnabledForPortType:sensorIDString:zoomFactor:](v3, "portraitPreviewForegroundBlurEnabledForPortType:sensorIDString:zoomFactor:", v4, v5);
}

- (uint64_t)_createBWFigVideoCaptureStreamsForCaptureStreams:(void *)a3 attributeDictionaries:(void *)a4 cameraParameters:(uint64_t)a5 synchronizedStreamsGroup:(_OWORD *)a6 clientAuditToken:(uint64_t)a7 tccIdentity:(uint64_t)a8 mediaEnvironment:
{
  if (result)
  {
    uint64_t v10 = result;
    unsigned int v33 = 0;
    uint64_t v11 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a2, "count"));
    uint64_t v31 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(a2, "count"));
    float v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(a2, "count"));
    if ([a2 count])
    {
      uint64_t v13 = 0;
      while (1)
      {
        double v14 = v11;
        float v15 = (void *)[a2 objectAtIndexedSubscript:v13];
        uint64_t v16 = [v15 portType];
        uint64_t v17 = [a3 objectAtIndexedSubscript:v13];
        uint64_t v18 = [a4 sensorIDDictionaryForStream:v15];
        long long v19 = [BWFigVideoCaptureStream alloc];
        uint64_t v20 = *(void *)(v10 + 8);
        uint64_t v21 = *(void *)(v10 + 80);
        long long v22 = a6[1];
        v32[0] = *a6;
        v32[1] = v22;
        double v23 = [(BWFigVideoCaptureStream *)v19 initWithCaptureStream:v15 parentDevice:v20 attributes:v17 sensorIDDictionary:v18 synchronizedStreamsGroup:a5 applicationID:v21 clientAuditToken:v32 tccIdentity:a7 mediaEnvironment:a8 error:&v33];
        uint64_t v24 = v23;
        if (v33) {
          break;
        }
        [(BWFigVideoCaptureStream *)v23 setDelegate:v10];
        objc_msgSend(v31, "setObject:forKeyedSubscript:", -[BWFigVideoCaptureStream moduleInfo](v24, "moduleInfo"), v16);
        objc_msgSend(v12, "setObject:forKeyedSubscript:", -[BWFigVideoCaptureStream sensorIDDictionary](v24, "sensorIDDictionary"), v16);
        *(_DWORD *)(v10 + 280) = 1077936128;
        *(_DWORD *)(v10 + 312) = 1056964608;
        [(BWFigVideoCaptureDevice *)v10 _sendInitialValuesToPortraitEffectPropertiesDelegate:v25];
        uint64_t v11 = v14;
        [v14 addObject:v24];

        if ([a2 count] <= (unint64_t)++v13) {
          goto LABEL_6;
        }
      }
      FigDebugAssert3();

      uint64_t v11 = v14;
    }
    else
    {
LABEL_6:
      *(void *)(v10 + 88) = [v31 copy];
      *(void *)(v10 + 96) = [v12 copy];
      *(void *)(v10 + 552) = [v11 copy];
      *(void *)(v10 + 104) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }

    return v33;
  }
  return result;
}

- (uint64_t)_sendInitialValuesToPortraitEffectPropertiesDelegate:(double)a3
{
  if (result)
  {
    uint64_t v4 = result;
    LODWORD(a3) = *(_DWORD *)(result + 280);
    [a2 didChangeBackgroundBlurAperture:a3];
    LODWORD(v5) = *(_DWORD *)(v4 + 312);
    [a2 didChangeStudioLightingIntensity:v5];
    [a2 didChangeGesturesEnabled:*(unsigned __int8 *)(v4 + 318)];
    [a2 didChangeBackgroundReplacementPixelBuffer:*(void *)(v4 + 384)];
    id v6 = +[FigWeakReference weakReferenceToObject:v4];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __80__BWFigVideoCaptureDevice__sendInitialValuesToPortraitEffectPropertiesDelegate___block_invoke;
    v7[3] = &unk_1E5C2BB30;
    v7[4] = v6;
    return [a2 setReactionsInProgressChangedHandler:v7];
  }
  return result;
}

- (NSArray)captureStreamsByFocalLength
{
  return self->_captureStreamsByFocalLength;
}

- (void)setNondisruptiveSwitchingFormatIndicesByZoomFactorSIFRBinned:(id)a3 nondisruptiveSwitchingFormatIndicesByZoomFactorSIFRNonBinned:(id)a4 ultraHighResolutionNondisruptiveStreamingFormatIndex:(int)a5 mainFormatSIFRBinningFactor:(int)a6 forPortType:(id)a7 quadraSubPixelSwitchingParameters:(id)a8
{
  id v9 = a7;
  uint64_t v10 = *(void *)&a6;
  uint64_t v11 = *(void *)&a5;
  id v12 = a4;
  id v13 = a3;
  double v14 = self;
  v52[1] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)&self->_manualCinematicFramingEnabled + 1) = a6;
  if (a6 == 2) {
    id v15 = a3;
  }
  else {
    id v15 = a4;
  }
  if (self->_bravoTelephotoCaptureStream && LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque)) {
    return;
  }
  uint64_t v16 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)self, (uint64_t)a7);
  uint64_t v17 = [v15 count];
  if ([v15 count] == 1)
  {
    id v46 = v9;
    uint64_t v18 = v14;
    id v19 = v13;
    uint64_t v20 = v10;
    id v21 = v12;
    uint64_t v22 = v11;
    id v23 = a8;
    uint64_t v24 = NSNumber;
    [v16 baseZoomFactor];
    double v25 = v24;
    a8 = v23;
    uint64_t v11 = v22;
    id v12 = v21;
    uint64_t v10 = v20;
    id v13 = v19;
    double v14 = v18;
    id v9 = v46;
    int v26 = objc_msgSend(v15, "objectForKeyedSubscript:", objc_msgSend(v25, "numberWithFloat:"));
    if (v26)
    {
      uint64_t v27 = [v26 intValue];
      goto LABEL_37;
    }
  }
  if (!v17)
  {
    uint64_t v27 = 0xFFFFFFFFLL;
    goto LABEL_37;
  }
  if (!BYTE1(v14->_zoomFactorLock._os_unfair_lock_opaque)
    || !BYTE2(v14->_zoomFactorLock._os_unfair_lock_opaque)
    && [v9 isEqualToString:*MEMORY[0x1E4F52DE8]])
  {
    id v47 = a8;
    float v28 = NSNumber;
    objc_msgSend(v16, "baseZoomFactor", v47);
    float v29 = objc_msgSend(v15, "objectForKeyedSubscript:", objc_msgSend(v28, "numberWithFloat:"));
    if (v29) {
      uint64_t v27 = [v29 intValue];
    }
    else {
      uint64_t v27 = 0xFFFFFFFFLL;
    }
    float v34 = NSNumber;
    [v16 baseZoomFactor];
    if (objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v34, "numberWithFloat:")))
    {
      float v35 = NSNumber;
      [v16 baseZoomFactor];
      uint64_t v51 = objc_msgSend(v35, "numberWithFloat:");
      float v36 = NSNumber;
      [v16 baseZoomFactor];
      v52[0] = objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v36, "numberWithFloat:"));
      id v13 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:&v51 count:1];
    }
    else
    {
      id v13 = 0;
    }
    double v37 = NSNumber;
    [v16 baseZoomFactor];
    if (objc_msgSend(v12, "objectForKeyedSubscript:", objc_msgSend(v37, "numberWithFloat:")))
    {
      float v38 = NSNumber;
      [v16 baseZoomFactor];
      uint64_t v49 = objc_msgSend(v38, "numberWithFloat:");
      int v39 = NSNumber;
      [v16 baseZoomFactor];
      uint64_t v50 = objc_msgSend(v12, "objectForKeyedSubscript:", objc_msgSend(v39, "numberWithFloat:"));
      id v12 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1];
    }
    else
    {
      id v12 = 0;
    }
    a8 = v48;
LABEL_37:
    if (*(&v14->_manualCinematicFramingEnabled + 3)
      && (uint64_t v40 = NSNumber,
          [v16 baseZoomFactor],
          objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v40, "numberWithFloat:"))))
    {
      int v41 = v16;
      id v42 = v13;
      id v43 = v12;
      uint64_t v44 = v11;
      uint64_t v45 = v10;
    }
    else
    {
      int v41 = v16;
      id v42 = 0;
      id v43 = 0;
      uint64_t v44 = v11;
      uint64_t v45 = 0;
    }
    [v41 setZoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned:v42 zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned:v43 ultraHighResolutionNondisruptiveStreamingFormatIndex:v44 mainFormatSIFRBinningFactor:v45 quadraSubPixelSwitchingParameters:a8];
    [v16 setActiveNondisruptiveSwitchingFormatIndex:v27];
    return;
  }
  [v16 setZoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned:v13 zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned:v12 ultraHighResolutionNondisruptiveStreamingFormatIndex:v11 mainFormatSIFRBinningFactor:v10 quadraSubPixelSwitchingParameters:a8];
  if ([v9 isEqual:*MEMORY[0x1E4F52DD8]])
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    v14->_rampDefaultBravoSnapDistanceFractiouint64_t n = v30;
  }
  else if ([v9 isEqual:*MEMORY[0x1E4F52DE8]])
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    *(float *)&v14->_ispZoomLatency = v31;
    BOOL v33 = v31 > 0.0 && v14->_cinematicFramingFeedbackForCameraControlsROIEnabled;
    BYTE1(v14->_previewShiftInSensorSpace.x) = v33;
  }
  -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:]((uint64_t)v14, v16, 0, 0, 0);
}

- (void)_captureStreamByPortType:(uint64_t)a1
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v3 = *(void **)(a1 + 552);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
LABEL_4:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(v3);
    }
    uint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "portType"), "isEqualToString:", a2)) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_4;
      }
      return 0;
    }
  }
}

- (void)_deviceWillStartStreaming
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v2 = *(NSObject **)(a1 + 1576);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke;
  block[3] = &unk_1E5C24430;
  block[4] = a1;
  dispatch_sync(v2, block);
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"Focus"), "BOOLValue") & 1) != 0
    || objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "stream"), "supportedProperties");
    if (![v3 objectForKeyedSubscript:*MEMORY[0x1E4F54B18]])
    {
      long long v301 = 0u;
      long long v302 = 0u;
      long long v299 = 0u;
      long long v300 = 0u;
      uint64_t v4 = *(void **)(a1 + 552);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v299 objects:v324 count:16];
      if (v5)
      {
        uint64_t v6 = *(void *)v300;
        do
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            if (*(void *)v300 != v6) {
              objc_enumerationMutation(v4);
            }
            [*(id *)(*((void *)&v299 + 1) + 8 * i) setFaceDetectionEnabled:1];
          }
          uint64_t v5 = [v4 countByEnumeratingWithState:&v299 objects:v324 count:16];
        }
        while (v5);
      }
    }
  }
  uint64_t v8 = *(void **)(a1 + 1456);
  if (v8)
  {
    id v9 = (void *)[v8 stream];
    [v9 setProperty:*MEMORY[0x1E4F54B50] value:MEMORY[0x1E4F1CC38]];
  }

  *(void *)(a1 + 1480) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1492));
  *(void *)(a1 + 1496) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1492));
  if (*(unsigned char *)(a1 + 1464))
  {
    -[BWFigVideoCaptureDevice _updateStreamingForegroundSegmentationNetworkUsingStage:]((void *)a1, 0);
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if (*(void *)(a1 + 1456))
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1EFB059F8, objc_msgSend(*(id *)(a1 + 496), "portType"));
    }
    else if ([(id)a1 isBravoVariant])
    {
      if ((int)FigCapturePlatformIdentifier() < 9)
      {
        long long v297 = 0u;
        long long v298 = 0u;
        long long v295 = 0u;
        long long v296 = 0u;
        id v21 = *(void **)(a1 + 552);
        uint64_t v22 = [v21 countByEnumeratingWithState:&v295 objects:v323 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v296;
          do
          {
            for (uint64_t j = 0; j != v22; ++j)
            {
              if (*(void *)v296 != v23) {
                objc_enumerationMutation(v21);
              }
              objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1EFB05A08, objc_msgSend(*(id *)(*((void *)&v295 + 1) + 8 * j), "portType"));
            }
            uint64_t v22 = [v21 countByEnumeratingWithState:&v295 objects:v323 count:16];
          }
          while (v22);
        }
      }
      else
      {
        if (*(void *)(a1 + 576))
        {
          long long v11 = NSNumber;
          [*(id *)(a1 + 496) baseZoomFactor];
          *(float *)&double v13 = v12 / 1.33;
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v11, "numberWithFloat:", v13), objc_msgSend(*(id *)(a1 + 576), "portType"));
        }
        double v14 = *(void **)(a1 + 568);
        if (v14)
        {
          uint64_t v15 = NSNumber;
          [v14 baseZoomFactor];
          *(float *)&double v17 = v16 / 1.33;
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v15, "numberWithFloat:", v17), objc_msgSend(*(id *)(a1 + 568), "portType"));
        }
        uint64_t v18 = NSNumber;
        [*(id *)(a1 + 496) baseZoomFactor];
        *(float *)&double v20 = v19 / 1.33;
        objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "numberWithFloat:", v20), objc_msgSend(*(id *)(a1 + 496), "portType"));
      }
    }
    *(void *)(a1 + 1480) = v10;
  }
  if (*(unsigned char *)(a1 + 1489) || *(unsigned char *)(a1 + 1491))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1492));

    *(void *)(a1 + 3752) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1492));
    double v25 = +[FigCaptureCameraParameters sharedInstance];
    *(unsigned char *)(a1 + 1520) = 1;
    if (*(void *)(a1 + 568))
    {
      [(id)a1 requestedZoomFactorRelativeToPortType:*MEMORY[0x1E4F52DD8]];
      int v27 = v26;
      uint64_t v28 = [*(id *)(a1 + 568) portType];
      uint64_t v29 = [*(id *)(a1 + 568) sensorIDString];
      LODWORD(v30) = v27;
      uint64_t v31 = [(FigCaptureCameraParameters *)v25 portraitSceneMonitoringParametersForPortType:v28 sensorIDString:v29 zoomFactorRelativeToWidePortType:v30];
      int v32 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", [*(id *)(a1 + 568) portType], objc_msgSend(*(id *)(a1 + 568), "sensorIDString"));
      if (*(unsigned char *)(a1 + 3744))
      {
LABEL_36:
        BOOL v33 = [[BWBravoCinematicVideoSceneMonitor alloc] initWithTuningParameters:v31 attachDebugFrameStatistics:0];
LABEL_66:
        *(void *)(a1 + 1512) = v33;
        goto LABEL_67;
      }
      if (v32 != 3)
      {
        if (v32 == 2)
        {
LABEL_42:
          BOOL v33 = [[BWBravoPortraitSceneMonitorV2 alloc] initWithTuningParameters:v31 attachDebugFrameStatistics:0];
          goto LABEL_66;
        }
LABEL_59:
        BOOL v33 = [[BWBravoPortraitSceneMonitor alloc] initWithTuningParameters:v31 attachDebugFrameStatistics:0];
        goto LABEL_66;
      }
    }
    else
    {
      if (!*(void *)(a1 + 576))
      {
        uint64_t v45 = *(void **)(a1 + 1456);
        if (v45)
        {
          objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", objc_msgSend(v45, "portType"));
          int v47 = v46;
          uint64_t v48 = [*(id *)(a1 + 1456) portType];
          uint64_t v49 = [*(id *)(a1 + 1456) sensorIDString];
          LODWORD(v50) = v47;
          uint64_t v51 = [(FigCaptureCameraParameters *)v25 portraitSceneMonitoringParametersForPortType:v48 sensorIDString:v49 zoomFactorRelativeToWidePortType:v50];
          int v52 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", [*(id *)(a1 + 1456) portType], objc_msgSend(*(id *)(a1 + 1456), "sensorIDString"));
          if (*(unsigned char *)(a1 + 3744))
          {
            BOOL v33 = [[BWPearlCinematicVideoSceneMonitor alloc] initWithTuningParameters:v51 attachDebugFrameStatistics:0];
          }
          else if (v52 == 2)
          {
            BOOL v33 = [[BWPearlPortraitSceneMonitorV2 alloc] initWithTuningParameters:v51 attachDebugFrameStatistics:0 portraitAutoSuggestEnabled:*(unsigned __int8 *)(a1 + 1491) shallowDepthOfFieldEnabled:*(unsigned __int8 *)(a1 + 1489)];
          }
          else
          {
            BOOL v33 = [[BWPearlPortraitSceneMonitor alloc] initWithTuningParameters:v51 attachDebugFrameStatistics:0];
          }
        }
        else
        {
          objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", objc_msgSend(*(id *)(a1 + 496), "portType"));
          int v56 = v55;
          uint64_t v57 = [*(id *)(a1 + 496) portType];
          uint64_t v58 = [*(id *)(a1 + 496) sensorIDString];
          LODWORD(v59) = v56;
          BOOL v33 = [[BWSingleCameraPortraitSceneMonitor alloc] initWithTuningParameters:[(FigCaptureCameraParameters *)v25 portraitSceneMonitoringParametersForPortType:v57 sensorIDString:v58 zoomFactorRelativeToWidePortType:v59] attachDebugFrameStatistics:0];
        }
        goto LABEL_66;
      }
      [(id)a1 requestedZoomFactorRelativeToPortType:*MEMORY[0x1E4F52DD8]];
      int v27 = v34;
      uint64_t v35 = [*(id *)(a1 + 496) portType];
      uint64_t v36 = [*(id *)(a1 + 496) sensorIDString];
      LODWORD(v37) = v27;
      uint64_t v31 = [(FigCaptureCameraParameters *)v25 portraitSceneMonitoringParametersForPortType:v35 sensorIDString:v36 zoomFactorRelativeToWidePortType:v37];
      int v38 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", [*(id *)(a1 + 496) portType], objc_msgSend(*(id *)(a1 + 496), "sensorIDString"));
      if (*(unsigned char *)(a1 + 3744)) {
        goto LABEL_36;
      }
      if (v38 != 3)
      {
        if (v38 == 2) {
          goto LABEL_42;
        }
        goto LABEL_59;
      }
    }
    int v53 = [BWBravoPortraitSceneMonitorV3 alloc];
    LODWORD(v54) = v27;
    BOOL v33 = [(BWBravoPortraitSceneMonitorV3 *)v53 initWithTuningParameters:v31 zoomFactor:*(unsigned __int8 *)(a1 + 1491) portraitAutoSuggestEnabled:*(unsigned __int8 *)(a1 + 1489) shallowDepthOfFieldEnabled:0 attachDebugFrameStatistics:v54];
    goto LABEL_66;
  }
  if (*(int *)(a1 + 3804) >= 3)
  {
    int v39 = +[FigCaptureCameraParameters sharedInstance];
    uint64_t v40 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v293 = 0u;
    long long v294 = 0u;
    long long v291 = 0u;
    long long v292 = 0u;
    int v41 = *(void **)(a1 + 552);
    uint64_t v42 = [v41 countByEnumeratingWithState:&v291 objects:v322 count:16];
    if (v42)
    {
      uint64_t v43 = *(void *)v292;
      do
      {
        for (uint64_t k = 0; k != v42; ++k)
        {
          if (*(void *)v292 != v43) {
            objc_enumerationMutation(v41);
          }
          objc_msgSend(v40, "setObject:forKeyedSubscript:", -[FigCaptureCameraParameters actionCameraSceneMonitoringParametersForPortType:sensorIDString:](v39, "actionCameraSceneMonitoringParametersForPortType:sensorIDString:", objc_msgSend(*(id *)(*((void *)&v291 + 1) + 8 * k), "portType"), objc_msgSend(*(id *)(*((void *)&v291 + 1) + 8 * k), "sensorIDString")), objc_msgSend(*(id *)(*((void *)&v291 + 1) + 8 * k), "portType"));
        }
        uint64_t v42 = [v41 countByEnumeratingWithState:&v291 objects:v322 count:16];
      }
      while (v42);
    }
    BOOL v33 = [[BWActionCameraSceneMonitor alloc] initWithTuningParametersByPortType:v40 videoStabilizationStrength:*(unsigned int *)(a1 + 3804) bravoTelephotoEnabled:*(void *)(a1 + 568) != 0 attachDebugFrameStatistics:0];
    goto LABEL_66;
  }
LABEL_67:
  if (*(unsigned char *)(a1 + 208) || *(unsigned char *)(a1 + 209))
  {
    uint64_t v60 = +[FigCaptureCameraParameters sharedInstance];
    unsigned int v61 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v289 = 0u;
    long long v290 = 0u;
    long long v287 = 0u;
    long long v288 = 0u;
    uint64_t v62 = *(void **)(a1 + 552);
    uint64_t v63 = [v62 countByEnumeratingWithState:&v287 objects:v321 count:16];
    if (v63)
    {
      uint64_t v64 = *(void *)v288;
      do
      {
        for (uint64_t m = 0; m != v63; ++m)
        {
          if (*(void *)v288 != v64) {
            objc_enumerationMutation(v62);
          }
          long long v66 = *(void **)(*((void *)&v287 + 1) + 8 * m);
          BOOL v67 = *(unsigned char *)(a1 + 208) == 0;
          uint64_t v68 = [v66 portType];
          uint64_t v69 = [v66 sensorIDString];
          if (v67) {
            uint64_t v70 = [(FigCaptureCameraParameters *)v60 stereoPhotoCaptureSceneMonitoringParametersForPortType:v68 sensorIDString:v69];
          }
          else {
            uint64_t v70 = [(FigCaptureCameraParameters *)v60 stereoVideoCaptureSceneMonitoringParametersForPortType:v68 sensorIDString:v69];
          }
          objc_msgSend(v61, "setObject:forKeyedSubscript:", v70, objc_msgSend(v66, "portType"));
        }
        uint64_t v63 = [v62 countByEnumeratingWithState:&v287 objects:v321 count:16];
      }
      while (v63);
    }
    *(void *)(a1 + 1528) = [[BWStereoVideoCaptureSceneMonitor alloc] initWithTuningParametersByPortType:v61 attachDebugFrameStatistics:0];
    *(_DWORD *)(a1 + 1536) = 1;
  }
  float v71 = *(void **)(a1 + 2600);
  if (v71 && !*(unsigned char *)(a1 + 2432))
  {

    *(void *)(a1 + 2600) = 0;
  }
  if (!*(unsigned char *)(a1 + 2432))
  {
    BOOL v233 = 0;
    goto LABEL_102;
  }
  -[BWFigVideoCaptureDevice _setupStillImageCaptureStateMachine](a1);
  if ([*(id *)(a1 + 496) hasSphere]
    && ([*(id *)(a1 + 496) enablesSphereWhenAvailable] & 1) != 0)
  {
    BOOL v72 = 1;
LABEL_89:
    BOOL v233 = v72;
    goto LABEL_92;
  }
  if ([*(id *)(a1 + 496) motionDataDeliveryEnabled])
  {
    BOOL v72 = *(_DWORD *)(a1 + 1984) != 0;
    goto LABEL_89;
  }
  BOOL v233 = 0;
LABEL_92:
  if (BWDeviceIsiPhone() && !*(void *)(a1 + 2600)) {
    *(void *)(a1 + 2600) = objc_alloc_init(BWAmbientLightSensor);
  }
  long long v285 = 0u;
  long long v286 = 0u;
  long long v283 = 0u;
  long long v284 = 0u;
  float v73 = *(void **)(a1 + 552);
  uint64_t v74 = [v73 countByEnumeratingWithState:&v283 objects:v320 count:16];
  if (v74)
  {
    uint64_t v75 = *(void *)v284;
    do
    {
      for (uint64_t n = 0; n != v74; ++n)
      {
        if (*(void *)v284 != v75) {
          objc_enumerationMutation(v73);
        }
        objc_msgSend(*(id *)(a1 + 2056), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", -[BWFigVideoCaptureDevice _ubHighResolutionNondisruptiveSwitchingFormatIndexForCaptureStream:](a1, *(void **)(*((void *)&v283 + 1) + 8 * n))), objc_msgSend(*(id *)(*((void *)&v283 + 1) + 8 * n), "portType"));
      }
      uint64_t v74 = [v73 countByEnumeratingWithState:&v283 objects:v320 count:16];
    }
    while (v74);
  }
LABEL_102:
  -[BWFigVideoCaptureDevice _configureZoomFudging](a1);
  double v77 = *(void **)(a1 + 3128);
  [*(id *)(a1 + 2736) requestedZoomFactor];
  objc_msgSend(v77, "requestedZoomFactorChanged:");
  if (*(unsigned char *)(a1 + 1464)
    && (*(_DWORD *)(a1 + 1472) - 1) <= 1
    && [(id)a1 isBravoVariant])
  {
    [*(id *)(a1 + 2736) requestedZoomFactor];
    -[BWFigVideoCaptureDevice _setISPZoomFactorSynchronously:](a1, v78);
  }
  else
  {
    -[BWFigVideoCaptureDevice _setISPZoomFactorSynchronously:](a1, 1.0);
    [*(id *)(a1 + 2736) requestedZoomFactor];
    -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((unsigned char *)a1, v79);
  }
  [*(id *)(a1 + 2736) reset];
  [(BWFigVideoCaptureDevice *)a1 _setupZoomRampTuning];
  long long v281 = 0u;
  long long v282 = 0u;
  long long v279 = 0u;
  long long v280 = 0u;
  float v81 = *(void **)(a1 + 552);
  uint64_t v82 = [v81 countByEnumeratingWithState:&v279 objects:v319 count:16];
  if (v82)
  {
    uint64_t v83 = *(void *)v280;
    do
    {
      for (iuint64_t i = 0; ii != v82; ++ii)
      {
        if (*(void *)v280 != v83) {
          objc_enumerationMutation(v81);
        }
        -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:](a1, *(void **)(*((void *)&v279 + 1) + 8 * ii), 0, 0, 0);
      }
      uint64_t v82 = [v81 countByEnumeratingWithState:&v279 objects:v319 count:16];
    }
    while (v82);
  }
  if (*(unsigned char *)(a1 + 3699))
  {
    [*(id *)(a1 + 496) maximumFrameRate];
    *(_DWORD *)(a1 + 3716) = v85;
  }
  if (![(id)a1 isBravoVariant]) {
    goto LABEL_306;
  }
  v240 = (id *)(a1 + 568);
  BOOL v86 = *(void **)(a1 + 568);
  if (v86)
  {
    unsigned int v87 = (void *)[v86 stream];
    unint64_t v88 = (void *)[v87 getProperty:*MEMORY[0x1E4F54730] error:0];
    if (v88) {
      float v89 = (float)(int)[v88 intValue] * 0.0039062;
    }
    else {
      float v89 = 0.0;
    }
    [*v240 maxEIT];
    int v90 = v91;
  }
  else
  {
    float v89 = 0.0;
    int v90 = 0;
  }
  if (*(unsigned char *)(a1 + 1464))
  {
    int v92 = *(_DWORD *)(a1 + 1388);
    int v93 = *(_DWORD *)(a1 + 1392);
  }
  else if (*(unsigned char *)(a1 + 3640))
  {
    int v92 = *(_DWORD *)(a1 + 1400);
    int v93 = v92;
  }
  else
  {
    int v93 = *(_DWORD *)(a1 + 1380);
    int v92 = *(_DWORD *)(a1 + 1372);
  }
  [*(id *)(a1 + 496) maximumFrameRate];
  v244 = (id *)(a1 + 496);
  float v95 = v94 / (float)v92;
  float v96 = 4.0;
  if (v95 > 4.0)
  {
    [*v244 maximumFrameRate];
    float v96 = v97 / (float)v92;
  }
  *(_DWORD *)(a1 + 1376) = (int)v96;
  [*(id *)(a1 + 496) maximumFrameRate];
  float v99 = v98 / (float)v93;
  float v100 = 2.0;
  if (v99 > 2.0)
  {
    [*v244 maximumFrameRate];
    float v100 = v101 / (float)v93;
  }
  int v242 = (int)v100;
  *(_DWORD *)(a1 + 1384) = (int)v100;
  *(_DWORD *)(a1 + 1412) = 0;
  *(void *)(a1 + 1432) = 0;
  int v102 = [*(id *)(a1 + 552) count];
  [*(id *)(a1 + 496) maximumSupportedFrameRate];
  float v104 = v103;
  int v105 = [*(id *)(a1 + 496) videoHDRFusionEnabled];
  uint64_t v106 = (id *)(a1 + 552);
  if (v105) {
    float v104 = v104 + v104;
  }
  long long v277 = 0u;
  long long v278 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  id v107 = *v106;
  uint64_t v108 = [*v106 countByEnumeratingWithState:&v275 objects:v318 count:16];
  if (v108)
  {
    uint64_t v109 = *(void *)v276;
    do
    {
      for (juint64_t j = 0; jj != v108; ++jj)
      {
        if (*(void *)v276 != v109) {
          objc_enumerationMutation(v107);
        }
        if (!*(unsigned char *)(a1 + 1404) && !*(unsigned char *)(a1 + 1441) && !*(unsigned char *)(a1 + 1464) && !*(unsigned char *)(a1 + 209))
        {
LABEL_148:
          BOOL v111 = 0;
          goto LABEL_150;
        }
        BOOL v111 = *(unsigned char *)(a1 + 3640) == 0;
        if (*(unsigned char *)(a1 + 3640)) {
          BOOL v112 = 1;
        }
        else {
          BOOL v112 = v102 < 3;
        }
        if (!v112)
        {
          if (*(unsigned char *)(a1 + 1464)) {
            goto LABEL_148;
          }
          BOOL v111 = *(unsigned char *)(a1 + 209) == 0;
        }
LABEL_150:
        [*(id *)(*((void *)&v275 + 1) + 8 * jj) setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:v111];
      }
      uint64_t v108 = [v107 countByEnumeratingWithState:&v275 objects:v318 count:16];
    }
    while (v108);
  }
  *(_WORD *)(a1 + 602) = 0;
  *(unsigned char *)(a1 + 604) = 0;
  if (*(unsigned char *)(a1 + 1464))
  {
    if (v102 >= 3)
    {
      *(unsigned char *)(a1 + 604) = 1;
      [*(id *)(a1 + 496) maximumFrameRate];
      float v114 = (float)v242;
      if ((float)(v113 / (float)*(int *)(a1 + 1396)) < (float)v242)
      {
        [*(id *)(a1 + 496) maximumFrameRate];
        float v114 = v115 / (float)*(int *)(a1 + 1396);
      }
      LODWORD(v116) = 2.0;
      if (v114 > 2.0)
      {
        [*(id *)(a1 + 496) maximumFrameRate];
        BOOL v117 = (float)(*(float *)&v116 / (float)*(int *)(a1 + 1396)) < (float)v242;
        *(float *)&double v116 = (float)v242;
        if (v117)
        {
          objc_msgSend(*(id *)(a1 + 496), "maximumFrameRate", v116);
          *(float *)&double v116 = *(float *)&v116 / (float)*(int *)(a1 + 1396);
        }
      }
      int v118 = 0;
      BOOL v119 = 0;
      int v247 = 0;
      int v242 = (int)*(float *)&v116;
      goto LABEL_164;
    }
LABEL_163:
    int v118 = 0;
    BOOL v119 = 0;
    int v247 = 0;
LABEL_164:
    int v120 = 2;
    goto LABEL_165;
  }
  if (*(unsigned char *)(a1 + 209) || *(unsigned char *)(a1 + 3640)) {
    goto LABEL_163;
  }
  long long v273 = 0u;
  long long v274 = 0u;
  long long v271 = 0u;
  long long v272 = 0u;
  v167 = *(void **)(a1 + 552);
  int v168 = 0;
  int v118 = 0;
  uint64_t v169 = [v167 countByEnumeratingWithState:&v271 objects:v317 count:16];
  if (v169)
  {
    int v247 = 0;
    uint64_t v170 = *(void *)v272;
    uint64_t v171 = *MEMORY[0x1E4F52DD8];
    do
    {
      for (kuint64_t k = 0; kk != v169; ++kk)
      {
        if (*(void *)v272 != v170) {
          objc_enumerationMutation(v167);
        }
        v173 = *(void **)(*((void *)&v271 + 1) + 8 * kk);
        if ([v173 streamingRequiredWhenConfiguredAsSlave])
        {
          ++v168;
        }
        else if (objc_msgSend((id)objc_msgSend(v173, "portType"), "isEqualToString:", v171) {
               && *(unsigned char *)(a1 + 600))
        }
        {
          ++v168;
          int v247 = 1;
        }
        else if ([v173 visionDataRequiredWhenConfiguredAsSlave])
        {
          ++v168;
          ++v118;
        }
      }
      uint64_t v169 = [v167 countByEnumeratingWithState:&v271 objects:v317 count:16];
    }
    while (v169);
  }
  else
  {
    int v247 = 0;
  }
  BOOL v119 = v168 < v102;
  if (v168 >= v102) {
    int v120 = v168;
  }
  else {
    int v120 = v168 + 1;
  }
LABEL_165:
  if (*(unsigned char *)(a1 + 488))
  {
    int v121 = 0;
    goto LABEL_182;
  }
  uint64_t v122 = [*(id *)(a1 + 552) count];
  long long v123 = (unsigned char *)(a1 + 602);
  if (v122 == 1)
  {
LABEL_168:
    *long long v123 = 1;
    goto LABEL_174;
  }
  if (v104 <= 30.0)
  {
    long long v123 = (unsigned char *)(a1 + 602);
    if (v120 != 1)
    {
      if (v120 != 2 || (v119 & v247) != 1) {
        goto LABEL_174;
      }
      long long v123 = (unsigned char *)(a1 + 603);
    }
    goto LABEL_168;
  }
LABEL_174:
  if (*(unsigned char *)(a1 + 602)) {
    BOOL v124 = v120 < v102;
  }
  else {
    BOOL v124 = 0;
  }
  int v121 = v124;
  if (v124) {
    ++v120;
  }
LABEL_182:
  if (*(unsigned char *)(a1 + 3648))
  {
    if (v120 == 1)
    {
      int v120 = 2;
      int v121 = 1;
    }
    if (v120 < v102)
    {
      [*v244 maximumFrameRateForSensorRawOutputBufferPoolRequirements];
      if (v125 == 0.0) {
        [*v244 maximumFrameRate];
      }
      uint64_t v126 = 1396;
      if (!*(unsigned char *)(a1 + 1488)) {
        uint64_t v126 = 1380;
      }
      float v127 = v125 / (float)*(int *)(a1 + v126);
      if (v127 >= (float)v242) {
        float v127 = (float)v242;
      }
      int v242 = (int)fmaxf(v127, 2.0);
    }
  }
  if (v120 <= 1) {
    int v128 = 1;
  }
  else {
    int v128 = v120;
  }
  *(_DWORD *)(a1 + 1320) = v128 - 1;
  if ((v120 < 2
     || [*(id *)(a1 + 544) maximumNumberOfSlaveStreamsWithoutFrameSkippingSupported])
    && !*(unsigned char *)(a1 + 1441))
  {
    uint64_t v129 = v242;
    if (*(_DWORD *)(a1 + 1320) == v118)
    {
      float v152 = *(float *)(a1 + 3168);
      [*(id *)(a1 + 496) maximumFrameRate];
      float v154 = v153;
      if (v152 > 0.0)
      {
        if (v152 >= v153)
        {
          [*v244 maximumFrameRate];
          float v154 = v174;
        }
        else
        {
          float v154 = *(float *)(a1 + 3168);
        }
      }
      [*v244 maximumFrameRate];
      LODWORD(v129) = vcvtps_s32_f32(v175 / v154);
    }
  }
  else
  {
    uint64_t v129 = 1;
  }
  -[BWFigVideoCaptureDevice _setMinimumMasterToSlaveFrameRateRatio:](a1, v129);
  [*(id *)(a1 + 544) setMaximumNumberOfSlaveStreamsWithoutFrameSkipping:*(unsigned int *)(a1 + 1320)];
  long long v130 = (id *)(a1 + 544);
  [*(id *)(a1 + 544) setMaximumNumberOfSlaveStreamsWithFrameProcessingEnabled:(*(_DWORD *)(a1 + 1320) - v121)];
  int v131 = *(_DWORD *)(a1 + 4332);
  if (v131 <= 0) {
    uint64_t v132 = 0;
  }
  else {
    uint64_t v132 = (v131 - 1);
  }
  [*v130 setMaximumNumberOfEnabledSlaveTimeMachines:v132];
  -[BWFigVideoCaptureDevice _updateStatsMasterForMasterStream:](a1, 0);
  long long v133 = objc_msgSend((id)objc_msgSend(*v130, "syncGroup"), "supportedProperties");
  uint64_t v134 = *MEMORY[0x1E4F55610];
  if ([v133 objectForKeyedSubscript:*MEMORY[0x1E4F55610]])
  {
    long long v135 = (void *)[*(id *)(a1 + 544) syncGroup];
    objc_msgSend(v135, "setProperty:value:", v134, objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 605)));
  }
  long long v136 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 544), "syncGroup"), "supportedProperties");
  uint64_t v137 = *MEMORY[0x1E4F555B8];
  if ([v136 objectForKeyedSubscript:*MEMORY[0x1E4F555B8]])
  {
    long long v138 = (void *)[*(id *)(a1 + 544) syncGroup];
    objc_msgSend(v138, "setProperty:value:", v137, objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 208)));
  }
  if (!*(void *)(a1 + 576)
    || ([*(id *)(a1 + 2736) requestedZoomFactor],
        float v140 = v139,
        [*(id *)(a1 + 496) baseZoomFactor],
        long long v141 = (uint64_t *)(a1 + 576),
        v140 >= v142)
    && (!objc_msgSend(*(id *)(a1 + 4112), "isEqualToString:", objc_msgSend(*(id *)(a1 + 576), "portType"))
     || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1312), "eligibleFallbackPortTypes"), "containsObject:", *(void *)(a1 + 4112)) & 1) == 0))
  {
    if (!*v240) {
      goto LABEL_213;
    }
    [*(id *)(a1 + 2736) requestedZoomFactor];
    float v144 = v143;
    [*(id *)(a1 + 568) baseZoomFactor];
    if (v144 < v145) {
      goto LABEL_213;
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1312), "eligibleFallbackPortTypes"), "containsObject:", objc_msgSend(*(id *)(a1 + 496), "portType")))
    {
      long long v141 = (uint64_t *)(a1 + 568);
      if ((objc_msgSend(*(id *)(a1 + 4112), "isEqualToString:", objc_msgSend(*(id *)(a1 + 568), "portType")) & 1) == 0) {
LABEL_213:
      }
        long long v141 = (uint64_t *)(a1 + 496);
    }
    else
    {
      long long v141 = (uint64_t *)(a1 + 568);
    }
  }
  uint64_t v146 = *v141;
  *(void *)(a1 + 1288) = *v141;
  *(void *)(a1 + 584) = v146;
  if (*(unsigned char *)(a1 + 3640))
  {
    *(unsigned char *)(a1 + 3856) = 1;
    if (*(unsigned char *)(a1 + 3840))
    {
      *(unsigned char *)(a1 + 3849) = 1;
      *(_DWORD *)(a1 + 3852) = 0;
    }
    [*(id *)(a1 + 2736) requestedZoomFactor];
    float v148 = v147;
    if (*(unsigned char *)(a1 + 3650))
    {
      uint64_t v149 = *(void *)(a1 + 1288);
    }
    else
    {
      uint64_t v149 = -[BWFigVideoCaptureDevice _overCaptureMasterStreamForZoomFactor:](a1, v147);
      *(void *)(a1 + 1288) = v149;
    }
    v151 = (void *)-[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, v149, 0, v148, 0.0);
    [v151 setStreamingRequiredWhenConfiguredAsSlave:1];
    BOOL v155 = (*(unsigned char *)(a1 + 1464) || *(unsigned char *)(a1 + 209)) && *(unsigned char *)(a1 + 3204) != 0;
    [v151 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:v155];
  }
  else if (*(unsigned char *)(a1 + 1464) || *(unsigned char *)(a1 + 209))
  {
    int v150 = objc_msgSend(*(id *)(a1 + 560), "indexOfObject:");
    if (v150 >= 1) {
      v151 = (void *)[*(id *)(a1 + 560) objectAtIndexedSubscript:(v150 - 1)];
    }
    else {
      v151 = 0;
    }
    [v151 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:1];
  }
  else
  {
    v151 = 0;
  }
  *(void *)(a1 + 1296) = *(void *)(a1 + 1288);
  if (*(unsigned char *)(a1 + 1440))
  {
    unint64_t v156 = objc_msgSend(*(id *)(a1 + 560), "indexOfObject:");
    if (v156 >= [*(id *)(a1 + 560) count] - 1
      || (uint64_t v157 = [*(id *)(a1 + 560) objectAtIndexedSubscript:v156 + 1]) == 0)
    {
      uint64_t v157 = *(void *)(a1 + 1288);
    }
    *(void *)(a1 + 1432) = v157;
  }
  if ((unint64_t)[*(id *)(a1 + 552) count] < 3) {
    goto LABEL_287;
  }
  if (v151) {
    goto LABEL_284;
  }
  long long v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  v158 = *(void **)(a1 + 552);
  uint64_t v159 = [v158 countByEnumeratingWithState:&v267 objects:v316 count:16];
  if (v159)
  {
    v151 = 0;
    uint64_t v160 = *(void *)v268;
    do
    {
      for (muint64_t m = 0; mm != v159; ++mm)
      {
        v162 = v151;
        if (*(void *)v268 != v160) {
          objc_enumerationMutation(v158);
        }
        v151 = *(void **)(*((void *)&v267 + 1) + 8 * mm);
        if (![v151 streamingRequiredWhenConfiguredAsSlave]
          || v151 == *(void **)(a1 + 1288))
        {
          v151 = v162;
        }
        else if (v162)
        {
          goto LABEL_257;
        }
      }
      uint64_t v159 = [v158 countByEnumeratingWithState:&v267 objects:v316 count:16];
    }
    while (v159);
    if (v151) {
      goto LABEL_284;
    }
  }
LABEL_257:
  [*(id *)(a1 + 2736) requestedZoomFactor];
  v151 = (void *)-[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, v163);
  if (v151 != *(void **)(a1 + 1288)) {
    goto LABEL_283;
  }
  unint64_t v164 = [*(id *)(a1 + 560) indexOfObject:v151];
  v165 = *(void **)(a1 + 560);
  if (v164)
  {
    if (v164 >= [v165 count]) {
      goto LABEL_283;
    }
    uint64_t v166 = [*(id *)(a1 + 560) objectAtIndexedSubscript:v164 - 1];
  }
  else
  {
    uint64_t v166 = [v165 objectAtIndexedSubscript:1];
  }
  v151 = (void *)v166;
LABEL_283:
  if (v151)
  {
LABEL_284:
    v315[0] = *(void *)(a1 + 1288);
    v315[1] = v151;
    uint64_t v176 = [MEMORY[0x1E4F1C978] arrayWithObjects:v315 count:2];
    goto LABEL_285;
  }
  if (!*(void *)(a1 + 1288))
  {
    uint64_t v177 = 0;
    goto LABEL_286;
  }
  uint64_t v314 = *(void *)(a1 + 1288);
  uint64_t v176 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v314 count:1];
LABEL_285:
  uint64_t v177 = v176;
LABEL_286:
  [*(id *)(a1 + 592) setSynchronizationSlavesOrderedByPriority:v177];
LABEL_287:
  BOOL v178 = !*(unsigned char *)(a1 + 4197) || *(unsigned char *)(a1 + 4196) || *(void *)(a1 + 1288) == *(void *)(a1 + 496);
  if ((([*(id *)(a1 + 592) waitForMasterAEToSettle] ^ 1 | v178) & 1) == 0) {
    [*(id *)(a1 + 592) setWaitForMasterAEToSettle:0];
  }
  -[BWFigVideoCaptureDevice _updateBravoStreamSelectionForMasterStream:forceNotification:](a1, *(void **)(a1 + 1288), 1);
  v179 = *(void **)(a1 + 1312);
  [*(id *)(a1 + 2736) requestedZoomFactor];
  objc_msgSend(v179, "resetWithZoomFactor:currentMasterStream:", *(void *)(a1 + 1288));
  *(float *)&double v180 = v89;
  [*(id *)(a1 + 1312) setTeleMaxAEGain:v180];
  LODWORD(v181) = v90;
  [*(id *)(a1 + 1312) setTeleMaxEIT:v181];
  if (*(_DWORD *)(a1 + 1472) == 3) {
    -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](a1, *MEMORY[0x1E4F54D18], (uint64_t)&unk_1EFB05A18);
  }
  long long v265 = 0u;
  long long v266 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  v182 = *(void **)(a1 + 552);
  uint64_t v183 = [v182 countByEnumeratingWithState:&v263 objects:v313 count:16];
  if (v183)
  {
    uint64_t v184 = *(void *)v264;
    do
    {
      for (nuint64_t n = 0; nn != v183; ++nn)
      {
        if (*(void *)v264 != v184) {
          objc_enumerationMutation(v182);
        }
        v186 = *(void **)(*((void *)&v263 + 1) + 8 * nn);
        if (v186 == *(void **)(a1 + 1288))
        {
          [*(id *)(*((void *)&v263 + 1) + 8 * nn) willBecomeMasterStream];
          [v186 didBecomeMasterStream];
        }
        else
        {
          [*(id *)(*((void *)&v263 + 1) + 8 * nn) willBecomeSlaveStream];
          [v186 didBecomeSlaveStream];
        }
      }
      uint64_t v183 = [v182 countByEnumeratingWithState:&v263 objects:v313 count:16];
    }
    while (v183);
  }
  FigMotionSphereShiftStateInitialize(a1 + 608, (const __CFDictionary *)[(id)a1 cameraInfoByPortType], 7);
  *(_DWORD *)(a1 + 1248) = -1;
  [*(id *)(a1 + 2736) requestedZoomFactor];
  -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)a1, v187);
  [*(id *)(a1 + 544) setMasterStream:*(void *)(a1 + 1288) allStreams:*(void *)(a1 + 552)];
  uint64_t v188 = [*(id *)(a1 + 1288) portType];
  v305 = @"NewPropertyValue";
  uint64_t v306 = v188;
  objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"BravoMasterStreamChangedNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v306, &v305, 1));
  uint64_t v189 = [*(id *)(a1 + 1296) portType];
  v305 = @"NewPropertyValue";
  uint64_t v306 = v189;
  objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"PreferredBravoMasterStreamChangedNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v306, &v305, 1));
LABEL_306:
  uint64_t v190 = MEMORY[0x1E4F1F9F8];
  long long v235 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 1256) = *MEMORY[0x1E4F1F9F8];
  uint64_t v234 = *(void *)(v190 + 16);
  *(void *)(a1 + 1272) = v234;
  uint64_t v191 = MEMORY[0x1E4F1FA48];
  long long v248 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 4208) = *MEMORY[0x1E4F1FA48];
  uint64_t v192 = *(void *)(v191 + 16);
  *(void *)(a1 + 4224) = v192;
  *(unsigned char *)(a1 + 1452) = 0;
  v305 = @"NewPropertyValue";
  uint64_t v306 = [NSNumber numberWithBool:0];
  objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"MacroFocusNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v306, &v305, 1));
  *(unsigned char *)(a1 + 4273) = *(unsigned char *)(a1 + 4272);
  *(_OWORD *)(a1 + 4276) = v248;
  *(void *)(a1 + 4292) = v192;
  *(_OWORD *)(a1 + 4300) = v248;
  *(void *)(a1 + 4316) = v192;
  *(_DWORD *)(a1 + 4324) = 0;
  if (*(void *)(a1 + 1456))
  {
    -[BWFigVideoCaptureDevice _setMinimumMasterToSlaveFrameRateRatio:](a1, 1);
    [*(id *)(a1 + 2736) requestedZoomFactor];
    -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)a1, v193);
    [*(id *)(a1 + 496) willBecomeMasterStream];
    [*(id *)(a1 + 1456) willBecomeSlaveStream];
    [*(id *)(a1 + 544) setMasterStream:*(void *)(a1 + 496) allStreams:*(void *)(a1 + 552)];
    [*(id *)(a1 + 496) didBecomeMasterStream];
    [*(id *)(a1 + 1456) didBecomeSlaveStream];
  }
  long long v261 = 0u;
  long long v262 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  id obj = *(id *)(a1 + 552);
  uint64_t v194 = [obj countByEnumeratingWithState:&v259 objects:v312 count:16];
  if (v194)
  {
    uint64_t v246 = *(void *)v260;
    uint64_t v195 = *MEMORY[0x1E4F547E8];
    uint64_t v249 = *MEMORY[0x1E4F547F0];
    uint64_t v236 = *MEMORY[0x1E4F547E0];
    uint64_t v196 = *MEMORY[0x1E4F54BC8];
    uint64_t v197 = *MEMORY[0x1E4F548D0];
    uint64_t v245 = *MEMORY[0x1E4F54C20];
    uint64_t v243 = *MEMORY[0x1E4F54C28];
    uint64_t v241 = *MEMORY[0x1E4F54C50];
    uint64_t v239 = *MEMORY[0x1E4F54A10];
    uint64_t v238 = *MEMORY[0x1E4F52F10];
    uint64_t v198 = MEMORY[0x1E4F1CC38];
    do
    {
      for (uint64_t i1 = 0; i1 != v194; ++i1)
      {
        if (*(void *)v260 != v246) {
          objc_enumerationMutation(obj);
        }
        v200 = *(void **)(*((void *)&v259 + 1) + 8 * i1);
        v201 = (void *)[v200 stream];
        if (objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v195))
        {
          objc_msgSend(v201, "setProperty:value:", v195, objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 1864)));
          if (objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v249))
          {
            [v201 setProperty:v236 value:v198];
            if (![v201 getProperty:v249 error:0])
            {
              id v202 = *(id *)(a1 + 3256);
              if (!v202)
              {
                id v202 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
                *(void *)(a1 + 3256) = v202;
              }
              objc_msgSend(v202, "addObject:", objc_msgSend(v200, "portType"));
            }
            id v203 = *(id *)(a1 + 3264);
            if (!v203)
            {
              id v203 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
              *(void *)(a1 + 3264) = v203;
            }
            objc_msgSend(v203, "addObject:", objc_msgSend(v200, "portType"));
            id v204 = *(id *)(a1 + 3280);
            if (!v204)
            {
              id v204 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
              *(void *)(a1 + 3280) = v204;
            }
            objc_msgSend(v204, "addObject:", objc_msgSend(v200, "portType"));
          }
          if (!*(void *)(a1 + 3296)) {
            *(void *)(a1 + 3296) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          if (!*(void *)(a1 + 3304)) {
            *(void *)(a1 + 3304) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
        }
        if (objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v196)) {
          [v201 setProperty:v196 value:v198];
        }
        if (objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v197)) {
          [v201 setProperty:v197 value:v198];
        }
        BOOL v205 = *(_DWORD *)(a1 + 1472) == 3 && v200 == (void *)[*(id *)(a1 + 560) firstObject];
        if (objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v245)) {
          char v206 = v205;
        }
        else {
          char v206 = 1;
        }
        if ((v206 & 1) == 0) {
          [v200 setTemporalNoiseReductionConfigurationBand0Enabled:*(unsigned char *)(a1 + 3913) == 0 rawEnabled:*(unsigned __int8 *)(a1 + 3914) modulation:*(unsigned int *)(a1 + 3920) adaptiveOverscanEnabled:*(unsigned __int8 *)(a1 + 3809) strengthHighEnabled:*(unsigned __int8 *)(a1 + 3915)];
        }
        if (*(unsigned char *)(a1 + 3912)) {
          BOOL v207 = !v205;
        }
        else {
          BOOL v207 = 0;
        }
        objc_msgSend(v201, "setPropertyIfSupported:value:", v243, objc_msgSend(NSNumber, "numberWithBool:", v207));
        [v201 setPropertyIfSupported:v241 value:v198];
        [v201 setPropertyIfSupported:v239 value:v198];
        if ([v200 hasSphere]
          && objc_msgSend((id)objc_msgSend(v201, "supportedProperties"), "objectForKeyedSubscript:", v196))
        {
          [v201 setProperty:v196 value:v198];
          if (!*(void *)(a1 + 3312)) {
            *(void *)(a1 + 3312) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          if (!*(void *)(a1 + 3320)) {
            *(void *)(a1 + 3320) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
        }
        uint64_t v208 = objc_msgSend((id)objc_msgSend(v200, "moduleInfo"), "objectForKeyedSubscript:", v238);
        if (v208)
        {
          id v209 = *(id *)(a1 + 3416);
          if (!v209)
          {
            id v209 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            *(void *)(a1 + 3416) = v209;
          }
          objc_msgSend(v209, "setObject:forKeyedSubscript:", v208, objc_msgSend(v200, "portType"));
        }
      }
      uint64_t v194 = [obj countByEnumeratingWithState:&v259 objects:v312 count:16];
    }
    while (v194);
  }

  *(void *)(a1 + 3424) = 0;
  *(void *)(a1 + 3348) = 0;
  *(_DWORD *)(a1 + 3160) = 0;
  if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))
  {
    v210 = *(void **)(a1 + 496);
    if (v210) {
      [v210 maxExposureDuration];
    }
    else {
      memset(&time, 0, sizeof(time));
    }
    CFDictionaryRef v211 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    v310 = @"NewPropertyValue";
    CFDictionaryRef v311 = v211;
    objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"MaxExposureDurationChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v311, &v310, 1));
  }
  if (*(unsigned char *)(a1 + 132))
  {
    if (*(unsigned char *)(a1 + 148))
    {
      -[BWFigVideoCaptureDevice _updateSensorRawPools](a1);
    }
    else
    {
      -[BWFigVideoCaptureDevice _updateSensorRawPool](a1);
      if (FigCaptureVideoDimensionsAreValid(*(void *)(a1 + 140))) {
        -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool](a1);
      }
      else {
        [*(id *)(a1 + 152) setObject:0 forKeyedSubscript:&unk_1EFB015C8];
      }
    }
  }
  [*(id *)(a1 + 3632) enableForCaptureDevice:*(void *)(a1 + 8)];
  *(_OWORD *)(a1 + 2380) = v235;
  *(void *)(a1 + 2396) = v234;
  *(unsigned char *)(a1 + 2404) = 0;
  if (*(unsigned char *)(a1 + 3699))
  {
    if (dword_1EB4C4FF0)
    {
      int v257 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v213 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v231, v232);
    long long v254 = 0u;
    long long v255 = 0u;
    long long v252 = 0u;
    long long v253 = 0u;
    v214 = *(void **)(a1 + 96);
    uint64_t v215 = [v214 countByEnumeratingWithState:&v252 objects:v304 count:16];
    if (v215)
    {
      uint64_t v216 = *(void *)v253;
      do
      {
        for (uint64_t i2 = 0; i2 != v215; ++i2)
        {
          if (*(void *)v253 != v216) {
            objc_enumerationMutation(v214);
          }
          uint64_t v218 = *(void *)(*((void *)&v252 + 1) + 8 * i2);
          v219 = -[BWVariableFrameRateParameters initWithPortType:sensorIDDictionary:]([BWVariableFrameRateParameters alloc], "initWithPortType:sensorIDDictionary:", v218, [*(id *)(a1 + 96) objectForKeyedSubscript:v218]);
          if (v219)
          {
            [v213 setObject:v219 forKeyedSubscript:v218];
          }
        }
        uint64_t v215 = [v214 countByEnumeratingWithState:&v252 objects:v304 count:16];
      }
      while (v215);
    }
    if (!*(void *)(a1 + 3736)) {
      *(void *)(a1 + 3736) = FigDispatchQueueCreateWithPriority();
    }
    *(_DWORD *)(a1 + 3728) = 0;
    if (!*(void *)(a1 + 3704)) {
      *(void *)(a1 + 3704) = -[BWVariableFrameRateSelector initWithPortTypes:forParameters:frameRateSwitchBasedOnMotionDisabled:]([BWVariableFrameRateSelector alloc], "initWithPortTypes:forParameters:frameRateSwitchBasedOnMotionDisabled:", *(void *)(a1 + 112), v213, objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "frameRateSwitchBasedOnMotionForVFRDisabled"));
    }
    if (!*(void *)(a1 + 3720)) {
      *(void *)(a1 + 3720) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
  }
  else
  {

    *(void *)(a1 + 3736) = 0;
    *(void *)(a1 + 3704) = 0;

    *(void *)(a1 + 3720) = 0;
  }
  uint64_t v306 = 0;
  v307 = &v306;
  uint64_t v308 = 0x2020000000;
  char v309 = 0;
  uint64_t v220 = [*(id *)(a1 + 1288) portType];
  if (!v220) {
    uint64_t v220 = [*(id *)(a1 + 496) portType];
  }
  v221 = *(NSObject **)(a1 + 1552);
  v251[0] = MEMORY[0x1E4F143A8];
  v251[1] = 3221225472;
  v251[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_278;
  v251[3] = &unk_1E5C25210;
  v251[5] = v220;
  v251[6] = &v306;
  v251[4] = a1;
  dispatch_sync(v221, v251);
  v222 = v307;
  *(unsigned char *)(a1 + 3104) = *((unsigned char *)v307 + 24);
  if (v233 || *((unsigned char *)v222 + 24))
  {
    v223 = objc_alloc_init(BWDeviceMotionActivityDetector);
    *(void *)(a1 + 3064) = v223;
    if (*(_DWORD *)(a1 + 2128)) {
      BOOL v224 = *((unsigned char *)v307 + 24) != 0;
    }
    else {
      BOOL v224 = 0;
    }
    [(BWDeviceMotionActivityDetector *)v223 setDirectionalMotionDetectionEnabled:v224];
    *(_OWORD *)(a1 + 3076) = v235;
    *(void *)(a1 + 3092) = v234;
  }
  v225 = *(void **)(a1 + 2272);
  if (v225)
  {
    int v226 = *(_DWORD *)(a1 + 2280);
    v227 = (void *)[v225 referencedObject];
    LODWORD(v228) = v226;
    [v227 setMinimumFrameRate:v228];
  }
  uint64_t v229 = mach_absolute_time();
  *(void *)(a1 + 3328) = v229;
  *(void *)(a1 + 288) = v229;
  *(void *)(a1 + 256) = v229;
  *(void *)(a1 + 360) = v229;
  *(void *)(a1 + 192) = v229;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = -1;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 320) = v229;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = v229;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 3356) = 0;
  *(void *)(a1 + 3360) = 0;
  *(_DWORD *)(a1 + 3368) = -1;
  *(void *)(a1 + 3336) = 0;
  *(_DWORD *)(a1 + 3344) = 0;
  *(void *)(a1 + 3386) = 0;
  *(_OWORD *)(a1 + 3372) = 0u;
  *(_OWORD *)(a1 + 3396) = 0u;
  *(int32x2_t *)(a1 + 3432) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 3440) = 2139095039;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(void *)(a1 + 3496) = v234;
  *(_OWORD *)(a1 + 3480) = v235;
  *(void *)(a1 + 3512) = 0;
  *(_DWORD *)(a1 + 3528) = 0;
  *(void *)(a1 + 3520) = v229;
  *(void *)(a1 + 3536) = -1;
  *(_DWORD *)(a1 + 3544) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
  if (*(int *)(a1 + 3828) >= 3) {
    *(void *)(a1 + 3536) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
  if (*(void *)(a1 + 1456))
  {
    *(void *)(a1 + 3448) = objc_alloc_init(BWStats);
    *(void *)(a1 + 3456) = objc_alloc_init(BWStats);
  }
  *(void *)(a1 + 3504) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_DWORD *)(a1 + 3884) = 0;
  *(_OWORD *)(a1 + 3868) = 0u;
  *(_OWORD *)(a1 + 3888) = v235;
  *(void *)(a1 + 3904) = v234;
  [*(id *)(a1 + 4152) start];
  v230 = *(NSObject **)(a1 + 4144);
  v250[0] = MEMORY[0x1E4F143A8];
  v250[1] = 3221225472;
  v250[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_280;
  v250[3] = &unk_1E5C24F10;
  v250[4] = a1;
  v250[5] = v229;
  dispatch_async(v230, v250);
  *(unsigned char *)(a1 + 4090) = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "stream"), "streaming");
  *(unsigned char *)(a1 + 4089) = 1;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio](a1);
  _Block_object_dispose(&v306, 8);
}

- (void)captureStream:(id)a3 didUpdatePreviewShift:(CGPoint)a4
{
  if (LOBYTE(self->_overCaptureLockedStreams))
  {
    double y = a4.y;
    double x = a4.x;
    if ([(BWFigVideoCaptureDevice *)self masterCaptureStream] == a3)
    {
      os_unfair_lock_lock(&self->_switchOverLock);
      BOOL nonDisruptiveSwitchOverInProgress = self->_nonDisruptiveSwitchOverInProgress;
      os_unfair_lock_unlock(&self->_switchOverLock);
      if (!nonDisruptiveSwitchOverInProgress)
      {
        [a3 baseZoomFactor];
        double v10 = x / v9;
        [a3 baseZoomFactor];
        double v12 = FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(v10, y / v11, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.x, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.y, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.width);
        double v14 = v13;
        if (v12 != -[BWFigVideoCaptureDevice previewShiftInSensorSpace]((uint64_t)self) || v14 != v15)
        {
          [(BWFigVideoCaptureDevice *)(uint64_t)self setPreviewShiftInSensorSpace:y];
          [(BWFigVideoCaptureDevice *)self zoomFactor];
          focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          v19[2] = __63__BWFigVideoCaptureDevice_captureStream_didUpdatePreviewShift___block_invoke;
          v19[3] = &unk_1E5C262A0;
          v19[4] = self;
          int v20 = v18;
          dispatch_async(focusAndExposureUpdateQueue, v19);
        }
      }
    }
  }
}

- (double)previewShiftInSensorSpace
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 3676);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3676));
  double v3 = *(double *)(a1 + 3680);
  os_unfair_lock_unlock(v2);
  return v3;
}

- (id)cameraInfoByPortTypeIncludingLSCGains:(BOOL)a3 includeFocusPixelMap:(BOOL)a4 includeDefectivePixelTable:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  BOOL v73 = a3;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id obj = self->_captureStreams;
  uint64_t v74 = [(NSArray *)obj countByEnumeratingWithState:&v76 objects:v80 count:16];
  if (v74)
  {
    uint64_t v72 = *(void *)v77;
    uint64_t v69 = *MEMORY[0x1E4F52CF8];
    uint64_t v71 = *MEMORY[0x1E4F52CE0];
    uint64_t v70 = *MEMORY[0x1E4F52CC0];
    uint64_t v75 = *MEMORY[0x1E4F52C78];
    uint64_t v60 = *MEMORY[0x1E4F52D18];
    uint64_t v59 = *MEMORY[0x1E4F52D20];
    uint64_t v63 = *MEMORY[0x1E4F52CE8];
    uint64_t v53 = *MEMORY[0x1E4F54900];
    uint64_t v52 = *MEMORY[0x1E4F52CD8];
    uint64_t v51 = *MEMORY[0x1E4F52D08];
    uint64_t v50 = *MEMORY[0x1E4F54B78];
    uint64_t v49 = *MEMORY[0x1E4F52D38];
    uint64_t v48 = *MEMORY[0x1E4F52D28];
    uint64_t v62 = *MEMORY[0x1E4F52CA8];
    uint64_t v47 = *MEMORY[0x1E4F52CA0];
    uint64_t v46 = *MEMORY[0x1E4F54790];
    uint64_t v45 = *MEMORY[0x1E4F52C70];
    uint64_t v44 = *MEMORY[0x1E4F52C98];
    uint64_t v43 = *MEMORY[0x1E4F52CD0];
    uint64_t v42 = *MEMORY[0x1E4F54B70];
    uint64_t v41 = *MEMORY[0x1E4F52D30];
    uint64_t v61 = *MEMORY[0x1E4F52C90];
    uint64_t v38 = *MEMORY[0x1E4F52C88];
    uint64_t v37 = *MEMORY[0x1E4F52DE8];
    uint64_t v34 = *MEMORY[0x1E4F52DD8];
    uint64_t v36 = *MEMORY[0x1E4F52CB8];
    uint64_t v33 = *MEMORY[0x1E4F52CB0];
    uint64_t v65 = *MEMORY[0x1E4F52C80];
    uint64_t v64 = *MEMORY[0x1E4F52D10];
    uint64_t v58 = *MEMORY[0x1E4F549E0];
    uint64_t v40 = *MEMORY[0x1E4F549E8];
    uint64_t v39 = *MEMORY[0x1E4F52D00];
    uint64_t v35 = *MEMORY[0x1E4F52CF0];
    uint64_t v57 = *MEMORY[0x1E4F54950];
    uint64_t v56 = *MEMORY[0x1E4F54888];
    uint64_t v55 = *MEMORY[0x1E4F54890];
    uint64_t v54 = *MEMORY[0x1E4F52CC8];
    BOOL v67 = v6;
    BOOL v66 = v5;
    do
    {
      for (uint64_t i = 0; i != v74; ++i)
      {
        if (*(void *)v77 != v72) {
          objc_enumerationMutation(obj);
        }
        float v9 = *(void **)(*((void *)&v76 + 1) + 8 * i);
        double v10 = (void *)[v9 portType];
        uint64_t v11 = [(NSMutableDictionary *)self->_cameraInfoByPortType objectForKeyedSubscript:v10];
        if (v73)
        {
          BOOL v12 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v69) == 0;
          if (!v6) {
            goto LABEL_8;
          }
        }
        else
        {
          BOOL v12 = 0;
          if (!v6)
          {
LABEL_8:
            BOOL v13 = 0;
            if (!v5) {
              goto LABEL_9;
            }
            goto LABEL_12;
          }
        }
        BOOL v13 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v71) == 0;
        if (!v5)
        {
LABEL_9:
          BOOL v14 = 0;
          goto LABEL_13;
        }
LABEL_12:
        BOOL v14 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v70) == 0;
LABEL_13:
        objc_msgSend((id)objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v75), "floatValue");
        float v16 = v15;
        [v9 baseZoomFactor];
        float v18 = v17;
        if (v11) {
          int v19 = v12;
        }
        else {
          int v19 = 1;
        }
        if (((v19 | v13) & 1) == 0 && !v14 && v16 == v17) {
          continue;
        }
        if (v11)
        {
          id v20 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithDictionary:", -[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10));
          if (v16 == v18)
          {
            if (v12) {
              goto LABEL_34;
            }
            goto LABEL_37;
          }
        }
        else
        {
          id v20 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          [v9 opticalCenterOffset];
          [v20 setObject:CGPointCreateDictionaryRepresentation(v82) forKeyedSubscript:v60];
          [v9 opticalCenterOffsetInPhysicalSensorDimensions];
          [v20 setObject:CGPointCreateDictionaryRepresentation(v83) forKeyedSubscript:v59];
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "geometricDistortionCoefficients"), v63);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v53, 0), v52);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "moduleInfo"), v51);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v50, 0), v49);
          id v21 = NSNumber;
          [v9 pixelSize];
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v21, "numberWithFloat:"), v48);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraViewMatrix"), v62);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraPoseMatrix"), v47);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v46, 0), v45);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "sensorColorCalibrationData"), v44);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "flashCalibrationData"), v43);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v42, 0), v41);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "calibrationValidRadiusForFullFieldOfView"), v61);
          [v9 calibratedRotationAngle];
          if (v22 != 0.0)
          {
            uint64_t v23 = NSNumber;
            [v9 calibratedRotationAngle];
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v23, "numberWithFloat:"), v38);
          }
          uint64_t v24 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          if ([v9 hasOpticalCenterOffsetCalibratedForNarrowerFieldOfView])
          {
            [v9 opticalCenterOffsetCalibratedForNarrowerFieldOfView];
            [v24 setObject:CGPointCreateDictionaryRepresentation(v84) forKeyedSubscript:v60];
            [v9 opticalCenterOffsetCalibratedForNarrowerFieldOfViewInPhysicalSensorDimensions];
            [v24 setObject:CGPointCreateDictionaryRepresentation(v85) forKeyedSubscript:v59];
          }
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "geometricDistortionCoefficientsCalibratedForNarrowerFieldOfView"), v63);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraViewMatrixCalibratedForNarrowerFieldOfView"), v62);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "calibrationValidRadiusForNarrowerFieldOfView"), v61);
          if ([v24 count])
          {
            if ([v10 isEqualToString:v37])
            {
              [v20 setObject:v24 forKeyedSubscript:v36];
              uint64_t v25 = v33;
LABEL_32:
              [v20 setObject:v24 forKeyedSubscript:v25];
              goto LABEL_33;
            }
            if ([v10 isEqualToString:v34])
            {
              uint64_t v26 = [v9 cameraViewMatrixCalibratedForNarrowerFieldOfView];
              uint64_t v25 = v36;
              if (v26) {
                goto LABEL_32;
              }
            }
          }
        }
LABEL_33:
        int v27 = NSNumber;
        [v9 baseZoomFactor];
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v27, "numberWithFloat:"), v75);
        uint64_t v28 = NSNumber;
        [v9 baseZoomFactorAfterGDC];
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v28, "numberWithFloat:"), v65);
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "nondisruptiveSwitchingZoomFactors"), v64);
        if (v12)
        {
LABEL_34:
          uint64_t v29 = objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v58, 0);
          if (v29)
          {
            double v30 = v29;
            uint64_t v31 = (_DWORD *)[v29 bytes];
            [v20 setObject:v30 forKeyedSubscript:v69];
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v40, 0), v39);
            if (*v31 == 2)
            {
              CMILSCOISAdaptation_convertV2LSCTableToV1LSCTable();
              [v20 setObject:0 forKeyedSubscript:v69];
              [v20 setObject:v30 forKeyedSubscript:v35];
            }
          }
        }
LABEL_37:
        if (v13) {
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v57, 0), v71);
        }
        BOOL v5 = v66;
        if (v14)
        {
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v56, 0), v70);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v55, 0), v54);
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](self->_cameraInfoByPortType, "setObject:forKeyedSubscript:", (id)[v20 copy], v10);

        BOOL v6 = v67;
      }
      uint64_t v74 = [(NSArray *)obj countByEnumeratingWithState:&v76 objects:v80 count:16];
    }
    while (v74);
  }
  return (id)[(NSMutableDictionary *)self->_cameraInfoByPortType copy];
}

- (uint64_t)_captureStreamBasedSolelyOnZoomFactor:(uint64_t)a1
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [*(id *)(a1 + 560) firstObject];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  BOOL v5 = *(void **)(a1 + 560);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        [v10 baseZoomFactor];
        if (v11 <= a2) {
          uint64_t v4 = (uint64_t)v10;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }
  return v4;
}

- (double)_setupZoomRampTuning
{
  if (a1)
  {
    *(_OWORD *)(a1 + 2796) = xmmword_1A5F0CEE0;
    *(void *)(a1 + 2812) = 0x3EF5C28F3F160419;
    *(_WORD *)(a1 + 2820) = 1;
    *(_OWORD *)(a1 + 2824) = xmmword_1A5F0CEF0;
    *(_OWORD *)(a1 + 2840) = xmmword_1A5F0CF00;
    *(_OWORD *)(a1 + 2856) = xmmword_1A5F0CF10;
    *(_OWORD *)(a1 + 2872) = xmmword_1A5F0CF20;
    *(_OWORD *)(a1 + 2888) = xmmword_1A5F0CF30;
    *(_OWORD *)(a1 + 2904) = xmmword_1A5F0CF40;
    *(_DWORD *)(a1 + 2936) = 1101004800;
    *(_OWORD *)(a1 + 2920) = xmmword_1A5F0CF50;
    *(void *)(a1 + 3004) = 0x41A0000042700000;
    *(_OWORD *)(a1 + 2988) = xmmword_1A5F0CF60;
    if (*(_DWORD *)(a1 + 3800) == 5)
    {
      float v2 = flt_1A5F0CE60[*(unsigned char *)(a1 + 3808) == 0];
    }
    else
    {
      float v2 = 0.86;
      if ((*(_DWORD *)(a1 + 3804) - 3) >= 2) {
        float v2 = 1.0;
      }
    }
    *(float *)(a1 + 3048) = v2;
    *(float *)(a1 + 3052) = v2;
    *(_DWORD *)(a1 + 2972) = 1102577664;
    *(_OWORD *)(a1 + 2940) = xmmword_1A5F0CF70;
    *(_OWORD *)(a1 + 2956) = xmmword_1A5F0CF80;
    *(void *)(a1 + 3040) = 4735535009300480000;
    float result = 5.76460878e17;
    *(_OWORD *)(a1 + 3024) = xmmword_1A5F0CF90;
  }
  return result;
}

- (void)_setISPZoomFactorSynchronously:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 2768);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2768));
    *(_DWORD *)(a1 + 2760) = 0;
    *(float *)(a1 + 2756) = a2;
    *(float *)(a1 + 2764) = a2;
    os_unfair_lock_unlock(v4);
    -[BWFigVideoCaptureDevice _setNewISPZoomFactorOnStream](a1);
  }
}

- (void)setPreviewShiftInSensorSpace:(double)a3
{
  if (a1)
  {
    uint64_t v6 = (os_unfair_lock_s *)(a1 + 3676);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3676));
    *(double *)(a1 + 3680) = a2;
    *(double *)(a1 + 3688) = a3;
    os_unfair_lock_unlock(v6);
  }
}

- (void)_updateStreamingForegroundSegmentationNetworkUsingStage:(void *)result
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (!result[182]) {
      a2 = 1;
    }
    long long v10 = 0u;
    long long v11 = 0u;
    if (a2) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = 2;
    }
    long long v12 = 0uLL;
    long long v13 = 0uLL;
    uint64_t v4 = objc_msgSend(result, "captureStreams", (void)v10);
    float result = (void *)[v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (result)
    {
      BOOL v5 = result;
      uint64_t v6 = *(void *)v11;
      uint64_t v7 = *MEMORY[0x1E4F54BD8];
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v4);
          }
          float v9 = (void *)[*(id *)(*((void *)&v10 + 1) + 8 * (void)v8) stream];
          objc_msgSend(v9, "setPropertyIfSupported:value:", v7, objc_msgSend(NSNumber, "numberWithInt:", v3));
          uint64_t v8 = (void *)((char *)v8 + 1);
        }
        while (v5 != v8);
        float result = (void *)[v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
        BOOL v5 = result;
      }
      while (result);
    }
  }
  return result;
}

- (uint64_t)_updateUltraHighResSensorRawPool
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 132))
    {
      if (*(unsigned char *)(result + 148))
      {
        FigDebugAssert3();
      }
      else
      {
        float v2 = (os_unfair_lock_s *)(result + 136);
        os_unfair_lock_lock((os_unfair_lock_t)(result + 136));
        id v3 = *(id *)(v1 + 152);
        if (!v3)
        {
          id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          *(void *)(v1 + 152) = v3;
        }
        uint64_t v4 = [v3 objectForKeyedSubscript:&unk_1EFB015C8];
        if (v4)
        {
          BOOL v5 = (void *)v4;
          uint64_t v6 = *(unsigned int *)(v1 + 168);
          if (dword_1EB4C4FF0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v5, "flushToMinimumCapacity:", v6, v17, v18);
          [v5 setCapacity:v6];
        }
        else
        {
          uint64_t v8 = [(id)v1 sensorRawPoolRequirements];
          if (!v8) {
            return 4294954516;
          }
          float v9 = (void *)v8;
          long long v10 = objc_alloc_init(BWVideoFormatRequirements);
          [(BWVideoFormatRequirements *)v10 setWidth:*(int *)(v1 + 140)];
          [(BWVideoFormatRequirements *)v10 setHeight:*(int *)(v1 + 144)];
          -[BWVideoFormatRequirements setBytesPerRowAlignment:](v10, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F24C98]), "intValue"));
          -[BWVideoFormatRequirements setPlaneAlignment:](v10, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D78]), "intValue"));
          [(BWVideoFormatRequirements *)v10 setHeightAlignment:16];
          v20[0] = [v9 objectForKeyedSubscript:*MEMORY[0x1E4F24D70]];
          -[BWVideoFormatRequirements setSupportedPixelFormats:](v10, "setSupportedPixelFormats:", [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1]);
          [(BWVideoFormatRequirements *)v10 setSupportedCacheModes:+[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess]];
          if (![(NSArray *)[(BWVideoFormatRequirements *)v10 supportedPixelFormats] count])return 4294954516; {
          int v19 = v10;
          }
          id v11 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v19 count:1]);
          if (!v11) {
            return 4294954516;
          }
          id v12 = v11;
          uint64_t v13 = *(unsigned int *)(v1 + 168);
          if (dword_1EB4C4FF0)
          {
            long long v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v15 = [BWPixelBufferPool alloc];
          long long v16 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v15, "initWithVideoFormat:capacity:name:memoryPool:", v12, v13, [NSString stringWithFormat:@"%@_UltraHighResolutionSensorRawBufferPool", BWStringFromCaptureDeviceType(*(_DWORD *)(v1 + 484))], *(void *)(v1 + 3632));
          [*(id *)(v1 + 152) setObject:v16 forKeyedSubscript:&unk_1EFB015C8];
        }
        os_unfair_lock_unlock(v2);
      }
    }
    return 0;
  }
  return result;
}

- (BOOL)ultraHighResolutionZeroShutterLagSupportEnabled
{
  return BYTE5(self->_mostRecentSmartCameraResult);
}

- (void)setGlobalToneMappingEnabledOverride:(id)a3
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  if (self->_globalToneMappingEnabledOverride != a3 && (objc_msgSend(a3, "isEqual:") & 1) == 0)
  {

    self->_globalToneMappingEnabledOverride = (NSNumber *)a3;
    -[BWFigVideoCaptureDevice _updateGlobalToneMappingEnabled]((uint64_t)self);
  }
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (OpaqueCMClock)clock
{
  return self->_clock;
}

- (void)setZoomPIPSuspended:(BOOL)a3
{
  LOBYTE(self->_depthPixelFormat) = a3;
}

- (int)depthDataBaseRotation
{
  if (self->_pearlInfraredCaptureStream) {
    return 90;
  }
  else {
    return 0;
  }
}

- ($2825F4736939C4A6D3AD43837233062D)ultraHighResSensorRawPoolDimensions
{
  return ($2825F4736939C4A6D3AD43837233062D)self->_ultraHighResSensorRawPoolDimensions;
}

- (void)updateClientAuditToken:(id *)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  p_clientAuditTokenLocuint64_t k = &self->_clientAuditTokenLock;
  os_unfair_lock_lock(&self->_clientAuditTokenLock);
  long long v6 = *(_OWORD *)&a3->var0[4];
  *(_OWORD *)self->_clientAuditToken.val = *(_OWORD *)a3->var0;
  *(_OWORD *)&self->_clientAuditToken.val[4] = v6;
  long long v7 = *(_OWORD *)&a3->var0[4];
  long long v20 = *(_OWORD *)a3->var0;
  long long v21 = v7;
  self->_clientPID = FigCaptureGetPIDFromAuditToken(&v20);
  long long v8 = *(_OWORD *)&a3->var0[4];
  long long v20 = *(_OWORD *)a3->var0;
  long long v21 = v8;
  self->_isRunningInXCTest = FigCaptureClientIsRunningInXCTest(&v20) != 0;
  os_unfair_lock_unlock(p_clientAuditTokenLock);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v10 = [(NSArray *)captureStreams countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v17;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(captureStreams);
        }
        long long v14 = *(void **)(*((void *)&v16 + 1) + 8 * v13);
        long long v15 = *(_OWORD *)&a3->var0[4];
        long long v20 = *(_OWORD *)a3->var0;
        long long v21 = v15;
        [v14 updateClientAuditToken:&v20];
        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [(NSArray *)captureStreams countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v11);
  }
}

- (BOOL)sensorRawPoolEnabled
{
  return self->_sensorRawPoolEnabled;
}

- (BOOL)shallowDepthOfFieldEffectEnabled
{
  return self->_shallowDepthOfFieldEffectEnabled;
}

- (void)setPreviewVideoDepthNodeUnprepared:(BOOL)a3
{
  LOBYTE(self->_zoomPIPMinimumUIZoomFactor) = a3;
}

- (void)setOverCaptureSuperWideMacroActive:(BOOL)a3
{
  LOBYTE(self->_previewShiftInSensorSpace.x) = a3;
}

- (void)captureStream:(id)a3 willEmitVideoSampleBuffer:(opaqueCMSampleBuffer *)a4 drivesCameraControls:(BOOL)a5
{
  BOOL v5 = a5;
  v22[2] = *MEMORY[0x1E4F143B8];
  -[BWFigVideoCaptureDevice _addStateInvariantAttachmentsToVideoSamplebuffer:captureStream:]((uint64_t)self, a4);
  if (v5)
  {
    -[BWFigVideoCaptureDevice _serviceAutoImageControlModeWithSampleBuffer:fromCaptureStream:]((uint64_t)self, a4);
    float v9 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    manualCinematicFramingDelegate = self->_manualCinematicFramingDelegate;
    if (manualCinematicFramingDelegate)
    {
      if (-[FigWeakReference containsObject:](manualCinematicFramingDelegate, "containsObject:", [a3 portType]))
      {
        objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F54230]), "floatValue");
        float v12 = roundf(v11 * 10.0) / 10.0;
        objc_msgSend((id)objc_msgSend(*(id *)&self->_manualCinematicFramingActive, "objectForKeyedSubscript:", objc_msgSend(a3, "portType")), "floatValue");
        if (v12 != *(float *)&v13)
        {
          *(float *)&double v13 = v12;
          uint64_t v14 = [NSNumber numberWithFloat:v13];
          objc_msgSend(*(id *)&self->_manualCinematicFramingActive, "setObject:forKeyedSubscript:", v14, objc_msgSend(a3, "portType"));
          v21[0] = @"PortType";
          v21[1] = @"NewPropertyValue";
          v22[0] = [a3 portType];
          v22[1] = v14;
          -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"ImageSensorTemperatureChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:2]);
        }
      }
    }
    long long v15 = (void *)[v9 objectForKeyedSubscript:*MEMORY[0x1E4F542E0]];
    if (!v15 || [v15 BOOLValue])
    {
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&v20, a4);
      if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
      {
        os_unfair_lock_lock(&self->_bravoMasterLock);
        p_mostRecentPTS = &self->_mostRecentPTS;
        if ((self->_mostRecentPTS.flags & 1) == 0
          || (CMTime time1 = v20,
              *(_OWORD *)&v18.value = *(_OWORD *)&p_mostRecentPTS->value,
              v18.epoch = self->_mostRecentPTS.epoch,
              CMTimeCompare(&time1, &v18) >= 1))
        {
          *(_OWORD *)&p_mostRecentPTS->value = *(_OWORD *)&v20.value;
          self->_mostRecentPTS.epoch = v20.epoch;
          -[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]((unint64_t)self, a4, a3);
        }
        os_unfair_lock_unlock(&self->_bravoMasterLock);
      }
      else
      {
        long long v17 = &self->_mostRecentPTS;
        if ((self->_mostRecentPTS.flags & 1) == 0
          || (CMTime time1 = v20,
              *(_OWORD *)&v18.value = *(_OWORD *)&v17->value,
              v18.epoch = self->_mostRecentPTS.epoch,
              CMTimeCompare(&time1, &v18) >= 1))
        {
          *(_OWORD *)&v17->value = *(_OWORD *)&v20.value;
          self->_mostRecentPTS.epoch = v20.epoch;
        }
        -[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]((unint64_t)self, a4, a3);
      }
    }
  }
  -[BWFigVideoCaptureDevice _addStateAttachmentsToVideoSampleBuffer:captureStream:]((uint64_t)self, a4);
  -[BWFigVideoCaptureDevice _addValidationAndCoreRepairStatusesToSampleBuffer:]((uint64_t)self, a4);
}

- (uint64_t)_addValidationAndCoreRepairStatusesToSampleBuffer:(uint64_t)result
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = (void *)FigCaptureDeviceIORegValuesByKeys();
  BOOL v5 = (void *)FigCaptureDeviceCoreRepairStatusesByKeys();
  long long v6 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v7 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  int v8 = *(_DWORD *)(v3 + 512);
  if (v8 == 2)
  {
    float v9 = &kFigCaptureDeviceCoreRepairStatusKey_FrontCameraAssembly;
    uint64_t v10 = kFigCaptureDeviceIORegKey_FCClValidationStatus;
    goto LABEL_6;
  }
  if (v8 == 1)
  {
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v4, "objectForKeyedSubscript:", 0x1EFA76E20), 0x1EFA76E20);
    float v9 = kFigCaptureDeviceCoreRepairStatusKey_RearCameraAssembly;
    uint64_t v10 = kFigCaptureDeviceIORegKey_CmPMValidationStatus;
LABEL_6:
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v4, "objectForKeyedSubscript:", *v10), *v10);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(v5, "objectForKeyedSubscript:", *v9), *v9);
  }
  float v11 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  [v11 setObject:v6 forKeyedSubscript:*MEMORY[0x1E4F53200]];
  uint64_t v12 = *MEMORY[0x1E4F53238];
  return [v11 setObject:v7 forKeyedSubscript:v12];
}

- (void)_serviceAutoImageControlModeWithSampleBuffer:(uint64_t)a1 fromCaptureStream:(void *)target
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    BOOL v5 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F542E0]];
    int v6 = [v5 BOOLValue];
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      if (*(unsigned char *)(a1 + 1828))
      {
        int v8 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F54280]];
        if (([v8 isEqualToString:*MEMORY[0x1E4F54E60]] & 1) == 0)
        {
          float v9 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          uint64_t v10 = *(void **)(a1 + 552);
          uint64_t v11 = [v10 countByEnumeratingWithState:&v29 objects:v34 count:16];
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = *(void *)v30;
            do
            {
              for (uint64_t i = 0; i != v12; ++i)
              {
                if (*(void *)v30 != v13) {
                  objc_enumerationMutation(v10);
                }
                long long v15 = *(void **)(*((void *)&v29 + 1) + 8 * i);
                [v15 setSphereVideoEnabled:1];
                objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(v15, "currentSphereMode"), objc_msgSend(v15, "portType"));
              }
              uint64_t v12 = [v10 countByEnumeratingWithState:&v29 objects:v34 count:16];
            }
            while (v12);
          }
          *(unsigned char *)(a1 + 1828) = 0;
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1840));
          [*(id *)(a1 + 1848) setExpectedSphereModesByPortType:v9];
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1840));
        }
      }
    }
    if ([(id)a1 isBravoVariant]) {
      long long v16 = (void *)[(id)a1 masterCaptureStream];
    }
    else {
      long long v16 = *(void **)(a1 + 496);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1840));
    if (!*(void *)(a1 + 1848)) {
      goto LABEL_32;
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v17 = *(void **)(a1 + 552);
    uint64_t v18 = [v17 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v26;
LABEL_22:
      uint64_t v21 = 0;
      while (1)
      {
        if (*(void *)v26 != v20) {
          objc_enumerationMutation(v17);
        }
        float v22 = *(void **)(*((void *)&v25 + 1) + 8 * v21);
        if ([v22 streamingRequiredWhenConfiguredAsSlave]) {
          break;
        }
        if (v19 == ++v21)
        {
          uint64_t v19 = [v17 countByEnumeratingWithState:&v25 objects:v33 count:16];
          if (v19) {
            goto LABEL_22;
          }
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      float v22 = 0;
    }
    if (objc_msgSend(*(id *)(a1 + 1848), "isTransitionCompleteWithSampleBuffer:masterCaptureStreamPortType:activeSlaveStreamPortType:", target, objc_msgSend(v16, "portType"), objc_msgSend(v22, "portType")))
    {
      uint64_t v23 = *(void (***)(void, void, void))(a1 + 1856);
      *(void *)(a1 + 1856) = 0;

      *(void *)(a1 + 1848) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1840));
      if (v23)
      {
        CMSampleBufferGetPresentationTimeStamp(&v24, (CMSampleBufferRef)target);
        ((void (**)(void, uint64_t, CMTime *))v23)[2](v23, 1, &v24);
      }
    }
    else
    {
LABEL_32:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1840));
    }
  }
}

- (void)_addStateInvariantAttachmentsToVideoSamplebuffer:(uint64_t)a1 captureStream:(const void *)a2
{
  if (a1)
  {
    if ((-[BWFigVideoCaptureDevice _addExifMetadata:fromTimeMachine:](a1, a2, 0),
          CMSetAttachment(a2, @"CaptureDeviceType", (CFTypeRef)[NSNumber numberWithInt:*(unsigned int *)(a1 + 484)], 1u), *(unsigned char *)(a1 + 1464))&& *(float *)(a1 + 1468) == 0.0|| *(unsigned char *)(a1 + 4044))
    {
      uint64_t v4 = (const void *)MEMORY[0x1E4F1CC38];
      CMSetAttachment(a2, @"DepthDisabled", v4, 1u);
    }
  }
}

- (void)pointCloudCaptureDevice:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F53DA0]), "floatValue");
  float v6 = v5;
  os_unfair_lock_lock(&self->_supplementalPointCloudCaptureDeviceLock);
  self->_supplementalPointCloudCaptureDeviceCurrentFrameRate = v6;
  os_unfair_lock_unlock(&self->_supplementalPointCloudCaptureDeviceLock);
}

- (void)captureStream:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  id v6 = [(FigWeakReference *)self->_supplementalPointCloudCaptureDeviceDelegate referencedObject];
  [v6 pointCloudCaptureDevice:self willEmitPointCloudSampleBuffer:a4];
}

- (uint64_t)_ubHighResolutionNondisruptiveSwitchingFormatIndexForCaptureStream:(uint64_t)result
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)[a2 supportedFormats];
    if ([v4 count])
    {
      float v5 = objc_msgSend(v4, "objectAtIndexedSubscript:", (int)objc_msgSend(a2, "activeFormatIndex"));
      id v6 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F55310]];
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id obj = v6;
      uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v17;
        uint64_t v10 = *MEMORY[0x1E4F55300];
        uint64_t v11 = *MEMORY[0x1E4F552F8];
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v17 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
            uint64_t v14 = objc_msgSend(v4, "objectAtIndexedSubscript:", (int)objc_msgSend(v13, "intValue"));
            if (FigCaptureVideoDimensionsAreEqual(objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", v10), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", v11), "intValue") << 32), *(void *)(v3 + 140)))
            {
              return [v13 intValue];
            }
          }
          uint64_t v8 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

- (uint64_t)_ubUpdateSIFREnabled
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 1984))
    {
      int v2 = *(unsigned __int8 *)(result + 1990);
      *(unsigned char *)(result + 1991) = v2;
      if (v2)
      {
        long long v14 = 0u;
        long long v15 = 0u;
        long long v12 = 0u;
        long long v13 = 0u;
        uint64_t v3 = *(void **)(result + 552);
        float result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (result)
        {
          uint64_t v4 = result;
          uint64_t v5 = *(void *)v13;
          uint64_t v6 = *MEMORY[0x1E4F52E00];
          uint64_t v7 = *MEMORY[0x1E4F552D8];
          do
          {
            uint64_t v8 = 0;
            do
            {
              if (*(void *)v13 != v5) {
                objc_enumerationMutation(v3);
              }
              uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * v8);
              if ((objc_msgSend((id)objc_msgSend(v9, "portType"), "isEqualToString:", v6) & 1) == 0
                && ([v9 activeFormatIndex] & 0x80000000) == 0)
              {
                uint64_t v10 = objc_msgSend((id)objc_msgSend(v9, "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(v9, "activeFormatIndex"));
                if (*(unsigned char *)(v1 + 1991)) {
                  char v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v7), "BOOLValue");
                }
                else {
                  char v11 = 0;
                }
                *(unsigned char *)(v1 + 1991) = v11;
              }
              ++v8;
            }
            while (v4 != v8);
            float result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
            uint64_t v4 = result;
          }
          while (result);
        }
      }
    }
    else
    {
      *(unsigned char *)(result + 1991) = 0;
    }
  }
  return result;
}

- (void)captureStreamDidChangeActiveFormatIndex:(id)a3
{
  -[NSMutableDictionary setObject:forKeyedSubscript:](self->_cameraInfoByPortType, "setObject:forKeyedSubscript:", 0, [a3 portType]);
  -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
}

- (BOOL)depthDataDeliveryEnabled
{
  return self->_depthDataDeliveryEnabled;
}

- (BWFigVideoCaptureDevice)supplementalPointCloudCaptureDevice
{
  return (BWFigVideoCaptureDevice *)[(FigWeakReference *)self->_supplementalPointCloudCaptureDevice referencedObject];
}

- (void)_updateStateUsingVideoSampleBuffer:(void *)a3 fromCaptureStream:
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v4 = (void *)target;
  uint64_t v6 = (unsigned char *)(a1 + 4272);
  CFStringRef v184 = (const __CFString *)*MEMORY[0x1E4F53070];
  float v187 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (*v6 && v6[1]) {
    *(void *)&double v7 = -[BWFigVideoCaptureDevice _accumulateInvalidFramesForAnalytics:](a1, objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FF0]), "BOOLValue")).n128_u64[0];
  }
  if (!*(unsigned char *)(a1 + 3864)) {
    goto LABEL_19;
  }
  double v8 = [(BWFigVideoCaptureDevice *)a1 _accumulateTimeOfFLightStreamingTime:v7];
  if (!*(unsigned char *)(a1 + 3864) || (*(unsigned char *)(a1 + 172) & 4) != 0) {
    goto LABEL_19;
  }
  uint64_t v9 = *MEMORY[0x1E4F54020];
  if (objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", *MEMORY[0x1E4F54020], v8), "intValue") != 7)
  {
    uint64_t v10 = (void *)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F54300]];
    if (!v10) {
      goto LABEL_19;
    }
    char v11 = v10;
    long long v214 = 0u;
    long long v215 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    uint64_t v12 = [v10 countByEnumeratingWithState:&v212 objects:v226 count:16];
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v213;
LABEL_13:
    uint64_t v15 = 0;
    while (1)
    {
      if (*(void *)v213 != v14) {
        objc_enumerationMutation(v11);
      }
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *(void *)(*((void *)&v212 + 1) + 8 * v15)), "objectForKeyedSubscript:", v9), "intValue") == 7)break; {
      if (v13 == ++v15)
      }
      {
        uint64_t v13 = [v11 countByEnumeratingWithState:&v212 objects:v226 count:16];
        if (v13) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
  }
  *(int8x8_t *)(a1 + 172) = vorr_s8(*(int8x8_t *)(a1 + 172), (int8x8_t)0x2000000004);
LABEL_19:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  int v174 = [*(id *)(a1 + 2544) currentState];
  if ([*(id *)(a1 + 2544) currentState] == 8 || *(unsigned char *)(a1 + 2258))
  {
    if (*(unsigned char *)(a1 + 2592))
    {
      uint64_t v182 = 1;
      int v16 = 1;
    }
    else
    {
      int v16 = 1;
      LODWORD(v182) = *(unsigned char *)(a1 + 2593) != 0;
      HIDWORD(v182) = v182;
    }
  }
  else
  {
    uint64_t v182 = 0;
    int v16 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
  uint64_t v17 = *(void **)(a1 + 3064);
  uint64_t v188 = a3;
  v173 = (os_unfair_lock_s *)(a1 + 1280);
  if (!v17) {
    goto LABEL_30;
  }
  [v17 processSampleBuffer:v4];
  memset(&v219, 0, sizeof(v219));
  CMSampleBufferGetPresentationTimeStamp(&v219, (CMSampleBufferRef)v4);
  long long v18 = (_OWORD *)(a1 + 3076);
  if ((*(unsigned char *)(a1 + 3088) & 1) == 0) {
    goto LABEL_27;
  }
  memset(time1, 0, 24);
  CMTime lhs = v219;
  *(_OWORD *)&rhs.unsigned int value = *v18;
  rhs.epoch = *(void *)(a1 + 3092);
  CMTimeSubtract((CMTime *)time1, &lhs, &rhs);
  CMTime lhs = *(CMTime *)time1;
  if (CMTimeGetSeconds(&lhs) < *(float *)(a1 + 3100))
  {
LABEL_30:
    char v19 = 0;
    goto LABEL_31;
  }
  if (!v16 || *(unsigned char *)(a1 + 3104))
  {
    *(unsigned char *)(a1 + 3072) = [*(id *)(a1 + 3064) isStationary];
    if (*(unsigned char *)(a1 + 3204)
      && (long long v210 = 0u,
          long long v211 = 0u,
          long long v208 = 0u,
          long long v209 = 0u,
          uint64_t v39 = *(void **)(a1 + 552),
          (uint64_t v40 = [v39 countByEnumeratingWithState:&v208 objects:v224 count:16]) != 0))
    {
      uint64_t v41 = v40;
      uint64_t v42 = v4;
      uint64_t v43 = *(void *)v209;
      do
      {
        for (uint64_t i = 0; i != v41; ++i)
        {
          if (*(void *)v209 != v43) {
            objc_enumerationMutation(v39);
          }
          [*(id *)(*((void *)&v208 + 1) + 8 * i) setIsStationary:*(unsigned __int8 *)(a1 + 3072)];
        }
        uint64_t v41 = [v39 countByEnumeratingWithState:&v208 objects:v224 count:16];
      }
      while (v41);
      char v19 = 1;
      uint64_t v4 = v42;
      a3 = v188;
    }
    else
    {
      char v19 = 1;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v19 = 0;
LABEL_28:
  *long long v18 = *(_OWORD *)&v219.value;
  *(void *)(a1 + 3092) = v219.epoch;
LABEL_31:
  int v186 = v16;
  if (*(void *)(a1 + 2008) && [*(id *)(a1 + 1952) frameCount])
  {
    char v180 = v19;
    if (!*(unsigned char *)(a1 + 2016))
    {
      if ((unint64_t)[*(id *)(a1 + 552) count] >= 2
        && (*(unsigned char *)(a1 + 1464) || *(unsigned char *)(a1 + 209)))
      {
        BOOL v178 = v4;
        if ((unint64_t)[*(id *)(a1 + 1952) frameCount] <= 1) {
          [*(id *)(a1 + 2024) removeAllObjects];
        }
        uint64_t v20 = (void *)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F54300]];
        long long v204 = 0u;
        long long v205 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        uint64_t v21 = *(void **)(a1 + 112);
        uint64_t v22 = [v21 countByEnumeratingWithState:&v204 objects:v223 count:16];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = *(void *)v205;
          uint64_t v25 = *MEMORY[0x1E4F541B0];
          do
          {
            for (uint64_t j = 0; j != v23; ++j)
            {
              if (*(void *)v205 != v24) {
                objc_enumerationMutation(v21);
              }
              long long v27 = *(void **)(*((void *)&v204 + 1) + 8 * j);
              if ((objc_msgSend(v27, "isEqualToString:", objc_msgSend(v188, "portType")) & 1) == 0)
              {
                uint64_t v28 = [v20 objectForKeyedSubscript:v27];
                if (v28)
                {
                  if (!*(unsigned char *)(a1 + 1991)
                    || (long long v29 = (void *)v28, ![v187 objectForKeyedSubscript:v25])
                    || [v29 objectForKeyedSubscript:v25]
                    || *(void *)(a1 + 1456))
                  {
                    long long v30 = (void *)[*(id *)(a1 + 2024) objectForKeyedSubscript:v27];
                    if (!v30) {
                      long long v30 = &unk_1EFB015B0;
                    }
                    objc_msgSend(*(id *)(a1 + 2024), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v30, "intValue") - 1), v27);
                  }
                }
              }
            }
            uint64_t v23 = [v21 countByEnumeratingWithState:&v204 objects:v223 count:16];
          }
          while (v23);
        }
        long long v202 = 0u;
        long long v203 = 0u;
        long long v200 = 0u;
        long long v201 = 0u;
        long long v31 = *(void **)(a1 + 2024);
        uint64_t v32 = [v31 countByEnumeratingWithState:&v200 objects:v222 count:16];
        if (v32)
        {
          uint64_t v33 = v32;
          uint64_t v34 = 0;
          uint64_t v35 = *(void *)v201;
          a3 = v188;
          int v16 = v186;
          do
          {
            for (uint64_t k = 0; k != v33; ++k)
            {
              if (*(void *)v201 != v35) {
                objc_enumerationMutation(v31);
              }
              uint64_t v37 = *(void **)(*((void *)&v200 + 1) + 8 * k);
              if ((int)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2024), "objectForKeyedSubscript:", v37), "intValue") <= 0)
              {
                if (!v34) {
                  uint64_t v34 = (void *)[MEMORY[0x1E4F1CA48] array];
                }
                objc_msgSend(v34, "addObject:", BWPortTypeToDisplayString(v37, v38));
              }
            }
            uint64_t v33 = [v31 countByEnumeratingWithState:&v200 objects:v222 count:16];
          }
          while (v33);
        }
        else
        {
          uint64_t v34 = 0;
          a3 = v188;
          int v16 = v186;
        }
        if (*(unsigned char *)(a1 + 3640)) {
          unsigned int v45 = -[BWFigVideoCaptureDevice overCaptureActiveSlaveStreamForcedOff]((os_unfair_lock_s *)a1);
        }
        else {
          unsigned int v45 = 0;
        }
        uint64_t v4 = v178;
        if ([v34 count]) {
          int v46 = 1;
        }
        else {
          int v46 = v45;
        }
        *(unsigned char *)(a1 + 2016) = v46;
        if (v46 == 1 && dword_1EB4C4FF0)
        {
          LODWORD(lhs.value) = 0;
          LOBYTE(rhs.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int value = lhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value)) {
            unsigned int v49 = value;
          }
          else {
            unsigned int v49 = value & 0xFFFFFFFE;
          }
          if (v49)
          {
            int v50 = [*(id *)(a1 + 1952) frameCount];
            uint64_t v51 = [v34 componentsJoinedByString:@", "];
            *(_DWORD *)CMTime time1 = 136315906;
            *(void *)&time1[4] = "-[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]";
            *(_WORD *)&time1[12] = 1026;
            *(_DWORD *)&time1[14] = v50;
            *(_WORD *)&time1[18] = 2114;
            *(void *)&time1[20] = v51;
            *(_WORD *)&time1[28] = 1026;
            *(_DWORD *)&time1[30] = v45;
            LODWORD(v170) = 34;
            int v168 = time1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v16 = v186;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 2016) = 1;
      }
    }
    if (-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines]((os_unfair_lock_s *)a1)) {
      [*(id *)(a1 + 2008) reset];
    }
    char v19 = v180;
    if (*(unsigned char *)(a1 + 2016)) {
      [*(id *)(a1 + 2008) addMetadata:v187];
    }
  }
  uint64_t v52 = *(void *)(a1 + 1600);
  if (v52)
  {
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *(void (**)(uint64_t, void *))(v54 + 16);
    if (v55) {
      v55(v52, v4);
    }
    if (*(unsigned char *)(a1 + 3156))
    {
      v219.unsigned int value = 0;
      uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v57) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v59 = *(void (**)(uint64_t, uint64_t, void, CMTime *))(v58 + 48);
      if (v59) {
        v59(FigBaseObject, 0x1EFA5A4E0, *MEMORY[0x1E4F1CF80], &v219);
      }
      int v60 = objc_msgSend((id)v219.value, "intValue", v168, v170);
      if (!v219.value || v60 < 0 || v60 > 270) {
        goto LABEL_118;
      }
      int v61 = FigCaptureExifOrientationFromRotationDegreesAndMirroring(v60, 0);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3164));
      if (v61 != *(_DWORD *)(a1 + 3160)) {
        *(_DWORD *)(a1 + 3160) = v61;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3164));
      if (v61)
      {
        char v62 = 0;
      }
      else
      {
LABEL_118:
        if (_updateStateUsingVideoSampleBuffer_fromCaptureStream__sHasReportedInvalidOrientation)
        {
LABEL_121:

          goto LABEL_122;
        }
        char v62 = 1;
      }
      _updateStateUsingVideoSampleBuffer_fromCaptureStream__sHasReportedInvalidOrientatiouint64_t n = v62;
      goto LABEL_121;
    }
  }
LABEL_122:
  if (!*(_DWORD *)(a1 + 3348))
  {
    uint64_t v63 = *MEMORY[0x1E4F53D68];
    if ([v187 objectForKeyedSubscript:*MEMORY[0x1E4F53D68]]) {
      *(_DWORD *)(a1 + 3348) = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", v63), "intValue");
    }
  }
  if (!*(_DWORD *)(a1 + 3352))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3164));
    int v64 = *(_DWORD *)(a1 + 3160);
    if (v64) {
      *(_DWORD *)(a1 + 3352) = v64;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3164));
  }
  unsigned int v65 = objc_msgSend(*(id *)(a1 + 4152), "currentOrientation", v168) - 1;
  if (v65 > 5) {
    int v66 = 0;
  }
  else {
    int v66 = dword_1A5F0CFE4[v65];
  }
  if (v66 != *(_DWORD *)(a1 + 392))
  {
    uint64_t v67 = mach_absolute_time();
    -[BWFigVideoCaptureDevice _updateOrientationTotalTimes:](a1, v67);
    *(_DWORD *)(a1 + 392) = v66;
    *(void *)(a1 + 400) = v67;
  }
  uint64_t v68 = *(void **)(a1 + 1960);
  [*(id *)(a1 + 1952) copyTo:v68];
  if (v187 && v68) {
    [v68 updateWithFrameMetadata:v187 updateFocusDistance:v16 ^ 1u];
  }
  int v69 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BB8]), "BOOLValue");
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
  *(void *)(a1 + 1960) = *(void *)(a1 + 1952);
  *(void *)(a1 + 1952) = v68;
  int v176 = *(unsigned __int8 *)(a1 + 2431);
  *(unsigned char *)(a1 + 2431) = 0;
  int v70 = *(_DWORD *)(a1 + 2076);
  if ((v70 - 5) >= 3 && (*(_DWORD *)(a1 + 2080) - 5) > 2)
  {
    int v74 = 1;
    goto LABEL_154;
  }
  if (v19)
  {
    int v71 = *(_DWORD *)(a1 + 2124);
    if (!*(unsigned char *)(a1 + 3072) && v71 >= *(_DWORD *)(a1 + 2120) - 1) {
      int v71 = *(_DWORD *)(a1 + 2120) - 1;
    }
    int v72 = v71 & ~(v71 >> 31);
    *(_DWORD *)(a1 + 2120) = v72;
  }
  else
  {
    int v72 = *(_DWORD *)(a1 + 2120);
  }
  if (v72 < 1)
  {
    if (v70 == 7)
    {
      int v73 = 6;
      goto LABEL_151;
    }
LABEL_152:
    int v74 = 0;
    goto LABEL_154;
  }
  if (v70 != 6 && *(_DWORD *)(a1 + 2080) != 6) {
    goto LABEL_152;
  }
  int v73 = 7;
LABEL_151:
  int v74 = 0;
  *(_DWORD *)(a1 + 2080) = v73;
  *(unsigned char *)(a1 + 2075) = 1;
LABEL_154:
  int v181 = *(_DWORD *)(a1 + 2416);
  int v177 = *(_DWORD *)(a1 + 2424);
  int v179 = *(_DWORD *)(a1 + 2420);
  uint64_t v75 = *(unsigned int *)(a1 + 2184);
  locuint64_t k = (os_unfair_lock_s *)(a1 + 1948);
  if (v69 && *(_DWORD *)(a1 + 2080) == 3)
  {
    int v76 = 3;
LABEL_169:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
    goto LABEL_173;
  }
  int v76 = *(_DWORD *)(a1 + 2080);
  if ((v16 & v74 & 1) != 0 || !*(unsigned char *)(a1 + 2075)) {
    goto LABEL_169;
  }
  *(_DWORD *)(a1 + 2076) = v76;
  *(unsigned char *)(a1 + 2075) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
  unsigned int v77 = v76 - 5;
  *(unsigned char *)(a1 + 3104) = (v76 - 5) < 3;
  long long v78 = *(BWDeviceMotionActivityDetector **)(a1 + 3064);
  if (!v78 && v77 <= 2)
  {
    long long v78 = objc_alloc_init(BWDeviceMotionActivityDetector);
    *(void *)(a1 + 3064) = v78;
    uint64_t v79 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 3076) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 3092) = *(void *)(v79 + 16);
    goto LABEL_162;
  }
  if ((v70 - 5) < 3 || v77 <= 2)
  {
LABEL_162:
    if (*(_DWORD *)(a1 + 2128)) {
      BOOL v80 = v77 >= 3;
    }
    else {
      BOOL v80 = 1;
    }
    uint64_t v81 = !v80;
    [(BWDeviceMotionActivityDetector *)v78 setDirectionalMotionDetectionEnabled:v81];
  }
  uint64_t v82 = [v187 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  CGPoint v83 = *(NSObject **)(a1 + 1552);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke;
  block[3] = &unk_1E5C249A0;
  int v198 = v76;
  int v199 = v70;
  block[4] = a1;
  void block[5] = v82;
  dispatch_async(v83, block);
LABEL_173:
  if (*(unsigned char *)(a1 + 1646)) {
    -[BWFigVideoCaptureDevice _serviceDeferredAutofocusProcessorPropertiesFromCaptureStream:frameStatisticsByPortType:](a1, a3, v68);
  }
  if (*(unsigned char *)(a1 + 1464))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4048));
    [*(id *)(a1 + 4056) fudgedLowerBound];
    float v85 = v84;
    [*(id *)(a1 + 4056) fudgedUpperBound];
    float v87 = v86;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4048));
    BOOL v90 = v85 == 0.0
       || ([*(id *)(a1 + 2736) appliedZoomFactor], v88 < v85)
       || ([*(id *)(a1 + 2736) appliedZoomFactor], v87 < v89)
       || *(float *)(a1 + 1468) == 0.0
       || *(unsigned char *)(a1 + 4044) != 0;
    CMSetAttachment(v4, @"DepthDisabled", (CFTypeRef)[NSNumber numberWithBool:v90], 1u);
  }
  if (*(void *)(a1 + 1512))
  {
    char v91 = *(unsigned char *)(a1 + 1504) ? v16 : 1;
    if ((v91 & 1) == 0) {
      -[BWFigVideoCaptureDevice _serviceSDOFSceneMonitoringWithCaptureStream:sampleBuffer:frameStatisticsByPortType:flashModeForSceneMonitoring:hdrModeForSceneMonitoring:qualityPrioritizationForSceneMonitoring:streamingImageIntent:](a1, a3, v4, v68, v181, v179, v177);
    }
  }
  if (*(void *)(a1 + 1312))
  {
    if ((v16 & 1) == 0) {
      -[BWFigVideoCaptureDevice _serviceBravoStreamSelectionWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:streamingImageIntent:](a1, v4, v188, (uint64_t)v68, v76);
    }
    if (!CMGetAttachment(v4, @"RecommendedMasterPortType", 0))
    {
      CMSetAttachment(v4, @"RecommendedMasterPortType", (CFTypeRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1312), "recommendedMasterStream"), "portType"), 1u);
      CMSetAttachment(v4, @"PreferredMasterPortType", (CFTypeRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1312), "preferredMasterStreamIgnoringEligibleFallbackPortTypes"), "portType"), 1u);
      CMSetAttachment(v4, @"LastRecommendedMasterSelectionReason", (CFTypeRef)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 1312), "lastSelectionReason")), 1u);
    }
  }
  int v92 = v16 ^ 1;
  int v93 = v188;
  if ((v182 | v92) == 1) {
    -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:streamingImageIntent:](a1, v4, v188, v68, v76);
  }
  [v188 previewShift];
  objc_msgSend((id)a1, "captureStream:didUpdatePreviewShift:", v188);
  if (HIDWORD(v182)) {
    [(id)a1 _resetStillImageCaptureRequestState];
  }
  -[BWFigVideoCaptureDevice _servicePendingStillImageCapture](a1);
  CFStringRef v94 = v184;
  if (*(void *)(a1 + 1456)) {
    [*(id *)(a1 + 544) setMasterStream:*(void *)(a1 + 496) allStreams:*(void *)(a1 + 552)];
  }
  if (*(unsigned char *)(a1 + 1442)) {
    -[BWFigVideoCaptureDevice _serviceMacroFocusDetectionWithFrameStatisticsByPortType:](a1, v68);
  }
  if (*(void *)(a1 + 3704)) {
    -[BWFigVideoCaptureDevice _serviceVariableFrameRateWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:](a1, (uint64_t)v4, v188, v68);
  }
  if (v70 == 8
    && objc_msgSend(*(id *)(a1 + 3816), "detectFlickerWithSampleBuffer:fromCaptureStreamWithPortType:", v4, objc_msgSend(v188, "portType")))
  {
    int v95 = [*(id *)(a1 + 3816) flickerFrequency];
    float v96 = *(NSObject **)(a1 + 1552);
    v195[0] = MEMORY[0x1E4F143A8];
    v195[1] = 3221225472;
    v195[2] = __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke_2;
    v195[3] = &unk_1E5C262A0;
    v195[4] = a1;
    int v196 = v95;
    dispatch_async(v96, v195);
  }
  -[BWFigVideoCaptureDevice _servicePropertyChangeNotifications:](a1, v4);
  if (!v4)
  {
    FigDebugAssert3();
    uint64_t v170 = v171;
    CFStringRef v94 = v184;
    LODWORD(v169) = 0;
    int v93 = v188;
LABEL_359:
    FigDebugAssert3();
    goto LABEL_236;
  }
  CFDictionaryRef v97 = (const __CFDictionary *)CMGetAttachment(v4, v184, 0);
  if (v97)
  {
    CFDictionaryRef v98 = v97;
    CFNumberRef v99 = (const __CFNumber *)CFDictionaryGetValue(v97, (const void *)*MEMORY[0x1E4F53BC8]);
    if (v99)
    {
      LODWORD(valuePtr[0]) = 0;
      LODWORD(v227[0]) = 0;
      CFNumberGetValue(v99, kCFNumberSInt32Type, valuePtr);
      CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(v98, (const void *)*MEMORY[0x1E4F53BB0]);
      if (v100)
      {
        CFNumberGetValue(v100, kCFNumberSInt32Type, v227);
        BOOL v101 = LODWORD(v227[0]) != 0;
      }
      else
      {
        BOOL v101 = 0;
      }
      if (LODWORD(valuePtr[0])) {
        uint64_t v102 = 1;
      }
      else {
        uint64_t v102 = v101;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 1592));
      if (*(unsigned char *)(a1 + 1608))
      {
        if (*(_DWORD *)(a1 + 1636))
        {
          if (*(unsigned char *)(a1 + 1624))
          {
            memset(&v219, 0, sizeof(v219));
            CMSampleBufferGetPresentationTimeStamp(&v219, (CMSampleBufferRef)v4);
            *(CMTime *)CMTime time1 = v219;
            CMTime lhs = *(CMTime *)(a1 + 1612);
            if (CMTimeCompare((CMTime *)time1, &lhs) >= 1 && *(unsigned __int8 *)(a1 + 1609) == v102)
            {
              int v103 = *(_DWORD *)(a1 + 1640);
              if (v103 < 3)
              {
                *(_DWORD *)(a1 + 1640) = v103 + 1;
              }
              else
              {
                uint64_t v102 = v102 ^ 1;
                uint64_t v104 = MEMORY[0x1E4F1F9F8];
                *(_OWORD *)(a1 + 1612) = *MEMORY[0x1E4F1F9F8];
                *(void *)(a1 + 1628) = *(void *)(v104 + 16);
              }
            }
          }
        }
        if (v102 != *(unsigned __int8 *)(a1 + 1609))
        {
          int v105 = *(_DWORD *)(a1 + 1636);
          if (v105)
          {
            int v106 = v105 - 1;
            *(_DWORD *)(a1 + 1636) = v106;
            if (!v106)
            {
              uint64_t v107 = MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(a1 + 1612) = *MEMORY[0x1E4F1F9F8];
              *(void *)(a1 + 1628) = *(void *)(v107 + 16);
            }
          }
          *(unsigned char *)(a1 + 1609) = v102;
          v229[0] = @"NewPropertyValue";
          rhs.unsigned int value = [NSNumber numberWithBool:v102];
          objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"AEStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &rhs, v229, 1));
        }
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 1592));
    }
  }
  else
  {
    uint64_t v170 = v171;
    LODWORD(v169) = 0;
    FigDebugAssert3();
  }
  CFDictionaryRef v108 = (const __CFDictionary *)CMGetAttachment(v4, v184, 0);
  if (!v108)
  {
    uint64_t v170 = v171;
    LODWORD(v169) = 0;
    goto LABEL_359;
  }
  CFNumberRef v109 = (const __CFNumber *)CFDictionaryGetValue(v108, (const void *)*MEMORY[0x1E4F53C98]);
  if (v109)
  {
    LODWORD(lhs.value) = 0;
    CFNumberGetValue(v109, kCFNumberSInt32Type, &lhs);
    int v110 = lhs.value;
    int v111 = LODWORD(lhs.value) != 0;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 1592));
    if (*(unsigned char *)(a1 + 1644) && *(unsigned __int8 *)(a1 + 1645) != v111)
    {
      *(unsigned char *)(a1 + 1645) = v111;
      *(void *)CMTime time1 = @"NewPropertyValue";
      v219.unsigned int value = objc_msgSend(NSNumber, "numberWithBool:", v110 != 0, v169, v170);
      objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"AWBStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v219, time1, 1));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 1592));
  }
LABEL_236:
  -[BWFigVideoCaptureDevice _serviceCompletedRequestNotifications:](a1, v4);
  BOOL v112 = (void *)MEMORY[0x1E4F53DC8];
  if (!*(unsigned char *)(a1 + 2432))
  {
    uint64_t v132 = 0;
    char v115 = v186;
    goto LABEL_276;
  }
  uint64_t v113 = objc_msgSend((id)CMGetAttachment(v4, v94, 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F53DC8]);
  unint64_t v216 = 0;
  if (*(int *)(a1 + 2436) < 3) {
    int v114 = 1;
  }
  else {
    int v114 = v92;
  }
  char v115 = v186;
  int v116 = v176;
  if (v176 || v114)
  {
    v172 = (void *)v113;
    int v117 = -[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](a1, v93, v68, v181, v179, v177, v75, (uint64_t *)&v216);
    int v118 = v117 == 2;
    int v183 = v117 == 3;
    int v185 = v117 == 1;
    memset(&lhs, 0, sizeof(lhs));
    if (v75)
    {
      BOOL v119 = (os_unfair_lock_s *)(a1 + 1948);
      if (objc_msgSend(*(id *)(a1 + 2160), "containsObject:", objc_msgSend(v93, "portType")))
      {
        os_unfair_lock_lock(lock);
        uint64_t v75 = *(unsigned int *)(a1 + 2188);
        id v120 = (id)objc_msgSend(*(id *)(a1 + 2248), "objectForKeyedSubscript:", objc_msgSend(v93, "portType"));
        if (v120)
        {
          id v121 = v120;
          os_unfair_lock_unlock(lock);
LABEL_246:
          int v118 = v117 == 2;
          if ((v216 & 0x4000) != 0)
          {
            uint64_t v75 = 0;
          }
          else
          {
            if ((~v216 & 0x40040) != 0) {
              uint64_t v75 = -[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v216, v181);
            }
            if ((int)v75 >= 1)
            {
              uint64_t v122 = objc_msgSend(v68, "objectForKeyedSubscript:", objc_msgSend(v93, "portType"));
              unint64_t v123 = v216;
              [v122 finalCropRect];
              int v128 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:](a1, v172, v124, v125, v126, v127);
              uint64_t v129 = 1;
              uint64_t v130 = (v123 >> 13) & 1;
              do
              {
                objc_msgSend(v121, "totalIntegrationTimeForDigitalFlashMode:frameStatistics:stationary:detectedObjects:", v129, v122, v130, v128, v169, v170);
                *(&lhs.value + v129++) = v131;
              }
              while (v129 != 3);
              int v93 = v188;
              char v115 = v186;
              BOOL v119 = (os_unfair_lock_s *)(a1 + 1948);
              int v118 = v117 == 2;
            }
          }

          int v116 = v176;
          goto LABEL_259;
        }
        float v153 = *(void **)(a1 + 2176);
        if (v153)
        {
          id v121 = (id)objc_msgSend(v153, "adaptiveBracketingDigitalFlashTotalIntegrationTimesProviderForPortType:wait:", objc_msgSend(v93, "portType"), 0);
          objc_msgSend(*(id *)(a1 + 2248), "setObject:forKeyedSubscript:", v121, objc_msgSend(v93, "portType"));
          os_unfair_lock_unlock(lock);
          if (v121) {
            goto LABEL_246;
          }
        }
        else
        {
          os_unfair_lock_unlock(lock);
        }
        int v116 = v176;
      }
      else
      {
        uint64_t v75 = 0;
      }
      int v118 = v117 == 2;
    }
    else
    {
      BOOL v119 = (os_unfair_lock_s *)(a1 + 1948);
    }
LABEL_259:
    os_unfair_lock_lock(v119);
    if (!v116 && *(unsigned __int8 *)(a1 + 2428) == v185 && *(unsigned __int8 *)(a1 + 2429) == v118)
    {
      int v133 = *(unsigned __int8 *)(a1 + 2430);
      *(unsigned char *)(a1 + 2428) = v185;
      *(unsigned char *)(a1 + 2429) = v118;
      *(unsigned char *)(a1 + 2430) = v183;
      BOOL v134 = v133 != v183 || *(_DWORD *)(a1 + 2188) != v75;
    }
    else
    {
      *(unsigned char *)(a1 + 2428) = v185;
      *(unsigned char *)(a1 + 2429) = v118;
      BOOL v134 = 1;
      *(unsigned char *)(a1 + 2430) = v183;
    }
    uint64_t v135 = 0;
    *(_DWORD *)(a1 + 2188) = v75;
    do
    {
      double v136 = *(double *)((char *)&lhs.timescale + v135);
      BOOL v134 = v134 || *(double *)(a1 + v135 + 2232) != v136;
      *(double *)(a1 + v135 + 2232) = v136;
      v135 += 8;
    }
    while (v135 != 16);
    os_unfair_lock_unlock(v119);
    BOOL v112 = (void *)MEMORY[0x1E4F53DC8];
    if (v134)
    {
      if ((int)v75 < 1)
      {
        uint64_t v137 = MEMORY[0x1E4F1CC08];
      }
      else
      {
        v229[0] = @"Min";
        rhs.unsigned int value = [NSNumber numberWithDouble:*(double *)&lhs.timescale];
        v229[1] = @"Max";
        *(void *)&rhs.timescale = [NSNumber numberWithDouble:*(double *)&lhs.epoch];
        uint64_t v137 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&rhs forKeys:v229 count:2];
      }
      v227[0] = @"Status";
      uint64_t v138 = [NSNumber numberWithInt:v75];
      v227[1] = @"ExposureTimes";
      valuePtr[0] = v138;
      valuePtr[1] = v137;
      uint64_t v139 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:valuePtr forKeys:v227 count:2];
      *(void *)CMTime time1 = @"FlashScene";
      v219.unsigned int value = [NSNumber numberWithBool:v117 == 1];
      *(void *)&time1[8] = @"HDRScene";
      *(void *)&v219.timescale = [NSNumber numberWithBool:v117 == 2];
      *(void *)&time1[16] = @"SISScene";
      CMTimeEpoch v140 = [NSNumber numberWithBool:v117 == 3];
      *(void *)&time1[24] = @"DigitalFlashScene";
      v219.epoch = v140;
      uint64_t v220 = (void *)v139;
      objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"StillImageSceneChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v219, time1, 4));
      int v93 = v188;
      BOOL v112 = (void *)MEMORY[0x1E4F53DC8];
    }
  }
  uint64_t v132 = v216;
LABEL_276:
  if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"Torch", v169), "BOOLValue"))-[BWFigVideoCaptureDevice _serviceAutoTorchNotification:sampleBuffer:](a1, v68); {
  if ((v115 & 1) == 0 && *(unsigned char *)(a1 + 1521))
  }
    -[BWFigVideoCaptureDevice _serviceStereoVideoCaptureSceneMonitoringWithFrameStatisticsByPortType:sceneFlags:](a1, v68, v132);
  if (*(unsigned char *)(a1 + 1868))
  {
    -[BWFigVideoCaptureDevice _collectAPSStatistics:]((float *)a1, v4);
  }
  else if (*(unsigned char *)(a1 + 1869))
  {
    +[BWAutoFocusPositionSensorMonitor logVideoRecordingAPSStatistics:a1 + 1872];
    *(unsigned char *)(a1 + 1869) = 0;
  }
  if ([*(id *)(a1 + 3264) count]) {
    -[BWFigVideoCaptureDevice _checkCriticalFocusError:](a1, v4);
  }
  if (*(void *)(a1 + 3280)
    && objc_msgSend(*(id *)(a1 + 3280), "containsObject:", objc_msgSend(v187, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128])))
  {
    -[BWFigVideoCaptureDevice _checkDegradedAutoFocus:](a1, v4);
  }
  if (*(void *)(a1 + 3312)) {
    -[BWFigVideoCaptureDevice _checkSphereJitterDetection:]((void *)a1, v4);
  }
  if (!*(void *)(a1 + 3424)) {
    *(void *)(a1 + 3424) = (id)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F54280]];
  }
  -[BWFigVideoCaptureDevice _collectAPSMacroInstabilityStatistics:]((id *)a1, v4);
  -[BWFigVideoCaptureDevice _collectSensorTemperatureStatistics:]((void *)a1, v4);
  if (!*(unsigned char *)(a1 + 2432)) {
    goto LABEL_324;
  }
  if (v174 == 1 && [v68 frameCount])
  {
    if (*(unsigned char *)(a1 + 1441))
    {
      long long v193 = 0u;
      long long v194 = 0u;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v141 = *(void **)(a1 + 112);
      uint64_t v142 = [v141 countByEnumeratingWithState:&v191 objects:v217 count:16];
      if (v142)
      {
        uint64_t v143 = v142;
        float v144 = v4;
        uint64_t v145 = *(void *)v192;
        uint64_t v146 = *MEMORY[0x1E4F52E00];
        char v147 = 1;
        do
        {
          for (uint64_t m = 0; m != v143; ++m)
          {
            if (*(void *)v192 != v145) {
              objc_enumerationMutation(v141);
            }
            uint64_t v149 = *(void *)(*((void *)&v191 + 1) + 8 * m);
            if (!*(void *)(a1 + 1456)
              || ([*(id *)(*((void *)&v191 + 1) + 8 * m) isEqualToString:v146] & 1) == 0)
            {
              if (v147)
              {
                int v150 = (void *)[v68 objectForKeyedSubscript:v149];
                if (v150)
                {
                  [v150 pts];
                  char v151 = v190;
                }
                else
                {
                  char v151 = 0;
                  char v190 = 0;
                }
                char v147 = v151 & 1;
              }
              else
              {
                char v147 = 0;
              }
            }
          }
          uint64_t v143 = [v141 countByEnumeratingWithState:&v191 objects:v217 count:16];
        }
        while (v143);
        uint64_t v4 = v144;
        int v93 = v188;
        BOOL v112 = (void *)MEMORY[0x1E4F53DC8];
        if ((v147 & 1) == 0) {
          goto LABEL_322;
        }
      }
    }
    else
    {
      float v152 = objc_msgSend(v68, "objectForKeyedSubscript:", objc_msgSend(v93, "portType"));
      if (!v152) {
        goto LABEL_322;
      }
      [v152 pts];
      if ((v189 & 1) == 0) {
        goto LABEL_322;
      }
    }
    os_unfair_lock_lock(v173);
    [*(id *)(a1 + 2544) transitionToState:2];
    os_unfair_lock_unlock(v173);
  }
LABEL_322:
  if (!*(unsigned char *)(a1 + 1968))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
    if (!*(unsigned char *)(a1 + 2536))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
      goto LABEL_324;
    }
    if (+[BWStillImageTimeMachine afComplete:v4])
    {
      *(unsigned char *)(a1 + 2536) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
      if (*(int *)(a1 + 2488) < 60)
      {
        v165 = (_DWORD *)(a1 + 2488);
        uint64_t v166 = *(NSObject **)(a1 + 2472);
        v219.unsigned int value = MEMORY[0x1E4F143A8];
        *(void *)&v219.timescale = 3221225472;
        v219.epoch = (CMTimeEpoch)__fvcd_serviceRetryStillImageCapture_block_invoke;
        uint64_t v220 = &unk_1E5C24430;
        unint64_t v221 = a1;
        dispatch_async(v166, &v219);
        int v167 = *(_DWORD *)(a1 + 2488);
LABEL_352:
        _DWORD *v165 = v167 + 1;
        goto LABEL_324;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
      int v167 = *(_DWORD *)(a1 + 2488);
      if (v167 < 60)
      {
        v165 = (_DWORD *)(a1 + 2488);
        goto LABEL_352;
      }
    }
    -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:]((char *)a1, 4294950493);
    goto LABEL_324;
  }
  -[BWFigVideoCaptureDevice _serviceRetryStillImageCaptureUsingFrameStatisticsByPortType:](a1, v68);
LABEL_324:
  if (*(unsigned char *)(a1 + 440))
  {
    float v154 = (void *)[v187 objectForKeyedSubscript:*v112];
    BOOL v155 = (void *)[v154 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
    unint64_t v156 = (void *)[v155 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
    if (!v156) {
      unint64_t v156 = (void *)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    }
    unint64_t v157 = *(unsigned int *)(a1 + 464);
    if ([v156 count] >= v157) {
      int v158 = [v156 count];
    }
    else {
      int v158 = *(_DWORD *)(a1 + 464);
    }
    *(_DWORD *)(a1 + 464) = v158;
    uint64_t v159 = *(void **)(a1 + 472);
    objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", *MEMORY[0x1E4F54068]), "doubleValue");
    objc_msgSend(v159, "addDataPoint:");
  }

  *(void *)(a1 + 504) = (id)[v93 portType];
  if (v4)
  {
    if (*(_DWORD *)(a1 + 4192) == -1)
    {
      ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v4);
      if (ImageBuffer) {
        *(_DWORD *)(a1 + 4192) = BWPixelBufferColorSpace(ImageBuffer);
      }
    }
  }
  if ([*(id *)(a1 + 496) hasSphere])
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4204));
    v161 = (void *)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F542A0]];
    if (v161)
    {
      *(void *)&time1[8] = 0;
      *(void *)CMTime time1 = 0;
      [v161 getBytes:time1 length:16];
      if (!*(_WORD *)time1)
      {
        int32x4_t v162 = (int32x4_t)vmovl_u16(*(uint16x4_t *)&time1[2]);
        int v163 = vaddvq_s32(v162)
             + *(unsigned __int16 *)&time1[10]
             + *(unsigned __int16 *)&time1[12]
             + *(unsigned __int16 *)&time1[14];
        if ((float)((float)(v163 - v162.i32[0]) / (float)v163) >= 0.05)
        {
          CMSampleBufferGetPresentationTimeStamp(&v219, (CMSampleBufferRef)v4);
          *(CMTime *)(a1 + 4208) = v219;
        }
      }
    }
    unint64_t v164 = (void *)[v187 objectForKeyedSubscript:*MEMORY[0x1E4F54280]];
    if ([v164 isEqual:*MEMORY[0x1E4F54E90]])
    {
      if ([*(id *)(a1 + 4256) isEqual:*MEMORY[0x1E4F54E60]])
      {
        CMSampleBufferGetPresentationTimeStamp(&v219, (CMSampleBufferRef)v4);
        *(CMTime *)(a1 + 4232) = v219;
      }
    }

    *(void *)(a1 + 4256) = v164;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4204));
  }
}

uint64_t __76__BWFigVideoCaptureDevice__copyAutofocusProcessorProperty_propertyValueOut___block_invoke(uint64_t a1)
{
  uint64_t result = -[BWFigVideoCaptureDevice _copyAutofocusProcessorPropertyInternal:propertyValueOut:](*(void *)(a1 + 32), *(void *)(a1 + 48), *(void **)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (uint64_t)_copyAutofocusProcessorPropertyInternal:(void *)a3 propertyValueOut:
{
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (_FigIsCurrentDispatchQueue())
  {
    if (!a2)
    {
LABEL_21:
      FigDebugAssert3();
      return 4294954516;
    }
  }
  else
  {
    FigDebugAssert3();
    if (!a2) {
      goto LABEL_21;
    }
  }
  if (!a3) {
    goto LABEL_21;
  }
  if (*(void *)(v5 + 1600))
  {
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v8 + 48);
    if (v11)
    {
      uint64_t v12 = *MEMORY[0x1E4F1CF80];
      return v11(FigBaseObject, a2, v12, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    uint64_t v9 = [*(id *)(v5 + 1584) objectForKeyedSubscript:a2];
    if (v9)
    {
      uint64_t v10 = (const void *)v9;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t result = 0;
        *a3 = 0;
      }
      else
      {
        CFTypeRef v13 = CFRetain(v10);
        uint64_t result = 0;
        *a3 = v13;
      }
    }
    else
    {
      return 4294954513;
    }
  }
  return result;
}

- (void)_addStateAttachmentsToVideoSampleBuffer:(uint64_t)a1 captureStream:(void *)a2
{
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 3704);
    if (v4) {
      [v4 addAttachmentsToSamplebuffer:a2];
    }
    -[BWFigVideoCaptureDevice _addSystemPressureAttachments:](a1, a2);
    if (*(unsigned char *)(a1 + 3156))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3164));
      CMSetAttachment(a2, @"UprightExifOrientation", (CFTypeRef)[NSNumber numberWithInt:*(unsigned int *)(a1 + 3160)], 1u);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3164));
    }
    if (*(unsigned char *)(a1 + 2258)) {
      CMSetAttachment(a2, @"BWBurnAfterReading", MEMORY[0x1E4F1CC38], 0);
    }
    uint64_t v5 = (unsigned char *)(a1 + 4160);
    if ([*(id *)(a1 + 496) sphereEnabled]) {
      BOOL v6 = *(unsigned char *)(a1 + 3640) != 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (*(unsigned char *)(a1 + 1521) && *(void *)(a1 + 1528)) {
      -[BWFigVideoCaptureDevice _addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:]((os_unfair_lock_s *)a1, a2);
    }
    if (*v5)
    {
      BOOL v7 = 1;
    }
    else if ([*(id *)(a1 + 2544) currentState] == 4 {
           || [*(id *)(a1 + 2544) currentState] == 8)
    }
    {
      BOOL v7 = 1;
      *uint64_t v5 = 1;
    }
    else
    {
      BOOL v7 = *v5 != 0;
    }
    CMSetAttachment(a2, @"CaptureInitiatedOnce", (CFTypeRef)[NSNumber numberWithBool:v7], 1u);
    if (v6) {
      -[BWFigVideoCaptureDevice _addStationaryFlagToMetadata:]((void *)a1, a2);
    }
    if (*(unsigned char *)(a1 + 2404) || (*(unsigned char *)(a1 + 2392) & 1) != 0) {
      -[BWFigVideoCaptureDevice _addDropFrameWaitingForTorchToRampUpKey:](a1, a2);
    }
    if (*(unsigned char *)(a1 + 4198) && *(unsigned char *)(a1 + 4199))
    {
      uint64_t v8 = (const void *)MEMORY[0x1E4F1CC38];
      CMSetAttachment(a2, @"TrueVideoTransitionLargeSphereTravelDetected", v8, 1u);
    }
  }
}

- (void)_addSystemPressureAttachments:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 3824);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
    uint64_t v5 = *(unsigned int *)(a1 + 3828);
    uint64_t v6 = *(unsigned int *)(a1 + 3832);
    uint64_t v7 = *(unsigned int *)(a1 + 3844);
    if (*(unsigned char *)(a1 + 3849))
    {
      if (*(int *)(a1 + 3852) > 0) {
        uint64_t v8 = 2;
      }
      else {
        uint64_t v8 = 3;
      }
      os_unfair_lock_unlock(v4);
      CMSetAttachment(a2, @"OverCaptureSlaveStreamStatus", (CFTypeRef)[NSNumber numberWithInt:v8], 1u);
    }
    else
    {
      os_unfair_lock_unlock(v4);
    }
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F55D38], (CFTypeRef)[NSNumber numberWithInt:v5], 1u);
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F55D40], (CFTypeRef)[NSNumber numberWithUnsignedInt:v7], 1u);
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F55D48];
    uint64_t v10 = (const void *)[NSNumber numberWithInt:v6];
    CMSetAttachment(a2, v9, v10, 1u);
  }
}

- (id)_collectAPSMacroInstabilityStatistics:(id *)result
{
  if (result)
  {
    int v2 = result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t result = (id *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53CC8]];
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
        uint64_t v7 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53688]];
        if (v7)
        {
          uint64_t v8 = v7;
          [v7 floatValue];
          float v10 = v9;
          objc_msgSend((id)objc_msgSend(v2[412], "objectForKeyedSubscript:", v6), "floatValue");
          if (v10 > v11)
          {
            uint64_t v12 = NSNumber;
            [v8 floatValue];
            objc_msgSend(v2[412], "setObject:forKeyedSubscript:", objc_msgSend(v12, "numberWithFloat:"), v6);
          }
        }
        uint64_t result = (id *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53690]];
        if (result)
        {
          CFTypeRef v13 = result;
          [result floatValue];
          float v15 = v14;
          uint64_t result = (id *)objc_msgSend((id)objc_msgSend(v2[413], "objectForKeyedSubscript:", v6), "floatValue");
          if (v15 > v16)
          {
            uint64_t v17 = NSNumber;
            [v13 floatValue];
            uint64_t v18 = objc_msgSend(v17, "numberWithFloat:");
            id v19 = v2[413];
            return (id *)[v19 setObject:v18 forKeyedSubscript:v6];
          }
        }
      }
    }
    else
    {
      return (id *)FigDebugAssert3();
    }
  }
  return result;
}

- (void)_collectSensorTemperatureStatistics:(void *)result
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t result = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54230]];
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
        if (![*(id *)(v2 + 3504) objectForKeyedSubscript:v6]) {
          [*(id *)(v2 + 3504) setObject:objc_alloc_init(BWStats) forKeyedSubscript:v6];
        }
        uint64_t v7 = (void *)[*(id *)(v2 + 3504) objectForKeyedSubscript:v6];
        [v5 floatValue];
        double v9 = v8;
        return (void *)[v7 addDataPoint:v9];
      }
    }
    else
    {
      return (void *)FigDebugAssert3();
    }
  }
  return result;
}

- (void)_servicePendingStillImageCapture
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 1280);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 1280));
    os_unfair_lock_lock(v2);
    if ([*(id *)(a1 + 2544) currentState] == 4)
    {
      os_unfair_lock_assert_owner(v2);
      if (!*(unsigned char *)(a1 + 1284) && !*(unsigned char *)(a1 + 1285) && !*(unsigned char *)(a1 + 1286))
      {
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(*(id *)(a1 + 2544), "transitionToState:", 8, v4, v5);
      }
    }
    os_unfair_lock_unlock(v2);
  }
}

- (void)_serviceCompletedRequestNotifications:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F54088]), "intValue");
      int v7 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F54080]), "intValue");
      int v8 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E40]), "intValue");
      int v9 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F54090]), "intValue");
      int v10 = *(_DWORD *)(a1 + 2608);
      int v11 = *(_DWORD *)(a1 + 2612);
      int v12 = *(_DWORD *)(a1 + 2616);
      BOOL v13 = v6 <= v10 && v7 <= v11;
      BOOL v14 = v13 && v8 <= v12;
      if (!v14 || v9 > *(_DWORD *)(a1 + 2620))
      {
        int v23 = *(_DWORD *)(a1 + 2620);
        int v24 = v9;
        memset(&v26, 0, sizeof(v26));
        CMSampleBufferGetPresentationTimeStamp(&v26, (CMSampleBufferRef)target);
        CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMTime time = v26;
        CFDictionaryRef v17 = CMTimeCopyAsDictionary(&time, v16);
        id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        if (v6 > v10)
        {
          *(_DWORD *)(a1 + 2608) = v6;
          LODWORD(v19) = *(_DWORD *)(a1 + 2640);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v19), @"FocusLensPositionCurrentValue");
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, @"ManualFocusComplete", *(unsigned int *)(a1 + 2608), (uint64_t)v17, v18);
        }
        if (v7 > v11)
        {
          CMTime time = *(CMTime *)(a1 + 2644);
          CFDictionaryRef v20 = CMTimeCopyAsDictionary(&time, v16);
          *(_DWORD *)(a1 + 2612) = v7;
          LODWORD(v21) = *(_DWORD *)(a1 + 2668);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v21), @"ISOCurrentValue");
          [v18 setObject:v20 forKeyedSubscript:@"ExposureDurationCurrentValue"];
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, @"ManualExposureComplete", *(unsigned int *)(a1 + 2612), (uint64_t)v17, v18);
        }
        if (v8 > v12)
        {
          *(_DWORD *)(a1 + 2616) = v8;
          LODWORD(v19) = *(_DWORD *)(a1 + 2672);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v19), @"ExposureTargetBiasCurrentValue");
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, @"BiasedExposureComplete", *(unsigned int *)(a1 + 2616), (uint64_t)v17, v18);
        }
        if (v24 > v23)
        {
          uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a1 + 2680 length:12];
          *(_DWORD *)(a1 + 2620) = v24;
          [v18 setObject:v22 forKeyedSubscript:@"WhiteBalanceGainsCurrentValue"];
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, @"ManualWhiteBalanceComplete", *(unsigned int *)(a1 + 2620), (uint64_t)v17, v18);
        }
      }
    }
  }
}

- (void)_serviceAutoTorchNotification:(uint64_t)a1 sampleBuffer:(void *)a2
{
  v30[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v25 = 0;
    CMTime v26 = &v25;
    uint64_t v27 = 0x2020000000;
    int v28 = 0;
    if (!a2)
    {
      FigDebugAssert3();
LABEL_14:
      _Block_object_dispose(&v25, 8);
      return;
    }
    uint64_t v4 = *(NSObject **)(a1 + 1576);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __70__BWFigVideoCaptureDevice__serviceAutoTorchNotification_sampleBuffer___block_invoke;
    block[3] = &unk_1E5C246B8;
    block[4] = a1;
    void block[5] = &v25;
    dispatch_sync(v4, block);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2368));
    float v5 = -1.0;
    if (*(unsigned char *)(a1 + 2376) && *(float *)(a1 + 2412) > 0.0)
    {
      int v6 = *((_DWORD *)v26 + 6);
      BOOL v7 = v6 != 2;
      if (v6 != 2)
      {
        *(unsigned char *)(a1 + 2377) = 0;
        if (*(float *)(a1 + 2408) != 0.0)
        {
          BOOL v7 = 0;
          BOOL v8 = 0;
          float v5 = 0.0;
LABEL_10:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2368));
          if (v5 != -1.0)
          {
            *(float *)&double v9 = v5;
            [(id)a1 setTorchLevel:v9];
          }
          if (v7)
          {
            long long v29 = @"NewPropertyValue";
            v30[0] = [NSNumber numberWithBool:v8];
            objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"TorchActive", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1));
          }
          goto LABEL_14;
        }
        int v10 = *(void **)(a1 + 1288);
        if (!v10) {
          int v10 = *(void **)(a1 + 496);
        }
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "normalizedSNR");
        float v12 = v11;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2296), "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "floatValue");
        BOOL v8 = v12 < v13;
        if (*(unsigned char *)(a1 + 2405) == v8)
        {
          BOOL v7 = 0;
          goto LABEL_10;
        }
        *(unsigned char *)(a1 + 2405) = v8;
        BOOL v20 = v12 < v13;
LABEL_31:
        *(unsigned char *)(a1 + 2404) = v20;
        goto LABEL_10;
      }
      if (!*(unsigned char *)(a1 + 2377) && ((unint64_t)[a2 frameCount] > 3 || *(unsigned char *)(a1 + 4090)))
      {
        BOOL v14 = *(void **)(a1 + 1288);
        if (!v14) {
          BOOL v14 = *(void **)(a1 + 496);
        }
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v14, "portType")), "normalizedSNR");
        float v16 = v15;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2296), "objectForKeyedSubscript:", objc_msgSend(v14, "portType")), "floatValue");
        BOOL v18 = v16 < v17;
        if (v16 >= v17) {
          float v5 = 0.0;
        }
        else {
          float v5 = 3.4028e38;
        }
        *(unsigned char *)(a1 + 2377) = 1;
        if (v18)
        {
          HostTimeClocuint64_t k = CMClockGetHostTimeClock();
          CMClockGetTime(&lhs, HostTimeClock);
          CMTimeMake(&rhs, 120, 1000);
          CMTimeAdd(&v23, &lhs, &rhs);
          BOOL v20 = 0;
          BOOL v8 = 0;
          *(CMTime *)(a1 + 2380) = v23;
        }
        else
        {
          BOOL v20 = 0;
          BOOL v8 = 0;
        }
        goto LABEL_31;
      }
    }
    BOOL v7 = 0;
    BOOL v8 = 0;
    goto LABEL_10;
  }
}

- (void)_checkDegradedAutoFocus:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
      int v6 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53CC8]];
      BOOL v7 = (void *)[v6 objectForKeyedSubscript:*MEMORY[0x1E4F53668]];
      if (!v7) {
        goto LABEL_8;
      }
      BOOL v8 = v7;
      if ([v7 intValue])
      {
        if (!*(void *)(a1 + 3288)) {
          *(void *)(a1 + 3288) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        }
        objc_msgSend(*(id *)(a1 + 3288), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v8, "intValue")), v5);
        [*(id *)(a1 + 3280) removeObject:v5];
        if (![*(id *)(a1 + 3280) count])
        {
LABEL_8:

          *(void *)(a1 + 3280) = 0;
        }
      }
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

- (uint64_t)_checkCriticalFocusError:(uint64_t)result
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
      uint64_t result = [*(id *)(v2 + 3264) containsObject:v5];
      if (result)
      {
        uint64_t result = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D90]), "BOOLValue");
        if (result)
        {
          id v6 = *(id *)(v2 + 3272);
          if (!v6)
          {
            id v6 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
            *(void *)(v2 + 3272) = v6;
          }
          [v6 addObject:v5];
          BOOL v7 = *(void **)(v2 + 3264);
          return [v7 removeObject:v5];
        }
      }
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

- (void)_checkSphereJitterDetection:(void *)result
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t result = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54278]];
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
        int v7 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F54E38]), "intValue");
        if (v7) {
          objc_msgSend(*(id *)(v2 + 3312), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(*(id *)(v2 + 3312), "objectForKeyedSubscript:", v6), "intValue")+ v7), v6);
        }
        uint64_t result = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F54E58]), "intValue");
        if (result)
        {
          uint64_t v8 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(*(id *)(v2 + 3320), "objectForKeyedSubscript:", v6), "intValue")+ result);
          double v9 = *(void **)(v2 + 3320);
          return (void *)[v9 setObject:v8 forKeyedSubscript:v6];
        }
      }
    }
    else
    {
      return (void *)FigDebugAssert3();
    }
  }
  return result;
}

- (double)_accumulateTimeOfFLightStreamingTime:(double)result
{
  if (a1)
  {
    objc_msgSend((id)objc_msgSend((id)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F54330]), "floatValue");
    if (v5 == 0.0)
    {
      int v6 = 0;
    }
    else if (fabsf(v5 + -1.0) <= 0.2)
    {
      int v6 = 1;
    }
    else if (fabsf(v5 + -8.0) > 0.2)
    {
      int v6 = -1;
    }
    else
    {
      int v6 = 8;
    }
    memset(&v10, 0, sizeof(v10));
    CMSampleBufferGetPresentationTimeStamp(&v10, (CMSampleBufferRef)target);
    int v7 = (_OWORD *)(a1 + 3888);
    if ((*(unsigned char *)(a1 + 3900) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 3884) != v6)
    {
      CMTime time1 = v10;
      *(_OWORD *)&v8.unsigned int value = *v7;
      v8.epoch = *(void *)(a1 + 3904);
      if (CMTimeCompare(&time1, &v8) >= 1)
      {
        CMTime time1 = v10;
        [(BWFigVideoCaptureDevice *)a1 _updateTimeOfFlightStreamingTime:*(float *)&v10.value];
LABEL_13:
        *(_DWORD *)(a1 + 3884) = v6;
        uint64_t result = *(double *)&v10.value;
        *int v7 = *(_OWORD *)&v10.value;
        *(void *)(a1 + 3904) = v10.epoch;
      }
    }
  }
  return result;
}

- (os_unfair_lock_s)_ubZeroShutterLagCancelWaitingForTimeMachines
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = a1 + 624;
    os_unfair_lock_lock(a1 + 624);
    uint64_t v3 = *(void *)&v1[508]._os_unfair_lock_opaque;
    if (v3 < 1) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = (os_unfair_lock_s *)(v3 == *(void *)&v1[510]._os_unfair_lock_opaque);
    }
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

- (uint64_t)_updateOrientationTotalTimes:(uint64_t)result
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 400);
    if ((v2 & 0x8000000000000000) == 0)
    {
      unsigned int v3 = *(_DWORD *)(result + 392) - 1;
      if (v3 <= 3) {
        *(void *)(result + 8 * v3 + 408) += a2 - v2;
      }
    }
  }
  return result;
}

void __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke(uint64_t a1)
{
}

- (void)_serviceBravoStreamSelectionWithSampleBuffer:(void *)a3 fromCaptureStream:(uint64_t)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  CMTime v10 = (os_unfair_lock_s *)(a1 + 1304);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1304));
  float v11 = *(void **)(a1 + 1288);
  float v12 = *(void **)(a1 + 1296);
  os_unfair_lock_unlock(v10);
  [*(id *)(a1 + 2736) rampZoomFactorOfInterest];
  if (v13 > 0.0)
  {
    if (!*(unsigned char *)(a1 + 3640)) {
      return;
    }
    BOOL v14 = NSNumber;
LABEL_20:
    long long v29 = (const void *)objc_msgSend(v14, "numberWithFloat:");
    CMSetAttachment(a2, @"RampZoomFactorOfInterest", v29, 1u);
    return;
  }
  uint64_t v107 = v12;
  float v15 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v16 = [v15 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
  unsigned int v17 = -[BWFigVideoCaptureDevice overCaptureActiveSlaveStreamForcedOff]((os_unfair_lock_s *)a1);
  if (*(unsigned char *)(a1 + 3640))
  {
    objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DA0]), "floatValue");
    float v19 = v18;
  }
  else
  {
    float v19 = 0.0;
  }
  [*(id *)(a1 + 2736) requestedZoomFactor];
  float v21 = v20;
  if (*(unsigned char *)(a1 + 3640)) {
    int v22 = v17;
  }
  else {
    int v22 = 1;
  }
  if (v22) {
    uint64_t v23 = 3;
  }
  else {
    uint64_t v23 = 24;
  }
  *(float *)&double v24 = -[BWFigVideoCaptureDevice _nextLargerBaseZoomFactorForRequestedZoomFactor:](a1, v20);
  [*(id *)(a1 + 2736) predictRampZoomFactorAfterNumberOfFrames:v23 settingZoomFactorOfInterest:v24];
  float v26 = v25;
  if (v25 != 0.0) {
    float v21 = v25;
  }
  [*(id *)(a1 + 2736) rampZoomFactorOfInterest];
  float v28 = v27;
  if (v11 != a3)
  {
    if (v27 <= 0.0 || !*(unsigned char *)(a1 + 3640)) {
      return;
    }
    BOOL v14 = NSNumber;
    goto LABEL_20;
  }
  int v103 = v10;
  float v30 = *(float *)(a1 + 1412);
  long long v31 = *(void **)(a1 + 1432);
  [*(id *)(a1 + 2736) rampTargetZoomFactor];
  float v33 = v32;
  -[BWFigVideoCaptureDevice _updateStatsMasterForMasterStream:](a1, (uint64_t)a3);
  -[BWFigVideoCaptureDevice _updateBravoStreamSelectionForMasterStream:forceNotification:](a1, a3, 0);
  locuint64_t k = (os_unfair_lock_s *)(a1 + 1280);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  uint64_t v34 = *(void **)(a1 + 584);
  BOOL v35 = v34 != a3 && v34 == v31;
  uint64_t v104 = *(void **)(a1 + 584);
  int v105 = v31;
  if (!v35 || v31 == 0) {
    uint64_t v37 = a3;
  }
  else {
    uint64_t v37 = *(void **)(a1 + 584);
  }
  if (*(unsigned char *)(a1 + 3640)) {
    uint64_t v38 = *(void **)(a1 + 584);
  }
  else {
    uint64_t v38 = v37;
  }
  float v39 = v21;
  if (*(unsigned char *)(a1 + 4329))
  {
    [*(id *)(a1 + 2736) earlySwitchOverScaleFactorForZoomIn];
    float v39 = v21;
    if (v40 != 1.0)
    {
      [*(id *)(a1 + 2736) earlySwitchOverScaleFactorForZoomIn];
      float v39 = v21 / v41;
    }
  }
  uint64_t v42 = *(void **)(a1 + 1312);
  uint64_t v43 = *(unsigned __int8 *)(a1 + 2428);
  if (a5 == 1) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = 2 * (a5 == 2);
  }
  uint64_t v45 = [*(id *)(a1 + 544) cameraControlsStatisticsMasterStream];
  *(float *)&double v46 = v39;
  uint64_t v47 = (void *)[v42 recommendMasterStreamUsingCurrentMasterStream:v38 frameStatisticsByPortType:a4 zoomFactor:v43 isAutoFlashScene:v44 digitalFlashMode:v16 detectedObjects:v45 cameraControlsStatisticsMasterStream:v46];
  uint64_t v48 = (void *)[*(id *)(a1 + 1312) preferredMasterStreamIgnoringEligibleFallbackPortTypes];
  CMSetAttachment(a2, @"RecommendedMasterPortType", (CFTypeRef)[v47 portType], 1u);
  int v106 = v48;
  CMSetAttachment(a2, @"PreferredMasterPortType", (CFTypeRef)[v48 portType], 1u);
  CMSetAttachment(a2, @"LastRecommendedMasterSelectionReason", (CFTypeRef)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 1312), "lastSelectionReason")), 1u);
  if (*(unsigned char *)(a1 + 3640))
  {
    if (v28 > 0.0)
    {
      *(float *)&double v49 = v28;
      CMSetAttachment(a2, @"RampZoomFactorOfInterest", (CFTypeRef)[NSNumber numberWithFloat:v49], 1u);
    }
    -[BWFigVideoCaptureDevice _overCaptureSelectLockedStreamsForRecommendedMasterStream:requestedZoomFactor:currentFrameRate:](a1, (uint64_t)v47, v21, v19);
    int v50 = *(void **)(a1 + 3656);
    if ((!v50 || [v50 containsObject:v47]) && v47 != *(void **)(a1 + 584)) {
      *(void *)(a1 + 584) = v47;
    }
    uint64_t v47 = (void *)-[BWFigVideoCaptureDevice _overCaptureMasterStreamForZoomFactor:](a1, v21);
    if (!*(unsigned char *)(a1 + 3650) && !*(unsigned char *)(a1 + 1464))
    {
      uint64_t v51 = (void *)-[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, (uint64_t)v47, 0, v21, v19);
      long long v117 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      uint64_t v52 = *(void **)(a1 + 560);
      uint64_t v53 = [v52 countByEnumeratingWithState:&v117 objects:v123 count:16];
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v55 = 0;
        uint64_t v56 = *(void *)v118;
        do
        {
          for (uint64_t i = 0; i != v54; ++i)
          {
            if (*(void *)v118 != v56) {
              objc_enumerationMutation(v52);
            }
            uint64_t v58 = *(void **)(*((void *)&v117 + 1) + 8 * i);
            if (v58 != *(void **)(a1 + 1288)
              && [*(id *)(*((void *)&v117 + 1) + 8 * i) streamingRequiredWhenConfiguredAsSlave])
            {
              uint64_t v55 = v58;
            }
          }
          uint64_t v54 = [v52 countByEnumeratingWithState:&v117 objects:v123 count:16];
        }
        while (v54);
      }
      else
      {
        uint64_t v55 = 0;
      }
      if (v51 != v55)
      {
        [v51 setStreamingRequiredWhenConfiguredAsSlave:1];
        [v51 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:0];
        long long v115 = 0u;
        long long v116 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        char v91 = *(void **)(a1 + 552);
        uint64_t v92 = [v91 countByEnumeratingWithState:&v113 objects:v122 count:16];
        if (v92)
        {
          uint64_t v93 = v92;
          uint64_t v94 = *(void *)v114;
          do
          {
            for (uint64_t j = 0; j != v93; ++j)
            {
              if (*(void *)v114 != v94) {
                objc_enumerationMutation(v91);
              }
              float v96 = *(void **)(*((void *)&v113 + 1) + 8 * j);
              if (v96 != v47 && v96 != v51)
              {
                [*(id *)(*((void *)&v113 + 1) + 8 * j) setStreamingRequiredWhenConfiguredAsSlave:0];
                [v96 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:0];
              }
            }
            uint64_t v93 = [v91 countByEnumeratingWithState:&v113 objects:v122 count:16];
          }
          while (v93);
        }
      }
    }
  }
  else if (v47 != *(void **)(a1 + 584))
  {
    *(void *)(a1 + 584) = v47;
  }
  os_unfair_lock_unlock(lock);
  [a3 baseZoomFactor];
  float v60 = v59;
  [v47 baseZoomFactor];
  BOOL v62 = v60 < v61 && *(unsigned char *)(a1 + 3640) == 0;
  if ([*(id *)(a1 + 1424) isRamping])
  {
    [*(id *)(a1 + 1424) updateRampForNextIteration];
    float v30 = v63;
    if ([*(id *)(a1 + 1424) isRampingUp])
    {
      if (v47 == v104) {
        goto LABEL_135;
      }
      [*(id *)(a1 + 1424) reset];
    }
  }
  if (v62)
  {
    float v64 = *(float *)(a1 + 1412);
    if (*(unsigned char *)(a1 + 1284)) {
      LOBYTE(v65) = v64 == 1.0;
    }
    else {
      LOBYTE(v65) = 0;
    }
    int v66 = (unsigned char *)(a1 + 1284);
    if (v64 == 1.0 || !*(unsigned char *)(a1 + 1284)) {
      goto LABEL_98;
    }
  }
  else
  {
    int v66 = (unsigned char *)(a1 + 1284);
    if (!*(unsigned char *)(a1 + 1284))
    {
      LOBYTE(v65) = 0;
      goto LABEL_98;
    }
    if (([*(id *)(a1 + 1424) isRamping] & 1) == 0)
    {
      float v30 = 0.0;
      if (*(unsigned char *)(a1 + 1440))
      {
        unint64_t v67 = [*(id *)(a1 + 560) indexOfObject:a3];
        if (v67 >= [*(id *)(a1 + 560) count] - 1) {
          uint64_t v68 = 0;
        }
        else {
          uint64_t v68 = [*(id *)(a1 + 560) objectAtIndexedSubscript:v67 + 1];
        }
        if (v68) {
          uint64_t v69 = v68;
        }
        else {
          uint64_t v69 = (uint64_t)a3;
        }
        int v105 = (void *)v69;
      }
      else
      {
        int v105 = 0;
      }
    }
  }
  os_unfair_lock_lock(lock);
  *(unsigned char *)(a1 + 1284) = 0;
  os_unfair_lock_unlock(lock);
  [a3 didBecomeMasterStream];
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  int v70 = *(void **)(a1 + 552);
  uint64_t v65 = [v70 countByEnumeratingWithState:&v109 objects:v121 count:16];
  if (v65)
  {
    uint64_t v71 = *(void *)v110;
    do
    {
      for (uint64_t k = 0; k != v65; ++k)
      {
        if (*(void *)v110 != v71) {
          objc_enumerationMutation(v70);
        }
        int v73 = *(void **)(*((void *)&v109 + 1) + 8 * k);
        if (v73 != a3) {
          [v73 didBecomeSlaveStream];
        }
      }
      uint64_t v65 = [v70 countByEnumeratingWithState:&v109 objects:v121 count:16];
    }
    while (v65);
  }
LABEL_98:
  if (*(unsigned char *)(a1 + 1285))
  {
    [*(id *)(a1 + 2736) appliedZoomFactor];
    if (vabds_f32(v33, v74) < 0.001 || v33 == 0.0)
    {
      os_unfair_lock_lock(lock);
      *(unsigned char *)(a1 + 1285) = 0;
      os_unfair_lock_unlock(lock);
    }
  }
  if (!*(unsigned char *)(a1 + 3640))
  {
    BOOL v78 = 0;
    BOOL v77 = 0;
    goto LABEL_114;
  }
  if (*(void *)(a1 + 568)
    && ([*(id *)(a1 + 2736) appliedZoomFactor], v21 > v75)
    && ([*(id *)(a1 + 568) baseZoomFactor], v21 >= v76))
  {
    BOOL v77 = *(void *)(a1 + 576) == (void)a3;
    BOOL v78 = *(void *)(a1 + 496) == (void)a3;
  }
  else
  {
    BOOL v77 = 0;
    BOOL v78 = 0;
  }
  if (!*(unsigned char *)(a1 + 3640)
    || !*(unsigned char *)(a1 + 1464)
    || (unsigned int v79 = [(id)a1 shallowDepthOfFieldEffectStatus], v79 > 0xE)
    || (char v80 = 1, ((1 << v79) & 0x7A02) == 0))
  {
LABEL_114:
    char v80 = 0;
    if (v65) {
      goto LABEL_112;
    }
LABEL_115:
    CGPoint v83 = v66;
    os_unfair_lock_lock(lock);
    BOOL v82 = [*(id *)(a1 + 2544) currentState] != 8;
    int v81 = v47 != a3 && v82;
    if (v81 == 1)
    {
      *CGPoint v83 = 1;
      if (v77) {
        *(unsigned char *)(a1 + 1285) = 1;
      }
    }
    os_unfair_lock_unlock(lock);
    goto LABEL_122;
  }
  if ((v65 & 1) == 0) {
    goto LABEL_115;
  }
LABEL_112:
  int v81 = 1;
  BOOL v82 = 1;
LABEL_122:
  int v84 = !v82;
  if (v82 && v106 != v107)
  {
    os_unfair_lock_lock(lock);
    *(void *)(a1 + 1296) = v106;
    os_unfair_lock_unlock(lock);
    -[BWFigVideoCaptureDevice _sendPreferredMasterStreamChangedNotificationWithPortType:]((void *)a1, [*(id *)(a1 + 1296) portType]);
  }
  if (v81)
  {
    if (objc_msgSend(*(id *)(a1 + 3136), "isEqualToString:", objc_msgSend(v47, "portType")))
    {
      [*(id *)(a1 + 2736) resetZoomFactorOfInterest];
      return;
    }
    [a3 willBecomeSlaveStream];
    [v47 willBecomeMasterStream];
    float v88 = *(void **)(a1 + 1424);
    int v89 = *(unsigned __int8 *)(a1 + 3640);
    if (v88)
    {
      if (*(unsigned char *)(a1 + 3640))
      {
        float v85 = v105;
LABEL_165:
        -[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)v47, v80, v21, v19);
LABEL_170:
        -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](a1, v47, v21);
        if ([*(id *)(a1 + 544) setMasterStream:v47 allStreams:*(void *)(a1 + 552)])
        {
          os_unfair_lock_lock(lock);
          *(_WORD *)(a1 + 1284) = 0;
          os_unfair_lock_unlock(lock);
          [a3 willBecomeMasterStream];
          [v47 willBecomeSlaveStream];
          [a3 didBecomeMasterStream];
          [v47 didBecomeSlaveStream];
          if (*(unsigned char *)(a1 + 3640))
          {
            -[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)a3, v80, v21, v19);
          }
          else if (*(unsigned char *)(a1 + 1464) || *(unsigned char *)(a1 + 209))
          {
            -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:](a1, (uint64_t)v47);
          }
        }
        else
        {
          os_unfair_lock_lock(v103);
          *(void *)(a1 + 1288) = v47;
          os_unfair_lock_unlock(v103);
          uint64_t v101 = [v47 portType];
          -[BWFigVideoCaptureDevice _sendMasterStreamChangedNotificationWithPortType:]((void *)a1, v101);
          -[BWFigVideoCaptureDevice _updateStreamingImageIntentForChangedMasterStreamWithPortType:](a1, v101);
          if (*(unsigned char *)(a1 + 3697))
          {
            [*(id *)(a1 + 2736) appliedZoomFactor];
            -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((unsigned char *)a1, v102);
          }
          a3 = v47;
        }
        goto LABEL_179;
      }
      if (v62)
      {
        if (v26 == 0.0)
        {
          float v85 = v105;
          if (*(float *)(a1 + 1412) == 0.0)
          {
            LODWORD(v87) = 1.0;
            [v88 startRampFrom:*(unsigned int *)(a1 + 1416) to:*(unsigned int *)(a1 + 1420) iterations:0.0 shape:v87];
            [*(id *)(a1 + 1424) updateRampForNextIteration];
            float v30 = v90;
            float v85 = v47;
            goto LABEL_179;
          }
        }
        else
        {
          float v85 = v105;
        }
LABEL_167:
        if (*(unsigned char *)(a1 + 1464) || *(unsigned char *)(a1 + 209)) {
          -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:](a1, (uint64_t)v47);
        }
        goto LABEL_170;
      }
      int v98 = *(_DWORD *)(a1 + 1420);
      if (v98 == 1) {
        unsigned int v99 = 2;
      }
      else {
        unsigned int v99 = *(_DWORD *)(a1 + 1420);
      }
      if (v98 == 2) {
        uint64_t v100 = 1;
      }
      else {
        uint64_t v100 = v99;
      }
      float v30 = 1.0;
      LODWORD(v86) = 1.0;
      [v88 startRampFrom:*(unsigned int *)(a1 + 1416) to:v100 iterations:v86 shape:0.0];
      int v89 = *(unsigned __int8 *)(a1 + 3640);
      float v85 = a3;
    }
    else
    {
      float v85 = v105;
    }
    if (v89) {
      goto LABEL_165;
    }
    goto LABEL_167;
  }
  if (*(unsigned char *)(a1 + 3640))
  {
    float v85 = v105;
    if ((v78 & v84 & 1) == 0
      && (-[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)a3, v80, v21, v19) & v78) == 1)
    {
      os_unfair_lock_lock(lock);
      *(unsigned char *)(a1 + 1285) = 1;
      os_unfair_lock_unlock(lock);
    }
    goto LABEL_179;
  }
LABEL_135:
  float v85 = v105;
LABEL_179:
  -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](a1, a3, v21);
  if ([*(id *)(a1 + 544) setMasterStream:a3 allStreams:*(void *)(a1 + 552)])
  {
    os_unfair_lock_lock(lock);
    *(unsigned char *)(a1 + 1285) = 0;
    os_unfair_lock_unlock(lock);
  }
  if (*(float *)(a1 + 1412) != v30 || *(unsigned char *)(a1 + 1440) && *(void **)(a1 + 1432) != v85)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1408));
    *(float *)(a1 + 1412) = v30;
    *(void *)(a1 + 1432) = v85;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1408));
  }
}

- (os_unfair_lock_s)overCaptureActiveSlaveStreamForcedOff
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = a1 + 956;
    os_unfair_lock_lock(a1 + 956);
    uint64_t v1 = (os_unfair_lock_s *)(BYTE1(v1[962]._os_unfair_lock_opaque) != 0);
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

- (uint64_t)_updateStatsMasterForMasterStream:(uint64_t)result
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 544))
    {
      if (*(unsigned char *)(result + 3640))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(result + 3824));
        if (*(unsigned char *)(v2 + 3849)) {
          BOOL v4 = *(_DWORD *)(v2 + 3852) < 1;
        }
        else {
          BOOL v4 = 0;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3824));
      }
      else
      {
        BOOL v4 = 0;
      }
      if (*(unsigned char *)(v2 + 1464)) {
        BOOL v5 = *(float *)(v2 + 4040) != 0.0;
      }
      else {
        BOOL v5 = 1;
      }
      int v6 = *(void **)(v2 + 544);
      if (!v6) {
        goto LABEL_17;
      }
      int v7 = !v5;
      if (!*(unsigned char *)(v2 + 600)) {
        int v7 = 1;
      }
      if (((v7 | v4) & 1) == 0)
      {
        if (!*(unsigned char *)(v2 + 601) || *(void *)(v2 + 576) != a2) {
          a2 = *(void *)(v2 + 496);
        }
      }
      else
      {
LABEL_17:
        a2 = 0;
      }
      return [v6 setCameraControlsStatisticsMasterStream:a2];
    }
  }
  return result;
}

- (void)_updateBravoStreamSelectionForMasterStream:(int)a3 forceNotification:
{
  v18[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v6 = (os_unfair_lock_s *)(a1 + 1280);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
    uint64_t v7 = 1344;
    if (!*(unsigned char *)(a1 + 1360)) {
      uint64_t v7 = 1328;
    }
    long long v16 = *(_OWORD *)(a1 + v7);
    uint64_t v8 = objc_msgSend(*(id *)(a1 + 1312), "selectionConfiguration", (void)v16);
    if (v8 == (void)v16 && v9 == *((void *)&v16 + 1))
    {
      os_unfair_lock_unlock(v6);
      if (!a3) {
        return;
      }
    }
    else
    {
      [*(id *)(a1 + 1312) setSelectionConfiguration:(void)v16];
      os_unfair_lock_unlock(v6);
    }
    float v11 = 1.0;
    if ((void)v16 == 3)
    {
      float v12 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 544), "clientBaseZoomFactorsByPortType"), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
      if (v12) {
        [v12 floatValue];
      }
      else {
        [a2 baseZoomFactor];
      }
      float v11 = v13;
    }
    v17[0] = @"NewPropertyValue";
    uint64_t v14 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v16 length:16];
    v17[1] = @"MinAvailableVideoZoomFactor";
    v18[0] = v14;
    *(float *)&double v15 = v11;
    v18[1] = [NSNumber numberWithFloat:v15];
    objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", @"BravoStreamSelectionConfigurationChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v18, v17, 2));
  }
}

- (void)_overCaptureSelectLockedStreamsForRecommendedMasterStream:(float)a3 requestedZoomFactor:(float)a4 currentFrameRate:
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  if (a1 && *(unsigned char *)(a1 + 3653))
  {
    BOOL v5 = *(void **)(a1 + 3656);
    if (v5)
    {
      int v6 = *(_DWORD *)(a1 + 3664) - 1;
      *(_DWORD *)(a1 + 3664) = v6;
      if (!v6)
      {

        *(void *)(a1 + 3656) = 0;
        *(_DWORD *)(a1 + 3664) = 0;
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_18:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      [*(id *)(a1 + 568) baseZoomFactor];
      if (v11 <= a3)
      {
        [*(id *)(a1 + 2736) appliedZoomFactor];
        float v13 = v12;
        [*(id *)(a1 + 568) baseZoomFactor];
        if (v13 >= v14)
        {
          if ((v15 = (uint64_t *)(a1 + 568), uint64_t v16 = *(void *)(a1 + 584), v17 = *(void *)(a1 + 576), v16 == v17)
            && v17 != a2
            || v16 == *v15 && *v15 != a2)
          {
            if (v16 == v17)
            {
              v21[0] = *(void *)(a1 + 584);
              double v15 = (uint64_t *)(a1 + 496);
              float v18 = v21;
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 496);
              float v18 = &v20;
            }
            v18[1] = *v15;
            *(void *)(a1 + 3656) = (id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:");
            *(_DWORD *)(a1 + 3664) = FigCaptureRoundFloatToMultipleOf(1, (float)((float)*(int *)(a1 + 3668) * a4) / 30.0);
            if (dword_1EB4C4FF0)
            {
              float v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
}

- (uint64_t)_overCaptureMasterStreamForZoomFactor:(uint64_t)a1
{
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 3650))
  {
    if (*(void *)(a1 + 576) || (uint64_t v4 = *(void *)(a1 + 568)) == 0) {
      uint64_t v4 = *(void *)(a1 + 496);
    }
    if (*(unsigned char *)(a1 + 1464))
    {
      if (*(_DWORD *)(a1 + 484) == 9)
      {
        [*(id *)(a1 + 568) baseZoomFactor];
        if (v6 <= a2) {
          return *(void *)(a1 + 568);
        }
      }
    }
    return v4;
  }
  if (*(unsigned char *)(a1 + 3651)) {
    return *(void *)(a1 + 584);
  }
  return -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, a2);
}

- (uint64_t)_overCaptureConfigureActiveSlaveStreamForMasterStream:(char)a3 zoomFactor:(float)a4 currentFrameRate:(float)a5 preferWider:
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v7 = -[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, a2, a3, a4, a5);
    uint64_t v8 = (void *)-[BWFigVideoCaptureDevice _overCaptureLockedSlaveStreamForMasterStream:recommendedSlaveStream:](a1, a2, v7);
    if ((objc_msgSend(*(id *)(a1 + 3136), "isEqualToString:", objc_msgSend(v8, "portType")) & 1) == 0)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v9 = *(void **)(a1 + 552);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        int v12 = 0;
        uint64_t v13 = *(void *)v19;
        while (1)
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v19 != v13) {
              objc_enumerationMutation(v9);
            }
            double v15 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            if (v15 != v8)
            {
              [*(id *)(*((void *)&v18 + 1) + 8 * i) setStreamingRequiredWhenConfiguredAsSlave:0];
LABEL_10:
              BOOL v16 = 0;
              goto LABEL_14;
            }
            v12 |= [v8 streamingRequiredWhenConfiguredAsSlave] ^ 1;
            [v8 setStreamingRequiredWhenConfiguredAsSlave:1];
            if (!*(unsigned char *)(a1 + 1464) && !*(unsigned char *)(a1 + 209)) {
              goto LABEL_10;
            }
            BOOL v16 = *(unsigned char *)(a1 + 3204) != 0;
LABEL_14:
            [v15 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:v16];
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
          if (!v11) {
            return v12 & 1;
          }
        }
      }
    }
  }
  LOBYTE(v12) = 0;
  return v12 & 1;
}

- (uint64_t)_overCaptureActiveSlaveStreamForZoomFactor:(char)a3 masterStream:(float)a4 currentFrameRate:(float)a5 preferWider:
{
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 3848)) {
    goto LABEL_14;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
  if (*(unsigned char *)(a1 + 3840))
  {
    if (!*(unsigned char *)(a1 + 3849))
    {
      *(unsigned char *)(a1 + 3849) = 1;
      float v10 = a5 * 4.0;
      if (a5 <= 0.0) {
        float v10 = 120.0;
      }
      *(_DWORD *)(a1 + 3852) = (int)v10;
    }
  }
  else if (*(unsigned char *)(a1 + 3849) && *(unsigned char *)(a1 + 3856))
  {
    *(unsigned char *)(a1 + 3849) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
  if (!*(unsigned char *)(a1 + 3849)) {
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 3852);
  BOOL v12 = __OFSUB__(v11, 1);
  int v13 = v11 - 1;
  if (v13 < 0 != v12) {
    return 0;
  }
  *(_DWORD *)(a1 + 3852) = v13;
LABEL_14:
  int v14 = objc_msgSend(*(id *)(a1 + 560), "indexOfObject:", -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, a4));
  int v15 = [*(id *)(a1 + 560) indexOfObject:a2];
  if (a3) {
    goto LABEL_18;
  }
  int v16 = v15 - v14;
  if (v15 - v14 < 0) {
    int v16 = v14 - v15;
  }
  if (v16 != 1)
  {
LABEL_18:
    if (v15) {
      int v14 = v15 - 1;
    }
    else {
      int v14 = 1;
    }
  }
  uint64_t v17 = *(void **)(a1 + 560);
  return [v17 objectAtIndexedSubscript:v14];
}

- (uint64_t)_overCaptureLockedSlaveStreamForMasterStream:(uint64_t)a3 recommendedSlaveStream:
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  BOOL v5 = *(void **)(a1 + 3656);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        if (*(void *)(*((void *)&v11 + 1) + 8 * i) != a2) {
          return *(void *)(*((void *)&v11 + 1) + 8 * i);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  return a3;
}

- (float)_nextLargerBaseZoomFactorForRequestedZoomFactor:(uint64_t)a1
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v2 = 0.0;
  if (a1)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v4 = *(void **)(a1 + 560);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v25;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v25 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          [v9 baseZoomFactor];
          if (v10 >= a2)
          {
            [v9 baseZoomFactor];
            return v18;
          }
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v11 = objc_msgSend(v9, "nondisruptiveSwitchingZoomFactors", 0);
          uint64_t v12 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v21;
            while (2)
            {
              for (uint64_t j = 0; j != v13; ++j)
              {
                if (*(void *)v21 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = *(void **)(*((void *)&v20 + 1) + 8 * j);
                [v16 floatValue];
                if (v17 >= a2)
                {
                  [v16 floatValue];
                  return v18;
                }
              }
              uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
              if (v13) {
                continue;
              }
              break;
            }
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
  }
  return v2;
}

- (void)_sendPreferredMasterStreamChangedNotificationWithPortType:(void *)result
{
  v3[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    float v2 = @"NewPropertyValue";
    v3[0] = a2;
    return objc_msgSend(result, "_postNotificationWithPayload:notificationPayload:", @"PreferredBravoMasterStreamChangedNotification", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
  }
  return result;
}

- (void)_updateStreamingImageIntentForChangedMasterStreamWithPortType:(uint64_t)a1
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 2112))
    {
      float v2 = *(NSObject **)(a1 + 1552);
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      void v3[2] = __89__BWFigVideoCaptureDevice__updateStreamingImageIntentForChangedMasterStreamWithPortType___block_invoke;
      v3[3] = &unk_1E5C24458;
      v3[4] = a1;
      v3[5] = a2;
      dispatch_async(v2, v3);
    }
  }
}

uint64_t __301__BWFigVideoCaptureDevice__initWithCaptureDevice_attributes_synchronizedStreamsAttributes_unsynchronizedStreamsAttributes_multiCamEnabled_applicationID_clientAuditToken_tccIdentity_mediaEnvironment_deviceVendor_createAutofocusSampleBufferProcessorFunction_cameraParameters_deviceClientPriority_error___block_invoke(uint64_t a1, void *a2, void *a3)
{
  [a2 baseZoomFactor];
  float v5 = v4;
  [a3 baseZoomFactor];
  if (v5 >= v6) {
    return 1;
  }
  else {
    return -1;
  }
}

- (void)setCinematicFramingEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (self->_cinematicFramingEnabled != a3)
  {
    self->_cinematicFramingEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_cinematicFramingStartTime = v5;
    }
    else {
      self->_cinematicFramingTotalTime += v5 - self->_cinematicFramingStartTime;
    }
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * v10++) setCinematicFramingEnabled:v3];
      }
      while (v8 != v10);
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (NSDictionary)sensorIDDictionaryByPortType
{
  return self->_sensorIDDictionaryByPortType;
}

- (BOOL)smartCameraEnabled
{
  return (BOOL)self->_zoomFactorChangedDelegate;
}

- (void)captureStreamWillStartStreaming:(id)a3
{
  if (self->_captureStream == a3) {
    -[BWFigVideoCaptureDevice _deviceWillStartStreaming]((uint64_t)self);
  }
  synchronizedStreamsStartStopSynchronizer = self->_synchronizedStreamsStartStopSynchronizer;
  [(BWStreamStartStopSynchronizer *)synchronizedStreamsStartStopSynchronizer streamWillStart:a3];
}

- (void)setZoomFactorChangedDelegate:(id)a3 forPortType:(id)a4
{
  if (!a3 || !self->_previewTimeMachineProcessor)
  {
    self->_previewTimeMachineProcessor = (BWPreviewTimeMachineProcessor *)a3;
    if (!a3) {
      a4 = 0;
    }
    self->_smartStyleAttachedMediaTimeMachineDelegate = (FigWeakReference *)a4;
  }
}

- (void)setBravoStreamSelectionEligibleFallbackPortTypes:(id)a3
{
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  [(BWBravoStreamSelector *)self->_bravoStreamSelector setEligibleFallbackPortTypes:a3];
  os_unfair_lock_unlock(p_switchOverLock);
}

- (void)setVideoStabilizationStrength:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HIDWORD(self->_defaultContinuousAutoFocusWindowSize.height) = a3;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * i) setVideoStabilizationStrength:v3];
      }
      uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
  if (SHIDWORD(self->_defaultContinuousAutoFocusWindowSize.height) >= 3)
  {
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    self->_nextStreamingImageIntent = 8;
    self->_streamingImageIntentNeedsUpdate = 1;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
  }
}

- (void)setShallowDepthOfFieldEffectEnabled:(BOOL)a3
{
  self->_shallowDepthOfFieldEffectEnabled = a3;
  if (!self->_sdofSceneMonitoringEnabled) {
    return;
  }
  BOOL v3 = a3;
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  portraitSceneMonitor = self->_portraitSceneMonitor;
  if (isKindOfClass) {
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    portraitSceneMonitor = self->_portraitSceneMonitor;
LABEL_5:
    [(BWPortraitSceneMonitor *)portraitSceneMonitor setShallowDepthOfFieldRenderingEnabled:v3];
  }
  os_unfair_lock_unlock(p_sdofLock);
}

- (void)zoomCommandHandler:(id)a3 didApplyZoomFactor:(float)a4 zoomFactorWithoutFudge:(float)a5 targetZoomFactor:(float)a6 rampComplete:(BOOL)a7 rampCommandID:(int)a8
{
  v19[4] = *MEMORY[0x1E4F143B8];
  if (a8)
  {
    uint64_t v10 = *(void *)&a8;
    BOOL v11 = a7;
    v18[0] = @"ZoomFactor";
    *(float *)&double v13 = a5;
    v19[0] = objc_msgSend(NSNumber, "numberWithFloat:", a3, v13);
    v18[1] = @"TargetZoomFactor";
    *(float *)&double v14 = a6;
    v19[1] = [NSNumber numberWithFloat:v14];
    v18[2] = @"ZoomRampCommandID";
    v19[2] = [NSNumber numberWithInt:v10];
    void v18[3] = @"ZoomRampComplete";
    v19[3] = [NSNumber numberWithBool:v11];
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"VideoZoomRampUpdate", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:4]);
  }
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __132__BWFigVideoCaptureDevice_zoomCommandHandler_didApplyZoomFactor_zoomFactorWithoutFudge_targetZoomFactor_rampComplete_rampCommandID___block_invoke;
  block[3] = &unk_1E5C262A0;
  block[4] = self;
  float v17 = a4;
  dispatch_async(focusAndExposureUpdateQueue, block);
}

- (float)maxContinuousZoomFactorForDepthDataDelivery
{
  return *(float *)&self->_depthFilteringEnabled;
}

- (BOOL)setAutoFlashEnabled:(BOOL)a3 error:(id *)a4
{
  if (a3) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 0;
  }
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  uint64_t flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  uint64_t hdrModeForSceneMonitoring = self->_hdrModeForSceneMonitoring;
  uint64_t digitalFlashModeForSceneMonitoring = self->_digitalFlashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  [(BWFigVideoCaptureDevice *)self setStillImageSceneMonitoringFlashMode:v5 hdrMode:flashModeForSceneMonitoring qualityPrioritization:hdrModeForSceneMonitoring digitalFlashMode:digitalFlashModeForSceneMonitoring];
  return 1;
}

- (int)setStillImageSceneMonitoringFlashMode:(int)a3 hdrMode:(int)a4 qualityPrioritization:(int)a5 digitalFlashMode:(int)a6
{
  uint64_t v18 = 0;
  long long v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  int flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  if ((a4 & 0xFFFFFFFD) == 0 && flashModeForSceneMonitoring != a4)
  {
    autofocusProcessorQueue = self->_autofocusProcessorQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __112__BWFigVideoCaptureDevice_setStillImageSceneMonitoringFlashMode_hdrMode_qualityPrioritization_digitalFlashMode___block_invoke;
    block[3] = &unk_1E5C2B8E8;
    int v17 = a4;
    block[4] = self;
    void block[5] = &v18;
    dispatch_sync(autofocusProcessorQueue, block);
  }
  if (*((_DWORD *)v19 + 6))
  {
    FigDebugAssert3();
  }
  else
  {
    os_unfair_lock_lock(p_frameStatisticsLock);
    LODWORD(self->_maxTorchLevel) = a3;
    self->_int flashModeForSceneMonitoring = a4;
    self->_uint64_t hdrModeForSceneMonitoring = a5;
    self->_uint64_t digitalFlashModeForSceneMonitoring = a6;
    HIBYTE(self->_qualityPrioritizationForSceneMonitoring) = 1;
    os_unfair_lock_unlock(p_frameStatisticsLock);
  }
  int v14 = *((_DWORD *)v19 + 6);
  _Block_object_dispose(&v18, 8);
  return v14;
}

uint64_t __70__BWFigVideoCaptureDevice__setAutoImageControlMode_completionHandler___block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(result + 56);
  if (*(_DWORD *)(v1 + 1820) != v2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(v1 + 1820) = v2;
    uint64_t result = *(void *)(result + 32);
    if (*(unsigned char *)(result + 1816))
    {
      int v4 = *(_DWORD *)(result + 1824);
      if (*(_DWORD *)(result + 1820) != v4)
      {
        uint64_t result = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](result, *(_DWORD *)(v3 + 56));
        *(_DWORD *)(*(void *)(*(void *)(v3 + 40) + 8) + 24) = result;
        if (!*(_DWORD *)(*(void *)(*(void *)(v3 + 40) + 8) + 24)) {
          *(_DWORD *)(*(void *)(*(void *)(v3 + 48) + 8) + 24) = v4;
        }
      }
    }
  }
  return result;
}

- (uint64_t)_setAutofocusProcessorImageControlModeProperty:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    if (!_FigIsCurrentDispatchQueue()) {
      FigDebugAssert3();
    }
    if (*(_DWORD *)(v3 + 1824) == a2)
    {
      return 0;
    }
    else
    {
      int v4 = (const void *)+[BWFigVideoCaptureDevice _autofocusProcessorImageControlModeFromImageControlMode:]((uint64_t)BWFigVideoCaptureDevice, a2);
      if (v4)
      {
        uint64_t result = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](v3, @"AutofocusProcessor_VideoMode", v4);
        if (!result)
        {
          *(_DWORD *)(v3 + 1824) = a2;
          if (a2 == 2)
          {
            uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(v3 + 496), "stream"), "supportedProperties");
            BOOL v6 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F547F0]] != 0;
          }
          else
          {
            BOOL v6 = 0;
          }
          uint64_t result = 0;
          *(unsigned char *)(v3 + 1868) = v6;
        }
      }
      else
      {
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

+ (uint64_t)_autofocusProcessorImageControlModeFromImageControlMode:(uint64_t)a1
{
  self;
  switch(a2)
  {
    case 0:
      uint64_t result = 0x1EFA5A220;
      break;
    case 1:
      uint64_t result = 0x1EFA5A240;
      break;
    case 2:
      uint64_t result = 0x1EFA5A260;
      break;
    case 3:
      uint64_t result = 0x1EFA5A280;
      break;
    case 4:
      uint64_t result = 0x1EFA5A2A0;
      break;
    case 5:
      uint64_t result = 0x1EFA5A2C0;
      break;
    case 6:
      uint64_t result = 0x1EFA5A2E0;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke_2(uint64_t a1)
{
  v9[7] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 3698) && *(_DWORD *)(v2 + 1820) == 2) {
    uint64_t v3 = MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v3 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 88)];
  }
  v8[0] = @"x";
  v9[0] = [NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v8[1] = @"y";
  v9[1] = [NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v8[2] = @"w";
  v9[2] = [NSNumber numberWithDouble:*(double *)(a1 + 56)];
  v8[3] = @"h";
  v9[3] = [NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v8[4] = @"near";
  LODWORD(v4) = *(_DWORD *)(a1 + 80);
  v9[4] = [NSNumber numberWithFloat:v4];
  v8[5] = @"far";
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  v8[6] = @"smooth";
  v9[5] = [NSNumber numberWithFloat:v5];
  v9[6] = v3;
  BOOL v6 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:7];
  -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(void *)(a1 + 32), @"ContinuousAutoFocusUseStrictAreaOfInterest", (const void *)[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 89)]);
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(void *)(a1 + 32), *(void **)(a1 + 72), v6);
}

- (uint64_t)_setAutofocusProcessorPropertyInternal:(const void *)a3 propertyValue:
{
  if (!a1) {
    return 0;
  }
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v14 = v3;
    LODWORD(v13) = 0;
    FigDebugAssert3();
  }
  if (*(void *)(a1 + 1600))
  {
    -[BWFigVideoCaptureDevice _updateDeferredAutofocusProcessorPropertyStatesForProperty:](a1, a2);
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    BOOL v11 = *(uint64_t (**)(uint64_t, void *, const void *))(v9 + 56);
    if (v11)
    {
      uint64_t v10 = v11(FigBaseObject, a2, a3);
      if (!v10)
      {
        -[BWFigVideoCaptureDevice _updateExposureStateForAutofocusProperty:](a1, a2);
        -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:](a1, a2, a3);
        -[BWFigVideoCaptureDevice _updateFaceDetectionStateForAutofocusProperty:propertyValue:](a1, a2, a3);
        -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:](a1, a2, a3);
        -[BWFigVideoCaptureDevice _updateBravoSwitchOverStateForAutofocusProperty:propertyValue:](a1, a2);
      }
    }
    else
    {
      uint64_t v10 = 4294954514;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (!a3 || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1D260])) {
    a3 = (const void *)objc_msgSend(MEMORY[0x1E4F1CA98], "null", v13, v14);
  }
  objc_msgSend(*(id *)(a1 + 1584), "setObject:forKeyedSubscript:", a3, a2, v13);
  -[BWFigVideoCaptureDevice _updateSceneMonitorFocusStateForAutofocusProperty:propertyValue:](a1, a2);
  return v10;
}

- (void)_updateSceneMonitorFocusStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1
{
  if (a1)
  {
    BOOL v4 = CFEqual(cf1, @"ContinuousAutoFocus")
      || (unint64_t)(CFEqual(cf1, @"ContinuousAutoFocusAreaOfInterest") != 0);
    BOOL v5 = CFEqual(cf1, @"ManualFocus") || (unint64_t)(CFEqual(cf1, @"FocusLock") != 0);
    int v6 = CFEqual(cf1, @"FocusScan");
    if (v4 || v5 || v6)
    {
      BOOL v7 = v6 != 0;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1492));
      [*(id *)(a1 + 1512) setAutoFocusInProgress:v4 focusLocked:v5 oneShotFocusScanInProgress:v7];
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1492));
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1540));
      [*(id *)(a1 + 1528) setAutoFocusInProgress:v4 focusLocked:v5 oneShotFocusScanInProgress:v7];
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1540));
    }
  }
}

- (uint64_t)_updateWhiteBalanceStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (CFEqual(cf1, @"AutoWhiteBalanceLock"))
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)a3))
    {
      int v7 = 0;
      char v8 = 1;
LABEL_8:
      pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 1592));
      *(unsigned char *)(v5 + 1644) = v8;
      if (v7)
      {
        uint64_t v20 = @"NewPropertyValue";
        uint64_t v21 = MEMORY[0x1E4F1CC38];
        objc_msgSend((id)v5, "_postNotificationWithPayload:notificationPayload:", @"AWBStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
      }
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 1592));
    }
LABEL_7:
    char v8 = 0;
    int v7 = 1;
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"WhiteBalanceGains")) {
    goto LABEL_7;
  }
  uint64_t result = CFEqual(cf1, @"AutofocusProcessor_VideoMode");
  if (result)
  {
    uint64_t result = [&unk_1EFB042F8 containsObject:FigCaptureGetModelSpecificName()];
    if ((result & 1) == 0)
    {
      BOOL v9 = !CFEqual(a3, @"Mode_StillPreview") && (unint64_t)(CFEqual(a3, @"Mode_Panorama") == 0);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v10 = *(void **)(v5 + 552);
      uint64_t result = [v10 countByEnumeratingWithState:&v16 objects:v22 count:16];
      if (result)
      {
        uint64_t v11 = result;
        uint64_t v12 = *(void *)v17;
        uint64_t v13 = *MEMORY[0x1E4F54788];
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v17 != v12) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = (void *)[*(id *)(*((void *)&v16 + 1) + 8 * v14) stream];
            objc_msgSend(v15, "setPropertyIfSupported:value:", v13, objc_msgSend(NSNumber, "numberWithBool:", v9));
            ++v14;
          }
          while (v11 != v14);
          uint64_t result = [v10 countByEnumeratingWithState:&v16 objects:v22 count:16];
          uint64_t v11 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

- (uint64_t)_updateImageControlModeStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (*(unsigned char *)(result + 1816))
    {
      uint64_t result = CFEqual(cf1, @"AutofocusProcessor_VideoMode");
      if (result)
      {
        if (!a3) {
          return FigDebugAssert3();
        }
        CFTypeID v5 = CFGetTypeID(a3);
        if (v5 != CFStringGetTypeID()) {
          return FigDebugAssert3();
        }
        if (CFEqual(a3, @"Mode_StillPreview"))
        {
          uint64_t v6 = 0;
        }
        else if (CFEqual(a3, @"Mode_VideoPreview"))
        {
          uint64_t v6 = 1;
        }
        else if (CFEqual(a3, @"Mode_VideoRecording"))
        {
          uint64_t v6 = 2;
        }
        else if (CFEqual(a3, @"Mode_Conference"))
        {
          uint64_t v6 = 3;
        }
        else if (CFEqual(a3, @"Mode_Panorama"))
        {
          uint64_t v6 = 4;
        }
        else if (CFEqual(a3, @"Mode_TimeLapsePreview"))
        {
          uint64_t v6 = 5;
        }
        else
        {
          uint64_t result = CFEqual(a3, @"Mode_TimeLapseCapture");
          if (!result) {
            return result;
          }
          uint64_t v6 = 6;
        }
        int v7 = @"NewPropertyValue";
        v8[0] = [NSNumber numberWithInt:v6];
        return objc_msgSend(v3, "_postNotificationWithPayload:notificationPayload:", @"ImageControlModeChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
      }
    }
  }
  return result;
}

- (uint64_t)_updateExposureStateForAutofocusProperty:(uint64_t)result
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    if (CFEqual(cf1, @"SpotMeteredExposure")) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = CFEqual(cf1, @"AutoExposure") != 0;
    }
    if (CFEqual(cf1, @"ManualExposure"))
    {
      BOOL v5 = 1;
      goto LABEL_7;
    }
    uint64_t result = CFEqual(cf1, @"ExposureLock");
    BOOL v5 = result != 0;
    if (v4 || result)
    {
LABEL_7:
      pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 1592));
      *(unsigned char *)(v3 + 1608) = v4;
      if (v4)
      {
        *(void *)(v3 + 1636) = (*(_DWORD *)(v3 + 1636) + 1);
        HostTimeClocuint64_t k = CMClockGetHostTimeClock();
        CMClockGetTime(&v7, HostTimeClock);
        *(CMTime *)(v3 + 1612) = v7;
        if (!v5) {
          return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1592));
        }
      }
      else
      {
        *(_DWORD *)(v3 + 1636) = 0;
        if (!v5) {
          return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1592));
        }
      }
      char v8 = @"NewPropertyValue";
      v9[0] = MEMORY[0x1E4F1CC38];
      objc_msgSend((id)v3, "_postNotificationWithPayload:notificationPayload:", @"AEStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1));
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1592));
    }
  }
  return result;
}

- (uint64_t)_updateDeferredAutofocusProcessorPropertyStatesForProperty:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = _FigIsCurrentDispatchQueue();
    if (!result) {
      uint64_t result = FigDebugAssert3();
    }
    if (*(unsigned char *)(v3 + 1647))
    {
      uint64_t result = [a2 isEqualToString:0x1EFA59EE0];
      if ((result & 1) != 0
        || (uint64_t result = [a2 isEqualToString:0x1EFA5A300], (result & 1) != 0)
        || (uint64_t result = [a2 isEqualToString:0x1EFA59F40], (result & 1) != 0)
        || (uint64_t result = [a2 isEqualToString:0x1EFA59F20], result))
      {
        *(unsigned char *)(v3 + 1647) = 0;
      }
    }
    if (*(unsigned char *)(v3 + 1648))
    {
      uint64_t result = [a2 isEqualToString:0x1EFA5A3E0];
      if ((result & 1) != 0 || (uint64_t result = [a2 isEqualToString:0x1EFA5A3C0], result)) {
        *(unsigned char *)(v3 + 1648) = 0;
      }
    }
  }
  return result;
}

- (void)_updateBravoSwitchOverStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1
{
  if (!a1) {
    return;
  }
  int v4 = CFEqual(cf1, @"ContinuousAutoFocus");
  if (CFEqual(cf1, @"ManualFocus")) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = CFEqual(cf1, @"FocusLock") != 0;
  }
  int v6 = CFEqual(cf1, @"FocusScan");
  if (CFEqual(cf1, @"SpotMeteredExposure")) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = CFEqual(cf1, @"AutoExposure") != 0;
  }
  if (CFEqual(cf1, @"ManualExposure"))
  {
    if (v4) {
      char v8 = 1;
    }
    else {
      char v8 = v5;
    }
    BOOL v9 = (os_unfair_lock_s *)(a1 + 1280);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
    if ((v8 & 1) == 0)
    {
      BOOL v10 = 1;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v11 = CFEqual(cf1, @"ExposureLock");
  BOOL v10 = v11 != 0;
  if (v4) {
    int v12 = 1;
  }
  else {
    int v12 = v5;
  }
  if (v6) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  if (((v13 | v7) & 1) != 0 || v11)
  {
    BOOL v9 = (os_unfair_lock_s *)(a1 + 1280);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
    if (!v12)
    {
LABEL_25:
      if (v6)
      {
        *(unsigned char *)(a1 + 1324) = 1;
      }
      else if (v7 || v10)
      {
        [*(id *)(a1 + 1312) exposureModeDidChange];
      }
      goto LABEL_29;
    }
LABEL_24:
    [*(id *)(a1 + 1312) focusModeDidChange];
LABEL_29:
    os_unfair_lock_unlock(v9);
  }
}

- (void)setAttachesUprightExifOrientationMetadataToStreamingFrames:(BOOL)a3
{
  BYTE4(self->_zoomFactorChangedDelegatePortType) = a3;
}

- (BOOL)attachesUprightExifOrientationMetadataToStreamingFrames
{
  return BYTE4(self->_zoomFactorChangedDelegatePortType);
}

- (BOOL)cinematicVideoEnabled
{
  return self->_variableFrameRateUpdateLock._os_unfair_lock_opaque;
}

- (NSDictionary)baseZoomFactorsByPortType
{
  return [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup baseZoomFactorsByPortType];
}

- (BOOL)isExternalVariant
{
  return BWDeviceTypeIsExtensionDeviceType(self->_deviceType);
}

- (BOOL)clientExpectsCameraMountedInLandscapeOrientation
{
  return self->_firstValidFramePTS.timescale;
}

- (void)setStillImageCaptureEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * i) setStillImageCaptureEnabled:v3];
      }
      uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
  if (!v3) {
    [(BWFigVideoCaptureDevice *)self setUnifiedBracketingMode:0];
  }
  self->_flashScene = v3;
}

- (void)registerForAEMatrixMetadata
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v3 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    uint64_t v6 = *MEMORY[0x1E4F54728];
    uint64_t v7 = MEMORY[0x1E4F1CC38];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(captureStreams);
        }
        objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "stream"), "setPropertyIfSupported:value:", v6, v7);
      }
      uint64_t v4 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

- (void)setUltraHighResolutionZeroShutterLagSupportEnabled:(BOOL)a3
{
  if (a3)
  {
    if (self->_multipleSensorRawBufferPoolsEnabled)
    {
      BYTE5(self->_mostRecentSmartCameraResult) = a3;
      BOOL isRunningInXCTest = self->_isRunningInXCTest;
      HIBYTE(self->_mostRecentSmartCameraResult) = !isRunningInXCTest;
      if (isRunningInXCTest && dword_1EB4C4FF0 != 0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    BYTE5(self->_mostRecentSmartCameraResult) = 0;
    HIBYTE(self->_mostRecentSmartCameraResult) = 0;
    [(BWFigVideoCaptureDevice *)self setUltraHighResolutionZeroShutterLagEnabled:0];
  }
}

- (void)setUltraHighResolutionZeroShutterLagEnabled:(BOOL)a3
{
  int v3 = a3;
  if (!a3 || BYTE5(self->_mostRecentSmartCameraResult))
  {
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    if (BYTE6(self->_mostRecentSmartCameraResult) != v3) {
      BYTE6(self->_mostRecentSmartCameraResult) = v3;
    }
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
  }
}

- (void)sendCalibrationDataToISP
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = [+[FigCaptureCalibrationMonitor sharedInstance] autoFocusPositionSensorCalibrationData];
  if ((int)FigCapturePlatformIdentifier() < 6)
  {
    id v4 = 0;
    id v5 = 0;
  }
  else
  {
    id v4 = [+[FigCaptureCalibrationMonitor sharedInstance] autoFocusCalibrationData];
    id v5 = [+[FigCaptureCalibrationMonitor sharedInstance] apsSphereInteractionCalibrationData];
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    uint64_t v17 = *MEMORY[0x1E4F547D8];
    uint64_t v16 = *MEMORY[0x1E4F547B8];
    uint64_t v10 = *MEMORY[0x1E4F547F8];
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        long long v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if ((objc_msgSend((id)objc_msgSend(v12, "stream", v16), "calibrationDataSent") & 1) == 0)
        {
          uint64_t v13 = objc_msgSend(v3, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v13) {
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v17, v13);
          }
          uint64_t v14 = objc_msgSend(v4, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v14) {
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v16, v14);
          }
          uint64_t v15 = objc_msgSend(v5, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v15) {
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v10, v15);
          }
          objc_msgSend((id)objc_msgSend(v12, "stream"), "setCalibrationDataSent:", 1);
        }
      }
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }
}

- (BWFigVideoCaptureDevice)initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceClientPriority:(int)a12 error:(int *)a13
{
  BOOL v23 = a7;
  id v17 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
  long long v18 = +[FigCaptureCameraParameters sharedInstance];
  long long v19 = *(_OWORD *)&a9->var0[4];
  v25[0] = *(_OWORD *)a9->var0;
  v25[1] = v19;
  LODWORD(v21) = a12;
  return (BWFigVideoCaptureDevice *)[(BWFigVideoCaptureDevice *)self _initWithCaptureDevice:a3 attributes:a4 synchronizedStreamsAttributes:a5 unsynchronizedStreamsAttributes:a6 multiCamEnabled:v23 applicationID:a8 clientAuditToken:v25 tccIdentity:a10 mediaEnvironment:a11 deviceVendor:v17 createAutofocusSampleBufferProcessorFunction:FigSampleBufferProcessorCreateForAutofocus cameraParameters:v18 deviceClientPriority:v21 error:a13];
}

- (void)setMaxTorchLevel:(float)a3
{
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  self->_float torchLevel = a3;
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  LODWORD(v5) = -8388609;
  [(BWFigVideoCaptureDevice *)self setTorchLevel:v5];
}

- (BWFigCaptureDevice)device
{
  return self->_device;
}

- (BOOL)hasFlash
{
  return self->_hasFlash;
}

- (BOOL)parallaxMitigationBasedOnZoomFactorEnabled
{
  return self->_parallaxMitigationBasedOnZoomFactorEnabled;
}

uint64_t __47__BWFigVideoCaptureDevice_autoImageControlMode__block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 1820);
  return result;
}

- (void)setZoomPIPMinimumUIZoomFactor:(float)a3
{
  *(float *)&self->_depthFormatDimensions.width = a3;
}

- (void)setZeroShutterLagTimeMachineBufferCapacity:(int)a3
{
  HIDWORD(self->_currentStillSmartCameraResult) = a3;
}

- (void)setZeroShutterLagEnabled:(BOOL)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (BYTE4(self->_mostRecentSmartCameraResult) != a3)
  {
    BYTE4(self->_mostRecentSmartCameraResult) = a3;
    -[BWFigVideoCaptureDevice _ubSetupMetadataTimeMachine]((uint64_t)self);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    captureStreams = self->_captureStreams;
    uint64_t v5 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(captureStreams);
          }
          if (BYTE4(self->_mostRecentSmartCameraResult)) {
            BOOL v9 = self->_unifiedBracketingMode != 2;
          }
          else {
            BOOL v9 = 0;
          }
          [*(id *)(*((void *)&v10 + 1) + 8 * i) setZeroShutterLagEnabled:v9];
        }
        uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }
  }
}

- (void)setWideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled:(BOOL)a3
{
  self->_wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled = a3;
}

- (void)setWideCaptureStreamAsStatsMasterPreferred:(BOOL)a3
{
  self->_wideCaptureStreamAsStatsMasterPreferred = a3;
}

- (void)setVariableFrameRateControlEnabled:(BOOL)a3
{
  BYTE3(self->_previewShiftInSensorSpace.x) = a3;
}

- (void)setUiBaseZoomFactor:(float)a3
{
  *(float *)&self->_depthFormatDimensions.height = a3;
}

- (void)setTrueVideoCaptureEnabled:(BOOL)a3
{
  LOBYTE(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (void)setTimeOfFlightProjectorMode:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [(BWFigVideoCaptureStream *)self->_captureStream portType];
  if ([(NSString *)v5 isEqualToString:*MEMORY[0x1E4F52DE0]])
  {
    uint64_t v9 = *MEMORY[0x1E4F55690];
    v10[0] = [NSNumber numberWithInt:v3];
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    uint64_t v7 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    [(BWFigCaptureStream *)v7 setProperty:*MEMORY[0x1E4F54C60] value:v6];
    if (v3 > 6) {
      int v8 = 0;
    }
    else {
      int v8 = dword_1A5F0D010[(int)v3];
    }
    self->_timeOfFlightCameraProjectorModeMask |= v8;
  }
}

- (void)setTemporalNoiseReductionStrengthHighEnabled:(BOOL)a3
{
  HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTemporalNoiseReductionRawEnabled:(BOOL)a3
{
  BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTemporalNoiseReductionEnabled:(BOOL)a3
{
  LOBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTemporalNoiseReductionBand0Disabled:(BOOL)a3
{
  BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTargetFrameRateWhenNotRecording:(int)a3
{
  HIDWORD(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch) = a3;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (void)setStudioLightingSupported:(BOOL)a3
{
  self->_studioLightingSupported = a3;
}

- (void)setStreamingSessionAnalyticsVideoDimensions:(id)a3
{
  *($2825F4736939C4A6D3AD43837233062D *)(&self->_captureInitiatedOnce + 4) = a3;
}

- (void)setStreamingSessionAnalyticsPixelFormat:(unsigned int)a3
{
  *(_DWORD *)&self->_captureInitiatedOnce = a3;
}

- (void)setStreamingSessionAnalyticsMixWithOthersEnabled:(BOOL)a3
{
  BYTE2(self->_firstValidFramePTS.timescale) = a3;
}

- (void)setStreamingSessionAnalyticsHighlightRecoveryEnabled:(BOOL)a3
{
  BYTE4(self->_exifFocalLengthsByZoomFactor) = a3;
}

- (void)setStreamingSessionAnalyticsClientIsVOIP:(BOOL)a3
{
  BYTE5(self->_exifFocalLengthsByZoomFactor) = a3;
}

- (void)setStillImageSupportedHighResolutionFlavorsByPortType:(id)a3
{
}

- (void)setStillImageSashimiRawCaptureWithDepthEnabled:(BOOL)a3
{
  BYTE3(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStillImageISPMultiBandNoiseReductionEnabled:(BOOL)a3
{
  LOBYTE(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStillImageFocusPixelDataCaptureWithDepthEnabled:(BOOL)a3
{
  BYTE2(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStereoVideoCaptureEnabled:(BOOL)a3
{
  if (self->_stereoVideoCaptureEnabled != a3)
  {
    self->_stereoVideoCaptureEnabled = a3;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setStereoFusionEnabled:(BOOL)a3
{
  self->_stereoFusionEnabled = a3;
}

- (void)setSmartCameraEnabled:(BOOL)a3
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (LOBYTE(self->_zoomFactorChangedDelegate) != a3)
  {
    LOBYTE(self->_zoomFactorChangedDelegate) = a3;
    uint64_t v6 = @"NewPropertyValue";
    v7[0] = objc_msgSend(NSNumber, "numberWithBool:");
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"SmartCameraEnabledChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1]);
    if (*(void *)&self->_visionDataMaxFrameRate)
    {
      id v4 = @"NewPropertyValue";
      uint64_t v5 = MEMORY[0x1E4F1CC08];
      -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"SceneClassificationConfidencesChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v5 forKeys:&v4 count:1]);
    }
  }
}

- (void)setSensorRegionOfInterestForCameraControls:(CGRect)a3
{
  if (*((unsigned char *)&self->_maxSystemPressureLevel + 4))
  {
    *(CGRect *)&self->_timeToCriticalSystemPressureInMS = a3;
    LODWORD(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.width) = (int)(a3.size.width
                                                                                              + a3.origin.x * 2.0);
    HIDWORD(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.width) = (int)(a3.size.height
                                                                                              + a3.origin.y * 2.0);
    FigCaptureMetadataUtilitiesNormalizeCropRect(a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
    self->_regionOfInterestForCameraControls.size.width = v4;
    self->_regionOfInterestForCameraControls.size.height = v5;
    self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.origin.double x = v6;
    self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.origin.double y = v7;
  }
}

- (void)setRebuildingGraphForTrueVideoTransition:(BOOL)a3
{
  BYTE1(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (void)setReactionEffectsSupported:(BOOL)a3
{
  self->_reactionEffectsSupported = a3;
}

- (void)setPreferredMasterPortType:(id)a3
{
}

- (void)setPortraitAutoSuggestEnabled:(BOOL)a3
{
  self->_portraitAutoSuggestEnabled = a3;
}

- (void)setPhotoFormat:(BOOL)a3
{
  self->_photoFormat = a3;
}

- (void)setOverCapturePercentage:(float)a3
{
  *(float *)(&self->_lumaHistogramsEnabled + 3) = a3;
}

- (void)setOptimizesZoomRampsForVISZoomSmoothing:(BOOL)a3
{
  BYTE1(self->_firstValidFramePTS.timescale) = a3;
}

- (void)setNumberOfActiveTimeMachines:(int)a3
{
  self->_firstValidFramePTS.flags = a3;
}

- (void)setMomentCaptureVideoRecordingSupported:(BOOL)a3
{
  if (BYTE2(self->_previewShiftInSensorSpace.x) != a3)
  {
    BYTE2(self->_previewShiftInSensorSpace.x) = a3;
    if (a3 && !BYTE1(self->_memoryPool)) {
      BYTE1(self->_memoryPool) = 1;
    }
  }
}

- (void)setMaxOverscanVideoStabilizationMethod:(int)a3
{
  LODWORD(self->_defaultContinuousAutoFocusWindowSize.height) = a3;
}

- (void)setMaxContinuousZoomFactorForDepthDataDelivery:(float)a3
{
  if (*(float *)&self->_depthFilteringEnabled != a3
    && ![(BWFigVideoCaptureStream *)self->_captureStream started])
  {
    *(float *)&self->_depthFilteringEnabled = a3;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setManualCinematicFramingEnabled:(BOOL)a3
{
  LOBYTE(self->_depthDataDeliveryZoomRange) = a3;
}

- (void)setLumaHistogramsEnabled:(BOOL)a3
{
  BYTE1(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.height) = a3;
}

- (void)setFullBinSIFROnSecondaryCameraAllowed:(BOOL)a3
{
  *(&self->_manualCinematicFramingEnabled + 3) = a3;
}

- (void)setFrameSkippingWhenNotRecordingEnabled:(BOOL)a3
{
  LOBYTE(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch) = a3;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (void)setFocusPixelsEnabled:(BOOL)a3
{
  BYTE1(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setFaceDrivenAEAFEnabledByDefault:(BOOL)a3
{
  self->_faceDrivenAEAFEnabledByDefault = a3;
}

- (void)setDigitalFlashMetadataEnabled:(BOOL)a3
{
  if (self->_digitalFlashMetadataEnabled != a3)
  {
    self->_digitalFlashMetadataEnabled = a3;
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
  }
}

- (void)setDigitalFlashDetectedObjectTypes:(id)a3
{
  self->_digitalFlashDetectedObjectTypes = (NSArray *)a3;
}

- (void)setDepthType:(int)a3
{
  self->_depthType = a3;
}

- (void)setDepthPixelFormat:(unsigned int)a3
{
  self->_centerStageFramingMode = a3;
}

- (void)setDepthFormatDimensions:(id)a3
{
  *($2825F4736939C4A6D3AD43837233062D *)((char *)&self->_centerStageDelegate + 4) = a3;
}

- (void)setDepthFilteringEnabled:(BOOL)a3
{
  self->_centerStageMetadataDeliveryEnabled = a3;
}

- (void)setCinematicFramingSupported:(BOOL)a3
{
  self->_cinematicFramingSupported = a3;
}

- (void)setCinematicFramingControlMode:(unsigned int)a3
{
  self->_cinematicFramingControlMode = a3;
}

- (void)setBravoConstituentPhotoDeliveryEnabled:(BOOL)a3
{
  self->_bravoConstituentPhotoDeliveryEnabled = a3;
}

- (void)setBackgroundReplacementSupported:(BOOL)a3
{
  self->_backgroundReplacementSupported = a3;
}

- (void)setBackgroundBlurSupported:(BOOL)a3
{
  self->_backgroundBlurSupported = a3;
}

- (int)setAutoImageControlMode:(int)a3
{
  return -[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]((uint64_t)self, a3, 0);
}

- (void)setAllocateResourcesCompatibleWithOverCapture:(BOOL)a3
{
  LOBYTE(self->_memoryPool) = a3;
}

- (void)setAllocateResourcesCompatibleWithDepthDataDelivery:(BOOL)a3
{
  self->_allocateResourcesCompatibleWithDepthDataDeliverdouble y = a3;
}

- (void)setAdaptiveOverscanEnabled:(BOOL)a3
{
  BYTE1(self->_cinematicVideoAverageRenderingTime) = a3;
}

- (BOOL)manualCinematicFramingEnabled
{
  return (BOOL)self->_depthDataDeliveryZoomRange;
}

- (BOOL)isCMIOZoomStreamPropertySupported
{
  return LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension);
}

- (uint64_t)_setAutoImageControlMode:(void *)a3 completionHandler:
{
  uint64_t v3 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v45 = 0;
    double v46 = &v45;
    uint64_t v47 = 0x2020000000;
    int v48 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = &v41;
    uint64_t v43 = 0x2020000000;
    int v44 = a2;
    CGFloat v6 = *(NSObject **)(a1 + 1576);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __70__BWFigVideoCaptureDevice__setAutoImageControlMode_completionHandler___block_invoke;
    block[3] = &unk_1E5C2B8C0;
    int v40 = a2;
    block[4] = v3;
    void block[5] = &v45;
    void block[6] = &v41;
    dispatch_sync(v6, block);
    int v7 = *((_DWORD *)v42 + 6);
    if (a3 && v7 == a2)
    {
      int v8 = *((_DWORD *)v46 + 6);
      if (dword_1EB4C4FF0)
      {
        unsigned int v38 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v10 = (void (*)(void *, BOOL, long long *))a3[2];
      long long v56 = *MEMORY[0x1E4F1F9F8];
      uint64_t v57 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      v10(a3, v8 == 0, &v56);
      int v7 = *((_DWORD *)v42 + 6);
    }
    if (v7 != a2)
    {
      if (*(unsigned char *)(v3 + 3698))
      {
        *(unsigned char *)(v3 + 1828) = a2 == 2;
        if (a2 == 2) {
          long long v11 = 0;
        }
        else {
          long long v11 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        }
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v12 = *(void **)(v3 + 552);
        uint64_t v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v33, v55, 16, v31, v32);
        if (v13)
        {
          uint64_t v14 = *(void *)v34;
          do
          {
            for (uint64_t i = 0; i != v13; ++i)
            {
              if (*(void *)v34 != v14) {
                objc_enumerationMutation(v12);
              }
              if (a2 != 2)
              {
                uint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8 * i);
                [v16 setSphereVideoEnabled:0];
                objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v16, "currentSphereMode"), objc_msgSend(v16, "portType"));
              }
            }
            uint64_t v13 = [v12 countByEnumeratingWithState:&v33 objects:v55 count:16];
          }
          while (v13);
        }
        if (a3)
        {
          id v17 = (_DWORD *)&unk_1EB4C4000;
          long long v18 = objc_alloc_init(BWImageControlModeTransitionMonitor);
          [(BWImageControlModeTransitionMonitor *)v18 setExpectedSphereModesByPortType:v11];
          if (a2 == 2)
          {
            [(BWImageControlModeTransitionMonitor *)v18 setCoarseFocusCheckTimeout:*(double *)(v3 + 1832)];
            [(BWImageControlModeTransitionMonitor *)v18 setWaitForTorchToRampUp:1];
          }
        }
        else
        {
          long long v18 = 0;
          id v17 = &unk_1EB4C4000;
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1840));

        *(void *)(v3 + 1848) = v18;
        long long v19 = *(void **)(v3 + 1856);
        *(void *)(v3 + 1856) = [a3 copy];
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1840));
        if (v19)
        {
          if (v17[1020])
          {
            unsigned int v38 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            long long v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v21 = v38;
            if (os_log_type_enabled(v20, type)) {
              unsigned int v22 = v21;
            }
            else {
              unsigned int v22 = v21 & 0xFFFFFFFE;
            }
            if (v22)
            {
              int v49 = 136315138;
              int v50 = "-[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          BOOL v23 = (void (*)(void *, void, long long *))v19[2];
          long long v56 = *MEMORY[0x1E4F1F9F8];
          uint64_t v57 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          v23(v19, 0, &v56);
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1948));
        if (a2 == 2)
        {
          if (*(_DWORD *)(v3 + 2080) != 3 && v17[1020])
          {
            unsigned int v38 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            long long v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v25 = v38;
            if (os_log_type_enabled(v24, type)) {
              unsigned int v26 = v25;
            }
            else {
              unsigned int v26 = v25 & 0xFFFFFFFE;
            }
            if (v26)
            {
              uint64_t v27 = *(int *)(v3 + 2080);
              if (v27 > 8) {
                float v28 = 0;
              }
              else {
                float v28 = off_1E5C2BB58[v27];
              }
              int v49 = 136315650;
              int v50 = "-[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]";
              __int16 v51 = 2112;
              uint64_t v52 = v28;
              __int16 v53 = 2112;
              uint64_t v54 = @"MomentCaptureVideoRecording";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_DWORD *)(v3 + 2080) = 3;
          *(unsigned char *)(v3 + 2075) = 1;
        }
        else
        {
          -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](v3, a2, *((_DWORD *)v42 + 6));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1948));
        int v29 = -[BWFigVideoCaptureDevice _setSmoothFocusEnabled:](v3, a2 == 2);
        *((_DWORD *)v46 + 6) = v29;
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1948));
        -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](v3, a2, *((_DWORD *)v42 + 6));
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1948));
      }
    }
    uint64_t v3 = *((unsigned int *)v46 + 6);
    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(&v45, 8);
  }
  return v3;
}

- (void)_updateStreamingImageIntentWithNewImageControlMode:(int)a3 oldImageControlMode:
{
  if (a1)
  {
    CGFloat v6 = (const os_unfair_lock *)(a1 + 1948);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 1948));
    if (a2 != a3)
    {
      int v7 = a2;
      if (a2 == 5) {
        goto LABEL_15;
      }
      if (a2 == 6)
      {
        int v7 = 6;
        goto LABEL_15;
      }
      if (*(int *)(a1 + 3804) > 2)
      {
        int v7 = 8;
        goto LABEL_15;
      }
      os_unfair_lock_assert_owner(v6);
      int v8 = *(void **)(a1 + 2136);
      if (v8)
      {
        if (([v8 BOOLValue] & 1) == 0) {
          goto LABEL_10;
        }
      }
      else if (!*(unsigned char *)(a1 + 2132))
      {
LABEL_10:
        int v9 = *(_DWORD *)(a1 + 2168);
        if (v9 == 2) {
          int v7 = 2;
        }
        else {
          int v7 = v9 == 1;
        }
        goto LABEL_15;
      }
      int v7 = 4;
LABEL_15:
      *(_DWORD *)(a1 + 2080) = v7;
      *(unsigned char *)(a1 + 2075) = 1;
      if (dword_1EB4C4FF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
}

- (void)setUltraHighResSensorRawPoolDimensions:(id)a3
{
  self->_ultraHighResSensorRawPoolDimensions = ($470D365275581EF16070F5A11344F73E)a3;
}

- (void)setSensorRawPoolEnabled:(BOOL)a3
{
  self->_sensorRawPoolEnabled = a3;
}

- (void)setMidFrameSynchronizationEnabled:(BOOL)a3
{
  self->_midFrameSynchronizationEnabled = a3;
}

void __67__BWFigVideoCaptureDevice_setAutomaticallyAdjustsImageControlMode___block_invoke(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != *(unsigned __int8 *)(v2 + 1816))
  {
    *(unsigned char *)(v2 + 1816) = v1;
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(_DWORD *)(v4 + 1820);
      int v6 = *(_DWORD *)(v4 + 1824);
      if (v5 != v6)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](v4, v5);
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
          -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](*(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 32) + 1820), v6);
          int v7 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 1948);
          os_unfair_lock_unlock(v7);
        }
      }
    }
  }
}

- (void)setDigitalFlashEnabled:(BOOL)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (self->_digitalFlashEnabled != a3)
  {
    BOOL v4 = a3;
    if (a3)
    {
      if (self->_unifiedBracketingMode != 1)
      {
        uint64_t v13 = v3;
        LODWORD(v12) = 0;
        FigDebugAssert3();
      }
      self->_digitalFlashEnabled = v4;

      int v6 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      self->_digitalFlashEnabled = 0;

      int v6 = 0;
    }
    self->_digitalFlashExposureTimesForSceneMonitoringByPortType = v6;
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    captureStreams = self->_captureStreams;
    uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(captureStreams);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v11++), "setDigitalFlashEnabled:", v4, v12, v13);
        }
        while (v9 != v11);
        uint64_t v9 = [(NSArray *)captureStreams countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
  }
}

uint64_t __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupAutofocusSampleBufferProcessor];
}

- (void)_copyStreamsForAttributes:(uint64_t)a3 deviceClientPriority:(int *)a4 errOut:
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  int v36 = 0;
  char v8 = FigCaptureExternalCameraReplacesBuiltIn(0);
  char v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "deviceID"), "isEqualToString:", 0x1EFA45440);
  uint64_t v10 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a2, "count"));
  if (v9 & 1) != 0 || (v8)
  {
    unsigned int v27 = a3;
    long long v18 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a2, "count"));
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v19 = [a2 countByEnumeratingWithState:&v28 objects:v37 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v29 != v21) {
            objc_enumerationMutation(a2);
          }
          BOOL v23 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          objc_msgSend(v10, "addObject:", objc_msgSend(v23, "objectForKeyedSubscript:", @"DeviceType"));
          objc_msgSend(v18, "addObject:", objc_msgSend(v23, "objectForKeyedSubscript:", @"Position"));
        }
        uint64_t v20 = [a2 countByEnumeratingWithState:&v28 objects:v37 count:16];
      }
      while (v20);
    }
    long long v24 = (void *)[*(id *)(a1 + 16) copyStreamsFromDevice:*(void *)(a1 + 8) positions:v18 deviceTypes:v10 deviceClientPriority:v27 allowsStreamControlLoss:0 error:&v36];
    long long v16 = v24;
    if (v36)
    {
      FigDebugAssert3();
    }
    else
    {
      uint64_t v25 = [v24 count];
      if (v25 != [a2 count])
      {
LABEL_27:
        FigDebugAssert3();
        int v36 = -12780;
      }
    }
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v11 = [a2 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          if (*(void *)v33 != v13) {
            objc_enumerationMutation(a2);
          }
          objc_msgSend(v10, "addObject:", objc_msgSend(*(id *)(*((void *)&v32 + 1) + 8 * j), "objectForKeyedSubscript:", @"UniqueID"));
        }
        uint64_t v12 = [a2 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v12);
    }
    long long v15 = (void *)[*(id *)(a1 + 16) copyStreamsWithUniqueIDs:v10 forDevice:*(void *)(a1 + 8) deviceClientPriority:a3 error:&v36];
    long long v16 = v15;
    if (v36)
    {
      FigDebugAssert3();
    }
    else
    {
      uint64_t v17 = [v15 count];
      if (v17 != [a2 count]) {
        goto LABEL_27;
      }
    }
  }
  *a4 = v36;
  return v16;
}

- (void)setUnifiedBracketingMode:(int)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if ((!a3 || self->_flashScene) && self->_unifiedBracketingMode != a3)
  {
    self->_int unifiedBracketingMode = a3;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    ubCaptureParametersByPortType = self->_ubCaptureParametersByPortType;
    uint64_t v6 = [(NSDictionary *)ubCaptureParametersByPortType countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v25 != v8) {
            objc_enumerationMutation(ubCaptureParametersByPortType);
          }
          id v10 = [(NSDictionary *)self->_ubCaptureParametersByPortType objectForKeyedSubscript:*(void *)(*((void *)&v24 + 1) + 8 * i)];
          if ([v10 preserveBlackLevel]) {
            self->_ubHDRWithBiasEnabled = 1;
          }
          if ([v10 nonHDRBrightLightCapturesEnabled]) {
            self->_ubNonHDRBrightLightCaptureEnabled = 1;
          }
        }
        uint64_t v7 = [(NSDictionary *)ubCaptureParametersByPortType countByEnumeratingWithState:&v24 objects:v29 count:16];
      }
      while (v7);
    }
    int unifiedBracketingMode = self->_unifiedBracketingMode;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    captureStreams = self->_captureStreams;
    uint64_t v13 = [(NSArray *)captureStreams countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v21;
      do
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if (*(void *)v21 != v15) {
            objc_enumerationMutation(captureStreams);
          }
          uint64_t v17 = *(void **)(*((void *)&v20 + 1) + 8 * j);
          [v17 setUnifiedBracketingEnabled:unifiedBracketingMode == 1];
          if (BYTE4(self->_mostRecentSmartCameraResult)) {
            BOOL v18 = unifiedBracketingMode == 1;
          }
          else {
            BOOL v18 = 0;
          }
          [v17 setZeroShutterLagEnabled:v18];
        }
        uint64_t v14 = [(NSArray *)captureStreams countByEnumeratingWithState:&v20 objects:v28 count:16];
      }
      while (v14);
    }
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
    -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
    -[BWFigVideoCaptureDevice _ubSetupMetadataTimeMachine]((uint64_t)self);
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    if (a3) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = self->_flashModeForSceneMonitoring != 0;
    }
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A520, [NSNumber numberWithBool:v19]);
    -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A540, [NSNumber numberWithBool:a3 != 0]);
  }
}

- (void)_ubSetupMetadataTimeMachine
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1984) && *(unsigned char *)(a1 + 3204))
    {
      if (!*(void *)(a1 + 2008))
      {
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        v5[2] = __54__BWFigVideoCaptureDevice__ubSetupMetadataTimeMachine__block_invoke;
        v5[3] = &unk_1E5C2B9A8;
        v5[4] = a1;
        uint64_t v2 = [[BWMetadataTimeMachine alloc] initWithName:@"ZSL" capacity:(*(_DWORD *)(a1 + 3212) + 4) metadataHandlingPriority:14 addHandler:v5];
        *(void *)(a1 + 2008) = v2;
        long long v3 = *(_OWORD *)(a1 + 3216);
        uint64_t v4 = *(void *)(a1 + 3232);
        [(BWMetadataTimeMachine *)v2 setEarliestAllowedPTS:&v3];
        *(void *)(a1 + 2024) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
    }
    else
    {

      *(void *)(a1 + 2008) = 0;
      *(void *)(a1 + 2024) = 0;
    }
  }
}

- (void)setZeroShutterLagEarliestAllowedPTS:(id *)a3
{
  long long v3 = *(_OWORD *)&a3->var0;
  self->_zeroShutterLagEarliestAllowedPTS.unsigned int value = a3->var3;
  *(_OWORD *)&self->_stillImageISPMultiBandNoiseReductionEnabled = v3;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v4 = *a3;
  [(BWMetadataTimeMachine *)self->_ubZeroShutterLagMetadataTimeMachine setEarliestAllowedPTS:&v4];
}

- (BWPreviewTimeMachineProcessor)previewTimeMachineProcessor
{
  return (BWPreviewTimeMachineProcessor *)self->_ptsOfLastFrameForStationaryCheck.epoch;
}

- (uint64_t)_setExposureModeAutoWithRect:(double)a3
{
  if (!a1) {
    return 0;
  }
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  int v5 = *(NSObject **)(a1 + 1552);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __56__BWFigVideoCaptureDevice__setExposureModeAutoWithRect___block_invoke;
  v8[3] = &unk_1E5C2B860;
  *(double *)&v8[6] = a2;
  *(double *)&void v8[7] = a3;
  *(double *)&v8[8] = a4;
  *(double *)&v8[9] = a5;
  v8[4] = a1;
  v8[5] = &v9;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

- (int)setFocusModeAutoWithRect:(CGRect)a3 restrictToRect:(BOOL)a4 continuous:(BOOL)a5 smooth:(BOOL)a6 rangeRestrictionNear:(float)a7 rangeRestrictionFar:(float)a8 isFocusRectInOverscanSpace:(BOOL)a9
{
  uint64_t v9 = &kFigImageControlSampleBufferProcessorProperty_ContinuousAutoFocus;
  if (!a5) {
    uint64_t v9 = &kFigImageControlSampleBufferProcessorProperty_FocusScan;
  }
  uint64_t v10 = *v9;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke;
  v13[3] = &unk_1E5C2B768;
  CGRect v14 = a3;
  BOOL v18 = a9;
  v13[4] = self;
  BOOL v19 = a5;
  BOOL v20 = a6;
  float v16 = a7;
  float v17 = a8;
  BOOL v21 = a4;
  uint64_t v15 = v10;
  dispatch_sync(focusAndExposureUpdateQueue, v13);
  return 0;
}

uint64_t __132__BWFigVideoCaptureDevice_zoomCommandHandler_didApplyZoomFactor_zoomFactorWithoutFudge_targetZoomFactor_rampComplete_rampCommandID___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateAutoFocusRectIfNeededForZoomFactor:](*(void *)(a1 + 32), *(float *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(float *)(a1 + 40);
  return -[BWFigVideoCaptureDevice _updateExposureRectIfNeededForZoomFactor:](v2, v3);
}

void __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke(uint64_t a1)
{
  uint64_t v2 = 3584;
  if (!*(unsigned char *)(a1 + 88)) {
    uint64_t v2 = 1760;
  }
  uint64_t v3 = 3592;
  if (!*(unsigned char *)(a1 + 88)) {
    uint64_t v3 = 1768;
  }
  uint64_t v4 = 3600;
  if (!*(unsigned char *)(a1 + 88)) {
    uint64_t v4 = 1776;
  }
  double v5 = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(*(void *)(a1 + 32) + v2), *(double *)(*(void *)(a1 + 32) + v3), *(double *)(*(void *)(a1 + 32) + v4));
  double v9 = v5;
  double v10 = v6;
  double v11 = v7;
  double v12 = v8;
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 89))
  {
    *(double *)(v13 + 1696) = v5;
    *(double *)(v13 + 1704) = v6;
    *(double *)(v13 + 1712) = v7;
    *(double *)(v13 + 1720) = v8;
  }
  else
  {
    CGRect v14 = (_OWORD *)(v13 + 1696);
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *CGRect v14 = *MEMORY[0x1E4F1DB20];
    v14[1] = v15;
  }
  double v16 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace](*(void *)(a1 + 32));
  [*(id *)(a1 + 32) zoomFactor];
  double v18 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v9, v10, v11, v12, v17, v16);
  uint64_t v19 = *(void *)(a1 + 32);
  BOOL v20 = *(NSObject **)(v19 + 1576);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  void v24[2] = __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke_2;
  v24[3] = &unk_1E5C28000;
  v24[4] = v19;
  char v25 = *(unsigned char *)(a1 + 90);
  *(double *)&v24[5] = v18;
  v24[6] = v21;
  v24[7] = v22;
  v24[8] = v23;
  v24[10] = *(void *)(a1 + 80);
  char v26 = *(unsigned char *)(a1 + 91);
  v24[9] = *(void *)(a1 + 72);
  dispatch_sync(v20, v24);
}

- (float)zoomFactor
{
  if (LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension))
  {
    id v2 = [(NSArray *)[(BWFigVideoCaptureDevice *)self captureStreams] firstObject];
    [v2 cmioZoomFactor];
  }
  else if (LOBYTE(self->_depthDataDeliveryZoomRange))
  {
    objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "manualFramingVideoZoomFactor");
    return v4;
  }
  else
  {
    whiteBalanceGainsOrderedKeys = self->_whiteBalanceGainsOrderedKeys;
    [(NSMutableArray *)whiteBalanceGainsOrderedKeys appliedZoomFactor];
  }
  return result;
}

uint64_t __56__BWFigVideoCaptureDevice__setExposureModeAutoWithRect___block_invoke(uint64_t a1)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  double MidX = CGRectGetMidX(*(CGRect *)(a1 + 48));
  CGFloat MidY = CGRectGetMidY(*(CGRect *)(a1 + 48));
  BOOL v4 = MidX != 0.5;
  if (MidY != 0.5) {
    BOOL v4 = 1;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 1688) = v4;
  uint64_t v5 = *(void *)(a1 + 32);
  *(double *)(v5 + 1656) = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(v5 + 1760), *(double *)(v5 + 1768), *(double *)(v5 + 1776));
  *(void *)(v5 + 1664) = v6;
  *(void *)(v5 + 1672) = v7;
  *(void *)(v5 + 1680) = v8;
  double v9 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace](*(void *)(a1 + 32));
  double v10 = *(double **)(a1 + 32);
  [v10 zoomFactor];
  double v12 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v10[207], v10[208], v10[209], v10[210], v11, v9);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  v23[0] = @"x";
  v24[0] = [NSNumber numberWithDouble:v12];
  v23[1] = @"y";
  v24[1] = [NSNumber numberWithDouble:v14];
  v23[2] = @"w";
  void v24[2] = [NSNumber numberWithDouble:v16];
  v23[3] = @"h";
  v24[3] = [NSNumber numberWithDouble:v18];
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4];
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v21 = &kFigImageControlSampleBufferProcessorProperty_AutoExposure;
  if (*(unsigned char *)(v20 + 1688)) {
    uint64_t v21 = &kFigImageControlSampleBufferProcessorProperty_SpotMeteredExposure;
  }
  uint64_t result = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v20, *v21, v19);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t __63__BWFigVideoCaptureDevice_captureStream_didUpdatePreviewShift___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateAutoFocusRectIfNeededForZoomFactor:](*(void *)(a1 + 32), *(float *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(float *)(a1 + 40);
  return -[BWFigVideoCaptureDevice _updateExposureRectIfNeededForZoomFactor:](v2, v3);
}

- (uint64_t)_updateExposureRectIfNeededForZoomFactor:(uint64_t)a1
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (CGRectIsEmpty(*(CGRect *)(a1 + 1656)))
    {
      return 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 3676));
      double v4 = *(double *)(v2 + 3680);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3676));
      v8.origin.double x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(*(double *)(v2 + 1656), *(double *)(v2 + 1664), *(double *)(v2 + 1672), *(double *)(v2 + 1680), a2, v4);
      DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v8);
      uint64_t v6 = kFigImageControlSampleBufferProcessorProperty_AutoExposureAreaOfInterest;
      if (*(unsigned char *)(v2 + 1688)) {
        uint64_t v6 = kFigImageControlSampleBufferProcessorProperty_SpotMeteredExposureAreaOfInterest;
      }
      uint64_t v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v2, (uint64_t)*v6, (uint64_t)DictionaryRepresentation);
      if (DictionaryRepresentation) {
        CFRelease(DictionaryRepresentation);
      }
    }
  }
  return v2;
}

- (uint64_t)_updateAutoFocusRectIfNeededForZoomFactor:(uint64_t)a1
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (!_FigIsCurrentDispatchQueue()) {
      FigDebugAssert3();
    }
    if (CGRectIsEmpty(*(CGRect *)(v2 + 1696)))
    {
      return 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 3676));
      double v4 = *(double *)(v2 + 3680);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3676));
      v7.origin.double x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(*(double *)(v2 + 1696), *(double *)(v2 + 1704), *(double *)(v2 + 1712), *(double *)(v2 + 1720), a2, v4);
      DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v7);
      uint64_t v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v2, 0x1EFA5A360, (uint64_t)DictionaryRepresentation);
      if (DictionaryRepresentation) {
        CFRelease(DictionaryRepresentation);
      }
    }
  }
  return v2;
}

- (void)_setNewISPZoomFactorOnStream
{
  v26[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "stream"), "supportedProperties");
    uint64_t v3 = *MEMORY[0x1E4F54D18];
    if ([v2 objectForKeyedSubscript:*MEMORY[0x1E4F54D18]])
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2768));
      float v4 = *(float *)(a1 + 2756);
      float v5 = *(float *)(a1 + 2752);
      float v6 = *(float *)(a1 + 2760);
      float v7 = *(float *)(a1 + 2764);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2768));
      -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((unsigned char *)a1, v7);
      float v9 = 1.0;
      if (!*(unsigned char *)(a1 + 3640) && !*(unsigned char *)(a1 + 209))
      {
        if (*(unsigned char *)(a1 + 1464))
        {
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1480), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)a1, "masterCaptureStream"), "portType")), "floatValue");
          float v9 = v4;
          if (v4 >= *(float *)&v8)
          {
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1480), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)a1, "masterCaptureStream"), "portType")), "floatValue");
            float v9 = *(float *)&v8;
          }
        }
        else
        {
          float v20 = fminf(v4, 1.5);
          if (*(unsigned char *)(a1 + 208)) {
            float v9 = v20;
          }
          else {
            float v9 = v4;
          }
        }
      }
      if (v9 != v6 && (v5 == 0.0 || v9 < v5 || v6 < v5))
      {
        if (*(_DWORD *)(a1 + 1472) == 3)
        {
          uint64_t v10 = *MEMORY[0x1E4F52DD8];
          int v11 = objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, *MEMORY[0x1E4F52DD8]), "videoCaptureDimensions");
          uint64_t v12 = *MEMORY[0x1E4F55410];
          if (v11 == 3840) {
            uint64_t v13 = *MEMORY[0x1E4F55420];
          }
          else {
            uint64_t v13 = *MEMORY[0x1E4F55410];
          }
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 544), "baseZoomFactorsByPortType"), "objectForKeyedSubscript:", v10), "floatValue");
          float v15 = (float)(v9 / v14) * 1.25;
          v25[0] = v10;
          uint64_t v23 = v13;
          uint64_t v24 = objc_msgSend(NSNumber, "numberWithFloat:");
          v26[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
          v25[1] = *MEMORY[0x1E4F52DE8];
          uint64_t v21 = v12;
          *(float *)&double v16 = v15;
          uint64_t v22 = [NSNumber numberWithFloat:v16];
          v26[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v22 forKeys:&v21 count:1];
          uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:2];
          uint64_t v18 = *MEMORY[0x1E4F55658];
          uint64_t v19 = a1;
        }
        else
        {
          *(float *)&double v8 = v9;
          uint64_t v17 = [NSNumber numberWithFloat:v8];
          uint64_t v19 = a1;
          uint64_t v18 = v3;
        }
        if (!-[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](v19, v18, v17))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2768));
          *(float *)(a1 + 2760) = v9;
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2768));
        }
      }
    }
  }
}

- (_BYTE)_updateSensorRegionsOfInterestBasedOnZoomFactor:(unsigned char *)result
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    double v4 = *MEMORY[0x1E4F1DAD8];
    if (result[3697])
    {
      uint64_t result = (unsigned char *)[result masterCaptureStream];
      if (result == *(unsigned char **)(v3 + 576) && *(float *)(v3 + 2792) <= a2)
      {
        uint64_t result = (unsigned char *)[*(id *)(v3 + 1312) lastSelectionReason];
        if (result)
        {
          uint64_t result = (unsigned char *)[*(id *)(v3 + 576) previewShiftAtBaseZoom];
          double v4 = v5;
        }
      }
    }
    if (*(unsigned char *)(v3 + 3548)) {
      uint64_t result = (unsigned char *)-[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v3, *MEMORY[0x1E4F54B58], *(double *)(v3 + 3552), *(double *)(v3 + 3560), *(double *)(v3 + 3568), *(double *)(v3 + 3576), a2, v4);
    }
    if (*(unsigned char *)(v3 + 3625))
    {
      uint64_t v6 = *MEMORY[0x1E4F54A78];
      double v7 = *(double *)(v3 + 1728);
      double v8 = *(double *)(v3 + 1736);
      double v9 = *(double *)(v3 + 1744);
      double v10 = *(double *)(v3 + 1752);
      return (unsigned char *)-[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v3, v6, v7, v8, v9, v10, a2, v4);
    }
  }
  return result;
}

- (uint64_t)_updateSensorRegionOfInterest:(double)a3 forZoomFactor:(double)a4 previewShiftInSensorSpace:(double)a5 streamProperty:(double)a6
{
  v24[4] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v11 = result;
    FigCaptureMetadataUtilitiesNormalizeCropRect(a3, a4, a5, a6);
    double v16 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v12, v13, v14, v15, a7, a8);
    uint64_t v18 = (v17 * 1000.0);
    uint64_t v20 = (v19 * 1000.0);
    uint64_t v22 = (v21 * 1000.0);
    v23[0] = *MEMORY[0x1E4F52F48];
    v24[0] = [NSNumber numberWithUnsignedInt:(v16 * 1000.0)];
    v23[1] = *MEMORY[0x1E4F52F78];
    v24[1] = [NSNumber numberWithUnsignedInt:v18];
    v23[2] = *MEMORY[0x1E4F52F88];
    void v24[2] = [NSNumber numberWithUnsignedInt:v20];
    v23[3] = *MEMORY[0x1E4F52F50];
    v24[3] = [NSNumber numberWithUnsignedInt:v22];
    return -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](v11, a2, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4]);
  }
  return result;
}

- (void)setCinematicVideoEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque) = a3;
  if (a3) {
    uint64_t v5 = 0x1EFA48A40;
  }
  else {
    uint64_t v5 = 0;
  }
  -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A040, v5);
  CFTypeRef cf1 = 0;
  -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:]((uint64_t)self, 0x1EFA5A420, (uint64_t)&cf1);
  if (CFEqual(cf1, @"AEAndAF"))
  {
    uint64_t v6 = 3;
  }
  else if (CFEqual(cf1, @"AEOnly"))
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 2 * (CFEqual(cf1, @"AFOnly") != 0);
  }
  [(BWFigVideoCaptureDevice *)self setFaceDetectionDrivenImageProcessingMode:v6];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * i) setCinematicVideoEnabled:v3];
      }
      uint64_t v9 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v9);
  }
}

- (int)setFaceDetectionDrivenImageProcessingMode:(int)a3
{
  switch(a3)
  {
    case 0:
      double v4 = @"Disable";
      break;
    case 1:
      double v4 = @"AEOnly";
      break;
    case 2:
      uint64_t v5 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_Disable;
      int os_unfair_lock_opaque_low = LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque);
      double v7 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AF;
      goto LABEL_7;
    case 3:
      uint64_t v5 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AE;
      int os_unfair_lock_opaque_low = LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque);
      double v7 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AEAndAF;
LABEL_7:
      if (!os_unfair_lock_opaque_low) {
        uint64_t v5 = v7;
      }
      double v4 = (__CFString *)*v5;
      break;
    default:
      double v4 = 0;
      break;
  }
  if (self->_faceDetectionDrivenImageProcessingModeString == v4) {
    return 0;
  }
  if (self->_faceDrivenAEAFEnabledByDefault)
  {
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
    {
      faceDetectionDrivenImageProcessingModeString = self->_faceDetectionDrivenImageProcessingModeString;
      if ((faceDetectionDrivenImageProcessingModeString == @"AFOnly"
         || faceDetectionDrivenImageProcessingModeString == @"AEAndAF")
        && (v4 == @"AEOnly" || v4 == @"Disable"))
      {
        ++self->_faceDrivenAFDisabledCount;
      }
    }
    if (self->_faceDrivenAEAFEnabledByDefault)
    {
      if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))
      {
        uint64_t v9 = self->_faceDetectionDrivenImageProcessingModeString;
        if ((v9 == @"AEOnly" || v9 == @"AEAndAF") && (v4 == @"AFOnly" || v4 == @"Disable")) {
          ++self->_faceDrivenAEDisabledCount;
        }
      }
    }
  }
  self->_faceDetectionDrivenImageProcessingModeString = v4;
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A420, (uint64_t)v4);
}

- (int)setWhiteBalanceModeAuto
{
  int v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A3E0, *MEMORY[0x1E4F1CFC8]);
  if (v2) {
    FigDebugAssert3();
  }
  return v2;
}

- (uint64_t)_setAutofocusProcessorProperty:(uint64_t)a3 propertyValue:
{
  if (result)
  {
    if (a2)
    {
      BOOL v3 = *(NSObject **)(result + 1576);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __72__BWFigVideoCaptureDevice__setAutofocusProcessorProperty_propertyValue___block_invoke;
      block[3] = &unk_1E5C264A0;
      block[4] = result;
      void block[5] = a2;
      void block[6] = a3;
      dispatch_sync(v3, block);
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294954516;
    }
  }
  return result;
}

- (void)setAdaptiveUnifiedBracketingController:(id)a3
{
  self->_ubAdaptiveBracketingController = (BWAdaptiveBracketingController *)a3;
}

- (void)setZoomFactor:(float)a3
{
  if (LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension))
  {
    id v5 = [(NSArray *)[(BWFigVideoCaptureDevice *)self captureStreams] firstObject];
    *(float *)&double v6 = a3;
    [v5 setCmioZoomFactor:v6];
  }
  else if (LOBYTE(self->_depthDataDeliveryZoomRange))
  {
    id v7 = [(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
    [v7 setManualFramingVideoZoomFactor:a3];
  }
  else
  {
    [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys setRequestedZoomFactor:*(double *)&a3];
    previewTimeMachineProcessor = self->_previewTimeMachineProcessor;
    [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys requestedZoomFactor];
    -[BWPreviewTimeMachineProcessor requestedZoomFactorChanged:](previewTimeMachineProcessor, "requestedZoomFactorChanged:");
  }
}

- (void)setDepthMaxFrameRate:(float)a3
{
  if (self->_depthMaxFrameRate != a3)
  {
    self->_depthMaxFrameRate = a3;
    [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys requestedZoomFactor];
    -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)self, v5);
    double v6 = (void *)[*(id *)&self->_temporalNoiseReductionEnabled referencedObject];
    *(float *)&double v7 = a3;
    [v6 didChangeDepthMaxFrameRate:v7];
  }
}

- (void)setNonDestructiveCropSize:(CGSize)a3
{
  CGFloat height = a3.height;
  CGFloat width = a3.width;
  p_nonDestructiveCropSizeLocuint64_t k = &self->_nonDestructiveCropSizeLock;
  os_unfair_lock_lock(&self->_nonDestructiveCropSizeLock);
  self->_nonDestructiveCropSize.CGFloat width = width;
  self->_nonDestructiveCropSize.CGFloat height = height;
  os_unfair_lock_unlock(p_nonDestructiveCropSizeLock);
}

- (int)setSubjectAreaChangeMonitoringEnabled:(BOOL)a3
{
  uint64_t v4 = [NSNumber numberWithBool:a3];
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A0E0, v4);
}

- (int)setAutomaticallyAdjustsImageControlMode:(BOOL)a3
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __67__BWFigVideoCaptureDevice_setAutomaticallyAdjustsImageControlMode___block_invoke;
  block[3] = &unk_1E5C2B898;
  BOOL v7 = a3;
  block[4] = self;
  void block[5] = &v8;
  dispatch_sync(autofocusProcessorQueue, block);
  int v4 = *((_DWORD *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

- (void)setTimeLapseCaptureRate:(float)a3
{
  float v5 = [(BWFigCaptureStream *)[(BWFigVideoCaptureStream *)self->_captureStream stream] supportedProperties];
  if ([(NSDictionary *)v5 objectForKeyedSubscript:*MEMORY[0x1E4F54C30]])
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __51__BWFigVideoCaptureDevice_setTimeLapseCaptureRate___block_invoke;
    v7[3] = &unk_1E5C262A0;
    v7[4] = self;
    float v8 = a3;
    dispatch_sync(focusAndExposureUpdateQueue, v7);
  }
}

- (void)setStreamingDigitalFlashMode:(int)a3
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  int nextStreamingImageIntent = self->_nextStreamingImageIntent;
  if ((nextStreamingImageIntent - 5) < 4 || nextStreamingImageIntent == 3)
  {
    if (!a3) {
      goto LABEL_9;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_8:
    self->_globalToneMappingEnabled = 0;
    goto LABEL_9;
  }
  int v9 = a3 == 1;
  if (a3 == 2) {
    int v9 = 2;
  }
  self->_int nextStreamingImageIntent = v9;
  self->_streamingImageIntentNeedsUpdate = 1;
  if (a3) {
    goto LABEL_8;
  }
LABEL_9:
  self->_streamingDigitalFlashMode = a3;
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (int)setProvidesStortorgetMetadata:(BOOL)a3
{
  uint64_t v4 = [NSNumber numberWithBool:a3];
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A0A0, v4);
}

- (void)setFaceDetectionConfiguration:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v5 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * i) setFaceDetectionConfiguration:a3];
      }
      uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

- (int)setExposureTargetBias:(float)a3 requestID:(int)a4
{
  uint64_t v4 = *(void *)&a4;
  void v9[2] = *MEMORY[0x1E4F143B8];
  if (a3 == 3.4028e38) {
    a3 = -[BWFigVideoCaptureDevice exposureTargetBias]((uint64_t)self);
  }
  v8[0] = *MEMORY[0x1E4F548F8];
  v9[0] = [NSNumber numberWithFloat:*(double *)&a3];
  v8[1] = *MEMORY[0x1E4F52E90];
  v9[1] = [NSNumber numberWithInt:v4];
  int v6 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A3A0, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:2]);
  if (v6) {
    FigDebugAssert3();
  }
  return v6;
}

- (int)setAutomaticallyAdjustsTorch:(BOOL)a3
{
  BOOL v3 = a3;
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  if (self->_autoTorchEnabled != v3)
  {
    self->_autoTorchEnabled = v3;
    self->_autoTorchStatsCheckedForVideoRecording = 0;
    BYTE4(self->_autoTorchRampedUpTime.epoch) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  return 0;
}

- (void)setGlobalToneMappingEnabled:(BOOL)a3
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  self->_globalToneMappingEnabled = a3;
  -[BWFigVideoCaptureDevice _updateGlobalToneMappingEnabled]((uint64_t)self);
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (uint64_t)_updateGlobalToneMappingEnabled
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = (const os_unfair_lock *)(result + 1948);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(result + 1948));
    os_unfair_lock_assert_owner(v2);
    uint64_t result = *(unsigned char *)(v1 + 2132) != 0;
    if (*(void *)(v1 + 2136)) {
      uint64_t result = [*(id *)(v1 + 2136) BOOLValue];
    }
    int v3 = *(_DWORD *)(v1 + 2080);
    if ((v3 - 5) < 4 || v3 == 3)
    {
      if (!result) {
        return result;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_13;
    }
    if (result)
    {
      *(_DWORD *)(v1 + 2080) = 4;
      *(unsigned char *)(v1 + 2075) = 1;
LABEL_13:
      *(_DWORD *)(v1 + 2168) = 0;
      return result;
    }
    int v6 = *(_DWORD *)(v1 + 2168);
    if (v6 == 2) {
      int v7 = 2;
    }
    else {
      int v7 = v6 == 1;
    }
    *(_DWORD *)(v1 + 2080) = v7;
    *(unsigned char *)(v1 + 2075) = 1;
  }
  return result;
}

- (void)setStudioLightingIntensity:(float)a3
{
  float studioLightingIntensityInitial = self->_studioLightingIntensityInitial;
  if (studioLightingIntensityInitial >= 0.0)
  {
    if (studioLightingIntensityInitial != a3 && self->_studioLightingEnabled) {
      self->_studioLightingIntensityChanged = 1;
    }
  }
  else
  {
    self->_float studioLightingIntensityInitial = a3;
  }
  self->_studioLightingIntensitdouble y = a3;
  int v7 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v7)
  {
    captureStreauint64_t m = (BWFigVideoCaptureStream *)[v7 referencedObject];
  }
  else if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
  {
    captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
  }
  else
  {
    captureStreauint64_t m = self->_captureStream;
  }
  *(float *)&double v9 = a3;
  [(BWFigVideoCaptureStream *)captureStream didChangeStudioLightingIntensity:v9];
}

- (void)setGesturesEnabled:(BOOL)a3
{
  if (self->_gesturesEnabled != a3)
  {
    BOOL v3 = a3;
    self->_gesturesEnabled = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3) {
      self->_gesturesEnabledStartTime = v5;
    }
    else {
      self->_gesturesEnabledTotalTime += v5 - self->_gesturesEnabledStartTime;
    }
    int v6 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v6)
    {
      captureStreauint64_t m = (BWFigVideoCaptureStream *)[v6 referencedObject];
    }
    else if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
    {
      captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
    }
    else
    {
      captureStreauint64_t m = self->_captureStream;
    }
    [(BWFigVideoCaptureStream *)captureStream didChangeGesturesEnabled:v3];
  }
}

- (void)setBravoStreamSelectionConfiguration:(id)a3
{
  unint64_t var1 = a3.var1;
  int64_t var0 = a3.var0;
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfiguration.selectionBehavior = var0;
  self->_bravoStreamSelectionConfiguration.restrictedSelectionConditions = var1;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (void)setBackgroundBlurAperture:(float)a3
{
  float backgroundBlurApertureInitial = self->_backgroundBlurApertureInitial;
  if (backgroundBlurApertureInitial >= 0.0)
  {
    if (backgroundBlurApertureInitial != a3 && self->_backgroundBlurEnabled) {
      self->_backgroundBlurApertureChanged = 1;
    }
  }
  else
  {
    self->_float backgroundBlurApertureInitial = a3;
  }
  self->_backgroundBlurAperture = a3;
  int v7 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v7)
  {
    captureStreauint64_t m = (BWFigVideoCaptureStream *)[v7 referencedObject];
  }
  else if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
  {
    captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
  }
  else
  {
    captureStreauint64_t m = self->_captureStream;
  }
  *(float *)&double v9 = a3;
  [(BWFigVideoCaptureStream *)captureStream didChangeBackgroundBlurAperture:v9];
}

- (void)_serviceRetryStillImageCaptureUsingFrameStatisticsByPortType:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 2496);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
    int v5 = *(unsigned __int8 *)(a1 + 2536);
    id v6 = (id)[*(id *)(a1 + 2504) masterPortType];
    uint64_t v7 = [*(id *)(a1 + 2504) captureType];
    uint64_t v8 = [*(id *)(a1 + 2504) captureFlags];
    os_unfair_lock_unlock(v4);
    if (v5)
    {
      int v9 = -[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:captureType:captureFlags:](a1, a2, (uint64_t)v6, v7, v8);
      if (v9)
      {
        if (v9 == 1)
        {
          os_unfair_lock_lock(v4);
          *(unsigned char *)(a1 + 2536) = 0;
          os_unfair_lock_unlock(v4);
          long long v10 = *(NSObject **)(a1 + 2472);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __88__BWFigVideoCaptureDevice__serviceRetryStillImageCaptureUsingFrameStatisticsByPortType___block_invoke;
          block[3] = &unk_1E5C24430;
          block[4] = a1;
          dispatch_async(v10, block);
        }
        else
        {
          ++*(_DWORD *)(a1 + 2488);
          if (v9 == 5) {
            ++*(_DWORD *)(a1 + 2596);
          }
        }
      }
    }
  }
}

- (void)setBaseZoomFactorsByPortType:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(captureStreams);
        }
        long long v10 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "floatValue");
        objc_msgSend(v10, "setBaseZoomFactor:");
      }
      uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
  [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup setBaseZoomFactorsByPortType:a3];
}

- (BWFigVideoCaptureStream)bravoSuperWideCaptureStream
{
  return self->_bravoSuperWideCaptureStream;
}

- (int)thermalSystemPressureLevel
{
  int v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = v2->_flickerAvoidanceMonitor;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (NSString)preferredMasterPortType
{
  return (NSString *)&self->_shouldNotifySensorTemperatureByPortType->super.super.isa;
}

- (NSDictionary)clientBaseZoomFactorsByPortType
{
  return [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup clientBaseZoomFactorsByPortType];
}

- (int)autoImageControlMode
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __47__BWFigVideoCaptureDevice_autoImageControlMode__block_invoke;
  v5[3] = &unk_1E5C246B8;
  v5[4] = self;
  void v5[5] = &v6;
  dispatch_sync(autofocusProcessorQueue, v5);
  int v3 = *((_DWORD *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (BOOL)zeroShutterLagEnabled
{
  return BYTE4(self->_mostRecentSmartCameraResult);
}

- (void)setSwfrEnabled:(BOOL)a3
{
  self->_swfrEnabled = a3;
}

- (void)setStillImageFusionScheme:(int)a3
{
  *(_DWORD *)&self->_stillImageCaptureEnabled = a3;
}

- (void)setStereoPhotoCaptureEnabled:(BOOL)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (self->_stereoPhotoCaptureEnabled != a3)
  {
    self->_stereoPhotoCaptureEnabled = a3;
    if (a3)
    {
      uint64_t v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      activePortTypes = self->_activePortTypes;
      uint64_t v6 = [(NSArray *)activePortTypes countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v11;
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v11 != v8) {
              objc_enumerationMutation(activePortTypes);
            }
            objc_msgSend(v4, "setObject:forKeyedSubscript:", -[BWMovingWindowStats initWithWindowSize:]([BWMovingWindowStats alloc], "initWithWindowSize:", 6), *(void *)(*((void *)&v10 + 1) + 8 * i));
          }
          uint64_t v7 = [(NSArray *)activePortTypes countByEnumeratingWithState:&v10 objects:v14 count:16];
        }
        while (v7);
      }
      self->_stereoPhotoSNRSimpleMovingAverageByPortType = (NSDictionary *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v4];
      self->_stereoPhotoLastSceneSNRByPortType = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {

      self->_stereoPhotoSNRSimpleMovingAverageByPortType = 0;
      self->_stereoPhotoLastSceneSNRByPortType = 0;
    }
  }
}

- (void)setSoftISPEnabled:(BOOL)a3
{
  self->_softISPEnabled = a3;
}

- (void)setSifrStillImageCaptureEnabledIfAvailable:(BOOL)a3
{
  if (self->_sifrStillImageCaptureEnabledIfAvailable != a3)
  {
    self->_sifrStillImageCaptureEnabledIfAvailable = a3;
    -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
  }
}

- (void)setSensorRawStillImageOutputsEnabled:(BOOL)a3
{
  self->_sensorRawStillImageOutputsEnabled = a3;
}

- (void)setRedSaturationMitigationEnabled:(BOOL)a3
{
  self->_redSaturationMitigationEnabled = a3;
}

- (void)setLearnedNRUltraHighResolutionDowngradeEnabled:(BOOL)a3
{
  self->_learnedNRUltraHighResolutionDowngradeEnabled = a3;
}

- (void)setLearnedNRMode:(unsigned int)a3
{
  if (self->_learnedNRMode != a3)
  {
    if (a3)
    {
      if (!self->_unifiedBracketingMode) {
        FigDebugAssert3();
      }
    }
    self->_learnedNRMode = a3;
  }
}

- (void)setIrisFrameHarvestingEnabled:(BOOL)a3
{
  BYTE1(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount) = a3;
}

- (void)setDisparityGenerationFromReferenceFramesSupported:(BOOL)a3
{
  self->_disparityGenerationFromReferenceFramesSupported = a3;
}

- (void)setDepthWithDeepFusionEnabled:(BOOL)a3
{
  if (self->_depthWithDeepFusionEnabled != a3)
  {
    if (a3 && !self->_deepFusionEnabled)
    {
      uint64_t v4 = self;
      BOOL v3 = a3;
      FigDebugAssert3();
      self = v4;
      a3 = v3;
    }
    self->_depthWithDeepFusionEnabled = a3;
  }
}

- (void)setDeepFusionEnabled:(BOOL)a3
{
  if (self->_deepFusionEnabled != a3)
  {
    if (a3 && self->_unifiedBracketingMode != 1)
    {
      uint64_t v4 = self;
      BOOL v3 = a3;
      FigDebugAssert3();
      self = v4;
      a3 = v3;
    }
    self->_deepFusionEnabled = a3;
  }
}

- (void)setConstantColorEnabled:(BOOL)a3
{
  self->_constantColorEnabled = a3;
}

- (NSDictionary)moduleCalibrationByPortType
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = self->_captureStreams;
  uint64_t v4 = [(NSArray *)obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v20;
  uint64_t v7 = *MEMORY[0x1E4F54BA8];
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v20 != v6) {
        objc_enumerationMutation(obj);
      }
      int v9 = *(void **)(*((void *)&v19 + 1) + 8 * v8);
      if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "stream"), "supportedProperties"), "objectForKeyedSubscript:", v7))
      {
        id v12 = 0;
LABEL_14:
        long long v13 = 0;
LABEL_15:
        long long v14 = 0;
        goto LABEL_11;
      }
      id v10 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", [v9 stream]);
      uint64_t v11 = [v9 portType];
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = __54__BWFigVideoCaptureDevice_moduleCalibrationByPortType__block_invoke;
      void v18[3] = &unk_1E5C2B5F0;
      void v18[4] = v10;
      v18[5] = v11;
      id v12 = objc_alloc_init(MEMORY[0x1E4F55ED8]);
      if (!v12) {
        goto LABEL_14;
      }
      long long v13 = (void *)[objc_alloc(MEMORY[0x1E4F55EE0]) initWithPixelBufferProvider:v18];
      if (!v13) {
        goto LABEL_15;
      }
      long long v14 = (void *)[objc_alloc(MEMORY[0x1E4F55EA8]) initWithPixelBufferProvider:v18];
      if (v14)
      {
        [v12 setShadingFPNCorrectionImage:v13];
        [v12 setBlacklevelShadingCorrectionThumbnails:v14];
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, objc_msgSend(v9, "portType"));
      }
LABEL_11:

      ++v8;
    }
    while (v5 != v8);
    uint64_t v15 = [(NSArray *)obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    uint64_t v5 = v15;
  }
  while (v15);
LABEL_17:
  uint64_t result = (NSDictionary *)[v3 count];
  if (result) {
    return (NSDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:v3];
  }
  return result;
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_2(uint64_t a1, uint64_t a2)
{
}

- (void)_handlePendingStillImageCaptureRequest
{
  if (a1)
  {
    int v2 = (const os_unfair_lock *)(a1 + 1280);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 1280));
    uint64_t v3 = *(void *)(a1 + 2560);
    if (v3)
    {
      *(void *)(a1 + 2552) = v3;
      *(void *)(a1 + 2560) = 0;
      [*(id *)(a1 + 2544) transitionToState:4];
      os_unfair_lock_assert_owner(v2);
      if (*(unsigned char *)(a1 + 1284) || *(unsigned char *)(a1 + 1285) || *(unsigned char *)(a1 + 1286))
      {
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        uint64_t v5 = *(void **)(a1 + 2544);
        [v5 transitionToState:8];
      }
    }
  }
}

- (int)_setupAutofocusSampleBufferProcessor
{
  v72[10] = *MEMORY[0x1E4F143B8];
  int started = 0;
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v55 = v58;
    LODWORD(v52) = 0;
    FigDebugAssert3();
  }
  if (![(NSString *)[(BWFigCaptureDevice *)self->_device deviceID] isEqualToString:0x1EFA45440])return started; {
  uint64_t v3 = [(BWFigVideoCaptureStream *)self->_captureStream portType];
  }
  if ([(NSString *)v3 isEqualToString:*MEMORY[0x1E4F52DE0]]) {
    return started;
  }
  createAutofocusSampleBufferProcessorFunctiouint64_t n = (uint64_t (*)(uint64_t, void *, void *, void *, void *, const __CFDictionary *, const void *, OpaqueFigSampleBufferProcessor **))self->_createAutofocusSampleBufferProcessorFunction;
  if (!createAutofocusSampleBufferProcessorFunction)
  {
    FigDebugAssert3();
    FigSignalErrorAt();
    return started;
  }
  if ((char *)createAutofocusSampleBufferProcessorFunction != (char *)FigSampleBufferProcessorCreateForAutofocus) {
    return createAutofocusSampleBufferProcessorFunction(*MEMORY[0x1E4F1CF80], [(BWFigVideoCaptureStream *)self->_captureStream stream], [(BWFigVideoCaptureStream *)self->_bravoTelephotoCaptureStream stream], [(BWFigVideoCaptureStream *)self->_bravoSuperWideCaptureStream stream], [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup syncGroup], 0, 0, &self->_autofocusProcessor);
  }
  if (!self->_sensorIDDictionaryByPortType
    || (captureStreauint64_t m = self->_captureStream) == 0
    || !self->_moduleInfoByPortType)
  {
    FigDebugAssert3();
    return -12780;
  }
  id v7 = [(BWFigCaptureStream *)[(BWFigVideoCaptureStream *)captureStream stream] getProperty:@"FormatIndex" error:&started];
  if (started) {
    goto LABEL_59;
  }
  id v8 = -[NSArray objectAtIndexedSubscript:](-[BWFigVideoCaptureStream supportedFormats](self->_captureStream, "supportedFormats"), "objectAtIndexedSubscript:", (int)[v7 intValue]);
  int v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
  uint64_t v10 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
  if ([v8 objectForKeyedSubscript:@"VideoBinningFactorHorizontal"])
  {
    uint64_t v11 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"VideoBinningFactorHorizontal"), "intValue");
  }
  else if (v9)
  {
    uint64_t v11 = 2;
  }
  else
  {
    uint64_t v11 = 1;
  }
  if ([v8 objectForKeyedSubscript:@"VideoBinningFactorVertical"])
  {
    uint64_t v12 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"VideoBinningFactorVertical"), "intValue");
  }
  else if (v9)
  {
    uint64_t v12 = 2;
  }
  else
  {
    uint64_t v12 = 1;
  }
  sensorIDDictionaryByPortType = self->_sensorIDDictionaryByPortType;
  uint64_t v14 = *MEMORY[0x1E4F53558];
  v71[0] = *MEMORY[0x1E4F535A0];
  v71[1] = v14;
  activePortTypes = self->_activePortTypes;
  v72[0] = sensorIDDictionaryByPortType;
  v72[1] = activePortTypes;
  v71[2] = *MEMORY[0x1E4F535C0];
  uint64_t v16 = [NSNumber numberWithInt:v10];
  uint64_t v17 = *MEMORY[0x1E4F53568];
  moduleInfoByPortType = self->_moduleInfoByPortType;
  v72[2] = v16;
  v72[3] = moduleInfoByPortType;
  uint64_t v19 = *MEMORY[0x1E4F53560];
  void v71[3] = v17;
  v71[4] = v19;
  v72[4] = [(BWFigVideoCaptureDevice *)self cameraInfoByPortType];
  v71[5] = *MEMORY[0x1E4F53588];
  v72[5] = [NSNumber numberWithInt:v11];
  v71[6] = *MEMORY[0x1E4F53590];
  v72[6] = [NSNumber numberWithInt:v12];
  v71[7] = *MEMORY[0x1E4F53578];
  v72[7] = [NSNumber numberWithBool:BYTE1(self->_mostRecentSmartCameraResult)];
  v71[8] = *MEMORY[0x1E4F535A8];
  v72[8] = [NSNumber numberWithBool:self->_stereoVideoCaptureEnabled];
  v71[9] = *MEMORY[0x1E4F53570];
  v72[9] = [(NSMutableDictionary *)self->_autofocusCachedPropertiesDictionary objectForKeyedSubscript:0x1EFA5A420];
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v72 forKeys:v71 count:10];
  *(_WORD *)&self->_allowAEStableNotifications = 256;
  uint64_t v21 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(&self->_aeStable + 3) = *MEMORY[0x1E4F1F9F8];
  *(void *)&self->_aeRequestTime.flags = *(void *)(v21 + 16);
  *(int64_t *)((char *)&self->_aeRequestTime.epoch + 4) = 0;
  LOWORD(self->_aeFrameWaitCount) = 256;
  memset(&v67, 0, sizeof(v67));
  HostTimeClocuint64_t k = CMClockGetHostTimeClock();
  CMClockGetTime(&v67, HostTimeClock);
  int started = ((uint64_t (*)(void, BWFigCaptureStream *, BWFigCaptureStream *, BWFigCaptureStream *, BWFigCaptureSynchronizedStreamsGroup *, uint64_t, void, OpaqueFigSampleBufferProcessor **))self->_createAutofocusSampleBufferProcessorFunction)(*MEMORY[0x1E4F1CF80], [(BWFigVideoCaptureStream *)self->_captureStream stream], [(BWFigVideoCaptureStream *)self->_bravoTelephotoCaptureStream stream], [(BWFigVideoCaptureStream *)self->_bravoSuperWideCaptureStream stream], [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup syncGroup], v20, 0, &self->_autofocusProcessor);
  memset(&v66, 0, sizeof(v66));
  uint64_t v23 = CMClockGetHostTimeClock();
  CMClockGetTime(&lhs, v23);
  CMTime rhs = v67;
  CMTimeSubtract(&v66, &lhs, &rhs);
  CMTime rhs = v66;
  if (CMTimeGetSeconds(&rhs) > 0.5 && dword_1EB4C4FF0)
  {
    int v64 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (started) {
    goto LABEL_59;
  }
  if (![(NSMutableDictionary *)self->_autofocusCachedPropertiesDictionary objectForKeyedSubscript:0x1EFA5A200])
  {
    uint64_t v44 = +[BWFigVideoCaptureDevice _autofocusProcessorImageControlModeFromImageControlMode:]((uint64_t)BWFigVideoCaptureDevice, self->_currentImageControlMode);
    if (!v44)
    {
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    uint64_t v45 = (const void *)v44;
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    int v49 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v48 + 56);
    if (!v49)
    {
      int started = -12782;
      goto LABEL_59;
    }
    int started = v49(FigBaseObject, 0x1EFA5A200, v45);
    if (started) {
      goto LABEL_59;
    }
    -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:]((uint64_t)self, @"AutofocusProcessor_VideoMode", v45);
    -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:]((uint64_t)self, @"AutofocusProcessor_VideoMode", v45);
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  autofocusCachedPropertiesDictionardouble y = self->_autofocusCachedPropertiesDictionary;
  uint64_t v26 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](autofocusCachedPropertiesDictionary, "countByEnumeratingWithState:objects:count:", &v59, v69, 16, v53, v56);
  if (!v26) {
    goto LABEL_47;
  }
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)v60;
  do
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      if (*(void *)v60 != v28) {
        objc_enumerationMutation(autofocusCachedPropertiesDictionary);
      }
      uint64_t v30 = *(void **)(*((void *)&v59 + 1) + 8 * i);
      long long v31 = (void *)-[NSMutableDictionary objectForKeyedSubscript:](self->_autofocusCachedPropertiesDictionary, "objectForKeyedSubscript:", v30, v54, v57);
      if (-[BWFigVideoCaptureDevice _shouldDeferAutofocusProcessorProperty:value:]((uint64_t)self, v30, v31))
      {
        BYTE2(self->_aeFrameWaitCount) = 1;
        goto LABEL_43;
      }
      uint64_t v32 = FigSampleBufferProcessorGetFigBaseObject();
      uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v33) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      long long v35 = *(uint64_t (**)(uint64_t, void *, void *))(v34 + 56);
      if (!v35)
      {
        int v36 = -12782;
        int started = -12782;
LABEL_42:
        uint64_t v57 = v58;
        LODWORD(v54) = v36;
        FigDebugAssert3();
LABEL_43:
        if (started) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      int v36 = v35(v32, v30, v31);
      int started = v36;
      if (v36) {
        goto LABEL_42;
      }
LABEL_44:
      -[BWFigVideoCaptureDevice _updateExposureStateForAutofocusProperty:]((uint64_t)self, v30);
      -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:]((uint64_t)self, v30, v31);
      -[BWFigVideoCaptureDevice _updateFaceDetectionStateForAutofocusProperty:propertyValue:]((uint64_t)self, v30, v31);
      -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:]((uint64_t)self, v30, v31);
LABEL_45:
      int started = 0;
    }
    uint64_t v27 = [(NSMutableDictionary *)autofocusCachedPropertiesDictionary countByEnumeratingWithState:&v59 objects:v69 count:16];
  }
  while (v27);
LABEL_47:
  if ((int)FigCapturePlatformIdentifier() < 10) {
    goto LABEL_69;
  }
  if (!CGRectIsEmpty(self->_cachedFocusRectNormalizedInSensorSpace))
  {
    [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys requestedZoomFactor];
    float v38 = v37;
    double v39 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace]((uint64_t)self);
    v73.origin.double x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(self->_cachedFocusRectNormalizedInSensorSpace.origin.x, self->_cachedFocusRectNormalizedInSensorSpace.origin.y, self->_cachedFocusRectNormalizedInSensorSpace.size.width, self->_cachedFocusRectNormalizedInSensorSpace.size.height, v38, v39);
    DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v73);
    uint64_t v41 = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    int v50 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef))(v43 + 56);
    if (!v50)
    {
      int started = -12782;
      goto LABEL_65;
    }
    int started = v50(v41, 0x1EFA5A360, DictionaryRepresentation);
    if (started) {
LABEL_65:
    }
      FigDebugAssert3();
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
  }
  int started = FigSampleBufferAutofocusProcessorStartNow(self->_autofocusProcessor);
  if (!started)
  {
LABEL_69:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    return started;
  }
LABEL_59:
  FigDebugAssert3();
  return started;
}

- (uint64_t)_updateFaceDetectionStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = CFEqual(cf1, @"FaceDetectionMode");
    if (result)
    {
      if (a3 && (CFTypeID v5 = CFGetTypeID(a3), v5 == CFStringGetTypeID()))
      {
        uint64_t result = CFEqual(a3, @"Disable");
        if (!result)
        {
          long long v12 = 0u;
          long long v13 = 0u;
          long long v10 = 0u;
          long long v11 = 0u;
          uint64_t v6 = *(void **)(v4 + 552);
          uint64_t result = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
          if (result)
          {
            uint64_t v7 = result;
            uint64_t v8 = *(void *)v11;
            do
            {
              uint64_t v9 = 0;
              do
              {
                if (*(void *)v11 != v8) {
                  objc_enumerationMutation(v6);
                }
                [*(id *)(*((void *)&v10 + 1) + 8 * v9++) setFaceDetectionEnabled:1];
              }
              while (v7 != v9);
              uint64_t result = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
              uint64_t v7 = result;
            }
            while (result);
          }
        }
      }
      else
      {
        return FigDebugAssert3();
      }
    }
  }
  return result;
}

- (uint64_t)_shouldDeferAutofocusProcessorProperty:(void *)a3 value:
{
  if (result)
  {
    uint64_t v6 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v12 = v3;
      LODWORD(v11) = 0;
      FigDebugAssert3();
    }
    if (objc_msgSend(a2, "isEqualToString:", 0x1EFA59F20, v11, v12))
    {
      uint64_t v7 = 1647;
LABEL_6:
      uint64_t result = 1;
      *(unsigned char *)(v6 + v7) = 1;
      return result;
    }
    uint64_t result = [a2 isEqualToString:0x1EFA5A3C0];
    if (result)
    {
      objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53A98]), "floatValue");
      if (v8 == 0.0)
      {
        objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53A90]), "floatValue");
        if (v9 == 0.0)
        {
          objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53A88]), "floatValue");
          if (v10 == 0.0)
          {
            uint64_t v7 = 1648;
            goto LABEL_6;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

- (BOOL)stereoVideoCaptureEnabled
{
  return self->_stereoVideoCaptureEnabled;
}

uint64_t __54__BWFigVideoCaptureDevice_moduleCalibrationByPortType__block_invoke(uint64_t a1)
{
  uint64_t v1 = (void *)[*(id *)(a1 + 32) referencedObject];
  uint64_t v2 = [v1 copyPropertyIfSupported:*MEMORY[0x1E4F54BA8] error:0];
  if (dword_1EB4C4FF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

- (id)cameraInfoByPortType
{
  return [(BWFigVideoCaptureDevice *)self cameraInfoByPortTypeIncludingLSCGains:0 includeFocusPixelMap:0 includeDefectivePixelTable:0];
}

- (NSString)applicationID
{
  return self->_applicationID;
}

- (void)setPortraitEffectPropertiesDelegate:(id)a3
{
  CFTypeID v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v5)
  {
    objc_msgSend((id)objc_msgSend(v5, "referencedObject"), "setReactionsInProgressChangedHandler:", 0);

    *(void *)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque = 0;
  }
  if (a3)
  {
    *(void *)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque = [[FigWeakReference alloc] initWithReferencedObject:a3];
    [(BWFigVideoCaptureDevice *)(uint64_t)self _sendInitialValuesToPortraitEffectPropertiesDelegate:v6];
  }
}

- (void)setMinimumFrameRate:(float)a3
{
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __47__BWFigVideoCaptureDevice_setMinimumFrameRate___block_invoke;
  v6[3] = &unk_1E5C262A0;
  v6[4] = self;
  float v7 = a3;
  dispatch_async(focusAndExposureUpdateQueue, v6);
  -[BWFigVideoCaptureDevice _setMinimumFrameRate:]((uint64_t)self, a3);
}

- (uint64_t)_setMinimumFrameRate:(uint64_t)result
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    memset(&v18, 0, sizeof(v18));
    uint64_t v4 = *(void **)(result + 496);
    if (v4) {
      [v4 maxExposureDuration];
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    CFTypeID v5 = *(void **)(v3 + 552);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v5);
          }
          *(float *)&double v7 = a2;
          [*(id *)(*((void *)&v14 + 1) + 8 * i) setMinimumFrameRate:v7];
        }
        uint64_t v8 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
      }
      while (v8);
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 520), "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))
    {
      if ((v18.flags & 1) == 0)
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMTime v13 = v18;
        CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v13, v11);
        uint64_t v19 = @"NewPropertyValue";
        CFDictionaryRef v20 = v12;
        objc_msgSend((id)v3, "_postNotificationWithPayload:notificationPayload:", @"MaxExposureDurationChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      }
    }
    return -[BWFigVideoCaptureDevice _updateFrameSkippingRatio](v3);
  }
  return result;
}

- (void)setExifFocalLengthsByZoomFactor:(id)a3
{
}

- (void)setClientExpectsCameraMountedInLandscapeOrientation:(BOOL)a3
{
  LOBYTE(self->_firstValidFramePTS.timescale) = a3;
}

- (void)setSupplementalPointCloudCaptureDevice:(id)a3
{
  self->_supplementalPointCloudCaptureDevice = 0;
  if (a3)
  {
    int v8 = 0;
    uint64_t v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "captureStream"), "stream"), "getPropertyIfSupported:error:", @"MaximumFrameRate", &v8);
    if (v8)
    {
      FigDebugAssert3();
    }
    else
    {
      uint64_t v6 = (void *)v5;
      [a3 setSupplementalPointCloudCaptureDeviceDelegate:self];
      self->_supplementalPointCloudCaptureDevice = [[FigWeakReference alloc] initWithReferencedObject:a3];
      self->_supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate = 0.0;
      [v6 floatValue];
      self->_supplementalPointCloudCaptureDeviceCaptureMinimumFrameRate = v7;
      self->_digitalFlashCaptureSupplementalPointCloudCaptureDeviceFrameRateMaxSkippedFrames = 30;
    }
  }
}

- (void)setSupplementalPointCloudCaptureDeviceDelegate:(id)a3
{
  if (a3) {
    uint64_t v5 = [[FigWeakReference alloc] initWithReferencedObject:a3];
  }
  else {
    uint64_t v5 = 0;
  }
  self->_supplementalPointCloudCaptureDeviceDelegate = v5;
}

uint64_t __51__BWFigVideoCaptureDevice_setTimeLapseCaptureRate___block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(*(void *)(a1 + 32) + 2116) = *(_DWORD *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  int os_unfair_lock_opaque = v2[519]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 487);
  uint64_t result = fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(os_unfair_lock_opaque);
  if (result)
  {
    uint64_t v5 = result;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 552);
    uint64_t result = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = *(void *)v12;
      uint64_t v9 = *MEMORY[0x1E4F54C30];
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v6);
          }
          objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v10++), "stream"), "setProperty:value:", v9, v5);
        }
        while (v7 != v10);
        uint64_t result = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v7 = result;
      }
      while (result);
    }
  }
  return result;
}

- (uint64_t)_updateSensorRawPool
{
  v29[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 132)) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 148))
  {
    FigDebugAssert3();
LABEL_28:
    long long v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_25;
  }
  uint64_t v2 = (void *)[(id)a1 sensorRawPoolRequirements];
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D90]), "intValue");
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 136);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
    id v6 = *(id *)(a1 + 152);
    if (!v6)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      *(void *)(a1 + 152) = v6;
    }
    uint64_t v7 = [v6 objectForKeyedSubscript:&unk_1EFB015E0];
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      uint64_t v9 = *(unsigned int *)(a1 + 160);
      int v10 = v9 + v4;
      if (dword_1EB4C4FF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v5 = (os_unfair_lock_s *)(a1 + 136);
      }
      objc_msgSend(v8, "flushToMinimumCapacity:", v10, v26, v27);
      [v8 setCapacity:v10];
      long long v17 = 0;
      goto LABEL_23;
    }
    long long v12 = objc_alloc_init(BWVideoFormatRequirements);
    -[BWVideoFormatRequirements setWidth:](v12, "setWidth:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F24E10]), "intValue"));
    -[BWVideoFormatRequirements setHeight:](v12, "setHeight:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D08]), "intValue"));
    if (FigCaptureVideoDimensionsAreValid([(BWVideoFormatRequirements *)v12 width] | ((unint64_t)[(BWVideoFormatRequirements *)v12 height] << 32)))
    {
      -[BWVideoFormatRequirements setBytesPerRowAlignment:](v12, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F24C98]), "intValue"));
      -[BWVideoFormatRequirements setPlaneAlignment:](v12, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D78]), "intValue"));
      [(BWVideoFormatRequirements *)v12 setHeightAlignment:16];
      v29[0] = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F24D70]];
      -[BWVideoFormatRequirements setSupportedPixelFormats:](v12, "setSupportedPixelFormats:", [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:1]);
      [(BWVideoFormatRequirements *)v12 setSupportedCacheModes:+[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess]];
      if ([(NSArray *)[(BWVideoFormatRequirements *)v12 supportedPixelFormats] count])
      {
        uint64_t v28 = v12;
        id v13 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v28 count:1]);
        if (v13)
        {
          id v14 = v13;
          uint64_t v9 = *(unsigned int *)(a1 + 160);
          int v15 = v9 + v4;
          if (dword_1EB4C4FF0)
          {
            uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v19 = [BWPixelBufferPool alloc];
          CFDictionaryRef v20 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v19, "initWithVideoFormat:capacity:name:memoryPool:", v14, v15, [NSString stringWithFormat:@"%@_SensorRawBufferPool", BWStringFromCaptureDeviceType(*(_DWORD *)(a1 + 484))], *(void *)(a1 + 3632));
          long long v17 = v20;
          if (!v20)
          {
            FigDebugAssert3();
            uint64_t v18 = 0;
            goto LABEL_24;
          }
          [(BWPixelBufferPool *)v20 preallocate];
          if ([(id)a1 isBravoVariant])
          {
            uint64_t v21 = (void *)[*(id *)(a1 + 544) syncGroup];
            uint64_t v22 = objc_msgSend(v21, "setProperty:value:", *MEMORY[0x1E4F55620], -[BWPixelBufferPool cvPixelBufferPool](v17, "cvPixelBufferPool"));
            if (v22)
            {
              uint64_t v18 = v22;
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v23 = (void *)[*(id *)(a1 + 496) stream];
            uint64_t v24 = objc_msgSend(v23, "setProperty:value:", *MEMORY[0x1E4F54B80], -[BWPixelBufferPool cvPixelBufferPool](v17, "cvPixelBufferPool"));
            if (v24)
            {
              uint64_t v18 = v24;
              goto LABEL_29;
            }
          }
          [*(id *)(a1 + 152) setObject:v17 forKeyedSubscript:&unk_1EFB015E0];
LABEL_23:
          uint64_t v18 = -[BWFigVideoCaptureDevice _setPropertySensorRawBufferPoolRetainCount:]((id *)a1, v9);
          if (!v18)
          {
LABEL_24:
            os_unfair_lock_unlock(v5);
            goto LABEL_25;
          }
LABEL_29:
          FigDebugAssert3();
          goto LABEL_24;
        }
      }
    }
  }
  long long v17 = 0;
  uint64_t v18 = 4294954516;
LABEL_25:

  return v18;
}

- (uint64_t)_setPropertySensorRawBufferPoolRetainCount:(id *)a1
{
  if (!a1) {
    return 0;
  }
  if ([a1 isBravoVariant])
  {
    int v4 = objc_msgSend((id)objc_msgSend(a1[68], "syncGroup"), "supportedProperties");
    uint64_t v5 = *MEMORY[0x1E4F55638];
    if ([v4 objectForKeyedSubscript:*MEMORY[0x1E4F55638]])
    {
      id v6 = (void *)[a1[68] syncGroup];
      uint64_t v7 = objc_msgSend(v6, "setProperty:value:", v5, objc_msgSend(NSNumber, "numberWithInt:", a2));
      if (v7) {
        goto LABEL_8;
      }
      return v7;
    }
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend(a1[62], "stream"), "supportedProperties");
  uint64_t v9 = *MEMORY[0x1E4F54B98];
  if (![v8 objectForKeyedSubscript:*MEMORY[0x1E4F54B98]]) {
    return 0;
  }
  int v10 = (void *)[a1[62] stream];
  uint64_t v7 = objc_msgSend(v10, "setProperty:value:", v9, objc_msgSend(NSNumber, "numberWithInt:", a2));
  if (v7) {
LABEL_8:
  }
    FigDebugAssert3();
  return v7;
}

- (void)_updateStreamingImageIntentTo:(int)a3 from:(void *)a4 masterPortType:
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v47 = v4;
    LODWORD(v46) = 0;
    FigDebugAssert3();
  }
  if (a2 == a3) {
    return;
  }
  if (!a3)
  {
    [(id)a1 minimumFrameRate];
    *(_DWORD *)(a1 + 2084) = v8;
    [(id)a1 maximumFrameRate];
    *(_DWORD *)(a1 + 2088) = v9;
  }
  int v65 = a3;
  if ((a2 - 1) >= 2)
  {
    BOOL v10 = (a3 - 1) < 2;
    if ((a2 - 5) < 3)
    {
      unsigned int v11 = 1;
      BOOL v12 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v10 = 1;
  }
  unsigned int v11 = 0;
  BOOL v12 = (a3 - 5) < 3;
LABEL_12:
  BOOL v57 = v12;
  uint64_t v56 = fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(a2);
  id v13 = (void *)MEMORY[0x1E4F54518];
  id v14 = (void *)MEMORY[0x1E4F54510];
  if (v11)
  {
    if (a2 == 7)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (int)FigCapturePlatformIdentifier() >= 10 ? 16 : 33;
      uint64_t v15 = 8;
    }
    v76[0] = *v13;
    v77.unsigned int value = objc_msgSend(NSNumber, "numberWithInt:", v16, v46, v47);
    v76[1] = *v14;
    *(void *)&v77.int timescale = [NSNumber numberWithInt:v15];
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v77 forKeys:v76 count:2];
    if (v17) {
      -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](a1, *MEMORY[0x1E4F54748], v17);
    }
  }
  int v61 = -[BWFigVideoCaptureDevice _ltmCurveForStreamingImageIntent:](a1, v65);
  unsigned int v68 = -[BWFigVideoCaptureDevice _ltmCurveForStreamingImageIntent:](a1, a2);
  float v18 = -[BWFigVideoCaptureDevice _minimumFrameRateForStreamingImageIntent:masterPortType:](a1, a2, a4);
  float v19 = v18;
  float v20 = 30.0;
  if (a2 != 3) {
    float v20 = *(float *)(a1 + 2088);
  }
  -[BWFigVideoCaptureDevice _setMinimumFrameRate:](a1, v18);
  *(float *)&double v21 = v20;
  [(id)a1 setMaximumFrameRate:v21];
  float v63 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v62 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v54 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id obj = *(id *)(a1 + 552);
  uint64_t v64 = [obj countByEnumeratingWithState:&v72 objects:v78 count:16];
  if (v64)
  {
    if (a2 == 2) {
      float v22 = 2048.0;
    }
    else {
      float v22 = 1024.0;
    }
    if (a2 == 2) {
      float v23 = 1024.0;
    }
    else {
      float v23 = 512.0;
    }
    int v24 = v65 == 3 || v10;
    uint64_t v60 = *(void *)v73;
    uint64_t v53 = *MEMORY[0x1E4F549F0];
    int timescale = (int)fmaxf(v19, 1.0);
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v49 = *MEMORY[0x1E4F52DF0];
    uint64_t v59 = *MEMORY[0x1E4F54730];
    if (a2 == 3) {
      int v24 = 1;
    }
    int v58 = v57 | v24;
    uint64_t v50 = *MEMORY[0x1E4F54C30];
    long long v67 = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v66 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    do
    {
      uint64_t v25 = 0;
      uint64_t v26 = v11;
      do
      {
        if (*(void *)v73 != v60) {
          objc_enumerationMutation(obj);
        }
        uint64_t v27 = *(void **)(*((void *)&v72 + 1) + 8 * v25);
        uint64_t v28 = objc_msgSend(v27, "portType", v46, v47);
        long long v29 = NSNumber;
        [v27 minimumFrameRate];
        objc_msgSend(v63, "setObject:forKeyedSubscript:", objc_msgSend(v29, "numberWithFloat:"), v28);
        uint64_t v30 = &unk_1EFB01610;
        if (*(float *)(a1 + 2088) < v20)
        {
          long long v31 = NSNumber;
          objc_msgSend(v27, "maximumFrameRate", &unk_1EFB01610);
          uint64_t v30 = objc_msgSend(v31, "numberWithFloat:");
        }
        [v62 setObject:v30 forKeyedSubscript:v28];
        if (v61 != v68)
        {
          objc_msgSend(v54, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v68), v28);
          objc_msgSend((id)objc_msgSend(v27, "stream"), "setProperty:value:", v53, objc_msgSend(NSNumber, "numberWithInt:", v68));
        }
        if (!v65)
        {
          if (!*(void *)(a1 + 2096)) {
            *(void *)(a1 + 2096) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          uint64_t v32 = NSNumber;
          [v27 aeMaxGain];
          objc_msgSend(*(id *)(a1 + 2096), "setObject:forKeyedSubscript:", objc_msgSend(v32, "numberWithFloat:"), v28);
          if (*(void *)(a1 + 2104))
          {
            if (v27) {
              goto LABEL_48;
            }
LABEL_50:
            memset(&time, 0, sizeof(time));
          }
          else
          {
            *(void *)(a1 + 2104) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            if (!v27) {
              goto LABEL_50;
            }
LABEL_48:
            [v27 maxExposureDurationFrameworkOverride];
          }
          objc_msgSend(*(id *)(a1 + 2104), "setObject:forKeyedSubscript:", CMTimeCopyAsDictionary(&time, allocator), v28);
        }
        *(_OWORD *)&v70.unsigned int value = v67;
        v70.CMTimeEpoch epoch = v66;
        memset(&v77, 0, sizeof(v77));
        CMTimeMakeFromDictionary(&v77, (CFDictionaryRef)objc_msgSend(*(id *)(a1 + 2104), "objectForKeyedSubscript:", objc_msgSend(v27, "portType")));
        switch(a2)
        {
          case 0:
          case 4:
          case 8:
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2096), "objectForKeyedSubscript:", v28), "floatValue");
            float v34 = v33;
            *(_OWORD *)&v70.unsigned int value = *(_OWORD *)&v77.value;
            CMTimeEpoch epoch = v77.epoch;
            goto LABEL_59;
          case 1:
          case 2:
            if (!*(unsigned char *)(a1 + 2112)
              || ![v28 isEqualToString:v49]
              || (float v34 = v22, ([*(id *)(a1 + 2160) containsObject:v28] & 1) == 0))
            {
              float v34 = v23;
            }
            *(_OWORD *)&v70.unsigned int value = v67;
            CMTimeEpoch epoch = v66;
LABEL_59:
            v70.CMTimeEpoch epoch = epoch;
            break;
          case 3:
            [v27 momentCaptureVideoRecordingAEMaxGain];
            if (v37 == 0.0) {
              float v34 = 120.0;
            }
            else {
              float v34 = v37;
            }
            CMTimeMake(&v70, 1, timescale);
            break;
          case 5:
          case 7:
            *(_OWORD *)&v70.unsigned int value = v67;
            CMTimeEpoch v36 = v66;
            goto LABEL_66;
          case 6:
            *(_OWORD *)&v70.unsigned int value = *(_OWORD *)&v77.value;
            CMTimeEpoch v36 = v77.epoch;
LABEL_66:
            v70.CMTimeEpoch epoch = v36;
            float v34 = 512.0;
            break;
          default:
            float v34 = 0.0;
            break;
        }
        float v38 = (void *)[v27 stream];
        LODWORD(v39) = vcvts_n_s32_f32(v34, 8uLL);
        if (!objc_msgSend(v38, "setProperty:value:", v59, objc_msgSend(NSNumber, "numberWithInt:", v39)))
        {
          *(float *)&double v40 = v34;
          [v27 setAeMaxGain:v40];
        }
        if ((((a2 == 3) ^ [v27 lowLightVideoEnabled]) & 1) != 0
          || v26 != [v27 timeLapseEnabled])
        {
          [v27 setLowLightVideoEnabled:a2 == 3];
          [v27 setTimeLapseEnabled:v26];
          [v27 updateAETables];
        }
        if (v58)
        {
          CMTime v69 = v70;
          [v27 setMaxExposureDurationFrameworkOverride:&v69];
          [v27 updateMaxExposureDuration];
          if (v57) {
            objc_msgSend((id)objc_msgSend(v27, "stream"), "setProperty:value:", v50, v56);
          }
        }
        if (v27 == *(void **)(a1 + 568))
        {
          [v27 maxEIT];
          int v42 = v41;
          if ((a2 - 1) > 1)
          {
            if (!v26) {
              goto LABEL_82;
            }
          }
          else if (objc_msgSend(*(id *)(a1 + 2160), "containsObject:", objc_msgSend(*(id *)(a1 + 568), "portType")))
          {
            int v42 = 2139095039;
LABEL_82:
            objc_msgSend(*(id *)(a1 + 1312), "setTeleMaxAEGain:");
            LODWORD(v43) = v42;
            [*(id *)(a1 + 1312) setTeleMaxEIT:v43];
            goto LABEL_83;
          }
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2096), "objectForKeyedSubscript:", objc_msgSend(v27, "portType")), "floatValue");
          goto LABEL_82;
        }
LABEL_83:
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v26 = v11;
        }
        ++v25;
      }
      while (v64 != v25);
      uint64_t v64 = [obj countByEnumeratingWithState:&v72 objects:v78 count:16];
    }
    while (v64);
  }
  if (objc_msgSend(v54, "count", v46)) {
    uint64_t v45 = 5;
  }
  else {
    uint64_t v45 = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1840));
  [*(id *)(a1 + 1848) setExpectedMinimumFrameRatesByPortType:v63];
  [*(id *)(a1 + 1848) setExpectedMaximumFrameRatesByPortType:v62];
  [*(id *)(a1 + 1848) setExpectedLTMCurvesByPortType:v54];
  [*(id *)(a1 + 1848) setLtmCurvesTransitionFrameCount:v45];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1840));
}

- (void)setPortraitEffectStudioLightQuality:(int64_t)a3
{
  if (self)
  {
    uint64_t v4 = (BWFigVideoCaptureDevice **)self;
    uint64_t v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v5)
    {
      self = (BWFigVideoCaptureDevice *)[v5 referencedObject];
    }
    else if ([v4 isBravoVariant])
    {
      self = (BWFigVideoCaptureDevice *)[v4 masterCaptureStream];
    }
    else
    {
      self = v4[62];
    }
  }
  [(BWFigVideoCaptureDevice *)self didChangePortraitEffectStudioLightQuality:a3];
}

- (void)startupFaceDetectionIfNeeded
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v3 = [(NSArray *)captureStreams countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * i) setObjectDetectionStartupDeferred:0];
      }
      uint64_t v4 = [(NSArray *)captureStreams countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)performBlockOnNotificationQueue:(id)a3
{
  if (a3)
  {
    notificationQueue = self->_notificationQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __59__BWFigVideoCaptureDevice_performBlockOnNotificationQueue___block_invoke;
    block[3] = &unk_1E5C249F0;
    block[4] = a3;
    dispatch_async(notificationQueue, block);
  }
}

- (uint64_t)_postSDOFEffectStatus:(uint64_t)a3 SDOFStagePreviewStatus:
{
  if (result)
  {
    uint64_t v4 = (id *)result;
    uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithInt:", a2), @"EffectStatus", 0);
    if ([v4[189] portraitSceneMonitoringRequiresStageThresholds]) {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a3), @"StagePreviewStatus");
    }
    return [v4 _postNotificationWithPayload:@"ShallowDepthOfFieldStatusChanged" notificationPayload:v5];
  }
  return result;
}

+ (void)initialize
{
  if ((id)objc_opt_class() == a1)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
  }
}

- (NSString)description
{
  uint64_t v3 = NSString;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  return (NSString *)[v3 stringWithFormat:@"<%@: %p> type:%@ portTypes:%@", v5, self, FigCaptureSourceDeviceTypeToShortString(self->_deviceType, self->_position), -[NSArray componentsJoinedByString:](self->_activePortTypes, "componentsJoinedByString:", @","];
}

- (BWMemoryPool)memoryPool
{
  return (BWMemoryPool *)self->_activeSensorRegionForCameraControls;
}

- (uint64_t)_returnStreamsToVendor
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(*(id *)(result + 552), "count"));
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v3 = *(void **)(v1 + 552);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "stream"));
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
    uint64_t result = [v2 count];
    if (result)
    {
      mach_absolute_time();
      return [*(id *)(v1 + 16) takeBackStreams:v2 device:*(void *)(v1 + 8) totalStreamingDuration:FigHostTimeToNanoseconds() / 0xF4240uLL];
    }
  }
  return result;
}

- (void)invalidateForParallelGraphRebuild
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [(BWFigVideoCaptureDevice *)self releaseResources];
  -[BWFigVideoCaptureDevice _returnStreamsToVendor]((uint64_t)self);

  self->_deviceVendor = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v4 = [(NSArray *)captureStreams countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * i) setDelegate:0];
      }
      uint64_t v5 = [(NSArray *)captureStreams countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }

  self->_synchronizedStreamsStartStopSynchronizer = 0;
  self->_synchronizedStreamsGroup = 0;
  self->_captureStreauint64_t m = 0;
  self->_pearlInfraredCaptureStreauint64_t m = 0;
  self->_parallaxMitigationTargetCaptureStreauint64_t m = 0;
  self->_bravoTelephotoCaptureStreauint64_t m = 0;
  *(_OWORD *)&self->_bravoSuperWideCaptureStreauint64_t m = 0u;
  *(_OWORD *)&self->_currentMasterCaptureStreauint64_t m = 0u;

  self->_captureStreams = 0;
  self->_captureStreamsByFocalLength = 0;

  *(void *)&self->_overCaptureEnabled = 0;
  self->_device = 0;
}

- (void)dealloc
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  [(BWFigVideoCaptureDevice *)self releaseResources];

  self->_notificationQueue = 0;
  -[BWFigVideoCaptureDevice _returnStreamsToVendor]((uint64_t)self);

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v4 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * i) setDelegate:0];
      }
      uint64_t v5 = [(NSArray *)captureStreams countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  clocuint64_t k = self->_clock;
  if (clock) {
    CFRelease(clock);
  }

  id autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  if (autoImageControlModeCompletionHandler)
  {
    FigDebugAssert3();
    id autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  }

  if (self->_autofocusProcessor) {
    FigDebugAssert3();
  }

  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();

  FigSimpleMutexDestroy();
  backgroundReplacementPixelBuffer = self->_backgroundReplacementPixelBuffer;
  if (backgroundReplacementPixelBuffer) {
    CFRelease(backgroundReplacementPixelBuffer);
  }

  v11.receiver = self;
  v11.super_class = (Class)BWFigVideoCaptureDevice;
  [(BWFigVideoCaptureDevice *)&v11 dealloc];
}

void __59__BWFigVideoCaptureDevice_performBlockOnNotificationQueue___block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)drainNotifications
{
}

- (void)releaseResources
{
  if (self->_sensorRawPools)
  {
    if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
    {
      if (self->_multipleSensorRawBufferPoolsEnabled) {
        uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55630];
      }
      else {
        uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55620];
      }
      uint64_t v4 = *v3;
      uint64_t v5 = [(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup syncGroup];
    }
    else
    {
      if (self->_multipleSensorRawBufferPoolsEnabled) {
        uint64_t v6 = (uint64_t *)MEMORY[0x1E4F54B90];
      }
      else {
        uint64_t v6 = (uint64_t *)MEMORY[0x1E4F54B80];
      }
      uint64_t v4 = *v6;
      uint64_t v5 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    }
    [(BWFigCaptureSynchronizedStreamsGroup *)v5 setProperty:v4 value:0];

    self->_sensorRawPools = 0;
  }
}

- (float)minimumFrameRate
{
  [(BWFigVideoCaptureStream *)self->_captureStream minimumFrameRate];
  return result;
}

- (float)maximumFrameRate
{
  [(BWFigVideoCaptureStream *)self->_captureStream maximumFrameRate];
  return result;
}

- (BOOL)cinematicFramingEnabled
{
  return self->_cinematicFramingEnabled;
}

- (BOOL)backgroundBlurEnabled
{
  return self->_backgroundBlurEnabled;
}

- (BOOL)studioLightingEnabled
{
  return self->_studioLightingEnabled;
}

- (BOOL)reactionEffectsEnabled
{
  return self->_reactionEffectsEnabled;
}

- (BOOL)backgroundReplacementEnabled
{
  return self->_backgroundReplacementEnabled;
}

- (void)unregisterForAEMatrixMetadata
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v3 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    uint64_t v6 = *MEMORY[0x1E4F54728];
    uint64_t v7 = MEMORY[0x1E4F1CC28];
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(captureStreams);
        }
        objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "stream"), "setPropertyIfSupported:value:", v6, v7);
      }
      uint64_t v4 = [(NSArray *)captureStreams countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

- (NSDictionary)faceDetectionConfiguration
{
  return [(BWFigVideoCaptureStream *)self->_captureStream faceDetectionConfiguration];
}

- (int)temporalNoiseReductionBand0StrengthModulation
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.epoch;
}

- (void)setTemporalNoiseReductionBand0StrengthModulation:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(captureStreams);
        }
        long long v10 = *(void **)(*((void *)&v18 + 1) + 8 * v9);
        if (self->_depthType == 3 && v10 == [(NSArray *)self->_captureStreamsByFocalLength firstObject])
        {
          uint64_t v13 = BYTE1(self->_cinematicVideoAverageRenderingTime);
          uint64_t timescale_high = HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          long long v15 = v10;
          BOOL v11 = 0;
          uint64_t v12 = 0;
          uint64_t v16 = 0;
        }
        else
        {
          BOOL v11 = BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) == 0;
          uint64_t v12 = BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          uint64_t v13 = BYTE1(self->_cinematicVideoAverageRenderingTime);
          uint64_t timescale_high = HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          long long v15 = v10;
          uint64_t v16 = v3;
        }
        [v15 setTemporalNoiseReductionConfigurationBand0Enabled:v11 rawEnabled:v12 modulation:v16 adaptiveOverscanEnabled:v13 strengthHighEnabled:timescale_high];
        ++v9;
      }
      while (v7 != v9);
      uint64_t v17 = [(NSArray *)captureStreams countByEnumeratingWithState:&v18 objects:v22 count:16];
      uint64_t v7 = v17;
    }
    while (v17);
  }
  LODWORD(self->_ptsOfLastTimeOfFlightFrameRateChange.epoch) = v3;
}

- (void)_postNotificationWithName:(uint64_t)a3 payloadNewPropertyValue:
{
  uint64_t v6 = a3;
  if (a1)
  {
    uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:&v6 forKeys:&BWFigVideoCaptureDeviceNotificationNewPropertyValueKey count:1];
    [a1 _postNotificationWithPayload:a2 notificationPayload:v5];
  }
}

- (void)_teardownAutoFocusSampleBufferProcessor
{
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (self->_autofocusProcessor)
  {
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    if (FigBaseObject)
    {
      uint64_t v4 = FigBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    autofocusProcessor = self->_autofocusProcessor;
    if (autofocusProcessor)
    {
      CFRelease(autofocusProcessor);
      self->_autofocusProcessor = 0;
    }
  }
}

- (void)_serviceDeferredAutofocusProcessorPropertiesFromCaptureStream:(void *)a3 frameStatisticsByPortType:
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 1646))
    {
      if ((unint64_t)[a3 frameCount] >= 3)
      {
        uint64_t v6 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
        if ([v6 aeTarget])
        {
          if ([v6 aeAverage])
          {
            unsigned int v7 = [v6 aeTarget];
            unsigned int v8 = [v6 aeAverage];
            if ((unint64_t)[a3 frameCount] > 0xB
              || (float v9 = (float)v7 / (float)v8, v9 > 0.8) && v9 < 1.2)
            {
              long long v10 = *(NSObject **)(a1 + 1576);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = __115__BWFigVideoCaptureDevice__serviceDeferredAutofocusProcessorPropertiesFromCaptureStream_frameStatisticsByPortType___block_invoke;
              block[3] = &unk_1E5C24430;
              block[4] = a1;
              dispatch_async(v10, block);
              *(unsigned char *)(a1 + 1646) = 0;
            }
          }
        }
      }
    }
  }
}

uint64_t __115__BWFigVideoCaptureDevice__serviceDeferredAutofocusProcessorPropertiesFromCaptureStream_frameStatisticsByPortType___block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  v14[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 32);
  if (*(unsigned char *)(v2 + 1647))
  {
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 56);
    if (!v6 || (float result = v6(FigBaseObject, 0x1EFA59F20, *MEMORY[0x1E4F1D260]), result)) {
      float result = FigDebugAssert3();
    }
    *(unsigned char *)(*(void *)(v1 + 32) + 1647) = 0;
    uint64_t v2 = *(void *)(v1 + 32);
  }
  if (*(unsigned char *)(v2 + 1648))
  {
    uint64_t v7 = *MEMORY[0x1E4F53A90];
    v13[0] = *MEMORY[0x1E4F53A98];
    v13[1] = v7;
    v14[0] = &unk_1EFB01598;
    v14[1] = &unk_1EFB01598;
    void v13[2] = *MEMORY[0x1E4F53A88];
    v14[2] = &unk_1EFB01598;
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3];
    uint64_t v9 = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 56);
    if (!v12 || (float result = v12(v9, 0x1EFA5A3C0, v8), result)) {
      float result = FigDebugAssert3();
    }
    *(unsigned char *)(*(void *)(v1 + 32) + 1648) = 0;
  }
  return result;
}

- (void)shutDownSystemPressuredDevice
{
}

- (void)captureStreamFailedToStartStreaming:(id)a3
{
}

- (void)captureStreamWillStopCameraStreamingMonitor
{
  BYTE1(self->_lastSphereMode) = 0;
}

- (void)captureStreamWillStopStreaming:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)&self->_streamingSessionAnalyticsVideoDimensions + 2;
  if (BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width)
    && [(BWFigVideoCaptureStream *)self->_captureStream hasSphere])
  {
    os_unfair_lock_lock(&self->_bravoMasterLock);
    CMTimeValue value = self->_mostRecentPTS.value;
    CMTimeScale timescale = self->_mostRecentPTS.timescale;
    CMTimeFlags flags = self->_mostRecentPTS.flags;
    if (flags)
    {
      p_CMTimeEpoch epoch = &self->_mostRecentPTS.epoch;
    }
    else
    {
      CMTimeValue value = *MEMORY[0x1E4F1FA10];
      CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
      CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
      p_CMTimeEpoch epoch = (int64_t *)(MEMORY[0x1E4F1FA10] + 16);
    }
    CMTimeEpoch v8 = *p_epoch;
    os_unfair_lock_unlock(&self->_bravoMasterLock);
    os_unfair_lock_lock((os_unfair_lock_t)&self->_streamingSessionAnalyticsHighlightRecoveryEnabled);
    memset(&v21, 0, sizeof(v21));
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = v8;
    CMTime rhs = *(CMTime *)&self->_colorSpace;
    CMTimeSubtract(&v21, &lhs, &rhs);
    memset(&lhs, 0, sizeof(lhs));
    rhs.CMTimeValue value = value;
    rhs.CMTimeScale timescale = timescale;
    rhs.CMTimeFlags flags = flags;
    rhs.CMTimeEpoch epoch = v8;
    CMTime v19 = *(CMTime *)&self->_lastPTSWithLargeSphereTravel.timescale;
    CMTimeSubtract(&lhs, &rhs, &v19);
    if ([*(id *)&self->_lastPTSOfActiveToStillPreviewActiveTransition.timescale isEqual:*MEMORY[0x1E4F54E60]])
    {
      CMTimeMake(&rhs, -1, 30);
      CMTime lhs = rhs;
    }
    if ((lhs.flags & 1) != 0 && (CMTime rhs = lhs, CMTimeGetSeconds(&rhs) <= 0.5))
    {
      CMTime rhs = v21;
      BOOL v11 = CMTimeGetSeconds(&rhs) < 0.200000003;
      double v12 = dbl_1A5F0CED0[v11];
      CMTime rhs = lhs;
      float v9 = v12 - CMTimeGetSeconds(&rhs);
    }
    else
    {
      if ((float)(0.033 - *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height) >= 0.0) {
        float v9 = 0.033 - *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height;
      }
      else {
        float v9 = 0.0;
      }
      CMTime rhs = v21;
      if (CMTimeGetSeconds(&rhs) >= 0.100000001)
      {
        LOBYTE(v11) = 0;
      }
      else
      {
        CMTime rhs = v21;
        float v10 = 0.100000001 - CMTimeGetSeconds(&rhs);
        if (v9 < v10) {
          float v9 = v10;
        }
        LOBYTE(v11) = 1;
      }
    }
    os_unfair_lock_lock(&self->_currentMasterCaptureStreamLock);
    if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled
      && self->_currentMasterCaptureStream == self->_captureStream)
    {
      float v9 = v9 + -0.0333333333;
    }
    os_unfair_lock_unlock(&self->_currentMasterCaptureStreamLock);
    if (v9 < 0.0) {
      float v9 = 0.0;
    }
    v5[1] = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)&self->_streamingSessionAnalyticsHighlightRecoveryEnabled);
    if (v9 > 0.0) {
      usleep((float)(v9 * 1000000.0));
    }
  }
  [(BWStreamStartStopSynchronizer *)self->_synchronizedStreamsStartStopSynchronizer streamWillStop:a3];
  os_unfair_lock_lock(&self->_autoImageControlModeCompletionLock);
  id autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  self->_id autoImageControlModeCompletionHandler = 0;
  id v14 = [(BWImageControlModeTransitionMonitor *)self->_autoImageControlModeTransitionMonitor description];

  self->_autoImageControlModeTransitionMonitor = 0;
  os_unfair_lock_unlock(&self->_autoImageControlModeCompletionLock);
  if (autoImageControlModeCompletionHandler)
  {
    if (dword_1EB4C4FF0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(v19.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v19.value)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        LODWORD(lhs.value) = 136315394;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice captureStreamWillStopStreaming:]";
        LOWORD(lhs.flags) = 2112;
        *(void *)((char *)&lhs.flags + 2) = v14;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v18 = (void (*)(void *, void, CMTime *))autoImageControlModeCompletionHandler[2];
    CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    v18(autoImageControlModeCompletionHandler, 0, &v21);
  }
}

- (void)captureStreamDidStopStreaming:(id)a3
{
  if (self->_captureStream == a3) {
    -[BWFigVideoCaptureDevice _deviceDidStopStreaming]((uint64_t)self);
  }
  synchronizedStreamsStartStopSynchronizer = self->_synchronizedStreamsStartStopSynchronizer;
  [(BWStreamStartStopSynchronizer *)synchronizedStreamsStartStopSynchronizer streamDidStop:a3];
}

- (uint64_t)_deviceDidStopStreaming
{
  v48[2] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 4089))
    {
      *(_WORD *)(result + 4198) = 0;
      *(_DWORD *)(result + 4200) = 0;
      uint64_t v2 = MEMORY[0x1E4F1F9F8];
      long long v25 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(result + 4232) = *MEMORY[0x1E4F1F9F8];
      uint64_t v3 = *(void *)(v2 + 16);
      *(void *)(result + 4248) = v3;
      if (*(void *)(result + 1512))
      {
        v47[0] = @"EffectStatus";
        v47[1] = @"StagePreviewStatus";
        v48[0] = &unk_1EFB015E0;
        v48[1] = &unk_1EFB015E0;
        objc_msgSend((id)result, "_postNotificationWithPayload:notificationPayload:", @"ShallowDepthOfFieldStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v48, v47, 2));
      }
      if (*(void *)(v1 + 1528))
      {
        uint64_t v45 = @"NewPropertyValue";
        uint64_t v46 = &unk_1EFB015F8;
        objc_msgSend((id)v1, "_postNotificationWithPayload:notificationPayload:", @"StereoVideoCaptureStatusChanged", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
      }
      uint64_t v4 = *(NSObject **)(v1 + 1576);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke;
      block[3] = &unk_1E5C24430;
      block[4] = v1;
      dispatch_sync(v4, block);
      uint64_t v5 = [*(id *)(v1 + 1288) portType];
      if (!v5) {
        uint64_t v5 = [*(id *)(v1 + 496) portType];
      }
      uint64_t v6 = *(NSObject **)(v1 + 1552);
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_2;
      v40[3] = &unk_1E5C24458;
      v40[4] = v1;
      v40[5] = v5;
      dispatch_sync(v6, v40);
      dispatch_sync(*(dispatch_queue_t *)(v1 + 1560), &__block_literal_global_302);
      dispatch_sync(*(dispatch_queue_t *)(v1 + 2744), &__block_literal_global_305);
      if (*(unsigned char *)(v1 + 3916))
      {
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v7 = *(void **)(v1 + 552);
        uint64_t v8 = [v7 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v37;
          uint64_t v11 = *MEMORY[0x1E4F54C28];
          uint64_t v12 = MEMORY[0x1E4F1CC28];
          do
          {
            for (uint64_t i = 0; i != v9; ++i)
            {
              if (*(void *)v37 != v10) {
                objc_enumerationMutation(v7);
              }
              objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v36 + 1) + 8 * i), "stream", v25), "setPropertyIfSupported:value:", v11, v12);
            }
            uint64_t v9 = [v7 countByEnumeratingWithState:&v36 objects:v44 count:16];
          }
          while (v9);
        }
      }
      objc_msgSend(*(id *)(v1 + 2736), "setFudgedZoomRanges:", 0, v25);
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1492));

      *(void *)(v1 + 1512) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1492));
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1540));

      *(void *)(v1 + 1528) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1540));
      if (*(unsigned char *)(v1 + 2432))
      {
        [*(id *)(v1 + 2008) reset];
        *(unsigned char *)(v1 + 2016) = 0;
        *(_OWORD *)(v1 + 2032) = 0u;
        *(_OWORD *)(v1 + 2568) = v26;
        *(void *)(v1 + 2584) = v3;
        *(unsigned char *)(v1 + 3208) = 0;
        if (*(void *)(v1 + 2544))
        {
          id v14 = *(NSObject **)(v1 + 2472);
          v35[0] = MEMORY[0x1E4F143A8];
          v35[1] = 3221225472;
          v35[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_3;
          v35[3] = &unk_1E5C24430;
          v35[4] = v1;
          dispatch_sync(v14, v35);
          [(id)v1 _resetStillImageCaptureRequestState];

          *(void *)(v1 + 2544) = 0;
        }
      }
      [(id)v1 setTorchLevel:0.0];

      *(void *)(v1 + 3064) = 0;
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1948));
      [*(id *)(v1 + 1952) reset];
      *(_DWORD *)(v1 + 2188) = -1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1948));
      -[BWFigVideoCaptureDevice _reportAPSOffsetEstimatorInfo](v1);
      if (!*(unsigned char *)(v1 + 232)
        || (-[BWFigVideoCaptureDevice _reportDeskViewStreamingSessionCoreAnalyticsData](v1), *(unsigned char *)(v1 + 248)))
      {
        -[BWFigVideoCaptureDevice _reportStreamingSessionCoreAnalyticsData](v1);
      }
      if ([*(id *)(v1 + 3272) count])
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v15 = *(void **)(v1 + 3272);
        uint64_t v16 = [v15 countByEnumeratingWithState:&v31 objects:v43 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v32;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v32 != v18) {
                objc_enumerationMutation(v15);
              }
              [+[BWAggdDataReporter sharedInstance] reportCriticalFocusErrorOccurredForPortType:*(void *)(*((void *)&v31 + 1) + 8 * j)];
            }
            uint64_t v17 = [v15 countByEnumeratingWithState:&v31 objects:v43 count:16];
          }
          while (v17);
        }
      }

      *(void *)(v1 + 3264) = 0;
      *(void *)(v1 + 3272) = 0;

      *(void *)(v1 + 3280) = 0;
      *(void *)(v1 + 3288) = 0;

      *(void *)(v1 + 3296) = 0;
      *(void *)(v1 + 3304) = 0;
      if ([*(id *)(v1 + 3312) count])
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v20 = *(void **)(v1 + 3312);
        uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v42 count:16];
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v23 = *(void *)v28;
          do
          {
            for (uint64_t k = 0; k != v22; ++k)
            {
              if (*(void *)v28 != v23) {
                objc_enumerationMutation(v20);
              }
              -[BWAggdDataReporter reportSphereJitterDetectionsForPortType:detectionAttemps:successfulDetections:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportSphereJitterDetectionsForPortType:detectionAttemps:successfulDetections:", *(void *)(*((void *)&v27 + 1) + 8 * k), objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3312), "objectForKeyedSubscript:", *(void *)(*((void *)&v27 + 1) + 8 * k)), "intValue"), objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3320), "objectForKeyedSubscript:", *(void *)(*((void *)&v27 + 1) + 8 * k)), "intValue"));
            }
            uint64_t v22 = [v20 countByEnumeratingWithState:&v27 objects:v42 count:16];
          }
          while (v22);
        }
      }

      *(void *)(v1 + 3312) = 0;
      *(void *)(v1 + 3320) = 0;

      *(void *)(v1 + 3416) = 0;
      *(void *)(v1 + 3448) = 0;

      *(void *)(v1 + 3456) = 0;
      *(void *)(v1 + 3504) = 0;
      [*(id *)(v1 + 3632) disableForCaptureDevice:*(void *)(v1 + 8)];

      *(void *)(v1 + 3704) = 0;
      *(void *)(v1 + 3720) = 0;
      [*(id *)(v1 + 592) setWaitForMasterAEToSettle:0];
      *(_DWORD *)(v1 + 304) = -1082130432;
      *(unsigned char *)(v1 + 308) = 0;
      *(_DWORD *)(v1 + 272) = -1082130432;
      *(unsigned char *)(v1 + 276) = 0;
      *(unsigned char *)(v1 + 376) = 0;
      float result = [*(id *)(v1 + 4152) stop];
      *(void *)(v1 + 4128) = 0;
      *(_WORD *)(v1 + 4089) = 0;
    }
  }
  return result;
}

- (float)_updateTimeOfFlightStreamingTime:(float)result
{
  if (a1)
  {
    CMTime lhs = *a2;
    CMTime v9 = *(CMTime *)(a1 + 3888);
    CMTimeSubtract(&time, &lhs, &v9);
    float Seconds = CMTimeGetSeconds(&time);
    int v5 = *(_DWORD *)(a1 + 3884);
    uint64_t v6 = 3876;
    uint64_t v7 = 3880;
    if (v5 == 1) {
      uint64_t v7 = 3872;
    }
    if (v5 != 8) {
      uint64_t v6 = v7;
    }
    if (v5) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 3868;
    }
    float result = *(float *)(a1 + v8) + Seconds;
    *(float *)(a1 + v8) = result;
  }
  return result;
}

- (__n128)_accumulateInvalidFramesForAnalytics:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v3 = a1 + 4300;
    if (a2)
    {
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v3;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 4316);
      long long v6 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v4;
      if (CMTimeCompare(&time1, &time2))
      {
        ++*(_DWORD *)(a1 + 4324);
        return result;
      }
      uint64_t v3 = a1 + 4276;
      CMTime time1 = *(CMTime *)(a1 + 4276);
      *(_OWORD *)&time2.CMTimeValue value = v6;
      time2.CMTimeEpoch epoch = v4;
    }
    else
    {
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v3;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 4316);
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    }
    if (!CMTimeCompare(&time1, &time2))
    {
      *(void *)(v3 + 16) = *(void *)(a1 + 1272);
      __n128 result = *(__n128 *)(a1 + 1256);
      *(__n128 *)uint64_t v3 = result;
    }
  }
  return result;
}

- (void)_serviceVariableFrameRateWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:
{
  if (a1)
  {
    uint64_t v7 = objc_msgSend(a4, "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    [a3 maximumFrameRate];
    float v9 = v8;
    uint64_t v10 = [*(id *)(a1 + 2736) timeForLastRequestedZoomFactor];
    BOOL v11 = (float)((float)((float)(1.0 / v9) * 1000.0) * 3.0) > (float)(uint64_t)(FigGetUpTimeNanoseconds() / 0xF4240uLL
                                                                              - v10);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
    id v12 = *(id *)(a1 + 3184);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
    uint64_t v13 = *(void **)(a1 + 3704);
    [a3 maximumFrameRate];
    int v15 = v14;
    [a3 aeMaxGain];
    LODWORD(v17) = v16;
    LODWORD(v18) = v15;
    [v13 processSampleBuffer:a2 frameStatistics:v7 currentFrameRate:v11 aeMaxGain:v12 zoomInProgress:v18 mostRecentInferenceResult:v17];
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3728));
    [*(id *)(a1 + 3704) suggestedFrameRate];
    *(float *)(a1 + 3712) = v19;
    if (v19 == 0.0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3728));
    }
    else
    {
      float v20 = v19;
      float v21 = *(float *)(a1 + 3716);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3728));
      if (v20 != v21)
      {
        uint64_t v22 = *(NSObject **)(a1 + 3736);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __113__BWFigVideoCaptureDevice__serviceVariableFrameRateWithSampleBuffer_fromCaptureStream_frameStatisticsByPortType___block_invoke;
        block[3] = &unk_1E5C24430;
        block[4] = a1;
        dispatch_async(v22, block);
      }
    }
  }
}

uint64_t __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke_2(uint64_t a1)
{
  return -[BWFigVideoCaptureDevice _updateActionCameraMaxExposureDurationForFlickerFrequency:](*(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

- (uint64_t)_updateActionCameraMaxExposureDurationForFlickerFrequency:(uint64_t)result
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v23 = v2;
      LODWORD(v22) = 0;
      FigDebugAssert3();
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = *(id *)(v3 + 552);
    __n128 result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16, v22, v23);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v26 = *(void *)v34;
      uint64_t v25 = *MEMORY[0x1E4F54730];
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v34 != v26) {
            objc_enumerationMutation(obj);
          }
          long long v6 = *(void **)(*((void *)&v33 + 1) + 8 * v5);
          uint64_t v7 = [v6 portType];
          if (a2)
          {
            CMTimeMake(&time, 1, 2 * a2);
            CMTimeValue value = time.value;
            CMTimeScale timescale = time.timescale;
            uint64_t v39 = *(void *)&time.flags;
            int epoch_high = HIDWORD(time.epoch);
            Float64 Seconds = CMTimeGetSeconds(&time);
            CMTimeMakeFromDictionary(&v32, (CFDictionaryRef)[*(id *)(v3 + 2104) objectForKeyedSubscript:v7]);
            *(float *)&Float64 Seconds = Seconds / CMTimeGetSeconds(&v32);
            objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2096), "objectForKeyedSubscript:", v7), "floatValue");
            float v12 = v11 / *(float *)&Seconds;
          }
          else
          {
            CMTimeMakeFromDictionary(&time, (CFDictionaryRef)[*(id *)(v3 + 2104) objectForKeyedSubscript:v7]);
            CMTimeValue value = time.value;
            CMTimeScale timescale = time.timescale;
            uint64_t v39 = *(void *)&time.flags;
            int epoch_high = HIDWORD(time.epoch);
            objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2096), "objectForKeyedSubscript:", v7), "floatValue");
            float v12 = v13;
          }
          uint64_t v30 = v39;
          int v31 = epoch_high;
          CMTimeValue v28 = value;
          CMTimeScale v29 = timescale;
          [v6 setMaxExposureDurationFrameworkOverride:&v28];
          [v6 updateMaxExposureDuration];
          int v14 = (void *)[v6 stream];
          LODWORD(v15) = vcvts_n_s32_f32(v12, 8uLL);
          if (!objc_msgSend(v14, "setProperty:value:", v25, objc_msgSend(NSNumber, "numberWithInt:", v15)))
          {
            *(float *)&double v16 = v12;
            [v6 setAeMaxGain:v16];
          }
          if (v6 == *(void **)(v3 + 568))
          {
            [v6 maxEIT];
            int v18 = v17;
            *(float *)&double v19 = v12;
            [*(id *)(v3 + 1312) setTeleMaxAEGain:v19];
            LODWORD(v20) = v18;
            [*(id *)(v3 + 1312) setTeleMaxEIT:v20];
          }
          ++v5;
        }
        while (v4 != v5);
        __n128 result = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
        uint64_t v4 = result;
      }
      while (result);
    }
    if (a2)
    {
      if (!dword_1EB4C4FF0) {
        return result;
      }
    }
    else if (!dword_1EB4C4FF0)
    {
      return result;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

- (float)_collectAPSStatistics:(float *)result
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
      long long v6 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F54300]];
      uint64_t v7 = *MEMORY[0x1E4F52DD8];
      float v8 = v4;
      if (([v5 isEqualToString:*MEMORY[0x1E4F52DD8]] & 1) == 0) {
        float v8 = (void *)[v6 objectForKeyedSubscript:v7];
      }
      uint64_t v9 = *MEMORY[0x1E4F52DF0];
      char v10 = [v5 isEqualToString:*MEMORY[0x1E4F52DF0]];
      float v11 = v4;
      if ((v10 & 1) == 0) {
        float v11 = (void *)[v6 objectForKeyedSubscript:v9];
      }
      float v12 = (uint64_t *)MEMORY[0x1E4F53CD0];
      float v13 = (uint64_t *)MEMORY[0x1E4F54278];
      if (*((unsigned char *)v2 + 1869))
      {
        uint64_t v14 = *MEMORY[0x1E4F53CD0];
        uint64_t v15 = (void *)[v8 objectForKeyedSubscript:*MEMORY[0x1E4F53CD0]];
        uint64_t v16 = *v13;
        uint64_t v17 = [v8 objectForKeyedSubscript:v16];
        if (v15) {
          BOOL v18 = v17 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        double v19 = (uint64_t *)MEMORY[0x1E4F536F8];
        double v20 = (uint64_t *)MEMORY[0x1E4F54E50];
        if (!v18)
        {
          float v21 = (void *)v17;
          float v22 = v2[468];
          float v23 = (float)*((int *)v2 + 486);
          uint64_t v24 = *MEMORY[0x1E4F536F8];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E4F536F8]), "floatValue");
          v2[468] = (float)(v25 + (float)(v22 * v23)) / (float)(*((_DWORD *)v2 + 486) + 1);
          float v26 = v2[469];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          if (v26 <= v27) {
            objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          }
          else {
            int v28 = *((_DWORD *)v2 + 469);
          }
          *((_DWORD *)v2 + 469) = v28;
          float v63 = v2[470];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          if (v63 >= v64) {
            objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          }
          else {
            int v65 = *((_DWORD *)v2 + 470);
          }
          *((_DWORD *)v2 + 470) = v65;
          float v66 = v2[471];
          float v67 = (float)*((int *)v2 + 486);
          uint64_t v68 = *v20;
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", *v20), "floatValue");
          v2[471] = (float)(v69 + (float)(v66 * v67)) / (float)(*((_DWORD *)v2 + 486) + 1);
          float v70 = v2[472];
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          if (v70 <= v71) {
            objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          }
          else {
            int v72 = *((_DWORD *)v2 + 472);
          }
          *((_DWORD *)v2 + 472) = v72;
          float v73 = v2[473];
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          if (v73 >= v74) {
            objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          }
          else {
            int v75 = *((_DWORD *)v2 + 473);
          }
          *((_DWORD *)v2 + 473) = v75;
        }
        float v76 = (void *)[v11 objectForKeyedSubscript:v14];
        uint64_t v77 = [v11 objectForKeyedSubscript:v16];
        if (v76)
        {
          BOOL v78 = (void *)v77;
          if (v77)
          {
            float v79 = v2[474];
            float v80 = (float)*((int *)v2 + 486);
            uint64_t v81 = *v19;
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", *v19), "floatValue");
            v2[474] = (float)(v82 + (float)(v79 * v80)) / (float)(*((_DWORD *)v2 + 486) + 1);
            float v83 = v2[475];
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            if (v83 <= v84) {
              objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            }
            else {
              int v85 = *((_DWORD *)v2 + 475);
            }
            *((_DWORD *)v2 + 475) = v85;
            float v86 = v2[476];
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            if (v86 >= v87) {
              objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            }
            else {
              int v88 = *((_DWORD *)v2 + 476);
            }
            *((_DWORD *)v2 + 476) = v88;
            float v89 = v2[477];
            float v90 = (float)*((int *)v2 + 486);
            uint64_t v91 = *v20;
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", *v20), "floatValue");
            v2[477] = (float)(v92 + (float)(v89 * v90)) / (float)(*((_DWORD *)v2 + 486) + 1);
            float v93 = v2[478];
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            if (v93 <= v94) {
              objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            }
            else {
              int v95 = *((_DWORD *)v2 + 478);
            }
            *((_DWORD *)v2 + 478) = v95;
            float v96 = v2[479];
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            if (v96 >= v97) {
              objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            }
            else {
              int v98 = *((_DWORD *)v2 + 479);
            }
            *((_DWORD *)v2 + 479) = v98;
          }
        }
        __n128 result = (float *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53DD8]];
        if (result)
        {
          unsigned int v99 = result;
          float v100 = v2[480];
          float v101 = (float)*((int *)v2 + 486);
          uint64_t v102 = *MEMORY[0x1E4F53928];
          objc_msgSend((id)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E4F53928]), "floatValue");
          v2[480] = (float)(v103 + (float)(v100 * v101)) / (float)(*((_DWORD *)v2 + 486) + 1);
          float v104 = v2[481];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          if (v104 <= v105) {
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          }
          else {
            int v106 = *((_DWORD *)v2 + 481);
          }
          *((_DWORD *)v2 + 481) = v106;
          float v107 = v2[482];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          if (v107 >= v108) {
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          }
          else {
            int v109 = *((_DWORD *)v2 + 482);
          }
          *((_DWORD *)v2 + 482) = v109;
          float v110 = v2[483];
          float v111 = (float)*((int *)v2 + 486);
          uint64_t v112 = *MEMORY[0x1E4F53930];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", *MEMORY[0x1E4F53930]), "floatValue");
          v2[483] = (float)(v113 + (float)(v110 * v111)) / (float)(*((_DWORD *)v2 + 486) + 1);
          float v114 = v2[484];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          if (v114 <= v115) {
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          }
          else {
            int v116 = *((_DWORD *)v2 + 484);
          }
          *((_DWORD *)v2 + 484) = v116;
          float v117 = v2[485];
          __n128 result = (float *)objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          if (v117 >= v118) {
            __n128 result = (float *)objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          }
          else {
            int v119 = *((_DWORD *)v2 + 485);
          }
          *((_DWORD *)v2 + 485) = v119;
        }
        ++*((_DWORD *)v2 + 486);
      }
      else
      {
        *((unsigned char *)v2 + 1869) = 1;
        *((_DWORD *)v2 + 486) = 1;
        *((_OWORD *)v2 + 117) = 0u;
        *((_OWORD *)v2 + 118) = 0u;
        *((_OWORD *)v2 + 119) = 0u;
        *((_OWORD *)v2 + 120) = 0u;
        *((void *)v2 + 242) = 0;
        uint64_t v29 = *v12;
        uint64_t v30 = (void *)[v8 objectForKeyedSubscript:*v12];
        uint64_t v31 = *v13;
        uint64_t v32 = [v8 objectForKeyedSubscript:v31];
        if (v30) {
          BOOL v33 = v32 == 0;
        }
        else {
          BOOL v33 = 1;
        }
        if (!v33)
        {
          long long v34 = (void *)v32;
          uint64_t v35 = *MEMORY[0x1E4F536F8];
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", *MEMORY[0x1E4F536F8]), "floatValue");
          *((_DWORD *)v2 + 468) = v36;
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v35), "floatValue");
          *((_DWORD *)v2 + 469) = v37;
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v35), "floatValue");
          *((_DWORD *)v2 + 470) = v38;
          uint64_t v39 = *MEMORY[0x1E4F54E50];
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", *MEMORY[0x1E4F54E50]), "floatValue");
          *((_DWORD *)v2 + 471) = v40;
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", v39), "floatValue");
          *((_DWORD *)v2 + 472) = v41;
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", v39), "floatValue");
          *((_DWORD *)v2 + 473) = v42;
        }
        double v43 = (void *)[v11 objectForKeyedSubscript:v29];
        uint64_t v44 = [v11 objectForKeyedSubscript:v31];
        if (v43)
        {
          uint64_t v45 = (void *)v44;
          if (v44)
          {
            uint64_t v46 = *MEMORY[0x1E4F536F8];
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F536F8]), "floatValue");
            *((_DWORD *)v2 + 474) = v47;
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", v46), "floatValue");
            *((_DWORD *)v2 + 475) = v48;
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", v46), "floatValue");
            *((_DWORD *)v2 + 476) = v49;
            uint64_t v50 = *MEMORY[0x1E4F54E50];
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", *MEMORY[0x1E4F54E50]), "floatValue");
            *((_DWORD *)v2 + 477) = v51;
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", v50), "floatValue");
            *((_DWORD *)v2 + 478) = v52;
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", v50), "floatValue");
            *((_DWORD *)v2 + 479) = v53;
          }
        }
        __n128 result = (float *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53DD8]];
        if (result)
        {
          uint64_t v54 = result;
          uint64_t v55 = *MEMORY[0x1E4F53928];
          objc_msgSend((id)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E4F53928]), "floatValue");
          *((_DWORD *)v2 + 480) = v56;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v55), "floatValue");
          *((_DWORD *)v2 + 481) = v57;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v55), "floatValue");
          *((_DWORD *)v2 + 482) = v58;
          uint64_t v59 = *MEMORY[0x1E4F53930];
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", *MEMORY[0x1E4F53930]), "floatValue");
          *((_DWORD *)v2 + 483) = v60;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v59), "floatValue");
          *((_DWORD *)v2 + 484) = v61;
          __n128 result = (float *)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v59), "floatValue");
          *((_DWORD *)v2 + 485) = v62;
        }
      }
    }
    else
    {
      return (float *)FigDebugAssert3();
    }
  }
  return result;
}

- (os_unfair_lock_s)_addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:(os_unfair_lock_s *)result
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      uint64_t v4 = result + 385;
      os_unfair_lock_lock(result + 385);
      uint64_t os_unfair_lock_opaque = v3[384]._os_unfair_lock_opaque;
      os_unfair_lock_unlock(v4);
      long long v6 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      uint64_t v7 = [NSNumber numberWithInt:os_unfair_lock_opaque];
      return (os_unfair_lock_s *)[v6 setObject:v7 forKeyedSubscript:0x1EFA73660];
    }
    else
    {
      return (os_unfair_lock_s *)FigDebugAssert3();
    }
  }
  return result;
}

- (uint64_t)_addDropFrameWaitingForTorchToRampUpKey:(uint64_t)result
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 2368));
      if (*(unsigned char *)(v3 + 2404)
        || (CMSampleBufferGetPresentationTimeStamp(&time1, (CMSampleBufferRef)a2),
            CMTime time2 = *(CMTime *)(v3 + 2380),
            CMTimeCompare(&time1, &time2) < 0))
      {
        CMSetAttachment(a2, @"DropFrameWaitingForTorchToRampUp", MEMORY[0x1E4F1CC38], 1u);
      }
      else
      {
        uint64_t v4 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v3 + 2380) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v3 + 2396) = *(void *)(v4 + 16);
      }
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 2368));
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

- (void)captureStream:(id)a3 willDiscardVideoSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    uint64_t v5 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    long long v6 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F542E0]];
    if (!v6 || [v6 BOOLValue])
    {
      ubZeroShutterLagMetadataTimeMachine = self->_ubZeroShutterLagMetadataTimeMachine;
      [(BWMetadataTimeMachine *)ubZeroShutterLagMetadataTimeMachine addMetadata:v5];
    }
  }
}

- (void)captureStream:(id)a3 didDropVideoSampleBufferWithPTS:(id *)a4
{
  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    if ([(BWFigVideoCaptureDevice *)self isBravoVariant]) {
      captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
    }
    else {
      captureStreauint64_t m = self->_captureStream;
    }
    if (captureStream == a3)
    {
      ubZeroShutterLagMetadataTimeMachine = self->_ubZeroShutterLagMetadataTimeMachine;
      uint64_t v9 = [a3 portType];
      long long v10 = *(_OWORD *)&a4->var0;
      int64_t var3 = a4->var3;
      [(BWMetadataTimeMachine *)ubZeroShutterLagMetadataTimeMachine addDroppedFrameForPortType:v9 pts:&v10];
    }
  }
}

- (void)captureStream:(id)a3 willEmitStillImageSampleBuffer:(opaqueCMSampleBuffer *)a4 fromTimeMachine:(BOOL)a5
{
  -[BWFigVideoCaptureDevice _addCoreMediaMetadataAttachmentsToStillImageSampleBuffer:fromTimeMachine:]((uint64_t)self, a4, a5);
  -[BWFigVideoCaptureDevice _addExifMetadata:fromTimeMachine:]((uint64_t)self, a4, a5);
  self->_digitalFlashCaptureInProgress = [*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque captureType] == 11;
  float v8 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v9 = (void *)[v8 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if ([v9 isEqualToString:*MEMORY[0x1E4F52E00]])
  {
    -[BWFigVideoCaptureDevice _collectPearlTemperatureStatistics:]((float *)self, a4);
    -[BWFigVideoCaptureDevice _collectPearlProjectorUpTime:isStillImage:]((uint64_t)self, a4, 1);
  }
  if (objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E4F541A8]), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E4F53CF8]), "intValue") >= 2)
  {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8] reason:@"Still image capture does not support binned SIFR" userInfo:0]);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  float v11 = __88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke;
  float v12 = &__block_descriptor_40_e21_v16__0____CFString__8l;
  float v13 = a4;
  __88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke((uint64_t)v10, (const __CFString *)*MEMORY[0x1E4F53068]);
  v11((uint64_t)v10, (const __CFString *)*MEMORY[0x1E4F53108]);
}

- (void)_addCoreMediaMetadataAttachmentsToStillImageSampleBuffer:(char)a3 fromTimeMachine:
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 2050))
    {
      unint64_t v6 = (unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(target);
      if (v6 >> 62)
      {
        if ((v6 & 0x3000000000000000) == 0)
        {
          ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
          OSType PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
          if (FigCapturePixelFormatIsVersatileRaw(PixelFormatType)) {
            BWCleanupRawStillImageSampleBuffer(target);
          }
        }
      }
    }
    -[BWFigVideoCaptureDevice _addStillImageSettingsToStillImageSampleBuffer:](a1, target);
    -[BWFigVideoCaptureDevice _addPreviewWhiteBalanceMetadataToStillImageSampleBuffer:](a1, target);
    -[BWFigVideoCaptureDevice _addADRCExposureRealizedGainToStillImageSampleBuffer:](a1, target);
    CMSetAttachment(target, @"CaptureDeviceType", (CFTypeRef)[NSNumber numberWithInt:*(unsigned int *)(a1 + 484)], 1u);
    -[BWFigVideoCaptureDevice _addAutofocusAndDiagnosticMetadata:](a1, target);
    if (*(void *)(a1 + 3064) && [*(id *)(a1 + 496) sphereEnabled] && (a3 & 1) == 0) {
      [*(id *)(a1 + 3064) processSampleBuffer:target];
    }
    if (*(unsigned char *)(a1 + 1504)) {
      -[BWFigVideoCaptureDevice _addPortraitSceneMonitoringMetadataToSampleBuffer:](a1, target);
    }
    if (*(unsigned char *)(a1 + 209) && *(unsigned char *)(a1 + 1521) && *(void *)(a1 + 1528)) {
      -[BWFigVideoCaptureDevice _addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:]((os_unfair_lock_s *)a1, target);
    }
    if (*(void *)(a1 + 3120))
    {
      uint64_t v9 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      memset(&v23, 0, sizeof(v23));
      CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)[v9 objectForKeyedSubscript:*MEMORY[0x1E4F530C0]]);
      long long v10 = (void *)[*(id *)(a1 + 3120) referencedObject];
      CMTime v22 = v23;
      uint64_t v11 = [v10 getMetadataDictionaryForPts:&v22];
      if (v11) {
        [v9 addEntriesFromDictionary:v11];
      }
      if (([*(id *)(a1 + 2504) captureFlags] & 4) == 0)
      {
        float v12 = (void *)[*(id *)(a1 + 3120) referencedObject];
        CMTime v22 = v23;
        float v13 = (const void *)[v12 copyAttachedMediaSampleBufferForPts:&v22 attachedMediaKey:0x1EFA74840];
        BWSampleBufferSetAttachedMedia(target, 0x1EFA74840, (uint64_t)v13);
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v14 = (void *)[*(id *)(a1 + 3120) referencedObject];
        CMTime v22 = v23;
        uint64_t v15 = (const void *)[v14 copyAttachedMediaSampleBufferForPts:&v22 attachedMediaKey:0x1EFA748E0];
        BWSampleBufferSetAttachedMedia(target, 0x1EFA748E0, (uint64_t)v15);
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v16 = (void *)[*(id *)(a1 + 3120) referencedObject];
        CMTime v22 = v23;
        uint64_t v17 = (const void *)[v16 copyAttachedMediaSampleBufferForPts:&v22 attachedMediaKey:@"HumanFullBodiesMask"];
        BWSampleBufferSetAttachedMedia(target, @"HumanFullBodiesMask", (uint64_t)v17);
        if (v17) {
          CFRelease(v17);
        }
        BOOL v18 = (void *)[*(id *)(a1 + 3120) referencedObject];
        CMTime v22 = v23;
        double v19 = (const void *)[v18 copyAttachedMediaSampleBufferForPts:&v22 attachedMediaKey:@"HumanSkinsMask"];
        BWSampleBufferSetAttachedMedia(target, @"HumanSkinsMask", (uint64_t)v19);
        if (v19) {
          CFRelease(v19);
        }
        double v20 = (void *)[*(id *)(a1 + 3120) referencedObject];
        CMTime v22 = v23;
        float v21 = (const void *)[v20 copyAttachedMediaSampleBufferForPts:&v22 attachedMediaKey:0x1EFA74700];
        BWSampleBufferSetAttachedMedia(target, 0x1EFA74700, (uint64_t)v21);
        if (v21) {
          CFRelease(v21);
        }
      }
    }
  }
}

- (float)_collectPearlTemperatureStatistics:(float *)result
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      if (v2[858] == 3.4028e38)
      {
        uint64_t v5 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F542B8]];
        if (v5)
        {
          [v5 floatValue];
          *((_DWORD *)v2 + 858) = v6;
        }
      }
      uint64_t v7 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F542B0]];
      if (v7)
      {
        float v8 = v7;
        if (v2[859] == 3.4028e38)
        {
          [v7 floatValue];
          *((_DWORD *)v2 + 859) = v9;
        }
        [v8 floatValue];
        *((_DWORD *)v2 + 860) = v10;
        uint64_t v11 = (void *)*((void *)v2 + 431);
        [v8 floatValue];
        [v11 addDataPoint:v12];
      }
      __n128 result = (float *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F54230]];
      if (result)
      {
        float v13 = (void *)*((void *)v2 + 432);
        [result floatValue];
        double v15 = v14;
        return (float *)[v13 addDataPoint:v15];
      }
    }
    else
    {
      return (float *)FigDebugAssert3();
    }
  }
  return result;
}

- (uint64_t)_collectPearlProjectorUpTime:(int)a3 isStillImage:
{
  if (result)
  {
    uint64_t v5 = result;
    int v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v6)
    {
      __n128 result = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FB8]), "intValue");
      if (result == 2)
      {
        memset(&v11, 0, sizeof(v11));
        __n128 result = (uint64_t)CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)target);
        uint64_t v7 = (_OWORD *)(v5 + 3480);
        if ((*(unsigned char *)(v5 + 3492) & 1) == 0
          || (CMTime time1 = v11,
              *(_OWORD *)&time2.CMTimeValue value = *v7,
              time2.CMTimeEpoch epoch = *(void *)(v5 + 3496),
              __n128 result = CMTimeCompare(&time1, &time2),
              (int)result >= 1))
        {
          *uint64_t v7 = *(_OWORD *)&v11.value;
          *(void *)(v5 + 3496) = v11.epoch;
          uint64_t v8 = 3464;
          if (a3) {
            uint64_t v8 = 3472;
          }
          *(void *)(v5 + v8) += 2940;
        }
      }
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

__CVBuffer *__88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke(uint64_t a1, const __CFString *a2)
{
  __n128 result = (__CVBuffer *)CMGetAttachment(*(CMAttachmentBearerRef *)(a1 + 32), a2, 0);
  if (result)
  {
    uint64_t v3 = result;
    CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      CVPixelBufferGetWidth(v3);
      CVPixelBufferGetHeight(v3);
      FigCFDictionarySetCGRect();
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return (__CVBuffer *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(double *)&v6 > (double)CVPixelBufferGetWidth(v3)
      || (__n128 result = (__CVBuffer *)CVPixelBufferGetHeight(v3), *((double *)&v6 + 1) > (double)(unint64_t)result))
    {
      FigCFDictionarySetCGRect();
      uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      return (__CVBuffer *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

- (void)captureStream:(id)a3 willEmitDepthSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  v10[1] = *MEMORY[0x1E4F143B8];
  long long v6 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v7 = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F542B0]];
  if (v7)
  {
    int v9 = @"NewPropertyValue";
    v10[0] = v7;
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"PearlProjectorTemperatureChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1]);
  }
  uint64_t v8 = (void *)[v6 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if ([v8 isEqualToString:*MEMORY[0x1E4F52E00]])
  {
    -[BWFigVideoCaptureDevice _collectPearlTemperatureStatistics:]((float *)self, a4);
    -[BWFigVideoCaptureDevice _collectPearlProjectorUpTime:isStillImage:]((uint64_t)self, a4, 0);
  }
  -[BWFigVideoCaptureDevice _addSystemPressureAttachments:]((uint64_t)self, a4);
}

- (void)captureStream:(id)a3 didCompleteStillImageCaptureWithPTS:(id *)a4 error:(int)a5
{
  int v9 = objc_msgSend((id)objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureStreamSettings"), "count");
  os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  int stillImageDispatchQueue = (int)self->_stillImageDispatchQueue;
  LODWORD(self->_stillImageDispatchQueue) = stillImageDispatchQueue + 1;
  if (a4->var2)
  {
    CMTime time1 = (CMTime)*a4;
    CMTime time2 = *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler;
    if (CMTimeCompare(&time1, &time2) > 0 || (self->_lastStillImageCaptureEndPTS.value & 0x100000000) == 0)
    {
      long long v11 = *(_OWORD *)&a4->var0;
      *(void *)&self->_lastStillImageCaptureEndPTS.CMTimeScale timescale = a4->var3;
      *(_OWORD *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler = v11;
    }
  }
  float v12 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
  if (v12)
  {
    [v12 lastTimeMachinePTS];
    if ((v23 & 0x100000000) != 0)
    {
      float v13 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
      if (v13) {
        [v13 lastTimeMachinePTS];
      }
      else {
        memset(&v21, 0, sizeof(v21));
      }
      CMTime time1 = *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler;
      if (CMTimeCompare(&v21, &time1) > 0 || (self->_lastStillImageCaptureEndPTS.value & 0x100000000) == 0)
      {
        float v14 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
        if (v14) {
          [v14 lastTimeMachinePTS];
        }
        else {
          memset(&time1, 0, sizeof(time1));
        }
        *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler = time1;
      }
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  if (stillImageDispatchQueue >= v9 || stillImageDispatchQueue + 1 == v9)
  {
    double v15 = objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureStreamSettingsForPortType:", objc_msgSend(a3, "portType"));
    if ([v15 adaptiveBracketingParameters]
      && ([v15 reachedEndOfAdaptiveBracketing] & 1) == 0)
    {
      uint64_t v17 = objc_msgSend((id)objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "frameStatisticsByPortType"), "objectForKeyedSubscript:", objc_msgSend(v15, "portType"));
      if (!a5
        && -[BWFigVideoCaptureDevice _ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:frameStatistics:]((uint64_t)self, v15, v17))
      {
        id v18 = *(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
        os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
        -[BWFigVideoCaptureDevice _resetStillImageCaptureRequestStateInternal]((uint64_t)self);
        os_unfair_lock_unlock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
        double v19 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        void v20[2] = __83__BWFigVideoCaptureDevice_captureStream_didCompleteStillImageCaptureWithPTS_error___block_invoke;
        v20[3] = &unk_1E5C24458;
        v20[4] = self;
        v20[5] = v18;
        dispatch_async(v19, v20);
        return;
      }
      [v15 setReachedEndOfAdaptiveBracketing:1];
    }
    else
    {
      os_unfair_lock_lock(&self->_switchOverLock);
      int v16 = BYTE1(self->_lastStillImageCaptureEndPTS.epoch);
      LOBYTE(self->_lastStillImageCaptureEndPTS.epoch) = 0;
      os_unfair_lock_unlock(&self->_switchOverLock);
      if (v16) {
        return;
      }
    }
    [(BWFigVideoCaptureDevice *)self _resetStillImageCaptureRequestState];
  }
}

- (uint64_t)_ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:(void *)a3 frameStatistics:
{
  if (result)
  {
    uint64_t v6 = result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      uint64_t v52 = v3;
      LODWORD(v51) = 0;
      FigDebugAssert3();
    }
    if (objc_msgSend(a2, "captureType", v51, v52) == 11)
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingParameters"), "adaptiveBracketingFrameParametersForGroup:", objc_msgSend(a2, "adaptiveBracketingGroupCaptureCount") + 1);
      __n128 result = [v7 count];
      if (result)
      {
        float v86 = (void *)[MEMORY[0x1E4F1CA48] array];
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v8 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v6, [a2 captureFlags], objc_msgSend(a2, "captureType"), &v88, &v87);
        int v9 = v8;
        if (v8) {
          unsigned int v10 = ([v8 intValue] >> 1) & 1;
        }
        else {
          unsigned int v10 = 1;
        }
        unsigned int v69 = v10;
        int v59 = [a2 adaptiveBracketingGroupCaptureCount];
        int v68 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingParameters"), "generateWhiteBalanceParameters");
        uint64_t v11 = [a2 captureFlags];
        float v84 = v9;
        uint64_t v54 = v7;
        if ((v11 & 0x800000) != 0)
        {
          unsigned int v12 = 1;
        }
        else if ((v11 & 0x20000000) != 0)
        {
          unsigned int v12 = 2;
        }
        else if ((v11 & 0x40000000) != 0)
        {
          unsigned int v12 = 3;
        }
        else
        {
          unsigned int v12 = 0;
        }
        unint64_t v67 = v11;
        unsigned int v66 = v12;
        if ((v11 & 0x100) != 0) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        float v14 = *(void **)(v6 + 1288);
        if (!v14) {
          float v14 = *(void **)(v6 + 496);
        }
        double v15 = objc_msgSend(*(id *)(v6 + 2000), "objectForKeyedSubscript:", objc_msgSend(v14, "portType"));
        float v80 = a3;
        [a3 gain];
        int v17 = v16;
        int v57 = a2;
        unint64_t v18 = [a2 captureFlags];
        LODWORD(v19) = v17;
        uint64_t v20 = [v14 noiseReductionAndSharpeningConfigurationForType:1 gain:(v18 >> 4) & 1 qSub:v19];
        CMTime v21 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        if (v59) {
          char v22 = 0;
        }
        else {
          char v22 = v69;
        }
        uint64_t v23 = [NSNumber numberWithInt:v59 != 0];
        int v58 = v21;
        [v21 setObject:v23 forKeyedSubscript:*MEMORY[0x1E4F54FB8]];
        uint64_t v24 = (void *)MEMORY[0x1E4F54FE8];
        if ((v22 & 1) == 0 && !v59) {
          goto LABEL_27;
        }
        float v25 = (void *)MEMORY[0x1E4F54FE8];
        [v58 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54FE8]];
        uint64_t v26 = [NSNumber numberWithInt:v13];
        [v58 setObject:v26 forKeyedSubscript:*MEMORY[0x1E4F55048]];
        uint64_t v27 = [NSNumber numberWithInt:(v13 != 0) & (v67 >> 25)];
        [v58 setObject:v27 forKeyedSubscript:*MEMORY[0x1E4F55020]];
        uint64_t v28 = [NSNumber numberWithBool:(v67 >> 15) & 1];
        [v58 setObject:v28 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
        uint64_t v24 = v25;
        [v58 setObject:v20 forKeyedSubscript:*MEMORY[0x1E4F55010]];
        if (!v59)
        {
LABEL_27:
          [v58 setObject:v84 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
          objc_msgSend(v86, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v88 | 0x20, 0));
        }
        int v85 = (void *)[MEMORY[0x1E4F1CA48] array];
        uint64_t v29 = v54;
        float v83 = objc_msgSend(v57, "adaptiveBracketingSphereOffsetsForNextGroupWithFrameCount:", objc_msgSend(v54, "count"));
        if ([v14 hasSphere])
        {
          if ([v14 isStationary]) {
            BOOL v30 = [v83 count] != 0;
          }
          else {
            BOOL v30 = 1;
          }
          BOOL v82 = v30;
        }
        else
        {
          BOOL v82 = 0;
        }
        if ([v15 digitalFlashHighlightRecoveryEnabled]) {
          int v81 = [v80 hrEnabled];
        }
        else {
          int v81 = 0;
        }
        objc_msgSend((id)objc_msgSend(v57, "adaptiveBracketingParameters"), "evZeroTargetGain");
        if (v69) {
          uint64_t v65 = objc_msgSend(v14, "noiseReductionAndSharpeningConfigurationForType:gain:", 17);
        }
        else {
          uint64_t v65 = 0;
        }
        if (([v57 captureFlags] & 0x100000000) != 0)
        {
          uint64_t v32 = v24;
          BOOL v33 = *(void **)(v6 + 2056);
          uint64_t v34 = [v14 portType];
          uint64_t v35 = v33;
          uint64_t v24 = v32;
          uint64_t v31 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", v34), "intValue");
        }
        else
        {
          uint64_t v31 = 0xFFFFFFFFLL;
        }
        uint64_t v36 = v88;
        if ([v54 count])
        {
          unint64_t v37 = 0;
          uint64_t v78 = *MEMORY[0x1E4F55050];
          uint64_t v79 = v36 | 0x40;
          uint64_t v77 = *MEMORY[0x1E4F55290];
          uint64_t v76 = *MEMORY[0x1E4F54FC8];
          uint64_t v75 = *MEMORY[0x1E4F54FF0];
          uint64_t v74 = *MEMORY[0x1E4F54FD0];
          uint64_t v73 = *MEMORY[0x1E4F55008];
          uint64_t v72 = *MEMORY[0x1E4F55040];
          uint64_t v38 = *MEMORY[0x1E4F55038];
          uint64_t v39 = *MEMORY[0x1E4F54FC0];
          uint64_t v64 = *MEMORY[0x1E4F55020];
          uint64_t v63 = *MEMORY[0x1E4F55048];
          uint64_t v62 = *MEMORY[0x1E4F54FD8];
          uint64_t v61 = *MEMORY[0x1E4F54FF8];
          uint64_t v60 = *MEMORY[0x1E4F55010];
          uint64_t v56 = *MEMORY[0x1E4F55058];
          uint64_t v53 = *MEMORY[0x1E4F54FE0];
          uint64_t v55 = *MEMORY[0x1E4F54FB0];
          uint64_t v70 = *v24;
          uint64_t v71 = *MEMORY[0x1E4F55018];
          uint64_t v40 = MEMORY[0x1E4F1CC38];
          do
          {
            int v41 = v29;
            int v42 = (void *)[v29 objectAtIndexedSubscript:v37];
            double v43 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
            [v43 setObject:&unk_1EFB015E0 forKeyedSubscript:v78];
            [v43 setObject:&unk_1EFB015C8 forKeyedSubscript:v77];
            [v43 setObject:v40 forKeyedSubscript:v76];
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v42, "integrationTimeInMiroseconds")), v75);
            uint64_t v44 = NSNumber;
            [v42 gain];
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v44, "numberWithFloat:"), v74);
            uint64_t v45 = [v42 maxAGC];
            if ((int)v45 < 1) {
              uint64_t v46 = 0;
            }
            else {
              uint64_t v46 = [NSNumber numberWithInt:v45];
            }
            [v43 setObject:v46 forKeyedSubscript:v73];
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v82), v72);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v83, "objectAtIndexedSubscript:", v37), v38);
            [v43 setObject:v84 forKeyedSubscript:v39];
            if ((v31 & 0x80000000) != 0)
            {
              if (!v69) {
                goto LABEL_60;
              }
              objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", (v67 >> 25) & 1), v64);
              objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v66), v63);
              [v43 setObject:v40 forKeyedSubscript:v62];
              [v43 setObject:&unk_1EFB015F8 forKeyedSubscript:v61];
              [v43 setObject:v65 forKeyedSubscript:v60];
              if (v68)
              {
                [v43 setObject:&unk_1EFB015F8 forKeyedSubscript:v56];
                int v50 = v68;
                if (v37) {
                  int v50 = 0;
                }
                if (v50 == 1 && !v59) {
                  [v43 setObject:v40 forKeyedSubscript:v53];
                }
              }
              if ((v67 & 0x8000) == 0) {
                goto LABEL_60;
              }
              int v48 = v43;
              uint64_t v47 = v40;
              uint64_t v49 = v55;
            }
            else
            {
              uint64_t v47 = [NSNumber numberWithInt:v31];
              int v48 = v43;
              uint64_t v49 = v71;
            }
            [v48 setObject:v47 forKeyedSubscript:v49];
LABEL_60:
            if (v81) {
              [v43 setObject:v40 forKeyedSubscript:v70];
            }
            [v85 addObject:v43];
            objc_msgSend(v86, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", ++v37, v79, 0));
            uint64_t v29 = v41;
          }
          while ([v41 count] > v37);
        }
        [v57 addAdaptiveUnifiedBracketedCaptureParams:v85 preBracketFrameCaptureParams:v58 bracketedCaptureFrameInfos:v86];
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (void)_resetStillImageCaptureRequestStateInternal
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 2496));
    *(unsigned char *)(a1 + 2536) = 0;
    *(_DWORD *)(a1 + 2532) = 0;

    *(void *)(a1 + 2512) = 0;
    *(void *)(a1 + 2520) = 0;
    *(unsigned char *)(a1 + 2528) = 0;

    *(void *)(a1 + 2504) = 0;
    *(void *)(a1 + 2488) = 0;
    *(_DWORD *)(a1 + 2596) = 0;
    *(_DWORD *)(a1 + 2480) = 0;

    *(void *)(a1 + 3248) = 0;
    *(void *)(a1 + 2032) = 0;
  }
}

void __83__BWFigVideoCaptureDevice_captureStream_didCompleteStillImageCaptureWithPTS_error___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _captureStillImageNowWithSettings:](*(void *)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 40);
}

- (void)_captureStillImageNowWithSettings:(uint64_t)a1
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v44 = v2;
      LODWORD(v42) = 0;
      FigDebugAssert3();
    }
    uint64_t v5 = objc_msgSend(a2, "captureType", v42, v44);
    uint64_t v6 = [a2 captureFlags];
    id v55 = 0;
    id v56 = 0;
    id v7 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
    *(void *)(a1 + 2504) = a2;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
    if (v5 == 8
      || v5 == 1
      && !*(unsigned char *)(a1 + 2448)
      && [*(id *)(a1 + 496) timeMachineEnabled])
    {
      if ([*(id *)(a1 + 2504) deliverSushiRaw])
      {
        uint64_t v45 = v2;
        LODWORD(v43) = 0;
        FigDebugAssert3();
      }
      if (objc_msgSend((id)a1, "isBravoVariant", v43, v45))
      {
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        uint64_t v8 = (void *)[*(id *)(a1 + 2504) captureStreamSettings];
        uint64_t v9 = [v8 countByEnumeratingWithState:&v51 objects:v58 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v52;
          do
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v52 != v11) {
                objc_enumerationMutation(v8);
              }
              objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, objc_msgSend(*(id *)(*((void *)&v51 + 1) + 8 * i), "portType")), "captureStillImageFromTimeMachineWithStillImageSettings:", *(void *)(a1 + 2504));
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v51 objects:v58 count:16];
          }
          while (v10);
          id v13 = 0;
          goto LABEL_86;
        }
      }
      else
      {
        [*(id *)(a1 + 496) captureStillImageFromTimeMachineWithStillImageSettings:*(void *)(a1 + 2504)];
      }
      id v13 = 0;
LABEL_86:
      -[BWFigVideoCaptureDevice _logStillImageCaptureTimingStatisticsForCoreAnalytics](a1);
      goto LABEL_87;
    }
    unint64_t v46 = v6;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    float v14 = *(void **)(a1 + 552);
    uint64_t v15 = [v14 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v48;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v48 != v17) {
            objc_enumerationMutation(v14);
          }
          double v19 = *(void **)(*((void *)&v47 + 1) + 8 * j);
          if (objc_msgSend(*(id *)(a1 + 2504), "captureStreamSettingsForPortType:", objc_msgSend(v19, "portType"))) {
            [v19 prepareForStillImageCaptureFromFirmwareWithStillImageSettings:*(void *)(a1 + 2504)];
          }
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v47 objects:v57 count:16];
      }
      while (v16);
    }
    if (v5 == 2)
    {
      unint64_t v20 = v46;
      CMTime v21 = objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(a2, "masterPortType"));
      BOOL v22 = (v46 & 0x60800000) != 0
         || objc_msgSend((id)objc_msgSend(v21, "unifiedBracketedCaptureParams"), "count") != 0;
    }
    else
    {
      BOOL v22 = 0;
      unint64_t v20 = v46;
    }
    if ((v20 & 0x8004) != 0)
    {
      int v23 = 1;
      if (!*(void *)(a1 + 1456) || (v20 & 0x100) != 0 || (v20 & 0x80) != 0)
      {
LABEL_43:
        if (*(void *)(a1 + 544) && *(int *)(a1 + 2436) >= 3)
        {
          if (v5 == 7)
          {
            int v24 = 0;
          }
          else
          {
            uint64_t v29 = (void *)[a2 masterPortType];
            int v24 = [v29 isEqualToString:*MEMORY[0x1E4F52DE8]];
          }
          unint64_t v30 = objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "count");
          BOOL v32 = (v20 & 0x800) == 0 && v30 > 1;
          uint64_t v33 = (v20 >> 8) & 1;
          uint64_t v34 = *(void *)(a1 + 1456);
          if (v5 != 2) {
            LOBYTE(v33) = 0;
          }
          if (!v34) {
            LOBYTE(v33) = 0;
          }
          int v25 = 1;
          if v5 == 11 || (v33) {
            goto LABEL_49;
          }
          int v25 = 0;
          if (!v34 && v5 != 6)
          {
            if (*(unsigned char *)(a1 + 3640)) {
              int v35 = 1;
            }
            else {
              int v35 = v23;
            }
            int v25 = v35 | v24 | v32;
          }
        }
        else
        {
          int v25 = 0;
        }
        if ((v25 | v23) != 1)
        {
          uint64_t v26 = -[BWFigVideoCaptureDevice _convertStillImageCaptureSettings:toStillImageCaptureNowOptions:captureStreamPropertyValues:](a1, *(void **)(a1 + 2504), &v56, &v55);
          LOBYTE(v25) = 0;
LABEL_51:
          id v13 = v56;
          if (!v26)
          {
            *(void *)(a1 + 2512) = v56;
            id v27 = v55;
            *(void *)(a1 + 2520) = v55;
            *(unsigned char *)(a1 + 2528) = v25;
            if (([a2 captureFlags] & 0x200) != 0)
            {
              if (dword_1EB4C4FF0)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                unint64_t v20 = v46;
              }
              int v36 = *(_DWORD *)(a1 + 2284);
              unint64_t v37 = objc_msgSend(*(id *)(a1 + 2272), "referencedObject", v43, v45);
              LODWORD(v38) = v36;
              [v37 setMinimumFrameRate:v38];
            }
            if (v5 == 2
              && ([a2 sceneFlags] & 0x10000000) != 0
              && objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2000), "objectForKeyedSubscript:", objc_msgSend(a2, "masterPortType")), "macroFlashQSubSwitchingEnabled"))
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
              *(unsigned char *)(a1 + 2592) = 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
              *(unsigned char *)(a1 + 2536) = 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
LABEL_87:

              return;
            }
            if (*(unsigned char *)(a1 + 1968))
            {
              int v39 = *(_DWORD *)(a1 + 1972);
              if (v39 >= *(_DWORD *)(a1 + 1976)) {
                int v39 = *(_DWORD *)(a1 + 1976);
              }
              *(_DWORD *)(a1 + 2492) = v39;
              unsigned int v40 = -[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:captureType:captureFlags:](a1, (void *)[*(id *)(a1 + 2504) frameStatisticsByPortType], objc_msgSend(*(id *)(a1 + 2504), "masterPortType"), v5, v20);
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
              *(unsigned char *)(a1 + 2536) = v40 > 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
              if (v40 > 1) {
                goto LABEL_87;
              }
            }
            else
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
              *(unsigned char *)(a1 + 2536) = 0;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
            }
            uint64_t v41 = -[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](a1, v13, v27);
            if (!v41) {
              goto LABEL_86;
            }
            uint64_t v26 = v41;
          }
          -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:]((char *)a1, v26);
          goto LABEL_87;
        }
LABEL_49:
        uint64_t v26 = -[BWFigVideoCaptureDevice _ubConvertStillImageCaptureSettings:useSynchronizedStreamsGroup:toStillImageCaptureNowOptions:captureStreamPropertyValues:](a1, *(void **)(a1 + 2504), v25, &v56, &v55);
        goto LABEL_51;
      }
    }
    else if ((v20 & 0x180) != 0)
    {
      int v23 = 1;
      goto LABEL_43;
    }
    int v23 = v22;
    goto LABEL_43;
  }
}

- (uint64_t)_updateSensorRawPools
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  id v67 = (id)[MEMORY[0x1E4F1CA48] array];
  int v106 = 0;
  uint64_t v105 = 0;
  if (!*(unsigned char *)(v1 + 148)) {
    return 0;
  }
  uint64_t v2 = -[BWFigVideoCaptureDevice _sensorRawPoolsRequirements]((id *)v1);
  if (![v2 count] || (unint64_t)objc_msgSend(v2, "count") > 3) {
    return 0;
  }
  locuint64_t k = (os_unfair_lock_s *)(v1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 136));
  if (!*(void *)(v1 + 152)) {
    *(void *)(v1 + 152) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v72 = [v2 countByEnumeratingWithState:&v86 objects:v104 count:16];
  uint64_t v74 = v1;
  if (!v72) {
    goto LABEL_45;
  }
  char v63 = 0;
  uint64_t v3 = *(void *)v87;
  uint64_t v70 = *MEMORY[0x1E4F24E10];
  uint64_t v68 = *MEMORY[0x1E4F24D08];
  uint64_t v66 = *MEMORY[0x1E4F24D90];
  uint64_t v61 = *MEMORY[0x1E4F24D78];
  uint64_t v62 = *MEMORY[0x1E4F24C98];
  uint64_t v64 = v1 + 160;
  unint64_t v4 = 0x1E4F28000uLL;
  uint64_t v60 = *MEMORY[0x1E4F24D70];
  uint64_t v59 = *(void *)v87;
  id obj = v2;
  while (2)
  {
    for (uint64_t i = 0; i != v72; ++i)
    {
      unint64_t v6 = v4;
      if (*(void *)v87 != v3) {
        objc_enumerationMutation(obj);
      }
      id v7 = *(void **)(*((void *)&v86 + 1) + 8 * i);
      uint64_t v8 = FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v70), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v68), "intValue") << 32));
      unsigned int v9 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v70), "intValue");
      uint64_t v10 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v68), "intValue");
      int v11 = v10;
      unint64_t v12 = v9 | (unint64_t)(v10 << 32);
      if (!FigCaptureVideoDimensionsAreValid(v12))
      {
LABEL_42:
        uint64_t v26 = 0;
        goto LABEL_63;
      }
      if (v8 == 2 && !FigCaptureVideoDimensionsAreEqual(*(void *)(v1 + 140), v12))
      {
        long long v51 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v52 = *MEMORY[0x1E4F1C3B8];
        long long v53 = NSString;
        uint64_t v54 = BWStringFromDimensions(*(void *)(v1 + 140));
        id v55 = (void *)[v51 exceptionWithName:v52, objc_msgSend(v53, "stringWithFormat:", @"Ultra high resolution sensor raw pool dimensions don't match expected %@ received %@", v54, BWStringFromDimensions(v12)), 0 reason userInfo];
        objc_exception_throw(v55);
      }
      *((_DWORD *)&v105 + (int)v8) = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v66), "intValue");
      if (objc_msgSend(*(id *)(v1 + 152), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v4 + 3792), "numberWithInt:", v8)))
      {
        id v13 = objc_msgSend(*(id *)(v1 + 152), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v4 + 3792), "numberWithInt:", v8));
        if ([v13 width] != v9 || objc_msgSend(v13, "height") != v11) {
          goto LABEL_42;
        }
      }
      else
      {
        float v14 = objc_alloc_init(BWVideoFormatRequirements);
        [(BWVideoFormatRequirements *)v14 setWidth:(int)v9];
        [(BWVideoFormatRequirements *)v14 setHeight:v11];
        -[BWVideoFormatRequirements setBytesPerRowAlignment:](v14, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v62), "intValue"));
        -[BWVideoFormatRequirements setPlaneAlignment:](v14, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v61), "intValue"));
        [(BWVideoFormatRequirements *)v14 setHeightAlignment:16];
        uint64_t v103 = [v7 objectForKeyedSubscript:v60];
        -[BWVideoFormatRequirements setSupportedPixelFormats:](v14, "setSupportedPixelFormats:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v103 count:1]);
        [(BWVideoFormatRequirements *)v14 setSupportedCacheModes:+[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess]];
        if (![(NSArray *)[(BWVideoFormatRequirements *)v14 supportedPixelFormats] count])goto LABEL_42; {
        uint64_t v102 = v14;
        }
        id v15 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v102 count:1]);
        if (!v15) {
          goto LABEL_42;
        }
        id v16 = v15;
        uint64_t v17 = (*((_DWORD *)&v105 + (int)v8) + *(_DWORD *)(v64 + 4 * (int)v8));
        if (dword_1EB4C4FF0)
        {
          unsigned int v85 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v19 = v85;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            uint64_t v21 = FigCaptureSourceSensorRawHighResolutionFlavorToShortString(v8);
            int v22 = *(_DWORD *)(v64 + 4 * (int)v8);
            int v23 = *((_DWORD *)&v105 + (int)v8);
            int v90 = 136316162;
            uint64_t v91 = "-[BWFigVideoCaptureDevice _updateSensorRawPools]";
            __int16 v92 = 2112;
            uint64_t v93 = v21;
            __int16 v94 = 1024;
            *(_DWORD *)int v95 = v17;
            *(_WORD *)&v95[4] = 1024;
            *(_DWORD *)&v95[6] = v22;
            *(_WORD *)float v96 = 1024;
            *(_DWORD *)&v96[2] = v23;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unint64_t v4 = v6;
        }
        int v24 = [BWPixelBufferPool alloc];
        uint64_t v1 = v74;
        int v25 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v24, "initWithVideoFormat:capacity:name:memoryPool:", v16, v17, [NSString stringWithFormat:@"%@_SensorRawBufferPool_%u", BWStringFromCaptureDeviceType(*(_DWORD *)(v74 + 484)), v8], *(void *)(v74 + 3632));
        uint64_t v26 = (uint64_t)v25;
        if (!v25) {
          goto LABEL_65;
        }
        [(BWPixelBufferPool *)v25 preallocate];
        objc_msgSend(*(id *)(v74 + 152), "setObject:forKeyedSubscript:", v26, objc_msgSend(*(id *)(v4 + 3792), "numberWithInt:", v8));
        char v63 = 1;
        uint64_t v3 = v59;
      }
      v83[0] = MEMORY[0x1E4F143A8];
      v83[1] = 3221225472;
      v83[2] = __48__BWFigVideoCaptureDevice__updateSensorRawPools__block_invoke;
      v83[3] = &unk_1E5C2B660;
      v83[4] = v1;
      v83[5] = &v105;
      objc_msgSend(v67, "insertObject:atIndex:", objc_msgSend(*(id *)(v4 + 3792), "numberWithInt:", v8), objc_msgSend(v67, "indexOfObject:inSortedRange:options:usingComparator:", objc_msgSend(*(id *)(v4 + 3792), "numberWithInt:", v8), 0, objc_msgSend(v67, "count"), 1024, v83));
    }
    uint64_t v72 = [obj countByEnumeratingWithState:&v86 objects:v104 count:16];
    if (v72) {
      continue;
    }
    break;
  }
  if ((v63 & 1) == 0) {
    goto LABEL_45;
  }
  id v27 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v28 = [v67 countByEnumeratingWithState:&v79 objects:v101 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v80;
    do
    {
      for (uint64_t j = 0; j != v29; ++j)
      {
        if (*(void *)v80 != v30) {
          objc_enumerationMutation(v67);
        }
        objc_msgSend(v27, "addObject:", objc_msgSend((id)objc_msgSend(*(id *)(v1 + 152), "objectForKeyedSubscript:", *(void *)(*((void *)&v79 + 1) + 8 * j)), "cvPixelBufferPool"));
      }
      uint64_t v29 = [v67 countByEnumeratingWithState:&v79 objects:v101 count:16];
    }
    while (v29);
  }
  if ([(id)v1 isBravoVariant])
  {
    BOOL v32 = (void *)[*(id *)(v1 + 544) syncGroup];
    uint64_t v33 = (void *)MEMORY[0x1E4F55630];
  }
  else
  {
    BOOL v32 = (void *)[*(id *)(v1 + 496) stream];
    uint64_t v33 = (void *)MEMORY[0x1E4F54B90];
  }
  uint64_t v34 = [v32 setProperty:*v33 value:v27];
  if (v34)
  {
    uint64_t v26 = v34;
  }
  else
  {
LABEL_45:
    uint64_t v71 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v67, "count"));
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    uint64_t v73 = [v67 countByEnumeratingWithState:&v75 objects:v100 count:16];
    if (v73)
    {
      uint64_t v69 = *(void *)v76;
      uint64_t v35 = v1 + 160;
      do
      {
        for (uint64_t k = 0; k != v73; ++k)
        {
          if (*(void *)v76 != v69) {
            objc_enumerationMutation(v67);
          }
          uint64_t v37 = [*(id *)(*((void *)&v75 + 1) + 8 * k) intValue];
          double v38 = objc_msgSend(*(id *)(v1 + 152), "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v37));
          uint64_t v39 = (*((_DWORD *)&v105 + (int)v37) + *(_DWORD *)(v35 + 4 * (int)v37));
          if (dword_1EB4C4FF0)
          {
            unsigned int v85 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            unsigned int v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v41 = v85;
            if (os_log_type_enabled(v40, type)) {
              unsigned int v42 = v41;
            }
            else {
              unsigned int v42 = v41 & 0xFFFFFFFE;
            }
            if (v42)
            {
              uint64_t v43 = FigCaptureSourceSensorRawHighResolutionFlavorToShortString((int)v37);
              uint64_t v44 = [v38 capacity];
              int v45 = *(_DWORD *)(v35 + 4 * (int)v37);
              int v46 = *((_DWORD *)&v105 + (int)v37);
              int v90 = 136316418;
              uint64_t v91 = "-[BWFigVideoCaptureDevice _updateSensorRawPools]";
              __int16 v92 = 2112;
              uint64_t v93 = v43;
              __int16 v94 = 2048;
              *(void *)int v95 = v44;
              *(_WORD *)&v95[8] = 1024;
              *(_DWORD *)float v96 = v39;
              *(_WORD *)&v96[4] = 1024;
              int v97 = v45;
              __int16 v98 = 1024;
              int v99 = v46;
              LODWORD(v57) = 50;
              id v56 = &v90;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v38, "flushToMinimumCapacity:", v39, v56, v57);
          [v38 setCapacity:v39];
          uint64_t v47 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(v35 + 4 * (int)v37)];
          objc_msgSend(v71, "setObject:forKeyedSubscript:", v47, objc_msgSend(NSNumber, "numberWithUnsignedLong:", objc_msgSend(v38, "cvPixelBufferPool")));
          uint64_t v1 = v74;
        }
        uint64_t v73 = [v67 countByEnumeratingWithState:&v75 objects:v100 count:16];
      }
      while (v73);
    }
    if ([(id)v1 isBravoVariant])
    {
      long long v48 = (void *)[*(id *)(v1 + 544) syncGroup];
      long long v49 = (void *)MEMORY[0x1E4F55640];
    }
    else
    {
      long long v48 = (void *)[*(id *)(v1 + 496) stream];
      long long v49 = (void *)MEMORY[0x1E4F54BA0];
    }
    uint64_t v26 = [v48 setProperty:*v49 value:v71];
    if (!v26) {
      goto LABEL_63;
    }
  }
LABEL_65:
  FigDebugAssert3();
LABEL_63:
  os_unfair_lock_unlock(lock);
  return v26;
}

void __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_278(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 2076);
  int v4 = *(_DWORD *)(v2 + 2080);
  *(_DWORD *)(v2 + 2076) = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (v4 - 5) < 3;
  if (v3 != v4 && dword_1EB4C4FF0 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  -[BWFigVideoCaptureDevice _updateStreamingImageIntentTo:from:masterPortType:](*(void *)(a1 + 32), v4, v3, *(void **)(a1 + 40));
  if (v4 == 8 && !*(unsigned char *)(*(void *)(a1 + 32) + 3699)) {
    *(void *)(*(void *)(a1 + 32) + 3816) = [[BWActionCameraFlickerAvoidanceMonitor alloc] initWithDefaultMaxExposureDurationFrameworkOverrideByPortType:*(void *)(*(void *)(a1 + 32) + 2104)];
  }
}

void __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_280(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 4136);
  if (v2) {

  }
  *(void *)(*(void *)(a1 + 32) + 4136) = objc_alloc_init(BWDeviceThermalMonitor);
  objc_initWeak(&location, *(id *)(a1 + 32));
  int v3 = *(void **)(*(void *)(a1 + 32) + 4136);
  uint64_t v4 = MEMORY[0x1E4F143A8];
  uint64_t v5 = 3221225472;
  unint64_t v6 = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_2;
  id v7 = &unk_1E5C26518;
  objc_copyWeak(&v8, &location);
  [v3 setThermalHandler:&v4];
  if ((int)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 4136), "thermalLevel", v4, v5, v6, v7) >= 2) {
    *(void *)(*(void *)(a1 + 32) + 4128) = *(void *)(a1 + 40);
  }
  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

uint64_t __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = (uint64_t)objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    if (a2)
    {
      uint64_t v4 = result;
      if (!*(void *)(result + 4128))
      {
        uint64_t result = [a2 thermalLevel];
        if ((int)result >= 2)
        {
          uint64_t result = mach_absolute_time();
          *(void *)(v4 + 4128) = result;
        }
      }
    }
  }
  return result;
}

uint64_t __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownAutoFocusSampleBufferProcessor];
}

void __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_2(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 2076);
  *(_DWORD *)(v2 + 2076) = 0;
  uint64_t v4 = *(const os_unfair_lock **)(a1 + 32);
  if (v4[520]._os_unfair_lock_opaque != 3) {
    goto LABEL_15;
  }
  unsigned __int8 v5 = -[BWFigVideoCaptureDevice _globalToneMappingEnabled](v4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    int v7 = 4;
  }
  else
  {
    int v8 = *(_DWORD *)(v6 + 2168);
    if (v8 == 2) {
      int v7 = 2;
    }
    else {
      int v7 = v8 == 1;
    }
  }
  *(_DWORD *)(v6 + 2080) = v7;
  if (-[BWFigVideoCaptureDevice _globalToneMappingEnabled](*(const os_unfair_lock **)(a1 + 32)))
  {
    if (!dword_1EB4C4FF0) {
      goto LABEL_15;
    }
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_15;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 2168)) {
    BOOL v9 = dword_1EB4C4FF0 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    goto LABEL_14;
  }
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  if (v3) {
    BOOL v11 = dword_1EB4C4FF0 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    unint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  -[BWFigVideoCaptureDevice _updateStreamingImageIntentTo:from:masterPortType:](*(void *)(a1 + 32), 0, v3, *(void **)(a1 + 40));

  *(void *)(*(void *)(a1 + 32) + 3816) = 0;
}

- (const)_globalToneMappingEnabled
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_assert_owner(result + 487);
    uint64_t v2 = *(void **)&v1[534]._os_unfair_lock_opaque;
    uint64_t result = (const os_unfair_lock *)(LOBYTE(v1[533]._os_unfair_lock_opaque) != 0);
    if (v2)
    {
      return (const os_unfair_lock *)[v2 BOOLValue];
    }
  }
  return result;
}

void __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_3(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 2552) = 0;
  *(void *)(*(void *)(a1 + 32) + 2560) = 0;
}

- (void)_reportAPSOffsetEstimatorInfo
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(a1 + 3256))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v2 = *(void **)(a1 + 552);
    uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v12;
      uint64_t v6 = *MEMORY[0x1E4F547F0];
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v12 != v5) {
            objc_enumerationMutation(v2);
          }
          int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (objc_msgSend(*(id *)(a1 + 3256), "containsObject:", objc_msgSend(v8, "portType")))
          {
            int v10 = 0;
            uint64_t v9 = objc_msgSend((id)objc_msgSend(v8, "stream"), "getProperty:error:", v6, &v10);
            if (v9) {
              +[BWAutoFocusPositionSensorMonitor processAPSOffsetEstimatorInfo:portType:](BWAutoFocusPositionSensorMonitor, "processAPSOffsetEstimatorInfo:portType:", v9, [v8 portType]);
            }
          }
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v4);
    }

    *(void *)(a1 + 3256) = 0;
  }
}

- (uint64_t)_reportDeskViewStreamingSessionCoreAnalyticsData
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = objc_alloc_init(BWStreamingSessionAnalyticsPayload);
    [(BWStreamingSessionAnalyticsPayload *)v2 setActiveDeviceMask:*(unsigned int *)(v1 + 128)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setDeviceType:14];
    -[BWStreamingSessionAnalyticsPayload setContinuityCameraClientDeviceClass:](v2, "setContinuityCameraClientDeviceClass:", [*(id *)(v1 + 496) continuityCameraClientDeviceClass]);
    mach_absolute_time();
    [(BWStreamingSessionAnalyticsPayload *)v2 setStreamingTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setClientApplicationID:*(void *)(v1 + 80)];
    if (dword_1EB4C4FF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v2];
  }
  return result;
}

- (uint64_t)_reportStreamingSessionCoreAnalyticsData
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = objc_alloc_init(BWStreamingSessionAnalyticsPayload);
    [(BWStreamingSessionAnalyticsPayload *)v2 setActiveDeviceMask:*(unsigned int *)(v1 + 128)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setDeviceType:*(unsigned int *)(v1 + 484)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setDevicePosition:*(unsigned int *)(v1 + 512)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStartingCameraPosture:*(unsigned int *)(v1 + 3348)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStreamingStartExifOrientation:*(unsigned int *)(v1 + 3352)];
    uint64_t v3 = mach_absolute_time();
    unint64_t v4 = FigHostTimeToNanoseconds();
    [(BWStreamingSessionAnalyticsPayload *)v2 setStreamingTime:v4 / 0xF4240];
    if (*(unsigned char *)(v1 + 285)) {
      *(void *)(v1 + 296) += v3 - *(void *)(v1 + 288);
    }
    if (*(unsigned char *)(v1 + 250)) {
      *(void *)(v1 + 264) += v3 - *(void *)(v1 + 256);
    }
    if (*(unsigned char *)(v1 + 353)) {
      *(void *)(v1 + 368) += v3 - *(void *)(v1 + 360);
    }
    if (*(unsigned char *)(v1 + 181)) {
      *(void *)(v1 + 200) += v3 - *(void *)(v1 + 192);
    }
    if (*(unsigned char *)(v1 + 317)) {
      *(void *)(v1 + 328) += v3 - *(void *)(v1 + 320);
    }
    if (*(unsigned char *)(v1 + 318)) {
      *(void *)(v1 + 344) += v3 - *(void *)(v1 + 336);
    }
    -[BWFigVideoCaptureDevice _updateOrientationTotalTimes:](v1, v3);
    if (*(_DWORD *)(v1 + 3336))
    {
      -[BWStreamingSessionAnalyticsPayload setNumberOfPhotoCaptures:](v2, "setNumberOfPhotoCaptures:");
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfBurstPhotoCaptures:*(unsigned int *)(v1 + 3340)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfBalancedPhotoCaptures:*(unsigned int *)(v1 + 3344)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfButtonMashingCapturesAtRate0:*(unsigned int *)(v1 + 3376)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfButtonMashingEventsAtRate0:*(unsigned int *)(v1 + 3384)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfButtonMashingCapturesAtRate1:*(unsigned int *)(v1 + 3380)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfButtonMashingEventsAtRate1:*(unsigned int *)(v1 + 3388)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setLongestButtonMashingEventAtRate0:*(unsigned int *)(v1 + 3396)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setLongestButtonMashingEventAtRate1:*(unsigned int *)(v1 + 3400)];
      if (*(_DWORD *)(v1 + 3356)) {
        -[BWStreamingSessionAnalyticsPayload setTimeToFirstPhotoCapture:](v2, "setTimeToFirstPhotoCapture:");
      }
      if (*(_DWORD *)(v1 + 3372)) {
        -[BWStreamingSessionAnalyticsPayload setMaxTimeSinceLastPhotoCapture:](v2, "setMaxTimeSinceLastPhotoCapture:");
      }
      if (*(_DWORD *)(v1 + 3368) != -1) {
        -[BWStreamingSessionAnalyticsPayload setMinTimeSinceLastPhotoCapture:](v2, "setMinTimeSinceLastPhotoCapture:");
      }
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setClientApplicationID:*(void *)(v1 + 80)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setSunburnDetectOccurred:*(void *)(v1 + 3272)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setDegradedAutoFocusStatus:*(void *)(v1 + 3288)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setApsMaxDynamicGainDerate:*(void *)(v1 + 3296)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setApsMaxTopEndDynamicBuffer:*(void *)(v1 + 3304)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfSphereJitterDetectAttempts:*(void *)(v1 + 3312)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setNumberOfSphereJitterDetects:*(void *)(v1 + 3320)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setActuatorVendor:*(void *)(v1 + 3416)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setSphereMode:*(void *)(v1 + 3424)];
    if (*(_DWORD *)(v1 + 172)) {
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightCameraUsageTypeMask:](v2, "setTimeOfFlightCameraUsageTypeMask:");
    }
    if (*(_DWORD *)(v1 + 176)) {
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightCameraProjectorModeMask:](v2, "setTimeOfFlightCameraProjectorModeMask:");
    }
    if (*(float *)(v1 + 3432) != 3.4028e38) {
      -[BWStreamingSessionAnalyticsPayload setStructuredLightIdleTemperatureFirstReading:](v2, "setStructuredLightIdleTemperatureFirstReading:");
    }
    if (*(float *)(v1 + 3436) != 3.4028e38) {
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureFirstReading:](v2, "setStructuredLightActiveTemperatureFirstReading:");
    }
    if (*(float *)(v1 + 3440) != 3.4028e38) {
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureLastReading:](v2, "setStructuredLightActiveTemperatureLastReading:");
    }
    if ([*(id *)(v1 + 3448) numberOfSamples])
    {
      [*(id *)(v1 + 3448) max];
      double v6 = v5;
      [*(id *)(v1 + 3448) min];
      double v8 = v6 - v7;
      *(float *)&double v8 = v8;
      [(BWStreamingSessionAnalyticsPayload *)v2 setStructuredLightActiveTemperatureRange:v8];
      [*(id *)(v1 + 3448) average];
      *(float *)&double v9 = v9;
      [(BWStreamingSessionAnalyticsPayload *)v2 setStructuredLightActiveTemperatureAverage:v9];
    }
    if ([*(id *)(v1 + 3456) numberOfSamples])
    {
      [*(id *)(v1 + 3456) max];
      double v11 = v10;
      [*(id *)(v1 + 3456) min];
      double v13 = v11 - v12;
      *(float *)&double v13 = v13;
      [(BWStreamingSessionAnalyticsPayload *)v2 setInfaredSensorTemperatureRange:v13];
      [*(id *)(v1 + 3456) average];
      *(float *)&double v14 = v14;
      [(BWStreamingSessionAnalyticsPayload *)v2 setInfaredSensorTemperatureAverage:v14];
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setSensorTemperatureStats:*(void *)(v1 + 3504)];
    if (*(void *)(v1 + 3464) || *(void *)(v1 + 3472))
    {
      [(BWStreamingSessionAnalyticsPayload *)v2 setInfraredProjectorUptimeInMsForLowPowerSparse:*(void *)(v1 + 3464) / 0x3E8uLL];
      [(BWStreamingSessionAnalyticsPayload *)v2 setInfraredProjectorUptimeInMsForHighPowerSparse:*(void *)(v1 + 3472) / 0x3E8uLL];
    }
    uint64_t v15 = (int)[(id)v1 systemPressureLevel];
    int64_t v16 = *(void *)(v1 + 3512) + FigHostTimeToNanoseconds() / 0xF4240uLL * v15;
    *(void *)(v1 + 3512) = v16;
    if (v4 >= 0xF4240)
    {
      *(float *)&double v17 = (float)(v16 / (uint64_t)(v4 / 0xF4240));
      [(BWStreamingSessionAnalyticsPayload *)v2 setAverageSystemPressureLevel:v17];
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setMaxSystemPressureLevel:*(unsigned int *)(v1 + 3528)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setSystemPressureFactors:*(unsigned int *)(v1 + 3544)];
    if ((*(void *)(v1 + 3536) & 0x8000000000000000) == 0) {
      -[BWStreamingSessionAnalyticsPayload setTimeToCriticalSystemPressureInMS:](v2, "setTimeToCriticalSystemPressureInMS:");
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setOrientationPortraitTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setOrientationLandscapeTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setOrientationFaceUpTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setOrientationFaceDownTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicFramingSupported:*(unsigned __int8 *)(v1 + 180)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicFramingEnabled:*(unsigned __int8 *)(v1 + 181)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicFramingControlMode:*(unsigned int *)(v1 + 184)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicFramingTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundBlurSupported:*(unsigned __int8 *)(v1 + 249)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundBlurEnabled:*(unsigned __int8 *)(v1 + 250)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundBlurTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    LODWORD(v18) = *(_DWORD *)(v1 + 280);
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundBlurAperture:v18];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundBlurApertureChanged:*(unsigned __int8 *)(v1 + 276)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStudioLightingSupported:*(unsigned __int8 *)(v1 + 284)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStudioLightingEnabled:*(unsigned __int8 *)(v1 + 285)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStudioLightingTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    LODWORD(v19) = *(_DWORD *)(v1 + 312);
    [(BWStreamingSessionAnalyticsPayload *)v2 setStudioLightingIntensity:v19];
    [(BWStreamingSessionAnalyticsPayload *)v2 setStudioLightingIntensityChanged:*(unsigned __int8 *)(v1 + 308)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setReactionEffectsSupported:*(unsigned __int8 *)(v1 + 316)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setReactionEffectsEnabled:*(unsigned __int8 *)(v1 + 317)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setGesturesEnabled:*(unsigned __int8 *)(v1 + 318)];
    unsigned int v20 = *(void **)(v1 + 4064);
    if (v20)
    {
      uint64_t v21 = (void *)[v20 referencedObject];
    }
    else if ([(id)v1 isBravoVariant])
    {
      uint64_t v21 = (void *)[(id)v1 masterCaptureStream];
    }
    else
    {
      uint64_t v21 = *(void **)(v1 + 496);
    }
    -[BWStreamingSessionAnalyticsPayload setReactionCount:](v2, "setReactionCount:", [v21 reactionCount]);
    [(BWStreamingSessionAnalyticsPayload *)v2 setReactionEffectsEnabledTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setGesturesEnabledTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundReplacementSupported:*(unsigned __int8 *)(v1 + 352)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundReplacementEnabled:*(unsigned __int8 *)(v1 + 353)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundReplacementTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    [(BWStreamingSessionAnalyticsPayload *)v2 setBackgroundReplacementPixelBufferChanged:*(unsigned __int8 *)(v1 + 376)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicVideoEnabled:*(unsigned __int8 *)(v1 + 3744)];
    LODWORD(v22) = *(_DWORD *)(v1 + 3792);
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicVideoAverageRenderingTime:v22];
    LODWORD(v23) = *(_DWORD *)(v1 + 3796);
    [(BWStreamingSessionAnalyticsPayload *)v2 setCinematicVideoWorstCaseRenderingTime:v23];
    if (*(unsigned char *)(v1 + 3900))
    {
      if (*(unsigned char *)(v1 + 1268))
      {
        CMTime time1 = *(CMTime *)(v1 + 1256);
        CMTime time2 = *(CMTime *)(v1 + 3888);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          CMTime time1 = *(CMTime *)(v1 + 1256);
          [(BWFigVideoCaptureDevice *)v1 _updateTimeOfFlightStreamingTime:*(float *)&time1.value];
        }
      }
      LODWORD(v24) = vcvtas_u32_f32(*(float *)(v1 + 3868) * 1000.0);
      [(BWStreamingSessionAnalyticsPayload *)v2 setTimeOfFlightAssistedAutoFocusStreamingTimeAt0FPS:v24];
      LODWORD(v25) = vcvtas_u32_f32(*(float *)(v1 + 3872) * 1000.0);
      [(BWStreamingSessionAnalyticsPayload *)v2 setTimeOfFlightAssistedAutoFocusStreamingTimeAt1FPS:v25];
      LODWORD(v26) = vcvtas_u32_f32(*(float *)(v1 + 3876) * 1000.0);
      [(BWStreamingSessionAnalyticsPayload *)v2 setTimeOfFlightAssistedAutoFocusStreamingTimeAt8FPS:v26];
      LODWORD(v27) = vcvtas_u32_f32(*(float *)(v1 + 3880) * 1000.0);
      [(BWStreamingSessionAnalyticsPayload *)v2 setTimeOfFlightAssistedAutoFocusStreamingTimeAtOtherFPS:v27];
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setCaptureDeviceType:BWUtilitiesUnderlyingDeviceTypeFromPortType(*(void **)(v1 + 504), *(_DWORD *)(v1 + 484))];
    [(BWStreamingSessionAnalyticsPayload *)v2 setFaceDrivenAEAFEnabledByDefault:*(unsigned __int8 *)(v1 + 440)];
    if (*(unsigned char *)(v1 + 440))
    {
      [(BWStreamingSessionAnalyticsPayload *)v2 setFaceDrivenAEDisabledCount:*(unsigned int *)(v1 + 460)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setFaceDrivenAFDisabledCount:*(unsigned int *)(v1 + 456)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setMaxFacesDetected:*(unsigned int *)(v1 + 464)];
      [*(id *)(v1 + 472) min];
      *(float *)&double v29 = v29;
      [(BWStreamingSessionAnalyticsPayload *)v2 setMinLuxValue:v29];
      [*(id *)(v1 + 472) max];
      *(float *)&double v30 = v30;
      [(BWStreamingSessionAnalyticsPayload *)v2 setMaxLuxValue:v30];
      [*(id *)(v1 + 472) average];
      *(float *)&double v31 = v31;
      [(BWStreamingSessionAnalyticsPayload *)v2 setAverageLuxValue:v31];
      [(BWStreamingSessionAnalyticsPayload *)v2 setPhotoFormat:*(unsigned __int8 *)(v1 + 480)];
    }
    if (*(unsigned char *)(v1 + 1464))
    {
      LODWORD(v28) = *(_DWORD *)(v1 + 1468);
      [(BWStreamingSessionAnalyticsPayload *)v2 setDepthMaxFrameRate:v28];
      [(BWStreamingSessionAnalyticsPayload *)v2 setDepthFormatDimensionWidth:*(unsigned int *)(v1 + 4012)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setDepthFormatDimensionHeight:*(unsigned int *)(v1 + 4016)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setDepthPixelFormat:*(unsigned int *)(v1 + 4020)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setDepthDataFiltered:*(unsigned __int8 *)(v1 + 4024)];
    }
    -[BWStreamingSessionAnalyticsPayload setContinuityCameraClientDeviceClass:](v2, "setContinuityCameraClientDeviceClass:", [*(id *)(v1 + 496) continuityCameraClientDeviceClass]);
    if (*(uint64_t *)(v1 + 4128) >= 1) {
      [(BWStreamingSessionAnalyticsPayload *)v2 setThermalThrottledTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
    }
    if (*(void *)(v1 + 496))
    {
      [(BWStreamingSessionAnalyticsPayload *)v2 setPixelFormat:*(unsigned int *)(v1 + 4176)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setVideoDimensions:*(void *)(v1 + 4180)];
      [(BWStreamingSessionAnalyticsPayload *)v2 setHighlightRecoveryEnabled:*(unsigned __int8 *)(v1 + 4188)];
      [*(id *)(v1 + 496) minimumSupportedFrameRate];
      -[BWStreamingSessionAnalyticsPayload setMinimumSupportedFrameRate:](v2, "setMinimumSupportedFrameRate:");
      [*(id *)(v1 + 496) maximumSupportedFrameRate];
      -[BWStreamingSessionAnalyticsPayload setMaximumSupportedFrameRate:](v2, "setMaximumSupportedFrameRate:");
      [*(id *)(v1 + 496) minimumFrameRate];
      -[BWStreamingSessionAnalyticsPayload setMinimumFrameRate:](v2, "setMinimumFrameRate:");
      [*(id *)(v1 + 496) maximumFrameRate];
      -[BWStreamingSessionAnalyticsPayload setMaximumFrameRate:](v2, "setMaximumFrameRate:");
      BOOL v32 = objc_msgSend((id)objc_msgSend(*(id *)(v1 + 496), "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(v1 + 496), "activeFormatIndex"));
      if (v32)
      {
        uint64_t v33 = v32;
        objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", *MEMORY[0x1E4F55C70]), "floatValue");
        -[BWStreamingSessionAnalyticsPayload setFieldOfView:](v2, "setFieldOfView:");
        -[BWStreamingSessionAnalyticsPayload setBinned:](v2, "setBinned:", objc_msgSend((id)objc_msgSend(v33, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue"));
      }
      [(BWStreamingSessionAnalyticsPayload *)v2 setColorSpace:*(unsigned int *)(v1 + 4192)];
    }
    [(BWStreamingSessionAnalyticsPayload *)v2 setClientIsVOIP:*(unsigned __int8 *)(v1 + 4189)];
    [(BWStreamingSessionAnalyticsPayload *)v2 setAudioMixWithOthersEnabled:*(unsigned __int8 *)(v1 + 4330)];
    if (*(unsigned char *)(v1 + 4272))
    {
      uint64_t v34 = (_OWORD *)(v1 + 4276);
      CMTime time1 = *(CMTime *)(v1 + 4276);
      long long v42 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v35 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v35;
      if (CMTimeCompare(&time1, &time2))
      {
        CMTime time1 = *(CMTime *)(v1 + 4300);
        *(_OWORD *)&time2.CMTimeValue value = v42;
        time2.CMTimeEpoch epoch = v35;
        if (CMTimeCompare(&time1, &time2))
        {
          CMTime time1 = *(CMTime *)(v1 + 4300);
          *(_OWORD *)&time2.CMTimeValue value = *v34;
          time2.CMTimeEpoch epoch = *(void *)(v1 + 4292);
          int v36 = (CMTime *)v44;
          uint64_t v37 = (CMTime *)v44;
        }
        else
        {
          CMTime time1 = *(CMTime *)(v1 + 1256);
          *(_OWORD *)&time2.CMTimeValue value = *v34;
          time2.CMTimeEpoch epoch = *(void *)(v1 + 4292);
          int v36 = &v43;
          uint64_t v37 = &v43;
        }
        CMTimeSubtract(v37, &time1, &time2);
        float Seconds = CMTimeGetSeconds(v36);
        if (Seconds > 0.16667) {
          -[BWStreamingSessionAnalyticsPayload setInvalidFrameDurationBeforeFirstValidFrame:](v2, "setInvalidFrameDurationBeforeFirstValidFrame:");
        }
      }
      if (*(_DWORD *)(v1 + 4324))
      {
        -[BWStreamingSessionAnalyticsPayload setInvalidFrameCountAfterFirstValidFrame:](v2, "setInvalidFrameCountAfterFirstValidFrame:");
        FigCapturePromptOpenTapToRadarIfNecessary(@"Camera activity without camera indicator light. Please file a radar.", @"Received black frames because the camera indicator light was off", objc_msgSend(NSString, "stringWithFormat:", @"A total of %i black frames were seen after the first good frame.", *(unsigned int *)(v1 + 4324)), 1, 6, @"LastShownInvalidFrameTTRPromptDate", @"LastShownInvalidFrameTTRPromptBuildVersion");
      }
    }
    if (dword_1EB4C4FF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v2];
  }
  return result;
}

- (id)_sensorRawPoolsRequirements
{
  uint64_t v1 = a1;
  v29[6] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v26 = 0;
    if ([a1 isBravoVariant])
    {
      uint64_t v2 = (void *)[v1[68] syncGroup];
      uint64_t v1 = (id *)[v2 getProperty:*MEMORY[0x1E4F555C8] error:&v26];
      if (v26) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v3 = (void *)[v1[62] stream];
      uint64_t v1 = (id *)[v3 getProperty:*MEMORY[0x1E4F547A8] error:&v26];
      if (v26)
      {
LABEL_23:
        FigDebugAssert3();
        return v1;
      }
    }
    if ([v1 count])
    {
      uint64_t v4 = *MEMORY[0x1E4F24E10];
      v29[0] = *MEMORY[0x1E4F24D90];
      v29[1] = v4;
      uint64_t v5 = *MEMORY[0x1E4F24C98];
      v29[2] = *MEMORY[0x1E4F24D08];
      v29[3] = v5;
      uint64_t v6 = *MEMORY[0x1E4F24D70];
      void v29[4] = *MEMORY[0x1E4F24D78];
      v29[5] = v6;
      double v7 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:6];
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v8 = [v1 countByEnumeratingWithState:&v22 objects:v28 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v23;
        while (2)
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v23 != v10) {
              objc_enumerationMutation(v1);
            }
            double v12 = *(void **)(*((void *)&v22 + 1) + 8 * i);
            long long v18 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            long long v21 = 0u;
            uint64_t v13 = [v7 countByEnumeratingWithState:&v18 objects:v27 count:16];
            if (v13)
            {
              uint64_t v14 = v13;
              uint64_t v15 = *(void *)v19;
LABEL_14:
              uint64_t v16 = 0;
              while (1)
              {
                if (*(void *)v19 != v15) {
                  objc_enumerationMutation(v7);
                }
                if (![v12 objectForKeyedSubscript:*(void *)(*((void *)&v18 + 1) + 8 * v16)]) {
                  return v1;
                }
                if (v14 == ++v16)
                {
                  uint64_t v14 = [v7 countByEnumeratingWithState:&v18 objects:v27 count:16];
                  if (v14) {
                    goto LABEL_14;
                  }
                  break;
                }
              }
            }
          }
          uint64_t v9 = [v1 countByEnumeratingWithState:&v22 objects:v28 count:16];
          if (v9) {
            continue;
          }
          break;
        }
      }
    }
  }
  return v1;
}

uint64_t __48__BWFigVideoCaptureDevice__updateSensorRawPools__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)[*(id *)(*(void *)(a1 + 32) + 152) objectForKeyedSubscript:a2];
  double v7 = (void *)[*(id *)(*(void *)(a1 + 32) + 152) objectForKeyedSubscript:a3];
  uint64_t v8 = *(void *)(a1 + 32);
  LODWORD(v8) = *(_DWORD *)(v8 + 4 * (int)[a2 intValue] + 160);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = (*(_DWORD *)(v9 + 4 * (int)[a2 intValue]) + v8);
  uint64_t v11 = *(void *)(a1 + 32);
  LODWORD(v11) = *(_DWORD *)(v11 + 4 * (int)[a3 intValue] + 160);
  uint64_t v12 = *(void *)(a1 + 40);
  unsigned int v13 = *(_DWORD *)(v12 + 4 * (int)[a3 intValue]) + v11;
  if ([v6 capacity] > v10 && objc_msgSend(v7, "capacity") <= (unint64_t)v13) {
    return -1;
  }
  if ([v6 capacity] <= v10 && objc_msgSend(v7, "capacity") > (unint64_t)v13) {
    return 1;
  }
  uint64_t v15 = [v6 width];
  unint64_t v16 = [v6 height] * v15;
  uint64_t v17 = [v7 width];
  if (v16 > [v7 height] * v17) {
    return -1;
  }
  else {
    return 1;
  }
}

- (BOOL)isPortTypeUsingZoomBasedSourceSensorRaws:(id)a3
{
  if (self->_multipleSensorRawBufferPoolsEnabled
    && -[NSArray containsObject:](self->_activePortTypes, "containsObject:"))
  {
    p_sensorRawPoolLocuint64_t k = &self->_sensorRawPoolLock;
    os_unfair_lock_lock(&self->_sensorRawPoolLock);
    if ([(NSMutableDictionary *)self->_sensorRawPools objectForKeyedSubscript:&unk_1EFB015F8])
    {
      if ([a3 isEqualToString:*MEMORY[0x1E4F52DE8]])
      {
        BOOL v6 = 1;
LABEL_10:
        os_unfair_lock_unlock(p_sensorRawPoolLock);
        return v6;
      }
      if ([a3 isEqualToString:*MEMORY[0x1E4F52DF0]])
      {
        BOOL v6 = [(BWFigVideoCaptureDevice *)self isBravoVariant];
        goto LABEL_10;
      }
    }
    BOOL v6 = 0;
    goto LABEL_10;
  }
  return 0;
}

- (int)sensorRawHighResolutionFlavorForDimensions:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!self->_multipleSensorRawBufferPoolsEnabled && !self->_sensorRawPoolEnabled) {
    return 0;
  }
  os_unfair_lock_lock(&self->_sensorRawPoolLock);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sensorRawPools = self->_sensorRawPools;
  uint64_t v6 = [(NSMutableDictionary *)sensorRawPools countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(sensorRawPools);
        }
        unint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (FigCaptureVideoDimensionsAreEqual(*(void *)&a3, objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_sensorRawPools, "objectForKeyedSubscript:", v10), "dimensions")))
        {
          int v11 = [v10 intValue];
          goto LABEL_13;
        }
      }
      uint64_t v7 = [(NSMutableDictionary *)sensorRawPools countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  int v11 = 0;
LABEL_13:
  os_unfair_lock_unlock(&self->_sensorRawPoolLock);
  return v11;
}

- (int)updateStillImageSensorRawBufferPoolsWithRetainedBufferCount:(int)a3 zoomBasedRetainedBufferCount:(int)a4 ultraHighResolutionRetainedBufferCount:(int)a5
{
  if (!self->_multipleSensorRawBufferPoolsEnabled)
  {
    if (!FigCaptureVideoDimensionsAreValid(*(void *)&self->_ultraHighResSensorRawPoolDimensions)) {
      [(NSMutableDictionary *)self->_sensorRawPools setObject:0 forKeyedSubscript:&unk_1EFB015C8];
    }
    unsigned int v10 = self->_stillImageSensorRawPoolRetainedBufferCounts[0];
    if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] != a5)
    {
      BOOL v11 = FigCaptureVideoDimensionsAreValid(*(void *)&self->_ultraHighResSensorRawPoolDimensions);
      BOOL v12 = v11;
      if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] < a5)
      {
        if (v10 != a3)
        {
          self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
          int updated = -[BWFigVideoCaptureDevice _updateSensorRawPool]((uint64_t)self);
          if (updated)
          {
            int v14 = updated;
            goto LABEL_30;
          }
        }
        if (v12)
        {
          self->_stillImageSensorRawPoolRetainedBufferCounts[2] = a5;
          int v14 = -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool]((uint64_t)self);
          if (!v14) {
            return v14;
          }
LABEL_30:
          FigDebugAssert3();
          return v14;
        }
        return 0;
      }
      if (v11)
      {
        self->_stillImageSensorRawPoolRetainedBufferCounts[2] = a5;
        int v16 = -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool]((uint64_t)self);
        if (v16)
        {
          int v14 = v16;
          goto LABEL_30;
        }
      }
    }
    if (v10 != a3)
    {
      self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
      int v14 = -[BWFigVideoCaptureDevice _updateSensorRawPool]((uint64_t)self);
      if (!v14) {
        return v14;
      }
      goto LABEL_30;
    }
    return 0;
  }
  unsigned int v8 = self->_stillImageSensorRawPoolRetainedBufferCounts[0];
  if (v8 != a3) {
    self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
  }
  if (self->_stillImageSensorRawPoolRetainedBufferCounts[1] != a4)
  {
    uint64_t v9 = &self->_stillImageSensorRawPoolRetainedBufferCounts[2];
    unsigned int v15 = self->_stillImageSensorRawPoolRetainedBufferCounts[2];
    self->_stillImageSensorRawPoolRetainedBufferCounts[1] = a4;
    if (v15 == a5) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v9 = &self->_stillImageSensorRawPoolRetainedBufferCounts[2];
  if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] != a5)
  {
LABEL_18:
    *uint64_t v9 = a5;
    goto LABEL_19;
  }
  if (v8 == a3) {
    return 0;
  }
LABEL_19:
  int v14 = -[BWFigVideoCaptureDevice _updateSensorRawPools]((uint64_t)self);
  if (v14) {
    goto LABEL_30;
  }
  return v14;
}

uint64_t __63__BWFigVideoCaptureDevice__servicePropertyChangeNotifications___block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  _servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications = result != 0;
  return result;
}

- (BWFrameStatisticsByPortType)_copyCurrentFrameStatistics
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", [*(id *)(a1 + 1952) portTypes]);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
  [*(id *)(a1 + 1952) copyTo:v2];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
  return v2;
}

- (float)masterCaptureStreamLastFrameEIT
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  objc_msgSend(-[BWFrameStatisticsByPortType objectForKeyedSubscript:](self->_currentFrameStatisticsByPortType, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](-[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream"), "portType")), "eit");
  float v5 = v4;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v5;
}

- (BOOL)stillImageCaptureEnabled
{
  return self->_flashScene;
}

- (id)stillImageCaptureSettingsWithSettings:(id)a3 speedOverQualityCaptureEnabled:(BOOL)a4 processingSupportProvider:(id)a5
{
  [*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled forceUpdateRearLuxLevel];
  if (*(int *)&self->_stillImageCaptureEnabled < 3) {
    uint64_t v9 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithSettings:]((uint64_t)self, a3);
  }
  else {
    uint64_t v9 = -[BWFigVideoCaptureDevice _ubStillImageCaptureSettingsWithSettings:speedOverQualityCaptureEnabled:processingSupportProvider:]((uint64_t)self, a3, a4, a5);
  }
  unsigned int v10 = v9;
  [(BWStillImageCaptureSettings *)v9 setApplicationID:self->_applicationID];
  BOOL v11 = [(BWFigVideoCaptureStream *)self->_currentMasterCaptureStream portType];
  if (!v11) {
    BOOL v11 = [(BWFigVideoCaptureStream *)self->_captureStream portType];
  }
  [(BWStillImageCaptureSettings *)v10 setMasterPortType:v11];
  [a3 scaleFactor];
  -[BWStillImageCaptureSettings setScaleFactor:](v10, "setScaleFactor:");
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setSystemPressureLevel:", -[BWFigVideoCaptureDevice systemPressureLevel](self, "systemPressureLevel"));
  synchronizedStreamsGroup = self->_synchronizedStreamsGroup;
  if (synchronizedStreamsGroup)
  {
    currentMasterCaptureStreauint64_t m = [(BWFigVideoCaptureSynchronizedStreamsGroup *)synchronizedStreamsGroup cameraControlsStatisticsMasterStream];
    if (!currentMasterCaptureStream) {
      currentMasterCaptureStreauint64_t m = self->_currentMasterCaptureStream;
    }
  }
  else
  {
    currentMasterCaptureStreauint64_t m = self->_captureStream;
  }
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setCameraControlsStatisticsMaster:", BWActiveDeviceTypeFromPortType(-[BWFigVideoCaptureStream portType](currentMasterCaptureStream, "portType")));
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setAlsLuxLevel:", objc_msgSend(*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled, "luxLevel"));
  [*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled rearLuxLevel];
  int v15 = v14;
  id v16 = [(BWStillImageCaptureSettings *)v10 metadata];
  LODWORD(v17) = v15;
  [v16 setAlsRearLuxLevel:v17];
  return v10;
}

- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithSettings:(unsigned __int8)a3 speedOverQualityCaptureEnabled:(void *)a4 processingSupportProvider:
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if ([(id)a1 isBravoVariant]) {
    uint64_t v7 = (void *)[(id)a1 masterCaptureStream];
  }
  else {
    uint64_t v7 = *(void **)(a1 + 496);
  }
  unsigned int v8 = objc_alloc_init(BWStillImageCaptureMetadata);
  unsigned int v78 = 0;
  uint64_t v9 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics](a1);
  [a2 stillImageRequestTime];
  [(BWStillImageCaptureMetadata *)v8 setStreamingTime:FigHostTimeToNanoseconds() / 0xF4240uLL];
  -[BWFigVideoCaptureDevice _updateCurrentStillSmartCameraState](a1);
  if ([*(id *)(a1 + 3192) isValid])
  {
    [(BWStillImageCaptureMetadata *)v8 setSmartCamVersion:*(unsigned __int16 *)(a1 + 3172)];
    unsigned int v10 = *(void **)(a1 + 3192);
    if (v10)
    {
      [v10 timestamp];
    }
    else
    {
      long long v76 = 0uLL;
      uint64_t v77 = 0;
    }
    long long v74 = v76;
    uint64_t v75 = v77;
    [(BWStillImageCaptureMetadata *)v8 setSmartCamTimestamp:&v74];
    -[BWStillImageCaptureMetadata setSmartCamInferences:](v8, "setSmartCamInferences:", [*(id *)(a1 + 3192) inferences]);
    [(BWStillImageCaptureMetadata *)v8 setIsPreviewSmartCamInferences:1];
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
    [(BWStillImageCaptureMetadata *)v8 setSemanticStyleSceneType:*(unsigned int *)(a1 + 3152)];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
  }
  int v11 = [a2 qualityPrioritization];
  int v12 = [a2 HDRMode];
  int v13 = v12;
  unsigned int v15 = v11 > 1 || v12 != 0;
  if ([a2 flashMode] == 2) {
    int v16 = 1;
  }
  else {
    int v16 = [a2 autoStereoPhotoCaptureEnabled];
  }
  uint64_t v64 = v8;
  uint64_t v17 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](a1, v7, v9, v15, v8, v16, NAN);
  if ([a2 autoDeferredProcessingEnabled]) {
    BOOL v18 = [+[BWDeferredCaptureContainerManager sharedInstance] canDefer];
  }
  else {
    BOOL v18 = 1;
  }
  unsigned __int8 v73 = a3;
  unsigned __int8 v72 = 0;
  char v71 = 0;
  char v63 = v9;
  if (objc_msgSend(-[BWFrameStatisticsByPortType objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", objc_msgSend(v7, "portType")), "ltmCurve") == 2&& v11 > 1)
  {
    int v13 = 0;
    int v11 = 1;
  }
  unint64_t v19 = v17;
  int v60 = v13;
  int v61 = v11;
  uint64_t v20 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureTypeWithSettings:sceneFlags:hdrMode:qualityPrioritization:clientBracket:canDefer:primaryPortType:speedOverQualityInOut:speedOverQualityDowngradeOut:](a1, a2, v17, v13, v11, [a2 bracketType] != 0, v18, objc_msgSend(v7, "portType"), (char *)&v73, (char *)&v72);
  if (v20 == 12 && *(unsigned char *)(a1 + 2049)) {
    [v7 activeNondisruptiveSwitchingFormatIndex];
  }
  int v21 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](a1, a2, 0, v17);
  uint64_t v22 = [v7 portType];
  int v23 = [a2 resolutionFlavor];
  char v24 = [a2 constituentPhotoDeliveryEnabled];
  char v25 = [a2 autoDeferredProcessingEnabled];
  char IsDemosaicedRaw = FigCapturePixelFormatIsDemosaicedRaw([a2 rawOutputFormat]);
  uint64_t v27 = v22;
  int v28 = v61;
  int v59 = v21;
  int v29 = -[BWFigVideoCaptureDevice _ubIsRequestedHighResolutionFlavorSupportedForCaptureType:portType:qualityPrioritization:requestedHighResolutionFlavor:sceneFlags:deliverDepthData:bravoConstituentPhotoCapture:autoDeferredProcessingEnabled:canDefer:demosaicedRawRequested:isUltraHighResolutionDowngradeOut:](a1, v20, v27, v61, v23, v19, v21, v24, v25, v18, IsDemosaicedRaw, &v71);
  int v30 = 0;
  if (v29) {
    int v30 = [a2 resolutionFlavor];
  }
  double v31 = v63;
  uint64_t v32 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureFlagsForCaptureType:sceneFlags:settings:frameStatisticsByPortType:hdrMode:speedOverQuality:speedOverQualityDowngrade:qualityPrioritization:highResolutionFlavor:ultraHighResolutionDowngrade:canDefer:processingSupportProvider:zeroShutterLagFailureReasonOut:metadata:](a1, v20, v19, a2, v63, v60, v73, v72, v61, v30, v71, v18, a4, &v78, v64);
  unint64_t v33 = v32;
  if (v20 == 1)
  {
    unint64_t v34 = v19;
  }
  else
  {
    unint64_t v34 = v19;
    if (*(_DWORD *)(a1 + 1984) == 2 && v73 && *(unsigned char *)(a1 + 3204) && (v32 & 0x2000) == 0)
    {
      if (dword_1EB4C4FF0)
      {
        int v70 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        int v28 = v61;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v36 = v73;
        double v31 = v63;
      }
      else
      {
        int v36 = 1;
      }
      uint64_t v20 = 1;
      unint64_t v33 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureFlagsForCaptureType:sceneFlags:settings:frameStatisticsByPortType:hdrMode:speedOverQuality:speedOverQualityDowngrade:qualityPrioritization:highResolutionFlavor:ultraHighResolutionDowngrade:canDefer:processingSupportProvider:zeroShutterLagFailureReasonOut:metadata:](a1, 1u, v19, a2, v31, v60, v36 != 0, v72, v28, 0, v71, v18, a4, &v78, v64);
    }
  }
  if (v78 && dword_1EB4C4FF0)
  {
    int v70 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    double v31 = v63;
  }
  if (v20 <= 0xC && ((1 << v20) & 0x1CC4) != 0)
  {
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    BOOL v38 = v20 == 10;
    switch((int)v20)
    {
      case 2:
        if ((v33 & 8) == 0)
        {
          uint64_t v20 = 2;
          goto LABEL_63;
        }
        uint64_t v52 = [a2 settingsID];
        char IsBayerRaw = FigCapturePixelFormatIsBayerRaw([a2 rawOutputFormat]);
        LODWORD(v20) = 2;
        uint64_t v47 = -[BWFigVideoCaptureDevice _ubFlashStillImageCaptureSettingsWithID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:]((BWStillImageCaptureSettings *)a1, v52, 2, v33, v34, (uint64_t)v31, IsBayerRaw, (void *)[a2 bravoConstituentImageDeliveryDeviceTypes]);
        goto LABEL_76;
      case 7:
        if (*(void *)(a1 + 1456))
        {
          uint64_t v20 = 7;
          goto LABEL_63;
        }
        LODWORD(v20) = 7;
        uint64_t v47 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _ubClientBracketStillImageCaptureSettings:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:]((id)a1, a2, 7, v33, v34, v31);
LABEL_76:
        long long v49 = v47;
        break;
      case 10:
      case 12:
        goto LABEL_45;
      case 11:
        LODWORD(v20) = 11;
        uint64_t v47 = -[BWFigVideoCaptureDevice _ubAdaptiveStillImageCaptureSettingsWithID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, [a2 settingsID], 11, v33, v34, v31);
        goto LABEL_76;
      default:
        goto LABEL_63;
    }
    goto LABEL_77;
  }
  if (*(unsigned char *)(a1 + 3204) || (v33 & 0x8000) != 0 || (v33 & 0x100) != 0 || (v33 & 0x80) != 0)
  {
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    BOOL v38 = 0;
    LODWORD(v20) = 1;
  }
  else
  {
    uint64_t v41 = (v33 >> 2) & 1;
    if (!*(unsigned char *)(a1 + 2050)) {
      LOBYTE(v41) = 0;
    }
    char v42 = BYTE4(v33) & 1 | v41;
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    uint64_t v20 = 1;
    if ((v42 & 1) == 0)
    {
LABEL_63:
      uint64_t v43 = objc_msgSend(a2, "settingsID", v56, v58);
      char v44 = FigCapturePixelFormatIsBayerRaw([a2 rawOutputFormat]);
      int v45 = (void *)[a2 bravoConstituentImageDeliveryDeviceTypes];
      int v46 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _clientBracketSettingsWithSettings:frameStatisticsByPortType:]((id *)a1, a2, v31);
      if (a2)
      {
        [a2 stillImageUserInitiatedRequestPTS];
      }
      else
      {
        long long v65 = 0uLL;
        uint64_t v66 = 0;
      }
      long long v48 = v46;
      double v31 = v63;
      long long v49 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, v43, v20, 0, v44, v45, v48, v33, &v65, (uint64_t)v63);
      [(BWStillImageCaptureSettings *)v49 setSceneFlags:v34];
LABEL_77:
      long long v51 = v64;
      goto LABEL_78;
    }
    BOOL v38 = 0;
  }
LABEL_45:
  int v39 = objc_msgSend(a2, "providesOriginalImage", v56, v58);
  unsigned __int8 v40 = 0;
  if (v38 && v39 && (v33 & 0x100000) != 0) {
    unsigned __int8 v40 = ((v34 & 4) != 0 || v60 == 1)
  }
       && objc_msgSend((id)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), "count") == 0;
  uint64_t v50 = [a2 settingsID];
  if (a2)
  {
    [a2 stillImageUserInitiatedRequestPTS];
  }
  else
  {
    long long v67 = 0uLL;
    uint64_t v68 = 0;
  }
  char v57 = FigCapturePixelFormatIsBayerRaw([a2 rawOutputFormat]);
  long long v51 = v64;
  long long v49 = -[BWFigVideoCaptureDevice _ubStillImageCaptureSettingsWithID:userInitiatedRequestPTS:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:metadata:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:]((BWStillImageCaptureSettings *)a1, v50, &v67, v20, v33, v34, v31, v64, v40, v57, (void *)[a2 bravoConstituentImageDeliveryDeviceTypes]);
LABEL_78:
  -[BWStillImageCaptureMetadata setZeroShutterLagFailureReason:](v51, "setZeroShutterLagFailureReason:", v78, v56, v58);
  if ((v33 & 0x2004) == 4 && ((v33 & 8) != 0 || *(unsigned char *)(a1 + 2050) || (v33 & 0x300000000) != 0))
  {
    -[BWStillImageCaptureMetadata setPreviewWhiteBalanceMetadataByPortType:](v51, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromFrameStatistics:masterPortType:](a1, v31, (uint64_t)[(BWStillImageCaptureSettings *)v49 masterPortType]));
    if (!v18) {
      goto LABEL_89;
    }
  }
  else if (!v18)
  {
    goto LABEL_89;
  }
  if ([a2 autoDeferredProcessingEnabled])
  {
    if (v20 == 12)
    {
      BOOL v54 = 1;
      goto LABEL_90;
    }
    if (v20 == 1 && (v33 & 0x80) != 0)
    {
      BOOL v54 = (*(unsigned char *)(a1 + 2068) & 0xA) != 0;
      goto LABEL_90;
    }
  }
LABEL_89:
  BOOL v54 = 0;
LABEL_90:
  [(BWStillImageCaptureSettings *)v49 setDeliverDeferredPhotoProxyImage:v54];
  [(BWStillImageCaptureSettings *)v49 setMetadata:v51];
  return v49;
}

- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithSettings:(uint64_t)a1
{
  if (!a1 || *(int *)(a1 + 2436) > 2) {
    return 0;
  }
  if ([(id)a1 isBravoVariant]) {
    uint64_t v17 = (void *)[(id)a1 masterCaptureStream];
  }
  else {
    uint64_t v17 = *(void **)(a1 + 496);
  }
  double v4 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics](a1);
  int v5 = -[BWFigVideoCaptureDevice _deliverDepthDataForSettings:](a1, a2);
  uint64_t v24 = 0;
  uint64_t v6 = -[BWFigVideoCaptureDevice _resolveStillImageCaptureTypeFromStatisticsByPortType:masterCaptureStream:flashMode:hdrMode:qualityPrioritization:stereoFusionMode:depthDataDeliveryEnabled:bravoConstituentImageDeliveryDeviceTypes:burstQualityCaptureEnabled:clientBracketMode:forSceneMonitoring:captureFlags:](a1, v4, v17, [a2 flashMode], objc_msgSend(a2, "HDRMode"), objc_msgSend(a2, "qualityPrioritization"), objc_msgSend(a2, "bravoImageFusionMode"), v5, objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), objc_msgSend(a2, "burstQualityCaptureEnabled"), objc_msgSend(a2, "bracketType"), 0, &v24);
  uint64_t v7 = [a2 settingsID];
  uint64_t v8 = [a2 providesOriginalImage];
  char IsBayerRaw = FigCapturePixelFormatIsBayerRaw([a2 rawOutputFormat]);
  unsigned int v10 = (void *)[a2 bravoConstituentImageDeliveryDeviceTypes];
  int v11 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _clientBracketSettingsWithSettings:frameStatisticsByPortType:]((id *)a1, a2, v4);
  uint64_t v12 = v24;
  if (a2)
  {
    [a2 stillImageUserInitiatedRequestPTS];
  }
  else
  {
    long long v22 = 0uLL;
    uint64_t v23 = 0;
  }
  int v13 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, v7, v6, v8, IsBayerRaw, v10, v11, v12, &v22, (uint64_t)v4);
  if ([*(id *)(a1 + 3192) isValid])
  {
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setSmartCamVersion:", *(unsigned __int16 *)(a1 + 3172));
    int v14 = *(void **)(a1 + 3192);
    if (v14)
    {
      [v14 timestamp];
    }
    else
    {
      long long v20 = 0uLL;
      uint64_t v21 = 0;
    }
    id v15 = [(BWStillImageCaptureSettings *)v13 metadata];
    long long v18 = v20;
    uint64_t v19 = v21;
    [v15 setSmartCamTimestamp:&v18];
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setSmartCamInferences:", objc_msgSend(*(id *)(a1 + 3192), "inferences"));
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setIsPreviewSmartCamInferences:", 1);
  }
  -[BWStillImageCaptureSettings setCmioCompressedFormat:](v13, "setCmioCompressedFormat:", [a2 cmioCompressedFormat]);
  -[BWStillImageCaptureSettings setCmioHighResolutionPhotoEnabled:](v13, "setCmioHighResolutionPhotoEnabled:", [a2 cmioHighResolutionPhotoEnabled]);
  -[BWStillImageCaptureSettings setCmioFlashMode:](v13, "setCmioFlashMode:", [a2 flashMode]);
  -[BWStillImageCaptureSettings setCmioQualityPrioritization:](v13, "setCmioQualityPrioritization:", [a2 clientQualityPrioritization]);
  -[BWStillImageCaptureSettings setCmioMaxPhotoDimensions:](v13, "setCmioMaxPhotoDimensions:", [a2 cmioMaxPhotoDimensionsWidth] | (unint64_t)(objc_msgSend(a2, "cmioMaxPhotoDimensionsHeight") << 32));
  return v13;
}

- (uint64_t)_deliverDepthDataForSettings:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    if (([a2 depthDataDeliveryEnabled] & 1) != 0
      || (BWCIFilterArrayContainsPortraitFilters((void *)[a2 processedImageFilters]) & 1) != 0)
    {
      return 1;
    }
    else
    {
      uint64_t result = objc_msgSend((id)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), "count");
      if (result)
      {
        uint64_t result = [a2 cameraCalibrationDataDeliveryEnabled];
        if (result) {
          return objc_msgSend((id)objc_msgSend(*(id *)(v3 + 520), "objectForKeyedSubscript:", @"ConstituentPhotoCalibrationData"), "BOOLValue") ^ 1;
        }
      }
    }
  }
  return result;
}

- (uint64_t)_resolveStillImageCaptureTypeFromStatisticsByPortType:(void *)a3 masterCaptureStream:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 stereoFusionMode:(int)a8 depthDataDeliveryEnabled:(void *)a9 bravoConstituentImageDeliveryDeviceTypes:(char)a10 burstQualityCaptureEnabled:(int)a11 clientBracketMode:(char)a12 forSceneMonitoring:(uint64_t *)a13 captureFlags:
{
  if (!a1) {
    return 0;
  }
  uint64_t v17 = a2;
  BOOL v20 = a4 != 2 || *(unsigned char *)(a1 + 1980) == 0;
  BOOL v82 = v20;
  BOOL v22 = a6 > 1 && *(unsigned char *)(a1 + 1981) != 0;
  BOOL v83 = v22;
  int v90 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 496), "portType"));
  if (([v90 motionDataStatus] & 8) != 0) {
    int v84 = 0;
  }
  else {
    int v84 = [*(id *)(a1 + 496) hasSphere];
  }
  int v91 = [(id)a1 isBravoVariant];
  long long v88 = *(void **)(a1 + 568);
  int v23 = v88 == a3;
  if ([a9 count])
  {
    unsigned int v85 = a3;
    uint64_t v24 = v17;
    int v25 = v23;
    uint64_t v26 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", &unk_1EFB015C8, &unk_1EFB016E8, 0);
    uint64_t v27 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", &unk_1EFB01700, &unk_1EFB015C8, 0);
    int v28 = (void *)[MEMORY[0x1E4F1CAD0] setWithArray:a9];
    if ([v28 isEqual:v26])
    {
      int v23 = 2;
    }
    else
    {
      if ([v28 isEqual:v27]) {
        int v25 = 4;
      }
      int v23 = v25;
    }
    uint64_t v17 = v24;
    a3 = v85;
  }
  BOOL v29 = *(unsigned char *)(a1 + 1980) != 0;
  if (a4)
  {
    BOOL v29 = *(unsigned __int8 *)(a1 + 1980) != 0;
    if (*(unsigned char *)(a1 + 1980))
    {
      if (*(_DWORD *)(a1 + 512) != 2)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2368));
        BOOL v29 = *(float *)(a1 + 2412) > 0.0;
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2368));
      }
    }
  }
  [v90 normalizedSNR];
  if (*(unsigned char *)(a1 + 2448)) {
    BOOL v31 = v30 < *(float *)(a1 + 2452);
  }
  else {
    BOOL v31 = 0;
  }
  if (a10) {
    uint64_t v32 = 0x4000;
  }
  else {
    uint64_t v32 = 0;
  }
  if (a4 == 1 && v29)
  {
    uint64_t v34 = 2;
    goto LABEL_46;
  }
  int v35 = a5 != 1 || v31;
  if (v35 != 1)
  {
    uint64_t v34 = 3;
    goto LABEL_46;
  }
  if (a11)
  {
    uint64_t v34 = 7;
    goto LABEL_46;
  }
  if (*(unsigned char *)(a1 + 68) || (unint64_t)[v17 frameCount] >= 4)
  {
    char v42 = objc_msgSend(*(id *)(a1 + 2296), "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    uint64_t v43 = objc_msgSend(v17, "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    if (v42)
    {
      long long v86 = (void *)v43;
    }
    else
    {
      char v42 = objc_msgSend(*(id *)(a1 + 2296), "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 496), "portType"));
      long long v86 = v90;
    }
    [v42 floatValue];
    float v54 = v53;
    int v80 = a8;
    if (a6 >= 2)
    {
      BOOL v55 = -[BWFigVideoCaptureDevice _isLowLightSceneUsingFrameStatisticsByPortType:](a1, v17);
      if (v82 || !v55 || !v29) {
        goto LABEL_120;
      }
      if (v84)
      {
        fvcd_estimateOISOutputImageSNR(v86);
      }
      else
      {
        [v86 normalizedSNR];
        float v56 = v66 + 4.7712;
      }
      if (v56 >= v54)
      {
LABEL_120:
        BOOL v29 = 0;
        if (v55)
        {
          int v87 = v84 ^ 1;
          BOOL v55 = 1;
LABEL_124:
          char v67 = a5 != 2 || v31;
          if (v67)
          {
            int v68 = 0;
          }
          else
          {
            id v93 = 0;
            -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:](a1, 0x1EFA5A500, (uint64_t)&v93);
            int v68 = [v93 BOOLValue];
          }
          char v69 = v83;
          if (v83)
          {
            uint64_t v70 = [a9 count];
            char v69 = 0;
            if (!v70 && v88 != a3)
            {
              objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "sensorIDDictionary"), "objectForKeyedSubscript:", @"StillImageStabilization"), "objectForKeyedSubscript:", @"NightModeMinGainThreshold"), "floatValue");
              if (v71 <= 0.0)
              {
                char v74 = [v90 aeLimitsReached];
              }
              else
              {
                float v72 = v71;
                [v90 gain];
                char v74 = v73 >= v72;
              }
              char v69 = v74 & (v87 ^ 1);
            }
          }
          BOOL v75 = v29 || v31;
          if (v29) {
            uint64_t v34 = 2;
          }
          else {
            uint64_t v34 = 8;
          }
          if (!v75)
          {
            if (v68)
            {
              char v69 = 1;
              uint64_t v34 = 3;
            }
            else
            {
              uint64_t v34 = 6;
            }
            if ((v69 & 1) == 0)
            {
              if (v55) {
                unsigned int v76 = 4;
              }
              else {
                unsigned int v76 = 1;
              }
              if (v87) {
                uint64_t v34 = v76;
              }
              else {
                uint64_t v34 = 5;
              }
            }
          }
          int v77 = v91 ^ 1;
          if (v88 != a3) {
            int v77 = 1;
          }
          if (v68) {
            int v78 = v77;
          }
          else {
            int v78 = 1;
          }
          if (v55) {
            LODWORD(v79) = 4;
          }
          else {
            LODWORD(v79) = v34;
          }
          if (v84) {
            uint64_t v79 = 5;
          }
          else {
            uint64_t v79 = v79;
          }
          a8 = v80;
          if (v78 != 1) {
            uint64_t v34 = v79;
          }
LABEL_46:
          if (a8
            && (!*(unsigned char *)(a1 + 1489) || [(id)a1 shallowDepthOfFieldEffectStatus] == 1))
          {
            if (*(void *)(a1 + 568))
            {
              int v23 = 2;
            }
            else if (*(void *)(a1 + 1456))
            {
              int v23 = 3;
            }
            uint64_t v36 = 2048;
            if ((v91 & (v34 == 3)) != 0) {
              uint64_t v36 = 133120;
            }
            v32 |= v36;
            if (!v91) {
              goto LABEL_97;
            }
          }
          else if (!v91)
          {
            goto LABEL_97;
          }
          if (!a7 || !*(unsigned char *)(a1 + 1404)) {
            goto LABEL_97;
          }
          char v37 = [*(id *)(a1 + 1312) telephotoLimitsReachedForFrameStatisticsByPortType:v17];
          if (v88 == a3)
          {
            BOOL v41 = 0;
          }
          else
          {
            [(id)a1 zoomFactor];
            float v39 = v38;
            [*(id *)(a1 + 568) baseZoomFactor];
            BOOL v41 = v39 >= v40;
          }
          if ((v34 - 1) > 4) {
            goto LABEL_97;
          }
          char v44 = v41 | v37;
          if (a7 != 2) {
            char v44 = 1;
          }
          if (a7 != 1 && (v44 & 1) != 0) {
            goto LABEL_97;
          }
          [(id)a1 zoomFactor];
          float v47 = v46;
          if (v88 == a3)
          {
            [*(id *)(a1 + 568) baseZoomFactor];
            if (v47 < v48)
            {
              [*(id *)(a1 + 568) baseZoomFactor];
              float v47 = v49;
            }
          }
          float v50 = *(float *)(a1 + 1364);
          if ((v34 - 1) > 2)
          {
            int v57 = -[BWFigVideoCaptureDevice _bravoCameraForOISOrSISCaptureType:stereoFusionMode:frameStatisticsByPortType:zoomFactor:stereoFusionLowerBoundZoomFactor:stereoFusionUpperBoundZoomFactor:](a1, v47, *(float *)(a1 + 1364), *(float *)(a1 + 1368), v45, a7, v17);
            if (v57 == 2)
            {
LABEL_90:
              int v23 = 2;
              uint64_t v58 = 1024;
LABEL_96:
              v32 |= v58;
LABEL_97:
              if (v23 == 1)
              {
                int v60 = [*(id *)(a1 + 568) hasSphere];
                if (v34 == 5) {
                  int v61 = v60;
                }
                else {
                  int v61 = 1;
                }
                if (v61) {
                  uint64_t v34 = v34;
                }
                else {
                  uint64_t v34 = 4;
                }
              }
              if ((a12 & 1) == 0)
              {
                if (*(unsigned char *)(a1 + 3144))
                {
                  -[BWFigVideoCaptureDevice _updateCurrentStillSmartCameraState](a1);
                  if (v34 == 5)
                  {
                    if (-[BWFigVideoCaptureDevice _currentSceneAllowsMotionFreezing:](a1, 0)
                      && ([(id)a1 zoomFactor], v62 <= 2.5))
                    {
                      id v93 = 0;
                      __int16 v94 = &v93;
                      uint64_t v95 = 0x2020000000;
                      char v96 = 0;
                      char v63 = dispatch_semaphore_create(0);
                      uint64_t v64 = *(void **)(a1 + 3112);
                      v92[0] = MEMORY[0x1E4F143A8];
                      v92[1] = 3221225472;
                      v92[2] = __301__BWFigVideoCaptureDevice__resolveStillImageCaptureTypeFromStatisticsByPortType_masterCaptureStream_flashMode_hdrMode_qualityPrioritization_stereoFusionMode_depthDataDeliveryEnabled_bravoConstituentImageDeliveryDeviceTypes_burstQualityCaptureEnabled_clientBracketMode_forSceneMonitoring_captureFlags___block_invoke;
                      v92[3] = &unk_1E5C2BAB0;
                      v92[4] = v63;
                      v92[5] = &v93;
                      [v64 detectMotionOnStoredFramesWithSmartCameraDiagnostics:0 completionHandler:v92];
                      dispatch_semaphore_wait(v63, 0xFFFFFFFFFFFFFFFFLL);

                      if (*((unsigned char *)v94 + 24)) {
                        uint64_t v34 = 4;
                      }
                      else {
                        uint64_t v34 = 5;
                      }
                      _Block_object_dispose(&v93, 8);
                    }
                    else
                    {
                      uint64_t v34 = 5;
                    }
                  }
                }
              }
              goto LABEL_114;
            }
            int v23 = v57;
          }
          else
          {
            [*(id *)(a1 + 568) baseZoomFactor];
            if (v47 < v51 && v47 >= v50) {
              goto LABEL_90;
            }
          }
          uint64_t v58 = 0;
          goto LABEL_96;
        }
        int v84 = 0;
      }
      else
      {
        int v84 = 0;
        BOOL v29 = 1;
      }
LABEL_123:
      int v87 = 1;
      goto LABEL_124;
    }
    if (v82)
    {
      BOOL v29 = 0;
    }
    else if (v29)
    {
      [v86 normalizedSNR];
      int v84 = 0;
      BOOL v55 = 0;
      BOOL v29 = v59 < v54;
      goto LABEL_123;
    }
    int v84 = 0;
    BOOL v55 = 0;
    goto LABEL_123;
  }
  uint64_t v34 = 1;
LABEL_114:
  if (a13) {
    *a13 = v32;
  }
  return v34;
}

- (id)_clientBracketSettingsWithSettings:(void *)a3 frameStatisticsByPortType:
{
  if (!a1 || ![a2 bracketType]) {
    return 0;
  }
  id v6 = +[BWBracketSettings bracketSettingsForBracketingMode:4];
  objc_msgSend(v6, "setLensStabilizationEnabledForClientBracket:", objc_msgSend(a2, "lensStabilizationDuringBracketEnabled"));
  uint64_t v7 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1[62], "portType"));
  if ([a2 bracketType] == 2)
  {
    objc_msgSend(v6, "setExposureValues:", -[BWFigVideoCaptureDevice _autoExposureBracketValuesForSettings:frameStatistics:](a1, a2, v7));
  }
  else if ([a2 bracketType] == 1)
  {
    objc_msgSend(v6, "setManualExposureBracketedCaptureParams:", -[BWFigVideoCaptureDevice _manualExposureBracketParametersForSettings:frameStatistics:use8dot8FixedPointGain:](a1, a2, v7, 1));
  }
  return v6;
}

- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(void *)a6 bravoConstituentImageDeliveryDeviceTypes:(BWStillImageCaptureSettings *)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(long long *)a9 userInitiatedRequestPTS:(uint64_t)a10 frameStatisticsByPortType:
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v16 = (uint64_t)result;
    int v17 = [(BWStillImageCaptureSettings *)result isBravoVariant];
    uint64_t v18 = *(void *)(v16 + 1456);
    uint64_t v122 = [*(id *)(v16 + 576) portType];
    uint64_t v116 = [*(id *)(v16 + 576) sensorIDString];
    uint64_t v117 = [*(id *)(v16 + 496) portType];
    uint64_t v118 = [*(id *)(v16 + 496) sensorIDString];
    uint64_t v123 = [*(id *)(v16 + 568) portType];
    uint64_t v119 = [*(id *)(v16 + 568) sensorIDString];
    uint64_t v120 = [*(id *)(v16 + 1456) portType];
    uint64_t v121 = [*(id *)(v16 + 1456) sensorIDString];
    id obj = (id)[MEMORY[0x1E4F1CA48] array];
    uint64_t v21 = *(void **)(v16 + 1288);
    if (!v21) {
      uint64_t v21 = *(void **)(v16 + 496);
    }
    unsigned int v130 = a3;
    unsigned int v131 = a4;
    uint64_t v129 = a2;
    char v128 = a5;
    if (v17)
    {
      char v125 = v17;
      CGFloat v126 = a7;
      BOOL v22 = (void *)[MEMORY[0x1E4F1CA48] array];
      int v23 = v22;
      uint64_t v24 = a8;
      if ((a8 & 0xC00) != 0)
      {
        if (*(void *)(v16 + 568) || *(void *)(v16 + 576)) {
          objc_msgSend(v22, "addObject:");
        }
      }
      else if ([a6 count])
      {
        uint64_t v27 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v16, a6);
        long long v142 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        int v28 = *(void **)(v16 + 552);
        uint64_t v29 = [v28 countByEnumeratingWithState:&v142 objects:v159 count:16];
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)v143;
          do
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              if (*(void *)v143 != v31) {
                objc_enumerationMutation(v28);
              }
              unint64_t v33 = *(void **)(*((void *)&v142 + 1) + 8 * i);
              if (v33 != v21) {
                [v23 addObject:*(void *)(*((void *)&v142 + 1) + 8 * i)];
              }
              if (([v27 containsObject:v33] & 1) == 0) {
                objc_msgSend(obj, "addObject:", objc_msgSend(v33, "portType"));
              }
            }
            uint64_t v30 = [v28 countByEnumeratingWithState:&v142 objects:v159 count:16];
          }
          while (v30);
        }
      }
      if ([v23 count])
      {
        uint64_t v34 = *(void *)(v16 + 576);
        BOOL v25 = v34 == 0;
        int v35 = 4 * (v34 != 0);
        if (v25) {
          int v36 = 2;
        }
        else {
          int v36 = 6;
        }
        if (*(void *)(v16 + 568)) {
          unsigned int v26 = v36;
        }
        else {
          unsigned int v26 = v35;
        }
        a8 = v24;
        a3 = v130;
        a4 = v131;
        a2 = v129;
        a5 = v128;
        a7 = v126;
        LOBYTE(v17) = v125;
      }
      else
      {
        a8 = v24;
        a3 = v130;
        a2 = v129;
        a5 = v128;
        a7 = v126;
        LOBYTE(v17) = v125;
        if (objc_msgSend((id)objc_msgSend(*(id *)(v16 + 1288), "portType"), "isEqualToString:", v123))
        {
          unsigned int v26 = 1;
        }
        else if (objc_msgSend((id)objc_msgSend(*(id *)(v16 + 1288), "portType"), "isEqualToString:", v122))
        {
          unsigned int v26 = 5;
        }
        else
        {
          unsigned int v26 = 0;
        }
        a4 = v131;
      }
    }
    else
    {
      if (v18) {
        BOOL v25 = (a8 & 0x800) == 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = 3;
      }
    }
    if (*(unsigned char *)(v16 + 3204))
    {
      long long v140 = *a9;
      uint64_t v141 = *((void *)a9 + 2);
      char v37 = -[BWFigVideoCaptureDevice _zeroShutterLagStillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:captureStreams:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)v16, a2, a3, a4, a5, v19, v20, a8, (uint64_t)&v140, v26, a10);
      if (v37)
      {
        float v38 = v37;
        return v38;
      }
    }
    float v38 = 0;
    int v39 = 0;
    char v40 = v17;
    unsigned int v127 = 0;
    int v41 = 0;
    unint64_t v42 = a8;
    unint64_t v43 = a8;
    char v44 = 0;
    uint64_t v45 = 0;
    float v46 = 0;
    id v47 = 0;
    uint64_t v48 = 0;
    unint64_t v124 = 0;
    switch((int)a3)
    {
      case 0:
      case 10:
        return v38;
      case 1:
        int v39 = 1;
        goto LABEL_46;
      case 2:
LABEL_46:
        int v49 = 0;
        unint64_t v124 = __PAIR64__(a3, v39);
        unsigned int v127 = v26;
        int v50 = a3;
        int v41 = v26;
        int v39 = v26;
        char v51 = v40;
        switch(v26)
        {
          case 0u:
            goto LABEL_75;
          case 1u:
            HIDWORD(v124) = 0;
            int v49 = 0;
            goto LABEL_73;
          case 2u:
            goto LABEL_73;
          case 3u:
            int v41 = 0;
            int v39 = 0;
            HIDWORD(v124) = a3;
            unsigned int v127 = a3;
            goto LABEL_75;
          case 4u:
            break;
          case 5u:
            int v49 = a3;
            goto LABEL_71;
          case 6u:
            HIDWORD(v124) = a3;
            int v49 = a3;
LABEL_73:
            int v50 = v49;
            int v49 = a3;
            break;
          default:
            char v51 = v40;
LABEL_71:
            HIDWORD(v124) = 0;
            int v50 = v49;
            int v49 = 0;
            break;
        }
        unsigned int v127 = 0;
        int v41 = v49;
        int v39 = v50;
LABEL_75:
        char v57 = v51 ^ 1;
        if ((a8 & 0x800) == 0) {
          char v57 = 1;
        }
        if (v57) {
          goto LABEL_81;
        }
        int v58 = v41;
        int v59 = v39;
        if ([a6 count])
        {
          float v38 = 0;
          char v44 = 0;
          uint64_t v45 = 0;
          float v46 = 0;
          id v47 = 0;
          uint64_t v48 = 0;
          unint64_t v42 = a8;
          unint64_t v43 = a8;
          int v39 = v59;
          int v41 = v58;
          goto LABEL_130;
        }
        int v39 = v59;
        int v41 = v58;
        if (*(unsigned char *)(v16 + 3640)) {
          goto LABEL_81;
        }
        if (v26 == 4)
        {
          float v38 = 0;
          char v44 = 0;
          uint64_t v45 = 0;
          float v46 = 0;
          id v47 = 0;
          uint64_t v48 = 0;
          unint64_t v42 = a8 & 0xFFFFFFFFFFFEFFFFLL;
          goto LABEL_129;
        }
        if (v26 != 2)
        {
LABEL_81:
          float v38 = 0;
          char v44 = 0;
          uint64_t v45 = 0;
          float v46 = 0;
          id v47 = 0;
          uint64_t v48 = 0;
          goto LABEL_128;
        }
        float v38 = 0;
        char v44 = 0;
        uint64_t v45 = 0;
        float v46 = 0;
        id v47 = 0;
        uint64_t v48 = 0;
        unint64_t v43 = a8 & 0xFFFFFFFFFFFEFFFFLL;
        unint64_t v42 = a8;
        goto LABEL_130;
      case 3:
        BOOL v52 = (a4 & 1) != 0 || *(unsigned char *)(v16 + 2469) || *(unsigned char *)(v16 + 2468) != 0;
        if (*(unsigned char *)(v16 + 2468)) {
          float v53 = &unk_1EFB04310;
        }
        else {
          float v53 = &unk_1EFB04328;
        }
        switch(v26)
        {
          case 0u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:v53];
            int v39 = 0;
            int v41 = 0;
            unsigned int v127 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            int v54 = 3;
            goto LABEL_66;
          case 1u:
            long long v65 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v65 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v65 setExposureValues:v53];
            uint64_t v45 = v65;
            int v39 = 0;
            unint64_t v124 = 0;
            unsigned int v127 = 0;
            float v38 = 0;
            char v44 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            int v41 = 3;
            goto LABEL_128;
          case 2u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:v53];
            float v66 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v66 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v66 setExposureValues:v53];
            if ([v53 containsObject:&unk_1EFB01610]) {
              uint64_t v67 = [v53 indexOfObject:&unk_1EFB01610] + 1;
            }
            else {
              uint64_t v67 = 2;
            }
            if ((a8 & 0x400) != 0)
            {
              v158[0] = &unk_1EFB01610;
              v158[1] = [NSNumber numberWithInt:v67];
              uint64_t v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:v158 count:2];
              int v39 = 0;
              unsigned int v127 = 0;
              float v38 = 0;
              float v46 = 0;
              id v47 = 0;
            }
            else
            {
              if ((a8 & 0x800) != 0)
              {
                v157[0] = &unk_1EFB01610;
                v157[1] = [NSNumber numberWithInt:v67];
                id v47 = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v157 count:2];
                int v39 = 0;
                unsigned int v127 = 0;
                float v38 = 0;
                float v46 = 0;
              }
              else
              {
                int v39 = 0;
                unsigned int v127 = 0;
                float v38 = 0;
                float v46 = 0;
                id v47 = 0;
              }
              uint64_t v48 = 0;
            }
            unint64_t v124 = 0x300000000;
            int v41 = 3;
            unint64_t v42 = a8;
            unint64_t v43 = a8;
            uint64_t v45 = v66;
            break;
          case 3u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:v53];
            int v68 = +[BWBracketSettings bracketSettingsForBracketingMode:1];
            [(BWStillImageCaptureSettings *)v68 setProvidePreBracketedEV0:v52];
            [(BWStillImageCaptureSettings *)v68 setExposureValues:&unk_1EFB04340];
            float v46 = v68;
            int v39 = 0;
            int v41 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            int v69 = 3;
            goto LABEL_98;
          default:
            goto LABEL_126;
        }
        goto LABEL_130;
      case 4:
        switch(v26)
        {
          case 0u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:1];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:&unk_1EFB04358];
            int v39 = 0;
            int v41 = 0;
            unsigned int v127 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            int v54 = 4;
            goto LABEL_66;
          case 1u:
            uint64_t v70 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v70 setProvidePreBracketedEV0:1];
            float v71 = &unk_1EFB04358;
            goto LABEL_114;
          case 2u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:1];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:&unk_1EFB04358];
            float v72 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v72 setProvidePreBracketedEV0:1];
            [(BWStillImageCaptureSettings *)v72 setExposureValues:&unk_1EFB04358];
            uint64_t v45 = v72;
            int v39 = 0;
            float v38 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x400000000;
            unsigned int v127 = 0;
            goto LABEL_115;
          case 3u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:1];
            [(BWStillImageCaptureSettings *)v44 setExposureValues:&unk_1EFB04358];
            float v73 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            [(BWStillImageCaptureSettings *)v73 setProvidePreBracketedEV0:1];
            [(BWStillImageCaptureSettings *)v73 setExposureValues:&unk_1EFB04358];
            float v46 = v73;
            int v39 = 0;
            int v41 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            int v69 = 4;
LABEL_98:
            HIDWORD(v124) = v69;
            unsigned int v127 = v69;
            break;
          default:
            goto LABEL_126;
        }
        goto LABEL_128;
      case 5:
        uint64_t v55 = *MEMORY[0x1E4F54448];
        uint64_t v155 = *MEMORY[0x1E4F54448];
        unint64_t v156 = &unk_1EFB04370;
        uint64_t v56 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v156 forKeys:&v155 count:1];
        switch(v26)
        {
          case 2u:
            if ((a8 & 0x400) != 0 || (uint64_t v60 = [a6 count], (a8 & 0x800) == 0) && v60)
            {
              int v61 = [*(id *)(v16 + 568) hasSphere];
              float v62 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
              if (!v61)
              {
                int v77 = v62;
                float v110 = v62;
                [(BWStillImageCaptureSettings *)v62 setProvidePreBracketedEV0:1];
                [(BWStillImageCaptureSettings *)v77 setOisBracketedCaptureParams:v56];
                if (*(unsigned char *)(v16 + 2469)) {
                  int v78 = 0;
                }
                else {
                  int v78 = &unk_1EFB04388;
                }
                uint64_t v153 = v55;
                float v154 = &unk_1EFB043A0;
                uint64_t v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v154 forKeys:&v153 count:1];
                int v80 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
                [(BWStillImageCaptureSettings *)v80 setProvidePreBracketedEV0:1];
                [(BWStillImageCaptureSettings *)v80 setOisBracketedCaptureParams:v79];
                id v47 = v78;
                uint64_t v45 = v80;
                int v39 = 0;
                float v38 = 0;
                float v46 = 0;
                uint64_t v48 = 0;
                unint64_t v124 = 0x500000000;
                int v41 = 4;
                unsigned int v127 = 0;
                unint64_t v42 = a8;
                unint64_t v43 = a8;
                char v44 = v110;
                goto LABEL_130;
              }
              char v44 = v62;
              [(BWStillImageCaptureSettings *)v62 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
              [(BWStillImageCaptureSettings *)v44 setOisBracketedCaptureParams:v56];
            }
            else
            {
              if ((a8 & 0x800) == 0) {
                goto LABEL_126;
              }
              if (![*(id *)(v16 + 568) hasSphere])
              {
                uint64_t v151 = v55;
                float v152 = &unk_1EFB043B8;
                uint64_t v100 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v152 forKeys:&v151 count:1];
                if (*(unsigned char *)(v16 + 2469)) {
                  float v101 = 0;
                }
                else {
                  float v101 = &unk_1EFB043D0;
                }
                uint64_t v135 = v101;
                uint64_t v102 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
                [(BWStillImageCaptureSettings *)v102 setProvidePreBracketedEV0:1];
                [(BWStillImageCaptureSettings *)v102 setOisBracketedCaptureParams:v100];
                uint64_t v149 = v55;
                int v150 = &unk_1EFB043E8;
                uint64_t v103 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v150 forKeys:&v149 count:1];
                float v104 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
                [(BWStillImageCaptureSettings *)v104 setProvidePreBracketedEV0:1];
                [(BWStillImageCaptureSettings *)v104 setOisBracketedCaptureParams:v103];
                id v47 = v135;
                uint64_t v45 = v104;
                int v39 = 0;
                float v38 = 0;
                float v46 = 0;
                uint64_t v48 = 0;
                unint64_t v124 = 0x500000000;
                int v41 = 4;
                unsigned int v127 = 0;
                unint64_t v42 = a8;
                unint64_t v43 = a8;
                char v44 = v102;
                goto LABEL_130;
              }
              char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
              [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
              [(BWStillImageCaptureSettings *)v44 setOisBracketedCaptureParams:v56];
            }
            char v63 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
            [(BWStillImageCaptureSettings *)v63 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
            [(BWStillImageCaptureSettings *)v63 setOisBracketedCaptureParams:v56];
            uint64_t v45 = v63;
            int v39 = 0;
            float v38 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x500000000;
            unsigned int v127 = 0;
            break;
          case 1u:
            if (![*(id *)(v16 + 568) hasSphere])
            {
              uint64_t v70 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
              [(BWStillImageCaptureSettings *)v70 setProvidePreBracketedEV0:1];
              float v71 = &unk_1EFB04400;
LABEL_114:
              [(BWStillImageCaptureSettings *)v70 setExposureValues:v71];
              uint64_t v45 = v70;
              int v39 = 0;
              unint64_t v124 = 0;
              unsigned int v127 = 0;
              float v38 = 0;
              char v44 = 0;
              float v46 = 0;
              id v47 = 0;
              uint64_t v48 = 0;
LABEL_115:
              int v41 = 4;
              goto LABEL_128;
            }
            uint64_t v64 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
            [(BWStillImageCaptureSettings *)v64 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
            [(BWStillImageCaptureSettings *)v64 setOisBracketedCaptureParams:v56];
            uint64_t v45 = v64;
            int v39 = 0;
            unint64_t v124 = 0;
            unsigned int v127 = 0;
            float v38 = 0;
            char v44 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            break;
          case 0u:
            char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
            [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
            [(BWStillImageCaptureSettings *)v44 setOisBracketedCaptureParams:v56];
            int v39 = 0;
            int v41 = 0;
            unsigned int v127 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            int v54 = 5;
LABEL_66:
            HIDWORD(v124) = v54;
LABEL_128:
            unint64_t v42 = a8;
LABEL_129:
            unint64_t v43 = a8;
LABEL_130:
            unint64_t v106 = v42;
            unint64_t v107 = v43;
            uint64_t v81 = v48;
            id v82 = v47;
            unsigned int v113 = v41;
            unsigned int v114 = v39;
            float v108 = v38;
            int v109 = v46;
            float v111 = v44;
            uint64_t v112 = v45;
            uint64_t v115 = a8;
            long long v138 = 0u;
            long long v139 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            uint64_t v83 = [obj countByEnumeratingWithState:&v136 objects:v146 count:16];
            if (v83)
            {
              uint64_t v84 = v83;
              unsigned int v85 = 0;
              uint64_t v134 = *(void *)v137;
              uint64_t v86 = *MEMORY[0x1E4F52DE8];
              uint64_t v87 = *MEMORY[0x1E4F52DD8];
              uint64_t v88 = *MEMORY[0x1E4F52DF0];
              long long v89 = (void *)MEMORY[0x1E4F1CBF0];
              do
              {
                for (uint64_t j = 0; j != v84; ++j)
                {
                  if (*(void *)v137 != v134) {
                    objc_enumerationMutation(obj);
                  }
                  int v91 = *(void **)(*((void *)&v136 + 1) + 8 * j);
                  if ([v91 isEqualToString:v86]) {
                    unsigned int v85 = v89;
                  }
                  if ([v91 isEqualToString:v87]) {
                    id v82 = v89;
                  }
                  if ([v91 isEqualToString:v88]) {
                    uint64_t v81 = (uint64_t)v89;
                  }
                }
                uint64_t v84 = [obj countByEnumeratingWithState:&v136 objects:v146 count:16];
              }
              while (v84);
            }
            else
            {
              unsigned int v85 = 0;
            }
            id v92 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            if (v114)
            {
              uint64_t v93 = v124;
              __int16 v94 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v122 captureType:v114 captureFlags:v106 timeMachineFrameCount:v124 bracketSettings:v108 validBracketedCaptureSequenceNumbers:v85];
              [(BWStillImageCaptureStreamSettings *)v94 setSensorIDString:v116];
              [v92 addObject:v94];
              uint64_t v95 = v127;
            }
            else
            {
              __int16 v94 = 0;
              uint64_t v95 = v127;
              uint64_t v93 = v124;
            }
            if (HIDWORD(v124))
            {
              char v96 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v117 captureType:HIDWORD(v124) captureFlags:v107 timeMachineFrameCount:v93 bracketSettings:v111 validBracketedCaptureSequenceNumbers:v82];
              [(BWStillImageCaptureStreamSettings *)v96 setSensorIDString:v118];
              [v92 addObject:v96];
            }
            else
            {
              char v96 = 0;
            }
            if (v113)
            {
              int v97 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v123 captureType:v113 captureFlags:v115 timeMachineFrameCount:v93 bracketSettings:v112 validBracketedCaptureSequenceNumbers:v81];
              [(BWStillImageCaptureStreamSettings *)v97 setSensorIDString:v119];
              [v92 addObject:v97];
              if (v95)
              {
LABEL_153:
                __int16 v98 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v120 captureType:v95 captureFlags:v115 timeMachineFrameCount:v93 bracketSettings:v109 validBracketedCaptureSequenceNumbers:0];
                [(BWStillImageCaptureStreamSettings *)v98 setSensorIDString:v121];
                [v92 addObject:v98];
LABEL_156:
                LOBYTE(v105) = v128;
                int v99 = [[BWStillImageCaptureSettings alloc] initWithSettingsID:v129 captureType:v130 captureFlags:v115 sceneFlags:0 frameStatisticsByPortType:a10 deliverOriginalImage:v131 deliverSushiRaw:v105 captureStreamSettings:v92];
                [(BWStillImageCaptureSettings *)v99 setMetadata:objc_alloc_init(BWStillImageCaptureMetadata)];

                float v38 = v99;
                return v38;
              }
            }
            else
            {
              int v97 = 0;
              if (v95) {
                goto LABEL_153;
              }
            }
            __int16 v98 = 0;
            goto LABEL_156;
          default:
LABEL_126:
            int v39 = 0;
            HIDWORD(v124) = 0;
            unsigned int v127 = 0;
            int v41 = 0;
            float v38 = 0;
LABEL_127:
            char v44 = 0;
            uint64_t v45 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            LODWORD(v124) = 0;
            goto LABEL_128;
        }
        int v41 = 5;
        goto LABEL_128;
      case 6:
        char v44 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
        [(BWStillImageCaptureSettings *)v44 setProvidePreBracketedEV0:*(unsigned __int8 *)(v16 + 2469)];
        uint64_t v147 = *MEMORY[0x1E4F54448];
        float v148 = &unk_1EFB04418;
        -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v44, "setOisBracketedCaptureParams:", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v148 forKeys:&v147 count:1]);
        int v39 = 0;
        int v41 = 0;
        float v38 = 0;
        uint64_t v45 = 0;
        float v46 = 0;
        uint64_t v48 = 0;
        unint64_t v124 = 0x600000000;
        unsigned int v127 = 0;
        unint64_t v42 = a8;
        unint64_t v43 = a8;
        id v47 = &unk_1EFB04430;
        goto LABEL_130;
      case 7:
        int v39 = 0;
        float v38 = 0;
        int v41 = 7;
        unsigned int v127 = 0;
        unint64_t v42 = a8;
        unint64_t v43 = a8;
        char v44 = 0;
        uint64_t v45 = a7;
        float v46 = 0;
        id v47 = 0;
        uint64_t v48 = 0;
        unint64_t v124 = 0;
        switch(v26)
        {
          case 0u:
            int v39 = 0;
            int v41 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x700000000;
            unsigned int v127 = 0;
            unint64_t v42 = a8;
            unint64_t v43 = a8;
            goto LABEL_112;
          case 1u:
            goto LABEL_130;
          case 2u:
            int v39 = 0;
            float v38 = 0;
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x700000000;
            unsigned int v127 = 0;
            unint64_t v42 = a8;
            unint64_t v43 = a8;
            char v44 = a7;
            uint64_t v45 = a7;
            goto LABEL_130;
          case 3u:
            [(BWStillImageCaptureSettings *)a7 setProvidePreBracketedEV0:1];
            char v74 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", (int)-[BWStillImageCaptureSettings bracketFrameCount](a7, "bracketFrameCount"));
            BOOL v75 = a7;
            if ((int)[(BWStillImageCaptureSettings *)a7 bracketFrameCount] >= 1)
            {
              LODWORD(v76) = 0;
              do
              {
                uint64_t v76 = (v76 + 1);
                objc_msgSend(v74, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v76));
              }
              while ((int)v76 < (int)[(BWStillImageCaptureSettings *)v75 bracketFrameCount]);
            }
            id v47 = (id)[v74 copy];
            int v39 = 0;
            int v41 = 0;
            float v38 = 0;
            uint64_t v45 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x700000000;
            unsigned int v127 = 7;
            unint64_t v42 = a8;
            unint64_t v43 = a8;
            char v44 = v75;
            float v46 = v75;
            goto LABEL_130;
          case 4u:
            goto LABEL_111;
          case 5u:
            int v39 = 7;
            float v38 = a7;
            goto LABEL_109;
          case 6u:
            int v39 = 7;
            float v38 = a7;
LABEL_111:
            float v46 = 0;
            id v47 = 0;
            uint64_t v48 = 0;
            unint64_t v124 = 0x700000000;
            uint64_t v45 = v38;
            int v41 = v39;
            int v39 = 7;
            unsigned int v127 = 0;
            unint64_t v42 = a8;
            unint64_t v43 = a8;
            float v38 = a7;
LABEL_112:
            char v44 = a7;
            goto LABEL_130;
          default:
LABEL_109:
            HIDWORD(v124) = 0;
            unsigned int v127 = 0;
            int v41 = 0;
            goto LABEL_127;
        }
      case 8:
        int v39 = 0;
        int v41 = 0;
        unsigned int v127 = 0;
        float v38 = 0;
        char v44 = 0;
        uint64_t v45 = 0;
        float v46 = 0;
        id v47 = 0;
        uint64_t v48 = 0;
        LODWORD(v124) = 0;
        int v54 = 8;
        goto LABEL_66;
      case 9:
        goto LABEL_130;
      default:
        unsigned int v127 = 0;
        int v41 = 0;
        unint64_t v42 = a8;
        unint64_t v43 = a8;
        char v44 = 0;
        uint64_t v45 = 0;
        float v46 = 0;
        id v47 = 0;
        uint64_t v48 = 0;
        unint64_t v124 = 0;
        goto LABEL_130;
    }
  }
  return result;
}

- (void)_captureStreamsForBravoConstituentImageDeliveryDeviceTypes:(uint64_t)a1
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  double v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = [a2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    uint64_t v8 = *MEMORY[0x1E4F52DD8];
    uint64_t v9 = *MEMORY[0x1E4F52DF0];
    uint64_t v10 = *MEMORY[0x1E4F52DE8];
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(a2);
        }
        int v12 = [*(id *)(*((void *)&v16 + 1) + 8 * v11) intValue];
        uint64_t v13 = v8;
        if (v12 != 2)
        {
          if (v12 == 7)
          {
            uint64_t v13 = v10;
          }
          else
          {
            uint64_t v13 = v9;
            if (v12 != 3) {
              goto LABEL_14;
            }
          }
        }
        int v14 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, v13);
        if (v14) {
          [v4 addObject:v14];
        }
LABEL_14:
        ++v11;
      }
      while (v6 != v11);
      uint64_t v6 = [a2 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
  return v4;
}

- (BWStillImageCaptureSettings)_zeroShutterLagStillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(uint64_t)a6 bravoConstituentImageDeliveryDeviceTypes:(uint64_t)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(uint64_t)a9 userInitiatedRequestPTS:(unsigned int)a10 captureStreams:(uint64_t)a11 frameStatisticsByPortType:
{
  v56[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v12 = (uint64_t)result;
    uint64_t v13 = a10;
    if ((a3 & 0xFFFFFFFE) != 4 && a3 != 1 || (a10 & 0xFFFFFFFE) == 2) {
      goto LABEL_39;
    }
    uint64_t v20 = [(NSString *)result[2]._applicationID portType];
    uint64_t v21 = [*(id *)(v12 + 568) portType];
    CMTime v53 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    int v22 = [*(id *)(v12 + 568) hasSphere];
    uint64_t v23 = a3;
    if (a3 != 1)
    {
      if (a3 == 4)
      {
        if (a10 > 1) {
          goto LABEL_39;
        }
        uint64_t v23 = 4;
      }
      else
      {
        if (a3 != 5) {
          goto LABEL_39;
        }
        if (a10)
        {
          if (a10 != 1) {
            goto LABEL_39;
          }
          if (v22) {
            uint64_t v23 = 3;
          }
          else {
            uint64_t v23 = 4;
          }
        }
        else
        {
          uint64_t v23 = 2;
        }
      }
    }
    char v44 = a5;
    unsigned int v52 = 0;
    v51[0] = 0;
    v51[1] = 0;
    uint64_t v24 = *(void **)(v12 + 3248);
    if (v24)
    {
      uint64_t v25 = [v24 count];
      if (a3 != 1 || v25 == *(_DWORD *)(v12 + 3212))
      {
        CFArrayRef v28 = *(const __CFArray **)(v12 + 3248);
        *(_OWORD *)&v50.CMTimeValue value = *(_OWORD *)a9;
        v50.CMTimeEpoch epoch = *(void *)(a9 + 16);
        if (-[BWFigVideoCaptureDevice _tryZeroShutterLagReferenceFrameSelectionWithZeroShutterLagPTS:captureType:captureFlags:framesMetadata:frameCount:referenceFrameBracketedCaptureSequenceNumberOut:preferredPTSOut:selectedFramesRangeOut:](v12, &v50, v26, v27, v28, v23, &v52, &v53, v51))a8 |= 0x2000uLL; {
      }
        }
      else
      {
        a8 |= 0x2000uLL;
      }
      uint64_t v29 = +[BWAggdDataReporter sharedInstance];
      if ((a8 & 0x2000) != 0) {
        [(BWAggdDataReporter *)v29 reportZeroShutterLagSuccess];
      }
      else {
        [(BWAggdDataReporter *)v29 reportZeroShutterLagReferenceFrameSelectionFailureForCaptureType:a3];
      }
    }
    if (a3 == 1 && (a8 & 0x2000) == 0)
    {
      a8 |= 0x2000uLL;
      if (*(void *)(v12 + 3248))
      {
        *(_OWORD *)&v53.CMTimeValue value = *(_OWORD *)a9;
        v53.CMTimeEpoch epoch = *(void *)(a9 + 16);
      }
    }
    if ((a8 & 0x2000) != 0)
    {
      if (a3 == 5)
      {
        uint64_t v55 = *MEMORY[0x1E4F54448];
        v56[0] = &unk_1EFB04448;
        uint64_t v32 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v56 forKeys:&v55 count:1];
        uint64_t v43 = a2;
        if (a10 != 1)
        {
          if (!a10)
          {
            id v30 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
            [v30 setProvidePreBracketedEV0:*(unsigned __int8 *)(v12 + 2469)];
            [v30 setOisBracketedCaptureParams:v32];
            goto LABEL_46;
          }
LABEL_47:
          id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          uint64_t v34 = 0;
          goto LABEL_48;
        }
        if ([*(id *)(v12 + 568) hasSphere])
        {
          id v30 = +[BWBracketSettings bracketSettingsForBracketingMode:3];
          [v30 setProvidePreBracketedEV0:*(unsigned __int8 *)(v12 + 2469)];
          [v30 setOisBracketedCaptureParams:v32];
          uint64_t v13 = 5;
          goto LABEL_52;
        }
      }
      else
      {
        if (a3 != 4)
        {
          uint64_t v43 = a2;
          id v30 = 0;
          if (a10)
          {
            if (a10 != 1) {
              goto LABEL_47;
            }
LABEL_52:
            id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            int v35 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v21 captureType:v13 captureFlags:a8 timeMachineFrameCount:v23 bracketSettings:v30 validBracketedCaptureSequenceNumbers:0];
            [v33 addObject:v35];
            uint64_t v34 = 0;
LABEL_53:
            LOBYTE(v42) = v44;
            uint64_t v31 = [[BWStillImageCaptureSettings alloc] initWithSettingsID:v43 captureType:a3 captureFlags:a8 sceneFlags:0 frameStatisticsByPortType:a11 deliverOriginalImage:a4 deliverSushiRaw:v42 captureStreamSettings:v33];
            [(BWStillImageCaptureSettings *)v31 setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:v52];
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            uint64_t v36 = [v33 countByEnumeratingWithState:&v46 objects:v54 count:16];
            if (v36)
            {
              uint64_t v37 = v36;
              uint64_t v38 = *(void *)v47;
              do
              {
                for (uint64_t i = 0; i != v37; ++i)
                {
                  if (*(void *)v47 != v38) {
                    objc_enumerationMutation(v33);
                  }
                  char v40 = *(void **)(*((void *)&v46 + 1) + 8 * i);
                  CMTime v45 = v53;
                  [v40 setPreferredTimeMachinePTS:&v45];
                }
                uint64_t v37 = [v33 countByEnumeratingWithState:&v46 objects:v54 count:16];
              }
              while (v37);
            }
            [(BWStillImageCaptureSettings *)v31 setMetadata:objc_alloc_init(BWStillImageCaptureMetadata)];

            if (v31) {
              return v31;
            }
            goto LABEL_61;
          }
LABEL_46:
          id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          uint64_t v34 = [[BWStillImageCaptureStreamSettings alloc] initWithPortType:v20 captureType:a3 captureFlags:a8 timeMachineFrameCount:v23 bracketSettings:v30 validBracketedCaptureSequenceNumbers:0];
          [v33 addObject:v34];
LABEL_48:
          int v35 = 0;
          goto LABEL_53;
        }
        uint64_t v43 = a2;
        if (a10 != 1)
        {
          if (!a10)
          {
            id v30 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      id v30 = +[BWBracketSettings bracketSettingsForBracketingMode:2];
      uint64_t v13 = 4;
      goto LABEL_52;
    }
LABEL_39:
    uint64_t v31 = 0;
LABEL_61:
    if (*(void *)(v12 + 3248))
    {
      if (*(unsigned char *)(v12 + 3204))
      {
        [*(id *)(v12 + 3112) resume];
        int v41 = (void *)[*(id *)(v12 + 496) stream];
        [v41 sendCommandProperty:*MEMORY[0x1E4F54C40]];
      }
    }
    return v31;
  }
  return result;
}

- (uint64_t)_tryZeroShutterLagReferenceFrameSelectionWithZeroShutterLagPTS:(uint64_t)a3 captureType:(uint64_t)a4 captureFlags:(const __CFArray *)a5 framesMetadata:(int)a6 frameCount:(_DWORD *)a7 referenceFrameBracketedCaptureSequenceNumberOut:(CMTime *)a8 preferredPTSOut:(void *)a9 selectedFramesRangeOut:
{
  if (result)
  {
    uint64_t v13 = result;
    int v21 = -1;
    unsigned int v20 = -1;
    CMTime v19 = *a2;
    int v14 = FigCapturePTSBasedReferenceFrameSelection(0, a5, &v19, a6, &v21, (int *)&v20);
    uint64_t result = 0;
    if (!v14)
    {
      unint64_t v15 = v20;
      if ((v20 & 0x80000000) == 0)
      {
        if ([(__CFArray *)a5 count] <= v15)
        {
          return 0;
        }
        else
        {
          long long v16 = (void *)[*(id *)(v13 + 3248) objectAtIndexedSubscript:a6 + v21 - 1];
          uint64_t result = [v16 objectForKeyedSubscript:*MEMORY[0x1E4F530C0]];
          if (result)
          {
            memset(&v18, 0, sizeof(v18));
            CMTimeMakeFromDictionary(&v18, (CFDictionaryRef)result);
            uint64_t v17 = v21;
            if (a7) {
              *a7 = v20 - v21 + 1;
            }
            if (a8) {
              *a8 = v18;
            }
            if (a9)
            {
              *a9 = v17;
              a9[1] = a6;
            }
            return 1;
          }
        }
      }
    }
  }
  return result;
}

- (uint64_t)_resumeTimeMachines
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 3204))
    {
      [*(id *)(result + 3112) resume];
      uint64_t v2 = (void *)[*(id *)(v1 + 496) stream];
      uint64_t v3 = *MEMORY[0x1E4F54C40];
      return [v2 sendCommandProperty:v3];
    }
  }
  return result;
}

- (BOOL)_validateTimeMachineFramesUsingPreviewFramesMetadata:(uint64_t)a1
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (*(void *)(a1 + 3064))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v4 = [(__CFArray *)theArray countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v17;
      uint64_t v7 = *MEMORY[0x1E4F54280];
      uint64_t v8 = *MEMORY[0x1E4F54E90];
LABEL_5:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(theArray);
        }
        uint64_t v10 = (void *)[*(id *)(*((void *)&v16 + 1) + 8 * v9) objectForKeyedSubscript:v7];
        if (v10)
        {
          if (![v10 isEqualToString:v8]) {
            break;
          }
        }
        if (v5 == ++v9)
        {
          uint64_t v5 = [(__CFArray *)theArray countByEnumeratingWithState:&v16 objects:v20 count:16];
          if (v5) {
            goto LABEL_5;
          }
          goto LABEL_14;
        }
      }
      if ([*(id *)(a1 + 3064) isStationary]) {
        goto LABEL_14;
      }
      [+[BWAggdDataReporter sharedInstance] reportZeroShutterLagSphereInitFailure];
      return 0;
    }
  }
LABEL_14:
  unsigned int v15 = 0;
  IsUsableForPTSBasedReferenceFrameSelectiouint64_t n = FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(theArray, (int *)&v15);
  BOOL v12 = IsUsableForPTSBasedReferenceFrameSelection == 0;
  if (IsUsableForPTSBasedReferenceFrameSelection)
  {
    uint64_t v13 = +[BWAggdDataReporter sharedInstance];
    [(BWAggdDataReporter *)v13 reportZeroShutterLagMetadataInitFailureWithReasons:v15];
  }
  return v12;
}

- (uint64_t)_suspendTimeMachineWithCompletionHandler:(uint64_t)result
{
  if (result)
  {
    uint64_t v4 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v14 = v2;
      LODWORD(v13) = 0;
      FigDebugAssert3();
    }
    uint64_t v5 = objc_msgSend(*(id *)(v4 + 496), "stream", v13, v14);
    int v18 = [v5 sendCommandProperty:*MEMORY[0x1E4F54C48]];
    if (v18) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void **)(v4 + 1288);
    if (!v6) {
      uint64_t v6 = *(void **)(v4 + 496);
    }
    uint64_t v7 = (void *)[v6 stream];
    CFDictionaryRef v8 = (const __CFDictionary *)[v7 getProperty:*MEMORY[0x1E4F54C38] error:&v18];
    if (v18)
    {
LABEL_14:
      uint64_t result = FigDebugAssert3();
    }
    else
    {
      memset(&v17, 0, sizeof(v17));
      CMTimeRangeMakeFromDictionary(&v17, v8);
      uint64_t v9 = *(void **)(v4 + 3112);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke;
      v16[3] = &unk_1E5C2B6B0;
      v16[4] = v4;
      v16[5] = a2;
      CMTimeRange v15 = v17;
      uint64_t result = [v9 suspendWithPTSRange:&v15 completionHandler:v16];
    }
    if (v18)
    {
      if (*(unsigned char *)(v4 + 3204))
      {
        [*(id *)(v4 + 3112) resume];
        uint64_t v10 = (void *)[*(id *)(v4 + 496) stream];
        [v10 sendCommandProperty:*MEMORY[0x1E4F54C40]];
      }
      uint64_t v11 = *(void (**)(uint64_t, void, void, void, CMTimeRange *))(a2 + 16);
      long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *(_OWORD *)&v15.start.CMTimeValue value = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)&v15.start.CMTimeEpoch epoch = v12;
      *(_OWORD *)&v15.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      v11(a2, 0, 0, 0, &v15);
      return [+[BWAggdDataReporter sharedInstance] reportZeroShutterLagFirmwareTimeMachineInitFailure];
    }
  }
  return result;
}

void __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke(uint64_t a1, char a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 2472);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  long long v6 = a5[1];
  long long v9 = *a5;
  void v8[2] = __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke_2;
  v8[3] = &unk_1E5C2B688;
  uint64_t v7 = *(void *)(a1 + 40);
  v8[5] = a4;
  v8[6] = v7;
  char v12 = a2;
  v8[4] = a3;
  long long v10 = v6;
  long long v11 = a5[2];
  dispatch_async(v5, v8);
}

uint64_t __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(v2 + 16);
  long long v6 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v6;
  void v8[2] = *(_OWORD *)(a1 + 88);
  return v5(v2, v3, v4, v1, v8);
}

- (uint64_t)_initiateCaptureStillImageNowWithPTS:(uint64_t)a3 completionHandler:
{
  if (result)
  {
    uint64_t v4 = result;
    if (!_FigIsCurrentDispatchQueue()) {
      FigDebugAssert3();
    }
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __82__BWFigVideoCaptureDevice__initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke;
    v5[3] = &unk_1E5C2B6B0;
    v5[4] = v4;
    void v5[5] = a3;
    return -[BWFigVideoCaptureDevice _suspendTimeMachineWithCompletionHandler:](v4, (uint64_t)v5);
  }
  return result;
}

uint64_t __82__BWFigVideoCaptureDevice__initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke(uint64_t a1, int a2, CFArrayRef theArray)
{
  if (a2
    && -[BWFigVideoCaptureDevice _validateTimeMachineFramesUsingPreviewFramesMetadata:](*(void *)(a1 + 32), theArray))
  {
    *(void *)(*(void *)(a1 + 32) + 3248) = theArray;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v5 = +[BWAggdDataReporter sharedInstance];
    return [(BWAggdDataReporter *)v5 reportZeroShutterLagInitSuccess];
  }
  else
  {
    -[BWFigVideoCaptureDevice _resumeTimeMachines](*(void *)(a1 + 32));
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v7();
  }
}

- (void)initiateCaptureStillImageNowWithPTS:(id *)a3 completionHandler:(id)a4
{
  uint64_t v4 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __81__BWFigVideoCaptureDevice_initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke;
  block[3] = &unk_1E5C2B6D8;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v6 = *a3;
  block[4] = self;
  void block[5] = a4;
  dispatch_async(v4, block);
}

uint64_t __81__BWFigVideoCaptureDevice_initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke(uint64_t a1, uint64_t a2)
{
  return -[BWFigVideoCaptureDevice _initiateCaptureStillImageNowWithPTS:completionHandler:](*(void *)(a1 + 32), a2, *(void *)(a1 + 40));
}

- (void)prepareToCaptureStillImageNow:(id)a3
{
  uint64_t v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __57__BWFigVideoCaptureDevice_prepareToCaptureStillImageNow___block_invoke;
  v4[3] = &unk_1E5C24E50;
  v4[4] = self;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

void __57__BWFigVideoCaptureDevice_prepareToCaptureStillImageNow___block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 2560) = [*(id *)(a1 + 40) copy];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1280));
  if ([*(id *)(*(void *)(a1 + 32) + 2544) currentState] == 2) {
    -[BWFigVideoCaptureDevice _handlePendingStillImageCaptureRequest](*(void *)(a1 + 32));
  }
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 1280);
  os_unfair_lock_unlock(v2);
}

- (void)cancelPrepareToCaptureStillImageNow
{
  if (self->_zeroShutterLagEarliestAllowedPTS.epoch)
  {
    -[BWFigVideoCaptureDevice _resumeTimeMachines]((uint64_t)self);

    self->_zeroShutterLagEarliestAllowedPTS.CMTimeEpoch epoch = 0;
  }
  uint64_t v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __62__BWFigVideoCaptureDevice_cancelPrepareToCaptureStillImageNow__block_invoke;
  block[3] = &unk_1E5C24430;
  block[4] = self;
  dispatch_async(v3, block);
}

void __62__BWFigVideoCaptureDevice_cancelPrepareToCaptureStillImageNow__block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1280));
  if ([*(id *)(*(void *)(a1 + 32) + 2544) currentState] == 8
    || [*(id *)(*(void *)(a1 + 32) + 2544) currentState] == 4)
  {
    [*(id *)(*(void *)(a1 + 32) + 2544) transitionToState:2];
  }
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 1280);
  os_unfair_lock_unlock(v2);
}

- (int)captureStillImageNowWithSettings:(id)a3 captureSettings:(id)a4
{
  if ((unint64_t)objc_msgSend((id)objc_msgSend(a4, "captureStreamSettings", a3), "count") >= 2
    && (!self
     || !self->_stereoFusionEnabled
     && !self->_bravoConstituentPhotoDeliveryEnabled
     && !self->_depthDataDeliveryEnabled
     && !self->_stereoPhotoCaptureEnabled))
  {
    return -12780;
  }
  $3CC8671D27C23BF42ADDB32F2B5E48AE v6 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __76__BWFigVideoCaptureDevice_captureStillImageNowWithSettings_captureSettings___block_invoke;
  _OWORD v8[3] = &unk_1E5C24458;
  v8[4] = self;
  v8[5] = a4;
  dispatch_async(v6, v8);
  return 0;
}

void __76__BWFigVideoCaptureDevice_captureStillImageNowWithSettings_captureSettings___block_invoke(uint64_t a1)
{
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke(uint64_t a1, uint64_t a2)
{
}

- (void)_stillImageCaptureStateMachineDidTransitionToInProgress
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 2472);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __82__BWFigVideoCaptureDevice__stillImageCaptureStateMachineDidTransitionToInProgress__block_invoke;
    block[3] = &unk_1E5C24430;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_3(uint64_t a1, uint64_t a2)
{
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_4(uint64_t a1, uint64_t a2)
{
}

void __82__BWFigVideoCaptureDevice__stillImageCaptureStateMachineDidTransitionToInProgress__block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 2552) = 0;
}

- (const)_isSwitchOverPreventingStillImageCaptureInProgress
{
  if (result)
  {
    uint64_t v1 = result;
    os_unfair_lock_assert_owner(result + 320);
    if (LOBYTE(v1[321]._os_unfair_lock_opaque) || BYTE1(v1[321]._os_unfair_lock_opaque)) {
      return (const os_unfair_lock *)1;
    }
    else {
      return (const os_unfair_lock *)(BYTE2(v1[321]._os_unfair_lock_opaque) != 0);
    }
  }
  return result;
}

- (void)_currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:(int)a3 forcingHDRSceneDetectionEnabled:(int)a4 forcingSISSceneDetectionEnabled:(int)a5 forcingDigitalFlashSceneDetectionEnabled:
{
  if (result)
  {
    uint64_t v8 = (uint64_t)result;
    if ([result isBravoVariant]) {
      long long v19 = (void *)[(id)v8 masterCaptureStream];
    }
    else {
      long long v19 = *(void **)(v8 + 496);
    }
    long long v9 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", [*(id *)(v8 + 1952) portTypes]);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 1948));
    [*(id *)(v8 + 1952) copyTo:v9];
    int v10 = *(_DWORD *)(v8 + 2416);
    int v11 = *(_DWORD *)(v8 + 2420);
    int v12 = *(_DWORD *)(v8 + 2424);
    int v13 = *(_DWORD *)(v8 + 2184);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 1948));
    if (a2) {
      int v14 = 2;
    }
    else {
      int v14 = v10;
    }
    if (a3) {
      int v15 = 2;
    }
    else {
      int v15 = v11;
    }
    if (v12 <= 2) {
      int v16 = 2;
    }
    else {
      int v16 = v12;
    }
    if (a4) {
      int v17 = v16;
    }
    else {
      int v17 = v12;
    }
    if (a5) {
      int v18 = 1;
    }
    else {
      int v18 = v13;
    }
    return (void *)-[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](v8, v19, v9, v14, v15, v17, v18, 0);
  }
  return result;
}

- (_BYTE)_ubIsHDRCaptureUsingSceneFlags:(unsigned char *)result
{
  if (result)
  {
    if ((a2 & 0x40) == 0 || result[1992])
    {
      if (result[1993])
      {
        uint64_t v2 = a2 & 0xC;
        BOOL v4 = (~a2 & 0x10008) == 0 || v2 == 4;
        unsigned int v5 = (v2 != 0) & (a2 >> 1);
        if (result[1991]) {
          return (unsigned char *)v5;
        }
        else {
          return (unsigned char *)v4;
        }
      }
      else
      {
        return (unsigned char *)((*(void *)&a2 & 0x10002) != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (uint64_t)_bravoCameraForOISOrSISCaptureType:(float)a3 stereoFusionMode:(float)a4 frameStatisticsByPortType:(uint64_t)a5 zoomFactor:(int)a6 stereoFusionLowerBoundZoomFactor:(void *)a7 stereoFusionUpperBoundZoomFactor:
{
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(*(id *)(result + 568), "portType"));
    if (a6 == 1)
    {
      return 2;
    }
    else
    {
      if (a2 < a3) {
        goto LABEL_13;
      }
      int v13 = (void *)v12;
      double v14 = *(double *)(v11 + 2352);
      [*(id *)(v11 + 568) baseZoomFactor];
      float v16 = v15;
      [*(id *)(v11 + 568) baseZoomFactor];
      if (v17 <= a2 && ([v13 integrationTime], v18 >= v14 + -0.0000999999975))
      {
        [v13 gain];
        BOOL v19 = v20 >= *(float *)(v11 + 2360);
      }
      else
      {
        BOOL v19 = 0;
      }
      if (a2 >= a4) {
        BOOL v19 = 0;
      }
      uint64_t result = 2;
      if (v16 <= a2 && !v19)
      {
LABEL_13:
        [*(id *)(v11 + 568) baseZoomFactor];
        return v21 <= a2;
      }
    }
  }
  return result;
}

- (uint64_t)_ubConvertStillImageCaptureSettings:(int)a3 useSynchronizedStreamsGroup:(void *)a4 toStillImageCaptureNowOptions:(void *)a5 captureStreamPropertyValues:
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v8 = a1;
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v103 = (id)[MEMORY[0x1E4F1CA60] dictionary];
  id v101 = v9;
  uint64_t v102 = v8;
  uint64_t v87 = a2;
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "firstObject"), "timeMachineBracketedCaptureParams"), "count")|| objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "firstObject"), "unifiedBracketedCaptureParams"), "count"))&& (objc_msgSend(a2, "captureType") != 2 || (objc_msgSend(a2, "captureFlags") & 8) != 0))
  {
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    id obja = (id)[a2 captureStreamSettings];
    uint64_t v35 = [obja countByEnumeratingWithState:&v112 objects:v123 count:16];
    if (!v35)
    {
      char v54 = 0;
      goto LABEL_66;
    }
    uint64_t v36 = v35;
    id v79 = v10;
    uint64_t v81 = a4;
    uint64_t v83 = a5;
    char v89 = 0;
    uint64_t v37 = *(void *)v113;
    uint64_t v96 = *MEMORY[0x1E4F54F50];
    uint64_t v98 = *MEMORY[0x1E4F54F68];
    uint64_t v94 = *MEMORY[0x1E4F54F80];
    uint64_t v84 = *MEMORY[0x1E4F54690];
    uint64_t v38 = *MEMORY[0x1E4F54550];
    int v100 = -1;
    LOBYTE(v86) = 1;
    uint64_t v39 = *MEMORY[0x1E4F545C0];
LABEL_41:
    uint64_t v40 = 0;
    while (1)
    {
      if (*(void *)v113 != v37) {
        objc_enumerationMutation(obja);
      }
      int v41 = *(void **)(*((void *)&v112 + 1) + 8 * v40);
      uint64_t v42 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v79);
      if (objc_msgSend((id)objc_msgSend(v41, "timeMachineBracketedCaptureParams"), "count")) {
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "timeMachineBracketedCaptureParams"), v98);
      }
      if (objc_msgSend((id)objc_msgSend(v41, "unifiedBracketedCaptureParams"), "count"))
      {
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "preBracketFrameCaptureParams"), v96);
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "unifiedBracketedCaptureParams"), v94);
        if ((int)[v41 captureFlags] < 0) {
          int v43 = 500;
        }
        else {
          int v43 = 0;
        }
        int v100 = v43;
        uint64_t v44 = [v41 adaptiveBracketingParameters];
        if (!v44)
        {
          if ((v89 & 1) != 0 || [v41 captureType] != 7) {
            char v89 = 1;
          }
          else {
            char v89 = [v41 lensStabilizationEnabledForClientBracket];
          }
          goto LABEL_54;
        }
        CMTime v45 = (void *)v44;
        int v86 = objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](v102, objc_msgSend(v41, "portType")), "hasFocus") ^ 1;
        unint64_t v46 = ((unint64_t)[v41 captureFlags] >> 37) & 1;
        long long v47 = NSNumber;
        uint64_t v48 = [v45 stationary] ^ 1 | v46;
        id v9 = v101;
        uint64_t v49 = [v47 numberWithInt:v48];
        CMTime v50 = v101;
        uint64_t v51 = v84;
      }
      else
      {
        CMTime v50 = v9;
        uint64_t v49 = v38;
        uint64_t v51 = v39;
      }
      [v50 setObject:v49 forKeyedSubscript:v51];
LABEL_54:
      [v9 setObject:v38 forKeyedSubscript:v39];
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v42, objc_msgSend(v41, "portType"));
      if (v36 == ++v40)
      {
        uint64_t v52 = [obja countByEnumeratingWithState:&v112 objects:v123 count:16];
        uint64_t v36 = v52;
        if (!v52)
        {
          if ((v100 & 0x80000000) == 0)
          {
            uint64_t v53 = objc_msgSend(NSNumber, "numberWithInt:");
            [v9 setObject:v53 forKeyedSubscript:*MEMORY[0x1E4F54EE8]];
          }
          a4 = v81;
          a5 = v83;
          id v10 = v79;
          uint64_t v8 = v102;
          char v54 = v89;
          if ((v86 & 1) == 0)
          {
LABEL_68:
            if (v54) {
              goto LABEL_78;
            }
            goto LABEL_80;
          }
LABEL_66:
          uint64_t v55 = objc_msgSend((id)objc_msgSend(*(id *)(v8 + 2000), "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType")), "afWindowParams");
          if ([v55 count])
          {
            uint64_t v121 = *MEMORY[0x1E4F54780];
            uint64_t v122 = v55;
            uint64_t v56 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v122 forKeys:&v121 count:1];
            [v9 setObject:v56 forKeyedSubscript:*MEMORY[0x1E4F54530]];
          }
          goto LABEL_68;
        }
        goto LABEL_41;
      }
    }
  }
  if ([a2 captureType] != 1 && objc_msgSend(a2, "captureType") != 2)
  {
    uint64_t v76 = 4294954516;
    goto LABEL_116;
  }
  int v80 = a4;
  id v82 = a5;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  uint64_t v11 = objc_msgSend(a2, "captureStreamSettings", v10);
  uint64_t v12 = [v11 countByEnumeratingWithState:&v108 objects:v120 count:16];
  int v13 = a2;
  if (!v12) {
    goto LABEL_36;
  }
  uint64_t v14 = v12;
  uint64_t v15 = *(void *)v109;
  uint64_t v99 = *MEMORY[0x1E4F55010];
  uint64_t v97 = *MEMORY[0x1E4F54F20];
  uint64_t v88 = *MEMORY[0x1E4F54838];
  uint64_t v85 = *MEMORY[0x1E4F54FB0];
  uint64_t v95 = *MEMORY[0x1E4F55048];
  uint64_t v93 = *MEMORY[0x1E4F55020];
  uint64_t v16 = *MEMORY[0x1E4F54FC0];
  id obj = v11;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v109 != v15) {
        objc_enumerationMutation(v11);
      }
      double v18 = *(void **)(*((void *)&v108 + 1) + 8 * i);
      if (objc_msgSend((id)objc_msgSend(v18, "portType"), "isEqualToString:", *(void *)(v8 + 1456))) {
        BOOL v19 = a3 == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (!v19)
      {
        float v20 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        float v21 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](v8, [v18 portType]);
        int v22 = objc_msgSend((id)objc_msgSend(v13, "frameStatisticsByPortType"), "objectForKeyedSubscript:", objc_msgSend(v18, "portType"));
        if (([v18 captureFlags] & 0x80) != 0) {
          uint64_t v23 = 30;
        }
        else {
          uint64_t v23 = 1;
        }
        [v22 gain];
        int v25 = v24;
        unint64_t v26 = [v18 captureFlags];
        LODWORD(v27) = v25;
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v21, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", v23, (v26 >> 4) & 1, v27), v99);
        if (([v18 captureFlags] & 0x10000) != 0) {
          [v20 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v97];
        }
        int v13 = v87;
        id v9 = v101;
        if ([v87 captureType] != 2) {
          goto LABEL_33;
        }
        if (([v18 captureFlags] & 0x8000) != 0) {
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v21, "stream"), "getPropertyIfSupported:error:", v88, 0), v85);
        }
        int v28 = [v18 captureFlags];
        if ((v28 & 0x800000) != 0)
        {
          uint64_t v29 = 1;
        }
        else
        {
          if ((v28 & 0x20000000) == 0)
          {
            if ((v28 & 0x40000000) != 0)
            {
              uint64_t v29 = 3;
              goto LABEL_31;
            }
LABEL_32:
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "unifiedBracketedCaptureParams"), "firstObject"), "objectForKeyedSubscript:", v16), v16);
LABEL_33:
            objc_msgSend(v103, "setObject:forKeyedSubscript:", v20, objc_msgSend(v18, "portType"));
            uint64_t v8 = v102;
            continue;
          }
          uint64_t v29 = 2;
        }
LABEL_31:
        unint64_t v30 = ((unint64_t)[v18 captureFlags] >> 25) & 1;
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v29), v95);
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v30), v93);
        int v13 = v87;
        uint64_t v11 = obj;
        goto LABEL_32;
      }
    }
    uint64_t v14 = [v11 countByEnumeratingWithState:&v108 objects:v120 count:16];
  }
  while (v14);
LABEL_36:
  int v31 = [v13 captureType];
  a4 = v80;
  a5 = v82;
  id v10 = v78;
  if (v31 == 2)
  {
    if (a3)
    {
      uint64_t v32 = *MEMORY[0x1E4F54F18];
      id v33 = &unk_1EFB015F8;
      uint64_t v34 = v9;
    }
    else
    {
      id v33 = (void *)*MEMORY[0x1E4F52DB8];
      uint64_t v32 = *MEMORY[0x1E4F54928];
      uint64_t v34 = v78;
    }
    [v34 setObject:v33 forKeyedSubscript:v32];
  }
  if (([v87 captureFlags] & 0x800) != 0)
  {
    if (*(unsigned char *)(v8 + 3202)) {
      [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54ED0]];
    }
    if (*(unsigned char *)(v8 + 3203)) {
      [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54ED8]];
    }
  }
  if (v31 == 2)
  {
LABEL_78:
    if (-[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v8, [v87 captureType])) {
      [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54690]];
    }
  }
LABEL_80:
  if (*(void *)(v8 + 1456) && ([v87 captureFlags] & 0x800) != 0)
  {
    uint64_t v57 = *MEMORY[0x1E4F53A38];
    v118[0] = *MEMORY[0x1E4F53A30];
    v118[1] = v57;
    v119[0] = &unk_1EFB015C8;
    v119[1] = &unk_1EFB015C8;
    v118[2] = *MEMORY[0x1E4F53A40];
    v119[2] = &unk_1EFB015E0;
    uint64_t v58 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v119 forKeys:v118 count:3];
    [v9 setObject:v58 forKeyedSubscript:*MEMORY[0x1E4F54F30]];
  }
  if ([v87 deliverSushiRaw]) {
    [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54EE0]];
  }
  int v59 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](v8, [v87 masterPortType]);
  uint64_t v60 = [v59 stillImageKeypointDetectionEnabled];
  if (v60 != [v59 keypointDetectionEnabled])
  {
    uint64_t v61 = [NSNumber numberWithBool:v60];
    [v9 setObject:v61 forKeyedSubscript:*MEMORY[0x1E4F54F38]];
  }
  float v62 = (void *)[v59 stream];
  if (objc_msgSend((id)objc_msgSend(v62, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
  char v63 = (void *)[v59 stream];
  }
  if (objc_msgSend((id)objc_msgSend(v63, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A38], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F08]); {
  uint64_t v64 = (void *)[v59 stream];
  }
  if (objc_msgSend((id)objc_msgSend(v64, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A30], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F00]); {
  long long v65 = (void *)[v59 stream];
  }
  if (objc_msgSend((id)objc_msgSend(v65, "getPropertyIfSupported:error:", *MEMORY[0x1E4F549F8], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54EF8]); {
  if (objc_msgSend((id)objc_msgSend(*(id *)(v8 + 520), "objectForKeyedSubscript:", @"StillImageISPChromaNoiseReduction"), "BOOLValue"))
  }
  {
    uint64_t v66 = [NSNumber numberWithBool:*(unsigned __int8 *)(v8 + 2484)];
    [v9 setObject:v66 forKeyedSubscript:*MEMORY[0x1E4F54EF0]];
  }
  if (a3)
  {
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v67 = [v103 countByEnumeratingWithState:&v104 objects:v117 count:16];
    if (v67)
    {
      uint64_t v68 = v67;
      uint64_t v69 = *(void *)v105;
      do
      {
        for (uint64_t j = 0; j != v68; ++j)
        {
          if (*(void *)v105 != v69) {
            objc_enumerationMutation(v103);
          }
          objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(v103, "objectForKeyedSubscript:", *(void *)(*((void *)&v104 + 1) + 8 * j)), *(void *)(*((void *)&v104 + 1) + 8 * j));
        }
        uint64_t v68 = [v103 countByEnumeratingWithState:&v104 objects:v117 count:16];
      }
      while (v68);
    }
  }
  else
  {
    float v71 = objc_msgSend(v103, "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType"));
    uint64_t v72 = *MEMORY[0x1E4F55010];
    id v73 = (id)[v71 objectForKeyedSubscript:*MEMORY[0x1E4F55010]];
    if (v73)
    {
      char v74 = v73;
      [v71 setObject:0 forKeyedSubscript:v72];
      uint64_t v116 = v74;
      uint64_t v75 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v116 count:1];
      [v71 setObject:v75 forKeyedSubscript:*MEMORY[0x1E4F54F40]];
    }
    objc_msgSend(v9, "addEntriesFromDictionary:", objc_msgSend(v103, "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType")));
    if (*(void *)(v102 + 544)) {
      [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54F60]];
    }
  }
  if (*(unsigned char *)(v102 + 1980) && [v87 captureType] != 2) {
    [v10 setObject:*MEMORY[0x1E4F52DB0] forKeyedSubscript:*MEMORY[0x1E4F54928]];
  }
  if ((objc_msgSend((id)objc_msgSend(*(id *)(v102 + 8), "deviceID"), "isEqualToString:", 0x1EFA45440) & 1) == 0) {
    -[BWFigVideoCaptureDevice _propagateStillImageSettings:toCMIOCaptureOptions:](v102, v87, v9);
  }
  uint64_t v76 = 0;
LABEL_116:
  if (![v9 count])
  {

    id v9 = 0;
  }
  if (![v10 count])
  {

    id v10 = 0;
  }
  *a4 = v9;
  *a5 = v10;
  return v76;
}

- (uint64_t)_ubEnableSphereForCaptureType:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = [*(id *)(result + 496) sphereEnabled];
    if (result)
    {
      if ([*(id *)(v3 + 496) motionDataInvalid])
      {
        return 0;
      }
      else if (a2 == 7)
      {
        return 1;
      }
      else
      {
        if (*(_DWORD *)(v3 + 1984) == 2) {
          int v4 = [*(id *)(v3 + 496) sphereVideoEnabled];
        }
        else {
          int v4 = 1;
        }
        return v4 & ([*(id *)(v3 + 3064) isStationary] ^ 1);
      }
    }
  }
  return result;
}

- (uint64_t)_propagateStillImageSettings:(void *)a3 toCMIOCaptureOptions:
{
  if (result)
  {
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(a2, "cmioCompressedFormat"), @"CMIOCompressedFormat");
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a2, "cmioHighResolutionPhotoEnabled")), @"CMIOHighResolutionPhotoEnabled");
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(a2, "cmioFlashMode")), @"CMIOFlashMode");
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(a2, "cmioQualityPrioritization")), @"CMIOQualityPrioritization");
    uint64_t result = [a2 cmioMaxPhotoDimensions];
    if ((int)result >= 1)
    {
      uint64_t result = [a2 cmioMaxPhotoDimensions];
      if (SHIDWORD(result) >= 1)
      {
        objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(a2, "cmioMaxPhotoDimensions")), @"CMIOMaxPhotoDimensionsWidth");
        uint64_t v5 = objc_msgSend(NSNumber, "numberWithInt:", (unint64_t)objc_msgSend(a2, "cmioMaxPhotoDimensions") >> 32);
        return [a3 setObject:v5 forKeyedSubscript:@"CMIOMaxPhotoDimensionsHeight"];
      }
    }
  }
  return result;
}

- (uint64_t)_convertStillImageCaptureSettings:(void *)a3 toStillImageCaptureNowOptions:(void *)a4 captureStreamPropertyValues:
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v115 = [a2 masterPortType];
  uint64_t v130 = 0;
  unsigned int v131 = &v130;
  uint64_t v132 = 0x3052000000;
  int v133 = __Block_byref_object_copy__37;
  uint64_t v134 = __Block_byref_object_dispose__37;
  uint64_t v135 = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  id v10 = *(void **)(a1 + 552);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v126 objects:v149 count:16];
  long long v113 = a2;
  uint64_t v114 = a1;
  if (!v11)
  {
    uint64_t v12 = 0;
LABEL_19:
    uint64_t v103 = v106;
    LODWORD(v101) = 0;
    FigDebugAssert3();
    uint64_t v116 = 0;
    goto LABEL_20;
  }
  uint64_t v116 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)v127;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v127 != v13) {
        objc_enumerationMutation(v10);
      }
      uint64_t v15 = *(void **)(*((void *)&v126 + 1) + 8 * i);
      int v16 = objc_msgSend((id)objc_msgSend(v15, "portType"), "isEqualToString:", v115);
      if (v12) {
        float v17 = v12;
      }
      else {
        float v17 = v15;
      }
      double v18 = v116;
      if (v16) {
        double v18 = v15;
      }
      uint64_t v116 = v18;
      if (!v16) {
        uint64_t v12 = v17;
      }
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v126 objects:v149 count:16];
  }
  while (v11);
  a2 = v113;
  if (!v116) {
    goto LABEL_19;
  }
LABEL_20:
  BOOL v19 = objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(v116, "portType", v101, v103));
  long long v111 = objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(v12, "portType"));
  long long v112 = v19;
  if (objc_msgSend((id)objc_msgSend(v19, "timeMachineBracketedCaptureParams"), "count")) {
    BOOL v20 = 1;
  }
  else {
    BOOL v20 = objc_msgSend((id)objc_msgSend(v19, "unifiedBracketedCaptureParams"), "count") != 0;
  }
  BOOL v110 = v20;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  float v21 = (void *)[v113 captureStreamSettings];
  uint64_t v22 = [v21 countByEnumeratingWithState:&v122 objects:v148 count:16];
  long long v107 = v8;
  long long v108 = a3;
  long long v109 = a4;
  int v23 = 0;
  int v24 = 0;
  BOOL v25 = 0;
  if (v22)
  {
    uint64_t v26 = *(void *)v123;
    do
    {
      for (uint64_t j = 0; j != v22; ++j)
      {
        if (*(void *)v123 != v26) {
          objc_enumerationMutation(v21);
        }
        int v28 = *(void **)(*((void *)&v122 + 1) + 8 * j);
        if (v23)
        {
          int v23 = 1;
          if (v25) {
            goto LABEL_30;
          }
        }
        else
        {
          int v23 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v122 + 1) + 8 * j), "bracketSettings"), "providePreBracketedEV0");
          if (v25)
          {
LABEL_30:
            BOOL v25 = 1;
            goto LABEL_33;
          }
        }
        BOOL v25 = [v28 captureType] == 2;
LABEL_33:
        int v29 = objc_msgSend((id)objc_msgSend(v28, "bracketSettings"), "bracketingMode");
        if (v24 == 3) {
          int v30 = 3;
        }
        else {
          int v30 = 2;
        }
        if (v29 != 2) {
          int v30 = v24;
        }
        if ((v29 - 3) < 2 || v29 == 1) {
          int v24 = v29;
        }
        else {
          int v24 = v30;
        }
      }
      uint64_t v22 = [v21 countByEnumeratingWithState:&v122 objects:v148 count:16];
    }
    while (v22);
  }
  id v33 = v9;
  uint64_t v32 = v107;
  if (*(void *)(v114 + 544) && !v111) {
    [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54F60]];
  }
  if ([v113 deliverSushiRaw]) {
    [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54EE0]];
  }
  uint64_t v34 = (void *)[v116 stream];
  if (objc_msgSend((id)objc_msgSend(v34, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A38], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F08]); {
  uint64_t v35 = (void *)[v116 stream];
  }
  if (objc_msgSend((id)objc_msgSend(v35, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A30], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F00]); {
  uint64_t v36 = (void *)[v116 stream];
  }
  if (objc_msgSend((id)objc_msgSend(v36, "getPropertyIfSupported:error:", *MEMORY[0x1E4F549F8], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54EF8]); {
  if (!v110 && ([v113 captureFlags] & 0x800) != 0)
  }
  {
    if (*(unsigned char *)(v114 + 3202)) {
      [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54ED0]];
    }
    if (*(unsigned char *)(v114 + 3203)) {
      [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54ED8]];
    }
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v114 + 520), "objectForKeyedSubscript:", @"StillImageISPChromaNoiseReduction"), "BOOLValue"))
  {
    uint64_t v37 = [NSNumber numberWithBool:*(unsigned __int8 *)(v114 + 2484)];
    [v107 setObject:v37 forKeyedSubscript:*MEMORY[0x1E4F54EF0]];
  }
  if (*(unsigned char *)(v114 + 1980))
  {
    uint64_t v38 = (void *)MEMORY[0x1E4F52DB8];
    if (!v25) {
      uint64_t v38 = (void *)MEMORY[0x1E4F52DB0];
    }
    [v9 setObject:*v38 forKeyedSubscript:*MEMORY[0x1E4F54928]];
  }
  if (!v25)
  {
    if (v24)
    {
      int v41 = (void *)[v112 bracketSettings];
      long long v105 = (void *)[v111 bracketSettings];
      if (v23) {
        uint64_t v42 = MEMORY[0x1E4F1CC38];
      }
      else {
        uint64_t v42 = MEMORY[0x1E4F1CC28];
      }
      [v107 setObject:v42 forKeyedSubscript:*MEMORY[0x1E4F54670]];
      switch(v24)
      {
        case 1:
          if (![v41 exposureValues]) {
            goto LABEL_205;
          }
          uint64_t v43 = [v41 exposureValues];
          [v107 setObject:v43 forKeyedSubscript:*MEMORY[0x1E4F54500]];
          [v107 setObject:*MEMORY[0x1E4F54540] forKeyedSubscript:*MEMORY[0x1E4F545C0]];
          objc_msgSend(v107, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", -[BWFigVideoCaptureDevice _shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:deviceMotionActivity:frameStatisticsByPortType:](v114, 1, 1, objc_msgSend(v113, "frameStatisticsByPortType"))), *MEMORY[0x1E4F54690]);
          if (*(unsigned char *)(v114 + 2468)) {
            [v107 setObject:&unk_1EFB015F8 forKeyedSubscript:*MEMORY[0x1E4F54F78]];
          }
          if (v105)
          {
            uint64_t v44 = [v105 exposureValues];
            [v107 setObject:v44 forKeyedSubscript:*MEMORY[0x1E4F54508]];
          }
          CMTime v45 = (void *)[v116 stream];
          if (objc_msgSend((id)objc_msgSend(v45, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
          break;
          }
        case 2:
          if ([v41 exposureValues])
          {
            uint64_t v71 = [v41 exposureValues];
            uint64_t v72 = (void *)MEMORY[0x1E4F54500];
          }
          else
          {
            if (![v41 manualExposureBracketedCaptureParams]) {
              goto LABEL_157;
            }
            uint64_t v71 = [v41 manualExposureBracketedCaptureParams];
            uint64_t v72 = (void *)MEMORY[0x1E4F54608];
          }
          [v107 setObject:v71 forKeyedSubscript:*v72];
LABEL_157:
          [v107 setObject:*MEMORY[0x1E4F54548] forKeyedSubscript:*MEMORY[0x1E4F545C0]];
          if (*(unsigned char *)(v114 + 3145))
          {
            [v113 frameStatisticsByPortType];
            if ([*(id *)(v114 + 496) sphereEnabled])
            {
              int v77 = *(void **)(v114 + 3064);
              if (v77) {
                int v78 = [v77 isStationary];
              }
              else {
                int v78 = 0;
              }
              uint64_t v84 = ([*(id *)(v114 + 496) motionDataInvalid] | v78) ^ 1;
            }
            else
            {
              uint64_t v84 = 0;
            }
            uint64_t v93 = [NSNumber numberWithBool:v84];
            [v107 setObject:v93 forKeyedSubscript:*MEMORY[0x1E4F54690]];
          }
          if ([v105 exposureValues])
          {
            uint64_t v94 = [v105 exposureValues];
            uint64_t v95 = (void *)MEMORY[0x1E4F54508];
          }
          else
          {
            if (![v105 manualExposureBracketedCaptureParams]) {
              goto LABEL_200;
            }
            uint64_t v94 = [v105 manualExposureBracketedCaptureParams];
            uint64_t v95 = (void *)MEMORY[0x1E4F54610];
          }
          [v107 setObject:v94 forKeyedSubscript:*v95];
LABEL_200:
          uint64_t v96 = (void *)[v116 stream];
          if (objc_msgSend((id)objc_msgSend(v96, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
          uint64_t v97 = objc_msgSend((id)objc_msgSend(v116, "sensorIDDictionary"), "objectForKeyedSubscript:", @"StillImageStabilization");
          }
          uint64_t v98 = *MEMORY[0x1E4F54780];
          uint64_t v99 = [v97 objectForKeyedSubscript:*MEMORY[0x1E4F54780]];
          if (v99)
          {
            uint64_t v146 = v98;
            uint64_t v147 = v99;
            uint64_t v100 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v147 forKeys:&v146 count:1];
            [v107 setObject:v100 forKeyedSubscript:*MEMORY[0x1E4F54530]];
          }
          break;
        case 3:
          if ([v41 oisBracketedCaptureParams])
          {
            uint64_t v73 = [v41 oisBracketedCaptureParams];
            char v74 = (void *)MEMORY[0x1E4F54660];
          }
          else
          {
            if (![v41 manualExposureBracketedCaptureParams]) {
              goto LABEL_164;
            }
            uint64_t v79 = [v41 manualExposureBracketedCaptureParams];
            [v107 setObject:v79 forKeyedSubscript:*MEMORY[0x1E4F54608]];
            uint64_t v73 = *MEMORY[0x1E4F54538];
            char v74 = (void *)MEMORY[0x1E4F545C0];
          }
          [v107 setObject:v73 forKeyedSubscript:*v74];
LABEL_164:
          [v113 frameStatisticsByPortType];
          if ([*(id *)(v114 + 496) sphereEnabled])
          {
            int v80 = *(void **)(v114 + 3064);
            if (v80) {
              int v81 = [v80 isStationary];
            }
            else {
              int v81 = 0;
            }
            uint64_t v82 = ([*(id *)(v114 + 496) motionDataInvalid] | v81) ^ 1;
          }
          else
          {
            uint64_t v82 = 0;
          }
          uint64_t v85 = [NSNumber numberWithBool:v82];
          [v107 setObject:v85 forKeyedSubscript:*MEMORY[0x1E4F54690]];
          if ([v105 oisBracketedCaptureParams])
          {
            uint64_t v86 = [v105 oisBracketedCaptureParams];
            uint64_t v87 = (void *)MEMORY[0x1E4F54668];
          }
          else
          {
            if (![v105 manualExposureBracketedCaptureParams]) {
              goto LABEL_183;
            }
            uint64_t v86 = [v105 manualExposureBracketedCaptureParams];
            uint64_t v87 = (void *)MEMORY[0x1E4F54610];
          }
          [v107 setObject:v86 forKeyedSubscript:*v87];
LABEL_183:
          uint64_t v88 = (void *)[v116 stream];
          if (objc_msgSend((id)objc_msgSend(v88, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
          if (*(_DWORD *)(v114 + 1984))
          }
          {
            uint64_t v89 = objc_msgSend((id)objc_msgSend(*(id *)(v114 + 2000), "objectForKeyedSubscript:", objc_msgSend(v116, "portType")), "afWindowParams");
          }
          else
          {
            int v90 = objc_msgSend((id)objc_msgSend(v116, "sensorIDDictionary"), "objectForKeyedSubscript:", @"StillImageStabilization");
            uint64_t v89 = [v90 objectForKeyedSubscript:*MEMORY[0x1E4F54780]];
          }
          if (v89)
          {
            uint64_t v144 = *MEMORY[0x1E4F54780];
            uint64_t v145 = v89;
            uint64_t v91 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v145 forKeys:&v144 count:1];
            [v107 setObject:v91 forKeyedSubscript:*MEMORY[0x1E4F54530]];
          }
          break;
        case 4:
          if (![v41 exposureValues] && !objc_msgSend(v41, "manualExposureBracketedCaptureParams")
            || [v41 exposureValues] && objc_msgSend(v41, "manualExposureBracketedCaptureParams"))
          {
LABEL_205:
            uint64_t v104 = v106;
            LODWORD(v102) = 0;
            FigDebugAssert3();
            uint64_t v69 = 0;
            goto LABEL_138;
          }
          if ([v41 exposureValues])
          {
            uint64_t v75 = [v41 exposureValues];
            uint64_t v76 = (void *)MEMORY[0x1E4F54500];
          }
          else
          {
            if (![v41 manualExposureBracketedCaptureParams]) {
              goto LABEL_171;
            }
            uint64_t v75 = [v41 manualExposureBracketedCaptureParams];
            uint64_t v76 = (void *)MEMORY[0x1E4F54608];
          }
          [v107 setObject:v75 forKeyedSubscript:*v76];
LABEL_171:
          [v107 setObject:*MEMORY[0x1E4F54538] forKeyedSubscript:*MEMORY[0x1E4F545C0]];
          if ([*(id *)(v114 + 496) hasSphere]
            && [v41 lensStabilizationEnabledForClientBracket])
          {
            [v113 frameStatisticsByPortType];
            if ([*(id *)(v114 + 496) sphereEnabled]) {
              uint64_t v83 = [*(id *)(v114 + 496) motionDataInvalid] ^ 1;
            }
            else {
              uint64_t v83 = 0;
            }
            uint64_t v92 = [NSNumber numberWithBool:v83];
            [v107 setObject:v92 forKeyedSubscript:*MEMORY[0x1E4F54690]];
          }
          break;
        default:
          break;
      }
    }
    else if (objc_msgSend((id)objc_msgSend(v112, "unifiedBracketedCaptureParams"), "count"))
    {
      uint64_t v46 = [v112 preBracketFrameCaptureParams];
      [v107 setObject:v46 forKeyedSubscript:*MEMORY[0x1E4F54F50]];
      uint64_t v47 = [v111 preBracketFrameCaptureParams];
      [v107 setObject:v47 forKeyedSubscript:*MEMORY[0x1E4F54F58]];
      uint64_t v48 = [v112 unifiedBracketedCaptureParams];
      [v107 setObject:v48 forKeyedSubscript:*MEMORY[0x1E4F54F80]];
      uint64_t v49 = [v111 unifiedBracketedCaptureParams];
      [v107 setObject:v49 forKeyedSubscript:*MEMORY[0x1E4F54F88]];
      if (([v112 captureType] != 7
         || [v112 lensStabilizationEnabledForClientBracket])
        && -[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v114, [v113 captureType]))
      {
        [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54690]];
      }
      CMTime v50 = (void *)[v116 stream];
      if (objc_msgSend((id)objc_msgSend(v50, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
      if ((int)[v112 captureFlags] < 0)
      }
        uint64_t v51 = 500;
      else {
        uint64_t v51 = 0;
      }
      uint64_t v52 = [NSNumber numberWithInt:v51];
      [v107 setObject:v52 forKeyedSubscript:*MEMORY[0x1E4F54EE8]];
      uint64_t v53 = objc_msgSend((id)objc_msgSend(*(id *)(v114 + 2000), "objectForKeyedSubscript:", objc_msgSend(v116, "portType")), "afWindowParams");
      if (v53)
      {
        uint64_t v142 = *MEMORY[0x1E4F54780];
        uint64_t v143 = v53;
        uint64_t v54 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v143 forKeys:&v142 count:1];
        [v107 setObject:v54 forKeyedSubscript:*MEMORY[0x1E4F54530]];
      }
    }
LABEL_106:
    if (!v110)
    {
      -[BWFigVideoCaptureDevice _addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:captureSettings:portType:](v114, v107, v113, v115);
      if (v111) {
        -[BWFigVideoCaptureDevice _addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:captureSettings:portType:](v114, v107, v113, [v12 portType]);
      }
    }
    uint64_t v56 = [v116 stillImageKeypointDetectionEnabled];
    if (v56 != [v116 keypointDetectionEnabled])
    {
      uint64_t v57 = [NSNumber numberWithBool:v56];
      [v107 setObject:v57 forKeyedSubscript:*MEMORY[0x1E4F54F38]];
    }
    if (*(unsigned char *)(v114 + 3204))
    {
      if (([v113 captureFlags] & 0x2000) == 0)
      {
        BOOL v58 = [v113 captureType] == 1;
        if (!v110) {
          goto LABEL_118;
        }
LABEL_116:
        BOOL v59 = objc_msgSend((id)objc_msgSend(v112, "timeMachineBracketedCaptureParams"), "count") != 0;
        goto LABEL_119;
      }
      BOOL v58 = 1;
      if (v110) {
        goto LABEL_116;
      }
    }
    else
    {
      BOOL v58 = 0;
      if (v110) {
        goto LABEL_116;
      }
    }
LABEL_118:
    BOOL v59 = 0;
LABEL_119:
    if (!v58 && !v59) {
      goto LABEL_132;
    }
    if (objc_msgSend((id)objc_msgSend(v112, "timeMachineBracketedCaptureParams"), "count"))
    {
      uint64_t v60 = [v112 timeMachineBracketedCaptureParams];
      [v107 setObject:v60 forKeyedSubscript:*MEMORY[0x1E4F54F68]];
      if ([v113 captureType] == 10)
      {
        uint64_t v61 = (void *)[v116 stream];
        if (objc_msgSend((id)objc_msgSend(v61, "getPropertyIfSupported:error:", *MEMORY[0x1E4F54A70], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F54F10]); {
      }
        }
      if (!objc_msgSend((id)objc_msgSend(v112, "unifiedBracketedCaptureParams"), "count")) {
        [v107 setObject:*MEMORY[0x1E4F54550] forKeyedSubscript:*MEMORY[0x1E4F545C0]];
      }
      goto LABEL_132;
    }
    uint64_t v62 = [v112 expectedTimeMachineFrameCaptureCount];
    if (v112)
    {
      [v112 preferredTimeMachinePTS];
      if ((v119 & 0x100000000) != 0)
      {
        [v112 preferredTimeMachinePTS];
        CFDictionaryRef v63 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
        v140[0] = *MEMORY[0x1E4F55148];
        uint64_t v64 = [NSNumber numberWithInt:v62];
        v140[1] = *MEMORY[0x1E4F55150];
        v141[0] = v64;
        v141[1] = v63;
        uint64_t v65 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v141 forKeys:v140 count:2];

LABEL_131:
        [v107 setObject:v65 forKeyedSubscript:*MEMORY[0x1E4F54F70]];
LABEL_132:
        uint64_t v66 = v114;
        if (*(void *)(v114 + 1456))
        {
          uint64_t v66 = v114;
          if (([v113 captureFlags] & 0x800) != 0)
          {
            uint64_t v67 = *MEMORY[0x1E4F53A38];
            v136[0] = *MEMORY[0x1E4F53A30];
            v136[1] = v67;
            v137[0] = &unk_1EFB015C8;
            v137[1] = &unk_1EFB015C8;
            v136[2] = *MEMORY[0x1E4F53A40];
            v137[2] = &unk_1EFB015E0;
            uint64_t v68 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v137 forKeys:v136 count:3];
            [v107 setObject:v68 forKeyedSubscript:*MEMORY[0x1E4F54F30]];
          }
        }
        if ((objc_msgSend((id)objc_msgSend(*(id *)(v66 + 8), "deviceID"), "isEqualToString:", 0x1EFA45440) & 1) == 0) {
          -[BWFigVideoCaptureDevice _propagateStillImageSettings:toCMIOCaptureOptions:](v114, v113, v107);
        }
        uint64_t v69 = 0;
        goto LABEL_138;
      }
    }
    else
    {
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      uint64_t v120 = 0;
    }
    uint64_t v138 = *MEMORY[0x1E4F55148];
    uint64_t v139 = [NSNumber numberWithInt:v62];
    uint64_t v65 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v139 forKeys:&v138 count:1];
    goto LABEL_131;
  }
  if (*(unsigned char *)(v114 + 1980))
  {
    uint64_t v39 = *(NSObject **)(v114 + 1576);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __119__BWFigVideoCaptureDevice__convertStillImageCaptureSettings_toStillImageCaptureNowOptions_captureStreamPropertyValues___block_invoke;
    block[3] = &unk_1E5C24F58;
    block[4] = v114;
    void block[5] = &v130;
    dispatch_sync(v39, block);
    if (v131[5])
    {
      [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54520]];
      [v9 addEntriesFromDictionary:v131[5]];
    }
    if ([*(id *)(v114 + 496) sphereEnabled])
    {
      if (*(int *)(v114 + 2436) < 3) {
        uint64_t v40 = -[BWFigVideoCaptureDevice _shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:deviceMotionActivity:frameStatisticsByPortType:](v114, 1, 1, (void *)[v113 frameStatisticsByPortType]);
      }
      else {
        uint64_t v40 = -[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v114, [v113 captureType]);
      }
      uint64_t v55 = [NSNumber numberWithBool:v40];
      [v107 setObject:v55 forKeyedSubscript:*MEMORY[0x1E4F54690]];
    }
    if (([v112 captureFlags] & 0x10000) != 0) {
      [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54F20]];
    }
    if (([v111 captureFlags] & 0x10000) != 0) {
      [v107 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54F28]];
    }
    goto LABEL_106;
  }
  uint64_t v69 = 4294954516;
LABEL_138:
  if (!objc_msgSend(v107, "count", v102, v104))
  {

    uint64_t v32 = 0;
  }
  if (![v9 count])
  {

    id v33 = 0;
  }

  void *v108 = v32;
  void *v109 = v33;
  _Block_object_dispose(&v130, 8);
  return v69;
}

uint64_t __119__BWFigVideoCaptureDevice__convertStillImageCaptureSettings_toStillImageCaptureNowOptions_captureStreamPropertyValues___block_invoke(uint64_t a1)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 1600);
  if (result)
  {
    CFTypeRef cf = 0;
    uint64_t v3 = *MEMORY[0x1E4F1CF80];
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      v7(FigBaseObject, 0x1EFA59EE0, v3, &cf);
      if (cf) {
        goto LABEL_13;
      }
    }
    uint64_t v8 = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(v8, 0x1EFA5A300, v3, &cf);
    }
    if (cf)
    {
LABEL_13:
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      v25[0] = @"x";
      v26[0] = objc_msgSend(NSNumber, "numberWithDouble:");
      v25[1] = @"y";
      v26[1] = [NSNumber numberWithDouble:0.0 * 0.5 + 0.5 + -0.45];
      void v25[2] = @"w";
      v26[2] = [NSNumber numberWithDouble:0.0];
      _OWORD v25[3] = @"h";
      void v26[3] = [NSNumber numberWithDouble:0.0];
      uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:4];
      uint64_t v13 = FigSampleBufferProcessorGetFigBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 56);
      if (v16) {
        v16(v13, 0x1EFA59F00, v12);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v18 = FigSampleBufferProcessorGetFigBaseObject();
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v21 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v20 = v21;
    if (v21) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48);
    if (v23) {
      return v23(v18, 0x1EFA5A4C0, v3, v17 + 40);
    }
  }
  return result;
}

- (uint64_t)_shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:(int)a3 deviceMotionActivity:(void *)a4 frameStatisticsByPortType:
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = [*(id *)(result + 496) sphereEnabled];
    if (result)
    {
      int v8 = 0;
      uint64_t v9 = *(void **)(v7 + 3064);
      if (v9 && a3) {
        int v8 = [v9 isStationary];
      }
      if ([*(id *)(v7 + 496) motionDataInvalid])
      {
        return 0;
      }
      else
      {
        uint64_t result = a3 & v8 ^ 1u;
        if ((a3 & v8 & 1) == 0 && a2)
        {
          return -[BWFigVideoCaptureDevice _isLowLightSceneUsingFrameStatisticsByPortType:](v7, a4);
        }
      }
    }
  }
  return result;
}

- (uint64_t)_addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:(void *)a3 captureSettings:(uint64_t)a4 portType:
{
  v36[2] = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  int v8 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](result, a4);
  uint64_t v9 = objc_msgSend((id)objc_msgSend(v8, "stream"), "supportedProperties");
  uint64_t result = [v9 objectForKeyedSubscript:*MEMORY[0x1E4F54B08]];
  if (!result) {
    return result;
  }
  uint64_t v10 = (void *)[a3 captureStreamSettingsForPortType:a4];
  uint64_t v11 = objc_msgSend((id)objc_msgSend(a3, "frameStatisticsByPortType"), "objectForKeyedSubscript:", a4);
  char v12 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 520), "objectForKeyedSubscript:", @"IspMBNRSupported"), "BOOLValue");
  int v13 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 520), "objectForKeyedSubscript:", @"MultiPassIspMBNRSupported"), "BOOLValue");
  int v14 = objc_msgSend((id)objc_msgSend(a3, "masterPortType"), "isEqualToString:", a4);
  if ((v12 & 1) != 0
    || v13
    && *(unsigned char *)(v7 + 3200)
    && ([a3 captureFlags] & 0x4000) == 0
    && (!*(unsigned char *)(v7 + 1489) ? (int v24 = 1) : (int v24 = v14), v24 == 1))
  {
    [v11 gain];
    int v16 = v15;
    unint64_t v17 = [v10 captureFlags];
    LODWORD(v18) = v16;
    uint64_t result = [v8 noiseReductionAndSharpeningConfigurationForType:1 gain:(v17 >> 4) & 1 qSub:v18];
    if (!result) {
      return result;
    }
    uint64_t v19 = result;
    int v20 = [a3 captureType];
    uint64_t v21 = 0;
    switch(v20)
    {
      case 0:
      case 10:
      case 11:
      case 12:
        int v29 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], objc_msgSend(NSString, "stringWithFormat:", @"Still image capture type '%@' not supported", BWPhotoEncoderStringFromEncodingScheme(objc_msgSend(a3, "captureType", 0))), 0 reason userInfo];
        objc_exception_throw(v29);
      case 1:
      case 2:
      case 6:
      case 7:
      case 8:
        uint64_t v32 = v19;
        uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
        int v23 = &v32;
        break;
      case 3:
        objc_msgSend(v11, "gain", 0);
        uint64_t result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 2);
        if (!result) {
          return result;
        }
        uint64_t v28 = result;
        if (objc_msgSend((id)objc_msgSend(v10, "bracketSettings"), "providePreBracketedEV0"))
        {
          v36[0] = v19;
          v36[1] = v28;
          uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
          int v23 = v36;
          goto LABEL_28;
        }
        uint64_t v35 = v28;
        uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
        int v23 = &v35;
        break;
      case 4:
        objc_msgSend(v11, "gain", 0);
        uint64_t result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 4);
        if (!result) {
          return result;
        }
        uint64_t v34 = result;
        uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
        int v23 = &v34;
        break;
      case 5:
        objc_msgSend(v11, "gain", 0);
        uint64_t result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 3);
        if (!result) {
          return result;
        }
        uint64_t v33 = result;
        uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
        int v23 = &v33;
        break;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    [v11 gain];
    uint64_t result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 0);
    if (!result) {
      return result;
    }
    uint64_t v25 = result;
    if ([a3 captureType] == 3
      && objc_msgSend((id)objc_msgSend(v10, "bracketSettings"), "providePreBracketedEV0"))
    {
      v31[0] = v25;
      v31[1] = v25;
      uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
      int v23 = v31;
LABEL_28:
      uint64_t v26 = 2;
      goto LABEL_20;
    }
    uint64_t v30 = v25;
    uint64_t v22 = (void *)MEMORY[0x1E4F1C978];
    int v23 = &v30;
  }
  uint64_t v26 = 1;
LABEL_20:
  uint64_t v21 = [v22 arrayWithObjects:v23 count:v26];
LABEL_21:
  double v27 = (void *)MEMORY[0x1E4F54F40];
  if (!v14) {
    double v27 = (void *)MEMORY[0x1E4F54F48];
  }
  return [a2 setObject:v21 forKeyedSubscript:*v27];
}

- (uint64_t)_captureStillImageNowOnStreamWithOptions:(void *)a3 captureStreamProperties:
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v39 = v3;
    LODWORD(v37) = 0;
    FigDebugAssert3();
  }
  if (objc_msgSend(*(id *)(a1 + 2504), "captureType", v37, v39) == 2)
  {
    [(id)a1 setTorchLevel:0.0];
LABEL_12:
    int v41 = 0;
    goto LABEL_13;
  }
  if ([*(id *)(a1 + 2504) captureType] != 11) {
    goto LABEL_12;
  }
  int v41 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2504), "captureStreamSettingsForPortType:", objc_msgSend(*(id *)(a1 + 2504), "masterPortType")), "adaptiveBracketingGroupCaptureCount");
  if (v41 <= 1)
  {
    if (*(unsigned char *)(a1 + 2256))
    {
      uint64_t v7 = (void *)[*(id *)(a1 + 496) stream];
      [v7 sendCommandProperty:*MEMORY[0x1E4F54A40]];
    }
    if (*(unsigned char *)(a1 + 2257))
    {
      int v8 = (void *)[*(id *)(a1 + 496) stream];
      [v8 sendCommandProperty:*MEMORY[0x1E4F54A48]];
    }
  }
LABEL_13:
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v9 = [a3 countByEnumeratingWithState:&v54 objects:v60 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v55 != v11) {
          objc_enumerationMutation(a3);
        }
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 496), "stream"), "setProperty:value:", *(void *)(*((void *)&v54 + 1) + 8 * i), objc_msgSend(a3, "objectForKeyedSubscript:", *(void *)(*((void *)&v54 + 1) + 8 * i)));
      }
      uint64_t v10 = [a3 countByEnumeratingWithState:&v54 objects:v60 count:16];
    }
    while (v10);
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  int v13 = *(void **)(a1 + 552);
  uint64_t v14 = [v13 countByEnumeratingWithState:&v50 objects:v59 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v51;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v51 != v16) {
          objc_enumerationMutation(v13);
        }
        double v18 = *(void **)(*((void *)&v50 + 1) + 8 * j);
        if (objc_msgSend(*(id *)(a1 + 2504), "captureStreamSettingsForPortType:", objc_msgSend(v18, "portType"))) {
          [v18 willCaptureStillImageFromFirmware];
        }
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v50 objects:v59 count:16];
    }
    while (v15);
  }
  id v49 = 0;
  if (!*(unsigned char *)(a1 + 148))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
    uint64_t v19 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToStillImageCaptureOptionsIfNeeded:stillImageCaptureOptionsOut:](a1, a2, &v49);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
    if (v19)
    {
      FigDebugAssert3();
      return v19;
    }
  }
  int v20 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    [*(id *)(a1 + 2504) settingsID];
    [*(id *)(a1 + 2504) captureType];
    kdebug_trace();
  }
  if (*(unsigned char *)(a1 + 2528)) {
    uint64_t v21 = (void *)[*(id *)(a1 + 544) syncGroup];
  }
  else {
    uint64_t v21 = (void *)[*(id *)(a1 + 496) stream];
  }
  if (v49) {
    id v22 = v49;
  }
  else {
    id v22 = a2;
  }
  uint64_t v19 = [v21 setProperty:@"StillImageCaptureNow" value:v22];
  if (*v20 == 1)
  {
    [*(id *)(a1 + 2504) settingsID];
    [*(id *)(a1 + 2504) captureType];
    kdebug_trace();
  }
  if (v49)
  {

    id v49 = 0;
  }
  if (*(void *)(a1 + 3248)) {
    -[BWFigVideoCaptureDevice _resumeTimeMachines](a1);
  }
  if (v19 == -12688)
  {
    ++*(_DWORD *)(a1 + 2532);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2496));
    if (([*(id *)(a1 + 2504) captureFlags] & 0x2000) == 0)
    {
      *(unsigned char *)(a1 + 2536) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
      goto LABEL_49;
    }
    int v23 = *(_DWORD *)(a1 + 2532);
    *(unsigned char *)(a1 + 2536) = v23 < 8;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2496));
    if (v23 < 8)
    {
LABEL_49:
      if (dword_1EB4C4FF0)
      {
        int v48 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    if (dword_1EB4C4FF0)
    {
      int v48 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (v41 >= 2 && v19)
  {
    if (dword_1EB4C4FF0)
    {
      int v48 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    double v27 = objc_msgSend(*(id *)(a1 + 2504), "portTypes", v38, v40);
    uint64_t v28 = [v27 countByEnumeratingWithState:&v43 objects:v58 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v44;
      do
      {
        for (uint64_t k = 0; k != v29; ++k)
        {
          if (*(void *)v44 != v30) {
            objc_enumerationMutation(v27);
          }
          uint64_t v32 = *(void **)(*((void *)&v43 + 1) + 8 * k);
          uint64_t v33 = (void *)[*(id *)(a1 + 2504) captureStreamSettingsForPortType:v32];
          uint64_t v34 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, (uint64_t)v32);
          [v33 setReachedEndOfAdaptiveBracketing:1];
          if (objc_msgSend(v32, "isEqualToString:", objc_msgSend(*(id *)(a1 + 2504), "masterPortType")))
          {
            uint64_t v35 = (void *)[v34 stillImageCaptureDelegate];
            if (v33) {
              [v33 adaptiveBracketingLastFramePTS];
            }
            else {
              memset(v42, 0, sizeof(v42));
            }
            [v35 captureStream:v34 didCaptureReferenceFrameWithPTS:v42 referenceFrameBracketedCaptureSequenceNumber:0];
          }
          objc_msgSend((id)objc_msgSend(v34, "stillImageCaptureDelegate"), "captureStreamDidCompleteStillImageCapture:", v34);
        }
        uint64_t v29 = [v27 countByEnumeratingWithState:&v43 objects:v58 count:16];
      }
      while (v29);
    }
    [*(id *)(a1 + 2176) stopAdaptiveBracketingForSettings:*(void *)(a1 + 2504) withGroup:(v41 - 1)];
    [(id)a1 _resetStillImageCaptureRequestState];
    return 0;
  }
  return v19;
}

- (uint64_t)_ubAddSensorRawOutputBuffersToStillImageCaptureOptionsIfNeeded:(void *)a3 stillImageCaptureOptionsOut:
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  if (*(unsigned char *)(a1 + 148) || ![*(id *)(a1 + 152) objectForKeyedSubscript:&unk_1EFB015C8])
  {
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  int v20 = 0;
  uint64_t v6 = 0;
  if (!a3 || !*(unsigned char *)(a1 + 2050)) {
    goto LABEL_17;
  }
  if (([*(id *)(a1 + 2504) captureFlags] & 0x300000000) == 0)
  {
    int v20 = 0;
LABEL_27:
    uint64_t v6 = 0;
    goto LABEL_28;
  }
  int v20 = (void *)[a2 mutableCopy];
  if (*(unsigned char *)(a1 + 2528))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v7 = (void *)[*(id *)(a1 + 2504) captureStreamSettings];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v19 = a3;
      uint64_t v10 = *(void *)v23;
      uint64_t v11 = *MEMORY[0x1E4F54F80];
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v7);
          }
          int v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v14 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
          id v21 = 0;
          uint64_t v15 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:unifiedBracketedCaptureParamsOut:](a1, (void *)[v14 objectForKeyedSubscript:v11], &v21);
          if (v15)
          {
            uint64_t v6 = v15;
            FigDebugAssert3();
            a3 = v19;
            goto LABEL_22;
          }
          uint64_t v16 = (void *)[v14 mutableCopy];
          [v16 setObject:v21 forKeyedSubscript:v11];
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v16, objc_msgSend(v13, "portType"));
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
        if (v9) {
          continue;
        }
        break;
      }
      uint64_t v6 = 0;
      a3 = v19;
LABEL_17:
      if (!a3) {
        return v6;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  id v21 = 0;
  uint64_t v17 = *MEMORY[0x1E4F54F80];
  uint64_t v6 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:unifiedBracketedCaptureParamsOut:](a1, (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F54F80]], &v21);
  if (v6)
  {
    FigDebugAssert3();
LABEL_22:

LABEL_23:
    int v20 = 0;
    if (!a3) {
      return v6;
    }
    goto LABEL_28;
  }
  [v20 setObject:v21 forKeyedSubscript:v17];

LABEL_28:
  *a3 = v20;
  return v6;
}

- (uint64_t)_stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:(uint64_t)a3 masterPortType:(uint64_t)a4 captureType:(uint64_t)a5 captureFlags:
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 1280);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  if (!*(unsigned char *)(a1 + 2592))
  {
    os_unfair_lock_unlock(v10);
    goto LABEL_22;
  }
  unsigned __int8 v11 = -[BWFigVideoCaptureDevice _isSwitchOverPreventingStillImageCaptureInProgress]((const os_unfair_lock *)a1);
  os_unfair_lock_unlock(v10);
  if ((v11 & 1) == 0)
  {
LABEL_22:
    uint64_t v28 = [a2 objectForKeyedSubscript:a3];
    uint64_t v16 = 1;
    if (a4 > 0xB || ((1 << a4) & 0x906) == 0) {
      return v16;
    }
    if (!*(void *)(a1 + 3248))
    {
      uint64_t v29 = (void *)v28;
      if (a4 == 1 && (unint64_t)[a2 frameCount] < 5)
      {
        uint64_t v48 = a5;
        BOOL v12 = 0;
        BOOL v13 = 0;
        BOOL v14 = 0;
        unsigned __int8 v15 = 0;
        uint64_t v16 = 4;
        goto LABEL_5;
      }
      uint64_t v47 = v29;
      if ((a5 & 0x400) != 0)
      {
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        uint64_t v31 = [a2 countByEnumeratingWithState:&v55 objects:v78 count:16];
        if (v31)
        {
          uint64_t v32 = v31;
          unsigned __int8 v15 = 0;
          uint64_t v33 = *(void *)v56;
          do
          {
            for (uint64_t i = 0; i != v32; ++i)
            {
              if (*(void *)v56 != v33) {
                objc_enumerationMutation(a2);
              }
              v15 |= objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(*((void *)&v55 + 1) + 8 * i)), "afStatus") == 2;
            }
            uint64_t v32 = [a2 countByEnumeratingWithState:&v55 objects:v78 count:16];
          }
          while (v32);
        }
        else
        {
          unsigned __int8 v15 = 0;
        }
      }
      else
      {
        unsigned __int8 v15 = [v29 afStatus] == 2;
      }
      if (a4 == 11)
      {
        if ((int)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2504), "captureStreamSettingsForPortType:", a3), "adaptiveBracketingGroupCaptureCount") > 1)return 1; {
        uint64_t v48 = a5;
        }
        if ((a5 & 0x200) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2288));
          float v35 = *(float *)(a1 + 2292);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2288));
          if (v35 < *(float *)(a1 + 2284) && *(_DWORD *)(a1 + 2488) < *(_DWORD *)(a1 + 2260))
          {
            if (dword_1EB4C4FF0)
            {
              unsigned int v54 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            BOOL v12 = 0;
            BOOL v13 = 0;
            BOOL v14 = 0;
            uint64_t v16 = 3;
            goto LABEL_5;
          }
        }
        uint64_t v42 = v47;
        [v47 focusingMethod];
        BOOL v13 = 0;
        BOOL v14 = FigCaptureStreamFocusingMethodIsContrastBased() != 0;
        unsigned __int8 v15 = v14;
      }
      else
      {
        uint64_t v48 = a5;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        uint64_t v37 = [a2 countByEnumeratingWithState:&v49 objects:v77 count:16];
        if (v37)
        {
          uint64_t v38 = v37;
          LOBYTE(v13) = 0;
          LOBYTE(v14) = 0;
          uint64_t v39 = *(void *)v50;
          do
          {
            for (uint64_t j = 0; j != v38; ++j)
            {
              if (*(void *)v50 != v39) {
                objc_enumerationMutation(a2);
              }
              int v41 = (void *)[a2 objectForKeyedSubscript:*(void *)(*((void *)&v49 + 1) + 8 * j)];
              [v41 focusingMethod];
              BOOL v14 = (FigCaptureStreamFocusingMethodIsContrastBased() | v14) != 0;
              [v41 focusingMethod];
              BOOL v13 = (FigCaptureStreamFocusingMethodIsPhaseDetectionBased() | v13) != 0;
            }
            uint64_t v38 = [a2 countByEnumeratingWithState:&v49 objects:v77 count:16];
          }
          while (v38);
        }
        else
        {
          BOOL v13 = 0;
          BOOL v14 = 0;
        }
        uint64_t v42 = v47;
      }
      int v43 = *(_DWORD *)(a1 + 2492);
      if (v14 || v13)
      {
        uint64_t v44 = 1976;
        if (v14) {
          uint64_t v44 = 1972;
        }
        int v45 = *(_DWORD *)(a1 + v44);
        if (v43 <= v45) {
          int v43 = v45;
        }
      }
      BOOL v12 = *(_DWORD *)(a1 + 2488) >= *(_DWORD *)(a1 + 2596) + v43;
      if ((v15 ^ 1) & 1 | (*(_DWORD *)(a1 + 2488) >= *(_DWORD *)(a1 + 2596) + v43)) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = 2;
      }
      if (a4 != 11 || !((v15 ^ 1) & 1 | (*(_DWORD *)(a1 + 2488) >= *(_DWORD *)(a1 + 2596) + v43))) {
        goto LABEL_5;
      }
      *(unsigned char *)(a1 + 2256) = [v42 aeLocked] ^ 1;
      *(unsigned char *)(a1 + 2257) = [v42 afLocked] ^ 1;
    }
    return 1;
  }
  uint64_t v48 = a5;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  unsigned __int8 v15 = 0;
  uint64_t v16 = 5;
LABEL_5:
  if (v16 >= 2 && dword_1EB4C4FF0)
  {
    BOOL v46 = v12;
    unsigned int v54 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v18 = v54;
    if (os_log_type_enabled(v17, type)) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      uint64_t v20 = objc_msgSend(NSString, "stringWithFormat:", @"%d", v16);
      uint64_t v21 = BWPhotoEncoderStringFromEncodingScheme(a4);
      uint64_t v22 = BWStillImageCaptureFrameFlagsToShortString(v48);
      long long v23 = @"NO";
      int v24 = *(_DWORD *)(a1 + 2488);
      int v25 = *(_DWORD *)(a1 + 2492);
      int v59 = 136317186;
      uint64_t v60 = "-[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:ca"
            "ptureType:captureFlags:]";
      if (v15) {
        uint64_t v26 = @"YES";
      }
      else {
        uint64_t v26 = @"NO";
      }
      uint64_t v62 = v20;
      uint64_t v27 = @"None";
      __int16 v61 = 2112;
      __int16 v63 = 2112;
      uint64_t v64 = v21;
      if (v13) {
        uint64_t v27 = @"NonCBAF";
      }
      __int16 v65 = 2112;
      if (v14) {
        uint64_t v27 = @"CBAF";
      }
      uint64_t v66 = v22;
      if (v46) {
        long long v23 = @"YES";
      }
      __int16 v67 = 2112;
      uint64_t v68 = v26;
      __int16 v69 = 2112;
      uint64_t v70 = v27;
      __int16 v71 = 2112;
      uint64_t v72 = v23;
      __int16 v73 = 1024;
      int v74 = v24;
      __int16 v75 = 1024;
      int v76 = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v16;
}

- (void)_logStillImageCaptureTimingStatisticsForCoreAnalytics
{
  if (a1)
  {
    uint64_t v2 = [*(id *)(a1 + 2504) stillImageRequestTime];
    ++*(_DWORD *)(a1 + 3336);
    if (([*(id *)(a1 + 2504) captureFlags] & 0x4000) != 0) {
      goto LABEL_4;
    }
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    int v19 = 0;
    uint64_t v3 = *(NSObject **)(a1 + 1576);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __80__BWFigVideoCaptureDevice__logStillImageCaptureTimingStatisticsForCoreAnalytics__block_invoke;
    v15[3] = &unk_1E5C246B8;
    v15[4] = a1;
    v15[5] = &v16;
    dispatch_sync(v3, v15);
    int v4 = *((_DWORD *)v17 + 6);
    _Block_object_dispose(&v16, 8);
    if (v4 == 2)
    {
LABEL_4:
      ++*(_DWORD *)(a1 + 3340);
      return;
    }
    ++*(_DWORD *)(a1 + 3344);
    if (!*(_DWORD *)(a1 + 3356)) {
      *(_DWORD *)(a1 + 3356) = FigHostTimeToNanoseconds() / 0xF4240uLL;
    }
    if (!*(void *)(a1 + 3360)) {
      goto LABEL_31;
    }
    unint64_t v5 = FigHostTimeToNanoseconds() / 0xF4240uLL;
    unsigned int v6 = *(_DWORD *)(a1 + 3372);
    if (v6 <= v5) {
      unsigned int v6 = v5;
    }
    *(_DWORD *)(a1 + 3372) = v6;
    unsigned int v7 = *(_DWORD *)(a1 + 3368);
    if (v7 >= v5) {
      unsigned int v7 = v5;
    }
    *(_DWORD *)(a1 + 3368) = v7;
    if (v5 > 0x1F3)
    {
      if (*(unsigned char *)(a1 + 3392)) {
        *(unsigned char *)(a1 + 3392) = 0;
      }
      *(_DWORD *)(a1 + 3404) = 0;
      uint64_t v9 = (unsigned int *)(a1 + 3408);
      if (v5 > 0x3E7)
      {
        if (*(unsigned char *)(a1 + 3393)) {
          *(unsigned char *)(a1 + 3393) = 0;
        }
        *uint64_t v9 = 0;
        goto LABEL_31;
      }
      uint64_t v10 = (unsigned int *)(a1 + 3400);
      unsigned __int8 v11 = (_DWORD *)(a1 + 3380);
      if (*(unsigned char *)(a1 + 3393))
      {
LABEL_28:
        ++*v11;
        unsigned int v12 = *v9;
        unsigned int v13 = *v9 + 1;
        *uint64_t v9 = v13;
        unsigned int v14 = *v10;
        if (*v10 <= v13) {
          unsigned int v14 = v12 + 1;
        }
        *uint64_t v10 = v14;
LABEL_31:
        *(void *)(a1 + 3360) = v2;
        return;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 3392))
      {
        unsigned int v8 = *(_DWORD *)(a1 + 3404) + 1;
      }
      else
      {
        *(unsigned char *)(a1 + 3392) = 1;
        ++*(_DWORD *)(a1 + 3384);
        unsigned int v8 = 2;
      }
      ++*(_DWORD *)(a1 + 3376);
      *(_DWORD *)(a1 + 3404) = v8;
      if (*(_DWORD *)(a1 + 3396) > v8) {
        unsigned int v8 = *(_DWORD *)(a1 + 3396);
      }
      *(_DWORD *)(a1 + 3396) = v8;
      unsigned __int8 v11 = (_DWORD *)(a1 + 3380);
      uint64_t v9 = (unsigned int *)(a1 + 3408);
      uint64_t v10 = (unsigned int *)(a1 + 3400);
      if (*(unsigned char *)(a1 + 3393)) {
        goto LABEL_28;
      }
    }
    *(unsigned char *)(a1 + 3393) = 1;
    ++*(_DWORD *)(a1 + 3388);
    *(_DWORD *)(a1 + 3408) = 1;
    goto LABEL_28;
  }
}

- (char)_terminateCaptureAndEmitStillImageCaptureError:(char *)result stillImageCaptureNowOptions:(uint64_t)a2 stillImageCaptureStreamProperties:
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (result && a2)
  {
    uint64_t v3 = result;
    int v4 = [result isBravoVariant];
    uint64_t v5 = 496;
    if (v4) {
      uint64_t v5 = 1288;
    }
    [*(id *)&v3[v5] portType];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    unsigned int v6 = (void *)*((void *)v3 + 69);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned __int8 v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          if (objc_msgSend(*((id *)v3 + 313), "captureStreamSettingsForPortType:", objc_msgSend(v11, "portType"))) {
            [v11 failedToCaptureStillImageFromFirmwareWithError:a2];
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }
    return (char *)[v3 _resetStillImageCaptureRequestState];
  }
  return result;
}

- (void)_addStillImageSettingsToStillImageSampleBuffer:(uint64_t)a1
{
  if (a1)
  {
    if (target)
    {
      CMSetAttachment(target, @"BWStillImageCaptureSettings", *(CFTypeRef *)(a1 + 2504), 1u);
      int v4 = (const void *)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 2504), "captureType"));
      CMSetAttachment(target, @"StillImageCaptureType", v4, 1u);
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

- (uint64_t)_addPreviewWhiteBalanceMetadataToStillImageSampleBuffer:(uint64_t)result
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 2504), "metadata"), "previewWhiteBalanceMetadataByPortType"), "count");
      if (result)
      {
        uint64_t result = [*(id *)(v3 + 2504) captureFlags];
        if ((result & 4) != 0)
        {
          int v4 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
          uint64_t v5 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
          unsigned int v6 = *(void **)(v3 + 1456);
          if (!v6 || (uint64_t result = objc_msgSend(v5, "isEqualToString:", objc_msgSend(v6, "portType")), (result & 1) == 0))
          {
            if ((unint64_t v7 = (unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(a2),
                  uint64_t v8 = [*(id *)(v3 + 2504) captureFlags],
                  uint64_t result = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue"), v7 >> 62)&& (v7 & 0x3000000000000000) == 0|| (v8 & 0x300000000) != 0 && result == 1)
            {
              uint64_t v9 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2504), "metadata"), "previewWhiteBalanceMetadataByPortType"), "objectForKeyedSubscript:", v5);
              return [v4 addEntriesFromDictionary:v9];
            }
          }
        }
      }
    }
  }
  return result;
}

- (uint64_t)_addADRCExposureRealizedGainToStillImageSampleBuffer:(uint64_t)result
{
  if (result)
  {
    if (target)
    {
      uint64_t v2 = result;
      uint64_t v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      int v4 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
      uint64_t v5 = *(void **)(v2 + 1456);
      if (!v5 || (uint64_t result = objc_msgSend(v4, "isEqualToString:", objc_msgSend(v5, "portType")), (result & 1) == 0))
      {
        uint64_t result = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue");
        if ((int)result >= 1)
        {
          uint64_t v6 = *MEMORY[0x1E4F53548];
          uint64_t result = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F53548]];
          if (result)
          {
            float v7 = 1.0;
            if (objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", v6), "intValue") - 3 <= 0xFFFFFFFD)
            {
              os_unfair_lock_lock((os_unfair_lock_t)(v2 + 1948));
              [*(id *)(v2 + 1952) adrcExposureRealizedGain];
              float v7 = v8;
              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 1948));
            }
            objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", @"ADRCExposureRealizedGain"), "floatValue");
            *(float *)&double v9 = v7;
            uint64_t v10 = [NSNumber numberWithFloat:v9];
            return [v3 setObject:v10 forKeyedSubscript:@"ADRCExposureRealizedGain"];
          }
        }
      }
    }
  }
  return result;
}

- (uint64_t)_addAutofocusAndDiagnosticMetadata:(uint64_t)result
{
  if (result)
  {
    if (target)
    {
      uint64_t v3 = result;
      CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F53070];
      CFTypeRef v5 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      if (!v5)
      {
        CFTypeRef v5 = (CFTypeRef)[MEMORY[0x1E4F1CA60] dictionary];
        CMSetAttachment(target, v4, v5, 1u);
      }
      uint64_t v6 = *(NSObject **)(v3 + 1576);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __62__BWFigVideoCaptureDevice__addAutofocusAndDiagnosticMetadata___block_invoke;
      block[3] = &unk_1E5C249A0;
      void block[5] = v5;
      void block[6] = target;
      block[4] = v3;
      dispatch_sync(v6, block);
      return -[BWFigVideoCaptureDevice _addValidationAndCoreRepairStatusesToSampleBuffer:](v3, target);
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

- (void)_addPortraitSceneMonitoringMetadataToSampleBuffer:(uint64_t)a1
{
  if (a1)
  {
    if (!a2) {
      goto LABEL_8;
    }
    CFStringRef v4 = (os_unfair_lock_s *)(a1 + 1492);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1492));
    [*(id *)(a1 + 1512) focusDistanceToMaxAllowedFocusDistanceRatio];
    float v6 = v5;
    os_unfair_lock_unlock(v4);
    if (v6 == 0.0) {
      return;
    }
    CFTypeRef v7 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v7)
    {
      double v9 = (void *)v7;
      *(float *)&double v8 = v6;
      uint64_t v10 = [NSNumber numberWithFloat:v8];
      uint64_t v11 = *MEMORY[0x1E4F55BE0];
      [v9 setObject:v10 forKeyedSubscript:v11];
    }
    else
    {
LABEL_8:
      FigDebugAssert3();
    }
  }
}

void *__62__BWFigVideoCaptureDevice__addAutofocusAndDiagnosticMetadata___block_invoke(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(result[4] + 1600)) {
    return (void *)FigSampleBufferAutofocusProcessorAddTimestampedMetadata(*(void *)(result[4] + 1600), result[6], result[5], a4);
  }
  return result;
}

- (void)_resetStillImageCaptureRequestState
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  p_skippedFramesCountForStillImageCaptureRetrdouble y = (os_unfair_lock_s *)&self->_skippedFramesCountForStillImageCaptureRetry;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  BOOL digitalFlashLockingAE = self->_digitalFlashLockingAE;
  BOOL digitalFlashLockingAF = self->_digitalFlashLockingAF;
  self->_BOOL digitalFlashLockingAE = 0;
  *(_WORD *)&self->_BOOL digitalFlashLockingAF = 0;
  __int16 v6 = [*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque captureFlags];
  -[BWFigVideoCaptureDevice _resetStillImageCaptureRequestStateInternal]((uint64_t)self);
  os_unfair_lock_unlock(p_skippedFramesCountForStillImageCaptureRetry);
  -[BWFigVideoCaptureDevice _resumeTimeMachines]((uint64_t)self);
  if (digitalFlashLockingAE)
  {
    CFTypeRef v7 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    [(BWFigCaptureStream *)v7 sendCommandProperty:*MEMORY[0x1E4F54C80]];
  }
  if (digitalFlashLockingAF)
  {
    double v8 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
    [(BWFigCaptureStream *)v8 sendCommandProperty:*MEMORY[0x1E4F54870]];
  }
  if ((v6 & 0x200) != 0)
  {
    if (dword_1EB4C4FF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    float supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate = self->_supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate;
    id v11 = [(FigWeakReference *)self->_supplementalPointCloudCaptureDevice referencedObject];
    *(float *)&double v12 = supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate;
    [v11 setMinimumFrameRate:v12];
  }

  *(void *)&self->_smartCameraVersion.patch = 0;
  os_unfair_lock_lock(&self->_switchOverLock);
  LOWORD(self->_lastStillImageCaptureEndPTS.epoch) = 0;
  [*(id *)&self->_retryCaptureStillImageNow transitionToState:2];
  os_unfair_lock_unlock(&self->_switchOverLock);
}

char *__88__BWFigVideoCaptureDevice__serviceRetryStillImageCaptureUsingFrameStatisticsByPortType___block_invoke(uint64_t a1)
{
  uint64_t result = (char *)-[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](*(void *)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 2512), *(void **)(*(void *)(a1 + 32) + 2520));
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    CFStringRef v4 = *(char **)(a1 + 32);
    return -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:](v4, v3);
  }
  return result;
}

uint64_t __80__BWFigVideoCaptureDevice__logStillImageCaptureTimingStatisticsForCoreAnalytics__block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 1824);
  return result;
}

- (id)copyISPProcessingSessionWithType:(int)a3 error:(int *)a4
{
  return [(BWFigCaptureDevice *)self->_device copyISPProcessingSessionWithType:*(void *)&a3 error:a4];
}

- (CGRect)sensorRegionOfInterestForCameraControls
{
  double v2 = *(double *)&self->_timeToCriticalSystemPressureInMS;
  double v3 = *(double *)&self->_factorsContributingToMaxSystemPressureLevel;
  double x = self->_regionOfInterestForCameraControls.origin.x;
  double y = self->_regionOfInterestForCameraControls.origin.y;
  result.size.CGFloat height = y;
  result.size.CGFloat width = x;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

- (uint64_t)_updateSensorRegionOfInterestForActiveFraming
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 181) || !*(unsigned char *)(result + 4072) || !*(unsigned char *)(result + 3548)) {
    return result;
  }
  if (*(unsigned char *)(result + 3624) && !*(unsigned char *)(result + 232))
  {
    objc_msgSend((id)objc_msgSend(*(id *)(result + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 1);
    double v8 = (void *)[*(id *)(v1 + 4080) referencedObject];
    uint64_t v9 = 1;
  }
  else
  {
    if (!*(unsigned char *)(result + 4009)
      || *(unsigned char *)(result + 4088)
      || *(unsigned char *)(result + 232)
      || (v11.origin.double x = 0.0,
          v11.origin.double y = 0.0,
          v11.size.CGFloat width = 1.0,
          v11.size.CGFloat height = 1.0,
          CGRectEqualToRect(*(CGRect *)(result + 3960), v11)))
    {
      objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 0);
      objc_msgSend((id)objc_msgSend(*(id *)(v1 + 4080), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 0);
      uint64_t v2 = *MEMORY[0x1E4F54B58];
      double v3 = *(double *)(v1 + 3552);
      double v4 = *(double *)(v1 + 3560);
      double v5 = *(double *)(v1 + 3568);
      double v6 = *(double *)(v1 + 3576);
      double v7 = *MEMORY[0x1E4F1DAD8];
      return -[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v1, v2, v3, v4, v5, v6, 1.0, v7);
    }
    objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 1);
    double v8 = (void *)[*(id *)(v1 + 4080) referencedObject];
    uint64_t v9 = 0;
  }
  return [v8 setRegionOfInterestForCameraControlsFeedbackEnabled:v9];
}

- (int)setContinuousAutoFocusRect:(CGRect)a3 isFocusRectInOverscanSpace:(BOOL)a4
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  if (!_FigIsNotCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke;
  block[3] = &unk_1E5C2B7B8;
  *(CGFloat *)&void block[6] = x;
  *(CGFloat *)&void block[7] = y;
  *(CGFloat *)&void block[8] = width;
  *(CGFloat *)&block[9] = height;
  BOOL v14 = a4;
  block[4] = self;
  void block[5] = &v15;
  dispatch_sync(focusAndExposureUpdateQueue, block);
  int v11 = *((_DWORD *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke(uint64_t a1)
{
  uint64_t v2 = 3584;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v2 = 1760;
  }
  uint64_t v3 = 3592;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v3 = 1768;
  }
  uint64_t v4 = 3600;
  if (!*(unsigned char *)(a1 + 80)) {
    uint64_t v4 = 1776;
  }
  double v5 = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(*(void *)(a1 + 32) + v2), *(double *)(*(void *)(a1 + 32) + v3), *(double *)(*(void *)(a1 + 32) + v4));
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  [*(id *)(a1 + 32) zoomFactor];
  double v13 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v5, v7, v9, v11, v12, *MEMORY[0x1E4F1DAD8]);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke_2;
  void v18[3] = &unk_1E5C2B790;
  double v20 = v13;
  uint64_t v21 = v14;
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  long long v19 = *(_OWORD *)(a1 + 32);
  dispatch_sync(*(dispatch_queue_t *)(v19 + 1576), v18);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    uint64_t v17 = *(double **)(a1 + 32);
    v17[212] = v5;
    v17[213] = v7;
    v17[214] = v9;
    v17[215] = v11;
  }
}

void __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke_2(uint64_t a1)
{
  DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(*(CGRect *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(void *)(a1 + 32), @"ContinuousAutoFocusAreaOfInterest", DictionaryRepresentation);
  if (DictionaryRepresentation)
  {
    CFRelease(DictionaryRepresentation);
  }
}

- (int)setFocusModeManualWithLensPosition:(float)a3 requestID:(int)a4
{
  uint64_t v4 = *(void *)&a4;
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a3 != 3.4028e38)
  {
    uint64_t v10 = (int)((float)(1.0 - a3) * 255.0);
    goto LABEL_12;
  }
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  BOOL v6 = [(BWFigVideoCaptureDevice *)self isBravoVariant];
  int apsMode = self->_apsMode;
  if (!v6)
  {
    if (apsMode != 8)
    {
      uint64_t v10 = 0x7FFFFFFFLL;
      goto LABEL_11;
    }
    id v8 = [(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType objectForKeyedSubscript:[(BWFigVideoCaptureStream *)self->_captureStream portType]];
    goto LABEL_8;
  }
  id v8 = [(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType objectForKeyedSubscript:[(BWFigVideoCaptureStream *)self->_captureStream portType]];
  if (apsMode == 8)
  {
LABEL_8:
    uint64_t v9 = [v8 logicalFocusLensPosition];
    goto LABEL_9;
  }
  uint64_t v9 = [v8 focusPosition];
LABEL_9:
  uint64_t v10 = v9;
LABEL_11:
  os_unfair_lock_unlock(&self->_frameStatisticsLock);
LABEL_12:
  v15[0] = *MEMORY[0x1E4F53A80];
  v16[0] = [NSNumber numberWithInt:v10];
  v15[1] = *MEMORY[0x1E4F52E90];
  v16[1] = [NSNumber numberWithInt:v4];
  int v11 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A000, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:2]);
  if (v11)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __72__BWFigVideoCaptureDevice_setFocusModeManualWithLensPosition_requestID___block_invoke;
    block[3] = &unk_1E5C24430;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v11;
}

__n128 __72__BWFigVideoCaptureDevice_setFocusModeManualWithLensPosition_requestID___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(v1 + 1696) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(v1 + 1712) = v3;
  return result;
}

- (float)lensPosition
{
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  float v3 = *(float *)&self->_manualPropertyMutex;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (void)setCinematicVideoFocus:(id)a3
{
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  variableFrameRateUpdateQueue = self->_variableFrameRateUpdateQueue;
  if (variableFrameRateUpdateQueue != a3)
  {

    self->_variableFrameRateUpdateQueue = (OS_dispatch_queue *)[a3 mutableCopy];
  }
  os_unfair_lock_unlock(p_sdofLock);
}

- (CGRect)regionOfInterestWithoutOverscan
{
  double x = self->_regionOfInterestWithoutOverscan.origin.x;
  double y = self->_regionOfInterestWithoutOverscan.origin.y;
  double width = self->_regionOfInterestWithoutOverscan.size.width;
  double height = self->_regionOfInterestWithoutOverscan.size.height;
  result.size.double height = height;
  result.size.double width = width;
  result.origin.double y = y;
  result.origin.double x = x;
  return result;
}

- (uint64_t)_setSmoothFocusEnabled:(uint64_t)a1
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 1552);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __50__BWFigVideoCaptureDevice__setSmoothFocusEnabled___block_invoke;
  v5[3] = &unk_1E5C2B7E0;
  char v6 = a2;
  v5[4] = a1;
  void v5[5] = &v7;
  void v5[6] = 0x1EFA5A020;
  dispatch_sync(v2, v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __50__BWFigVideoCaptureDevice__setSmoothFocusEnabled___block_invoke(uint64_t a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = @"smooth";
  v4[0] = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  uint64_t result = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](*(void *)(a1 + 32), *(void *)(a1 + 48), [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:&v3 count:1]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (int)setExposureModeLocked
{
  int v3 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA59F20, *MEMORY[0x1E4F1D260]);
  if (v3)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __48__BWFigVideoCaptureDevice_setExposureModeLocked__block_invoke;
    block[3] = &unk_1E5C24430;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v3;
}

__n128 __48__BWFigVideoCaptureDevice_setExposureModeLocked__block_invoke(uint64_t a1)
{
  uint64_t v1 = (_OWORD *)(*(void *)(a1 + 32) + 1656);
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *uint64_t v1 = *MEMORY[0x1E4F1DB20];
  v1[1] = v3;
  return result;
}

- (float)exposureTargetBias
{
  if (!a1) {
    return 0.0;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2632));
  float v2 = *(float *)(a1 + 2672);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2632));
  return v2;
}

- (int)setExposureModeCustomWithExposureDuration:(id *)a3 minFrameRate:(double)a4 maxFrameRate:(double)a5 ISO:(float)a6 requestID:(int)a7
{
  uint64_t v7 = *(void *)&a7;
  void v19[5] = *MEMORY[0x1E4F143B8];
  CMTime time = *(CMTime *)a3;
  v18[0] = @"IntegrationTime";
  v19[0] = [NSNumber numberWithDouble:CMTimeGetSeconds(&time)];
  v18[1] = @"ISO";
  *(float *)&double v12 = a6;
  v19[1] = [NSNumber numberWithFloat:v12];
  v18[2] = @"ManualExposureMinFrameRate";
  v19[2] = [NSNumber numberWithDouble:a4];
  void v18[3] = @"ManualExposureMaxFrameRate";
  v19[3] = [NSNumber numberWithDouble:a5];
  void v18[4] = *MEMORY[0x1E4F52E90];
  v19[4] = [NSNumber numberWithInt:v7];
  int v13 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA59F40, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:5]);
  if (v13)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __109__BWFigVideoCaptureDevice_setExposureModeCustomWithExposureDuration_minFrameRate_maxFrameRate_ISO_requestID___block_invoke;
    block[3] = &unk_1E5C24430;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v13;
}

__n128 __109__BWFigVideoCaptureDevice_setExposureModeCustomWithExposureDuration_minFrameRate_maxFrameRate_ISO_requestID___block_invoke(uint64_t a1)
{
  uint64_t v1 = (_OWORD *)(*(void *)(a1 + 32) + 1656);
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *uint64_t v1 = *MEMORY[0x1E4F1DB20];
  v1[1] = v3;
  return result;
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)exposureDuration
{
  retstr->int64_t var0 = 0;
  *(void *)&retstr->unint64_t var1 = 0;
  retstr->int64_t var3 = 0;
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  *(_OWORD *)&retstr->int64_t var0 = *(_OWORD *)((char *)&self->_manualPropertyMutex + 4);
  retstr->int64_t var3 = *(int64_t *)((char *)&self->_exposureDuration.value + 4);
  observedProperties = self->_observedProperties;
  return ($3CC8671D27C23BF42ADDB32F2B5E48AE *)pthread_mutex_unlock((pthread_mutex_t *)observedProperties);
}

- (float)ISO
{
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  float v3 = *(float *)&self->_exposureDuration.flags;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (float)exposureTargetOffset
{
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  float v3 = *((float *)&self->_exposureDuration.epoch + 1);
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (void)setMaxExposureDurationClientOverride:(id *)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v14 = *MEMORY[0x1E4F1F9F0];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
  v21.CMTimeEpoch epoch = v5;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)&v21.CMTimeValue value = v14;
  captureStreams = self->_captureStreams;
  uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v17 objects:v24 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(captureStreams);
        }
        int v11 = *(BWFigVideoCaptureStream **)(*((void *)&v17 + 1) + 8 * i);
        memset(&time1, 0, sizeof(time1));
        if (v11)
        {
          CMTime time2 = (CMTime)*a3;
          [(BWFigVideoCaptureStream *)v11 updateMaxExposureDurationClientOverride:&time2];
        }
        if (v11 == self->_captureStream) {
          CMTime v21 = time1;
        }
        if (v11 == self->_bravoTelephotoCaptureStream)
        {
          [(BWFigVideoCaptureStream *)v11 maxEIT];
          -[BWBravoStreamSelector setTeleMaxEIT:](self->_bravoStreamSelector, "setTeleMaxEIT:");
        }
      }
      uint64_t v8 = [(NSArray *)captureStreams countByEnumeratingWithState:&v17 objects:v24 count:16];
    }
    while (v8);
  }
  CMTime time1 = v21;
  *(_OWORD *)&time2.CMTimeValue value = v14;
  time2.CMTimeEpoch epoch = v5;
  if (CMTimeCompare(&time1, &time2))
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time1 = v21;
    CFDictionaryRef v13 = CMTimeCopyAsDictionary(&time1, v12);
    uint64_t v22 = @"NewPropertyValue";
    CFDictionaryRef v23 = v13;
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"MaxExposureDurationChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1]);
  }
}

- (void)_updateVariableFrameRateSettings
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    float v2 = (os_unfair_lock_s *)(a1 + 3728);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3728));
    float v3 = *(float *)(a1 + 3712);
    float v4 = *(float *)(a1 + 3716);
    os_unfair_lock_unlock(v2);
    if (v3 != v4)
    {
      locuint64_t k = v2;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      CMTimeEpoch v5 = *(void **)(a1 + 552);
      uint64_t v6 = [v5 countByEnumeratingWithState:&v35 objects:v39 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v36;
        uint64_t v9 = *MEMORY[0x1E4F52DF0];
        uint64_t v10 = *MEMORY[0x1E4F54730];
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v36 != v8) {
              objc_enumerationMutation(v5);
            }
            CFAllocatorRef v12 = *(void **)(*((void *)&v35 + 1) + 8 * i);
            int v13 = objc_msgSend((id)objc_msgSend(v12, "portType"), "isEqualToString:", v9);
            if (v13) {
              BOOL v14 = v3 == 24.0;
            }
            else {
              BOOL v14 = 0;
            }
            if (!v14)
            {
              int v15 = v13;
              objc_msgSend(*(id *)(a1 + 3704), "getAEMaxGainForPortType:suggestedFrameRate:", objc_msgSend(v12, "portType"), v3);
              float v17 = v16;
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 3720), "objectForKeyedSubscript:", objc_msgSend(v12, "portType")), "floatValue");
              float v19 = v18;
              *(float *)&double v20 = v3;
              [v12 setMaximumFrameRate:v20];
              *(float *)&double v21 = v3;
              [v12 setMinimumFrameRate:v21];
              if (v17 > 0.0 && v17 != v19)
              {
                CFDictionaryRef v23 = (void *)[v12 stream];
                LODWORD(v24) = vcvts_n_s32_f32(v17, 8uLL);
                if (!objc_msgSend(v23, "setProperty:value:", v10, objc_msgSend(NSNumber, "numberWithInt:", v24)))
                {
                  *(float *)&double v25 = v17;
                  [v12 setAeMaxGain:v25];
                  *(float *)&double v26 = v17;
                  uint64_t v34 = [NSNumber numberWithFloat:v26];
                  uint64_t v27 = v5;
                  uint64_t v28 = v10;
                  uint64_t v29 = *(void **)(a1 + 3720);
                  uint64_t v30 = [v12 portType];
                  uint64_t v31 = v29;
                  uint64_t v10 = v28;
                  CMTimeEpoch v5 = v27;
                  [v31 setObject:v34 forKeyedSubscript:v30];
                  if (v15)
                  {
                    *(float *)&double v32 = v17;
                    [*(id *)(a1 + 1312) setTeleMaxAEGain:v32];
                    [v12 maxEIT];
                    objc_msgSend(*(id *)(a1 + 1312), "setTeleMaxEIT:");
                  }
                }
              }
            }
          }
          uint64_t v7 = [v5 countByEnumeratingWithState:&v35 objects:v39 count:16];
        }
        while (v7);
      }
      os_unfair_lock_lock(lock);
      *(float *)(a1 + 3716) = v3;
      os_unfair_lock_unlock(lock);
    }
  }
}

void __113__BWFigVideoCaptureDevice__serviceVariableFrameRateWithSampleBuffer_fromCaptureStream_frameStatisticsByPortType___block_invoke(uint64_t a1)
{
}

- (int)stereoVideoCaptureStatus
{
  float v2 = self;
  p_stereoVideoCaptureSceneMonitorLocuint64_t k = &self->_stereoVideoCaptureSceneMonitorLock;
  os_unfair_lock_lock(&self->_stereoVideoCaptureSceneMonitorLock);
  LODWORD(v2) = v2->_stereoVideoCaptureStatus;
  os_unfair_lock_unlock(p_stereoVideoCaptureSceneMonitorLock);
  return (int)v2;
}

- (void)_updateStereoVideoCaptureStatus:(os_unfair_lock_s *)a1
{
  if (a1)
  {
    float v4 = a1 + 385;
    os_unfair_lock_lock(a1 + 385);
    if (a1[384]._os_unfair_lock_opaque == a2)
    {
      os_unfair_lock_unlock(v4);
    }
    else
    {
      a1[384]._uint64_t os_unfair_lock_opaque = a2;
      os_unfair_lock_unlock(v4);
      uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithInt:", a2), @"NewPropertyValue", 0);
      [(os_unfair_lock_s *)a1 _postNotificationWithPayload:@"StereoVideoCaptureStatusChanged" notificationPayload:v5];
    }
  }
}

- (BOOL)stereoPhotoCaptureEnabled
{
  return self->_stereoPhotoCaptureEnabled;
}

- (void)setAutoImageControlMode:(int)a3 completionHandler:(id)a4
{
}

- (int)setImageControlMode:(int)a3
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __47__BWFigVideoCaptureDevice_setImageControlMode___block_invoke;
  block[3] = &unk_1E5C2B8E8;
  block[4] = self;
  void block[5] = &v8;
  int v7 = a3;
  dispatch_sync(autofocusProcessorQueue, block);
  int v4 = *((_DWORD *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void __47__BWFigVideoCaptureDevice_setImageControlMode___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 1816))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = FigSignalErrorAt();
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 1824);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](v2, *(_DWORD *)(a1 + 48));
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
      -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](*(void *)(a1 + 32), *(_DWORD *)(a1 + 48), v3);
      int v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 1948);
      os_unfair_lock_unlock(v4);
    }
  }
}

- (int)setWhiteBalanceModeLockedWithGains:(id)a3 requestID:(int)a4
{
  uint64_t v4 = *(void *)&a4;
  float var2 = a3.var2;
  float var1 = a3.var1;
  float var0 = a3.var0;
  v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(NSObject **)&self->_grayWorldWhiteBalanceGains.redGain;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __72__BWFigVideoCaptureDevice_setWhiteBalanceModeLockedWithGains_requestID___block_invoke;
  block[3] = &unk_1E5C264A0;
  block[4] = self;
  int v16 = a4;
  $E2C29196C7A5C696474C6955C5A9CE06 v17 = a3;
  dispatch_sync(v9, block);
  v18[0] = *MEMORY[0x1E4F53A98];
  LODWORD(v10) = vcvts_n_s32_f32(var0, 0xCuLL);
  v19[0] = [NSNumber numberWithUnsignedShort:v10];
  v18[1] = *MEMORY[0x1E4F53A90];
  LODWORD(v11) = vcvts_n_s32_f32(var1, 0xCuLL);
  v19[1] = [NSNumber numberWithUnsignedShort:v11];
  v18[2] = *MEMORY[0x1E4F53A88];
  LODWORD(v12) = vcvts_n_s32_f32(var2, 0xCuLL);
  v19[2] = [NSNumber numberWithUnsignedShort:v12];
  void v18[3] = *MEMORY[0x1E4F52E90];
  v19[3] = [NSNumber numberWithInt:v4];
  int v13 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1EFA5A3C0, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:4]);
  if (v13) {
    FigDebugAssert3();
  }
  return v13;
}

unint64_t __72__BWFigVideoCaptureDevice_setWhiteBalanceModeLockedWithGains_requestID___block_invoke(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F29238] valueWithBytes:a1 + 44 objCType:"{?=fff}"];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 2712), "setObject:forKeyedSubscript:", v2, objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 2720), "insertObject:atIndex:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)), 0);
  unint64_t result = [*(id *)(*(void *)(a1 + 32) + 2712) count];
  if (result >= 0x1E)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 2720) count];
    unint64_t v5 = v4 - ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 2720) count] >> 1);
    unint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 2720) count];
    uint64_t v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 2720), "objectsAtIndexes:", objc_msgSend(MEMORY[0x1E4F28D60], "indexSetWithIndexesInRange:", v5, v6 >> 1));
    [*(id *)(*(void *)(a1 + 32) + 2712) removeObjectsForKeys:v7];
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 2720);
    return [v8 removeObjectsInArray:v7];
  }
  return result;
}

- ($E2C29196C7A5C696474C6955C5A9CE06)deviceWhiteBalanceGains
{
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  float ISO = self->_ISO;
  float exposureTargetBias = self->_exposureTargetBias;
  float exposureTargetOffset = self->_exposureTargetOffset;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  float v6 = ISO;
  float v7 = exposureTargetBias;
  float v8 = exposureTargetOffset;
  result.float var2 = v8;
  result.float var1 = v7;
  result.float var0 = v6;
  return result;
}

- ($E2C29196C7A5C696474C6955C5A9CE06)grayWorldDeviceWhiteBalanceGains
{
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  redGaiuint64_t n = self->_deviceWhiteBalanceGains.redGain;
  greenGaiuint64_t n = self->_deviceWhiteBalanceGains.greenGain;
  blueGaiuint64_t n = self->_deviceWhiteBalanceGains.blueGain;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  float v6 = redGain;
  float v7 = greenGain;
  float v8 = blueGain;
  result.float var2 = v8;
  result.float var1 = v7;
  result.float var0 = v6;
  return result;
}

- (float)_exifFocalLengthOverrideForZoomFactor:(uint64_t)a1
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v2 = 0.0;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 4168);
    if (v4)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      float v6 = objc_msgSend(v4, "allKeys", 0);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v26 != v11) {
              objc_enumerationMutation(v6);
            }
            int v13 = *(void **)(*((void *)&v25 + 1) + 8 * i);
            [v13 floatValue];
            float v15 = v14;
            if (v14 <= a2)
            {
              if (!v9 || ([v9 floatValue], v15 > v16)) {
                uint64_t v9 = v13;
              }
            }
            if (v15 >= a2)
            {
              if (!v10 || ([v10 floatValue], v15 < v17)) {
                uint64_t v10 = v13;
              }
            }
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
        }
        while (v8);
        if (v9)
        {
          if (v10)
          {
            [v9 floatValue];
            float v19 = v18;
            [v10 floatValue];
            float v21 = v20;
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 4168), "objectForKeyedSubscript:", v9), "floatValue");
            float v2 = v22;
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 4168), "objectForKeyedSubscript:", v10), "floatValue");
            if ((float)(v21 - v19) > 0.0) {
              return v2 + (float)((float)(v23 - v2) * (float)((float)(a2 - v19) / (float)(v21 - v19)));
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 2728);
  uint64_t result = [*(id *)(a1 + 40) intValue];
  if ((int)result >= 1)
  {
    uint64_t result = [*(id *)(*(void *)(a1 + 32) + 2712) objectForKeyedSubscript:*(void *)(a1 + 40)];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = result;
  }
  return result;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 2728) = 1;
  return result;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 2728) = 0;
  return result;
}

- (float)torchLevel
{
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  float v3 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  return v3;
}

uint64_t __112__BWFigVideoCaptureDevice_setStillImageSceneMonitoringFlashMode_hdrMode_qualityPrioritization_digitalFlashMode___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 1984)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_DWORD *)(a1 + 48) != 0;
  }
  uint64_t result = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](v2, @"HDRSceneDetectionEnabled", (const void *)[NSNumber numberWithBool:v3]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (BOOL)isFlashScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 1, 0, 0, 0) == 1;
}

- (BOOL)isHDRScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 0, 1, 0, 0) == 2;
}

- (BOOL)isSISScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 0, 0, 1, 0) == 3;
}

- (int)digitalFlashStatus
{
  if (!self->_hasDigitalFlash) {
    return 0;
  }
  if ([(BWFigVideoCaptureDevice *)self isBravoVariant]) {
    captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
  }
  else {
    captureStreauint64_t m = self->_captureStream;
  }
  int result = [(NSSet *)self->_digitalFlashSupportedPortTypes containsObject:[(BWFigVideoCaptureStream *)captureStream portType]];
  if (result)
  {
    unint64_t v5 = [[BWFrameStatisticsByPortType alloc] initWithPortTypes:[(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType portTypes]];
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    [(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType copyTo:v5];
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    unsigned int v6 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:]((uint64_t)self, captureStream, v5, 0, 0, 0, NAN);
    if ((v6 & 0x800) != 0) {
      return 2;
    }
    else {
      return (v6 >> 10) & 1;
    }
  }
  return result;
}

- (id)digitalFlashExposureTimes
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!self->_hasDigitalFlash) {
    return (id)MEMORY[0x1E4F1CC08];
  }
  BOOL v3 = [(BWFigVideoCaptureDevice *)self isBravoVariant]
     ? [(BWFigVideoCaptureDevice *)self masterCaptureStream]
     : self->_captureStream;
  if (![(NSSet *)self->_digitalFlashSupportedPortTypes containsObject:[(BWFigVideoCaptureStream *)v3 portType]])return (id)MEMORY[0x1E4F1CC08]; {
  uint64_t v4 = [[BWFrameStatisticsByPortType alloc] initWithPortTypes:[(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType portTypes]];
  }
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  [(BWFrameStatisticsByPortType *)self->_currentFrameStatisticsByPortType copyTo:v4];
  id v5 = (id)[(NSMutableDictionary *)self->_digitalFlashExposureTimesForSceneMonitoringByPortType objectForKeyedSubscript:[(BWFigVideoCaptureStream *)v3 portType]];
  os_unfair_lock_unlock(&self->_frameStatisticsLock);
  if (!v5)
  {
    id v5 = (id)[(BWAdaptiveBracketingController *)self->_ubAdaptiveBracketingController adaptiveBracketingDigitalFlashTotalIntegrationTimesProviderForPortType:[(BWFigVideoCaptureStream *)v3 portType] wait:1];
    if (!v5)
    {
      FigDebugAssert3();
      return (id)MEMORY[0x1E4F1CC08];
    }
  }
  uint64_t v22 = 0;
  double v23 = 0.0;
  double v24 = 0.0;
  id v6 = [(BWFrameStatisticsByPortType *)v4 objectForKeyedSubscript:[(BWFigVideoCaptureStream *)v3 portType]];
  uint64_t v7 = [(BWFigVideoCaptureStream *)v3 isStationary];
  if ([(NSArray *)self->_digitalFlashDetectedObjectTypes count])
  {
    uint64_t v8 = [(BWFigVideoCaptureStream *)v3 objectDetector];
    if (v6) {
      [v6 pts];
    }
    else {
      memset(v19, 0, sizeof(v19));
    }
    uint64_t v10 = (void *)[(BWObjectDetector *)v8 objectsForPTS:v19];
    [v6 finalCropRect];
    uint64_t v9 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:]((uint64_t)self, v10, v11, v12, v13, v14);
  }
  else
  {
    uint64_t v9 = 0;
  }
  for (uint64_t i = 1; i != 3; ++i)
  {
    [v5 totalIntegrationTimeForDigitalFlashMode:i frameStatistics:v6 stationary:v7 detectedObjects:v9];
    *(&v22 + i) = v16;
  }

  v20[0] = @"Min";
  uint64_t v17 = [NSNumber numberWithDouble:v23];
  v20[1] = @"Max";
  v21[0] = v17;
  v21[1] = [NSNumber numberWithDouble:v24];
  return (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:2];
}

- (void)_ubDetectedObjectsForDigitalFlashFromDetectedObjects:(CGFloat)a3 finalCropRect:(CGFloat)a4
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1 || ![a2 count] || !objc_msgSend(*(id *)(a1 + 2152), "count")) {
    return 0;
  }
  CGFloat v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 2152), "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  CGFloat v13 = *(void **)(a1 + 2152);
  uint64_t v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v20;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v20 != v16) {
          objc_enumerationMutation(v13);
        }
        objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(*((void *)&v19 + 1) + 8 * v17)), *(void *)(*((void *)&v19 + 1) + 8 * v17));
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v15);
  }
  if (![v12 count]) {
    return 0;
  }
  v25.origin.double x = a3;
  v25.origin.double y = a4;
  v25.size.double width = a5;
  v25.size.double height = a6;
  if (!CGRectIsNull(v25))
  {
    v27.origin.double x = 0.0;
    v27.origin.double y = 0.0;
    v27.size.double width = 1.0;
    v27.size.double height = 1.0;
    v26.origin.double x = a3;
    v26.origin.double y = a4;
    v26.size.double width = a5;
    v26.size.double height = a6;
    if (!CGRectEqualToRect(v26, v27))
    {
      CGFloat v12 = (id)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, 1uLL);
      BWCorrectRectanglesInDetectedObjectsInfo(v12, a3, a4, a5, a6, 0.0, 0.0, 1.0, 1.0);
    }
  }
  if (![v12 count]) {
    return 0;
  }
  return v12;
}

- (void)setStillImageStabilizationSceneDetectionEnabled:(BOOL)a3
{
  if (a3) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  uint64_t maxTorchLevel_low = LODWORD(self->_maxTorchLevel);
  uint64_t flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  uint64_t digitalFlashModeForSceneMonitoring = self->_digitalFlashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  [(BWFigVideoCaptureDevice *)self setStillImageSceneMonitoringFlashMode:maxTorchLevel_low hdrMode:flashModeForSceneMonitoring qualityPrioritization:v4 digitalFlashMode:digitalFlashModeForSceneMonitoring];
}

- (void)rampToVideoZoomFactor:(float)a3 withRampType:(int)a4 rate:(float)a5 duration:(double)a6 commandID:(int)a7
{
  uint64_t v7 = *(void *)&a7;
  uint64_t v10 = *(void *)&a4;
  -[NSMutableArray applyFudgeToZoomFactor:](self->_whiteBalanceGainsOrderedKeys, "applyFudgeToZoomFactor:");
  float v14 = v13;
  int v15 = -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v13);
  int v21 = v15;
  if (v10 == 2 && self->_cinematicFramingFeedbackForCameraControlsROIEnabled && BYTE1(self->_memoryPool))
  {
    BOOL v22 = a6 != 0.25;
    double v16 = 0.5;
    if (a6 == 0.5) {
      BOOL v22 = 0;
    }
    if (v22 & v15)
    {
      float newISPZoomFactor = 0.0;
      a6 = 0.0;
      uint64_t v10 = 3;
      goto LABEL_18;
    }
    [(BWFigVideoCaptureDevice *)self zoomFactor];
    BOOL v25 = v24 > a3;
    double v16 = dbl_1A5F0CFA0[v24 > a3];
    if (v16 >= a6) {
      a6 = dbl_1A5F0CFA0[v25];
    }
  }
  if (v10 == 2) {
    int v26 = v21;
  }
  else {
    int v26 = 0;
  }
  float newISPZoomFactor = 0.01;
  if (v26 == 1)
  {
    if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
    {
      [(BWFigVideoCaptureDevice *)self zoomFactor];
      if (*(float *)&v16 < a3) {
        float newISPZoomFactor = self->_newISPZoomFactor;
      }
    }
    uint64_t v10 = 2;
  }
LABEL_18:
  LODWORD(v19) = 1.0;
  LODWORD(v20) = 1.0;
  *(float *)&double v16 = a3;
  *(float *)&double v17 = a5;
  *(float *)&double v18 = newISPZoomFactor;
  [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:v10 withRampType:0 rate:v7 duration:v16 snapToTargetZoomFactorWithinRampFraction:v17 rampTuning:a6 earlySwitchOverScaleFactorForZoomIn:v18 allowableMinimumDigitalZoomFactorDuringZoomOut:v19 commandID:v20];
  previewTimeMachineProcessor = self->_previewTimeMachineProcessor;
  *(float *)&double v28 = v14;
  [(BWPreviewTimeMachineProcessor *)previewTimeMachineProcessor requestedZoomFactorChanged:v28];
}

- (uint64_t)_isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:(uint64_t)result
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    BOOL v3 = *(void **)(result + 552);
    int result = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)v12;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v12 != v5) {
            objc_enumerationMutation(v3);
          }
          uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          [v7 baseZoomFactorAfterGDC];
          if (v8 != a2)
          {
            uint64_t v9 = (void *)[v7 nondisruptiveSwitchingZoomFactors];
            *(float *)&double v10 = a2;
            if ((objc_msgSend(v9, "containsObject:", objc_msgSend(NSNumber, "numberWithFloat:", v10)) & 1) == 0) {
              continue;
            }
          }
          return 1;
        }
        uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        int result = 0;
        if (v4) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

- (void)rampToVideoZoomFactor:(float)a3 withTuning:(int)a4 commandID:(int)a5
{
  uint64_t v5 = *(void *)&a5;
  -[NSMutableArray applyFudgeToZoomFactor:](self->_whiteBalanceGainsOrderedKeys, "applyFudgeToZoomFactor:");
  float v10 = v9;
  [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactorWithoutFudge];
  float v12 = v11;
  int v13 = -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v10);
  uint64_t v81 = 0;
  uint64_t v82 = &v81;
  uint64_t v83 = 0x2020000000;
  int v84 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3221225472;
  v80[2] = __70__BWFigVideoCaptureDevice_rampToVideoZoomFactor_withTuning_commandID___block_invoke;
  v80[3] = &unk_1E5C246B8;
  v80[4] = self;
  v80[5] = &v81;
  dispatch_sync(autofocusProcessorQueue, v80);
  int v21 = *((_DWORD *)v82 + 6);
  int v22 = BYTE1(self->_firstValidFramePTS.timescale);
  switch(a4)
  {
    case 3:
      BOOL cinematicFramingFeedbackForCameraControlsROIEnabled = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
      snapFractiouint64_t n = 1.0;
      if (BYTE1(self->_firstValidFramePTS.timescale)
        && !self->_cinematicFramingFeedbackForCameraControlsROIEnabled
        && v12 > a3)
      {
        snapFractiouint64_t n = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
      }
      frictiouint64_t n = self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring.friction;
      if (v21 == 2)
      {
        if (BYTE1(self->_firstValidFramePTS.timescale))
        {
          if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
          {
            float v27 = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationOverCapturePreview + -0.04;
            float exponentialRampDurationOverCapturePreview = v27;
          }
          else
          {
            float exponentialRampDurationOverCapturePreview = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationOverCapturePreview;
          }
          if (v12 > a3) {
            float exponentialRampDurationOverCapturePreview = exponentialRampDurationOverCapturePreview
          }
                                                      * self->_zoomRampTuning.continuousIndirect.zoomOutDurationScalePreview;
        }
        else
        {
          float exponentialRampDurationOverCapturePreview = 0.5;
          frictiouint64_t n = 0.01;
        }
        goto LABEL_119;
      }
      if (cinematicFramingFeedbackForCameraControlsROIEnabled | v22)
      {
        BOOL v43 = !cinematicFramingFeedbackForCameraControlsROIEnabled;
        uint64_t v47 = 2876;
        if (!v43) {
          uint64_t v47 = 2880;
        }
        float exponentialRampDurationOverCapturePreview = *(float *)((char *)&self->super.isa + v47);
        if (v12 > a3) {
          float exponentialRampDurationOverCapturePreview = exponentialRampDurationOverCapturePreview
        }
                                                    * self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomOutSpring.friction;
        if (!v13)
        {
LABEL_119:
          if (BYTE2(self->_zoomFactorLock._os_unfair_lock_opaque)
            && ([(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactor], v22)
            && *(float *)&v15 == *(float *)&self->_ispZoomLatency
            && v12 > a3
            && self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
          {
            if (!LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
            {
              LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 1;
              uint64_t v69 = 2780;
LABEL_128:
              [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys updateISPZoomDelay:*(unsigned int *)((char *)&self->super.isa + v69)];
            }
          }
          else if (LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
          {
            LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 0;
            uint64_t v69 = 2776;
            goto LABEL_128;
          }
          LODWORD(v19) = 1.0;
          *(float *)&double v15 = a3;
          *(float *)&double v18 = friction;
          *(float *)&double v20 = snapFraction;
          [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:2 withRampType:3 rate:v5 duration:v15 snapToTargetZoomFactorWithinRampFraction:0.0 rampTuning:exponentialRampDurationOverCapturePreview earlySwitchOverScaleFactorForZoomIn:v18 allowableMinimumDigitalZoomFactorDuringZoomOut:v19 commandID:v20];
          break;
        }
      }
      else
      {
        float exponentialRampDurationOverCapturePreview = 0.25;
        frictiouint64_t n = 0.01;
        if (!v13) {
          goto LABEL_119;
        }
      }
      BOOL v60 = [(BWFigVideoCaptureDevice *)self isBravoVariant];
      if (v12 < a3 && v60)
      {
        if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
        {
          frictiouint64_t n = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationPreview;
        }
        else if (v22)
        {
          frictiouint64_t n = self->_zoomRampTuning.continuousIndirect.exponentialSnapFraction;
        }
        else
        {
          frictiouint64_t n = self->_newISPZoomFactor;
        }
      }
      goto LABEL_119;
    case 2:
      if (!BYTE1(self->_firstValidFramePTS.timescale))
      {
        LODWORD(v18) = 1028443341;
        LODWORD(v19) = 1.0;
        LODWORD(v20) = 1.0;
        *(float *)&double v15 = a3;
        [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:2 withRampType:2 rate:v5 duration:v15 snapToTargetZoomFactorWithinRampFraction:0.0 rampTuning:0.00100000005 earlySwitchOverScaleFactorForZoomIn:v18 allowableMinimumDigitalZoomFactorDuringZoomOut:v19 commandID:v20];
        break;
      }
      float v29 = 1.0;
      float v30 = 1.0;
      if (!self->_cinematicFramingFeedbackForCameraControlsROIEnabled && v12 > a3) {
        float v30 = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
      }
      if (!self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
      {
        if (LOBYTE(self->_zoomRampTuning.continuousDirectPreview.zoomOutDurationScale))
        {
          if (v12 <= a3)
          {
            [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactor];
            float v32 = -[BWFigVideoCaptureDevice _baseZoomFactorForZoomFactor:]((uint64_t)self, v31);
            if (-[BWFigVideoCaptureDevice _baseZoomFactorForZoomFactor:]((uint64_t)self, v10) > v32) {
              float v29 = self->_zoomRampTuning.jumpFrontFacingZoomOut[1].friction;
            }
          }
        }
      }
      if (v21 == 2)
      {
        BOOL v33 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
        if (BYTE1(self->_zoomRampTuning.continuousDirectPreview.zoomOutDurationScale))
        {
          uint64_t v34 = 2824;
          if (v12 > a3) {
            uint64_t v34 = 2836;
          }
          long long v35 = (float *)((char *)self + v34);
          uint64_t v36 = 2828;
          if (v12 > a3) {
            uint64_t v36 = 2840;
          }
          long long v37 = (char *)self + v36;
          uint64_t v38 = 2832;
          if (v12 > a3) {
            uint64_t v38 = 2844;
          }
          uint64_t v39 = (float *)((char *)self + v38);
          p_frictiouint64_t n = &self->_zoomRampTuning.continuousDirectRecordingZoomInSpring.friction;
          p_continuousDirectRecordingZoomOutSpring = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring;
          p_tensiouint64_t n = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring.tension;
          if (v12 > a3)
          {
            p_frictiouint64_t n = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring.friction;
            p_continuousDirectRecordingZoomOutSpring = &self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring;
            p_tensiouint64_t n = &self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring.tension;
          }
          BOOL v43 = !v33;
          if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled) {
            uint64_t v44 = p_friction;
          }
          else {
            uint64_t v44 = v35;
          }
          if (v43) {
            p_snapFractiouint64_t n = v37;
          }
          else {
            p_snapFractiouint64_t n = (_DWORD *)&p_continuousDirectRecordingZoomOutSpring->snapFraction;
          }
          if (v43) {
            BOOL v46 = v39;
          }
          else {
            BOOL v46 = p_tension;
          }
          *(float *)&double v17 = *v46;
          LODWORD(v16) = *p_snapFraction;
          *(float *)&double v18 = *v44;
          *(float *)&double v15 = a3;
          *(float *)&double v19 = v29;
          *(float *)&double v20 = v30;
          [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:2 usingSpringWithTension:0 friction:v5 snapFraction:v15 rampTuning:v16 earlySwitchOverScaleFactorForZoomIn:v17 allowableMinimumDigitalZoomFactorDuringZoomOut:v18 rampStartFrameDelayAt30fps:v19 commandID:v20];
          break;
        }
        uint64_t v58 = 2808;
        uint64_t v59 = 2812;
      }
      else
      {
        BOOL v33 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
        uint64_t v58 = 2796;
        uint64_t v59 = 2800;
      }
      LODWORD(v15) = *(_DWORD *)((char *)&self->super.isa + v59);
      if (v21 != 2 && v33)
      {
        float v77 = *(float *)&v15 + -0.035;
        *(float *)&double v15 = v77;
      }
      if (v12 > a3)
      {
        uint64_t v78 = 2804;
        if (v21 == 2) {
          uint64_t v78 = 2816;
        }
        *(float *)&double v15 = *(float *)&v15 * *(float *)((char *)&self->super.isa + v78);
      }
      double v79 = *(float *)&v15;
      *(float *)&double v15 = a3;
      *(float *)&double v19 = v29;
      *(float *)&double v20 = v30;
      LODWORD(v18) = *(_DWORD *)((char *)&self->super.isa + v58);
      [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:2 withRampType:2 rate:v5 duration:v15 snapToTargetZoomFactorWithinRampFraction:0.0 rampTuning:v79 earlySwitchOverScaleFactorForZoomIn:v18 allowableMinimumDigitalZoomFactorDuringZoomOut:v19 commandID:v20];
      break;
    case 1:
      if (BYTE1(self->_firstValidFramePTS.timescale))
      {
        if (v21 == 2)
        {
          unsigned int v23 = 2;
          goto LABEL_59;
        }
        BOOL v48 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
LABEL_58:
        unsigned int v23 = !v48;
LABEL_59:
        long long v49 = (char *)self + 12 * v23;
        long long v50 = v49 + 2940;
        long long v51 = v49 + 2904;
        if (v12 > a3) {
          long long v51 = v50;
        }
        if (self->_position == 2)
        {
          long long v52 = (char *)self + 12 * v23;
          if (v12 <= a3)
          {
            int v54 = *((_DWORD *)v52 + 746);
            int v55 = *((_DWORD *)v52 + 745);
            float v56 = *((float *)v52 + 744);
            BOOL v53 = 1;
            goto LABEL_80;
          }
          long long v51 = v52 + 3012;
        }
        BOOL v53 = v12 <= a3;
        int v55 = *((_DWORD *)v51 + 1);
        int v54 = *((_DWORD *)v51 + 2);
        float v56 = *(float *)v51;
        BOOL v57 = *(float *)v51 != 0.0 || v12 <= a3;
        if (!v57
          && -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v10))
        {
          float v56 = 0.001;
        }
LABEL_80:
        float v62 = 1.0;
        if (v22 && v12 <= a3 && !self->_cinematicFramingFeedbackForCameraControlsROIEnabled) {
          float v62 = self->_zoomRampTuning.jumpFrontFacingZoomOut[1].friction;
        }
        if (v22) {
          char v63 = v53;
        }
        else {
          char v63 = 1;
        }
        if ((v63 & 1) != 0 || self->_cinematicFramingFeedbackForCameraControlsROIEnabled && v21 != 2)
        {
          LODWORD(v64) = 1;
        }
        else
        {
          [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactor];
          if (*(float *)&v15 == self->_rampDefaultBravoSnapDistanceFraction) {
            LODWORD(v64) = 3;
          }
          else {
            LODWORD(v64) = 1;
          }
        }
        if (BYTE2(self->_zoomFactorLock._os_unfair_lock_opaque)
          && (([(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactor],
               *(float *)&v15 != *(float *)&self->_ispZoomLatency)
            ? (char v65 = 1)
            : (char v65 = v53),
              v22 && (v65 & 1) == 0 && self->_cinematicFramingFeedbackForCameraControlsROIEnabled))
        {
          if (!LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
          {
            LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 1;
            uint64_t v66 = 2780;
LABEL_105:
            [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys updateISPZoomDelay:*(unsigned int *)((char *)&self->super.isa + v66)];
          }
        }
        else if (LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
        {
          LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 0;
          uint64_t v66 = 2776;
          goto LABEL_105;
        }
        if (self->_position == 2) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v64;
        }
        char v67 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled || v53;
        float v68 = 1.0;
        if (v22)
        {
          if ((v67 & 1) == 0)
          {
            [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys appliedZoomFactor];
            *(float *)&double v16 = self->_rampDefaultBravoSnapDistanceFraction;
            if (*(float *)&v15 >= *(float *)&v16 && v10 < *(float *)&v16) {
              float v68 = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
            }
          }
        }
        *(float *)&double v15 = a3;
        LODWORD(v16) = v55;
        LODWORD(v17) = v54;
        *(float *)&double v18 = v56;
        *(float *)&double v19 = v62;
        *(float *)&double v20 = v68;
        [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:1 usingSpringWithTension:v64 friction:v5 snapFraction:v15 rampTuning:v16 earlySwitchOverScaleFactorForZoomIn:v17 allowableMinimumDigitalZoomFactorDuringZoomOut:v18 rampStartFrameDelayAt30fps:v19 commandID:v20];
        break;
      }
      if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
      {
        BOOL v48 = 1;
        goto LABEL_58;
      }
      float newISPZoomFactor = 0.01;
      if (v13)
      {
        BOOL v71 = [(BWFigVideoCaptureDevice *)self isBravoVariant];
        if (v12 < a3 && v71) {
          float newISPZoomFactor = self->_newISPZoomFactor;
        }
      }
      double v73 = 0.25;
      if (self->_position != 2)
      {
        float v75 = v12 / a3;
        if (v12 < a3) {
          float v75 = a3 / v12;
        }
        float v74 = flt_1A5F0CEA0[v21 == 2];
        double v73 = (float)(v74 * log2f(v75));
      }
      LODWORD(v19) = 1.0;
      LODWORD(v20) = 1.0;
      *(float *)&double v15 = a3;
      *(float *)&double v18 = newISPZoomFactor;
      [(NSMutableArray *)self->_whiteBalanceGainsOrderedKeys rampToVideoZoomFactor:2 withRampType:1 rate:v5 duration:v15 snapToTargetZoomFactorWithinRampFraction:0.0 rampTuning:v73 earlySwitchOverScaleFactorForZoomIn:v18 allowableMinimumDigitalZoomFactorDuringZoomOut:v19 commandID:v20];
      break;
    default:
      break;
  }
  *(float *)&double v15 = v10;
  [(BWPreviewTimeMachineProcessor *)self->_previewTimeMachineProcessor requestedZoomFactorChanged:v15];
  _Block_object_dispose(&v81, 8);
}

uint64_t __70__BWFigVideoCaptureDevice_rampToVideoZoomFactor_withTuning_commandID___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 1824);
  return result;
}

- (float)_baseZoomFactorForZoomFactor:(uint64_t)a1
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0.0;
  }
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 560), "firstObject"), "baseZoomFactorAfterGDC");
  float v5 = v4;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v6 = *(void **)(a1 + 560);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v28 != v9) {
          objc_enumerationMutation(v6);
        }
        float v11 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        [v11 baseZoomFactorAfterGDC];
        if (v12 <= a2)
        {
          [v11 baseZoomFactorAfterGDC];
          float v5 = v13;
        }
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v14 = objc_msgSend(v11, "nondisruptiveSwitchingZoomFactors", 0);
        uint64_t v15 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v24;
          do
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if (*(void *)v24 != v17) {
                objc_enumerationMutation(v14);
              }
              double v19 = *(void **)(*((void *)&v23 + 1) + 8 * j);
              [v19 floatValue];
              if (v20 <= a2)
              {
                [v19 floatValue];
                float v5 = v21;
              }
            }
            uint64_t v16 = [v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }
          while (v16);
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v8);
  }
  return v5;
}

- (void)setNondisruptiveSwitchingFormatIndicesByPortType:(id)a3 maximumAllowedFrameRate:(int)a4 minimumFrameRate:(int)a5 maximumFrameRate:(int)a6
{
  uint64_t v6 = *(void *)&a6;
  uint64_t v7 = *(void *)&a5;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  float v10 = [(BWFigCaptureSynchronizedStreamsGroup *)[(BWFigVideoCaptureSynchronizedStreamsGroup *)self->_synchronizedStreamsGroup syncGroup] supportedProperties];
  uint64_t v11 = *MEMORY[0x1E4F555C0];
  if ([(NSDictionary *)v10 objectForKeyedSubscript:*MEMORY[0x1E4F555C0]])
  {
    uint64_t v47 = v11;
    unsigned int v49 = v7;
    unsigned int v50 = v6;
    int v54 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    BOOL v48 = self;
    id obj = self->_captureStreams;
    uint64_t v12 = [(NSArray *)obj countByEnumeratingWithState:&v63 objects:v69 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v52 = *(void *)v64;
      long long v14 = (void *)*MEMORY[0x1E4F1D260];
      uint64_t v15 = *MEMORY[0x1E4F52EC0];
      uint64_t v16 = *MEMORY[0x1E4F52E90];
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v64 != v52) {
            objc_enumerationMutation(obj);
          }
          double v18 = *(void **)(*((void *)&v63 + 1) + 8 * i);
          double v19 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v18, "portType"));
          float v20 = v19;
          if (v19) {
            int v21 = [v19 intValue];
          }
          else {
            int v21 = -1;
          }
          unsigned int v22 = [v18 activeNondisruptiveSwitchingCommandID];
          int v23 = [v18 activeNondisruptiveSwitchingFormatIndex];
          if (v23 == -1 && v21 != -1) {
            int v23 = [v18 activeFormatIndex];
          }
          if (v21 == v23) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = v22 + 1;
          }
          long long v26 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          long long v27 = v26;
          if (v20) {
            long long v28 = v20;
          }
          else {
            long long v28 = v14;
          }
          [v26 setObject:v28 forKeyedSubscript:v15];
          objc_msgSend(v27, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v25), v16);
          objc_msgSend(v54, "setObject:forKeyedSubscript:", v27, objc_msgSend(v18, "portType"));
        }
        uint64_t v13 = [(NSArray *)obj countByEnumeratingWithState:&v63 objects:v69 count:16];
      }
      while (v13);
    }
    if (a4
      && v49
      && v50
      && [(BWFigVideoCaptureStream *)v48->_captureStream isNondisruptiveFastSwitchingSupported])
    {
      uint64_t v29 = [NSNumber numberWithInt:a4];
      [v54 setObject:v29 forKeyedSubscript:*MEMORY[0x1E4F52EF8]];
      uint64_t v30 = [NSNumber numberWithInt:v49];
      [v54 setObject:v30 forKeyedSubscript:*MEMORY[0x1E4F52F08]];
      uint64_t v31 = [NSNumber numberWithInt:v50];
      [v54 setObject:v31 forKeyedSubscript:*MEMORY[0x1E4F52F00]];
    }
    if ([(BWFigCaptureSynchronizedStreamsGroup *)[(BWFigVideoCaptureSynchronizedStreamsGroup *)v48->_synchronizedStreamsGroup syncGroup] setProperty:v47 value:v54])
    {
      FigDebugAssert3();
    }
    else
    {
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      captureStreams = v48->_captureStreams;
      uint64_t v33 = [(NSArray *)captureStreams countByEnumeratingWithState:&v59 objects:v68 count:16];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)v60;
        uint64_t v36 = *MEMORY[0x1E4F52E90];
        do
        {
          for (uint64_t j = 0; j != v34; ++j)
          {
            if (*(void *)v60 != v35) {
              objc_enumerationMutation(captureStreams);
            }
            uint64_t v38 = *(void **)(*((void *)&v59 + 1) + 8 * j);
            if (objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v38, "portType"))) {
              uint64_t v39 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v38, "portType")), "intValue");
            }
            else {
              uint64_t v39 = 0xFFFFFFFFLL;
            }
            objc_msgSend(v38, "synchronizedStreamsGroupDidUpdateActiveNondisruptiveSwitchingFormatIndex:activeNondisruptiveSwitchingCommandID:maximumAllowedFrameRate:minimumFrameRate:maximumFrameRate:", v39, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", objc_msgSend(v38, "portType")), "objectForKeyedSubscript:", v36), "intValue"), a4, v49, v50);
          }
          uint64_t v34 = [(NSArray *)captureStreams countByEnumeratingWithState:&v59 objects:v68 count:16];
        }
        while (v34);
      }
    }
  }
  else
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v40 = self->_captureStreams;
    uint64_t v41 = [(NSArray *)v40 countByEnumeratingWithState:&v55 objects:v67 count:16];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = *(void *)v56;
      do
      {
        for (uint64_t k = 0; k != v42; ++k)
        {
          if (*(void *)v56 != v43) {
            objc_enumerationMutation(v40);
          }
          int v45 = *(void **)(*((void *)&v55 + 1) + 8 * k);
          if (objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v45, "portType"))) {
            uint64_t v46 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v45, "portType")), "intValue");
          }
          else {
            uint64_t v46 = 0xFFFFFFFFLL;
          }
          [v45 setActiveNondisruptiveSwitchingFormatIndex:v46 maximumAllowedFrameRate:a4 minimumFrameRate:v7 maximumFrameRate:v6];
        }
        uint64_t v42 = [(NSArray *)v40 countByEnumeratingWithState:&v55 objects:v67 count:16];
      }
      while (v42);
    }
  }
}

- (id)preferredMasterPortTypeForZoomFactor:(float)a3
{
  float v5 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics]((uint64_t)self);
  bravoStreamSelector = self->_bravoStreamSelector;
  *(float *)&double v7 = a3;
  return [(BWBravoStreamSelector *)bravoStreamSelector preferredMasterPortTypeForFrameStatisticsByPortType:v5 zoomFactor:v7];
}

- (CGSize)nonDestructiveCropSize
{
  p_nonDestructiveCropSizeLocuint64_t k = &self->_nonDestructiveCropSizeLock;
  os_unfair_lock_lock(&self->_nonDestructiveCropSizeLock);
  CGFloat width = self->_nonDestructiveCropSize.width;
  CGFloat height = self->_nonDestructiveCropSize.height;
  os_unfair_lock_unlock(p_nonDestructiveCropSizeLock);
  double v6 = width;
  double v7 = height;
  result.CGFloat height = v7;
  result.CGFloat width = v6;
  return result;
}

- (void)setProperty:(id)a3 isObserved:(BOOL)a4
{
  BOOL v4 = a4;
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  objc_msgSend(*(id *)&self->_currentBiasedExposureCompletedID, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", v4), a3);
  observedProperties = self->_observedProperties;
  pthread_mutex_unlock((pthread_mutex_t *)observedProperties);
}

- (uint64_t)_ltmCurveForStreamingImageIntent:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    BOOL v4 = (void *)[*(id *)(result + 496) stream];
    if (objc_msgSend((id)objc_msgSend(v4, "getProperty:error:", *MEMORY[0x1E4F54850], 0), "integerValue") == 5)
    {
      return 0;
    }
    else if ((a2 - 5) >= 4)
    {
      if (a2 == 4) {
        unsigned int v9 = 2;
      }
      else {
        unsigned int v9 = 0;
      }
      if ((a2 - 1) >= 2) {
        return v9;
      }
      else {
        return 1;
      }
    }
    else
    {
      float v5 = (os_unfair_lock_s *)(v3 + 1948);
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1948));
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v3 + 1948));
      double v6 = *(void **)(v3 + 2136);
      int v7 = *(unsigned char *)(v3 + 2132) != 0;
      if (v6) {
        int v7 = [v6 BOOLValue];
      }
      os_unfair_lock_unlock(v5);
      if (a2 == 8) {
        unsigned int v8 = 3;
      }
      else {
        unsigned int v8 = 0;
      }
      if (v7) {
        return 2;
      }
      else {
        return v8;
      }
    }
  }
  return result;
}

- (float)_minimumFrameRateForStreamingImageIntent:(void *)a3 masterPortType:
{
  float result = 0.0;
  if (a1)
  {
    switch(a2)
    {
      case 0:
      case 4:
      case 6:
      case 8:
        float result = *(float *)(a1 + 2084);
        break;
      case 1:
      case 2:
        if (!*(unsigned char *)(a1 + 2112)) {
          goto LABEL_7;
        }
        if (!objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E4F52DF0], 0.0)) {
          goto LABEL_7;
        }
        char v6 = [*(id *)(a1 + 2160) containsObject:a3];
        float result = 6.0;
        if ((v6 & 1) == 0) {
          goto LABEL_7;
        }
        break;
      case 3:
        float result = 24.0;
        break;
      case 5:
LABEL_7:
        float result = 8.0;
        break;
      case 7:
        objc_msgSend(*(id *)(a1 + 496), "minimumSupportedFrameRate", 0.0);
        float v8 = v7;
        float result = 2.0;
        if (v8 >= 2.0)
        {
          unsigned int v9 = *(void **)(a1 + 496);
          [v9 minimumSupportedFrameRate];
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void __89__BWFigVideoCaptureDevice__updateStreamingImageIntentForChangedMasterStreamWithPortType___block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 1948));
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  int os_unfair_lock_opaque = v2[519]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 487);
  if ((os_unfair_lock_opaque - 1) <= 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    float v5 = -[BWFigVideoCaptureDevice _minimumFrameRateForStreamingImageIntent:masterPortType:](v4, os_unfair_lock_opaque, *(void **)(a1 + 40));
    -[BWFigVideoCaptureDevice _setMinimumFrameRate:](v4, v5);
  }
}

- (BOOL)globalToneMappingEnabled
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  int nextStreamingImageIntent = self->_nextStreamingImageIntent;
  BOOL globalToneMappingEnabled = nextStreamingImageIntent == 4;
  if (nextStreamingImageIntent == 3) {
    BOOL globalToneMappingEnabled = self->_globalToneMappingEnabled;
  }
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return globalToneMappingEnabled;
}

- (NSNumber)globalToneMappingEnabledOverride
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  uint64_t v4 = self->_globalToneMappingEnabledOverride;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v4;
}

uint64_t __54__BWFigVideoCaptureDevice__ubSetupMetadataTimeMachine__block_invoke(uint64_t a1, void *a2, void *a3)
{
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EE0]), "intValue");
  if (FigCaptureStreamFocusingMethodIsContrastBased()) {
    return 2;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 1456))
  {
    if (*(unsigned char *)(v7 + 1464))
    {
      float v8 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54300]), "objectForKeyedSubscript:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1456), "portType"));
      if (objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FB8]), "intValue") != 2)return 2; {
    }
      }
  }
  if ([a3 count])
  {
    uint64_t v9 = [a3 count];
    while ((int)v9 >= 1)
    {
      if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", --v9), "objectForKeyedSubscript:", 0x1EFA44440), "BOOLValue") & 1) == 0)
      {
        float v10 = (void *)[a3 objectAtIndexedSubscript:v9];
        if (v10)
        {
          uint64_t v11 = *MEMORY[0x1E4F54148];
          int v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
          if (v12 != objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v11), "intValue")) {
            return 3;
          }
        }
        break;
      }
    }
  }
  uint64_t v13 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F541B0]];
  if ((int)objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E4F53CF8]), "intValue") > 1)
  {
    unsigned int v14 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue");
    FigCaptureVideoDimensionsAreEqual(v14 | (unint64_t)(objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue") << 32), *(void *)(*(void *)(a1 + 32) + 140));
    return 2;
  }
  return 0;
}

- (int)unifiedBracketingMode
{
  return self->_unifiedBracketingMode;
}

- (BOOL)sifrStillImageCaptureEnabledIfAvailable
{
  return self->_sifrStillImageCaptureEnabledIfAvailable;
}

- (BOOL)deepFusionEnabled
{
  return self->_deepFusionEnabled;
}

- (BOOL)depthWithDeepFusionEnabled
{
  return self->_depthWithDeepFusionEnabled;
}

- (unsigned)learnedNRMode
{
  return self->_learnedNRMode;
}

- (BOOL)learnedNRUltraHighResolutionDowngradeSupported
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  NSUInteger v3 = [(NSDictionary *)self->_ubCaptureParametersByPortType countByEnumeratingWithState:v5 objects:v6 count:16];
  if (v3)
  {
    objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_ubCaptureParametersByPortType, "objectForKeyedSubscript:", **((void **)&v5[0] + 1)), "learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold");
    LOBYTE(v3) = 1;
  }
  return v3;
}

- (BOOL)learnedNRUltraHighResolutionDowngradeEnabled
{
  return self->_learnedNRUltraHighResolutionDowngradeEnabled;
}

- (BOOL)swfrEnabled
{
  return self->_swfrEnabled;
}

- (BOOL)constantColorEnabled
{
  return self->_constantColorEnabled;
}

- (BOOL)digitalFlashEnabled
{
  return self->_digitalFlashEnabled;
}

- (BOOL)digitalFlashMetadataEnabled
{
  return self->_digitalFlashMetadataEnabled;
}

- (NSArray)digitalFlashDetectedObjectTypes
{
  return self->_digitalFlashDetectedObjectTypes;
}

- (int)streamingDigitalFlashMode
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  int nextStreamingImageIntent = self->_nextStreamingImageIntent;
  if (nextStreamingImageIntent == 1) {
    int streamingDigitalFlashMode = 1;
  }
  else {
    int streamingDigitalFlashMode = 2 * (nextStreamingImageIntent == 2);
  }
  if (nextStreamingImageIntent == 3) {
    int streamingDigitalFlashMode = self->_streamingDigitalFlashMode;
  }
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return streamingDigitalFlashMode;
}

- (void)_updateCurrentStillSmartCameraState
{
  if (a1 && *(unsigned char *)(a1 + 3144))
  {

    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
    *(void *)(a1 + 3192) = *(id *)(a1 + 3184);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
  }
}

- (uint64_t)_ubResolveStillImageCaptureTypeWithSettings:(unint64_t)a3 sceneFlags:(int)a4 hdrMode:(int)a5 qualityPrioritization:(char)a6 clientBracket:(char)a7 canDefer:(uint64_t)a8 primaryPortType:(char *)a9 speedOverQualityInOut:(char *)a10 speedOverQualityDowngradeOut:
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v17 = a9;
  if (a9) {
    BOOL v18 = *a9 != 0;
  }
  else {
    BOOL v18 = 0;
  }
  double v19 = a10;
  if (-[BWFigVideoCaptureDevice _ubIsDigitalFlashCaptureForSettings:sceneFlags:](a1, a2, a3))
  {
    char v20 = 0;
    char v21 = 0;
    uint64_t v22 = 11;
    goto LABEL_97;
  }
  if ([a2 flashMode] == 1 && -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1)) {
    goto LABEL_21;
  }
  uint64_t v51 = a8;
  char v52 = a7;
  BOOL v48 = v18;
  BOOL v23 = 1;
  if (a4 == 1) {
    uint64_t v22 = 10;
  }
  else {
    uint64_t v22 = 7;
  }
  if (a4 == 1 || (a6 & 1) != 0) {
    goto LABEL_82;
  }
  if ([a2 flashMode] == 2)
  {
    int v24 = 0;
    if ((a3 & 0x4000) == 0 && *(unsigned char *)(a1 + 2144))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
      int v24 = *(_DWORD *)(a1 + 2184);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
    }
  }
  else
  {
    int v24 = 0;
  }
  if ([a2 flashMode] == 2
    && -[BWFigVideoCaptureDevice _ubIsAutoFlashForSceneFlags:digitalFlashModeForSceneMonitoring:](a1, a3, v24))
  {
LABEL_21:
    char v20 = 0;
    char v21 = 0;
    uint64_t v22 = 2;
    goto LABEL_97;
  }
  if (a4 != 2 && a5 < 2)
  {
    char v20 = 0;
    char v21 = 0;
    uint64_t v22 = 1;
    goto LABEL_97;
  }
  int v50 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](a1, a2, 0, a3);
  int v25 = -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, a3, v50);
  int v26 = *(unsigned __int8 *)(a1 + 2066);
  if (*(unsigned char *)(a1 + 2066)) {
    int v26 = [a2 constituentPhotoDeliveryEnabled] ^ 1;
  }
  if (!v50) {
    int v26 = v25 ^ 1;
  }
  if (*(unsigned char *)(a1 + 2065)) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  int v46 = v25;
  int v45 = v27;
  if ([a2 resolutionFlavor] != 1
    && [a2 resolutionFlavor] != 2)
  {
LABEL_50:
    uint64_t v22 = 0;
    BOOL v39 = 0;
    goto LABEL_54;
  }
  id obj = (id)[MEMORY[0x1E4F1CA48] array];
  if ([a2 resolutionFlavor] == 1)
  {
    long long v28 = &unk_1EFB016A0;
LABEL_39:
    [obj addObject:v28];
    goto LABEL_40;
  }
  if ([a2 resolutionFlavor] == 2 && (*(unsigned char *)(a1 + 2068) & 0xC) != 0)
  {
    long long v28 = &unk_1EFB015F8;
    goto LABEL_39;
  }
LABEL_40:
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v29 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
  if (!v29) {
    goto LABEL_50;
  }
  uint64_t v30 = v29;
  uint64_t v49 = *(void *)v55;
  while (2)
  {
    for (uint64_t i = 0; i != v30; ++i)
    {
      if (*(void *)v55 != v49) {
        objc_enumerationMutation(obj);
      }
      float v32 = *(void **)(*((void *)&v54 + 1) + 8 * i);
      v58[0] = 0;
      int v33 = [v32 intValue];
      int v34 = [a2 resolutionFlavor];
      char v35 = [a2 constituentPhotoDeliveryEnabled];
      char v36 = [a2 autoDeferredProcessingEnabled];
      char IsDemosaicedRaw = FigCapturePixelFormatIsDemosaicedRaw([a2 rawOutputFormat]);
      int v38 = -[BWFigVideoCaptureDevice _ubIsRequestedHighResolutionFlavorSupportedForCaptureType:portType:qualityPrioritization:requestedHighResolutionFlavor:sceneFlags:deliverDepthData:bravoConstituentPhotoCapture:autoDeferredProcessingEnabled:canDefer:demosaicedRawRequested:isUltraHighResolutionDowngradeOut:](a1, v33, v51, a5, v34, a3, v50, v35, v36, v52, IsDemosaicedRaw, v58);
      if (v58[0])
      {
        uint64_t v22 = [v32 intValue];
        BOOL v39 = 0;
LABEL_53:
        uint64_t v17 = a9;
        goto LABEL_54;
      }
      if (v38)
      {
        uint64_t v22 = [v32 intValue];
        BOOL v39 = [a2 resolutionFlavor] == 2;
        goto LABEL_53;
      }
    }
    uint64_t v30 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
    uint64_t v22 = 0;
    BOOL v39 = 0;
    uint64_t v17 = a9;
    if (v30) {
      continue;
    }
    break;
  }
LABEL_54:
  int v40 = v46;
  if (v22) {
    int v40 = 1;
  }
  if ((a3 & 0x10) != 0 && !v40)
  {
    uint64_t v22 = 6;
    double v19 = a10;
    goto LABEL_81;
  }
  double v19 = a10;
  if (!v45 || v22 != 12 && ((a3 & 0x1000) == 0 || a5 < 3 || v22))
  {
    if (v22 == 1) {
      goto LABEL_81;
    }
    if (v22)
    {
      if (v22 == 10) {
        goto LABEL_81;
      }
    }
    else if ((*(unsigned char *)(a1 + 2072) || (*(unsigned char *)(a1 + 2068) & 3) == 0) && *(_DWORD *)(a1 + 1984))
    {
      goto LABEL_80;
    }
LABEL_79:
    uint64_t v22 = 1;
    goto LABEL_81;
  }
  uint64_t v22 = 12;
  if (![a2 autoDeferredProcessingEnabled] || (v52 & 1) != 0) {
    goto LABEL_81;
  }
  if (*(_DWORD *)(a1 + 1984) != 1)
  {
    if (dword_1EB4C4FF0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v22 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  if (dword_1EB4C4FF0)
  {
    uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_80:
  uint64_t v22 = 10;
LABEL_81:
  BOOL v23 = !v39;
LABEL_82:
  if (v22 == 12)
  {
    if (v48 && v23)
    {
      if (dword_1EB4C4FF0)
      {
        uint64_t v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        char v20 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v22 = 10;
      }
      else
      {
        uint64_t v22 = 10;
        char v20 = 1;
      }
      char v21 = 1;
    }
    else
    {
      char v20 = 0;
      char v21 = 0;
      uint64_t v22 = 12;
    }
  }
  else if (v22 == 10)
  {
    if (v48)
    {
      char v21 = 0;
      char v20 = *(_DWORD *)(a1 + 1984) == 2 || v23;
    }
    else
    {
      char v20 = 0;
      char v21 = 0;
    }
    uint64_t v22 = 10;
  }
  else
  {
    char v20 = 0;
    char v21 = 0;
  }
LABEL_97:
  if (v17) {
    *uint64_t v17 = v20;
  }
  if (v19) {
    char *v19 = v21;
  }
  return v22;
}

- (uint64_t)_ubDeliverDepthDataForSettings:(uint64_t)a3 speedOverQuality:(int)a4 sceneFlags:
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  int v7 = BWCIFilterArrayContainsPortraitFilters((void *)[a2 processedImageFilters]);
  if (([a2 depthDataDeliveryEnabled] & 1) != 0 || v7)
  {
    if ((a4 & 0x800000) != 0)
    {
      int v8 = [a2 digitalFlashMode];
      uint64_t v9 = 1;
      if ((a4 & 0x4000) == 0 || v8 < 1) {
        return v9;
      }
    }
    else if (!dword_1EB4C4FF0)
    {
      goto LABEL_10;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_10:
  if (!objc_msgSend(a2, "constituentPhotoDeliveryEnabled", v13, v14)
    || ![a2 cameraCalibrationDataDeliveryEnabled]
    || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 520), "objectForKeyedSubscript:", @"ConstituentPhotoCalibrationData"), "BOOLValue") & 1) != 0)
  {
    return 0;
  }
  if (!dword_1EB4C4FF0) {
    return 1;
  }
  int v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  uint64_t v9 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v9;
}

- (uint64_t)_ubIsRequestedHighResolutionFlavorSupportedForCaptureType:(uint64_t)a3 portType:(int)a4 qualityPrioritization:(int)a5 requestedHighResolutionFlavor:(unint64_t)a6 sceneFlags:(char)a7 deliverDepthData:(char)a8 bravoConstituentPhotoCapture:(char)a9 autoDeferredProcessingEnabled:(char)a10 canDefer:(char)a11 demosaicedRawRequested:(unsigned char *)a12 isUltraHighResolutionDowngradeOut:
{
  if (result)
  {
    uint64_t v15 = result;
    if (a5 != 2)
    {
      if (a5 != 1)
      {
        LOBYTE(v16) = 0;
        float result = a5 == 0;
        goto LABEL_30;
      }
      LOBYTE(v16) = 0;
      if (a9 && a10)
      {
        float result = 0;
        if (a8) {
          goto LABEL_30;
        }
        int v18 = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 2440), "objectForKeyedSubscript:"), "containsObject:", &unk_1EFB015F8);
        LOBYTE(v16) = 0;
        if (v18)
        {
          float result = 0;
          if (a11) {
            goto LABEL_30;
          }
          LOBYTE(v16) = 0;
          if (a4 >= 3 && a2 == 12)
          {
            float result = 0;
            if (*(unsigned char *)(v15 + 2065))
            {
              LOBYTE(v16) = 0;
              float result = (a6 >> 20) & 1;
            }
            goto LABEL_30;
          }
        }
      }
      goto LABEL_26;
    }
    LOBYTE(v16) = 0;
    if ((a6 & 0x200000) != 0 && (a7 & 1) == 0)
    {
      float result = 0;
      if (a8) {
        goto LABEL_30;
      }
      float result = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 2440), "objectForKeyedSubscript:"), "containsObject:", &unk_1EFB015C8);
      LOBYTE(v16) = 0;
      if (!result) {
        goto LABEL_30;
      }
      if (a2 == 1)
      {
        float result = 0;
        if (a4 < 2) {
          goto LABEL_30;
        }
        unsigned int v17 = *(_DWORD *)(v15 + 2068);
        if ((v17 & 0xC) == 0)
        {
          LOBYTE(v16) = 0;
          float result = 0;
          goto LABEL_30;
        }
        if ((v17 & 4) != 0)
        {
          LOBYTE(v16) = v17 & BYTE3(a6) & 1;
LABEL_29:
          float result = (a6 & 0x1000000) == 0;
LABEL_30:
          if (a12) {
            *a12 = v16;
          }
          return result;
        }
        LOBYTE(v16) = 0;
        if ((v17 & 8) != 0 && a10)
        {
          float result = 0;
          if (!a9) {
            goto LABEL_30;
          }
          int v16 = (a6 >> 24) & 1 & (v17 >> 1);
          goto LABEL_29;
        }
      }
    }
LABEL_26:
    float result = 0;
    goto LABEL_30;
  }
  return result;
}

- (uint64_t)_ubResolveStillImageCaptureFlagsForCaptureType:(unint64_t)a3 sceneFlags:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 hdrMode:(int)a7 speedOverQuality:(int)a8 speedOverQualityDowngrade:(int)a9 qualityPrioritization:(int)a10 highResolutionFlavor:(char)a11 ultraHighResolutionDowngrade:(unsigned __int8)a12 canDefer:(void *)a13 processingSupportProvider:(_DWORD *)a14 zeroShutterLagFailureReasonOut:(void *)a15 metadata:
{
  v139[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unsigned int v17 = a5;
    uint64_t v21 = result;
    uint64_t v22 = a14;
    int v135 = 0;
    BOOL v23 = *(void **)(result + 1288);
    if (!v23) {
      BOOL v23 = *(void **)(result + 496);
    }
    float result = objc_msgSend(a5, "objectForKeyedSubscript:", objc_msgSend(v23, "portType"));
    uint64_t v114 = (void *)result;
    if (result)
    {
      float result = objc_msgSend(*(id *)(v21 + 2000), "objectForKeyedSubscript:", objc_msgSend(v23, "portType"));
      uint64_t v115 = (void *)result;
      if (result)
      {
        int v109 = a8;
        int v112 = a6;
        int v24 = [v23 hasSphere];
        LODWORD(v106) = [v23 motionDataInvalid];
        int v110 = v24;
        if ((v24 & v106) != 0) {
          unint64_t v25 = 0x200000;
        }
        else {
          unint64_t v25 = 0;
        }
        if (a2 == 12
          && [a4 autoDeferredProcessingEnabled]
          && a12
          && (((a3 & 0x8080000) == 0x80000) & [a4 autoStereoPhotoCaptureEnabled]) != 0)
        {
          v25 |= 0x4000000000uLL;
        }
        uint64_t v122 = v21;
        uint64_t v119 = a4;
        if (*(unsigned char *)(v21 + 1464))
        {
          int v26 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](v21, a4, 0, a3);
          if (*(unsigned char *)(v21 + 1489) || *(unsigned char *)(v21 + 1491))
          {
            unsigned int v27 = objc_msgSend((id)v21, "shallowDepthOfFieldEffectStatus", v106);
            if (v27 > 0xE || (int v28 = v26, ((1 << v27) & 0x7A02) == 0)) {
              int v28 = 0;
            }
            objc_msgSend(a15, "setShallowDepthOfFieldEffectSceneStatus:", objc_msgSend(NSNumber, "numberWithInt:"));
            v26 &= v28;
            uint64_t v21 = v122;
          }
          if ((v25 & 0x4000000000) != 0 || v26)
          {
            BOOL v29 = objc_msgSend((id)objc_msgSend(*(id *)(v21 + 520), "objectForKeyedSubscript:", @"StillImageDepthDataType", v106), "intValue") != 8|| *(unsigned char *)(v21 + 2049) == 0;
            uint64_t v30 = 2048;
            if (!v29) {
              uint64_t v30 = 2052;
            }
            v25 |= v30;
            if (a2 == 11 && *(void *)(v21 + 2272) || *(_DWORD *)(v21 + 484) == 13) {
              v25 |= 0x200uLL;
            }
          }
        }
        int v108 = objc_msgSend((id)v21, "isBravoVariant", v106);
        uint64_t v117 = v23;
        if (v108 && (v25 & 0x4000000800) != 0 && (v25 & 0x200) == 0)
        {
          uint64_t v31 = -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v21, v23);
          char v116 = 1;
        }
        else
        {
          char v116 = [a4 constituentPhotoDeliveryEnabled];
          if ([a4 constituentPhotoDeliveryEnabled])
          {
            float v32 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v21, (void *)[a4 bravoConstituentImageDeliveryDeviceTypes]);
          }
          else
          {
            v139[0] = v23;
            float v32 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v139 count:1];
          }
          uint64_t v31 = v32;
        }
        uint64_t v121 = (void *)[MEMORY[0x1E4F1CA48] array];
        long long v131 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        uint64_t v33 = [v31 countByEnumeratingWithState:&v131 objects:v138 count:16];
        if (v33)
        {
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)v132;
          do
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              if (*(void *)v132 != v35) {
                objc_enumerationMutation(v31);
              }
              objc_msgSend(v121, "addObject:", objc_msgSend(*(id *)(*((void *)&v131 + 1) + 8 * i), "portType"));
            }
            uint64_t v34 = [v31 countByEnumeratingWithState:&v131 objects:v138 count:16];
          }
          while (v34);
        }
        unsigned int v120 = a2;
        unint64_t v118 = a3;
        long long v37 = a13;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v127 = 0u;
        long long v128 = 0u;
        uint64_t v38 = [v31 countByEnumeratingWithState:&v127 objects:v137 count:16];
        if (!v38)
        {
          BOOL v40 = 0;
          goto LABEL_67;
        }
        uint64_t v39 = v38;
        long long v111 = v17;
        LOBYTE(v40) = 0;
        LOBYTE(v41) = 0;
        uint64_t v42 = *(void *)v128;
        uint64_t v43 = *MEMORY[0x1E4F54838];
        while (1)
        {
          for (uint64_t j = 0; j != v39; ++j)
          {
            if (*(void *)v128 != v42) {
              objc_enumerationMutation(v31);
            }
            int v45 = *(void **)(*((void *)&v127 + 1) + 8 * j);
            if (v41)
            {
              int v41 = 1;
              if (v40) {
                goto LABEL_55;
              }
            }
            else
            {
              int v41 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v127 + 1) + 8 * j), "stream"), "getPropertyIfSupported:error:", v43, 0), "BOOLValue");
              if (v40)
              {
LABEL_55:
                BOOL v40 = 1;
                goto LABEL_56;
              }
            }
            BOOL v40 = [v45 activeQuadraBinningFactor] == 1;
LABEL_56:
            if (FigCaptureVideoDimensionsAreValid(*(void *)(v122 + 140))
              && FigCaptureVideoDimensionsAreEqual([v45 activeSensorDimensions], *(void *)(v122 + 140)))
            {
              v25 |= 0x40uLL;
            }
            if (objc_msgSend((id)objc_msgSend(*(id *)(v122 + 2000), "objectForKeyedSubscript:", objc_msgSend(v45, "portType")), "alwaysUseAFTimeout"))v25 |= 0x80000000uLL; {
          }
            }
          uint64_t v39 = [v31 countByEnumeratingWithState:&v127 objects:v137 count:16];
          if (!v39)
          {
            if (v41) {
              v25 |= 0x8000uLL;
            }
            unsigned int v17 = v111;
            uint64_t v22 = a14;
            long long v37 = a13;
LABEL_67:
            int v46 = *(unsigned __int8 *)(v122 + 2049);
            if ((v116 & 1) == 0
              && FigCapturePixelFormatIsDemosaicedRaw([v119 rawOutputFormat])
              && [v37 demosaicedRawSupportedForCaptureType:v120])
            {
              v25 |= 0x100uLL;
            }
            int v47 = 0;
            BOOL v48 = 0;
            switch(v120)
            {
              case 1u:
                if ([v119 burstQualityCaptureEnabled])
                {
                  v25 |= 0x4000uLL;
                  int v51 = a12;
                }
                else
                {
                  int v51 = a12;
                  if (a10 == 2)
                  {
                    v25 |= 0x100000000uLL;
                    if ([(id)v122 ultraHighResolutionZeroShutterLagEnabled]
                      && *(unsigned char *)(v122 + 3208))
                    {
                      int v135 = 14;
                    }
                  }
                  else
                  {
                    if (*(unsigned char *)(v122 + 3204)) {
                      BOOL v72 = a9 == 1;
                    }
                    else {
                      BOOL v72 = 0;
                    }
                    if (v72) {
                      v25 |= 0x4000uLL;
                    }
                  }
                }
                if (!*(_DWORD *)(v122 + 2068)) {
                  goto LABEL_248;
                }
                char v73 = [v119 burstQualityCaptureEnabled];
                if (a9 < 2 || (v73 & 1) != 0) {
                  goto LABEL_248;
                }
                if (a10 == 2)
                {
                  if ((*(unsigned char *)(v122 + 2068) & 4) == 0
                    && (![v119 autoDeferredProcessingEnabled]
                     || !v51
                     || (*(_DWORD *)(v122 + 2068) & 8) == 0))
                  {
                    goto LABEL_248;
                  }
                }
                else if (a10 {
                       || (*(unsigned char *)(v122 + 2068) & 1) == 0
                }
                       && (![v119 autoDeferredProcessingEnabled]
                        || !v51
                        || (*(_DWORD *)(v122 + 2068) & 2) == 0))
                {
                  goto LABEL_248;
                }
                v25 |= 0x80uLL;
LABEL_248:
                if (v46 && ([v119 burstQualityCaptureEnabled] & 1) == 0)
                {
                  if ((v25 & 0x80) != 0) {
                    v25 |= 4uLL;
                  }
                  else {
                    v25 |= (v25 >> 30) & 4;
                  }
                }
                int v47 = 0;
                BOOL v48 = 0;
                uint64_t v89 = (v25 >> 2) & 1;
                if (!*(unsigned char *)(v122 + 2050)) {
                  LOBYTE(v89) = 0;
                }
                if ((v25 & 0x184) != 0 && (v89 & 1) == 0) {
                  goto LABEL_257;
                }
                goto LABEL_264;
              case 2u:
                unsigned int v52 = [v119 constantColorEnabled];
                if (v46 && *(unsigned char *)(v122 + 2073))
                {
                  uint64_t v53 = (v25 >> 8) & 1;
                  if (a9 > 1) {
                    LODWORD(v53) = 1;
                  }
                  int v54 = v118;
                  if ((v53 | (v25 >> 11) & 1 | v52) == 1)
                  {
                    v25 |= 0xCuLL;
                    if (!*(unsigned char *)(v122 + 2050))
                    {
                      int v55 = [v115 toneCurveBehavior];
                      uint64_t v56 = 0x800000;
                      if (v55 == 3) {
                        uint64_t v56 = 0x20000000;
                      }
                      if (v55 == 4) {
                        uint64_t v56 = 0x40000000;
                      }
                      unint64_t v57 = v56 | v25;
                      if ([v115 preserveBlackLevel]) {
                        unint64_t v25 = v57 | 0x2000000;
                      }
                      else {
                        unint64_t v25 = v57;
                      }
                    }
                    if (*(unsigned char *)(v122 + 1982)
                      && ([v119 autoRedEyeReductionEnabled] & ((v25 & 0x100) == 0)) != 0)
                    {
                      v25 |= 0x10000uLL;
                    }
                    goto LABEL_142;
                  }
                  goto LABEL_139;
                }
                int v54 = v118;
                if ((v25 & 0x100) == 0)
                {
LABEL_139:
                  if (*(unsigned char *)(v122 + 1982) && [v119 autoRedEyeReductionEnabled]) {
                    v25 |= 0x10000uLL;
                  }
                  goto LABEL_142;
                }
                int v68 = [v115 toneCurveBehavior];
                uint64_t v69 = 0x800000;
                if (v68 == 3) {
                  uint64_t v69 = 0x20000000;
                }
                if (v68 == 4) {
                  uint64_t v69 = 0x40000000;
                }
                unint64_t v70 = v69 | v25;
                if ([v115 preserveBlackLevel]) {
                  unint64_t v25 = v70 | 0x2000000;
                }
                else {
                  unint64_t v25 = v70;
                }
LABEL_142:
                if ((v54 & 0x10000000) == 0) {
                  goto LABEL_143;
                }
                int v47 = [v115 macroFlashQSubSwitchingEnabled];
                BOOL v48 = 0;
LABEL_264:
                if (v40 | v47 | BYTE4(v25) & 1) {
                  unint64_t v94 = v25 | 0x10;
                }
                else {
                  unint64_t v94 = v25;
                }
                if (!v48) {
                  goto LABEL_281;
                }
                uint64_t v95 = v122;
                int v96 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v122, v120, v118, v94, v114);
                int v135 = -[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortType:portTypes:frameStatisticsByPortType:deliverDepthData:](v122, v48, v96, (void *)[v117 portType], v121, v17, (v94 >> 11) & 1);
                if (v135)
                {
                  -[BWFigVideoCaptureDevice _resumeTimeMachines](v122);
                }
                else
                {
                  *(void *)(v122 + 3248) = v48;
                  long long v123 = 0u;
                  long long v124 = 0u;
                  long long v125 = 0u;
                  long long v126 = 0u;
                  uint64_t v97 = [(os_unfair_lock_s *)v48 countByEnumeratingWithState:&v123 objects:v136 count:16];
                  if (v97)
                  {
                    uint64_t v98 = v97;
                    uint64_t v99 = v17;
                    uint64_t v100 = *(void *)v124;
                    uint64_t v101 = *MEMORY[0x1E4F541B0];
                    uint64_t v102 = *MEMORY[0x1E4F541B8];
                    while (2)
                    {
                      for (uint64_t k = 0; k != v98; ++k)
                      {
                        if (*(void *)v124 != v100) {
                          objc_enumerationMutation(v48);
                        }
                        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v123 + 1) + 8 * k), "objectForKeyedSubscript:", v101), "objectForKeyedSubscript:", v102), "BOOLValue"))
                        {
                          v94 |= 0x2020uLL;
                          goto LABEL_280;
                        }
                      }
                      uint64_t v98 = [(os_unfair_lock_s *)v48 countByEnumeratingWithState:&v123 objects:v136 count:16];
                      if (v98) {
                        continue;
                      }
                      break;
                    }
                    v94 |= 0x2000uLL;
LABEL_280:
                    unsigned int v17 = v99;
LABEL_281:
                    uint64_t v95 = v122;
                  }
                  else
                  {
                    v94 |= 0x2000uLL;
                  }
                }
                if (v135 == 3
                  || -[BWFigVideoCaptureDevice _ubCBAFScanInProgressUsingFrameStatisticsByPortType:portTypes:timeMachineFramesMetadata:](v95, v17, v121, 0))
                {
                  uint64_t v104 = 0x80000;
                  if ((v94 & 8) == 0) {
                    uint64_t v104 = 2148007936;
                  }
                  v94 |= v104;
                }
                uint64_t v105 = v94 | 0x10000000000;
                if (!a11) {
                  uint64_t v105 = v94;
                }
                float result = v105 | a12 ^ 1u;
                goto LABEL_290;
              case 7u:
                if ((v25 & 0x100) == 0)
                {
LABEL_143:
                  BOOL v48 = 0;
                  goto LABEL_242;
                }
LABEL_257:
                int v90 = [v115 toneCurveBehavior];
                uint64_t v91 = 0x800000;
                if (v90 == 3) {
                  uint64_t v91 = 0x20000000;
                }
                if (v90 == 4) {
                  uint64_t v91 = 0x40000000;
                }
                unint64_t v92 = v91 | v25;
                int v93 = [v115 preserveBlackLevel];
                BOOL v48 = 0;
                int v47 = 0;
                if (v93) {
                  unint64_t v25 = v92 | 0x2000000;
                }
                else {
                  unint64_t v25 = v92;
                }
                goto LABEL_264;
              case 0xAu:
              case 0xCu:
                if (a7)
                {
                  uint64_t v49 = 0x40000;
                  if (v109) {
                    uint64_t v49 = 262146;
                  }
                  v25 |= v49;
                  unsigned int v50 = v118;
                }
                else
                {
                  unsigned int v50 = v118;
                  if (v120 == 12)
                  {
                    if (a10 == 1)
                    {
                      v25 |= 0x200000000uLL;
                    }
                    else if (a10 == 2)
                    {
                      v25 |= 0x100000000uLL;
                    }
                  }
                  else if (a10 == 2 && v120 == 10)
                  {
                    v25 |= 0x100000000uLL;
                  }
                }
                int v74 = 0;
                if (!*(void *)(v122 + 1456) || (v25 & 0x800) == 0) {
                  goto LABEL_165;
                }
                if (*(unsigned char *)(v122 + 1991))
                {
                  int v74 = [v115 usePreviousSIFR];
LABEL_165:
                  if ((v25 & 0x100000000) == 0) {
                    goto LABEL_166;
                  }
                }
                else
                {
                  int v74 = 0;
                  if ((v25 & 0x100000000) == 0)
                  {
LABEL_166:
                    int v75 = v74 | (v25 >> 38) & 1 & (v50 >> 26);
                    goto LABEL_169;
                  }
                }
                LOBYTE(v75) = 1;
LABEL_169:
                unsigned int v76 = -[BWFigVideoCaptureDevice _ubIsHDRCaptureUsingSceneFlags:]((unsigned char *)v122, v50);
                unsigned int v77 = v76;
                BOOL v48 = 0;
                if (*(unsigned char *)(v122 + 3204))
                {
                  int v78 = v112;
                  if ((v75 & 1) == 0)
                  {
                    if (v112 == 2) {
                      char v79 = v76;
                    }
                    else {
                      char v79 = 1;
                    }
                    if (v112 && !*(unsigned char *)(v122 + 1991) && (v79 & 1) != 0) {
                      BOOL v48 = 0;
                    }
                    else {
                      BOOL v48 = -[BWFigVideoCaptureDevice _ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream:captureStreams:settings:frameStatisticsByPortType:waitForTimeMachineToFill:failureReasonOut:]((os_unfair_lock_s *)v122, v117, v31, v119, v17, *(unsigned __int8 *)(v122 + 2016), &v135);
                    }
                  }
                }
                else
                {
                  int v78 = v112;
                }
                if (v46) {
                  v25 |= 4uLL;
                }
                if (v78 == 2)
                {
                  int v80 = v117;
                  if (v77)
                  {
                    int v81 = -[BWFigVideoCaptureDevice _ubIsTimeMachineFramesUsableForHDRUsingTimeMachineFramesMetadata:portTypes:](v122, v48);
                    if (v81) {
                      v25 |= 0x100000uLL;
                    }
                    if ((v25 & 4) == 0) {
                      goto LABEL_197;
                    }
LABEL_195:
                    if (*(unsigned char *)(v122 + 2050))
                    {
                      int v82 = 0;
                      goto LABEL_209;
                    }
LABEL_197:
                    switch([v115 toneCurveBehavior])
                    {
                      case 1u:
                        if ((v81 & 1) == 0
                          && !-[BWFigVideoCaptureDevice _ubUseSquareRootToneCurveForNonHDRCapturesUsingFrameStatistics:captureParameters:sceneFlags:](v122, v114, v115, v118))
                        {
                          goto LABEL_201;
                        }
                        v25 |= 0x800000uLL;
                        int v82 = 1;
                        break;
                      case 2u:
                        int v82 = 0;
                        if (v81) {
                          v25 |= 0x800000uLL;
                        }
                        break;
                      case 3u:
                        int v82 = 0;
                        v25 |= 0x20000000uLL;
                        break;
                      case 4u:
                        int v82 = 0;
                        v25 |= 0x40000000uLL;
                        break;
                      default:
LABEL_201:
                        int v82 = 0;
                        break;
                    }
                    if ([v115 preserveBlackLevel]) {
                      v25 |= 0x2000000uLL;
                    }
LABEL_209:
                    if ((a7 & 1) == 0)
                    {
                      if (v110)
                      {
                        if ((v118 & 0xC) != 0 || !*(unsigned char *)(v122 + 1993))
                        {
                          int v83 = *(_DWORD *)(v122 + 1984);
                          BOOL v84 = v83 == 2;
                          if (v83 == 2) {
                            char v85 = v107;
                          }
                          else {
                            char v85 = 1;
                          }
                          if (v84) {
                            int v86 = 0;
                          }
                          else {
                            int v86 = v107 ^ 1;
                          }
                          if ((v85 & 1) == 0) {
                            int v86 = [v80 sphereVideoEnabled];
                          }
                        }
                        else
                        {
                          int v86 = 0;
                        }
                        int v87 = 0;
                      }
                      else
                      {
                        int v86 = 0;
                        int v87 = (v118 >> 9) & 1 | v82;
                        if ((v118 & 0xC) == 0 && v87)
                        {
                          int v86 = 0;
                          int v87 = *(unsigned char *)(v122 + 1993) == 0;
                        }
                      }
                      int v88 = v81 | v87 | v86;
                      if (v120 == 12) {
                        int v88 = 1;
                      }
                      if (v88) {
                        v25 |= 0x400000uLL;
                      }
                    }
                    if ((v25 & 0x800) == 0) {
                      goto LABEL_242;
                    }
                    if (*(unsigned char *)(v122 + 1989)
                      && (!*(unsigned char *)(v122 + 3202) && *(unsigned char *)(v122 + 3203)
                       || (v118 & 0xC) == 0
                       || (v25 & 0x800000) != 0))
                    {
                      v25 |= 0x20000uLL;
                      if (!v81)
                      {
LABEL_242:
                        int v47 = 0;
                        goto LABEL_264;
                      }
                    }
                    else if (!v81)
                    {
                      goto LABEL_242;
                    }
                    if ((v108 & 1) != 0 || *(void *)(v122 + 1456))
                    {
                      int v47 = 0;
                      v25 |= 0x1000uLL;
                      goto LABEL_264;
                    }
                    goto LABEL_242;
                  }
                }
                else
                {
                  int v80 = v117;
                  if (v78 == 1)
                  {
                    v25 |= 0x100000uLL;
                    int v81 = 1;
                    if ((v25 & 4) == 0) {
                      goto LABEL_197;
                    }
                    goto LABEL_195;
                  }
                  if (!v78)
                  {
                    int v81 = 0;
                    v25 |= 0x1000000uLL;
                    if ((v25 & 4) == 0) {
                      goto LABEL_197;
                    }
                    goto LABEL_195;
                  }
                }
                int v81 = 0;
                if ((v25 & 4) == 0) {
                  goto LABEL_197;
                }
                goto LABEL_195;
              case 0xBu:
                if (v46) {
                  uint64_t v58 = v25 | 4;
                }
                else {
                  uint64_t v58 = v25;
                }
                int v59 = objc_msgSend(v37, "rawNightModeSupportedForPortType:", objc_msgSend(v117, "portType"));
                uint64_t v60 = v58 | 0x800000000;
                if (!v59) {
                  uint64_t v60 = v58;
                }
                if (a10 == 2) {
                  uint64_t v61 = v60 | 0x100000000;
                }
                else {
                  uint64_t v61 = v60;
                }
                int v62 = [v115 toneCurveBehavior];
                uint64_t v63 = 0x800000;
                if (v62 == 3) {
                  uint64_t v63 = 0x20000000;
                }
                if (v62 == 4) {
                  uint64_t v63 = 0x40000000;
                }
                uint64_t v64 = v63 | v61;
                if ([v115 preserveBlackLevel]) {
                  v64 |= 0x2000000uLL;
                }
                unsigned int v65 = [v119 digitalFlashMode];
                BOOL v48 = 0;
                int v47 = 0;
                BOOL v66 = v65 >= 2;
                BOOL v29 = v65 == 2;
                uint64_t v67 = v64 | 0x8000000;
                if (!v29) {
                  uint64_t v67 = v64;
                }
                if (!v66) {
                  uint64_t v67 = v64 | 0x4000000;
                }
                unint64_t v25 = v67 | 0x80000000;
                goto LABEL_264;
              default:
                goto LABEL_264;
            }
          }
        }
      }
    }
LABEL_290:
    if (v22) {
      *uint64_t v22 = v135;
    }
  }
  return result;
}

- (uint64_t)_ubIsBravoMultiCameraCaptureForSettings:(int)a3 sceneFlags:(int)a4 deliverDepthData:
{
  if (result)
  {
    uint64_t v7 = result;
    float result = [(id)result isBravoVariant];
    if (result)
    {
      float result = [a2 constituentPhotoDeliveryEnabled];
      if ((result & 1) == 0)
      {
        if (a4) {
          return -[BWFigVideoCaptureDevice _ubIsDigitalFlashCaptureForSettings:sceneFlags:](v7, a2, a3) ^ 1;
        }
      }
    }
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithID:(long long *)a3 userInitiatedRequestPTS:(unsigned int)a4 captureType:(uint64_t)a5 captureFlags:(uint64_t)a6 sceneFlags:(void *)a7 frameStatisticsByPortType:(void *)a8 metadata:(unsigned __int8)a9 deliverOriginalImage:(char)a10 deliverSushiRaw:(void *)a11 bravoConstituentImageDeliveryDeviceTypes:
{
  uint64_t v437 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v15 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      uint64_t v280 = v11;
      LODWORD(v278) = 0;
      FigDebugAssert3();
    }
    int v16 = *(void **)(v15 + 1288);
    if (!v16) {
      int v16 = *(void **)(v15 + 496);
    }
    if (a4 > 0xC || ((1 << a4) & 0x1402) == 0)
    {
LABEL_339:
      -[BWFigVideoCaptureDevice _resumeTimeMachines](v15);
      long long v203 = 0;
LABEL_340:
      -[BWStillImageCaptureSettings setMasterPortType:](v203, "setMasterPortType:", objc_msgSend(v16, "portType", v278, v280));
      return v203;
    }
    uint64_t v292 = a5 & 4;
    v330 = (void *)[MEMORY[0x1E4F1CA48] array];
    id v355 = (id)[MEMORY[0x1E4F1CA48] array];
    v342 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    v341 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    v340 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    v339 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v284 = a2;
    if (*(void *)(v15 + 544))
    {
      if ((a5 & 0x4000000800) != 0)
      {
        unsigned int v17 = -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v15, v16);
        int v18 = (void *)[MEMORY[0x1E4F1CA48] array];
        long long v415 = 0u;
        long long v416 = 0u;
        long long v417 = 0u;
        long long v418 = 0u;
        uint64_t v19 = [v17 countByEnumeratingWithState:&v415 objects:v436 count:16];
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = *(void *)v416;
          do
          {
            for (uint64_t i = 0; i != v20; ++i)
            {
              if (*(void *)v416 != v21) {
                objc_enumerationMutation(v17);
              }
              if (*(void **)(*((void *)&v415 + 1) + 8 * i) != v16) {
                objc_msgSend(v18, "addObject:");
              }
            }
            uint64_t v20 = [v17 countByEnumeratingWithState:&v415 objects:v436 count:16];
          }
          while (v20);
        }
        if (objc_msgSend(v18, "count", v278, v280)) {
          BOOL v23 = v18;
        }
        else {
          BOOL v23 = 0;
        }
        id v332 = v23;
        if (a4 == 1)
        {
          int v288 = 0;
          BOOL v289 = 0;
        }
        else if ((a5 & 4) == 0 || *(void *)(v15 + 1456))
        {
          int v288 = 0;
          BOOL v289 = 0;
        }
        else
        {
          int v288 = 0;
          BOOL v289 = [a11 count] == 0;
        }
LABEL_27:
        unint64_t v25 = objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v16, "portType", v278));
        int v26 = objc_msgSend(*(id *)(v15 + 2000), "objectForKeyedSubscript:", objc_msgSend(v16, "portType"));
        if ([v25 ltmCurve]) {
          uint64_t v27 = a5 | 0x10000000;
        }
        else {
          uint64_t v27 = a5;
        }
        BOOL v28 = (v27 & 0x2000) != 0 && *(void *)(v15 + 3248) != 0;
        long long v298 = v25;
        if ((v27 & 0x800000) != 0)
        {
          int v29 = 1;
        }
        else if ((v27 & 0x20000000) != 0)
        {
          int v29 = 2;
        }
        else if ((v27 & 0x40000000) != 0)
        {
          int v29 = 3;
        }
        else
        {
          int v29 = 0;
        }
        BOOL v30 = (v27 & 0x100000) == 0;
        BOOL v309 = (v27 & 0x1100000) == 0;
        uint64_t v31 = v27 & 0x100;
        if ((v27 & 0x100) != 0) {
          int v32 = v29;
        }
        else {
          int v32 = 0;
        }
        BOOL v33 = v32 != 0;
        unint64_t v329 = v27;
        unsigned int v361 = v29;
        unsigned int v283 = v32;
        if ((v27 & 0x100000040) == 0x100000000 || (v27 & 0x200000000) != 0) {
          unsigned int v287 = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 2056), "objectForKeyedSubscript:", objc_msgSend(v16, "portType")), "intValue");
        }
        else {
          unsigned int v287 = -1;
        }
        id obj = (id)[MEMORY[0x1E4F1CA48] array];
        uint64_t v414 = 0;
        unint64_t v413 = 0;
        uint64_t v34 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v15, v329, a4, &v414, &v413);
        v374 = v34;
        if (v34) {
          unsigned int v35 = ([v34 intValue] >> 1) & 1;
        }
        else {
          unsigned int v35 = 1;
        }
        unsigned int v331 = v35;
        unint64_t v291 = v329 & 0x400000;
        unsigned int v282 = *(_DWORD *)&v33 & (v329 >> 25);
        if ((v329 & 0x8000) != 0) {
          unsigned int v323 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "stream"), "getPropertyIfSupported:error:", *MEMORY[0x1E4F54838], 0), "BOOLValue");
        }
        else {
          unsigned int v323 = 0;
        }
        uint64_t v36 = v329 & 0x400000;
        if (v291 | a6 & 0xC) {
          BOOL v37 = 0;
        }
        else {
          BOOL v37 = v30;
        }
        if (a4 != 10) {
          BOOL v37 = 0;
        }
        BOOL v290 = v37;
        [v298 gain];
        uint64_t v324 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v329 >> 4) & 1);
        uint64_t v325 = v16;
        uint64_t v363 = v15;
        if (v331)
        {
          uint64_t v38 = a5 & 4;
          if (a4 == 1)
          {
            if ((v329 & 0x80) == 0)
            {
              int v39 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v15, 1, a6, v329, v298);
              uint64_t v40 = v329;
              int v41 = v39;
              uint64_t v285 = 0;
              uint64_t v293 = 0;
              uint64_t v311 = 0;
              unint64_t v300 = v291 >> 22;
              int v42 = a4;
              if ((v329 & 0x100000000) == 0)
              {
LABEL_86:
                long long v411 = 0u;
                long long v412 = 0u;
                long long v410 = 0u;
                int v47 = *(void **)(v15 + 3248);
                long long v420 = *a3;
                uint64_t v421 = *((void *)a3 + 2);
                unsigned int v48 = v42;
                double v49 = [(BWFigVideoCaptureDevice *)v15 _ubZeroShutterLagFrameSelectionForCaptureType:v40 captureFlags:v26 captureParameters:v47 timeMachineFrameMetadata:v41 mainFrameCount:(uint64_t)&v420 userInitiatedRequestPTS:(uint64_t)&v410];
                int v50 = v329;
                uint64_t v51 = v329;
                if (v38)
                {
                  int v52 = v41;
                  uint64_t v53 = objc_msgSend(v16, "portType", v49);
                  int v54 = (void *)[*(id *)(v15 + 3248) objectAtIndexedSubscript:SDWORD2(v412)];
                  uint64_t v55 = v53;
                  int v41 = v52;
                  BOOL v56 = -[BWFigVideoCaptureDevice _ubAWBReflowEnabledForCaptureType:primaryPortType:frameStatisticsByPortType:previewMetadata:](v15, v48, v55, a7, v54);
                  int v50 = v329;
                  uint64_t v51 = v329 | 0x8000000000;
                  if (!v56) {
                    uint64_t v51 = v329;
                  }
                }
                uint64_t v326 = v51;
                unint64_t v57 = SDWORD2(v411);
                uint64_t v364 = DWORD2(v411);
                unint64_t v368 = SDWORD1(v412);
                unsigned int v371 = v412;
                uint64_t v58 = (int)v412;
                if (v48 == 1)
                {
                  if (SHIDWORD(v411) >= 1)
                  {
                    uint64_t v365 = *MEMORY[0x1E4F541B0];
                    uint64_t v356 = *MEMORY[0x1E4F55158];
                    uint64_t v59 = *MEMORY[0x1E4F55050];
                    uint64_t v60 = *MEMORY[0x1E4F54FC0];
                    uint64_t v314 = *MEMORY[0x1E4F53F38];
                    uint64_t v347 = *MEMORY[0x1E4F54FE8];
                    uint64_t v344 = *MEMORY[0x1E4F55048];
                    int64_t v61 = HIDWORD(v411) + DWORD2(v411);
                    uint64_t v62 = -(uint64_t)(int)v412;
                    uint64_t v333 = *MEMORY[0x1E4F55020];
                    uint64_t v320 = *MEMORY[0x1E4F54FB0];
                    uint64_t v317 = *MEMORY[0x1E4F55010];
                    do
                    {
                      if (objc_msgSend(*(id *)(v15 + 3248), "count", v49) <= v57) {
                        uint64_t v63 = 0;
                      }
                      else {
                        uint64_t v63 = (void *)[*(id *)(v15 + 3248) objectAtIndexedSubscript:v57];
                      }
                      BOOL v65 = v371 <= v57 && v62 + v57 < v368;
                      [v63 objectForKeyedSubscript:v365];
                      BOOL v66 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                      objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v57), v356);
                      objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", 0), v59);
                      [v66 setObject:v374 forKeyedSubscript:v60];
                      if (v331)
                      {
                        uint64_t v67 = a6 & 0x80;
                        if (v63) {
                          uint64_t v67 = objc_msgSend((id)objc_msgSend(v63, "objectForKeyedSubscript:", v314), "BOOLValue");
                        }
                        objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v67 != 0), v347);
                        objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v361), v344);
                        objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", (v329 >> 25) & 1), v333);
                        objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v323), v320);
                        [v66 setObject:v324 forKeyedSubscript:v317];
                        -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v363, v66, v326);
                      }
                      [v330 addObject:v66];
                      int v68 = (uint64_t *)&v413;
                      if (v65) {
                        int v68 = &v414;
                      }
                      uint64_t v69 = *v68;
                      uint64_t v70 = 2;
                      if ((BYTE4(v329) & (v57 == 0)) != 0) {
                        uint64_t v70 = 18;
                      }
                      objc_msgSend(obj, "addObject:", +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", v57++, v69 | v70, 0));
                      uint64_t v15 = v363;
                    }
                    while ((uint64_t)v57 < v61);
                  }
                  if (v292)
                  {
                    int v16 = v325;
                    uint64_t v71 = v326;
                    BOOL v72 = obj;
                    if (*(unsigned char *)(v15 + 2050)) {
                      objc_msgSend(a8, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromMetadata:](v15, objc_msgSend(*(id *)(v15 + 3248), "objectAtIndexedSubscript:", SDWORD2(v412), v49)));
                    }
                    v318 = 0;
                    unsigned int v337 = 0;
                  }
                  else
                  {
                    v318 = 0;
                    unsigned int v337 = 0;
                    int v16 = v325;
                    uint64_t v71 = v326;
                    BOOL v72 = obj;
                  }
                  unint64_t v78 = 0x1E4F28000;
                  goto LABEL_207;
                }
                unsigned int v73 = v48;
                unint64_t v307 = SHIDWORD(v411);
                if (v31 | v38 | v291) {
                  BOOL v74 = 1;
                }
                else {
                  BOOL v74 = v361 == 0;
                }
                BOOL v75 = !v74 && v48 == 10;
                int v76 = v75;
                unsigned int v348 = v76;
                unsigned int v77 = (uint64_t *)MEMORY[0x1E4F55158];
                unint64_t v78 = 0x1E4F28000uLL;
                if (v75)
                {
                  BOOL v79 = (v50 & 0x1000000) == 0;
                  v434[0] = *MEMORY[0x1E4F55158];
                  uint64_t v80 = objc_msgSend(NSNumber, "numberWithInt:", DWORD2(v412), v49);
                  uint64_t v81 = *MEMORY[0x1E4F55050];
                  v435[0] = v80;
                  v435[1] = &unk_1EFB015E0;
                  uint64_t v82 = *MEMORY[0x1E4F54FE8];
                  v434[1] = v81;
                  v434[2] = v82;
                  v435[2] = [NSNumber numberWithBool:v79];
                  v434[3] = *MEMORY[0x1E4F54FB0];
                  uint64_t v83 = [NSNumber numberWithBool:v323];
                  v434[4] = *MEMORY[0x1E4F55010];
                  v435[3] = v83;
                  v435[4] = v324;
                  uint64_t v84 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v435 forKeys:v434 count:5];
                  int v85 = -1;
                }
                else
                {
                  uint64_t v84 = 0;
                  int v85 = -1;
                  if (!v38 && v73 == 12 && (v50 & 0x100000) != 0 && v41 >= 3)
                  {
                    int v85 = v412 + DWORD1(v412) - 1;
                    uint64_t v84 = 0;
                    if (DWORD2(v412) != v412)
                    {
                      if (v85 == DWORD2(v412))
                      {
                        int v85 = v412;
                      }
                      else if (v85 - DWORD2(v412) <= DWORD2(v412) - (int)v412)
                      {
                        int v85 = v412;
                      }
                    }
                  }
                }
                uint64_t v281 = v84;
                if ((int)v307 >= 1)
                {
                  uint64_t v88 = 0;
                  uint64_t v357 = *v77;
                  uint64_t v352 = *MEMORY[0x1E4F55050];
                  uint64_t v89 = *MEMORY[0x1E4F54FC0];
                  uint64_t v305 = *MEMORY[0x1E4F54FE8];
                  uint64_t v334 = *MEMORY[0x1E4F55048];
                  uint64_t v321 = *MEMORY[0x1E4F55020];
                  uint64_t v319 = *MEMORY[0x1E4F54FB0];
                  unint64_t v303 = v85 - v57;
                  uint64_t v338 = v57 - v58;
                  uint64_t v315 = *MEMORY[0x1E4F55010];
                  uint64_t v312 = (v329 >> 25) & 1;
                  uint64_t v296 = *MEMORY[0x1E4F54FD8];
                  uint64_t v294 = *MEMORY[0x1E4F54FF8];
                  do
                  {
                    int v90 = DWORD2(v412);
                    uint64_t v91 = v364 + v88;
                    unint64_t v92 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                    objc_msgSend(v92, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v364 + v88), v357);
                    [v92 setObject:&unk_1EFB015E0 forKeyedSubscript:v352];
                    [v92 setObject:v374 forKeyedSubscript:v89];
                    if (v331)
                    {
                      uint64_t v93 = v303 == v88 || v309;
                      objc_msgSend(v92, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v93), v305);
                      objc_msgSend(v92, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v361), v334);
                      objc_msgSend(v92, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v312), v321);
                      objc_msgSend(v92, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v323), v319);
                      [v92 setObject:v311 forKeyedSubscript:v315];
                      if (v91 != v90)
                      {
                        unint64_t v94 = 0;
                        goto LABEL_158;
                      }
                      if ((v329 & 0x10000000) != 0)
                      {
                        [v92 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v296];
                        [v92 setObject:&unk_1EFB015E0 forKeyedSubscript:v294];
                      }
                      -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v363, v92, v326);
                    }
                    unint64_t v94 = 0;
                    if ((v329 & 0x100000) != 0 && v91 == v90)
                    {
                      unint64_t v94 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                      objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", HIDWORD(v412)), v357);
                      [v94 setObject:&unk_1EFB015F8 forKeyedSubscript:v352];
                      [v94 setObject:v374 forKeyedSubscript:v89];
                      if (v331)
                      {
                        [v94 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v296];
                        [v94 setObject:&unk_1EFB015E0 forKeyedSubscript:v294];
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v361), v334);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v312), v321);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v323), v319);
                        [v94 setObject:v293 forKeyedSubscript:v315];
                      }
                      -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v363, v94, v326);
                    }
LABEL_158:
                    uint64_t v95 = [v330 count];
                    if (v91 == v90) {
                      uint64_t v96 = 0;
                    }
                    else {
                      uint64_t v96 = v95;
                    }
                    [v330 insertObject:v92 atIndex:v96];
                    if (v94) {
                      [v330 insertObject:v94 atIndex:v96 + 1];
                    }
                    if (v338 + v88 >= v368 || v371 > v91) {
                      uint64_t v98 = v413;
                    }
                    else {
                      uint64_t v98 = v414;
                    }
                    if (v91 == v90) {
                      uint64_t v99 = 18;
                    }
                    else {
                      uint64_t v99 = 2;
                    }
                    uint64_t v100 = SHIDWORD(v412);
                    if (v91 == HIDWORD(v412))
                    {
                      uint64_t v101 = v414 | 4;
                      if (v94) {
                        goto LABEL_176;
                      }
                    }
                    else
                    {
                      [*(id *)(v363 + 3248) objectAtIndexedSubscript:v57 + v88];
                      uint64_t v101 = 0;
                      if (v94)
                      {
LABEL_176:
                        if (v364 > v100 || v100 - v57 >= v307) {
                          objc_msgSend(obj, "addObject:", +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", v100, 0, v414 | 4));
                        }
                      }
                    }
                    uint64_t v102 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:v91 mainFlags:v98 | v99 sifrFlags:v101];
                    uint64_t v103 = v102;
                    if (v91 == v90) {
                      uint64_t v104 = v348;
                    }
                    else {
                      uint64_t v104 = 0;
                    }
                    [(BWStillImageCaptureTimeMachineFrameInfo *)v102 setIsNoLongErrorRecoveryFrame:v104];
                    [obj addObject:v103];
                    ++v88;
                    int v16 = v325;
                    unint64_t v78 = 0x1E4F28000uLL;
                  }
                  while ((uint64_t)(v57 + v88) < (int)v307 + (int)v57);
                }
                unint64_t v105 = v329;
                if (v292 && ((v329 & 0x200000000) != 0 || *(unsigned char *)(v363 + 2050)))
                {
                  objc_msgSend(a8, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromMetadata:](v363, objc_msgSend(*(id *)(v363 + 3248), "objectAtIndexedSubscript:", SDWORD2(v412))));
                  unint64_t v105 = v329;
                }
                uint64_t v71 = v326;
                if ((v105 & 0x200400000) != 0)
                {
                  uint64_t v106 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  v318 = v106;
                  if (v292)
                  {
                    uint64_t v116 = 1;
                    uint64_t v117 = [NSNumber numberWithBool:1];
                    uint64_t v115 = *MEMORY[0x1E4F54FB8];
                    [v106 setObject:v117 forKeyedSubscript:*MEMORY[0x1E4F54FB8]];
                    uint64_t v108 = *MEMORY[0x1E4F54FE8];
                    [v106 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54FE8]];
                    uint64_t v118 = [NSNumber numberWithBool:v323];
                    uint64_t v112 = *MEMORY[0x1E4F54FB0];
                    [v106 setObject:v118 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
                    uint64_t v113 = *MEMORY[0x1E4F55010];
                    [v106 setObject:v324 forKeyedSubscript:*MEMORY[0x1E4F55010]];
                    if ((v329 & 0x200000000) != 0)
                    {
                      [v106 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54FA0]];
                      uint64_t v114 = *MEMORY[0x1E4F54FC0];
LABEL_196:
                      uint64_t v119 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                      [v119 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55050]];
                      [v119 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55290]];
                      [v119 setObject:&unk_1EFB01610 forKeyedSubscript:*MEMORY[0x1E4F55000]];
                      uint64_t v120 = [NSNumber numberWithInt:v287];
                      [v119 setObject:v120 forKeyedSubscript:*MEMORY[0x1E4F55018]];
                      [v119 setObject:v374 forKeyedSubscript:v114];
                      [v119 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v115];
                      if ([v298 hrEnabled]
                        && ![v318 objectForKeyedSubscript:*MEMORY[0x1E4F54FA0]])
                      {
                        [v119 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v108];
                      }
                      [v355 addObject:v119];
                      objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 1, v414 | 2, 0));
                      uint64_t v116 = 2;
                      uint64_t v71 = v326;
                    }
                  }
                  else
                  {
                    uint64_t v107 = [NSNumber numberWithBool:(v329 & 0x1000000) == 0];
                    uint64_t v108 = *MEMORY[0x1E4F54FE8];
                    [v106 setObject:v107 forKeyedSubscript:*MEMORY[0x1E4F54FE8]];
                    uint64_t v109 = [NSNumber numberWithInt:v283];
                    [v106 setObject:v109 forKeyedSubscript:*MEMORY[0x1E4F55048]];
                    uint64_t v110 = [NSNumber numberWithInt:v282];
                    [v106 setObject:v110 forKeyedSubscript:*MEMORY[0x1E4F55020]];
                    uint64_t v111 = [NSNumber numberWithBool:v323];
                    uint64_t v112 = *MEMORY[0x1E4F54FB0];
                    [v106 setObject:v111 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
                    uint64_t v113 = *MEMORY[0x1E4F55010];
                    [v106 setObject:v324 forKeyedSubscript:*MEMORY[0x1E4F55010]];
                    uint64_t v114 = *MEMORY[0x1E4F54FC0];
                    [v106 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
                    objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v414 | 0x20, 0));
                    if ((v329 & 0x200000000) != 0)
                    {
                      uint64_t v115 = *MEMORY[0x1E4F54FB8];
                      goto LABEL_196;
                    }
                    uint64_t v116 = 1;
                  }
                  if (!v291) {
                    goto LABEL_206;
                  }
                  uint64_t v121 = v414;
                  uint64_t v122 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  [v122 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55050]];
                  [v122 setObject:&unk_1EFB015F8 forKeyedSubscript:*MEMORY[0x1E4F55290]];
                  [v122 setObject:&unk_1EFB01610 forKeyedSubscript:*MEMORY[0x1E4F55000]];
                  [v122 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
                  if (v331)
                  {
                    uint64_t v123 = [NSNumber numberWithInt:v361];
                    [v122 setObject:v123 forKeyedSubscript:*MEMORY[0x1E4F55048]];
                    uint64_t v124 = [NSNumber numberWithBool:(v329 >> 25) & 1];
                    [v122 setObject:v124 forKeyedSubscript:*MEMORY[0x1E4F55020]];
                    objc_msgSend(v122, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v323), v112);
                    [v122 setObject:v285 forKeyedSubscript:v113];
                  }
                  if (v300)
                  {
                    [v355 addObject:v122];
                    objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v116, v121 | 8, 0));
                    unsigned int v337 = 0;
                    BOOL v72 = obj;
                  }
                  else
                  {
LABEL_206:
                    unsigned int v337 = 0;
                    BOOL v72 = obj;
                  }
                  goto LABEL_207;
                }
                BOOL v72 = obj;
                if (v281) {
                  objc_msgSend(v330, "addObject:");
                }
                v318 = 0;
                unsigned int v337 = 0;
LABEL_207:
                v335 = v72;
                uint64_t v327 = v71;
                if (v288)
                {
                  v335 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v49);
                  long long v402 = 0u;
                  long long v403 = 0u;
                  long long v404 = 0u;
                  long long v405 = 0u;
                  uint64_t v125 = [v72 countByEnumeratingWithState:&v402 objects:v432 count:16];
                  if (v125)
                  {
                    uint64_t v126 = v125;
                    uint64_t v127 = *(void *)v403;
                    do
                    {
                      for (uint64_t j = 0; j != v126; ++j)
                      {
                        if (*(void *)v403 != v127) {
                          objc_enumerationMutation(v72);
                        }
                        long long v129 = *(void **)(*((void *)&v402 + 1) + 8 * j);
                        unint64_t v130 = v413;
                        objc_opt_class();
                        if (objc_opt_isKindOfClass())
                        {
                          long long v131 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", [v129 timeMachineIndex], v130, v130);
                          -[BWStillImageCaptureTimeMachineFrameInfo setIsNoLongErrorRecoveryFrame:](v131, "setIsNoLongErrorRecoveryFrame:", [v129 isNoLongErrorRecoveryFrame]);
                        }
                        else
                        {
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) == 0) {
                            goto LABEL_218;
                          }
                          long long v131 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", [v129 bracketedCaptureSequenceNumber], v130, v130);
                        }
                        [v335 addObject:v131];
LABEL_218:
                        BOOL v72 = obj;
                      }
                      uint64_t v126 = [obj countByEnumeratingWithState:&v402 objects:v432 count:16];
                    }
                    while (v126);
                  }
                }
                if (!v289) {
                  goto LABEL_238;
                }
                long long v132 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v49);
                long long v398 = 0u;
                long long v399 = 0u;
                long long v400 = 0u;
                long long v401 = 0u;
                uint64_t v133 = [v72 countByEnumeratingWithState:&v398 objects:v431 count:16];
                if (v133)
                {
                  uint64_t v134 = v133;
                  uint64_t v135 = *(void *)v399;
                  while (1)
                  {
                    for (uint64_t k = 0; k != v134; ++k)
                    {
                      if (*(void *)v399 != v135) {
                        objc_enumerationMutation(obj);
                      }
                      long long v137 = *(void **)(*((void *)&v398 + 1) + 8 * k);
                      uint64_t v138 = [v137 mainFlags];
                      if ((v138 & 0x10) != 0) {
                        unint64_t v139 = v138;
                      }
                      else {
                        unint64_t v139 = v413;
                      }
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        long long v140 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", [v137 timeMachineIndex], v139, objc_msgSend(v137, "sifrFlags"));
                        -[BWStillImageCaptureTimeMachineFrameInfo setIsNoLongErrorRecoveryFrame:](v140, "setIsNoLongErrorRecoveryFrame:", [v137 isNoLongErrorRecoveryFrame]);
                      }
                      else
                      {
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) == 0) {
                          continue;
                        }
                        long long v140 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", [v137 bracketedCaptureSequenceNumber], v139, objc_msgSend(v137, "sifrFlags"));
                      }
                      [v132 addObject:v140];
                    }
                    uint64_t v134 = [obj countByEnumeratingWithState:&v398 objects:v431 count:16];
                    if (!v134)
                    {
                      BOOL v72 = v132;
                      int v16 = v325;
                      uint64_t v71 = v327;
                      unint64_t v78 = 0x1E4F28000;
                      goto LABEL_238;
                    }
                  }
                }
                BOOL v72 = v132;
LABEL_238:
                id obja = v72;
                long long v396 = 0u;
                long long v397 = 0u;
                long long v394 = 0u;
                long long v395 = 0u;
                uint64_t v310 = [v332 countByEnumeratingWithState:&v394 objects:v430 count:16];
                if (v310)
                {
                  uint64_t v141 = HIDWORD(v329) & 1;
                  unint64_t v142 = v71 & 0xFFFFFFFFFFFF7FFFLL;
                  uint64_t v295 = v71 & 0x10;
                  if ((v71 & 0x10) == 0) {
                    LOBYTE(v141) = 1;
                  }
                  char v316 = v141;
                  uint64_t v313 = *(void *)v395;
                  uint64_t v306 = *MEMORY[0x1E4F54838];
                  uint64_t v143 = *MEMORY[0x1E4F55010];
                  uint64_t v375 = *MEMORY[0x1E4F54FB0];
                  uint64_t v366 = *MEMORY[0x1E4F55050];
                  uint64_t v372 = *MEMORY[0x1E4F55018];
                  if (v361) {
                    int v144 = 11;
                  }
                  else {
                    int v144 = 14;
                  }
                  if (v361) {
                    int v145 = 12;
                  }
                  else {
                    int v145 = 15;
                  }
                  if (v361) {
                    int v146 = 13;
                  }
                  else {
                    int v146 = 16;
                  }
                  if (a4 == 12) {
                    int v144 = 20;
                  }
                  unsigned int v304 = v144;
                  uint64_t v345 = *MEMORY[0x1E4F55000];
                  if (a4 == 12) {
                    int v147 = 21;
                  }
                  else {
                    int v147 = v145;
                  }
                  unsigned int v301 = v147;
                  if (a4 == 12) {
                    int v148 = 22;
                  }
                  else {
                    int v148 = v146;
                  }
                  unsigned int v297 = v148;
                  unint64_t v308 = v71 & 0xFFFFFFFFFFFF7FFFLL;
                  do
                  {
                    uint64_t v149 = 0;
                    do
                    {
                      if (*(void *)v395 != v313) {
                        objc_enumerationMutation(v332);
                      }
                      uint64_t v150 = *(void **)(*((void *)&v394 + 1) + 8 * v149);
                      if ((v71 & 0x8000) != 0)
                      {
                        int v151 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v394 + 1) + 8 * v149), "stream"), "getPropertyIfSupported:error:", v306, 0), "BOOLValue");
                        if (v151) {
                          unint64_t v142 = v71;
                        }
                      }
                      else
                      {
                        int v151 = 0;
                      }
                      if ((v316 & 1) == 0 && [v150 activeQuadraBinningFactor] != 1) {
                        v142 &= ~0x10uLL;
                      }
                      if ((v329 & 0x40) != 0)
                      {
                        uint64_t v152 = v363;
                        if (!FigCaptureVideoDimensionsAreEqual([v150 activeSensorDimensions], *(void *)(v363 + 140)))v142 &= ~0x40uLL; {
                      }
                        }
                      else
                      {
                        uint64_t v152 = v363;
                      }
                      objc_msgSend(v342, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v78 + 3792), "numberWithUnsignedLongLong:", v142), objc_msgSend(v150, "portType"));
                      v349 = objc_msgSend(*(id *)(v152 + 2000), "objectForKeyedSubscript:", objc_msgSend(v150, "portType"));
                      v362 = v150;
                      if (!v331 || v150 == *(void **)(v152 + 1456))
                      {
                        uint64_t v160 = 0;
                      }
                      else
                      {
                        uint64_t v153 = objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v150, "portType"));
                        [v153 gain];
                        uint64_t v154 = objc_msgSend(v150, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v142 >> 4) & 1);
                        uint64_t v155 = v154;
                        if (a4 == 1)
                        {
                          uint64_t v428 = v324;
                          uint64_t v429 = v154;
                          unint64_t v156 = (void *)MEMORY[0x1E4F1C9E8];
                          unint64_t v157 = &v429;
                          int v158 = &v428;
                          uint64_t v159 = 1;
                        }
                        else if (v290)
                        {
                          [v153 gain];
                          uint64_t v161 = objc_msgSend(v150, "noiseReductionAndSharpeningConfigurationForType:gain:", 10);
                          v426[0] = v324;
                          v426[1] = v311;
                          v427[0] = v155;
                          v427[1] = v161;
                          unint64_t v156 = (void *)MEMORY[0x1E4F1C9E8];
                          unint64_t v157 = v427;
                          int v158 = v426;
                          uint64_t v159 = 2;
                        }
                        else
                        {
                          [v298 gain];
                          uint64_t v162 = objc_msgSend(v150, "noiseReductionAndSharpeningConfigurationForType:gain:", v304);
                          [v298 gain];
                          int v163 = v150;
                          uint64_t v164 = objc_msgSend(v150, "noiseReductionAndSharpeningConfigurationForType:gain:", v301);
                          [v298 gain];
                          uint64_t v165 = objc_msgSend(v163, "noiseReductionAndSharpeningConfigurationForType:gain:", v297);
                          v424[0] = v324;
                          v424[1] = v311;
                          v425[0] = v155;
                          v425[1] = v162;
                          v424[2] = v293;
                          v424[3] = v285;
                          v425[2] = v164;
                          v425[3] = v165;
                          unint64_t v156 = (void *)MEMORY[0x1E4F1C9E8];
                          unint64_t v157 = v425;
                          int v158 = v424;
                          uint64_t v159 = 4;
                        }
                        uint64_t v160 = (void *)[v156 dictionaryWithObjects:v157 forKeys:v158 count:v159];
                      }
                      uint64_t v166 = (void *)[MEMORY[0x1E4F1CA48] array];
                      long long v390 = 0u;
                      long long v391 = 0u;
                      long long v392 = 0u;
                      long long v393 = 0u;
                      uint64_t v167 = [v330 countByEnumeratingWithState:&v390 objects:v423 count:16];
                      uint64_t v322 = v149;
                      if (v167)
                      {
                        uint64_t v168 = v167;
                        uint64_t v169 = *(void *)v391;
                        if (v151) {
                          uint64_t v170 = MEMORY[0x1E4F1CC38];
                        }
                        else {
                          uint64_t v170 = 0;
                        }
                        do
                        {
                          for (uint64_t m = 0; m != v168; ++m)
                          {
                            if (*(void *)v391 != v169) {
                              objc_enumerationMutation(v330);
                            }
                            v172 = *(void **)(*((void *)&v390 + 1) + 8 * m);
                            v173 = (void *)[v172 mutableCopy];
                            uint64_t v174 = [v172 objectForKeyedSubscript:v143];
                            [v173 setObject:v170 forKeyedSubscript:v375];
                            objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v160, "objectForKeyedSubscript:", v174), v143);
                            [v166 addObject:v173];
                          }
                          uint64_t v168 = [v330 countByEnumeratingWithState:&v390 objects:v423 count:16];
                        }
                        while (v168);
                      }
                      else if (v151)
                      {
                        uint64_t v170 = MEMORY[0x1E4F1CC38];
                      }
                      else
                      {
                        uint64_t v170 = 0;
                      }
                      objc_msgSend(v341, "setObject:forKeyedSubscript:", v166, objc_msgSend(v362, "portType"));
                      id v175 = (id)[v318 mutableCopy];
                      [v175 setObject:v170 forKeyedSubscript:v375];
                      objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v160, "objectForKeyedSubscript:", v324), v143);
                      objc_msgSend(v340, "setObject:forKeyedSubscript:", v175, objc_msgSend(v362, "portType"));
                      v369 = (void *)[MEMORY[0x1E4F1CA48] array];
                      long long v386 = 0u;
                      long long v387 = 0u;
                      long long v388 = 0u;
                      long long v389 = 0u;
                      uint64_t v176 = [v355 countByEnumeratingWithState:&v386 objects:v422 count:16];
                      if (v176)
                      {
                        uint64_t v177 = v176;
                        int v178 = 0;
                        uint64_t v179 = *(void *)v387;
                        do
                        {
                          uint64_t v180 = 0;
                          do
                          {
                            if (*(void *)v387 != v179) {
                              objc_enumerationMutation(v355);
                            }
                            int v181 = *(void **)(*((void *)&v386 + 1) + 8 * v180);
                            uint64_t v182 = (void *)[v181 mutableCopy];
                            int v183 = objc_msgSend((id)objc_msgSend(v182, "objectForKeyedSubscript:", v366), "intValue");
                            if (!v183) {
                              ++v178;
                            }
                            uint64_t v184 = [v181 objectForKeyedSubscript:v143];
                            [v182 setObject:v170 forKeyedSubscript:v375];
                            objc_msgSend(v182, "setObject:forKeyedSubscript:", objc_msgSend(v160, "objectForKeyedSubscript:", v184), v143);
                            if ([v182 objectForKeyedSubscript:v372])
                            {
                              if ((objc_msgSend((id)objc_msgSend(*(id *)(v363 + 2056), "objectForKeyedSubscript:", objc_msgSend(v362, "portType")), "intValue") & 0x80000000) != 0)goto LABEL_309; {
                              v384[0] = MEMORY[0x1E4F143A8];
                              }
                              v384[1] = 3221225472;
                              v384[2] = __235__BWFigVideoCaptureDevice__ubStillImageCaptureSettingsWithID_userInitiatedRequestPTS_captureType_captureFlags_sceneFlags_frameStatisticsByPortType_metadata_deliverOriginalImage_deliverSushiRaw_bravoConstituentImageDeliveryDeviceTypes___block_invoke;
                              v384[3] = &__block_descriptor_36_e45_B32__0__BWStillImageCaptureFrameInfo_8Q16_B24l;
                              int v385 = v178;
                              uint64_t v185 = [obja indexOfObjectPassingTest:v384];
                              if (v185 == 0x7FFFFFFFFFFFFFFFLL)
                              {
                                int v383 = 0;
                                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                                uint64_t v15 = v363;
                                int v16 = v325;
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                                goto LABEL_339;
                              }
                              int v186 = (void *)[obja objectAtIndexedSubscript:v185];
                              uint64_t v187 = v183 ? [v186 sifrFlags] : objc_msgSend(v186, "mainFlags");
                              if ((v413 & v187) != 0
                                || (uint64_t v190 = objc_msgSend((id)objc_msgSend(*(id *)(v363 + 2056), "objectForKeyedSubscript:", objc_msgSend(v362, "portType")), "intValue"), (v190 & 0x80000000) != 0))
                              {
LABEL_309:
                                uint64_t v188 = 0;
                              }
                              else
                              {
                                uint64_t v188 = [NSNumber numberWithInt:v190];
                              }
                              [v182 setObject:v188 forKeyedSubscript:v372];
                              if ((v329 & 0x100000080) == 0x100000080
                                && [v182 objectForKeyedSubscript:v372])
                              {
                                char v189 = NSNumber;
                                [v349 learnedNRUltraHighResolutionExposureBias];
                                objc_msgSend(v182, "setObject:forKeyedSubscript:", objc_msgSend(v189, "numberWithFloat:"), v345);
                              }
                            }
                            [v369 addObject:v182];

                            ++v180;
                          }
                          while (v177 != v180);
                          uint64_t v191 = [v355 countByEnumeratingWithState:&v386 objects:v422 count:16];
                          uint64_t v177 = v191;
                        }
                        while (v191);
                      }
                      objc_msgSend(v339, "setObject:forKeyedSubscript:", v369, objc_msgSend(v362, "portType"));
                      uint64_t v149 = v322 + 1;
                      unint64_t v142 = v308;
                      int v16 = v325;
                      uint64_t v71 = v327;
                      unint64_t v78 = 0x1E4F28000;
                    }
                    while (v322 + 1 != v310);
                    uint64_t v310 = [v332 countByEnumeratingWithState:&v394 objects:v430 count:16];
                  }
                  while (v310);
                  uint64_t v192 = v295;
                }
                else
                {
                  unint64_t v142 = v71 & 0xFFFFFFFFFFFF7FFFLL;
                  uint64_t v192 = v71 & 0x10;
                }
                long long v194 = (void *)[MEMORY[0x1E4F1CA48] array];
                if (v323) {
                  unint64_t v142 = v71;
                }
                if ((v329 & 0x100000000) == 0
                  && v192
                  && [v16 activeQuadraBinningFactor] != 1)
                {
                  v142 &= ~0x10uLL;
                }
                uint64_t v195 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", [v16 portType], a4, v142, v337, v330, v318, v355, v335);
                -[BWStillImageCaptureStreamSettings setSensorIDString:](v195, "setSensorIDString:", [v16 sensorIDString]);
                [v194 addObject:v195];

                long long v380 = 0u;
                long long v381 = 0u;
                long long v378 = 0u;
                long long v379 = 0u;
                uint64_t v196 = [v332 countByEnumeratingWithState:&v378 objects:v419 count:16];
                if (v196)
                {
                  uint64_t v197 = v196;
                  uint64_t v198 = *(void *)v379;
                  do
                  {
                    for (uint64_t n = 0; n != v197; ++n)
                    {
                      if (*(void *)v379 != v198) {
                        objc_enumerationMutation(v332);
                      }
                      long long v200 = *(void **)(*((void *)&v378 + 1) + 8 * n);
                      long long v201 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", [v200 portType], a4, objc_msgSend((id)objc_msgSend(v342, "objectForKeyedSubscript:", objc_msgSend(v200, "portType")), "unsignedLongValue"), v337, objc_msgSend(v341, "objectForKeyedSubscript:", objc_msgSend(v200, "portType")), objc_msgSend(v340, "objectForKeyedSubscript:", objc_msgSend(v200, "portType")), objc_msgSend(v339, "objectForKeyedSubscript:", objc_msgSend(v200, "portType")), obja);
                      -[BWStillImageCaptureStreamSettings setSensorIDString:](v201, "setSensorIDString:", [v200 sensorIDString]);
                      [v194 addObject:v201];
                    }
                    uint64_t v197 = [v332 countByEnumeratingWithState:&v378 objects:v419 count:16];
                  }
                  while (v197);
                }
                LOBYTE(v279) = a10;
                long long v202 = [[BWStillImageCaptureSettings alloc] initWithSettingsID:v284 captureType:a4 captureFlags:v327 sceneFlags:a6 frameStatisticsByPortType:a7 deliverOriginalImage:a9 deliverSushiRaw:v279 captureStreamSettings:v194];
                long long v203 = v202;
                uint64_t v15 = v363;
                if ((v327 & 0x2000) != 0)
                {
                  [(BWStillImageCaptureSettings *)v202 setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:v337 + 1];
                  long long v204 = (void *)[*(id *)(v363 + 3248) lastObject];
                  CMTimeMakeFromDictionary(&v377, (CFDictionaryRef)[v204 objectForKeyedSubscript:*MEMORY[0x1E4F530C0]]);
                  CMTime v376 = v377;
                  [(BWStillImageCaptureSettings *)v203 setLastTimeMachinePTS:&v376];
                }
                int v16 = v325;
                if (v203) {
                  goto LABEL_340;
                }
                goto LABEL_339;
              }
              goto LABEL_66;
            }
            [v298 gain];
            uint64_t v324 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 30);
            int v45 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v15, 1, a6, v329, v298);
            uint64_t v40 = v329;
            int v41 = v45;
            uint64_t v285 = 0;
            uint64_t v293 = 0;
            uint64_t v311 = 0;
            unint64_t v300 = v291 >> 22;
            int v42 = a4;
            if ((v329 & 0x100000000) == 0)
            {
LABEL_81:
              if ((v40 & 0x10000000000) == 0 && (!*(unsigned char *)(v15 + 1464) || v28)) {
                goto LABEL_86;
              }
              goto LABEL_344;
            }
            goto LABEL_66;
          }
          if (v290)
          {
            [v298 gain];
            uint64_t v311 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 10);
            uint64_t v293 = 0;
            uint64_t v285 = 0;
          }
          else
          {
            if (a4 == 12)
            {
              [v298 gain];
              uint64_t v311 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 20);
              [v298 gain];
              uint64_t v293 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 21);
              [v298 gain];
              int v86 = v16;
              uint64_t v87 = 22;
            }
            else
            {
              [v298 gain];
              if (v361)
              {
                uint64_t v311 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 11);
                [v298 gain];
                uint64_t v293 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 12);
                [v298 gain];
                int v86 = v16;
                uint64_t v87 = 13;
              }
              else
              {
                uint64_t v311 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 14);
                [v298 gain];
                uint64_t v293 = objc_msgSend(v16, "noiseReductionAndSharpeningConfigurationForType:gain:", 15);
                [v298 gain];
                int v86 = v16;
                uint64_t v87 = 16;
              }
            }
            uint64_t v285 = objc_msgSend(v86, "noiseReductionAndSharpeningConfigurationForType:gain:", v87);
          }
        }
        else
        {
          uint64_t v311 = 0;
          uint64_t v293 = 0;
          uint64_t v285 = 0;
          uint64_t v38 = a5 & 4;
        }
        int v43 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v15, a4, a6, v329, v298);
        uint64_t v40 = v329;
        int v41 = v43;
        unint64_t v300 = v291 >> 22;
        if ((v329 & 0x100000000) == 0)
        {
          if ((v329 & 0x80) == 0)
          {
            int v42 = a4;
            char v44 = a4 == 1 || v28;
            if (v44) {
              goto LABEL_86;
            }
            goto LABEL_344;
          }
          int v42 = a4;
          goto LABEL_81;
        }
        int v42 = a4;
LABEL_66:
        if ((v287 & 0x80000000) != 0) {
          goto LABEL_86;
        }
LABEL_344:
        [v330 removeAllObjects];
        [v355 removeAllObjects];
        unint64_t v205 = v329;
        uint64_t v71 = v329;
        if (v38)
        {
          BOOL v206 = -[BWFigVideoCaptureDevice _ubAWBReflowEnabledForCaptureType:primaryPortType:frameStatisticsByPortType:previewMetadata:](v15, a4, [v16 portType], a7, 0);
          unint64_t v205 = v329;
          if (v206) {
            uint64_t v71 = v329 | 0x8000000000;
          }
          else {
            uint64_t v71 = v329;
          }
        }
        BOOL v72 = obj;
        BOOL v350 = v41 > 1;
        if (a4 == 12 && (v205 & 0x100000000) != 0 && v41 >= 2)
        {
          if (*(unsigned char *)(v15 + 2050))
          {
            int v207 = 1;
            int v370 = 1;
            goto LABEL_361;
          }
        }
        else if (a4 != 12)
        {
          int v208 = 1;
LABEL_356:
          int v370 = 0;
          if (v208 <= 1) {
            int v207 = 1;
          }
          else {
            int v207 = v208;
          }
          if (v207 >= v41) {
            int v207 = v41;
          }
LABEL_361:
          unsigned int v337 = v207;
          int v353 = v41;
          long long v209 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          if (v38)
          {
            uint64_t v216 = (v71 & 0x800) == 0 || *(void *)(v15 + 1456) == 0;
            v337 -= v216;
            uint64_t v217 = [NSNumber numberWithBool:v216];
            [v209 setObject:v217 forKeyedSubscript:*MEMORY[0x1E4F54FB8]];
            uint64_t v336 = *MEMORY[0x1E4F54FE8];
            objc_msgSend(v209, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38]);
            if (v216)
            {
              uint64_t v218 = [NSNumber numberWithBool:v323];
              [v209 setObject:v218 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
              [v209 setObject:v324 forKeyedSubscript:*MEMORY[0x1E4F55010]];
              int v219 = 0;
              goto LABEL_373;
            }
            [v209 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
            uint64_t v214 = v413;
          }
          else
          {
            uint64_t v210 = [NSNumber numberWithBool:(v329 & 0x1000000) == 0];
            uint64_t v336 = *MEMORY[0x1E4F54FE8];
            objc_msgSend(v209, "setObject:forKeyedSubscript:", v210);
            uint64_t v211 = [NSNumber numberWithInt:v283];
            [v209 setObject:v211 forKeyedSubscript:*MEMORY[0x1E4F55048]];
            uint64_t v212 = [NSNumber numberWithInt:v282];
            [v209 setObject:v212 forKeyedSubscript:*MEMORY[0x1E4F55020]];
            uint64_t v213 = [NSNumber numberWithBool:v323];
            [v209 setObject:v213 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
            [v209 setObject:v324 forKeyedSubscript:*MEMORY[0x1E4F55010]];
            [v209 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
            uint64_t v214 = v414 | 0x20;
          }
          objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v214, 0));
          int v219 = 1;
LABEL_373:
          v318 = v209;
          -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v15, v209, v71);
          if (v353 < 1)
          {
            uint64_t v227 = 1;
            goto LABEL_468;
          }
          uint64_t v328 = v71;
          uint64_t v220 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          uint64_t v346 = *MEMORY[0x1E4F55050];
          objc_msgSend(v220, "setObject:forKeyedSubscript:", &unk_1EFB015E0);
          uint64_t v221 = *MEMORY[0x1E4F55290];
          [v220 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55290]];
          uint64_t v222 = *MEMORY[0x1E4F55000];
          [v220 setObject:&unk_1EFB01610 forKeyedSubscript:*MEMORY[0x1E4F55000]];
          uint64_t v223 = *MEMORY[0x1E4F54FC0];
          [v220 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
          v367 = v220;
          if ((v329 & 0x100000000) != 0)
          {
            uint64_t v224 = [NSNumber numberWithInt:v287];
            [v220 setObject:v224 forKeyedSubscript:*MEMORY[0x1E4F55018]];
            if ((v329 & 0x80) == 0) {
              goto LABEL_389;
            }
            v225 = NSNumber;
            [v26 learnedNRUltraHighResolutionExposureBias];
            int v226 = objc_msgSend(v225, "numberWithFloat:");
          }
          else
          {
            if ((v329 & 0x80) == 0 || !*(unsigned char *)(v15 + 1464))
            {
              if (v331)
              {
                uint64_t v228 = [NSNumber numberWithInt:v361];
                [v220 setObject:v228 forKeyedSubscript:*MEMORY[0x1E4F55048]];
                uint64_t v229 = [NSNumber numberWithBool:(v329 >> 25) & 1];
                [v220 setObject:v229 forKeyedSubscript:*MEMORY[0x1E4F55020]];
                uint64_t v230 = [NSNumber numberWithBool:v323];
                [v220 setObject:v230 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
                [v220 setObject:v311 forKeyedSubscript:*MEMORY[0x1E4F55010]];
              }
              if (!v309 || ![v298 hrEnabled])
              {
LABEL_389:
                v358 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v220];
                -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v15, v358, v328);
                if (v331)
                {
                  if ((v329 & 0x12100000) == 0x2000000)
                  {
                    BOOL v233 = -[BWFigVideoCaptureDevice _ubGenerateLTMCurveForCaptureStream:frameStatistics:](v15, v325, objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v325, "portType")));
                    if ((v328 & 0x800) == 0 || !*(unsigned char *)(v15 + 3203) || [a11 count])
                    {
                      long long v408 = 0u;
                      long long v409 = 0u;
                      long long v406 = 0u;
                      long long v407 = 0u;
                      uint64_t v234 = [v332 countByEnumeratingWithState:&v406 objects:v433 count:16];
                      if (v234)
                      {
                        uint64_t v235 = v234;
                        uint64_t v236 = *(void *)v407;
                        do
                        {
                          for (iuint64_t i = 0; ii != v235; ++ii)
                          {
                            if (*(void *)v407 != v236) {
                              objc_enumerationMutation(v332);
                            }
                            BOOL v233 = v233
                                || -[BWFigVideoCaptureDevice _ubGenerateLTMCurveForCaptureStream:frameStatistics:](v363, *(void **)(*((void *)&v406 + 1) + 8 * ii), objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(*(id *)(*((void *)&v406 + 1) + 8 * ii), "portType")));
                          }
                          uint64_t v235 = [v332 countByEnumeratingWithState:&v406 objects:v433 count:16];
                        }
                        while (v235);
                      }
                    }
                    if (!v233)
                    {
                      BOOL v239 = !*(unsigned char *)(v363 + 1464) || *(float *)(v363 + 4040) != 0.0;
                      if (!*(void *)(v363 + 544)) {
                        goto LABEL_417;
                      }
                      if (!*(unsigned char *)(v363 + 600)) {
                        BOOL v239 = 0;
                      }
                      if ((a6 & 0xC) == 0
                        || !v239
                        || (objc_msgSend((id)objc_msgSend(v325, "portType"), "isEqual:", objc_msgSend(*(id *)(v363 + 496), "portType")) & 1) != 0)
                      {
LABEL_417:
                        uint64_t v15 = v363;
                        goto LABEL_418;
                      }
                    }
                    v328 |= 0x10000000uLL;
                    uint64_t v15 = v363;
                  }
                  else
                  {
                    int v238 = v329;
                    if ((v329 & 0x10000000) == 0) {
                      goto LABEL_419;
                    }
                  }
                  [v358 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54FD8]];
                  [v358 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F54FF8]];
                }
LABEL_418:
                int v238 = v329;
LABEL_419:
                if ((v238 & 0x100000) == 0)
                {
                  BOOL v245 = 0;
                  v373 = 0;
                  unsigned int v246 = a4;
                  uint64_t v71 = v328;
                  uint64_t v247 = v292;
                  int v248 = v353;
LABEL_434:
                  BOOL v255 = v246 == 12 && v245;
                  if (v247) {
                    BOOL v255 = 0;
                  }
                  BOOL v354 = v255;
                  if ((int)(v337 - 1) > (int)(v248 - v337)) {
                    int v256 = 1;
                  }
                  else {
                    int v256 = v248;
                  }
                  int v351 = v256;
                  int v257 = v248 + v219;
                  if (v219) {
                    unsigned int v258 = 3;
                  }
                  else {
                    unsigned int v258 = 2;
                  }
                  uint64_t v227 = 1;
                  do
                  {
                    uint64_t v259 = 50;
                    if (v337 != v219) {
                      uint64_t v259 = 2;
                    }
                    if ((v370 & (v219 < v258)) != 0) {
                      uint64_t v260 = 258;
                    }
                    else {
                      uint64_t v260 = v259;
                    }
                    uint64_t v261 = v260 | v414;
                    if (v337 == v219)
                    {
                      [v355 addObject:v358];
                      if (v373)
                      {
                        uint64_t v262 = v414 | 4;
                        [v355 addObject:v373];
                        uint64_t v263 = (v227 + 1);
                        if (objc_msgSend((id)objc_msgSend(v373, "objectForKeyedSubscript:", v346), "intValue") == 1)
                        {
                          long long v264 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:v227 mainFlags:v261 sifrFlags:v262];
                          uint64_t v227 = (v227 + 1);
                        }
                        else
                        {
                          objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v227, v261, 0));
                          uint64_t v227 = (v227 + 2);
                          long long v264 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:v263 mainFlags:v262 sifrFlags:0];
                        }
                      }
                      else
                      {
                        long long v264 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:v227 mainFlags:v261 sifrFlags:0];
                        uint64_t v227 = (v227 + 1);
                      }
                      uint64_t v71 = v328;
                    }
                    else
                    {
                      BOOL v265 = v351 == v219 && v354;
                      long long v266 = v367;
                      if (v265)
                      {
                        long long v266 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v367];
                        [v266 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v336];
                      }
                      [v355 addObject:v266];
                      long long v264 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:v227 mainFlags:v261 sifrFlags:0];
                      uint64_t v227 = (v227 + 1);
                    }
                    [obj addObject:v264];
                    ++v219;
                  }
                  while (v219 < v257);
                  int v267 = v337;
                  if (v370) {
                    int v267 = -1;
                  }
                  unsigned int v337 = v267;
                  BOOL v72 = obj;
                  uint64_t v36 = v329 & 0x400000;
LABEL_468:
                  int v16 = v325;
                  unint64_t v78 = 0x1E4F28000uLL;
                  if ((v329 & 0x200000000) != 0)
                  {
                    long long v268 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                    [v268 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55050]];
                    [v268 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55290]];
                    [v268 setObject:&unk_1EFB01610 forKeyedSubscript:*MEMORY[0x1E4F55000]];
                    uint64_t v269 = [NSNumber numberWithInt:v287];
                    [v268 setObject:v269 forKeyedSubscript:*MEMORY[0x1E4F55018]];
                    [v268 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
                    if ([v298 hrEnabled]) {
                      [v268 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v336];
                    }
                    [v355 addObject:v268];
                    BOOL v72 = obj;
                    objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v227, v414 | 2, 0));
                    uint64_t v227 = (v227 + 1);
                  }
                  if (!v36) {
                    goto LABEL_207;
                  }
                  uint64_t v270 = v414;
                  long long v271 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  [v271 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F55050]];
                  [v271 setObject:&unk_1EFB015F8 forKeyedSubscript:*MEMORY[0x1E4F55290]];
                  [v271 setObject:&unk_1EFB01610 forKeyedSubscript:*MEMORY[0x1E4F55000]];
                  [v271 setObject:v374 forKeyedSubscript:*MEMORY[0x1E4F54FC0]];
                  if ((v329 & 0x100000000) != 0)
                  {
                    uint64_t v272 = v71;
                    uint64_t v273 = [NSNumber numberWithInt:v287];
                    long long v274 = (void *)MEMORY[0x1E4F55018];
                  }
                  else
                  {
                    uint64_t v272 = v71;
                    if (!v331)
                    {
LABEL_478:
                      if (v300)
                      {
                        [v355 addObject:v271];
                        objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v227, v270 | 8, 0));
                        int v16 = v325;
                        BOOL v72 = obj;
                        unint64_t v78 = 0x1E4F28000;
                      }
                      else
                      {
                        int v16 = v325;
                        BOOL v72 = obj;
                      }
                      uint64_t v71 = v272;
                      goto LABEL_207;
                    }
                    uint64_t v275 = [NSNumber numberWithInt:v361];
                    [v271 setObject:v275 forKeyedSubscript:*MEMORY[0x1E4F55048]];
                    uint64_t v276 = [NSNumber numberWithBool:(v329 >> 25) & 1];
                    [v271 setObject:v276 forKeyedSubscript:*MEMORY[0x1E4F55020]];
                    uint64_t v277 = [NSNumber numberWithBool:v323];
                    [v271 setObject:v277 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
                    long long v274 = (void *)MEMORY[0x1E4F55010];
                    uint64_t v273 = v285;
                  }
                  [v271 setObject:v273 forKeyedSubscript:*v274];
                  goto LABEL_478;
                }
                v240 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                uint64_t v241 = *(void *)(v15 + 1456);
                [v240 setObject:&unk_1EFB015E0 forKeyedSubscript:v221];
                v373 = v240;
                [v240 setObject:v374 forKeyedSubscript:v223];
                if (*(unsigned char *)(v15 + 1991) && ((~v328 & 0x1800) != 0 || !v241))
                {
                  [v240 setObject:&unk_1EFB015F8 forKeyedSubscript:v346];
                  LODWORD(v249) = *MEMORY[0x1E4F54F90];
                  int v242 = (void *)[NSNumber numberWithFloat:v249];
                  uint64_t v244 = *MEMORY[0x1E4F55028];
                  uint64_t v243 = v240;
                }
                else
                {
                  [v240 setObject:&unk_1EFB015E0 forKeyedSubscript:v346];
                  int v242 = &unk_1EFB01628;
                  uint64_t v243 = v240;
                  uint64_t v244 = v222;
                }
                [v243 setObject:v242 forKeyedSubscript:v244];
                if ((v329 & 0x100000000) != 0)
                {
                  uint64_t v250 = [NSNumber numberWithInt:v287];
                  v251 = (void *)MEMORY[0x1E4F55018];
                }
                else
                {
                  if (!v331)
                  {
LABEL_431:
                    uint64_t v71 = v328;
                    if ((v328 & 0x1000) != 0) {
                      -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v363, v240, v328);
                    }
                    unsigned int v246 = a4;
                    uint64_t v247 = v292;
                    int v248 = v353;
                    BOOL v245 = v350;
                    goto LABEL_434;
                  }
                  uint64_t v252 = [NSNumber numberWithInt:v361];
                  [v240 setObject:v252 forKeyedSubscript:*MEMORY[0x1E4F55048]];
                  [v240 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54FD8]];
                  [v240 setObject:&unk_1EFB015E0 forKeyedSubscript:*MEMORY[0x1E4F54FF8]];
                  uint64_t v253 = [NSNumber numberWithBool:(v329 >> 25) & 1];
                  [v240 setObject:v253 forKeyedSubscript:*MEMORY[0x1E4F55020]];
                  uint64_t v254 = [NSNumber numberWithBool:v323];
                  [v240 setObject:v254 forKeyedSubscript:*MEMORY[0x1E4F54FB0]];
                  v251 = (void *)MEMORY[0x1E4F55010];
                  uint64_t v250 = v293;
                }
                [v240 setObject:v250 forKeyedSubscript:*v251];
                goto LABEL_431;
              }
              LODWORD(v231) = *MEMORY[0x1E4F54F90];
              uint64_t v232 = [NSNumber numberWithFloat:v231];
              [v220 setObject:v232 forKeyedSubscript:*MEMORY[0x1E4F55028]];
LABEL_388:
              [v220 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v336];
              goto LABEL_389;
            }
            int v226 = &unk_1EFB05A28;
          }
          [v220 setObject:v226 forKeyedSubscript:v222];
          if (([v298 hrEnabled] & 1) == 0) {
            goto LABEL_389;
          }
          goto LABEL_388;
        }
        int v208 = [v26 deepFusionBracketedCaptureReferenceFrameIndex];
        goto LABEL_356;
      }
      if ([a11 count])
      {
        int v24 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v15, a11);
        int v288 = [v24 containsObject:v16] ^ 1;
        id v332 = v24;
        [v24 removeObject:v16];
        BOOL v289 = 0;
        goto LABEL_27;
      }
    }
    int v288 = 0;
    BOOL v289 = 0;
    id v332 = 0;
    goto LABEL_27;
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubAdaptiveStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(unint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:
{
  v43[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v12 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      uint64_t v39 = v6;
      LODWORD(v37) = 0;
      FigDebugAssert3();
    }
    if (a3 != 11)
    {
      uint64_t v36 = 0;
      return v36;
    }
    uint64_t v40 = a2;
    uint64_t v13 = *(void **)(v12 + 1288);
    if (!v13) {
      uint64_t v13 = *(void **)(v12 + 496);
    }
    uint64_t v14 = a6;
    uint64_t v15 = objc_msgSend(a6, "objectForKeyedSubscript:", objc_msgSend(v13, "portType", v37, v39));
    if ((a4 & 0x8000000) != 0) {
      uint64_t v16 = 2;
    }
    else {
      uint64_t v16 = 1;
    }
    int v17 = [v13 hasSphere];
    uint64_t v41 = a5;
    uint64_t v18 = (a5 >> 13) & 1;
    uint64_t v19 = a4 | 0x2000000000;
    if (((a4 >> 35) & v18) == 0) {
      uint64_t v19 = a4;
    }
    if (v17) {
      char v20 = (a4 >> 35) & v18;
    }
    else {
      char v20 = 0;
    }
    if (v17) {
      a4 = v19;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 1948));
    uint64_t v21 = objc_msgSend(*(id *)(v12 + 2248), "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
    if (v21)
    {
      uint64_t v22 = (void *)[v21 adaptiveBracketingParametersForDigitalFlashMode:v16 sphereOffsetEnabled:v20 & 1];
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 1948));
      if (v22)
      {
LABEL_28:
        [v13 pixelSize];
        float v31 = v30;
        if ((int)[v13 activeQuadraBinningFactor] < 1) {
          float v32 = 1.0;
        }
        else {
          float v32 = (float)(int)[v13 activeQuadraBinningFactor];
        }
        if (v20) {
          uint64_t v33 = -[BWFigVideoCaptureDevice _ubSphereOffsetsForAdaptiveBracketingParameters:pixelSize:](v12, v22, v31 * v32);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v34 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:adaptiveBracketingParameters:sphereOffsets:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:adaptiveBracketingParameters:sphereOffsets:", [v13 portType], 11, a4, v22, v33);
        -[BWStillImageCaptureStreamSettings setSensorIDString:](v34, "setSensorIDString:", [v13 sensorIDString]);
        unsigned int v35 = [BWStillImageCaptureSettings alloc];
        v43[0] = v34;
        LOBYTE(v38) = 0;
        uint64_t v36 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:](v35, "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v40, 11, a4, v41, v14, 0, v38, [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:1]);
        -[BWStillImageCaptureSettings setMasterPortType:](v36, "setMasterPortType:", [v13 portType]);
        -[BWFigVideoCaptureDevice _ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:frameStatistics:](v12, v34, v15);

        return v36;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 1948));
    }
    if ([*(id *)(v12 + 2152) count])
    {
      BOOL v23 = (void *)[v13 objectDetector];
      if (v15) {
        [v15 pts];
      }
      else {
        memset(v42, 0, sizeof(v42));
      }
      unint64_t v25 = (void *)[v23 objectsForPTS:v42];
      [v15 finalCropRect];
      int v24 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:](v12, v25, v26, v27, v28, v29);
    }
    else
    {
      int v24 = 0;
    }
    uint64_t v22 = (void *)[*(id *)(v12 + 2176) adaptiveBracketingParametersForDigitalFlashMode:v16 frameStatistics:v15 stationary:v18 sphereOffsetEnabled:v20 & 1 detectedObjects:v24];
    goto LABEL_28;
  }
  return result;
}

- (id)_ubClientBracketStillImageCaptureSettings:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      uint64_t v60 = v6;
      LODWORD(v58) = 0;
      FigDebugAssert3();
    }
    if (a3 != 7)
    {
      id v16 = 0;
      return v16;
    }
    uint64_t v11 = *(void **)(v10 + 1288);
    if (!v11) {
      uint64_t v11 = *(void **)(v10 + 496);
    }
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v58, v60);
    id obj = v12;
    if (*(void *)(v10 + 544))
    {
      if ((a4 & 0x800) != 0)
      {
        objc_msgSend(v12, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v10, v11));
        goto LABEL_15;
      }
      if ([a2 constituentPhotoDeliveryEnabled])
      {
        objc_msgSend(obj, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v10, objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes")));
        if (([obj containsObject:v11] & 1) == 0)
        {
          [obj addObject:v11];
          [v11 portType];
          uint64_t v13 = (void *)[obj firstObject];
          char v70 = 1;
          goto LABEL_16;
        }
LABEL_15:
        char v70 = 0;
        uint64_t v13 = v11;
LABEL_16:
        uint64_t v14 = [v13 portType];
        int v15 = [a2 bracketType];
        id v16 = 0;
        if (v15)
        {
          if (v15 == 1)
          {
            int v18 = FigCapturePlatformIdentifier();
            uint64_t v19 = v14;
            if (v18 <= 8) {
              uint64_t v19 = objc_msgSend(*(id *)(v10 + 496), "portType", v14);
            }
            id v16 = -[BWFigVideoCaptureDevice _manualExposureBracketParametersForSettings:frameStatistics:use8dot8FixedPointGain:]((id)v10, a2, (void *)[a6 objectForKeyedSubscript:v19], 0);
            id v17 = 0;
          }
          else
          {
            id v17 = 0;
            if (v15 == 2)
            {
              id v17 = -[BWFigVideoCaptureDevice _autoExposureBracketValuesForSettings:frameStatistics:]((id)v10, a2, (void *)[a6 objectForKeyedSubscript:v14]);
              id v16 = 0;
            }
          }
          id v76 = v16;
          uint64_t v114 = 0;
          unint64_t v113 = 0;
          char v20 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v10, a4, 7, &v114, &v113);
          uint64_t v97 = v20;
          if (v20) {
            unsigned int v21 = ([v20 intValue] >> 1) & 1;
          }
          else {
            unsigned int v21 = 1;
          }
          unsigned int v99 = v21;
          uint64_t v61 = v14;
          uint64_t v71 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          uint64_t v72 = [obj countByEnumeratingWithState:&v109 objects:v117 count:16];
          if (v72)
          {
            uint64_t v66 = *(void *)v110;
            if ((a4 & 0x40000000) != 0) {
              int v22 = 3;
            }
            else {
              int v22 = 0;
            }
            uint64_t v63 = *MEMORY[0x1E4F54838];
            unint64_t v68 = a4 & 0xFFFFFFFFFFFF7FFFLL;
            uint64_t v96 = *MEMORY[0x1E4F55050];
            uint64_t v95 = *MEMORY[0x1E4F55290];
            uint64_t v92 = *MEMORY[0x1E4F55000];
            uint64_t v94 = *MEMORY[0x1E4F54FC0];
            uint64_t v98 = *MEMORY[0x1E4F54FE8];
            uint64_t v88 = *MEMORY[0x1E4F54FD8];
            uint64_t v87 = *MEMORY[0x1E4F55048];
            uint64_t v86 = *MEMORY[0x1E4F55020];
            uint64_t v85 = *MEMORY[0x1E4F55010];
            uint64_t v84 = *MEMORY[0x1E4F54FB0];
            if ((a4 & 0x20000000) != 0) {
              int v22 = 2;
            }
            if ((a4 & 0x800000) != 0) {
              int v22 = 1;
            }
            unsigned int v89 = v22;
            uint64_t v83 = *MEMORY[0x1E4F545E0];
            uint64_t v82 = *MEMORY[0x1E4F54FF0];
            uint64_t v81 = *MEMORY[0x1E4F545C8];
            id v79 = v17;
            uint64_t v80 = *MEMORY[0x1E4F54FD0];
            unint64_t v93 = a4;
            uint64_t v69 = a2;
            uint64_t v67 = v11;
            do
            {
              uint64_t v23 = 0;
              do
              {
                if (*(void *)v110 != v66) {
                  objc_enumerationMutation(obj);
                }
                int v24 = *(void **)(*((void *)&v109 + 1) + 8 * v23);
                if ((a4 & 0x8000) != 0)
                {
                  int v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v109 + 1) + 8 * v23), "stream"), "getPropertyIfSupported:error:", v63, 0), "BOOLValue");
                  if (v25) {
                    unint64_t v26 = a4;
                  }
                  else {
                    unint64_t v26 = v68;
                  }
                }
                else
                {
                  int v25 = 0;
                  unint64_t v26 = v68;
                }
                if ((v26 & 0x100000010) == 0x10 && [v24 activeQuadraBinningFactor] != 1) {
                  v26 &= ~0x10uLL;
                }
                uint64_t v75 = v23;
                unint64_t v73 = v26;
                if (v24 == *(void **)(v10 + 1456))
                {
                  uint64_t v91 = 0;
                }
                else
                {
                  objc_msgSend((id)objc_msgSend(a6, "objectForKeyedSubscript:", objc_msgSend(v24, "portType")), "gain");
                  uint64_t v91 = objc_msgSend(v24, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v26 >> 4) & 1);
                }
                uint64_t v27 = v10;
                uint64_t v100 = (void *)[MEMORY[0x1E4F1CA48] array];
                CGFloat v28 = (void *)[MEMORY[0x1E4F1CA48] array];
                BOOL v74 = v24;
                CGFloat v29 = &v114;
                if ((v70 & (v24 == v11)) != 0) {
                  CGFloat v29 = (uint64_t *)&v113;
                }
                uint64_t v30 = *v29;
                uint64_t v90 = (a4 >> 25) & 1;
                if (v17)
                {
                  long long v107 = 0uLL;
                  long long v108 = 0uLL;
                  long long v105 = 0uLL;
                  long long v106 = 0uLL;
                  uint64_t v31 = [v17 countByEnumeratingWithState:&v105 objects:v116 count:16];
                  if (v31)
                  {
                    uint64_t v32 = v31;
                    uint64_t v33 = v30 | 0x80;
                    uint64_t v34 = *(void *)v106;
                    uint64_t v35 = MEMORY[0x1E4F1CC38];
                    if (!v25) {
                      uint64_t v35 = 0;
                    }
                    uint64_t v77 = v35;
                    uint64_t v36 = 1;
                    do
                    {
                      for (uint64_t i = 0; i != v32; ++i)
                      {
                        if (*(void *)v106 != v34) {
                          objc_enumerationMutation(v79);
                        }
                        uint64_t v38 = *(void *)(*((void *)&v105 + 1) + 8 * i);
                        uint64_t v39 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                        [v39 setObject:&unk_1EFB015E0 forKeyedSubscript:v96];
                        [v39 setObject:&unk_1EFB015E0 forKeyedSubscript:v95];
                        [v39 setObject:v38 forKeyedSubscript:v92];
                        [v39 setObject:v97 forKeyedSubscript:v94];
                        [v39 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v98];
                        if (v99)
                        {
                          [v39 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v88];
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v89), v87);
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v90), v86);
                          [v39 setObject:v91 forKeyedSubscript:v85];
                          [v39 setObject:v77 forKeyedSubscript:v84];
                        }
                        -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v39, v93);
                        [v100 addObject:v39];
                        objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v36 + i, v33, 0));
                      }
                      uint64_t v32 = [v79 countByEnumeratingWithState:&v105 objects:v116 count:16];
                      uint64_t v36 = (v36 + i);
                    }
                    while (v32);
                  }
                }
                else
                {
                  long long v103 = 0uLL;
                  long long v104 = 0uLL;
                  long long v101 = 0uLL;
                  long long v102 = 0uLL;
                  uint64_t v40 = [v76 countByEnumeratingWithState:&v101 objects:v115 count:16];
                  if (v40)
                  {
                    uint64_t v41 = v40;
                    uint64_t v42 = v30 | 0x40;
                    uint64_t v43 = *(void *)v102;
                    uint64_t v44 = MEMORY[0x1E4F1CC38];
                    if (!v25) {
                      uint64_t v44 = 0;
                    }
                    uint64_t v78 = v44;
                    uint64_t v45 = 1;
                    do
                    {
                      for (uint64_t j = 0; j != v41; ++j)
                      {
                        if (*(void *)v102 != v43) {
                          objc_enumerationMutation(v76);
                        }
                        int v47 = *(void **)(*((void *)&v101 + 1) + 8 * j);
                        unsigned int v48 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                        [v48 setObject:&unk_1EFB015E0 forKeyedSubscript:v96];
                        [v48 setObject:&unk_1EFB015C8 forKeyedSubscript:v95];
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(v47, "objectForKeyedSubscript:", v83), v82);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(v47, "objectForKeyedSubscript:", v81), v80);
                        [v48 setObject:v97 forKeyedSubscript:v94];
                        [v48 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v98];
                        if (v99)
                        {
                          [v48 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:v88];
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v89), v87);
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v90), v86);
                          [v48 setObject:v91 forKeyedSubscript:v85];
                          [v48 setObject:v78 forKeyedSubscript:v84];
                        }
                        -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v48, v93);
                        [v100 addObject:v48];
                        objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v45 + j, v42, 0));
                      }
                      uint64_t v41 = [v76 countByEnumeratingWithState:&v101 objects:v115 count:16];
                      uint64_t v45 = (v45 + j);
                    }
                    while (v41);
                  }
                }
                double v49 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                uint64_t v10 = v27;
                a4 = v93;
                -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v49, v93);
                if ((int)FigCapturePlatformIdentifier() > 6)
                {
                  a2 = v69;
                  uint64_t v51 = v74;
                  uint64_t v50 = v75;
                  if (v99) {
                    [v49 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v98];
                  }
LABEL_79:
                  objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v113, 0));
                  goto LABEL_80;
                }
                a2 = v69;
                uint64_t v51 = v74;
                uint64_t v50 = v75;
                if ([v49 count]) {
                  goto LABEL_79;
                }
                char v53 = [v69 constituentPhotoDeliveryEnabled];
                if (v89 || (v53 & 1) != 0) {
                  goto LABEL_79;
                }
                double v49 = 0;
LABEL_80:
                int v52 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", [v51 portType], 7, v73, 0xFFFFFFFFLL, 0, v49, v100, v28);
                -[BWStillImageCaptureStreamSettings setLensStabilizationEnabledForClientBracket:](v52, "setLensStabilizationEnabledForClientBracket:", [a2 lensStabilizationDuringBracketEnabled]);
                [v71 addObject:v52];

                uint64_t v23 = v50 + 1;
                uint64_t v11 = v67;
                id v17 = v79;
              }
              while (v23 != v72);
              uint64_t v54 = [obj countByEnumeratingWithState:&v109 objects:v117 count:16];
              uint64_t v72 = v54;
            }
            while (v54);
          }
          uint64_t v55 = [BWStillImageCaptureSettings alloc];
          uint64_t v56 = [a2 settingsID];
          LOBYTE(v59) = FigCapturePixelFormatIsBayerRaw([a2 rawOutputFormat]);
          unint64_t v57 = [(BWStillImageCaptureSettings *)v55 initWithSettingsID:v56 captureType:7 captureFlags:a4 sceneFlags:a5 frameStatisticsByPortType:a6 deliverOriginalImage:0 deliverSushiRaw:v59 captureStreamSettings:v71];
          [(BWStillImageCaptureSettings *)v57 setMasterPortType:v61];
          id v16 = v57;
        }
        return v16;
      }
      uint64_t v12 = obj;
    }
    [v12 addObject:v11];
    goto LABEL_15;
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubFlashStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(uint64_t)a6 frameStatisticsByPortType:(char)a7 deliverSushiRaw:(void *)a8 bravoConstituentImageDeliveryDeviceTypes:
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v15 = result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      uint64_t v48 = v8;
      LODWORD(v46) = 0;
      FigDebugAssert3();
    }
    if (a3 != 2) {
      goto LABEL_50;
    }
    isa = v15[7].super.isa;
    if (!isa) {
      isa = v15[2]._applicationID;
    }
    id v16 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v46, v48);
    if (*(void *)&v15[2]._cmioMaxPhotoDimensions.height)
    {
      if ((a4 & 0x800) != 0)
      {
        objc_msgSend(v16, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:]((uint64_t)v15, isa));
        goto LABEL_15;
      }
      if ([a8 count])
      {
        id v17 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:]((uint64_t)v15, a8);
        [v16 addObjectsFromArray:v17];
        if (([v17 containsObject:isa] & 1) == 0)
        {
          [v16 addObject:isa];
          int v63 = 1;
          if ((a4 & 8) != 0) {
            goto LABEL_18;
          }
LABEL_16:
          if ([v16 count] == 1 || *(void *)&v15[7]._cmioQualityPrioritization) {
            goto LABEL_18;
          }
LABEL_50:
          uint64_t v45 = 0;
          return v45;
        }
LABEL_15:
        int v63 = 0;
        if ((a4 & 8) != 0)
        {
LABEL_18:
          uint64_t v51 = a6;
          int v52 = a8;
          uint64_t v49 = a2;
          char v50 = a7;
          unint64_t v77 = 0;
          uint64_t v78 = 0;
          uint64_t v61 = -[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:]((uint64_t)v15, a4, 2, &v78, &v77);
          uint64_t v62 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v73 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          id obj = v16;
          int v18 = isa;
          uint64_t v65 = [v16 countByEnumeratingWithState:&v73 objects:v79 count:16];
          if (v65)
          {
            uint64_t v58 = *(void *)v74;
            uint64_t v53 = *MEMORY[0x1E4F54838];
            unint64_t v67 = a4 & 0xFFFFFFFFFFFF7FFFLL;
            uint64_t v57 = *MEMORY[0x1E4F55050];
            uint64_t v19 = *MEMORY[0x1E4F55290];
            uint64_t v20 = *MEMORY[0x1E4F55000];
            uint64_t v59 = v15;
            unint64_t v60 = a4;
            uint64_t v66 = *MEMORY[0x1E4F54FC0];
            uint64_t v55 = *MEMORY[0x1E4F55000];
            uint64_t v56 = *MEMORY[0x1E4F55290];
            do
            {
              uint64_t v21 = 0;
              do
              {
                if (*(void *)v74 != v58) {
                  objc_enumerationMutation(obj);
                }
                int v22 = *(void **)(*((void *)&v73 + 1) + 8 * v21);
                uint64_t v23 = (void *)v61;
                if (v22 == *(void **)&v15[7]._cmioQualityPrioritization) {
                  uint64_t v23 = &unk_1EFB015F8;
                }
                uint64_t v69 = v23;
                int v24 = &v78;
                if ((v63 & (v22 == v18)) != 0) {
                  int v24 = (uint64_t *)&v77;
                }
                uint64_t v70 = *v24;
                unint64_t v25 = v67;
                if ((a4 & 0x8000) != 0)
                {
                  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v22, "stream"), "getPropertyIfSupported:error:", v53, 0), "BOOLValue"))unint64_t v25 = a4; {
                  else
                  }
                    unint64_t v25 = v67;
                }
                if ((a5 & 0x10000000) != 0)
                {
                  unint64_t v27 = v25;
                  CGFloat v28 = *(void **)&v15[10]._cmioHighResolutionPhotoEnabled;
                  uint64_t v29 = [v18 portType];
                  uint64_t v30 = v28;
                  unint64_t v25 = v27;
                  char v26 = objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v29), "macroFlashQSubSwitchingEnabled");
                }
                else
                {
                  char v26 = 0;
                }
                if ((v25 & 0x100000010) == 0x10
                  && (v26 & 1) == 0
                  && [v22 activeQuadraBinningFactor] != 1)
                {
                  v25 &= ~0x10uLL;
                }
                unint64_t v71 = v25;
                uint64_t v31 = (void *)[MEMORY[0x1E4F1CA48] array];
                uint64_t v32 = [MEMORY[0x1E4F1CA48] array];
                uint64_t v72 = v22;
                if ((a4 & 8) != 0)
                {
                  uint64_t v40 = (void *)v32;
                  uint64_t v41 = v19;
                  if (v22 != isa) {
                    [v52 count];
                  }
                  unint64_t v35 = 0x1E4F1C000uLL;
                  uint64_t v42 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  uint64_t v34 = v57;
                  [v42 setObject:&unk_1EFB015E0 forKeyedSubscript:v57];
                  [v42 setObject:&unk_1EFB016B8 forKeyedSubscript:v41];
                  [v42 setObject:&unk_1EFB01610 forKeyedSubscript:v20];
                  uint64_t v39 = v69;
                  [v42 setObject:v69 forKeyedSubscript:v66];
                  [v31 addObject:v42];
                  p_vtable = &OBJC_METACLASS___BWInferenceSchedulerGraph.vtable;
                  uint64_t v37 = v31;
                  uint64_t v38 = v70;
                  objc_msgSend(v40, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 1, v70, 0));
                  uint64_t v33 = 2;
                }
                else
                {
                  uint64_t v33 = 1;
                  uint64_t v34 = v57;
                  unint64_t v35 = 0x1E4F1C000;
                  p_vtable = (void **)(&OBJC_METACLASS___BWInferenceSchedulerGraph + 24);
                  uint64_t v37 = v31;
                  uint64_t v39 = v69;
                  uint64_t v38 = v70;
                  uint64_t v40 = (void *)v32;
                }
                uint64_t v43 = (void *)[*(id *)(v35 + 2656) dictionary];
                [v43 setObject:&unk_1EFB015E0 forKeyedSubscript:v34];
                [v43 setObject:&unk_1EFB016D0 forKeyedSubscript:v56];
                uint64_t v20 = v55;
                [v43 setObject:&unk_1EFB01610 forKeyedSubscript:v55];
                [v43 setObject:v39 forKeyedSubscript:v66];
                [v37 addObject:v43];
                objc_msgSend(v40, "addObject:", objc_msgSend(p_vtable + 412, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v33, v38, 0));
                uint64_t v44 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", [v72 portType], 2, v71, 0xFFFFFFFFLL, 0, 0, v37, v40);
                [v62 addObject:v44];

                ++v21;
                int v15 = v59;
                a4 = v60;
                int v18 = isa;
                uint64_t v19 = v56;
              }
              while (v65 != v21);
              uint64_t v65 = [obj countByEnumeratingWithState:&v73 objects:v79 count:16];
            }
            while (v65);
          }
          LOBYTE(v47) = v50;
          uint64_t v45 = [[BWStillImageCaptureSettings alloc] initWithSettingsID:v49 captureType:2 captureFlags:a4 sceneFlags:a5 frameStatisticsByPortType:v51 deliverOriginalImage:0 deliverSushiRaw:v47 captureStreamSettings:v62];
          if (v63) {
            int v18 = (void *)[obj firstObject];
          }
          -[BWStillImageCaptureSettings setMasterPortType:](v45, "setMasterPortType:", [v18 portType]);
          return v45;
        }
        goto LABEL_16;
      }
    }
    [v16 addObject:isa];
    goto LABEL_15;
  }
  return result;
}

- (void)_ubWhiteBalanceMetadataByPortTypeFromFrameStatistics:(uint64_t)a3 masterPortType:
{
  NSUInteger v3 = 0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      NSUInteger v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v6 = (void *)[a2 objectForKeyedSubscript:a3];
      if (v6)
      {
        uint64_t v7 = v6;
        char v8 = [v6 awbStable];
        char v9 = [v7 awbLocked];
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        int v22 = __95__BWFigVideoCaptureDevice__ubWhiteBalanceMetadataByPortTypeFromFrameStatistics_masterPortType___block_invoke;
        uint64_t v23 = &__block_descriptor_34_e41___NSDictionary_16__0__BWFrameStatistics_8l;
        char v24 = v8;
        char v25 = v9;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v10 = [a2 countByEnumeratingWithState:&v17 objects:v26 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v18;
          do
          {
            for (uint64_t i = 0; i != v11; ++i)
            {
              if (*(void *)v18 != v12) {
                objc_enumerationMutation(a2);
              }
              uint64_t v14 = *(void *)(*((void *)&v17 + 1) + 8 * i);
              uint64_t v15 = [a2 objectForKeyedSubscript:v14];
              objc_msgSend(v3, "setObject:forKeyedSubscript:", v22((uint64_t)v21, (void *)v15), v14);
            }
            uint64_t v11 = [a2 countByEnumeratingWithState:&v17 objects:v26 count:16];
          }
          while (v11);
        }
      }
    }
  }
  return v3;
}

float __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)[*(id *)(*(void *)(a1 + 32) + 216) objectForKeyedSubscript:a2];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", a2), "normalizedSNR");
  [v4 addDataPoint:v5];
  [v4 average];
  float v7 = v6;
  objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 224), "objectForKeyedSubscript:", a2), "floatValue");
  if (*(float *)&v8 != 0.0 && fabsf((float)(*(float *)&v8 - v7) / (float)((float)(*(float *)&v8 + v7) * 0.5)) < 0.1) {
    float v7 = *(float *)&v8;
  }
  *(float *)&double v8 = v7;
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v8), a2);
  return v7;
}

- (uint64_t)_ubIsDigitalFlashCaptureForSettings:(int)a3 sceneFlags:
{
  if (result)
  {
    uint64_t v5 = result;
    int v6 = [a2 digitalFlashMode];
    int v7 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](v5, a2, 0, a3);
    float result = 0;
    if ((a3 & 0x4000) == 0 && v6 >= 1)
    {
      int v8 = [a2 constituentPhotoDeliveryEnabled];
      char v9 = v8;
      float result = v8 ^ 1u;
      if ((v9 & 1) == 0 && ((v7 ^ 1) & 1) == 0) {
        return *(void *)(v5 + 2272) != 0;
      }
    }
  }
  return result;
}

- (BOOL)_ubIsFlashAvailable
{
  if (!a1 || !*(unsigned char *)(a1 + 1980)) {
    return 0;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2368));
  BOOL v2 = *(float *)(a1 + 2412) > 0.0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2368));
  return v2;
}

- (void)_captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:(uint64_t)a1
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ((unint64_t)[*(id *)(a1 + 552) count] > 2)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v5 = *(void **)(a1 + 552);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (!v6) {
      return v4;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    uint64_t v9 = *MEMORY[0x1E4F52DF0];
    uint64_t v10 = *MEMORY[0x1E4F52DD8];
    uint64_t v11 = *MEMORY[0x1E4F52DE8];
LABEL_6:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v16 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * v12);
      if (objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v9))
      {
        if ((objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v9) & 1) == 0
          && (objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v10) & 1) == 0)
        {
          goto LABEL_17;
        }
      }
      else if (!objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v10) {
             || (objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v10) & 1) == 0
      }
             && !objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v11))
      {
        goto LABEL_17;
      }
      [v4 addObject:v13];
LABEL_17:
      if (v7 == ++v12)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (!v7) {
          return v4;
        }
        goto LABEL_6;
      }
    }
  }
  [v4 addObjectsFromArray:*(void *)(a1 + 552)];
  return v4;
}

- (os_unfair_lock_s)_ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream:(void *)a3 captureStreams:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 waitForTimeMachineToFill:(int *)a7 failureReasonOut:
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v12 = result;
  int v96 = 0;
  uint64_t v13 = result + 624;
  os_unfair_lock_lock(result + 624);
  *(void *)&v12[508]._CMTimeScale os_unfair_lock_opaque = [a4 settingsID];
  os_unfair_lock_unlock(v13);
  if (a6)
  {
    if (-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v12))
    {
LABEL_72:
      uint64_t v46 = 0;
      int v63 = 15;
      goto LABEL_63;
    }
    objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", objc_msgSend(a2, "portType")), "currentFrameRate");
    if (v14 == 0.0)
    {
      uint64_t v46 = 0;
      int v63 = 7;
      goto LABEL_63;
    }
    float v15 = v14;
    os_unfair_lock_lock(v13);
    CMTimeValue v105 = *(void *)&v12[642]._os_unfair_lock_opaque;
    CMTimeScale os_unfair_lock_opaque = v12[644]._os_unfair_lock_opaque;
    CMTimeFlags v16 = v12[645]._os_unfair_lock_opaque;
    CMTimeEpoch v17 = *(void *)&v12[646]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    if (v16)
    {
      memset(&v102, 0, 24);
      CMTimeMake(&rhs, 1, 1000);
      lhs[0].start.unsigned int value = v105;
      lhs[0].start.CMTimeScale timescale = os_unfair_lock_opaque;
      lhs[0].start.CMTimeFlags flags = v16;
      lhs[0].start.CMTimeEpoch epoch = v17;
      CMTimeAdd(&v102.start, &lhs[0].start, &rhs);
      long long v93 = *(_OWORD *)&v102.start.value;
      CMTimeEpoch epoch = v102.start.epoch;
      [(os_unfair_lock_s *)v12 setZeroShutterLagEarliestAllowedPTS:&v93];
      if (dword_1EB4C4FF0)
      {
        *(_DWORD *)uint64_t v92 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureDelegate", v65, v67), "captureStreamWillWaitForTimeMachineToFill:", a2);
    *(float *)&double v19 = (float)((float)(int)v12[493]._os_unfair_lock_opaque / v15) + 0.1;
    if (*(float *)&v19 < 1.0) {
      *(float *)&double v19 = 1.0;
    }
    [*(id *)&v12[502]._os_unfair_lock_opaque waitUntilCapacity:v12[803]._os_unfair_lock_opaque timeout:v19];
  }
  if (-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v12)) {
    goto LABEL_72;
  }
  uint64_t v20 = (void *)[*(id *)&v12[124]._os_unfair_lock_opaque stream];
  int v21 = [v20 sendCommandProperty:*MEMORY[0x1E4F54C48]];
  int v96 = v21;
  if (v21)
  {
    uint64_t v67 = v7;
    LODWORD(v65) = v21;
    FigDebugAssert3();
    uint64_t v46 = 0;
    int v63 = 1;
    goto LABEL_63;
  }
  int v22 = (void *)[a2 stream];
  uint64_t v74 = *MEMORY[0x1E4F54C38];
  CFDictionaryRef v23 = (const __CFDictionary *)objc_msgSend(v22, "getProperty:error:");
  if (v96)
  {
    uint64_t v67 = v7;
    LODWORD(v65) = v96;
    FigDebugAssert3();
    uint64_t v46 = 0;
    int v63 = 2;
    goto LABEL_63;
  }
  uint64_t v70 = v12;
  memset(&v90, 0, sizeof(v90));
  CMTimeRangeMakeFromDictionary(&v90, v23);
  if (dword_1EB4C4FF0)
  {
    LODWORD(start.value) = 0;
    LOBYTE(v105) = 0;
    char v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = start.value;
    if (os_log_type_enabled(v24, (os_log_type_t)v105)) {
      unsigned int v26 = value;
    }
    else {
      unsigned int v26 = value & 0xFFFFFFFE;
    }
    if (v26)
    {
      *(_OWORD *)&lhs[0].start.unsigned int value = *(_OWORD *)&v90.start.value;
      lhs[0].start.CMTimeEpoch epoch = v90.start.epoch;
      Float64 Seconds = CMTimeGetSeconds(&lhs[0].start);
      lhs[0] = v90;
      CMTimeRangeGetEnd(&time, lhs);
      *(double *)&CMTimeValue v28 = CMTimeGetSeconds(&time);
      LODWORD(v102.start.value) = 136315650;
      *(CMTimeValue *)((char *)&v102.start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachinesAnd"
                                                                     "GetTimeMachineFramesMetadataWithPrimaryCaptureStrea"
                                                                     "m:captureStreams:settings:frameStatisticsByPortType"
                                                                     ":waitForTimeMachineToFill:failureReasonOut:]";
      LOWORD(v102.start.flags) = 2048;
      *(Float64 *)((char *)&v102.start.flags + 2) = Seconds;
      HIWORD(v102.start.epoch) = 2048;
      v102.duration.unsigned int value = v28;
      LODWORD(v67) = 32;
      uint64_t v65 = &v102;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  locuint64_t k = v13;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v85, v103, 16, v65, v67);
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v86;
    uint64_t v32 = &unk_1EB4C4000;
    while (2)
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v86 != v31) {
          objc_enumerationMutation(a3);
        }
        uint64_t v34 = *(void **)(*((void *)&v85 + 1) + 8 * i);
        if (v34 != a2)
        {
          CFDictionaryRef v35 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v85 + 1) + 8 * i), "stream"), "getProperty:error:", v74, &v96);
          if (v96)
          {
            uint64_t v67 = v7;
            LODWORD(v65) = v96;
            FigDebugAssert3();
            uint64_t v46 = 0;
            int v63 = 2;
            goto LABEL_60;
          }
          memset(&v102, 0, sizeof(v102));
          CMTimeRangeMakeFromDictionary(&v102, v35);
          if (dword_1EB4C4FF0)
          {
            LODWORD(v105) = 0;
            v92[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v36 = v32;
            uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v38 = v105;
            if (os_log_type_enabled(v37, v92[0])) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = v38 & 0xFFFFFFFE;
            }
            if (v39)
            {
              uint64_t v40 = (void *)[v34 portType];
              uint64_t v42 = BWPortTypeToDisplayString(v40, v41);
              *(_OWORD *)&lhs[0].start.unsigned int value = *(_OWORD *)&v102.start.value;
              lhs[0].start.CMTimeEpoch epoch = v102.start.epoch;
              Float64 v43 = CMTimeGetSeconds(&lhs[0].start);
              lhs[0] = v102;
              CMTimeRangeGetEnd(&v84, lhs);
              Float64 v44 = CMTimeGetSeconds(&v84);
              LODWORD(start.value) = 136315906;
              *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachines"
                                                                        "AndGetTimeMachineFramesMetadataWithPrimaryCaptur"
                                                                        "eStream:captureStreams:settings:frameStatisticsB"
                                                                        "yPortType:waitForTimeMachineToFill:failureReasonOut:]";
              LOWORD(start.flags) = 2112;
              *(void *)((char *)&start.flags + 2) = v42;
              HIWORD(start.epoch) = 2048;
              Float64 v99 = v43;
              __int16 v100 = 2048;
              Float64 v101 = v44;
              LODWORD(v67) = 42;
              uint64_t v65 = (CMTimeRange *)&start;
              _os_log_send_and_compose_impl();
            }
            uint64_t v32 = v36;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)&lhs[0].start.unsigned int value = *(_OWORD *)&v90.start.value;
          lhs[0].start.CMTimeEpoch epoch = v90.start.epoch;
          CMTime start = v102.start;
          CMTimeSubtract(&v83, &lhs[0].start, &start);
          if (fabs(CMTimeGetSeconds(&v83)) > 0.004
            || (lhs[0] = v90,
                CMTimeRangeGetEnd(&v81, lhs),
                lhs[0] = v102,
                CMTimeRangeGetEnd(&v80, lhs),
                CMTimeSubtract(&v82, &v81, &v80),
                fabs(CMTimeGetSeconds(&v82)) > 0.004))
          {
            uint64_t v46 = 0;
            int v63 = 12;
            goto LABEL_60;
          }
        }
      }
      uint64_t v30 = [a3 countByEnumeratingWithState:&v85 objects:v103 count:16];
      if (v30) {
        continue;
      }
      break;
    }
  }
  uint64_t v12 = v70;
  if (-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v70))
  {
    uint64_t v46 = 0;
    int v63 = 15;
  }
  else
  {
    uint64_t v45 = *(void **)&v70[502]._os_unfair_lock_opaque;
    lhs[0] = v90;
    uint64_t v46 = objc_msgSend(v45, "metadataForPTSRange:timeout:", lhs, COERCE_DOUBLE(__PAIR64__(v90.duration.flags, 1.0)));
    uint64_t v13 = lock;
    if (![v46 count] || !objc_msgSend(v46, "count"))
    {
      int v63 = 0;
      goto LABEL_63;
    }
    unint64_t v47 = 0;
    id obja = (id)*MEMORY[0x1E4F54128];
    uint64_t v75 = *MEMORY[0x1E4F542F0];
    uint64_t v71 = *MEMORY[0x1E4F530C0];
    do
    {
      uint64_t v48 = objc_msgSend(v46, "objectAtIndexedSubscript:", v47, v65, v67);
      uint64_t v49 = (void *)[v48 objectForKeyedSubscript:v75];
      char v50 = (void *)MEMORY[0x1E4F28E78];
      uint64_t v51 = (void *)[v48 objectForKeyedSubscript:obja];
      uint64_t v66 = __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke((uint64_t)v51, v51, v48);
      int v52 = (void *)[v50 stringWithFormat:@"[%@]"];
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      uint64_t v53 = [v49 countByEnumeratingWithState:&v76 objects:v97 count:16];
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v55 = *(void *)v77;
        do
        {
          for (uint64_t j = 0; j != v54; ++j)
          {
            if (*(void *)v77 != v55) {
              objc_enumerationMutation(v49);
            }
            uint64_t v57 = *(void **)(*((void *)&v76 + 1) + 8 * j);
            uint64_t v58 = (void *)[v49 objectForKeyedSubscript:v57];
            uint64_t v66 = __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke((uint64_t)v58, v57, v58);
            [v52 appendFormat:@", [%@]"];
          }
          uint64_t v54 = [v49 countByEnumeratingWithState:&v76 objects:v97 count:16];
        }
        while (v54);
      }
      memset(&start, 0, sizeof(start));
      CMTimeMakeFromDictionary(&start, (CFDictionaryRef)[v48 objectForKeyedSubscript:v71]);
      if (dword_1EB4C4FF0)
      {
        LODWORD(v105) = 0;
        v92[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v60 = v105;
        if (os_log_type_enabled(v59, v92[0])) {
          unsigned int v61 = v60;
        }
        else {
          unsigned int v61 = v60 & 0xFFFFFFFE;
        }
        if (v61)
        {
          lhs[0].CMTime start = start;
          Float64 v62 = CMTimeGetSeconds(&lhs[0].start);
          LODWORD(v102.start.value) = 136315906;
          *(CMTimeValue *)((char *)&v102.start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachine"
                                                                         "sAndGetTimeMachineFramesMetadataWithPrimaryCapt"
                                                                         "ureStream:captureStreams:settings:frameStatisti"
                                                                         "csByPortType:waitForTimeMachineToFill:failureReasonOut:]";
          LOWORD(v102.start.flags) = 1026;
          *(CMTimeFlags *)((char *)&v102.start.flags + 2) = v47;
          WORD1(v102.start.epoch) = 2050;
          *(Float64 *)((char *)&v102.start.epoch + 4) = v62;
          WORD2(v102.duration.value) = 2114;
          *(CMTimeValue *)((char *)&v102.duration.value + 6) = (CMTimeValue)v52;
          LODWORD(v67) = 38;
          uint64_t v66 = (uint64_t)&v102;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v47;
    }
    while (objc_msgSend(v46, "count", v66) > v47);
    int v63 = 0;
LABEL_60:
    uint64_t v12 = v70;
  }
  uint64_t v13 = lock;
LABEL_63:
  os_unfair_lock_lock(v13);
  *(void *)&v12[508]._CMTimeScale os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v13);
  if (a7) {
    *a7 = v63;
  }
  if (objc_msgSend(v46, "count", v65, v67)) {
    return (os_unfair_lock_s *)v46;
  }
  if (LOBYTE(v12[801]._os_unfair_lock_opaque))
  {
    [*(id *)&v12[778]._os_unfair_lock_opaque resume];
    uint64_t v64 = (void *)[*(id *)&v12[124]._os_unfair_lock_opaque stream];
    [v64 sendCommandProperty:*MEMORY[0x1E4F54C40]];
  }
  return 0;
}

- (uint64_t)_ubIsTimeMachineFramesUsableForHDRUsingTimeMachineFramesMetadata:(uint64_t)result portTypes:(void *)a2
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 1288);
  if (!v4) {
    uint64_t v4 = *(void **)(v3 + 496);
  }
  float result = objc_msgSend(*(id *)(v3 + 2000), "objectForKeyedSubscript:", objc_msgSend(v4, "portType"));
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  if (![a2 count]) {
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *MEMORY[0x1E4F53E38];
  uint64_t v8 = *MEMORY[0x1E4F541B0];
  uint64_t v9 = *MEMORY[0x1E4F53E48];
  while (1)
  {
    uint64_t v10 = (void *)[a2 objectAtIndexedSubscript:v6];
    if ((objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", 0x1EFA44440), "BOOLValue") & 1) == 0)
    {
      if (!*(unsigned char *)(v3 + 1992))
      {
        objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v7), "doubleValue");
        float result = 0;
        if (v11 < 0.0 || v11 > 0.0) {
          return result;
        }
      }
      float result = [v10 objectForKeyedSubscript:v8];
      if (!result) {
        return result;
      }
      FigCaptureComputeImageGainFromMetadata();
      FigCaptureComputeImageGainFromMetadata();
      objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v9), "doubleValue");
      double v13 = v12 * 0.0;
      [v5 sifrMainEffectiveIntegrationTimeThreshold];
      if (v13 > v14)
      {
        [v5 sifrGainThreshold];
        if (v15 < 0.0) {
          break;
        }
      }
    }
    if ([a2 count] <= (unint64_t)++v6) {
      return 1;
    }
  }
  return 0;
}

- (BOOL)_ubUseSquareRootToneCurveForNonHDRCapturesUsingFrameStatistics:(void *)a3 captureParameters:(unint64_t)a4 sceneFlags:
{
  BOOL result = 0;
  if (a1 && (a4 & 0xC) != 0)
  {
    if ([a3 toneCurveBehavior] == 2)
    {
      return 0;
    }
    else if (*(unsigned char *)(a1 + 1991))
    {
      return (a4 >> 1) & 1;
    }
    else
    {
      [a2 integrationTime];
      double v10 = v9;
      [a2 gain];
      double v12 = v10 * v11;
      [a3 sifrMainEffectiveIntegrationTimeThreshold];
      return v12 <= v13;
    }
  }
  return result;
}

- (uint64_t)_ubEVZeroCountForCaptureType:(char)a3 sceneFlags:(int)a4 captureFlags:(void *)a5 frameStatistics:
{
  if (result)
  {
    uint64_t v6 = *(void *)&a4 & 0x100000;
    if (a2 == 12)
    {
      if (v6)
      {
        double v10 = objc_msgSend(*(id *)(result + 2000), "objectForKeyedSubscript:", objc_msgSend(a5, "portType"));
        [a5 eit];
        LODWORD(result) = objc_msgSend(v10, "deepFusionHDREVZeroCountForEffectiveIntegrationTime:");
      }
      else
      {
        LODWORD(result) = 3;
      }
      if ((*(void *)&a4 & 0x400000) != 0) {
        return result;
      }
      else {
        return (result + 1);
      }
    }
    else
    {
      if (a2 != 10) {
        return a2 == 1;
      }
      if (v6) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = 3;
      }
      if (!(v6 | a3 & 0xC))
      {
        if (*(unsigned char *)(result + 1993))
        {
          if ((a4 & 0x400000) != 0) {
            return 3;
          }
          else {
            return 2;
          }
        }
        unsigned int v7 = 3;
      }
      if ((a4 & 0x40000) != 0) {
        unsigned int v8 = v7;
      }
      else {
        unsigned int v8 = v7 + 1;
      }
      if ((a4 & 0x400000) != 0) {
        return v7;
      }
      else {
        return v8;
      }
    }
  }
  return result;
}

- (uint64_t)_ubValidateTimeMachineFramesMetadata:(int)a3 minimumValidCount:(void *)a4 primaryPortType:(void *)a5 portTypes:(void *)a6 frameStatisticsByPortType:(int)a7 deliverDepthData:
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v13 = result;
  if ([a2 count] == *(_DWORD *)(result + 3212))
  {
    CMTime v84 = a6;
    id obj = a2;
    int v82 = a3;
    if (*(void *)(v13 + 1456))
    {
      if (a7)
      {
        long long v119 = 0u;
        long long v120 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        uint64_t v14 = [a2 countByEnumeratingWithState:&v117 objects:v133 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v118;
          uint64_t v17 = *MEMORY[0x1E4F54300];
          uint64_t v18 = *MEMORY[0x1E4F53FB8];
          while (2)
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v118 != v16) {
                objc_enumerationMutation(obj);
              }
              if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v117 + 1) + 8 * i), "objectForKeyedSubscript:", v17), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v13 + 1456), "portType")), "objectForKeyedSubscript:", v18), "intValue") != 2)
              {
                if (dword_1EB4C4FF0)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                return 13;
              }
            }
            uint64_t v15 = [obj countByEnumeratingWithState:&v117 objects:v133 count:16];
            if (v15) {
              continue;
            }
            break;
          }
        }
      }
    }
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    uint64_t v20 = obj;
    uint64_t v21 = [obj countByEnumeratingWithState:&v113 objects:v132 count:16];
    uint64_t v86 = v13;
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v114;
      uint64_t v24 = *MEMORY[0x1E4F54128];
      uint64_t v83 = *MEMORY[0x1E4F54300];
      uint64_t v81 = *MEMORY[0x1E4F54128];
      while (2)
      {
        for (uint64_t j = 0; j != v22; ++j)
        {
          if (*(void *)v114 != v23) {
            objc_enumerationMutation(obj);
          }
          unsigned int v26 = *(void **)(*((void *)&v113 + 1) + 8 * j);
          if ((objc_msgSend(a4, "isEqualToString:", objc_msgSend(v26, "objectForKeyedSubscript:", v24)) & 1) == 0)
          {
            if (dword_1EB4C4FF0)
            {
              long long v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            return 4;
          }
          uint64_t v27 = (void *)[v26 objectForKeyedSubscript:v83];
          long long v109 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          uint64_t v28 = [a5 countByEnumeratingWithState:&v109 objects:v125 count:16];
          if (v28)
          {
            uint64_t v29 = v28;
            uint64_t v30 = *(void *)v110;
            while (2)
            {
              for (uint64_t k = 0; k != v29; ++k)
              {
                if (*(void *)v110 != v30) {
                  objc_enumerationMutation(a5);
                }
                uint64_t v32 = *(void *)(*((void *)&v109 + 1) + 8 * k);
                if (([a4 isEqualToString:v32] & 1) == 0
                  && ![v27 objectForKeyedSubscript:v32])
                {
                  if (dword_1EB4C4FF0)
                  {
                    uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  return 11;
                }
              }
              uint64_t v29 = [a5 countByEnumeratingWithState:&v109 objects:v125 count:16];
              if (v29) {
                continue;
              }
              break;
            }
          }
          uint64_t v13 = v86;
          uint64_t v24 = v81;
        }
        uint64_t v20 = obj;
        uint64_t v22 = [obj countByEnumeratingWithState:&v113 objects:v132 count:16];
        if (v22) {
          continue;
        }
        break;
      }
    }
    uint64_t v33 = (void *)[v84 objectForKeyedSubscript:a4];
    memset(&v108, 0, sizeof(v108));
    uint64_t v34 = (void *)[v20 lastObject];
    uint64_t v35 = *MEMORY[0x1E4F530C0];
    CMTimeMakeFromDictionary(&v108, (CFDictionaryRef)[v34 objectForKeyedSubscript:*MEMORY[0x1E4F530C0]]);
    if ((v108.flags & 1) == 0) {
      goto LABEL_44;
    }
    if (v33) {
      [v33 pts];
    }
    else {
      memset(&time1, 0, sizeof(time1));
    }
    CMTime time2 = v108;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      uint64_t v39 = v13;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
    }
    else
    {
LABEL_44:
      uint64_t v39 = v13;
      uint64_t v40 = v84;
      uint64_t v41 = a5;
    }
    if (-[BWFigVideoCaptureDevice _ubCBAFScanInProgressUsingFrameStatisticsByPortType:portTypes:timeMachineFramesMetadata:](v39, v40, v41, v20))return 3; {
    long long v105 = 0u;
    }
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    uint64_t v42 = *(void **)(v13 + 552);
    uint64_t v43 = [v42 countByEnumeratingWithState:&v103 objects:v124 count:16];
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = 0;
      uint64_t v46 = *(void *)v104;
      do
      {
        for (uint64_t m = 0; m != v44; ++m)
        {
          if (*(void *)v104 != v46) {
            objc_enumerationMutation(v42);
          }
          uint64_t v48 = *(void **)(*((void *)&v103 + 1) + 8 * m);
          uint64_t v49 = [v48 activeQuadraBinningFactor];
          if ((int)v49 >= 1)
          {
            uint64_t v50 = v49;
            if (!v45) {
              uint64_t v45 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
            }
            objc_msgSend(v45, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v50), objc_msgSend(v48, "portType"));
          }
        }
        uint64_t v44 = [v42 countByEnumeratingWithState:&v103 objects:v124 count:16];
      }
      while (v44);
    }
    else
    {
      uint64_t v45 = 0;
    }
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    uint64_t v51 = [obj countByEnumeratingWithState:&v99 objects:v123 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      int v53 = 0;
      uint64_t v54 = *(void *)v100;
      uint64_t v55 = *MEMORY[0x1E4F54148];
      uint64_t v85 = *MEMORY[0x1E4F54128];
      while (2)
      {
        for (uint64_t n = 0; n != v52; ++n)
        {
          if (*(void *)v100 != v54) {
            objc_enumerationMutation(obj);
          }
          uint64_t v57 = *(void **)(*((void *)&v99 + 1) + 8 * n);
          if ((objc_msgSend((id)objc_msgSend(v57, "objectForKeyedSubscript:", 0x1EFA44440), "BOOLValue") & 1) == 0)
          {
            ++v53;
            int v58 = objc_msgSend((id)objc_msgSend(v57, "objectForKeyedSubscript:", v55), "intValue");
            if (v58 >= 1
              && v58 != objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", objc_msgSend(v57, "objectForKeyedSubscript:", v85)), "intValue"))
            {
              if (dword_1EB4C4FF0)
              {
                unsigned int v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              return 8;
            }
          }
          uint64_t v59 = v86;
        }
        uint64_t v52 = [obj countByEnumeratingWithState:&v99 objects:v123 count:16];
        if (v52) {
          continue;
        }
        break;
      }
    }
    else
    {
      int v53 = 0;
      uint64_t v59 = v86;
    }
    if (!*(void *)(v59 + 1600)) {
      goto LABEL_93;
    }
    int v61 = v53;
    Float64 v62 = (void *)[MEMORY[0x1E4F1CA48] array];
    id v98 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v63 = [obj countByEnumeratingWithState:&v94 objects:v122 count:16];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = *(void *)v95;
      do
      {
        for (iuint64_t i = 0; ii != v64; ++ii)
        {
          if (*(void *)v95 != v65) {
            objc_enumerationMutation(obj);
          }
          objc_msgSend(v62, "addObject:", objc_msgSend(*(id *)(*((void *)&v94 + 1) + 8 * ii), "objectForKeyedSubscript:", v35));
        }
        uint64_t v64 = [obj countByEnumeratingWithState:&v94 objects:v122 count:16];
      }
      while (v64);
    }
    if (!FigSampleBufferAutofocusProcessorCopyTimestampedExposureModes(*(void *)(v59 + 1600), (const __CFArray *)v62, &v98))
    {
      id v67 = v98;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      uint64_t v68 = [v67 countByEnumeratingWithState:&v88 objects:v121 count:16];
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = *(void *)v89;
        while (2)
        {
          for (juint64_t j = 0; jj != v69; ++jj)
          {
            if (*(void *)v89 != v70) {
              objc_enumerationMutation(v67);
            }
            if ([*(id *)(*((void *)&v88 + 1) + 8 * jj) intValue] == 4)
            {
              if (dword_1EB4C4FF0)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v92 = OS_LOG_TYPE_DEFAULT;
                long long v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v78 = *(_DWORD *)type;
                if (os_log_type_enabled(v77, v92)) {
                  unsigned int v79 = v78;
                }
                else {
                  unsigned int v79 = v78 & 0xFFFFFFFE;
                }
                if (v79)
                {
                  int v126 = 136315138;
                  uint64_t v127 = "-[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortTyp"
                         "e:portTypes:frameStatisticsByPortType:deliverDepthData:]";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              return 10;
            }
          }
          uint64_t v69 = [v67 countByEnumeratingWithState:&v88 objects:v121 count:16];
          if (v69) {
            continue;
          }
          break;
        }
      }
      int v53 = v61;
LABEL_93:
      if (v53 >= v82) {
        return 0;
      }
      if (dword_1EB4C4FF0)
      {
        int v72 = v53;
        LODWORD(v98) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        long long v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v74 = v98;
        if (os_log_type_enabled(v73, type[0])) {
          unsigned int v75 = v74;
        }
        else {
          unsigned int v75 = v74 & 0xFFFFFFFE;
        }
        if (v75)
        {
          int v126 = 136315650;
          uint64_t v127 = "-[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortType:portTy"
                 "pes:frameStatisticsByPortType:deliverDepthData:]";
          __int16 v128 = 1024;
          int v129 = v72;
          __int16 v130 = 1024;
          int v131 = v82;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 6;
    }
    if (dword_1EB4C4FF0)
    {
      CMTime v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 9;
  }
  else
  {
    if (dword_1EB4C4FF0)
    {
      LODWORD(v98) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 5;
  }
}

- (uint64_t)_ubCBAFScanInProgressUsingFrameStatisticsByPortType:(void *)a3 portTypes:(void *)a4 timeMachineFramesMetadata:
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v7 = [a3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v20;
      while (2)
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v20 != v9) {
            objc_enumerationMutation(a3);
          }
          objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(*((void *)&v19 + 1) + 8 * v10)), "focusingMethod");
          if (FigCaptureStreamFocusingMethodIsContrastBased()) {
            return 1;
          }
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [a3 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    BOOL result = [a4 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (result)
    {
      uint64_t v11 = result;
      uint64_t v12 = *(void *)v16;
      uint64_t v13 = *MEMORY[0x1E4F53EE0];
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(a4);
          }
          objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * i), "objectForKeyedSubscript:", v13), "intValue");
          if (FigCaptureStreamFocusingMethodIsContrastBased())
          {
            [+[BWAggdDataReporter sharedInstance] reportZeroShutterLagMetadataInitFailureWithReasons:8];
            return 1;
          }
        }
        uint64_t v11 = [a4 countByEnumeratingWithState:&v15 objects:v23 count:16];
        BOOL result = 0;
        if (v11) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

- (uint64_t)_ubResolveDigitalFlashStatusForSceneFlags:(int)a3 flashMode:
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x4000) == 0)
  {
    if ((*(void *)&a2 & 0x28000) != 0)
    {
      BOOL v5 = 0;
    }
    else if (a3)
    {
      if (*(unsigned char *)(a1 + 2173)) {
        BOOL v5 = (a2 & 0x10000000) == 0;
      }
      else {
        BOOL v5 = 1;
      }
    }
    else
    {
      BOOL v5 = 1;
    }
    if (!a3) {
      BOOL v5 = 1;
    }
    if ((a2 & 0x800) != 0 && v5 || (a2 & 0x20000000) != 0 && !a3) {
      return 2;
    }
    else {
      return (a2 >> 10) & 1;
    }
  }
  return result;
}

- (uint64_t)_ubSphereOffsetsForAdaptiveBracketingParameters:(float)a3 pixelSize:
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
  if (a2 && a3 > 0.0)
  {
    uint64_t v6 = [MEMORY[0x1E4F28E78] string];
    int v7 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingFrameParametersForGroup:", 1), "count");
    int v8 = 0;
    if (v7)
    {
      uint64_t v9 = 2;
      do
      {
        v8 += v7;
        int v7 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingFrameParametersForGroup:", v9), "count");
        uint64_t v9 = (v9 + 1);
      }
      while (v7);
    }
    float v10 = a3 * 4.0;
    int v11 = (int)(float)(25.0 / v10);
    int v12 = (2 * v11) | 1;
    if (v8 >= v12) {
      int v13 = (2 * v11) | 1;
    }
    else {
      int v13 = v8;
    }
    int v14 = v13 + (v13 < 0);
    if ((v11 & 0x80000000) == 0)
    {
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 3221225472;
      v35[2] = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke;
      v35[3] = &unk_1E5C2B9F8;
      float v36 = v10;
      v35[4] = v5;
      void v35[5] = v6;
      uint64_t v30 = v35;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      uint64_t v32 = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_2;
      uint64_t v33 = &unk_1E5C2BA20;
      uint64_t v34 = v35;
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      uint64_t v28 = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_3;
      uint64_t v29 = &unk_1E5C2BA20;
      if (v8 >= 1)
      {
        int v15 = 0;
        int v16 = v14 >> 1;
        uint64_t v17 = (v16 - 1);
        uint64_t v18 = (1 - v16);
        uint64_t v19 = -v16;
        int v20 = v8;
        do
        {
          int v21 = v12 - (v15 != 0);
          if (v20 >= v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = v20;
          }
          if (v15)
          {
            v28((uint64_t)v27, v17, v22);
          }
          else
          {
            if (v15) {
              uint64_t v23 = v18;
            }
            else {
              uint64_t v23 = v19;
            }
            v32((uint64_t)v31, v23, v22);
          }
          ++v15;
          BOOL v24 = __OFSUB__(v20, v22);
          v20 -= v22;
        }
        while (!((v20 < 0) ^ v24 | (v20 == 0)));
      }
      if (dword_1EB4C4FF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return v5;
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke(uint64_t a1, int a2)
{
  double v3 = (float)(*(float *)(a1 + 48) * (float)a2);
  v6.double y = 0.0;
  v6.double x = v3;
  DictionaryRepresentatiouint64_t n = CGPointCreateDictionaryRepresentation(v6);
  [*(id *)(a1 + 32) addObject:DictionaryRepresentation];
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  return [*(id *)(a1 + 40) appendFormat:@" (%.3f, %.3f)", *(void *)&v3, 0];
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_2(uint64_t result, int a2, int a3)
{
  if (a3 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = result;
    int v5 = a3 + a2;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16))();
      ++v3;
    }
    while (v3 < v5);
  }
  return result;
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_3(uint64_t result, int a2, int a3)
{
  if (a3 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = result;
    int v5 = a2 - a3;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16))();
      --v3;
    }
    while (v3 > v5);
  }
  return result;
}

- (uint64_t)_ubEnabledOutputsForCaptureFlags:(int)a3 captureType:(uint64_t *)a4 baseCaptureFrameFlagsOut:(unint64_t *)a5 discardCaptureFrameFlagsOut:
{
  if (result)
  {
    if (*(unsigned char *)(result + 2050))
    {
      if ((a2 & 4) != 0)
      {
        int v12 = objc_msgSend((id)objc_msgSend(*(id *)(result + 520), "objectForKeyedSubscript:", @"StillImageDepthDataType"), "intValue");
        if ((a2 & 0x800) != 0 && v12 == 8 && (a3 == 7 || a3 == 1 && (a2 & 0x80) == 0))
        {
          uint64_t v8 = 3;
          unint64_t v9 = 0xA000000000000000;
          uint64_t v10 = 0x5000000000000000;
        }
        else
        {
          uint64_t v8 = 1;
          unint64_t v9 = 0x8000000000000000;
          uint64_t v10 = 0x4000000000000000;
        }
      }
      else
      {
        uint64_t v8 = 2;
        unint64_t v9 = 0x2000000000000000;
        uint64_t v10 = 0x1000000000000000;
      }
      uint64_t result = [NSNumber numberWithInt:v8];
      if (!a4) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t result = 0;
      unint64_t v9 = 0x2000000000000000;
      uint64_t v10 = 0x1000000000000000;
      if (!a4)
      {
LABEL_16:
        if (a5) {
          *a5 = v9;
        }
        return result;
      }
    }
    *a4 = v10;
    goto LABEL_16;
  }
  return result;
}

- (double)_ubZeroShutterLagFrameSelectionForCaptureType:(uint64_t)a3@<X2> captureFlags:(void *)a4@<X3> captureParameters:(void *)a5@<X4> timeMachineFrameMetadata:(int)a6@<W5> mainFrameCount:(uint64_t)a7@<X6> userInitiatedRequestPTS:(uint64_t)a8@<X8>
{
  if (!a1)
  {
    *(void *)&long long v42 = 0;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return *(double *)&v42;
  }
  unint64_t v9 = (CMTime *)a7;
  int v10 = a6;
  int v12 = a4;
  int v13 = a3;
  uint64_t v51 = -1;
  if (a2 != 1) {
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 3204)) {
    goto LABEL_15;
  }
  if ((a3 & 0x2000) != 0)
  {
LABEL_7:
    uint64_t v18 = objc_msgSend(MEMORY[0x1E4F28E60], "indexSetWithIndexesInRange:", 0, objc_msgSend(a5, "count", a3));
    uint64_t v19 = (void *)[MEMORY[0x1E4F1CA48] array];
    if ([a5 count])
    {
      unint64_t v20 = 0;
      do
      {
        int v21 = (void *)[a5 objectAtIndexedSubscript:v20];
        if (objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", 0x1EFA44440), "BOOLValue")) {
          [v18 removeIndex:v20];
        }
        else {
          [v19 addObject:v21];
        }
        ++v20;
      }
      while ([a5 count] > v20);
    }
    int v12 = a4;
    int v22 = [a4 referenceFrameSelectionMethod];
    unint64_t v9 = (CMTime *)a7;
    switch(v22)
    {
      case 0:
        uint64_t v23 = &unk_1EFB04460;
        goto LABEL_18;
      case 1:
        char v27 = *(unsigned char *)(a7 + 12);
        int v10 = a6;
        if (v27)
        {
          CMTime v50 = *v9;
          int v24 = FigCapturePTSBasedReferenceFrameSelection(1, (const __CFArray *)v19, &v50, a6, (_DWORD *)&v51 + 1, (int *)&v51);
        }
        else
        {
          uint64_t v23 = &unk_1EFB04478;
          uint64_t v25 = v19;
          int v26 = a6;
LABEL_19:
          int v24 = BWReferenceFrameSelectionUsingMotionAndFocusScores(v25, v23, v26, (_DWORD *)&v51 + 1, (int *)&v51);
        }
LABEL_24:
        int v13 = v45;
        if (v24) {
          goto LABEL_32;
        }
        unint64_t v28 = v51;
        if ((v51 & 0x80000000) != 0 || [a5 count] <= v28) {
          goto LABEL_32;
        }
        unint64_t v29 = [v19 count];
        if (v29 < [a5 count])
        {
          uint64_t v30 = [v18 firstIndex];
          int v31 = v51;
          if (v51)
          {
            unint64_t v32 = 0;
            do
            {
              uint64_t v30 = [v18 indexGreaterThanIndex:v30];
              ++v32;
              int v31 = v51;
            }
            while (v32 < (int)v51);
          }
          LODWORD(v51) = v30;
          HIDWORD(v51) += v30 - v31;
        }
        break;
      case 2:
        int v10 = a6;
        int v24 = BWReferenceFrameSelectionUsingBlurScores(v19, a6, (_DWORD *)&v51 + 1, &v51);
        goto LABEL_24;
      case 3:
        uint64_t v23 = (void *)[v12 motionAndFocusScoreWeights];
LABEL_18:
        uint64_t v25 = v19;
        int v10 = a6;
        int v26 = a6;
        goto LABEL_19;
      default:
        int v24 = 0;
        unint64_t v9 = (CMTime *)a7;
        int v10 = a6;
        goto LABEL_24;
    }
    goto LABEL_33;
  }
  if ((a3 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v19 = 0;
LABEL_32:
    uint64_t v51 = 0;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 3212);
    LODWORD(v51) = v14 - 1;
    HIDWORD(v51) = v14 - 1;
    if (v14 <= 0) {
      goto LABEL_7;
    }
    uint64_t v19 = 0;
  }
LABEL_33:
  uint64_t v33 = [v19 count];
  int v34 = -1;
  if ((v13 & 0x100000) != 0 && v33)
  {
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    unint64_t v47 = __168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke;
    uint64_t v48 = &unk_1E5C2BA88;
    uint64_t v49 = a5;
    int v35 = [v12 usePreviousSIFR];
    if ((int)v51 <= 1) {
      int v36 = 1;
    }
    else {
      int v36 = v51;
    }
    unsigned int v37 = v36 - 1;
    if (v35) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = v51;
    }
    if ((v13 & 0x20) != 0)
    {
      if ((int)v38 < 1)
      {
        int v34 = v38;
      }
      else
      {
        int v34 = v38;
        if ((v47((uint64_t)v46, v38) & 1) == 0)
        {
          if (![v12 usePreviousSIFR]
            || (int v34 = v38 + 1, (v47((uint64_t)v46, (int)v38 + 1) & 1) == 0))
          {
            if ((unint64_t)[a5 count] < 2)
            {
LABEL_54:
              int v41 = -1;
            }
            else
            {
              int v39 = -1;
              unint64_t v40 = 1;
              while (1)
              {
                if (v47((uint64_t)v46, (int)v38 + v39))
                {
                  int v41 = v38 + v39;
                  goto LABEL_58;
                }
                if (v47((uint64_t)v46, (int)v38 + (int)v40)) {
                  break;
                }
                ++v40;
                --v39;
                if ([a5 count] <= v40) {
                  goto LABEL_54;
                }
              }
              int v41 = v38 + v40;
            }
LABEL_58:
            int v34 = v41 & ~(v41 >> 31);
          }
        }
      }
    }
    else if (v47((uint64_t)v46, v38))
    {
      int v34 = v38;
    }
    else
    {
      int v34 = v51;
    }
  }
  long long v42 = *(_OWORD *)&v9->value;
  *(_OWORD *)a8 = *(_OWORD *)&v9->value;
  *(void *)(a8 + 16) = v9->epoch;
  int v43 = HIDWORD(v51);
  *(_DWORD *)(a8 + 24) = HIDWORD(v51);
  *(_DWORD *)(a8 + 28) = v10;
  *(_DWORD *)(a8 + 32) = v43;
  *(_DWORD *)(a8 + 36) = v10;
  *(_DWORD *)(a8 + 40) = v51;
  *(_DWORD *)(a8 + 44) = v34;
  return *(double *)&v42;
}

- (BOOL)_ubAWBReflowEnabledForCaptureType:(uint64_t)a3 primaryPortType:(void *)a4 frameStatisticsByPortType:(void *)a5 previewMetadata:
{
  if (result)
  {
    int v9 = BWStillImageAutoWhiteBalanceReflowMaximumFrameCount();
    if (v9 < 1) {
      return 0;
    }
    unsigned int v10 = v9;
    uint64_t result = 0;
    if (a2 <= 0xC && ((1 << a2) & 0x1402) != 0)
    {
      if (a5)
      {
        if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C98]), "BOOLValue")) {
          return 0;
        }
      }
      else if (objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", a3), "awbStable"))
      {
        return 0;
      }
      return [a4 frameCount] < (unint64_t)v10;
    }
  }
  return result;
}

- (uint64_t)_ubAddFrameParametersForDepthIfNeeded:(__int16)a3 captureFlags:
{
  if (result && (a3 & 0x800) != 0)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 3202)) {
      uint64_t result = [a2 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F54F98]];
    }
    if (*(unsigned char *)(v4 + 3203))
    {
      uint64_t v5 = *MEMORY[0x1E4F54FA8];
      uint64_t v6 = MEMORY[0x1E4F1CC38];
      return [a2 setObject:v6 forKeyedSubscript:v5];
    }
  }
  return result;
}

- (void)_ubWhiteBalanceMetadataByPortTypeFromMetadata:(uint64_t)a1
{
  BOOL v2 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    BOOL v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    BWCopyWhiteBalanceMetadata(a2, v4);
    if (![v4 count]) {
      uint64_t v4 = 0;
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]));
    uint64_t v5 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F54300]];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          int v11 = (void *)[v5 objectForKeyedSubscript:v10];
          int v12 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          BWCopyWhiteBalanceMetadata(v11, v12);
          if ([v12 count]) {
            int v13 = v12;
          }
          else {
            int v13 = 0;
          }
          [v2 setObject:v13 forKeyedSubscript:v10];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }
  }
  return v2;
}

- (BOOL)_ubGenerateLTMCurveForCaptureStream:(void *)a3 frameStatistics:
{
  if (result)
  {
    memset(&v5[1], 0, sizeof(CMTime));
    if (a2 && ([a2 maxExposureDuration], (v5[1].flags & 0x1D) == 1))
    {
      [a3 integrationTime];
      v5[0] = v5[1];
      return v4 + 0.0082 >= CMTimeGetSeconds(v5);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL __235__BWFigVideoCaptureDevice__ubStillImageCaptureSettingsWithID_userInitiatedRequestPTS_captureType_captureFlags_sceneFlags_frameStatisticsByPortType_metadata_deliverOriginalImage_deliverSushiRaw_bravoConstituentImageDeliveryDeviceTypes___block_invoke(uint64_t a1, void *a2)
{
  return (objc_opt_isKindOfClass() & 1) != 0
      && [a2 bracketedCaptureSequenceNumber] == *(_DWORD *)(a1 + 32);
}

- (id)_autoExposureBracketValuesForSettings:(void *)a3 frameStatistics:
{
  if (result)
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F1CA48] array];
    if ([a2 bracketImageCount])
    {
      unint64_t v6 = 0;
      do
      {
        LODWORD(v7) = *(_DWORD *)([a2 exposureTargetBiases] + 4 * v6);
        if (*(float *)&v7 == 3.4028e38)
        {
          [a3 exposureBias];
          *(float *)&double v7 = v7;
        }
        objc_msgSend(v5, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v7));
        ++v6;
      }
      while (v6 < [a2 bracketImageCount]);
    }
    uint64_t v8 = (void *)[v5 copy];
    return v8;
  }
  return result;
}

- (id)_manualExposureBracketParametersForSettings:(void *)a3 frameStatistics:(int)a4 use8dot8FixedPointGain:
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    double v7 = (void *)[MEMORY[0x1E4F1CA48] array];
    if ([a2 bracketImageCount])
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = *MEMORY[0x1E4F545E0];
      uint64_t v11 = *MEMORY[0x1E4F545C8];
      do
      {
        CMTime v27 = *(CMTime *)([a2 exposureDurations] + v8);
        CMTime time1 = v27;
        memset(&time2, 0, sizeof(time2));
        if (CMTimeCompare(&time1, &time2))
        {
          CMTime time1 = v27;
          double Seconds = CMTimeGetSeconds(&time1);
        }
        else
        {
          [a3 integrationTime];
        }
        double v13 = Seconds;
        float v14 = *(float *)([a2 ISOs] + 4 * v9);
        if (v14 == 3.4028e38)
        {
          [a3 gain];
          float v16 = v15;
        }
        else
        {
          [a3 baseISO];
          float v16 = v14 / v17;
        }
        uint64_t v18 = (int)(v13 * 1000000.0);
        if (a4)
        {
          v30[0] = v10;
          uint64_t v19 = [NSNumber numberWithInt:v18];
          v30[1] = v11;
          v31[0] = v19;
          v31[1] = objc_msgSend(NSNumber, "numberWithInt:", vcvts_n_s32_f32(v16, 8uLL));
          uint64_t v20 = (void *)MEMORY[0x1E4F1C9E8];
          int v21 = v31;
          int v22 = v30;
        }
        else
        {
          v28[0] = v10;
          uint64_t v23 = [NSNumber numberWithInt:v18];
          v28[1] = v11;
          v29[0] = v23;
          *(float *)&double v24 = v16;
          v29[1] = [NSNumber numberWithFloat:v24];
          uint64_t v20 = (void *)MEMORY[0x1E4F1C9E8];
          int v21 = v29;
          int v22 = v28;
        }
        objc_msgSend(v7, "addObject:", objc_msgSend(v20, "dictionaryWithObjects:forKeys:count:", v21, v22, 2));
        ++v9;
        v8 += 24;
      }
      while (v9 < [a2 bracketImageCount]);
    }
    return (id)[v7 copy];
  }
  return result;
}

- (uint64_t)_ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:(void *)a3 unifiedBracketedCaptureParamsOut:
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = result;
    os_unfair_lock_assert_owner((const os_unfair_lock *)(result + 136));
    if (a3)
    {
      if (*(unsigned char *)(v5 + 148))
      {
        id v6 = 0;
        uint64_t result = 0;
      }
      else
      {
        id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (result)
        {
          uint64_t v7 = result;
          float v17 = a3;
          uint64_t v8 = *(void *)v19;
          uint64_t v9 = *MEMORY[0x1E4F55018];
          uint64_t v10 = *MEMORY[0x1E4F55030];
          while (2)
          {
            uint64_t v11 = 0;
            do
            {
              if (*(void *)v19 != v8) {
                objc_enumerationMutation(a2);
              }
              int v12 = *(void **)(*((void *)&v18 + 1) + 8 * v11);
              if ([v12 objectForKeyedSubscript:v9])
              {
                uint64_t v13 = objc_msgSend((id)objc_msgSend(*(id *)(v5 + 152), "objectForKeyedSubscript:", &unk_1EFB015C8), "newPixelBuffer");
                if (!v13)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();

                  id v6 = 0;
                  uint64_t result = 4294954610;
                  goto LABEL_17;
                }
                float v14 = (__CVBuffer *)v13;
                float v15 = (void *)[v12 mutableCopy];
                [v15 setObject:v14 forKeyedSubscript:v10];
                [v6 addObject:v15];

                CVPixelBufferRelease(v14);
              }
              else
              {
                [v6 addObject:v12];
              }
              ++v11;
            }
            while (v7 != v11);
            uint64_t result = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
            uint64_t v7 = result;
            if (result) {
              continue;
            }
            break;
          }
LABEL_17:
          a3 = v17;
        }
      }
      *a3 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *__95__BWFigVideoCaptureDevice__ubWhiteBalanceMetadataByPortTypeFromFrameStatistics_masterPortType___block_invoke(uint64_t a1, void *a2)
{
  int v3 = BWGetWhiteBalanceMetadataFromFrameStatistics(a2);
  uint64_t v4 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 32)];
  [v3 setObject:v4 forKeyedSubscript:*MEMORY[0x1E4F53C98]];
  uint64_t v5 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 33)];
  [v3 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F53C68]];
  if ([v3 count]) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F541B0]];
  return [NSString stringWithFormat:@"portType:%@, sifr:%d, sifrSkipped:%d", BWPortTypeToDisplayString(a2, v5), v4 != 0, objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F541B8]), "BOOLValue")];
}

uint64_t __168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if ([*(id *)(a1 + 32) count] <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v4 = (void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:a2];
  uint64_t result = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F541B0]];
  if (result)
  {
    unsigned int v6 = objc_msgSend((id)objc_msgSend((id)result, "objectForKeyedSubscript:", *MEMORY[0x1E4F541B8]), "BOOLValue") ^ 1;
    if (a2) {
      return v6;
    }
    else {
      return 1;
    }
  }
  return result;
}

- (BOOL)_isLowLightSceneUsingFrameStatisticsByPortType:(uint64_t)a1
{
  BOOL result = 0;
  if (a1 && a2)
  {
    uint64_t v5 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 496), "portType"));
    if ([(id)a1 isBravoVariant]
      && (os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1304)),
          uint64_t v6 = *(void *)(a1 + 1288),
          uint64_t v7 = *(void *)(a1 + 568),
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1304)),
          v6 == v7))
    {
      uint64_t v8 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 568), "portType"));
      int v9 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 0;
    }
    if (*(unsigned char *)(a1 + 3204))
    {
      float v10 = *(float *)(a1 + 3240);
      [v5 gain];
      float v12 = v11;
      double v13 = *(double *)(a1 + 2336);
      [v5 integrationTime];
      if (v9)
      {
        float v10 = *(float *)(a1 + 3244);
        [v8 gain];
        float v12 = v15;
        double v13 = *(double *)(a1 + 2344);
        [v8 integrationTime];
      }
      return v12 >= v10 || v14 >= v13 + 0.0000999999975;
    }
    else
    {
      double v16 = *(double *)(a1 + 2336);
      [v5 integrationTime];
      if (v9)
      {
        double v16 = *(double *)(a1 + 2344);
        [v8 integrationTime];
      }
      return v17 >= v16 + -0.0000999999975;
    }
  }
  return result;
}

- (uint64_t)_currentSceneAllowsMotionFreezing:(uint64_t)result
{
  _OWORD v8[3] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (*(unsigned char *)(result + 3145))
    {
      unint64_t v3 = -[BWFigVideoCaptureDevice _evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:resultOut:](result, 1, 0);
      unint64_t v4 = v3;
      if (a2)
      {
        v7[0] = @"IsPeopleAndMotionScene";
        unint64_t v5 = v3 & 1;
        v8[0] = [NSNumber numberWithBool:v5];
        v7[1] = @"IsFaceScene";
        v8[1] = [NSNumber numberWithBool:(v4 >> 8) & 1];
        void v7[2] = @"SecondsSinceLastFaceDetected";
        LODWORD(v6) = HIDWORD(v4);
        void v8[2] = [NSNumber numberWithFloat:v6];
        objc_msgSend(a2, "addPAMDecisionPreliminary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v8, v7, 3));
      }
      else
      {
        unint64_t v5 = v3 & 1;
      }
      return v5 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

intptr_t __301__BWFigVideoCaptureDevice__resolveStillImageCaptureTypeFromStatisticsByPortType_masterCaptureStream_flashMode_hdrMode_qualityPrioritization_stereoFusionMode_depthDataDeliveryEnabled_bravoConstituentImageDeliveryDeviceTypes_burstQualityCaptureEnabled_clientBracketMode_forSceneMonitoring_captureFlags___block_invoke(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfiguration
{
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  int64_t selectionBehavior = self->_bravoStreamSelectionConfiguration.selectionBehavior;
  unint64_t restrictedSelectionConditions = self->_bravoStreamSelectionConfiguration.restrictedSelectionConditions;
  os_unfair_lock_unlock(p_switchOverLock);
  int64_t v6 = selectionBehavior;
  unint64_t v7 = restrictedSelectionConditions;
  result.float var1 = v7;
  result.float var0 = v6;
  return result;
}

- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfigurationForRecording
{
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  int64_t selectionBehavior = self->_bravoStreamSelectionConfigurationForRecording.selectionBehavior;
  unint64_t restrictedSelectionConditions = self->_bravoStreamSelectionConfigurationForRecording.restrictedSelectionConditions;
  os_unfair_lock_unlock(p_switchOverLock);
  int64_t v6 = selectionBehavior;
  unint64_t v7 = restrictedSelectionConditions;
  result.float var1 = v7;
  result.float var0 = v6;
  return result;
}

- (void)setBravoStreamSelectionConfigurationForRecording:(id)a3
{
  unint64_t var1 = a3.var1;
  int64_t var0 = a3.var0;
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfigurationForRecording.int64_t selectionBehavior = var0;
  self->_bravoStreamSelectionConfigurationForRecording.unint64_t restrictedSelectionConditions = var1;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (BOOL)bravoStreamSelectionConfigurationForRecordingEnabled
{
  BOOL v2 = self;
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  LOBYTE(v2) = v2->_bravoStreamSelectionConfigurationForRecordingEnabled;
  os_unfair_lock_unlock(p_switchOverLock);
  return (char)v2;
}

- (void)setBravoStreamSelectionConfigurationForRecordingEnabled:(BOOL)a3
{
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfigurationForRecordingEnabled = a3;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (NSArray)bravoStreamSelectionEligibleFallbackPortTypes
{
  p_switchOverLocuint64_t k = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  unint64_t v4 = [(BWBravoStreamSelector *)self->_bravoStreamSelector eligibleFallbackPortTypes];
  os_unfair_lock_unlock(p_switchOverLock);
  return v4;
}

- (float)parallaxMitigationStrengthAndTargetCaptureStream:(id *)a3
{
  p_parallaxMitigationStrengthLocuint64_t k = &self->_parallaxMitigationStrengthLock;
  os_unfair_lock_lock(&self->_parallaxMitigationStrengthLock);
  float parallaxMitigationStrength = self->_parallaxMitigationStrength;
  parallaxMitigationTargetCaptureStreauint64_t m = self->_parallaxMitigationTargetCaptureStream;
  os_unfair_lock_unlock(p_parallaxMitigationStrengthLock);
  if (a3) {
    *a3 = parallaxMitigationTargetCaptureStream;
  }
  return parallaxMitigationStrength;
}

- (void)updateSphereShiftStateWithSampleBuffer:(opaqueCMSampleBuffer *)a3
{
  unint64_t v4 = (void *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  int v5 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F542D8]), "intValue");
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F542E0]), "BOOLValue"))
  {
    os_unfair_lock_lock(&self->_sphereShiftStateLock);
    if (v5 > self->_sphereShiftStateLastUpdateCaptureID)
    {
      FigMotionSphereShiftStateUpdateWithMetadata((uint64_t)&self->_sphereShiftState, (CFDictionaryRef)v4);
      self->_sphereShiftStateLastUpdateCaptureID = v5;
    }
    os_unfair_lock_unlock(&self->_sphereShiftStateLock);
  }
}

- ($354B6A80224A98E3360CA2136CEA4A11)sphereShiftState
{
  p_sphereShiftStateLocuint64_t k = &self->_sphereShiftStateLock;
  os_unfair_lock_lock(&self->_sphereShiftStateLock);
  memcpy(retstr, &self->_sphereShiftState, sizeof($354B6A80224A98E3360CA2136CEA4A11));
  os_unfair_lock_unlock(p_sphereShiftStateLock);
  return result;
}

- (uint64_t)_depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:(uint64_t)result
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    int v3 = [*(id *)(result + 560) indexOfObject:a2];
    uint64_t v4 = v3 >= 1 ? [*(id *)(v2 + 560) objectAtIndexedSubscript:(v3 - 1)] : 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    int v5 = *(void **)(v2 + 552);
    $06E035DAA80D7DA92D7AC3530BEA5F2A result = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)v12;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          int v9 = *(void **)(*((void *)&v11 + 1) + 8 * v8);
          if (v9 == (void *)v4)
          {
            if (*(unsigned char *)(v2 + 1464)) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = *(unsigned char *)(v2 + 209) != 0;
            }
          }
          else
          {
            BOOL v10 = 0;
          }
          [v9 setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:v10];
          ++v8;
        }
        while (v6 != v8);
        $06E035DAA80D7DA92D7AC3530BEA5F2A result = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

- (int)timeOfFlightProjectorMode
{
  int v3 = [(BWFigVideoCaptureStream *)self->_captureStream portType];
  if (![(NSString *)v3 isEqualToString:*MEMORY[0x1E4F52DE0]]) {
    return 0;
  }
  uint64_t v4 = [(BWFigVideoCaptureStream *)self->_captureStream stream];
  id v5 = [(BWFigCaptureStream *)v4 getProperty:*MEMORY[0x1E4F54C60] error:0];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F55690]];
  return [v6 intValue];
}

- (BWSupplementalPointCloudCaptureDeviceDelegate)supplementalPointCloudCaptureDeviceDelegate
{
  return (BWSupplementalPointCloudCaptureDeviceDelegate *)[(FigWeakReference *)self->_supplementalPointCloudCaptureDeviceDelegate referencedObject];
}

- (void)stopPointCloudCaptureForStillImageCaptureWithSettingsID:(int64_t)a3
{
  int v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __83__BWFigVideoCaptureDevice_stopPointCloudCaptureForStillImageCaptureWithSettingsID___block_invoke;
  v4[3] = &unk_1E5C24F10;
  v4[4] = self;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

void __83__BWFigVideoCaptureDevice_stopPointCloudCaptureForStillImageCaptureWithSettingsID___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 2496));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 2504) settingsID];
  uint64_t v4 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    __int16 v5 = [*(id *)(v4 + 2504) captureFlags];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 2496));
    if ((v5 & 0x200) != 0)
    {
      if (dword_1EB4C4FF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(_DWORD *)(v7 + 2280);
      int v9 = objc_msgSend(*(id *)(v7 + 2272), "referencedObject", v11, v12);
      LODWORD(v10) = v8;
      [v9 setMinimumFrameRate:v10];
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 2496));
  }
}

- (float)depthMaxFrameRate
{
  return self->_depthMaxFrameRate;
}

- (int)shallowDepthOfFieldStagePreviewStatus
{
  uint64_t v2 = self;
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  LODWORD(v2) = v2->_sdofStagePreviewStatus;
  os_unfair_lock_unlock(p_sdofLock);
  return (int)v2;
}

- (void)updateSDOFBackgroundShiftSum:(float)a3 invalidShiftRatio:(float)a4 closeCanonicalDisparityAverage:(float)a5 faceCanonicalDisparityAverages:(id)a6 erodedForegroundRatio:(float)a7 foregroundRatio:(float)a8 occluded:(BOOL)a9 faces:(id)a10 personSegmentationRatio:(float)a11
{
  BOOL v13 = a9;
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  *(float *)&double v22 = a3;
  *(float *)&double v23 = a4;
  *(float *)&double v24 = a5;
  *(float *)&double v25 = a7;
  *(float *)&double v26 = a8;
  *(float *)&double v27 = a11;
  [(BWPortraitSceneMonitor *)self->_portraitSceneMonitor setSDOFBackgroundShiftSum:a6 invalidShiftRatio:v13 closeCanonicalDisparityAverage:a10 faceCanonicalDisparityAverages:v22 erodedForegroundRatio:v23 foregroundRatio:v24 occluded:v25 faces:v26 personSegmentationRatio:v27];
  os_unfair_lock_unlock(p_sdofLock);
}

- (void)updatePortraitSceneMonitoringRequiresStageThresholds:(BOOL)a3
{
  BOOL v3 = a3;
  p_sdofLocuint64_t k = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  int v6 = [(BWPortraitSceneMonitor *)self->_portraitSceneMonitor portraitSceneMonitoringRequiresStageThresholds];
  [(BWPortraitSceneMonitor *)self->_portraitSceneMonitor setPortraitSceneMonitoringRequiresStageThresholds:v3];
  os_unfair_lock_unlock(p_sdofLock);
  if (v6 != v3)
  {
    -[BWFigVideoCaptureDevice _postSDOFEffectStatus:SDOFStagePreviewStatus:]((uint64_t)self, self->_sdofEffectStatus, self->_sdofStagePreviewStatus);
    -[BWFigVideoCaptureDevice _updateStreamingForegroundSegmentationNetworkUsingStage:](self, v3);
  }
}

- (void)updateSmartCameraStreamPropertiesWithInferenceResult:(id)a3
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (LOBYTE(self->_zoomFactorChangedDelegate) && [a3 inferenceType] == 101)
  {
    uint64_t v5 = [a3 inferences];
    os_unfair_lock_lock(&self->_frameStatisticsLock);

    *(void *)&self->_visionDataMaxFrameRate = a3;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    if ([(BWFigVideoCaptureDevice *)self isPropertyObserved:@"SceneClassificationConfidences"])
    {
      int v8 = @"NewPropertyValue";
      v9[0] = v5;
      -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", @"SceneClassificationConfidencesChanged", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1]);
    }
    int v6 = [(BWFigCaptureStream *)[(BWFigVideoCaptureStream *)self->_captureStream stream] supportedProperties];
    uint64_t v7 = *MEMORY[0x1E4F54B60];
    if ([(NSDictionary *)v6 objectForKeyedSubscript:*MEMORY[0x1E4F54B60]]) {
      [(BWFigCaptureStream *)[(BWFigVideoCaptureStream *)self->_captureStream stream] setProperty:v7 value:v5];
    }
  }
  else
  {
    FigDebugAssert3();
  }
}

- (id)sceneClassificationConfidences
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  if (LOBYTE(self->_zoomFactorChangedDelegate)) {
    id v4 = (id)[*(id *)&self->_visionDataMaxFrameRate inferences];
  }
  else {
    id v4 = 0;
  }
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v4;
}

- (NSString)smartCameraStatus
{
  __int16 v2 = -[BWFigVideoCaptureDevice _evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:resultOut:]((uint64_t)self, 0, 0);
  BOOL v3 = (void *)[MEMORY[0x1E4F28E78] string];
  $06E035DAA80D7DA92D7AC3530BEA5F2A result = 0;
  if (v2)
  {
    [v3 appendFormat:@"PAM: "];
    if ((v2 & 0x100) != 0) {
      [v3 appendString:@"Face"];
    }
    return (NSString *)v3;
  }
  return result;
}

- (unint64_t)_evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:(void *)a3 resultOut:
{
  float v3 = 0.0;
  if (a1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 3145);
    if (*(unsigned char *)(a1 + 3145))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1948));
      if (a3) {
        *a3 = *(id *)(a1 + 3184);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1948));
      unsigned int v5 = *(unsigned __int8 *)(a1 + 3146);
      if (*(unsigned char *)(a1 + 3146))
      {
        uint64_t v8 = -[BWFigVideoCaptureDevice _captureStreamForFaceDetectionWithMasterStreamSwitchoverSuspended:](a1, a2);
        uint64_t v9 = *(void *)(a1 + 1288);
        if (v9) {
          double v10 = *(void **)(a1 + 1288);
        }
        else {
          double v10 = (void *)v8;
        }
        if (v9 && (a2 & 1) == 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1304));
          double v10 = *(void **)(a1 + 1288);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1304));
        }
        objc_msgSend((id)objc_msgSend(v10, "faceDetector"), "secondsSinceLastFaceDetected");
        unsigned int v5 = v3 >= 0.0 && v3 < *(float *)(a1 + 3148);
      }
      else
      {
        float v3 = 0.0;
      }
      uint64_t v11 = v5;
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    unsigned int v5 = 0;
    uint64_t v11 = 0;
  }
  return ((unint64_t)v5 << 8) | ((unint64_t)LODWORD(v3) << 32) | v11;
}

- (NSString)lastStillCaptureStatus
{
  return (NSString *)&stru_1EFA403E0;
}

- (NSString)lastStillScene
{
  return (NSString *)@"None";
}

- (NSString)lastScene
{
  return (NSString *)@"None";
}

- (NSString)orientation
{
  p_smartCameraFaceSceneRecentlyDetectedThreshold = &self->_smartCameraFaceSceneRecentlyDetectedThreshold;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_smartCameraFaceSceneRecentlyDetectedThreshold);
  int v4 = *(_DWORD *)&self->_smartCameraEnabled;
  if (v4)
  {
    int v5 = FigCaptureRotationDegreesAndMirroringFromExifOrientation(v4, 0);
    unsigned int v6 = FigCaptureOrientationFromRotationDegrees(v5, self->_position == 2, [(BWFigVideoCaptureDevice *)self isExternalVariant], 0);
    uint64_t v7 = FigCaptureVideoOrientationToString(v6);
  }
  else
  {
    uint64_t v7 = @"Unknown";
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_smartCameraFaceSceneRecentlyDetectedThreshold);
  return &v7->isa;
}

- (void)semanticStyleSceneTypeDidChange:(int)a3
{
  p_frameStatisticsLocuint64_t k = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  LODWORD(self->_zoomFactorChangedDelegatePortType) = a3;
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (uint64_t)_captureStreamForFaceDetectionWithMasterStreamSwitchoverSuspended:(uint64_t)a1
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 1288);
  if (v3) {
    uint64_t v4 = *(void *)(a1 + 1288);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 496);
  }
  if (v3 && (a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1304));
    uint64_t v4 = *(void *)(a1 + 1288);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1304));
  }
  return v4;
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)zeroShutterLagEarliestAllowedPTS
{
  *retstr = self[134];
  return self;
}

- (void)zeroShutterLagCancelWaitingForTimeMachinesForSettingsID:(int64_t)a3
{
  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    p_skippedFramesCountForStillImageCaptureRetrdouble y = (os_unfair_lock_s *)&self->_skippedFramesCountForStillImageCaptureRetry;
    os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
    self->_ubZeroShutterLagWaitingForTimeMachinesLastCancelledSettingsID = a3;
    os_unfair_lock_unlock(p_skippedFramesCountForStillImageCaptureRetry);
    ubZeroShutterLagMetadataTimeMachine = self->_ubZeroShutterLagMetadataTimeMachine;
    [(BWMetadataTimeMachine *)ubZeroShutterLagMetadataTimeMachine reset];
  }
}

- (float)timeLapseCaptureRate
{
  uint64_t v6 = 0;
  uint64_t v7 = (float *)&v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  CMTime v5[2] = __47__BWFigVideoCaptureDevice_timeLapseCaptureRate__block_invoke;
  v5[3] = &unk_1E5C246B8;
  _OWORD v5[4] = self;
  void v5[5] = &v6;
  dispatch_sync(focusAndExposureUpdateQueue, v5);
  float v3 = v7[6];
  _Block_object_dispose(&v6, 8);
  return v3;
}

float __47__BWFigVideoCaptureDevice_timeLapseCaptureRate__block_invoke(uint64_t a1)
{
  float result = *(float *)(*(void *)(a1 + 32) + 2116);
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (BOOL)momentCaptureVideoRecordingSupported
{
  return BYTE2(self->_previewShiftInSensorSpace.x);
}

- (uint64_t)_resetAnalyticsData
{
  if (result)
  {
    uint64_t v1 = result;
    float result = mach_absolute_time();
    *(void *)(v1 + 288) = result;
    *(void *)(v1 + 296) = 0;
    *(void *)(v1 + 256) = result;
    *(void *)(v1 + 264) = 0;
    *(void *)(v1 + 360) = result;
    *(void *)(v1 + 368) = 0;
    *(void *)(v1 + 192) = result;
    *(void *)(v1 + 200) = 0;
    *(void *)(v1 + 3328) = result;
    *(_DWORD *)(v1 + 304) = -1082130432;
    *(unsigned char *)(v1 + 308) = 0;
    *(_DWORD *)(v1 + 272) = -1082130432;
    *(unsigned char *)(v1 + 276) = 0;
    *(unsigned char *)(v1 + 376) = 0;
  }
  return result;
}

- (int)systemPressureLevel
{
  __int16 v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = *(_DWORD *)(&v2->_adaptiveOverscanEnabled + 3);
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (unsigned)systemPressureFactors
{
  __int16 v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = v2->_systemPressureLevel;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return v2;
}

- (int)peakPowerSystemPressureLevel
{
  __int16 v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = HIDWORD(v2->_flickerAvoidanceMonitor);
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (BOOL)needsToRelieveSystemPressure
{
  __int16 v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LOBYTE(v2) = v2->_systemPressureStatusLock._os_unfair_lock_opaque;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (char)v2;
}

- (void)setRestorationOfForcedOffOverCaptureActiveSlaveStreamEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  if (self->_needsToRelieveSystemPressure != v3)
  {
    self->_needsToRelieveSystemPressure = v3;
    BOOL v6 = !BYTE1(self->_thermalSystemPressureLevel) || !v3;
    if (!v6 && !LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque)) {
      BYTE1(self->_thermalSystemPressureLevel) = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (BOOL)restorationOfForcedOffOverCaptureActiveSlaveStreamEnabled
{
  __int16 v2 = self;
  p_videoStabilizationModeUsesReducedOverscauint64_t n = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LOBYTE(v2) = v2->_needsToRelieveSystemPressure;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (char)v2;
}

- (void)setMaxDepthFrameRateChangedDelegate:(id)a3
{
  *(void *)&self->_temporalNoiseReductionEnabled = 0;
  if (a3) {
    *(void *)&self->_temporalNoiseReductionEnabled = [[FigWeakReference alloc] initWithReferencedObject:a3];
  }
}

- (int)overheadCameraMode
{
  return self->_temporalNoiseReductionBand0StrengthModulation;
}

- (void)setOverheadCameraMode:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  self->_temporalNoiseReductionBand0StrengthModulatiouint64_t n = a3;
  id v4 = [(FigWeakReference *)self->_maxDepthFrameRateChangedDelegate referencedObject];
  [v4 didChangeOverheadCameraMode:v3];
}

- (void)setOverheadCameraModeChangeDelegate:(id)a3
{
  self->_maxDepthFrameRateChangedDelegate = 0;
  if (a3) {
    self->_maxDepthFrameRateChangedDelegate = [[FigWeakReference alloc] initWithReferencedObject:a3];
  }
}

- (BOOL)isDeskCamActive
{
  return self->_deskCamActive;
}

- (void)setDeskCamActive:(BOOL)a3
{
  if (self->_deskCamActive != a3)
  {
    BOOL v3 = a3;
    uint64_t v5 = mach_absolute_time();
    if (v3)
    {
      if (!self->_deskCamActive)
      {
        int64_t v6 = v5;
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        self->_deskCamStartTime = v6;
      }
    }
    else if (self->_deskCamActive)
    {
      if (dword_1EB4C4FF0)
      {
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[BWFigVideoCaptureDevice _reportDeskViewStreamingSessionCoreAnalyticsData]((uint64_t)self);
    }
    self->_deskCamActive = v3;
    -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
  }
}

- (void)setUltraWideActive:(BOOL)a3
{
  if (self->_ultraWideActive != a3)
  {
    if (self->_ultraWideActive || !a3)
    {
      if (self->_ultraWideActive && !a3)
      {
        if (dword_1EB4C4FF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        -[BWFigVideoCaptureDevice _reportStreamingSessionCoreAnalyticsData]((uint64_t)self);
      }
    }
    else
    {
      if (dword_1EB4C4FF0)
      {
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[BWFigVideoCaptureDevice _resetAnalyticsData]((uint64_t)self);
    }
    self->_ultraWideActive = a3;
  }
}

- (BWFigVideoCaptureDeviceSubjectSelectionDelegate)subjectSelectionDelegate
{
  return (BWFigVideoCaptureDeviceSubjectSelectionDelegate *)[*(id *)&self->_overheadCameraMode referencedObject];
}

- (void)setSubjectSelectionDelegate:(id)a3
{
  *(void *)&self->_overheadCameraMode = 0;
  if (a3) {
    *(void *)&self->_overheadCameraMode = [[FigWeakReference alloc] initWithReferencedObject:a3];
  }
}

- (CGRect)centerStageRectOfInterest
{
  overheadCameraModeChangedDelegate = self->_overheadCameraModeChangedDelegate;
  subjectSelectionDelegate = self->_subjectSelectionDelegate;
  double x = self->_centerStageRectOfInterest.origin.x;
  double y = self->_centerStageRectOfInterest.origin.y;
  result.size.CGFloat height = y;
  result.size.CGFloat width = x;
  result.origin.double y = *(double *)&subjectSelectionDelegate;
  result.origin.double x = *(double *)&overheadCameraModeChangedDelegate;
  return result;
}

- (void)setCenterStageRectOfInterest:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(CGRect *)&self->_overheadCameraModeChangedDelegate = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "didChangeCenterStageRectOfInterest:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v9 = [(NSArray *)captureStreams countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(captureStreams);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v12++), "setCenterStageRectOfInterest:", x, y, width, height);
      }
      while (v10 != v12);
      uint64_t v10 = [(NSArray *)captureStreams countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v10);
  }
}

- (int)centerStageFramingMode
{
  return HIDWORD(self->_centerStageRectOfInterest.size.height);
}

- (void)setCenterStageFramingMode:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HIDWORD(self->_centerStageRectOfInterest.size.height) = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_overheadCameraMode, "referencedObject"), "didChangeCenterStageFramingMode:", *(void *)&a3);
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "didChangeCenterStageFramingMode:", v3);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  captureStreams = self->_captureStreams;
  uint64_t v6 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(captureStreams);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * v9++) setCenterStageFramingMode:v3];
      }
      while (v7 != v9);
      uint64_t v7 = [(NSArray *)captureStreams countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

- (BOOL)centerStageMetadataDeliveryEnabled
{
  return (BOOL)self->_centerStageDelegate;
}

- (void)setCenterStageMetadataDeliveryEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  LOBYTE(self->_centerStageDelegate) = a3;
  id v4 = (void *)[*(id *)&self->_centerStageRectOfInterest.size.width referencedObject];
  [v4 didChangeCenterStageMetadataDeliveryEnabled:v3];
}

- (BWFigVideoCaptureDeviceCenterStageDelegate)centerStageDelegate
{
  return (BWFigVideoCaptureDeviceCenterStageDelegate *)[*(id *)&self->_centerStageRectOfInterest.size.width referencedObject];
}

- (void)setCenterStageDelegate:(id)a3
{
  self->_centerStageRectOfInterest.size.double width = 0.0;
  if (a3)
  {
    uint64_t v5 = [[FigWeakReference alloc] initWithReferencedObject:a3];
    *(void *)&self->_centerStageRectOfInterest.size.double width = v5;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __50__BWFigVideoCaptureDevice_setCenterStageDelegate___block_invoke;
    v6[3] = &unk_1E5C24430;
    v6[4] = self;
    objc_msgSend(-[FigWeakReference referencedObject](v5, "referencedObject"), "setRegionOfInterestForCameraControlsChangedHandler:", v6);
  }
}

uint64_t __50__BWFigVideoCaptureDevice_setCenterStageDelegate___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = [*(id *)(v2 + 3992) referencedObject];
  unint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 4080) referencedObject];
  return fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(v2, v3, v4);
}

- (void)setCenterStageFieldOfViewRestrictedToWide:(BOOL)a3
{
  BOOL v3 = a3;
  LOBYTE(self->_centerStageRectOfInterest.size.height) = a3;
  unint64_t v4 = (void *)[*(id *)&self->_centerStageRectOfInterest.size.width referencedObject];
  [v4 restrictCenterStageFieldOfViewToWide:v3];
}

- (BOOL)centerStageFieldOfViewRestrictedToWide
{
  return LOBYTE(self->_centerStageRectOfInterest.size.height);
}

- (BOOL)isCenterStageActive
{
  return BYTE1(self->_centerStageDelegate);
}

- (void)setCenterStageActive:(BOOL)a3
{
  BYTE1(self->_centerStageDelegate) = a3;
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
}

- (BWFigVideoCaptureDeviceManualCinematicFramingDelegate)manualCinematicFramingDelegate
{
  return (BWFigVideoCaptureDeviceManualCinematicFramingDelegate *)[(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
}

- (void)setManualCinematicFramingDelegate:(id)a3
{
  self->_portraitEffectPropertiesDelegate = 0;
  if (a3)
  {
    uint64_t v5 = [[FigWeakReference alloc] initWithReferencedObject:a3];
    self->_portraitEffectPropertiesDelegate = v5;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __61__BWFigVideoCaptureDevice_setManualCinematicFramingDelegate___block_invoke;
    v6[3] = &unk_1E5C24430;
    v6[4] = self;
    objc_msgSend(-[FigWeakReference referencedObject](v5, "referencedObject"), "setRegionOfInterestForCameraControlsChangedHandler:", v6);
  }
}

uint64_t __61__BWFigVideoCaptureDevice_setManualCinematicFramingDelegate___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = [*(id *)(v2 + 3992) referencedObject];
  unint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 4080) referencedObject];
  return fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(v2, v3, v4);
}

- (void)startPanningAtPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v5 = [(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
  objc_msgSend(v5, "startPanningAtPoint:", x, y);
}

- (void)panWithTranslation:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v5 = [(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
  objc_msgSend(v5, "panWithTranslation:", x, y);
}

- (void)performOneShotFraming
{
  id v2 = [(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
  [v2 performOneShotFraming];
}

- (void)resetFraming
{
  id v2 = [(FigWeakReference *)self->_portraitEffectPropertiesDelegate referencedObject];
  [v2 resetFraming];
}

- (BOOL)isManualCinematicFramingActive
{
  return self->_manualCinematicFramingEnabled;
}

- (void)setManualCinematicFramingActive:(BOOL)a3
{
  self->_manualCinematicFramingEnabled = a3;
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
}

- (void)setSmartStyleAttachedMediaTimeMachineDelegate:(id)a3
{
  if (a3) {
    id v5 = [[FigWeakReference alloc] initWithReferencedObject:a3];
  }
  else {
    id v5 = 0;
  }
  *(void *)&self->_minimumTimeBetweenStationaryChecks = v5;
}

- (BWAttachedMediaTimeMachineDelegate)smartStyleAttachedMediaTimeMachineDelegate
{
  return (BWAttachedMediaTimeMachineDelegate *)[*(id *)&self->_minimumTimeBetweenStationaryChecks referencedObject];
}

void __80__BWFigVideoCaptureDevice__sendInitialValuesToPortraitEffectPropertiesDelegate___block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)[*(id *)(a1 + 32) referencedObject];
  -[BWFigVideoCaptureDevice _postNotificationWithName:payloadNewPropertyValue:](v3, @"BWFigVideoCaptureDeviceReactionsInProgressChangedNotification", a2);
}

- (float)backgroundBlurAperture
{
  return self->_backgroundBlurAperture;
}

- (float)studioLightingIntensity
{
  return self->_studioLightingIntensity;
}

- (BOOL)gesturesEnabled
{
  return self->_gesturesEnabled;
}

- (void)performReactionEffect:(id)a3
{
  if (self)
  {
    unint64_t v4 = (BWFigVideoCaptureDevice **)self;
    id v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v5)
    {
      self = (BWFigVideoCaptureDevice *)[v5 referencedObject];
    }
    else if ([v4 isBravoVariant])
    {
      self = (BWFigVideoCaptureDevice *)[v4 masterCaptureStream];
    }
    else
    {
      self = v4[62];
    }
  }
  [(BWFigVideoCaptureDevice *)self performReactionEffect:a3];
}

- (void)setBackgroundReplacementPixelBuffer:(__CVBuffer *)a3
{
  backgroundReplacementPixelBuffer = self->_backgroundReplacementPixelBuffer;
  if (!self->_backgroundReplacementEnabled || a3 == 0 || backgroundReplacementPixelBuffer == 0)
  {
    self->_backgroundReplacementPixelBuffer = a3;
    if (!a3)
    {
      if (!backgroundReplacementPixelBuffer) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    self->_backgroundReplacementPixelBufferChanged = 1;
    self->_backgroundReplacementPixelBuffer = a3;
  }
  CFRetain(a3);
  if (backgroundReplacementPixelBuffer) {
LABEL_11:
  }
    CFRelease(backgroundReplacementPixelBuffer);
LABEL_12:
  uint64_t v8 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v8)
  {
    captureStreauint64_t m = (BWFigVideoCaptureStream *)[v8 referencedObject];
  }
  else if ([(BWFigVideoCaptureDevice *)self isBravoVariant])
  {
    captureStreauint64_t m = [(BWFigVideoCaptureDevice *)self masterCaptureStream];
  }
  else
  {
    captureStreauint64_t m = self->_captureStream;
  }
  [(BWFigVideoCaptureStream *)captureStream didChangeBackgroundReplacementPixelBuffer:a3];
}

- (__CVBuffer)backgroundReplacementPixelBuffer
{
  return self->_backgroundReplacementPixelBuffer;
}

- (BOOL)frameSkippingWhenNotRecordingEnabled
{
  return self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch;
}

- (int)targetFrameRateWhenNotRecording
{
  return HIDWORD(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch);
}

- (OpaqueFigSampleBufferProcessor)_autofocusProcessor
{
  return self->_autofocusProcessor;
}

- (id)_stillImageDispatchQueue
{
  return *(id *)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
}

- (id)_stillImageCaptureStateMachine
{
  return *(id *)&self->_retryCaptureStillImageNow;
}

- (NSDictionary)moduleInfoByPortType
{
  return self->_moduleInfoByPortType;
}

- (BOOL)cinematicFramingSupported
{
  return self->_cinematicFramingSupported;
}

- (unsigned)cinematicFramingControlMode
{
  return self->_cinematicFramingControlMode;
}

- (BOOL)backgroundBlurSupported
{
  return self->_backgroundBlurSupported;
}

- (BOOL)studioLightingSupported
{
  return self->_studioLightingSupported;
}

- (BOOL)reactionEffectsSupported
{
  return self->_reactionEffectsSupported;
}

- (BOOL)backgroundReplacementSupported
{
  return self->_backgroundReplacementSupported;
}

- (BOOL)faceDrivenAEAFEnabledByDefault
{
  return self->_faceDrivenAEAFEnabledByDefault;
}

- (BOOL)isPhotoFormat
{
  return self->_photoFormat;
}

- (float)cinematicVideoAverageRenderingTime
{
  return *(float *)&self->_defaultContinuousAutoFocusWindowSize.width;
}

- (void)setCinematicVideoAverageRenderingTime:(float)a3
{
  *(float *)&self->_defaultContinuousAutoFocusWindowSize.double width = a3;
}

- (float)cinematicVideoWorstCaseRenderingTime
{
  return *((float *)&self->_defaultContinuousAutoFocusWindowSize.width + 1);
}

- (void)setCinematicVideoWorstCaseRenderingTime:(float)a3
{
  *((float *)&self->_defaultContinuousAutoFocusWindowSize.width + 1) = a3;
}

- (BOOL)temporalNoiseReductionEnabled
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.timescale;
}

- (BOOL)temporalNoiseReductionBand0Disabled
{
  return BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (BOOL)temporalNoiseReductionRawEnabled
{
  return BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (BOOL)temporalNoiseReductionStrengthHighEnabled
{
  return HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (BOOL)disableTemporalNoiseReductionWhenStopping
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.flags;
}

- (void)setDisableTemporalNoiseReductionWhenStopping:(BOOL)a3
{
  LOBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.flags) = a3;
}

- (BOOL)captureInitiatedOnce
{
  return (BOOL)self->_thermalMonitorQueue;
}

- (void)setCaptureInitiatedOnce:(BOOL)a3
{
  LOBYTE(self->_thermalMonitorQueue) = a3;
}

- (int)stillImageFusionScheme
{
  return *(_DWORD *)&self->_stillImageCaptureEnabled;
}

- (NSDictionary)stillImageSupportedHighResolutionFlavorsByPortType
{
  return *(NSDictionary **)&self->_stillImageFusionScheme;
}

- (BOOL)isStillImageISPChromaNoiseReductionEnabled
{
  return BYTE4(self->_stillImageDispatchQueue);
}

- (void)setStillImageISPChromaNoiseReductionEnabled:(BOOL)a3
{
  BYTE4(self->_stillImageDispatchQueue) = a3;
}

- (BOOL)quadraHighResStillImageCaptureEnabled
{
  return (BOOL)self->_stillImageSupportedHighResolutionFlavorsByPortType;
}

- (void)setQuadraHighResStillImageCaptureEnabled:(BOOL)a3
{
  LOBYTE(self->_stillImageSupportedHighResolutionFlavorsByPortType) = a3;
}

- (BOOL)stillImageGNRHDREnabled
{
  return self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount;
}

- (void)setStillImageGNRHDREnabled:(BOOL)a3
{
  LOBYTE(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount) = a3;
}

- (BOOL)irisFrameHarvestingEnabled
{
  return BYTE1(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount);
}

- (BOOL)isStillImageISPMultiBandNoiseReductionEnabled
{
  return (BOOL)self->_mostRecentSmartCameraResult;
}

- (BOOL)stillImageFocusPixelDataCaptureWithDepthEnabled
{
  return BYTE2(self->_mostRecentSmartCameraResult);
}

- (BOOL)stillImageSashimiRawCaptureWithDepthEnabled
{
  return BYTE3(self->_mostRecentSmartCameraResult);
}

- (int)numberOfActiveTimeMachines
{
  return self->_firstValidFramePTS.flags;
}

- (BOOL)lumaHistogramsEnabled
{
  return BYTE1(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.height);
}

- (BOOL)focusPixelsEnabled
{
  return BYTE1(self->_mostRecentSmartCameraResult);
}

- (CGSize)defaultAutoFocusTapWindowSize
{
  double v2 = *(double *)&self->_cinematicVideoEnabled;
  cinematicVideoFocusRequest = self->_cinematicVideoFocusRequest;
  result.double height = *(double *)&cinematicVideoFocusRequest;
  result.double width = v2;
  return result;
}

- (void)setDefaultAutoFocusTapWindowSize:(CGSize)a3
{
  *(CGSize *)&self->_cinematicVideoEnabled = a3;
}

- (CGSize)defaultContinuousAutoFocusWindowSize
{
  double width = self->_defaultAutoFocusTapWindowSize.width;
  double height = self->_defaultAutoFocusTapWindowSize.height;
  result.double height = height;
  result.double width = width;
  return result;
}

- (void)setDefaultContinuousAutoFocusWindowSize:(CGSize)a3
{
  self->_defaultAutoFocusTapWindowSize = a3;
}

- (int)maxOverscanVideoStabilizationMethod
{
  return LODWORD(self->_defaultContinuousAutoFocusWindowSize.height);
}

- (BOOL)videoStabilizationModeUsesReducedOverscan
{
  return LOBYTE(self->_cinematicVideoAverageRenderingTime);
}

- (void)setVideoStabilizationModeUsesReducedOverscan:(BOOL)a3
{
  LOBYTE(self->_cinematicVideoAverageRenderingTime) = a3;
}

- (float)zoomPIPMinimumUIZoomFactor
{
  return *(float *)&self->_depthFormatDimensions.width;
}

- (float)uiBaseZoomFactor
{
  return *(float *)&self->_depthFormatDimensions.height;
}

- (BOOL)zoomPIPSuspended
{
  return self->_depthPixelFormat;
}

- (BOOL)previewVideoDepthNodeUnprepared
{
  return LOBYTE(self->_zoomPIPMinimumUIZoomFactor);
}

- (NSDictionary)exifFocalLengthsByZoomFactor
{
  return (NSDictionary *)self->_deviceOrientationMonitor;
}

- (BWAdaptiveBracketingController)adaptiveUnifiedBracketingController
{
  return self->_ubAdaptiveBracketingController;
}

- (BOOL)redSaturationMitigationEnabled
{
  return self->_redSaturationMitigationEnabled;
}

- (BOOL)disparityGenerationFromReferenceFramesSupported
{
  return self->_disparityGenerationFromReferenceFramesSupported;
}

- (BWFigVideoCaptureSynchronizedStreamsGroup)synchronizedStreamsGroup
{
  return self->_synchronizedStreamsGroup;
}

- (BOOL)wideCaptureStreamAsStatsMasterPreferred
{
  return self->_wideCaptureStreamAsStatsMasterPreferred;
}

- (int)timeOfFlightCameraType
{
  return self->_systemPressureFactors;
}

- (BOOL)timeOfFlightAFEnabled
{
  return self->_allowSystemPressureToForceOffOverCaptureActiveSlaveStream;
}

- (BOOL)midFrameSynchronizationEnabled
{
  return self->_midFrameSynchronizationEnabled;
}

- ($2825F4736939C4A6D3AD43837233062D)depthFormatDimensions
{
  return *($2825F4736939C4A6D3AD43837233062D *)((char *)&self->_centerStageDelegate + 4);
}

- (unsigned)depthPixelFormat
{
  return self->_centerStageFramingMode;
}

- (BOOL)depthFilteringEnabled
{
  return self->_centerStageMetadataDeliveryEnabled;
}

- (BOOL)allocateResourcesCompatibleWithDepthDataDelivery
{
  return self->_allocateResourcesCompatibleWithDepthDataDelivery;
}

- (BOOL)wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled
{
  return self->_wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled;
}

- (BOOL)portraitSceneMonitorUsesDisparityStatistics
{
  return self->_portraitSceneMonitorUsesDisparityStatistics;
}

- (BOOL)stereoFusionEnabled
{
  return self->_stereoFusionEnabled;
}

- (BOOL)bravoConstituentPhotoDeliveryEnabled
{
  return self->_bravoConstituentPhotoDeliveryEnabled;
}

- (float)visionDataMaxFrameRate
{
  return *(float *)&self->_currentSemanticStyleSceneType;
}

- (void)setVisionDataMaxFrameRate:(float)a3
{
  *(float *)&self->_currentSemanticStyleSceneType = a3;
}

- (void)setPreviewTimeMachineProcessor:(id)a3
{
  self->_ptsOfLastFrameForStationaryCheck.CMTimeEpoch epoch = (int64_t)a3;
}

- (int)zeroShutterLagTimeMachineBufferCapacity
{
  return HIDWORD(self->_currentStillSmartCameraResult);
}

- (float)overCapturePercentage
{
  return *(float *)(&self->_lumaHistogramsEnabled + 3);
}

- (BOOL)allocateResourcesCompatibleWithOverCapture
{
  return (BOOL)self->_memoryPool;
}

- (BOOL)overCaptureSuperWideMacroActive
{
  return LOBYTE(self->_previewShiftInSensorSpace.x);
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)mostRecentPTS
{
  *($95D729B680665BEAEFA1D6FCA8238556 *)retstr = *($95D729B680665BEAEFA1D6FCA8238556 *)((char *)self + 1256);
  return self;
}

- (BOOL)fullBinSIFROnSecondaryCameraAllowed
{
  return *(&self->_manualCinematicFramingEnabled + 3);
}

- (unsigned)streamingSessionAnalyticsPixelFormat
{
  return *(_DWORD *)&self->_captureInitiatedOnce;
}

- ($2825F4736939C4A6D3AD43837233062D)streamingSessionAnalyticsVideoDimensions
{
  return *($2825F4736939C4A6D3AD43837233062D *)(&self->_captureInitiatedOnce + 4);
}

- (BOOL)streamingSessionAnalyticsHighlightRecoveryEnabled
{
  return BYTE4(self->_exifFocalLengthsByZoomFactor);
}

- (BOOL)streamingSessionAnalyticsClientIsVOIP
{
  return BYTE5(self->_exifFocalLengthsByZoomFactor);
}

- (BOOL)streamingSessionAnalyticsMixWithOthersEnabled
{
  return BYTE2(self->_firstValidFramePTS.timescale);
}

- (BOOL)trueVideoCaptureEnabled
{
  return self->_streamingSessionAnalyticsVideoDimensions.width;
}

- (BOOL)rebuildingGraphForTrueVideoTransition
{
  return BYTE1(self->_streamingSessionAnalyticsVideoDimensions.width);
}

- (BOOL)stoppingForTrueVideoTransition
{
  return BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width);
}

- (void)setStoppingForTrueVideoTransition:(BOOL)a3
{
  BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (float)durationAlreadyWaitedForRecordingStop
{
  return *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height;
}

- (void)setDurationAlreadyWaitedForRecordingStop:(float)a3
{
  *(float *)&self->_streamingSessionAnalyticsVideoDimensions.double height = a3;
}

- (void)setDepthDataBaseRotation:(int)a3
{
  LODWORD(self->_firstValidFramePTS.epoch) = a3;
}

- (BOOL)isUltraWideStreamActive
{
  return self->_ultraWideActive;
}

@end