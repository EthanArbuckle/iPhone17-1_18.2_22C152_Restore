uint64_t getSTActivityAttributionClass()
{
  uint64_t v0;
  void v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__33;
  v7 = __Block_byref_object_dispose__33;
  v0 = getSTActivityAttributionClass_softClass;
  v8 = getSTActivityAttributionClass_softClass;
  if (!getSTActivityAttributionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSTActivityAttributionClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSTActivityAttributionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTMediaStatusDomainPublisherClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__33;
  v7 = __Block_byref_object_dispose__33;
  uint64_t v0 = getSTMediaStatusDomainPublisherClass_softClass;
  uint64_t v8 = getSTMediaStatusDomainPublisherClass_softClass;
  if (!getSTMediaStatusDomainPublisherClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSTMediaStatusDomainPublisherClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSTMediaStatusDomainPublisherClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNDetectFaceLandmarksRequestClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__12;
  v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNDetectFaceLandmarksRequestClass_softClass;
  uint64_t v8 = getVNDetectFaceLandmarksRequestClass_softClass;
  if (!getVNDetectFaceLandmarksRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectFaceLandmarksRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNDetectFaceLandmarksRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNDetectFaceRectanglesRequestClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__12;
  v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNDetectFaceRectanglesRequestClass_softClass;
  uint64_t v8 = getVNDetectFaceRectanglesRequestClass_softClass;
  if (!getVNDetectFaceRectanglesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectFaceRectanglesRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNDetectFaceRectanglesRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNProcessingDeviceClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__12;
  v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNProcessingDeviceClass_softClass;
  uint64_t v8 = getVNProcessingDeviceClass_softClass;
  if (!getVNProcessingDeviceClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNProcessingDeviceClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNProcessingDeviceClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNRecognizeFoodAndDrinkRequestClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__12;
  v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNRecognizeFoodAndDrinkRequestClass_softClass;
  uint64_t v8 = getVNRecognizeFoodAndDrinkRequestClass_softClass;
  if (!getVNRecognizeFoodAndDrinkRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNRecognizeFoodAndDrinkRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNRecognizeFoodAndDrinkRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNSequenceRequestHandlerClass()
{
  uint64_t v3 = 0;
  v4 = &v3;
  uint64_t v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__12;
  v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNSequenceRequestHandlerClass_softClass;
  uint64_t v8 = getVNSequenceRequestHandlerClass_softClass;
  if (!getVNSequenceRequestHandlerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNSequenceRequestHandlerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNSequenceRequestHandlerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A588A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t bp_plistObjCompare2(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return bp_plistObjCompare(a1, __rev16(*a2), __rev16(*a3));
}

BWInferenceScheduler *captureSession_inferenceScheduler()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(BWInferenceScheduler **)(DerivedStorage + 688);
  if (!result)
  {
    result = objc_alloc_init(BWInferenceScheduler);
    *(void *)(DerivedStorage + 688) = result;
  }
  return result;
}

void __captureSource_postNotificationWithPayload_block_invoke(void *a1)
{
  v2 = (void *)MEMORY[0x1A6272C70]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t configureDevice(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return result;
  }
  uint64_t v5 = result;
  v6 = (BOOL *)(result + 18160);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F535A0]);
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53558]);
  CFNumberRef v153 = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F535C0]);
  CFDictionaryRef theDict = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53568]);
  CFDictionaryRef v150 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53560]);
  CFBooleanRef BOOLean = (const __CFBoolean *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53578]);
  CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F535A8]);
  *(void *)(v5 + 18112) = 0x100000001;
  FigCFDictionaryGetIntIfPresent();
  FigCFDictionaryGetIntIfPresent();
  if (v9) {
    BOOL v10 = CFBooleanGetValue(v9) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  BOOL *v6 = v10;
  v11 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53570]);
  uint64_t result = [v11 isEqualToString:@"AEOnly"];
  if ((result & 1) != 0 || (uint64_t result = [v11 isEqualToString:@"AEAndAF"], result)) {
    *(unsigned char *)(v5 + 7473) = 1;
  }
  if (!v8) {
    return result;
  }
  uint64_t result = CFArrayGetCount(v8);
  if (result < 1) {
    return result;
  }
  uint64_t v12 = result;
  CFIndex v13 = 0;
  v14 = (const void *)*MEMORY[0x1E4F52E00];
  v15 = (const void *)*MEMORY[0x1E4F52DE0];
  CFTypeRef v139 = (CFTypeRef)*MEMORY[0x1E4F52E10];
  CFArrayRef v140 = v8;
  uint64_t v144 = result;
  uint64_t v145 = *MEMORY[0x1E4F52C78];
  uint64_t v147 = *MEMORY[0x1E4F52D28];
  CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F52DF8];
  v143 = (const void *)*MEMORY[0x1E4F52DE0];
  CFTypeRef v146 = (CFTypeRef)*MEMORY[0x1E4F52E00];
  CFDictionaryRef v141 = Value;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, v13);
    uint64_t result = CFEqual(ValueAtIndex, v14);
    if (result) {
      goto LABEL_246;
    }
    uint64_t result = CFEqual(ValueAtIndex, v15);
    if (result) {
      goto LABEL_246;
    }
    CameraParametersForPortType = (_DWORD *)af_sbp_getCameraParametersForPortType();
    if (Value) {
      CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(Value, ValueAtIndex);
    }
    else {
      CFDictionaryRef v18 = 0;
    }
    if (theDict) {
      CFDictionaryRef v152 = (const __CFDictionary *)CFDictionaryGetValue(theDict, ValueAtIndex);
    }
    else {
      CFDictionaryRef v152 = 0;
    }
    if (v150) {
      v19 = (void *)CFDictionaryGetValue(v150, ValueAtIndex);
    }
    else {
      v19 = 0;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!CameraParametersForPortType)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      int v34 = FigSignalErrorAt();
LABEL_241:
      v14 = v146;
      goto LABEL_242;
    }
    uint64_t v142 = DerivedStorage;
    char v21 = *((unsigned char *)CameraParametersForPortType + 4);
    bzero(CameraParametersForPortType, 0x4E8uLL);
    *((unsigned char *)CameraParametersForPortType + 4) = v21;
    if (ValueAtIndex)
    {
      if (CFEqual(ValueAtIndex, cf2)) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = CFEqual(ValueAtIndex, v139) != 0;
      }
      *((unsigned char *)CameraParametersForPortType + 5) = v22;
    }
    if (v18)
    {
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ToneCurvesBlack");
      if (v23) {
        CFNumberGetValue(v23, kCFNumberFloatType, CameraParametersForPortType + 3);
      }
      CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ToneCurvesS0");
      if (v24) {
        CFNumberGetValue(v24, kCFNumberFloatType, CameraParametersForPortType + 4);
      }
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ToneCurvesS1");
      if (v25) {
        CFNumberGetValue(v25, kCFNumberFloatType, CameraParametersForPortType + 5);
      }
      CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ToneCurvesWhite");
      if (v26) {
        CFNumberGetValue(v26, kCFNumberFloatType, CameraParametersForPortType + 6);
      }
      CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ToneCurvesLinearity");
      if (v27) {
        CFNumberGetValue(v27, kCFNumberFloatType, CameraParametersForPortType + 7);
      }
      CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SaturationMin");
      if (v28) {
        CFNumberGetValue(v28, kCFNumberFloatType, CameraParametersForPortType + 8);
      }
      CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SaturationMax");
      if (v29) {
        CFNumberGetValue(v29, kCFNumberFloatType, CameraParametersForPortType + 9);
      }
      CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AEConvergenceVideo");
      if (v30) {
        CFNumberGetValue(v30, kCFNumberSInt32Type, CameraParametersForPortType + 11);
      }
      CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AEConvergenceStill");
      if (v31) {
        CFNumberGetValue(v31, kCFNumberSInt32Type, CameraParametersForPortType + 12);
      }
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AELockDoNotLockLTM");
      v33 = CameraParametersForPortType + 13;
      if (v32) {
        CFNumberGetValue(v32, kCFNumberCharType, v33);
      }
      else {
        unsigned char *v33 = 0;
      }
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusScanPositions");
      if (v35) {
        CFNumberGetValue(v35, kCFNumberIntType, CameraParametersForPortType + 17);
      }
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ContinuousAutofocusVideo");
      if (v36) {
        CFNumberGetValue(v36, kCFNumberCharType, (char *)CameraParametersForPortType + 53);
      }
      CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue(v18, @"PeakTrackingVideoFocusSpeed");
      if (v37) {
        CFNumberGetValue(v37, kCFNumberIntType, CameraParametersForPortType + 23);
      }
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v18, @"MatrixFocus");
      if (v38) {
        CFNumberGetValue(v38, kCFNumberIntType, CameraParametersForPortType + 21);
      }
      CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusScanPeakPrediction");
      if (v39) {
        CFNumberGetValue(v39, kCFNumberIntType, CameraParametersForPortType + 18);
      }
      CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v18, @"PreFlashFocusThreshold");
      if (v40) {
        CFNumberGetValue(v40, kCFNumberIntType, CameraParametersForPortType + 19);
      }
      CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusScanDuringPreFlash");
      if (v41) {
        CFNumberGetValue(v41, kCFNumberIntType, CameraParametersForPortType + 20);
      }
      CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v18, @"UseTapToFocusPixels");
      if (v42) {
        CFNumberGetValue(v42, kCFNumberCharType, (char *)CameraParametersForPortType + 55);
      }
      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v18, @"UseFocusNow");
      if (v43) {
        CFNumberGetValue(v43, kCFNumberCharType, CameraParametersForPortType + 14);
      }
      CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FirmwareControlledAutoFocus");
      if (v44) {
        CFNumberGetValue(v44, kCFNumberCharType, (char *)CameraParametersForPortType + 58);
      }
      CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusMappingKnee");
      if (v45) {
        CFNumberGetValue(v45, kCFNumberFloatType, CameraParametersForPortType + 24);
      }
      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusMappingSlope0");
      if (v46) {
        CFNumberGetValue(v46, kCFNumberFloatType, CameraParametersForPortType + 25);
      }
      CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FocusMappingSlope1");
      if (v47) {
        CFNumberGetValue(v47, kCFNumberFloatType, CameraParametersForPortType + 26);
      }
      CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HorizontalScanStartPosition");
      v49 = CameraParametersForPortType + 16;
      if (v48) {
        CFNumberGetValue(v48, kCFNumberIntType, v49);
      }
      else {
        _DWORD *v49 = 31;
      }
      CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v18, @"StillInfinityPosition");
      if (v50) {
        CFNumberGetValue(v50, kCFNumberSInt32Type, CameraParametersForPortType + 30);
      }
      CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v18, @"VideoInfinityPosition");
      if (v51) {
        CFNumberGetValue(v51, kCFNumberSInt32Type, CameraParametersForPortType + 31);
      }
      CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ExposureWindowSize");
      if (v52) {
        CFNumberGetValue(v52, kCFNumberFloatType, CameraParametersForPortType + 10);
      }
      CameraParametersForPortType[228] = 1046562734;
      CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEMaxFaceWeight");
      if (v53) {
        CFNumberGetValue(v53, kCFNumberFloatType, CameraParametersForPortType + 229);
      }
      CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAELowKeyCorrection");
      if (v54) {
        CFNumberGetValue(v54, kCFNumberFloatType, CameraParametersForPortType + 232);
      }
      CameraParametersForPortType[230] = CameraParametersForPortType[232];
      CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v18, @"PanoramaFaceAELowKeyCorrection");
      if (v55) {
        CFNumberGetValue(v55, kCFNumberFloatType, CameraParametersForPortType + 230);
      }
      CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEHighKeyCorrection");
      if (v56) {
        CFNumberGetValue(v56, kCFNumberFloatType, CameraParametersForPortType + 233);
      }
      CameraParametersForPortType[231] = CameraParametersForPortType[233];
      CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v18, @"PanoramaFaceAEHighKeyCorrection");
      if (v57) {
        CFNumberGetValue(v57, kCFNumberFloatType, CameraParametersForPortType + 231);
      }
      CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEDarkOutlier");
      if (v58) {
        CFNumberGetValue(v58, kCFNumberFloatType, CameraParametersForPortType + 237);
      }
      CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEBrightOutlier");
      if (v59) {
        CFNumberGetValue(v59, kCFNumberFloatType, CameraParametersForPortType + 238);
      }
      CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEVariance");
      if (v60) {
        CFNumberGetValue(v60, kCFNumberFloatType, CameraParametersForPortType + 239);
      }
      CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAELowQuantile");
      if (v61) {
        CFNumberGetValue(v61, kCFNumberFloatType, CameraParametersForPortType + 234);
      }
      CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAECenterQuantile");
      if (v62) {
        CFNumberGetValue(v62, kCFNumberFloatType, CameraParametersForPortType + 235);
      }
      CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(v18, @"FaceAEHighQuantile");
      if (v63) {
        CFNumberGetValue(v63, kCFNumberFloatType, CameraParametersForPortType + 236);
      }
      CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaMaxIntegrationTime");
      if (v64) {
        CFNumberGetValue(v64, kCFNumberSInt32Type, CameraParametersForPortType + 240);
      }
      CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEMaxGain");
      if (v65) {
        CFNumberGetValue(v65, kCFNumberSInt32Type, CameraParametersForPortType + 241);
      }
      CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEMinGain");
      if (v66) {
        CFNumberGetValue(v66, kCFNumberSInt32Type, CameraParametersForPortType + 242);
      }
      CFNumberRef v67 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEGainThresholdForFlickerZoneIntegrationTimeTransition");
      if (v67) {
        CFNumberGetValue(v67, kCFNumberSInt32Type, CameraParametersForPortType + 243);
      }
      CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEIntegrationTimeForUnityGainToMinGainTransition");
      if (v68) {
        CFNumberGetValue(v68, kCFNumberSInt32Type, CameraParametersForPortType + 244);
      }
      CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEMode");
      if (v69) {
        CFNumberGetValue(v69, kCFNumberSInt32Type, CameraParametersForPortType + 245);
      }
      CFNumberRef v70 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEUpperExposureDelta");
      if (v70) {
        CFNumberGetValue(v70, kCFNumberSInt32Type, CameraParametersForPortType + 246);
      }
      CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAELowerExposureDelta");
      if (v71) {
        CFNumberGetValue(v71, kCFNumberSInt32Type, CameraParametersForPortType + 247);
      }
      CFNumberRef v72 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaAEMaxPerFrameExposureDelta");
      if (v72) {
        CFNumberGetValue(v72, kCFNumberSInt32Type, CameraParametersForPortType + 248);
      }
      CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaDoNotLockBLC");
      v74 = CameraParametersForPortType + 249;
      if (v73) {
        CFNumberGetValue(v73, kCFNumberCharType, v74);
      }
      else {
        unsigned char *v74 = 0;
      }
      CFNumberRef v75 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaDoNotLockLTM");
      v76 = (char *)CameraParametersForPortType + 997;
      if (v75) {
        CFNumberGetValue(v75, kCFNumberCharType, v76);
      }
      else {
        unsigned char *v76 = 0;
      }
      CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(v18, @"panoramaUsePreviewAEConvergenceForRecording");
      v78 = (char *)CameraParametersForPortType + 998;
      if (v77) {
        CFNumberGetValue(v77, kCFNumberCharType, v78);
      }
      else {
        unsigned char *v78 = 0;
      }
      CFArrayRef v79 = (const __CFArray *)CFDictionaryGetValue(v18, @"SharpnessLightLevel");
      if (v79) {
        unpackIntArray(v79, (char *)CameraParametersForPortType + 128, 0xAu);
      }
      CFArrayRef v80 = (const __CFArray *)CFDictionaryGetValue(v18, @"SharpnessValue");
      if (v80) {
        unpackIntArray(v80, (char *)CameraParametersForPortType + 168, 0xAu);
      }
      CFArrayRef v81 = (const __CFArray *)CFDictionaryGetValue(v18, @"SaturationLightLevel");
      if (v81) {
        unpackIntArray(v81, (char *)CameraParametersForPortType + 208, 0xAu);
      }
      CFArrayRef v82 = (const __CFArray *)CFDictionaryGetValue(v18, @"SaturationValue");
      if (v82) {
        unpackIntArray(v82, (char *)CameraParametersForPortType + 248, 0xAu);
      }
      CFArrayRef v83 = (const __CFArray *)CFDictionaryGetValue(v18, @"NoiseReductionLightLevel");
      if (v83) {
        unpackIntArray(v83, (char *)CameraParametersForPortType + 288, 0xAu);
      }
      CFArrayRef v84 = (const __CFArray *)CFDictionaryGetValue(v18, @"NoiseReductionValue");
      if (v84) {
        unpackIntArray(v84, (char *)CameraParametersForPortType + 328, 0xAu);
      }
      CFArrayRef v85 = (const __CFArray *)CFDictionaryGetValue(v18, @"ColorSuppressionLightLevel");
      if (v85) {
        unpackIntArray(v85, (char *)CameraParametersForPortType + 368, 0xAu);
      }
      CFArrayRef v86 = (const __CFArray *)CFDictionaryGetValue(v18, @"ColorSuppressionValue");
      if (v86) {
        unpackIntArray(v86, (char *)CameraParametersForPortType + 408, 0xAu);
      }
      CFArrayRef v87 = (const __CFArray *)CFDictionaryGetValue(v18, @"DynamicRangeCompressionLightLevel");
      if (v87) {
        unpackIntArray(v87, (char *)CameraParametersForPortType + 448, 0xAu);
      }
      CFArrayRef v88 = (const __CFArray *)CFDictionaryGetValue(v18, @"DynamicRangeCompressionValue");
      if (v88) {
        unpackIntArray(v88, (char *)CameraParametersForPortType + 488, 0xAu);
      }
      CFArrayRef v89 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveBlackLightLevel");
      if (v89) {
        unpackIntArray(v89, (char *)CameraParametersForPortType + 528, 0xAu);
      }
      CFArrayRef v90 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveBlackValue");
      if (v90) {
        unpackIntArray(v90, (char *)CameraParametersForPortType + 568, 0xAu);
      }
      CFArrayRef v91 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveWhiteWeightLightLevel");
      if (v91) {
        unpackIntArray(v91, (char *)CameraParametersForPortType + 608, 0xAu);
      }
      CFArrayRef v92 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveWhiteWeightValue");
      if (v92) {
        unpackIntArray(v92, (char *)CameraParametersForPortType + 648, 0xAu);
      }
      CFArrayRef v93 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveLinearityLightLevel");
      if (v93) {
        unpackIntArray(v93, (char *)CameraParametersForPortType + 688, 0xAu);
      }
      CFArrayRef v94 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveLinearityValue");
      if (v94) {
        unpackIntArray(v94, (char *)CameraParametersForPortType + 728, 0xAu);
      }
      CFArrayRef v95 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveStabilityLightLevel");
      if (v95) {
        unpackIntArray(v95, (char *)CameraParametersForPortType + 768, 0xAu);
      }
      CFArrayRef v96 = (const __CFArray *)CFDictionaryGetValue(v18, @"ToneCurveStabilityValue");
      if (v96) {
        unpackIntArray(v96, (char *)CameraParametersForPortType + 808, 0xAu);
      }
      CFArrayRef v97 = (const __CFArray *)CFDictionaryGetValue(v18, @"SpatialNoiseFilteringGainLevel");
      if (v97) {
        unpackIntArray(v97, (char *)CameraParametersForPortType + 848, 8u);
      }
      CFArrayRef v98 = (const __CFArray *)CFDictionaryGetValue(v18, @"SpatialNoiseFilteringValue");
      if (v98) {
        unpackIntArray(v98, (char *)CameraParametersForPortType + 880, 8u);
      }
      v99 = v19;
      CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_hist_exp");
      if (v100) {
        CFNumberGetValue(v100, kCFNumberFloatType, CameraParametersForPortType + 251);
      }
      uint64_t v101 = a1;
      CFArrayRef v102 = (const __CFArray *)CFDictionaryGetValue(v18, @"HDRscene_histIndices");
      if (v102)
      {
        CFArrayRef v103 = v102;
        unpackIntArray(v102, (char *)CameraParametersForPortType + 1008, 0x10u);
        CameraParametersForPortType[250] = CFArrayGetCount(v103);
      }
      CFArrayRef v104 = (const __CFArray *)CFDictionaryGetValue(v18, @"HDRscene_histTypes");
      if (v104) {
        unpackIntArray(v104, (char *)CameraParametersForPortType + 1072, 0x10u);
      }
      CFArrayRef v105 = (const __CFArray *)CFDictionaryGetValue(v18, @"HDRscene_histWeights");
      if (v105)
      {
        CFArrayRef v106 = v105;
        unint64_t Count = CFArrayGetCount(v105);
        uint64_t v108 = Count >= 0x10 ? 16 : Count;
        if (v108)
        {
          CFIndex v109 = 0;
          v110 = (char *)(CameraParametersForPortType + 284);
          do
          {
            CFNumberRef v111 = (const __CFNumber *)CFArrayGetValueAtIndex(v106, v109);
            CFNumberGetValue(v111, kCFNumberFloatType, v110);
            ++v109;
            v110 += 4;
          }
          while (v108 != v109);
        }
      }
      CFNumberRef v112 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_histOffset");
      if (v112) {
        CFNumberGetValue(v112, kCFNumberFloatType, CameraParametersForPortType + 300);
      }
      CFNumberRef v113 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_thresh");
      a1 = v101;
      v19 = v99;
      if (v113) {
        CFNumberGetValue(v113, kCFNumberFloatType, CameraParametersForPortType + 301);
      }
      CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_shadow_thresh");
      v115 = CameraParametersForPortType + 302;
      CFDictionaryRef Value = v141;
      if (v114) {
        CFNumberGetValue(v114, kCFNumberFloatType, v115);
      }
      else {
        _DWORD *v115 = 2143289344;
      }
      CFArrayRef v8 = v140;
      CFNumberRef v116 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_normalizedSNR_thresh");
      if (v116) {
        CFNumberGetValue(v116, kCFNumberFloatType, CameraParametersForPortType + 303);
      }
      CFNumberRef v117 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_dampingThresh0");
      if (v117) {
        CFNumberGetValue(v117, kCFNumberFloatType, CameraParametersForPortType + 305);
      }
      CFNumberRef v118 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_dampingThresh1");
      if (v118) {
        CFNumberGetValue(v118, kCFNumberFloatType, CameraParametersForPortType + 306);
      }
      CFNumberRef v119 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_ScoreVariationThresh");
      if (v119) {
        CFNumberGetValue(v119, kCFNumberFloatType, CameraParametersForPortType + 307);
      }
      CFNumberRef v120 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_toneLast");
      if (v120) {
        CFNumberGetValue(v120, kCFNumberIntType, CameraParametersForPortType + 304);
      }
      CFNumberRef v121 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_temporal_buffer_size");
      if (v121)
      {
        CFNumberGetValue(v121, kCFNumberIntType, CameraParametersForPortType + 309);
        int v122 = CameraParametersForPortType[309];
        if (v122 >= 30) {
          int v122 = 30;
        }
        CameraParametersForPortType[309] = v122;
      }
      CFNumberRef v123 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_temporal_buffer_size_lowlight");
      if (v123)
      {
        CFNumberGetValue(v123, kCFNumberIntType, CameraParametersForPortType + 308);
        int v124 = CameraParametersForPortType[308];
        if (v124 >= 30) {
          int v124 = 30;
        }
        CameraParametersForPortType[308] = v124;
      }
      CFNumberRef v125 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_temporal_buffer_size_min");
      if (v125)
      {
        CFNumberGetValue(v125, kCFNumberIntType, CameraParametersForPortType + 310);
        int v126 = CameraParametersForPortType[310];
        if (v126 >= CameraParametersForPortType[309]) {
          int v126 = CameraParametersForPortType[309];
        }
        CameraParametersForPortType[310] = v126;
      }
      CFNumberRef v127 = (const __CFNumber *)CFDictionaryGetValue(v18, @"HDRscene_exptimeThresh");
      if (v127) {
        CFNumberGetValue(v127, kCFNumberFloatType, CameraParametersForPortType + 311);
      }
      CFNumberRef v128 = (const __CFNumber *)CFDictionaryGetValue(v18, @"ExposureStabilityCount");
      if (v128) {
        CFNumberGetValue(v128, kCFNumberIntType, CameraParametersForPortType + 15);
      }
      int v34 = 0;
    }
    else
    {
      int v34 = -12780;
    }
    if (v153)
    {
      valuePtr[0] = 0;
      CFNumberGetValue(v153, kCFNumberSInt32Type, valuePtr);
      int v129 = valuePtr[0];
      CameraParametersForPortType[22] = valuePtr[0];
      if (v129 >= 120) {
        CameraParametersForPortType[11] = FigGetCFPreferenceNumberWithDefault();
      }
    }
    BOOL v130 = BOOLean && CFBooleanGetValue(BOOLean) != 0;
    *((unsigned char *)CameraParametersForPortType + 54) = v130;
    if (!v19) {
      break;
    }
    objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v145), "floatValue");
    _DWORD *CameraParametersForPortType = v131;
    objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v147), "floatValue");
    if (!v152) {
      goto LABEL_241;
    }
    float v133 = v132;
    v14 = v146;
    if (!CFEqual(ValueAtIndex, cf2) && !CFEqual(ValueAtIndex, v146) && !CFEqual(ValueAtIndex, v139))
    {
      unsigned int v154 = 0;
      int CameraCharacterizationData = portIndexFromPortType(ValueAtIndex, (int *)&v154);
      if (CameraCharacterizationData
        || (unsigned int v135 = v154,
            (int CameraCharacterizationData = FigMotionGetCameraCharacterizationData(v152, v18, v133, (uint64_t)ValueAtIndex, v142 + 56 * v154 + 17712)) != 0))
      {
        int v34 = CameraCharacterizationData;
        fig_log_get_emitter();
        goto LABEL_239;
      }
      FigCFDictionaryGetBooleanIfPresent();
      v136 = (float *)(v142 + 56 * v135 + 17756);
      float *v136 = 1.0;
      if (!FigCFDictionaryGetFloatIfPresent() || 1.0 <= 0.0)
      {
        fig_log_get_emitter();
        int v34 = -12783;
LABEL_239:
        FigDebugAssert3();
        goto LABEL_242;
      }
      int v34 = 0;
      float *v136 = 1.0 / 1.0;
    }
LABEL_242:
    if (v34) {
      goto LABEL_251;
    }
    CaptureStreamForPortType = (void *)af_sbp_getCaptureStreamForPortType();
    if (!CaptureStreamForPortType) {
      goto LABEL_251;
    }
    v138 = CaptureStreamForPortType;
    if (FigImageControl_ToneMapping_ConfigureDevice(a1, CaptureStreamForPortType)) {
      goto LABEL_251;
    }
    uint64_t result = FigImageControl_Exposure_ConfigureDevice(a1, v138);
    v15 = v143;
    uint64_t v12 = v144;
    if (result) {
      goto LABEL_251;
    }
LABEL_246:
    if (++v13 == v12) {
      return result;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_251:
  fig_log_get_emitter();
  return FigDebugAssert3();
}

unint64_t unpackIntArray(const __CFArray *a1, char *a2, unsigned int a3)
{
  unint64_t result = CFArrayGetCount(a1);
  if (result >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = result;
  }
  if (v7)
  {
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      unint64_t result = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, a2);
      a2 += 4;
    }
  }
  return result;
}

unint64_t FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (char *)(*(void *)a1 + a2);
  char v4 = *v3;
  v14 = (unsigned int *)(v3 + 1);
  if ((v4 & 0xF0u) - 160 > 0x30 || ((1 << ((v4 & 0xF0u) + 96)) & 0x1000100000001) == 0) {
    abort();
  }
  unint64_t v8 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    v14 = (unsigned int *)(v3 + 2);
    unint64_t v8 = bp_readNinc(&v14, v3[1]);
  }
  if (v8 <= a3) {
    FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject_cold_1();
  }
  unint64_t Noffset = bp_readNoffset((uint64_t)v14, *(unsigned __int8 *)(a1 + 42), *(unsigned __int8 *)(a1 + 42) * a3);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v11 = Noffset * v10;
  uint64_t v12 = *(void *)(a1 + 8);
  return bp_readNoffset(v12, v10, v11);
}

uint64_t GetFocalLengthParametersFromArrayUsingModuleInfo(const __CFDictionary *a1, CFArrayRef theArray, uint64_t a3)
{
  unsigned int v47 = 0;
  uint64_t valuePtr = 0;
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52F28]);
      CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52F10]);
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52F20]);
      if (Value) {
        BOOL v9 = v7 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9 || v8 == 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      if (!CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr)
        || !CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&valuePtr + 4)
        || !CFNumberGetValue(Value, kCFNumberSInt32Type, &v47))
      {
        uint64_t v11 = FigSignalErrorAt();
        if (v11)
        {
          uint64_t v42 = v11;
          fig_log_get_emitter();
          FigDebugAssert3();
          return v42;
        }
      }
    }
  }
  if (CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  uint64_t v44 = a3;
  CFIndex v12 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
    CFTypeID v14 = CFGetTypeID(ValueAtIndex);
    if (v14 != CFDictionaryGetTypeID()) {
      goto LABEL_68;
    }
    int v15 = 1;
    if (!a1)
    {
      int v24 = 1;
      goto LABEL_54;
    }
    unsigned int v48 = 1;
    int IntIfPresent = FigCFDictionaryGetIntIfPresent();
    if (v48 == 2) {
      v17 = (BOOL (*)(int, int))IDsEqualAboveFirstHexDigit;
    }
    else {
      v17 = IDsEqual;
    }
    if (IntIfPresent) {
      CFDictionaryRef v18 = v17;
    }
    else {
      CFDictionaryRef v18 = IDsEqual;
    }
    CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"IntegratorID");
    if (v19)
    {
      CFArrayRef v20 = v19;
      uint64_t v21 = valuePtr;
      if (CFArrayGetCount(v19) < 1)
      {
LABEL_32:
        int v24 = 0;
        goto LABEL_35;
      }
      uint64_t v22 = 0;
      while (1)
      {
        unsigned int v48 = -1;
        FigCFArrayGetIntAtIndex();
        if (((unsigned int (*)(void, uint64_t))v18)(v48, v21) || v48 == 0) {
          break;
        }
        if (CFArrayGetCount(v20) <= ++v22) {
          goto LABEL_32;
        }
      }
    }
    int v24 = 1;
LABEL_35:
    CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ActuatorID");
    if (v25)
    {
      CFArrayRef v26 = v25;
      uint64_t v27 = HIDWORD(valuePtr);
      if (CFArrayGetCount(v25) < 1)
      {
LABEL_43:
        int v15 = 0;
        goto LABEL_45;
      }
      uint64_t v28 = 0;
      while (1)
      {
        unsigned int v48 = -1;
        FigCFArrayGetIntAtIndex();
        if (((unsigned int (*)(void, uint64_t))v18)(v48, v27) || v48 == 0) {
          break;
        }
        if (CFArrayGetCount(v26) <= ++v28) {
          goto LABEL_43;
        }
      }
    }
    int v15 = 1;
LABEL_45:
    CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"LensID");
    if (!v30) {
      goto LABEL_54;
    }
    CFArrayRef v31 = v30;
    uint64_t v32 = v47;
    if (CFArrayGetCount(v30) >= 1) {
      break;
    }
LABEL_56:
    if (CFArrayGetCount(theArray) <= ++v12) {
      return 0;
    }
  }
  uint64_t v33 = 0;
  while (1)
  {
    unsigned int v48 = -1;
    FigCFArrayGetIntAtIndex();
    if (((unsigned int (*)(void, uint64_t))v18)(v48, v32) || v48 == 0) {
      break;
    }
    if (CFArrayGetCount(v31) <= ++v33) {
      goto LABEL_56;
    }
  }
LABEL_54:
  if (!v15 || !v24) {
    goto LABEL_56;
  }
  if (!FigCFDictionaryGetFloatIfPresent()) {
    goto LABEL_68;
  }
  CFNumberRef v35 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"LensCoefficients");
  if (!v35) {
    goto LABEL_68;
  }
  CFNumberRef v36 = v35;
  CFTypeID v37 = CFArrayGetTypeID();
  if (v37 != CFGetTypeID(v36)) {
    return 0;
  }
  int Count = CFArrayGetCount((CFArrayRef)v36);
  if (Count > 5)
  {
LABEL_68:
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  if (Count >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = Count;
    uint64_t v41 = v44 + 20;
    do
    {
      FigCFArrayGetFloatAtIndex();
      ++v39;
      v41 += 4;
    }
    while (v40 != v39);
  }
  uint64_t v42 = 0;
  *(unsigned char *)(v44 + 16) = 1;
  return v42;
}

BOOL IDsEqual(int a1, int a2)
{
  return a1 == a2;
}

uint64_t FigCaptureBinaryPlistFindIndexForStringInObject(uint64_t a1, uint64_t a2, const char *a3, size_t a4)
{
  char v4 = (char *)(*(void *)a1 + a2);
  char v5 = *v4;
  int v24 = (unsigned int *)(v4 + 1);
  if ((v5 & 0xE0 | 0x10) != 0xD0) {
    abort();
  }
  unint64_t v9 = v5 & 0xF;
  if ((v5 & 0xF) == 0xF)
  {
    int v24 = (unsigned int *)(v4 + 2);
    unint64_t v9 = bp_readNinc(&v24, v4[1]);
  }
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = v9 - 1;
    CFIndex v12 = v24;
    while (1)
    {
      unint64_t v13 = (v11 + v10) >> 1;
      unint64_t Noffset = bp_readNoffset((uint64_t)v12, *(unsigned __int8 *)(a1 + 42), v13 * *(unsigned __int8 *)(a1 + 42));
      unint64_t v15 = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
      unsigned int v16 = *(unsigned __int8 *)(*(void *)a1 + v15);
      if (v16 > 0x23) {
        v16 &= 0xF0u;
      }
      if (v16 != 80)
      {
        if (v10 == v11) {
          return -1;
        }
        goto LABEL_21;
      }
      DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((void *)a1, v15);
      size_t v19 = v17;
      if (v17 >= a4) {
        size_t v20 = a4;
      }
      else {
        size_t v20 = v17;
      }
      int v21 = strncmp(a3, (const char *)DataAndCountForObjectAtOffset, v20);
      if (v21)
      {
        if (v10 == v11) {
          return -1;
        }
        if (v21 > 0) {
          goto LABEL_25;
        }
LABEL_21:
        if (v13 <= v10 + 1) {
          unint64_t v22 = v10 + 1;
        }
        else {
          unint64_t v22 = (v11 + v10) >> 1;
        }
        unint64_t v11 = v22 - 1;
      }
      else
      {
        if (v19 == a4) {
          return v13;
        }
        if (v10 == v11) {
          return -1;
        }
        if (v19 >= a4) {
          goto LABEL_21;
        }
LABEL_25:
        if (v13 + 1 < v11) {
          unint64_t v10 = v13 + 1;
        }
        else {
          unint64_t v10 = v11;
        }
      }
    }
  }
  return -1;
}

unint64_t FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = (char *)(*(void *)a1 + a2);
  char v5 = *v3;
  char v4 = *v3;
  CFTypeID v14 = (unsigned int *)(v3 + 1);
  if ((v5 & 0xF0) != 0xD0) {
    FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_2();
  }
  unint64_t v8 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    CFTypeID v14 = (unsigned int *)(v3 + 2);
    unint64_t v8 = bp_readNinc(&v14, v3[1]);
  }
  if (v8 <= a3) {
    FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_1();
  }
  unint64_t Noffset = bp_readNoffset((uint64_t)v14, *(unsigned __int8 *)(a1 + 42), (v8 + a3) * *(unsigned __int8 *)(a1 + 42));
  uint64_t v10 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v11 = Noffset * v10;
  uint64_t v12 = *(void *)(a1 + 8);
  return bp_readNoffset(v12, v10, v11);
}

void FigCaptureBinaryPlistInitialize(uint64_t a1, char *__s1, uint64_t a3)
{
  if (strncmp(__s1, "bplist00", 8uLL)) {
    FigCaptureBinaryPlistInitialize_cold_1();
  }
  *(unsigned char *)(a1 + 40) = __s1[a3 - 27];
  *(unsigned char *)(a1 + 41) = __s1[a3 - 26];
  *(unsigned char *)(a1 + 42) = __s1[a3 - 25];
  unint64_t v6 = bswap64(*(void *)&__s1[a3 - 24]);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = bswap64(*(void *)&__s1[a3 - 16]);
  unint64_t v7 = bswap64(*(void *)&__s1[a3 - 8]);
  *(void *)(a1 + 32) = v7;
  *(void *)a1 = __s1;
  *(void *)(a1 + 8) = &__s1[v7];
  if (v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      unint64_t Noffset = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), v9 * *(unsigned __int8 *)(a1 + 41));
      unsigned int v11 = *(unsigned __int8 *)(*(void *)a1 + Noffset);
      if (v11 > 0x23) {
        v11 &= 0xF0u;
      }
      if (v11 == 208)
      {
        FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((void *)a1, Noffset);
        if (v8 <= v12) {
          unint64_t v8 = v12;
        }
      }
      ++v9;
    }
    while (v9 < *(void *)(a1 + 16));
    if (v8)
    {
      unint64_t v13 = malloc_type_malloc(2 * v8 * *(unsigned __int8 *)(a1 + 42), 0xF30F8F04uLL);
      if (*(void *)(a1 + 16))
      {
        unint64_t v14 = 0;
        do
        {
          unint64_t v15 = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), v14 * *(unsigned __int8 *)(a1 + 41));
          unsigned int v16 = *(unsigned __int8 *)(*(void *)a1 + v15);
          if (v16 > 0x23) {
            v16 &= 0xF0u;
          }
          if (v16 == 208)
          {
            DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((void *)a1, v15);
            if (v18 >= 2)
            {
              size_t v19 = DataAndCountForObjectAtOffset;
              size_t v20 = v18;
              bp_transposeKeyValueTable(DataAndCountForObjectAtOffset, (uint64_t)v13, v18, *(unsigned __int8 *)(a1 + 42), 0);
              uint64_t v21 = *(unsigned __int8 *)(a1 + 42);
              char v22 = v21 - 1;
              if ((v21 - 1) >= 8u || ((0x8Bu >> v22) & 1) == 0) {
                abort();
              }
              qsort_r(v13, v20, 2 * v21, (void *)a1, (int (__cdecl *)(void *, const void *, const void *))off_1EFA3FBC0[v22]);
              bp_transposeKeyValueTable(v19, (uint64_t)v13, v20, *(unsigned __int8 *)(a1 + 42), 1);
            }
          }
          ++v14;
        }
        while (v14 < *(void *)(a1 + 16));
      }
      free(v13);
    }
  }
}

uint64_t bp_plistObjCompare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Noffset = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a2);
  unint64_t v6 = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a3);
  unsigned int v7 = *(unsigned __int8 *)(*(void *)a1 + Noffset);
  unsigned int v8 = *(unsigned __int8 *)(*(void *)a1 + v6);
  int v9 = v8 & 0xF0;
  if (v8 > 0x23) {
    v8 &= 0xF0u;
  }
  if ((v7 & 0xF0) == 0x10)
  {
    if (v9 == 16)
    {
      uint64_t IntForObjectAtOffset = FigCaptureBinaryPlistGetIntForObjectAtOffset((void *)a1, Noffset);
      uint64_t v11 = FigCaptureBinaryPlistGetIntForObjectAtOffset((void *)a1, v6);
      if (IntForObjectAtOffset < v11) {
        return 0xFFFFFFFFLL;
      }
      else {
        return IntForObjectAtOffset > v11;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v7 > 0x23) {
    v7 &= 0xF0u;
  }
  if (v7 != 80) {
    return 0;
  }
  if (v8 != 80) {
    return 1;
  }
  DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((void *)a1, Noffset);
  size_t v15 = v14;
  size_t v17 = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((void *)a1, v6);
  size_t v18 = v16;
  if (v15 >= v16) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v15;
  }
  uint64_t result = strncmp((const char *)DataAndCountForObjectAtOffset, (const char *)v17, v19);
  if (!result)
  {
    if (v15 >= v18) {
      return v15 > v18;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t bp_readNoffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 1:
    case 16:
      unint64_t result = *(unsigned __int8 *)(a1 + a3);
      break;
    case 2:
    case 17:
      unint64_t result = __rev16(*(unsigned __int16 *)(a1 + a3));
      break;
    case 4:
    case 18:
      unint64_t result = bswap32(*(_DWORD *)(a1 + a3));
      break;
    case 8:
    case 19:
      unint64_t result = bswap64(*(void *)(a1 + a3));
      break;
    default:
      abort();
  }
  return result;
}

unsigned int *FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 + a2;
  unint64_t result = (unsigned int *)(v2 + 1);
  unsigned int v4 = ((*(unsigned char *)v2 & 0xF0u) - 64) >> 4;
  BOOL v5 = v4 > 9;
  int v6 = (1 << v4) & 0x347;
  if (v5 || v6 == 0) {
    abort();
  }
  if ((*(unsigned char *)v2 & 0xF) == 0xF)
  {
    unsigned int v8 = (unsigned int *)(v2 + 2);
    bp_readNinc(&v8, *(unsigned __int8 *)(v2 + 1));
    return v8;
  }
  return result;
}

unint64_t bp_readNinc(unsigned int **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  switch(a2)
  {
    case 1:
    case 16:
      *a1 = (unsigned int *)((char *)v2 + 1);
      unint64_t result = *(unsigned __int8 *)v2;
      break;
    case 2:
    case 17:
      *a1 = (unsigned int *)((char *)v2 + 2);
      unint64_t result = __rev16(*(unsigned __int16 *)v2);
      break;
    case 4:
    case 18:
      *a1 = v2 + 1;
      unint64_t result = bswap32(*v2);
      break;
    case 8:
    case 19:
      *a1 = v2 + 2;
      unint64_t result = bswap64(*(void *)v2);
      break;
    default:
      abort();
  }
  return result;
}

_WORD *bp_transposeKeyValueTable(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a4)
  {
    case 1:
      if (a5)
      {
        if (a3)
        {
          uint64_t v5 = 0;
          int v6 = (char *)(a2 + 1);
          do
          {
            *((unsigned char *)result + v5) = *(v6 - 1);
            char v7 = *v6;
            v6 += 2;
            *((unsigned char *)result + a3 + v5++) = v7;
          }
          while (a3 != v5);
        }
      }
      else if (a3)
      {
        uint64_t v17 = 0;
        size_t v18 = (unsigned char *)(a2 + 1);
        do
        {
          *(v18 - 1) = *((unsigned char *)result + v17);
          *size_t v18 = *((unsigned char *)result + a3 + v17);
          v18 += 2;
          ++v17;
        }
        while (a3 != v17);
      }
      break;
    case 2:
      if (a5)
      {
        if (a3)
        {
          size_t v14 = (__int16 *)(a2 + 2);
          uint64_t v15 = a3;
          do
          {
            unsigned int *result = *(v14 - 1);
            __int16 v16 = *v14;
            v14 += 2;
            result[a3] = v16;
            ++result;
            --v15;
          }
          while (v15);
        }
      }
      else if (a3)
      {
        CFNumberRef v23 = (_WORD *)(a2 + 2);
        uint64_t v24 = a3;
        do
        {
          *(v23 - 1) = *result;
          *CFNumberRef v23 = result[a3];
          v23 += 2;
          ++result;
          --v24;
        }
        while (v24);
      }
      break;
    case 4:
      if (a5)
      {
        if (a3)
        {
          unsigned int v8 = (int *)(a2 + 4);
          uint64_t v9 = a3;
          do
          {
            *(_DWORD *)unint64_t result = *(v8 - 1);
            int v10 = *v8;
            v8 += 2;
            *(_DWORD *)&result[2 * a3] = v10;
            result += 2;
            --v9;
          }
          while (v9);
        }
      }
      else if (a3)
      {
        size_t v19 = (_DWORD *)(a2 + 4);
        uint64_t v20 = a3;
        do
        {
          *(v19 - 1) = *(_DWORD *)result;
          _DWORD *v19 = *(_DWORD *)&result[2 * a3];
          v19 += 2;
          result += 2;
          --v20;
        }
        while (v20);
      }
      break;
    case 8:
      if (a5)
      {
        if (a3)
        {
          uint64_t v11 = (uint64_t *)(a2 + 8);
          uint64_t v12 = a3;
          do
          {
            *(void *)unint64_t result = *(v11 - 1);
            uint64_t v13 = *v11;
            v11 += 2;
            *(void *)&result[4 * a3] = v13;
            result += 4;
            --v12;
          }
          while (v12);
        }
      }
      else if (a3)
      {
        uint64_t v21 = (void *)(a2 + 8);
        uint64_t v22 = a3;
        do
        {
          *(v21 - 1) = *(void *)result;
          *uint64_t v21 = *(void *)&result[4 * a3];
          v21 += 2;
          result += 4;
          --v22;
        }
        while (v22);
      }
      break;
    default:
      abort();
  }
  return result;
}

uint64_t af_sbp_getCaptureStreamForPortType()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage + 8;
  [*(id *)(DerivedStorage + 8) portType];
  if (FigCFEqual()) {
    return *(void *)v1;
  }
  if (FigCFEqual())
  {
    uint64_t v1 = DerivedStorage + 16;
    return *(void *)v1;
  }
  if (FigCFEqual())
  {
    uint64_t v1 = DerivedStorage + 24;
    return *(void *)v1;
  }
  return 0;
}

uint64_t __csr_createFormatsArrayFromSerializedSource_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = [[FigCaptureSourceVideoFormat alloc] initWithXPCEncoding:a3];
  [*(id *)(a1 + 32) addObject:v4];
  if ([(FigCaptureSourceFormat *)v4 format] == 875704438)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v5 = [(FigCaptureSourceVideoFormat *)v4 copyWithNewPixelFormat:875704422];
      if (v5)
      {
        int v6 = (void *)v5;
        [*(id *)(a1 + 32) addObject:v5];
      }
    }
  }

  return 1;
}

BOOL FigCaptureVideoDimensionsAreValid(uint64_t a1)
{
  return (int)a1 > 0 && SHIDWORD(a1) > 0;
}

uint64_t vfr_resolveNumericalArrays(id *a1, void *a2)
{
  id v4 = *a1;
  if ([*a1 count] && objc_msgSend(a2, "count"))
  {
    id v5 = (id)objc_msgSend(v4, "bw_intersectWithArray:", a2);
    if (![v5 count])
    {

      return 0;
    }
  }
  else
  {
    if ([v4 count] || !objc_msgSend(a2, "count")) {
      return 1;
    }
    id v5 = (id)[a2 copy];
  }
  if (v5)
  {

    *a1 = v5;
  }
  return 1;
}

uint64_t FigCapturePlatformIdentifier()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformID;
}

unint64_t FigCaptureFitAspectInsideDimensions(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 == 0.0) {
    a3 = (float)(int)a1 / (float)SHIDWORD(a1);
  }
  if ((float)((float)(int)a1 / (float)SHIDWORD(a1)) >= a3)
  {
    uint64_t v4 = (SHIDWORD(a1) / SHIDWORD(a2) * HIDWORD(a2));
    int v3 = llroundf((float)(a3 * (float)(int)v4) / (float)(int)a2) * a2;
    if (v3 > (int)a1)
    {
      v3 -= a2;
      uint64_t v4 = llroundf((float)((float)v3 / a3) / (float)SHIDWORD(a2)) * HIDWORD(a2);
    }
  }
  else
  {
    int v3 = (int)a1 / (int)a2 * a2;
    uint64_t v4 = llroundf((float)((float)v3 / a3) / (float)SHIDWORD(a2)) * HIDWORD(a2);
    if ((int)v4 > SHIDWORD(a1))
    {
      uint64_t v4 = (v4 - HIDWORD(a2));
      int v3 = llroundf((float)(a3 * (float)(int)v4) / (float)(int)a2) * a2;
    }
  }
  return v3 | (unint64_t)(v4 << 32);
}

uint64_t FigCapturePlatformIOSurfaceWiringAssertionEnabled()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sIOSurfaceWiringAssertionEnabled;
}

uint64_t captureSourceServer_createSerializedSource(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v30 = 0;
  xpc_object_t empty = xpc_dictionary_create_empty();
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  xpc_dictionary_set_uint64(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_ObjectID, a2);
  int SourceType = FigCaptureSourceGetSourceType(a1, &v30);
  if (v30) {
    goto LABEL_33;
  }
  int v8 = SourceType;
  xpc_dictionary_set_uint64(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_SourceType, SourceType);
  if (v8 == 5)
  {
LABEL_34:
    xpc_object_t v20 = 0;
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v10 + 48);
  if (!v11)
  {
    unsigned int v30 = -12782;
    goto LABEL_33;
  }
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  unsigned int v30 = v11(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &theDict);
  if (v30) {
    goto LABEL_33;
  }
  unsigned int v30 = FigXPCMessageSetCFDictionary();
  if (v30) {
    goto LABEL_33;
  }
  CFDictionaryGetValue(theDict, @"DeviceType");
  int UInt64 = FigCFNumberGetUInt64();
  int v14 = FigCaptureExternalCameraReplacesBuiltIn(0);
  if ((UInt64 - 15) < 2) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  size_t v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
  if (!v18)
  {
    unsigned int v30 = -12782;
    goto LABEL_33;
  }
  unsigned int v30 = v18(a1, @"Formats", v12, &cf);
  if (v30)
  {
LABEL_33:
    FigDebugAssert3();
    goto LABEL_34;
  }
  size_t v19 = (void *)cf;
  xpc_object_t v20 = xpc_array_create(0, 0);
  if ([v19 count])
  {
    unint64_t v21 = 0;
    do
    {
      uint64_t v22 = (void *)[v19 objectAtIndex:v21];
      if ([v22 format] == 875704438) {
        int v23 = v15;
      }
      else {
        int v23 = 1;
      }
      if (v23) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = 2;
      }
      CFArrayRef v25 = (void *)[v22 copyXPCEncoding];
      xpc_array_append_value(v20, v25);
      xpc_release(v25);
      v21 += v24;
    }
    while (v21 < [v19 count]);
  }
  unsigned int v30 = 0;
  xpc_dictionary_set_value(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_FormatsArray, v20);
  if (v15) {
    CFArrayRef v26 = (void *)MEMORY[0x1E4F14518];
  }
  else {
    CFArrayRef v26 = (void *)MEMORY[0x1E4F14510];
  }
  xpc_dictionary_set_value(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_420fOptimizationDisabled, v26);
LABEL_35:
  if (v30)
  {
    xpc_release(empty);
    xpc_object_t empty = 0;
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  *a3 = empty;
  return v30;
}

uint64_t FigCaptureExternalCameraReplacesBuiltIn(unsigned char *a1)
{
  if (FigCaptureExternalCameraReplacesBuiltIn_sOnceToken != -1)
  {
    dispatch_once(&FigCaptureExternalCameraReplacesBuiltIn_sOnceToken, &__block_literal_global_102_0);
    if (!a1) {
      return FigCaptureExternalCameraReplacesBuiltIn_sExternalReplacesBuiltIn;
    }
    goto LABEL_3;
  }
  if (a1) {
LABEL_3:
  }
    *a1 = 0;
  return FigCaptureExternalCameraReplacesBuiltIn_sExternalReplacesBuiltIn;
}

uint64_t satisfiedVideoRequirementCheck(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return [a1 isSatisfiedByRequirement:a2];
  }
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__41(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
}

uint64_t FigCapturePixelFormatIsVersatileRaw(int a1)
{
  uint64_t result = 1;
  if (a1 > 1651847471)
  {
    if (a1 <= 1651926375)
    {
      if (a1 == 1651847472) {
        return result;
      }
      int v3 = 1651925816;
      goto LABEL_14;
    }
    if (a1 != 1651926376 && a1 != 1651927153)
    {
      int v3 = 1652056888;
LABEL_14:
      if (a1 != v3) {
        return 0;
      }
    }
  }
  else
  {
    if (a1 <= 1651519536)
    {
      if (a1 == 1647392369) {
        return result;
      }
      int v3 = 1647719528;
      goto LABEL_14;
    }
    if (a1 != 1651519537 && a1 != 1651519798)
    {
      int v3 = 1651587122;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t *vfr_resolveOptionalAlignmentFactors(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *result;
    if (*result)
    {
      if ((int)v2 < 0) {
        LODWORD(v2) = -(int)v2;
      }
      if ((int)a2 >= 0) {
        unsigned int v3 = a2;
      }
      else {
        unsigned int v3 = -(int)a2;
      }
      if (v3 <= v2) {
        signed int v4 = v2;
      }
      else {
        signed int v4 = v3;
      }
      if (v3 >= v2) {
        int v5 = v2;
      }
      else {
        int v5 = v3;
      }
      if (v5)
      {
        unsigned int v6 = v4;
        do
        {
          signed int v4 = v5;
          int v5 = v6 % v5;
          unsigned int v6 = v4;
        }
        while (v5 > 0);
      }
      else if (!v4)
      {
        a2 = 0;
        goto LABEL_22;
      }
      a2 = (int)(v2 * v3) / v4;
LABEL_22:
      unsigned int *result = a2;
      return result;
    }
  }
  if (a2) {
    goto LABEL_22;
  }
  return result;
}

uint64_t FigCapturePixelFormatWithLeastAverageBandwidth(void *a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(a1, "sortedArrayUsingComparator:", &__block_literal_global_115), "firstObject");
  return [v1 unsignedIntValue];
}

uint64_t nc_addRequirementsForInputToMutableArray(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "formatRequirements");
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  nc_addFormatRequirementsFromInputWithAttachedMediaKey(a1, (uint64_t)a2, a3, a4, a5, a6);
  CFArrayRef v26 = a2;
  uint64_t result = [a1 _passthroughModeForAttachedMediaKey:a2];
  uint64_t v25 = result;
  if (result)
  {
    int v14 = [a1 mediaType];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    int v15 = objc_msgSend((id)objc_msgSend(a1, "node"), "outputs");
    uint64_t result = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (result)
    {
      uint64_t v16 = result;
      uint64_t v17 = *(void *)v30;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v30 != v17) {
            objc_enumerationMutation(v15);
          }
          size_t v19 = *(void **)(*((void *)&v29 + 1) + 8 * v18);
          if ([v19 mediaType] == v14)
          {
            uint64_t v20 = objc_msgSend(v19, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", v26, objc_msgSend(a1, "index"));
            if (v20)
            {
              unint64_t v21 = (void *)v20;
              uint64_t v22 = [v19 _passthroughModeForAttachedMediaKey:v20];
              if (v22 != v25)
              {
                uint64_t v24 = [NSString stringWithFormat:@"Input %@[%@] and output %@[%@] passthrough modes don't match: %d vs. %d", a1, v26, v19, v21, v25, v22];
                objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v24 userInfo:0]);
              }
              nc_addFormatRequirementsFromOutputWithAttachedMediaKey(v19, (uint64_t)v21, a3, a4);
              nc_addRequirementsForInputsDrivingOutputToMutableArray(v19, v21, a3, a4, a1, v27, v28);
              uint64_t v23 = objc_msgSend((id)objc_msgSend(v19, "connection"), "input");
              if (v23) {
                nc_addRequirementsForInputToMutableArray(v23, v21, a3, a4, v27, v28);
              }
            }
          }
          ++v18;
        }
        while (v16 != v18);
        uint64_t result = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
        uint64_t v16 = result;
      }
      while (result);
    }
  }
  else if (!v12)
  {
    return [a2 isEqualToString:@"PrimaryFormat"];
  }
  return result;
}

uint64_t nc_addFormatRequirementsFromOutputWithAttachedMediaKey(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "formatRequirements");
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = [(id)result isEmpty];
    if ((result & 1) == 0)
    {
      uint64_t result = [a3 containsObject:v8];
      if ((result & 1) == 0)
      {
        if (a4) {
          [a3 addObject:a1];
        }
        return [a3 addObject:v8];
      }
    }
  }
  return result;
}

uint64_t nc_addFormatRequirementsFromInputWithAttachedMediaKey(void *a1, uint64_t a2, void *a3, int a4, void *a5, uint64_t *a6)
{
  uint64_t v12 = (void *)[a1 mediaConfigurationForAttachedMediaKey:a2];
  uint64_t result = [v12 formatRequirements];
  if (result)
  {
    uint64_t v14 = result;
    uint64_t result = [(id)result isEmpty];
    if ((result & 1) == 0)
    {
      uint64_t result = [a3 containsObject:v14];
      if ((result & 1) == 0)
      {
        if (a4) {
          [a3 addObject:a1];
        }
        uint64_t result = [a3 addObject:v14];
      }
      if (a5)
      {
        if (!*a5)
        {
          uint64_t result = [v12 conversionToPassthroughModeNeverAllowed];
          if (result)
          {
            uint64_t result = [v12 passthroughMode];
            if (result)
            {
              *a5 = a1;
              *a6 = a2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t gr_countOfBuffersRetainedOutsideEmitCallbackOfOutputWithDelay(void *a1, uint64_t a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v39 = [a1 mediaType];
  uint64_t v10 = objc_msgSend((id)objc_msgSend(a1, "connection"), "input");
  if (gr_outputAndInputShareAPipelineStage(a1, a2, v10)) {
    int v11 = 0;
  }
  else {
    int v11 = gr_outputOrInputIsStillImagePipelineStage(a1, a2, v10) ^ 1;
  }
  uint64_t v12 = (void *)[v10 mediaConfigurationForAttachedMediaKey:a2];
  int v13 = [v12 indefinitelyHeldBufferCount];
  if (v11)
  {
    int v14 = a4 - 1;
    if (a4 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = a4;
    }
    if (a5)
    {
      int v16 = (v15 - a5) & ~((v15 - a5) >> 31);
      int v14 = a5 - v15;
    }
    else
    {
      a4 = 0;
      int v16 = v15;
    }
    a5 = v14 & ~(v14 >> 31);
    a3 += v16;
  }
  if (!v12)
  {
    uint64_t v12 = (void *)[v10 unspecifiedAttachedMediaConfiguration];
    if ((int)[v12 retainedBufferCount] > 0)
    {
      if (v12) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    int v17 = [v12 delayedBufferCount];
    if (!v12 || v17 < 1) {
LABEL_18:
    }
      uint64_t v12 = (void *)[v10 mediaConfigurationForAttachedMediaKey:@"PrimaryFormat"];
  }
LABEL_19:
  int v18 = [v12 retainedBufferCount];
  int v19 = [v12 delayedBufferCount];
  if (v19)
  {
    int v20 = a4 - v19;
    if (a4 <= v19) {
      int v21 = v19;
    }
    else {
      int v21 = a4;
    }
    if (a5)
    {
      int v22 = (v21 - a5) & ~((v21 - a5) >> 31);
      int v20 = a5 - v21;
    }
    else
    {
      a4 = 0;
      int v22 = v21;
    }
    a5 = v20 & ~(v20 >> 31);
    a3 += v22;
  }
  else
  {
    if (a4 <= v18) {
      int v23 = v18;
    }
    else {
      int v23 = a4;
    }
    a4 = v23;
  }
  if ([v10 _passthroughModeForAttachedMediaKey:a2] == 1)
  {
    CFNumberRef v35 = a6;
    int v44 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v24 = objc_msgSend((id)objc_msgSend(v10, "node"), "outputs");
    uint64_t v25 = [v24 countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      unsigned int v36 = a5;
      uint64_t v27 = *(void *)v41;
      int v28 = a3;
      do
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (*(void *)v41 != v27) {
            objc_enumerationMutation(v24);
          }
          long long v30 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          uint64_t v31 = objc_msgSend(v30, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", a2, objc_msgSend(v10, "index"));
          if (v31)
          {
            uint64_t v32 = v31;
            if ([v30 mediaType] == v39
              && [v30 _passthroughModeForAttachedMediaKey:v32] == 1)
            {
              int v33 = gr_countOfBuffersRetainedOutsideEmitCallbackOfOutputWithDelay(v30, v32, a3, a4, v36, &v44);
              v13 += v44;
              if (v33 > v28) {
                int v28 = v33;
              }
            }
          }
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v40 objects:v45 count:16];
      }
      while (v26);
    }
    else
    {
      int v28 = a3;
    }
    a3 = v28;
    a6 = v35;
  }
  else if ([v12 retainedBufferCount])
  {
    a3 += (a4 - a5) & ~((a4 - a5) >> 31);
  }
  if (a6) {
    *a6 = v13;
  }
  else {
    FigDebugAssert3();
  }
  return a3;
}

uint64_t nc_addRequirementsForInputsDrivingOutputToMutableArray(void *a1, void *a2, void *a3, int a4, void *a5, void *a6, uint64_t *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v11 = (void *)[a1 node];
  uint64_t v27 = a3;
  unsigned int v28 = a4;
  nc_addFormatRequirementsFromOutputWithAttachedMediaKey(a1, (uint64_t)a2, a3, a4);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = (id)[v11 inputs];
  uint64_t result = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
  uint64_t v25 = result;
  if (result)
  {
    uint64_t v23 = *(void *)v36;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v36 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v13;
        int v14 = *(void **)(*((void *)&v35 + 1) + 8 * v13);
        if (v14 != a5)
        {
          int v15 = (void *)[MEMORY[0x1E4F1CA48] arrayWithObject:@"PrimaryFormat"];
          objc_msgSend(v15, "addObjectsFromArray:", objc_msgSend(v14, "specifiedAttachedMediaKeys"));
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          int v16 = v15;
          uint64_t v17 = [v15 countByEnumeratingWithState:&v31 objects:v39 count:16];
          if (v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = *(void *)v32;
            do
            {
              for (uint64_t i = 0; i != v18; ++i)
              {
                if (*(void *)v32 != v19) {
                  objc_enumerationMutation(v16);
                }
                uint64_t v21 = *(void *)(*((void *)&v31 + 1) + 8 * i);
                if ([v14 _passthroughModeForAttachedMediaKey:v21])
                {
                  if (objc_msgSend(a2, "isEqualToString:", objc_msgSend(a1, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", v21, objc_msgSend(v14, "index"))))
                  {
                    nc_addFormatRequirementsFromInputWithAttachedMediaKey(v14, v21, v27, v28, a6, a7);
                    nc_addRequirementsForInputsDrivingOutputToMutableArray(objc_msgSend((id)objc_msgSend(v14, "connection"), "output"), a2, v27, v28, 0, a6, a7);
                  }
                }
              }
              uint64_t v18 = [v16 countByEnumeratingWithState:&v31 objects:v39 count:16];
            }
            while (v18);
          }
        }
        uint64_t v13 = v26 + 1;
      }
      while (v26 + 1 != v25);
      uint64_t result = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
      uint64_t v25 = result;
    }
    while (result);
  }
  return result;
}

uint64_t gr_pipelineStageForNodeOutput(void *a1, uint64_t a2)
{
  int v3 = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "indexOfInputWhichDrivesThisOutput");
  signed int v4 = objc_msgSend((id)objc_msgSend(a1, "node"), "inputs");
  if ([v4 count] <= (unint64_t)v3) {
    return 0;
  }
  int v5 = objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v3), "connection");
  return [v5 pipelineStage];
}

uint64_t gr_outputOrInputIsStillImagePipelineStage(void *a1, uint64_t a2, void *a3)
{
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "connection"), "pipelineStage"), "stillImagePipelineStage")) {
    return 1;
  }
  unsigned int v6 = (void *)gr_pipelineStageForNodeOutput(a1, a2);
  return [v6 stillImagePipelineStage];
}

uint64_t gr_outputAndInputShareAPipelineStage(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 1;
  }
  if (!a3) {
    return 1;
  }
  uint64_t v5 = objc_msgSend((id)objc_msgSend(a3, "connection"), "pipelineStage");
  uint64_t v6 = gr_pipelineStageForNodeOutput(a1, a2);
  if (!(v6 | v5)) {
    return 1;
  }
  return [(id)v6 isEqual:v5];
}

BOOL __cs_configurationUsesSourceType_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "sourceType") == *(_DWORD *)(a1 + 32);
}

BOOL cs_configurationChangesAreLiveReconfigurable(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((a1 != 0) != (a2 != 0)) {
    return 0;
  }
  int v3 = (void *)[a1 copy];
  long long v34 = a2;
  signed int v4 = (void *)[a2 copy];
  uint64_t v5 = objc_msgSend((id)objc_msgSend(v3, "connectionConfigurations"), "arrayByAddingObjectsFromArray:", objc_msgSend(v4, "connectionConfigurations"));
  long long v35 = v4;
  int v6 = cs_configurationsTransitionBetweenCenterStageAndManualFraming(v3, v4);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v7 = [v5 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v37;
    double v10 = *MEMORY[0x1E4F1DAD8];
    double v11 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v12 = *MEMORY[0x1E4F1DB28];
    double v13 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v14 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v15 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v37 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v17 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        [v17 setEnabled:1];
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setIrisMovieCaptureSuspended:", 0);
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setPreservesIrisMovieCaptureSuspendedOnSessionStop:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setSettingsID:", 0);
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setExifFocalLengthsByZoomFactor:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setOutputWidth:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setOutputHeight:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setHDRMode:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setQualityPrioritization:", 1);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setDigitalFlashMode:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setRawOutputFormat:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setProcessedOutputFormat:", 0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setFilters:", 0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setSimulatedAperture:", 0.0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPortraitLightingEffectStrength:", 0.0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setSemanticStyle:", 0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectCenter:", v10, v11);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectAspectRatio:", 0.0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectUniqueID:", 0);
        if (objc_msgSend((id)objc_msgSend(v17, "sinkConfiguration"), "sinkType") == 8) {
          objc_msgSend(v17, "setMetadataRectOfInterest:", v12, v13, v14, v15);
        }
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setNonDestructiveCropEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setNormalizedNonDestructiveCropSize:", 0.0, 0.0);
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource"))
        {
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingEnabled:", 0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingControlMode:", 0);
          uint64_t v18 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "requiredFormat"), "formatDictionary"), "mutableCopy");
          [v18 setObject:0 forKeyedSubscript:0x1EFA50D00];
          [v18 setObject:0 forKeyedSubscript:0x1EFA50D80];
          [v18 setObject:0 forKeyedSubscript:0x1EFA50DC0];
          [v18 setObject:0 forKeyedSubscript:0x1EFA50DE0];
          [v18 setObject:0 forKeyedSubscript:0x1EFA50E00];
          uint64_t v19 = [[FigCaptureSourceVideoFormat alloc] initWithFigCaptureStreamFormatDictionary:v18];
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setRequiredFormat:", v19);
        }
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setBackgroundBlurEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setStudioLightingEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setReactionEffectsEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setBackgroundReplacementEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setRequiredMaxFrameRate:", 0.0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setRequiredMinFrameRate:", 0.0);
        if (v6)
        {
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingEnabled:", 0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingControlMode:", 1);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setManualCinematicFramingEnabled:", 0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setVideoZoomFactor:", 0.0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setManualFramingPanningAngleX:", 0.0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setManualFramingPanningAngleY:", 0.0);
        }
      }
      uint64_t v8 = [v5 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }
    while (v8);
  }
  objc_msgSend(v3, "setConfigurationID:", objc_msgSend(v35, "configurationID"));
  [v3 setContinuityCameraIsWired:0];
  [v35 setContinuityCameraIsWired:0];
  [v3 setSuppressVideoEffects:0];
  [v35 setSuppressVideoEffects:0];
  [v3 setSmartStyle:0];
  [v35 setSmartStyle:0];
  int v20 = [v3 isEqual:v35];

  BOOL v21 = 0;
  if (v20)
  {
    int IsConfiguredForBackgroundBlur = cs_configurationIsConfiguredForBackgroundBlur(a1);
    if (IsConfiguredForBackgroundBlur == cs_configurationIsConfiguredForBackgroundBlur(v34))
    {
      int IsConfiguredForStudioLighting = cs_configurationIsConfiguredForStudioLighting(a1);
      if (IsConfiguredForStudioLighting == cs_configurationIsConfiguredForStudioLighting(v34))
      {
        int IsConfiguredForReactionEffects = cs_configurationIsConfiguredForReactionEffects(a1);
        if (IsConfiguredForReactionEffects == cs_configurationIsConfiguredForReactionEffects(v34))
        {
          int IsConfiguredForBackgroundReplacement = cs_configurationIsConfiguredForBackgroundReplacement(a1);
          if (IsConfiguredForBackgroundReplacement == cs_configurationIsConfiguredForBackgroundReplacement(v34))
          {
            uint64_t v26 = cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(a1);
            if ([v26 isEqualToDictionary:cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(v34)])
            {
              uint64_t v27 = objc_msgSend((id)objc_msgSend(a1, "connectionConfigurations"), "count");
              if (v27)
              {
                unint64_t v28 = v27;
                BOOL v21 = 0;
                for (j = 0; j != v28; BOOL v21 = j >= v28)
                {
                  long long v30 = objc_msgSend((id)objc_msgSend(a1, "connectionConfigurations"), "objectAtIndexedSubscript:", j);
                  long long v31 = objc_msgSend((id)objc_msgSend(v34, "connectionConfigurations"), "objectAtIndexedSubscript:", j);
                  LODWORD(v30) = [v30 enabled];
                  if (v30 != [v31 enabled]
                    && (FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(objc_msgSend((id)objc_msgSend(v31, "sinkConfiguration"), "sinkType")) & 1) != 0)
                  {
                    break;
                  }
                  ++j;
                }
              }
              else
              {
                return 1;
              }
              return v21;
            }
          }
        }
      }
    }
    return 0;
  }
  return v21;
}

uint64_t captureSourceRemote_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    fig_log_get_emitter();
LABEL_55:
    FigDebugAssert3();
LABEL_20:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = DerivedStorage;
  if (!CFEqual(a2, @"Clock"))
  {
    if (CFEqual(a2, @"AttributesDictionary"))
    {
      CFRetain(*(CFTypeRef *)(v8 + 32));
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(v8 + 32);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"Formats"))
    {
      CFRetain(*(CFTypeRef *)(v8 + 40));
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(v8 + 40);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"SourceToken"))
    {
      double v13 = (const void *)(v8 + 24);
      if (!*(void *)(v8 + 24)) {
        goto LABEL_28;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v15 = kCFNumberSInt64Type;
    }
    else
    {
      if (CFEqual(a2, @"LockedForConfiguration"))
      {
        if (*(int *)(v8 + 48) <= 0) {
          int v16 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        else {
          int v16 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        uint64_t v17 = *v16;
        *a4 = *v16;
        CFRetain(v17);
        goto LABEL_20;
      }
      if (!CFEqual(a2, @"LockedForConfigurationCount"))
      {
        if (CFEqual(a2, @"ServerConnectionDied"))
        {
          uint64_t v10 = 0;
          if (*(unsigned char *)(v8 + 9)) {
            uint64_t v18 = (uint64_t *)MEMORY[0x1E4F1CFD0];
          }
          else {
            uint64_t v18 = (uint64_t *)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v11 = *v18;
          goto LABEL_9;
        }
        goto LABEL_28;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      double v13 = (const void *)(v8 + 48);
      CFNumberType v15 = kCFNumberSInt32Type;
    }
    uint64_t v10 = 0;
    *a4 = CFNumberCreate(v14, v15, v13);
    goto LABEL_10;
  }
  uint64_t v9 = *(const void **)(v8 + 16);
  if (v9)
  {
    CFRetain(v9);
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 16);
LABEL_9:
    *a4 = v11;
    goto LABEL_10;
  }
LABEL_28:
  if (!CFEqual(a2, @"Clock"))
  {
    v25[0] = 0;
    uint64_t BasicMessage = captureSourceRemote_createBasicMessage(a1, 778268793, v25);
    if (BasicMessage
      || (uint64_t BasicMessage = FigXPCMessageSetCFString(), BasicMessage)
      || (uint64_t BasicMessage = FigXPCRemoteClientSendSyncMessageCreatingReply(), BasicMessage))
    {
      uint64_t v10 = BasicMessage;
      fig_log_get_emitter();
      FigDebugAssert3();
      FigXPCRelease();
      fig_log_get_emitter();
      goto LABEL_57;
    }
    FigXPCRelease();
    fig_log_get_emitter();
    goto LABEL_55;
  }
  if (*(_DWORD *)(v8 + 52) == 2 && (FigCaptureAudiomxdSupportEnabled() & 1) != 0)
  {
    uint64_t v10 = 4294954509;
    goto LABEL_10;
  }
  long long v30 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __captureSourceRemote_copyClock_block_invoke;
  v25[3] = &unk_1E5C25618;
  v25[4] = &v26;
  v25[5] = a1;
  uint64_t v19 = FigAudioDeviceClockRemoteCreateForServerObject();
  uint64_t v10 = v19;
  if (v19 == 1315914603 || v19 == 0)
  {
    int v21 = *((_DWORD *)v27 + 6);
    if (v21)
    {
      if (v21 == 1)
      {
        if (v30)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        HostTimeClock = CMClockGetHostTimeClock();
        if (HostTimeClock) {
          HostTimeClock = CFRetain(HostTimeClock);
        }
        long long v30 = HostTimeClock;
      }
    }
    else if (v30)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    uint64_t v10 = 0;
    *(void *)(v8 + 16) = v30;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  _Block_object_dispose(&v26, 8);
  CFTypeRef v24 = *(CFTypeRef *)(v8 + 16);
  if (v24) {
    CFTypeRef v24 = CFRetain(v24);
  }
  *a4 = v24;
  if (v10)
  {
    fig_log_get_emitter();
LABEL_57:
    FigDebugAssert3();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

void sub_1A589B57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSourceRemote_CopyProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  uint64_t v3 = captureSourceRemote_createBasicMessage(a1, 1668313188, &v6);
  if (!v3)
  {
    uint64_t v3 = FigXPCMessageSetCFString();
    if (!v3)
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3)
      {
        fig_log_get_emitter();
LABEL_9:
        FigDebugAssert3();
        uint64_t v5 = 0;
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = v3;
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t captureSourceRemote_createBasicMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t ObjectID = captureSourceRemote_getObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a3 = v8;
  return v5;
}

uint64_t captureSourceRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t BWStringForOSType(unsigned int a1)
{
  unsigned int v1 = bswap32(a1);
  uint64_t v2 = 3;
  if (HIBYTE(a1)) {
    uint64_t v2 = 4;
  }
  uint64_t v3 = v2 - (a1 < 0x10000) - (a1 < 0x100) - (a1 == 0);
  unsigned int v6 = v1;
  __strncpy_chk();
  v5[v3] = 0;
  return [NSString stringWithCString:v5 encoding:30];
}

__CFString *BWStringFromCaptureDeviceType(int a1)
{
  if ((a1 - 1) > 0x13) {
    return @"Unspecified";
  }
  else {
    return off_1E5C25FB8[a1 - 1];
  }
}

void *cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = objc_msgSend(a1, "sourceConfigurations", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v8 depthDataDeliveryEnabled])
        {
          uint64_t v9 = NSNumber;
          [v8 videoZoomFactor];
          uint64_t v10 = objc_msgSend(v9, "numberWithFloat:");
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v8, "sourceDeviceType")));
          return v2;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  return v2;
}

void multiStreamCameraSourceNode_secondaryScalerServiceQueueCallback(uint64_t a1)
{
}

__CFString *FigCaptureVideoStabilizationStrengthToString(unsigned int a1)
{
  if (a1 > 4) {
    return @"Unknown";
  }
  else {
    return off_1E5C28CD8[a1];
  }
}

unint64_t psn_pixelBufferDimensions(__CVBuffer *a1)
{
  unsigned int Width = CVPixelBufferGetWidth(a1);
  return Width | ((unint64_t)CVPixelBufferGetHeight(a1) << 32);
}

void *fs_updateFrameStatisticsWithFrameMetadata(void *result, void *a2, long long *a3, int a4)
{
  if (result && a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = [result frameStatisticsStorage];
    int v9 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BF8]), "intValue");
    if (v9 == 4) {
      int v46 = *(_DWORD *)(v8 + 164) + 1;
    }
    else {
      int v46 = 0;
    }
    int v10 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EE0]), "intValue");
    int IsContrastBased = FigCaptureStreamFocusingMethodIsContrastBased();
    float v12 = *(float *)(v8 + 196);
    if (a4)
    {
      if (v9 != 2 || IsContrastBased == 0)
      {
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EB0]), "floatValue");
        float v15 = 150.0;
        if (v14 <= 150.0 && v14 >= 0.0) {
          float v15 = v14;
        }
        if (v14 == 0.0) {
          float v17 = v12;
        }
        else {
          float v17 = v15;
        }
        if (v12 == 0.0) {
          float v12 = v17;
        }
        else {
          float v12 = (float)(v12 + v17) * 0.5;
        }
      }
    }
    uint64_t v18 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F54058]];
    if (v18)
    {
      int v19 = [v18 intValue];
      int v20 = v19;
      int v21 = *(_DWORD *)(v8 + 180);
      int v22 = v21 - v19;
      if (v21 - v19 < 0) {
        int v22 = v19 - v21;
      }
      if (v21 != v19 || v9 == 4) {
        int v24 = v22;
      }
      else {
        int v24 = -1;
      }
      int v48 = v24;
      int v25 = *(_DWORD *)(v8 + 188);
      int v26 = (int)(float)((float)(v25 + v19) * 0.5);
      int v27 = v25 - v26;
      if (v27 < 0) {
        int v27 = -v27;
      }
    }
    else
    {
      int v20 = 0;
      int v26 = 0;
      int v27 = -1;
      int v48 = -1;
    }
    int v47 = v27;
    uint64_t v28 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53D98]];
    if (v28)
    {
      int v29 = [v28 intValue];
      int v30 = v29;
      int v31 = *(_DWORD *)(v8 + 172);
      int v32 = v31 - v29;
      if (v31 - v29 < 0) {
        int v32 = v29 - v31;
      }
      if (v31 != v29 || v9 == 4) {
        int v34 = v32;
      }
      else {
        int v34 = -1;
      }
    }
    else
    {
      int v30 = 0;
      int v34 = -1;
    }
    long long v35 = *a3;
    *(void *)(v8 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v8 = v35;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DA0]), "floatValue");
    *(_DWORD *)(v8 + 24) = v36;
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      long long v37 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *(_OWORD *)(v8 + 32) = *MEMORY[0x1E4F1DB20];
      *(_OWORD *)(v8 + 48) = v37;
    }
    *(_DWORD *)(v8 + 64) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54068]), "intValue");
    *(_DWORD *)(v8 + 68) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D88]), "intValue");
    *(_DWORD *)(v8 + 72) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54170]), "intValue");
    *(_DWORD *)(v8 + 76) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54178]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F540F8]), "floatValue");
    *(_DWORD *)(v8 + 80) = v38;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E48]), "doubleValue");
    *(void *)(v8 + 88) = v39;
    *(_DWORD *)(v8 + 96) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C08]), "intValue");
    *(_DWORD *)(v8 + 100) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54388]), "intValue");
    *(_DWORD *)(v8 + 104) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F543A0]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54390]), "floatValue");
    *(_DWORD *)(v8 + 108) = v40;
    if (FigCaptureComputeImageGainFromMetadata()) {
      *(_DWORD *)(v8 + 112) = 2143289344;
    }
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F68]), "floatValue");
    *(_DWORD *)(v8 + 116) = v41;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E38]), "doubleValue");
    *(void *)(v8 + 120) = v42;
    *(_DWORD *)(v8 + 128) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53B98]), "unsignedIntValue");
    *(_DWORD *)(v8 + 132) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BA0]), "unsignedIntValue");
    *(_DWORD *)(v8 + 136) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BD8]), "intValue");
    *(unsigned char *)(v8 + 140) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BB0]), "BOOLValue");
    *(unsigned char *)(v8 + 141) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BC8]), "BOOLValue");
    *(unsigned char *)(v8 + 142) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BB8]), "BOOLValue");
    *(_DWORD *)(v8 + 144) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F540D0]), "intValue");
    *(unsigned char *)(v8 + 148) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F38]), "BOOLValue");
    uint64_t v43 = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F541B0]];
    *(_DWORD *)(v8 + 152) = 0;
    if (v43) {
      FigCaptureComputeImageGainFromMetadata();
    }
    *(_DWORD *)(v8 + 156) = v9;
    *(unsigned char *)(v8 + 160) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BE8]), "BOOLValue");
    *(_DWORD *)(v8 + 164) = v46;
    *(_DWORD *)(v8 + 168) = v10;
    *(_DWORD *)(v8 + 172) = v30;
    *(_DWORD *)(v8 + 176) = v34;
    *(_DWORD *)(v8 + 180) = v20;
    *(_DWORD *)(v8 + 184) = v48;
    *(_DWORD *)(v8 + 188) = v26;
    *(_DWORD *)(v8 + 192) = v47;
    *(float *)(v8 + 196) = v12;
    *(_DWORD *)(v8 + 208) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FA0]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F98]), "floatValue");
    *(_DWORD *)(v8 + 212) = v44;
    *(_DWORD *)(v8 + 216) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FF8]), "intValue");
    *(unsigned char *)(v8 + 220) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C98]), "BOOLValue");
    *(unsigned char *)(v8 + 221) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C68]), "BOOLValue");
    *(_WORD *)(v8 + 222) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C70]), "unsignedShortValue");
    *(_WORD *)(v8 + 224) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C48]), "unsignedShortValue");
    *(_WORD *)(v8 + 226) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C10]), "unsignedShortValue");
    *(_WORD *)(v8 + 228) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C28]), "unsignedShortValue");
    *(_WORD *)(v8 + 230) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C20]), "unsignedShortValue");
    *(_WORD *)(v8 + 232) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C18]), "unsignedShortValue");
    *(_WORD *)(v8 + 234) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C88]), "unsignedShortValue");
    *(_WORD *)(v8 + 236) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C80]), "unsignedShortValue");
    *(_WORD *)(v8 + 238) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C78]), "unsignedShortValue");
    *(_DWORD *)(v8 + 240) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C90]), "unsignedIntValue");
    *(_DWORD *)(v8 + 244) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D50]), "unsignedIntValue");
    objc_msgSend(v7, "_setAEStatistics:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BD0]));
    objc_msgSend(v7, "_setDisplayStrobeRGBEstimate:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DF0]));
    objc_msgSend(v7, "_setColorCorrectionMatrix:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D70]));
    uint64_t result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
    if (result == 1)
    {
      uint64_t result = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F54100]];
      if (!result) {
        return result;
      }
      uint64_t result = (void *)[result floatValue];
    }
    else
    {
      int v45 = *(_DWORD *)(v8 + 80);
    }
    *(_DWORD *)(v8 + 84) = v45;
  }
  return result;
}

uint64_t FigCaptureBinaryPlistGetTypeForObjectAtOffset(void *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(*a1 + a2);
  if (v2 <= 0x23) {
    return *(unsigned __int8 *)(*a1 + a2);
  }
  else {
    return v2 & 0xF0;
  }
}

__n64 FigCaptureBinaryPlistGetRealForObjectAtOffset(void *a1, uint64_t a2)
{
  unsigned int v2 = (unsigned __int8 *)(*a1 + a2);
  unsigned int v3 = *v2;
  if (v3 <= 0x20)
  {
    result.n64_f64[0] = 0.0;
    switch(*v2)
    {
      case 8u:
        return result;
      case 9u:
        result.n64_f64[0] = 1.0;
        return result;
      case 0x10u:
        result.n64_u8[0] = v2[1];
        result.n64_f64[0] = (double)result.n64_u64[0];
        return result;
      case 0x11u:
        unsigned int v5 = bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16;
        goto LABEL_14;
      case 0x12u:
        unsigned int v5 = bswap32(*(_DWORD *)(v2 + 1));
LABEL_14:
        result.n64_f64[0] = (double)v5;
        return result;
      case 0x13u:
        result.n64_f64[0] = (double)(uint64_t)bswap64(*(void *)(v2 + 1));
        return result;
      default:
        goto LABEL_18;
    }
  }
  if (*v2 > 0x22u)
  {
    if (v3 != 35 && v3 != 48) {
      goto LABEL_18;
    }
    result.n64_f64[0] = COERCE_DOUBLE(bswap64(*(void *)(v2 + 1)));
  }
  else
  {
    if (v3 != 33)
    {
      if (v3 == 34)
      {
        result.n64_f64[0] = COERCE_FLOAT(bswap32(*(_DWORD *)(v2 + 1)));
        return result;
      }
LABEL_18:
      abort();
    }
    _H0 = bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16;
    __asm { FCVT            D0, H0 }
  }
  return result;
}

uint64_t FigCaptureBinaryPlistGetIntForObjectAtOffset(void *a1, uint64_t a2)
{
  unsigned int v2 = (unsigned __int8 *)(*a1 + a2);
  unsigned int v3 = *v2;
  if (v3 <= 0x20)
  {
    uint64_t result = 0;
    switch(*v2)
    {
      case 8u:
        return result;
      case 9u:
        return 1;
      case 0x10u:
        return v2[1];
      case 0x11u:
        return __rev16(*(unsigned __int16 *)(v2 + 1));
      case 0x12u:
        return bswap32(*(_DWORD *)(v2 + 1));
      case 0x13u:
        return bswap64(*(void *)(v2 + 1));
      default:
        goto LABEL_15;
    }
  }
  if (v3 == 33) {
    return (uint64_t)COERCE_SHORT_FLOAT(bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16);
  }
  if (v3 == 34) {
    return (uint64_t)COERCE_FLOAT(bswap32(*(_DWORD *)(v2 + 1)));
  }
  if (v3 != 35) {
LABEL_15:
  }
    abort();
  return (uint64_t)COERCE_DOUBLE(bswap64(*(void *)(v2 + 1)));
}

void multiStreamCameraSourceNode_primaryScalerServiceQueueCallback(uint64_t a1)
{
}

void __FigCaptureLogCameraStreamingPowerEvent_block_invoke(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add_explicit(&sPendingPowerEventsCount, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  int v2 = *(_DWORD *)(a1 + 60);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 104);
  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 64);
  unsigned int v8 = *(unsigned __int8 *)(a1 + 105);
  int v9 = *(unsigned __int8 *)(a1 + 106);
  int v10 = *(unsigned __int8 *)(a1 + 107);
  CFComparisonResult v11 = figCapturePowerLoggingCameraTypeForPortTypeAndDeviceType(*(const __CFString **)(a1 + 40), v2);
  uint64_t v41 = v6;
  unsigned int v40 = v8;
  if (([v5 isEqualToString:0x1EFA55C00] & 1) != 0
    || [v5 isEqualToString:0x1EFA558C0])
  {
    if (v9) {
      uint64_t v12 = (v2 != 14) | 2u;
    }
    else {
      uint64_t v12 = v2 != 14;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v13 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v14 = [NSNumber numberWithUnsignedChar:v4];
  float v15 = objc_msgSend(v13, "dictionaryWithObjectsAndKeys:", v14, @"Streaming", objc_msgSend(NSNumber, "numberWithInt:", v11), @"CameraType", 0);
  if (v4)
  {
    objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v3), @"PID");
    if (v10)
    {
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 68)), @"PixelFormatIsTenBit");
      LODWORD(v17) = *(_DWORD *)(a1 + 72);
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v17), @"MaximumSupportedFrameRate");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 76)), @"SecondaryInterFrameReferenceEnabled");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)), @"SensorWidth");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 84)), @"SensorHeight");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)), @"VideoCaptureWidth");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 92)), @"VideoCaptureHeight");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 96)), @"BackgroundBlurEnabled");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 97)), @"StudioLightingEnabled");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 98)), @"ReactionEffectsEnabled");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 99)), @"BackgroundReplacementEnabled");
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 100)), @"CenterStageEnabled");
    }
    if (v5) {
      [v15 setObject:v5 forKeyedSubscript:@"ApplicationID"];
    }
  }
  else
  {
    LODWORD(v16) = v7;
    objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v16), @"AverageFramerate");
    if (sCameraStillImageCaptureCounts)
    {
      unsigned int v39 = v12;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v18 = (void *)[(id)sCameraStillImageCaptureCounts allKeys];
      uint64_t v19 = [v18 countByEnumeratingWithState:&v42 objects:v46 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v43;
        do
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v43 != v21) {
              objc_enumerationMutation(v18);
            }
            uint64_t v23 = *(void *)(*((void *)&v42 + 1) + 8 * i);
            int v24 = objc_msgSend((id)objc_msgSend((id)sCameraStillImageCaptureCounts, "objectForKeyedSubscript:", v23), "intValue");
            int v25 = NSNumber;
            float v26 = (float)v24;
            float v27 = log10f((float)v24);
            float v28 = __exp10f((float)(int)(vcvtms_s32_f32(v27) - 1));
            uint64_t v29 = [v25 numberWithInt:(int)(float)(v28 * roundf(v26 / v28))];
            [(id)sCameraStillImageCaptureCounts setObject:v29 forKeyedSubscript:v23];
          }
          uint64_t v20 = [v18 countByEnumeratingWithState:&v42 objects:v46 count:16];
        }
        while (v20);
      }
      float v30 = (float)sCameraStillImageDeferredProcessingCaptureCounts;
      float v31 = log10f((float)sCameraStillImageDeferredProcessingCaptureCounts);
      float v32 = __exp10f((float)(int)(vcvtms_s32_f32(v31) - 1));
      sCameraStillImageDeferredProcessingCaptureCounts = (int)(float)(v32 * roundf(v30 / v32));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithDictionary:", sCameraStillImageCaptureCounts), @"StillImageCaptureCounts");

      sCameraStillImageCaptureCounts = 0;
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", sCameraStillImageDeferredProcessingCaptureCounts), @"StillImageDeferredProcessingCount");
      sCameraStillImageDeferredProcessingCaptureCounts = 0;
      uint64_t v12 = v39;
    }
  }
  objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", v40), @"ContinuityCameraIsWired");
  objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v12), @"ContinuityCameraType");
  if (v41) {
    [v15 setObject:v41 forKeyedSubscript:@"Timestamp"];
  }
  [(id)sCameraStreamingPowerEventsByPortType setObject:v15 forKeyedSubscript:*(void *)(a1 + 40)];
  cpls_logCameraStreamingPowerEvents((void *)[(id)sCameraStreamingPowerEventsByPortType allValues]);
  if (([*(id *)(a1 + 32) isEqualToString:0x1EFA44100] & 1) != 0
    || [*(id *)(a1 + 32) isEqualToString:0x1EFA55980])
  {
    long long v33 = cpls_portTypesReportedStreamingForCameraApp();
    int v34 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v35 = [v33 count];
    uint64_t v36 = v35;
    if (v34)
    {
      if (*(unsigned char *)(a1 + 104))
      {
        if (v35 != 1) {
          goto LABEL_34;
        }
LABEL_31:
        -[FigCapturePowerLogMissingCameraStopEventObserver startObserving](sMissingCameraStopEventObserver);
        goto LABEL_34;
      }
      uint64_t v37 = [v33 count];
      if (v36 == 1) {
        goto LABEL_31;
      }
      if (v37) {
        goto LABEL_34;
      }
    }
    else if (v35)
    {
      goto LABEL_34;
    }
    -[FigCapturePowerLogMissingCameraStopEventObserver stopObserving](sMissingCameraStopEventObserver);
  }
LABEL_34:
  int v38 = *(const void **)(a1 + 32);
  if (v38) {
    CFRelease(v38);
  }
}

CFComparisonResult figCapturePowerLoggingCameraTypeForPortTypeAndDeviceType(const __CFString *a1, int a2)
{
  CFComparisonResult result = CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52DD8], 0);
  if (result)
  {
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52DF0], 0))
    {
      if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52DF8], 0))
      {
        if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52E10], 0))
        {
          if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52E00], 0))
          {
            if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52DE8], 0))
            {
              if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F52DE0], 0)) {
                return 0;
              }
              else {
                return 5;
              }
            }
            else
            {
              return 4;
            }
          }
          else
          {
            return 3;
          }
        }
        else
        {
          return 6;
        }
      }
      else if ((a2 - 2) >= 9)
      {
        return 7;
      }
      else
      {
        return (unint64_t)dword_1A5EFDDA8[a2 - 2];
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void cpls_logCameraStreamingPowerEvents(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)sCameraPowerLogEventQueue);
  int v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", a1, @"Events", 0);
  PLLogRegisteredEvent();
  if (dword_1EB4C55B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a1, "count", v5, v7))
  {
    unint64_t v3 = 0;
    do
    {
      [a1 objectAtIndexedSubscript:v3];
      if (dword_1EB4C55B0)
      {
        uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v3;
    }
    while (objc_msgSend(a1, "count", v6, v8) > v3);
  }
}

void *cpls_portTypesReportedStreamingForCameraApp()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)sCameraPowerLogEventQueue);
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v0 = (void *)sCameraStreamingPowerEventsByPortType;
  uint64_t v1 = [(id)sCameraStreamingPowerEventsByPortType countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        uint64_t v6 = (void *)[(id)sCameraStreamingPowerEventsByPortType objectForKeyedSubscript:v5];
        if ((objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"ApplicationID"), "isEqualToString:", 0x1EFA44100) & 1) != 0|| objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"ApplicationID"), "isEqualToString:", 0x1EFA55980))
        {
          if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"Streaming"), "BOOLValue"))objc_msgSend(v8, "addObject:", v5); {
        }
          }
      }
      uint64_t v2 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  return v8;
}

uint64_t captureSourceRemote_LockForConfiguration()
{
  return 0;
}

void *BWAttachedMediaKeysRequiredBySmartStyleRenderingPipelines(int a1, int a2)
{
  v7[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (a1)
  {
    v7[0] = 0x1EFA748A0;
    v7[1] = 0x1EFA74840;
    v7[2] = 0x1EFA68BE0;
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v7, 3));
  }
  if (a2)
  {
    v6[0] = @"HumanFullBodiesMask";
    v6[1] = @"HumanSkinsMask";
    v6[2] = 0x1EFA74700;
    v6[3] = 0x1EFA748E0;
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v6, 4));
  }
  return v4;
}

uint64_t BWCaptureDevicePositionFromPortType(void *a1)
{
  if (([a1 isEqualToString:*MEMORY[0x1E4F52DD8]] & 1) != 0
    || ([a1 isEqualToString:*MEMORY[0x1E4F52DF0]] & 1) != 0
    || ([a1 isEqualToString:*MEMORY[0x1E4F52DE0]] & 1) != 0
    || ([a1 isEqualToString:*MEMORY[0x1E4F52DE8]] & 1) != 0)
  {
    return 1;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF8]]) {
    return 2;
  }
  uint64_t v2 = 2;
  if (([a1 isEqualToString:*MEMORY[0x1E4F52E00]] & 1) == 0)
  {
    if ([a1 isEqualToString:*MEMORY[0x1E4F52E10]]) {
      return 2;
    }
    else {
      return 0;
    }
  }
  return v2;
}

void sub_1A58A67A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t mscsn_setStreamOutputDictionaryHandler(void *a1, uint64_t a2, void *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = (void *)[a3 copy];
    long long v13 = v5;
    uint64_t v14 = a2;
    uint64_t v12 = *MEMORY[0x1E4F553D8];
    v15[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:1];
  }
  else
  {
    uint64_t v10 = a2;
    uint64_t v8 = *MEMORY[0x1E4F553D8];
    uint64_t v9 = *MEMORY[0x1E4F1D260];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  }
  return [a1 setProperty:*MEMORY[0x1E4F54CC8] value:v6];
}

double BWSmartStyleLearningMaxFrameRate()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F55EF8] configurationForVariant:0];
  uint64_t v1 = (void *)[MEMORY[0x1E4F55EF8] tuningParametersForVariant:0];
  if ((int)[v1 learningRate] < 1) {
    double v2 = 1.0;
  }
  else {
    double v2 = (double)(int)[v1 learningRate];
  }
  return (double)(unint64_t)[v0 learningRateMaxFramesPerSecond] / v2;
}

void __FigCaptureSmartStyleSettingsGetSystemStyle_block_invoke(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)[NSString stringWithFormat:@"%@systemstyle", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  uint64_t v3 = (void *)CFPreferencesCopyValue(v2, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v3)
  {
    id v13 = v3;
    uint64_t v4 = [v3 objectForKeyedSubscript:@"CastType"];
    objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", @"CastIntensity"), "floatValue");
    int v6 = v5;
    objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", @"ToneBias"), "floatValue");
    int v8 = v7;
    objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", @"ColorBias"), "floatValue");
    LODWORD(v10) = v9;
    LODWORD(v11) = v6;
    LODWORD(v12) = v8;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = +[FigCaptureSmartStyle styleWithCast:v4 intensity:v11 toneBias:v12 colorBias:v10];
    uint64_t v3 = v13;
  }
}

uint64_t fsss_prefixedSystemStylePreferenceKeyForBundleID(void *a1)
{
  uint64_t v2 = 0x1EFA55AE0;
  if (([a1 isEqualToString:0x1EFA55AE0] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.mediaserverd"] & 1) == 0
    && ([a1 isEqualToString:0x1EFA55940] & 1) == 0
    && ([a1 isEqualToString:0x1EFA55AE0] & 1) == 0
    && ([a1 isEqualToString:0x1EFA55840] & 1) == 0
    && ([a1 isEqualToString:0x1EFA55C60] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.FaceTime.FaceTimeNotificationCenterService"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.VideoConference.AVConferenceTestRunneriOS"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.AVConferenceTestRunnertvOS"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.facetime.legacy"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.facetime.debug"] & 1) == 0)
  {
    if ([a1 hasPrefix:@"com.apple.WebKit"]) {
      uint64_t v2 = 0x1EFA55BC0;
    }
    else {
      uint64_t v2 = (uint64_t)a1;
    }
  }
  if (v2) {
    uint64_t v3 = (__CFString *)v2;
  }
  else {
    uint64_t v3 = @"unknown";
  }
  uint64_t v4 = [(__CFString *)v3 stringByReplacingOccurrencesOfString:@"." withString:@"-"];
  return [NSString stringWithFormat:@"smartStyle/%@/", v4];
}

__CFString *FigCaptureVideoOrientationToString(unsigned int a1)
{
  if (a1 > 4) {
    return @"Unknown";
  }
  else {
    return off_1E5C28CB0[a1];
  }
}

uint64_t captureSource_setPropertyWithDeviceCheck(const void *a1, int a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v11 = DerivedStorage;
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
    if (*(unsigned char *)(v11 + 12)) {
      goto LABEL_20;
    }
    if (a3)
    {
      BOOL v12 = *(void *)(v11 + 80) == a3;
      if (!a2) {
        goto LABEL_8;
      }
    }
    else
    {
      BOOL v12 = 0;
      if (!a2) {
        goto LABEL_8;
      }
    }
    if (!v12)
    {
LABEL_19:
      FigDebugAssert3();
LABEL_20:
      uint64_t v13 = FigSignalErrorAt();
LABEL_14:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 48));
      return v13;
    }
LABEL_8:
    if (*(uint64_t *)(v11 + 64) > 0)
    {
      if (BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(*(id *)(v11 + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue"))|| objc_msgSend(*(id *)(v11 + 184), "containsObject:", a4))
      {
        uint64_t v13 = captureSource_setPropertyInternal(a1, a4, a5);
        if (v13) {
          FigDebugAssert3();
        }
      }
      else
      {
        uint64_t v13 = 4294954512;
      }
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

BOOL BWDeviceTypeIsExtensionDeviceType(int a1)
{
  return (a1 - 15) < 2;
}

uint64_t FigCaptureRotationDegreesFromOrientation(int a1, int a2, int a3, int a4)
{
  int v8 = FigCaptureCameraRequires180DegreesRotation(a2, a3);
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    switch(a1)
    {
      case 1:
        BOOL v9 = (a3 | a2 & (v8 ^ 1)) == 0;
        goto LABEL_15;
      case 2:
        BOOL v9 = (a3 | a2 & (v8 ^ 1)) == 0;
        goto LABEL_9;
      case 3:
        if (v8) {
          goto LABEL_11;
        }
        goto LABEL_13;
      case 4:
        if (v8) {
          goto LABEL_13;
        }
        goto LABEL_11;
      default:
        goto LABEL_13;
    }
  }
  if (a1 == 2)
  {
LABEL_11:
    unsigned int v10 = 180;
  }
  else
  {
    if (a1 == 4)
    {
      BOOL v9 = a2 == 0;
LABEL_15:
      unsigned int v10 = 90;
      int v11 = 270;
    }
    else
    {
      if (a1 != 3)
      {
LABEL_13:
        unsigned int v10 = 0;
        int v12 = 0;
        goto LABEL_19;
      }
      BOOL v9 = a2 == 0;
LABEL_9:
      unsigned int v10 = 270;
      int v11 = 90;
    }
    if (!v9) {
      unsigned int v10 = v11;
    }
  }
  int v12 = 360;
LABEL_19:
  unsigned int v13 = v12 - v10;
  if (a4) {
    return v13;
  }
  else {
    return v10;
  }
}

uint64_t FigCapturePlatformMountsCamerasInLandscapeOrientation()
{
  return 1;
}

uint64_t FigCaptureCameraRequires180DegreesRotation(int a1, char a2)
{
  char v2 = 0;
  if (a1 && (a2 & 1) == 0)
  {
    if (fcc_frontCameraOrientation_onceToken != -1) {
      dispatch_once(&fcc_frontCameraOrientation_onceToken, &__block_literal_global_112);
    }
    char v2 = fcc_frontCameraOrientation_sFrontCameraOrientation ^ 1;
  }
  return v2 & 1;
}

void *BWCIFilterArrayDescription(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  char v2 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:&stru_1EFA403E0];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    int v6 = "";
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        [v2 appendFormat:@"%s%@", v6, objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7++), "name")];
        int v6 = ", ";
      }
      while (v4 != v7);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      int v6 = ", ";
    }
    while (v4);
  }
  return v2;
}

uint64_t csp_shouldCaptureStillsFromVideoStream(void *a1, void *a2, int a3, int a4)
{
  objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "capturesStillsFromVideoStream");
  [a2 capturesStillsFromVideoStream];
  int v8 = FigCaptureVideoEffectEnabledInGraph(@"backgroundblur", [a1 backgroundBlurEnabled], objc_msgSend(a1, "isBackgroundBlurSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isBackgroundBlurProvidedBySource"), a4, 0);
  int v9 = FigCaptureVideoEffectEnabledInGraph(@"studiolighting", [a1 studioLightingEnabled], objc_msgSend(a1, "isStudioLightingSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStudioLightingProvidedBySource"), a4, 0);
  int v10 = FigCaptureVideoEffectEnabledInGraph(@"backgroundreplacement", [a1 backgroundReplacementEnabled], objc_msgSend(a1, "isBackgroundReplacementSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isBackgroundReplacementProvidedBySource"), a4, 0);
  if (a4) {
    return [a2 capturesStillsFromVideoStream] & (a3 ^ 1) | v8 | v9 | v10;
  }
  else {
    return 0;
  }
}

uint64_t FigCaptureVideoEffectEnabledInGraph(uint64_t a1, int a2, int a3, int a4, int a5, unsigned char *a6)
{
  int v6 = a3 & ~(a4 | a5);
  if (a6) {
    *a6 = v6;
  }
  return (v6 | a2) & (a4 ^ 1u);
}

uint64_t cs_configurationIsConfiguredForStudioLighting(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v1 = (void *)[a1 connectionConfigurations];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = 0;
    char v5 = 0;
    int v6 = 0;
    char v7 = 0;
    uint64_t v8 = *(void *)v16;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v1);
        }
        int v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "studioLightingEnabled")) {
          v4 |= [a1 suppressVideoEffects] ^ 1;
        }
        char v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isStudioLightingProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isStudioLightingSupported"))
        {
          if ([v10 stillImageSinkConfiguration] || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            int v6 = 1;
            char v7 = 1;
          }
          else
          {
            int v6 = 1;
          }
        }
        v5 |= v11;
        if (v4 & v6 & 1) != 0 && (v7)
        {
          LOBYTE(v6) = 1;
          char v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      uint64_t v12 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v3 = v12;
    }
    while (v12);
LABEL_20:
    if (v5) {
      return 1;
    }
  }
  else
  {
    char v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph(@"studiolighting", v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t cs_configurationIsConfiguredForBackgroundReplacement(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v1 = (void *)[a1 connectionConfigurations];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = 0;
    char v5 = 0;
    int v6 = 0;
    char v7 = 0;
    uint64_t v8 = *(void *)v16;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v1);
        }
        int v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "backgroundReplacementEnabled")) {
          v4 |= [a1 suppressVideoEffects] ^ 1;
        }
        char v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isBackgroundReplacementProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isBackgroundReplacementSupported"))
        {
          if ([v10 stillImageSinkConfiguration] || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            int v6 = 1;
            char v7 = 1;
          }
          else
          {
            int v6 = 1;
          }
        }
        v5 |= v11;
        if (v4 & v6 & 1) != 0 && (v7)
        {
          LOBYTE(v6) = 1;
          char v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      uint64_t v12 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v3 = v12;
    }
    while (v12);
LABEL_20:
    if (v5) {
      return 1;
    }
  }
  else
  {
    char v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph(@"backgroundreplacement", v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t cs_configurationIsConfiguredForBackgroundBlur(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v1 = (void *)[a1 connectionConfigurations];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = 0;
    char v5 = 0;
    int v6 = 0;
    char v7 = 0;
    uint64_t v8 = *(void *)v16;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v1);
        }
        int v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "backgroundBlurEnabled")) {
          v4 |= [a1 suppressVideoEffects] ^ 1;
        }
        char v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isBackgroundBlurProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isBackgroundBlurSupported"))
        {
          if ([v10 stillImageSinkConfiguration] || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            int v6 = 1;
            char v7 = 1;
          }
          else
          {
            int v6 = 1;
          }
        }
        v5 |= v11;
        if (v4 & v6 & 1) != 0 && (v7)
        {
          LOBYTE(v6) = 1;
          char v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      uint64_t v12 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v3 = v12;
    }
    while (v12);
LABEL_20:
    if (v5) {
      return 1;
    }
  }
  else
  {
    char v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph(@"backgroundblur", v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t flatDictionary_init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

double shmemRegionInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t FigCaptureVideoRangePixelFormatForPixelFormat(uint64_t result)
{
  if ((int)result > 1701722213)
  {
    if ((int)result <= 2019963441)
    {
      if ((int)result <= 1885745711)
      {
        switch(result)
        {
          case 0x656E3866:
            return 1701722230;
          case 0x656E7866:
            return 1701738614;
          case 0x66343230:
            return 2033463856;
        }
        return result;
      }
      if (result == 1885745712) {
        return 1882468912;
      }
      if (result != 1885745714)
      {
        if (result == 2019963440) {
          return 2016686640;
        }
        return result;
      }
      int v2 = 1882468912;
    }
    else
    {
      if ((int)result > 2088265263)
      {
        if ((int)result <= 2100848175)
        {
          if (result != 2088265264)
          {
            if (result == 2088265266) {
              return 2088269362;
            }
            return result;
          }
          int v1 = 2084075056;
          return v1 | 0x400000u;
        }
        if (result == 2100848176) {
          return 2100852272;
        }
        if (result == 2105042480)
        {
          int v1 = 2100852272;
          return v1 | 0x400000u;
        }
        return result;
      }
      if (result != 2019963442)
      {
        if (result == 2037741158) {
          return 2037741171;
        }
        if (result == 2084070960) {
          return 2084075056;
        }
        return result;
      }
      int v2 = 2016686640;
    }
    return v2 | 2u;
  }
  if ((int)result > 792225327)
  {
    if ((int)result > 875704421)
    {
      switch(result)
      {
        case 0x34323066:
          return 875704438;
        case 0x5B386630:
          return 1530426928;
        case 0x5B786630:
          int v1 = 1530426928;
          return v1 | 0x400000u;
      }
    }
    else
    {
      switch(result)
      {
        case 0x2F386630:
          return 792229424;
        case 0x2F786630:
          int v1 = 792229424;
          return v1 | 0x400000u;
        case 0x2F786632:
          return 796423730;
      }
    }
  }
  else if ((int)result > 758670895)
  {
    switch(result)
    {
      case 0x2D386630:
        return 758674992;
      case 0x2D786630:
        int v1 = 758674992;
        return v1 | 0x400000u;
      case 0x2D786632:
        return 762869298;
    }
  }
  else
  {
    switch(result)
    {
      case 0x26386630:
        return 641234480;
      case 0x26786630:
        int v1 = 641234480;
        return v1 | 0x400000u;
      case 0x26786632:
        return 645428786;
    }
  }
  return result;
}

uint64_t FigCaptureFullRangePixelFormatForPixelFormat(uint64_t result)
{
  if ((int)result <= 1701722229)
  {
    if ((int)result > 792229423)
    {
      if ((int)result > 875704437)
      {
        switch(result)
        {
          case 0x34323076:
            return 875704422;
          case 0x5B387630:
            return 1530422832;
          case 0x5B787630:
            int v2 = 1530422832;
            return v2 | 0x400000u;
        }
      }
      else
      {
        switch(result)
        {
          case 0x2F387630:
            return 792225328;
          case 0x2F787630:
            int v2 = 792225328;
            return v2 | 0x400000u;
          case 0x2F787632:
            return 796419634;
        }
      }
    }
    else if ((int)result > 758674991)
    {
      switch(result)
      {
        case 0x2D387630:
          return 758670896;
        case 0x2D787630:
          int v2 = 758670896;
          return v2 | 0x400000u;
        case 0x2D787632:
          return 762865202;
      }
    }
    else
    {
      switch(result)
      {
        case 0x26387630:
          return 641230384;
        case 0x26787630:
          int v2 = 641230384;
          return v2 | 0x400000u;
        case 0x26787632:
          return 645424690;
      }
    }
  }
  else
  {
    if ((int)result <= 2033463855)
    {
      if ((int)result <= 1882468913)
      {
        switch(result)
        {
          case 0x656E3876:
            return 1701722214;
          case 0x656E7876:
            return 1701738598;
          case 0x70343230:
            return 1885745712;
        }
        return result;
      }
      switch(result)
      {
        case 0x70343232:
          int v1 = 1885745712;
          break;
        case 0x78343230:
          return 2019963440;
        case 0x78343232:
          int v1 = 2019963440;
          break;
        default:
          return result;
      }
      return v1 | 2u;
    }
    if ((int)result <= 2088269359)
    {
      switch(result)
      {
        case 0x79343230:
          return 1714696752;
        case 0x79757673:
          return 2037741158;
        case 0x7C387630:
          return 2084070960;
      }
    }
    else
    {
      if ((int)result <= 2100852271)
      {
        if (result != 2088269360)
        {
          if (result == 2088269362) {
            return 2088265266;
          }
          return result;
        }
        int v2 = 2084070960;
        return v2 | 0x400000u;
      }
      if (result == 2100852272) {
        return 2100848176;
      }
      if (result == 2105046576)
      {
        int v2 = 2100848176;
        return v2 | 0x400000u;
      }
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsTenBit(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1651847471)
  {
    if (a1 > 796419631)
    {
      if (a1 > 1278226735)
      {
        if (a1 > 1534621231)
        {
          if (a1 == 1534621232) {
            return result;
          }
          int v3 = 1651587122;
        }
        else
        {
          if (a1 == 1278226736) {
            return result;
          }
          int v3 = 1534617136;
        }
      }
      else
      {
        if (a1 > 796423727)
        {
          if (a1 == 796423728) {
            return result;
          }
          unsigned __int16 v5 = 30258;
        }
        else
        {
          if (a1 == 796419632) {
            return result;
          }
          unsigned __int16 v5 = 26162;
        }
        int v3 = v5 | 0x2F780000;
      }
    }
    else if (a1 > 762865199)
    {
      if (a1 > 762869295)
      {
        if (a1 == 762869296) {
          return result;
        }
        unsigned __int16 v6 = 30258;
      }
      else
      {
        if (a1 == 762865200) {
          return result;
        }
        unsigned __int16 v6 = 26162;
      }
      int v3 = v6 | 0x2D780000;
    }
    else
    {
      if (a1 > 645428783)
      {
        if (a1 == 645428784) {
          return result;
        }
        unsigned __int16 v4 = 30258;
      }
      else
      {
        if (a1 == 645424688) {
          return result;
        }
        unsigned __int16 v4 = 26162;
      }
      int v3 = v4 | 0x26780000;
    }
    goto LABEL_53;
  }
  if (a1 <= 2016686641)
  {
    if (a1 > 1882468913)
    {
      if (a1 > 1885745713)
      {
        if (a1 == 1885745714) {
          return result;
        }
        int v3 = 2016686640;
      }
      else
      {
        if (a1 == 1882468914) {
          return result;
        }
        int v3 = 1885745712;
      }
    }
    else if (a1 > 1701738613)
    {
      if (a1 == 1701738614) {
        return result;
      }
      int v3 = 1882468912;
    }
    else
    {
      if (a1 == 1651847472) {
        return result;
      }
      int v3 = 1701738598;
    }
    goto LABEL_53;
  }
  if (a1 <= 2088265265)
  {
    if (a1 <= 2019963441)
    {
      if (a1 == 2016686642) {
        return result;
      }
      int v3 = 2019963440;
      goto LABEL_53;
    }
    if (a1 == 2019963442) {
      return result;
    }
    unsigned __int16 v7 = 26160;
    goto LABEL_37;
  }
  if (a1 <= 2088269361)
  {
    if (a1 == 2088265266) {
      return result;
    }
    unsigned __int16 v7 = 30256;
LABEL_37:
    int v3 = v7 | 0x7C780000;
LABEL_53:
    if (a1 != v3) {
      return 0;
    }
    return result;
  }
  if (a1 != 2088269362 && a1 != 2105042480)
  {
    int v3 = 2105046576;
    goto LABEL_53;
  }
  return result;
}

uint64_t FigCapturePixelFormatIsFullRange(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1701722229)
  {
    if (a1 > 792229423)
    {
      if (a1 > 875704437)
      {
        if (a1 != 875704438 && a1 != 1530426928)
        {
          int v3 = 1534621232;
          goto LABEL_34;
        }
      }
      else if (a1 != 792229424 && a1 != 796423728)
      {
        int v3 = 796423730;
        goto LABEL_34;
      }
    }
    else if (a1 > 758674991)
    {
      if (a1 != 758674992 && a1 != 762869296)
      {
        int v3 = 762869298;
        goto LABEL_34;
      }
    }
    else if (a1 != 641234480 && a1 != 645428784)
    {
      int v3 = 645428786;
      goto LABEL_34;
    }
  }
  else if (a1 <= 2033463855)
  {
    if (a1 > 1882468913)
    {
      if (a1 != 1882468914 && a1 != 2016686640)
      {
        int v3 = 2016686642;
        goto LABEL_34;
      }
    }
    else if (a1 != 1701722230 && a1 != 1701738614)
    {
      int v3 = 1882468912;
      goto LABEL_34;
    }
  }
  else
  {
    if (a1 > 2088269359)
    {
      if (a1 > 2100852271)
      {
        if (a1 == 2100852272) {
          return result;
        }
        int v3 = 2105046576;
      }
      else
      {
        if (a1 == 2088269360) {
          return result;
        }
        int v3 = 2088269362;
      }
      goto LABEL_34;
    }
    if (a1 != 2033463856 && a1 != 2037741171)
    {
      int v3 = 2084075056;
LABEL_34:
      if (a1 != v3) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsYCbCr(int a1)
{
  uint64_t result = 1;
  if (a1 > 1701722229)
  {
    if (a1 <= 2033463855)
    {
      if (a1 > 1882468913)
      {
        if (a1 > 2016686639)
        {
          if (a1 > 2019963439)
          {
            if (a1 == 2019963440) {
              return result;
            }
            int v4 = 2019963442;
          }
          else
          {
            if (a1 == 2016686640) {
              return result;
            }
            int v4 = 2016686642;
          }
          goto LABEL_81;
        }
        if (a1 != 1882468914 && a1 != 1885745712)
        {
          int v4 = 1885745714;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1714696751)
      {
        if (a1 != 1714696752 && a1 != 1751527984)
        {
          int v4 = 1882468912;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 == 1701722230 || a1 == 1701738598) {
        return result;
      }
      unsigned __int16 v7 = 30838;
      goto LABEL_78;
    }
    if (a1 > 2088265265)
    {
      if (a1 > 2100848175)
      {
        if (a1 > 2105042479)
        {
          if (a1 == 2105042480) {
            return result;
          }
          int v4 = 2105046576;
        }
        else
        {
          if (a1 == 2100848176) {
            return result;
          }
          int v4 = 2100852272;
        }
        goto LABEL_81;
      }
      if (a1 == 2088265266 || a1 == 2088269360) {
        return result;
      }
      unsigned __int16 v8 = 30258;
    }
    else
    {
      if (a1 <= 2084070959)
      {
        if (a1 == 2033463856 || a1 == 2037741158) {
          return result;
        }
        int v4 = 2037741171;
        goto LABEL_81;
      }
      if (a1 <= 2087216687)
      {
        if (a1 == 2084070960) {
          return result;
        }
        int v4 = 2084075056;
        goto LABEL_81;
      }
      if (a1 == 2087216688) {
        return result;
      }
      unsigned __int16 v8 = 26160;
    }
    int v4 = v8 | 0x7C780000;
    goto LABEL_81;
  }
  if (a1 > 792225327)
  {
    if (a1 <= 875704421)
    {
      if (a1 > 796419631)
      {
        if (a1 > 796423727)
        {
          if (a1 == 796423728) {
            return result;
          }
          unsigned __int16 v3 = 30258;
        }
        else
        {
          if (a1 == 796419632) {
            return result;
          }
          unsigned __int16 v3 = 26162;
        }
        int v4 = v3 | 0x2F780000;
        goto LABEL_81;
      }
      if (a1 != 792225328 && a1 != 792229424)
      {
        int v4 = 795371056;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1530426927)
    {
      if (a1 <= 1534621231)
      {
        if (a1 == 1530426928) {
          return result;
        }
        int v4 = 1534617136;
        goto LABEL_81;
      }
      if (a1 == 1534621232) {
        return result;
      }
      unsigned __int16 v7 = 14438;
LABEL_78:
      int v4 = v7 | 0x656E0000;
      goto LABEL_81;
    }
    if (a1 == 875704422 || a1 == 875704438) {
      return result;
    }
    int v4 = 1530422832;
LABEL_81:
    if (a1 != v4) {
      return 0;
    }
    return result;
  }
  if (a1 <= 758670895)
  {
    if (a1 > 645424689)
    {
      if (a1 == 645424690 || a1 == 645428784) {
        return result;
      }
      unsigned __int16 v6 = 30258;
    }
    else
    {
      if (a1 == 641230384 || a1 == 641234480) {
        return result;
      }
      unsigned __int16 v6 = 26160;
    }
    int v4 = v6 | 0x26780000;
    goto LABEL_81;
  }
  if (a1 > 762865199)
  {
    if (a1 > 762869295)
    {
      if (a1 == 762869296) {
        return result;
      }
      unsigned __int16 v5 = 30258;
    }
    else
    {
      if (a1 == 762865200) {
        return result;
      }
      unsigned __int16 v5 = 26162;
    }
    int v4 = v5 | 0x2D780000;
    goto LABEL_81;
  }
  if (a1 != 758670896 && a1 != 758674992)
  {
    int v4 = 761816624;
    goto LABEL_81;
  }
  return result;
}

uint64_t FigCapturePixelFormatIs422(int a1)
{
  uint64_t result = 1;
  if (a1 > 1882468913)
  {
    if (a1 > 2019963441)
    {
      if (a1 == 2019963442 || a1 == 2088265266) {
        return result;
      }
      int v3 = 2088269362;
    }
    else
    {
      if (a1 == 1882468914 || a1 == 1885745714) {
        return result;
      }
      int v3 = 2016686642;
    }
LABEL_16:
    if (a1 != v3) {
      return 0;
    }
    return result;
  }
  if (a1 > 762869297)
  {
    if (a1 == 762869298 || a1 == 796419634) {
      return result;
    }
    int v3 = 796423730;
    goto LABEL_16;
  }
  if (a1 != 645424690 && a1 != 645428786)
  {
    int v3 = 762865202;
    goto LABEL_16;
  }
  return result;
}

uint64_t FigCapturePixelFormatIsDepthData(int a1)
{
  uint64_t result = 1;
  if (a1 > 1717855599)
  {
    if (a1 > 1751410031)
    {
      if (a1 == 1751410032) {
        return result;
      }
      int v4 = 1751411059;
    }
    else
    {
      if (a1 == 1717855600) {
        return result;
      }
      int v4 = 1717856627;
    }
  }
  else
  {
    if (a1 > 1701734511)
    {
      if (a1 == 1701734512) {
        return result;
      }
      unsigned __int16 v3 = 26739;
    }
    else
    {
      if (a1 == 1701734000) {
        return result;
      }
      unsigned __int16 v3 = 26227;
    }
    int v4 = v3 | 0x656E0000;
  }
  if (a1 != v4) {
    return 0;
  }
  return result;
}

uint64_t __FigCapturePixelFormatWithLeastAverageBandwidth_block_invoke(uint64_t a1, void *a2, void *a3)
{
  float AverageBandwidthInBytesPerPixel = FigCapturePixelFormatGetAverageBandwidthInBytesPerPixel([a2 intValue]);
  float v5 = FigCapturePixelFormatGetAverageBandwidthInBytesPerPixel([a3 intValue]);
  if (AverageBandwidthInBytesPerPixel < v5) {
    return -1;
  }
  else {
    return v5 < AverageBandwidthInBytesPerPixel;
  }
}

float FigCapturePixelFormatGetAverageBandwidthInBytesPerPixel(uint64_t a1)
{
  float v2 = FigCapturePixelFormatBytesPerPixel(a1);
  int CompressionType = FigCapturePixelFormatGetCompressionType(a1);
  if ((CompressionType - 1) < 3) {
    return v2 * 0.5;
  }
  if (CompressionType == 4)
  {
    int LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel(a1);
    float v5 = 2.0;
    if (LossyCompressionLevel)
    {
      int v6 = LossyCompressionLevel;
      uint64_t v7 = FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(a1);
      float v2 = FigCapturePixelFormatBytesPerPixel(v7);
      switch(v6)
      {
        case 3:
          float v5 = 2.3;
          break;
        case 2:
          float v5 = 2.2;
          break;
        case 1:
          float v5 = 2.1;
          break;
      }
    }
    return v2 / v5;
  }
  return v2;
}

float FigCapturePixelFormatBytesPerPixel(uint64_t a1)
{
  uint64_t v1 = a1;
  int LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel(a1);
  if (!LossyCompressionLevel)
  {
    float v6 = 1.0;
    goto LABEL_12;
  }
  int v4 = LossyCompressionLevel;
  if ((int)v1 > 792872768)
  {
    if (v1 == 792872769 || v1 == 2084718401) {
      goto LABEL_10;
    }
    int v5 = 1111970369;
LABEL_9:
    if (v1 == v5) {
      goto LABEL_10;
    }
    int IsTenBit = FigCapturePixelFormatIsTenBit(v1);
    float v12 = 0.625;
    if ((int)v1 > 1751527983)
    {
      if (v1 != 1751527984)
      {
        int v13 = 2087216688;
LABEL_90:
        if (v1 != v13) {
          float v12 = 0.75;
        }
      }
    }
    else if (v1 != 761816624)
    {
      int v13 = 795371056;
      goto LABEL_90;
    }
    int v16 = FigCapturePixelFormatIs422(v1);
    float v17 = 0.5;
    float v18 = 1.0;
    if (v16) {
      float v19 = 1.0;
    }
    else {
      float v19 = 0.5;
    }
    if (v4 == 3)
    {
      if (IsTenBit) {
        float v17 = 0.6;
      }
      float v18 = 0.5;
    }
    else if (v4 == 2)
    {
      float v17 = 0.6;
      float v18 = 0.625;
      if (IsTenBit) {
        float v18 = 0.6;
      }
      else {
        float v17 = v12;
      }
    }
    else
    {
      float v17 = 1.0;
      if (v4 == 1)
      {
        float v18 = 0.8;
        if (!IsTenBit) {
          float v18 = 0.75;
        }
        float v17 = v18;
      }
    }
    float v6 = (float)(v18 + (float)(v19 * v17)) / (float)(v19 + 1.0);
    goto LABEL_11;
  }
  if (v1 != 641877825)
  {
    int v5 = 759318337;
    goto LABEL_9;
  }
LABEL_10:
  float v6 = *(float *)&aGgrr[4 * LossyCompressionLevel];
LABEL_11:
  LODWORD(v1) = FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(v1);
LABEL_12:
  LODWORD(v3) = 4.0;
  if ((int)v1 <= 1652056887)
  {
    if ((int)v1 > 1278226535)
    {
      if ((int)v1 <= 1650943795)
      {
        if ((int)v1 <= 1530426927)
        {
          if ((int)v1 <= 1278226741)
          {
            if (v1 != 1278226536)
            {
              int v7 = 1278226736;
              goto LABEL_157;
            }
            goto LABEL_158;
          }
          if (v1 == 1278226742) {
            goto LABEL_158;
          }
          int v10 = 1530422832;
          goto LABEL_133;
        }
        if ((int)v1 > 1534621231)
        {
          if (v1 != 1534621232)
          {
            if (v1 != 1647392369)
            {
              int v7 = 1647719528;
              goto LABEL_157;
            }
            goto LABEL_158;
          }
          goto LABEL_138;
        }
        if (v1 == 1530426928) {
          goto LABEL_134;
        }
        int v21 = 1534617136;
LABEL_137:
        if (v1 != v21) {
          goto LABEL_164;
        }
        goto LABEL_138;
      }
      if ((int)v1 > 1651587121)
      {
        if ((int)v1 <= 1651925815)
        {
          if (v1 == 1651587122)
          {
            LODWORD(v3) = 1.25;
            return v6 * *(float *)&v3;
          }
          int v7 = 1651847472;
          goto LABEL_157;
        }
        if (v1 != 1651925816)
        {
          if (v1 != 1651926376)
          {
            int v7 = 1651927153;
            goto LABEL_157;
          }
          goto LABEL_158;
        }
        goto LABEL_109;
      }
      if ((int)v1 <= 1651519536)
      {
        if (v1 != 1650943796)
        {
          int v7 = 1650946098;
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (v1 == 1651519537)
      {
        LODWORD(v3) = 0.5;
        return v6 * *(float *)&v3;
      }
      int v7 = 1651519798;
LABEL_157:
      if (v1 == v7) {
        goto LABEL_158;
      }
LABEL_164:
      uint64_t v23 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v24 = *MEMORY[0x1E4F1C3B8];
      uint64_t v25 = objc_msgSend(NSString, "stringWithFormat:", @"Unknown pixel format (%c%c%c%c)", v3, BYTE3(v1), BYTE2(v1), BYTE1(v1), v1);
LABEL_163:
      objc_exception_throw((id)[v23 exceptionWithName:v24 reason:v25 userInfo:0]);
    }
    if ((int)v1 > 792872768)
    {
      if ((int)v1 > 875704437)
      {
        if ((int)v1 <= 1278226480)
        {
          if (v1 == 875704438) {
            goto LABEL_134;
          }
          int v8 = 1111970369;
        }
        else
        {
          if (v1 == 1278226481)
          {
            LODWORD(v3) = 0.125;
            return v6 * *(float *)&v3;
          }
          if (v1 == 1278226488) {
            goto LABEL_109;
          }
          int v8 = 1278226534;
        }
        goto LABEL_150;
      }
      if ((int)v1 > 825437746)
      {
        if (v1 == 825437747) {
          goto LABEL_158;
        }
        int v10 = 875704422;
        goto LABEL_133;
      }
      if (v1 == 792872769) {
        return v6 * *(float *)&v3;
      }
      int v7 = 825306677;
      goto LABEL_157;
    }
    if ((int)v1 <= 645424689)
    {
      if ((int)v1 <= 641877824)
      {
        if (v1 == 641230384) {
          goto LABEL_134;
        }
        int v10 = 641234480;
LABEL_133:
        if (v1 != v10) {
          goto LABEL_164;
        }
LABEL_134:
        LODWORD(v3) = 1.5;
        return v6 * *(float *)&v3;
      }
      if (v1 == 641877825) {
        return v6 * *(float *)&v3;
      }
      unsigned __int16 v14 = 26160;
      goto LABEL_105;
    }
    if ((int)v1 > 645428785)
    {
      if (v1 != 645428786)
      {
        int v8 = 759318337;
        goto LABEL_150;
      }
    }
    else if (v1 != 645424690)
    {
      unsigned __int16 v14 = 30256;
LABEL_105:
      int v21 = v14 | 0x26780000;
      goto LABEL_137;
    }
    LODWORD(v3) = 2.5;
    return v6 * *(float *)&v3;
  }
  if ((int)v1 <= 1882468911)
  {
    if ((int)v1 > 1714696751)
    {
      if ((int)v1 > 1735549491)
      {
        if ((int)v1 <= 1751411058)
        {
          if (v1 == 1735549492) {
            goto LABEL_158;
          }
          unsigned __int16 v20 = 25968;
        }
        else
        {
          if ((int)v1 > 1751527983)
          {
            if (v1 == 1751527984) {
              goto LABEL_55;
            }
            if (v1 == 1785950307 || v1 == 1785950320)
            {
              uint64_t v23 = (void *)MEMORY[0x1E4F1CA00];
              uint64_t v24 = *MEMORY[0x1E4F1C3B8];
              uint64_t v25 = objc_msgSend(NSString, "stringWithFormat:", @"This function does not support point cloud formats (%c%c%c%c)", v3, BYTE3(v1), BYTE2(v1), BYTE1(v1), v1);
              goto LABEL_163;
            }
            goto LABEL_164;
          }
          unsigned __int16 v20 = 26995;
        }
        int v7 = v20 | 0x68640000;
        goto LABEL_157;
      }
      if ((int)v1 > 1717856626)
      {
        if (v1 == 1717856627) {
          return v6 * *(float *)&v3;
        }
        int v7 = 1734505012;
        goto LABEL_157;
      }
      if (v1 == 1714696752) {
        goto LABEL_134;
      }
      int v8 = 1717855600;
    }
    else
    {
      if ((int)v1 > 1701734002)
      {
        if ((int)v1 > 1701734514)
        {
          if (v1 != 1701734515)
          {
            if (v1 != 1701738598 && v1 != 1701738614) {
              goto LABEL_164;
            }
            LODWORD(v3) = 1067030938;
            return v6 * *(float *)&v3;
          }
          goto LABEL_158;
        }
        if (v1 == 1701734003) {
          return v6 * *(float *)&v3;
        }
        int v7 = 1701734512;
        goto LABEL_157;
      }
      if ((int)v1 <= 1701722229)
      {
        if (v1 != 1652056888 && v1 != 1701722214) {
          goto LABEL_164;
        }
        goto LABEL_109;
      }
      if (v1 == 1701722230)
      {
LABEL_109:
        LODWORD(v3) = 1.0;
        return v6 * *(float *)&v3;
      }
      int v8 = 1701734000;
    }
LABEL_150:
    if (v1 != v8) {
      goto LABEL_164;
    }
    return v6 * *(float *)&v3;
  }
  if ((int)v1 > 2019963441)
  {
    if ((int)v1 <= 2084718400)
    {
      if ((int)v1 > 2037741157)
      {
        if (v1 != 2037741158)
        {
          int v7 = 2037741171;
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if (v1 == 2019963442) {
        return v6 * *(float *)&v3;
      }
      int v10 = 2033463856;
      goto LABEL_133;
    }
    if ((int)v1 <= 2100852271)
    {
      if (v1 == 2084718401) {
        return v6 * *(float *)&v3;
      }
      unsigned __int16 v9 = 26160;
      goto LABEL_132;
    }
    if (v1 != 2105046576 && v1 != 2105042480)
    {
      unsigned __int16 v9 = 30256;
LABEL_132:
      int v10 = v9 | 0x7D380000;
      goto LABEL_133;
    }
LABEL_138:
    LODWORD(v3) = 1.875;
    return v6 * *(float *)&v3;
  }
  if ((int)v1 <= 1919379251)
  {
    if ((int)v1 > 1885745711)
    {
      if (v1 == 1885745712) {
        goto LABEL_158;
      }
      int v15 = 1885745714;
    }
    else
    {
      if (v1 == 1882468912) {
        goto LABEL_158;
      }
      int v15 = 1882468914;
    }
    if (v1 == v15)
    {
      LODWORD(v3) = 1076552008;
      return v6 * *(float *)&v3;
    }
    goto LABEL_164;
  }
  if ((int)v1 <= 2016686639)
  {
    if (v1 != 1919379252)
    {
      int v7 = 1932996149;
      goto LABEL_157;
    }
LABEL_158:
    LODWORD(v3) = 2.0;
    return v6 * *(float *)&v3;
  }
  if (v1 == 2016686640)
  {
LABEL_55:
    LODWORD(v3) = 3.0;
    return v6 * *(float *)&v3;
  }
  if (v1 != 2016686642)
  {
    if (v1 != 2019963440) {
      goto LABEL_164;
    }
    goto LABEL_55;
  }
  return v6 * *(float *)&v3;
}

uint64_t FigCapturePixelFormatGetLossyCompressionLevel(int a1)
{
  if (a1 <= 796419631)
  {
    if (a1 <= 762869295)
    {
      if (a1 > 761816623)
      {
        if (a1 == 761816624 || a1 == 762865200) {
          return 1;
        }
        int v1 = 762865202;
      }
      else
      {
        if (a1 == 758670896 || a1 == 758674992) {
          return 1;
        }
        int v1 = 759318337;
      }
      return a1 == v1;
    }
    if (a1 > 792229423)
    {
      if (a1 == 792229424 || a1 == 792872769) {
        return 2;
      }
      int v3 = 795371056;
    }
    else
    {
      if (a1 == 762869296 || a1 == 762869298) {
        return 1;
      }
      int v3 = 792225328;
    }
    goto LABEL_31;
  }
  uint64_t v2 = 3;
  if (a1 <= 2084718400)
  {
    if (a1 <= 796423729)
    {
      if (a1 == 796419632 || a1 == 796419634) {
        return 2;
      }
      int v3 = 796423728;
LABEL_31:
      if (a1 != v3) {
        return 0;
      }
      return 2;
    }
    if (a1 == 796423730) {
      return 2;
    }
    if (a1 == 2084070960) {
      return v2;
    }
    int v5 = 2084075056;
LABEL_37:
    if (a1 == v5) {
      return v2;
    }
    return 0;
  }
  if (a1 > 2088265265)
  {
    if (a1 != 2088265266 && a1 != 2088269360)
    {
      unsigned __int16 v4 = 30258;
      goto LABEL_36;
    }
  }
  else if (a1 != 2084718401 && a1 != 2087216688)
  {
    unsigned __int16 v4 = 26160;
LABEL_36:
    int v5 = v4 | 0x7C780000;
    goto LABEL_37;
  }
  return v2;
}

uint64_t FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(uint64_t a1)
{
  uint64_t v1 = 641234480;
  if ((int)a1 > 796419631)
  {
    if ((int)a1 > 2084718400)
    {
      if ((int)a1 > 2088265265)
      {
        if (a1 != 2088265266)
        {
          if (a1 == 2088269360) {
            return 645428784;
          }
          if (a1 == 2088269362)
          {
LABEL_39:
            unsigned __int16 v2 = 30258;
            return v2 | 0x26780000u;
          }
          return a1;
        }
        return 645424690;
      }
      if (a1 == 2084718401) {
        return 641877825;
      }
      if (a1 == 2087216688) {
        return 1751527984;
      }
      if (a1 != 2088265264) {
        return a1;
      }
    }
    else
    {
      if ((int)a1 > 796423729)
      {
        if (a1 != 796423730)
        {
          if (a1 != 2084070960)
          {
            if (a1 != 2084075056) {
              return a1;
            }
            return v1;
          }
          return 641230384;
        }
        goto LABEL_39;
      }
      if (a1 != 796419632)
      {
        if (a1 != 796419634)
        {
          if (a1 != 796423728) {
            return a1;
          }
          return 645428784;
        }
        return 645424690;
      }
    }
LABEL_40:
    unsigned __int16 v2 = 26160;
    return v2 | 0x26780000u;
  }
  if ((int)a1 > 762869295)
  {
    if ((int)a1 <= 792229423)
    {
      if (a1 != 762869296)
      {
        if (a1 != 762869298)
        {
          if (a1 != 792225328) {
            return a1;
          }
          return 641230384;
        }
        goto LABEL_39;
      }
      return 645428784;
    }
    if (a1 == 792229424) {
      return v1;
    }
    if (a1 != 792872769)
    {
      if (a1 == 795371056) {
        return 1751527984;
      }
      return a1;
    }
    return 641877825;
  }
  if ((int)a1 > 761816623)
  {
    if (a1 != 761816624)
    {
      if (a1 != 762865200)
      {
        if (a1 != 762865202) {
          return a1;
        }
        return 645424690;
      }
      goto LABEL_40;
    }
    return 1751527984;
  }
  if (a1 == 758670896) {
    return 641230384;
  }
  if (a1 != 758674992)
  {
    if (a1 != 759318337) {
      return a1;
    }
    return 641877825;
  }
  return v1;
}

void *FigCaptureCompressedPixelFormatsForPixelFormat(uint64_t a1, int a2, int a3)
{
  float v6 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ((a3 & 0x80000000) == 0)
  {
    signed int v7 = 0;
    int v8 = a3 + 1;
    do
    {
      uint64_t v9 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", FigCaptureCompressedPixelFormatForPixelFormat(a1, a2, v7));
      if (([v6 containsObject:v9] & 1) == 0) {
        [v6 addObject:v9];
      }
      ++v7;
    }
    while (v8 != v7);
  }
  return v6;
}

uint64_t FigCaptureCompressedPixelFormatForPixelFormat(uint64_t a1, int a2, signed int a3)
{
  uint64_t v5 = a1;
  if (!FigCapturePixelFormatIsYCbCr(a1))
  {
    if ((int)v5 <= 792872768)
    {
      if (v5 != 641877825)
      {
        int v10 = 759318337;
LABEL_31:
        if (v5 != v10) {
          return v5;
        }
      }
    }
    else if (v5 != 792872769 && v5 != 2084718401)
    {
      int v10 = 1111970369;
      goto LABEL_31;
    }
    if (a2 == 4 && a3 < 4)
    {
      unsigned __int16 v14 = "AGB&AGB-AGB/AGB|";
      return *(unsigned int *)&v14[4 * a3];
    }
    return v5;
  }
  int v6 = FigCapturePixelFormatIs422(v5);
  int IsTenBit = FigCapturePixelFormatIsTenBit(v5);
  int v8 = 1;
  if ((int)v5 > 1751527983)
  {
    if (v5 == 1751527984) {
      goto LABEL_13;
    }
    int v9 = 2087216688;
  }
  else
  {
    if (v5 == 761816624) {
      goto LABEL_13;
    }
    int v9 = 795371056;
  }
  if (v5 != v9) {
    int v8 = 0;
  }
LABEL_13:
  int IsFullRange = FigCapturePixelFormatIsFullRange(v5);
  if ((v6 & IsTenBit) == 1)
  {
    BOOL v13 = a2 == 4 && a3 < 4;
    if (IsFullRange)
    {
      if (v13)
      {
        unsigned __int16 v14 = "2fx&2fx-2fx/2fx|2vx&2vx-2vx/2vx|0fx&0fx-0fx/0fx|0vx&0vx-0vx/0vx|02fh0fh-0fh/0fh|0f8&0f8-0f8/0f8|0v8&0v8-0v"
              "8/0v8|AGB&AGB-AGB/AGB|";
        return *(unsigned int *)&v14[4 * a3];
      }
    }
    else if (v13)
    {
      unsigned __int16 v14 = "2vx&2vx-2vx/2vx|0fx&0fx-0fx/0fx|0vx&0vx-0vx/0vx|02fh0fh-0fh/0fh|0f8&0f8-0f8/0f8|0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
      return *(unsigned int *)&v14[4 * a3];
    }
  }
  else
  {
    if (IsTenBit)
    {
      if (!IsFullRange)
      {
        switch(a2)
        {
          case 1:
            int v17 = 1530422832;
            break;
          case 4:
            if (a3 >= 4) {
              return v5;
            }
            unsigned __int16 v14 = "0vx&0vx-0vx/0vx|02fh0fh-0fh/0fh|0f8&0f8-0f8/0f8|0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
            return *(unsigned int *)&v14[4 * a3];
          case 2:
            int v17 = 2100848176;
            break;
          default:
            return v5;
        }
        return v17 | 0x401000u;
      }
      switch(a2)
      {
        case 1:
          int v15 = 1530422832;
          break;
        case 4:
          if (a3 >= 4) {
            return v5;
          }
          unsigned __int16 v14 = "0fx&0fx-0fx/0fx|0vx&0vx-0vx/0vx|02fh0fh-0fh/0fh|0f8&0f8-0f8/0f8|0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
          return *(unsigned int *)&v14[4 * a3];
        case 2:
          int v15 = 2100848176;
          break;
        default:
          return v5;
      }
      return v15 | 0x400000u;
    }
    if (v8)
    {
      if (a2 == 4 && a3 < 4)
      {
        unsigned __int16 v14 = "02fh0fh-0fh/0fh|0f8&0f8-0f8/0f8|0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
        return *(unsigned int *)&v14[4 * a3];
      }
    }
    else
    {
      if (!IsFullRange)
      {
        switch(a2)
        {
          case 1:
            int v18 = 1530422832;
            break;
          case 4:
            if (a3 >= 4) {
              return v5;
            }
            unsigned __int16 v14 = "0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
            return *(unsigned int *)&v14[4 * a3];
          case 2:
            int v18 = 2100848176;
            break;
          default:
            return v5;
        }
        return v18 | 0x1000u;
      }
      switch(a2)
      {
        case 1:
          return 1530422832;
        case 4:
          if (a3 >= 4) {
            return v5;
          }
          unsigned __int16 v14 = "0f8&0f8-0f8/0f8|0v8&0v8-0v8/0v8|AGB&AGB-AGB/AGB|";
          return *(unsigned int *)&v14[4 * a3];
        case 2:
          return 2100848176;
      }
    }
  }
  return v5;
}

uint64_t FigCapturePixelFormatIs16Bit(int a1)
{
  uint64_t result = 1;
  if (a1 > 1751527983)
  {
    if (a1 == 1751527984) {
      return result;
    }
    int v3 = 2087216688;
  }
  else
  {
    if (a1 == 761816624) {
      return result;
    }
    int v3 = 795371056;
  }
  if (a1 != v3) {
    return 0;
  }
  return result;
}

uint64_t captureSourceRemote_UnlockForConfiguration()
{
  uint64_t v0 = (_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  if ((FigAtomicDecrement32() & 0x80000000) != 0) {
    *uint64_t v0 = 0;
  }
  return 0;
}

void fvcd_estimateOISOutputImageSNR(void *a1)
{
  unsigned __int16 v2 = (void *)[a1 portType];
  if ([v2 isEqualToString:*MEMORY[0x1E4F52DF0]]) {
    float v3 = 0.125;
  }
  else {
    float v3 = 0.25;
  }
  float v4 = (float)[a1 conversionGain] * 0.000015259;
  float v5 = (float)objc_msgSend(a1, "readNoise_1x") * 0.000015259;
  unsigned int v6 = objc_msgSend(a1, "readNoise_8x");
  [a1 integrationTime];
  *(float *)&double v7 = v7;
  float v8 = *(float *)&v7 / v3;
  unsigned int v9 = [a1 aeAverage];
  [a1 gain];
  float v11 = v10 * v8;
  int v12 = vcvts_n_s32_f32(v11, 8uLL);
  if (v12 >= 2048) {
    int v12 = 2048;
  }
  float v13 = (float)((float)v9 / v11) / v4;
  if (v12 >= 257)
  {
    if (v12 <= 0x7FF) {
      float v5 = v5
    }
         + (float)((float)((float)((float)(v5 - (float)((float)v6 * 0.000015259)) * -256.0)
                         + (float)((float)(v5 - (float)((float)v6 * 0.000015259)) * (float)v12))
                 / -1792.0);
    else {
      float v5 = (float)v6 * 0.000015259;
    }
  }
  if (v13 != 0.0) {
    log10f(v13 / sqrtf(v13 + (float)(v5 * v5)));
  }
}

uint64_t BWPortTypeToDisplayString(void *a1, const char *a2)
{
  return [a1 stringByReplacingOccurrencesOfString:@"PortType" withString:&stru_1EFA403E0];
}

void *FigCaptureConnectionConfigurationWithSinkType(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(a1);
    }
    float v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "sinkConfiguration"), "sinkType") == a2) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresFaceTracking(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F218A8];
  return [v1 containsObject:v2];
}

BOOL __csp_filterConnectionConfigurationsForSourceDeviceTypes_block_invoke(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 36);
  return [a2 underlyingDeviceType] == v4
      || [a2 underlyingDeviceType] == v3;
}

void *FigCaptureUnderlyingDeviceTypesFromConnectionConfigurations(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v6), "underlyingDeviceType"));
        if (([v2 containsObject:v7] & 1) == 0) {
          [v2 addObject:v7];
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return v2;
}

BOOL __FigCaptureConnectionConfigurationsFilterWithUnderlyingDeviceType_block_invoke(uint64_t a1, void *a2)
{
  return [a2 underlyingDeviceType] == *(_DWORD *)(a1 + 32);
}

void *FigCaptureConnectionConfigurationWithSinkTypeAndMediaType(void *a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v6 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)v13;
LABEL_3:
  uint64_t v9 = 0;
  while (1)
  {
    if (*(void *)v13 != v8) {
      objc_enumerationMutation(a1);
    }
    long long v10 = *(void **)(*((void *)&v12 + 1) + 8 * v9);
    if (objc_msgSend((id)objc_msgSend(v10, "sinkConfiguration"), "sinkType") == a2
      && [v10 mediaType] == a3)
    {
      return v10;
    }
    if (v7 == ++v9)
    {
      uint64_t v7 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t FigVideoCaptureSourceCopySupplementalTimeOfFlightCaptureSource(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceCopySupplementalTimeOfFlightCaptureSource_block_invoke;
  v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58B40DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getADPCEDisparityColorPipelineClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__2;
  uint64_t v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADPCEDisparityColorPipelineClass_softClass;
  uint64_t v8 = getADPCEDisparityColorPipelineClass_softClass;
  if (!getADPCEDisparityColorPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADPCEDisparityColorPipelineClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getADPCEDisparityColorPipelineClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A58B4E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id mv2ip_outputMatteInferenceVideoFormat(void *a1, float a2, float a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_alloc_init(BWInferenceVideoFormatRequirements);
  int v6 = [a1 width];
  unsigned int v7 = [a1 height];
  LODWORD(a1) = v7;
  if (a3 != 0.0)
  {
    unint64_t v9 = FigCaptureMetadataUtilitiesEnforceAspectRatioWithStillImageDimensions(v6 | ((unint64_t)v7 << 32), a3);
    int v6 = v9;
    a1 = (void *)HIDWORD(v9);
  }
  [(BWVideoFormatRequirements *)v5 setWidth:(unint64_t)(float)((float)v6 / a2)];
  [(BWVideoFormatRequirements *)v5 setHeight:(unint64_t)(float)((float)(int)a1 / a2)];
  [(BWVideoFormatRequirements *)v5 setSupportedPixelFormats:&unk_1EFB039C8];
  [(BWInferenceVideoFormatRequirements *)v5 setDeviceOriented:0];
  [(BWVideoFormatRequirements *)v5 setBytesPerRowAlignment:64];
  [(BWVideoFormatRequirements *)v5 setWidthAlignment:16];
  [(BWVideoFormatRequirements *)v5 setHeightAlignment:16];
  [(BWVideoFormatRequirements *)v5 setPlaneAlignment:64];
  [(BWVideoFormatRequirements *)v5 setMemoryPoolUseAllowed:0];
  v11[0] = v5;
  return +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1]);
}

unint64_t FigCaptureMetadataUtilitiesEnforceAspectRatioWithStillImageDimensions(uint64_t a1, double a2)
{
  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, 0.0, 0.0, 1.0, 1.0, a2);
  double width = v5.size.width;
  double height = v5.size.height;
  if (CGRectIsNull(v5))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return (int)width | ((unint64_t)(int)height << 32);
}

uint64_t FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  if (a1 && a2 && (a7 < 0.0 || a7 > 0.0))
  {
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.double width = a5;
    v15.size.double height = a6;
    return CGRectIsEmpty(v15);
  }
  else
  {
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
}

uint64_t FigCaptureConnectionConfigurationsFilterWithUnderlyingDeviceType(void *a1, int a2)
{
  LODWORD(v4) = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __FigCaptureConnectionConfigurationsFilterWithBlock_block_invoke;
  v5[3] = &unk_1E5C2B078;
  v5[4] = &v3;
  return objc_msgSend(a1, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithBlock:", v5, MEMORY[0x1E4F143A8], 3221225472, __FigCaptureConnectionConfigurationsFilterWithUnderlyingDeviceType_block_invoke, &__block_descriptor_36_e43_B16__0__FigCaptureConnectionConfiguration_8l, v4));
}

void *ptn_supportedPixelFormats(int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  [v2 addObjectsFromArray:&unk_1EFB02C30];
  objc_msgSend(v2, "addObjectsFromArray:", FigCaptureSupportedPixelFormatsForCompressionType(1, 1, 0, 0));
  objc_msgSend(v2, "addObjectsFromArray:", FigCaptureSupportedCompressedPixelFormatsForSettings(4, a1, 1, 1, 1, 1, 1, 1));
  return v2;
}

void *FigCaptureSupportedCompressedPixelFormatsForSettings(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v16 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (a1 == 4)
  {
    if (!FigCapturePlatformSupportsUniversalCompression()) {
      return v16;
    }
    int v18 = FigCapturePlatformSupportsUniversalLossyCompression();
    if (v18) {
      BOOL v19 = a2 > 0;
    }
    else {
      BOOL v19 = 0;
    }
    if (v18) {
      BOOL v20 = a2 > 1;
    }
    else {
      BOOL v20 = 0;
    }
    if (v18) {
      BOOL v21 = a2 > 2;
    }
    else {
      BOOL v21 = 0;
    }
    if (!a4) {
      goto LABEL_58;
    }
    if (a6)
    {
      [v16 addObjectsFromArray:&unk_1EFB04688];
      if (v19)
      {
        [v16 addObjectsFromArray:&unk_1EFB046A0];
        if (!v20)
        {
LABEL_29:
          if (!v21) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
      else if (!v20)
      {
        goto LABEL_29;
      }
      [v16 addObjectsFromArray:&unk_1EFB046B8];
      if (v21) {
LABEL_30:
      }
        [v16 addObjectsFromArray:&unk_1EFB046D0];
    }
LABEL_31:
    if (!a7) {
      goto LABEL_58;
    }
    [v16 addObjectsFromArray:&unk_1EFB046E8];
    if (v19)
    {
      [v16 addObjectsFromArray:&unk_1EFB04700];
      if (!v20)
      {
LABEL_34:
        if (!v21) {
          goto LABEL_35;
        }
        goto LABEL_53;
      }
    }
    else if (!v20)
    {
      goto LABEL_34;
    }
    [v16 addObjectsFromArray:&unk_1EFB04718];
    if (!v21)
    {
LABEL_35:
      if (!a8) {
        goto LABEL_58;
      }
      goto LABEL_54;
    }
LABEL_53:
    [v16 addObjectsFromArray:&unk_1EFB04730];
    if (!a8) {
      goto LABEL_58;
    }
LABEL_54:
    [v16 addObjectsFromArray:&unk_1EFB04748];
    if (v19)
    {
      [v16 addObjectsFromArray:&unk_1EFB04760];
      if (!v20)
      {
LABEL_56:
        if (!v21) {
          goto LABEL_58;
        }
        goto LABEL_57;
      }
    }
    else if (!v20)
    {
      goto LABEL_56;
    }
    [v16 addObjectsFromArray:&unk_1EFB04778];
    if (v21) {
LABEL_57:
    }
      [v16 addObjectsFromArray:&unk_1EFB04790];
LABEL_58:
    if (!a3) {
      goto LABEL_80;
    }
    if (a6)
    {
      [v16 addObjectsFromArray:&unk_1EFB047A8];
      if (v19)
      {
        [v16 addObjectsFromArray:&unk_1EFB047C0];
        if (!v20)
        {
LABEL_62:
          if (!v21) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }
      }
      else if (!v20)
      {
        goto LABEL_62;
      }
      [v16 addObjectsFromArray:&unk_1EFB047D8];
      if (v21) {
LABEL_63:
      }
        [v16 addObjectsFromArray:&unk_1EFB047F0];
    }
LABEL_64:
    if (!a7) {
      goto LABEL_80;
    }
    [v16 addObjectsFromArray:&unk_1EFB04808];
    if (v19)
    {
      [v16 addObjectsFromArray:&unk_1EFB04820];
      if (!v20)
      {
LABEL_67:
        if (!v21) {
          goto LABEL_68;
        }
        goto LABEL_75;
      }
    }
    else if (!v20)
    {
      goto LABEL_67;
    }
    [v16 addObjectsFromArray:&unk_1EFB04838];
    if (!v21)
    {
LABEL_68:
      if (!a8) {
        goto LABEL_80;
      }
      goto LABEL_76;
    }
LABEL_75:
    [v16 addObjectsFromArray:&unk_1EFB04850];
    if (!a8) {
      goto LABEL_80;
    }
LABEL_76:
    [v16 addObjectsFromArray:&unk_1EFB04868];
    if (v19)
    {
      [v16 addObjectsFromArray:&unk_1EFB04880];
      if (!v20)
      {
LABEL_78:
        if (v21) {
LABEL_79:
        }
          [v16 addObjectsFromArray:&unk_1EFB048B0];
LABEL_80:
        if (!a5 || !a6) {
          return v16;
        }
        [v16 addObjectsFromArray:&unk_1EFB048C8];
        if (v19)
        {
          [v16 addObjectsFromArray:&unk_1EFB048E0];
          if (!v20)
          {
LABEL_84:
            if (!v21) {
              return v16;
            }
            goto LABEL_88;
          }
        }
        else if (!v20)
        {
          goto LABEL_84;
        }
        [v16 addObjectsFromArray:&unk_1EFB048F8];
        if (!v21) {
          return v16;
        }
LABEL_88:
        uint64_t v17 = &unk_1EFB04910;
        goto LABEL_89;
      }
    }
    else if (!v20)
    {
      goto LABEL_78;
    }
    [v16 addObjectsFromArray:&unk_1EFB04898];
    if (!v21) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (a1 == 2)
  {
    if (FigCapturePlatformSupportsHTPC32x4Compression())
    {
      if (a4)
      {
        if (a6) {
          [v16 addObjectsFromArray:&unk_1EFB04628];
        }
        if (a7) {
          [v16 addObjectsFromArray:&unk_1EFB04640];
        }
      }
      if (a3)
      {
        if (a6) {
          [v16 addObjectsFromArray:&unk_1EFB04658];
        }
        if (a7)
        {
          uint64_t v17 = &unk_1EFB04670;
          goto LABEL_89;
        }
      }
    }
  }
  else if (a1 == 1 && FigCapturePlatformSupportsHTPC16x8Compression())
  {
    if (a4)
    {
      if (a6) {
        [v16 addObjectsFromArray:&unk_1EFB045C8];
      }
      if (a7) {
        [v16 addObjectsFromArray:&unk_1EFB045E0];
      }
    }
    if (a3)
    {
      if (a6) {
        [v16 addObjectsFromArray:&unk_1EFB045F8];
      }
      if (a7)
      {
        uint64_t v17 = &unk_1EFB04610;
LABEL_89:
        [v16 addObjectsFromArray:v17];
      }
    }
  }
  return v16;
}

uint64_t FigCapturePlatformSupportsUniversalCompression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformSupportsUniversalCompression;
}

uint64_t FigCapturePlatformSupportsUniversalLossyCompression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformSupportsUniversalLossyCompression;
}

uint64_t FigCapturePlatformSupportsHTPC16x8Compression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformSupportsHTPC16x8Compression;
}

void *FigCaptureSupportedPixelFormatsForCompressionType(int a1, int a2, int a3, int a4)
{
  return FigCaptureSupportedCompressedPixelFormatsForSettings(a1, a4, 1, 1, 0, 1, a2, a3);
}

uint64_t mscsn_streamOutputIndexForOutputID(void *a1)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F55410]]) {
    return 0;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55420]]) {
    return 1;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F553F8]]) {
    return 2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55418]]) {
    return 8;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55428]]) {
    return 3;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55440]]) {
    return 5;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55430]]) {
    return 4;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F553F0]]) {
    return 6;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55408]]) {
    return 7;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55400]]) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], objc_msgSend(NSString, "stringWithFormat:", @"Internal inconsistency, mscsn_streamOutputIndexForOutputID() is not expected to be called with kFigCaptureStreamVideoOutputID_Metadata. Metadata output supports multiple data outputs. Check the call site and update."), 0 reason userInfo]);
  }
  FigDebugAssert3();
  return 0xFFFFFFFFLL;
}

uint64_t FigCapturePixelFormatIs420(int a1)
{
  uint64_t result = 1;
  if (a1 > 1534617135)
  {
    if (a1 > 2084070959)
    {
      if (a1 <= 2088269359)
      {
        if (a1 > 2087216687)
        {
          if (a1 == 2087216688) {
            return result;
          }
          int v3 = 2088265264;
        }
        else
        {
          if (a1 == 2084070960) {
            return result;
          }
          int v3 = 2084075056;
        }
        goto LABEL_52;
      }
      if (a1 <= 2100852271)
      {
        if (a1 == 2088269360) {
          return result;
        }
        int v3 = 2100848176;
        goto LABEL_52;
      }
      if (a1 == 2100852272 || a1 == 2105042480) {
        return result;
      }
      int v3 = 2105046576;
    }
    else
    {
      if (a1 <= 1882468911)
      {
        if (a1 > 1714696751)
        {
          if (a1 == 1714696752) {
            return result;
          }
          int v3 = 1751527984;
        }
        else
        {
          if (a1 == 1534617136) {
            return result;
          }
          int v3 = 1534621232;
        }
        goto LABEL_52;
      }
      if (a1 <= 2016686639)
      {
        if (a1 == 1882468912) {
          return result;
        }
        int v3 = 1885745712;
        goto LABEL_52;
      }
      if (a1 == 2016686640 || a1 == 2019963440) {
        return result;
      }
      int v3 = 2033463856;
    }
LABEL_52:
    if (a1 != v3) {
      return 0;
    }
    return result;
  }
  if (a1 > 792225327)
  {
    if (a1 <= 796423727)
    {
      if (a1 > 795371055)
      {
        if (a1 == 795371056) {
          return result;
        }
        int v3 = 796419632;
      }
      else
      {
        if (a1 == 792225328) {
          return result;
        }
        int v3 = 792229424;
      }
      goto LABEL_52;
    }
    if (a1 <= 875704437)
    {
      if (a1 == 796423728) {
        return result;
      }
      int v3 = 875704422;
      goto LABEL_52;
    }
    if (a1 == 875704438 || a1 == 1530422832) {
      return result;
    }
    int v3 = 1530426928;
    goto LABEL_52;
  }
  if (a1 <= 758670895)
  {
    if (a1 > 645424687)
    {
      if (a1 == 645424688) {
        return result;
      }
      int v3 = 645428784;
    }
    else
    {
      if (a1 == 641230384) {
        return result;
      }
      int v3 = 641234480;
    }
    goto LABEL_52;
  }
  if (a1 <= 761816623)
  {
    if (a1 == 758670896) {
      return result;
    }
    int v3 = 758674992;
    goto LABEL_52;
  }
  if (a1 != 761816624 && a1 != 762865200)
  {
    int v3 = 762869296;
    goto LABEL_52;
  }
  return result;
}

uint64_t BWDeviceModelIsD9x()
{
  uint64_t ModelSpecificName = FigCaptureGetModelSpecificName();
  return [&unk_1EFB03080 containsObject:ModelSpecificName];
}

uint64_t FigCaptureGetModelSpecificName()
{
  if (FigCaptureGetModelSpecificName_sModelNameCheckOnce != -1) {
    dispatch_once(&FigCaptureGetModelSpecificName_sModelNameCheckOnce, &__block_literal_global_15);
  }
  return FigCaptureGetModelSpecificName_sModelNameStr;
}

uint64_t FigCapturePlatformSupportsExclaves()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  BOOL v1 = sPlatformID > 10 && sPlatformVariant == 5;
  return sPlatformID >= 10 && sPlatformVariant == 3 || v1;
}

double fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary(void *a1)
{
  if (a1)
  {
    BOOL v1 = (void *)[a1 objectForKeyedSubscript:@"StillImageStabilization"];
    double v2 = 0.0;
    if (v1)
    {
      int v3 = (void *)[v1 objectForKeyedSubscript:@"IntegrationTimeThresholdDenominator"];
      if (v3)
      {
        [v3 doubleValue];
        return 1.0 / v4;
      }
      else
      {
        FigDebugAssert3();
      }
    }
  }
  else
  {
    FigDebugAssert3();
    return 0.0;
  }
  return v2;
}

void sub_1A58BD2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL FigCaptureMetadataUtilitiesNormalizeCropRect(double a1, double a2, double a3, double a4)
{
  return CGRectIsEmpty(*(CGRect *)&a1);
}

double FigCaptureMetadataUtilitiesGetValidBufferRect()
{
  long long v1 = *MEMORY[0x1E4F1DB20];
  if (FigCFDictionaryGetCGRectIfPresent()) {
    return *(double *)&v1;
  }
  else {
    return 0.0;
  }
}

unint64_t BWPixelBufferDimensionsFromSampleBuffer(opaqueCMSampleBuffer *a1)
{
  if (!a1) {
    return 0;
  }
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (!ImageBuffer) {
    return 0;
  }
  double v2 = ImageBuffer;
  unsigned int Width = CVPixelBufferGetWidth(ImageBuffer);
  return Width | ((unint64_t)CVPixelBufferGetHeight(v2) << 32);
}

uint64_t BWAttachedMediaKeysAvailableOnSmartStyleLearnedFramesOnly()
{
  v1[4] = *MEMORY[0x1E4F143B8];
  v1[0] = @"HumanFullBodiesMask";
  v1[1] = @"HumanSkinsMask";
  v1[2] = 0x1EFA74700;
  v1[3] = 0x1EFA74840;
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v1 count:4];
}

__SecTask *FigCaptureClientIsNonStandardWithSecTask(__SecTask *result)
{
  if (result) {
    return FigCaptureClientHasEntitlementWithSecTask(result, @"com.apple.private.avfoundation.capture.nonstandard-client.allow");
  }
  return result;
}

uint64_t FigCaptureDictionaryRepresentationForDimensions(unint64_t a1)
{
  v4[2] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = HIDWORD(a1);
  v3[0] = @"width";
  v3[1] = @"height";
  v4[0] = [NSNumber numberWithInt:a1];
  v4[1] = [NSNumber numberWithInt:v1];
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:v3 count:2];
}

void captureSource_postNotificationWithPayload(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (uint64_t v7 = DerivedStorage, FigSimpleMutexCheckIsNotLockedOnThisThread(), a2))
  {
    CFRetain(a2);
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v8 = *(NSObject **)(v7 + 56);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSource_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a2;
    block[5] = a1;
    block[6] = a3;
    dispatch_async(v8, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t BWCaptureDevicePositionAndDeviceTypeToPortType(int a1, int a2)
{
  if (a1 == 2)
  {
    switch(a2)
    {
      case 2:
      case 15:
      case 16:
      case 17:
        uint64_t v3 = MEMORY[0x1E4F52DF8];
        return *(void *)v3;
      case 5:
        uint64_t v3 = MEMORY[0x1E4F52E00];
        return *(void *)v3;
      case 7:
      case 11:
        goto LABEL_13;
      default:
        if ((a2 & 0xFFFFFFFE) == 0x12)
        {
LABEL_13:
          uint64_t v3 = MEMORY[0x1E4F52E10];
          return *(void *)v3;
        }
        if (a2 == 20) {
          uint64_t result = *MEMORY[0x1E4F52E00];
        }
        else {
          uint64_t result = 0;
        }
        break;
    }
  }
  else if (a1 == 1)
  {
    uint64_t result = 0;
    switch(a2)
    {
      case 2:
        uint64_t v3 = MEMORY[0x1E4F52DD8];
        return *(void *)v3;
      case 3:
        uint64_t v3 = MEMORY[0x1E4F52DF0];
        return *(void *)v3;
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
        return result;
      case 7:
        goto LABEL_9;
      case 10:
        uint64_t v3 = MEMORY[0x1E4F52DE0];
        return *(void *)v3;
      default:
        if (a2 != 14) {
          return result;
        }
LABEL_9:
        uint64_t v3 = MEMORY[0x1E4F52DE8];
        break;
    }
    return *(void *)v3;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t FigVideoCaptureSourceCreateWithSourceInfo(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, CFTypeRef *a6)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (cs_initializeStatics_onceToken != -1) {
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_93_0);
  }
  FigCaptureSourceGetClassID();
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10)
  {
    uint64_t v114 = v10;
LABEL_144:
    FigDebugAssert3();
    goto LABEL_145;
  }
  CFNumberRef v123 = a6;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 48) = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
  long long v128 = 0u;
  long long v129 = 0u;
  FigCaptureGetCurrentProcessAuditToken(&v128);
  long long v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(DerivedStorage + 16) = *(_OWORD *)a3;
  *(_OWORD *)(DerivedStorage + 32) = v12;
  CGSize v13 = *(CGSize *)(DerivedStorage + 32);
  v170.origin = *(CGPoint *)(DerivedStorage + 16);
  v170.size = v13;
  if (FigCaptureAuditTokenIsValid((uint64_t)&v170))
  {
    CGSize v14 = *(CGSize *)(DerivedStorage + 32);
    v170.origin = *(CGPoint *)(DerivedStorage + 16);
    v170.size = v14;
    *(void *)(DerivedStorage + 72) = FigCaptureCopyClientCodeSigningIdentifier(&v170);
  }
  id v15 = (id)[a2 objectForKeyedSubscript:0x1EFA53CC0];
  *(void *)(DerivedStorage + 104) = v15;
  int v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  CGSize v17 = *(CGSize *)(a3 + 16);
  v170.origin = *(CGPoint *)a3;
  v170.size = v17;
  v169[0] = v128;
  v169[1] = v129;
  char v18 = FigCaptureAuditTokenProcessesAreEqual((long long *)&v170, v169);
  if (v18)
  {
    BOOL v19 = 1;
  }
  else if ((v16 - 17) > 3)
  {
    BOOL v19 = 0;
  }
  else
  {
    CGSize v20 = *(CGSize *)(a3 + 16);
    v170.origin = *(CGPoint *)a3;
    v170.size = v20;
    BOOL v19 = FigCaptureClientIsAllowedToUseMetadataCameras(&v170) != 0;
  }
  *(unsigned char *)(DerivedStorage + 228) = v19;
  unsigned int v21 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"Hidden"), "BOOLValue");
  if ((v18 & 1) == 0)
  {
    CGSize v22 = *(CGSize *)(a3 + 16);
    v170.origin = *(CGPoint *)a3;
    v170.size = v22;
    int v23 = FigCaptureClientIsAllowedToAccessHiddenCameras(&v170) ? 0 : v21;
    if (v23 == 1)
    {
      if (dword_1EB4C4FD0)
      {
        LODWORD(v147.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v147.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v118 = value;
        }
        else {
          unsigned int v118 = value & 0xFFFFFFFE;
        }
        if (v118)
        {
          LODWORD(v169[0]) = 136315138;
          *(void *)((char *)v169 + 4) = "FigVideoCaptureSourceCreateWithSourceInfo";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_148;
    }
  }
  *(void *)uint64_t DerivedStorage = (int)FigAtomicAdd32();
  *(_DWORD *)(DerivedStorage + 8) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"SourceType"), "intValue");
  *(_DWORD *)(DerivedStorage + 88) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Position"), "intValue");
  *(void *)(DerivedStorage + 96) = (id)[a2 objectForKeyedSubscript:0x1EFA53CE0];
  *(void *)(DerivedStorage + 112) = (id)[a2 objectForKeyedSubscript:0x1EFA53D20];
  *(void *)(DerivedStorage + 120) = (id)[a5 h264Settings];
  *(void *)(DerivedStorage + 128) = (id)[a5 hevcSettings];
  CFNumberRef v125 = a2;
  *(void *)(DerivedStorage + 136) = (id)[a2 objectForKeyedSubscript:0x1EFA53D40];
  uint64_t v24 = CMBaseObjectGetDerivedStorage();
  id v25 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v127 = v24;
  unsigned int v26 = objc_msgSend((id)objc_msgSend(*(id *)(v24 + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  unsigned int v126 = v26;
  BOOL v27 = (v26 > 0x14 || ((1 << v26) & 0x100420) == 0) && v26 - 21 < 0xFFFFFFFC;
  [v25 setObject:CMClockGetHostTimeClock() forKeyedSubscript:@"Clock"];
  [v25 setObject:&unk_1EFB022E8 forKeyedSubscript:0x1EFA6BF00];
  [v25 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Connected"];
  [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"Streaming"];
  [v25 setObject:&unk_1EFB02300 forKeyedSubscript:@"MediaType"];
  [v25 setObject:*(void *)(v24 + 96) forKeyedSubscript:@"Formats"];
  long long v133 = 0u;
  long long v134 = 0u;
  *(_OWORD *)type = 0u;
  long long v132 = 0u;
  float v28 = *(void **)(v24 + 96);
  uint64_t v29 = [v28 countByEnumeratingWithState:type objects:v169 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v132;
LABEL_22:
    uint64_t v32 = 0;
    while (1)
    {
      if (*(void *)v132 != v31) {
        objc_enumerationMutation(v28);
      }
      long long v33 = *(void **)(*(void *)&type[8] + 8 * v32);
      if ([v33 isDefaultActiveFormat]) {
        break;
      }
      if (v30 == ++v32)
      {
        uint64_t v30 = [v28 countByEnumeratingWithState:type objects:v169 count:16];
        if (v30) {
          goto LABEL_22;
        }
        goto LABEL_28;
      }
    }
    if (!v33) {
      goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    uint64_t v120 = v122;
    LODWORD(v119) = 0;
    FigDebugAssert3();
    long long v33 = 0;
  }
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v33, @"ActiveFormat", v119, v120);
  int v34 = NSNumber;
  [v33 defaultMinFrameRateForSessionPreset:0];
  [v25 setObject:objc_msgSend(v34 forKeyedSubscript:"numberWithFloat:")];
  uint64_t v35 = NSNumber;
  [v33 defaultMaxFrameRateForSessionPreset:0];
  [v25 setObject:objc_msgSend(v35 forKeyedSubscript:"numberWithFloat:")];
  uint64_t v36 = v127;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
  {
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"AdjustingFocus"];
    uint64_t v37 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v37 setObject:&unk_1EFB022A0 forKeyedSubscript:@"FocusMode"];
    if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"FocusPointOfInterest"), "BOOLValue"))
    {
      CGSize v38 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      v170.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
      v170.size = v38;
      CFDictionaryRef v39 = (const __CFDictionary *)[*(id *)(v127 + 104) objectForKeyedSubscript:@"DefaultContinuousAutoFocusWindowSize"];
      if (v39
        || (CFDictionaryRef v39 = (const __CFDictionary *)[*(id *)(v127 + 104) objectForKeyedSubscript:@"DefaultAutoFocusCenterWindowSize"]) != 0)
      {
        CGSizeMakeWithDictionaryRepresentation(v39, &v170.size);
        CGFloat width = v170.size.width;
        CGFloat height = v170.size.height;
        double x = 0.5 - v170.size.width * 0.5;
        double y = 0.5 - v170.size.height * 0.5;
        v170.origin.double x = x;
        v170.origin.double y = y;
      }
      else
      {
        double x = v170.origin.x;
        double y = v170.origin.y;
        CGFloat width = v170.size.width;
        CGFloat height = v170.size.height;
      }
      [v37 setObject:CGRectCreateDictionaryRepresentation(*(CGRect *)&x) forKeyedSubscript:@"FocusRect"];
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"SmoothFocus"), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC28], @"SmoothFocus"); {
    if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"AutoFocusRangeRestriction"), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", &unk_1EFB02318, @"FocusRangeRestriction");
    }
    objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithDictionary:", v37), @"FocusOperation");
    [v25 setObject:CGRectCreateDictionaryRepresentation(*MEMORY[0x1E4F1DB20]) forKeyedSubscript:@"Option25Changed"];
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"Option25Changed2"];
  }
  [v25 setObject:&unk_1EFB05858 forKeyedSubscript:@"LensPosition"];
  if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))
  {
    CGSize v44 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    v170.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
    v170.size = v44;
    CFDictionaryRef v45 = (const __CFDictionary *)[*(id *)(v127 + 104) objectForKeyedSubscript:@"DefaultAutoExposureCenterWindowSize"];
    if (v45)
    {
      CGSizeMakeWithDictionaryRepresentation(v45, &v170.size);
      __asm { FMOV            V1.2D, #0.5 }
      v170.origin = (CGPoint)vsubq_f64(_Q1, vmulq_f64((float64x2_t)v170.size, _Q1));
    }
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"AdjustingExposure"];
    v168[0] = &unk_1EFB022A0;
    v167[0] = @"ExposureMode";
    v167[1] = @"ExposureRect";
    v168[1] = CGRectCreateDictionaryRepresentation(v170);
    objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v168, v167, 2), @"ExposureOperation");
    memset(&v147, 0, sizeof(v147));
    [v33 defaultMinFrameRateForSessionPreset:0];
    CMTimeMake(&v147, 1, (int)v51);
    CFAllocatorRef v52 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    *(CMTime *)time = v147;
    CFDictionaryRef v53 = CMTimeCopyAsDictionary((CMTime *)time, v52);
    [v25 setObject:CFAutorelease(v53) forKeyedSubscript:@"ActiveMaxExposureDuration"];
    memset(time, 0, 24);
    [v33 defaultMaxFrameRateForSessionPreset:0];
    CMTimeMake((CMTime *)time, 1, (int)v54);
    CMTime v161 = *(CMTime *)time;
    CFDictionaryRef v55 = CMTimeCopyAsDictionary(&v161, v52);
    [v25 setObject:CFAutorelease(v55) forKeyedSubscript:@"ExposureDuration"];
    [v25 setObject:&unk_1EFB02330 forKeyedSubscript:@"ISO"];
    v165 = @"Bias";
    v166 = &unk_1EFB05868;
    objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v166, &v165, 1), @"ExposureTargetBiasOperation");
    [v25 setObject:&unk_1EFB05868 forKeyedSubscript:@"ExposureTargetBias"];
    [v25 setObject:&unk_1EFB05868 forKeyedSubscript:@"ExposureTargetOffset"];
    uint64_t v36 = v127;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"WhiteBalance"), "BOOLValue"))
  {
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"AdjustingWhiteBalance"];
    v163 = @"WhiteBalanceMode";
    v164 = &unk_1EFB022A0;
    objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v164, &v163, 1), @"WhiteBalanceOperation");
    CFNumberRef v56 = (void *)[*(id *)(v36 + 104) objectForKeyedSubscript:@"DefaultWhiteBalanceGains"];
    if (!v56 || (uint64_t v57 = (uint64_t)v56, [v56 length] != 12))
    {
      LODWORD(v170.origin.y) = 0x40000000;
      v170.origin.double x = 0.00781250186;
      uint64_t v57 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v170 length:12];
    }
    [v25 setObject:v57 forKeyedSubscript:@"DeviceWhiteBalanceGains"];
    [v25 setObject:v57 forKeyedSubscript:@"GrayWorldDeviceWhiteBalanceGains"];
  }
  [v25 setObject:MEMORY[0x1E4F1CC08] forKeyedSubscript:@"SceneClassificationConfidences"];
  [v25 setObject:objc_msgSend(MEMORY[0x1E4F1C9E8] forKeyedSubscript:"dictionary")];
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:"), "BOOLValue")) {
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"FlashOverheated"];
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"Torch"), "BOOLValue"))
  {
    uint64_t v58 = MEMORY[0x1E4F1CC28];
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"TorchActive"];
    [v25 setObject:v58 forKeyedSubscript:@"TorchOverheated"];
    [v25 setObject:&unk_1EFB05A58 forKeyedSubscript:@"TorchLevel"];
    [v25 setObject:v58 forKeyedSubscript:@"AutoTorchEnabled"];
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", 0x1EFA4E3C0), "BOOLValue"))objc_msgSend(v25, "setObject:forKeyedSubscript:", &unk_1EFB02318, @"DigitalFlashMode"); {
  unsigned int v59 = v126 - 17;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"GlobalToneMapping"), "BOOLValue"))objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC28], @"GlobalToneMappingEnabled"); {
  uint64_t v60 = MEMORY[0x1E4F1CC28];
  }
  objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC28]);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v60);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38]);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &unk_1EFB02318);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &unk_1EFB02348);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", v60);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", 0));
  v160[0] = @"FlashMode";
  v160[1] = @"HDRMode";
  v161.unsigned int value = (CMTimeValue)&unk_1EFB02318;
  *(void *)&v161.timescale = &unk_1EFB02318;
  v160[2] = @"QualityPrioritization";
  v160[3] = @"DigitalFlashMode";
  v161.epoch = (CMTimeEpoch)&unk_1EFB022E8;
  v162 = &unk_1EFB02318;
  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v161, v160, 4));
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &unk_1EFB05A68);
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &unk_1EFB05A78);
  id v61 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  BOOL v62 = !v27;
  if (v59 <= 3) {
    BOOL v62 = 0;
  }
  if (!v62)
  {
    uint64_t v63 = [MEMORY[0x1E4F1CA48] arrayWithObject:*MEMORY[0x1E4F1F138]];
    uint64_t v64 = v36;
    CFNumberRef v65 = (void *)v63;
    if (objc_msgSend((id)objc_msgSend(*(id *)(v64 + 104), "objectForKeyedSubscript:", @"FaceTracking"), "BOOLValue"))objc_msgSend(v65, "addObject:", *MEMORY[0x1E4F218A8]); {
    v158 = @"MetadataGroup-Face";
    }
    v159 = v65;
    objc_msgSend(v61, "addEntriesFromDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v159, &v158, 1));
    uint64_t v36 = v127;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", 0x1EFA6B600), "BOOLValue"))
  {
    v156 = @"MetadataGroup-SecureEyeRelief";
    uint64_t v155 = *MEMORY[0x1E4F559D0];
    uint64_t v157 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v155 count:1];
    objc_msgSend(v61, "addEntriesFromDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v157, &v156, 1));
  }
  if (v27)
  {
    v153[0] = @"MetadataGroup-MRC";
    CGFloat v66 = *MEMORY[0x1E4F21828];
    v170.origin.double x = *(CGFloat *)MEMORY[0x1E4F21820];
    v170.origin.double y = v66;
    CGFloat v67 = *MEMORY[0x1E4F21838];
    v170.size.CGFloat width = *(CGFloat *)MEMORY[0x1E4F21830];
    v170.size.CGFloat height = v67;
    CFNumberRef v68 = (__CFString *)*MEMORY[0x1E4F21848];
    v171 = (__CFString *)*MEMORY[0x1E4F21840];
    v172 = v68;
    CFNumberRef v69 = (__CFString *)*MEMORY[0x1E4F21858];
    v173 = (__CFString *)*MEMORY[0x1E4F21850];
    v174 = v69;
    CFNumberRef v70 = (__CFString *)*MEMORY[0x1E4F21868];
    v175 = (__CFString *)*MEMORY[0x1E4F21860];
    v176 = v70;
    CFNumberRef v71 = (__CFString *)*MEMORY[0x1E4F21878];
    v177 = (__CFString *)*MEMORY[0x1E4F21870];
    v178 = v71;
    CFNumberRef v72 = (__CFString *)*MEMORY[0x1E4F55998];
    v179 = (__CFString *)*MEMORY[0x1E4F21880];
    v180 = v72;
    CFNumberRef v73 = (__CFString *)*MEMORY[0x1E4F559A8];
    v181 = (__CFString *)*MEMORY[0x1E4F559A0];
    v182 = v73;
    v74 = (__CFString *)*MEMORY[0x1E4F559C0];
    v183 = (__CFString *)*MEMORY[0x1E4F559B0];
    v184 = v74;
    uint64_t v75 = *MEMORY[0x1E4F55990];
    v185 = (__CFString *)*MEMORY[0x1E4F559B8];
    uint64_t v186 = v75;
    v154[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v170 count:20];
    v153[1] = @"MetadataGroup-OfflineVIS";
    uint64_t v152 = *MEMORY[0x1E4F21898];
    v154[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:&v152 count:1];
    objc_msgSend(v61, "addEntriesFromDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v154, v153, 2));
  }
  unsigned int v124 = v21;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"ObjectsDetection"), "BOOLValue"))
  {
    v76 = (void *)[MEMORY[0x1E4F1CA48] array];
    CFNumberRef v77 = (void *)[*(id *)(v36 + 104) objectForKeyedSubscript:@"ObjectsDetectionSupportedMetadataKeys"];
    BOOL v121 = v27;
    if (v77)
    {
      v78 = v77;
      long long v150 = 0u;
      long long v151 = 0u;
      memset(time, 0, sizeof(time));
      uint64_t v79 = [v77 countByEnumeratingWithState:time objects:&v147 count:16];
      if (v79)
      {
        uint64_t v80 = v79;
        uint64_t v81 = **(void **)&time[16];
        do
        {
          uint64_t v82 = 0;
          do
          {
            if (**(void **)&time[16] != v81) {
              objc_enumerationMutation(v78);
            }
            uint64_t v83 = *(void *)(*(void *)&time[8] + 8 * v82);
            if (v83)
            {
              if (cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_onceToken != -1) {
                dispatch_once(&cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_onceToken, &__block_literal_global_161_0);
              }
              uint64_t v84 = [(id)cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_sMetadataKeysByConfigurationKeysDict objectForKeyedSubscript:v83];
              if (v84) {
                [v76 addObject:v84];
              }
            }
            ++v82;
          }
          while (v80 != v82);
          uint64_t v80 = [v78 countByEnumeratingWithState:time objects:&v147 count:16];
        }
        while (v80);
      }
    }
    else
    {
      int v85 = FigCapturePlatformIdentifier();
      uint64_t v86 = *MEMORY[0x1E4F1F128];
      v147.unsigned int value = *MEMORY[0x1E4F1F140];
      *(void *)&v147.timescale = v86;
      uint64_t v87 = *MEMORY[0x1E4F55988];
      v147.epoch = *MEMORY[0x1E4F1F130];
      uint64_t v148 = v87;
      objc_msgSend(v76, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v147, 4));
      if (v59 >= 4)
      {
        uint64_t v146 = *MEMORY[0x1E4F1F148];
        objc_msgSend(v76, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v146, 1));
      }
      if (v85 >= 8)
      {
        uint64_t v88 = *MEMORY[0x1E4F55970];
        *(void *)time = *MEMORY[0x1E4F55968];
        *(void *)&time[8] = v88;
        *(void *)&time[16] = *MEMORY[0x1E4F55978];
        objc_msgSend(v76, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", time, 3));
        if (v85 >= 0xA)
        {
          uint64_t v145 = *MEMORY[0x1E4F55980];
          objc_msgSend(v76, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v145, 1));
        }
      }
    }
    [v61 setObject:v76 forKeyedSubscript:@"MetadataGroup-ObjectDetection"];
    uint64_t v36 = v127;
    BOOL v27 = v121;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"VideoPreviewHistogram"), "BOOLValue"))
  {
    uint64_t v144 = *MEMORY[0x1E4F559E0];
    objc_msgSend(v61, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v144, 1), @"MetadataGroup-Histogram");
  }
  if (v27 && MGGetBoolAnswer())
  {
    uint64_t v143 = *MEMORY[0x1E4F559C8];
    objc_msgSend(v61, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v143, 1), @"MetadataGroup-TextRegion");
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v36 + 104), "objectForKeyedSubscript:", @"SmartCameraSupported"), "BOOLValue"))
  {
    uint64_t v142 = *MEMORY[0x1E4F559D8];
    objc_msgSend(v61, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v142, 1), @"MetadataGroup-SceneClassification");
  }
  if (v27 && MGGetBoolAnswer())
  {
    uint64_t v141 = *MEMORY[0x1E4F559E8];
    objc_msgSend(v61, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v141, 1), @"MetadataGroup-VisualIntelligence");
  }
  [v25 setObject:v61 forKeyedSubscript:@"AvailableMetadataKeyGroups"];

  v139[0] = @"EyeDetection";
  v139[1] = @"BlinkDetection";
  v140[0] = MEMORY[0x1E4F1CC38];
  v140[1] = MEMORY[0x1E4F1CC38];
  v139[2] = @"SmileDetection";
  v140[2] = MEMORY[0x1E4F1CC38];
  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v140, v139, 3), @"SupportedOptionalFaceDetectionFeatures");
  v137[0] = @"EyeDetectionEnabled";
  v137[1] = @"BlinkDetectionEnabled";
  v138[0] = MEMORY[0x1E4F1CC28];
  v138[1] = MEMORY[0x1E4F1CC28];
  v137[2] = @"SmileDetectionEnabled";
  v138[2] = MEMORY[0x1E4F1CC28];
  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v138, v137, 3), @"FaceDetectionConfiguration");
  [v25 setObject:*(void *)(v36 + 112) forKeyedSubscript:@"AVCaptureSessionPresetCompressionSettings"];
  [v25 setObject:*(void *)(v36 + 120) forKeyedSubscript:@"AVH264Settings"];
  [v25 setObject:*(void *)(v36 + 128) forKeyedSubscript:@"AVHEVCSettings"];
  if (v126 <= 9 && ((1 << v126) & 0x310) != 0)
  {
    long long v136 = xmmword_1A5EFD500;
    objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", &v136, 16), @"BravoCameraSelection");
  }
  [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"VideoHDRSuspended"];
  v223.CGFloat width = 1.0;
  v223.CGFloat height = 1.0;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v223);
  [v25 setObject:DictionaryRepresentation forKeyedSubscript:@"NonDestructiveCropSize"];

  uint64_t v90 = v127;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v127 + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue"))
  {
    uint64_t v91 = MEMORY[0x1E4F1CC28];
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"AutoFlashEnabled"];
    uint64_t v92 = v91;
    uint64_t v90 = v127;
    [v25 setObject:v92 forKeyedSubscript:@"FlashActive"];
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v90 + 104), "objectForKeyedSubscript:", @"SIS"), "BOOLValue"))
  {
    uint64_t v93 = MEMORY[0x1E4F1CC28];
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"StillImageStabilizationAutomaticallyEnabled"];
    [v25 setObject:v93 forKeyedSubscript:@"IsStillImageStabilizationScene"];
  }
  v135[0] = @"Level";
  v135[1] = @"Factors";
  *(void *)&long long v136 = &unk_1EFB02318;
  *((void *)&v136 + 1) = &unk_1EFB02360;
  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v136, v135, 2), @"SystemPressureState");
  if ((int)FigCapturePlatformIdentifier() >= 10) {
    [v25 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"DeskViewEnabled"];
  }
  *(void *)(DerivedStorage + 176) = v25;
  *(void *)&v170.size.CGFloat width = @"FocusOperation";
  *(void *)&v170.size.CGFloat height = @"CinematicVideoFocusOperation";
  v171 = @"ExposureOperation";
  v172 = @"ExposureTargetBiasOperation";
  v173 = @"WhiteBalanceOperation";
  v174 = @"TorchLevel";
  v175 = @"AutoTorchEnabled";
  v176 = @"ProvidesStortorgetMetadata";
  v177 = @"AutoAdjustImageControlMode";
  v178 = @"ImageControlMode";
  v179 = @"FaceDrivenAEAFMode";
  v180 = @"StillImageSceneMonitoringConfiguration";
  v181 = @"FaceDetectionConfiguration";
  v182 = @"VideoZoomFactor";
  v183 = @"VideoZoomRampAcceleration";
  v184 = @"SubjectAreaChangeMonitoringEnabled";
  v185 = @"ObservedPropertyCounts";
  uint64_t v186 = 0x1EFA6C060;
  uint64_t v187 = 0x1EFA6C080;
  uint64_t v188 = 0x1EFA6C0A0;
  v189 = @"BravoCameraSelection";
  v190 = @"EligibleFallbackCaptureSourceDeviceTypes";
  v191 = @"NonDestructiveCropSize";
  v192 = @"AutoFlashEnabled";
  v193 = @"StillImageStabilizationAutomaticallyEnabled";
  v194 = @"AutoFocusPositionSensorCalibration";
  v195 = @"ActiveDepthDataMaxFrameRate";
  v198 = @"VideoHDRSuspended";
  v199 = @"DigitalFlashMode";
  v200 = @"GlobalToneMappingEnabled";
  v201 = @"TimeLapseCaptureRate";
  v202 = @"UltraHighResolutionZeroShutterLagEnabled";
  v203 = @"OverheadCameraMode";
  v204 = @"CenterStageRectOfInterest";
  v205 = @"CenterStageFramingMode";
  v206 = @"CenterStageMetadataDeliveryEnabled";
  v207 = @"StartPanningAtPoint";
  v208 = @"PanWithTranslation";
  v209 = @"PortraitEffectStudioLightQuality";
  uint64_t v210 = 0x1EFA6CCA0;
  v211 = @"BackgroundBlurAperture";
  v212 = @"StudioLightingIntensity";
  v213 = @"GesturesEnabled";
  v214 = @"BackgroundReplacementPixelBuffer";
  v215 = @"PerformOneShotFraming";
  v216 = @"ResetFraming";
  v217 = @"CenterStageFieldOfViewRestrictedToWide";
  uint64_t v219 = 0x1EFA6CF20;
  uint64_t v220 = 0x1EFA6CF60;
  v221 = @"DeskViewEnabled";
  uint64_t v197 = 0x1EFA6C0E0;
  *(void *)&v170.origin.double x = @"ActiveMinFrameRate";
  *(void *)&v170.origin.double y = @"ActiveMaxFrameRate";
  v196 = @"ActiveMaxExposureDuration";
  v218 = @"Hidden";
  *(void *)(DerivedStorage + 184) = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:&v170 count:55];
  CFArrayRef v94 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:*(void *)(CMBaseObjectGetDerivedStorage() + 184)];
  [v94 removeObject:@"ActiveMinFrameRate"];
  [v94 removeObject:@"ActiveMaxFrameRate"];
  [v94 removeObject:@"ActiveMaxExposureDuration"];
  [v94 removeObject:0x1EFA6C0E0];
  uint64_t v95 = [v94 removeObject:@"Hidden"];
  *(void *)(DerivedStorage + 192) = v94;
  FigCaptureDeviceGetNotificationCenter(v95, v96);
  uint64_t v97 = FigNotificationCenterAddWeakListener();
  FigCaptureDeviceGetNotificationCenter(v97, v98);
  uint64_t v99 = FigNotificationCenterAddWeakListener();
  if (v99)
  {
    uint64_t v114 = v99;
    goto LABEL_144;
  }
  FigCaptureDeviceGetNotificationCenter(v99, v100);
  uint64_t v101 = FigNotificationCenterAddWeakListener();
  if (v101)
  {
    uint64_t v114 = v101;
    goto LABEL_144;
  }
  FigCaptureDeviceGetNotificationCenter(v101, v102);
  uint64_t v103 = FigNotificationCenterAddWeakListener();
  if (v103)
  {
    uint64_t v114 = v103;
    goto LABEL_144;
  }
  FigCaptureDeviceGetNotificationCenter(v103, v104);
  uint64_t v105 = FigNotificationCenterAddWeakListener();
  if (v105)
  {
    uint64_t v114 = v105;
    goto LABEL_144;
  }
  FigCaptureDeviceGetNotificationCenter(v105, v106);
  uint64_t v107 = FigNotificationCenterAddWeakListener();
  if (v107)
  {
    uint64_t v114 = v107;
    goto LABEL_144;
  }
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v124), @"Hidden");
  uint64_t v108 = objc_msgSend((id)objc_msgSend(v125, "objectForKeyedSubscript:", @"ReadyToUnhide"), "BOOLValue");
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v108), @"ReadyToUnhide");
  uint64_t v109 = objc_msgSend((id)objc_msgSend(v125, "objectForKeyedSubscript:", @"BatteryState"), "integerValue");
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInteger:", v109), @"BatteryState");
  objc_msgSend((id)objc_msgSend(v125, "objectForKeyedSubscript:", @"BatteryLevel"), "floatValue");
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:"), @"BatteryLevel");
  id v110 = +[BWFigCaptureAttachedAccessoriesMonitor sharedAttachedAccessoriesMonitor];
  if (v110)
  {
    CFNumberRef v111 = v110;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v112 = CMNotificationCenterAddListener();
    if (v112)
    {
      uint64_t v114 = v112;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v113 = CMNotificationCenterAddListener();
      if (!v113)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
        if (![*(id *)(DerivedStorage + 176) objectForKeyedSubscript:@"WalletAccessoryConnected"]) {
          objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v111, "walletAccessoryConnected")), @"WalletAccessoryConnected");
        }
        if (![*(id *)(DerivedStorage + 176) objectForKeyedSubscript:@"BatteryPackAccessoryConnected"])objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v111, "batteryPackAccessoryConnected")), @"BatteryPackAccessoryConnected"); {
        if ([*(id *)(DerivedStorage + 104) objectForKeyedSubscript:@"ManualFramingDeviceType"]
        }
          && ![*(id *)(DerivedStorage + 176) objectForKeyedSubscript:@"ManualFramingDeviceType"])
        {
          objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"ManualFramingDeviceType"), @"ManualFramingDeviceType");
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"DockedTrackingSupported"), "BOOLValue")&& !objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"DockedTrackingActive"))
        {
          objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v125, "objectForKeyedSubscript:", @"DockedTrackingActive"), @"DockedTrackingActive");
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
        uint64_t v114 = 0;
        *(void *)(DerivedStorage + 64) = 1;
        *CFNumberRef v123 = cf;
        return v114;
      }
      uint64_t v114 = v113;
    }
    goto LABEL_144;
  }
  FigDebugAssert3();
LABEL_148:
  uint64_t v114 = 0;
LABEL_145:
  if (cf) {
    CFRelease(cf);
  }
  return v114;
}

uint64_t mscsn_setStreamOutputBufferHandler(void *a1, uint64_t a2, void *a3, void *a4)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v6 = (void *)[a3 copy];
    int v23 = v6;
    uint64_t v24 = a2;
    uint64_t v22 = *MEMORY[0x1E4F553E8];
    v25[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v7 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v8 = v25;
    unint64_t v9 = &v24;
  }
  else
  {
    if (!a4)
    {
      uint64_t v16 = a2;
      uint64_t v12 = *MEMORY[0x1E4F1D260];
      uint64_t v13 = *MEMORY[0x1E4F553D0];
      v14[0] = *MEMORY[0x1E4F553E8];
      v14[1] = v13;
      v15[0] = v12;
      v15[1] = v12;
      uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:2];
      uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      return [a1 setProperty:*MEMORY[0x1E4F54CC8] value:v10];
    }
    int v6 = (void *)[a4 copy];
    BOOL v19 = v6;
    uint64_t v20 = a2;
    uint64_t v18 = *MEMORY[0x1E4F553D0];
    uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    uint64_t v7 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v8 = &v21;
    unint64_t v9 = &v20;
  }
  uint64_t v10 = [v7 dictionaryWithObjects:v8 forKeys:v9 count:1];

  return [a1 setProperty:*MEMORY[0x1E4F54CC8] value:v10];
}

BOOL FigCaptureAuditTokenIsValid(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  return (*(void *)a1 != v7 || *(void *)(a1 + 8) != v8 || (void)v1 != v9 || *((void *)&v1 + 1) != v10)
      && (*(void *)a1 & *(void *)(a1 + 8) & *(void *)(a1 + 16) & *(void *)(a1 + 24)) != -1;
}

CFStringRef FigCaptureCopyClientCodeSigningIdentifier(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  uint64_t v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  CFStringRef v5 = SecTaskCopySigningIdentifier(v3, 0);
  CFRelease(v4);
  return v5;
}

double FigCaptureGetCurrentProcessAuditToken@<D0>(_OWORD *a1@<X8>)
{
  if (FigCaptureGetCurrentProcessAuditToken_sOnceToken != -1) {
    dispatch_once(&FigCaptureGetCurrentProcessAuditToken_sOnceToken, &__block_literal_global_146);
  }
  double result = *(double *)&FigCaptureGetCurrentProcessAuditToken_currentProcessAuditToken;
  long long v3 = unk_1EB4C60D8;
  *a1 = FigCaptureGetCurrentProcessAuditToken_currentProcessAuditToken;
  a1[1] = v3;
  return result;
}

__SecTask *FigCaptureClientIsAllowedToAccessHiddenCameras(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  long long v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  CFStringRef v5 = FigCaptureClientHasEntitlementWithSecTask(v3, @"com.apple.private.avfoundation.capture.hidden-cameras.allow");
  CFRelease(v4);
  return v5;
}

uint64_t FigCaptureClientIsRunningInXCTest(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  long long v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  uint64_t IsRunningInXCTestWithSecTask = FigCaptureClientIsRunningInXCTestWithSecTask(v3);
  CFRelease(v4);
  return IsRunningInXCTestWithSecTask;
}

uint64_t FigCaptureClientIsRunningInXCTestWithSecTask(__SecTask *a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v1 = (__CFString *)SecTaskCopySigningIdentifier(a1, 0);
  if (!v1) {
    return 0;
  }
  long long v2 = v1;
  uint64_t v3 = FigCaptureClientApplicationIDIsXCTest(v1);

  return v3;
}

uint64_t FigCaptureClientApplicationIDIsXCTest(void *a1)
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1)
  {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_304);
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_3:
  if (([a1 isEqualToString:0x1EFA55CA0] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55CC0] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55CE0] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55D00] & 1) != 0)
  {
    return 1;
  }
  return [a1 isEqualToString:0x1EFA55D20];
}

__SecTask *FigCaptureClientHasEntitlementWithSecTask(__SecTask *a1, __CFString *a2)
{
  long long v2 = a1;
  CFErrorRef error = 0;
  if (!a1) {
    return v2;
  }
  if ([(__CFString *)a2 length])
  {
    CFTypeRef v4 = SecTaskCopyValueForEntitlement(v2, a2, &error);
    long long v2 = 0;
    CFErrorRef v5 = error;
    if (error || !v4) {
      goto LABEL_9;
    }
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID()) {
      long long v2 = (__SecTask *)(CFBooleanGetValue((CFBooleanRef)v4) != 0);
    }
    else {
      long long v2 = 0;
    }
  }
  else
  {
    long long v2 = 0;
    CFTypeRef v4 = 0;
  }
  CFErrorRef v5 = error;
LABEL_9:
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v2;
}

uint64_t FigCaptureAuditTokenProcessesAreEqual(long long *a1, long long *a2)
{
  long long v3 = a1[1];
  long long v7 = *a1;
  long long v8 = v3;
  CFTypeRef v4 = (void *)[MEMORY[0x1E4F4F6A8] tokenFromAuditToken:&v7];
  long long v5 = a2[1];
  long long v7 = *a2;
  long long v8 = v5;
  return objc_msgSend(v4, "hasSameProcessAsAuditToken:", objc_msgSend(MEMORY[0x1E4F4F6A8], "tokenFromAuditToken:", &v7));
}

float FigVideoCaptureSourceUIBaseZoomFactor(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  CFTypeID v6 = (float *)&v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 1065353216;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceUIBaseZoomFactor_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  float v2 = v6[6];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58C50EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_2(uint64_t a1, void *a2)
{
  long long v3 = (void *)[a2 uniqueID];
  uint64_t v4 = *(void *)(a1 + 32);
  return [v3 isEqualToString:v4];
}

void captureSource_handleDeviceNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v53 = 0;
  if ([a3 isEqualToString:0x1EFA70720])
  {
    int v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA6D3C0), "BOOLValue");
    uint64_t v9 = [NSNumber numberWithBool:v8 ^ 1u];
    uint64_t v10 = kFigCaptureSourceProperty_AdjustingWhiteBalance;
LABEL_5:
    uint64_t v12 = *v10;
    uint64_t v13 = a2;
    char v14 = 0;
LABEL_6:
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, v12, v9, v14, 0);
    return;
  }
  if ([a3 isEqualToString:0x1EFA706E0])
  {
    int v11 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA6D3C0), "BOOLValue");
    uint64_t v9 = [NSNumber numberWithBool:v11 ^ 1u];
    uint64_t v10 = kFigCaptureSourceProperty_AdjustingExposure;
    goto LABEL_5;
  }
  if (([a3 isEqualToString:0x1EFA5A1E0] & 1) != 0
    || ([a3 isEqualToString:0x1EFA5A180] & 1) != 0
    || ([a3 isEqualToString:0x1EFA5A1A0] & 1) != 0
    || [a3 isEqualToString:0x1EFA5A1C0])
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ([a3 isEqualToString:0x1EFA5A1E0])
    {
      captureSource_postNotificationWithPayload(a2, @"SubjectAreaChanged", 0);
      return;
    }
    if ([a3 isEqualToString:0x1EFA5A180])
    {
      int v16 = FigAtomicAdd32();
      if (!v16)
      {
        FigDebugAssert3();
        FigSignalErrorAt();
        return;
      }
      if (v16 != 1 || *(unsigned char *)(DerivedStorage + 230)) {
        goto LABEL_26;
      }
      uint64_t v17 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (([a3 isEqualToString:0x1EFA5A1A0] & 1) == 0
        && ([a3 isEqualToString:0x1EFA5A1C0] & 1) == 0)
      {
        return;
      }
      if (FigAtomicAdd32() || *(unsigned char *)(DerivedStorage + 230)) {
        goto LABEL_26;
      }
      uint64_t v17 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"AdjustingFocus", *v17, 0, 0);
LABEL_26:
    if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"isFaceRect"), "BOOLValue"))
    {
      uint64_t v18 = [a5 objectForKeyedSubscript:@"FocusRectDict"];
      uint64_t v19 = [a5 valueForKeyPath:@"faceData.AngleInfoRoll"];
      if (v18)
      {
        if (v19)
        {
          uint64_t v64 = @"FaceRect";
          CFNumberRef v65 = (__CFString **)@"FaceAngle";
          uint64_t v70 = v18;
          CFNumberRef v71 = (void *)v19;
          captureSource_postNotificationWithPayload(a2, @"FaceDrivenImageProcessingFaceChanged", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v70 forKeys:&v64 count:2]);
        }
      }
    }
    return;
  }
  if ([a3 isEqualToString:0x1EFA6C1E0])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_Option25Changed;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA6C200])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_Option25Changed2;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA70840])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_FocusLensPosition;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA70700])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_ImageControlMode;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA6D200])
  {
    captureSource_postNotificationWithPayload(a2, @"StillImageSceneChanged", a5);
    uint64_t v70 = 0;
    CFNumberRef v71 = &v70;
    uint64_t v72 = 0x3052000000;
    CFNumberRef v73 = __Block_byref_object_copy__40;
    v74 = __Block_byref_object_dispose__40;
    uint64_t v75 = 0;
    uint64_t v64 = 0;
    CFNumberRef v65 = &v64;
    uint64_t v66 = 0x3052000000;
    CGFloat v67 = __Block_byref_object_copy__40;
    CFNumberRef v68 = __Block_byref_object_dispose__40;
    uint64_t v69 = 0;
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = __captureSource_handleDeviceNotification_block_invoke;
    v52[3] = &unk_1E5C2D5F0;
    v52[4] = a5;
    v52[5] = &v70;
    v52[6] = &v64;
    if (captureSource_safelyAccessStorage((uint64_t)a2, (uint64_t)v52))
    {
      FigDebugAssert3();
    }
    else
    {
      uint64_t v20 = v71[5];
      if (v20) {
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"FlashActive", v20, 1, 0);
      }
      uint64_t v21 = (uint64_t)v65[5];
      if (v21) {
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"IsStillImageStabilizationScene", v21, 1, 0);
      }
    }
LABEL_46:
    _Block_object_dispose(&v64, 8);
LABEL_47:
    _Block_object_dispose(&v70, 8);
    return;
  }
  if ([a3 isEqualToString:0x1EFA6D1A0])
  {
    captureSource_updateCachedZoomFactorPropertyAndNotify(a2, a5);
    return;
  }
  if ([a3 isEqualToString:0x1EFA70860])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_ExposureDuration;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA70880])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_ISO;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA708A0])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v22 = kFigCaptureSourceProperty_ExposureTargetBias;
LABEL_58:
    uint64_t v12 = *v22;
    uint64_t v13 = a2;
    char v14 = 1;
    goto LABEL_6;
  }
  if ([a3 isEqualToString:0x1EFA708C0])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_ExposureTargetOffset;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA706A0])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v22 = kFigCaptureSourceProperty_ActiveMaxExposureDuration;
    goto LABEL_58;
  }
  if ([a3 isEqualToString:0x1EFA708E0])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_DeviceWhiteBalanceGains;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA70900])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_GrayWorldDeviceWhiteBalanceGains;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA70B60])
  {
    int v23 = kFigCaptureSourceProperty_SceneClassificationActive;
LABEL_69:
    uint64_t v24 = *v23;
    id v25 = a2;
    unsigned int v26 = a5;
LABEL_82:
    captureSource_postNotificationWithPayload(v25, v24, v26);
    return;
  }
  if ([a3 isEqualToString:0x1EFA70B80])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_SceneClassificationConfidences;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA6D0C0])
  {
    uint64_t v27 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    float v28 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3E0];
    uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v27, @"NewPropertyValue", v28, @"ManualControlRequestID", 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, [v28 intValue], a5, a3);
    uint64_t v30 = kFigCaptureSourceNotification_ManualFocusComplete;
LABEL_81:
    uint64_t v24 = *v30;
    id v25 = a2;
    unsigned int v26 = (const void *)v29;
    goto LABEL_82;
  }
  if ([a3 isEqualToString:0x1EFA6D0E0])
  {
    uint64_t v31 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v32 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3E0];
    uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v31, @"NewPropertyValue", v32, @"ManualControlRequestID", 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, [v32 intValue], a5, a3);
    uint64_t v30 = kFigCaptureSourceNotification_ManualExposureComplete;
    goto LABEL_81;
  }
  if ([a3 isEqualToString:0x1EFA6D100])
  {
    uint64_t v33 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    int v34 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3E0];
    uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v33, @"NewPropertyValue", v34, @"ManualControlRequestID", 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, [v34 intValue], a5, a3);
    uint64_t v30 = kFigCaptureSourceNotification_BiasedExposureComplete;
    goto LABEL_81;
  }
  if ([a3 isEqualToString:0x1EFA6D120])
  {
    uint64_t v35 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v36 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3E0];
    uint64_t v29 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v35, @"NewPropertyValue", v36, @"ManualControlRequestID", 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, [v36 intValue], a5, a3);
    uint64_t v30 = kFigCaptureSourceNotification_ManualWhiteBalanceComplete;
    goto LABEL_81;
  }
  if ([a3 isEqualToString:0x1EFA6C560])
  {
    uint64_t v37 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v70 = 0;
    CFNumberRef v71 = &v70;
    uint64_t v72 = 0x2020000000;
    LOBYTE(v73) = 0;
    uint64_t v64 = 0;
    CFNumberRef v65 = &v64;
    uint64_t v66 = 0x2020000000;
    LOBYTE(v67) = 0;
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = __captureSource_handleDeviceNotification_block_invoke_2;
    v51[3] = &unk_1E5C2D618;
    v51[4] = &v70;
    v51[5] = &v64;
    if (captureSource_safelyAccessStorage((uint64_t)a2, (uint64_t)v51))
    {
      FigDebugAssert3();
    }
    else
    {
      if (*((unsigned char *)v71 + 24)) {
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"FlashOverheated", v37, 0, 0);
      }
      if (*((unsigned char *)v65 + 24)) {
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"TorchOverheated", v37, 0, 0);
      }
    }
    goto LABEL_46;
  }
  if ([a3 isEqualToString:0x1EFA6C540])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v10 = kFigCaptureSourceProperty_TorchActive;
    goto LABEL_5;
  }
  if ([a3 isEqualToString:0x1EFA6C580])
  {
    uint64_t v9 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    uint64_t v22 = kFigCaptureSourceProperty_TorchLevel;
    goto LABEL_58;
  }
  if ([a3 isEqualToString:0x1EFA6D2C0])
  {
    int v23 = kFigCaptureSourceNotification_ShallowDepthOfFieldStatusChanged;
    goto LABEL_69;
  }
  if ([a3 isEqualToString:0x1EFA70AC0])
  {
    v62[0] = @"NewPropertyValue";
    v62[1] = @"MinAvailableVideoZoomFactor";
    v63[0] = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    v63[1] = [a5 objectForKeyedSubscript:0x1EFA6CB80];
    captureSource_postNotificationWithPayload(a2, @"ActiveBravoCameraSelection", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:v62 count:2]);
    return;
  }
  if ([a3 isEqualToString:0x1EFA70AE0])
  {
    uint64_t v38 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType((uint64_t)a2, [a5 objectForKeyedSubscript:0x1EFA6D3C0], &v53);
    if (!v53)
    {
      CFDictionaryRef v39 = (const void *)v38;
      uint64_t v70 = 0;
      CFNumberRef v71 = &v70;
      uint64_t v72 = 0x3052000000;
      CFNumberRef v73 = __Block_byref_object_copy__40;
      v74 = __Block_byref_object_dispose__40;
      uint64_t v75 = 0;
      v50[0] = MEMORY[0x1E4F143A8];
      v50[1] = 3221225472;
      v50[2] = __captureSource_handleDeviceNotification_block_invoke_3;
      v50[3] = &unk_1E5C2D580;
      v50[4] = &v70;
      if (captureSource_safelyAccessStorage(v38, (uint64_t)v50))
      {
        FigDebugAssert3();
      }
      else
      {
        uint64_t v40 = v71[5];
        if (v40)
        {
          uint64_t v60 = @"NewPropertyValue";
          uint64_t v61 = v40;
          captureSource_postNotificationWithPayload(a2, @"UnderlyingMasterSource", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v61 forKeys:&v60 count:1]);
        }
        if (v39) {
          CFRelease(v39);
        }
      }
      goto LABEL_47;
    }
LABEL_129:
    FigDebugAssert3();
    return;
  }
  if ([a3 isEqualToString:0x1EFA70B00])
  {
    uint64_t v41 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType((uint64_t)a2, [a5 objectForKeyedSubscript:0x1EFA6D3C0], &v53);
    if (!v53)
    {
      long long v42 = (const void *)v41;
      uint64_t v70 = 0;
      CFNumberRef v71 = &v70;
      uint64_t v72 = 0x3052000000;
      CFNumberRef v73 = __Block_byref_object_copy__40;
      v74 = __Block_byref_object_dispose__40;
      uint64_t v75 = 0;
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = __captureSource_handleDeviceNotification_block_invoke_4;
      v49[3] = &unk_1E5C2D580;
      v49[4] = &v70;
      captureSource_safelyAccessStorage(v41, (uint64_t)v49);
      uint64_t v43 = v71[5];
      if (v43)
      {
        uint64_t v58 = @"NewPropertyValue";
        uint64_t v59 = v43;
        captureSource_postNotificationWithPayload(a2, @"PreferredPrimaryUnderlyingCaptureSource", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v59 forKeys:&v58 count:1]);
      }
      if (v42) {
        CFRelease(v42);
      }
      goto LABEL_47;
    }
    goto LABEL_129;
  }
  if ([a3 isEqualToString:0x1EFA70A00])
  {
    int v23 = kFigCaptureSourceNotification_FocusedAtMacro;
    goto LABEL_69;
  }
  if ([a3 isEqualToString:0x1EFA70780])
  {
    CGSize v44 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3C0];
    CFDictionaryRef v45 = (void *)sSystemPressureMonitor;
    [v44 floatValue];
    objc_msgSend(v45, "updateWithPearlProjectorTemperature:");
  }
  else if ([a3 isEqualToString:0x1EFA70740])
  {
    uint64_t v46 = [a5 objectForKeyedSubscript:0x1EFA4D960];
    uint64_t v47 = (void *)[a5 objectForKeyedSubscript:0x1EFA6D3C0];
    int v48 = (void *)sSystemPressureMonitor;
    [v47 floatValue];
    objc_msgSend(v48, "updateWithPortType:imageSensorTemperature:", v46);
  }
  else if ([a3 isEqualToString:0x1EFA70CE0])
  {
    CFNumberRef v56 = @"NewPropertyValue";
    uint64_t v57 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    captureSource_postNotificationWithPayload(a2, @"SourceReactionsInProgressChanged", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v57 forKeys:&v56 count:1]);
  }
  else if ([a3 isEqualToString:0x1EFA6D2A0])
  {
    float v54 = @"NewPropertyValue";
    uint64_t v55 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
    captureSource_postNotificationWithPayload(a2, @"StereoVideoCaptureStatusChanged", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v55 forKeys:&v54 count:1]);
  }
}

void sub_1A58C65DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(const void *a1, void *a2, uint64_t a3, char a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5) {
    FigSimpleMutexCheckIsLockedOnThisThread();
  }
  else {
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  }
  int v11 = (const void *)[*(id *)(DerivedStorage + 176) objectForKeyedSubscript:a2];
  if (v11) {
    CFTypeRef v12 = CFRetain(v11);
  }
  else {
    CFTypeRef v12 = 0;
  }
  [*(id *)(DerivedStorage + 176) setObject:a3 forKeyedSubscript:a2];
  if ((a5 & 1) == 0) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  }
  if (a3 && v12)
  {
    if ((a4 & 1) != 0 || !FigCFEqual())
    {
      uint64_t v13 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      [v13 setObject:v12 forKeyedSubscript:@"OldPropertyValue"];
      [v13 setObject:a3 forKeyedSubscript:@"NewPropertyValue"];
      captureSource_postNotificationWithPayload(a1, a2, v13);
    }
LABEL_17:
    CFRelease(v12);
    return;
  }
  if ([a2 isEqualToString:@"SourceCMIOExtensionPropertyChanged"])
  {
    CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F1D260];
    char v14 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v14 setObject:v12 forKeyedSubscript:@"OldPropertyValue"];
    [v14 setObject:a3 forKeyedSubscript:@"NewPropertyValue"];
    captureSource_postNotificationWithPayload(a1, a2, v14);
  }
  if (v12) {
    goto LABEL_17;
  }
}

uint64_t FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  CFTypeID v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58C6884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceGetSourceType(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  CFTypeID v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetSourceType_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58C6948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4)
{
  int v20 = 0;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x3052000000;
  uint64_t v17 = __Block_byref_object_copy__40;
  uint64_t v18 = __Block_byref_object_dispose__40;
  uint64_t v19 = 0;
  uint64_t v7 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(a1, a3, &v20);
  int v8 = (const void *)v7;
  int v9 = v20;
  if (v20)
  {
    FigDebugAssert3();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v7)
    {
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType_block_invoke;
      v13[3] = &unk_1E5C2D558;
      v13[5] = &v14;
      v13[6] = a3;
      v13[4] = a2;
      int v9 = captureSource_safelyAccessStorage(v7, (uint64_t)v13);
LABEL_4:
      CFRelease(v8);
      goto LABEL_6;
    }
    id v10 = a2;
    int v9 = 0;
    v15[5] = (uint64_t)v10;
  }
LABEL_6:
  if (a4) {
    *a4 = v9;
  }
  uint64_t v11 = v15[5];
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1A58C6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType_block_invoke;
  v5[3] = &unk_1E5C2D5A8;
  v5[4] = &v6;
  void v5[5] = a2;
  *a3 = captureSource_safelyAccessStorage(a1, (uint64_t)v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A58C6BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSource_safelyAccessStorage(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294954516;
  }
  uint64_t v4 = DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  if (*(unsigned char *)(v4 + 12)) {
    uint64_t v5 = 4294954511;
  }
  else {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
  return v5;
}

uint64_t __FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 144);
  if (!v3) {
    uint64_t v3 = *(void **)(a2 + 152);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (id)[v3 objectForKeyedSubscript:*(void *)(a1 + 40)];
  return 0;
}

uint64_t __FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 48) isEqualToString:*MEMORY[0x1E4F52E00]])
  {
    if ([*(id *)(a2 + 96) count] == 1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = (id)[*(id *)(a2 + 96) firstObject];
      return 0;
    }
    CFTypeRef v12 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v13 = *MEMORY[0x1E4F1C3B8];
    uint64_t v14 = @"Only one stream format is currently supported on the IR camera.";
LABEL_25:
    objc_exception_throw((id)[v12 exceptionWithName:v13 reason:v14 userInfo:0]);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v4 = (void *)[*(id *)(a2 + 96) reverseObjectEnumerator];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (!v5) {
    goto LABEL_21;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)v18;
  while (2)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)v18 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void **)(*((void *)&v17 + 1) + 8 * i);
      if ([v9 cinematicFramingFormat]
        && objc_msgSend(*(id *)(a1 + 32), "isValidDerivedSourceFormatForUnderlyingFormat:", objc_msgSend(v9, "cinematicFramingFormat")))
      {
        uint64_t v10 = [v9 cinematicFramingFormat];
LABEL_19:
        uint64_t v9 = (void *)v10;
LABEL_20:
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = v9;
        goto LABEL_21;
      }
      if ([v9 geometricDistortionCorrectionFormat]
        && objc_msgSend(*(id *)(a1 + 32), "isValidDerivedSourceFormatForUnderlyingFormat:", objc_msgSend(v9, "geometricDistortionCorrectionFormat")))
      {
        uint64_t v10 = [v9 geometricDistortionCorrectionFormat];
        goto LABEL_19;
      }
      if ([*(id *)(a1 + 32) isValidDerivedSourceFormatForUnderlyingFormat:v9]) {
        goto LABEL_20;
      }
    }
    uint64_t v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6) {
      continue;
    }
    break;
  }
LABEL_21:
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v15 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v16 = *MEMORY[0x1E4F1C3B8];
    uint64_t v14 = (__CFString *)[NSString stringWithFormat:@"Could not find the underlying capture source format for %@ on %@", objc_msgSend(*(id *)(a1 + 32), "uniqueID"), *(void *)(a1 + 48)];
    CFTypeRef v12 = v15;
    uint64_t v13 = v16;
    goto LABEL_25;
  }
  return 0;
}

uint64_t __FigCaptureSourceGetSourceType_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 8);
  return 0;
}

uint64_t __FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", 0x1EFA6BA20), "intValue");
  return 0;
}

uint64_t __FigCaptureSourceGetSourceDeviceType_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  return 0;
}

uint64_t captureSource_restoreCurrentValuesForManualControlProperties(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  if ([a4 isEqualToString:0x1EFA6D0C0])
  {
    uint64_t v8 = @"FocusOperation";
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"FocusOperation"), "objectForKeyedSubscript:", @"RequestID"), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48)); {
    uint64_t v9 = @"FocusPosition";
    }
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"FocusOperation"), "objectForKeyedSubscript:", @"FocusPosition"), "floatValue");
    if (v10 != 3.4028e38) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
    }
    uint64_t v11 = 0x1EFA704C0;
LABEL_5:
    uint64_t v12 = [a3 objectForKeyedSubscript:v11];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", v8), "mutableCopy");
      id v15 = v14;
      uint64_t v16 = v13;
      goto LABEL_7;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  }
  if (![a4 isEqualToString:0x1EFA6D0E0])
  {
    if ([a4 isEqualToString:0x1EFA6D100])
    {
      uint64_t v8 = @"ExposureTargetBiasOperation";
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureTargetBiasOperation"), "objectForKeyedSubscript:", @"RequestID"), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48)); {
      uint64_t v9 = @"Bias";
      }
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureTargetBiasOperation"), "objectForKeyedSubscript:", @"Bias"), "floatValue");
      if (v21 != 3.4028e38) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      }
      uint64_t v11 = 0x1EFA70520;
    }
    else
    {
      if (![a4 isEqualToString:0x1EFA6D120]) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      }
      uint64_t v8 = @"WhiteBalanceOperation";
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"WhiteBalanceOperation"), "objectForKeyedSubscript:", @"RequestID"), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48)); {
      v28.timescale = 0;
      }
      v28.unsigned int value = 0;
      uint64_t v9 = @"DeviceWhiteBalanceGains";
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"WhiteBalanceOperation"), "objectForKeyedSubscript:", @"DeviceWhiteBalanceGains"), "getBytes:length:", &v28, 12);
      if (v28.value || v28.timescale != 0) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      }
      uint64_t v11 = 0x1EFA70540;
    }
    goto LABEL_5;
  }
  uint64_t v8 = @"ExposureOperation";
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureOperation"), "objectForKeyedSubscript:", @"RequestID"), "intValue") == a2)
  {
    uint64_t v9 = @"ExposureDuration";
    CFDictionaryRef v17 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureOperation"), "objectForKeyedSubscript:", @"ExposureDuration");
    memset(&v28, 0, sizeof(v28));
    CMTimeMakeFromDictionary(&v28, v17);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureOperation"), "objectForKeyedSubscript:", @"ISO"), "floatValue");
    float v19 = v18;
    CMTime time1 = v28;
    memset(&time2, 0, sizeof(time2));
    if (!CMTimeCompare(&time1, &time2) || v19 == 3.4028e38)
    {
      id v15 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", @"ExposureOperation", BWFigVideoCaptureDeviceExposureDurationCurrent), "mutableCopy");
      if (v19 == 3.4028e38)
      {
        uint64_t v20 = [a3 objectForKeyedSubscript:0x1EFA704E0];
        if (v20) {
          [v15 setObject:v20 forKeyedSubscript:@"ISO"];
        }
      }
      CMTime time1 = v28;
      *(_OWORD *)&time2.unsigned int value = v25;
      time2.epoch = 0;
      if (CMTimeCompare(&time1, &time2)) {
        goto LABEL_16;
      }
      uint64_t v24 = [a3 objectForKeyedSubscript:0x1EFA70500];
      if (!v24) {
        goto LABEL_16;
      }
      uint64_t v16 = v24;
      uint64_t v14 = v15;
LABEL_7:
      [v14 setObject:v16 forKeyedSubscript:v9];
LABEL_16:
      [*(id *)(DerivedStorage + 176) setObject:v15 forKeyedSubscript:v8];
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
}

uint64_t __FigVideoCaptureSourceUIBaseZoomFactor_block_invoke(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 168);
  if (v2 == 0.0) {
    float v2 = 1.0;
  }
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  return 0;
}

uint64_t __FigVideoCaptureSourcePearlModuleType_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"PearlModuleType"), "intValue");
  return 0;
}

uint64_t __FigCaptureSourceIsSecureMetadataSource_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", 0x1EFA6B620), "BOOLValue");
  return 0;
}

void *fcsc_findFormatByUniqueID(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSString stringWithUTF8String:a1];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v12;
  do
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v12 != v6) {
        objc_enumerationMutation(a2);
      }
      uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
      if ((objc_msgSend((id)objc_msgSend(v8, "uniqueID"), "isEqualToString:", v3) & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          continue;
        }
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "geometricDistortionCorrectionFormat"), "uniqueID"), "isEqualToString:", v3))
        {
          uint64_t v9 = [v8 geometricDistortionCorrectionFormat];
        }
        else
        {
          if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "cinematicFramingFormat"), "uniqueID"), "isEqualToString:", v3))continue; {
          uint64_t v9 = [v8 cinematicFramingFormat];
          }
        }
        uint64_t v8 = (void *)v9;
      }
      if (v8) {
        return v8;
      }
    }
    uint64_t v5 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  }
  while (v5);
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"Torch"), "BOOLValue");
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue"))*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", 0x1EFA6D220); {
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"SIS"), "BOOLValue"))*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", 0x1EFA6D240);
  }
  return 0;
}

uint64_t __FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", 0x1EFA6BC20), "BOOLValue");
  return 0;
}

uint64_t __FigVideoCaptureSourceCopySupplementalTimeOfFlightCaptureSource_block_invoke(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(CFTypeRef *)(a2 + 160);
  if (v3) {
    CFTypeRef v3 = CFRetain(v3);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return 0;
}

uint64_t __FigCaptureSourceGetCaptureDeviceID_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = (id)[*(id *)(a2 + 104) objectForKeyedSubscript:@"CaptureDeviceID"];
  return 0;
}

uint64_t __cs_updateTimeOfFlightAFEnabledStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"Position"), "intValue");
  int v5 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue");
  if (v4 == 1 && v5 != 0) {
    [*(id *)(a2 + 80) setTimeOfFlightAFEnabled:*(unsigned __int8 *)(a1 + 32)];
  }
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 12)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = (id)[*(id *)(a2 + 104) objectForKeyedSubscript:@"DeviceType"];
  }
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 12)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = (id)[*(id *)(a2 + 104) objectForKeyedSubscript:@"DeviceType"];
  }
  return 0;
}

uint64_t FigCaptureStreamGetClassID()
{
  return sFigCaptureStreamID;
}

uint64_t BWCMSampleBufferCreateCopyIncludingMetadata(CMSampleBufferRef sbuf, CMSampleBufferRef *sampleBufferOut)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Copdouble y = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sbuf, sampleBufferOut);
  if (Copy)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F53070];
    CFDictionaryRef v7 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v7)
    {
      MutableCopdouble y = CFDictionaryCreateMutableCopy(v4, 0, v7);
      CMSetAttachment(*sampleBufferOut, v6, MutableCopy, 1u);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    sbu_replaceAttachedMediaWithDeepCopy(*sampleBufferOut);
  }
  return Copy;
}

void sbu_replaceAttachedMediaWithDeepCopy(const void *a1)
{
  id v2 = (id)BWSampleBufferDeepCopyDictionaryOfAttachedMedia(a1);
  CMSetAttachment(a1, @"AttachedMedia", v2, 1u);
}

uint64_t BWSampleBufferDeepCopyDictionaryOfAttachedMedia(const void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)CMGetAttachment(a1, @"AttachedMedia", 0);
  if (![v1 count]) {
    return 0;
  }
  id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v8 = (opaqueCMSampleBuffer *)[v1 objectForKeyedSubscript:v7];
        CFTypeRef cf = 0;
        BWCMSampleBufferCreateCopyIncludingMetadata(v8, (CMSampleBufferRef *)&cf);
        [v2 setObject:cf forKeyedSubscript:v7];
        CFRelease(cf);
      }
      uint64_t v4 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  uint64_t v9 = [v2 copy];

  return v9;
}

void sub_1A58C9888(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A58D13E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

void __captureSession_buildGraphDidBecomeLiveObserver_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
  uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 456) configurationID];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
  if (v8 == a4)
  {
    uint64_t v9 = (void *)[a3 node];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      float v10 = *(const void **)(a1 + 40);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2)
      {
        if ([v9 sinkID])
        {
          long long v12 = (const void *)cs_notificationPayloadForSectionFormatChanged([v9 sinkID], objc_msgSend(a2, "formatDescription"));
          captureSession_postNotificationWithPayload(v10, @"PreviewFormatDidChange", v12);
        }
      }
      else
      {
        captureSession_setPreviewRunning(v10, 0, objc_msgSend(*(id *)(DerivedStorage + 664), "previewSinkPipelineWithSinkID:", objc_msgSend(v9, "sinkID")));
      }
    }
    if (*(unsigned char *)(a1 + 48))
    {
      long long v13 = *(const void **)(a1 + 40);
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      if (a2)
      {
        uint64_t v15 = v14;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v16 = objc_msgSend(*(id *)(v15 + 664), "previewSinkPipelineWithSinkID:", objc_msgSend(v9, "sinkID"));
          if ([v16 previewSinkEnabled]) {
            captureSession_setPreviewRunning(v13, 1, v16);
          }
        }
        captureSession_makeCommittedConfigurationLive(v13);
      }
    }
  }
}

uint64_t FigCaptureConfigureVideoDataConverterRotatorNode(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t LossyCompressionLevel, int a8)
{
  char v8 = a3;
  unint64_t v11 = HIDWORD(a3);
  if (a2)
  {
    unint64_t v28 = HIDWORD(a3);
    uint64_t v14 = &unk_1EFB041D8;
    if (a8 != 6) {
      uint64_t v14 = 0;
    }
    unint64_t v15 = objc_msgSend(a2, "transform", v14);
    uint64_t v29 = v16;
    unsigned int v17 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:supportedColorSpaces:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:supportedColorSpaces:", a5, objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "colorSpace"), objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "format"), objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "dimensions"), objc_msgSend(a2, "outputFormat"), v26);
    objc_msgSend(a1, "setOutputPixelFormat:", objc_msgSend(a2, "outputFormat"));
    if ((int)FigCapturePixelFormatGetLossyCompressionLevel([a2 outputFormat]) >= (int)LossyCompressionLevel) {
      int LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel([a2 outputFormat]);
    }
    [a1 setMaxLossyCompressionLevel:LossyCompressionLevel];
    if (a6) {
      uint64_t v18 = 6;
    }
    else {
      uint64_t v18 = v17;
    }
    [a1 setOutputColorSpaceProperties:v18];
    LODWORD(v11) = v28;
    uint64_t v19 = v29;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v20 = FigCaptureNormalizeAngle(HIDWORD(v15) - (int)v11);
  [a1 setRotationDegrees:v20];
  if (v8)
  {
    if (v15)
    {
      int v23 = 0;
      goto LABEL_17;
    }
    uint64_t v21 = FigCaptureTransformFlipAppliedBeforeRotationToAfter(1, v11);
    LODWORD(v22) = v20;
  }
  else
  {
    uint64_t v21 = v15 & 1;
    unint64_t v22 = HIDWORD(v15);
  }
  int v23 = FigCaptureTransformFlipAppliedBeforeRotationToAfter(v21, v22);
LABEL_17:
  [a1 setFlipHorizontal:v23 == 1];
  [a1 setFlipVertical:v23 == 2];
  if ([a2 deviceOrientationCorrectionEnabled]
    && (objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "cinematicFramingEnabled") & 1) == 0)
  {
    uint64_t v24 = objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "manualCinematicFramingEnabled") ^ 1;
  }
  else
  {
    uint64_t v24 = 0;
  }
  [a1 setDeviceOrientationCorrectionEnabled:v24];
  [a1 setCropMode:1];
  [a1 setOutputWidth:(int)v19];
  return [a1 setOutputHeight:v19 >> 32];
}

uint64_t FigCaptureUncompressedPixelFormatForPixelFormat(uint64_t a1)
{
  if (!FigCapturePixelFormatGetCompressionType(a1)) {
    return a1;
  }
  int v2 = FigCapturePixelFormatIs422(a1);
  int IsTenBit = FigCapturePixelFormatIsTenBit(a1);
  int v4 = 1;
  if ((int)a1 > 1751527983)
  {
    if (a1 == 1751527984) {
      goto LABEL_9;
    }
    int v5 = 2087216688;
  }
  else
  {
    if (a1 == 761816624) {
      goto LABEL_9;
    }
    int v5 = 795371056;
  }
  if (a1 != v5) {
    int v4 = 0;
  }
LABEL_9:
  uint64_t v6 = 1111970369;
  int IsFullRange = FigCapturePixelFormatIsFullRange(a1);
  if ((int)a1 <= 792872768)
  {
    if (a1 == 641877825) {
      return v6;
    }
    int v8 = 759318337;
  }
  else
  {
    if (a1 == 792872769 || a1 == 1111970369) {
      return v6;
    }
    int v8 = 2084718401;
  }
  if (a1 != v8)
  {
    uint64_t v6 = (v2 & IsTenBit & IsFullRange) != 0 ? 1885745714 : 1882468914;
    if ((v2 & IsTenBit & 1) == 0)
    {
      uint64_t v6 = (IsTenBit & IsFullRange) != 0 ? 1885745712 : 1882468912;
      if ((IsTenBit & 1) == 0)
      {
        if (IsFullRange) {
          unsigned int v9 = 875704422;
        }
        else {
          unsigned int v9 = 875704438;
        }
        if (v4) {
          return 1751527984;
        }
        else {
          return v9;
        }
      }
    }
  }
  return v6;
}

uint64_t FigCapturePixelFormatIsBGRA(int a1)
{
  uint64_t result = 1;
  if (a1 <= 792872768)
  {
    if (a1 == 641877825) {
      return result;
    }
    int v3 = 759318337;
    goto LABEL_7;
  }
  if (a1 != 792872769 && a1 != 1111970369)
  {
    int v3 = 2084718401;
LABEL_7:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t BWColorSpacePropertiesGetCaptureStreamColorSpace(int a1)
{
  if ((a1 - 3) > 8) {
    return 0;
  }
  else {
    return dword_1A5F0BF70[a1 - 3];
  }
}

uint64_t BWColorSpaceIsWide(unsigned int a1)
{
  return (a1 < 5) & (0x16u >> a1);
}

void sub_1A58D764C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A58D77A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double FigCaptureMetadataUtilitiesRectByCroppingRectToAspectRatio(double a1, double a2, double a3, double a4, float a5)
{
  return a1 + FigCaptureMetadataUtilitiesRectWithAspectRatioInsideDimensions(a3, a4, a5);
}

double FigCaptureMetadataUtilitiesRectWithAspectRatioInsideDimensions(double a1, double a2, float a3)
{
  float v3 = a1 / a2;
  if (v3 < a3) {
    double v4 = a1;
  }
  else {
    double v4 = a1 * a3 / v3;
  }
  return (a1 - v4) * 0.5;
}

uint64_t captureSourceServer_handleReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t captureSourceServer_handleCopyProprietaryDefaultMessage(int a1, void *a2)
{
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v7 = 0;
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v5 = v2;
    goto LABEL_10;
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (v3)
  {
    uint64_t v5 = v3;
    goto LABEL_10;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x20])
  {
    uint64_t v5 = 4294954514;
LABEL_10:
    FigDebugAssert3();
    goto LABEL_11;
  }
  uint64_t v4 = MEMORY[0x20](cf, v8, &v7);
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_10;
  }
  if (!v7) {
    CFTypeRef v7 = (CFTypeRef)*MEMORY[0x1E4F1D260];
  }
  FigXPCMessageSetCFObject();
  uint64_t v5 = 0;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

uint64_t captureSourceServer_getAndRetainSourceObjectFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v4 = v2;
    FigDebugAssert3();
  }
  else
  {
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t FigCaptureSourceGetTypeID()
{
  if (FigCaptureSourceGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureSourceGetClassID_onceToken, &__block_literal_global_87);
  }
  uint64_t v0 = FigCaptureSourceGetClassID_sFigCaptureSourceClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t captureSource_CopyProprietaryDefault(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 12))
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  if (!a2 || !a3)
  {
    FigDebugAssert3();
    goto LABEL_2;
  }
  uint64_t v7 = DerivedStorage;
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  CFTypeRef v8 = (void *)[(id)sTemporaryCameraHistoryItems objectForKeyedSubscript:a2];
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if (!v8) {
    CFTypeRef v8 = (void *)[*(id *)(v7 + 232) objectForKey:a2];
  }
  *a3 = v8;
  return 0;
}

uint64_t captureSourceServer_handleSourceCopyPropertyMessage(int a1, void *a2)
{
  CFTypeRef cf1 = 0;
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v5 = v2;
  }
  else
  {
    uint64_t v3 = FigXPCMessageCopyCFString();
    if (!v3)
    {
      FigDebugAssert3();
      uint64_t v5 = FigSignalErrorAt();
      goto LABEL_5;
    }
    uint64_t v5 = v3;
  }
  FigDebugAssert3();
LABEL_5:
  if (cf1) {
    CFRelease(cf1);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

uint64_t FigCaptureSourceCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(a1, a2, a3, a4);
  }
  return result;
}

uint64_t FigCaptureSourceCopyProperty_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(a1, a2, a3, a4);
}

uint64_t captureSourceServer_handleSourceSetPropertyMessage(int a1, void *a2)
{
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v3 = v2;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v3 = FigXPCHandleStdSetPropertyMessage();
    if (v3) {
      FigDebugAssert3();
    }
  }
  return v3;
}

uint64_t captureSourceServer_handleRegisterNotificationForProprietaryDefaultChangesMessage(int a1, void *a2)
{
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v4 = v2;
    goto LABEL_8;
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (v3)
  {
    uint64_t v4 = v3;
    goto LABEL_8;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x30])
  {
    uint64_t v4 = 4294954514;
LABEL_8:
    FigDebugAssert3();
    return v4;
  }
  uint64_t v4 = MEMORY[0x30](0, 0);
  if (v4) {
    goto LABEL_8;
  }
  return v4;
}

uint64_t captureSource_RegisterNotificationForProprietaryDefaultChanges(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    if (a2)
    {
      [*(id *)(DerivedStorage + 232) observeChangesForKey:a2];
      return 0;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureSourceServer_handleSetProprietaryDefaultMessage(int a1, void *a2)
{
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v5 = v2;
    goto LABEL_9;
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (v3)
  {
    uint64_t v5 = v3;
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCMessageCopyCFObject();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_9;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x28])
  {
    uint64_t v5 = 4294954514;
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  uint64_t v5 = MEMORY[0x28](0, 0, 0);
  if (v5) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t captureSource_SetProprietaryDefault(uint64_t a1, __CFString *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 12))
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  if (!a2)
  {
    FigDebugAssert3();
    goto LABEL_2;
  }
  uint64_t v8 = DerivedStorage;
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  uint64_t v9 = [(id)sTemporaryCameraHistoryItems objectForKeyedSubscript:a2];
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if (v9) {
    return 4294954516;
  }
  if (CFStringHasPrefix(a2, @"signal/")) {
    cs_sendNotificationOfNewTransientValue(a1, a3, a2);
  }
  else {
    [*(id *)(v8 + 232) setObject:a3 forKey:a2];
  }
  return 0;
}

uint64_t captureSourceServer_handleCameraHistoryDownplayOverrideListMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5 = (int)a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v13 = 0;
  uint64_t pid = xpc_connection_get_pid(a1);
  uint64_t v7 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if (v7)
  {
    uint64_t v9 = v7;
    FigDebugAssert3();
    goto LABEL_7;
  }
  if (MEMORY[0] < 3uLL || !MEMORY[0x40])
  {
    uint64_t v9 = 4294954514;
    goto LABEL_7;
  }
  uint64_t v8 = MEMORY[0x50](v13, pid, &cf);
  if (v8)
  {
    uint64_t v9 = v8;
LABEL_7:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v9);
    goto LABEL_8;
  }
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (cf) {
    FigXPCMessageSetCFArray();
  }
  if (dword_1EB4C51D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v9 = 0;
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t captureSource_CameraHistoryDownplayOverrideList(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 12)) {
    return 4294954511;
  }
  if (sCameraHistoryDownplayOverrideList) {
    CFTypeRef v5 = CFRetain((CFTypeRef)sCameraHistoryDownplayOverrideList);
  }
  else {
    CFTypeRef v5 = 0;
  }
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t captureSourceServer_handleCopyClockMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  uint64_t v24 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = captureSourceServer_getAndRetainSourceObjectFromMessage((int)a1, a2);
  if (v6)
  {
    uint64_t v16 = v6;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v7 = v24;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v9 + 48);
    if (!v10)
    {
      uint64_t v16 = 4294954514;
      goto LABEL_12;
    }
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    uint64_t v12 = v10(v24, 0x1EFA6BF00, *MEMORY[0x1E4F1CF80], &cf);
    if (v12)
    {
      uint64_t v16 = v12;
      goto LABEL_12;
    }
    int v13 = [(id)cf intValue];
    if (v13 != 2)
    {
LABEL_18:
      xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockObjectToken, 0);
      uint64_t v20 = (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockTimeoutToken;
      int64_t ServerTimeoutToken = FigRemote_GetServerTimeoutToken();
      xpc_dictionary_set_int64(a3, v20, ServerTimeoutToken);
      xpc_dictionary_set_mach_send();
      xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockType, v13);
      uint64_t v16 = 0;
      goto LABEL_19;
    }
    if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      unsigned int v17 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
      if (v17)
      {
        uint64_t v18 = v17(v7, @"Clock", v11, &v25);
        if (v18)
        {
          uint64_t v16 = v18;
        }
        else
        {
          if (!v25) {
            goto LABEL_18;
          }
          xpc_dictionary_copy_mach_send();
          xpc_dictionary_get_int64(a2, (const char *)kFigCaptureSourceRemoteCopyClockMessagePayload_ClientClockToken);
          xpc_connection_get_pid(a1);
          uint64_t WrapperForClockWithManualCommandPortSendRightInsertion = FigAudioDeviceClockServer_MakeWrapperForClockWithManualCommandPortSendRightInsertion();
          if (!WrapperForClockWithManualCommandPortSendRightInsertion) {
            goto LABEL_18;
          }
          uint64_t v16 = WrapperForClockWithManualCommandPortSendRightInsertion;
        }
      }
      else
      {
        uint64_t v16 = 4294954514;
      }
LABEL_12:
      FigDebugAssert3();
      goto LABEL_19;
    }
    uint64_t v16 = 4294954509;
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v16;
}

uint64_t accelerometerDataCallback(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = [a2 managingGravity];
    double v5 = *(double *)(v3 + 16);
    LODWORD(v6) = *(_DWORD *)v3;
    LODWORD(v7) = *(_DWORD *)(v3 + 4);
    LODWORD(v8) = *(_DWORD *)(v3 + 8);
    if (v4)
    {
      return objc_msgSend(a2, "didUpdateGravity:time:", v6, v7, v8, v5);
    }
    else
    {
      return objc_msgSend(a2, "didUpdateAcceleration:time:", v6, v7, v8, v5);
    }
  }
  return result;
}

double FigMotionMultiplyByInverseOfQuaternion(double *a1, uint64_t *a2)
{
  double v3 = *(double *)a2;
  float64x2_t v4 = vnegq_f64(*(float64x2_t *)(a2 + 1));
  double v5 = -*((double *)a2 + 3);
  return FigMotionMultiplyQuaternions(&v3, a1);
}

void FigMotionInterpolateQuaternionsByAngle(uint64_t a1, double *a2, float a3)
{
  long double cosval = *(double *)a1;
  float64x2_t v19 = vnegq_f64(*(float64x2_t *)(a1 + 8));
  double v20 = -*(double *)(a1 + 24);
  long double v5 = FigMotionMultiplyQuaternions(&cosval, a2);
  double v8 = v7;
  double v10 = v9;
  if (fabs(v5) <= 1.0)
  {
    double v11 = v6;
    long double cosval = 0.0;
    float64x2_t v19 = 0uLL;
    long double v12 = acos(v5);
    double v13 = sin(v12);
    double v14 = a3;
    double v15 = v12 * v14;
    if (v13 <= 0.00000001)
    {
      long double cosval = cos(v15);
      v19.f64[0] = v8 * v14;
      v19.f64[1] = v10 * v14;
      double v17 = v11 * v14;
    }
    else
    {
      __double2 v16 = __sincos_stret(v15);
      long double cosval = v16.__cosval;
      v19.f64[0] = v16.__sinval / v13 * v8;
      v19.f64[1] = v16.__sinval / v13 * v10;
      double v17 = v16.__sinval / v13 * v11;
    }
    double v20 = v17;
    FigMotionMultiplyQuaternions((double *)a1, &cosval);
  }
}

double FigMotionMultiplyQuaternions(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v5 = *a2;
  double v4 = a2[1];
  double v6 = a1[2];
  double v7 = a1[3];
  double v9 = a2[2];
  double v8 = a2[3];
  double v10 = *a2 * v7 + *a1 * v8 + v3 * v9 - v6 * v4;
  v12[2] = *a2 * v6 + *a1 * v9 + v7 * v4 - v3 * v8;
  v12[3] = v10;
  v12[0] = v2 * v5 - v3 * v4 - v6 * v9 - v7 * v8;
  v12[1] = v3 * v5 + v2 * v4 + v6 * v8 - v7 * v9;
  FigMotionNormalizeQuaternion(v12);
  return v12[0];
}

uint64_t FigMotionNormalizeQuaternion(double *a1)
{
  if (a1
    && (v2 = *a1, v1 = a1[1], double v3 = a1[2], v4 = a1[3], v5 = sqrt(v1 * v1 + v2 * v2 + v3 * v3 + v4 * v4), v5 > 0.00000001))
  {
    double v6 = 1.0 / v5;
    *a1 = v2 * v6;
    a1[1] = v1 * v6;
    a1[2] = v3 * v6;
    a1[3] = v4 * v6;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

float FigMotionRotationRateFromDeltaQuaternion(double *a1, float32x2_t *a2, double a3)
{
  if (a3 >= 0.00000001)
  {
    double v8 = a3;
    float v4 = FigMotionDeltaRotationFromQuaternion(a1);
    HIDWORD(a3) = v5;
    *a2 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)&a3), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0)));
    *(float *)&a3 = v6 / v8;
    a2[1].i32[0] = LODWORD(a3);
  }
  return *(float *)&a3;
}

float FigMotionDeltaRotationFromQuaternion(double *a1)
{
  long double v2 = *a1;
  double v3 = sqrt(1.0 - v2 * v2);
  if (v3 <= 1.0e-10)
  {
    return a1[1] + a1[1];
  }
  else
  {
    double v7 = v3;
    long double v4 = acos(v2);
    return a1[1] * (v4 + v4) / v7;
  }
}

uint64_t FigMotionComputeLensPositionScalingFactor(const __CFDictionary *a1, int a2, uint64_t a3, int a4, uint64_t a5, float *a6)
{
  if (a1 && a6)
  {
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    uint64_t SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
    if (SensorValidCropRect)
    {
      uint64_t v13 = SensorValidCropRect;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F54370]))
      {
        FigCFDictionaryGetCGRectIfPresent();
        if (*((double *)&v15 + 1) > 0.0 && *(double *)&v15 > 0.0) {
          a2 = (int)*(double *)&v15;
        }
      }
      float v12 = *(double *)&v15;
      if (v12 <= 0.0 || a4 <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      else
      {
        uint64_t v13 = 0;
        *a6 = (float)a2 / (float)((float)a4 * v12);
      }
    }
    return v13;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputePrincipalPoint(const __CFDictionary *a1, int a2, int a3, int a4, int a5, int a6, float64x2_t *a7, float a8, float a9)
{
  unsigned int value = 0;
  CGPoint v19 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  CGPoint point = v19;
  if (a1 && a7)
  {
    double v16 = ((double)a2 + -1.0) * 0.5;
    double v17 = ((double)a3 + -1.0) * 0.5;
    v22.f64[0] = v16;
    v22.f64[1] = v17;
    if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E4F54108], (const void **)&value)
      && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point)
      && FigMotionComputeSensorCroppedReferenceCenter(a1, (float64x2_t *)&v19))
    {
      v22.f64[0] = v16 + (point.x - v19.x) * a9 * (double)a4;
      v22.f64[1] = v17 + (point.y - v19.y) * a9 * (double)a5;
    }
    if (!a6 || (uint64_t result = FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v22, a8, a9), !result))
    {
      uint64_t result = 0;
      *a7 = v22;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

BOOL FigMotionComputeSensorCroppedReferenceCenter(const __CFDictionary *a1, float64x2_t *a2)
{
  float64x2_t v12 = *(float64x2_t *)MEMORY[0x1E4F1DB28];
  float64x2_t v13 = *(float64x2_t *)(MEMORY[0x1E4F1DB28] + 16);
  int SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
  if (!SensorValidCropRect)
  {
    __asm { FMOV            V2.2D, #-1.0 }
    float64x2_t v9 = vaddq_f64(v13, _Q2);
    __asm { FMOV            V2.2D, #0.5 }
    *a2 = vmlaq_f64(v12, _Q2, v9);
  }
  return SensorValidCropRect == 0;
}

uint64_t FigMotionGetSensorValidCropRect(const __CFDictionary *a1)
{
  if ((CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F54218])
     || CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F54358])
     || CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F54158]))
    && FigCFDictionaryGetCGRectIfPresent())
  {
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigMotionAdjustPointForSphereMovement(uint64_t a1, float64x2_t *a2, float a3, float a4)
{
  if (a1)
  {
    uint64_t v7 = FigMotionComputeAverageSpherePosition();
    if (v7)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      *a2 = vaddq_f64(*a2, vcvtq_f64_f32(vmul_n_f32(0, a3 * a4)));
    }
    return v7;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeAverageSpherePosition()
{
  CFDictionaryRef v0 = (const __CFDictionary *)MEMORY[0x1F4188790]();
  long double v2 = v1;
  double v4 = v3;
  CFDictionaryRef v5 = v0;
  v26[1530] = *(double *)MEMORY[0x1E4F143B8];
  int v24 = 0;
  double valuePtr = 0.0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E4F53E48]);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberFloat64Type, &valuePtr);
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53EE8]);
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt32Type, &v24);
      int v8 = v24;
      double v9 = valuePtr;
      float32x2_t *v2 = 0;
      unsigned int v25 = 0;
      float32x2_t *v2 = 0;
      CFDataRef v10 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53F78]);
      if (v10)
      {
        uint64_t ISPHallData = FigMotionGetISPHallData(v10, (uint64_t)v26, (int *)&v25, 510);
        if (ISPHallData)
        {
          uint64_t v21 = ISPHallData;
          fig_log_get_emitter();
          FigDebugAssert3();
          fig_log_get_emitter();
          FigDebugAssert3();
          return v21;
        }
        unsigned int v12 = v25;
        if ((int)v25 >= 1)
        {
          unint64_t v13 = 0;
          int v14 = 0;
          double v15 = v4 + v9 * -0.5;
          double v16 = (double)v8 / 1000000.0 + v15;
          uint64_t v17 = 24 * v25;
          do
          {
            double v18 = v26[v13 / 8];
            if (v18 >= v15 && v18 <= v16)
            {
              float32x2_t *v2 = vadd_f32(*(float32x2_t *)&v26[v13 / 8 + 1], *v2);
              ++v14;
            }
            v13 += 24;
          }
          while (v17 != v13);
          if (v14)
          {
            *(float *)&double v16 = (float)v14;
            float32x2_t *v2 = vdiv_f32(*v2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v16, 0));
          }
          else
          {
            unsigned int v20 = v12 - 1;
            if (v26[0] > v16) {
              unsigned int v20 = 0;
            }
            float32x2_t *v2 = *(float32x2_t *)&v26[3 * v20 + 1];
            low_freq_error_logging();
          }
        }
      }
      return 0;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionGetISPHallData(const __CFData *a1, uint64_t a2, int *a3, int a4)
{
  unint64_t Length = CFDataGetLength(a1);
  if (Length <= 7) {
    goto LABEL_28;
  }
  unint64_t v9 = Length;
  BytePtr = CFDataGetBytePtr(a1);
  if (*(_DWORD *)BytePtr >= 2u) {
    goto LABEL_28;
  }
  int v11 = 16;
  if (*(_DWORD *)BytePtr == 1) {
    int v11 = 24;
  }
  if (v9 != v11 * (uint64_t)*((int *)BytePtr + 1) + 8)
  {
LABEL_28:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v23 = FigSignalErrorAt();
    BytePtr = 0;
    if (v23)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v23;
    }
  }
  if (a3)
  {
    int v12 = *((_DWORD *)BytePtr + 1);
    if (v12 >= a4) {
      int v12 = a4;
    }
    *a3 = v12;
    if (*(_DWORD *)BytePtr == 1)
    {
      if (v12 >= 1)
      {
        uint64_t v18 = 0;
        CGPoint v19 = (float *)(a2 + 12);
        unsigned int v20 = (int *)(BytePtr + 28);
        do
        {
          int64_t v21 = FigHostTimeToNanoseconds();
          CMTimeMake(&v26, v21, 1000000000);
          *(Float64 *)(v19 - 3) = CMTimeGetSeconds(&v26);
          *(v19 - 1) = (float)*(v20 - 3) * 0.0039062;
          float *v19 = (float)*(v20 - 2) * 0.0039062;
          v19[1] = (float)*(v20 - 1) * 0.0039062;
          int v22 = *v20;
          v20 += 6;
          v19[2] = (float)v22 * 0.0039062;
          ++v18;
          v19 += 6;
        }
        while (v18 < *a3);
      }
    }
    else
    {
      if (*(_DWORD *)BytePtr) {
        return 4294954515;
      }
      if (v12 >= 1)
      {
        uint64_t v13 = 0;
        int v14 = (Float64 *)(a2 + 16);
        double v15 = (int *)(BytePtr + 20);
        do
        {
          int64_t v16 = FigHostTimeToNanoseconds();
          CMTimeMake(&time, v16, 1000000000);
          *(v14 - 2) = CMTimeGetSeconds(&time);
          *((float *)v14 - 2) = (float)*(v15 - 1) * 0.0039062;
          int v17 = *v15;
          v15 += 4;
          *((float *)v14 - 1) = (float)v17 * 0.0039062;
          Float64 *v14 = 0.0;
          v14 += 3;
          ++v13;
        }
        while (v13 < *a3);
      }
    }
    return 0;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t low_freq_error_logging()
{
  mach_absolute_time();
  uint64_t result = FigHostTimeToNanoseconds();
  if (low_freq_error_logging_last_log) {
    BOOL v1 = (unint64_t)(result - low_freq_error_logging_last_log) >= 0x3B9ACA00;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    if (low_freq_error_logging_filtered) {
      low_freq_error_logging_filtered = 0;
    }
    low_freq_error_logging_last_log = result;
  }
  else
  {
    ++low_freq_error_logging_filtered;
  }
  return result;
}

uint64_t low_freq_error_logging_0()
{
  mach_absolute_time();
  uint64_t result = FigHostTimeToNanoseconds();
  if (low_freq_error_logging_last_log_0) {
    BOOL v1 = (unint64_t)(result - low_freq_error_logging_last_log_0) >= 0x3B9ACA00;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    if (low_freq_error_logging_filtered_0) {
      low_freq_error_logging_filtered_0 = 0;
    }
    low_freq_error_logging_last_log_0 = result;
  }
  else
  {
    ++low_freq_error_logging_filtered_0;
  }
  return result;
}

uint64_t cs_configurationIsConfiguredForReactionEffects(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  BOOL v1 = (void *)[a1 connectionConfigurations];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = 0;
    char v5 = 0;
    int v6 = 0;
    char v7 = 0;
    uint64_t v8 = *(void *)v16;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v1);
        }
        CFDataRef v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "reactionEffectsEnabled")) {
          v4 |= [a1 suppressVideoEffects] ^ 1;
        }
        char v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "reactionEffectsProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "reactionEffectsSupported"))
        {
          if ([v10 stillImageSinkConfiguration] || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            int v6 = 1;
            char v7 = 1;
          }
          else
          {
            int v6 = 1;
          }
        }
        v5 |= v11;
        if (v4 & v6 & 1) != 0 && (v7)
        {
          LOBYTE(v6) = 1;
          char v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      uint64_t v12 = [v1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v3 = v12;
    }
    while (v12);
LABEL_20:
    if (v5) {
      return 1;
    }
  }
  else
  {
    char v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph(@"reactioneffects", v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t captureSession_commitInflightConfiguration(uint64_t a1)
{
  uint64_t v447 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v311 = v1;
    LODWORD(v306) = 0;
    FigDebugAssert3();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v4 = captureSession_checkClientSessionIsAllowedToRun(a1, *(void **)(DerivedStorage + 448), 0, 0, 0);
  if (v4)
  {
    uint64_t started = v4;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
    FigDebugAssert3();
    int v6 = 0;
    id v7 = 0;
    goto LABEL_5;
  }
  v346 = (const void *)a1;
  uint64_t v9 = *(void **)(DerivedStorage + 448);
  if (v9 == *(void **)(DerivedStorage + 456))
  {
    int v6 = 0;
    id v7 = 0;
  }
  else
  {
    id v7 = v9;
    if ([*(id *)(DerivedStorage + 480) isEqual:*(void *)(DerivedStorage + 488)]) {
      int v6 = 0;
    }
    else {
      int v6 = (void *)[*(id *)(DerivedStorage + 480) mutableCopy];
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  if (*(void *)(DerivedStorage + 96))
  {
    uint64_t v10 = [*(id *)(DerivedStorage + 120) mediaEnvironmentTCCIdentity];
    if (!v10) {
      goto LABEL_454;
    }
    long long v11 = *(_OWORD *)(DerivedStorage + 36);
    long long v445 = *(_OWORD *)(DerivedStorage + 20);
    long long v446 = v11;
    uint64_t v12 = soft_PAAuthenticatedClientIdentity(&v445, v10);
    if (!v12) {
      goto LABEL_454;
    }
  }
  else
  {
    if (![v7 tccIdentity]) {
      goto LABEL_18;
    }
    uint64_t v13 = [v7 tccIdentity];
    long long v14 = *(_OWORD *)(DerivedStorage + 36);
    long long v445 = *(_OWORD *)(DerivedStorage + 20);
    long long v446 = v14;
    uint64_t v12 = soft_PAAuthenticatedClientIdentity(&v445, v13);
    if (!v12)
    {
LABEL_454:
      FigDebugAssert3();
      uint64_t started = FigSignalErrorAt();
      goto LABEL_5;
    }
  }
  objc_msgSend(v7, "setTccIdentity:", v12, v306, v311);
LABEL_18:
  if (!v7)
  {
    v442[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    id v7 = 0;
    uint64_t started = 0;
    goto LABEL_5;
  }
  if (dword_1EB4C5110)
  {
    v442[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    long long v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  id v17 = v7;
  id v18 = v6;
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  v350 = *(void **)(DerivedStorage + 456);
  *(void *)(DerivedStorage + 456) = v7;
  CGPoint v19 = *(void **)(DerivedStorage + 488);
  if (v6)
  {
    id v20 = v6;
  }
  else
  {
    if (v19)
    {
      CGPoint v19 = 0;
      goto LABEL_27;
    }
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  *(void *)(DerivedStorage + 488) = v20;
LABEL_27:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v345 = DerivedStorage;
  v322 = v6;
  if (!*(void *)(DerivedStorage + 632))
  {
    uint64_t v84 = captureSession_buildGraphWithConfiguration(a1, (uint64_t)v7, 0, 0);
    if (v84)
    {
      uint64_t started = v84;
      v442[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      int v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v323 = 0;
      int v99 = 0;
      goto LABEL_370;
    }
    int v323 = 0;
    int v99 = 0;
    goto LABEL_421;
  }
  unsigned int v422 = 0;
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v311 = v1;
    LODWORD(v306) = 0;
    FigDebugAssert3();
  }
  uint64_t v22 = captureSession_clientSetsUserInitiatedCaptureRequestTime();
  v347 = [[FigCaptureSessionParsedConfiguration alloc] initWithSessionConfiguration:v350 clientSetsUserInitiatedCaptureRequestTime:v22 restrictions:*(void *)(v21 + 440)];
  if (!v347
    || (v362 = [[FigCaptureSessionParsedConfiguration alloc] initWithSessionConfiguration:v7 clientSetsUserInitiatedCaptureRequestTime:v22 restrictions:*(void *)(v21 + 440)]) == 0)
  {
    uint64_t started = FigSignalErrorAt();
    int v323 = 0;
    int v99 = 0;
    if (started) {
      goto LABEL_364;
    }
    goto LABEL_421;
  }
  long long v421 = 0u;
  long long v420 = 0u;
  long long v419 = 0u;
  long long v418 = 0u;
  uint64_t v23 = *(void **)(v21 + 656);
  uint64_t v24 = [v23 countByEnumeratingWithState:&v418 objects:v442 count:16];
  unsigned int v25 = v350;
  if (v24)
  {
    uint64_t v26 = v24;
    uint64_t v27 = *(void *)v419;
    do
    {
      uint64_t v28 = 0;
      do
      {
        if (*(void *)v419 != v27) {
          objc_enumerationMutation(v23);
        }
        uint64_t v29 = objc_msgSend(*(id *)(v21 + 656), "objectForKeyedSubscript:", *(void *)(*((void *)&v418 + 1) + 8 * v28), v306, v311);
        if (v29) {
          uint64_t v30 = *(void *)(v29 + 8);
        }
        else {
          uint64_t v30 = 0;
        }
        cs_updateConfigurationsWithCaptureSource(v350, v30);
        ++v28;
      }
      while (v26 != v28);
      uint64_t v31 = [v23 countByEnumeratingWithState:&v418 objects:v442 count:16];
      uint64_t v26 = v31;
    }
    while (v31);
  }
  v321 = v19;
  long long v417 = 0u;
  long long v416 = 0u;
  long long v415 = 0u;
  long long v414 = 0u;
  uint64_t v351 = v21;
  uint64_t v32 = objc_msgSend(*(id *)(v21 + 664), "previewSinkPipelines", v306);
  uint64_t v33 = [v32 countByEnumeratingWithState:&v414 objects:type count:16];
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)v415;
    do
    {
      for (uint64_t i = 0; i != v34; ++i)
      {
        if (*(void *)v415 != v35) {
          objc_enumerationMutation(v32);
        }
        uint64_t v37 = *(void **)(*((void *)&v414 + 1) + 8 * i);
        if ([v37 sinkID])
        {
          uint64_t v38 = [v37 sinkID];
          uint64_t v39 = [v37 filters];
          [v37 simulatedAperture];
          float v41 = v40;
          [v37 portraitLightingEffectStrength];
          float v43 = v42;
          uint64_t v44 = [v37 semanticStyle];
          [v37 primaryCaptureRectAspectRatio];
          double v46 = v45;
          [v37 primaryCaptureRectCenter];
          cs_updateConfigurationsWithPreviewSinkProperties(v350, v38, v39, v44, [v37 primaryCaptureRectUniqueID], v41, v43, v46, v47, v48);
        }
      }
      uint64_t v34 = [v32 countByEnumeratingWithState:&v414 objects:type count:16];
    }
    while (v34);
  }
  id v332 = v7;
  if (cs_configurationChangesAreLiveReconfigurable(v350, v7))
  {
    captureSession_updateGraphForVideoPreviewSinkConfigurationChanges((uint64_t)v346, v362, 1);
    if (!*(unsigned char *)(v351 + 404) || *(_DWORD *)(v351 + 400) != 2) {
      captureSession_waitForGraphToStart((uint64_t)v346, 0);
    }
    uint64_t v49 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v311 = v1;
      LODWORD(v307) = 0;
      FigDebugAssert3();
    }
    long long v444 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CFNumberRef v50 = [(FigCaptureSessionParsedConfiguration *)v362 parsedMetadataSinkConfigurations];
    uint64_t v51 = [(NSArray *)v50 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = **(void **)&valuePtr[1];
      do
      {
        for (uint64_t j = 0; j != v52; ++j)
        {
          if (**(void **)&valuePtr[1] != v53) {
            objc_enumerationMutation(v50);
          }
          uint64_t v55 = (void *)[*(id *)(*((void *)&valuePtr[0] + 1) + 8 * j) metadataObjectConnectionConfiguration];
          uint64_t v56 = objc_msgSend(*(id *)(v49 + 664), "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v55, "sinkConfiguration"), "sinkID"));
          [v55 metadataRectOfInterest];
          -[FigCaptureMetadataSinkPipeline setRectOfInterest:](v56, v57, v58, v59, v60);
        }
        uint64_t v52 = [(NSArray *)v50 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
      }
      while (v52);
    }
    captureSession_updateGraphForVideoPreviewSinkConfigurationChanges((uint64_t)v346, v362, 0);
    uint64_t v61 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v312 = v1;
      LODWORD(v308) = 0;
      FigDebugAssert3();
    }
    long long v444 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    BOOL v62 = [(FigCaptureSessionParsedConfiguration *)v362 parsedStillImageSinkConfigurations];
    uint64_t v63 = [(NSArray *)v62 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = **(void **)&valuePtr[1];
      do
      {
        for (uint64_t k = 0; k != v64; ++k)
        {
          if (**(void **)&valuePtr[1] != v65) {
            objc_enumerationMutation(v62);
          }
          objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](objc_msgSend((id)objc_msgSend(*(id *)(v61 + 664), "stillImageSinkPipelineSessionStorageWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&valuePtr[0] + 1) + 8 * k), "stillImageConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "cameraSourcePipeline")), "setExifFocalLengthsByZoomFactor:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&valuePtr[0] + 1) + 8 * k), "stillImageConnectionConfiguration"),
                    "irisSinkConfiguration"),
              "exifFocalLengthsByZoomFactor"));
        }
        uint64_t v64 = [(NSArray *)v62 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
      }
      while (v64);
    }
    uint64_t v67 = CMBaseObjectGetDerivedStorage();
    long long v437 = 0u;
    long long v438 = 0u;
    long long v439 = 0u;
    long long v440 = 0u;
    id obj = [(FigCaptureSessionParsedConfiguration *)v362 parsedPreviewSinkConfigurations];
    uint64_t v68 = [(NSArray *)obj countByEnumeratingWithState:&v437 objects:&v445 count:16];
    if (v68)
    {
      uint64_t v69 = v68;
      v352 = 0;
      uint64_t v354 = v67;
      uint64_t v70 = *(void *)v438;
      int v339 = 1;
      do
      {
        uint64_t v71 = 0;
        do
        {
          if (*(void *)v438 != v70) {
            objc_enumerationMutation(obj);
          }
          uint64_t v72 = [*(id *)(*((void *)&v437 + 1) + 8 * v71) videoPreviewSinkConnectionConfiguration];
          if (v72)
          {
            CFNumberRef v73 = (void *)v72;
            long long v436 = 0u;
            long long v435 = 0u;
            long long v434 = 0u;
            long long v433 = 0u;
            v74 = [(FigCaptureSessionParsedConfiguration *)v347 parsedPreviewSinkConfigurations];
            uint64_t v75 = [(NSArray *)v74 countByEnumeratingWithState:&v433 objects:valuePtr count:16];
            if (v75)
            {
              uint64_t v76 = v75;
              uint64_t v77 = *(void *)v434;
LABEL_82:
              uint64_t v78 = 0;
              while (1)
              {
                if (*(void *)v434 != v77) {
                  objc_enumerationMutation(v74);
                }
                uint64_t v79 = (void *)[*(id *)(*((void *)&v433 + 1) + 8 * v78) videoPreviewSinkConnectionConfiguration];
                if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v79, "sinkConfiguration"), "sinkID"), "isEqualToString:", objc_msgSend((id)objc_msgSend(v73, "sinkConfiguration"), "sinkID")))break; {
                if (v76 == ++v78)
                }
                {
                  uint64_t v76 = [(NSArray *)v74 countByEnumeratingWithState:&v433 objects:valuePtr count:16];
                  if (v76) {
                    goto LABEL_82;
                  }
                  goto LABEL_95;
                }
              }
              if (!v79) {
                goto LABEL_95;
              }
              uint64_t v80 = objc_msgSend(*(id *)(v354 + 664), "previewSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v73, "sinkConfiguration"), "sinkID"));
              unsigned int v25 = v350;
              if (([v79 enabled] & 1) != 0 || !objc_msgSend(v73, "enabled"))
              {
                if ([v79 enabled] && (objc_msgSend(v73, "enabled") & 1) == 0) {
                  captureSession_setPreviewRunning(v346, 0, v80);
                }
              }
              else
              {
                objc_msgSend((id)objc_msgSend(v80, "imageQueueSinkNode"), "inputConnectionWillBeEnabled");
                id v81 = v352;
                if (!v352) {
                  id v81 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                v352 = v81;
                [v81 addObject:v80];
                int v339 = 0;
              }
            }
            else
            {
LABEL_95:
              unsigned int v25 = v350;
            }
          }
          ++v71;
        }
        while (v71 != v69);
        uint64_t v82 = [(NSArray *)obj countByEnumeratingWithState:&v437 objects:&v445 count:16];
        uint64_t v69 = v82;
      }
      while (v82);
      id v7 = v332;
      if (v352)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v354 + 360));
        uint64_t v83 = *(void **)(v354 + 472);
        if (v83)
        {
          [v83 addObjectsFromArray:v352];
        }
        else
        {
          *(void *)(v354 + 472) = v352;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v354 + 360));
      }
    }
    else
    {
      int v339 = 1;
    }
    captureSession_updateGraphConnectionEnabledState((uint64_t)v346, v362);
    FigMemoryBarrier();
    long long v437 = 0u;
    long long v438 = 0u;
    long long v439 = 0u;
    long long v440 = 0u;
    uint64_t v157 = (void *)[v25 connectionConfigurations];
    uint64_t v158 = [v157 countByEnumeratingWithState:&v437 objects:&v445 count:16];
    if (v158)
    {
      uint64_t v159 = v158;
      uint64_t v160 = *(void *)v438;
      while (2)
      {
        for (uint64_t m = 0; m != v159; ++m)
        {
          if (*(void *)v438 != v160) {
            objc_enumerationMutation(v157);
          }
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v437 + 1) + 8 * m), "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource"))
          {
            char v162 = 1;
            goto LABEL_226;
          }
        }
        uint64_t v159 = [v157 countByEnumeratingWithState:&v437 objects:&v445 count:16];
        if (v159) {
          continue;
        }
        break;
      }
    }
    char v162 = 0;
LABEL_226:
    long long v436 = 0u;
    long long v435 = 0u;
    long long v434 = 0u;
    long long v433 = 0u;
    v163 = (void *)[v7 connectionConfigurations];
    uint64_t v164 = [v163 countByEnumeratingWithState:&v433 objects:valuePtr count:16];
    if (v164)
    {
      uint64_t v165 = v164;
      uint64_t v166 = *(void *)v434;
LABEL_228:
      uint64_t v167 = 0;
      while (1)
      {
        if (*(void *)v434 != v166) {
          objc_enumerationMutation(v163);
        }
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v433 + 1) + 8 * v167), "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource"))break; {
        if (v165 == ++v167)
        }
        {
          uint64_t v165 = [v163 countByEnumeratingWithState:&v433 objects:valuePtr count:16];
          if (v165) {
            goto LABEL_228;
          }
          goto LABEL_237;
        }
      }
      if ((v162 & 1) == 0) {
        goto LABEL_237;
      }
      int objb = 1;
    }
    else
    {
LABEL_237:
      int objb = cs_configurationsTransitionBetweenCenterStageAndManualFraming(v25, v7);
    }
    uint64_t v357 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v313 = v1;
      LODWORD(v309) = 0;
      FigDebugAssert3();
    }
    long long v444 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v348 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
    uint64_t v168 = [(NSArray *)v348 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
    if (v168)
    {
      uint64_t v169 = v168;
      uint64_t v353 = **(void **)&valuePtr[1];
      do
      {
        for (uint64_t n = 0; n != v169; ++n)
        {
          if (**(void **)&valuePtr[1] != v353) {
            objc_enumerationMutation(v348);
          }
          v171 = (void *)[*(id *)(*((void *)&valuePtr[0] + 1) + 8 * n) cameraConfiguration];
          uint64_t v172 = objc_msgSend(*(id *)(v357 + 664), "cameraSourcePipelineWithSourceID:", objc_msgSend(v171, "sourceID"));
          if (objb)
          {
            uint64_t v173 = [v171 cinematicFramingEnabled];
            [v171 manualFramingPanningAngleX];
            float v175 = v174;
            [v171 manualFramingPanningAngleY];
            float v177 = v176;
            [v171 videoZoomFactor];
            float v179 = v178;
            [v171 manualFramingDefaultZoomFactor];
            -[FigCaptureCameraSourcePipeline setCinematicFramingControlsWhileRunning:panningAngleX:panningAngleY:videoZoomFactor:manualFramingDefaultZoomFactor:](v172, v173, v175, v177, v179, v180);
          }
          -[FigCaptureCameraSourcePipeline setWhileRunningBackgroundBlurEnabled:studioLightingEnabled:reactionEffectsEnabled:backgroundReplacementEnabled:](v172, [v171 backgroundBlurEnabled], objc_msgSend(v171, "studioLightingEnabled"), objc_msgSend(v171, "reactionEffectsEnabled"), objc_msgSend(v171, "backgroundReplacementEnabled"));
          -[FigCaptureCameraSourcePipeline setSmartStyle:](v172, (uint64_t)[(FigCaptureSessionParsedConfiguration *)v362 smartStyle]);
          if ([v171 nonDestructiveCropEnabled])
          {
            [v171 normalizedNonDestructiveCropSize];
            CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v448);
            uint64_t v182 = [v171 source];
            uint64_t v183 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v183) {
              uint64_t v184 = v183;
            }
            else {
              uint64_t v184 = 0;
            }
            v185 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v184 + 56);
            if (v185) {
              v185(v182, @"NonDestructiveCropSize", DictionaryRepresentation);
            }
            CFRelease(DictionaryRepresentation);
          }
          uint64_t v186 = (const void *)[v171 source];
          uint64_t v187 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v172);
          uint64_t v188 = NSNumber;
          [v171 requiredMaxFrameRate];
          FigVideoCaptureSourceSetSessionProperty(v186, (uint64_t)v187, @"ActiveMaxFrameRate_FigCaptureSessionOnly", (const __CFDictionary *)objc_msgSend(v188, "numberWithFloat:"));
          v189 = NSNumber;
          [v171 requiredMinFrameRate];
          FigVideoCaptureSourceSetSessionProperty(v186, (uint64_t)v187, @"ActiveMinFrameRate_FigCaptureSessionOnly", (const __CFDictionary *)objc_msgSend(v189, "numberWithFloat:"));
          [v171 requiredMinFrameRate];
          objc_msgSend(v187, "setMinimumFrameRate:");
          [v171 requiredMaxFrameRate];
          objc_msgSend(v187, "setMaximumFrameRate:");
        }
        uint64_t v169 = [(NSArray *)v348 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
      }
      while (v169);
    }
    uint64_t v190 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v314 = v1;
      LODWORD(v310) = 0;
      FigDebugAssert3();
    }
    int v99 = v339;
    long long v444 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v191 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
    uint64_t v192 = [(NSArray *)v191 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
    id v7 = v332;
    uint64_t DerivedStorage = v345;
    CGPoint v19 = v321;
    if (v192)
    {
      uint64_t v193 = v192;
      uint64_t v194 = **(void **)&valuePtr[1];
      do
      {
        for (iuint64_t i = 0; ii != v193; ++ii)
        {
          if (**(void **)&valuePtr[1] != v194) {
            objc_enumerationMutation(v191);
          }
          -[FigCaptureCinematographyPipeline setSmartStyle:](objc_msgSend(*(id *)(v190 + 664), "cinematographyPipelineWithSourceID:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&valuePtr[0] + 1) + 8 * ii), "cameraConfiguration"), "sourceID")), (uint64_t)-[FigCaptureSessionParsedConfiguration smartStyle](v362, "smartStyle"));
        }
        uint64_t v193 = [(NSArray *)v191 countByEnumeratingWithState:valuePtr objects:&v445 count:16];
      }
      while (v193);
    }
    int v323 = 0;
    goto LABEL_363;
  }
  uint64_t v86 = v351;
  int v87 = *(unsigned __int8 *)(v351 + 648);
  char v320 = [v7 configuresAppAudioSessionToMixWithOthers];
  if (v87)
  {
    int isTrueVideoCaptureEnabled = cs_isTrueVideoCaptureEnabled(v347);
    long long v410 = 0u;
    long long v411 = 0u;
    long long v412 = 0u;
    long long v413 = 0u;
    CFArrayRef v89 = [(FigCaptureSessionParsedConfiguration *)v362 parsedMovieFileSinkConfigurations];
    uint64_t v90 = [(NSArray *)v89 countByEnumeratingWithState:&v410 objects:&v445 count:16];
    if (v90)
    {
      uint64_t v91 = v90;
      uint64_t v92 = *(void *)v411;
      while (2)
      {
        for (juint64_t j = 0; jj != v91; ++jj)
        {
          if (*(void *)v411 != v92) {
            objc_enumerationMutation(v89);
          }
          CFArrayRef v94 = *(void **)(*((void *)&v410 + 1) + 8 * jj);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v94, "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"))
          {
            if ((int)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v94, "videoConnectionConfiguration"), "sourceConfiguration"), "requiredFormat"), "dimensions") <= 3839)int v96 = 40; {
            else
            }
              int v96 = 0;
            unsigned int v315 = v96;
            int v95 = 1;
            goto LABEL_123;
          }
        }
        uint64_t v91 = [(NSArray *)v89 countByEnumeratingWithState:&v410 objects:&v445 count:16];
        if (v91) {
          continue;
        }
        break;
      }
    }
    int v95 = 0;
    unsigned int v315 = 100;
LABEL_123:
    unsigned int obja = isTrueVideoCaptureEnabled ^ v95;
    unsigned int v317 = isTrueVideoCaptureEnabled | v95;
  }
  else
  {
    int v95 = 0;
    unsigned int obja = 0;
    unsigned int v317 = 0;
    unsigned int v315 = 100;
  }
  int v325 = v95;
  uint64_t v97 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v343 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v326 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  int v323 = v87;
  if (!v87
    || ![(NSArray *)[(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations] count])
  {
    int v318 = 0;
    int v98 = 0;
    unsigned int v355 = 0;
    goto LABEL_268;
  }
  if ([(FigCaptureSessionParsedConfiguration *)v347 isMultiCamSession])
  {
    unsigned int v355 = 0;
  }
  else
  {
    BOOL v100 = [(FigCaptureSessionParsedConfiguration *)v362 isMultiCamSession];
    unsigned int v355 = !v100;
    if (!v100)
    {
      id v340 = (id)[MEMORY[0x1E4F1CA80] set];
      v336 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      long long v406 = 0u;
      long long v407 = 0u;
      long long v408 = 0u;
      long long v409 = 0u;
      uint64_t v101 = [(FigCaptureSessionParsedConfiguration *)v347 parsedCameraSourceConfigurations];
      uint64_t v102 = [(NSArray *)v101 countByEnumeratingWithState:&v406 objects:valuePtr count:16];
      if (v102)
      {
        uint64_t v103 = v102;
        uint64_t v104 = *(void *)v407;
        do
        {
          for (kuint64_t k = 0; kk != v103; ++kk)
          {
            if (*(void *)v407 != v104) {
              objc_enumerationMutation(v101);
            }
            uint64_t v106 = (void *)[*(id *)(*((void *)&v406 + 1) + 8 * kk) cameraConfiguration];
            uint64_t v107 = [v106 sourceID];
            [v340 addObject:v107];
            uint64_t v108 = NSNumber;
            [v106 videoZoomFactor];
            objc_msgSend(v336, "setObject:forKeyedSubscript:", objc_msgSend(v108, "numberWithFloat:"), v107);
          }
          uint64_t v103 = [(NSArray *)v101 countByEnumeratingWithState:&v406 objects:valuePtr count:16];
        }
        while (v103);
      }
      uint64_t v109 = (void *)[MEMORY[0x1E4F1CA80] set];
      long long v402 = 0u;
      long long v403 = 0u;
      long long v404 = 0u;
      long long v405 = 0u;
      v331 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
      uint64_t v110 = [(NSArray *)v331 countByEnumeratingWithState:&v402 objects:&v437 count:16];
      if (v110)
      {
        uint64_t v111 = v110;
        uint64_t v112 = *(void *)v403;
        uint64_t v319 = *MEMORY[0x1E4F52DE8];
        uint64_t v327 = *(void *)v403;
        v329 = v109;
        do
        {
          uint64_t v113 = 0;
          uint64_t v330 = v111;
          do
          {
            if (*(void *)v403 != v112) {
              objc_enumerationMutation(v331);
            }
            uint64_t v114 = *(void **)(*((void *)&v402 + 1) + 8 * v113);
            v115 = (void *)[v114 cameraConfiguration];
            uint64_t v116 = [v115 sourceID];
            [v109 addObject:v116];
            if ([v340 containsObject:v116])
            {
              unsigned int v117 = [v115 sourceDeviceType];
              if (v117 <= 9 && ((1 << v117) & 0x310) != 0)
              {
                uint64_t v119 = [*(id *)(v351 + 664) cameraSourcePipelineWithSourceID:v116];
                [(id)-[FigCaptureCameraSourcePipeline captureDevice](v119) masterCaptureStreamLastFrameEIT];
                float v121 = v120;
                uint64_t v122 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v119), "masterCaptureStream"), "portType");
                uint64_t v123 = -[FigCaptureCameraSourcePipeline captureSource](v119);
                v333 = (void *)v122;
                uint64_t v124 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v123, (void *)[v115 requiredFormat], v122, &v422);
                if (v422)
                {
                  FigDebugAssert3();
                  int v323 = 0;
                  int v99 = 0;
                  goto LABEL_380;
                }
                CFNumberRef v125 = (void *)v124;
                if ([v115 variableFrameRateVideoCaptureEnabled])
                {
                  [v125 variableFrameRateVideoCaptureFromFWAEMaxGain];
                }
                else if ([v115 lowLightVideoCaptureEnabled])
                {
                  [v125 lowLightVideoAEMaxGain];
                }
                else
                {
                  [v125 aeMaxGain];
                }
                float v127 = v126;
                if (objc_msgSend(FigCaptureConnectionConfigurationWithSinkType(objc_msgSend(v114, "videoCaptureConnectionConfigurations"), 4), "stereoVideoCaptureEnabled"))
                {
                  [v125 stereoVideoAEMaxGain];
                  if (v128 != 0.0)
                  {
                    [v125 stereoVideoAEMaxGain];
                    float v127 = v129;
                  }
                }
                float v130 = 24.0;
                if (([v115 variableFrameRateVideoCaptureEnabled] & 1) == 0
                  && ([v115 lowLightVideoCaptureEnabled] & 1) == 0)
                {
                  [v115 requiredMinFrameRate];
                  float v130 = v131;
                }
                objc_msgSend((id)objc_msgSend(v336, "objectForKeyedSubscript:", v116), "floatValue");
                float v133 = v132;
                [v115 videoZoomFactor];
                if (v134 > v133)
                {
                  float v135 = v134;
                  long long v136 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v119), "clientBaseZoomFactorsByPortType"), "allValues"), "sortedArrayUsingSelector:", sel_compare_);
                  long long v398 = 0u;
                  long long v399 = 0u;
                  long long v400 = 0u;
                  long long v401 = 0u;
                  uint64_t v137 = [v136 countByEnumeratingWithState:&v398 objects:&v433 count:16];
                  if (v137)
                  {
                    uint64_t v138 = v137;
                    uint64_t v139 = *(void *)v399;
LABEL_164:
                    uint64_t v140 = 0;
                    while (1)
                    {
                      if (*(void *)v399 != v139) {
                        objc_enumerationMutation(v136);
                      }
                      [*(id *)(*((void *)&v398 + 1) + 8 * v140) floatValue];
                      if (v135 >= v141 && v133 < v141) {
                        break;
                      }
                      if (v133 < v141 && v135 < v141) {
                        goto LABEL_179;
                      }
                      if (v138 == ++v140)
                      {
                        uint64_t v138 = [v136 countByEnumeratingWithState:&v398 objects:&v433 count:16];
                        if (v138) {
                          goto LABEL_164;
                        }
                        goto LABEL_179;
                      }
                    }
                    uint64_t v144 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v119);
                    *(float *)&double v145 = v135;
                    if (!objc_msgSend(v333, "isEqualToString:", objc_msgSend(v144, "preferredMasterPortTypeForZoomFactor:", v145)))goto LABEL_183; {
                  }
                    }
                }
LABEL_179:
                if (v121 <= (float)(v127 / v130) || v325 && [v333 isEqualToString:v319]) {
                  [v326 setObject:v333 forKeyedSubscript:v116];
                }
LABEL_183:

                id v7 = v332;
                uint64_t v112 = v327;
                uint64_t v109 = v329;
                uint64_t v111 = v330;
              }
            }
            ++v113;
          }
          while (v113 != v111);
          uint64_t v111 = [(NSArray *)v331 countByEnumeratingWithState:&v402 objects:&v437 count:16];
        }
        while (v111);
      }
      if ([v340 isEqualToSet:v109]) {
        unsigned int v146 = v355;
      }
      else {
        unsigned int v146 = 0;
      }
      unsigned int v355 = v146;
      int v87 = v323;
      uint64_t v86 = v351;
    }
  }
  long long v396 = 0u;
  long long v397 = 0u;
  long long v394 = 0u;
  long long v395 = 0u;
  CMTime v147 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
  uint64_t v148 = [(NSArray *)v147 countByEnumeratingWithState:&v394 objects:v432 count:16];
  if (v148)
  {
    uint64_t v149 = v148;
    uint64_t v150 = *(void *)v395;
    while (2)
    {
      for (uint64_t mm = 0; mm != v149; ++mm)
      {
        if (*(void *)v395 != v150) {
          objc_enumerationMutation(v147);
        }
        if (cs_timeOfFlightAssistedAutoFocusEnabled((void *)[*(id *)(*((void *)&v394 + 1) + 8 * mm) cameraConfiguration]))
        {
          int v318 = 1;
          goto LABEL_200;
        }
      }
      uint64_t v149 = [(NSArray *)v147 countByEnumeratingWithState:&v394 objects:v432 count:16];
      if (v149) {
        continue;
      }
      break;
    }
  }
  int v318 = 0;
LABEL_200:
  if (!v355)
  {
    int v98 = 0;
    goto LABEL_268;
  }
  long long v392 = 0u;
  long long v393 = 0u;
  long long v390 = 0u;
  long long v391 = 0u;
  v316 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
  uint64_t v328 = [(NSArray *)v316 countByEnumeratingWithState:&v390 objects:v431 count:16];
  int v98 = 0;
  if (v328)
  {
    uint64_t v324 = *(void *)v391;
LABEL_204:
    uint64_t v152 = 0;
    while (1)
    {
      if (*(void *)v391 != v324) {
        objc_enumerationMutation(v316);
      }
      v356 = *(void **)(*((void *)&v390 + 1) + 8 * v152);
      uint64_t v153 = objc_msgSend((id)objc_msgSend(v356, "cameraConfiguration"), "sourceID");
      uint64_t v154 = [*(id *)(v86 + 664) cameraSourcePipelineWithSourceID:v153];
      char v341 = [(FigCaptureSessionParsedConfiguration *)v362 parsedMicSourceConfiguration] != 0;
      char v337 = [(NSArray *)[(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations] count] > 1;
      uint64_t v334 = -[FigCaptureCameraSourcePipeline captureDevice](v154);
      uint64_t v155 = captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration((uint64_t)v346, v356, v341, v337, v334, -[FigCaptureSessionParsedConfiguration continuityCameraIsWired](v362, "continuityCameraIsWired"), -[FigCaptureSessionParsedConfiguration continuityCameraClientDeviceClass](v362, "continuityCameraClientDeviceClass"), -[FigCaptureSessionParsedConfiguration clientIsVOIP](v362, "clientIsVOIP"), -[FigCaptureSessionParsedConfiguration suppressVideoEffects](v362, "suppressVideoEffects"), (char *)[v326 objectForKeyedSubscript:v153], -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v362, "smartStyleRenderingEnabled"), (char *)-[FigCaptureSessionParsedConfiguration smartStyle](v362, "smartStyle"), obja, v320, &v422);
      if (v422)
      {
LABEL_379:
        FigDebugAssert3();
        int v323 = 0;
        int v99 = 0;
        id v7 = v332;
LABEL_380:
        uint64_t DerivedStorage = v345;
        CGPoint v19 = v321;
        goto LABEL_363;
      }
      uint64_t v156 = (uint64_t)v155;
      LOBYTE(v429[0]) = 0;
      v430[0] = 0;
      id v7 = v332;
      if (-[FigCaptureCameraSourcePipeline newConfigurationRequiresStreamRestart:tnrConfigurationChanged:newFormatIndexByPortTypeOut:](v154, (uint64_t)v155, v429, v430))break; {
      if (!v430[0])
      }
        -[FigCaptureCameraSourcePipeline nondisruptiveSwitchingFormatIndicesByPortTypeForConfiguration:](v154, v156);
      objc_msgSend(v97, "setObject:forKeyedSubscript:");
      [v343 setObject:v156 forKeyedSubscript:v153];
      v98 |= LOBYTE(v429[0]) != 0;
      ++v152;
      uint64_t v86 = v351;
      if (v328 == v152)
      {
        uint64_t v328 = [(NSArray *)v316 countByEnumeratingWithState:&v390 objects:v431 count:16];
        if (!v328)
        {
          unsigned int v355 = 1;
          int v87 = v323;
          goto LABEL_268;
        }
        goto LABEL_204;
      }
    }
    unsigned int v355 = 0;
    int v87 = v323;
    uint64_t v86 = v351;
  }
  else
  {
    unsigned int v355 = 1;
  }
LABEL_268:
  long long v388 = 0u;
  long long v389 = 0u;
  long long v386 = 0u;
  long long v387 = 0u;
  v196 = (void *)[*(id *)(v86 + 664) cameraSourcePipelines];
  uint64_t v197 = [v196 countByEnumeratingWithState:&v386 objects:v430 count:16];
  if (v197)
  {
    uint64_t v198 = v197;
    uint64_t v199 = *(void *)v387;
    uint64_t v200 = v355 & v98;
    do
    {
      for (nuint64_t n = 0; nn != v198; ++nn)
      {
        if (*(void *)v387 != v199) {
          objc_enumerationMutation(v196);
        }
        uint64_t v202 = *(void *)(*((void *)&v386 + 1) + 8 * nn);
        -[FigCaptureCameraSourcePipeline setKeepISPStreamingWhenStopping:](v202, v355);
        -[FigCaptureCameraSourcePipeline setDisableTemporalNoiseReductionWhenStopping:](v202, v200);
        -[FigCaptureCameraSourcePipeline setEmitsFramesWhileStopping:](v202, obja);
      }
      uint64_t v198 = [v196 countByEnumeratingWithState:&v386 objects:v430 count:16];
    }
    while (v198);
  }
  uint64_t v203 = v351;
  if ([(FigCaptureSessionParsedConfiguration *)v347 parsedMicSourceConfiguration]
    && [(FigCaptureSessionParsedConfiguration *)v362 parsedMicSourceConfiguration])
  {
    if (FigCaptureAudiomxdSupportEnabled())
    {
      v429[0] = 0;
      [*(id *)(v351 + 256) setMXSessionProperty:*MEMORY[0x1E4F76120] value:MEMORY[0x1E4F1CC38] error:v429];
      unsigned int v422 = [v429[0] code];
    }
    else
    {
      unsigned int v422 = CMSessionSetProperty();
    }
  }
  if (v87) {
    int v204 = v325;
  }
  else {
    int v204 = 0;
  }
  int v338 = v204;
  if ((obja & (v325 ^ 1)) != 0) {
    v205 = v350;
  }
  else {
    v205 = v7;
  }
  uint64_t v206 = [v205 smartStyleRenderingEnabled];
  if (v87) {
    captureSession_stopGraph(v346, 0, v317, v355, v325, v315, v206);
  }
  if (v355)
  {
    long long v384 = 0u;
    long long v385 = 0u;
    long long v382 = 0u;
    long long v383 = 0u;
    uint64_t v207 = [v97 countByEnumeratingWithState:&v382 objects:v429 count:16];
    if (v207)
    {
      uint64_t v208 = v207;
      uint64_t v209 = *(void *)v383;
      do
      {
        for (uint64_t i1 = 0; i1 != v208; ++i1)
        {
          if (*(void *)v383 != v209) {
            objc_enumerationMutation(v97);
          }
          uint64_t v211 = *(void *)(*((void *)&v382 + 1) + 8 * i1);
          uint64_t v212 = [*(id *)(v203 + 664) cameraSourcePipelineWithSourceID:v211];
          uint64_t v213 = [v97 objectForKeyedSubscript:v211];
          uint64_t v214 = [v343 objectForKeyedSubscript:v211];
          [(id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v214) maxFrameRateClientOverride];
          uint64_t v216 = (int)v215;
          [(id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v214) requiredMinFrameRate];
          uint64_t v218 = (int)v217;
          [(id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v214) requiredMaxFrameRate];
          uint64_t v220 = (int)v219;
          v221 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v212);
          uint64_t v222 = v218;
          uint64_t v203 = v351;
          [v221 setNondisruptiveSwitchingFormatIndicesByPortType:v213 maximumAllowedFrameRate:v216 minimumFrameRate:v222 maximumFrameRate:v220];
        }
        uint64_t v208 = [v97 countByEnumeratingWithState:&v382 objects:v429 count:16];
      }
      while (v208);
    }
  }
  if (![(NSArray *)[(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations] count])
  {
    BOOL v224 = 0;
    id v7 = v332;
    uint64_t DerivedStorage = v345;
    CGPoint v19 = v321;
    goto LABEL_334;
  }
  uint64_t v223 = [*(id *)(v203 + 776) count];
  BOOL v224 = v223 != 0;
  if (v223) {
    char v225 = v355;
  }
  else {
    char v225 = 1;
  }
  id v7 = v332;
  uint64_t DerivedStorage = v345;
  CGPoint v19 = v321;
  if (v225 & 1) != 0 || ((v318 ^ 1)) {
    goto LABEL_334;
  }
  BOOL v335 = v223 != 0;
  v226 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v227 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v378 = 0u;
  long long v379 = 0u;
  long long v380 = 0u;
  long long v381 = 0u;
  v342 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
  id v349 = (id)[(NSArray *)v342 countByEnumeratingWithState:&v378 objects:v428 count:16];
  if (!v349) {
    goto LABEL_323;
  }
  uint64_t v344 = *(void *)v379;
  do
  {
    for (i2 = 0; i2 != v349; i2 = (char *)i2 + 1)
    {
      if (*(void *)v379 != v344) {
        objc_enumerationMutation(v342);
      }
      v229 = *(void **)(*((void *)&v378 + 1) + 8 * (void)i2);
      v230 = (void *)[MEMORY[0x1E4F1CA48] array];
      v231 = (void *)[MEMORY[0x1E4F1CA48] array];
      v232 = (void *)[v229 cameraConfiguration];
      uint64_t v233 = [v232 sourceDeviceType];
      if (v233 > 0xD) {
        goto LABEL_315;
      }
      if (((1 << v233) & 0x1350) == 0)
      {
        if (v233 == 13)
        {
          v236 = v230;
          v237 = &unk_1EFAFFDC8;
        }
        else
        {
LABEL_315:
          v237 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v232, "sourceDeviceType"));
          v236 = v230;
        }
        [v236 addObject:v237];
        objc_msgSend(v231, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v232, "sourcePosition")));
        goto LABEL_317;
      }
      v234 = (void *)BWUnderlyingDeviceTypesForCompositeDeviceType(v233);
      [v230 addObjectsFromArray:v234];
      if ([v234 count])
      {
        unint64_t v235 = 0;
        do
        {
          objc_msgSend(v231, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v232, "sourcePosition")));
          ++v235;
        }
        while ([v234 count] > v235);
      }
LABEL_317:
      uint64_t CaptureDeviceID = FigCaptureSourceGetCaptureDeviceID([v232 source], &v422);
      if (v422) {
        goto LABEL_379;
      }
      uint64_t v239 = CaptureDeviceID;
      if ([v226 objectForKeyedSubscript:CaptureDeviceID])
      {
        objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", v239), "addObjectsFromArray:", v230);
        objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v239), "addObjectsFromArray:", v231);
      }
      else
      {
        [v226 setObject:v230 forKeyedSubscript:v239];
        [v227 setObject:v231 forKeyedSubscript:v239];
      }
      uint64_t v203 = v351;
    }
    id v349 = (id)[(NSArray *)v342 countByEnumeratingWithState:&v378 objects:v428 count:16];
  }
  while (v349);
LABEL_323:
  long long v376 = 0u;
  long long v377 = 0u;
  long long v374 = 0u;
  long long v375 = 0u;
  uint64_t v240 = [v226 countByEnumeratingWithState:&v374 objects:v427 count:16];
  if (v240)
  {
    uint64_t v241 = v240;
    uint64_t v242 = *(void *)v375;
    do
    {
      for (uint64_t i3 = 0; i3 != v241; ++i3)
      {
        if (*(void *)v375 != v242) {
          objc_enumerationMutation(v226);
        }
        unsigned int v422 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "keepControlOfStreamsWithPositions:deviceTypes:forDevice:", objc_msgSend(v227, "objectForKeyedSubscript:", *(void *)(*((void *)&v374 + 1) + 8 * i3)), objc_msgSend(v226, "objectForKeyedSubscript:", *(void *)(*((void *)&v374 + 1) + 8 * i3)), objc_msgSend(*(id *)(v351 + 776), "objectForKeyedSubscript:", *(void *)(*((void *)&v374 + 1) + 8 * i3)));
      }
      uint64_t v241 = [v226 countByEnumeratingWithState:&v374 objects:v427 count:16];
    }
    while (v241);
    id v7 = v332;
    uint64_t DerivedStorage = v345;
    CGPoint v19 = v321;
    uint64_t v203 = v351;
  }
  else
  {
    id v7 = v332;
    uint64_t DerivedStorage = v345;
    CGPoint v19 = v321;
  }
  BOOL v224 = v335;
LABEL_334:
  captureSession_teardownGraph(v346, 0, v355, v224, v318, v317);
  if (((v338 | v317 ^ 1) & 1) != 0 || (v244 = *(NSObject **)(v203 + 736)) == 0)
  {
    unsigned int v245 = captureSession_buildGraphWithConfiguration((uint64_t)v346, (uint64_t)v7, (uint64_t)v326, v317);
    unsigned int v422 = v245;
  }
  else
  {
    dispatch_semaphore_wait(v244, 0xFFFFFFFFFFFFFFFFLL);
    unsigned int v422 = captureSession_buildGraphWithConfiguration((uint64_t)v346, (uint64_t)v7, (uint64_t)v326, v317);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v203 + 736));

    *(void *)(v203 + 736) = 0;
    unsigned int v245 = v422;
  }
  if (v245)
  {
    LODWORD(v370) = 0;
    v424[0] = OS_LOG_TYPE_DEFAULT;
    v246 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v246, v424[0]);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v323)
    {
      captureSession_resetSessionRunningStateOnFatalError((uint64_t)v346, v422);
      captureSession_transitionToSessionStatus(v346, 0, v422);
    }
    int v323 = 0;
    goto LABEL_362;
  }
  if (((v325 | obja ^ 1) & 1) != 0
    || objc_msgSend((id)objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v362, "parsedCameraSourceConfigurations"), "firstObject"), "cameraConfiguration"), "sourcePosition") != 1)
  {
    goto LABEL_362;
  }
  long long v372 = 0u;
  long long v373 = 0u;
  long long v370 = 0u;
  long long v371 = 0u;
  v363 = [(FigCaptureSessionParsedConfiguration *)v362 parsedCameraSourceConfigurations];
  uint64_t v247 = [(NSArray *)v363 countByEnumeratingWithState:&v370 objects:v426 count:16];
  if (!v247)
  {
    float v264 = 0.0;
    float v251 = 0.0;
    v273 = (_DWORD *)&unk_1EB4C5000;
    goto LABEL_413;
  }
  uint64_t v248 = v247;
  uint64_t v249 = *(void *)v371;
  uint64_t v250 = *MEMORY[0x1E4F52DD8];
  id objc = (id)*MEMORY[0x1E4F52DE8];
  float v251 = 0.033;
  uint64_t DerivedStorage = v345;
LABEL_344:
  uint64_t v252 = 0;
  while (1)
  {
    if (*(void *)v371 != v249) {
      objc_enumerationMutation(v363);
    }
    v253 = (void *)[*(id *)(*((void *)&v370 + 1) + 8 * v252) cameraConfiguration];
    uint64_t v254 = [v253 sourceID];
    [v253 videoZoomFactor];
    float v256 = v255;
    uint64_t v257 = [*(id *)(v203 + 664) cameraSourcePipelineWithSourceID:v254];
    v258 = (void *)[(id)-[FigCaptureCameraSourcePipeline captureDevice](v257) clientBaseZoomFactorsByPortType];
    objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", v250), "floatValue");
    int v260 = v256 >= v259
         ? objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v257), "preferredMasterPortType"), "isEqual:", objc): 0;
    int v261 = [(id)-[FigCaptureCameraSourcePipeline captureDevice](v257) thermalSystemPressureLevel];
    if ([v253 sourceDeviceType] == 9) {
      break;
    }
    int v262 = [v253 sourceDeviceType];
    if (v262 == 8) {
      char v263 = v355;
    }
    else {
      char v263 = 1;
    }
    if ((v263 & 1) == 0)
    {
      objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", v250), "floatValue");
      if (v256 < v275) {
        int v276 = 1;
      }
      else {
        int v276 = v260;
      }
      float v264 = 0.166;
      if (v276) {
        float v264 = 0.266;
      }
      id v7 = v332;
      goto LABEL_406;
    }
    CGPoint v19 = v321;
    if (v262 == 8)
    {
      float v264 = 0.033;
LABEL_392:
      id v7 = v332;
      goto LABEL_407;
    }
    ++v252;
    uint64_t v203 = v351;
    if (v248 == v252)
    {
      uint64_t v248 = [(NSArray *)v363 countByEnumeratingWithState:&v370 objects:v426 count:16];
      if (v248) {
        goto LABEL_344;
      }
      float v264 = 0.0;
      goto LABEL_392;
    }
  }
  objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", v250), "floatValue");
  if (!v355)
  {
    id v7 = v332;
    if (v256 < v274)
    {
      float v264 = 0.3;
      goto LABEL_406;
    }
    objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", *MEMORY[0x1E4F52DF0]), "floatValue");
    if (v256 >= v281) {
      int v282 = 1;
    }
    else {
      int v282 = v260;
    }
    BOOL v279 = v282 == 0;
    float v264 = 0.183;
    float v280 = 0.3;
LABEL_404:
    if (!v279) {
      float v264 = v280;
    }
    goto LABEL_406;
  }
  id v7 = v332;
  if (v256 >= v274)
  {
    objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", *MEMORY[0x1E4F52DF0]), "floatValue");
    if (v256 >= v277) {
      int v278 = 1;
    }
    else {
      int v278 = v260;
    }
    BOOL v279 = v278 == 0;
    float v264 = 0.033;
    float v280 = 0.116;
    goto LABEL_404;
  }
  float v264 = 0.116;
LABEL_406:
  uint64_t DerivedStorage = v345;
  CGPoint v19 = v321;
LABEL_407:
  v273 = &unk_1EB4C5000;
  if (v261 != 1)
  {
    if (v261 == 2)
    {
      float v251 = 0.083;
    }
    else if (v261 <= 2)
    {
      float v251 = 0.0;
    }
    else
    {
      float v251 = 0.133;
    }
  }
LABEL_413:
  float v283 = v264 + v251;
  int v284 = v273[68];
  if ((float)(v264 + v251) <= 0.0)
  {
    if (v284)
    {
      int v369 = 0;
      os_log_type_t v368 = OS_LOG_TYPE_DEFAULT;
      v286 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSession_makeCommittedConfigurationLive(v346);
  }
  else
  {
    if (v284)
    {
      int v369 = 0;
      os_log_type_t v368 = OS_LOG_TYPE_DEFAULT;
      v285 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v425[0] = MEMORY[0x1E4F143A8];
    v425[1] = 3221225472;
    v425[2] = __captureSession_updateGraphConfiguration_block_invoke;
    v425[3] = &__block_descriptor_40_e8_v12__0B8l;
    v425[4] = v346;
    captureSession_dispatchGraphCalloutToWorkerQueueAfter(v346, (uint64_t)v425, v283);
  }
LABEL_362:
  int v99 = 0;
LABEL_363:
  uint64_t started = v422;
  if (!v422)
  {
LABEL_421:

    uint64_t started = 0;
    goto LABEL_422;
  }
LABEL_364:
  v442[0] = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v265 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v266 = v442[0];
  if (os_log_type_enabled(v265, type[0])) {
    unsigned int v267 = v266;
  }
  else {
    unsigned int v267 = v266 & 0xFFFFFFFE;
  }
  if (v267)
  {
    uint64_t v268 = *(void *)(DerivedStorage + 104);
    LODWORD(valuePtr[0]) = 136315650;
    *(void *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
    WORD6(valuePtr[0]) = 2114;
    *(void *)((char *)valuePtr + 14) = v268;
    WORD3(valuePtr[1]) = 1024;
    DWORD2(valuePtr[1]) = started;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_370:

  if (started == -12785 || started == -12681 || started == -12689)
  {
    v442[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v269 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v270 = v442[0];
    if (os_log_type_enabled(v269, type[0])) {
      unsigned int v271 = v270;
    }
    else {
      unsigned int v271 = v270 & 0xFFFFFFFE;
    }
    if (v271)
    {
      uint64_t v272 = *(void *)(DerivedStorage + 104);
      LODWORD(valuePtr[0]) = 136315906;
      *(void *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
      WORD6(valuePtr[0]) = 2114;
      *(void *)((char *)valuePtr + 14) = v272;
      WORD3(valuePtr[1]) = 1024;
      DWORD2(valuePtr[1]) = started;
      WORD6(valuePtr[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr[1] + 14) = -16407;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t started = 4294950889;
  }
LABEL_422:
  if (cs_errorIsFatal(started))
  {
    v287 = (const void *)cs_notificationPayloadWithConfigurationIDAndErrorStatus([v7 configurationID], started);
    v442[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v288 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v289 = v442[0];
    if (os_log_type_enabled(v288, type[0])) {
      unsigned int v290 = v289;
    }
    else {
      unsigned int v290 = v289 & 0xFFFFFFFE;
    }
    if (v290)
    {
      uint64_t v291 = *(void *)(DerivedStorage + 104);
      LODWORD(valuePtr[0]) = 136315650;
      *(void *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
      WORD6(valuePtr[0]) = 2114;
      *(void *)((char *)valuePtr + 14) = v291;
      WORD3(valuePtr[1]) = 1024;
      DWORD2(valuePtr[1]) = started;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    captureSession_postNotificationWithPayload(v346, @"ConfigurationCommitted", v287);
  }
  else
  {
    *(void *)&long long v445 = 0;
    LODWORD(valuePtr[0]) = 0;
    cs_getMasterClockAndType(*(void **)(DerivedStorage + 664), (uint64_t *)&v445, (int *)valuePtr);
    CFNumberRef v292 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
    uint64_t v293 = [v7 configurationID];
    v294 = (const void *)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithLongLong:", v293), @"ConfigurationID", (void)v445, @"MasterClock", v292, @"MasterClockType", 0);
    if (v292) {
      CFRelease(v292);
    }
    captureSession_postNotificationWithPayload(v346, @"ConfigurationCommitted", v294);
    long long v366 = 0u;
    long long v367 = 0u;
    long long v364 = 0u;
    long long v365 = 0u;
    v295 = (void *)[*(id *)(DerivedStorage + 664) previewSinkPipelines];
    uint64_t v296 = [v295 countByEnumeratingWithState:&v364 objects:v423 count:16];
    if (v296)
    {
      uint64_t v297 = v296;
      uint64_t v298 = *(void *)v365;
      do
      {
        for (uint64_t i4 = 0; i4 != v297; ++i4)
        {
          if (*(void *)v365 != v298) {
            objc_enumerationMutation(v295);
          }
          v300 = *(void **)(*((void *)&v364 + 1) + 8 * i4);
          if ([v300 sinkID] && (objc_msgSend(v300, "imageQueueUpdatedNotificationSent") & 1) == 0)
          {
            v301 = (const void *)[v300 imageQueueUpdatedPayloadToBeSentAfterCommitConfiguration];
            [v300 setImageQueueUpdatedNotificationSent:*(unsigned __int8 *)(v345 + 160)];
            captureSession_postNotificationWithPayload(v346, @"ImageQueueUpdated", v301);
          }
        }
        uint64_t v297 = [v295 countByEnumeratingWithState:&v364 objects:v423 count:16];
      }
      while (v297);
    }
  }
  if (v323)
  {
    uint64_t started = captureSession_startGraph(v346);
    int v6 = v322;
    if (started)
    {
      v442[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v302 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v303 = v442[0];
      if (os_log_type_enabled(v302, type[0])) {
        unsigned int v304 = v303;
      }
      else {
        unsigned int v304 = v303 & 0xFFFFFFFE;
      }
      if (v304)
      {
        uint64_t v305 = *(void *)(v345 + 104);
        LODWORD(valuePtr[0]) = 136315650;
        *(void *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
        WORD6(valuePtr[0]) = 2114;
        *(void *)((char *)valuePtr + 14) = v305;
        WORD3(valuePtr[1]) = 1024;
        DWORD2(valuePtr[1]) = started;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      captureSession_resetSessionRunningStateOnFatalError((uint64_t)v346, started);
      captureSession_transitionToSessionStatus(v346, 0, started);
    }
  }
  else
  {
    if (v99) {
      captureSession_makeCommittedConfigurationLive(v346);
    }
    int v6 = v322;
  }
LABEL_5:

  return started;
}

void captureSession_postNotificationWithPayload(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    CFRetain(a2);
    if (a3) {
      CFRetain(a3);
    }
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v8 = *(NSObject **)(v7 + 152);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSession_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    block[4] = a2;
    block[5] = a3;
    block[6] = v7;
    void block[7] = a1;
    dispatch_async(v8, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

BOOL cs_errorIsFatal(int a1)
{
  return ((a1 + 16408) > 5 || ((1 << (a1 + 24)) & 0x33) == 0) && a1 != -16952 && a1 != 0;
}

uint64_t captureSource_UnlockForConfiguration(uint64_t a1)
{
  return captureSource_safelyAccessStorage(a1, (uint64_t)&__block_literal_global_251);
}

uint64_t captureSource_LockForConfiguration(uint64_t a1)
{
  return captureSource_safelyAccessStorage(a1, (uint64_t)&__block_literal_global_249);
}

double FigCaptureMetadataUtilitiesRectNormalizedToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return (a1 - a5) / a7;
}

uint64_t csp_trueVideoCaptureEnabled(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(a1);
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"))return 1; {
        ++v5;
        }
      }
      while (v3 != v5);
      uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t cspc_getVideoStabilizationType(void *a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  long long v8 = (void *)[a1 sourceConfiguration];
  uint64_t v9 = [v8 source];
  uint64_t v10 = (void *)[v8 requiredFormat];
  v27[0] = a1;
  unsigned int v11 = objc_msgSend((id)objc_msgSend(+[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v27, 1), 1), "firstObject"), "intValue");
  if ((v11 & 0xFFFFFFFB) == 0 || v9 == 0)
  {
    int v13 = 0;
    goto LABEL_33;
  }
  *(void *)keyExistsAndHasValidFormat = 0;
  if ([a1 physicalMirroringForMovieRecordingEnabled])
  {
    int v13 = 2;
    goto LABEL_33;
  }
  if (v11 - 2 < 2 || v11 == 5)
  {
    if ([v10 stabilizationTypeOverrideForCinematic])
    {
      int v15 = [v10 stabilizationTypeOverrideForCinematic];
LABEL_19:
      int v13 = v15;
      goto LABEL_33;
    }
  }
  else if (v11 == 1 && [v10 stabilizationTypeOverrideForStandard])
  {
    int v15 = [v10 stabilizationTypeOverrideForStandard];
    goto LABEL_19;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  id v18 = *(void (**)(uint64_t, __CFString *, void, Boolean *))(v17 + 48);
  if (v18)
  {
    v18(v9, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], keyExistsAndHasValidFormat);
    id v19 = *(id *)keyExistsAndHasValidFormat;
  }
  else
  {
    id v19 = 0;
  }
  int v20 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", @"ISPMotionData"), "BOOLValue");
  if (v11 <= 5 && ((1 << v11) & 0x2C) != 0)
  {
    int v13 = 2;
  }
  else if (v20)
  {
    int v13 = 1;
  }
  else
  {
    int v13 = 2;
  }

LABEL_33:
  keyExistsAndHasValidFormat[0] = 0;
  if ((v11 | 4) == 4)
  {
    AppIntegerCFNumberRef Value = 0;
    Boolean v22 = 0;
LABEL_35:
    unsigned int v23 = v13;
    goto LABEL_37;
  }
  AppIntegerCFNumberRef Value = CFPreferencesGetAppIntegerValue(@"vis_type", @"com.apple.coremedia", keyExistsAndHasValidFormat);
  Boolean v22 = keyExistsAndHasValidFormat[0];
  unsigned int v23 = AppIntegerValue;
  if (!keyExistsAndHasValidFormat[0]) {
    goto LABEL_35;
  }
LABEL_37:
  if (a2)
  {
    if (!v11) {
      goto LABEL_44;
    }
  }
  else if (!v11 || (a4 & 1) == 0)
  {
    goto LABEL_44;
  }
  if (v11 != 4) {
    unsigned int v23 = 2;
  }
LABEL_44:
  if ((a3 & (v23 - 3 < 2)) != 0) {
    unsigned int v23 = 2;
  }
  if (v22) {
    unsigned __int8 v24 = a4;
  }
  else {
    unsigned __int8 v24 = 0;
  }
  if ((v24 & (AppIntegerValue == 4)) != 0) {
    return 4;
  }
  else {
    return v23;
  }
}

uint64_t cs_shouldEnableVideoSTF(void *a1, char a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:a1 includeIris:1];
  int v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", 0), "sourceConfiguration"), "requiredFormat"), "isVideoSTFSupported");
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v8 = [a1 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v21;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v21 != v10) {
        objc_enumerationMutation(a1);
      }
      uint64_t v12 = *(void **)(*((void *)&v20 + 1) + 8 * v11);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && (objc_msgSend((id)objc_msgSend(v12, "irisSinkConfiguration"), "irisMovieCaptureEnabled") & 1) != 0)
      {
        return 0;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [a1 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v9) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v13 = [a1 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v21;
LABEL_12:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v21 != v15) {
        objc_enumerationMutation(a1);
      }
      uint64_t v17 = *(void **)(*((void *)&v20 + 1) + 8 * v16);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if (objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled"))return 0; {
      }
        }
      if (v14 == ++v16)
      {
        uint64_t v14 = [a1 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v14) {
          goto LABEL_12;
        }
        break;
      }
    }
  }
  uint64_t result = 0;
  BOOL v19 = a3 != 10;
  if (v7)
  {
    if ((a2 & 1) == 0)
    {
      if ([v6 containsObject:&unk_1EFAFFDC8]) {
        return v19;
      }
      if ([v6 containsObject:&unk_1EFAFFDE0]) {
        return v19;
      }
      uint64_t result = [v6 containsObject:&unk_1EFAFFDF8];
      if (result) {
        return v19;
      }
    }
  }
  return result;
}

uint64_t BWEmitUnstyledBufferForInferencesOrAdjustedImageWithConfigurations(void *a1, void *a2)
{
  if ((int)[a1 smartStyleRenderingVersion] < 1) {
    return 0;
  }
  if (([a2 portraitEffectsMatteDeliveryEnabled] & 1) != 0
    || objc_msgSend((id)objc_msgSend(a2, "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    return 1;
  }
  uint64_t result = [a2 depthDataDeliveryEnabled];
  if (result)
  {
    return [a2 filterRenderingEnabled];
  }
  return result;
}

uint64_t __captureSession_shouldUseSceneClassifierToGateMetadataDetection_block_invoke(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 32) containsObject:a2])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    return 0;
  }
  else
  {
    return [a2 hasPrefix:@"mdta/com.apple.quicktime.detected-machine-readable-code."];
  }
}

uint64_t __fcp_identifyPlatform_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  uint64_t v1 = result;
  for (uint64_t i = 0; i != 78; i += 2)
  {
    if (qword_1A5EFD810[i] == v1) {
      uint64_t result = fcp_reconfigurePlatformWithOverride(LODWORD(qword_1A5EFD810[i + 1]), HIDWORD(qword_1A5EFD810[i + 1]), 0);
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatTileAlignment(int a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!FigCapturePixelFormatGetCompressionType(a1)) {
    goto LABEL_24;
  }
  DescriptionWithPixelFormatType = (void *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_24;
  }
  uint64_t v2 = (void *)[DescriptionWithPixelFormatType objectForKeyedSubscript:*MEMORY[0x1E4F24EE0]];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v2;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (!v3)
  {
LABEL_24:
    uint64_t v18 = 0;
    uint64_t v6 = 0;
    return v18 | v6;
  }
  uint64_t v4 = v3;
  LODWORD(v5) = 0;
  LODWORD(v6) = 0;
  uint64_t v22 = *(void *)v24;
  uint64_t v21 = *MEMORY[0x1E4F24ED0];
  uint64_t v7 = *MEMORY[0x1E4F24EE8];
  uint64_t v8 = *MEMORY[0x1E4F24E78];
  uint64_t v9 = *MEMORY[0x1E4F24E70];
  do
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (*(void *)v24 != v22) {
        objc_enumerationMutation(obj);
      }
      uint64_t v11 = *(void **)(*((void *)&v23 + 1) + 8 * i);
      unsigned int v12 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v21), "intValue");
      if (v12 <= 1) {
        int v13 = 1;
      }
      else {
        int v13 = v12;
      }
      unsigned int v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v7), "intValue");
      if (v14 <= 1) {
        int v15 = 1;
      }
      else {
        int v15 = v14;
      }
      int v16 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v8), "intValue") * v13;
      int v17 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v9), "intValue") * v15;
      if ((int)v6 <= v16) {
        uint64_t v6 = v16;
      }
      else {
        uint64_t v6 = v6;
      }
      if ((int)v5 <= v17) {
        uint64_t v5 = v17;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    uint64_t v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  }
  while (v4);
  uint64_t v18 = v5 << 32;
  return v18 | v6;
}

uint64_t fcp_reconfigurePlatformWithOverride(uint64_t result, int a2, char a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  sPlatformID = result;
  sPlatformVariant = a2;
  sPlatformIDString = 0;
  sPlatformSupportsHTPC16x8Compressiouint64_t n = 0;
  sPlatformSupportsHTPC32x4Compressiouint64_t n = 0;
  sPlatformSupportsUniversalCompressiouint64_t n = 0;
  sPlatformSupportsUniversalLossyCompressiouint64_t n = 0;
  sIOSurfaceWiringAssertionEnabled = 1;
  sISPHardwareCharacteristics = 0u;
  unk_1EB4C6138 = 0u;
  dword_1EB4C6148 = 0;
  switch((int)result)
  {
    case 1:
      uint64_t v3 = @"H7";
      goto LABEL_6;
    case 2:
      uint64_t v3 = @"H8";
      goto LABEL_6;
    case 3:
      uint64_t v3 = @"H9";
      goto LABEL_6;
    case 4:
      uint64_t v3 = @"H10";
LABEL_6:
      sPlatformIDString = (uint64_t)v3;
      return result;
    case 5:
      sPlatformIDString = @"H11";
      sPlatformSupportsHTPC16x8Compressiouint64_t n = 1;
      uint64_t v4 = 0x1AB0000012CLL;
      long long v5 = xmmword_1A5EFD800;
      int v6 = 533;
      goto LABEL_9;
    case 6:
      sPlatformIDString = @"H12";
      sPlatformSupportsHTPC16x8Compressiouint64_t n = 1;
      uint64_t v4 = 0x10A000000D5;
      long long v5 = xmmword_1A5EFD7F0;
      int v6 = 320;
LABEL_9:
      uint64_t v7 = &sPlatformSupportsHTPC32x4Compression;
      goto LABEL_19;
    case 7:
      sPlatformIDString = @"H13";
      uint64_t v4 = 0x10A000000D5;
      long long v5 = xmmword_1A5EFD7F0;
      int v6 = 320;
      uint64_t v7 = &sPlatformSupportsUniversalCompression;
      goto LABEL_19;
    case 8:
      uint64_t v8 = @"H14";
      goto LABEL_13;
    case 9:
      uint64_t v8 = @"H15";
LABEL_13:
      sPlatformIDString = (uint64_t)v8;
      sPlatformSupportsUniversalCompressiouint64_t n = 1;
      uint64_t v4 = 0x1640000010ALL;
      long long v5 = xmmword_1A5EFD7F0;
      int v6 = 400;
      goto LABEL_18;
    case 10:
      uint64_t v9 = @"H16";
      goto LABEL_16;
    case 11:
      uint64_t v9 = @"H17";
LABEL_16:
      sPlatformIDString = (uint64_t)v9;
      sPlatformSupportsUniversalCompressiouint64_t n = 1;
      uint64_t v4 = 0x1AB00000131;
      long long v5 = xmmword_1A5EFD7E0;
      int v6 = 450;
      goto LABEL_18;
    case 12:
      sPlatformSupportsUniversalCompressiouint64_t n = 1;
      uint64_t v4 = 0x1DB00000164;
      long long v5 = xmmword_1A5EFD7D0;
      int v6 = 600;
LABEL_18:
      uint64_t v7 = &sPlatformSupportsUniversalLossyCompression;
LABEL_19:
      *uint64_t v7 = 1;
      LODWORD(sISPHardwareCharacteristics) = 4;
      *(long long *)((char *)&sISPHardwareCharacteristics + 4) = v5;
      unk_1EB4C613C = v4;
      dword_1EB4C6144 = v6;
      dword_1EB4C6148 = 800;
      if (a3) {
        return result;
      }
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      uint64_t v10 = objc_msgSend((id)CVPixelFormatDescriptionGetPixelFormatTypes(), "reverseObjectEnumerator", 0);
      uint64_t result = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (result)
      {
        uint64_t v11 = result;
        int v12 = 0;
        char v13 = 0;
        char v14 = 0;
        int v15 = 0;
        uint64_t v16 = *(void *)v21;
        do
        {
          uint64_t v17 = 0;
          do
          {
            if (*(void *)v21 != v16) {
              objc_enumerationMutation(v10);
            }
            int v18 = [*(id *)(*((void *)&v20 + 1) + 8 * v17) intValue];
            uint64_t result = FigCapturePixelFormatGetCompressionType(v18);
            if (result == 4)
            {
              uint64_t result = FigCapturePixelFormatGetLossyCompressionLevel(v18);
              v14 |= result != 0;
              char v13 = 1;
            }
            else
            {
              if (result == 1) {
                int v19 = 1;
              }
              else {
                int v19 = v15;
              }
              if (result == 2) {
                int v12 = 1;
              }
              else {
                int v15 = v19;
              }
            }
            if (sPlatformSupportsHTPC16x8Compression)
            {
              if (v15 & v12)
              {
                LOBYTE(v12) = 1;
                LOBYTE(v15) = 1;
                goto LABEL_47;
              }
            }
            else if (sPlatformSupportsUniversalCompression)
            {
              if (sPlatformSupportsUniversalLossyCompression)
              {
                if (v14)
                {
                  char v14 = 1;
                  goto LABEL_47;
                }
              }
              else if (v13)
              {
                char v13 = 1;
                goto LABEL_47;
              }
            }
            ++v17;
          }
          while (v11 != v17);
          uint64_t result = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
          uint64_t v11 = result;
        }
        while (result);
      }
      else
      {
        LOBYTE(v12) = 0;
        char v13 = 0;
        char v14 = 0;
        LOBYTE(v15) = 0;
      }
LABEL_47:
      sPlatformSupportsHTPC16x8Compression &= v15 & 1;
      sPlatformSupportsHTPC32x4Compression &= v12 & 1;
      sPlatformSupportsUniversalCompression &= v13 & 1;
      sPlatformSupportsUniversalLossyCompression &= v14 & 1;
      return result;
    default:
      return result;
  }
}

uint64_t FigCapturePixelFormatGetCompressionType(int a1)
{
  uint64_t result = 0;
  if (a1 <= 796419631)
  {
    if (a1 <= 759318336)
    {
      if (a1 <= 645424689)
      {
        if (a1 <= 641877824)
        {
          if (a1 != 641230384)
          {
            int v4 = 641234480;
            goto LABEL_60;
          }
          return 4;
        }
        if (a1 == 641877825) {
          return 4;
        }
        unsigned __int16 v6 = 26160;
      }
      else
      {
        if (a1 > 645428785)
        {
          if (a1 != 645428786 && a1 != 758670896)
          {
            int v4 = 758674992;
            goto LABEL_60;
          }
          return 4;
        }
        if (a1 == 645424690) {
          return 4;
        }
        unsigned __int16 v6 = 30256;
      }
      int v4 = v6 | 0x26780000;
    }
    else if (a1 > 762869297)
    {
      if (a1 > 792229423)
      {
        if (a1 != 792229424 && a1 != 792872769)
        {
          int v4 = 795371056;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 762869298) {
        return 4;
      }
      int v4 = 792225328;
    }
    else
    {
      if (a1 > 762865199)
      {
        if (a1 != 762865200 && a1 != 762865202)
        {
          int v4 = 762869296;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 759318337) {
        return 4;
      }
      int v4 = 761816624;
    }
LABEL_60:
    if (a1 != v4) {
      return result;
    }
    return 4;
  }
  if (a1 > 2084718400)
  {
    if (a1 <= 2088269361)
    {
      if (a1 > 2088265263)
      {
        if (a1 != 2088265264 && a1 != 2088265266)
        {
          int v4 = 2088269360;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 2084718401) {
        return 4;
      }
      int v4 = 2087216688;
      goto LABEL_60;
    }
    if (a1 <= 2100852271)
    {
      if (a1 == 2088269362) {
        return 4;
      }
      int v5 = 2100848176;
    }
    else
    {
      if (a1 == 2100852272 || a1 == 2105042480) {
        return 2;
      }
      int v5 = 2105046576;
    }
    if (a1 != v5) {
      return result;
    }
    return 2;
  }
  if (a1 > 1530426927)
  {
    if (a1 <= 1534621231)
    {
      if (a1 != 1530426928)
      {
        int v3 = 1534617136;
LABEL_49:
        if (a1 != v3) {
          return result;
        }
      }
    }
    else if (a1 != 1534621232)
    {
      if (a1 != 2084070960)
      {
        int v4 = 2084075056;
        goto LABEL_60;
      }
      return 4;
    }
    return 1;
  }
  if (a1 > 796423727)
  {
    if (a1 != 796423728 && a1 != 796423730)
    {
      int v3 = 1530422832;
      goto LABEL_49;
    }
    return 4;
  }
  if (a1 != 796419632)
  {
    int v4 = 796419634;
    goto LABEL_60;
  }
  return 4;
}

CFTypeRef shmemAllocatorRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void iqsn_imageQueueReleaseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ReleasedImageInfo = (long long *)CAImageQueueGetReleasedImageInfo();
  if (ReleasedImageInfo)
  {
    long long v5 = *ReleasedImageInfo;
    long long v6 = ReleasedImageInfo[1];
    long long v7 = ReleasedImageInfo[2];
    *(_OWORD *)(a3 + 104) = ReleasedImageInfo[3];
    *(_OWORD *)(a3 + 88) = v7;
    *(_OWORD *)(a3 + 72) = v6;
    *(_OWORD *)(a3 + 56) = v5;
  }
  iqsn_releaseBufferContext((void *)a3);
}

void sub_1A58E8514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

double shmemPoolInit(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t cs_updateStillImageSinkPipelineCommonConfiguration(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  int v31 = 0;
  int v12 = (void *)[a3 sourceConfiguration];
  if (objc_msgSend((id)objc_msgSend(a3, "sinkConfiguration"), "sinkType") == 10) {
    char v13 = (void *)[a3 sinkConfiguration];
  }
  else {
    char v13 = 0;
  }
  unsigned int StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([v12 source], &v31);
  if (v31) {
    return FigDebugAssert3();
  }
  unsigned int v30 = StillImageNoiseReductionAndFusionScheme;
  int v15 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](a2);
  if (a4) {
    uint64_t v16 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  }
  else {
    uint64_t v16 = 1;
  }
  int v17 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "portraitEffectsMatteDeliveryEnabled");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    int v18 = 1;
  }
  else
  {
    int v18 = v17;
  }
  int v29 = v18;
  int v19 = [v13 maxQualityPrioritization];
  BOOL v20 = 0;
  if (objc_msgSend((id)objc_msgSend(v12, "requiredFormat"), "isHighPhotoQualitySupported") && v19 >= 2) {
    BOOL v20 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2);
  }
  int v21 = objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v12, "source"), @"DepthDataDeliveryConfigurations"), "objectForKeyedSubscript:", @"CapturePipeliningSupported"), "BOOLValue");
  if ([a5 isPhotoFormat]
    && -[FigCaptureCameraSourcePipeline usesFirmwareStillImageOutput](a2))
  {
    uint64_t v22 = [v15 depthDataDeliveryEnabled] ^ 1 | v21;
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = 875704422;
  [a1 setAllowsMultipleInflightCaptures:v22];
  [a1 setClientIsCameraOrDerivative:a6];
  [a1 setAllowedToModifyInputBuffers:!-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2)];
  int v24 = [a5 isHighPhotoQualitySupported];
  unsigned int v25 = [a5 usesPacked10BitFirmwareStillImageOutputPixelFormat];
  if (v24) {
    uint64_t v26 = v25 & v20;
  }
  else {
    uint64_t v26 = v25;
  }
  [a1 setInputIs10Bit:v26];
  objc_msgSend(a1, "setHorizontalSensorBinningFactor:", objc_msgSend(a5, "horizontalSensorBinningFactor"));
  objc_msgSend(a1, "setVerticalSensorBinningFactor:", objc_msgSend(a5, "verticalSensorBinningFactor"));
  [a5 maxSupportedFrameRate];
  objc_msgSend(a1, "setMaxSupportedFrameRate:");
  [a1 setMotionAttachmentsSource:-[FigCaptureCameraSourcePipeline motionAttachmentsSource](a2)];
  objc_msgSend(a1, "setSinkConfiguration:", objc_msgSend(a3, "sinkConfiguration"));
  [a1 setUsesHighEncodingPriority:v16];
  if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2))
  {
    if (FigCapturePixelFormatIsFullRange([a5 format])) {
      uint64_t v23 = 875704422;
    }
    else {
      uint64_t v23 = 875704438;
    }
  }
  [a1 setOutputPixelFormat:v23];
  if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2)
    || objc_msgSend((id)objc_msgSend(a3, "sourceConfiguration"), "colorSpace") == 2)
  {
    uint64_t v27 = [(id)-[FigCaptureCameraSourcePipeline captureDevice](a2) supportsWideColor];
    objc_msgSend(a1, "setOutputColorSpaceProperties:", +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", v27, cs_figCaptureColorSpaceFromSourcePipeline(a2), objc_msgSend(a5, "format"), objc_msgSend(a5, "dimensions"), objc_msgSend(a1, "outputPixelFormat")));
  }
  objc_msgSend(a1, "setStillImageStabilizationSupported:", objc_msgSend(a5, "isStillImageStabilizationSupported"));
  [a1 setNoiseReductionAndFusionScheme:v30];
  uint64_t result = objc_msgSend(a1, "setDepthDataDimensions:", objc_msgSend((id)objc_msgSend(v12, "depthDataFormat"), "soleHighResStillImageDimensions"));
  if (v29)
  {
    objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v12, "source"), @"PortraitEffectsMatteMainImageDownscalingFactor"), "floatValue");
    return objc_msgSend(a1, "setPortraitEffectsMatteMainImageDownscalingFactor:");
  }
  return result;
}

BWJasperColorStillsExecutorControllerConfiguration *BWPhotonicEngineCreateJasperColorStillsExecutorControllerConfiguration(void *a1)
{
  if (!-[BWPhotonicEngineNodeConfiguration depthDataDeliveryEnabled]((BOOL)a1)
    || !-[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1)
    || !-[BWPhotonicEngineNodeConfiguration digitalFlashSupportEnabled]((BOOL)a1))
  {
    return 0;
  }
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:-[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1)];
  uint64_t v3 = -[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1), "portType"));
  int v4 = objc_alloc_init(BWJasperColorStillsExecutorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v4);
  [(BWStillImageProcessorControllerConfiguration *)v4 setSensorConfigurationsByPortType:v2];
  -[BWJasperColorStillsExecutorControllerConfiguration setHorizontalSensorBinningFactor:](v4, "setHorizontalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setVerticalSensorBinningFactor:](v4, "setVerticalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setStandardFormatDimensions:](v4, "setStandardFormatDimensions:", -[BWPhotonicEngineNodeConfiguration standardFormatDimensions]((uint64_t)a1));
  if ([(BWJasperColorStillsExecutorControllerConfiguration *)v4 postponedProcessorSetupSupported])
  {
    BOOL v5 = (int)FigCapturePlatformIdentifier() > 10;
  }
  else
  {
    BOOL v5 = 0;
  }
  [(BWStillImageProcessorControllerConfiguration *)v4 setPostponeProcessorSetup:v5];
  return v4;
}

BWDepthConverterNode *FigCaptureCreateAndConfigureDepthConverterNode(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _DWORD *a9)
{
  LOBYTE(v19) = 0;
  uint64_t v16 = [[BWDepthConverterNode alloc] initWithStillImageNodeConfiguration:0 cameraInfoByPortType:a5 sensorIDDictionary:0 rgbPersonSegmentationEnabled:0 depthIsAlwaysHighQuality:0 depthOriginatesFromNeuralNetwork:0 backPressureDrivenPipelining:v19];
  [(BWNode *)v16 setName:@"Depth Converter"];
  -[BWDepthConverterNode setHorizontalSensorBinningFactor:](v16, "setHorizontalSensorBinningFactor:", [a4 horizontalSensorBinningFactor]);
  -[BWDepthConverterNode setVerticalSensorBinningFactor:](v16, "setVerticalSensorBinningFactor:", [a4 verticalSensorBinningFactor]);
  int v17 = FigCaptureConfigureDepthConverterNode(v16, a1, a2, a3, a6, a7, a8);
  if (a9) {
    *a9 = v17;
  }
  return v16;
}

BOOL FigDepthFormatIsDisparity(int a1)
{
  return a1 == 1717856627 || a1 == 1751411059;
}

uint64_t captureSession_startGraph(const void *a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v55 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    LODWORD(block[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  BOOL v5 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v6 = captureSession_checkClientSessionIsAllowedToRun((uint64_t)a1, *(void **)(DerivedStorage + 456), 0, 0, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  if (v6)
  {
LABEL_61:
    FigDebugAssert3();
  }
  else if (*(void *)(DerivedStorage + 632))
  {
    cs_clearPocketDetectionNeeded(0, *(void *)(DerivedStorage + 88));
    if (*(unsigned char *)(DerivedStorage + 649))
    {
      *(unsigned char *)(DerivedStorage + 648) = 1;
      captureSession_makeCommittedConfigurationLive(a1);
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v9 = (void *)[*(id *)(DerivedStorage + 664) cameraSourcePipelines];
      uint64_t v10 = [v9 countByEnumeratingWithState:&v51 objects:v58 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v52;
        while (2)
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v52 != v12) {
              objc_enumerationMutation(v9);
            }
            char v14 = *(id **)(*((void *)&v51 + 1) + 8 * i);
            -[FigCaptureCameraSourcePipeline hackRetainedBufferCountsForDualStreamSources]((uint64_t)v14);
            uint64_t v15 = -[FigCaptureCameraSourcePipeline allocateSharedBufferPools](v14);
            if (v15)
            {
              uint64_t v6 = v15;
              goto LABEL_61;
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v51 objects:v58 count:16];
          if (v11) {
            continue;
          }
          break;
        }
      }
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      long long v17 = *(_OWORD *)(v16 + 36);
      v59[0] = *(_OWORD *)(v16 + 20);
      v59[1] = v17;
      if (!FigCaptureClientIsContinuityCapture(v59))
      {
        int v18 = *(void **)(v16 + 456);
        if (v18)
        {
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          uint64_t v19 = (void *)[v18 sourceConfigurations];
          uint64_t v20 = [v19 countByEnumeratingWithState:&v60 objects:v59 count:16];
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = *(void *)v61;
LABEL_28:
            uint64_t v23 = 0;
            while (1)
            {
              if (*(void *)v61 != v22) {
                objc_enumerationMutation(v19);
              }
              int v24 = *(void **)(*((void *)&v60 + 1) + 8 * v23);
              if (objc_msgSend(v24, "cinematicFramingEnabled", v47, v48)) {
                break;
              }
              if (v21 == ++v23)
              {
                uint64_t v21 = [v19 countByEnumeratingWithState:&v60 objects:v59 count:16];
                if (v21) {
                  goto LABEL_28;
                }
                goto LABEL_50;
              }
            }
            uint64_t v25 = [v24 cinematicFramingControlMode];
            uint64_t v26 = *(void **)(v16 + 88);
            if (!v26)
            {
              uint64_t v48 = v1;
              LODWORD(v47) = 0;
              goto LABEL_67;
            }
            uint64_t v27 = v25;
            if (BWDeviceIsiPad())
            {
              global_queue = dispatch_get_global_queue(-2, 0);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = __captureSession_showCinematicFramingAlertIfApplicable_block_invoke;
              block[3] = &unk_1E5C24430;
              block[4] = v26;
              dispatch_async(global_queue, block);
            }
            AppBooleanCFNumberRef Value = CFPreferencesGetAppBooleanValue(@"cinematic_framing_onboarding_alert_shown", @"com.apple.cameracapture", 0);
            BOOL v30 = AppBooleanValue != 0;
            int v31 = (id)CFPreferencesCopyAppValue(@"cinematic_framing_clients", @"com.apple.cameracapture");
            uint64_t v32 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", v26), "objectForKeyedSubscript:", @"app_control_alert_shown"), "BOOLValue");
            uint64_t v33 = v32;
            if (!AppBooleanValue || (v32 & 1) == 0)
            {
              int v34 = (v27 == 1) & ~v32;
              if (!AppBooleanValue || v34)
              {
                BOOL v50 = AppBooleanValue == 0;
                id v35 = (id)[objc_alloc(MEMORY[0x1E4FA6BB0]) initWithServiceName:@"com.apple.CMViewSrvc" viewControllerClassName:@"CinematicFramingRemoteAlertViewController"];
                id v36 = objc_alloc_init(MEMORY[0x1E4FA6BA0]);
                id v49 = (id)[MEMORY[0x1E4FA6BC8] newHandleWithDefinition:v35 configurationContext:v36];
                id v37 = objc_alloc_init(MEMORY[0x1E4FA6B98]);
                if (([v26 isEqualToString:0x1EFA55AE0] & 1) == 0)
                {
                  uint64_t v38 = [MEMORY[0x1E4F4F7F8] processHandleForPID:*(unsigned int *)(v16 + 16) bundleID:v26];
                  objc_msgSend(v37, "setPresentationTarget:", (id)objc_msgSend(objc_alloc(MEMORY[0x1E4FA6BE0]), "initWithTargetProcess:", v38));
                }
                uint64_t v33 = v33 | v34;
                uint64_t v39 = (void *)MEMORY[0x1E4F1CA60];
                uint64_t v40 = [NSNumber numberWithInt:v27];
                float v41 = objc_msgSend(v39, "dictionaryWithObjectsAndKeys:", v26, @"bundleIdentifier", v40, @"controlMode", objc_msgSend(NSNumber, "numberWithBool:", v50), @"isFirstEverCinematicFramingAlert", 0);
                *(void *)type = 0;
                uint64_t v42 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F223F8], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v26, 0, type), "localizedName");
                if (v42) {
                  [v41 setObject:v42 forKeyedSubscript:@"bundleDisplayName"];
                }
                [v37 setUserInfo:v41];
                [v49 activateWithContext:v37];
                BOOL v30 = 1;
              }
              float v43 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v31];
              uint64_t v44 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              [v43 setObject:v44 forKeyedSubscript:v26];
              objc_msgSend(v44, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v33), @"app_control_alert_shown");
              double v45 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
              if (!v30) {
                double v45 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
              }
              CFPreferencesSetAppValue(@"cinematic_framing_onboarding_alert_shown", *v45, @"com.apple.cameracapture");
              CFPreferencesSetAppValue(@"cinematic_framing_clients", v43, @"com.apple.cameracapture");
              CFPreferencesAppSynchronize(@"com.apple.cameracapture");
            }
          }
        }
        else
        {
          uint64_t v48 = v1;
          LODWORD(v47) = 0;
LABEL_67:
          FigDebugAssert3();
        }
      }
LABEL_50:
      if (!objc_msgSend(*(id *)(DerivedStorage + 632), "start:", &v55, v47, v48))
      {
        BOOL v5 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (v55) {
          uint64_t v6 = [v55 code];
        }
        else {
          uint64_t v6 = 0xFFFFFFFFLL;
        }
        goto LABEL_10;
      }
      *(unsigned char *)(DerivedStorage + 648) = 1;
      char v46 = [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100];
      BOOL v5 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if ((v46 & 1) != 0 || [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
      {
        os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
        if (byte_1E96B767C) {
          HIBYTE(word_1E96B7688) = 1;
        }
        os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
        os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
        if (dword_1EB4C5944) {
          ++dword_1EB4C5990;
        }
        os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
      }
    }
    uint64_t v6 = 0;
  }
  else
  {
    FigDebugAssert3();
    uint64_t v6 = FigSignalErrorAt();
  }
LABEL_10:
  if (*(unsigned char *)(DerivedStorage + 648)) {
    uint64_t v7 = mach_absolute_time();
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(DerivedStorage + 704) = v7;
  if (*v5 == 1) {
    kdebug_trace();
  }
  return v6;
}

void cs_clearPocketDetectionNeeded(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = (id)a2;
    if (cs_bundleIdentifierIsSecureCaptureExtension(a2))
    {
      id v2 = cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier((uint64_t)v2);
      if (!v2)
      {
        FigDebugAssert3();
        return;
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
    if (!qword_1E96B6F48 || !CFEqual(v2, (CFTypeRef)qword_1E96B6F48)) {
      goto LABEL_14;
    }
    if (!a1 || qword_1E96B6F60 == a1)
    {
      qword_1E96B6F50 = 0;
      if (qword_1E96B6F48)
      {
        CFRelease((CFTypeRef)qword_1E96B6F48);
        qword_1E96B6F48 = 0;
      }
      cs_cancelPocketDetectionTimeoutTimer();
      if (!dword_1EB4C5110) {
        goto LABEL_14;
      }
    }
    else if (!dword_1EB4C5110)
    {
LABEL_14:
      os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
      return;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_14;
  }
}

uint64_t gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v16;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(a1);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * v7);
        uint64_t v14 = 0;
        ParentOutputOfOutputWithSharedPool = gr_findParentOutputOfOutputWithSharedPool(v8, a2, &v14);
        if (!ParentOutputOfOutputWithSharedPool) {
          gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs_cold_1();
        }
        uint64_t v10 = ParentOutputOfOutputWithSharedPool;
        uint64_t v11 = (void *)[v8 mediaPropertiesForAttachedMediaKey:a2];
        uint64_t v12 = (void *)[v10 mediaPropertiesForAttachedMediaKey:v14];
        if (v11) {
          BOOL v13 = v12 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          objc_msgSend(v12, "setResolvedRetainedBufferCount:", objc_msgSend(v11, "resolvedRetainedBufferCount")+ objc_msgSend(v12, "resolvedRetainedBufferCount")+ 1);
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void *gr_findParentOutputOfOutputWithSharedPool(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a2;
  while ([a1 _passthroughModeForAttachedMediaKey:v6])
  {
    uint64_t v7 = (void *)[a1 mediaConfigurationForAttachedMediaKey:a2];
    uint64_t v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "node"), "inputs"), "objectAtIndexedSubscript:", (int)objc_msgSend(v7, "indexOfInputWhichDrivesThisOutput"));
    uint64_t v6 = [v7 attachedMediaKeyOfInputWhichDrivesThisOutput];
    a1 = objc_msgSend((id)objc_msgSend(v8, "connection"), "output");
    if (!a1) {
      gr_findParentOutputOfOutputWithSharedPool_cold_1();
    }
  }
  if (a3) {
    *a3 = v6;
  }
  return a1;
}

uint64_t csp_shouldUseFullBinSIFRCompanionIndex(void *a1, void *a2, void *a3, char a4, int a5)
{
  uint64_t result = [a1 fullBinSIFRCompanionFormat];
  if (result)
  {
    if (a3 && [a1 isHDRSupported])
    {
      if ((int)objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "maxQualityPrioritization") > 1) {
        return 0;
      }
      BOOL v11 = [a3 irisSinkConfiguration] == 0;
    }
    else
    {
      BOOL v11 = 0;
    }
    uint64_t result = 0;
    if (!v11 && (a4 & 1) == 0)
    {
      if ((uint64_t v12 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "maxPhotoDimensions"),
            [a1 isPhotoFormat])
        && (int)v12 > (int)[a1 dimensions]
        && SHIDWORD(v12) > (int)((unint64_t)[a1 dimensions] >> 32)
        || (v13 = [a1 configureForNonDisruptiveFullBinSIFRSwitching], uint64_t result = 1, v13) && a5)
      {
        uint64_t v14 = csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices([a1 formatIndex], a2);
        long long v15 = csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "formatIndex"), a2);
        if ([v14 count] && !objc_msgSend(v15, "count"))
        {
          FigDebugAssert3();
          return 0;
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t csp_shouldUseDepthCompanionIndex(void *a1, void *a2, unint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)[a1 requiredFormat];
  uint64_t result = [v6 depthCompanionFormat];
  if (result)
  {
    uint64_t result = [a1 depthDataDeliveryEnabled];
    if (result)
    {
      if ([a1 cinematicFramingEnabled] & 1) != 0 || (objc_msgSend(a1, "deskCamEnabled"))
      {
        return 0;
      }
      else
      {
        uint64_t result = 0;
        if ((int)a3 >= 1)
        {
          unint64_t v19 = HIDWORD(a3);
          int v20 = a3;
          if (SHIDWORD(a3) >= 1)
          {
            unint64_t v8 = [v6 previewDimensions];
            int v9 = v8;
            unint64_t v10 = HIDWORD(v8);
            long long v21 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            uint64_t v11 = [a2 countByEnumeratingWithState:&v21 objects:v25 count:16];
            if (v11)
            {
              uint64_t v12 = v11;
              uint64_t v13 = *(void *)v22;
              do
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  if (*(void *)v22 != v13) {
                    objc_enumerationMutation(a2);
                  }
                  long long v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
                  long long v16 = objc_msgSend(v15, "sinkConfiguration", v19);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    if ([v16 sinkType] == 4) {
                      return 0;
                    }
                    if ([v16 sinkType] == 10)
                    {
                      if ([v16 irisMovieCaptureEnabled]) {
                        return 0;
                      }
                    }
                    else if ([v16 sinkType] == 6)
                    {
                      uint64_t v17 = [v15 nonRotatedOutputDimensions];
                      if (([v16 optimizedForPreview] & 1) == 0)
                      {
                        uint64_t result = 0;
                        if ((int)v17 > v9 || SHIDWORD(v17) > (int)v10) {
                          return result;
                        }
                      }
                      if ([v15 videoStabilizationMethod]
                        && [v15 videoStabilizationMethod] != 4)
                      {
                        return 0;
                      }
                    }
                  }
                }
                uint64_t v12 = [a2 countByEnumeratingWithState:&v21 objects:v25 count:16];
              }
              while (v12);
            }
            return v20 <= v9 && (int)v19 <= (int)v10;
          }
        }
      }
    }
  }
  return result;
}

__CFString *BWStringFromCVPixelFormatType(signed int a1)
{
  if (a1 > 23)
  {
    switch(a1)
    {
      case ' ':
        uint64_t result = @"32ARGB";
        break;
      case '!':
        uint64_t result = @"1IndexedGray_WhiteIsZero";
        break;
      case '""':
        uint64_t result = @"2IndexedGray_WhiteIsZero";
        break;
      case '#':
      case '%':
      case '&':
      case '\'':
        goto LABEL_10;
      case '$':
        uint64_t result = @"4IndexedGray_WhiteIsZero";
        break;
      case '(':
        uint64_t result = @"8IndexedGray_WhiteIsZero";
        break;
      default:
        if (a1 == 24) {
          uint64_t result = @"24RGB";
        }
        else {
LABEL_10:
        }
          uint64_t result = (__CFString *)BWStringForOSType(a1);
        break;
    }
  }
  else
  {
    uint64_t result = @"0x00000000";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = @"1Monochrome";
        break;
      case 2:
        uint64_t result = @"2Indexed";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_10;
      case 4:
        uint64_t result = @"4Indexed";
        break;
      case 8:
        uint64_t result = @"8Indexed";
        break;
      default:
        if (a1 != 16) {
          goto LABEL_10;
        }
        uint64_t result = @"16BE555";
        break;
    }
  }
  return result;
}

__CFString *BWColorSpacePropertiesToString(unsigned int a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_1E5C29C50[a1];
  }
}

uint64_t __cspc_filterOutUnsupportedConnections_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)[a2 sourceConfiguration];
  int v4 = (void *)[a2 sinkConfiguration];
  unsigned int v5 = [v3 sourceType];
  unsigned int v6 = [v4 sinkType];
  uint64_t result = 0;
  if (v5 <= 4 && ((1 << v5) & 0x16) != 0)
  {
    uint64_t result = 0;
    if (v6 <= 0x10 && ((1 << v6) & 0x1BDFA) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (FigCaptureMetadataObjectConfigurationRequiresObjectDetection(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresSceneClassification(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresVisualIntelligenceObjectDetection(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(a2) & 1) != 0
        || (uint64_t result = FigCaptureMetadataObjectConfigurationRequiresEyeReliefStatus(a2), result))
      {
        objc_opt_class();
        return ((objc_opt_isKindOfClass() & 1) == 0
             || !FigCaptureMetadataObjectConfigurationRequiresFaceTracking(a2)
             || objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "sourceDeviceType") != 13)
            && (([a2 enabled] & 1) != 0
             || (FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(v6) & 1) == 0);
      }
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresObjectDetection(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  if (([v1 containsObject:*MEMORY[0x1E4F1F138]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F1F140]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F55978]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F1F128]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F1F130]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F1F148]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F55988]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F55968]] & 1) != 0
    || ([v1 containsObject:*MEMORY[0x1E4F55970]] & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *MEMORY[0x1E4F55980];
  return [v1 containsObject:v3];
}

uint64_t FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(unsigned int a1)
{
  return (a1 > 0x10) | (0x463Du >> a1) & 1;
}

void *FigCaptureConnectionConfigurationWithUnderlyingDeviceType(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(a1);
    }
    unint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
    if ([v8 underlyingDeviceType] == a2) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresSceneClassification(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F559D8];
  return [v1 containsObject:v2];
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v1 = objc_msgSend(a1, "metadataIdentifiers", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v9;
    uint64_t v5 = *MEMORY[0x1E4F559C8];
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (([v7 hasPrefix:@"mdta/com.apple.quicktime.detected-machine-readable-code."] & 1) != 0
          || ([v7 isEqualToString:v5] & 1) != 0)
        {
          return 1;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t result = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t FigCaptureSourceGetSourceDeviceType(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetSourceDeviceType_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58F1514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureZeroShutterLagEnabled(void *a1, void *a2, void *a3, char a4)
{
  if ([a1 sourceDeviceType] == 10) {
    return 0;
  }
  if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isZeroShutterLagSupported") & 1) != 0
    || (uint64_t result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isHighPhotoQualitySupported"), result))
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isHighPhotoQualitySupported")
      || (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isLearnedNRSupported") & 1) == 0
      && (int)[a2 maxQualityPrioritization] >= 2)
    {
      if (!objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "zeroShutterLagRequiresUserInitiatedCaptureRequestTime"))goto LABEL_14; {
      if ([a2 zeroShutterLagEnabled])
      }
      {
        int v9 = 1;
        if (a4)
        {
LABEL_14:
          if ([a1 spatialOverCaptureEnabled]) {
            return 1;
          }
          if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isZeroShutterLagWithDepthSupported") & 1) == 0
            && ([a1 depthDataDeliveryEnabled] & 1) != 0
            || ([a2 bravoConstituentPhotoDeliveryEnabled] & 1) != 0
            || [a1 imageControlMode] == 4
            || ([a1 backgroundBlurEnabled] & 1) != 0
            || ([a1 cinematicFramingEnabled] & 1) != 0
            || ([a1 studioLightingEnabled] & 1) != 0)
          {
            return 0;
          }
          return [a1 backgroundReplacementEnabled] ^ 1;
        }
      }
      else
      {
        int v9 = [a3 zeroShutterLagEnabled];
        if (a4) {
          goto LABEL_14;
        }
      }
      if (([a2 responsiveCaptureEnabled] | v9) == 1) {
        goto LABEL_14;
      }
    }
    return 0;
  }
  return result;
}

uint64_t FigCaptureSourceIsSecureMetadataSource(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceIsSecureMetadataSource_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A58F1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSetOptimalVideoPreviewDataConnectionDimensions(void *a1)
{
  uint64_t v2 = (void *)[a1 sourceConfiguration];
  uint64_t v9 = objc_msgSend((id)objc_msgSend(v2, "requiredFormat"), "previewDimensions");
  BOOL IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType([v2 sourceDeviceType]);
  int v4 = [a1 orientation];
  LODWORD(v2) = [v2 sourcePosition] == 2;
  int v5 = [a1 mirroringEnabled];
  objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
  int v6 = FigCaptureRotationDegreesFromOrientation(v4, (int)v2, v5, IsExtensionDeviceType);
  *(int32x2_t *)&double v7 = FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v9, v6);
  objc_msgSend(a1, "setOutputWidth:", v9, v7);
  return [a1 setOutputHeight:HIDWORD(v9)];
}

int32x2_t FigCaptureSwapVideoDimensionsFor90Or270Rotation(int32x2_t *a1, int a2)
{
  if (a2 == 270 || a2 == 90)
  {
    int32x2_t result = vrev64_s32(*a1);
    *a1 = result;
  }
  return result;
}

unint64_t csp_videoCaptureDimensionsFromConnectionConfigurations(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    unint64_t v7 = [a1 sensorDimensions];
LABEL_3:
    unint64_t v39 = HIDWORD(v7);
    int v41 = v7;
    goto LABEL_56;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "irisSinkConfiguration"), "irisMovieCaptureEnabled"))
  {
    if (a2
      && [a1 capturesStillsFromVideoStream]
      && !objc_msgSend((id)objc_msgSend(a1, "frontEndScalerCompanionFormats"), "count"))
    {
      unint64_t v7 = [a1 dimensions];
      goto LABEL_3;
    }
    uint64_t v15 = (void *)[MEMORY[0x1E4F1CA48] array];
    [v15 addObjectsFromArray:a3];
    [v15 addObjectsFromArray:a4];
    if (a5) {
      [v15 addObject:a5];
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v42 objects:v46 count:16];
    if (!v16) {
      goto LABEL_58;
    }
    uint64_t v17 = v16;
    unint64_t v39 = 0;
    int v41 = 0;
    uint64_t v18 = *(void *)v43;
    unint64_t v19 = off_1E5C1F000;
LABEL_19:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v43 != v18) {
        objc_enumerationMutation(v15);
      }
      long long v21 = *(void **)(*((void *)&v42 + 1) + 8 * v20);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_54;
      }
      long long v22 = (void *)[v21 sinkConfiguration];
      int v23 = [v22 sinkType];
      if (v23 > 5)
      {
        if (v23 == 6 || v23 == 11)
        {
LABEL_32:
          uint64_t v25 = v19;
          uint64_t v26 = v18;
          uint64_t v27 = v15;
          unint64_t v28 = objc_msgSend(v21, "nonRotatedOutputDimensions", v39);
          int v29 = v28;
          unint64_t v30 = HIDWORD(v28);
          if ([v22 sinkType] != 11)
          {
            if (v29 <= (int)[a1 previewDimensions]) {
              int v29 = [a1 previewDimensions];
            }
            if ((int)v30 <= (int)((unint64_t)[a1 previewDimensions] >> 32)) {
              unint64_t v30 = (unint64_t)[a1 previewDimensions] >> 32;
            }
          }
          if (v41 <= v29) {
            int v31 = v29;
          }
          else {
            int v31 = v41;
          }
          int v41 = v31;
          if (v40 <= (int)v30) {
            unint64_t v32 = v30;
          }
          else {
            unint64_t v32 = v40;
          }
          if ([v21 underlyingDeviceType] == 13)
          {
            int v41 = [a1 dimensions];
            unint64_t v39 = (unint64_t)[a1 dimensions] >> 32;
          }
          else
          {
            unint64_t v39 = v32;
          }
          uint64_t v15 = v27;
          uint64_t v18 = v26;
          unint64_t v19 = v25;
        }
      }
      else if (v23 == 1)
      {
        uint64_t v33 = [a1 previewDimensions];
        if (v41 <= (int)v33) {
          int v34 = v33;
        }
        else {
          int v34 = v41;
        }
        int v41 = v34;
        if ((int)v39 <= SHIDWORD(v33)) {
          unint64_t v35 = HIDWORD(v33);
        }
        else {
          unint64_t v35 = v39;
        }
        unint64_t v39 = v35;
      }
      else if (v23 == 4)
      {
        goto LABEL_32;
      }
LABEL_54:
      if (v17 == ++v20)
      {
        uint64_t v17 = [v15 countByEnumeratingWithState:&v42 objects:v46 count:16];
        if (!v17) {
          goto LABEL_56;
        }
        goto LABEL_19;
      }
    }
  }
  int v12 = [a2 outputWidth];
  uint64_t v13 = [a2 outputHeight];
  if (FigCaptureConnectionConfigurationWithSinkType(a4, 1))
  {
    uint64_t v14 = [a1 previewDimensions];
    if (v12 <= (int)v14) {
      int v12 = v14;
    }
    if ((int)v13 <= SHIDWORD(v14)) {
      uint64_t v13 = HIDWORD(v14);
    }
    else {
      uint64_t v13 = v13;
    }
  }
  unint64_t v39 = v13;
  int v41 = v12;
LABEL_56:
  unint64_t v37 = v39;
  LODWORD(v36) = v41;
  if (!v41 || !v39)
  {
LABEL_58:
    unint64_t v36 = objc_msgSend(a1, "previewDimensions", v39);
    unint64_t v37 = HIDWORD(v36);
  }
  return v36 | (v37 << 32);
}

void *vfr_cacheModesForOptimalAccess(int a1, int a2)
{
  int v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  int v5 = v4;
  if (a2 && (MEMORY[0xFFFFFC021] & 8) != 0) {
    [v4 addObject:&unk_1EFB00EA8];
  }
  if (MEMORY[0xFFFFFC080] == -1777893647 || MEMORY[0xFFFFFC080] == -1471079478 || MEMORY[0xFFFFFC080] == 506291073) {
    uint64_t v8 = 1280;
  }
  else {
    uint64_t v8 = 0;
  }
  if (MEMORY[0xFFFFFC080] != -400654602 && a1 != 0) {
    [v5 addObject:&unk_1EFB00EC0];
  }
  objc_msgSend(v5, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v8));
  return v5;
}

uint64_t BWColorSpacePropertiesGetYCbCrMatrix(int a1)
{
  if ((a1 - 2) > 8) {
    uint64_t v1 = MEMORY[0x1E4F24C40];
  }
  else {
    uint64_t v1 = qword_1E5C26058[a1 - 2];
  }
  return *(void *)v1;
}

uint64_t mscsn_streamOutputIDForOutputIndex(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55410];
      goto LABEL_3;
    case 1:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55420];
      goto LABEL_3;
    case 2:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F553F8];
      goto LABEL_3;
    case 3:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55428];
      goto LABEL_3;
    case 4:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55430];
      goto LABEL_3;
    case 5:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55440];
      goto LABEL_3;
    case 6:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F553F0];
      goto LABEL_3;
    case 7:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55408];
      goto LABEL_3;
    case 8:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55418];
      goto LABEL_3;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F55400];
LABEL_3:
      uint64_t result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mscsn_setScalerCropAndOutputDimensionsInConfiguration(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, float a13, float a14, unsigned __int8 a15)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  mscsn_calculateScalerCropAndOutputDimensions(a2, a3, a4, a5, a6, a7, a8, a15, a9, a10, a11, a12, a13, a14, &v20, &v19);
  if (v20) {
    [a1 setObject:v20 forKeyedSubscript:*MEMORY[0x1E4F55350]];
  }
  uint64_t v16 = [NSNumber numberWithInt:v19];
  [a1 setObject:v16 forKeyedSubscript:*MEMORY[0x1E4F553C0]];
  uint64_t v17 = [NSNumber numberWithInt:HIDWORD(v19)];
  return [a1 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F55370]];
}

void mscsn_calculateScalerCropAndOutputDimensions(void *a1, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, float a13, float a14, void *a15, _DWORD *a16)
{
  int v19 = a5;
  int v20 = a4;
  unint64_t v29 = HIDWORD(a4);
  unint64_t v30 = HIDWORD(a5);
  CGRect v170 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F55318]), "objectForKeyedSubscript:", a1);
  uint64_t v150 = *MEMORY[0x1E4F552B0];
  BOOL v163 = (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:"), "intValue") >= 1
      && (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552A8]), "intValue") > 0;
  BOOL v32 = v20 > 0 && (int)v29 > 0;
  BOOL v167 = v32;
  BOOL v33 = a10 != *(double *)(MEMORY[0x1E4F1DB30] + 8) || a9 != *MEMORY[0x1E4F1DB30];
  BOOL v35 = v19 > 2 && (int)v30 > 2;
  BOOL v160 = v35;
  BOOL v161 = v33;
  int v36 = FigCapturePlatformIdentifier();
  uint64_t v37 = *MEMORY[0x1E4F55428];
  uint64_t v169 = *MEMORY[0x1E4F55428];
  int v165 = v29;
  if (v36 < 6)
  {
    unsigned int v175 = 2;
  }
  else
  {
    if ((objc_msgSend(a1, "isEqual:") & 1) != 0
      || ([a1 isEqual:*MEMORY[0x1E4F55410]] & 1) != 0
      || [a1 isEqual:@"SecondaryScaler"])
    {
      int v38 = 4;
    }
    else
    {
      int v38 = 2;
    }
    unsigned int v175 = v38;
    uint64_t v37 = v169;
  }
  int v158 = v19;
  uint64_t v159 = a7;
  if ([a1 isEqual:v37])
  {
    BOOL v163 = 0;
    if (a6) {
      int v39 = 4;
    }
    else {
      int v39 = 2;
    }
    unsigned int v40 = v175;
    if (a6) {
      int v41 = 4;
    }
    else {
      int v41 = v175;
    }
    if (v160) {
      uint64_t v42 = 2;
    }
    else {
      uint64_t v42 = v39;
    }
    uint64_t v172 = v42;
    if (!v160) {
      unsigned int v40 = v41;
    }
    unsigned int v175 = v40;
    goto LABEL_41;
  }
  if (([a1 isEqual:*MEMORY[0x1E4F55438]] & 1) == 0)
  {
    long long v43 = v170;
    if (([a1 isEqualToString:*MEMORY[0x1E4F55430]] & 1) != 0
      || ([a1 isEqualToString:*MEMORY[0x1E4F553F8]] & 1) != 0)
    {
      int v39 = 2;
    }
    else
    {
      int v39 = 2;
      if (objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F55308]), "BOOLValue"))
      {
        int v41 = 4;
        if ((int)FigCapturePlatformIdentifier() <= 5) {
          int v39 = 4;
        }
        else {
          int v39 = 2;
        }
        goto LABEL_46;
      }
    }
    int v41 = v175;
LABEL_46:
    uint64_t v172 = 2;
    goto LABEL_47;
  }
  int v39 = 2;
  int v41 = v175;
  uint64_t v172 = 2;
LABEL_41:
  long long v43 = v170;
LABEL_47:
  uint64_t v173 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F55480]), "intValue");
  uint64_t v174 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F55470]), "intValue");
  int v157 = v30;
  if (a8
    && objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F554B8]), "BOOLValue"))
  {
    int v44 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F55488]), "intValue");
    int v45 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F55478]), "intValue");
    BOOL v47 = v44 > (int)v173 || v45 > (int)v174;
    if (v47) {
      uint64_t v48 = v44;
    }
    else {
      uint64_t v48 = v173;
    }
    uint64_t v173 = v48;
    if (v47) {
      uint64_t v49 = v45;
    }
    else {
      uint64_t v49 = v174;
    }
    uint64_t v174 = v49;
  }
  int v50 = v173;
  unint64_t v51 = v174;
  BOOL v55 = (int)v173 >= (int)a3 && (int)v174 >= SHIDWORD(a3) && (int)a3 > 2 && SHIDWORD(a3) > 2;
  float v56 = (float)(int)v175;
  if (v55)
  {
    int v50 = v175 * llroundf((float)(int)a3 / v56);
    unint64_t v51 = v172 * llroundf((float)SHIDWORD(a3) / (float)(int)v172);
  }
  if (v161)
  {
    float v57 = (double)v50 / (a9 + 1.0);
    int v50 = (int)(float)(uint64_t)(llroundf(v57 / v56) * v175);
    float v58 = (double)(int)v51 / (a10 + 1.0);
    unint64_t v51 = (int)(float)(uint64_t)(llroundf(v58 / (float)(int)v172) * v172);
  }
  BOOL v59 = v163;
  long long v60 = (double *)MEMORY[0x1E4F1DB28];
  if (v167)
  {
    float v61 = (float)v20 / (float)v165;
    if (v163)
    {
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F55300]), "floatValue");
      float v63 = v62;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F8]), "floatValue");
      float v65 = v63 / v64;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v150), "floatValue");
      float v67 = v66;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552A8]), "floatValue");
      float v61 = v61 * (float)((float)(v67 / v68) / v65);
    }
    unint64_t v69 = FigCaptureFitAspectInsideDimensions(v50 | (v51 << 32), v175 | (unint64_t)(v172 << 32), v61);
    int v50 = v69;
    unint64_t v51 = HIDWORD(v69);
  }
  double v70 = *v60;
  double v71 = v60[1];
  uint64_t v152 = v50 | (v51 << 32);
  CGFloat v153 = v60[3];
  CGFloat v154 = v60[2];
  double v166 = v153;
  double v168 = v154;
  CGFloat v155 = v71;
  CGFloat v156 = *v60;
  if (!FigCaptureVideoDimensionsAreEqual(v173 | (unint64_t)(v174 << 32), v152))
  {
    double v168 = (double)v50;
    float v72 = ((double)(int)v173 - (double)v50) * 0.5;
    double v70 = (float)(uint64_t)(2 * llroundf(v72 * 0.5));
    double v166 = (double)(int)v51;
    float v73 = ((double)(int)v174 - (double)(int)v51) * 0.5;
    double v71 = (float)(uint64_t)(2 * llroundf(v73 * 0.5));
    if (v55 || v161)
    {
      double v74 = a11;
      double v75 = a12;
      if (a11 != *MEMORY[0x1E4F1DAD8] || a12 != *(double *)(MEMORY[0x1E4F1DAD8] + 8))
      {
        if (v163)
        {
          int v76 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v150), "intValue");
          double v77 = a11
              * (double)(v76
                       / (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F55300]), "intValue"));
          int v78 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552A8]), "intValue");
          int v79 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F8]), "intValue");
          double v74 = v77;
          int v80 = v78 / v79;
          BOOL v59 = v163;
          double v75 = a12 * (double)v80;
        }
        double v70 = v74 + v70;
        double v71 = v75 + v71;
        BOOL v81 = v70 >= 0.0 && v70 + v168 <= (double)(int)v173;
        if (!v81 || (v71 >= 0.0 ? (BOOL v82 = v71 + v166 <= (double)(int)v174) : (BOOL v82 = 0), !v82))
        {
          uint64_t v149 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], objc_msgSend(NSString, "stringWithFormat:", @"Internal inconsistency, scalerCropRect %@ is out of bounds {%d,%d}", BWStringFromCGRect(v70, v71, v168, v166), v173, v174), 0 reason userInfo];
          objc_exception_throw(v149);
        }
      }
    }
  }
  objc_msgSend((id)objc_msgSend(v170, "objectForKeyedSubscript:", *MEMORY[0x1E4F55468]), "floatValue");
  float v84 = v83;
  if (v83 == 0.0)
  {
    float v84 = 1.0;
    if (([a1 isEqual:*MEMORY[0x1E4F553F8]] & 1) == 0)
    {
      objc_msgSend((id)objc_msgSend(v170, "objectForKeyedSubscript:", *MEMORY[0x1E4F55458]), "floatValue");
      if (v85 == 0.0) {
        float v84 = 0.25;
      }
      else {
        float v84 = v85;
      }
    }
  }
  if ([a1 isEqual:v169]) {
    int v86 = 1;
  }
  else {
    int v86 = [a1 isEqual:*MEMORY[0x1E4F55430]];
  }
  float v87 = (float)v41;
  if (!v59 | v86) {
    a14 = a13;
  }
  int v88 = v41 * llroundf((float)v158 / v87);
  float v89 = (float)v39;
  int v90 = v39 * llroundf((float)v157 / (float)v39);
  if (v160) {
    int v91 = v88;
  }
  else {
    int v91 = v50;
  }
  if (v160) {
    int v92 = v90;
  }
  else {
    int v92 = v51;
  }
  double v164 = v71;
  float v171 = a14;
  if (a13 != 1.0)
  {
    if ([a1 isEqual:v169])
    {
      if (a13 >= 1.0) {
        int v92 = (int)(float)((float)v92 * a13);
      }
      else {
        int v91 = (int)(float)((float)v91 * a13);
      }
    }
    else
    {
      [a1 isEqual:*MEMORY[0x1E4F55430]];
    }
  }
  float v93 = (float)v50;
  int v94 = vcvtps_s32_f32(v84 * (float)v50);
  float v95 = (float)(int)v51;
  int v96 = vcvtps_s32_f32(v84 * (float)(int)v51);
  float v97 = (float)v91;
  if (v91 > v50 || v92 > (int)v51)
  {
    FigCaptureMakeRectWithAspectRatioInsideDimensions(v152, 0, v97 / (float)v92);
    int v98 = llroundf((float)(int)v100 / v87);
    int v99 = (int)v101;
  }
  else
  {
    int v98 = llroundf(v97 / v87);
    int v99 = v92;
  }
  uint64_t v102 = v39 * llroundf((float)v99 / v89);
  uint64_t v103 = (v41 * v98);
  if ((int)v103 < v94 || (int)v102 < v96)
  {
    double v162 = v70;
    float v105 = (float)(int)v102;
    float v106 = 1.0;
    float v107 = (float)v96;
    if ((float)(int)v103 < (float)v94) {
      float v106 = (float)v94 / (float)(int)v103;
    }
    float v108 = v107 / v105;
    if ((float)(v107 / v105) <= v106) {
      float v108 = v106;
    }
    if (v105 < v107) {
      float v109 = v108;
    }
    else {
      float v109 = v106;
    }
    if ((int)FigCapturePlatformIdentifier() < 9)
    {
      LODWORD(v111) = v41 * llroundf((float)(int)llroundf(v109 * (float)(int)v103) / v87);
      LODWORD(v112) = v39 * llroundf((float)(int)llroundf(v109 * v105) / v89);
    }
    else
    {
      if (v41 <= v39) {
        int v110 = v39;
      }
      else {
        int v110 = v41;
      }
      unint64_t v111 = mscsn_scaleDimensionsWithAlignment(v103 | (v102 << 32), v110, v109, v109);
      unint64_t v112 = HIDWORD(v111);
    }
    if ((int)v111 >= v94) {
      int v113 = 0;
    }
    else {
      int v113 = v41;
    }
    LODWORD(v103) = v113 + v111;
    if ((int)v112 >= v96) {
      int v114 = 0;
    }
    else {
      int v114 = v39;
    }
    LODWORD(v102) = v114 + v112;
    BOOL v115 = (int)v103 <= v50 && (int)v102 <= (int)v51;
    double v70 = v162;
    if (!v115)
    {
      float v116 = v97 / (float)v92;
      if (vabds_f32(v116, (float)(v171 * v93) / v95) <= 0.01)
      {
        LODWORD(v103) = v41 * llroundf(v93 / v87);
        float v119 = v95 / v89;
      }
      else
      {
        FigCaptureMakeRectWithAspectRatioInsideDimensions(v152, 0, v116);
        LODWORD(v103) = v41 * llroundf((float)(int)v117 / v87);
        float v119 = (float)(int)v118 / v89;
      }
      LODWORD(v102) = v39 * llroundf(v119);
    }
  }
  v176.origin.double x = v70;
  double v121 = v164;
  double v120 = v166;
  v176.origin.double y = v164;
  double v122 = v168;
  v176.size.CGFloat width = v168;
  v176.size.CGFloat height = v166;
  v179.origin.double y = v155;
  v179.origin.double x = v156;
  v179.size.CGFloat height = v153;
  v179.size.CGFloat width = v154;
  BOOL v123 = CGRectEqualToRect(v176, v179);
  double v124 = (double)(int)(v175 * llroundf((float)(int)v173 / v56));
  int v125 = llroundf((float)(int)v174 / (float)(int)v172);
  if (v123)
  {
    double v120 = (double)((int)v172 * v125);
    double v122 = v124;
  }
  uint64_t v126 = (int)v122;
  uint64_t v127 = (int)v120;
  char v128 = [a1 isEqual:*MEMORY[0x1E4F553F8]];
  int v129 = v103;
  int v130 = v102;
  if ((v128 & 1) == 0)
  {
    char v131 = [a1 isEqual:*MEMORY[0x1E4F55430]];
    int v129 = v103;
    int v130 = v102;
    if ((v131 & 1) == 0)
    {
      if (v171 <= 1.0)
      {
        int v129 = v103;
        int v130 = v102;
        if (v171 < 1.0)
        {
          int v130 = (int)(float)(v171 * (float)(int)v102);
          int v129 = v103;
        }
      }
      else
      {
        int v129 = (int)(float)((float)(int)v103 / v171);
        int v130 = v102;
      }
    }
  }
  float v132 = (float)v129 / (float)v130;
  if (vabds_f32((float)(int)v126 / (float)(int)v127, v132) > 0.0005)
  {
    double RectWithAspectRatioInsideDimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions(v126 | (v127 << 32), 1, v132);
    float v135 = v134;
    double v136 = (float)(uint64_t)(llroundf(v135 / v56) * v175);
    float v138 = v137;
    double v139 = (float)(uint64_t)(llroundf(v138 / (float)(int)v172) * v172);
    float v140 = (v134 - v136) * 0.5;
    *(float *)&double v137 = (v137 - v139) * 0.5;
    double v70 = v70 + RectWithAspectRatioInsideDimensions + (float)(uint64_t)(2 * llroundf(v140 * 0.5));
    double v121 = v164 + v141 + (float)(uint64_t)(2 * llroundf(*(float *)&v137 * 0.5));
    double v122 = (double)(int)v103;
    double v120 = (double)(int)v102;
    if (v136 < (double)(int)v103 || v139 < v120)
    {
      float v143 = (v122 - v136) * 0.5;
      int64_t v144 = 2 * llroundf(v143 * 0.5);
      if (v70 - (float)v144 >= 0.0) {
        double v70 = v70 - (float)v144;
      }
      else {
        double v70 = 0.0;
      }
      float v145 = (v120 - v139) * 0.5;
      int64_t v146 = 2 * llroundf(v145 * 0.5);
      if (v121 - (float)v146 >= 0.0) {
        double v121 = v121 - (float)v146;
      }
      else {
        double v121 = 0.0;
      }
    }
    else
    {
      double v120 = v139;
      double v122 = v136;
    }
  }
  if (v159)
  {
    if (v159)
    {
      float v147 = v70;
      double v70 = (double)(int)FigCaptureRoundFloatToMultipleOf(v159, v147);
      if (v122 + v70 > (double)(int)v173) {
        double v70 = v70 - (double)(int)v159;
      }
    }
    if (HIDWORD(v159))
    {
      float v148 = v121;
      double v121 = (double)(int)FigCaptureRoundFloatToMultipleOf(SHIDWORD(v159), v148);
      if (v120 + v121 > (double)(int)v174) {
        double v121 = v121 - (double)SHIDWORD(v159);
      }
    }
  }
  if (a15)
  {
    v177.origin.double x = v70;
    v177.origin.double y = v121;
    v177.size.CGFloat width = v122;
    v177.size.CGFloat height = v120;
    if (!CGRectIsEmpty(v177))
    {
      v178.origin.double x = v70;
      v178.origin.double y = v121;
      v178.size.CGFloat width = v122;
      v178.size.CGFloat height = v120;
      *a15 = CGRectCreateDictionaryRepresentation(v178);
    }
  }
  if (a16)
  {
    *a16 = v103;
    a16[1] = v102;
  }
}

unint64_t mscsn_scaleDimensionsWithAlignment(unint64_t a1, int a2, double a3, double a4)
{
  int v7 = a1;
  unint64_t v8 = HIDWORD(a1);
  double v9 = a3 * (float)(int)a1;
  int v10 = (int)v9;
  double v11 = a4 * (float)SHIDWORD(a1);
  int v12 = (int)v11;
  if ((int)FigCapturePlatformIdentifier() < 9) {
    goto LABEL_23;
  }
  int v13 = v7;
  if (v8)
  {
    int v14 = v7;
    int v15 = v8;
    do
    {
      int v13 = v15;
      int v15 = v14 % v15;
      int v14 = v13;
    }
    while (v15);
  }
  if (v13 % a2
    || (int v16 = v7 / v13, v7 / v13 > 16)
    || (v17 = a4 / a3 * (double)((int)v8 / v13), int v18 = llroundf(v17), v18 > 10))
  {
LABEL_23:
    int v26 = (int)(float)(uint64_t)(llroundf((float)v10 / (float)a2) * a2);
    uint64_t v25 = (int)(float)(uint64_t)(llroundf((float)v12 / (float)a2) * a2);
  }
  else
  {
    if (v16 % a2 || v18 % a2)
    {
      v16 *= a2;
      v18 *= a2;
    }
    unsigned int v19 = vcvtps_s32_f32((float)v10 / (float)v16);
    int v20 = v16 * v19;
    unsigned int v21 = vcvtps_s32_f32((float)v12 / (float)v18);
    int v22 = v18 * v21;
    int v23 = v16 * v19 - v10;
    if (v23 < 0) {
      int v23 = v10 - v16 * v19;
    }
    unsigned int v24 = v22 - v12;
    if (v22 - v12 < 0) {
      unsigned int v24 = v12 - v22;
    }
    LODWORD(v25) = v18 * v19;
    int v26 = v16 * v21;
    if (v23 >= v24) {
      LODWORD(v25) = v22;
    }
    else {
      int v26 = v20;
    }
    float v27 = v9 / v11;
    float v28 = vabds_f32((float)v26 / (float)(int)v25, v27);
    float v29 = vabds_f32((float)v20 / (float)v22, v27);
    if (v28 >= v29) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = v25;
    }
    if (v28 >= v29) {
      int v26 = v20;
    }
  }
  return v26 | (unint64_t)(v25 << 32);
}

float BWGetGeometricDistortionCorrectionStrengthFromDimensions(uint64_t a1, int a2)
{
  int v4 = FigCapturePlatformIdentifier();
  float result = 1.0;
  if (v4 <= 7)
  {
    if ((int)a1 > 2304)
    {
      float result = 0.6;
      if ((float)((int)a1 / SHIDWORD(a1)) <= 1.65) {
        return 0.5;
      }
    }
    else
    {
      float result = 0.75;
      if (a2) {
        return 1.0;
      }
    }
  }
  return result;
}

uint64_t captureSourceServer_serializeNotification(int a1, uint64_t a2, CFTypeRef cf1, const __CFDictionary *a4, __CFDictionary **a5)
{
  if (!a4) {
    return 0;
  }
  if (CFEqual(cf1, @"ActiveFormat")) {
    return 1;
  }
  if (CFDictionaryContainsKey(a4, @"ClientShouldIgnoreNotification")
    || (uint64_t result = CFDictionaryContainsKey(a4, @"ProxyShouldIgnoreNotification"), result))
  {
    CFTypeRef arg = 0;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    double v11 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v10 + 48);
    if (!v11) {
      goto LABEL_16;
    }
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v13 = v11(a2, 0x1EFA6CF00, *MEMORY[0x1E4F1CF80], &arg);
    if (arg) {
      CFAutorelease(arg);
    }
    if (v13)
    {
LABEL_16:
      FigDebugAssert3();
    }
    else
    {
      if ([(id)arg BOOLValue])
      {
        if (FigCFDictionaryGetBooleanValue() == *MEMORY[0x1E4F1CFD0]) {
          return 1;
        }
        goto LABEL_20;
      }
      if (FigCFDictionaryGetBooleanValue() != *MEMORY[0x1E4F1CFD0])
      {
LABEL_20:
        CFIndex Count = CFDictionaryGetCount(a4);
        MutableCopdouble y = CFDictionaryCreateMutableCopy(v12, Count, a4);
        CFDictionaryRemoveValue(MutableCopy, @"ClientShouldIgnoreNotification");
        CFDictionaryRemoveValue(MutableCopy, @"ProxyShouldIgnoreNotification");
        if (!MutableCopy) {
          return 0;
        }
        *a5 = MutableCopy;
        return 4;
      }
    }
    return 1;
  }
  return result;
}

double rqReceiverInit(_OWORD *a1)
{
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  double result = NAN;
  *((void *)a1 + 4) = -1;
  return result;
}

uint64_t FigMotionGetCameraCharacterizationData(const __CFDictionary *a1, const __CFDictionary *a2, float a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a2)
  {
    *(_DWORD *)(a5 + 40) = 0;
    BOOL v9 = FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
    *(unsigned char *)(a5 + 48) = v9;
    CFNumberRef Value = CFDictionaryGetValue(a2, @"FocalLengthCharacterization");
    if (Value)
    {
      double v11 = Value;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v11)
        && ((FigCFDictionaryGetIntIfPresent(),
             CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52F28]),
             (unsigned int FocalLengthParametersFromArrayUsingModuleLensID = GetFocalLengthParametersFromArrayUsingModuleLensID(v13, (CFArrayRef)v11, a5)) != 0)|| !*(unsigned char *)(a5 + 16)&& (unsigned int FocalLengthParametersFromArrayUsingModuleLensID = GetFocalLengthParametersFromArrayUsingModuleLensID(0, (CFArrayRef)v11, a5)) != 0))
      {
        unsigned int v15 = FocalLengthParametersFromArrayUsingModuleLensID;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        unsigned int v15 = 0;
        if (a3 <= 0.0) {
          *(_DWORD *)(a5 + 44) = 0;
        }
        else {
          *(float *)(a5 + 44) = 1.0 / a3;
        }
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      unsigned int v15 = -12783;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    unsigned int v15 = FigSignalErrorAt();
  }
  if (*(unsigned char *)(a5 + 16)) {
    return v15;
  }
  else {
    return 4294954513;
  }
}

uint64_t FigCaptureGetFrameworkRadarComponentName()
{
  return 0;
}

uint64_t fvcs_ambientViewingEnvironment(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v2[0] = (10000 * a1) >> 24;
  v2[1] = (10000 * a1) >> 16;
  v2[2] = (unsigned __int16)(10000 * a1) >> 8;
  v2[3] = 16 * a1;
  int v3 = 1111495485;
  return [MEMORY[0x1E4F1C9B8] dataWithBytes:v2 length:8];
}

uint64_t FigMotionGetGravityFactor(const __CFDictionary *a1, CFDictionaryRef theDict, _DWORD *a3)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  if (!theDict) {
    goto LABEL_7;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"FocalLengthCharacterization");
  if (Value)
  {
    CFArrayRef v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
    {
      uint64_t FocalLengthParametersFromArrayUsingModuleInfo = GetFocalLengthParametersFromArrayUsingModuleInfo(a1, v6, (uint64_t)&v11);
      if (FocalLengthParametersFromArrayUsingModuleInfo
        || !(_BYTE)v12
        && (uint64_t FocalLengthParametersFromArrayUsingModuleInfo = GetFocalLengthParametersFromArrayUsingModuleInfo(0, v6, (uint64_t)&v11), FocalLengthParametersFromArrayUsingModuleInfo))
      {
        uint64_t v9 = FocalLengthParametersFromArrayUsingModuleInfo;
        fig_log_get_emitter();
        FigDebugAssert3();
        return v9;
      }
LABEL_7:
      uint64_t v9 = 0;
      *a3 = DWORD2(v13);
      return v9;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

BOOL BWWiderNonDisruptiveSwitchingFormatZoomFactorAndNarrowerBaseZoomFactorShouldBeCombined(float a1, float a2)
{
  return vabds_f32(a1, a2) < flt_1A5F0BF58[a1 > a2];
}

void *BWFilterNonDisruptiveSwitchingFormatZoomFactors(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)[a1 count] >= 2)
  {
    uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    int v3 = objc_msgSend(v1, "sortedArrayUsingSelector:", sel_compare_, 0);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * v7);
          objc_msgSend((id)objc_msgSend(v2, "lastObject"), "floatValue");
          if (v9 == 0.0 || (float v10 = v9, [v8 floatValue], (float)(v11 / v10) >= 1.2)) {
            [v2 addObject:v8];
          }
          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }
    return v2;
  }
  return v1;
}

void *csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(int a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v3 = (void *)[a2 objectAtIndexedSubscript:a1];
  uint64_t v4 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F55310]];
  if (![v4 count]) {
    return 0;
  }
  uint64_t v18 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v21;
    uint64_t v8 = *MEMORY[0x1E4F55300];
    uint64_t v9 = *MEMORY[0x1E4F552F8];
    uint64_t v10 = *MEMORY[0x1E4F552D0];
    id obj = v4;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(obj);
        }
        long long v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v13 = objc_msgSend(a2, "objectAtIndexedSubscript:", (int)objc_msgSend(v12, "intValue"));
        int v14 = FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v8), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v9), "intValue") << 32));
        int v15 = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v10), "intValue");
        if (v14 == 2 && v15 <= 1) {
          [v18 addObject:v12];
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }
  return v18;
}

uint64_t FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(uint64_t a1)
{
  BOOL v2 = (int)a1 > 4224 && SHIDWORD(a1) > 3176;
  if (SHIDWORD(a1) <= 6000 || (int)a1 <= 8000) {
    return v2;
  }
  else {
    return 2;
  }
}

uint64_t csp_willDecoupleWarperFromStreamProcessing(void *a1)
{
  if ((int)FigCapturePlatformIdentifier() > 9) {
    return 0;
  }
  if ([a1 containsObject:&unk_1EFAFF9A8]) {
    return 1;
  }
  return [a1 containsObject:&unk_1EFAFF9D8];
}

void sub_1A5900FEC(_Unwind_Exception *a1)
{
}

double FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(double a1, double a2, double a3, double a4, double a5)
{
  return a3 + a1 * a5;
}

uint64_t FigMotionSphereShiftStateInitialize(uint64_t a1, const __CFDictionary *a2, int a3)
{
  if (a1)
  {
    memset_pattern16((void *)a1, &unk_1A5F0C840, 0x18uLL);
    uint64_t v6 = 0;
    int32x2_t v7 = vdup_n_s32(0x7FC00000u);
    do
    {
      uint64_t v8 = (void *)(a1 + v6);
      v8[6] = v7;
      v8[3] = 0;
      v8[9] = v7;
      v6 += 8;
    }
    while (v6 != 24);
    *(_DWORD *)(a1 + 100) = a3;
    BravoDataFromDictionardouble y = FigMotionGetBravoDataFromDictionary(a2, a1 + 100);
    if (BravoDataFromDictionary)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigMotionAdjustBravoDataForReferenceCamera(a1 + 100);
      *(void *)(a1 + 632) = 0x3FA999999999999ALL;
    }
    return BravoDataFromDictionary;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptureSynchronizedStreamsGroupGetClassID()
{
  return sFigCaptureSynchronizedStreamsGroupID;
}

uint64_t csp_configureMultiStreamCameraNode(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, unsigned int a8, float a9, float a10, float a11, unsigned __int8 a12, unsigned __int8 a13, void *a14, unsigned __int8 a15, unsigned int a16, unsigned __int8 a17, unsigned __int8 a18, char a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,long long *a24,long long *a25,unsigned int a26,char a27,unsigned __int8 a28,unsigned __int8 a29,char a30,char a31,unsigned __int8 a32,unsigned __int8 a33,unsigned int a34,unsigned int a35,unsigned int a36,unsigned int a37,unsigned __int8 a38,unsigned __int8 a39,void *a40,unsigned __int8 a41,unsigned __int8 a42,unsigned int a43,unsigned __int8 a44,unsigned __int8 a45,unsigned __int8 a46,unsigned __int8 a47,void *a48,unsigned __int8 a49,unsigned __int8 a50,unsigned __int8 a51,unsigned __int8 a52,char a53,unsigned __int8 a54,char a55,unsigned __int8 a56,unsigned __int8 a57,unsigned __int8 a58,unsigned __int8 a59,unsigned __int8 a60,unsigned __int8 a61,unint64_t a62,unint64_t a63)
{
  uint64_t v410 = *MEMORY[0x1E4F143B8];
  unsigned int v400 = 0;
  id v399 = 0;
  int v91 = (void *)[a1 captureStream];
  uint64_t v92 = [a1 portType];
  uint64_t v93 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType([a2 source], objc_msgSend(a2, "requiredFormat"), v92, &v400);
  int v94 = (void *)v93;
  if (v400)
  {
    FigDebugAssert3();
    goto LABEL_487;
  }
  if (!v93)
  {
    FigDebugAssert3();
    unsigned int v400 = -12780;
    goto LABEL_487;
  }
  v363 = (void *)v92;
  CFTypeRef cf = (CFTypeRef)FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType([a2 source], v92, &v400);
  if (v400) {
    goto LABEL_36;
  }
  if (!cf)
  {
    float v95 = (const void *)[a2 source];
    if (v95) {
      CFTypeRef cf = CFRetain(v95);
    }
    else {
      CFTypeRef cf = 0;
    }
  }
  id v96 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:a6 includeIris:1];
  int v348 = csp_stabilizationMethodWithMostOverscan(v96);
  int StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([a2 source], &v400);
  if (v400) {
    goto LABEL_36;
  }
  id v358 = v96;
  unsigned int v355 = csp_willDecoupleWarperFromStreamProcessing(a14);
  long long v372 = a5;
  v350 = a1;
  unsigned int v351 = a7;
  unsigned int v352 = a8;
  if ((int)FigCapturePlatformIdentifier() < 10)
  {
    unsigned int v353 = 0;
  }
  else if ([a14 containsObject:&unk_1EFAFF9A8])
  {
    unsigned int v353 = 1;
  }
  else
  {
    unsigned int v353 = [a14 containsObject:&unk_1EFAFF9D8];
  }
  shouldCaptureStillsFromVideoStreauint64_t m = csp_shouldCaptureStillsFromVideoStream(a2, v94, a20, a5 != 0);
  int v349 = [a5 irisVISEnabled];
  unsigned int v359 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "irisFrameHarvestingEnabled");
  int v361 = [a2 bravoShiftMitigationEnabled];
  uint64_t v398 = 0;
  uint64_t v397 = 0;
  uint64_t v396 = 0;
  long long v395 = *MEMORY[0x1E4F1DAD8];
  uint64_t v394 = 0;
  float v97 = objc_alloc_init(BWMultiStreamCameraSourceNodeConfiguration);
  if ([v94 isVideoHDRFusionSupported]) {
    BWColorSpaceIsHDR([a2 colorSpace]);
  }
  long long v373 = a2;
  shouldUseActionCameraCompanionIndedouble x = csp_shouldUseActionCameraCompanionIndex(a2, (uint64_t)a6, a15);
  shouldUseFullBinSIFRCompanionIndedouble x = csp_shouldUseFullBinSIFRCompanionIndex(v94, (void *)[v91 supportedFormats], a5, a33 & a52, a54);
  long long v401 = 0u;
  long long v402 = 0u;
  long long v403 = 0u;
  long long v404 = 0u;
  uint64_t v100 = [a6 countByEnumeratingWithState:&v401 objects:&v409 count:16];
  long long v376 = v91;
  if (v100)
  {
    uint64_t v101 = v100;
    uint64_t v102 = *(void *)v402;
    while (2)
    {
      for (uint64_t i = 0; i != v101; ++i)
      {
        if (*(void *)v402 != v102) {
          objc_enumerationMutation(a6);
        }
        uint64_t v104 = *(void **)(*((void *)&v401 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 && ([v104 attachMetadataToVideoBuffers])
        {
          int v105 = 1;
          goto LABEL_27;
        }
      }
      uint64_t v101 = [a6 countByEnumeratingWithState:&v401 objects:&v409 count:16];
      if (v101) {
        continue;
      }
      break;
    }
  }
  int v105 = 0;
LABEL_27:
  uint64_t v106 = [v373 source];
  uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v107) {
    uint64_t v108 = v107;
  }
  else {
    uint64_t v108 = 0;
  }
  float v109 = *(uint64_t (**)(uint64_t))(v108 + 48);
  if (!v109)
  {
    unsigned int v400 = -12782;
    goto LABEL_36;
  }
  uint64_t v343 = *MEMORY[0x1E4F1CF80];
  unsigned int v400 = v109(v106);
  if (v400)
  {
LABEL_36:
    FigDebugAssert3();
    goto LABEL_485;
  }
  int v347 = v105;
  if (a74)
  {
    if (![v94 depthCompanionFormat])
    {
LABEL_497:
      FigDebugAssert3();
      unsigned int v400 = -12780;
      goto LABEL_485;
    }
    int v110 = 1;
  }
  else
  {
    int v110 = a21;
  }
  int v370 = v110;
  int v111 = [a3 depthType];
  if (a26) {
    BOOL v112 = 0;
  }
  else {
    BOOL v112 = v111 == 3;
  }
  int v113 = v112;
  unsigned int v344 = v113;
  if (v112)
  {
    a62 = a63;
    int v345 = 0;
    int v346 = 0;
    BOOL v114 = [v94 fsdNetCompanionFormat] != 0;
    int v115 = 1;
  }
  else
  {
    BOOL v114 = 0;
    int v346 = a83;
    int v345 = a82;
    int v115 = a12;
  }
  unsigned int v365 = v115;
  float v116 = v94;
  if (a80) {
    BOOL v117 = [v94 stereoVideoCompanionFormat] != 0;
  }
  else {
    BOOL v117 = 0;
  }
  char v393 = 0;
  char v118 = [v373 sensorHDREnabled];
  unsigned __int8 v119 = [v373 highlightRecoveryEnabled];
  [v373 geometricDistortionCorrectionEnabled];
  -[BWMultiStreamCameraSourceNodeConfiguration setFormatIndex:](v97, "setFormatIndex:", csp_formatIndex(v116, a20, v370, v114, shouldUseActionCameraCompanionIndex, shouldUseFullBinSIFRCompanionIndex, a77, v117, v361, v118, v119, a29, &v393, &v397, &v398, &v396,
      &v395,
      &v394));
  long long v371 = v116;
  double v120 = v376;
  double v121 = v372;
  if ([v116 fastSwitchingMainCaptureStreamFormat])
  {
    double v122 = (void *)[v116 fastSwitchingMainCaptureStreamFormat];
    BOOL v123 = (void *)[v122 frontEndScalerCompanionFormats];
    if ([v123 count]) {
      double v122 = (void *)[v123 firstObject];
    }
    uint64_t v124 = [v122 formatIndex];
    int v125 = objc_msgSend((id)objc_msgSend(v376, "supportedFormats"), "objectAtIndexedSubscript:", v124);
    uint64_t v126 = (void *)[v125 objectForKeyedSubscript:*MEMORY[0x1E4F55310]];
    if (v124 == [(BWMultiStreamCameraSourceNodeConfiguration *)v97 formatIndex]) {
      goto LABEL_56;
    }
    uint64_t v127 = NSNumber;
    uint64_t v128 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 formatIndex];
    int v129 = v127;
    double v120 = v376;
    if (objc_msgSend(v126, "containsObject:", objc_msgSend(v129, "numberWithUnsignedInt:", v128)))
    {
      BOOL v130 = csp_formatUsesFES(v125);
      uint64_t v131 = [v376 supportedFormats];
      uint64_t v132 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 formatIndex];
      float v133 = (void *)v131;
      double v120 = v376;
      if (v130 == csp_formatUsesFES((void *)[v133 objectAtIndexedSubscript:v132]))
      {
LABEL_56:
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFastSwitchingMainFormatIndex:v124];
        objc_msgSend((id)objc_msgSend(v125, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "floatValue");
        -[BWMultiStreamCameraSourceNodeConfiguration setFastSwitchingMainFormatMaxFrameRate:](v97, "setFastSwitchingMainFormatMaxFrameRate:");
      }
    }
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setActiveStreamingNondisruptiveSwitchingFormatIndices:](v97, "setActiveStreamingNondisruptiveSwitchingFormatIndices:", csp_activeStreamingNondisruptiveSwitchingFormatIndices(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v97, "formatIndex"), (void *)[v120 supportedFormats], objc_msgSend(v116, "configureForNonDisruptiveFullBinSIFRSwitching"), objc_msgSend(a3, "ultraHighResolutionZeroShutterLagSupportEnabled")));
  -[BWMultiStreamCameraSourceNodeConfiguration setSifrBinningFactorOverrideForNondisruptiveSwitching:](v97, "setSifrBinningFactorOverrideForNondisruptiveSwitching:", [v116 sifrBinningFactorOverrideForNondisruptiveSwitching]);
  -[BWMultiStreamCameraSourceNodeConfiguration setQuadraSubPixelSwitchingParameters:](v97, "setQuadraSubPixelSwitchingParameters:", [v116 quadraSubPixelSwitchingParameters]);
  uint64_t v134 = objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "maxPhotoDimensions");
  if ([v116 isPhotoFormat]
    && ((int)v134 > (int)[v116 dimensions]
     && SHIDWORD(v134) > (int)((unint64_t)[v116 dimensions] >> 32)
     || ([v120 isMultipleSensorRawBufferPoolsSupported] & 1) != 0)
    || [v116 configureForNonDisruptiveFullBinSIFRSwitching] && a54)
  {
    -[BWMultiStreamCameraSourceNodeConfiguration setActiveUltraHighResStillImageNondisruptiveSwitchingFormatIndices:](v97, "setActiveUltraHighResStillImageNondisruptiveSwitchingFormatIndices:", csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v97, "formatIndex"), (void *)[v120 supportedFormats]));
  }
  float v135 = v373;
  if ([v116 isFastSwitchingConfigurationRequired])
  {
    double v136 = (void *)[v116 frontEndScalerCompanionFormats];
    uint64_t v137 = [v136 count];
    float v138 = v116;
    if (v137) {
      float v138 = (void *)[v136 firstObject];
    }
    int v139 = [v138 formatIndex];
    if (v139 == [(BWMultiStreamCameraSourceNodeConfiguration *)v97 formatIndex])
    {
      float v140 = (void *)[MEMORY[0x1E4F1CA80] set];
      UnderlyingFastSwitchingFormatsForFormatAndPortType = (void *)FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType([v373 source], (uint64_t)v363, &v400);
      long long v389 = 0u;
      long long v390 = 0u;
      long long v391 = 0u;
      long long v392 = 0u;
      uint64_t v142 = [UnderlyingFastSwitchingFormatsForFormatAndPortType countByEnumeratingWithState:&v389 objects:v408 count:16];
      if (v142)
      {
        uint64_t v143 = v142;
        uint64_t v144 = *(void *)v390;
        do
        {
          for (uint64_t j = 0; j != v143; ++j)
          {
            if (*(void *)v390 != v144) {
              objc_enumerationMutation(UnderlyingFastSwitchingFormatsForFormatAndPortType);
            }
            int64_t v146 = *(void **)(*((void *)&v389 + 1) + 8 * j);
            float v147 = (void *)[v146 frontEndScalerCompanionFormats];
            uint64_t v148 = [v147 count];
            uint64_t v149 = v146;
            if (v148) {
              uint64_t v149 = (void *)[v147 firstObject];
            }
            uint64_t v150 = [v149 formatIndex];
            objc_msgSend(v140, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v150));
            objc_msgSend(v140, "addObjectsFromArray:", csp_activeStreamingNondisruptiveSwitchingFormatIndices(v150, objc_msgSend(v376, "supportedFormats"), objc_msgSend(v146, "configureForNonDisruptiveFullBinSIFRSwitching"), 0));
            objc_msgSend(v140, "removeObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v97, "formatIndex")));
          }
          uint64_t v143 = [UnderlyingFastSwitchingFormatsForFormatAndPortType countByEnumeratingWithState:&v389 objects:v408 count:16];
        }
        while (v143);
      }
      if ([v140 count]) {
        uint64_t v151 = [v140 allObjects];
      }
      else {
        uint64_t v151 = 0;
      }
      double v120 = v376;
      double v121 = v372;
      float v135 = v373;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFastSwitchingNondisruptiveFormatIndices:v151];
    }
  }
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setCropDimensionsWhenFESIsEnabled:v398];
  [v135 maxFrameRateClientOverride];
  -[BWMultiStreamCameraSourceNodeConfiguration setMaximumSupportedFrameRate:](v97, "setMaximumSupportedFrameRate:");
  objc_msgSend((id)objc_msgSend(v135, "requiredFormat"), "minSupportedFrameRate");
  -[BWMultiStreamCameraSourceNodeConfiguration setMinimumSupportedFrameRate:](v97, "setMinimumSupportedFrameRate:");
  char v152 = objc_msgSend((id)objc_msgSend(v135, "requiredFormat"), "isSIFRSupported");
  if (v393) {
    char v153 = v152;
  }
  else {
    char v153 = 0;
  }
  char v393 = v153;
  CGFloat v154 = objc_msgSend((id)objc_msgSend(v120, "stream"), "supportedProperties");
  if ([v154 objectForKeyedSubscript:*MEMORY[0x1E4F54A88]])
  {
    if (v393 && [v135 sourcePosition] == 1)
    {
      v409.unsigned int value = 0;
      FigCaptureSourceCopyProperty((uint64_t)cf, @"AttributesDictionary", v343, (uint64_t)&v409);
      uint64_t v155 = objc_msgSend((id)objc_msgSend((id)v409.value, "objectForKeyedSubscript:", @"MainToSIFRSkipRatioFor60FPS"), "intValue");
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 maximumSupportedFrameRate];
      if (v156 != 60.0 || !v155)
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 maximumSupportedFrameRate];
        if (v157 <= 60.0)
        {
          if ([(id)v409.value objectForKeyedSubscript:@"MainToSIFRFrameRateRatio"]) {
            uint64_t v155 = objc_msgSend((id)objc_msgSend((id)v409.value, "objectForKeyedSubscript:", @"MainToSIFRFrameRateRatio"), "intValue");
          }
          else {
            uint64_t v155 = 2;
          }
        }
        else
        {
          uint64_t v155 = 4;
        }
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMainToSIFRFrameRateRatio:v155];
    }
    else
    {
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMainToSIFRFrameRateRatio:1];
    }
  }
  if (v393) {
    unsigned int v158 = [v135 highlightRecoveryEnabled];
  }
  else {
    unsigned int v158 = 0;
  }
  uint64_t v159 = a46 | v158;
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setHighlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream:v159];
  uint64_t v160 = (((a28 ^ 1) & 1) != 0 || (a47 & 1) != 0 || a46)
      && [(BWMultiStreamCameraSourceNodeConfiguration *)v97 highlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setHighlightRecoveryEnabledWhenConfiguredAsSlave:v160];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoHDRImageStatisticsEnabled:a51];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoHDRFusionEnabled:0];
  if (v365)
  {
    [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDolbyVisionMetadataOnVideoCaptureOutputEnabled:[(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoHDRImageStatisticsEnabled]];
    uint64_t v161 = 0;
  }
  else
  {
    [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDolbyVisionMetadataOnVideoCaptureOutputEnabled:0];
    uint64_t v161 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoHDRImageStatisticsEnabled];
  }
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDolbyVisionMetadataOnPreviewOutputEnabled:v161];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setUsesFirmwareStillImageOutput:shouldCaptureStillsFromVideoStream ^ 1u];
  int v162 = [v371 isHighPhotoQualitySupported];
  unsigned int v163 = [v371 usesPacked10BitFirmwareStillImageOutputPixelFormat];
  uint64_t v164 = (v162 ^ 1) & v163;
  if (((v162 ^ 1) & 1) == 0 && v163) {
    uint64_t v164 = (int)objc_msgSend((id)objc_msgSend(v121, "irisSinkConfiguration", v164), "maxQualityPrioritization") > 1;
  }
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputRequires10BitPixelFormat:v164];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSensorCropDimensions:v396];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSensorCenterOffset:v395];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPostGDCCropDimensions:v394];
  -[BWMultiStreamCameraSourceNodeConfiguration setCropAspectRatio:](v97, "setCropAspectRatio:", [v371 sourceCropAspectRatio]);
  -[BWMultiStreamCameraSourceNodeConfiguration setHorizontalSensorBinningFactor:](v97, "setHorizontalSensorBinningFactor:", [v371 horizontalSensorBinningFactor]);
  -[BWMultiStreamCameraSourceNodeConfiguration setVerticalSensorBinningFactor:](v97, "setVerticalSensorBinningFactor:", [v371 verticalSensorBinningFactor]);
  -[BWMultiStreamCameraSourceNodeConfiguration setFesBinningFactorHorizontal:](v97, "setFesBinningFactorHorizontal:", [v371 fesBinningFactorHorizontal]);
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoStabilizationEnabled:](v97, "setVideoStabilizationEnabled:", [a14 containsObject:&unk_1EFAFFB28]);
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoStabilizationMethods:v358];
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoStabilizationTypeISPMeshEnabled:](v97, "setVideoStabilizationTypeISPMeshEnabled:", [a14 containsObject:&unk_1EFAFF9D8]);
  if ((a70 & 1) != 0 || a81)
  {
    [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLtmLookUpTableMetadataEnabledForStreaming:1];
    [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLtmThumbnailMetadataEnabledForStreaming:1];
  }
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLtmThumbnailMetadataEnabledForStreaming:[(BWMultiStreamCameraSourceNodeConfiguration *)v97 ltmThumbnailMetadataEnabledForStreaming]];
  if ((a56 & 1) != 0 || (a57 & 1) != 0 || a58)
  {
    v409.unsigned int value = 0;
    uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v167) {
      uint64_t v168 = v167;
    }
    else {
      uint64_t v168 = 0;
    }
    uint64_t v169 = *(void (**)(CFTypeRef, __CFString *, uint64_t, CMTime *))(v168 + 48);
    if (v169) {
      v169(cf, @"AttributesDictionary", v343, &v409);
    }
    uint64_t v166 = objc_msgSend((id)objc_msgSend((id)v409.value, "objectForKeyedSubscript:", @"GeometricDistortionCorrection"), "BOOLValue");
    ShouldEnableMaximumGeometricDistortionCorrectiouint64_t n = FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection((uint64_t)cf, &v400);

    if (v400) {
      goto LABEL_493;
    }
  }
  else
  {
    ShouldEnableMaximumGeometricDistortionCorrectiouint64_t n = 0;
    uint64_t v166 = 0;
  }
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setGeometricDistortionCorrectionSupported:v166];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setGeometricDistortionCorrectionOnStillImageOutputEnabled:v166 & a56];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setGeometricDistortionCorrectionOnVideoCaptureOutputEnabled:v166 & a57];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setGeometricDistortionCorrectionOnPreviewOutputEnabled:v166 & a58];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMaximumGeometricDistortionCorrectionEnabled:v166 & ShouldEnableMaximumGeometricDistortionCorrection];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageGeometricDistortionCorrectionExpansionCoversOverscan:a59];
  -[BWMultiStreamCameraSourceNodeConfiguration setClientVideoFormat:](v97, "setClientVideoFormat:", [v371 format]);
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDeferStreamingOutputsEnable:a61];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSecondaryScalerIsNotAvailable:a22];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOptimizeBandwidthForPreviewOutput:(int)FigCapturePlatformIdentifier() > 5];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPrimaryScalerDecoupled:v355];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPrimaryScalerDeprioritized:v353];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreferredPreviewMaxFrameRate:BWGetMaximumDisplayFrequency()];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStreamingRequiredWhenConfiguredAsSlave:a47];
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVisionDataRequiredWhenConfiguredAsSlave:a40 != 0];
  CGRect v170 = v373;
  *(float *)&double v171 = FigVideoCaptureSourceUIBaseZoomFactor([v373 source], &v400);
  [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setUiBaseZoomFactor:v171];
  if (v400)
  {
LABEL_493:
    FigDebugAssert3();
    int v94 = v371;
    goto LABEL_485;
  }
  float v356 = a9;
  unint64_t v172 = HIDWORD(a62);
  uint64_t v173 = [v371 shouldPreferSIFRFormatWithHighlightRecoveryEnabled:v159];
  uint64_t v174 = [v373 geometricDistortionCorrectionEnabled];
  [v371 stabilizationOverscanFromSensorForFESCropDimensions:v397 preferSIFRFormat:v173 geometricDistortionCorrection:v174 useFESCompanionIndex:a20];
  double v176 = v175;
  double v178 = v177;
  if ((a28 ^ 1 | a29) == 1) {
    int v179 = objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "bravoConstituentPhotoDeliveryEnabled") ^ 1;
  }
  else {
    int v179 = 0;
  }
  double v180 = *MEMORY[0x1E4F1DB30];
  double v181 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if (a17)
  {
    if (([v363 isEqualToString:*MEMORY[0x1E4F52DF8]] & 1) != 0
      || [v363 isEqualToString:*MEMORY[0x1E4F52E10]])
    {
      uint64_t v182 = &kFigCaptureOfflineStillImageVideoStabilizationOverscanPercentage_FrontCamera;
    }
    else
    {
      uint64_t v182 = &kFigCaptureOfflineStillImageVideoStabilizationOverscanPercentage_BackCamera;
    }
    double v184 = *(float *)v182;
    double v183 = v184;
    goto LABEL_191;
  }
  double v183 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v184 = *MEMORY[0x1E4F1DB30];
  switch(v348)
  {
    case 0:
      goto LABEL_191;
    case 1:
      [v371 stabilizationOverscanPercentageOverrideForStandard];
      if (v186 <= 0.0)
      {
        double v183 = 0.100000001;
      }
      else
      {
        [v371 stabilizationOverscanPercentageOverrideForStandard];
        double v183 = (float)(v187 / 100.0);
      }
      goto LABEL_165;
    case 2:
    case 3:
    case 5:
      if (!v349)
      {
        [v371 stabilizationOverscanPercentageOverrideForCinematic];
        if (v185 <= 0.0) {
          double v183 = 0.200000003;
        }
        else {
          double v183 = (float)(v185 / 100.0);
        }
        if (a15)
        {
          if ([v373 videoStabilizationStrength] == 3)
          {
            float v188 = 50.0;
          }
          else
          {
            [v373 videoStabilizationStrength];
            float v188 = 75.0;
          }
          double v183 = (float)(v188 / 100.0);
          csp_trueVideoCaptureEnabled(a6);
LABEL_165:
          double v184 = v183;
          goto LABEL_166;
        }
        if (v348 != 5)
        {
LABEL_158:
          if (csp_trueVideoCaptureEnabled(a6) && [a3 position] == 1)
          {
            [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setAdditionalVISOverscanReservedInZoom:0.0];
            double v183 = 0.18;
          }
          goto LABEL_165;
        }
        float v189 = a10;
        [v371 stabilizationOverscanPercentageOverrideForCinematicExtendedEnhanced];
        if (v190 == 0.0) {
          float v190 = 28.0;
        }
        double v191 = v190;
        if (v117) {
          double v192 = 46.0;
        }
        else {
          double v192 = v191;
        }
        if ([a3 cinematicVideoEnabled]) {
          goto LABEL_156;
        }
        if ([a3 isBravoVariant])
        {
          a11 = (v192 / 100.0 + 1.0) / (v183 + 1.0) + -1.0;
          if (([v363 isEqualToString:*MEMORY[0x1E4F52DE8]] & 1) == 0)
          {
            *(float *)&double v197 = (v192 / 100.0 + 1.0) / (v183 + 1.0) + -1.0;
            [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setAdditionalVISOverscanReservedInZoom:v197];
          }
          goto LABEL_157;
        }
        if (([v363 isEqualToString:*MEMORY[0x1E4F52DE8]] & 1) == 0) {
LABEL_156:
        }
          double v183 = v192 / 100.0;
LABEL_157:
        a10 = v189;
        goto LABEL_158;
      }
      if (v179) {
        double v184 = v176;
      }
      else {
        double v184 = *MEMORY[0x1E4F1DB30];
      }
      if (v179) {
        double v183 = v178;
      }
      else {
        double v183 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      }
LABEL_166:
      if ((v184 != v180 || v183 != v181)
        && ![(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoStabilizationEnabled]
        && ([a3 cinematicVideoEnabled] & 1) == 0
        && v348 != 4)
      {
        float v366 = a10;
        float v193 = (float)(int)a62 / (float)SHIDWORD(a62);
        if (FigCaptureVideoDimensionsAreValid(v394))
        {
          int v194 = v394;
          LODWORD(v195) = HIDWORD(v394);
        }
        else
        {
          if ([v373 geometricDistortionCorrectionEnabled])
          {
            unint64_t v196 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v371, "frontEndScalerCompanionFormats"), "lastObject"), "geometricDistortionCorrectedNativeDimensions");
            int v194 = v196;
            unint64_t v195 = HIDWORD(v196);
          }
          else
          {
            int v194 = 0;
            unint64_t v195 = 0;
          }
          if (!FigCaptureVideoDimensionsAreValid(v194 | (v195 << 32)))
          {
            if (FigCaptureVideoDimensionsAreValid(v396))
            {
              int v198 = v396;
              LODWORD(v195) = HIDWORD(v396);
            }
            else
            {
              unint64_t v199 = [v371 sensorDimensions];
              int v198 = v199;
              unint64_t v195 = HIDWORD(v199);
            }
            int v194 = [v371 horizontalSensorBinningFactor] * v198;
            LODWORD(v195) = [v371 verticalSensorBinningFactor] * v195;
          }
        }
        float v200 = (float)v194 / (float)(int)v195;
        if (vabds_f32(v193, v200) > 0.01)
        {
          if (v193 <= v200) {
            double v184 = (v183 + 1.0) * v200 / v193 + -1.0;
          }
          else {
            double v183 = (v184 + 1.0) * v193 / v200 + -1.0;
          }
        }
        a10 = v366;
      }
LABEL_191:
      -[BWMultiStreamCameraSourceNodeConfiguration setVisOverscan:](v97, "setVisOverscan:", v184, v183);
      -[BWMultiStreamCameraSourceNodeConfiguration setSensorOverscan:](v97, "setSensorOverscan:", v176, v178);
      *(float *)&double v201 = a11;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setAdditionalVISOverscanWhenRecording:v201];
      if (v179)
      {
        if ((v359 & v349) == 1) {
          BOOL v202 = v183 != v181 || v184 != v180;
        }
        else {
          BOOL v202 = 0;
        }
        int v203 = csp_gdcExpandsImageDimensions([v373 source]);
        if (v203)
        {
          int v203 = [v371 gdcInStillImageSinkPipelineSupported];
          if (v203) {
            int v203 = FigCaptureVideoDimensionsAreValid([v371 postGDCCropDimensions]);
          }
        }
        if (a55)
        {
          BOOL v204 = v176 != v180;
          if (v178 != v181) {
            BOOL v204 = 1;
          }
        }
        else
        {
          BOOL v204 = 0;
        }
        unsigned int v205 = (v202 || v204) | v203;
        if (a17) {
          uint64_t v206 = 1;
        }
        else {
          uint64_t v206 = v205;
        }
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setIncludeOverscanOnStillImageOutput:v206];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setIncludeOverscanInStillImageFinalCropRect:a17];
      }
      [a14 count];
      if (v361)
      {
        int v94 = v371;
        if ([v363 isEqualToString:*MEMORY[0x1E4F52DD8]])
        {
          uint64_t v207 = (void *)[a3 bravoTelephotoCaptureStream];
        }
        else
        {
          if (![v363 isEqualToString:*MEMORY[0x1E4F52DE8]])
          {
LABEL_221:
            float v210 = a10;
            if (a46)
            {
              if (v176 <= v178) {
                double v222 = v178;
              }
              else {
                double v222 = v176;
              }
              float v223 = v222;
              double v208 = 1.2 / (v223 + 1.0) + -1.0;
              float v209 = v208;
            }
            else if ([a3 parallaxMitigationBasedOnZoomFactorEnabled])
            {
              float v209 = 0.15;
            }
            else
            {
              float v209 = 0.1;
            }
            goto LABEL_234;
          }
          uint64_t v207 = (void *)[a3 captureStream];
        }
        [v207 baseZoomFactor];
        float v219 = v218;
        int v220 = [a3 parallaxMitigationBasedOnZoomFactorEnabled];
        LODWORD(v221) = *(_DWORD *)"fff?";
        if (v220) {
          *(float *)&double v221 = 0.97;
        }
        *(float *)&double v221 = v219 * *(float *)&v221;
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setBravoShiftMitigationMaxZoomFactor:v221];
        goto LABEL_221;
      }
      int v94 = v371;
      if (objc_msgSend(+[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", a4, 0), "containsObject:", &unk_1EFAFF9D8))
      {
        float v209 = 0.15;
        float v210 = a10;
        if (a26 - 1 > 1) {
          goto LABEL_234;
        }
        uint64_t v211 = [v371 previewDimensions];
        int v212 = HIDWORD(v211);
        float v213 = (float)(int)v211;
        int v214 = (int)(float)((float)(int)v211 * 1.15) + 4;
        float v215 = objc_msgSend((id)objc_msgSend(v376, "supportedFormats"), "objectAtIndexedSubscript:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v97, "formatIndex"));
        uint64_t v216 = (void *)[v215 objectForKeyedSubscript:*MEMORY[0x1E4F55318]];
        float v217 = (void *)[v216 objectForKeyedSubscript:*MEMORY[0x1E4F55410]];
        objc_msgSend((id)objc_msgSend(v217, "objectForKeyedSubscript:", *MEMORY[0x1E4F55468]), "floatValue");
        if ((float)(*(float *)&v208 * (float)v214) <= 640.0
          && (float)(*(float *)&v208 * (float)((int)(float)((float)v212 * 1.15) + 4)) <= (float)(int)(float)((float)((float)v212 / v213) * 640.0))
        {
          goto LABEL_234;
        }
        goto LABEL_230;
      }
      if (([a3 isBravoVariant] & 1) == 0
        && csp_supportsNondisruptiveSwitchingZoomFactors(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v97, "formatIndex"), -[BWMultiStreamCameraSourceNodeConfiguration activeStreamingNondisruptiveSwitchingFormatIndices](v97, "activeStreamingNondisruptiveSwitchingFormatIndices"), (void *)[v376 supportedFormats])&& v348)
      {
        float v210 = a10;
LABEL_230:
        float v209 = 0.1;
LABEL_234:
        *(float *)&double v208 = v209;
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOverscanForShiftMitigation:v208];
        a10 = v210;
      }
      unint64_t v224 = [v94 previewDimensions];
      int v225 = v224;
      unint64_t v226 = HIDWORD(v224);
      int v227 = FigCapturePlatformIdentifier();
      if ((a57 | a58) == 1 && v227 >= 7 && a28)
      {
        unint64_t v228 = objc_msgSend((id)objc_msgSend(v373, "depthDataFormat"), "depthEngineOutputDimensions");
        int v229 = (int)((double)(2 * (int)v228) * 1.5);
        int v230 = (int)((double)(int)((v228 >> 31) & 0xFFFFFFFE) * 1.5);
        if (v225 <= v229) {
          int v225 = (int)((double)(2 * (int)v228) * 1.5);
        }
        if ((int)v226 <= v230) {
          unint64_t v226 = v230;
        }
        else {
          unint64_t v226 = v226;
        }
        if ((int)a62 <= v229) {
          unsigned int v231 = (int)((double)(2 * (int)v228) * 1.5);
        }
        else {
          unsigned int v231 = a62;
        }
        if (SHIDWORD(a62) <= v230) {
          unint64_t v172 = v230;
        }
        else {
          unint64_t v172 = HIDWORD(a62);
        }
      }
      else
      {
        unsigned int v231 = a62;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreferredPreviewDimensions:v225 | (v226 << 32)];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoCaptureDimensions:v231 | (v172 << 32)];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoCaptureDimensionsIncludeVISOverscan:v344];
      -[BWMultiStreamCameraSourceNodeConfiguration setBackgroundBlurEnabled:](v97, "setBackgroundBlurEnabled:", [v373 backgroundBlurEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setStudioLightingEnabled:](v97, "setStudioLightingEnabled:", [v373 studioLightingEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setReactionEffectsEnabled:](v97, "setReactionEffectsEnabled:", [v373 reactionEffectsEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setBackgroundReplacementEnabled:](v97, "setBackgroundReplacementEnabled:", [v373 backgroundReplacementEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setCinematicFramingEnabled:](v97, "setCinematicFramingEnabled:", [v373 cinematicFramingEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setDeskCamEnabled:](v97, "setDeskCamEnabled:", [v373 deskCamEnabled]);
      -[BWMultiStreamCameraSourceNodeConfiguration setManualCinematicFramingEnabled:](v97, "setManualCinematicFramingEnabled:", [v373 manualCinematicFramingEnabled]);
      unsigned int v367 = v365 ^ 1;
      if ([a4 count]) {
        uint64_t v232 = v365 ^ 1;
      }
      else {
        uint64_t v232 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreviewOutputEnabled:v232];
      if (v372) {
        uint64_t v233 = 0;
      }
      else {
        uint64_t v233 = a33;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputEnabled:v372 != 0];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setForceFirmwareStillImageOutputEnabled:v233];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRoundingOfStillImageDimensionsToMultipleOfFourEnabled:StillImageNoiseReductionAndFusionScheme < 3];
      if (a53)
      {
        if (v372) {
          int v234 = shouldCaptureStillsFromVideoStream ^ 1;
        }
        else {
          int v234 = 0;
        }
        uint64_t v235 = a54;
        uint64_t v236 = v234 | a54;
      }
      else
      {
        uint64_t v236 = 0;
        uint64_t v235 = a54;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSensorRawStillImageOutputEnabled:v236];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setConfigureForSoftISPSupport:v235];
      if ([a6 count]) {
        uint64_t v237 = 1;
      }
      else {
        uint64_t v237 = v365;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoCaptureOutputEnabled:v237];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setObjectDetectionStartupDeferred:a23];
      v238 = FigCaptureConnectionConfigurationWithSinkType(a6, 6);
      char v239 = objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "irisMovieCaptureEnabled");
      uint64_t v240 = 1;
      if (v239)
      {
        int v241 = v347;
      }
      else
      {
        int v241 = v347;
        if ((a13 & 1) == 0 && (a42 & 1) == 0)
        {
          if (([a14 containsObject:&unk_1EFAFF990] & 1) != 0
            || ([a14 containsObject:&unk_1EFAFF9A8] & 1) != 0)
          {
            uint64_t v240 = 1;
          }
          else
          {
            uint64_t v240 = v347 | [a14 containsObject:&unk_1EFAFF9D8];
          }
        }
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDetectedFacesOnVideoCaptureOutputEnabled:v240];
      if (v238) {
        uint64_t v242 = 0;
      }
      else {
        uint64_t v242 = a13;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDetectedFacesOnPreviewOutputEnabled:v242];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDoingCMFaceTracking:a13];
      if (objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", 0x1EFA6B620), "BOOLValue"))
      {
        v243 = objc_alloc_init(BWSecureMetadataOutputConfiguration);
        -[BWSecureMetadataOutputConfiguration setObjectDetectionEnabled:](v243, "setObjectDetectionEnabled:", [a48 count] != 0);
        [(BWSecureMetadataOutputConfiguration *)v243 setEnabledDetectedObjectTypes:a48];
        [(BWSecureMetadataOutputConfiguration *)v243 setAttentionDetectionEnabled:a49];
        [(BWSecureMetadataOutputConfiguration *)v243 setEyeReliefStatusDetectionEnabled:a50];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSecureMetadataOutputConfiguration:v243];
      }
      else
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setEnabledDetectedObjectTypes:a48];
        if ([a48 count]) {
          uint64_t v244 = v241 ^ 1u;
        }
        else {
          uint64_t v244 = 0;
        }
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDetectedObjectsOutputEnabled:v244];
      }
      long long v387 = 0u;
      long long v388 = 0u;
      long long v385 = 0u;
      long long v386 = 0u;
      uint64_t v245 = [a6 countByEnumeratingWithState:&v385 objects:v407 count:16];
      if (v245)
      {
        uint64_t v246 = v245;
        uint64_t v247 = *(void *)v386;
        do
        {
          for (uint64_t k = 0; k != v246; ++k)
          {
            if (*(void *)v386 != v247) {
              objc_enumerationMutation(a6);
            }
            unsigned int v249 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v385 + 1) + 8 * k), "sinkConfiguration"), "sinkType");
            if (v249 <= 0xA && ((1 << v249) & 0x450) != 0)
            {
              uint64_t v251 = 1;
              goto LABEL_296;
            }
          }
          uint64_t v246 = [a6 countByEnumeratingWithState:&v385 objects:v407 count:16];
          uint64_t v251 = 0;
        }
        while (v246);
      }
      else
      {
        uint64_t v251 = 0;
      }
LABEL_296:
      long long v383 = 0u;
      long long v384 = 0u;
      long long v381 = 0u;
      long long v382 = 0u;
      uint64_t v252 = [a4 countByEnumeratingWithState:&v381 objects:v406 count:16];
      if (v252)
      {
        uint64_t v253 = *(void *)v382;
        do
        {
          for (uint64_t m = 0; m != v252; ++m)
          {
            if (*(void *)v382 != v253) {
              objc_enumerationMutation(a4);
            }
            unsigned int v255 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v381 + 1) + 8 * m), "sinkConfiguration"), "sinkType");
            if (v255 <= 0xA && ((1 << v255) & 0x450) != 0)
            {
              uint64_t v251 = v365 | v251;
              uint64_t v252 = v367;
              goto LABEL_308;
            }
          }
          uint64_t v252 = [a4 countByEnumeratingWithState:&v381 objects:v406 count:16];
        }
        while (v252);
LABEL_308:
        CGRect v170 = v373;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoEncoderMetadataOnVideoCaptureOutputEnabled:v251];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoEncoderMetadataOnPreviewOutputEnabled:v252];
      if (a27 && ([a3 cinematicVideoEnabled] & 1) == 0)
      {
        uint64_t v257 = a34 != 0;
        uint64_t v258 = 1;
      }
      else
      {
        uint64_t v257 = [a3 cinematicVideoEnabled];
        uint64_t v258 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFocusBlurMapEnabled:v257];
      if ([(BWMultiStreamCameraSourceNodeConfiguration *)v97 focusBlurMapEnabled]) {
        uint64_t v259 = 1;
      }
      else {
        uint64_t v259 = objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "focusPixelBlurScoreEnabled");
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFocusBlurMapEnabled:v259];
      if (a75
        && ([(BWMultiStreamCameraSourceNodeConfiguration *)v97 backgroundBlurEnabled]
         || [(BWMultiStreamCameraSourceNodeConfiguration *)v97 studioLightingEnabled]))
      {
        uint64_t v258 = 1;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setDetectedFacesOutputConfiguration:](v97, "setDetectedFacesOutputConfiguration:", [v170 faceDetectionConfiguration]);
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setEyeDetectionRequired:v258];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMotionAttachmentsSource:a16];
      int v260 = (void *)[v170 requiredFormat];
      if ([v170 lowLightVideoCaptureEnabled]) {
        int v261 = [v260 isLowLightVideoCaptureSupported];
      }
      else {
        int v261 = 0;
      }
      int v262 = objc_msgSend((id)objc_msgSend(v170, "requiredFormat"), "isVariableFrameRateVideoCaptureSupported");
      int v263 = [v170 videoStabilizationStrength];
      int v264 = [v170 variableFrameRateVideoCaptureEnabled];
      if (v263 < 3) {
        int v265 = v264;
      }
      else {
        int v265 = 0;
      }
      int v266 = v265 & v262;
      int v267 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "variableFrameRateVideoCaptureFromFWSupported");
      [v170 requiredMinFrameRate];
      float v269 = v268;
      [v170 requiredMaxFrameRate];
      int v357 = v266;
      unsigned __int8 v354 = v267;
      if (v261)
      {
        int v272 = [v363 isEqualToString:*MEMORY[0x1E4F52DF0]];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLowLightVideoEnabled:1];
        LODWORD(v270) = 24.0;
        float v273 = 30.0;
        if (v272) {
          *(float *)&double v270 = 30.0;
        }
      }
      else
      {
        LODWORD(v271) = LODWORD(v270);
        if (v266) {
          *(float *)&double v270 = 60.0;
        }
        else {
          *(float *)&double v270 = v269;
        }
        if (v266) {
          float v273 = 60.0;
        }
        else {
          float v273 = *(float *)&v271;
        }
        if ((v266 & v267) == 1)
        {
          int v274 = objc_msgSend(v363, "isEqualToString:", *MEMORY[0x1E4F52DF0], v270, v271);
          LODWORD(v270) = 24.0;
          if (v274) {
            *(float *)&double v270 = 30.0;
          }
          float v273 = 60.0;
        }
      }
      uint64_t v275 = a64;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMinFrameRate:v270];
      *(float *)&double v276 = v273;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMaxFrameRate:v276];
      if (![&unk_1EFB034D0 containsObject:FigCaptureGetModelSpecificName()]
        || ([a3 cinematicVideoEnabled] & 1) == 0)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setContentAwareEnhancementEnabled:](v97, "setContentAwareEnhancementEnabled:", [v94 isContentAwareEnhancementSupported]);
        -[BWMultiStreamCameraSourceNodeConfiguration setContentAwareAWBEnabled:](v97, "setContentAwareAWBEnabled:", [v94 isContentAwareAWBSupported]);
      }
      BOOL v277 = ![v94 isPhotoFormat]
          || (int)FigCapturePlatformIdentifier() < 11
          || [v373 sourcePosition] == 2;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setColorPostProcessingSkyEnhancementEnabled:v277];
      -[BWMultiStreamCameraSourceNodeConfiguration setMultiIlluminantWhiteBalanceEnabled:](v97, "setMultiIlluminantWhiteBalanceEnabled:", [v94 isMultiIlluminantWhiteBalanceSupported]);
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDepthType:a26];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStrictDepthModePreferred:a65];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRGBIRStereoFusionMinDepthThresholdMM:a66];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRGBIRStereoFusionMaxDepthThresholdMM:a67];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRGBIRStereoFusionFixedDepthThresholdMM:a68];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRGBIRStereoFusionFixedDepthValueMM:a69];
      if (!FigCaptureVideoDimensionsAreValid(a64)) {
        uint64_t v275 = objc_msgSend((id)objc_msgSend(v373, "depthDataFormat"), "depthEngineOutputDimensions");
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDepthDimensions:v275];
      if (a26 - 1 < 2) {
        uint64_t v278 = a72;
      }
      else {
        uint64_t v278 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDepthOutputEnabled:v278];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setHardwareDepthFilteringPreferred:0];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPointCloudOutputEnabled:v351];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPointCloudOutputIsSupplementalPointCloudData:v352];
      if (([a3 cinematicVideoEnabled] & 1) == 0)
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLightSourceMaskOutputEnabled:csp_shouldEnableLightSourceMask(v94, a6)];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setKeypointDescriptorDataOutputEnabled:csp_shouldEnableLightSourceMask(v94, a6)];
      }
      uint64_t v279 = *MEMORY[0x1E4F53B50];
      v405[0] = *MEMORY[0x1E4F53B40];
      v405[1] = v279;
      uint64_t v280 = *MEMORY[0x1E4F53B88];
      v405[2] = *MEMORY[0x1E4F53B48];
      v405[3] = v280;
      uint64_t v281 = [MEMORY[0x1E4F1C978] arrayWithObjects:v405 count:4];
      -[BWMultiStreamCameraSourceNodeConfiguration setEnabledSemanticMaskTypes:](v97, "setEnabledSemanticMaskTypes:", [MEMORY[0x1E4F1CAD0] setWithArray:v281]);
      if (a81) {
        BOOL v282 = [(NSSet *)[(BWMultiStreamCameraSourceNodeConfiguration *)v97 enabledSemanticMaskTypes] count] != 0;
      }
      else {
        BOOL v282 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSemanticMasksOutputEnabled:v282];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOutputEnabled:0];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOnPreviewOutputEnabled:v345 & [(BWMultiStreamCameraSourceNodeConfiguration *)v97 previewOutputEnabled]];
      BOOL v283 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 previewOutputEnabled];
      uint64_t v284 = 0;
      if (!v283) {
        uint64_t v284 = v345 & [(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoCaptureOutputEnabled];
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOnVideoCaptureOutputEnabled:v284];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPostColorProcessingThumbnailOnPreviewOutputEnabled:v346 & [(BWMultiStreamCameraSourceNodeConfiguration *)v97 previewOutputEnabled]];
      if ([(BWMultiStreamCameraSourceNodeConfiguration *)v97 previewOutputEnabled]) {
        uint64_t v285 = 0;
      }
      else {
        uint64_t v285 = v346 & [(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoCaptureOutputEnabled];
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:v285];
      -[BWMultiStreamCameraSourceNodeConfiguration setDiscardsDepthDataForStillImages:](v97, "setDiscardsDepthDataForStillImages:", [a3 isBravoVariant]);
      if (a30)
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:[(BWMultiStreamCameraSourceNodeConfiguration *)v97 previewOutputEnabled]];
        uint64_t v286 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoCaptureOutputEnabled];
      }
      else
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:0];
        uint64_t v286 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOriginalCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:v286];
      if (a31) {
        uint64_t v287 = [(BWMultiStreamCameraSourceNodeConfiguration *)v97 stillImageOutputEnabled];
      }
      else {
        uint64_t v287 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOriginalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled:v287];
      v288 = a3;
      if (a30 && [(BWMultiStreamCameraSourceNodeConfiguration *)v97 depthOutputEnabled]) {
        uint64_t v289 = [a3 cinematicVideoEnabled] ^ 1;
      }
      else {
        uint64_t v289 = 0;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setOriginalCameraIntrinsicMatrixDeliveryOnDepthOutputEnabled:v289];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputSensorInterfaceRawAttachmentOptionRetainedBufferCount:a36];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputSashimiRawAttachmentOptionRetainedBufferCount:a35];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputFocusPixelDataAttachmentOptionRetainedBufferCount:a34];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFirmwareStillImageOutputRetainedBufferCountOverride:a37];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputSushiRawAttachmentOptionSupportEnabled:a38];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageOutputSushiRawAttachmentOptionEnabled:a39];
      if ([v376 hasSphere])
      {
        [v376 setEnablesSphereWhenAvailable:1];
        int v290 = v372
             ? objc_msgSend((id)objc_msgSend(v373, "requiredFormat"), "isStillImageStabilizationSupported") | a18
             : 0;
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDiscardsUnstableSphereVideoFrames:v290 & (v359 ^ 1)];
        [v376 setAvoidsSphereRecentering:v290 & v359];
        [v376 setDepthDataDeliveryEnabled:a28];
        objc_msgSend(v376, "setVisualIntelligenceCameraEnabled:", FigCaptureClientApplicationIDIsVisualIntelligenceCamera(objc_msgSend(a3, "applicationID")));
        if ([v376 sphereVideoSupported])
        {
          if (objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "maxQualityPrioritization") == 3) {
            char v291 = [v94 isHighPhotoQualitySupported];
          }
          else {
            char v291 = 0;
          }
          objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", @"SphereVideoMaxFrameRate"), "floatValue");
          if (v292 == 0.0) {
            float v293 = 60.0;
          }
          else {
            float v293 = v292;
          }
          if (([a14 count]
             || (v291 & 1) != 0
             || [v94 isSphereAssistedAutoFocusEnabled])
            && ([v94 maxSupportedFrameRate], v294 <= v293))
          {
            uint64_t v295 = v349 ^ 1u;
          }
          else
          {
            uint64_t v295 = 0;
          }
          [v376 setSphereVideoEnabled:v295];
        }
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setReflectsStillsOnStreamingOutputs:v359];
      -[BWMultiStreamCameraSourceNodeConfiguration setLivePhotoCaptureEnabled:](v97, "setLivePhotoCaptureEnabled:", objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "irisMovieCaptureEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setApplyPreviewShiftToStillImage:](v97, "setApplyPreviewShiftToStillImage:", objc_msgSend((id)objc_msgSend(v372, "irisSinkConfiguration"), "irisApplyPreviewShift"));
      if ((a19 & 1) == 0)
      {
        uint64_t v296 = [v94 ispChromaNoiseReductionEnabled];
        if ((shouldCaptureStillsFromVideoStream & objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", 0x1EFA50800), "BOOLValue")) == 1)
        {
          int v297 = [v94 ispChromaNoiseReductionEnabled];
          if (v297 != [v94 isStillImageISPChromaNoiseReductionEnabled])
          {
            uint64_t v296 = [v94 isStillImageISPChromaNoiseReductionEnabled];
            [v94 isStillImageISPChromaNoiseReductionEnabled];
          }
        }
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setChromaNoiseReductionEnabled:v296];
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setKeypointDetectionEnabled:0];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageKeypointDetectionEnabled:0];
      uint64_t v298 = objc_msgSend((id)objc_msgSend(v376, "stream"), "supportedProperties");
      if ([v298 objectForKeyedSubscript:*MEMORY[0x1E4F54B08]])
      {
        if (objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", @"IspMBNRSupported"), "BOOLValue"))
        {
          uint64_t v299 = 2;
        }
        else if (objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", @"MultiPassIspMBNRSupported"), "BOOLValue")&& objc_msgSend(v94, "isISPMultiBandNoiseReductionSupported")&& -[BWMultiStreamCameraSourceNodeConfiguration videoCaptureOutputEnabled](v97, "videoCaptureOutputEnabled"))
        {
          double RectWithAspectRatioInsideDimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions([v94 sensorDimensions], 1, (float)(int)-[BWMultiStreamCameraSourceNodeConfiguration videoCaptureDimensions](v97, "videoCaptureDimensions")/ (float)(int)((unint64_t)-[BWMultiStreamCameraSourceNodeConfiguration videoCaptureDimensions](v97, "videoCaptureDimensions") >> 32));
          float v302 = v301;
          uint64_t v299 = (float)(v302
                       / (float)(int)[(BWMultiStreamCameraSourceNodeConfiguration *)v97 videoCaptureDimensions]) <= 1.2;
        }
        else
        {
          uint64_t v299 = 0;
        }
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setIspMultiBandNoiseReductionMode:v299];
      }
      if (a74)
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVideoCaptureOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreviewOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setDetectedObjectsOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setSemanticMasksOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOnPreviewOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPreLTMThumbnailOnVideoCaptureOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPostColorProcessingThumbnailOnPreviewOutputEnabled:0];
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:0];
      }
      int v303 = [a3 depthType];
      if (a26) {
        BOOL v304 = 0;
      }
      else {
        BOOL v304 = v303 == 3;
      }
      char v306 = v304 && v231 == 3840;
      if (([a3 cinematicVideoEnabled] & (a74 ^ 1) & 1) != 0
        || (v306 & 1) != 0
        || csp_trueVideoCaptureEnabled(a6) && [a3 position] == 2)
      {
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setIncludeOverscanOnPreviewOutput:1];
      }
      [v94 lowLightVideoAEMaxGain];
      float v308 = v307;
      [v94 variableFrameRateVideoCaptureFromFWAEMaxGain];
      float v310 = v309;
      [v373 maxGainClientOverride];
      float v312 = v311;
      [v94 aeMaxGain];
      float v314 = *(float *)&v313;
      if (v312 >= 1.0) {
        char v315 = 1;
      }
      else {
        char v315 = v261;
      }
      if (v312 < 1.0) {
        float v312 = v308;
      }
      if ((v315 & 1) == 0)
      {
        float v312 = v308;
        if (([a3 cinematicVideoEnabled] & 1) == 0)
        {
          if ([a3 stereoVideoCaptureEnabled])
          {
            if (![v94 stereoVideoCompanionFormat]
              || (objc_msgSend((id)objc_msgSend(v94, "stereoVideoCompanionFormat"), "stereoVideoAEMaxGain"), v316 == 0.0))
            {
              [v94 stereoVideoAEMaxGain];
              if (*(float *)&v313 == 0.0)
              {
                float v312 = v314;
                goto LABEL_440;
              }
              unsigned int v317 = v94;
            }
            else
            {
              unsigned int v317 = (void *)[v94 stereoVideoCompanionFormat];
            }
            [v317 stereoVideoAEMaxGain];
            goto LABEL_439;
          }
          if (v357) {
            float v312 = v310;
          }
          else {
            float v312 = v314;
          }
          if (((v357 ^ 1 | v354) & 1) == 0)
          {
            csp_variableFrameRateVideoGain(v376);
LABEL_439:
            float v312 = *(float *)&v313;
          }
        }
      }
LABEL_440:
      if ((*((unsigned char *)a25 + 12) & 1) == 0
        && [v373 applyMaxExposureDurationFrameworkOverrideWhenAvailable]
        && [v94 maxIntegrationTimeOverride])
      {
        CMTimeMake(&v409, 1, (int)(float)(1000.0 / (float)(int)[v94 maxIntegrationTimeOverride]));
        DWORD1(v313) = HIDWORD(v409.value);
        *(CMTime *)a25 = v409;
      }
      if (a28 && [a3 isBravoVariant] && (a46 & 1) == 0)
      {
        objc_msgSend((id)objc_msgSend(v373, "requiredFormat"), "depthDataAEMaxGain");
        if (v318 != 0.0)
        {
          objc_msgSend((id)objc_msgSend(v373, "requiredFormat"), "depthDataAEMaxGain");
          float v312 = v319;
        }
        objc_msgSend((id)objc_msgSend(v373, "requiredFormat"), "depthDataMaxIntegrationTimeOverride");
        if (*(float *)&v313 != 0.0)
        {
          objc_msgSend((id)objc_msgSend(v373, "requiredFormat"), "depthDataMaxIntegrationTimeOverride");
          CMTimeMake(&v409, 1, (int)(float)(1000.0 / v320));
          DWORD1(v313) = HIDWORD(v409.value);
          *(CMTime *)a25 = v409;
        }
      }
      if (a15)
      {
        CMTimeMake(&v409, 1, 600);
        *(CMTime *)a25 = v409;
        if ([v373 videoStabilizationStrength] == 3)
        {
          CMTimeMake(&v409, 1, 250);
          *(CMTime *)a25 = v409;
          v288 = a3;
        }
        else
        {
          v288 = a3;
          if ([v373 videoStabilizationStrength] == 4)
          {
            CMTimeMake(&v409, 1, *((_DWORD *)a25 + 2));
            *(CMTime *)a25 = v409;
          }
        }
        [v94 actionCameraAEMaxGainScaleFactor];
        float v312 = v312 * *(float *)&v313;
        uint64_t v321 = a52;
      }
      else if (v261)
      {
        uint64_t v321 = a52;
        uint64_t v322 = MEMORY[0x1E4F1F9F8];
        long long v313 = *MEMORY[0x1E4F1F9F8];
        *a25 = *MEMORY[0x1E4F1F9F8];
        *((void *)a25 + 2) = *(void *)(v322 + 16);
      }
      else
      {
        uint64_t v321 = a52;
      }
      *(float *)&long long v313 = v312;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setAeMaxGain:*(double *)&v313];
      *(float *)&double v323 = v308;
      [v376 setMomentCaptureVideoRecordingAEMaxGain:v323];
      long long v379 = *a25;
      uint64_t v380 = *((void *)a25 + 2);
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMaxExposureDurationFrameworkOverride:&v379];
      [v288 setGlobalToneMappingEnabledOverride:0];
      long long v377 = *a24;
      uint64_t v378 = *((void *)a24 + 2);
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMaxExposureDurationClientOverride:&v377];
      -[BWMultiStreamCameraSourceNodeConfiguration setColorSpace:](v97, "setColorSpace:", [v373 colorSpace]);
      BOOL v324 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:a6 doingFaceTracking:a13];
      BOOL v325 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:a4 doingFaceTracking:a13];
      uint64_t v326 = a78 | v324 | v365 & (a78 | v325);
      uint64_t v327 = v367 & (a78 | v325);
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:v326];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:v327];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:[(BWMultiStreamCameraSourceNodeConfiguration *)v97 cameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled] | a13];
      BOOL v329 = StillImageNoiseReductionAndFusionScheme > 3 || (StillImageNoiseReductionAndFusionScheme & 0xFFFFFFFE) == 2;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLtmLookUpTableMetadataEnabledForStills:v329];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setLumaHistogramMetadataEnabled:a73];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageLocalHistogramClippingDataMetadataEnabled:a60];
      if (((a32 & 1) != 0 || a33)
        && ![(BWMultiStreamCameraSourceNodeConfiguration *)v97 usesFirmwareStillImageOutput])
      {
        goto LABEL_497;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setUsesFIFOFirmwareTimeMachine:a32];
      if (a33) {
        uint64_t v330 = 4;
      }
      else {
        uint64_t v330 = 1;
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFirmwareTimeMachineBufferCapacity:v330];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFirmwareTimeMachineSIFREnabled:(a33 & a52)];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setMaximumNumberOfBracketedSIFRFrames:v321];
      if (objc_msgSend((id)objc_msgSend(v399, "objectForKeyedSubscript:", @"ISPAPSData"), "BOOLValue"))-[BWMultiStreamCameraSourceNodeConfiguration setIspAPSDataEnabled:](v97, "setIspAPSDataEnabled:", 0); {
      if (a40)
      }
      {
        v331 = (void *)[a40 sinkConfiguration];
        id v332 = (void *)[v331 embeddedCaptureDeviceConfiguration];
        if ((int)[a40 retainedBufferCount] >= 1)
        {
          id v332 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v332];
          uint64_t v333 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(a40, "retainedBufferCount"));
          [v332 setObject:v333 forKeyedSubscript:*MEMORY[0x1E4F55540]];
        }
        uint64_t v334 = objc_msgSend((id)objc_msgSend(v376, "stream"), "supportedProperties");
        uint64_t v335 = *MEMORY[0x1E4F553B8];
        if ([v334 objectForKeyedSubscript:*MEMORY[0x1E4F553B8]])
        {
          uint64_t v336 = objc_msgSend((id)objc_msgSend(v376, "stream"), "getProperty:error:", v335, &v400);
          if (v400) {
            goto LABEL_485;
          }
          id v332 = (void *)[v332 dictionaryWithValuesForKeys:v336];
        }
        [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setVisionDataConfiguration:v332];
        [v288 visionDataMaxFrameRate];
        float v338 = v337;
        [v331 maxFrameRate];
        if (v338 <= v339) {
          [v331 maxFrameRate];
        }
        else {
          [v288 visionDataMaxFrameRate];
        }
        objc_msgSend(v288, "setVisionDataMaxFrameRate:");
      }
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStreamingForegroundSegmentationEnabled:a41];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFaceTrackingEnabled:a42];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFaceTrackingNumTrackedFaces:a43];
      *(float *)&double v340 = v356;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFaceTrackingNetworkFailureThresholdMultiplier:v340];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFaceTrackingUseRecognition:a44];
      *(float *)&double v341 = a10;
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setFaceTrackingFailureFieldOfViewModifier:v341];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setRGBIRStereoFusionEnabled:a45];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setStillImageMaxLossyCompressionLevel:a71];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setGraphContainsMultipleVideoSources:a76];
      [(BWMultiStreamCameraSourceNodeConfiguration *)v97 setIsAutoFocusAssistSourceNode:a79];
      unsigned int v400 = [v350 configure:v97];
      if (v400) {
        goto LABEL_36;
      }
LABEL_485:
      if (cf) {
        CFRelease(cf);
      }
LABEL_487:

      return v400;
    case 4:
      goto LABEL_166;
    default:
      double v183 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      double v184 = *MEMORY[0x1E4F1DB30];
      goto LABEL_166;
  }
}

uint64_t csp_shouldUseActionCameraCompanionIndex(void *a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "actionCameraCompanionFormat");
  if (result)
  {
    if ([a1 depthDataDeliveryEnabled])
    {
      return 0;
    }
    else
    {
      id v6 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:a2 includeIris:0];
      if ([v6 containsObject:&unk_1EFAFF9A8]) {
        return 1;
      }
      else {
        return [v6 containsObject:&unk_1EFAFFB40];
      }
    }
  }
  return result;
}

void *csp_activeStreamingNondisruptiveSwitchingFormatIndices(int a1, void *a2, int a3, int a4)
{
  v69[5] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v46 = a1;
  uint64_t v5 = objc_msgSend(a2, "objectAtIndexedSubscript:");
  id v6 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F55310]];
  if (![v6 count]) {
    return 0;
  }
  BOOL v33 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v48 = [v6 countByEnumeratingWithState:&v58 objects:v66 count:16];
  if (v48)
  {
    id obj = v6;
    uint64_t v44 = *(void *)v59;
    uint64_t v43 = *MEMORY[0x1E4F55318];
    uint64_t v51 = *MEMORY[0x1E4F55410];
    uint64_t v50 = *MEMORY[0x1E4F55420];
    uint64_t v42 = *MEMORY[0x1E4F553F8];
    uint64_t v41 = *MEMORY[0x1E4F55428];
    uint64_t v40 = *MEMORY[0x1E4F55430];
    uint64_t v37 = *MEMORY[0x1E4F55300];
    uint64_t v36 = *MEMORY[0x1E4F552F8];
    uint64_t v7 = *MEMORY[0x1E4F55480];
    uint64_t v8 = *MEMORY[0x1E4F55470];
    uint64_t v39 = *MEMORY[0x1E4F552D8];
    uint64_t v34 = *MEMORY[0x1E4F552D0];
    int v45 = v4;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v59 != v44) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v58 + 1) + 8 * v9);
        int v11 = [v10 intValue];
        long long v12 = (void *)[v4 objectAtIndexedSubscript:v46];
        float v57 = (void *)[v12 objectForKeyedSubscript:v43];
        long long v13 = (void *)[v4 objectAtIndexedSubscript:v11];
        int v14 = (void *)[v13 objectForKeyedSubscript:v43];
        v69[0] = v51;
        v69[1] = v50;
        v69[2] = v42;
        v69[3] = v41;
        v69[4] = v40;
        uint64_t v55 = v9;
        id v56 = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v69 count:5];
        uint64_t v49 = v10;
        long long v53 = v12;
        if (a4
          && FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v37), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v36), "intValue") << 32)) == 2)
        {
          v68[0] = v51;
          v68[1] = v50;
          id v56 = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v68 count:2];
          int v52 = 1;
        }
        else
        {
          int v52 = 0;
        }
        long long v54 = v13;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        uint64_t v15 = [v56 countByEnumeratingWithState:&v62 objects:v67 count:16];
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)v63;
LABEL_14:
          uint64_t v18 = 0;
          while (1)
          {
            if (*(void *)v63 != v17) {
              objc_enumerationMutation(v56);
            }
            uint64_t v19 = *(void *)(*((void *)&v62 + 1) + 8 * v18);
            long long v20 = (void *)[v57 objectForKeyedSubscript:v19];
            int v21 = objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v7), "intValue");
            int v22 = objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v8), "intValue");
            long long v23 = (void *)[v14 objectForKeyedSubscript:v19];
            int v24 = objc_msgSend((id)objc_msgSend(v23, "objectForKeyedSubscript:", v7), "intValue");
            int v25 = objc_msgSend((id)objc_msgSend(v23, "objectForKeyedSubscript:", v8), "intValue");
            if (v21 != v24 || v22 != v25) {
              break;
            }
            if (v16 == ++v18)
            {
              uint64_t v16 = [v56 countByEnumeratingWithState:&v62 objects:v67 count:16];
              if (v16) {
                goto LABEL_14;
              }
              goto LABEL_24;
            }
          }
        }
        else
        {
LABEL_24:
          if (objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", v39), "BOOLValue")) {
            int v27 = objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", v34), "intValue");
          }
          else {
            int v27 = 0;
          }
          int v28 = objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v39), "BOOLValue");
          if (v28) {
            int v28 = objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v34), "intValue");
          }
          if (v52) {
            int v29 = 4;
          }
          else {
            int v29 = v27;
          }
          if (a3) {
            int v30 = 2;
          }
          else {
            int v30 = v29;
          }
          if (v28 == v29 || v28 == v30)
          {
            int v31 = objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
            if (v31 == objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue"))objc_msgSend(v33, "addObject:", v49); {
          }
            }
        }
        uint64_t v9 = v55 + 1;
        uint64_t v4 = v45;
      }
      while (v55 + 1 != v48);
      uint64_t v48 = [obj countByEnumeratingWithState:&v58 objects:v66 count:16];
    }
    while (v48);
  }
  return v33;
}

uint64_t csp_supportsNondisruptiveSwitchingZoomFactors(int a1, void *a2, void *a3)
{
  uint64_t result = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3)
    {
      [a3 objectAtIndexedSubscript:a1];
      CGSize v10 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
      CGPoint v11 = (CGPoint)*MEMORY[0x1E4F1DB20];
      v16.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB20];
      v16.size = v10;
      FigCFDictionaryGetCGRectIfPresent();
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v17 count:16];
      if (result)
      {
        uint64_t v7 = result;
        uint64_t v8 = *(void *)v13;
        while (2)
        {
          uint64_t v9 = 0;
          do
          {
            if (*(void *)v13 != v8) {
              objc_enumerationMutation(a2);
            }
            objc_msgSend(a3, "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v9), "intValue", v10, v11));
            FigCFDictionaryGetCGRectIfPresent();
            if (!CGRectIsNull(v16))
            {
              v19.origiuint64_t n = v11;
              v19.size = v10;
              if (!CGRectIsNull(v19) && v10.width < v16.size.width) {
                return 1;
              }
            }
            ++v9;
          }
          while (v7 != v9);
          uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v17 count:16];
          uint64_t v7 = result;
          if (result) {
            continue;
          }
          break;
        }
      }
    }
  }
  return result;
}

uint64_t FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A5907038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __roRebuildFlatDictionaryAttachments_block_invoke(uint64_t a1, uint64_t a2)
{
}

double rqSenderInit(_OWORD *a1)
{
  double result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t cs_getMasterClockAndType(void *a1, uint64_t *a2, int *a3)
{
  id v6 = (void *)[a1 cameraSourcePipelines];
  if ([a1 micSourcePipeline])
  {
    uint64_t result = -[FigCaptureMicSourcePipeline clock]([a1 micSourcePipeline]);
    int v8 = 2;
    if (!a2) {
      goto LABEL_9;
    }
LABEL_8:
    *a2 = result;
    goto LABEL_9;
  }
  uint64_t result = [v6 count];
  if (result)
  {
    uint64_t v9 = [a1 firstColorCameraSourcePipeline];
    if (!v9) {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "cameraSourcePipelines"), "firstObject");
    }
    uint64_t result = -[FigCaptureCameraSourcePipeline clock](v9);
    int v8 = 1;
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    int v8 = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
LABEL_9:
  if (a3) {
    *a3 = v8;
  }
  return result;
}

uint64_t cs_notificationPayloadForSectionFormatChanged(uint64_t result, uint64_t a2)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (a2)
    {
      v8[0] = @"SectionID";
      v8[1] = @"FormatDescription";
      v9[0] = result;
      v9[1] = a2;
      uint64_t v2 = (void *)MEMORY[0x1E4F1C9E8];
      int v3 = v9;
      uint64_t v4 = (__CFString **)v8;
      uint64_t v5 = 2;
    }
    else
    {
      id v6 = @"SectionID";
      uint64_t v7 = result;
      uint64_t v2 = (void *)MEMORY[0x1E4F1C9E8];
      int v3 = &v7;
      uint64_t v4 = &v6;
      uint64_t v5 = 1;
    }
    return [v2 dictionaryWithObjects:v3 forKeys:v4 count:v5];
  }
  return result;
}

uint64_t captureSession_updateGraphForVideoPreviewSinkConfigurationChanges(uint64_t a1, void *a2, char a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v20 = v3;
    LODWORD(v19) = 0;
    FigDebugAssert3();
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v7 = objc_msgSend(a2, "parsedPreviewSinkConfigurations", v19, v20, 0);
  uint64_t result = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)v22;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * v11), "videoPreviewSinkConnectionConfiguration"), "videoPreviewSinkConfiguration");
        long long v13 = objc_msgSend(*(id *)(DerivedStorage + 664), "previewSinkPipelineWithSinkID:", objc_msgSend(v12, "sinkID"));
        if ((a3 & 1) == 0)
        {
          [v12 primaryCaptureRectAspectRatio];
          double v15 = v14;
          [v12 primaryCaptureRectCenter];
          objc_msgSend(v13, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", 0, objc_msgSend(v12, "primaryCaptureRectUniqueID"), v15, v16, v17, 0.0);
        }
        uint64_t v18 = [v12 semanticStyle];
        if (v18) {
          [v13 setSemanticStyle:v18 animated:0];
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t result = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v9 = result;
    }
    while (result);
  }
  return result;
}

uint64_t FigCaptureSourceDeviceTypeToShortString(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%d (%d)", a1, a2);
}

uint64_t cs_captureSourceDeviceType(uint64_t a1)
{
  id v8 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, id *))(v3 + 48);
  if (v4)
  {
    v4(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v8);
    id v5 = v8;
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", @"DeviceType"), "intValue");

  return v6;
}

uint64_t cs_captureSourceCameraPosition(uint64_t a1)
{
  id v8 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, id *))(v3 + 48);
  if (v4)
  {
    v4(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v8);
    id v5 = v8;
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", @"Position"), "intValue");

  return v6;
}

uint64_t captureSession_updateGraphConnectionEnabledState(uint64_t a1, void *a2)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v5 = *(void **)(DerivedStorage + 664);
  uint64_t v101 = DerivedStorage;
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v95 = v2;
    LODWORD(v93) = 0;
    FigDebugAssert3();
  }
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  uint64_t v102 = a2;
  uint64_t v6 = objc_msgSend(a2, "parsedVideoDataSinkConfigurations", v93, v95);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v159 objects:v175 count:16];
  uint64_t v108 = v5;
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v160;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v160 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend((id)objc_msgSend(v5, "videoDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v159 + 1) + 8 * i), "videoDataConnectionConfiguration", v94, v96), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v159 + 1) + 8 * i), "videoDataConnectionConfiguration"), "enabled") ^ 1);
        if (dword_1EB4C5110)
        {
          int v158 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          id v5 = v108;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v159 objects:v175 count:16];
    }
    while (v8);
  }
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v12 = objc_msgSend(a2, "parsedDepthDataSinkConfigurations", v94);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v153 objects:v174 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v154;
    do
    {
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)v154 != v15) {
          objc_enumerationMutation(v12);
        }
        objc_msgSend((id)objc_msgSend(v5, "depthDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v153 + 1) + 8 * j), "depthDataConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v153 + 1) + 8 * j), "depthDataConnectionConfiguration"), "enabled") ^ 1);
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v153 objects:v174 count:16];
    }
    while (v14);
  }
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  double v17 = (void *)[a2 audioDataSinkConnectionConfigurations];
  uint64_t v18 = [v17 countByEnumeratingWithState:&v149 objects:v173 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v150;
    do
    {
      for (uint64_t k = 0; k != v19; ++k)
      {
        if (*(void *)v150 != v20) {
          objc_enumerationMutation(v17);
        }
        objc_msgSend((id)objc_msgSend(v5, "audioDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v149 + 1) + 8 * k), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((void *)&v149 + 1) + 8 * k), "enabled") ^ 1);
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v149 objects:v173 count:16];
    }
    while (v19);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v101 + 216));
  uint64_t v105 = *(void *)(v101 + 224);
  os_unfair_lock_unlock((os_unfair_lock_t)(v101 + 216));
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  id obj = (id)[a2 parsedPreviewSinkConfigurations];
  uint64_t v106 = [obj countByEnumeratingWithState:&v145 objects:v172 count:16];
  if (v106)
  {
    uint64_t v103 = *(void *)v146;
    do
    {
      for (uint64_t m = 0; m != v106; ++m)
      {
        if (*(void *)v146 != v103) {
          objc_enumerationMutation(obj);
        }
        long long v23 = *(void **)(*((void *)&v145 + 1) + 8 * m);
        long long v24 = objc_msgSend(v5, "previewSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
        int v25 = (void *)[MEMORY[0x1E4F1CA48] array];
        if ([v23 videoPreviewSinkConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration"));
        }
        if ([v23 videoThumbnailConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "videoThumbnailConnectionConfiguration"));
        }
        if ([v23 depthDataConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "depthDataConnectionConfiguration"));
        }
        if ([v23 previewTimeMachineConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "previewTimeMachineConnectionConfiguration"));
        }
        if ([v23 previewSmartStyleCoefficientsTimeMachineConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "previewSmartStyleCoefficientsTimeMachineConnectionConfiguration"));
        }
        if ([v23 sceneClassifierConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "sceneClassifierConnectionConfiguration"));
        }
        if ([v23 metadataObjectConnectionConfiguration]) {
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "metadataObjectConnectionConfiguration"));
        }
        long long v143 = 0u;
        long long v144 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        uint64_t v26 = [v25 countByEnumeratingWithState:&v141 objects:v171 count:16];
        if (v26)
        {
          uint64_t v27 = v26;
          char v28 = 0;
          uint64_t v29 = *(void *)v142;
          do
          {
            for (uint64_t n = 0; n != v27; ++n)
            {
              if (*(void *)v142 != v29) {
                objc_enumerationMutation(v25);
              }
              int v31 = *(void **)(*((void *)&v141 + 1) + 8 * n);
              char v32 = [v31 enabled];
              if (objc_msgSend((id)objc_msgSend(v31, "sinkConfiguration"), "sinkType") == 14)
              {
                unsigned int v33 = objc_msgSend((id)objc_msgSend(v31, "sinkConfiguration"), "subType");
                if (v33 <= 3 && v33 != 2) {
                  [v31 enabled];
                }
              }
              v28 |= v32;
            }
            uint64_t v27 = [v25 countByEnumeratingWithState:&v141 objects:v171 count:16];
          }
          while (v27);
        }
        else
        {
          char v28 = 0;
        }
        [v24 setDiscardsSampleData:(v28 & 1) == 0];
        BOOL v35 = (void *)[v23 videoPreviewSinkConnectionConfiguration];
        if (v35)
        {
          uint64_t v36 = v35;
          int v37 = [v35 enabled];
          if (v105) {
            int v38 = 1;
          }
          else {
            int v38 = v37;
          }
          [v24 setDiscardsImageQueueSampleData:v38 ^ 1u];
          objc_msgSend(v24, "setPreviewSinkEnabled:", objc_msgSend(v36, "enabled"));
          [v24 setPreviewTapRegistered:v105 != 0];
        }
        id v5 = v108;
      }
      uint64_t v106 = [obj countByEnumeratingWithState:&v145 objects:v172 count:16];
    }
    while (v106);
  }
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  uint64_t v39 = (void *)[v102 parsedMetadataSinkConfigurations];
  uint64_t v40 = [v39 countByEnumeratingWithState:&v137 objects:v170 count:16];
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)v138;
    do
    {
      for (iuint64_t i = 0; ii != v41; ++ii)
      {
        if (*(void *)v138 != v42) {
          objc_enumerationMutation(v39);
        }
        uint64_t v44 = (void *)[*(id *)(*((void *)&v137 + 1) + 8 * ii) metadataObjectConnectionConfiguration];
        uint64_t v45 = objc_msgSend(v5, "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v44, "sinkConfiguration"), "sinkID"));
        if (FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v44)) {
          -[FigCaptureMetadataSinkPipeline setDiscardsMRCSampleData:](v45, [v44 enabled] ^ 1);
        }
        if (FigCaptureMetadataObjectConfigurationRequiresFaceDetection(v44)) {
          -[FigCaptureMetadataSinkPipeline setDiscardsFaceDetectionSampleData:](v45, [v44 enabled] ^ 1);
        }
        if (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v44)) {
          -[FigCaptureMetadataSinkPipeline setDiscardsFaceTrackingSampleData:](v45, [v44 enabled] ^ 1);
        }
      }
      uint64_t v41 = [v39 countByEnumeratingWithState:&v137 objects:v170 count:16];
    }
    while (v41);
  }
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  uint64_t v46 = (void *)[v102 videoThumbnailSinkConfigurations];
  uint64_t v47 = [v46 countByEnumeratingWithState:&v133 objects:v169 count:16];
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t v49 = *(void *)v134;
    do
    {
      for (juint64_t j = 0; jj != v48; ++jj)
      {
        if (*(void *)v134 != v49) {
          objc_enumerationMutation(v46);
        }
        objc_msgSend((id)objc_msgSend(v5, "videoThumbnailSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v133 + 1) + 8 * jj), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((void *)&v133 + 1) + 8 * jj), "enabled") ^ 1);
      }
      uint64_t v48 = [v46 countByEnumeratingWithState:&v133 objects:v169 count:16];
    }
    while (v48);
  }
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  uint64_t v51 = (void *)[v102 parsedVisionDataSinkConfigurations];
  uint64_t v52 = [v51 countByEnumeratingWithState:&v129 objects:v168 count:16];
  if (v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = *(void *)v130;
    do
    {
      for (kuint64_t k = 0; kk != v53; ++kk)
      {
        if (*(void *)v130 != v54) {
          objc_enumerationMutation(v51);
        }
        objc_msgSend((id)objc_msgSend(v5, "visionDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v129 + 1) + 8 * kk), "visionDataConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v129 + 1) + 8 * kk), "visionDataConnectionConfiguration"), "enabled") ^ 1);
      }
      uint64_t v53 = [v51 countByEnumeratingWithState:&v129 objects:v168 count:16];
    }
    while (v53);
  }
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  id v56 = (void *)[v102 pointCloudDataSinkConnectionConfigurations];
  uint64_t v57 = [v56 countByEnumeratingWithState:&v125 objects:v167 count:16];
  if (v57)
  {
    uint64_t v58 = v57;
    uint64_t v59 = *(void *)v126;
    do
    {
      for (uint64_t mm = 0; mm != v58; ++mm)
      {
        if (*(void *)v126 != v59) {
          objc_enumerationMutation(v56);
        }
        objc_msgSend((id)objc_msgSend(v5, "pointCloudDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v125 + 1) + 8 * mm), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((void *)&v125 + 1) + 8 * mm), "enabled") ^ 1);
      }
      uint64_t v58 = [v56 countByEnumeratingWithState:&v125 objects:v167 count:16];
    }
    while (v58);
  }
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v61 = (void *)[v102 cameraCalibrationDataSinkConnectionConfigurations];
  uint64_t v62 = [v61 countByEnumeratingWithState:&v121 objects:v166 count:16];
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = *(void *)v122;
    do
    {
      for (nuint64_t n = 0; nn != v63; ++nn)
      {
        if (*(void *)v122 != v64) {
          objc_enumerationMutation(v61);
        }
        objc_msgSend((id)objc_msgSend(v5, "cameraCalibrationDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v121 + 1) + 8 * nn), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((void *)&v121 + 1) + 8 * nn), "enabled") ^ 1);
      }
      uint64_t v63 = [v61 countByEnumeratingWithState:&v121 objects:v166 count:16];
    }
    while (v63);
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  id v98 = (id)[v102 parsedCameraSourceConfigurations];
  uint64_t result = [v98 countByEnumeratingWithState:&v117 objects:v165 count:16];
  uint64_t v104 = result;
  if (result)
  {
    uint64_t v67 = *(void *)v118;
    uint64_t v97 = *(void *)v118;
    do
    {
      uint64_t v68 = 0;
      do
      {
        if (*(void *)v118 != v67) {
          objc_enumerationMutation(v98);
        }
        uint64_t v107 = v68;
        unint64_t v69 = *(void **)(*((void *)&v117 + 1) + 8 * v68);
        uint64_t v70 = objc_msgSend(v5, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v69, "cameraConfiguration"), "sourceID"));
        if ([v102 isMultiCamSession])
        {
          double v71 = (void *)[MEMORY[0x1E4F1CA48] array];
          if ([v69 videoPreviewSinkConnectionConfiguration]) {
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "videoPreviewSinkConnectionConfiguration"));
          }
          if ([v69 previewDerivedConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "previewDerivedConnectionConfigurations"));
          }
          if ([v69 videoCaptureConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "videoCaptureConnectionConfigurations"));
          }
          if ([v69 videoDataConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "videoDataConnectionConfigurations"));
          }
          if ([v69 stillImageConnectionConfiguration]) {
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "stillImageConnectionConfiguration"));
          }
          if ([v69 depthDataConnectionConfiguration]) {
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "depthDataConnectionConfiguration"));
          }
          if ([v69 visionDataConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "visionDataConnectionConfigurations"));
          }
          if ([v69 metadataObjectConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "metadataObjectConnectionConfigurations"));
          }
          if ([v69 movieFileDetectedObjectMetadataConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "movieFileDetectedObjectMetadataConnectionConfigurations"));
          }
          id obja = (id)v70;
          if ([v69 cameraCalibrationDataConnectionConfigurations]) {
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "cameraCalibrationDataConnectionConfigurations"));
          }
          float v72 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          uint64_t v73 = [v71 countByEnumeratingWithState:&v113 objects:v164 count:16];
          if (v73)
          {
            uint64_t v74 = v73;
            uint64_t v75 = *(void *)v114;
            do
            {
              for (uint64_t i1 = 0; i1 != v74; ++i1)
              {
                if (*(void *)v114 != v75) {
                  objc_enumerationMutation(v71);
                }
                double v77 = *(void **)(*((void *)&v113 + 1) + 8 * i1);
                if (objc_msgSend((id)objc_msgSend(v77, "sinkConfiguration"), "sinkType") != 14)
                {
                  uint64_t v78 = [v77 underlyingDeviceType];
                  if (objc_msgSend(v72, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v78)))
                  {
                    int v79 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v78)), "BOOLValue");
                  }
                  else
                  {
                    int v79 = 1;
                  }
                  int v80 = [v77 enabled];
                  uint64_t v81 = [NSNumber numberWithBool:v79 & (v80 ^ 1u)];
                  objc_msgSend(v72, "setObject:forKeyedSubscript:", v81, objc_msgSend(NSNumber, "numberWithInt:", v78));
                }
              }
              uint64_t v74 = [v71 countByEnumeratingWithState:&v113 objects:v164 count:16];
            }
            while (v74);
          }
          -[FigCaptureCameraSourcePipeline setStreamsSuspendedBySourceDeviceType:]((uint64_t)obja, v72);
          id v5 = v108;
          uint64_t v67 = v97;
        }
        uint64_t v82 = objc_msgSend(*(id *)(v101 + 656), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(v69, "cameraConfiguration"), "sourceID"));
        if (v82) {
          float v83 = *(void **)(v82 + 16);
        }
        else {
          float v83 = 0;
        }
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        float v84 = (void *)[v69 visionDataConnectionConfigurations];
        uint64_t v85 = [v84 countByEnumeratingWithState:&v109 objects:v163 count:16];
        if (v85)
        {
          uint64_t v86 = v85;
          uint64_t v87 = *(void *)v110;
          do
          {
            for (uint64_t i2 = 0; i2 != v86; ++i2)
            {
              if (*(void *)v110 != v87) {
                objc_enumerationMutation(v84);
              }
              float v89 = *(void **)(*((void *)&v109 + 1) + 8 * i2);
              int v90 = (void *)[v83 captureStream];
              if ([v83 isBravoVariant])
              {
                int v91 = [v89 underlyingDeviceType];
                if (v91 == 3)
                {
                  uint64_t v92 = [v83 bravoTelephotoCaptureStream];
                }
                else
                {
                  if (v91 != 7) {
                    goto LABEL_160;
                  }
                  uint64_t v92 = [v83 bravoSuperWideCaptureStream];
                }
                int v90 = (void *)v92;
              }
LABEL_160:
              objc_msgSend(v90, "setVisionDataSuspended:", objc_msgSend(v89, "enabled") ^ 1);
            }
            uint64_t v86 = [v84 countByEnumeratingWithState:&v109 objects:v163 count:16];
          }
          while (v86);
        }
        [v83 setZoomPIPSuspended:v105 != 0];
        uint64_t v68 = v107 + 1;
      }
      while (v107 + 1 != v104);
      uint64_t result = [v98 countByEnumeratingWithState:&v117 objects:v165 count:16];
      uint64_t v104 = result;
    }
    while (result);
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresFaceDetection(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F1F138];
  return [v1 containsObject:v2];
}

FigCaptureMovieFileSinkPipelineConfiguration *captureSession_createMovieFileSinkPipelineConfigurationFromParsedConfiguration(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8, char a9, char a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = objc_alloc_init(FigCaptureMovieFileSinkPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v18, (char *)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v18, (char *)[a2 videoConnectionConfiguration]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v18, (char *)[a2 audioConnectionConfiguration]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v18, (char *)[a2 depthDataConnectionConfiguration]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v18, (char *)[a2 detectedObjectMetadataConnectionConfigurations]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v18, (char *)[a2 cameraDebugInfoMetadataConnectionConfiguration]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setStillImageConnectionConfiguration:](v18, (char *)[a2 stillImageConnectionConfiguration]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setSceneClassifierConnectionConfiguration:](v18, (char *)[a2 sceneClassifierConnectionConfiguration]);
  [(FigCaptureMovieFileSinkPipelineConfiguration *)(uint64_t)v18 setVideoSourceCaptureTransform:a5];
  unint64_t v19 = -[FigCaptureCameraSourcePipeline videoCaptureDimensionsWithoutOverscan]((uint64_t)a3);
  char v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  if ([(id)-[FigCaptureMovieFileSinkPipelineConfiguration audioConnectionConfiguration]((uint64_t)v18) audioCaptureMode] == 2)char v21 = (v20 | a9) ^ 1; {
  else
  }
    char v21 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v18, v21);
  int v22 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "dimensions");
  int v23 = [(id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18) videoStabilizationStrength];
  if ([(id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18) cinematicFramingEnabled])
  {
    unint64_t v24 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "cinematicFramingOutputDimensions");
LABEL_6:
    LODWORD(v19) = v24;
    uint64_t v25 = HIDWORD(v24);
    goto LABEL_9;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisVISEnabled"))
  {
    uint64_t v25 = HIDWORD(v19);
    if (v22 < 3840 || v23 < 3) {
      goto LABEL_9;
    }
    unint64_t v24 = cs_actionCamera2p8kOutputDimensions(v23);
    goto LABEL_6;
  }
  LODWORD(v19) = objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "outputWidth");
  uint64_t v25 = objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "outputHeight");
LABEL_9:
  -[FigCaptureMovieFileSinkPipelineConfiguration setVisOutputDimensions:]((uint64_t)v18, v19 | (unint64_t)(v25 << 32));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationType:]((uint64_t)v18, a6);
  char v26 = +[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, a6);
  -[FigCaptureMovieFileSinkPipelineConfiguration setBoxedMetadataPostVISEnabled:]((uint64_t)v18, v26);
  -[FigCaptureMovieFileSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v18, a8);
  unint64_t v27 = BWInferenceSmartCameraCurrentVersion();
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartCameraPipelineVersion:]((uint64_t)v18, v27 & 0xFFFFFFFFFFFFLL);
  if (a6) {
    BOOL v28 = *(unsigned char *)(DerivedStorage + 696) == 0;
  }
  else {
    BOOL v28 = 1;
  }
  char v29 = !v28;
  -[FigCaptureMovieFileSinkPipelineConfiguration setOfflineVISEnabled:]((uint64_t)v18, v29);
  PortTypesWithGDCInVIS = (char *)cs_getPortTypesWithGDCInVIS(a3);
  -[FigCaptureMovieFileSinkPipelineConfiguration setPortTypesWithGeometricDistortionCorrectionInVISEnabled:](v18, PortTypesWithGDCInVIS);
  char isIrisMovieVitalityScoringEnabled = cs_isIrisMovieVitalityScoringEnabled(objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v18, isIrisMovieVitalityScoringEnabled);
  char v32 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  char shouldEnableOverCapture = cs_shouldEnableOverCapture(v32);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v18, shouldEnableOverCapture);
  if (-[FigCaptureMovieFileSinkPipelineConfiguration captureDeviceHasOverCaptureEnabled]((BOOL)v18)) {
    char v34 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "spatialOverCaptureEnabled");
  }
  else {
    char v34 = 0;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v18, v34);
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"), "depthDataDeliveryEnabled"))char v35 = -[FigCaptureCameraSourcePipeline depthType]((uint64_t)a3) != 0; {
  else
  }
    char v35 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataDeliveryEnabled:]((uint64_t)v18, v35);
  -[FigCaptureMovieFileSinkPipelineConfiguration setFrameReconstructionEnabled:]((uint64_t)v18, 1);
  -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v18, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "semanticStyleRenderingEnabled"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleRenderingEnabled:]((uint64_t)v18, a7);
  if (-[FigCaptureMovieFileSinkPipelineConfiguration smartStyleRenderingEnabled]((BOOL)v18)) {
    char v36 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  }
  else {
    char v36 = 0;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleReversibilityEnabled:]((uint64_t)v18, v36);
  int v37 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  if ([v37 cinematicFramingEnabled])
  {
    int v38 = 2;
  }
  else if ([v37 manualCinematicFramingEnabled])
  {
    int v38 = 2;
  }
  else
  {
    int v38 = 1;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleRenderingMethod:]((uint64_t)v18, v38);
  -[FigCaptureMovieFileSinkPipelineConfiguration setIspFastSwitchEnabled:]((uint64_t)v18, a10);
  -[FigCaptureMovieFileSinkPipelineConfiguration setTrueVideoCaptureEnabled:]((uint64_t)v18, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"));
  uint64_t v39 = *(void **)(DerivedStorage + 736);
  if (v39) {
    -[FigCaptureMovieFileSinkPipelineConfiguration setVisProcessingSemaphore:](v18, v39);
  }
  uint64_t v40 = (void *)[a2 videoConnectionConfiguration];
  char v44 = v40
     && (uint64_t v41 = v40, v42 = (void *)[v40 sourceConfiguration], (int)FigCapturePlatformIdentifier() >= 11)
     && (int)objc_msgSend((id)objc_msgSend(v42, "requiredFormat"), "dimensions") >= 3840
     && ([v42 requiredMaxFrameRate], v43 >= 60.0)
     && [v41 videoStabilizationType] == 4;
  -[FigCaptureMovieFileSinkPipelineConfiguration setLowResImageUsedByVideoEncoderEnabled:]((uint64_t)v18, v44);
  -[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  int v45 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled");
  float v46 = 0.1;
  if (!v45) {
    float v46 = 0.0;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationOverscanOverride:]((uint64_t)v18, v46);
  int v47 = [(id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18) videoStabilizationStrength];
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationStrength:]((uint64_t)v18, v47);
  -[FigCaptureMovieFileSinkPipelineConfiguration setClientApplicationID:](v18, *(char **)(DerivedStorage + 88));
  if ([a2 videoConnectionConfiguration]) {
    -[FigCaptureMovieFileSinkPipelineConfiguration setMaxLossyCompressionLevel:]((uint64_t)v18, +[FigCaptureCameraParameters movieFileMaxLossyCompressionLevelForPixelFormat:](FigCaptureCameraParameters, "movieFileMaxLossyCompressionLevelForPixelFormat:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"), "requiredFormat"), "format")));
  }
  if (-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18))
  {
    int v48 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "format");
    int v49 = FigCapturePixelFormatIs422(v48);
    uint64_t v50 = 419430400;
    if (v49 && v22 >= 3840)
    {
      [(id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18) requiredMaxFrameRate];
      if (v51 <= 60.0)
      {
        [(id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18) requiredMaxFrameRate];
        if (v52 <= 30.0) {
          uint64_t v50 = 419430400;
        }
        else {
          uint64_t v50 = 524288000;
        }
      }
      else
      {
        uint64_t v50 = 629145600;
      }
    }
    -[FigCaptureMovieFileSinkPipelineConfiguration setMaximumAllowedInFlightCompressedBytes:]((uint64_t)v18, v50);
  }
  uint64_t v53 = objc_msgSend(*(id *)(DerivedStorage + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(a3, "sourceID"));
  if (v53)
  {
    uint64_t v54 = -[FigCaptureCinematographyPipeline depthOutputDimensions](v53);
    -[FigCaptureMovieFileSinkPipelineConfiguration setDepthOutputDimensions:]((uint64_t)v18, v54);
  }
  return v18;
}

unint64_t BWInferenceSmartCameraCurrentVersion()
{
  if (BWInferenceSmartCameraCurrentVersion_onceToken != -1) {
    dispatch_once(&BWInferenceSmartCameraCurrentVersion_onceToken, &__block_literal_global_7);
  }
  return BWInferenceSmartCameraCurrentVersion_version | ((unint64_t)(unsigned __int16)word_1EB4C5E14 << 32);
}

FigCaptureDepthDataPipelineConfiguration *captureSession_createDepthDataPipelineConfiguration(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  int v22 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (void *)[a2 depthDataConnectionConfiguration];
  uint64_t v10 = (void *)[a2 metadataObjectConnectionConfiguration];
  uint64_t v11 = (void *)[a2 videoDataConnectionConfiguration];
  long long v12 = (void *)[v9 sourceConfiguration];
  if (!v12)
  {
    long long v12 = (void *)[v11 sourceConfiguration];
    if (!v12) {
      long long v12 = (void *)[v10 sourceConfiguration];
    }
  }
  char v13 = FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v10);
  uint64_t v14 = +[BWPipelineStage pipelineStageWithName:priority:](BWPipelineStage, "pipelineStageWithName:priority:", FigCaptureBuildPipelineStageName(@"com.apple.coremedia.capture.depthdata", (void *)[v9 sourceConfiguration]), 13);
  uint64_t v15 = objc_alloc_init(FigCaptureDepthDataPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v15, (char *)v9);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v15, (char *)v11);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v15, (char *)v10);
  -[FigCaptureMetadataSinkPipelineConfiguration setMrcLowPowerModeEnabled:]((uint64_t)v15, a5);
  -[FigCaptureDepthDataPipelineConfiguration setVideoAndConvertedDepthDataOutputEnabled:]((uint64_t)v15, v13);
  -[FigCaptureDepthDataPipelineConfiguration setDepthDataBaseRotationDegrees:]((uint64_t)v15, [a3 depthDataBaseRotation]);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v15, (char *)v14);
  long long v16 = *(_OWORD *)(DerivedStorage + 36);
  v21[0] = *(_OWORD *)(DerivedStorage + 20);
  v21[1] = v16;
  double v17 = (char *)objc_msgSend(a3, "cameraInfoByPortType", -[FigCaptureDepthDataPipelineConfiguration setClientAuditToken:]((uint64_t)v15, (uint64_t)v21).n128_f64[0]);
  -[FigCaptureDepthDataPipelineConfiguration setCameraInfoByPortType:](v15, v17);
  -[FigCaptureDepthDataPipelineConfiguration setRequiredFormat:](v15, (char *)[v12 requiredFormat]);
  -[FigCaptureMetadataSinkPipelineConfiguration setUseSceneClassifierToGateMetadataDetection:]((uint64_t)v15, a4);
  int v18 = FigVideoCaptureSourcePearlModuleType([v12 source], &v22);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationType:]((uint64_t)v15, v18);
  if (v22)
  {
    FigDebugAssert3();
    if (v22) {
      return 0;
    }
  }
  return v15;
}

void sub_1A590A4C8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void flatDictionary_finalize(uint64_t a1)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 24) + 16), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    FigFlatDictionaryContentDestroy(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
}

void FigFlatDictionaryContentDestroy(void *a1)
{
  CFAllocatorRef v3 = *(const __CFAllocator **)a1;
  uint64_t v2 = (const void *)*((void *)a1 + 1);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorDeallocate(v3, *((void **)a1 + 3));
  CFAllocatorDeallocate(v3, a1);
}

CFDictionaryRef setPropertiesOnStream()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef result = (const __CFDictionary *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 72));
  if (result)
  {
    CFDictionaryRef v2 = result;
    CFAllocatorRef v3 = (const void *)*MEMORY[0x1E4F54858];
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F54760];
    CFTypeRef v26 = (CFTypeRef)*MEMORY[0x1E4F54780];
    CFTypeRef v24 = (CFTypeRef)*MEMORY[0x1E4F54B30];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeRef v22 = (CFTypeRef)*MEMORY[0x1E4F547C8];
    CFTypeRef v23 = (CFTypeRef)*MEMORY[0x1E4F549A8];
    do
    {
      CFArrayRef Value = CFDictionaryGetValue(v2, @"propertyKey");
      id v5 = CFDictionaryGetValue(v2, @"propertyValue");
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(v6 + 32), "supportedProperties"), "objectForKeyedSubscript:", Value);
      uint64_t v8 = 32;
      if (!v7) {
        uint64_t v8 = 8;
      }
      int v9 = [*(id *)(v6 + v8) setProperty:Value value:v5];
      if (!v9) {
        goto LABEL_13;
      }
      int v10 = v9;
      if (CFEqual(Value, v3))
      {
        uint64_t v11 = (atomic_uint *)(DerivedStorage + 6340);
      }
      else if (CFEqual(Value, cf2))
      {
        uint64_t v11 = (atomic_uint *)(DerivedStorage + 7460);
      }
      else
      {
        if (!CFEqual(Value, v26))
        {
          if (!CFEqual(Value, @"AutoFocusNow") && !CFEqual(Value, v24))
          {
            if (!CFEqual(Value, v23)) {
              CFEqual(Value, v22);
            }
            goto LABEL_13;
          }
          Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          char v13 = Mutable;
          int v14 = *(_DWORD *)(DerivedStorage + 84);
          if (v14 == 1)
          {
            uint64_t v15 = @"FixedFocusPoints";
LABEL_21:
            CFDictionaryAddValue(Mutable, @"FocusMode", v15);
          }
          else if (v14 == 5)
          {
            uint64_t v15 = @"FocusAtPoint";
            goto LABEL_21;
          }
          int v16 = *(_DWORD *)(DerivedStorage + 7656);
          BOOL v17 = __OFSUB__(v16, 1);
          int v18 = v16 - 1;
          if (v18 < 0 == v17)
          {
            *(_DWORD *)(DerivedStorage + 7656) = v18;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          if (v13) {
            CFRelease(v13);
          }
          if (v10 == -12688)
          {
            memset_pattern16((void *)(DerivedStorage + 7704), &unk_1A5F0C470, 0x80uLL);
            uint64_t v19 = 0;
            char v20 = (_OWORD *)(DerivedStorage + 7832);
            *(void *)&long long v21 = 0x100000001;
            *((void *)&v21 + 1) = 0x100000001;
            do
            {
              *char v20 = 0uLL;
              v20[1] = 0uLL;
              v20 += 2;
              *(_OWORD *)(DerivedStorage + 7960 + v19) = v21;
              v19 += 16;
            }
            while (v19 != 64);
            *(void *)(DerivedStorage + 6232) = 1;
            *(void *)(DerivedStorage + 624_Block_object_dispose(&STACK[0x4E0], 8) = 1;
          }
          *(unsigned char *)(DerivedStorage + 81) = 0;
          FigMemoryBarrier();
          goto LABEL_13;
        }
        uint64_t v11 = (atomic_uint *)(DerivedStorage + 7604);
      }
      atomic_fetch_add_explicit(v11, 1u, memory_order_relaxed);
LABEL_13:
      CFRelease(v2);
      CFDictionaryRef result = (const __CFDictionary *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 72));
      CFDictionaryRef v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t BWCaptureIsRunningInMacCatalystEnvironment()
{
  if (BWCaptureIsRunningInMacCatalystEnvironment_once != -1) {
    dispatch_once(&BWCaptureIsRunningInMacCatalystEnvironment_once, &__block_literal_global_2);
  }
  return BWCaptureIsRunningInMacCatalystEnvironment_isCatalystApp;
}

uint64_t BWCaptureIsRunningInIOSAppOnMacEnvironment()
{
  if (BWCaptureIsRunningInIOSAppOnMacEnvironment_onceToken != -1) {
    dispatch_once(&BWCaptureIsRunningInIOSAppOnMacEnvironment_onceToken, &__block_literal_global_37);
  }
  return BWCaptureIsRunningInIOSAppOnMacEnvironment_isIOSAppOnMac;
}

uint64_t cs_streamingDepthDataType(void *a1)
{
  unsigned int v1 = cs_stillImageDepthDataType(a1) - 1;
  if (v1 > 8) {
    return 0;
  }
  else {
    return dword_1A5F0C568[v1];
  }
}

uint64_t cs_stillImageDepthDataType(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v7 = 0;
  uint64_t v1 = [a1 source];
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  uint64_t v4 = *(unsigned int (**)(uint64_t, __CFString *, void, id *))(v3 + 48);
  if (!v4 || v4(v1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v7)) {
    return 0;
  }
  uint64_t v5 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", @"StillImageDepthDataType"), "intValue");

  return v5;
}

void __flashlight_videoDeviceAvailabilityListener_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) retainReferencedObject];
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t v4 = pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 48) + 80));
    uint64_t v5 = (void *)MEMORY[0x1A6272C70](v4);
    uint64_t v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "userInfo"), "objectForKeyedSubscript:", 0x1EFA5DB80), "BOOLValue");
    int v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "userInfo"), "objectForKeyedSubscript:", 0x1EFA5DBC0), "BOOLValue");
    int v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "userInfo"), "objectForKeyedSubscript:", 0x1EFA5DBA0), "BOOLValue");
    if (v7)
    {
      if (*(void *)(*(void *)(a1 + 48) + 72) == 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v6;
      }
    }
    if (dword_1E96B6928)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v11 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 56), "invalidated", v17, v19);
    if (v11 && dword_1E96B6928)
    {
      long long v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (((v6 | v11) & 1) == 0)
    {
      if (objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(void *)(*(void *)(a1 + 48) + 56)))
      {
        if (dword_1E96B6928)
        {
LABEL_16:
          char v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          uint64_t v6 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_29;
        }
LABEL_24:
        flashlight_postNotificationWithPayload(v3, @"FlashlightAvailable", objc_msgSend(NSNumber, "numberWithBool:", 1, v18, v20));
LABEL_33:
        pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(a1 + 48) + 80));
        CFRelease(v3);
        return;
      }
      if (dword_1E96B6928)
      {
        int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v6 = 0;
    }
    if (((v11 | v6 | v8) & 1) == 0)
    {
      if (*(void *)(*(void *)(a1 + 48) + 72) == 1)
      {
        if ((int)objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeClientPriority") <= 1)
        {
          if (dword_1E96B6928) {
            goto LABEL_16;
          }
          goto LABEL_24;
        }
        if (!dword_1E96B6928)
        {
          flashlight_postNotificationWithPayload(v3, @"FlashlightAvailable", (void *)[NSNumber numberWithBool:0]);
LABEL_32:
          flashlight_teardownDevice(v3, 1);
          goto LABEL_33;
        }
        uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v6 = 0;
    }
LABEL_29:
    if (dword_1E96B6928)
    {
      int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    flashlight_postNotificationWithPayload(v3, @"FlashlightAvailable", objc_msgSend(NSNumber, "numberWithBool:", v6, v18, v20));
    if (v6) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (dword_1E96B6928)
  {
    int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t cs_shouldEnableOverCapture(void *a1)
{
  if ([a1 sourceType] != 1) {
    return 0;
  }
  unsigned int v2 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), @"DeviceType"), "intValue");
  BOOL v3 = v2 > 9 || ((1 << v2) & 0x310) == 0;
  if (v3
    || (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", @"AVCaptureSessionPresetPhoto") & 1) == 0&& !objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", @"AVCaptureSessionPresetHigh")|| objc_msgSend(a1, "imageControlMode") == 4)
  {
    return 0;
  }
  return [a1 spatialOverCaptureEnabled];
}

id cs_captureSourceGetAttribute(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v10 = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, id *))(v5 + 48);
  if (v6)
  {
    v6(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v10);
    id v7 = v10;
  }
  else
  {
    id v7 = 0;
  }
  id v8 = (id)[v7 objectForKeyedSubscript:a2];

  return v8;
}

uint64_t captureSourceServer_handleCopySourcesMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  int int64 = xpc_dictionary_get_int64(xdict, (const char *)*MEMORY[0x1E4F20290]);
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (!v5)
  {
    FigDebugAssert3();
    return 4294954510;
  }
  uint64_t v6 = v5;
  long long v83 = 0u;
  long long v84 = 0u;
  xpc_connection_get_audit_token();
  uint64_t v7 = a1;
  uint64_t v62 = v6;
  xpc_object_t xdicta = a3;
  if (FigCaptureSessionIsLaunchPrewarmingEnabled())
  {
    long long value = v83;
    long long v87 = v84;
    id v8 = (id)FigCaptureCopyClientCodeSigningIdentifier(&value);
    SupportedPrewarmingBundleIdentifiers = (void *)FigCaptureGetSupportedPrewarmingBundleIdentifiers();
    if (v8 && [SupportedPrewarmingBundleIdentifiers containsObject:v8])
    {
      uint64_t v60 = a1;
      pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
      id v10 = &off_1E96B6000;
      int v11 = (id *)&unk_1EB4C5000;
      long long v12 = (void *)[(id)sPrewarmingSourceList arrayByAddingObjectsFromArray:sSourceList];
      objc_msgSend(NSString, "stringWithFormat:", @"sSourceList(%d)", CFArrayGetCount((CFArrayRef)sSourceList));
      objc_msgSend(NSString, "stringWithFormat:", @"sPrewarmingSourceList(%d)", objc_msgSend((id)sPrewarmingSourceList, "count"));
      if ([v12 count])
      {
        CFArrayRef v13 = (const __CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v79 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        uint64_t v14 = [v12 countByEnumeratingWithState:&v79 objects:v89 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          id obj = v12;
          uint64_t v16 = *(void *)v80;
          uint64_t v17 = *MEMORY[0x1E4F1CF80];
          while (2)
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              if (*(void *)v80 != v16) {
                objc_enumerationMutation(obj);
              }
              uint64_t v19 = *(void *)(*((void *)&v79 + 1) + 8 * i);
              id v78 = 0;
              uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v20) {
                uint64_t v21 = v20;
              }
              else {
                uint64_t v21 = 0;
              }
              CFTypeRef v22 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v21 + 48);
              if (v22) {
                v22(v19, @"AttributesDictionary", v17, &v78);
              }
              int v23 = objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", @"SourceType"), "intValue");

              id v77 = 0;
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              CFTypeRef v26 = *(void (**)(uint64_t, uint64_t, uint64_t, id *))(v25 + 48);
              if (v26) {
                v26(v19, 0x1EFA6CB00, v17, &v77);
              }
              id v76 = 0;
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v27) {
                uint64_t v28 = v27;
              }
              else {
                uint64_t v28 = 0;
              }
              char v29 = *(void (**)(uint64_t, uint64_t, uint64_t, id *))(v28 + 48);
              if (v29) {
                v29(v19, 0x1EFA6CCA0, v17, &v76);
              }
              int v30 = [v76 BOOLValue];
              if ([(__CFString *)v8 isEqualToString:v77] && v30)
              {
                BOOL v31 = (int64 & 2) != 0 && v23 == 2;
                BOOL v32 = !v31;
                BOOL v33 = (int64 & 1) != 0 && v23 == 1;
                if (v33 || !v32)
                {
                  long long v74 = 0u;
                  long long v75 = 0u;
                  FigCaptureSourceGetClientAuditToken(v19, &v74);
                  long long value = v74;
                  long long v87 = v75;
                  if (FigCaptureAuditTokenIsValid((uint64_t)&value))
                  {
                    long long value = v83;
                    long long v87 = v84;
                    v88[0] = v74;
                    v88[1] = v75;
                    if (FigCaptureAuditTokensAreEqual(&value, v88))
                    {
                      uint64_t v6 = v62;
                      if (dword_1EB4C51D0)
                      {
                        int v73 = 0;
                        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      [(__CFArray *)v13 removeAllObjects];
                      int v34 = 0;
                      int v11 = (id *)&unk_1EB4C5000;
                      id v10 = &off_1E96B6000;
                      goto LABEL_98;
                    }
                  }
                  [(__CFArray *)v13 addObject:v19];
                }
              }
            }
            uint64_t v15 = [obj countByEnumeratingWithState:&v79 objects:v89 count:16];
            if (v15) {
              continue;
            }
            break;
          }
          int v34 = 1;
          int v11 = (id *)&unk_1EB4C5000;
          id v10 = &off_1E96B6000;
        }
        else
        {
          int v34 = 1;
        }
        uint64_t v6 = v62;
LABEL_98:
        if ([(__CFArray *)v13 count])
        {
          [v10[481] removeObjectsInArray:v13];
          [v11[372] removeObjectsInArray:v13];
        }
        else
        {

          CFArrayRef v13 = 0;
        }
      }
      else
      {
        CFArrayRef v13 = 0;
        int v34 = 1;
        uint64_t v6 = v62;
      }
      pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
      BOOL v35 = v34 != 0;
      uint64_t v7 = v60;
      if (v13) {
        goto LABEL_48;
      }
    }
    else
    {
      BOOL v35 = 0;
      uint64_t v6 = v62;
    }
  }
  else
  {
    FigCaptureGetSupportedPrewarmingBundleIdentifiers();
    BOOL v35 = 0;
  }
  long long value = v83;
  long long v87 = v84;
  CFArrayRef v13 = FigCaptureSourceCopySourcesForClientAuditToken(int64, &value, 0, 1);
  if (v13)
  {
LABEL_48:
    if (!pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
    {
      char v36 = (__CFArray *)sSourceList;
      v91.length = CFArrayGetCount(v13);
      v91.locatiouint64_t n = 0;
      CFArrayAppendArray(v36, v13, v91);
      pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
    }
    if (CFArrayGetCount(v13) >= 1)
    {
      CFIndex v37 = 0;
      uint64_t v61 = v7;
      while (1)
      {
        *(void *)&long long v74 = 0;
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v37);
        uint64_t v39 = (uint64_t)ValueAtIndex;
        if (v35)
        {
          long long value = v83;
          long long v87 = v84;
          FigCaptureSourceAttachToClient((uint64_t)ValueAtIndex, &value);
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = *(void (**)(uint64_t, uint64_t, void))(v41 + 56);
          if (v42) {
            v42(v39, 0x1EFA6CCA0, MEMORY[0x1E4F1CC38]);
          }
          if (!pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
          {
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            float v43 = (void *)[(id)sPrewarmingAssociatedSourcesByObjectID allKeys];
            uint64_t v44 = [v43 countByEnumeratingWithState:&v68 objects:v85 count:16];
            if (v44)
            {
              uint64_t v45 = *(void *)v69;
              while (2)
              {
                for (uint64_t j = 0; j != v44; ++j)
                {
                  if (*(void *)v69 != v45) {
                    objc_enumerationMutation(v43);
                  }
                  int v47 = *(void **)(*((void *)&v68 + 1) + 8 * j);
                  if ([(id)sPrewarmingAssociatedSourcesByObjectID objectForKeyedSubscript:v47] == v39)
                  {
                    id v48 = (id)[(id)sPrewarmingAssociatedConnectionsByObjectID objectForKeyedSubscript:v47];
                    uint64_t v44 = [v47 unsignedIntegerValue];
                    goto LABEL_69;
                  }
                }
                uint64_t v44 = [v43 countByEnumeratingWithState:&v68 objects:v85 count:16];
                if (v44) {
                  continue;
                }
                break;
              }
              id v48 = 0;
LABEL_69:
              uint64_t v7 = v61;
              uint64_t v6 = v62;
            }
            else
            {
              id v48 = 0;
            }
            pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
            if (v44) {
              BOOL v49 = v48 == 0;
            }
            else {
              BOOL v49 = 1;
            }
            if (!v49) {
              FigXPCServerDisassociateObjectWithConnection();
            }
          }
        }
        uint64_t v50 = malloc_type_calloc(0x10uLL, 1uLL, 0xAFC748C4uLL);
        *uint64_t v50 = v7;
        v50[1] = v39;
        uint64_t v51 = FigXPCServerAssociateObjectWithConnection();
        if (v51)
        {
          uint64_t v54 = v51;
          FigDebugAssert3();
          free(v50);
          goto LABEL_89;
        }
        *(void *)&long long value = 0;
        uint64_t v52 = captureSourceServer_createSerializedSource(v39, v74, &value);
        if (v52)
        {
          uint64_t v54 = v52;
          FigDebugAssert3();
          goto LABEL_89;
        }
        uint64_t v53 = (const void *)value;
        xpc_array_append_value(v6, (xpc_object_t)value);
        if (v35 && !pthread_mutex_lock((pthread_mutex_t *)sSourceListLock)) {
          break;
        }
        if (v53) {
          goto LABEL_81;
        }
LABEL_82:
        if (CFArrayGetCount(v13) <= ++v37) {
          goto LABEL_86;
        }
      }
      objc_msgSend((id)sPrewarmingAssociatedSourcesByObjectID, "setObject:forKeyedSubscript:", v39, objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", (void)v74));
      objc_msgSend((id)sPrewarmingAssociatedConnectionsByObjectID, "setObject:forKeyedSubscript:", v7, objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", (void)v74));
      pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
      if (!v53) {
        goto LABEL_82;
      }
LABEL_81:
      CFRelease(v53);
      goto LABEL_82;
    }
LABEL_86:
    xpc_dictionary_set_value(xdicta, (const char *)*MEMORY[0x1E4F202A8], v6);
    if (int64)
    {
      CFRetain(v13);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      long long v66 = v83;
      long long v67 = v84;
      block[2] = __captureSourceServer_handleCopySourcesMessage_block_invoke;
      block[3] = &__block_descriptor_72_e5_v8__0l;
      block[4] = v13;
      dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, block);
    }
    uint64_t v54 = 0;
LABEL_89:
    CFRelease(v13);
    goto LABEL_90;
  }
  FigDebugAssert3();
  uint64_t v54 = 4294954513;
LABEL_90:
  CFRelease(v6);
  return v54;
}

uint64_t captureSource_CopyProperty(uint64_t a1, __CFString *a2, uint64_t a3, const void **a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unsigned int v59 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(a2, @"SourceToken"))
    {
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)v7);
LABEL_7:
      CFNumberRef v9 = v8;
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
    if (CFEqual(a2, @"ClientAuditToken"))
    {
      CFNumberRef v8 = (CFNumberRef)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v7 + 16 length:32];
      goto LABEL_7;
    }
    if (CFEqual(a2, @"PrewarmingEnabled"))
    {
      int v11 = *(unsigned __int8 *)(v7 + 240);
      goto LABEL_10;
    }
    if (CFEqual(a2, @"IsProxy"))
    {
      long long v12 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_15:
      CFArrayRef v13 = *v12;
      *a4 = *v12;
      CFRetain(v13);
      return 0;
    }
    if (CFEqual(a2, @"HasProxy"))
    {
      int v11 = *(unsigned __int8 *)(v7 + 241);
LABEL_10:
      if (v11) {
        long long v12 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        long long v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_15;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 48));
    if (*(unsigned char *)(v7 + 12))
    {
      FigDebugAssert3();
      unsigned int v59 = FigSignalErrorAt();
      goto LABEL_25;
    }
    uint64_t v14 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
    if (CFEqual(a2, @"AttributesDictionary"))
    {
      uint64_t v15 = *(void **)(v7 + 104);
LABEL_23:
      id DictionaryRepresentation = v15;
LABEL_24:
      *a4 = DictionaryRepresentation;
LABEL_25:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
      return v59;
    }
    if (CFEqual(a2, @"WhiteBalanceCalibrations"))
    {
      uint64_t v15 = *(void **)(v7 + 136);
      goto LABEL_23;
    }
    if (CFEqual(a2, @"ISPChromaNoiseReductionForPairingDisabled_FigCaptureSessionOnly"))
    {
      id DictionaryRepresentation = (id)[*(id *)(v7 + 104) objectForKeyedSubscript:0x1EFA6BBA0];
      if (!DictionaryRepresentation) {
        goto LABEL_24;
      }
LABEL_28:
      id DictionaryRepresentation = (id)CFRetain(DictionaryRepresentation);
      goto LABEL_24;
    }
    if (CFEqual(a2, @"LockedForConfiguration"))
    {
      if (*(uint64_t *)(v7 + 64) <= 0) {
        uint64_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      else {
        uint64_t v17 = (const void **)MEMORY[0x1E4F1CFD0];
      }
LABEL_60:
      uint64_t v25 = *v17;
      *a4 = *v17;
      CFRetain(v25);
      goto LABEL_25;
    }
    if (CFEqual(a2, @"LensPosition"))
    {
      uint64_t v18 = *(void **)(v7 + 80);
      if (v18 && ([v18 isPropertyObserved:0x1EFA5A140] & 1) == 0)
      {
        [*(id *)(v7 + 80) lensPosition];
LABEL_40:
        CFDictionaryRef v19 = (const __CFDictionary *)objc_msgSend(NSNumber, "numberWithFloat:");
LABEL_47:
        [*(id *)(v7 + 176) setObject:v19 forKeyedSubscript:a2];
      }
    }
    else
    {
      if (CFEqual(a2, @"ExposureDuration"))
      {
        uint64_t v20 = *(void **)(v7 + 80);
        if (v20 && ([v20 isPropertyObserved:0x1EFA6C340] & 1) == 0)
        {
          long long v60 = 0uLL;
          *(void *)&long long v61 = 0;
          uint64_t v21 = *(void **)(v7 + 80);
          if (v21) {
            [v21 exposureDuration];
          }
          CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          *(_OWORD *)CMTime time = v60;
          *(void *)&time[16] = v61;
          CFDictionaryRef v19 = CMTimeCopyAsDictionary((CMTime *)time, v22);
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (CFEqual(a2, @"ISO"))
      {
        uint64_t v24 = *(void **)(v7 + 80);
        if (v24 && ([v24 isPropertyObserved:0x1EFA5A780] & 1) == 0)
        {
          [*(id *)(v7 + 80) ISO];
          goto LABEL_40;
        }
      }
      else
      {
        if (!CFEqual(a2, @"ExposureTargetOffset"))
        {
          if (CFEqual(a2, @"DeviceWhiteBalanceGains"))
          {
            char v29 = *(void **)(v7 + 80);
            if (!v29 || ([v29 isPropertyObserved:0x1EFA6C4A0] & 1) != 0) {
              goto LABEL_48;
            }
            [*(id *)(v7 + 80) deviceWhiteBalanceGains];
          }
          else
          {
            if (!CFEqual(a2, @"GrayWorldDeviceWhiteBalanceGains"))
            {
              if (CFEqual(a2, @"SceneClassificationConfidences"))
              {
                BOOL v35 = *(void **)(v7 + 80);
                if (v35)
                {
                  if (([v35 isPropertyObserved:0x1EFA6CEA0] & 1) == 0)
                  {
                    CFDictionaryRef v19 = (const __CFDictionary *)[*(id *)(v7 + 80) sceneClassificationConfidences];
                    goto LABEL_47;
                  }
                }
              }
              goto LABEL_48;
            }
            int v34 = *(void **)(v7 + 80);
            if (!v34 || ([v34 isPropertyObserved:0x1EFA6C4C0] & 1) != 0) {
              goto LABEL_48;
            }
            [*(id *)(v7 + 80) grayWorldDeviceWhiteBalanceGains];
          }
          *(void *)&long long v60 = __PAIR64__(v31, v30);
          DWORD2(v60) = v32;
          CFDictionaryRef v19 = (const __CFDictionary *)[MEMORY[0x1E4F1C9B8] dataWithBytes:&v60 length:12];
          goto LABEL_47;
        }
        CFTypeRef v26 = *(void **)(v7 + 80);
        if (v26 && ([v26 isPropertyObserved:0x1EFA6C400] & 1) == 0)
        {
          [*(id *)(v7 + 80) exposureTargetOffset];
          goto LABEL_40;
        }
      }
    }
LABEL_48:
    if (CFEqual(a2, @"FlashActive"))
    {
      int v23 = [*(id *)(v7 + 80) isFlashScene];
      goto LABEL_58;
    }
    if (CFEqual(a2, @"IsHDRScene"))
    {
      int v23 = [*(id *)(v7 + 80) isHDRScene];
      goto LABEL_58;
    }
    if (CFEqual(a2, @"IsStillImageStabilizationScene"))
    {
      int v23 = [*(id *)(v7 + 80) isSISScene];
LABEL_58:
      uint64_t v17 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v23) {
        uint64_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_60;
    }
    if (CFEqual(a2, @"DigitalFlashStatus"))
    {
      uint64_t v27 = NSNumber;
      uint64_t v28 = [*(id *)(v7 + 80) digitalFlashStatus];
LABEL_67:
      id DictionaryRepresentation = (id)[v27 numberWithInt:v28];
      goto LABEL_28;
    }
    if (CFEqual(a2, @"DigitalFlashExposureTimes"))
    {
      id v33 = (id)[*(id *)(v7 + 80) digitalFlashExposureTimes];
LABEL_82:
      id DictionaryRepresentation = v33;
      goto LABEL_24;
    }
    if (CFEqual(a2, @"AutoFocusPositionSensorCalibration"))
    {
      id v33 = -[FigCaptureCalibrationMonitor runAutoFocusPositionSensorCalibrationAndGetResultsForDeviceType:devicePosition:](+[FigCaptureCalibrationMonitor sharedInstance](FigCaptureCalibrationMonitor, "sharedInstance"), "runAutoFocusPositionSensorCalibrationAndGetResultsForDeviceType:devicePosition:", v14, objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", @"Position"), "intValue"));
      goto LABEL_82;
    }
    if (CFEqual(a2, @"CameraPoseMatrix"))
    {
      if (v14 <= 0xD && ((1 << v14) & 0x3350) != 0) {
        goto LABEL_25;
      }
      uint64_t v36 = [*(id *)(v7 + 104) objectForKeyedSubscript:@"CaptureDeviceID"];
      if (!v36) {
        goto LABEL_25;
      }
      uint64_t v37 = v36;
      uint64_t v38 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", @"Position"), "intValue");
      objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "prewarmDefaultVideoDeviceForPID:completionHandler:", getpid(), 0);
      uint64_t v39 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "cameraPoseMatrixForStreamWithPosition:deviceType:deviceID:", v38, v14, v37);
      if ([v39 length] == 48)
      {
        [v39 getBytes:time length:48];
        long long v60 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        DWORD2(v60) = v65;
        DWORD2(v61) = v66;
        *(void *)&long long v60 = vzip1q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
        *(void *)&long long v61 = vtrn2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
        DWORD2(v62) = v67;
        DWORD2(v63) = v68;
        *(void *)&long long v62 = vzip1q_s32(vdupq_laneq_s32(*(int32x4_t *)time, 2), vdupq_laneq_s32(*(int32x4_t *)&time[16], 2)).u64[0];
        *(void *)&long long v63 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]), *(int32x4_t *)time).u64[0];
        id DictionaryRepresentation = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v60 length:64];
        goto LABEL_24;
      }
      if (!v39) {
        goto LABEL_25;
      }
      int v40 = -12783;
LABEL_101:
      unsigned int v59 = v40;
      goto LABEL_25;
    }
    if (CFEqual(a2, @"OverheadCameraMode"))
    {
      uint64_t v27 = NSNumber;
      uint64_t v28 = [*(id *)(v7 + 80) overheadCameraMode];
      goto LABEL_67;
    }
    if (CFEqual(a2, @"CenterStageRectOfInterest"))
    {
      [*(id *)(v7 + 80) centerStageRectOfInterest];
      id DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v71);
      goto LABEL_24;
    }
    if (CFEqual(a2, @"CenterStageFramingMode"))
    {
      uint64_t v27 = NSNumber;
      uint64_t v28 = [*(id *)(v7 + 80) centerStageFramingMode];
      goto LABEL_67;
    }
    if (CFEqual(a2, @"CenterStageMetadataDeliveryEnabled"))
    {
      uint64_t v41 = NSNumber;
      uint64_t v42 = [*(id *)(v7 + 80) centerStageMetadataDeliveryEnabled];
    }
    else if (CFEqual(a2, @"CenterStageFieldOfViewRestrictedToWide"))
    {
      uint64_t v41 = NSNumber;
      uint64_t v42 = [*(id *)(v7 + 80) centerStageFieldOfViewRestrictedToWide];
    }
    else
    {
      if (!CFEqual(a2, @"SceneClassificationActive"))
      {
        if (CFEqual(a2, @"SupportedCMIOExtensionProperties"))
        {
          float v43 = (void *)[*(id *)(v7 + 80) device];
          uint64_t v44 = @"CMIOExtensionPropertyArray";
        }
        else
        {
          if (CFEqual(a2, @"SerializedProcessingSettings"))
          {
            uint64_t v45 = objc_alloc_init(FigCaptureStillImageProcessingSettings);
            if ([*(id *)(v7 + 80) sensorRawPoolEnabled])
            {
              float v46 = (void *)[*(id *)(v7 + 80) sensorRawPoolRequirements];
              uint64_t v47 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D70]), "unsignedIntValue");
              unsigned int v48 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E4F24E10]), "intValue");
              uint64_t v49 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D08]), "intValue");
              uint64_t v50 = [*(id *)(v7 + 80) ultraHighResSensorRawPoolDimensions];
              uint64_t v51 = v49 << 32;
              uint64_t v52 = v48;
            }
            else
            {
              uint64_t v50 = 0;
              uint64_t v51 = 0;
              uint64_t v52 = 0;
              uint64_t v47 = 0;
            }
            objc_msgSend((id)objc_msgSend(*(id *)(v7 + 80), "zoomCommandHandler"), "appliedZoomFactorWithoutFudge");
            *(float *)&double v54 = v53 * *(float *)(v7 + 168);
            [(FigCaptureStillImageProcessingSettings *)v45 setUiZoomFactor:v54];
            [(FigCaptureStillImageProcessingSettings *)v45 setSensorRawPixelFormat:v47];
            [(FigCaptureStillImageProcessingSettings *)v45 setSensorRawDimensions:v52 | v51];
            [(FigCaptureStillImageProcessingSettings *)v45 setUltraHighResSensorRawDimensions:v50];
            -[FigCaptureStillImageProcessingSettings setCameraInfoByPortType:](v45, "setCameraInfoByPortType:", [*(id *)(v7 + 80) cameraInfoByPortTypeIncludingLSCGains:v47 != 0 includeFocusPixelMap:v47 != 0 includeDefectivePixelTable:v47 != 0]);
            -[FigCaptureStillImageProcessingSettings setModuleCalibrationByPortType:](v45, "setModuleCalibrationByPortType:", [*(id *)(v7 + 80) moduleCalibrationByPortType]);
            *(void *)&long long v60 = 0;
            uint64_t v55 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v45 requiringSecureCoding:1 error:&v60];
            if (v55) {
              *a4 = v55;
            }
            else {
              unsigned int v59 = -12783;
            }

            goto LABEL_25;
          }
          if (CFEqual(a2, @"ClientBundleIdentifier"))
          {
            id DictionaryRepresentation = (id)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFStringRef *)(v7 + 72));
            goto LABEL_24;
          }
          id DictionaryRepresentation = (id)[*(id *)(v7 + 176) objectForKeyedSubscript:a2];
          if (DictionaryRepresentation) {
            goto LABEL_28;
          }
          if (![*(id *)(v7 + 80) device] || !BWDeviceTypeIsExtensionDeviceType(v14))
          {
            int v40 = -12784;
            goto LABEL_101;
          }
          if (dword_1EB4C4FD0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          float v43 = objc_msgSend(*(id *)(v7 + 80), "device", v57, v58);
          uint64_t v44 = a2;
        }
        id DictionaryRepresentation = (id)[v43 copyProperty:v44 error:&v59];
        goto LABEL_24;
      }
      uint64_t v41 = NSNumber;
      uint64_t v42 = [*(id *)(v7 + 80) smartCameraEnabled];
    }
    id DictionaryRepresentation = (id)[v41 numberWithBool:v42];
    goto LABEL_28;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t captureSource_SetProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  return captureSource_setPropertyWithDeviceCheck(a1, 0, 0, a2, a3);
}

uint64_t FigCaptureSourceAttachToClient(uint64_t a1, _OWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4FD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  long long v5 = *(_OWORD *)(DerivedStorage + 32);
  long long v12 = *(_OWORD *)(DerivedStorage + 16);
  long long v13 = v5;
  long long v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  if (!FigCaptureAuditTokensAreEqual(&v12, v11))
  {
    long long v7 = a2[1];
    *(_OWORD *)(DerivedStorage + 16) = *a2;
    *(_OWORD *)(DerivedStorage + 32) = v7;
    CFNumberRef v8 = *(void **)(DerivedStorage + 80);
    long long v9 = *(_OWORD *)(DerivedStorage + 32);
    long long v12 = *(_OWORD *)(DerivedStorage + 16);
    long long v13 = v9;
    [v8 updateClientAuditToken:&v12];
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  return 0;
}

uint64_t FigCaptureGetPIDFromAuditToken(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pid(&v3);
}

BOOL FigCaptureAuditTokensAreEqual(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t FigCaptureGetSupportedPrewarmingBundleIdentifiers()
{
  if (FigCaptureGetSupportedPrewarmingBundleIdentifiers_onceToken != -1) {
    dispatch_once(&FigCaptureGetSupportedPrewarmingBundleIdentifiers_onceToken, &__block_literal_global_104);
  }
  return FigCaptureGetSupportedPrewarmingBundleIdentifiers_bundleIdentifiers;
}

uint64_t FigCaptureSessionIsLaunchPrewarmingEnabled()
{
  return 1;
}

uint64_t flashlight_postNotificationWithPayload(const void *a1, const void *a2, void *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return FigDebugAssert3();
  }
  uint64_t v7 = DerivedStorage;
  if (a1) {
    CFRetain(a1);
  }
  CFRetain(a2);
  uint64_t v18 = @"FlashlightValue";
  v19[0] = a3;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  long long v9 = *(NSObject **)v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __flashlight_postNotificationWithPayload_block_invoke;
  block[3] = &unk_1E5C24C18;
  block[4] = v8;
  void block[5] = v7;
  block[6] = a2;
  void block[7] = a1;
  dispatch_async(v9, block);
  uint64_t result = FigCFEqual();
  if (result)
  {
    if (([a3 floatValue], v11 > 0.0) && *(float *)(v7 + 28) == 0.0
      || (uint64_t result = [a3 floatValue], v12 == 0.0) && *(float *)(v7 + 28) > 0.0)
    {
      int v13 = *(_DWORD *)(v7 + 96);
      uint64_t v14 = *(const void **)(v7 + 104);
      [a3 floatValue];
      FigCaptureLogTorchPowerEvent(v13, v14, v15);
      uint64_t result = [a3 floatValue];
      *(_DWORD *)(v7 + 2_Block_object_dispose(&STACK[0x4E0], 8) = v16;
    }
  }
  return result;
}

void BWSampleBufferSetAttachedMedia(const void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = objc_msgSend((id)CMGetAttachment(a1, @"AttachedMedia", 0), "mutableCopy");
  if (!v6) {
    long long v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
  }
  id v8 = v6;
  [v6 setObject:a3 forKeyedSubscript:a2];
  if ([v8 count])
  {
    uint64_t v7 = (void *)[v8 copy];
    CMSetAttachment(a1, @"AttachedMedia", v7, 1u);
  }
  else
  {
    CMRemoveAttachment(a1, @"AttachedMedia");
  }
}

void BWSampleBufferRemoveAttachedMedia(const void *a1, uint64_t a2)
{
}

void multiStreamCameraSourceNode_serviceQueue(uint64_t a1, signed int a2)
{
  uint64_t v3 = v2;
  uint64_t v338 = *MEMORY[0x1E4F143B8];
  long long v6 = (void *)MEMORY[0x1A6272C70]();
  type.long long value = 0;
  uint64_t v7 = (void *)a2;
  id v8 = (__CVBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 384 + ((uint64_t)a2 << 9) + 24));
  *(_OWORD *)&buffer.duration.long long value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  buffer.duration.CMTimeEpoch epoch = v9;
  if (!v8) {
    goto LABEL_448;
  }
  id v10 = v8;
  CMTimeEpoch v312 = v9;
  CFTypeID v11 = CFGetTypeID(v8);
  if (v11 != CFDictionaryGetTypeID())
  {
    CFTypeRef v13 = CVBufferCopyAttachment(v10, @"BWPTS", 0);
    if (!v13) {
      goto LABEL_8;
    }
    CFDataRef Value = (const __CFData *)CFAutorelease(v13);
    if (!Value) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v10, @"BWPTS");
  if (Value)
  {
LABEL_7:
    v339.locatiouint64_t n = 0;
    v339.length = 24;
    CFDataGetBytes(Value, v339, (UInt8 *)&buffer);
  }
LABEL_8:
  if (v11 == CFDictionaryGetTypeID()) {
    CFDictionaryRemoveValue(v10, @"BWPTS");
  }
  else {
    CVBufferRemoveAttachment(v10, @"BWPTS");
  }
  int v323 = a2;
  if (v11 != CVPixelBufferGetTypeID())
  {
    uint64_t TypeID = CVDataBufferGetTypeID();
    if (a2 == 7 && v11 == TypeID)
    {
      unsigned int v39 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 3984), "formatRequirements"), "maxPoints");
      v337[0] = buffer.duration;
      int v40 = BWSampleBufferCreateFromDataBufferWithNumberOfPoints(v10, (uint64_t)v337, 0x70636C64u, (CFTypeRef *)(a1 + 4016), (CMAttachmentBearerRef *)&type, v39);
      if (!v40)
      {
        uint64_t v37 = (opaqueCMSampleBuffer *)type.value;
        goto LABEL_43;
      }
      uint64_t v296 = v2;
      LODWORD(p_buffer) = v40;
LABEL_461:
      FigDebugAssert3();
      goto LABEL_85;
    }
    uint64_t v48 = CVDataBufferGetTypeID();
    if (a2 == 10 && v11 == v48)
    {
      v337[0] = buffer.duration;
      int v49 = BWSampleBufferCreateFromDataBuffer(v10, (long long *)&v337[0].value, 0x70636C64u, (CFTypeRef *)(a1 + 5552), (CMAttachmentBearerRef *)&type);
      if (v49)
      {
        uint64_t v296 = v2;
        LODWORD(p_buffer) = v49;
        goto LABEL_461;
      }
    }
    else
    {
      CFTypeID v54 = CFDictionaryGetTypeID();
      if (a2 != 11 || v11 != v54)
      {
        CFTypeID v61 = CFDictionaryGetTypeID();
        if (a2 == 12 && v11 == v61)
        {
          uint64_t v62 = [(id)a1 portType];
          v337[0] = buffer.duration;
          int v63 = BWCreateSampleBufferWithDetectedObjectsInfo((uint64_t)v10, v337, v62, &type);
          if (!v63) {
            goto LABEL_85;
          }
          uint64_t v296 = v2;
          LODWORD(p_buffer) = v63;
        }
        else
        {
          CFTypeID v94 = CFDictionaryGetTypeID();
          if (a2 != 13) {
            goto LABEL_85;
          }
          if (v11 != v94) {
            goto LABEL_85;
          }
          uint64_t v95 = [(id)a1 portType];
          v337[0] = buffer.duration;
          int v96 = BWCreateSampleBufferWithEyeReliefResultDictionary(v10, v337, v95, &type);
          if (!v96) {
            goto LABEL_85;
          }
          uint64_t v296 = v2;
          LODWORD(p_buffer) = v96;
        }
        goto LABEL_461;
      }
      uint64_t v55 = (const void *)[(id)a1 portType];
      v337[0] = buffer.duration;
      int v56 = BWCreateSampleBufferFromSemanticMasksDictionary(v10, v337, v55, &type);
      if (v56)
      {
        uint64_t v296 = v2;
        LODWORD(p_buffer) = v56;
        goto LABEL_461;
      }
    }
LABEL_66:
    CFStringRef v57 = (const __CFString *)*MEMORY[0x1E4F53070];
    CFTypeRef v58 = CVBufferCopyAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v58)
    {
      CFDictionaryRef v59 = (const __CFDictionary *)CFAutorelease(v58);
      if (v59)
      {
        MutableCopdouble y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v59);
        CMSetAttachment((CMAttachmentBearerRef)type.value, v57, MutableCopy, 1u);
        CMSetAttachment(v10, v57, MutableCopy, 1u);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
    }
    goto LABEL_85;
  }
  v337[0] = buffer.duration;
  target[0] = 0;
  int v14 = BWSampleBufferCreateFromPixelBuffer(v10, (uint64_t)v337, (CFTypeRef *)(a1 + 384 + ((uint64_t)a2 << 9) + 48), (CMSampleBufferRef *)target);
  if (v14)
  {
    uint64_t v296 = v2;
    LODWORD(p_buffer) = v14;
    FigDebugAssert3();
  }
  else
  {
    CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F530E0];
    CFTypeRef v16 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F530E0], 0);
    if (v16) {
      CMSetAttachment(target[0], v15, v16, 1u);
    }
    CFStringRef v17 = (const __CFString *)*MEMORY[0x1E4F53100];
    CFTypeRef v18 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53100], 0);
    if (v18) {
      CMSetAttachment(target[0], v17, v18, 1u);
    }
    CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F530F0];
    CFTypeRef v20 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F530F0], 0);
    if (v20)
    {
      CMSetAttachment(target[0], v19, v20, 1u);
      CMRemoveAttachment(v10, v19);
    }
    CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F53068];
    CFTypeRef v22 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53068], 0);
    if (v22)
    {
      CMSetAttachment(target[0], v21, v22, 1u);
      CMRemoveAttachment(v10, v21);
    }
    CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F53108];
    CFTypeRef v24 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53108], 0);
    if (v24)
    {
      CMSetAttachment(target[0], v23, v24, 1u);
      CMRemoveAttachment(v10, v23);
    }
    CFStringRef v25 = (const __CFString *)*MEMORY[0x1E4F53188];
    CFTypeRef v26 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53188], 0);
    if (v26)
    {
      CMSetAttachment(target[0], v25, v26, 1u);
      CMRemoveAttachment(v10, v25);
    }
    CFStringRef v27 = (const __CFString *)*MEMORY[0x1E4F53110];
    CFTypeRef v28 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53110], 0);
    if (v28)
    {
      CMSetAttachment(target[0], v27, v28, 1u);
      CMRemoveAttachment(v10, v27);
    }
    CFStringRef v29 = (const __CFString *)*MEMORY[0x1E4F53038];
    CFTypeRef v30 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53038], 0);
    if (v30)
    {
      CMSetAttachment(target[0], v29, v30, 1u);
      CMRemoveAttachment(v10, v29);
    }
    CFStringRef v31 = (const __CFString *)*MEMORY[0x1E4F52FE0];
    CFTypeRef v32 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F52FE0], 0);
    if (v32)
    {
      CMSetAttachment(target[0], v31, v32, 1u);
      CMRemoveAttachment(v10, v31);
    }
    CFStringRef v33 = (const __CFString *)*MEMORY[0x1E4F531A0];
    CFTypeRef v34 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F531A0], 0);
    if (v34)
    {
      CMSetAttachment(target[0], v33, v34, 1u);
      CMRemoveAttachment(v10, v33);
    }
    CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F53160];
    CFTypeRef v36 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E4F53160], 0);
    if (v36)
    {
      CMSetAttachment(target[0], v35, v36, 1u);
      CMRemoveAttachment(v10, v35);
    }
  }
  uint64_t v37 = (opaqueCMSampleBuffer *)target[0];
  type.long long value = (CMTimeValue)target[0];
  if (a2 <= 0x12 && ((1 << a2) & 0x40E00) != 0) {
    goto LABEL_66;
  }
  if ((a2 & 0xFFFFFFFE) == 0xC) {
    goto LABEL_85;
  }
LABEL_43:
  uint64_t v41 = (void *)a2;
  uint64_t v42 = (int *)(a1 + 384 + ((uint64_t)a2 << 9));
  int v43 = *(unsigned __int8 *)(a1 + 140);
  uint64_t v44 = *(void **)(a1 + 112);
  float v319 = v6;
  if (objc_msgSend(*(id *)(a1 + 312), "previewOutputEnabled", p_buffer, v296))
  {
    int v45 = -[BWMultiStreamCameraSourceNode _shouldEnableStreamCaptureOutputForNodeOutput:](a1, 0);
    int v46 = *v42;
    if (v45)
    {
      if (v46 == 1)
      {
        uint64_t v47 = *(void **)(a1 + 144);
LABEL_54:
        uint64_t v50 = *(void **)(a1 + 10696);
        CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(v37);
        if (v43)
        {
          if (v47)
          {
            [v47 addMetadataAttachmentToSampleBuffer:v37 withDutyCycleMetadataCache:v50];
            uint64_t v7 = v41;
            uint64_t v3 = v2;
LABEL_62:
            a2 = v323;
            goto LABEL_85;
          }
          goto LABEL_59;
        }
        CVImageBufferRef v64 = ImageBuffer;
        a2 = v323;
LABEL_80:
        CFStringRef v65 = (const __CFString *)*MEMORY[0x1E4F53070];
        CFDictionaryRef v66 = (const __CFDictionary *)CMGetAttachment(v64, (CFStringRef)*MEMORY[0x1E4F53070], 0);
        uint64_t v7 = v41;
        if (v66)
        {
          CFMutableDictionaryRef v67 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v66);
          CMSetAttachment(v37, v65, v67, 1u);
          CMSetAttachment(v64, v65, v67, 1u);
          if (v67) {
            CFRelease(v67);
          }
        }
        CFStringRef v68 = (const __CFString *)*MEMORY[0x1E4F52FE8];
        CFTypeRef v69 = CMGetAttachment(v64, (CFStringRef)*MEMORY[0x1E4F52FE8], 0);
        uint64_t v3 = v2;
        long long v6 = v319;
        if (v69) {
          CMSetAttachment(v37, v68, v69, 1u);
        }
        goto LABEL_85;
      }
      goto LABEL_57;
    }
  }
  else
  {
    int v46 = *v42;
  }
  if (v46 == 1)
  {
    uint64_t v47 = 0;
    goto LABEL_54;
  }
LABEL_57:
  CVImageBufferRef v52 = CMSampleBufferGetImageBuffer(v37);
  if (!v43)
  {
    CVImageBufferRef v64 = v52;
    goto LABEL_80;
  }
  uint64_t v50 = 0;
LABEL_59:
  uint64_t v7 = v41;
  int v53 = [v44 addAttachmentsToSampleBuffer:v37 options:0];
  uint64_t v3 = v2;
  if (!v53 && v50)
  {
    FigCaptureMetadataUtilitiesAddMissingDutyCycleMetadata(v37, v50);
    goto LABEL_62;
  }
  a2 = v323;
  if ((v53 == -12680 || v53 == -12785) && type.value)
  {
    CFRelease((CFTypeRef)type.value);
    type.long long value = 0;
  }
LABEL_85:
  CFRelease(v10);
  long long v70 = (void *)type.value;
  if (type.value)
  {
    uint64_t v71 = a1 + 384;
    uint64_t v72 = a1 + 384 + ((void)v7 << 9);
    if (!*(unsigned char *)(v72 + 9))
    {
LABEL_447:
      CFRelease(v70);
      goto LABEL_448;
    }
    float v320 = v6;
    int v73 = *(void **)(v72 + 16);
    uint64_t v305 = (uint64_t *)(v72 + 16);
    uint64_t v299 = *(void **)(a1 + 184);
    uint64_t v297 = a1 + 384 + ((void)v7 << 9);
    v300 = (unsigned char *)(v72 + 4);
    unsigned int v313 = *(_DWORD *)(v72 + 4);
    int v322 = *(_DWORD *)v72;
    LODWORD(v74) = *(_DWORD *)v72 == 2;
    long long v75 = (void **)a1;
    BOOL v76 = a2 < 0x13;
    uint64_t v318 = (uint64_t)v75;
    if (v73 == v75[25] && ([v75[39] detectedFacesOnPreviewOutputEnabled] & 1) != 0)
    {
      int cf = 1;
    }
    else if (v73 == v75[26])
    {
      int cf = [v75[39] detectedFacesOnVideoCaptureOutputEnabled];
    }
    else
    {
      int cf = 0;
    }
    pixelBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v70);
    CMSampleBufferRef sbuf = (CMSampleBufferRef)v70;
    if (v322 == 2)
    {
      if (dword_1EB4C56D0)
      {
        uint64_t v77 = v3;
        uint64_t v78 = v71;
        LODWORD(target[0]) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v80 = target[0];
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v82 = v80;
        }
        else {
          unsigned int v82 = v80 & 0xFFFFFFFE;
        }
        if (v82)
        {
          uint64_t v83 = BWPortTypeToDisplayString(v299, v81);
          CMTimeValue v84 = [v73 name];
          uint64_t v85 = BWStillImageSampleBufferToShortDisplayString(sbuf);
          LODWORD(buffer.duration.value) = 136315906;
          *(CMTimeValue *)((char *)&buffer.duration.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
          LOWORD(buffer.duration.flags) = 2114;
          *(void *)((char *)&buffer.duration.flags + 2) = v83;
          HIWORD(buffer.duration.epoch) = 2114;
          buffer.presentationTimeStamp.long long value = v84;
          long long v70 = sbuf;
          LOWORD(buffer.presentationTimeStamp.timescale) = 2114;
          *(void *)((char *)&buffer.presentationTimeStamp.timescale + 2) = v85;
          LODWORD(v296) = 42;
          p_CMSampleTimingInfo buffer = &buffer;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LOBYTE(a2) = v323;
        uint64_t v71 = v78;
        uint64_t v3 = v77;
      }
      if (objc_msgSend(*(id *)(v318 + 104), "sourceNodeShouldDiscardStillImageSampleBuffer:sensorRawOutput:", v70, v73 == *(void **)(v318 + 224), p_buffer, v296, v297))
      {
        LODWORD(target[0]) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v287 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v288 = target[0];
        if (os_log_type_enabled(v287, type.value)) {
          unsigned int v290 = v288;
        }
        else {
          unsigned int v290 = v288 & 0xFFFFFFFE;
        }
        if (v290)
        {
          uint64_t v291 = BWPortTypeToDisplayString(v299, v289);
          CMTimeValue v292 = [v73 name];
          uint64_t v293 = BWStillImageSampleBufferToShortDisplayString(sbuf);
          LODWORD(buffer.duration.value) = 136315906;
          *(CMTimeValue *)((char *)&buffer.duration.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
          LOWORD(buffer.duration.flags) = 2114;
          *(void *)((char *)&buffer.duration.flags + 2) = v291;
          HIWORD(buffer.duration.epoch) = 2114;
          buffer.presentationTimeStamp.long long value = v292;
          LOWORD(buffer.presentationTimeStamp.timescale) = 2114;
          *(void *)((char *)&buffer.presentationTimeStamp.timescale + 2) = v293;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        long long v6 = v320;
        long long v70 = sbuf;
        goto LABEL_447;
      }
    }
    unsigned int v315 = v76 & (0x43E00u >> a2);
    -[BWMultiStreamCameraSourceNode _addCaptureStreamAttachmentsToSampleBuffer:](v318, v70);
    CFStringRef v86 = (const __CFString *)*MEMORY[0x1E4F53070];
    float v314 = (void *)CMGetAttachment(v70, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v322 == 1 && (*v300 & 1) != 0)
    {
      long long v87 = (void *)CMGetAttachment(v70, v86, 0);
      long long v74 = v87;
      if (v87)
      {
        int v88 = objc_msgSend((id)objc_msgSend(v87, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue");
        if ((v88 & 1) != 0
          || objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue")|| objc_msgSend((id)objc_msgSend(v74, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F10]), "BOOLValue"))
        {
          int v89 = v88 ^ 1;
          long long v74 = v7;
          int v90 = *(_DWORD *)(v318 + 384 + ((void)v7 << 9) + 4);
          int v91 = objc_msgSend(*(id *)(v318 + 104), "providesPreBracketedEV0", p_buffer);
          int v92 = (v90 & 1) == 0;
          if (v90) {
            int v93 = v89;
          }
          else {
            int v93 = 1;
          }
          if (!v93) {
            int v92 = v91 ^ 1;
          }
          if (v92 == 1)
          {
            long long v6 = v320;
            if ((v313 & 4) != 0) {
              -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v318, v70);
            }
            goto LABEL_447;
          }
          int v306 = 0;
          int v73 = *(void **)(v318 + 216);
          uint64_t v7 = v74;
          LODWORD(v74) = 1;
          goto LABEL_134;
        }
        LODWORD(v74) = 0;
      }
    }
    if (v323 == 6) {
      int v97 = 1;
    }
    else {
      int v97 = (int)v74;
    }
    int v98 = v315 | v97;
    if (v323 == 7) {
      int v99 = 1;
    }
    else {
      int v99 = v98;
    }
    if ((v99 & 1) == 0)
    {
      if ([*(id *)(v318 + 312) discardsUnstableSphereVideoFrames])
      {
        uint64_t v100 = (void *)CMGetAttachment(v70, v86, 0);
        if (mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(v100))
        {
          long long v6 = v320;
          if ((v313 & 4) != 0)
          {
            -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v318, v70);
            [*(id *)(v318 + 104) sourceNodeWillDiscardVideoSampleBuffer:v70];
          }
          goto LABEL_447;
        }
      }
    }
    int v306 = v99 ^ 1;
    if (v322 != 1)
    {
LABEL_154:
      uint64_t v113 = v3;
      int v317 = (int)v74;
      uint64_t v309 = v71;
      long long v114 = (CGFloat *)MEMORY[0x1E4F1DB28];
      kedouble y = v86;
      long long v115 = (void *)CMGetAttachment(v70, v86, 0);
      long long v116 = v115;
      long long v117 = (void *)MEMORY[0x1E4F541F0];
      long long v118 = (void *)MEMORY[0x1E4F53FE0];
      long long v119 = (uint64_t *)MEMORY[0x1E4F541E0];
      switch(v323)
      {
        case 1:
          long long v120 = (void *)MEMORY[0x1E4F542A8];
          uint64_t v121 = [v115 objectForKeyedSubscript:*MEMORY[0x1E4F541F0]];
          uint64_t v122 = *MEMORY[0x1E4F54370];
          [v116 setObject:v121 forKeyedSubscript:*MEMORY[0x1E4F54370]];
          uint64_t v123 = *v119;
          goto LABEL_160;
        case 2:
          long long v120 = (void *)MEMORY[0x1E4F542A8];
          uint64_t v124 = [v115 objectForKeyedSubscript:*MEMORY[0x1E4F53FE0]];
          uint64_t v122 = *MEMORY[0x1E4F54370];
          [v116 setObject:v124 forKeyedSubscript:*MEMORY[0x1E4F54370]];
          long long v125 = (uint64_t *)MEMORY[0x1E4F53FD0];
          goto LABEL_159;
        case 5:
          long long v120 = (void *)MEMORY[0x1E4F542A8];
          uint64_t v126 = [v115 objectForKeyedSubscript:*MEMORY[0x1E4F542A8]];
          uint64_t v122 = *MEMORY[0x1E4F54370];
          [v116 setObject:v126 forKeyedSubscript:*MEMORY[0x1E4F54370]];
          long long v125 = (uint64_t *)MEMORY[0x1E4F54220];
LABEL_159:
          uint64_t v123 = *v125;
LABEL_160:
          uint64_t v127 = objc_msgSend(v116, "objectForKeyedSubscript:", v123, p_buffer);
          uint64_t v128 = *MEMORY[0x1E4F54218];
          long long v115 = v116;
          goto LABEL_162;
        case 6:
          long long v120 = (void *)MEMORY[0x1E4F542A8];
          uint64_t v122 = *MEMORY[0x1E4F54370];
          uint64_t v127 = 0;
          uint64_t v128 = *MEMORY[0x1E4F54370];
LABEL_162:
          objc_msgSend(v115, "setObject:forKeyedSubscript:", v127, v128, p_buffer);
          break;
        default:
          long long v120 = (void *)MEMORY[0x1E4F542A8];
          uint64_t v122 = *MEMORY[0x1E4F54370];
          break;
      }
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *v117, p_buffer);
      [v116 setObject:0 forKeyedSubscript:*v118];
      [v116 setObject:0 forKeyedSubscript:*v119];
      [v116 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F53FD0]];
      [v116 setObject:0 forKeyedSubscript:*v120];
      long long v70 = sbuf;
      long long v129 = CMSampleBufferGetImageBuffer(sbuf);
      long long v130 = *((_OWORD *)v114 + 1);
      *(_OWORD *)&buffer.duration.long long value = *(_OWORD *)v114;
      *(_OWORD *)&buffer.duration.CMTimeEpoch epoch = v130;
      int v132 = v317;
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        double Width = (double)CVPixelBufferGetWidth(v129);
        double Height = (double)CVPixelBufferGetHeight(v129);
        CGFloat v135 = *(double *)&buffer.duration.value;
        CGFloat v136 = *(double *)&buffer.duration.timescale;
        double v137 = Width - *(double *)&buffer.duration.value;
        CMTimeEpoch epoch = buffer.duration.epoch;
        CMTimeValue v139 = buffer.presentationTimeStamp.value;
        if (Width - *(double *)&buffer.duration.value >= *(double *)&buffer.duration.epoch) {
          double v137 = *(double *)&buffer.duration.epoch;
        }
        if (v137 >= 0.0) {
          double v140 = v137;
        }
        else {
          double v140 = 0.0;
        }
        double v141 = Height - *(double *)&buffer.duration.timescale;
        if (Height - *(double *)&buffer.duration.timescale >= *(double *)&buffer.presentationTimeStamp.value) {
          double v141 = *(double *)&buffer.presentationTimeStamp.value;
        }
        if (v141 >= 0.0) {
          double v142 = v141;
        }
        else {
          double v142 = 0.0;
        }
        CMTimeValue v143 = buffer.duration.value;
        uint64_t v144 = *(void *)&buffer.duration.timescale;
        *(void *)&v342.origin.double x = buffer.duration.value;
        v342.origin.double y = *(CGFloat *)&buffer.duration.timescale;
        v342.size.CGFloat width = v140;
        v342.size.CGFloat height = v142;
        if (!CGRectEqualToRect(*(CGRect *)(&epoch - 2), v342))
        {
          *(CGFloat *)&buffer.duration.long long value = v135;
          *(CGFloat *)&buffer.duration.timescale = v136;
          *(double *)&buffer.duration.CMTimeEpoch epoch = v140;
          *(double *)&buffer.presentationTimeStamp.long long value = v142;
          v340.origin.double x = v135;
          v340.origin.double y = v136;
          v340.size.CGFloat width = v140;
          v340.size.CGFloat height = v142;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v340);
          [v116 setObject:DictionaryRepresentation forKeyedSubscript:v122];
          if (DictionaryRepresentation) {
            CFRelease(DictionaryRepresentation);
          }
        }
        double v131 = *(double *)&buffer.duration.epoch;
        if (*(double *)&buffer.duration.epoch == Width)
        {
          double v131 = *(double *)&buffer.presentationTimeStamp.value;
          if (*(double *)&buffer.presentationTimeStamp.value == Height) {
            objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, v122, *(double *)&buffer.presentationTimeStamp.value);
          }
        }
      }
      if (v323 == 6 || v306 | v317)
      {
        float v150 = 0.0;
        if (v317) {
          objc_msgSend(*(id *)(v318 + 104), "activeStillImageScaleFactor", 0.0);
        }
        double v131 = -[BWMultiStreamCameraSourceNode _updateZoomForOutputIndex:sampleBuffer:additionalScaleFactor:](v318, v323, sbuf, v150);
        CGFloat v146 = v131;
        CGFloat v147 = v151;
        CGFloat v148 = v152;
        CGFloat v149 = v153;
      }
      else
      {
        CGFloat v146 = *v114;
        CGFloat v147 = v114[1];
        CGFloat v148 = v114[2];
        CGFloat v149 = v114[3];
      }
      objc_msgSend((id)objc_msgSend(*(id *)(v318 + 96), "zoomCommandHandler", v131), "appliedZoomFactorWithoutFudge");
      float v155 = v154;
      [*(id *)(v318 + 312) uiBaseZoomFactor];
      *(float *)&double v157 = v155 * v156;
      CMSetAttachment(sbuf, @"UIZoomFactor", (CFTypeRef)[NSNumber numberWithFloat:v157], 1u);
      uint64_t v311 = v113;
      if ((v313 & 4) != 0)
      {
        int v158 = cf ^ 1;
        [*(id *)(v318 + 10888) addFacesFromSampleBuffer:sbuf];
        [*(id *)(v318 + 10896) addObjectsFromSampleBuffer:sbuf];
        BWDetectedFacesConvertSampleBufferFacesFromSensorToBufferCoordinateSpace(sbuf);
        BWDetectedObjectsConvertSampleBufferDetectedObjectsFromSensorToBufferCoordinateSpace(sbuf);
        long long v159 = (void *)[v314 objectForKeyedSubscript:*MEMORY[0x1E4F542E0]];
        int v160 = [v159 BOOLValue];
        if (!v159 || v160) {
          [*(id *)(v318 + 10904) filterDetectedFacesInSampleBuffer:sbuf];
        }
        long long v161 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
        if ([*(id *)(v318 + 312) detectedObjectsOutputEnabled]
          && objc_msgSend((id)objc_msgSend(*(id *)(v318 + 312), "enabledDetectedObjectTypes"), "count")
          && v73 != *(void **)(v318 + 232))
        {
          CFTypeRef cfa = BWDetectedObjectsCreateFilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet(sbuf, (void *)[*(id *)(v318 + 312) enabledDetectedObjectTypes], v146, v147, v148, v149);
          -[BWMultiStreamCameraSourceNode _addCaptureStreamAttachmentsToSampleBuffer:](v318, cfa);
          if (!v317) {
            goto LABEL_202;
          }
        }
        else
        {
          CFTypeRef cfa = 0;
          if (!v317) {
            goto LABEL_202;
          }
        }
      }
      else
      {
        if ((cf & 1) == 0) {
          BWDetectedFacesRemoveFacesFromSampleBuffer(sbuf);
        }
        int v158 = 0;
        CFTypeRef cfa = 0;
        long long v161 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
        if (!v317)
        {
LABEL_202:
          if (v315) {
            goto LABEL_209;
          }
          if (v158)
          {
            int v158 = 1;
            if (![v314 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]])
            {
              unsigned int v163 = (double *)MEMORY[0x1E4F1DB20];
              goto LABEL_199;
            }
LABEL_209:
            if ([*(id *)(v318 + v161[459]) cameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled]&& v73 == *(void **)(v318 + 208)|| objc_msgSend(*(id *)(v318 + v161[459]), "cameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled")&& v73 == *(void **)(v318 + 200))
            {
              -[BWMultiStreamCameraSourceNode _attachCameraIntrinsicMatrixToSampleBuffer:scaledToVideoBuffer:addToMetadataDictInTotalSensorCoords:](v318, sbuf, 1, 0);
            }
            if (v73 == *(void **)(v318 + 224)) {
              int v169 = [*(id *)(v318 + v161[459]) originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled];
            }
            else {
              int v169 = 0;
            }
            if ((v73 != *(void **)(v318 + 200)
               || ([*(id *)(v318 + v161[459]) originalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled] & 1) == 0)&& (v73 != *(void **)(v318 + 208)|| (objc_msgSend(*(id *)(v318 + v161[459]), "originalCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled") & 1) == 0)&& (v73 != *(void **)(v318 + 216)|| (objc_msgSend(*(id *)(v318 + v161[459]), "originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled") & 1) == 0)&& (v73 != *(void **)(v318 + 224)|| (objc_msgSend(*(id *)(v318 + v161[459]), "originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled") & 1) == 0))
            {
              if (v73 == *(void **)(v318 + 248))
              {
                if ((([*(id *)(v318 + v161[459]) originalCameraIntrinsicMatrixDeliveryOnDepthOutputEnabled] | v169) & 1) == 0)goto LABEL_228; {
              }
                }
              else if (!v169)
              {
LABEL_228:
                float v302 = v7;
                uint64_t v170 = v309;
                if (v306)
                {
                  CFTypeRef v171 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
                  unint64_t v172 = v171 ? (void *)CFAutorelease(v171) : 0;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0
                    && (([v172 isEqualToString:*MEMORY[0x1E4F24BF8]] & 1) != 0
                     || [v172 isEqualToString:*MEMORY[0x1E4F24BD8]]))
                  {
                    uint64_t v173 = (void *)[v314 objectForKeyedSubscript:*MEMORY[0x1E4F542D8]];
                    if (v173)
                    {
                      int v174 = [v173 intValue];
                      uint64_t v175 = v309 + ((void)v7 << 9);
                      if (v174 != *(_DWORD *)(v175 + 504) + 1) {
                        *(_DWORD *)(v175 + 500) = -1;
                      }
                      *(_DWORD *)(v175 + 504) = v174;
                    }
                    uint64_t v176 = v309 + ((void)v7 << 9);
                    uint64_t v177 = FigCaptureSceneIlluminationValueFromLuxLevel((void *)[v314 objectForKeyedSubscript:*MEMORY[0x1E4F54068]], *(_DWORD *)(v176 + 500));
                    if (v177 != -1)
                    {
                      *(_DWORD *)(v176 + 500) = v177;
                      CVBufferSetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24BB8], (CFTypeRef)[NSNumber numberWithUnsignedInt:v177], kCVAttachmentMode_ShouldPropagate);
                    }
                  }
                }
                if (v132)
                {
                  if (v73 != *(void **)(v318 + 216) && v73 != *(void **)(v318 + 224))
                  {
                    uint64_t v296 = v311;
                    LODWORD(p_type) = 0;
                    FigDebugAssert3();
                  }
                  unsigned int v178 = objc_msgSend(*(id *)(v318 + 104), "activeStillImageCaptureType", p_type, v296);
                  int v179 = [*(id *)(v318 + 104) sourceNodeWillEmitStillImageSampleBuffer:sbuf];
LABEL_260:
                  if (v179)
                  {
                    FigDebugAssert3();
                    goto LABEL_262;
                  }
LABEL_261:
                  if (CMGetAttachment(sbuf, @"BWBurnAfterReading", 0) || *(unsigned char *)(v318 + 11040))
                  {
LABEL_262:
                    long long v6 = v320;
                    double v180 = cfa;
                    if (!cfa) {
                      goto LABEL_447;
                    }
                    goto LABEL_446;
                  }
                  unsigned int v307 = v178;
                  if (v158) {
                    BWDetectedFacesRemoveFacesFromSampleBuffer(sbuf);
                  }
                  double v181 = v314;
                  if (([*(id *)(v318 + 312) geometricDistortionCorrectionOnVideoCaptureOutputEnabled] & 1) == 0
                    && ([*(id *)(v318 + 312) geometricDistortionCorrectionOnPreviewOutputEnabled] & 1) == 0
                    && ![*(id *)(v318 + 312) geometricDistortionCorrectionOnStillImageOutputEnabled])
                  {
LABEL_299:
                    if ((v132 & objc_msgSend(*(id *)(v318 + 312), "reflectsStillsOnStreamingOutputs", p_type, v296)) != 1|| v322 == 1)
                    {
LABEL_325:
                      char v225 = v315;
                      if (v322 != 1) {
                        char v225 = 1;
                      }
                      if ((v225 & 1) == 0)
                      {
                        unsigned int v226 = objc_msgSend((id)objc_msgSend(v314, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue");
                        if (FigCaptureVideoDimensionsAreEqual(v226 | (unint64_t)(objc_msgSend((id)objc_msgSend(v314, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue") << 32), objc_msgSend(*(id *)(v318 + 96), "ultraHighResSensorRawPoolDimensions"))&& ((int)objc_msgSend((id)objc_msgSend(v314, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue") > 0|| objc_msgSend((id)objc_msgSend(v314, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue")))
                        {
                          int v227 = (const void *)MEMORY[0x1E4F1CC38];
                          CMSetAttachment(v70, @"IsHarvestedStillFrame", MEMORY[0x1E4F1CC38], 1u);
                          CMSetAttachment(v70, @"IsHarvestedUltraHighResolutionStillFrame", v227, 1u);
                        }
                      }
LABEL_332:
                      if ((v313 & 4) != 0) {
                        -[BWMultiStreamCameraSourceNode _prependPreservedMotionDataToSampleBuffer:](v318, v70);
                      }
                      int v228 = v317;
                      if ((v315 & 1) == 0)
                      {
                        -[BWMultiStreamCameraSourceNode _addMetadataUsedByVideoEncoderToPixelBufferForSampleBuffer:nodeOutput:](v318, (CMSampleBufferRef)v70, (uint64_t)v73);
                        -[BWMultiStreamCameraSourceNode _addDolbyVisionMetadataToPreviewPixelBufferForSampleBuffer:nodeOutput:](v318, v70, (uint64_t)v73);
                      }
                      int v229 = v314;
                      if ([*(id *)(v318 + 312) depthType] - 1 > 1) {
                        goto LABEL_373;
                      }
                      [*(id *)(v318 + 96) maxContinuousZoomFactorForDepthDataDelivery];
                      float v231 = v230;
                      objc_msgSend((id)objc_msgSend(*(id *)(v318 + 96), "zoomCommandHandler"), "appliedZoomFactorWithoutFudge");
                      BOOL v233 = v232 > v231 && v231 > 0.0;
                      if (v323 == 6)
                      {
                        if (v233) {
                          goto LABEL_262;
                        }
                        int v234 = CFRetain(v70);
                        int v229 = v314;
                      }
                      else
                      {
                        if (((v317 & 1) != 0 || [*(id *)(v318 + 312) depthOutputEnabled])
                          && ([*(id *)(v318 + 312) discardsDepthDataForStillImages] & 1) != 0)
                        {
                          goto LABEL_353;
                        }
                        if (v233)
                        {
                          CMRemoveAttachment(v70, (CFStringRef)*MEMORY[0x1E4F52FE8]);
                          goto LABEL_353;
                        }
                        int v234 = -[BWMultiStreamCameraSourceNode _createDepthDataSampleBufferFromVideoSampleBuffer:]((CMSampleBufferRef)v318, v70);
                        BWSampleBufferSetAttachedMedia(v70, @"Depth", (uint64_t)v234);
                        CMSetAttachment(v70, (CFStringRef)*MEMORY[0x1E4F55B48], MEMORY[0x1E4F1CC38], 1u);
                      }
                      if (v234)
                      {
                        if ([(id)v318 hardwareDepthFilteringEnabled]) {
                          objc_msgSend((id)CMGetAttachment(v234, key, 0), "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F55870]);
                        }
                        CMSetAttachment(v234, @"DepthPixelBufferType", *(CFTypeRef *)(v318 + 344), 1u);
                        CFRelease(v234);
                      }
LABEL_353:
                      int v228 = v317;
                      if (*(unsigned char *)(v318 + 160))
                      {
                        uint64_t v235 = (void *)[v229 objectForKeyedSubscript:*MEMORY[0x1E4F542D8]];
                        int v236 = [v235 intValue];
                        uint64_t v237 = (void *)[v229 objectForKeyedSubscript:*MEMORY[0x1E4F53FB8]];
                        if (v235)
                        {
                          v238 = v237;
                          if ([v237 intValue] == 2)
                          {
                            int v239 = *(_DWORD *)(v318 + 10960);
                            BOOL v240 = v239 - v236 > 30 && v239 > v236;
                            if (v239 < v236 || v240)
                            {
                              int v241 = &OBJC_IVAR___BWMultiStreamCameraSourceNode__infraredProjectorUptimeInUsForLowPowerSparse;
                              if (v317) {
                                int v241 = &OBJC_IVAR___BWMultiStreamCameraSourceNode__infraredProjectorUptimeInUsForHighPowerSparse;
                              }
                              *(void *)(v318 + *v241) += 2940;
                            }
                          }
                          objc_msgSend((id)objc_msgSend(v229, "objectForKeyedSubscript:", *MEMORY[0x1E4F542C0]), "BOOLValue");
                          [v238 intValue];
                          *(_DWORD *)(v318 + 10960) = v236;
                        }
                        int v242 = objc_msgSend((id)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55D38], 0), "intValue");
                        if (!*(unsigned char *)(v318 + 11064) && v242 >= 2)
                        {
                          [*(id *)(v318 + 112) setPropertyIfSupported:*MEMORY[0x1E4F54BF0] value:MEMORY[0x1E4F1CC28]];
                          *(unsigned char *)(v318 + 11064) = 1;
                          v243 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
                          if ((v317 & 1) == 0) {
                            goto LABEL_386;
                          }
                          goto LABEL_374;
                        }
                        int v228 = v317;
                        if (*(unsigned char *)(v318 + 11064) && v242 <= 1)
                        {
                          [*(id *)(v318 + 112) setPropertyIfSupported:*MEMORY[0x1E4F54BF0] value:MEMORY[0x1E4F1CC38]];
                          char v244 = 0;
                          *(unsigned char *)(v318 + 11064) = 0;
                          v243 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
                          if ((v317 & 1) == 0) {
                            goto LABEL_388;
                          }
                          goto LABEL_374;
                        }
                      }
LABEL_373:
                      v243 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
                      if (!v228)
                      {
LABEL_386:
                        char v244 = 0;
                        goto LABEL_388;
                      }
LABEL_374:
                      if ([*(id *)(v318 + v243[459]) stillImageOutputSensorInterfaceRawAttachmentOptionRetainedBufferCount])
                      {
                        CFStringRef v245 = (const __CFString *)*MEMORY[0x1E4F530E0];
                        uint64_t v246 = (id)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F530E0], 0);
                        uint64_t v247 = (__CVBuffer *)[v246 objectForKeyedSubscript:*MEMORY[0x1E4F52F90]];
                        if (v247) {
                          -[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachment:sampleBuffer:attachedMediaKey:removeAttachmentKey:resetValidBufferRect:](v318, v247, sbuf, 0x1EFA74360, v245, 0);
                        }

                        v243 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
                      }
                      if ([*(id *)(v318 + v243[459]) stillImageOutputSashimiRawAttachmentOptionRetainedBufferCount])-[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachmentFromSampleBuffer:attachmentKey:usingAttachedMediaKey:resetValidBufferRect:](v318, sbuf, (CFStringRef)*MEMORY[0x1E4F53110], v248, 0); {
                      if ([*(id *)(v318 + v243[459]) stillImageOutputSushiRawAttachmentOptionSupportEnabled]&& *(unsigned char *)(v318 + 10840))
                      }
                      {
                        -[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachmentFromSampleBuffer:attachmentKey:usingAttachedMediaKey:resetValidBufferRect:](v318, sbuf, (CFStringRef)*MEMORY[0x1E4F53188], v249, 1);
                      }
                      if ([*(id *)(v318 + v243[459]) stillImageOutputFocusPixelDataAttachmentOptionRetainedBufferCount]&& (CMAttachmentBearerRef v250 = -[BWMultiStreamCameraSourceNode _createFocusPixelDataSampleBufferFromVideoSampleBuffer:]((CMAttachmentBearerRef)v318, sbuf)) != 0)
                      {
                        uint64_t v251 = v250;
                        BWSampleBufferSetAttachedMedia(sbuf, 0x1EFA743C0, (uint64_t)v250);
                        CFRelease(v251);
                        char v244 = 1;
                        v243 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
                      }
                      else
                      {
                        char v244 = 1;
                      }
LABEL_388:
                      uint64_t v252 = [*(id *)(v318 + v243[459]) visionDataConfiguration];
                      if ((v244 & 1) == 0)
                      {
                        if (v252)
                        {
                          CFStringRef v253 = (const __CFString *)*MEMORY[0x1E4F531C0];
                          CFTypeRef v254 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F531C0], 0);
                          if (v254)
                          {
                            unsigned int v255 = (__CVBuffer *)CFAutorelease(v254);
                            if (v255)
                            {
                              float v256 = v255;
                              type.long long value = 0;
                              long long v257 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
                              *(_OWORD *)&buffer.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
                              *(_OWORD *)&buffer.decodeTimeStamp.long long value = v257;
                              buffer.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
                              long long v258 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
                              *(_OWORD *)&buffer.duration.long long value = *MEMORY[0x1E4F1FA70];
                              *(_OWORD *)&buffer.duration.CMTimeEpoch epoch = v258;
                              if ((*(void *)(v318 + 11032)
                                 || !CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v255, (CMVideoFormatDescriptionRef *)(v318 + 11032)))&& !CMSampleBufferGetSampleTimingInfo(sbuf, 0, &buffer))
                              {
                                CMSampleBufferCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v256, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(v318 + 11032), &buffer, (CMSampleBufferRef *)&type);
                              }
                              if (type.value)
                              {
                                CFTypeRef v259 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F218], 0);
                                if (v259)
                                {
                                  int v260 = (void *)v259;
                                  int v261 = (void *)[*(id *)(v318 + 312) visionDataConfiguration];
                                  objc_msgSend((id)objc_msgSend(v261, "objectForKeyedSubscript:", *MEMORY[0x1E4F554E8]), "floatValue");
                                  int v263 = BWGetScaledCameraIntrinsicsMatrix(v260, 1.0 / v262);
                                  if (v263) {
                                    CMSetAttachment((CMAttachmentBearerRef)type.value, @"VisionDataCameraIntrinsicMatrix", v263, 1u);
                                  }
                                }
                                BWSampleBufferSetAttachedMedia(sbuf, 0x1EFA60460, type.value);
                                CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55B50], MEMORY[0x1E4F1CC38], 1u);
                                CVBufferRemoveAttachment(pixelBuffer, v253);
                                if (type.value) {
                                  CFRelease((CFTypeRef)type.value);
                                }
                              }
                            }
                          }
                        }
                      }
                      uint64_t v264 = *v305;
                      if (v264 == [(id)v318 previewOutput]
                        && (objc_msgSend((id)objc_msgSend((id)v318, "configuration"), "preLTMThumbnailOnPreviewOutputEnabled") & 1) != 0|| (uint64_t v265 = *v305, v265 == objc_msgSend((id)v318, "videoCaptureOutput"))&& objc_msgSend((id)objc_msgSend((id)v318, "configuration"), "preLTMThumbnailOnVideoCaptureOutputEnabled"))
                      {
                        CFStringRef v266 = (const __CFString *)*MEMORY[0x1E4F53B70];
                        int v267 = (__CVBuffer *)CMGetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F53B70], 0);
                        if (v267)
                        {
                          float v268 = v267;
                          type.long long value = 0;
                          CMSampleBufferGetPresentationTimeStamp(&buffer.duration, sbuf);
                          if (BWSampleBufferCreateFromPixelBuffer(v268, (uint64_t)&buffer, (CFTypeRef *)(v170 + ((void)v302 << 9) + 48), (CMSampleBufferRef *)&type))
                          {
LABEL_469:
                            FigDebugAssert3();
                            long long v70 = sbuf;
                            goto LABEL_262;
                          }
                          CFTypeRef v269 = CVBufferCopyAttachment(v268, key, 0);
                          if (v269)
                          {
                            CFDictionaryRef v270 = (const __CFDictionary *)CFAutorelease(v269);
                            if (v270)
                            {
                              CFMutableDictionaryRef v271 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v270);
                              CMSetAttachment((CMAttachmentBearerRef)type.value, key, v271, 1u);
                              CMSetAttachment(v268, key, v271, 1u);
                              if (v271) {
                                CFRelease(v271);
                              }
                            }
                          }
                          BWSampleBufferSetAttachedMedia(sbuf, 0x1EFA68BE0, type.value);
                          if (type.value) {
                            CFRelease((CFTypeRef)type.value);
                          }
                          CVBufferRemoveAttachment(pixelBuffer, v266);
                        }
                      }
                      uint64_t v272 = *v305;
                      if ((v272 != [(id)v318 previewOutput]
                         || (objc_msgSend((id)objc_msgSend((id)v318, "configuration"), "postColorProcessingThumbnailOnPreviewOutputEnabled") & 1) == 0)&& ((v273 = *v305, v273 != objc_msgSend((id)v318, "videoCaptureOutput"))|| !objc_msgSend((id)objc_msgSend((id)v318, "configuration"), "postColorProcessingThumbnailOnVideoCaptureOutputEnabled"))|| (CFStringRef v274 = (const __CFString *)*MEMORY[0x1E4F53B68], (v275 = (__CVBuffer *)CMGetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F53B68], 0)) == 0))
                      {
LABEL_428:
                        uint64_t v280 = v170 + ((void)v302 << 9);
                        if (*(_DWORD *)(v280 + 184) && !*(unsigned char *)(v280 + 494)) {
                          -[BWMultiStreamCameraSourceNode _tallyCompressedIOSurfaceStatsForSBuf:outputStorage:](v318, sbuf, v297);
                        }
                        if ((v313 & 4) != 0 && *(unsigned char *)(v318 + 11028)) {
                          -[BWMultiStreamCameraSourceNode _tallyCompressedIOSurfaceStatsForRawForSBuf:]((BWStats *)v318, sbuf);
                        }
                        if (v73 == *(void **)(v318 + 216)) {
                          FigCaptureMetadataUtilitiesAdjustValidBufferRectForDarkShadeCropping(sbuf);
                        }
                        if (*(unsigned char *)(v170 + ((void)v302 << 9) + 495))
                        {
                          IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
                          IOSurfaceID ID = IOSurfaceGetID(IOSurface);
                        }
                        else
                        {
                          IOSurfaceID ID = 0;
                        }
                        char v283 = (v73 == *(void **)(v318 + 216)) & ~v244;
                        long long v70 = sbuf;
                        if ((v283 & 1) == 0)
                        {
                          [v73 emitSampleBuffer:sbuf];
                          uint64_t v284 = v170 + ((void)v302 << 9);
                          CMSampleBufferGetPresentationTimeStamp((CMTime *)time2, sbuf);
                          *(_OWORD *)(v284 + 56) = *(_OWORD *)time2;
                          *(CMAttachmentBearerRef *)(v284 + 72) = time2[2];
                          if (v322 == 1)
                          {
                            memset(time2, 0, 24);
                            CMSampleBufferGetPresentationTimeStamp((CMTime *)time2, sbuf);
                            uint64_t v285 = *(void **)(v284 + 80);
                            long long v330 = *(_OWORD *)time2;
                            CMAttachmentBearerRef v331 = time2[2];
                            [v285 incrementWithPTS:&v330];
                          }
                        }
                        if (*(unsigned char *)(v170 + ((void)v302 << 9) + 496)) {
                          -[BWMultiStreamCameraSourceNode _prefetchPixelBufferForOutputStorage:numberOfBuffersToFetch:lastEmittedSurfaceID:](v318, v297, 2, ID);
                        }
                        long long v6 = v320;
                        double v180 = cfa;
                        if (!cfa) {
                          goto LABEL_447;
                        }
                        [*(id *)(v318 + 104) sourceNodeWillEmitDetectedFacesSampleBuffer:cfa];
                        [*(id *)(v318 + 232) emitSampleBuffer:cfa];
LABEL_446:
                        CFRelease(v180);
                        goto LABEL_447;
                      }
                      double v276 = v275;
                      time2[0] = 0;
                      CMSampleBufferGetPresentationTimeStamp(&type, sbuf);
                      if (!BWSampleBufferCreateFromPixelBuffer(v276, (uint64_t)&type, (CFTypeRef *)(v170 + ((void)v302 << 9) + 48), (CMSampleBufferRef *)time2))
                      {
                        CFTypeRef v277 = CVBufferCopyAttachment(v276, key, 0);
                        if (v277)
                        {
                          CFDictionaryRef v278 = (const __CFDictionary *)CFAutorelease(v277);
                          if (v278)
                          {
                            CFMutableDictionaryRef v279 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v278);
                            CMSetAttachment(time2[0], key, v279, 1u);
                            CMRemoveAttachment(v276, key);
                            if (v279) {
                              CFRelease(v279);
                            }
                          }
                        }
                        BWSampleBufferSetAttachedMedia(sbuf, 0x1EFA74960, (uint64_t)time2[0]);
                        if (time2[0]) {
                          CFRelease(time2[0]);
                        }
                        CVBufferRemoveAttachment(pixelBuffer, v274);
                        goto LABEL_428;
                      }
                      goto LABEL_469;
                    }
                    int v213 = [*(id *)(v318 + 104) synchronizedStreamsEnabled];
                    int v214 = [*(id *)(v318 + 312) discardsUnstableSphereVideoFrames];
                    float v215 = (void *)CMGetAttachment(v70, key, 0);
                    if (!v215)
                    {
                      if (v307 == 1) {
                        goto LABEL_332;
                      }
                      goto LABEL_315;
                    }
                    if (v307 <= 0xC)
                    {
                      if (((1 << v307) & 0x1C7C) == 0)
                      {
                        if (v307 == 1) {
                          goto LABEL_332;
                        }
                        goto LABEL_315;
                      }
                      uint64_t v216 = v215;
                      if ((!v214 || (mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(v215) & 1) == 0)
                        && (!v213
                         || objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F542E0]), "BOOLValue")))
                      {
                        float v217 = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v70);
                        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v217);
                        if ((FigCapturePixelFormatIsVersatileRaw(PixelFormatType) & 1) == 0
                          && !objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F54350]), "intValue"))
                        {
                          if (((1 << v307) & 0x1C48) != 0)
                          {
                            char v219 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue");
                            goto LABEL_312;
                          }
                          if ((v307 & 0xFFFFFFFE) == 4)
                          {
                            if (objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F53250]), "intValue") != 1)
                            {
                              int v286 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue");
                              char v219 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue");
                              if (v286) {
                                goto LABEL_313;
                              }
LABEL_312:
                              if (v219)
                              {
LABEL_313:
                                -[BWMultiStreamCameraSourceNode _prependPreservedMotionDataToSampleBuffer:](v318, v70);
                                -[BWMultiStreamCameraSourceNode _reflectStillSampleBufferOnStreamingOutputs:captureType:](v318, (CMSampleBufferRef)v70, v307);
                                goto LABEL_332;
                              }
                            }
                          }
                          else if (v307 != 2 {
                                 || (objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E4F54188]), "BOOLValue") & 1) == 0)
                          }
                          {
                            goto LABEL_313;
                          }
                        }
                      }
                    }
LABEL_315:
                    memset(&buffer, 0, 24);
                    CMSampleBufferGetPresentationTimeStamp(&buffer.duration, (CMSampleBufferRef)v70);
                    uint64_t v220 = 0;
                    *(void *)&long long v330 = *MEMORY[0x1E4F1F9F8];
                    unsigned int v221 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
                    DWORD2(v330) = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
                    double v222 = (unsigned char *)(v318 + 388);
                    while (!v222[5] || (*v222 & 4) == 0)
                    {
                      ++v220;
                      v222 += 512;
                      if (v220 == 20)
                      {
                        LODWORD(v220) = 0;
                        goto LABEL_321;
                      }
                    }
                    CMTimeEpoch v223 = v312;
                    if ((v220 & 0x80000000) != 0) {
                      goto LABEL_322;
                    }
LABEL_321:
                    unint64_t v224 = v318 + 384 + ((unint64_t)v220 << 9);
                    *(void *)&long long v330 = *(void *)(v224 + 56);
                    unsigned int v221 = *(_DWORD *)(v224 + 68);
                    DWORD2(v330) = *(_DWORD *)(v224 + 64);
                    CMTimeEpoch v223 = *(void *)(v224 + 72);
LABEL_322:
                    if ((v221 & 0x1D) == 1)
                    {
                      CMTime type = buffer.duration;
                      time2[0] = (CMAttachmentBearerRef)v330;
                      time2[1] = (CMAttachmentBearerRef)__PAIR64__(v221, DWORD2(v330));
                      time2[2] = (CMAttachmentBearerRef)v223;
                      if (CMTimeCompare(&type, (CMTime *)time2) >= 1) {
                        -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v318, v70);
                      }
                    }
                    goto LABEL_325;
                  }
                  [v314 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F53320]];
                  if (v132)
                  {
                    if ([*(id *)(v318 + 312) geometricDistortionCorrectionOnStillImageOutputEnabled]&& !((unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(sbuf) >> 62))
                    {
                      if ((objc_msgSend((id)CMGetAttachment(sbuf, @"BWStillImageCaptureSettings", 0), "captureFlags") & 4) != 0)
                      {
                        uint64_t v182 = (void *)[v314 objectForKeyedSubscript:*MEMORY[0x1E4F54220]];
                        double v183 = v314;
                        uint64_t v184 = v122;
LABEL_282:
                        [v183 setObject:v182 forKeyedSubscript:v184];
                        goto LABEL_283;
                      }
LABEL_281:
                      uint64_t v184 = *MEMORY[0x1E4F53328];
                      uint64_t v182 = &unk_1EFB00DB8;
                      double v183 = v314;
                      goto LABEL_282;
                    }
                  }
                  else
                  {
                    if (v322 != 1)
                    {
                      ++multiStreamCameraSourceNode_outputSampleBuffer_errorLogCounter;
                      goto LABEL_283;
                    }
                    if (v73 == *(void **)(v318 + 208)
                      && ([*(id *)(v318 + 312) geometricDistortionCorrectionOnVideoCaptureOutputEnabled] & 1) != 0
                      || v73 == *(void **)(v318 + 200)
                      && [*(id *)(v318 + 312) geometricDistortionCorrectionOnPreviewOutputEnabled])
                    {
                      goto LABEL_281;
                    }
                  }
LABEL_283:
                  if ((v323 - 3) <= 2)
                  {
                    float v185 = (void *)MEMORY[0x1E4F533E8];
                    if (*(unsigned char *)(v318 + 11066))
                    {
                      unint64_t v186 = BWPixelBufferDimensionsFromSampleBuffer(sbuf);
                      BWAddMinimumValidBufferRectForGDCIfNeededToSampleBuffer(v314, v186, objc_msgSend((id)objc_msgSend(*(id *)(v318 + 96), "cameraInfoByPortType"), "objectForKeyedSubscript:", v299), (void **)(v318 + 11072));
                      long long v187 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
                      *(_OWORD *)CMTime time2 = *MEMORY[0x1E4F1DB20];
                      *(_OWORD *)&time2[2] = v187;
                      if (FigCFDictionaryGetCGRectIfPresent())
                      {
                        double FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
                        double v190 = v189;
                        double v192 = v191;
                        double v194 = v193;
                        psn_pixelBufferDimensions(pixelBuffer);
                        if (dword_1EB4C56D0)
                        {
                          LODWORD(v330) = 0;
                          unint64_t v195 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v196 = v330;
                          if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT)) {
                            unsigned int v197 = v196;
                          }
                          else {
                            unsigned int v197 = v196 & 0xFFFFFFFE;
                          }
                          if (v197)
                          {
                            int v198 = BWStringFromCGRect(*(double *)time2, *(double *)&time2[1], *(double *)&time2[2], *(double *)&time2[3]);
                            unint64_t v199 = BWStringFromCGRect(FinalCropRect, v190, v192, v194);
                            FigCaptureMetadataUtilitiesDenormalizeCropRect(FinalCropRect, v190, v192, v194);
                            BOOL v204 = BWStringFromCGRect(v200, v201, v202, v203);
                            LODWORD(type.value) = 136315906;
                            *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
                            LOWORD(type.flags) = 2114;
                            *(void *)((char *)&type.flags + 2) = v198;
                            HIWORD(type.epoch) = 2114;
                            uint64_t v333 = v199;
                            __int16 v334 = 2114;
                            uint64_t v335 = v204;
                            LODWORD(v296) = 42;
                            p_CMTime type = &type;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          int v132 = v317;
                        }
                      }
                      long long v70 = sbuf;
                      uint64_t v170 = v309;
                    }
                    else
                    {
                      psn_pixelBufferDimensions(pixelBuffer);
                      double ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
                      CGFloat v207 = v206;
                      CGFloat v209 = v208;
                      CGFloat v211 = v210;
                      if (dword_1EB4C56D0)
                      {
                        LODWORD(time2[0]) = 0;
                        LOBYTE(v330) = 0;
                        int v212 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v212, (os_log_type_t)v330);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        uint64_t v170 = v309;
                        int v132 = v317;
                        double v181 = v314;
                      }
                      v341.origin.double x = ValidBufferRect;
                      v341.origin.double y = v207;
                      v341.size.CGFloat width = v209;
                      v341.size.CGFloat height = v211;
                      [v181 setObject:CGRectCreateDictionaryRepresentation(v341) forKeyedSubscript:*v185];
                      long long v70 = sbuf;
                    }
                  }
                  goto LABEL_299;
                }
                if (v323 == 6)
                {
                  int v179 = [*(id *)(v318 + 104) sourceNodeWillEmitDepthSampleBuffer:sbuf];
                }
                else
                {
                  if (v323 != 7)
                  {
                    if (v315)
                    {
                      [*(id *)(v318 + 104) sourceNodeWillEmitDetectedFacesSampleBuffer:sbuf];
                    }
                    else if (v322 == 1)
                    {
                      int v179 = [*(id *)(v318 + 104) sourceNodeWillEmitVideoSampleBuffer:sbuf drivesCameraControls:(v313 >> 2) & 1 deliversStills:(*(_DWORD *)v300 & 3) != 0];
                      goto LABEL_259;
                    }
                    unsigned int v178 = 0;
                    goto LABEL_261;
                  }
                  int v179 = [*(id *)(v318 + 104) sourceNodeWillEmitPointCloudSampleBuffer:sbuf];
                }
LABEL_259:
                unsigned int v178 = 0;
                goto LABEL_260;
              }
            }
            -[BWMultiStreamCameraSourceNode _attachCameraIntrinsicMatrixToSampleBuffer:scaledToVideoBuffer:addToMetadataDictInTotalSensorCoords:](v318, sbuf, 0, v169);
            goto LABEL_228;
          }
          uint64_t v166 = v7;
          uint64_t v167 = [v314 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
          uint64_t v168 = (void *)MEMORY[0x1E4F53DC8];
          if (v167)
          {
            int v158 = 0;
            if ([v314 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]])
            {
              uint64_t v7 = v166;
              int v132 = v317;
              goto LABEL_209;
            }
            unsigned int v163 = (double *)MEMORY[0x1E4F1DB20];
          }
          else
          {
            unsigned int v163 = (double *)MEMORY[0x1E4F1DB20];
            objc_msgSend(*(id *)(v318 + 10888), "transferFacesToSampleBuffer:totalSensorCropRect:", sbuf, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
            int v158 = 0;
            if ([v314 objectForKeyedSubscript:*v168])
            {
              uint64_t v7 = v166;
              int v132 = v317;
              goto LABEL_200;
            }
          }
          uint64_t v7 = v166;
          int v132 = v317;
          goto LABEL_199;
        }
      }
      uint64_t v162 = v309 + ((void)v7 << 9);
      double v164 = *(double *)(v162 + 136);
      double v165 = *(double *)(v162 + 144);
      unsigned int v163 = (double *)(v162 + 136);
      objc_msgSend(*(id *)(v318 + 10888), "transferFacesToSampleBuffer:totalSensorCropRect:", sbuf, v164, v165, v163[2], v163[3]);
      int v158 = 0;
LABEL_199:
      objc_msgSend(*(id *)(v318 + 10896), "transferObjectsToSampleBuffer:totalSensorCropRect:", sbuf, *v163, v163[1], v163[2], v163[3]);
LABEL_200:
      [*(id *)(v318 + 10904) filterDetectedFacesInSampleBuffer:sbuf];
      long long v161 = &OBJC_IVAR___BWStreamStartStopSynchronizer__timeoutInSeconds;
      goto LABEL_209;
    }
LABEL_134:
    uint64_t v101 = v71 + ((void)v7 << 9);
    int v103 = *(unsigned __int8 *)(v101 + 8);
    uint64_t v102 = (unsigned char *)(v101 + 8);
    if (!v103 && !*(unsigned char *)(v318 + 11040))
    {
      int v316 = (int)v74;
      uint64_t v308 = v71;
      *uint64_t v102 = 1;
      -[BWMultiStreamCameraSourceNode _createAndStartFrameCounterForOutputIndexIfNecessary:](v318, v323);
      long long v329 = 0u;
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)target = 0u;
      uint64_t v104 = -[BWMultiStreamCameraSourceNode _nodeOutputsMadeLiveByStreamOutputIndex:](v318, v323);
      uint64_t v105 = [v104 countByEnumeratingWithState:target objects:v337 count:16];
      if (v105)
      {
        uint64_t v106 = v105;
        double v301 = v7;
        uint64_t v107 = *(void *)v327;
        do
        {
          for (uint64_t i = 0; i != v106; ++i)
          {
            if (*(void *)v327 != v107) {
              objc_enumerationMutation(v104);
            }
            long long v109 = (void *)*((void *)target[1] + i);
            if (v109 == v73) {
              goto LABEL_146;
            }
            long long v110 = (void *)(v318 + 400);
            uint64_t v111 = 20;
            while (!*((unsigned char *)v110 - 7) || (void *)*v110 != v109)
            {
              v110 += 64;
              if (!--v111) {
                goto LABEL_146;
              }
            }
            long long v112 = v110[2];
            if (!v112)
            {
LABEL_146:
              if (!objc_msgSend(*((id *)target[1] + i), "liveFormat", p_buffer)) {
                [v109 makeConfiguredFormatLive];
              }
            }
            else
            {
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = __multiStreamCameraSourceNode_outputSampleBuffer_block_invoke;
              block[3] = &unk_1E5C24430;
              block[4] = v109;
              dispatch_async(v112, block);
            }
          }
          uint64_t v106 = [v104 countByEnumeratingWithState:target objects:v337 count:16];
        }
        while (v106);
        uint64_t v7 = v301;
        long long v70 = sbuf;
        uint64_t v71 = v308;
      }
      LODWORD(v74) = v316;
    }
    goto LABEL_154;
  }
LABEL_448:
}

uint64_t BWSampleBufferCreateFromPixelBuffer(__CVBuffer *a1, uint64_t a2, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(void *)uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(_OWORD *)&v7[8] = *(_OWORD *)a2;
  *(void *)&v7[24] = *(void *)(a2 + 16);
  long long v8 = v6;
  uint64_t v9 = *(void *)v7;
  *(_OWORD *)&v5.presentationTimeStamp.timescale = *(_OWORD *)&v7[16];
  *(_OWORD *)&v5.decodeTimeStamp.long long value = v6;
  v5.decodeTimeStamp.CMTimeEpoch epoch = *(void *)v7;
  *(_OWORD *)&v5.duration.long long value = v6;
  *(_OWORD *)&v5.duration.CMTimeEpoch epoch = *(_OWORD *)v7;
  return BWSampleBufferCreateFromPixelBufferWithTimingInfo(a1, &v5, a3, a4);
}

uint64_t BWSampleBufferCreateFromPixelBufferWithTimingInfo(CVImageBufferRef imageBuffer, CMSampleTimingInfo *sampleTiming, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  if (imageBuffer && a3 && a4)
  {
    CFTypeRef v8 = *a3;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v10 = 1;
    CFTypeID v11 = (const opaqueCMFormatDescription *)*a3;
    while (1)
    {
      float v12 = v11;
      if (!v11)
      {
        uint64_t v13 = CMVideoFormatDescriptionCreateForImageBuffer(v9, imageBuffer, &formatDescriptionOut);
        if (v13) {
          break;
        }
        float v12 = formatDescriptionOut;
      }
      uint64_t v13 = CMSampleBufferCreateForImageBuffer(v9, imageBuffer, 1u, 0, 0, v12, sampleTiming, &sampleBufferOut);
      BOOL v14 = v13 == -12743 && formatDescriptionOut == 0;
      BOOL v15 = v14;
      if (v13 && !v15) {
        break;
      }
      if (v15) {
        CFTypeID v11 = 0;
      }
      if (!sampleBufferOut)
      {
        char v16 = (v8 != 0) & v10;
        char v10 = 0;
        if (v16) {
          continue;
        }
      }
      uint64_t v17 = 0;
      *a4 = sampleBufferOut;
      goto LABEL_21;
    }
    uint64_t v17 = v13;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v17 = 4294954516;
  }
LABEL_21:
  CMVideoFormatDescriptionRef v18 = formatDescriptionOut;
  if (formatDescriptionOut)
  {
    if (*a3)
    {
      CFRelease(*a3);
      CMVideoFormatDescriptionRef v18 = formatDescriptionOut;
    }
    *a3 = v18;
  }
  return v17;
}

uint64_t BWSampleBufferCreateFromDataBufferWithNumberOfPoints(__CVBuffer *a1, uint64_t a2, CMMediaType a3, CFTypeRef *a4, CMAttachmentBearerRef *a5, unsigned int a6)
{
  long long v6 = a4;
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  CMAttachmentBearerRef target = 0;
  long long v34 = 0u;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  CMFormatDescriptionRef formatDescriptionOut = 0;
  if (a1 && a4 && a5)
  {
    CFTypeRef v9 = *a4;
    long long v32 = *MEMORY[0x1E4F1F9F8];
    *(void *)&v33[0] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(_OWORD *)((char *)v33 + _Block_object_dispose(&STACK[0x4E0], 8) = *(_OWORD *)a2;
    *((void *)&v33[1] + 1) = *(void *)(a2 + 16);
    long long v34 = v32;
    uint64_t v35 = *(void *)&v33[0];
    uint64_t v10 = *MEMORY[0x1E4F21640];
    uint64_t v11 = *MEMORY[0x1E4F1EE20];
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v13 = 1;
    CFTypeRef v14 = v9;
    do
    {
      if (!v14)
      {
        if (a3 == 1885564004)
        {
          v37[0] = v10;
          uint64_t v15 = [NSNumber numberWithInt:a6];
          v37[1] = v11;
          v38[0] = v15;
          v38[1] = MEMORY[0x1E4F1CC08];
          CFDictionaryRef v16 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:2];
        }
        else
        {
          CFDictionaryRef v16 = 0;
        }
        FourCharCode v17 = MEMORY[0x1A6270560](a1);
        uint64_t ReadyForCVDataBuffer = CMFormatDescriptionCreate(v12, a3, v17, v16, &formatDescriptionOut);
        if (ReadyForCVDataBuffer) {
          goto LABEL_32;
        }
      }
      uint64_t ReadyForCVDataBuffer = CMSampleBufferCreateReadyForCVDataBuffer();
      BOOL v19 = ReadyForCVDataBuffer == -12743 && formatDescriptionOut == 0;
      BOOL v20 = v19;
      if (ReadyForCVDataBuffer && !v20)
      {
LABEL_32:
        uint64_t v25 = ReadyForCVDataBuffer;
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_26;
      }
      if (v20) {
        CFTypeRef v14 = 0;
      }
      if (target) {
        break;
      }
      char v21 = (v9 != 0) & v13;
      char v13 = 0;
    }
    while ((v21 & 1) != 0);
    CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F530E0];
    CFTypeRef v23 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530E0], 0);
    if (v23)
    {
      CFTypeRef v24 = CFAutorelease(v23);
      if (v24) {
        CMSetAttachment(target, v22, v24, 1u);
      }
    }
    uint64_t v25 = 0;
    *a5 = target;
LABEL_26:
    long long v6 = a4;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v25 = 4294954516;
  }
  CMFormatDescriptionRef v26 = formatDescriptionOut;
  if (formatDescriptionOut)
  {
    if (*v6)
    {
      CFRelease(*v6);
      CMFormatDescriptionRef v26 = formatDescriptionOut;
    }
    CFTypeRef *v6 = v26;
  }
  return v25;
}

uint64_t BWInferenceVersionMakeMajor(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t BWCIFilterArrayContainsPortraitEffectFilters(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(a1);
        }
        NSClassFromString(&cfstr_Ciportraiteffe_8.isa);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(&cfstr_Ciportraiteffe_9.isa);
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            continue;
          }
        }
        return 1;
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t result = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t cs_updateConfigurationsWithPreviewSinkProperties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7, double a8, double a9, double a10)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  BOOL v19 = objc_msgSend(a1, "connectionConfigurations", 0);
  uint64_t result = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v22 = *(void *)v28;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v28 != v22) {
          objc_enumerationMutation(v19);
        }
        CFTypeRef v24 = (void *)[*(id *)(*((void *)&v27 + 1) + 8 * v23) videoPreviewSinkConfiguration];
        if (objc_msgSend((id)objc_msgSend(v24, "sinkID"), "isEqual:", a2))
        {
          [v24 setFilters:a3];
          *(float *)&double v25 = a6;
          [v24 setSimulatedAperture:v25];
          *(float *)&double v26 = a7;
          [v24 setPortraitLightingEffectStrength:v26];
          [v24 setSemanticStyle:a4];
          if ([v24 primaryCaptureRectModificationEnabled])
          {
            [v24 setPrimaryCaptureRectAspectRatio:a8];
            objc_msgSend(v24, "setPrimaryCaptureRectCenter:", a9, a10);
            [v24 setPrimaryCaptureRectUniqueID:a5];
          }
        }
        ++v23;
      }
      while (v21 != v23);
      uint64_t result = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
      uint64_t v21 = result;
    }
    while (result);
  }
  return result;
}

uint64_t csp_portraitPhotoModeEnabled(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 192) previewDepthDataDeliveryEnabled]) {
      unsigned int v2 = [*(id *)(a1 + 192) previewDepthFilterRenderingEnabled];
    }
    else {
      unsigned int v2 = 0;
    }
    uint64_t v3 = *(void **)(a1 + 208);
  }
  else
  {
    if ([0 previewDepthDataDeliveryEnabled]) {
      unsigned int v2 = [0 previewDepthFilterRenderingEnabled];
    }
    else {
      unsigned int v2 = 0;
    }
    uint64_t v3 = 0;
  }
  if (FigCaptureConnectionConfigurationWithSinkType(v3, 4)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t csp_cinematicVideoEnabled(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 192) previewDepthDataDeliveryEnabled]) {
      unsigned int v2 = [*(id *)(a1 + 192) previewDepthFilterRenderingEnabled];
    }
    else {
      unsigned int v2 = 0;
    }
    uint64_t v3 = *(void **)(a1 + 208);
  }
  else
  {
    if ([0 previewDepthDataDeliveryEnabled]) {
      unsigned int v2 = [0 previewDepthFilterRenderingEnabled];
    }
    else {
      unsigned int v2 = 0;
    }
    uint64_t v3 = 0;
  }
  if (FigCaptureConnectionConfigurationWithSinkType(v3, 4)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t csp_maxLossyCompressionLevelForConnectionConfigurations(void *a1, unsigned int *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    uint64_t v7 = 3;
LABEL_3:
    uint64_t v8 = 0;
    while (2)
    {
      if (*(void *)v13 != v6) {
        objc_enumerationMutation(a1);
      }
      switch(objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v8), "sinkConfiguration"), "sinkType"))
      {
        case 1u:
        case 0xCu:
          if (!a2) {
            goto LABEL_19;
          }
          uint64_t v9 = a2[69];
          goto LABEL_15;
        case 3u:
          if (!a2) {
            goto LABEL_19;
          }
          uint64_t v9 = a2[72];
          goto LABEL_15;
        case 4u:
        case 0xAu:
          if (!a2) {
            goto LABEL_19;
          }
          uint64_t v9 = a2[71];
          goto LABEL_15;
        case 6u:
          if (a2)
          {
            uint64_t v9 = a2[70];
LABEL_15:
            if ((int)v7 >= (int)v9) {
              goto LABEL_16;
            }
          }
          else
          {
LABEL_19:
            if ((v7 & 0x80000000) == 0)
            {
              uint64_t v9 = 0;
LABEL_16:
              uint64_t v7 = v9;
            }
          }
LABEL_17:
          if (v5 != ++v8) {
            continue;
          }
          uint64_t v10 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
          uint64_t v5 = v10;
          if (!v10) {
            return v7;
          }
          goto LABEL_3;
        default:
          goto LABEL_17;
      }
    }
  }
  return 3;
}

uint64_t captureDeferredPhotoProcessorRemote_PrewarmSerialized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm())
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  v10[0] = 0;
  v10[1] = 0;
  if (!a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 4294954516;
    goto LABEL_9;
  }
  uint64_t ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, v10);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1],
        [v7 encodeObject:a2 forKey:*MEMORY[0x1E4F284E8]],
        [v7 encodedData],
        v7,
        uint64_t ObjectID = FigXPCMessageSetCFData(),
        ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFData(), ObjectID))
  {
    uint64_t v8 = ObjectID;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_9;
  }
  uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  if (v8)
  {
LABEL_9:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_10:
  FigXPCRelease();
  return v8;
}

uint64_t csr_serializeObjectUsingNSSecureCoding(uint64_t a1)
{
  unsigned int v2 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  [v2 encodeObject:a1 forKey:*MEMORY[0x1E4F284E8]];
  uint64_t v3 = [v2 encodedData];

  return v3;
}

BOOL FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm()
{
  return BWDeviceSupportsDeferredPhotoProcessorPrewarming();
}

BOOL BWDeviceSupportsDeferredPhotoProcessorPrewarming()
{
  if (BWDeviceIsiPhone_onceToken != -1) {
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_59);
  }
  if (!BWDeviceIsiPhone_isiPhone) {
    return 0;
  }
  if ([&unk_1EFB03098 containsObject:FigCaptureGetModelSpecificName()]) {
    return 1;
  }
  return (int)FigCapturePlatformIdentifier() > 9;
}

uint64_t captureDeferredPhotoProcessorRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t BWCIFilterArrayContainsFiltersRequiringSegmentation(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(a1);
        }
        NSClassFromString(&cfstr_Ciportraiteffe_0.isa);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(&cfstr_Ciportraiteffe_2.isa);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(&cfstr_Ciportraiteffe_4.isa);
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              NSClassFromString(&cfstr_Ciportraiteffe_6.isa);
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                NSClassFromString(&cfstr_Ciportraiteffe_7.isa);
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  continue;
                }
              }
            }
          }
        }
        return 1;
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t result = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t captureSourceRemote_SetProperty(uint64_t a1)
{
  uint64_t v5 = 0;
  if (*(int *)(CMBaseObjectGetDerivedStorage() + 48) < 1)
  {
    uint64_t v3 = 4294950844;
    goto LABEL_4;
  }
  uint64_t ObjectID = captureSourceRemote_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v3 = FigXPCSendStdSetPropertyMessage();
  if (v3)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t getVCPCaptureAnalysisSubjectMotionScoreKey()
{
  uint64_t VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc = getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc();
  if (!VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc) {
    getVCPCaptureAnalysisSubjectMotionScoreKey_cold_1();
  }
  return *(void *)VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc;
}

uint64_t getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr;
  uint64_t v6 = getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr)
  {
    long long v1 = (void *)MediaAnalysisLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "VCPCaptureAnalysisSubjectMotionScoreKey");
    getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A591AD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVCPCaptureAnalysisMotionDivScoreKey()
{
  uint64_t VCPCaptureAnalysisMotionDivScoreKeySymbolLoc = getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc();
  if (!VCPCaptureAnalysisMotionDivScoreKeySymbolLoc) {
    getVCPCaptureAnalysisMotionDivScoreKey_cold_1();
  }
  return *(void *)VCPCaptureAnalysisMotionDivScoreKeySymbolLoc;
}

uint64_t getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr;
  uint64_t v6 = getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr)
  {
    long long v1 = (void *)MediaAnalysisLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "VCPCaptureAnalysisMotionDivScoreKey");
    getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A591AE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t mv2ip_inputAttachedMediaKeyForMattingOutputType(int a1)
{
  uint64_t result = 0;
  if (a1 > 15)
  {
    if (a1 <= 63)
    {
      if (a1 == 16) {
        return 0x1EFA6A280;
      }
      if (a1 == 32) {
        return 0x1EFA6A2A0;
      }
      return result;
    }
    if (a1 == 64) {
      return 0x1EFA6A2C0;
    }
    if (a1 != 128) {
      return result;
    }
    return 0x1EFA6A200;
  }
  switch(a1)
  {
    case 2:
      return 0x1EFA6A200;
    case 4:
      return 0x1EFA6A220;
    case 8:
      return 0x1EFA6A260;
  }
  return result;
}

__CFString *mv2ip_outputAttachedMediaKeyForMattingOutputType(int a1)
{
  uint64_t result = 0;
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        return @"PersonSemanticsSky";
      }
      else if (a1 == 128)
      {
        return @"LowResPersonSegmentationMaskClone";
      }
    }
    else if (a1 == 16)
    {
      return @"PersonSemanticsTeeth";
    }
    else if (a1 == 32)
    {
      return @"PersonSemanticsGlasses";
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        uint64_t result = @"RefinedDepth";
        break;
      case 2:
        uint64_t result = @"PersonSegmentationMask";
        break;
      case 4:
        uint64_t result = @"PersonSemanticsHair";
        break;
      case 8:
        uint64_t result = @"PersonSemanticsSkin";
        break;
      default:
        return result;
    }
  }
  return result;
}

__SecTask *FigCaptureClientHasEntitlement(_OWORD *a1, __CFString *a2)
{
  if (![(__CFString *)a2 length]) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v5 = a1[1];
  *(_OWORD *)v10.val = *a1;
  *(_OWORD *)&v10.val[4] = v5;
  uint64_t v6 = SecTaskCreateWithAuditToken(v4, &v10);
  if (!v6) {
    return 0;
  }
  long long v7 = v6;
  long long v8 = FigCaptureClientHasEntitlementWithSecTask(v6, a2);
  CFRelease(v7);
  return v8;
}

void cso_handleCaptureSessionNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return;
  }
  if (FigCFEqual())
  {
    cso_postDeferredmediadImmediateTerminationNotificationIfNecessary((uint64_t)a4);
    long long v22 = 0u;
    long long v23 = 0u;
    objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"ClientAuditToken"), "getBytes:length:", &v22, 32);
    long long v24 = v22;
    long long v25 = v23;
    if (FigCaptureGetPIDFromAuditToken(&v24) != -1)
    {
      char v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56900), "BOOLValue");
      char v9 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56920), "BOOLValue");
      char v10 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56940), "BOOLValue");
      long long v24 = v22;
      long long v25 = v23;
      uint64_t v11 = a2;
      int v12 = 1;
LABEL_5:
      -[FigCaptureSessionObservatory _setStatus:clientAuditToken:containsVideoSource:containsStillImageSink:containsMovieFileSink:forCaptureSession:](v11, v12, &v24, v8, v9, v10, a4);
      return;
    }
LABEL_19:
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  if (FigCFEqual())
  {
    if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56960), "BOOLValue"))
    {
      char v13 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56900), "BOOLValue");
      char v14 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56920), "BOOLValue");
      char v15 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56940), "BOOLValue");
      -[FigCaptureSessionObservatory _captureSessionDidReconfigureWhileRunning:containsVideoSource:containsStillImageSink:containsMovieFileSink:](a2, a4, v13, v14, v15);
    }
    return;
  }
  if (FigCFEqual())
  {
    cso_postDeferredmediadImmediateTerminationNotificationIfNecessary((uint64_t)a4);
    long long v22 = 0u;
    long long v23 = 0u;
    objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"ClientAuditToken"), "getBytes:length:", &v22, 32);
    long long v24 = v22;
    long long v25 = v23;
    if (FigCaptureGetPIDFromAuditToken(&v24) != -1)
    {
      char v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56900), "BOOLValue");
      char v9 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56920), "BOOLValue");
      char v10 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1EFA56940), "BOOLValue");
      long long v24 = v22;
      long long v25 = v23;
      uint64_t v11 = a2;
      int v12 = 2;
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    -[FigCaptureSessionObservatory _resetFigAssetWriterRecordingsCountForCaptureSession:](a2, a4);
    -[FigCaptureSessionObservatory _setStatus:clientAuditToken:containsVideoSource:containsStillImageSink:containsMovieFileSink:forCaptureSession:](a2, 0, (long long *)&unk_1A5F0C480, 0, 0, 0, a4);
    return;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if ([a5 objectForKeyedSubscript:@"ErrorStatus"]) {
      return;
    }
    uint64_t v17 = [a5 objectForKeyedSubscript:@"SectionID"];
    uint64_t v18 = a2;
    char v19 = 1;
    goto LABEL_28;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    uint64_t v17 = [a5 objectForKeyedSubscript:@"SectionID"];
    uint64_t v18 = a2;
    char v19 = 0;
LABEL_28:
    -[FigCaptureSessionObservatory _setMovieFileOutputRecording:sectionID:forCaptureSession:](v18, v19, v17, a4);
    return;
  }
  if (FigCFEqual())
  {
    uint64_t v20 = a2;
    char v21 = 1;
  }
  else
  {
    if (!FigCFEqual()) {
      return;
    }
    uint64_t v20 = a2;
    char v21 = 0;
  }
  -[FigCaptureSessionObservatory _setFigAssetWriterRecording:forCaptureSession:](v20, v21, a4);
}

void cso_postDeferredmediadImmediateTerminationNotificationIfNecessary(uint64_t a1)
{
  if (cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_onceToken != -1) {
    dispatch_once(&cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_onceToken, &__block_literal_global_125);
  }
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFAllocatorRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(a1, @"CaptureSession_IsCameraOrDerivative", *MEMORY[0x1E4F1CF80], &cf);
  }
  if (FigCFEqual()) {
    BOOL v5 = cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_sSupportsDeferredProcessing == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    notify_post(kFigCaptureDeferredNotification_deferredmediadImmediateTermination);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t captureSession_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    if (a2)
    {
      char v9 = DerivedStorage;
      if (CFEqual(a2, @"CaptureSession_RemoteVideoPreviewEnabled"))
      {
        char v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        if (!v9[208]) {
          char v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
      }
      else
      {
        if (!CFEqual(a2, @"CaptureSession_IsCameraOrDerivative")) {
          return 4294954512;
        }
        int IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
        char v10 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        if (!IsCameraOrDerivative) {
          char v10 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
      }
      CFTypeRef v12 = CFRetain(*v10);
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

void fig_dispatch_async_autoreleasepool(NSObject *a1, void *a2)
{
  uint64_t v3 = (void *)[a2 copy];
  dispatch_async_f(a1, v3, (dispatch_function_t)_executeBlockWithAutoreleasePool);
}

void __captureSession_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  if ([*(id *)(a1 + 32) isEqualToString:@"WillStartRunning"])
  {
    uint64_t v3 = kFigCaptureSessionWillStartRunningNotificationPayloadKey_ClientAuditToken;
  }
  else
  {
    if (![*(id *)(a1 + 32) isEqualToString:@"DidStartRunning"]) {
      goto LABEL_7;
    }
    uint64_t v3 = kFigCaptureSessionDidStartRunningNotificationPayloadKey_ClientAuditToken;
  }
  CFAllocatorRef v4 = (void *)[*(id *)(a1 + 40) objectForKeyedSubscript:*v3];
  if (v4)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    [v4 getBytes:&v17 length:32];
    uint64_t v5 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(v5 + 36);
    v16[0] = *(_OWORD *)(v5 + 20);
    v16[1] = v6;
    [NSString stringWithFormat:@", payload PIOSurfaceID ID = %d", FigCaptureGetPIDFromAuditToken(v16)];
  }
LABEL_7:
  if (!*(unsigned char *)(*(void *)(a1 + 48) + 160))
  {
    v19[0] = @"WillStartRunning";
    v19[1] = @"DidStartRunning";
    void v19[2] = @"DidStopRunning";
    long long v7 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:3];
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 84));
    uint64_t v8 = *(void *)(a1 + 48);
    long long v9 = *(_OWORD *)(v8 + 36);
    long long v17 = *(_OWORD *)(v8 + 20);
    long long v18 = v9;
    BOOL IsValid = FigCaptureAuditTokenIsValid((uint64_t)&v17);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 84));
    if (![v7 containsObject:*(void *)(a1 + 32)] || IsValid)
    {
      if (!dword_1EB4C5110) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (!dword_1EB4C5110) {
    goto LABEL_14;
  }
LABEL_22:
  char v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
  CFTypeRef v12 = *(const void **)(a1 + 32);
  if (v12) {
    CFRelease(v12);
  }
  char v13 = *(const void **)(a1 + 40);
  if (v13) {
    CFRelease(v13);
  }
  char v14 = *(const void **)(a1 + 56);
  if (v14) {
    CFRelease(v14);
  }
}

uint64_t BWUpdateCameraIntrinsicsMatrixOnSampleBuffer(const void *a1, const __CFString *a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t result = (uint64_t)CMGetAttachment(a1, a2, 0);
  if (result)
  {
    long long v25 = (void *)result;
    if (a3 == 90 || a3 == 270)
    {
      double v26 = a12;
      a12 = a11;
    }
    else
    {
      double v26 = a11;
    }
    double v27 = a12 / a8;
    double v28 = v26 / a7;
    if (a3 || (v28 == 1.0 ? (BOOL v29 = v27 == 1.0) : (BOOL v29 = 0), !v29 || (a4 & 1) != 0 || a5 != a9 || a6 != a10))
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      if ([(id)result length] != 48) {
        return 4294954516;
      }
      objc_msgSend(v25, "getBytes:length:", &v49, objc_msgSend(v25, "length"));
      float v30 = *(float *)&v49;
      float v31 = *((float *)&v50 + 1);
      uint64_t v32 = v51;
      if (a3 == 270) {
        float v33 = *((float *)&v50 + 1);
      }
      else {
        float v33 = *(float *)&v49;
      }
      if (a3 == 270) {
        double v34 = v27;
      }
      else {
        double v34 = v28;
      }
      if (a3 == 270) {
        float v35 = *(float *)&v49;
      }
      else {
        float v35 = *((float *)&v50 + 1);
      }
      if (a3 == 270) {
        double v36 = v28;
      }
      else {
        double v36 = v27;
      }
      if (a3 == 90)
      {
        double v37 = v27;
      }
      else
      {
        float v31 = v33;
        double v37 = v34;
      }
      if (a3 == 90)
      {
        double v38 = v28;
      }
      else
      {
        float v30 = v35;
        double v38 = v36;
      }
      double v39 = v37 * v31;
      float v40 = v38 * v30;
      double v41 = a6;
      float v42 = v39;
      memset(&v48, 0, sizeof(v48));
      CGAffineTransformMakeTranslation(&v48, -a5, -v41);
      CGAffineTransformMakeScale(&t2, v28, v27);
      CGAffineTransform t1 = v48;
      CGAffineTransformConcat(&v47, &t1, &t2);
      CGAffineTransform v48 = v47;
      FigCaptureMakeMirrorAndRotateVideoTransform((int)(v28 * a7 + -1.0), (int)(v27 * a8 + -1.0), a4, a3, (uint64_t)&v44);
      CGAffineTransform t1 = v48;
      CGAffineTransformConcat(&v47, &t1, &v44);
      CGAffineTransform v48 = v47;
      *(float *)&long long v49 = v42;
      *((float *)&v50 + 1) = v40;
      *(float32x2_t *)&long long v51 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)&v47.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v47.c, *((float *)&v32 + 1)), *(float64x2_t *)&v47.a, *(float *)&v32)));
      int v43 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v49 length:48];
      CMSetAttachment(a1, a2, v43, 1u);
    }
    return 0;
  }
  return result;
}

double FigCaptureMakeMirrorAndRotateVideoTransform@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = MEMORY[0x1E4F1DAB8];
  long long v10 = *MEMORY[0x1E4F1DAB8];
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a5 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a5 + 16) = v11;
  long long v12 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a5 + 32) = v12;
  if (a3)
  {
    t2.a = -1.0;
    t2.b = 0.0;
    t2.c = 0.0;
    t2.d = 1.0;
    t2.tdouble x = (double)a1;
    t2.tdouble y = 0.0;
    *(_OWORD *)&t1.a = v10;
    *(_OWORD *)&t1.c = v11;
    *(_OWORD *)&t1.tdouble x = v12;
    CGAffineTransformConcat((CGAffineTransform *)a5, &t1, &t2);
  }
  switch(a4)
  {
    case 270:
      long long v19 = xmmword_1A5EFD730;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v20 = 0x3FF0000000000000;
      double v23 = (double)a1;
      long long v15 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v15;
      *(_OWORD *)&v25.tdouble x = *(_OWORD *)(a5 + 32);
      char v14 = (CGAffineTransform *)&v19;
      goto LABEL_9;
    case 180:
      v24.a = -1.0;
      v24.b = 0.0;
      v24.c = 0.0;
      v24.d = -1.0;
      v24.tdouble x = (double)a1;
      v24.tdouble y = (double)a2;
      long long v16 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v16;
      *(_OWORD *)&v25.tdouble x = *(_OWORD *)(a5 + 32);
      char v14 = &v24;
      goto LABEL_9;
    case 90:
      v26[0] = xmmword_1A5EFD700;
      v26[1] = xmmword_1A5EFD720;
      double v27 = (double)a2;
      uint64_t v28 = 0;
      long long v13 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v13;
      *(_OWORD *)&v25.tdouble x = *(_OWORD *)(a5 + 32);
      char v14 = (CGAffineTransform *)v26;
LABEL_9:
      CGAffineTransformConcat(&t1, &v25, v14);
      long long v17 = *(_OWORD *)&t1.c;
      *(_OWORD *)a5 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a5 + 16) = v17;
      *(CGFloat *)&long long v10 = t1.tx;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)&t1.tx;
      break;
  }
  return *(double *)&v10;
}

void *BWInvertRowMajorViewMatrixData(void *result)
{
  if (result)
  {
    int32x4_t v20 = 0u;
    int32x4_t v21 = 0u;
    int32x4_t v19 = 0u;
    objc_msgSend(result, "getBytes:length:", &v19, objc_msgSend(result, "length"));
    int32x4_t v1 = vzip1q_s32(v19, v21);
    int32x4_t v2 = vzip1q_s32(v20, (int32x4_t)0);
    int32x4_t v3 = vzip1q_s32(v1, v2);
    int32x4_t v4 = vzip2q_s32(v1, v2);
    int32x4_t v5 = vzip1q_s32(vzip2q_s32(v19, v21), vdupq_laneq_s32(v20, 2));
    int32x4_t v6 = vzip1q_s32(v3, v5);
    int32x4_t v7 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 1);
    float32x4_t v8 = (float32x4_t)vzip1q_s32(v6, v4);
    float32x2x2_t v9 = (float32x2x2_t)vtrn2q_s32(v3, v4);
    v9.val[1].i32[0] = v5.i32[1];
    float32x4_t v10 = (float32x4_t)vzip1q_s32(vzip2q_s32(v3, v5), vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
    int32x4_t v11 = vzip2q_s32(v6, v7);
    int32x4_t v12 = (int32x4_t)vnegq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, (float32x4_t)v19, 3), (float32x4_t)v9, (float32x4_t)v20, 3), v10, (float32x4_t)v21, 3));
    float32x2x2_t v13 = (float32x2x2_t)vzip1q_s32((int32x4_t)v8, (int32x4_t)v10);
    v9.val[0] = (float32x2_t)vzip2q_s32((int32x4_t)v8, (int32x4_t)v10).u64[0];
    int32x4_t v14 = vzip1q_s32(v11, v12);
    v10.i64[0] = vzip2q_s32(v11, v12).u64[0];
    long long v15 = (float *)v17;
    vst2_f32(v15, v13);
    v15 += 4;
    *(int32x4_t *)long long v15 = vzip2q_s32((int32x4_t)v13, v14);
    long long v16 = (float *)&v18;
    vst2_f32(v16, v9);
    return (void *)[MEMORY[0x1E4F1C9B8] dataWithBytes:v17 length:48];
  }
  return result;
}

uint64_t FigCaptureLargestDimensionsFromDimensionsArray(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (result)
  {
    uint64_t v3 = result;
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(a1);
        }
        float32x4_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unsigned int v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"width"), "intValue");
        unsigned int v10 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"height"), "intValue");
        int v11 = v5 * v4;
        if ((int)(v10 * v9) <= (int)v5 * (int)v4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v10;
        }
        if ((int)(v10 * v9) <= v11) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v3);
    return v5 | (v4 << 32);
  }
  return result;
}

uint64_t BWDimensionsWithQSubResolutionFlavor(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA80] set];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        unsigned int v10 = (void *)[a1 objectForKeyedSubscript:v9];
        if (objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2)))
        {
          int v11 = (void *)[a1 objectForKeyedSubscript:v9];
          objc_msgSend(v4, "addObject:", objc_msgSend(v11, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2)));
        }
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
  uint64_t result = [v4 count];
  if (result) {
    return [v4 allObjects];
  }
  return result;
}

id sipc_prepareDescriptor(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(NSClassFromString(&cfstr_Softispprepare.isa));
  [v4 setMaximumWidth:(int)a1];
  [v4 setMaximumHeight:a1 >> 32];
  [v4 setInputPixelFormat:a2];
  return v4;
}

uint64_t FigDepthBytesPerPixelForDepthFormat(int a1)
{
  uint64_t result = 2;
  if (a1 > 1717856626)
  {
    if (a1 > 1751411058)
    {
      if (a1 == 1751411059) {
        return result;
      }
      int v3 = 1932996149;
LABEL_11:
      if (a1 == v3) {
        return result;
      }
      return 0;
    }
    if (a1 != 1717856627)
    {
      int v3 = 1751410032;
      goto LABEL_11;
    }
    return 4;
  }
  if (a1 != 825306677 && a1 != 825437747)
  {
    if (a1 != 1717855600) {
      return 0;
    }
    return 4;
  }
  return result;
}

BOOL __fcdpe_resolveFormatsAndUpdateSettings_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1EFA53CC0), "objectForKeyedSubscript:", @"DeviceType"), "intValue") == *(_DWORD *)(a1 + 32);
}

uint64_t csp_stabilizationMethodWithMostOverscan(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)v10;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)v10 != v5) {
        objc_enumerationMutation(a1);
      }
      uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
      if ([v7 intValue] != 4 && (int)v4 <= (int)objc_msgSend(v7, "intValue")) {
        uint64_t v4 = [v7 intValue];
      }
    }
    uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  }
  while (v3);
  return v4;
}

uint64_t getVNClassifyFaceAttributesRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNClassifyFaceAttributesRequestClass_softClass;
  uint64_t v8 = getVNClassifyFaceAttributesRequestClass_softClass;
  if (!getVNClassifyFaceAttributesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyFaceAttributesRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getVNClassifyFaceAttributesRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A592530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWVNSetRequestConcurrentTasksProcessingTimeout(uint64_t a1)
{
  VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc = (uint64_t (*)(uint64_t))getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc();
  if (!VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc) {
    BWVNSetRequestConcurrentTasksProcessingTimeout_cold_1();
  }
  return VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc(a1);
}

uint64_t getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr;
  uint64_t v6 = getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr;
  if (!getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr)
  {
    int32x4_t v1 = (void *)VisionLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "VNSetRequestConcurrentTasksProcessingTimeout");
    getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5925440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNGenerateFaceSegmentsRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNGenerateFaceSegmentsRequestClass_softClass;
  uint64_t v8 = getVNGenerateFaceSegmentsRequestClass_softClass;
  if (!getVNGenerateFaceSegmentsRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNGenerateFaceSegmentsRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getVNGenerateFaceSegmentsRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A59255A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *BWLoadProcessorBundle(uint64_t a1, uint64_t a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v4 = (void *)[@"/System/Library/VideoProcessors" stringByAppendingPathComponent:a1];
  if (a2 != -1) {
    uint64_t v4 = objc_msgSend(v4, "stringByAppendingFormat:", @"V%d", a2);
  }
  uint64_t v5 = [v4 stringByAppendingPathExtension:@"bundle"];
  uint64_t v6 = (void *)[MEMORY[0x1E4F28B50] bundleWithPath:v5];
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v9 = 0;
    if (([v6 loadAndReturnError:&v9] & 1) == 0) {
      return 0;
    }
  }
  return v7;
}

uint64_t csp_shouldEnableLightSourceMask(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a1 isVideoGreenGhostMitigationUsesLightSourceMaskAndKeypointDescriptorData];
  if (result)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t result = [a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(a2);
          }
          uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * v6);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0
            && (objc_msgSend((id)objc_msgSend(v7, "sinkConfiguration"), "sinkType") & 0xFFFFFFFD) == 4
            && ([v7 videoGreenGhostMitigationEnabled] & 1) != 0)
          {
            return 1;
          }
          ++v6;
        }
        while (v4 != v6);
        uint64_t result = [a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        uint64_t v4 = result;
        if (result) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t figVideoCaptureStream_blackenFrameIfNecessary(uint64_t a1, void *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 352);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 352));
  if (*(unsigned char *)(a1 + 356)) {
    BOOL v5 = *(unsigned char *)(a1 + 357) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  os_unfair_lock_unlock(v4);
  uint64_t v6 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  memset(&v11, 0, sizeof(v11));
  CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)a2);
  if ((objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FF0]), "BOOLValue") & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 1144))
    {
      if (!v5) {
        return 0;
      }
    }
    else
    {
      if (*MEMORY[0x1E4F1EBA8] == 1)
      {
        CMTime time = v11;
        CMTimeGetSeconds(&time);
        kdebug_trace();
      }
      *(unsigned char *)(a1 + 1144) = 1;
      if (!v5) {
        return 0;
      }
    }
  }
  CMSetAttachment(a2, @"FrameIsBlackened", MEMORY[0x1E4F1CC38], 1u);
  if (!CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2))
  {
    CFTypeRef CVDataBuffer = BWSampleBufferGetCVDataBuffer((opaqueCMSampleBuffer *)a2);
    if (CVDataBuffer)
    {
      long long v9 = (void *)[objc_alloc((Class)getADMutableJasperPointCloudClass()) initWithDataBuffer:CVDataBuffer];
      [v9 blacken];
    }
    return 0;
  }
  uint64_t v7 = VTFillPixelBufferWithBlack();
  if (v7) {
    FigDebugAssert3();
  }
  return v7;
}

void fvcs_removeSampleBufferPixelBufferMetadata(opaqueCMSampleBuffer *a1)
{
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  CMRemoveAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E4F53070]);
  CMRemoveAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E4F530C0]);
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F52FE8];
  CMRemoveAttachment(ImageBuffer, v2);
}

uint64_t FigCaptureDeviceCoreRepairStatusesByKeys()
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_304);
  }
  if (FigCaptureDeviceCoreRepairStatusesByKeys_sOnceToken != -1) {
    dispatch_once(&FigCaptureDeviceCoreRepairStatusesByKeys_sOnceToken, &__block_literal_global_168);
  }
  return FigCaptureDeviceCoreRepairStatusesByKeys_sDeviceCoreRepairStatusesByKeys;
}

uint64_t FigCaptureDeviceIORegValuesByKeys()
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_304);
  }
  if (FigCaptureDeviceIORegValuesByKeys_sOnceToken != -1) {
    dispatch_once(&FigCaptureDeviceIORegValuesByKeys_sOnceToken, &__block_literal_global_158);
  }
  return FigCaptureDeviceIORegValuesByKeys_sDeviceIORegValuesByKeys;
}

uint64_t roEnqueueConfigurationLive(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int32x4_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  CMTime v11 = Context;
  if (Context) {
    pthread_mutex_lock(*Context);
  }
  if (*(_DWORD *)a2 != 5 || !*(void *)(a2 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v13 = 0;
    uint64_t v16 = 4294950629;
    goto LABEL_12;
  }
  long long v12 = CFAllocatorAllocate(a1, 72, 0);
  uint64_t v13 = v12;
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v16 = 4294950630;
    goto LABEL_12;
  }
  int32x4_t v20 = v12;
  uint64_t v21 = 0;
  int v22 = *(_DWORD *)(a2 + 4);
  v12[8] = 0;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)long long v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *long long v12 = 0x5726D6F70;
  v12[2] = *(void *)(a2 + 8);
  double v12[4] = v12;
  v12[3] = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  v13[8] = *(void *)(a2 + 24);
  SerializableDictionaryForFormatDescriptiouint64_t n = FigRemote_CreateSerializableDictionaryForFormatDescription();
  if (SerializableDictionaryForFormatDescription
    || (SerializableDictionaryForFormatDescriptiouint64_t n = roSerializePropertyListData(a1, 0, v13),
        SerializableDictionaryForFormatDescription))
  {
    uint64_t v16 = SerializableDictionaryForFormatDescription;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_12;
  }
  if (a4) {
    uint64_t v15 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)&v20, 1uLL, a5);
  }
  else {
    uint64_t v15 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)&v20, 1uLL);
  }
  uint64_t v16 = v15;
  if (v15)
  {
    fig_log_get_emitter();
    goto LABEL_28;
  }
LABEL_12:
  if (v13)
  {
    if (v16)
    {
      uint64_t v17 = 6;
      if ((void *)v13[4] == v13) {
        uint64_t v17 = 5;
      }
      FigSharedMemBlockRelease(v13[v17]);
      v13[5] = 0;
      v13[6] = 0;
    }
    else
    {
      Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(v13[5]);
      if (Region) {
        CFRelease(Region);
      }
    }
    CFAllocatorDeallocate(a1, v13);
  }
  if (v11) {
    pthread_mutex_unlock(*v11);
  }
  return v16;
}

uint64_t FigCaptureMetadataUtilitiesCreateMakerNoteFlatDictionary(void *target, const __CFAllocator *a2, const __CFAllocator *a3, const void **a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  long long value = 0;
  CFDictionaryRef v8 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v8)
  {
    CFDictionaryRef v9 = v8;
    KeySpec = *a4;
    if (!*a4)
    {
      if (CFDictionaryGetValueIfPresent(v8, (const void *)*MEMORY[0x1E4F53BC0], (const void **)&value)) {
        unsigned int Length = CFDataGetLength((CFDataRef)value);
      }
      else {
        unsigned int Length = 0;
      }
      int MakerNoteKeySpace = FigFlatDictionaryGetMakerNoteKeySpace();
      KeySpec = (const void *)FigFlatDictionaryCreateKeySpec(a2, MakerNoteKeySpace, 0x5Bu);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Version_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEMatrix_opaque, Length, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Timestamp_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEStable_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AETarget_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEAverage_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFStable_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SISMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_HDRMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_BurstUUID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthAverageCurrent_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereMotionDataStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OISMode_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AssetIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_QRMOutputType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereExternalForceOffset_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageCaptureType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ImageGroupIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosOriginatingSignature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageCaptureFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosRenderOriginatingSignature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageProcessingFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotoTranscodeQualityHint_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosRenderEffect_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_BracketedCaptureSequenceNumber_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LuminanceNoiseAmplitude_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OriginatingAppID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosAppFeatureFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ImageCaptureRequestIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_MeteorHeadroom_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ARKitPhoto_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFPerformance_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFExternalOffset_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSceneFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSNRType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSNR_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_UBMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SpatialOverCaptureGroupIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_iCloudServerSoftwareVersionForDynamicallyGeneratedMedia_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotoIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SpatialOverCaptureImageType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_CCT_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ApsMode_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusPosition_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_MeteorPlusGainMap_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageProcessingHomography_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_IntelligentDistortionCorrection_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFInputBracketCount_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFRegisteredBracketCount_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LuxLevel_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LastFocusingMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMeasuredDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorROIType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFSRLStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SystemPressureLevel_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_CameraControlsStatisticsMaster_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorSensorConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ColorCorrectionMatrix_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_GreenGhostMitigationStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SemanticStyle_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FrontFacing_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorContainsBlindSpot_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderFocusMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderROIType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ZeroShutterLagFailureReason_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMSPMeasuredDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMSPSensorConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Camera_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusPixelBlurScore_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorTemperature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotometerInfo_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereFaultStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereComplianceErrorCounts_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereMaxTemperature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorBlackLevelResidual_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SmartStyle_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEFaceAverage_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AlchemistVersion_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SlowSyncFlashDuration_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NoiseModel_opaque, 0, 0);
      FigFlatDictionaryKeySpecCommit((uint64_t)KeySpec);
      *a4 = KeySpec;
    }
    uint64_t Mutable = FigFlatDictionaryCreateMutable((uint64_t)a2, a3, (uint64_t)KeySpec);
    if (Mutable)
    {
      uint64_t v12 = Mutable;
      FigFlatDictionarySetInt32(Mutable, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Version_opaque, 3);
      CFDictionaryRef v15 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
      if (v15) {
        CMTimeMakeFromDictionary(&v39, v15);
      }
      else {
        CMSampleBufferGetPresentationTimeStamp(&v39, (CMSampleBufferRef)target);
      }
      CMTimeValue v40 = v39.value;
      CMTimeScale timescale = v39.timescale;
      if (v39.flags)
      {
        v39.long long value = v40;
        v39.CMTimeScale timescale = timescale;
        FigFlatDictionarySetCMTime(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Timestamp_opaque, (__n128 *)&v39);
      }
      CFDataRef theData = 0;
      if (CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E4F53BC0], (const void **)&theData))
      {
        unsigned int v16 = CFDataGetLength(theData);
        BytePtr = CFDataGetBytePtr(theData);
        FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEMatrix_opaque, BytePtr, v16);
      }
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEStable_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BC8]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AETarget_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BD8]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEAverage_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53B98]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFStable_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53BF0]), "intValue"));
      uint64_t v18 = *MEMORY[0x1E4F532F8];
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F532F8]), "objectAtIndexedSubscript:", 0), "floatValue");
      v38[0] = v19;
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v18), "objectAtIndexedSubscript:", 1), "floatValue");
      v38[1] = v20;
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v18), "objectAtIndexedSubscript:", 2), "floatValue");
      v38[2] = v21;
      FigFlatDictionarySetArrayDataType(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, 5);
      FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, v38, 0xCu);
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SISMethod_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53458]), "intValue"));
      if (!CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E4F54280], (const void **)&value)) {
        goto LABEL_36;
      }
      int v22 = value;
      if ([value isEqual:*MEMORY[0x1E4F54E78]])
      {
        int v23 = 0;
      }
      else if ([v22 isEqual:*MEMORY[0x1E4F54E68]])
      {
        int v23 = 1;
      }
      else if ([v22 isEqual:*MEMORY[0x1E4F54E60]])
      {
        int v23 = 2;
      }
      else if ([v22 isEqual:*MEMORY[0x1E4F54E80]])
      {
        int v23 = 3;
      }
      else if ([v22 isEqual:*MEMORY[0x1E4F54E88]])
      {
        int v23 = 4;
      }
      else
      {
        if (![v22 isEqual:*MEMORY[0x1E4F54E70]])
        {
LABEL_36:
          FigFlatDictionarySetInt16(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_HDRMethod_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F30]), "intValue"));
          if (CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E4F54270], (const void **)&value))
          {
            CGAffineTransform v24 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DE0]);
            CGAffineTransform v25 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DE8]);
            double v26 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DA8]);
            if (v24 && v25)
            {
              [v24 floatValue];
              float v28 = v27 * 0.0039062;
              [v25 floatValue];
              *(float *)&v39.long long value = v28;
              *((float *)&v39.value + 1) = v29 * 0.0039062;
              FigFlatDictionarySetArrayDataType(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, 5);
              FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, &v39, 8u);
            }
            if (v26) {
              FigFlatDictionarySetInt16(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthAverageCurrent_opaque, [v26 intValue]);
            }
          }
          uint64_t v30 = *MEMORY[0x1E4F53FA0];
          if (CFDictionaryContainsKey(v9, (const void *)*MEMORY[0x1E4F53FA0])) {
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereMotionDataStatus_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v30), "intValue"));
          }
          uint64_t v31 = *MEMORY[0x1E4F54290];
          if (CFDictionaryContainsKey(v9, (const void *)*MEMORY[0x1E4F54290])) {
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereStatus_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v31), "intValue"));
          }
          uint64_t v32 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55AC0], 0);
          long long value = v32;
          if (v32) {
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_QRMOutputType_opaque, [v32 intValue]);
          }
          float v35 = 0;
          if (CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E4F54128], (const void **)&v35))
          {
            int v33 = fcmu_cameraFromPortTypeAndCameraLocation(v35);
            if (v33) {
              FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Camera_opaque, v33);
            }
          }
          return v12;
        }
        int v23 = 5;
      }
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OISMode_opaque, v23);
      goto LABEL_36;
    }
    if (KeySpec) {
      CFRelease(KeySpec);
    }
    uint64_t v12 = 0;
    *a4 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    if (!CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F240], 0))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return v12;
}

uint64_t FigFlatDictionaryKeySpecAddKey(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 20) || *(_DWORD *)a2 != *(_DWORD *)(a1 + 28)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * *(int *)(a2 + 4));
  if (v9 == -1)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 36);
    unsigned int v14 = *(_DWORD *)(a1 + 24);
    if (v13 >= v14)
    {
      if (v14 + 4 >= FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(*(_DWORD *)a2)) {
        int NumberOfRegisteredKeys = FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(*(_DWORD *)(a1 + 28));
      }
      else {
        int NumberOfRegisteredKeys = *(_DWORD *)(a1 + 24) + 4;
      }
      *(_DWORD *)(a1 + 24) = NumberOfRegisteredKeys;
      CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)a1);
      int v20 = (char *)CFAllocatorReallocate(v19, *(void **)(a1 + 56), 4 * *(unsigned int *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 24), 0);
      int v21 = *(_DWORD *)(a1 + 36);
      int v22 = &v20[4 * *(unsigned int *)(a1 + 32)];
      *(void *)(a1 + 40) = v20;
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x4E0], 8) = v22;
      *(void *)(a1 + 56) = v20;
      CFDictionaryRef v15 = &v22[24 * v21];
    }
    else
    {
      CFDictionaryRef v15 = (char *)(v8 + 24 * v13);
    }
    *(void *)CFDictionaryRef v15 = a2;
    if ((*(_DWORD *)(a2 + 16) - 7) > 2)
    {
      if (*(void *)(a2 + 24) <= (unint64_t)a3) {
        *((_DWORD *)v15 + 3) = a3;
      }
      else {
        *((_DWORD *)v15 + 3) = FigFlatDictionaryKeyGetDefaultValueSize(a2);
      }
    }
    else
    {
      unint64_t v23 = a3 + 4;
      unint64_t v24 = *(void *)(a2 + 24);
      if (v23 >= v24) {
        *((_DWORD *)v15 + 3) = v23;
      }
      else {
        *((_DWORD *)v15 + 3) = v24;
      }
    }
    *((void *)v15 + 2) = a4;
    *(_DWORD *)(*(void *)(a1 + 40) + 4 * *(int *)(a2 + 4)) = (*(_DWORD *)(a1 + 36))++;
  }
  else
  {
    if ((*(_DWORD *)(a2 + 16) - 7) > 1)
    {
      uint64_t v16 = v8 + 24 * v9;
      unsigned int v17 = *(_DWORD *)(v16 + 12);
      if (v17 <= a3) {
        unsigned int v17 = a3;
      }
      *(_DWORD *)(v16 + 12) = v17;
    }
    else
    {
      unint64_t v10 = a3 + 4;
      uint64_t v11 = v8 + 24 * v9;
      if (v10 <= *(unsigned int *)(v11 + 12)) {
        LODWORD(v10) = *(_DWORD *)(v11 + 12);
      }
      *(_DWORD *)(v11 + 12) = v10;
    }
    *(void *)(v8 + 24 * v9 + 16) |= a4;
  }
  return 1;
}

uint64_t FigFlatDictionaryKeyGetDefaultValueSize(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result) {
    return kFigFlatDictionaryValueSizes[*(int *)(a1 + 16)];
  }
  return result;
}

uint64_t FigFlatDictionarySetInt32(uint64_t result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v7 = *(void *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          int v8 = *(_DWORD *)(*(void *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            uint64_t v10 = *(unsigned int *)(*(void *)(v7 + 48) + 24 * v8 + 8);
            uint64_t result = flatDictionary_setterCheck(result);
            if (result)
            {
              *(_DWORD *)(*(void *)(*(void *)(v3 + 24) + 40) + v10) = a3;
              uint64_t v11 = *(void *)(v3 + 24);
              int v12 = *(_DWORD *)(*(void *)(*(void *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(unsigned char *)(*(void *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t flatDictionary_setterCheck(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = 1;
  if (*(_DWORD *)(v2 + 16) != 1)
  {
    uint64_t v4 = FigFlatDictionaryContentCopy(*(const __CFAllocator **)v2, v2);
    *((_DWORD *)v4 + 4) = 1;
    *(void *)(a1 + 24) = v4;
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF, memory_order_relaxed) == 1) {
      FigFlatDictionaryContentDestroy((void *)v2);
    }
  }
  return v3;
}

uint64_t flatDictionary_create(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a3) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 20)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a3 + 36);
  if (!v5) {
    return 0;
  }
  int v8 = 0;
  int v9 = (int *)(*(void *)(a3 + 48) + 12);
  uint64_t v10 = *(unsigned int *)(a3 + 36);
  do
  {
    int v11 = *v9;
    v9 += 6;
    v8 += v11;
    --v10;
  }
  while (v10);
  if (!v8) {
    return 0;
  }
  int v12 = FigFlatDictionaryContentCreate(a2, (_DWORD *)a3, v8 + ((v5 + 7) >> 3) + 12);
  if (!v12) {
    return 0;
  }
  unsigned int v13 = v12;
  MEMORY[0x1A62711C0](&FigFlatDictionaryGetTypeID_sRegisterFigFlatDictionaryOnce, flatDictionary_register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(unsigned char *)(Instance + 16) = a5;
  *(void *)(Instance + 24) = v13;
  *((_DWORD *)v13 + 4) = 1;
  CFAllocatorRef v15 = v13[1];
  if (*((_DWORD *)v15 + 9))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = *((void *)v15 + 6);
      uint64_t v19 = *(void *)(v18 + v16);
      if (!v19) {
        goto LABEL_27;
      }
      unsigned int v20 = *(_DWORD *)(v19 + 16);
      if (v20 > 0xB) {
        goto LABEL_27;
      }
      if (((1 << v20) & 0xC7E) != 0)
      {
        uint64_t v21 = *(unsigned int *)(v18 + v16 + 8);
        if (a4)
        {
          int v22 = *(const void **)(a4 + 8 * v17);
          if (v22)
          {
            unint64_t v23 = (char *)v13[5] + v21;
            size_t v24 = *(void *)(v19 + 24);
LABEL_24:
            memcpy(v23, v22, v24);
            int v29 = *(_DWORD *)(*((void *)v13[1] + 5) + 4 * *(int *)(v19 + 4));
            *((unsigned char *)v13[4] + (v29 >> 3)) |= 1 << (v29 & 7);
            goto LABEL_27;
          }
        }
        FigFlatDictionaryKeyGetDefaultValue(v19, (char *)v13[5] + v21);
      }
      else if (((1 << v20) & 0x380) != 0)
      {
        uint64_t v25 = *(unsigned int *)(v18 + v16 + 8);
        if (!a4 || (double v26 = *(const char **)(a4 + 8 * v17)) == 0)
        {
          if (*(void *)(v19 + 32))
          {
            size_t v30 = (*(_DWORD *)(v19 + 24) - 4);
            *(_DWORD *)((char *)v13[5] + v25) = v30;
            memcpy((char *)v13[5] + v25 + 4, *(const void **)(v19 + 32), v30);
          }
          goto LABEL_27;
        }
        unsigned int v27 = *(_DWORD *)(v19 + 24) - 4;
        if (v20 == 7)
        {
          int v28 = strlen(v26);
          if (v27 >= v28 + 1) {
            unsigned int v27 = v28 + 1;
          }
        }
        *(_DWORD *)((char *)v13[5] + v25) = v27;
        unint64_t v23 = (char *)v13[5] + v25 + 4;
        int v22 = *(const void **)(a4 + 8 * v17);
        size_t v24 = v27;
        goto LABEL_24;
      }
LABEL_27:
      ++v17;
      CFAllocatorRef v15 = *(const __CFAllocator **)(*(void *)(Instance + 24) + 8);
      v16 += 24;
    }
    while (v17 < *((unsigned int *)v15 + 9));
  }
  return Instance;
}

void FigFlatDictionaryKeyGetDefaultValue(uint64_t a1, void *__dst)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (!v3)
  {
    uint64_t v4 = *(int *)(a1 + 16);
    if ((v4 - 7) <= 1)
    {
      bzero(__dst, *(void *)(a1 + 24));
      return;
    }
    uint64_t v3 = (const void *)FigFlatDictionaryDefaultDefaultValues[v4];
  }
  memcpy(__dst, v3, *(void *)(a1 + 24));
}

uint64_t FigFlatDictionarySetInt16(uint64_t result, uint64_t a2, __int16 a3)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v7 = *(void *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          int v8 = *(_DWORD *)(*(void *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            uint64_t v10 = *(unsigned int *)(*(void *)(v7 + 48) + 24 * v8 + 8);
            uint64_t result = flatDictionary_setterCheck(result);
            if (result)
            {
              *(_WORD *)(*(void *)(*(void *)(v3 + 24) + 40) + v10) = a3;
              uint64_t v11 = *(void *)(v3 + 24);
              int v12 = *(_DWORD *)(*(void *)(*(void *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(unsigned char *)(*(void *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionarySetData(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7) {
      return 1;
    }
    uint64_t v9 = *(unsigned int *)(a2 + 4);
    uint64_t result = 1;
    if ((v9 & 0x80000000) != 0) {
      return result;
    }
    uint64_t v10 = *(void *)(v7 + 8);
    if (v9 >= *(_DWORD *)(v10 + 32)) {
      return result;
    }
    int v11 = *(_DWORD *)(*(void *)(v10 + 40) + 4 * v9);
    if (v11 == -1) {
      return result;
    }
    uint64_t v13 = *(unsigned int *)(*(void *)(v10 + 48) + 24 * v11 + 8);
    if (!flatDictionary_setterCheck(a1)) {
      return 1;
    }
    uint64_t v14 = *(void *)(a1 + 24);
    if (*(_DWORD *)(*(void *)(*(void *)(v14 + 8) + 48)
                   + 24 * *(int *)(*(void *)(*(void *)(v14 + 8) + 40) + 4 * *(int *)(a2 + 4))
                   + 12)
       - 4 >= a4)
    {
      memcpy((void *)(*(void *)(v14 + 40) + v13 + 4), a3, a4);
      if (*(_DWORD *)(a2 + 16) == 8) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 40) + v13) = a4;
      }
      uint64_t v15 = *(void *)(a1 + 24);
      int v16 = *(_DWORD *)(*(void *)(*(void *)(v15 + 8) + 40) + 4 * *(int *)(a2 + 4));
      uint64_t result = 1;
      *(unsigned char *)(*(void *)(v15 + 32) + (v16 >> 3)) |= 1 << (v16 & 7);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 FigFlatDictionarySetCMTime(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v7 = *(void *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          int v8 = *(_DWORD *)(*(void *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            uint64_t v10 = *(unsigned int *)(*(void *)(v7 + 48) + 24 * v8 + 8);
            if (flatDictionary_setterCheck(a1))
            {
              int v12 = (__n128 *)(*(void *)(*(void *)(a1 + 24) + 40) + v10);
              __n128 result = *a3;
              v12[1].n128_u64[0] = a3[1].n128_u64[0];
              *int v12 = result;
              uint64_t v13 = *(void *)(a1 + 24);
              int v14 = *(_DWORD *)(*(void *)(*(void *)(v13 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(unsigned char *)(*(void *)(v13 + 32) + (v14 >> 3)) |= 1 << (v14 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionarySetArrayDataType(uint64_t result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 24);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(a2 + 4);
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v5 = *(void *)(v3 + 8);
        if (v4 < *(_DWORD *)(v5 + 32))
        {
          int v6 = *(_DWORD *)(*(void *)(v5 + 40) + 4 * v4);
          if (v6 != -1) {
            *(_DWORD *)(*(void *)(v3 + 40) + *(unsigned int *)(*(void *)(v5 + 48) + 24 * v6 + 8)) = a3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryCreateMutable(uint64_t a1, const __CFAllocator *a2, uint64_t a3)
{
  return flatDictionary_create(a1, a2, a3, 0, 1);
}

const __CFAllocator **FigFlatDictionaryContentCreate(const __CFAllocator *a1, _DWORD *a2, unsigned int a3)
{
  int v6 = (const __CFAllocator **)CFAllocatorAllocate(a1, 48, 0);
  uint64_t v7 = v6;
  if (v6)
  {
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)int v6 = 0u;
    CFAllocatorRef v8 = (const __CFAllocator *)CFAllocatorAllocate(a1, a3, 0);
    v7[3] = v8;
    if (v8)
    {
      bzero(v8, a3);
      CFAllocatorRef v9 = v7[3];
      *((_DWORD *)v9 + 2) = a2[4];
      CFAllocatorRef v10 = (const __CFAllocator *)((char *)v9 + 12);
      uint64_t v11 = (uint64_t)v9 + ((a2[9] + 7) >> 3) + 12;
      void v7[4] = v10;
      v7[5] = (const __CFAllocator *)v11;
      *uint64_t v7 = a1;
      v7[1] = (const __CFAllocator *)CFRetain(a2);
      *((_DWORD *)v7 + 5) = a3;
    }
    else
    {
      CFAllocatorDeallocate(a1, v7);
      return 0;
    }
  }
  return v7;
}

unint64_t FigSharedMemBlockAllocate(uint64_t a1, unint64_t a2)
{
  if (a2 && *(void *)(a1 + 32) > a2 && (uint64_t v3 = shmemPoolLookupSubPool(a1, a2)) != 0)
  {
    uint64_t v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
    uint64_t v5 = *(void **)v4;
    if (*(void *)v4)
    {
      while (1)
      {
        unint64_t v6 = *(void *)(a1 + 24) + *v5;
        if (!*(_DWORD *)(v6 + 4)) {
          break;
        }
        uint64_t v5 = (void *)v5[1];
        if (!v5) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(v6 + 4) = 1;
      goto LABEL_14;
    }
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
    uint64_t v7 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v7)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
      unint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(v4 + 16);
      if (v8 <= *(void *)(a1 + 32) - v9)
      {
        *uint64_t v7 = v8;
        *(void *)(a1 + 40) = v9 + v8;
        unint64_t v6 = *(void *)(a1 + 24) + v8;
        *(_DWORD *)(v6 + _Block_object_dispose(&STACK[0x4E0], 8) = v9;
        *(_DWORD *)(v6 + 12) = v8;
        *(void *)unint64_t v6 = 0x17368626BLL;
        v7[1] = 0;
        **(void **)(v4 + _Block_object_dispose(&STACK[0x4E0], 8) = v7;
        *(void *)(v4 + _Block_object_dispose(&STACK[0x4E0], 8) = v7 + 1;
LABEL_14:
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
        unint64_t v10 = v6 + 16;
        CFRetain(*(CFTypeRef *)(a1 + 16));
        uint64_t v7 = 0;
        goto LABEL_15;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
      fig_log_get_emitter();
    }
    else
    {
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v7 = 0;
  }
  unint64_t v10 = 0;
LABEL_15:
  free(v7);
  return v10;
}

uint64_t shmemPoolLookupSubPool(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 + 16;
  uint64_t result = *(void *)(a1 + 48);
  if ((unint64_t)(a2 + 16) > *(void *)(result + 16))
  {
    unint64_t v5 = *(void *)(a1 + 56) - 1;
    if (v3 <= *(void *)(result + 24 * v5 + 16))
    {
      if (v5 >= 2)
      {
        unint64_t v6 = 0;
        do
        {
          if (v3 <= *(void *)(result + 24 * ((v5 + v6) >> 1) + 16)) {
            unint64_t v5 = (v5 + v6) >> 1;
          }
          else {
            unint64_t v6 = (v5 + v6) >> 1;
          }
        }
        while (v5 - v6 > 1);
      }
      result += 24 * v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t shmemAllocatorAllocate(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return FigSharedMemBlockAllocate(a3, a1);
  }
  else {
    return 0;
  }
}

uint64_t roSerializePropertyListData(const __CFAllocator *a1, const void *a2, void *a3)
{
  CFErrorRef error = 0;
  if (!a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  CFDataRef v4 = CFPropertyListCreateData(a1, a2, kCFPropertyListBinaryFormat_v1_0, 0, &error);
  if (!v4)
  {
    if (error)
    {
      CFStringRef v5 = CFErrorCopyFailureReason(error);
      CFIndex Code = CFErrorGetCode(error);
      if (v5) {
        CFRelease(v5);
      }
      CFRelease(error);
      if (!Code) {
        goto LABEL_8;
      }
    }
    else
    {
      CFIndex Code = 4294962336;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return Code;
  }
LABEL_8:
  BytePtr = CFDataGetBytePtr(v4);
  uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress((uint64_t)BytePtr);
  a3[6] = RemoteAddress;
  if (!RemoteAddress)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFIndex Code = 4294950632;
    if (!v4) {
      return Code;
    }
    goto LABEL_10;
  }
  a3[5] = BytePtr;
  a3[7] = CFDataGetLength(v4);
  FigSharedMemBlockRetain((uint64_t)BytePtr);
  CFIndex Code = 0;
  if (v4) {
LABEL_10:
  }
    CFRelease(v4);
  return Code;
}

uint64_t FigFlatDictionaryGetMakerNoteKeySpace()
{
  if (sKeySpaceRegisterOnceToken != -1) {
    dispatch_once_f(&sKeySpaceRegisterOnceToken, 0, (dispatch_function_t)fdek_registerKeySpaceAndPredefinedMetadataKeys);
  }
  return sMetadataKeySpace;
}

uint64_t FigFlatDictionaryKeySpecCommit(uint64_t result)
{
  *(unsigned char *)(result + 20) = 1;
  *(_DWORD *)(result + 16) = atomic_fetch_add_explicit(sKeySpecNextIdentifier, 1u, memory_order_relaxed) + 1;
  uint64_t v1 = *(unsigned int *)(result + 36);
  if (v1)
  {
    int v2 = 0;
    unint64_t v3 = (int *)(*(void *)(result + 48) + 12);
    do
    {
      *(v3 - 1) = v2;
      int v4 = *v3;
      v3 += 6;
      v2 += v4;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t FigFlatDictionaryCreateKeySpec(const __CFAllocator *a1, int a2, unsigned int a3)
{
  unsigned int NumberOfRegisteredKeys = FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(a2);
  MEMORY[0x1A62711C0](&FigFlatDictionaryKeySpecGetTypeID_sRegisterFigFlatDictionaryKeySpecOnce, flatDictionaryKeySpec_register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(a2);
  unint64_t v8 = CFAllocatorAllocate(a1, 4 * NumberOfRegisteredKeys + 24 * a3, 0);
  *(void *)(Instance + 56) = v8;
  *(unsigned char *)(Instance + 20) = 0;
  *(_DWORD *)(Instance + 24) = a3;
  *(_DWORD *)(Instance + 2_Block_object_dispose(&STACK[0x4E0], 8) = a2;
  *(_DWORD *)(Instance + 32) = NumberOfRegisteredKeys;
  *(void *)(Instance + 40) = v8;
  memset(v8, 255, 4 * NumberOfRegisteredKeys);
  *(void *)(Instance + 4_Block_object_dispose(&STACK[0x4E0], 8) = *(void *)(Instance + 56) + 4 * NumberOfRegisteredKeys;
  return Instance;
}

CFIndex FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(int a1)
{
  CFIndex result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1) {
    return CFSetGetCount(*(CFSetRef *)(sKeySpaces + 8 * a1));
  }
  return result;
}

uint64_t captureSourceRemote_RegisterNotificationForProprietaryDefaultChanges(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = captureSourceRemote_createBasicMessage(a1, 1919840356, &v4);
  if (v1 || (uint64_t v1 = FigXPCMessageSetCFString(), v1))
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

BOOL FigCaptureVideoDimensionsAreEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t csp_formatIndex(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11, char a12, unsigned char *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, void *a17, uint64_t *a18)
{
  int v26 = [a1 shouldPreferSIFRFormatWithHighlightRecoveryEnabled:a11];
  unsigned int v65 = [a1 formatIndex];
  uint64_t v67 = [a1 fesInputCropDimensions];
  uint64_t v66 = [a1 cropDimensionsForFES];
  uint64_t v64 = [a1 sensorCropDimensions];
  [a1 sensorCenterOffset];
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v69 = [a1 postGDCCropDimensions];
  char v31 = [a1 isSIFRSupported];
  if (a3
    && [a1 depthCompanionFormat]
    && v26 == objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sifrEnabled")
    && (a12 & 1) == 0)
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v36;
    uint64_t v30 = v37;
    double v38 = (void *)[a1 depthCompanionFormat];
LABEL_40:
    char v56 = [v38 sifrEnabled];
    goto LABEL_41;
  }
  if (a7 && [a1 midFrameSynchronizationOptimizedCompanionFormat])
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "sensorDimensions");
    objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v39;
    uint64_t v30 = v40;
    double v38 = (void *)[a1 midFrameSynchronizationOptimizedCompanionFormat];
    goto LABEL_40;
  }
  if (a8 && [a1 stereoVideoCompanionFormat])
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v41;
    uint64_t v30 = v42;
    double v38 = (void *)[a1 stereoVideoCompanionFormat];
    goto LABEL_40;
  }
  [a1 ultraHighResCompanionFormat];
  if (a4
    && [a1 fsdNetCompanionFormat]
    && v26 == objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sifrEnabled"))
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v57;
    uint64_t v30 = v58;
    double v38 = (void *)[a1 fsdNetCompanionFormat];
    goto LABEL_40;
  }
  if (a2)
  {
    int v43 = (void *)[a1 frontEndScalerCompanionFormats];
    if ([v43 count])
    {
      uint64_t v44 = [v43 firstObject];
      if (a9) {
        uint64_t v44 = [v43 lastObject];
      }
      int v45 = (void *)v44;
      if (!v44)
      {
        uint64_t v63 = v18;
        LODWORD(v62) = 0;
        FigDebugAssert3();
      }
      if (v26 == objc_msgSend(v45, "sifrEnabled", v62, v63))
      {
        uint64_t v32 = [v45 formatIndex];
        uint64_t v33 = [v45 fesInputCropDimensions];
        uint64_t v34 = [v45 outputCropDimensionsWhenFesIsEnabled];
        uint64_t v35 = [v45 sensorCropDimensions];
        [v45 sensorCenterOffset];
        uint64_t v28 = v59;
        uint64_t v30 = v60;
        uint64_t v69 = [v45 postGDCCropDimensions];
        double v38 = v45;
        goto LABEL_40;
      }
    }
  }
  if ((v26 & 1) == 0 && [a1 nonSIFRCompanionFormat])
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v46;
    uint64_t v30 = v47;
    double v38 = (void *)[a1 nonSIFRCompanionFormat];
    goto LABEL_40;
  }
  if (a5 && [a1 actionCameraCompanionFormat])
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "formatIndex");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v48;
    uint64_t v30 = v49;
    long long v50 = a14;
    long long v51 = a15;
    uint64_t v34 = v66;
    uint64_t v33 = v67;
    goto LABEL_42;
  }
  if (a6 && [a1 fullBinSIFRCompanionFormat])
  {
    uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "formatIndex");
    uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "fesInputCropDimensions");
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    uint64_t v35 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "sensorCenterOffset");
    uint64_t v28 = v52;
    uint64_t v30 = v53;
    double v38 = (void *)[a1 fullBinSIFRCompanionFormat];
    goto LABEL_40;
  }
  if (a10 && [a1 hasSensorHDRCompanionIndex])
  {
    uint64_t v32 = [a1 sensorHDRCompanionIndex];
    uint64_t v33 = [a1 fesInputCropDimensions];
    uint64_t v34 = [a1 cropDimensionsForFES];
    uint64_t v35 = [a1 sensorCropDimensions];
    [a1 sensorCenterOffset];
    uint64_t v28 = v54;
    uint64_t v30 = v55;
    uint64_t v69 = [a1 postGDCCropDimensions];
    char v56 = [a1 isSIFRSupported];
LABEL_41:
    char v31 = v56;
    long long v50 = a14;
    long long v51 = a15;
    goto LABEL_42;
  }
  if (v26)
  {
    uint64_t v32 = v65;
    if (([a1 isSIFRSupported] & 1) == 0) {
      [a1 isSIFRSupported];
    }
    long long v50 = a14;
    long long v51 = a15;
  }
  else
  {
    long long v50 = a14;
    long long v51 = a15;
    uint64_t v32 = v65;
  }
  uint64_t v34 = v66;
  uint64_t v33 = v67;
  uint64_t v35 = v64;
LABEL_42:
  if (v50) {
    *long long v50 = v33;
  }
  if (v51) {
    *long long v51 = v34;
  }
  if (a16) {
    *a16 = v35;
  }
  if (a17)
  {
    *a17 = v28;
    a17[1] = v30;
  }
  if (a18) {
    *a18 = v69;
  }
  if (a13) {
    *a13 = v31;
  }
  return v32;
}

uint64_t csp_shouldUseFESCompanionIndex(void *a1, void *a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (void *)[a1 requiredFormat];
  if ([a1 cinematicFramingEnabled] & 1) != 0 || (objc_msgSend(a1, "deskCamEnabled")) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "count");
  if (result)
  {
    uint64_t result = 0;
    if ((int)a3 >= 1 && SHIDWORD(a3) >= 1)
    {
      size_t v24 = a1;
      unint64_t v25 = HIDWORD(a3);
      int v26 = a3;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v8 = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v28;
LABEL_8:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v28 != v10) {
            objc_enumerationMutation(a2);
          }
          int v12 = *(void **)(*((void *)&v27 + 1) + 8 * v11);
          uint64_t v13 = (void *)[v12 sinkConfiguration];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && [v13 sinkType] == 6)
          {
            uint64_t v14 = [v6 previewDimensions];
            uint64_t v15 = [v12 nonRotatedOutputDimensions];
            if (([v13 optimizedForPreview] & 1) == 0
              && ((int)v15 > (int)v14 || SHIDWORD(v15) > SHIDWORD(v14)))
            {
              return 0;
            }
            if ([v12 videoStabilizationMethod]
              && [v12 videoStabilizationMethod] != 4)
            {
              return 0;
            }
          }
          if (v9 == ++v11)
          {
            uint64_t v9 = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
            if (v9) {
              goto LABEL_8;
            }
            break;
          }
        }
      }
      unint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "lastObject"), "fesDimensions");
      int v18 = v17;
      unint64_t v19 = HIDWORD(v17);
      if ([v24 geometricDistortionCorrectionEnabled])
      {
        uint64_t v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "lastObject"), "geometricDistortionCorrectedNativeDimensions");
        if ((int)v20 > v18 || SHIDWORD(v20) > (int)v19)
        {
          int v18 = v20;
          LODWORD(v19) = HIDWORD(v20);
        }
      }
      return v18 >= v26 && (int)v19 >= (int)v25;
    }
  }
  return result;
}

double acpr_conformRectForMSR420vf(double a1, double a2, double a3, double a4)
{
  float v7 = a1;
  double v8 = (double)(int)FigCaptureRoundFloatToMultipleOf(1, v7);
  float v9 = a2;
  FigCaptureRoundFloatToMultipleOf(1, v9);
  float v10 = a3;
  FigCaptureRoundFloatToMultipleOf(2, v10);
  float v11 = a4;
  FigCaptureRoundFloatToMultipleOf(2, v11);
  return v8;
}

BOOL FigCapturePixelFormatIsPackedBayerRaw(int a1)
{
  return a1 == 1650946098;
}

uint64_t psn_conformRectForMSR420vfBoundedByDimensions(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  float v10 = a3;
  FigCaptureRoundFloatToMultipleOf(2, v10);
  float v11 = a4;
  FigCaptureRoundFloatToMultipleOf(2, v11);
  if (a6) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  float v12 = a1;
  FigCaptureRoundFloatToMultipleOf(v13, v12);
  float v14 = a2;
  return FigCaptureRoundFloatToMultipleOf(v13, v14);
}

double psn_conformRectForMSR420vfBoundedByRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  if (a1) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  float v13 = a6;
  double v15 = (double)(int)FigCaptureCeilFloatToMultipleOf(v14, v13);
  float v16 = a7;
  CGFloat v17 = (double)(int)FigCaptureCeilFloatToMultipleOf(v14, v16);
  float v18 = a8;
  double v19 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v18);
  float v20 = a9;
  double v21 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v20);
  v48.origin.double x = v15;
  double v42 = v17;
  v48.origin.double y = v17;
  v48.size.CGFloat width = v19;
  v48.size.CGFloat height = v21;
  double MaxX = CGRectGetMaxX(v48);
  v49.origin.double x = a6;
  v49.origin.double y = a7;
  v49.size.CGFloat width = a8;
  v49.size.CGFloat height = a9;
  if (MaxX > CGRectGetMaxX(v49))
  {
    v50.origin.double x = a6;
    v50.origin.double y = a7;
    v50.size.CGFloat width = a8;
    v50.size.CGFloat height = a9;
    double v19 = CGRectGetMaxX(v50) - v15;
  }
  v51.origin.double x = v15;
  v51.origin.double y = v42;
  v51.size.CGFloat width = v19;
  v51.size.CGFloat height = v21;
  double MaxY = CGRectGetMaxY(v51);
  v52.origin.double x = a6;
  v52.origin.double y = a7;
  v52.size.CGFloat width = a8;
  v52.size.CGFloat height = a9;
  if (MaxY > CGRectGetMaxY(v52))
  {
    v53.origin.double x = a6;
    v53.origin.double y = a7;
    v53.size.CGFloat width = a8;
    v53.size.CGFloat height = a9;
    double v21 = CGRectGetMaxY(v53) - v42;
  }
  float v24 = a4;
  double v25 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v24);
  float v26 = a5;
  double v27 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v26);
  if (v19 >= v25) {
    double v28 = v25;
  }
  else {
    double v28 = v19;
  }
  if (v28 >= 0.0) {
    double v29 = v28;
  }
  else {
    double v29 = 0.0;
  }
  if (v21 < v27) {
    double v27 = v21;
  }
  if (v27 >= 0.0) {
    double v30 = v27;
  }
  else {
    double v30 = 0.0;
  }
  float v31 = a2;
  double v32 = (double)(int)FigCaptureRoundFloatToMultipleOf(v14, v31);
  float v33 = a3;
  int v34 = FigCaptureRoundFloatToMultipleOf(v14, v33);
  v54.origin.double x = v15;
  v54.origin.double y = v42;
  v54.size.CGFloat width = v19;
  v54.size.CGFloat height = v21;
  double MinX = CGRectGetMinX(v54);
  v55.origin.double x = v15;
  v55.origin.double y = v42;
  v55.size.CGFloat width = v19;
  v55.size.CGFloat height = v21;
  double rect = v29;
  BOOL v36 = CGRectGetMaxX(v55) - v29 < v32;
  double v37 = v32;
  if (v36)
  {
    v56.origin.double x = v15;
    v56.origin.double y = v42;
    v56.size.CGFloat width = v19;
    v56.size.CGFloat height = v21;
    double v37 = CGRectGetMaxX(v56) - v29;
  }
  double v38 = (double)v34;
  if (MinX <= v37)
  {
    v58.origin.double x = v15;
    v58.origin.double y = v42;
    v58.size.CGFloat width = v19;
    v58.size.CGFloat height = v21;
    if (CGRectGetMaxX(v58) - rect < v32)
    {
      v59.origin.double x = v15;
      v59.origin.double y = v42;
      v59.size.CGFloat width = v19;
      v59.size.CGFloat height = v21;
      double v32 = CGRectGetMaxX(v59) - rect;
    }
  }
  else
  {
    v57.origin.double x = v15;
    v57.origin.double y = v42;
    v57.size.CGFloat width = v19;
    v57.size.CGFloat height = v21;
    double v32 = CGRectGetMinX(v57);
  }
  v60.origin.double x = v15;
  v60.origin.double y = v42;
  v60.size.CGFloat width = v19;
  v60.size.CGFloat height = v21;
  double MinY = CGRectGetMinY(v60);
  v61.origin.double x = v15;
  v61.origin.double y = v42;
  v61.size.CGFloat width = v19;
  v61.size.CGFloat height = v21;
  BOOL v36 = CGRectGetMaxY(v61) - v30 < v38;
  double v40 = (double)v34;
  if (v36)
  {
    v62.origin.double x = v15;
    v62.origin.double y = v42;
    v62.size.CGFloat width = v19;
    v62.size.CGFloat height = v21;
    double v40 = CGRectGetMaxY(v62) - v30;
  }
  if (MinY <= v40)
  {
    v64.origin.double x = v15;
    v64.origin.double y = v42;
    v64.size.CGFloat width = v19;
    v64.size.CGFloat height = v21;
    if (CGRectGetMaxY(v64) - v30 < v38)
    {
      v65.origin.double x = v15;
      v65.origin.double y = v42;
      v65.size.CGFloat width = v19;
      v65.size.CGFloat height = v21;
      CGRectGetMaxY(v65);
    }
  }
  else
  {
    v63.origin.double x = v15;
    v63.origin.double y = v42;
    v63.size.CGFloat width = v19;
    v63.size.CGFloat height = v21;
    CGRectGetMinY(v63);
  }
  return v32;
}

uint64_t FigCaptureRoundFloatToMultipleOf(int a1, float a2)
{
  return llroundf(a2 / (float)a1) * a1;
}

uint64_t FigCaptureFloorFloatToMultipleOf(int a1, float a2)
{
  return vcvtms_s32_f32(a2 / (float)a1) * a1;
}

uint64_t FigCaptureCeilFloatToMultipleOf(int a1, float a2)
{
  return vcvtps_s32_f32(a2 / (float)a1) * a1;
}

FigCaptureMetadataSinkPipelineConfiguration *captureSession_createMetadataSinkPipelineConfiguration(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  int v25 = 0;
  float v7 = (void *)[a2 metadataObjectConnectionConfiguration];
  double v8 = (char *)[a2 sceneClassifierConnectionConfiguration];
  float v9 = (void *)[v7 sourceConfiguration];
  float v10 = (char *)[a2 videoDataConnectionConfiguration];
  float v11 = (void *)[a2 movieFileVideoConnectionConfiguration];
  float v12 = (void *)[a2 videoPreviewSinkConnectionConfiguration];
  float v13 = (char *)[a2 movieFileDetectedObjectMetadataConnectionConfigurations];
  int v14 = objc_alloc_init(FigCaptureMetadataSinkPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v14, (char *)v7);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v14, v10);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v14, v8);
  char IsCameraOrDerivativeRunningInPhotoMode = captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(a1, v9);
  -[FigCaptureMetadataSinkPipelineConfiguration setMrcLowPowerModeEnabled:]((uint64_t)v14, IsCameraOrDerivativeRunningInPhotoMode);
  shouldUseSceneClassifierToGateMetadataDetectiouint64_t n = captureSession_shouldUseSceneClassifierToGateMetadataDetection(a1, (uint64_t)v8, v7);
  -[FigCaptureMetadataSinkPipelineConfiguration setUseSceneClassifierToGateMetadataDetection:]((uint64_t)v14, shouldUseSceneClassifierToGateMetadataDetection);
  unint64_t v17 = BWInferenceSmartCameraCurrentVersion();
  -[FigCaptureMetadataSinkPipelineConfiguration setSmartCameraPipelineVersion:]((uint64_t)v14, v17 & 0xFFFFFFFFFFFFLL);
  char isIrisMovieVitalityScoringEnabled = cs_isIrisMovieVitalityScoringEnabled((void *)[v11 irisSinkConfiguration]);
  -[FigCaptureMetadataSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v14, isIrisMovieVitalityScoringEnabled);
  char shouldEnableDeferredNodePrepare = captureSession_shouldEnableDeferredNodePrepare(a1, (void *)[v7 sourceConfiguration], objc_msgSend(v12, "enabled"));
  -[FigCaptureMetadataSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v14, shouldEnableDeferredNodePrepare);
  -[FigCaptureMetadataSinkPipelineConfiguration setPreviewEnabled:]((uint64_t)v14, [v12 enabled]);
  -[FigCaptureMetadataSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v14, a3);
  BOOL v20 = +[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, [v11 videoStabilizationType]);
  -[FigCaptureMetadataSinkPipelineConfiguration setBoxedMetadataEnabled:]((uint64_t)v14, !v20);
  -[FigCapturePreviewSinkPipelineConfiguration setStillImageConnectionConfiguration:](v14, v13);
  if (objc_msgSend((id)objc_msgSend(v7, "sourceConfiguration"), "depthDataDeliveryEnabled")
    && (int v21 = FigVideoCaptureSourcePearlModuleType(objc_msgSend((id)objc_msgSend(v7, "sourceConfiguration"), "source"), &v25), -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:]((uint64_t)v14, v21), v25))
  {
    FigDebugAssert3();
  }
  else
  {
    -[FigCaptureMetadataSinkPipelineConfiguration setInputRotationRelativeToSource:]((uint64_t)v14, (unint64_t)[v12 transform] >> 32);
    -[FigCaptureMetadataSinkPipelineConfiguration setCompressed8BitInputEnabled:]((uint64_t)v14, [v10 videoStabilizationType] == 4);
  }
  int v22 = v25;
  if (a4) {
    *a4 = v25;
  }
  if (v22) {
    return 0;
  }
  else {
    return v14;
  }
}

FigCaptureCameraSourcePipelineConfiguration *captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration(uint64_t a1, void *a2, char a3, char a4, uint64_t a5, char a6, int a7, char a8, char a9, char *a10, char a11, char *a12, char a13, char a14, _DWORD *a15)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  int v277 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v17 = (void *)[a2 stillImageConnectionConfiguration];
  float v18 = (void *)[a2 metadataObjectConnectionConfigurations];
  double v19 = (FigCaptureCameraSourcePipelineConfiguration *)[a2 videoPreviewSinkConnectionConfiguration];
  BOOL v20 = (void *)[a2 videoCaptureConnectionConfigurations];
  int v241 = (char *)[a2 previewDerivedConnectionConfigurations];
  id v242 = (id)[a2 depthDataConnectionConfiguration];
  int v21 = (void *)[a2 cameraConfiguration];
  uint64_t obj = [a2 videoDataConnectionConfigurations];
  CMTimeEpoch v223 = (char *)[a2 pointCloudDataConnectionConfigurations];
  uint64_t v248 = a2;
  int v22 = FigCaptureConnectionConfigurationWithSinkType((void *)[a2 videoCaptureConnectionConfigurations], 4);
  uint64_t v23 = [v21 requiredFormat];
  unint64_t v251 = (unint64_t)v17;
  uint64_t v24 = [v17 irisSinkConfiguration];
  newCFDataRef Value = v21;
  int StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([v21 source], &v277);
  if (v277)
  {
    FigDebugAssert3();
LABEL_331:
    unint64_t v195 = a15;
    goto LABEL_323;
  }
  int v26 = StillImageNoiseReductionAndFusionScheme;
  uint64_t v252 = v19;
  CFStringRef v253 = (void *)v23;
  double v208 = FigCaptureConnectionConfigurationWithSinkType(v20, 4);
  unint64_t v246 = (unint64_t)v22;
  uint64_t v222 = a5;
  int v234 = v26;
  if (v208
    && [(FigCaptureCameraSourcePipelineConfiguration *)v19 previewDepthDataDeliveryEnabled])
  {
    int v247 = [(FigCaptureCameraSourcePipelineConfiguration *)v19 previewDepthFilterRenderingEnabled];
  }
  else
  {
    int v247 = 0;
  }
  int v239 = (void *)v24;
  long long v275 = 0u;
  long long v276 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  uint64_t v27 = [v18 countByEnumeratingWithState:&v273 objects:v286 count:16];
  if (v27)
  {
    uint64_t v28 = v27;
    int v29 = 0;
    char v30 = 0;
    char v257 = 0;
    char v31 = 0;
    uint64_t v32 = *(void *)v274;
    float v33 = -1.0;
    float v34 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v274 != v32) {
          objc_enumerationMutation(v18);
        }
        BOOL v36 = *(void **)(*((void *)&v273 + 1) + 8 * i);
        if (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v36))
        {
          if (FigCaptureSourceIsSecureMetadataSource(objc_msgSend((id)objc_msgSend(v36, "sourceConfiguration"), "source"), &v277))
          {
            int v29 = [v36 faceTrackingMaxFaces];
            [v36 faceTrackingNetworkFailureThresholdMultiplier];
            float v34 = v37;
            char v30 = [v36 faceTrackingUsesFaceRecognition];
            [v36 faceTrackingFailureFieldOfViewModifier];
            float v33 = v38;
            char v257 = 1;
          }
          else
          {
            char v31 = 1;
          }
        }
      }
      uint64_t v28 = [v18 countByEnumeratingWithState:&v273 objects:v286 count:16];
    }
    while (v28);
  }
  else
  {
    int v29 = 0;
    char v30 = 0;
    char v257 = 0;
    char v31 = 0;
    float v33 = -1.0;
    float v34 = 0.0;
  }
  if (BWDeviceSupportsCoreMediaFaceTracking())
  {
    unsigned int v39 = [(FigCaptureCameraSourcePipelineConfiguration *)v252 previewDepthFilterRenderingEnabled] & (v247 ^ 1);
    v257 &= v39 ^ 1;
    unsigned int v229 = v39;
    v31 |= v39;
  }
  else
  {
    unsigned int v229 = 0;
  }
  cf[0] = 0;
  uint64_t v40 = [newValue source];
  uint64_t v41 = *MEMORY[0x1E4F1CF80];
  uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v42) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v43 + 48);
  char v249 = v31;
  char v244 = v30;
  int v245 = v29;
  uint64_t v219 = v41;
  if (v44 && !v44(v40, @"AttributesDictionary", v41, cf))
  {
    int v64 = objc_msgSend((id)objc_msgSend((id)cf[0], "objectForKeyedSubscript:", @"GeometricDistortionCorrection"), "BOOLValue");

    int v45 = v253;
    int v46 = [v253 intelligentDistortionCorrectionSupported];
    CGRect v50 = v239;
    if (v64)
    {
      int v47 = [newValue geometricDistortionCorrectionEnabled];
      int v48 = [newValue geometricDistortionCorrectionEnabled];
    }
    else
    {
      int v47 = 0;
      int v48 = 0;
    }
    CGRect v49 = v252;
  }
  else
  {
    int v45 = v253;
    int v46 = [v253 intelligentDistortionCorrectionSupported];
    int v47 = 0;
    int v48 = 0;
    CGRect v49 = v252;
    CGRect v50 = v239;
  }
  if (([newValue cinematicFramingEnabled] & 1) != 0
    || ([newValue deskCamEnabled] & 1) != 0)
  {
    int v51 = v46;
    char v52 = 0;
    int v243 = 0;
    char v53 = 0;
  }
  else
  {
    int v233 = v48;
    int v51 = v46;
    int v55 = [newValue manualCinematicFramingEnabled];
    char v52 = 0;
    int v243 = v47 & ~v55;
    if (v55)
    {
      char v53 = 0;
    }
    else
    {
      char v53 = 0;
      if (((v233 ^ 1) & 1) == 0)
      {
        int v243 = v47;
        long long v279 = 0u;
        long long v280 = 0u;
        long long v281 = 0u;
        long long v282 = 0u;
        uint64_t v56 = [v20 countByEnumeratingWithState:&v279 objects:cf count:16];
        if (v56)
        {
          uint64_t v57 = v56;
          char v58 = 0;
          uint64_t v59 = *(void *)v280;
          do
          {
            for (uint64_t j = 0; j != v57; ++j)
            {
              if (*(void *)v280 != v59) {
                objc_enumerationMutation(v20);
              }
              CGRect v61 = *(void **)(*((void *)&v279 + 1) + 8 * j);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                CGRect v62 = (void *)[v61 sinkConfiguration];
                if ([v62 sinkType] == 4
                  || [v62 sinkType] == 6)
                {
                  if ([v61 videoStabilizationType] != 4) {
                    goto LABEL_65;
                  }
                  char v58 = 1;
                }
              }
            }
            uint64_t v57 = [v20 countByEnumeratingWithState:&v279 objects:cf count:16];
          }
          while (v57);
        }
        else
        {
LABEL_65:
          char v58 = 0;
        }
        char v53 = v58 ^ 1;
        char v52 = v233;
        CGRect v49 = v252;
        int v45 = v253;
        CGRect v50 = v239;
      }
    }
  }
  char v240 = v52;
  char v232 = v53;
  if ([v45 isStillImageStabilizationSupported]) {
    char v207 = 1;
  }
  else {
    char v207 = [v45 configureForStillImageStabilizationSupport];
  }
  shouldEnableGreenGhostMitigatiouint64_t n = cs_shouldEnableGreenGhostMitigation(newValue);
  if ((int)objc_msgSend((id)objc_msgSend(newValue, "requiredFormat"), "configureForGreenGhostMitigationVersion") > 0) {
    shouldEnableGreenGhostMitigatiouint64_t n = 1;
  }
  if (v243 && [v45 gdcInStillImageSinkPipelineSupported]) {
    char v226 = csp_gdcExpandsImageDimensions([newValue source]);
  }
  else {
    char v226 = 0;
  }
  char v231 = shouldEnableGreenGhostMitigation;
  int v217 = [v50 optimizesImagesForOfflineVideoStabilization];
  if ([v50 irisMovieCaptureEnabled]) {
    BOOL v211 = [v50 irisMovieAutoTrimMethod] != 0;
  }
  else {
    BOOL v211 = 0;
  }
  char v215 = [v49 previewDepthFilterRenderingEnabled];
  if (+[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", v20, v249 & 1)|| +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:v241 doingFaceTracking:v249 & 1])
  {
    BOOL v209 = 1;
  }
  else
  {
    if (v251)
    {
      unint64_t v285 = v251;
      uint64_t v63 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v285 count:1];
    }
    else
    {
      uint64_t v63 = 0;
    }
    BOOL v209 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:v63 doingFaceTracking:v249 & 1];
  }
  int v213 = FigCaptureMetadataObjectConfigurationsRequireOfflineVideoStabilizationMotionData(v18);
  char IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
  int v228 = captureSession_clientSetsUserInitiatedCaptureRequestTime();
  int v227 = FigCaptureZeroShutterLagEnabled(newValue, v50, (void *)[(id)v251 stillImageSinkConfiguration], v228);
  CGRect v65 = (void *)[(id)v251 sinkConfiguration];
  captureSession_clientIsCameraOrDerivative(a1);
  int v230 = FigCaptureSoftISPEnabled(newValue, v65);
  BOOL v66 = v230
     && [v253 isDeepFusionSupported]
     && objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "maxQualityPrioritization") == 3;
  if (objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "digitalFlashCaptureEnabled")) {
    int v67 = 1;
  }
  else {
    int v67 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "intelligentDistortionCorrectionEnabled") | v66;
  }
  int v210 = v67;
  if ([newValue geometricDistortionCorrectionEnabled] & v51) {
    char v225 = 1;
  }
  else {
    char v225 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "intelligentDistortionCorrectionEnabled");
  }
  char v68 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(newValue, "source"), 0x1EFA6B2C0), "BOOLValue");
  float v69 = 0.0;
  if (cs_shouldEnableOverCapture(newValue))
  {
    [v253 spatialOverCapturePercentage];
    float v69 = v70;
  }
  char v221 = v68;
  if (([newValue backgroundBlurEnabled] & 1) != 0
    || ([newValue studioLightingEnabled] & 1) != 0)
  {
    char v71 = 1;
  }
  else
  {
    char v71 = [newValue backgroundReplacementEnabled];
  }
  if ([v253 isHighPhotoQualitySupported])
  {
    int v72 = [v50 maxQualityPrioritization];
    char v73 = v71 ^ 1;
    if (v72 <= 1) {
      char v73 = 0;
    }
    char v206 = v73;
  }
  else
  {
    char v206 = 0;
  }
  long long v74 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([(id)v251 videoStabilizationType]) {
    objc_msgSend(v74, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)v251, "videoStabilizationType")));
  }
  long long v271 = 0u;
  long long v272 = 0u;
  long long v269 = 0u;
  long long v270 = 0u;
  uint64_t v75 = [v20 countByEnumeratingWithState:&v269 objects:v284 count:16];
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = *(void *)v270;
    do
    {
      for (uint64_t k = 0; k != v76; ++k)
      {
        if (*(void *)v270 != v77) {
          objc_enumerationMutation(v20);
        }
        long long v79 = *(void **)(*((void *)&v269 + 1) + 8 * k);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [v79 videoStabilizationType]) {
          objc_msgSend(v74, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v79, "videoStabilizationType")));
        }
      }
      uint64_t v76 = [v20 countByEnumeratingWithState:&v269 objects:v284 count:16];
    }
    while (v76);
  }
  if (cs_shouldEnablePreviewStabilization(a1, v252))
  {
    int v80 = 1;
    unint64_t v81 = v246;
    unsigned int v82 = newValue;
    int v83 = v245;
  }
  else
  {
    long long v267 = 0u;
    long long v268 = 0u;
    long long v265 = 0u;
    long long v266 = 0u;
    uint64_t v84 = [(id)obj countByEnumeratingWithState:&v265 objects:v283 count:16];
    unint64_t v81 = v246;
    unsigned int v82 = newValue;
    int v83 = v245;
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = *(void *)v266;
      while (2)
      {
        for (uint64_t m = 0; m != v85; ++m)
        {
          if (*(void *)v266 != v86) {
            objc_enumerationMutation((id)obj);
          }
          if (cs_shouldEnablePreviewStabilization(a1, *(void **)(*((void *)&v265 + 1) + 8 * m)))
          {
            int v80 = 1;
            unsigned int v82 = newValue;
            goto LABEL_115;
          }
        }
        uint64_t v85 = [(id)obj countByEnumeratingWithState:&v265 objects:v283 count:16];
        int v80 = 0;
        unsigned int v82 = newValue;
        if (v85) {
          continue;
        }
        break;
      }
    }
    else
    {
      int v80 = 0;
    }
  }
LABEL_115:
  int v212 = v80;
  double v19 = objc_alloc_init(FigCaptureCameraSourcePipelineConfiguration);
  if ([v82 source])
  {
    id v278 = 0;
    unsigned int v88 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v82, "source"), @"DeviceType"), "intValue");
    char v89 = v88;
    BOOL v204 = v88 < 0xA;
    int v205 = [v82 imageControlMode];
    long long v279 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v282 = 0u;
    uint64_t v90 = [v74 countByEnumeratingWithState:&v279 objects:cf count:16];
    if (v90)
    {
      uint64_t v91 = *(void *)v280;
      while (2)
      {
        for (uint64_t n = 0; n != v90; ++n)
        {
          if (*(void *)v280 != v91) {
            objc_enumerationMutation(v74);
          }
          if (+[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, [*(id *)(*((void *)&v279 + 1) + 8 * n) intValue]))
          {
            LODWORD(v90) = 1;
            goto LABEL_126;
          }
        }
        uint64_t v90 = [v74 countByEnumeratingWithState:&v279 objects:cf count:16];
        if (v90) {
          continue;
        }
        break;
      }
LABEL_126:
      unsigned int v82 = newValue;
    }
    unsigned int v93 = 0x310u >> v89;
    char v94 = [v82 cinematicFramingEnabled];
    char v203 = [v82 deskCamEnabled];
    char v202 = [v82 manualCinematicFramingEnabled];
    uint64_t v95 = [v82 source];
    uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v96) {
      uint64_t v97 = v96;
    }
    else {
      uint64_t v97 = 0;
    }
    int v100 = v204 & v93;
    uint64_t v101 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v97 + 48);
    char v102 = v94;
    if (v101)
    {
      v101(v95, @"AttributesDictionary", v219, &v278);
      id v103 = v278;
    }
    else
    {
      id v103 = 0;
    }
    char v104 = objc_msgSend((id)objc_msgSend(v103, "objectForKeyedSubscript:", @"ISPMotionData"), "BOOLValue");
    int v105 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", @"Sphere"), "BOOLValue");

    int v106 = v217 | v213 | v90;
    int v107 = v209 | v210 | v212 | v100 | v106;
    if (v205 == 4) {
      LOBYTE(v106) = 1;
    }
    char v108 = v210 | v209 | v215 | v211 | v106 | v102 | v203 | v212 | v202;
    if (v205 == 4) {
      int v109 = 1;
    }
    else {
      int v109 = v90;
    }
    int v110 = v107 & v105;
    BOOL v118 = v110 == 0;
    char v111 = v110 | ~v108 | v104;
    int v112 = v108 & 1;
    if (!v118) {
      int v112 = 2;
    }
    if (v109) {
      int v113 = 3;
    }
    else {
      int v113 = 0;
    }
    if (v111) {
      int v98 = v112;
    }
    else {
      int v98 = v113;
    }
    char v99 = v249;
    char v30 = v244;
    int v83 = v245;
    unint64_t v81 = v246;
  }
  else
  {
    int v98 = 0;
    char v99 = v249;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v19, v98);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v19, (char *)v74);
  if ([v82 depthDataDeliveryEnabled])
  {
    int v114 = objc_msgSend((id)objc_msgSend(v82, "depthDataFormat"), "format");
    if (v114 == 1751410032 || v114 == 1717855600)
    {
      long long v115 = v252;
      int v218 = [(FigCaptureCameraSourcePipelineConfiguration *)v252 previewDepthFilterRenderingEnabled];
    }
    else
    {
      int v218 = 1;
      long long v115 = v252;
    }
    int v216 = objc_msgSend((id)objc_msgSend(v242, "depthDataSinkConfiguration"), "filteringEnabled");
    int v117 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v82, "source"), @"DeviceType"), "intValue");
    BOOL v118 = v117 == 6 || v117 == 12;
    int v119 = !v118;
    int v214 = v119;
    unsigned int v120 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v82, "source"), @"DeviceType"), "intValue");
    BOOL v121 = v120 < 0xA;
    unsigned int v122 = 0x310u >> v120;
    int v123 = cs_streamingDepthDataType(v82);
    int v124 = [v115 previewDepthDataDeliveryEnabled];
    int v125 = FigCaptureMetadataObjectConfigurationsRequireFaceTracking(v18);
    int v126 = 0;
    if (v208 && v124) {
      int v126 = [(FigCaptureCameraSourcePipelineConfiguration *)v252 previewDepthFilterRenderingEnabled];
    }
    int v127 = v121 & v122;
    int v128 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "realtimeFSDNetSupported");
    if (v126 && (v127 & v128 & 1) != 0)
    {
      int v116 = 3;
      unint64_t v81 = v246;
    }
    else
    {
      int v129 = v127 ^ 1;
      if (v242) {
        int v129 = 1;
      }
      unint64_t v81 = v246;
      if ((v129 | v124 | v125) == 1)
      {
        char v99 = v249;
        char v30 = v244;
        int v83 = v245;
        if ((v218 | v214 | v216) == 1) {
          int v116 = v123 != 3 && v123 != 0;
        }
        else {
          int v116 = 2;
        }
        unsigned int v82 = newValue;
        goto LABEL_183;
      }
      int v116 = 0;
    }
    unsigned int v82 = newValue;
    char v99 = v249;
    char v30 = v244;
    int v83 = v245;
  }
  else
  {
    int v116 = 0;
  }
LABEL_183:
  -[FigCaptureCameraSourcePipelineConfiguration setDepthType:]((uint64_t)v19, v116);
  [v253 maxContinuousZoomFactorForDepthDataDelivery];
  -[FigCaptureCameraSourcePipelineConfiguration setMaxContinuousZoomFactorForDepthDataDelivery:]((uint64_t)v19, v131);
  char v132 = [v82 sourceType] == 1
      && ([v82 videoStabilizationStrength] == 3
       || [v82 videoStabilizationStrength] == 4);
  -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v19, v132);
  if (v82)
  {
    [v82 maxExposureDurationClientOverride];
  }
  else
  {
    __n128 v263 = 0uLL;
    uint64_t v264 = 0;
  }
  __n128 v261 = v263;
  uint64_t v262 = v264;
  uint64_t v133 = objc_msgSend((id)objc_msgSend(v82, "requiredFormat", -[FigCaptureCameraSourcePipelineConfiguration setMaxExposureDurationClientOverride:]((uint64_t)v19, &v261).n128_f64[0]), "dimensions");
  [v82 requiredMaxFrameRate];
  if (v133 == 0x87000000F00)
  {
    float v135 = v134;
    [v82 requiredMaxFrameRate];
    float v137 = v136;
    [v82 requiredMinFrameRate];
    float v139 = v138;
    int v140 = captureSession_clientIsCameraOrDerivative(a1);
    if (v137 == v139 && llroundf(v135) == 24 && v140)
    {
      CMTimeMake(&v260, 1, 50);
      __n128 v258 = *(__n128 *)&v260.value;
      CMTimeEpoch epoch = v260.epoch;
      -[FigCaptureCameraSourcePipelineConfiguration setMaxExposureDurationFrameworkOverride:]((uint64_t)v19, &v258);
    }
  }
  else
  {
    captureSession_clientIsCameraOrDerivative(a1);
  }
  uint64_t v141 = [v82 source];
  if (*(void *)(DerivedStorage + 88) && (uint64_t v142 = v141, objc_msgSend(&unk_1EFB03638, "containsObject:")))
  {
    cf[0] = 0;
    uint64_t v143 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v143) {
      uint64_t v144 = v143;
    }
    else {
      uint64_t v144 = 0;
    }
    long long v145 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v144 + 48);
    if (v145) {
      v145(v142, 0x1EFA6C0C0, v219, cf);
    }
    char v146 = FigCFEqual() != 0;
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    char v146 = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setForceCNRDisabled:]((uint64_t)v19, v146);
  -[FigCaptureCameraSourcePipelineConfiguration setCoreMediaFaceTrackingEnabled:]((uint64_t)v19, v99 & 1);
  [(FigCaptureCameraSourcePipelineConfiguration *)v252 setCoreMediaFaceTrackingEnabled:v229];
  -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingEnabled:]((uint64_t)v19, v257 & 1);
  if (v257)
  {
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingNumTrackedFaces:]((uint64_t)v19, v83);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingNetworkFailureThresholdMultiplier:]((uint64_t)v19, v34);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v19, v30 & 1);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingFailureFieldOfViewModifier:]((uint64_t)v19, v33);
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v19, v243);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v19, v232 & 1);
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v19, v240);
  -[FigCaptureMovieFileSinkPipelineConfiguration setFrameReconstructionEnabled:]((uint64_t)v19, v226);
  -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v19, v231);
  if (*(unsigned char *)(DerivedStorage + 696)) {
    char v147 = [v74 count] != 0;
  }
  else {
    char v147 = 0;
  }
  char v148 = v227;
  -[FigCaptureMovieFileSinkPipelineConfiguration setP3ToBT2020ConversionEnabled:]((uint64_t)v19, v147);
  -[FigCaptureCameraSourcePipelineConfiguration setZeroShutterLagEnabled:]((uint64_t)v19, v227);
  int v149 = v228 ^ 1;
  if (((v227 | v228 ^ 1) & 1) == 0) {
    char v148 = [v253 configureForStillImageStabilizationSupport];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v19, v148);
  if (v234 < 3) {
    char v150 = 0;
  }
  else {
    char v150 = [v253 isSIFRSupported] & (v207 | v206);
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v19, v150);
  int v151 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "depthDataDeliveryEnabled");
  -[FigCaptureCameraSourcePipelineConfiguration setSoftISPEnabled:]((uint64_t)v19, v230);
  int v152 = -[FigCaptureCameraSourcePipelineConfiguration softISPEnabled]((BOOL)v19);
  if (((v152 | v149) & 1) == 0) {
    LOBYTE(v152) = [v253 configureForSoftISPSupport];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v19, v152);
  if (v228) {
    char v153 = [v253 configureForSoftISPSupport];
  }
  else {
    char v153 = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v19, v153);
  -[FigCaptureCameraSourcePipelineConfiguration setEnableStillImageSensorOverscanIfAvailable:]((uint64_t)v19, v225);
  -[FigCaptureCameraSourcePipelineConfiguration setOverCapturePercentage:]((uint64_t)v19, v69);
  char v154 = v69 > 0.0;
  if (v69 > 0.0) {
    char v155 = 1;
  }
  else {
    char v155 = v228 ^ 1;
  }
  if ((v155 & 1) == 0) {
    char v154 = [v253 configureForSpatialOverCaptureSupport];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSpatialOverCaptureSupport:]((uint64_t)v19, v154);
  int v156 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "digitalFlashCaptureEnabled");
  if (((v156 | v149) & 1) == 0) {
    LOBYTE(v156) = [v253 configureForDigitalFlashSupport];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v19, v156);
  int v157 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "stereoPhotoCaptureEnabled");
  if (((v157 | v149) & 1) == 0) {
    LOBYTE(v157) = [v253 configureForStereoPhotoCaptureSupport];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForStereoPhotoCaptureSupport:]((uint64_t)v19, v157);
  int v158 = [newValue depthDataDeliveryEnabled];
  if (((v158 | v149) & 1) == 0) {
    LOBYTE(v15_Block_object_dispose(&STACK[0x4E0], 8) = [v253 configureForDepthDataDelivery];
  }
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDepthDataDeliverySupport:]((uint64_t)v19, v158);
  if (!newValue) {
    goto LABEL_244;
  }
  if (objc_msgSend((id)objc_msgSend(newValue, "requiredFormat"), "isPhotoFormat"))
  {
    int v159 = 0;
    goto LABEL_246;
  }
  long long v281 = 0u;
  long long v282 = 0u;
  long long v279 = 0u;
  long long v280 = 0u;
  uint64_t v160 = [(id)obj countByEnumeratingWithState:&v279 objects:cf count:16];
  if (!v160)
  {
LABEL_244:
    int v159 = 1;
    goto LABEL_246;
  }
  uint64_t v161 = v160;
  uint64_t v162 = *(void *)v280;
  while (2)
  {
    for (iuint64_t i = 0; ii != v161; ++ii)
    {
      if (*(void *)v280 != v162) {
        objc_enumerationMutation((id)obj);
      }
      if (!objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v279 + 1) + 8 * ii), "videoDataSinkConfiguration"), "optimizedForPreview"))
      {
        int v159 = 2;
        goto LABEL_246;
      }
    }
    uint64_t v161 = [(id)obj countByEnumeratingWithState:&v279 objects:cf count:16];
    int v159 = 1;
    if (v161) {
      continue;
    }
    break;
  }
LABEL_246:
  -[FigCaptureCameraSourcePipelineConfiguration setAutoImageControlMode:]((uint64_t)v19, v159);
  int IsTenBit = FigCapturePixelFormatIsTenBit([v253 format]);
  char v165 = 0;
  if (IsTenBit && v81) {
    char v165 = FigCapturePixelFormatIs422([v253 format]) ^ 1;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setVideoHDRImageStatisticsEnabled:]((uint64_t)v19, v165);
  -[FigCaptureCameraSourcePipelineConfiguration setGraphContainsMultipleVideoSources:]((uint64_t)v19, a4);
  int v166 = objc_msgSend((id)objc_msgSend((id)v251, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled");
  float v167 = 0.1;
  if (!v166) {
    float v167 = 0.0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setAdditionalVISOverscanWhenRecording:]((uint64_t)v19, v167);
  if (FigCaptureMetadataObjectConfigurationsRequiresLumaHistograms(v18)) {
    char ShouldIncludeDiagnosticMetadata = FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata();
  }
  else {
    char ShouldIncludeDiagnosticMetadata = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setLumaHistogramsEnabled:]((uint64_t)v19, ShouldIncludeDiagnosticMetadata);
  -[FigCaptureCameraSourcePipelineConfiguration setContinuityCameraIsWired:]((uint64_t)v19, a6);
  -[FigCaptureCameraSourcePipelineConfiguration setContinuityCameraClientDeviceClass:]((uint64_t)v19, a7);
  -[FigCaptureCameraSourcePipelineConfiguration setClientIsVOIP:]((uint64_t)v19, a8);
  -[FigCaptureCameraSourcePipelineConfiguration setSuppressVideoEffects:]((uint64_t)v19, a9);
  if (v151)
  {
    int v169 = cs_stillImageDepthDataType(newValue);
    int v170 = v169;
    if ((v169 & 0xFFFFFFFE) == 4)
    {
      if (captureSession_clientIsCameraOrDerivative(a1)) {
        int v171 = 2;
      }
      else {
        int v171 = 8;
      }
      if (v170 == 5)
      {
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationStrength:]((uint64_t)v19, v171);
        goto LABEL_269;
      }
      if (v170 == 4)
      {
        -[FigCaptureCameraSourcePipelineConfiguration setStillImageFocusPixelDataRetainedBufferCount:]((uint64_t)v19, v171);
        uint64_t v172 = (uint64_t)v19;
        int v173 = v171;
LABEL_267:
        -[FigCaptureCameraSourcePipelineConfiguration setStillImageSashimiRawRetainedBufferCount:](v172, v173);
      }
    }
    else if (v169 == 2)
    {
      if (captureSession_clientIsCameraOrDerivative(a1)) {
        int v173 = 3;
      }
      else {
        int v173 = 4;
      }
      uint64_t v172 = (uint64_t)v19;
      goto LABEL_267;
    }
LABEL_269:
    char v174 = [v253 isSIFRStillImageCaptureWithDepthDataDisabled] ^ 1;
    BOOL v175 = -[FigCaptureCameraSourcePipelineConfiguration configureForSIFRStillImageCaptureIfAvailable]((BOOL)v19);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v19, v175 & v174);
  }
  int v176 = -[FigCaptureCameraSourcePipeline colorSpaceProperties](objc_msgSend(*(id *)(DerivedStorage + 664), "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v248, "cameraConfiguration"), "sourceID")));
  char shouldEnableVideoSTF = cs_shouldEnableVideoSTF(v20, v247, v176);
  int v178 = objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(newValue, "source"), @"DepthDataDeliveryConfigurations"), "objectForKeyedSubscript:", @"VideoSTFMetadataSupported"), "BOOLValue");
  int v179 = [v253 isVideoSTFMetadataEnabled];
  BOOL v180 = 0;
  if (v179)
  {
    int v181 = v151 ^ 1 | v178;
    uint64_t v182 = v252;
    if (v181) {
      BOOL v180 = [newValue imageControlMode] != 4;
    }
  }
  else
  {
    uint64_t v182 = v252;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setVideoSTFMetadataEnabled:]((uint64_t)v19, shouldEnableVideoSTF | v180);
  if (v151
    && objc_msgSend((id)objc_msgSend(v182, "videoPreviewSinkConfiguration"), "filterRenderingEnabled")
    && [v253 isStudioAndContourPreviewRenderingSupported])
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v182, "sourceConfiguration"), "requiredFormat"), "defaultPortraitLightingEffectStrength");
    -[FigCaptureCameraSourcePipelineConfiguration setStreamingForegroundSegmentationEnabled:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingEnabled:]((uint64_t)v19, (v249 & 1) == 0);
  }
  if ([newValue depthDataDeliveryEnabled]
    && objc_msgSend((id)objc_msgSend(newValue, "depthDataFormat"), "RGBIRStereoFusionSupported"))
  {
    -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionEnabled:]((uint64_t)v19, objc_msgSend((id)objc_msgSend(v182, "videoPreviewSinkConfiguration"), "filterRenderingEnabled"));
  }
  if (-[FigCaptureCameraSourcePipelineConfiguration RGBIRStereoFusionEnabled]((BOOL)v19)
    && (int)FigCapturePlatformIdentifier() >= 8)
  {
    -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMinDepthThresholdMM:]((uint64_t)v19, 300);
    if ((int)FigCapturePlatformIdentifier() > 8
      || objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "RGBIRStereoFusionThresholdsEnabled"))
    {
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:]((uint64_t)v19, 1000);
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:]((uint64_t)v19, 2000);
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthValueMM:]((uint64_t)v19, 5000);
    }
  }
  if (v247)
  {
    if (-[FigCaptureCameraSourcePipelineConfiguration depthType]((uint64_t)v19) == 3)
    {
      -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v19, 0);
      -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v19, 0);
      if (objc_msgSend((id)objc_msgSend(newValue, "requiredFormat"), "dimensions") == 3840)
      {
        uint64_t v183 = (uint64_t)v19;
        uint64_t v184 = 0x14400000240;
      }
      else
      {
        uint64_t v183 = (uint64_t)v19;
        uint64_t v184 = 0x18C000002C0;
      }
      -[FigCaptureCameraSourcePipelineConfiguration setCaptureDimensionsForFSDNetSecondary:](v183, v184);
    }
    else
    {
      -[FigCaptureCameraSourcePipelineConfiguration setDepthDimensionsOverride:]((uint64_t)v19, 0xB800000148);
      -[FigCaptureCameraSourcePipelineConfiguration setStrictDepthModePreferred:]((uint64_t)v19, 1);
      -[FigCaptureCameraSourcePipelineConfiguration setDepthOutputEnabled:]((uint64_t)v19, 1);
    }
    char v185 = 1;
    -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v19, 1);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSpatialOverCaptureSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v19, 0);
  }
  else
  {
    char v185 = [v248 cameraCalibrationDataConnectionConfigurations] != 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setStreamingCameraCalibrationDataDeliveryEnabled:]((uint64_t)v19, v185);
  int v186 = [(id)v81 stereoVideoCaptureEnabled];
  if ((v186 & v247) == 1
    || (int v187 = v186,
        -[FigCaptureCameraSourcePipelineConfiguration setStereoVideoCaptureEnabled:]((uint64_t)v19, v186),
        v187)
    && [(id)v81 videoStabilizationMethod] != 2
    && [(id)v81 videoStabilizationMethod] != 3
    && [(id)v81 videoStabilizationMethod] != 5)
  {
    FigDebugAssert3();
    int v277 = FigSignalErrorAt();
    goto LABEL_331;
  }
  if (-[FigCaptureCameraSourcePipelineConfiguration stereoVideoCaptureEnabled]((BOOL)v19))
  {
    -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v19, 0);
    -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v19, 1);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSpatialOverCaptureSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v19, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v19, 0);
  }
  if ((v247 & 1) != 0 || -[FigCaptureCameraSourcePipelineConfiguration stereoVideoCaptureEnabled]((BOOL)v19))
  {
    char v188 = -[FigCaptureCameraSourcePipelineConfiguration midFrameSynchronizationEnabled]((BOOL)v19);
    -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v19, v188);
  }
  -[FigCaptureCameraSourcePipelineConfiguration setCameraConfiguration:](v19, (char *)newValue);
  -[FigCaptureCameraSourcePipelineConfiguration setVideoPreviewSinkConnectionConfiguration:](v19, (char *)v182);
  -[FigCaptureCameraSourcePipelineConfiguration setPreviewDerivedConnectionConfigurations:](v19, v241);
  -[FigCaptureCameraSourcePipelineConfiguration setVideoCaptureConnectionConfigurations:](v19, (char *)v20);
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageConnectionConfiguration:](v19, (char *)v251);
  -[FigCaptureCameraSourcePipelineConfiguration setDepthDataConnectionConfiguration:](v19, (char *)v242);
  -[FigCaptureCameraSourcePipelineConfiguration setPointCloudDataConnectionConfigurations:](v19, v223);
  -[FigCaptureCameraSourcePipelineConfiguration setClientIsCameraOrDerivative:]((uint64_t)v19, IsCameraOrDerivative);
  -[FigCaptureCameraSourcePipelineConfiguration setDeferredTimeOfFlightNodePrepareEnabled:]((uint64_t)v19, *(unsigned char *)(DerivedStorage + 112));
  -[FigCaptureCameraSourcePipelineConfiguration setClockSynchronizationEnabled:]((uint64_t)v19, a3);
  -[FigCaptureCameraSourcePipelineConfiguration setDepthConversionEnabled:]((uint64_t)v19, 0);
  -[FigCaptureCameraSourcePipelineConfiguration setVisionDataConnectionConfigurations:](v19, (char *)[v248 visionDataConnectionConfigurations]);
  -[FigCaptureCameraSourcePipelineConfiguration setMetadataObjectConnectionConfigurations:](v19, (char *)[v248 metadataObjectConnectionConfigurations]);
  -[FigCaptureCameraSourcePipelineConfiguration setMovieFileDetectedObjectMetadataConnectionConfigurations:](v19, (char *)[v248 movieFileDetectedObjectMetadataConnectionConfigurations]);
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageMaxLossyCompressionLevel:]((uint64_t)v19, +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
  -[FigCaptureCameraSourcePipelineConfiguration setPreviewMaxLossyCompressionLevel:]((uint64_t)v19, +[FigCaptureCameraParameters previewMaxLossyCompressionLevel](FigCaptureCameraParameters, "previewMaxLossyCompressionLevel"));
  -[FigCaptureCameraSourcePipelineConfiguration setVideoDataMaxLossyCompressionLevel:]((uint64_t)v19, +[FigCaptureCameraParameters videoDataMaxLossyCompressionLevel](FigCaptureCameraParameters, "videoDataMaxLossyCompressionLevel"));
  -[FigCaptureCameraSourcePipelineConfiguration setMovieFileMaxLossyCompressionLevel:]((uint64_t)v19, +[FigCaptureCameraParameters movieFileMaxLossyCompressionLevelForPixelFormat:](FigCaptureCameraParameters, "movieFileMaxLossyCompressionLevelForPixelFormat:", [v253 format]));
  if (a11) {
    char v189 = ((unint64_t)v252 | obj | v81 | v251) != 0;
  }
  else {
    char v189 = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setSmartStyleLearningEnabled:]((uint64_t)v19, v189);
  BOOL v190 = -[FigCaptureCameraSourcePipelineConfiguration smartStyleLearningEnabled]((BOOL)v19);
  if (v251) {
    char v191 = v190;
  }
  else {
    char v191 = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setSmartStyleReversibilityEnabled:]((uint64_t)v19, v191);
  -[FigCaptureCameraSourcePipelineConfiguration setSmartStyle:](v19, a12);
  if (-[FigCaptureCameraSourcePipelineConfiguration smartStyleLearningEnabled]((BOOL)v19))
  {
    -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v19, 1);
    char v192 = (int)FigCapturePlatformIdentifier() > 10;
    -[FigCaptureCameraSourcePipelineConfiguration setPreLTMThumbnailEnabled:]((uint64_t)v19, v192);
    char v193 = (int)FigCapturePlatformIdentifier() > 10;
    -[FigCaptureCameraSourcePipelineConfiguration setPostColorProcessingThumbnailEnabled:]((uint64_t)v19, v193);
  }
  -[FigCaptureCameraSourcePipelineConfiguration setRebuildingGraphForTrueVideoTransition:]((uint64_t)v19, a13);
  double v194 = objc_msgSend(*(id *)(DerivedStorage + 488), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)v251, "sinkConfiguration"), "sinkID"));
  unint64_t v195 = a15;
  if (objc_msgSend((id)objc_msgSend((id)v251, "sinkConfiguration"), "sinkType") == 10)
  {
    char IsBayerRaw = FigCapturePixelFormatIsBayerRaw([v194 rawOutputFormat]);
    +[BWStillImageCoordinatorNode worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:v194 stillImageCaptureSettings:0 captureDevice:v222];
  }
  else
  {
    +[BWStillImageCoordinatorNode worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:0 stillImageCaptureSettings:0 captureDevice:v222];
    char IsBayerRaw = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageOutputRetainedBufferCountOverride:]((uint64_t)v19, (int)cf[0]);
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageOutputSushiRawAttachmentOptionEnabled:]((uint64_t)v19, IsBayerRaw);
  -[FigCaptureCameraSourcePipelineConfiguration setStructuredLightAFAssistEnabled:]((uint64_t)v19, v221);
  if (objc_msgSend((id)-[FigCaptureCameraSourcePipelineConfiguration videoPreviewSinkConfiguration](v252, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled"))
  {
    LOBYTE(v27_Block_object_dispose(&STACK[0x4E0], 8) = 0;
    LODWORD(cf[0]) = 0;
    LODWORD(v279) = 0;
    cs_getZoomPIPOverlayConfiguration(v252, (char *)&v278, (float *)cf, (float *)&v279);
    -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPSingleStreamModeEnabled:]((uint64_t)v19, (char)v278);
    -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPMinimumUIZoomFactor:]((uint64_t)v19, *(float *)cf);
    -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPSlaveStreamingFrameRate:]((uint64_t)v19, *(float *)&v279);
  }
  -[FigCaptureCameraSourcePipelineConfiguration setPreferredMasterPortType:](v19, a10);
  int v197 = [v253 preferredPreviewMaxFrameRate];
  if (v81)
  {
    int v198 = v197;
    if (![(id)obj count] && v198 >= 1) {
      -[FigCaptureCameraSourcePipelineConfiguration setTargetFrameRateWhenNotRecording:]((uint64_t)v19, v198);
    }
  }
  unsigned __int8 v199 = cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration((void *)v81);
  -[FigCaptureCameraSourcePipelineConfiguration setTemporalNoiseReductionStrengthHighEnabled:]((uint64_t)v19, v199 ^ 1);
  -[FigCaptureCameraSourcePipelineConfiguration setAudioMixWithOthersEnabled:]((uint64_t)v19, a14);
LABEL_323:
  int v200 = v277;
  if (v195) {
    _DWORD *v195 = v277;
  }
  if (v200) {
    return 0;
  }
  else {
    return v19;
  }
}

uint64_t captureSession_clientIsCameraOrDerivative(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v2 = *(void **)(DerivedStorage + 88);
  return FigCaptureClientApplicationIDIsCameraOrDerivative(v2);
}

uint64_t FigCaptureClientApplicationIDIsCameraOrDerivative(void *a1)
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!a1) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_304);
    if (!a1) {
      return 0;
    }
  }
  if (([a1 isEqualToString:0x1EFA44100] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55880] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55980] & 1) != 0)
  {
    return 1;
  }
  [a1 isEqualToString:0x1EFA55900];
  return 0;
}

uint64_t captureSession_clientSetsUserInitiatedCaptureRequestTime()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100]) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980];
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelines", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        if ([*(id *)(*((void *)&v8 + 1) + 8 * i) momentCaptureMovieRecordingEnabled]) {
          return 1;
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  return v1;
}

uint64_t csp_gdcExpandsImageDimensions(uint64_t a1)
{
  id v7 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int (**)(uint64_t, __CFString *, void, id *))(v3 + 48);
  if (!v4 || v4(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v7)) {
    return 0;
  }
  uint64_t v5 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", @"GeometricDistortionCorrectionExpandsImageDimensions"), "BOOLValue");

  return v5;
}

uint64_t cs_shouldEnablePreviewStabilization(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "isStabilizationModeSupported:", 4);
      if (result)
      {
        uint64_t result = 0;
        if (((captureSession_clientIsCameraOrDerivative(a1) & 1) != 0
           || [a2 videoStabilizationMethod] == 4)
          && ((objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "spatialOverCaptureEnabled") & 1) != 0
           || ![a2 previewDepthDataDeliveryEnabled]
           || ([a2 previewDepthFilterRenderingEnabled] & 1) == 0))
        {
          uint64_t v5 = (void *)[a2 sourceConfiguration];
          [v5 requiredMaxFrameRate];
          if (v6 <= 60.0
            && [v5 imageControlMode] != 4
            && [v5 imageControlMode] != 5
            && [v5 imageControlMode] != 6)
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresAppClipCodeNode(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F55990];
  return [v1 containsObject:v2];
}

uint64_t BWDeviceIsiPhone()
{
  if (BWDeviceIsiPhone_onceToken != -1) {
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_59);
  }
  return BWDeviceIsiPhone_isiPhone;
}

uint64_t cs_shouldEnableGreenGhostMitigation(void *a1)
{
  if ((int)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "greenGhostMitigationVersion") < 1) {
    return 0;
  }
  int v2 = [a1 depthDataDeliveryEnabled];
  return v2 ^ 1 | objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), @"DepthDataDeliveryConfigurations"), "objectForKeyedSubscript:", @"StillImageGGMSupported"), "BOOLValue");
}

uint64_t FigCaptureSoftISPEnabled(void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if ([a1 sourceDeviceType] == 10) {
    return 0;
  }
  id v15 = 0;
  uint64_t v4 = [a1 source];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  id v7 = *(void (**)(uint64_t, __CFString *, void, id *))(v6 + 48);
  if (v7)
  {
    v7(v4, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v15);
    id v8 = v15;
  }
  else
  {
    id v8 = 0;
  }
  int v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", 0x1EFA4ABE0), "BOOLValue");
  int v10 = objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"Flash"), "BOOLValue");

  if (!v9) {
    return 0;
  }
  if ([a2 sinkType] == 10)
  {
    if (([a1 depthDataDeliveryEnabled] & v10) == 1
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "swfrSupported") & 1) == 0
      && [a1 sourceDeviceType] != 6
      && [a1 sourceDeviceType] != 12)
    {
      return 0;
    }
    BOOL v11 = [a1 depthDataDeliveryEnabled]
       && objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"StillImageDepthDataType"), "intValue") == 8;
    if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStillImageStabilizationSupported") & 1) == 0
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isLearnedNRSupported") | v11) != 1)
    {
      return 0;
    }
    if ([a2 maxQualityPrioritization] != 1) {
      goto LABEL_30;
    }
    if (([a1 depthDataDeliveryEnabled] & v10) == 1
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "swfrSupported") & 1) != 0)
    {
      int v13 = [a1 sourceDeviceType];
      char v14 = [a2 constantColorEnabled];
      if (v13 != 6) {
        goto LABEL_30;
      }
    }
    else
    {
      char v14 = [a2 constantColorEnabled];
    }
    if ((v14 & 1) == 0) {
      return 0;
    }
    goto LABEL_30;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStillImageStabilizationSupported");
  if (result)
  {
LABEL_30:
    if ([a1 imageControlMode] != 4
      && ([a1 backgroundBlurEnabled] & 1) == 0
      && ([a1 cinematicFramingEnabled] & 1) == 0
      && ([a1 studioLightingEnabled] & 1) == 0)
    {
      return [a1 backgroundReplacementEnabled] ^ 1;
    }
    return 0;
  }
  return result;
}

void *cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)FigCapturePixelFormatIs420(objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "sourceConfiguration"), "requiredFormat"), "format"));
    if (result) {
      return (void *)([v1 stereoVideoCaptureEnabled] ^ 1);
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationsRequiresLumaHistograms(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    uint64_t v5 = *MEMORY[0x1E4F559E0];
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(a1);
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5))return 1; {
        ++v6;
        }
      }
      while (v3 != v6);
      uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationsRequireOfflineVideoStabilizationMotionData(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    uint64_t v5 = *MEMORY[0x1E4F21898];
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(a1);
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5))return 1; {
        ++v6;
        }
      }
      while (v3 != v6);
      uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t BWDeviceSupportsCoreMediaFaceTracking()
{
  if (BWDeviceIsiPhone_onceToken != -1) {
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_59);
  }
  if (!BWDeviceIsiPhone_isiPhone) {
    return 0;
  }
  if ((int)FigCapturePlatformIdentifier() > 9) {
    return 1;
  }
  uint64_t ModelSpecificName = FigCaptureGetModelSpecificName();
  return [&unk_1EFB030B0 containsObject:ModelSpecificName];
}

uint64_t FigCaptureMetadataObjectConfigurationsRequireFaceTracking(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    uint64_t v5 = *MEMORY[0x1E4F218A8];
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(a1);
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5))return 1; {
        ++v6;
        }
      }
      while (v3 != v6);
      uint64_t result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsBayerRaw(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1734505011)
  {
    if (a1 == 1650943796) {
      return result;
    }
    int v3 = 1650946098;
    goto LABEL_7;
  }
  if (a1 != 1734505012 && a1 != 1735549492)
  {
    int v3 = 1919379252;
LABEL_7:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(void *a1, void *a2)
{
  objc_msgSend(a2, "setStillImageProcessingMode:", objc_msgSend(a1, "stillImageProcessingMode"));
  [a2 setSensorConfigurationsByPortType:-[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1)];
  objc_msgSend(a2, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
  objc_msgSend(a2, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
  objc_msgSend(a2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  objc_msgSend(a2, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  uint64_t v4 = [a1 figThreadPriority];
  return [a2 setFigThreadPriority:v4];
}

void *FigCapturePixelFormatsByAddingCompressedVariants(void *a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] arrayWithArray:a1];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = a1;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        long long v9 = FigCaptureCompressedPixelFormatsForPixelFormat([*(id *)(*((void *)&v21 + 1) + 8 * i) intValue], 4, a2);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v10 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v18;
          do
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              if (*(void *)v18 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v17 + 1) + 8 * j);
              if (([v4 containsObject:v14] & 1) == 0) {
                [v4 addObject:v14];
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
          }
          while (v11);
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v6);
  }
  return v4;
}

BWStereoDisparityProcessorControllerConfiguration *BWPhotonicEngineCreateStereoDisparityProcessorControllerConfiguration(void *a1)
{
  if (!FigCaptureVideoDimensionsAreValid([a1 depthDataOutputDimensions])
    || ([a1 deferredPhotoProcessorEnabled] & 1) != 0
    || [a1 depthDataType] != 8)
  {
    return 0;
  }
  int v2 = objc_alloc_init(BWStereoDisparityProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWStereoDisparityProcessorControllerConfiguration setPortTypesWithDepthSegmentationPortraitParameters:](v2, "setPortTypesWithDepthSegmentationPortraitParameters:", -[BWPhotonicEngineNodeConfiguration portTypesWithDepthSegmentationPortraitParameters]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setDisparityOutputDimensions:](v2, "setDisparityOutputDimensions:", [a1 depthDataOutputDimensions]);
  -[BWStereoDisparityProcessorControllerConfiguration setStillImageDepthDataType:](v2, "setStillImageDepthDataType:", [a1 depthDataType]);
  -[BWStereoDisparityProcessorControllerConfiguration setZoomingDisparityAllowed:](v2, "setZoomingDisparityAllowed:", -[BWPhotonicEngineNodeConfiguration zoomingDisparityAllowed]((BOOL)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setShouldComputeDisparityWhenCalibrationFails:](v2, "setShouldComputeDisparityWhenCalibrationFails:", -[BWPhotonicEngineNodeConfiguration shouldComputeDisparityWhenCalibrationFails]((BOOL)a1));
  return v2;
}

BWSmartStyleRenderingProcessorControllerConfiguration *BWPhotonicEngineCreateSmartStyleRenderingProcessorControllerConfiguration(void *a1)
{
  if ((int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) < 1
    || -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1) != 1751527984
    && -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1))
  {
    return 0;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) < 1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = !-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((BOOL)a1)
  }
      && !-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
      && !-[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1);
  int v3 = objc_alloc_init(BWSmartStyleRenderingProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
  -[BWSmartStyleRenderingProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1));
  -[BWSmartStyleRenderingProcessorControllerConfiguration setReversibilityEnabled:](v3, "setReversibilityEnabled:", -[BWPhotonicEngineNodeConfiguration smartStyleReversibilityEnabled]((BOOL)a1));
  [(BWSmartStyleRenderingProcessorControllerConfiguration *)v3 setLinearYUVPixelFormat:1751527984];
  [(BWSmartStyleRenderingProcessorControllerConfiguration *)v3 setInferencesNotAvailableForSmartStyleRendering:v2];
  return v3;
}

void *BWPhotonicEngineCreateScalerProcessorControllerConfiguration(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  int v3 = (void *)BWDimensionsWithQSubResolutionFlavor(v2, 1);
  uint64_t v4 = FigCaptureLargestDimensionsFromDimensionsArray(v3);
  if ((int)v4 <= (int)-[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1)
    && SHIDWORD(v4) <= (int)((unint64_t)-[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1) >> 32))
  {
    return 0;
  }
  long long v17 = objc_alloc_init(BWScalerProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v17);
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  double v6 = -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1);
  if (*(float *)&v6 != 0.0) {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1)), 0x1EFA4EB60);
  }
  if (-[BWPhotonicEngineNodeConfiguration demosaicedRawEnabled]((BOOL)a1)
    || -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1))
  {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1EFB04F58, 0x1EFA745E0, v17);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = (id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
  uint64_t v21 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v21)
  {
    uint64_t v20 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v27 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v9 = (void *)[(id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) objectForKeyedSubscript:v8];
        uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v23;
          do
          {
            for (uint64_t j = 0; j != v11; ++j)
            {
              if (*(void *)v23 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v22 + 1) + 8 * j);
              if (!objc_msgSend(v5, "objectForKeyedSubscript:", v14, v17)) {
                objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", -[BWPhotonicEngineNodeConfiguration inferenceMainImageDownscalingFactor]((uint64_t)a1)), v14);
              }
            }
            uint64_t v11 = [v9 countByEnumeratingWithState:&v22 objects:v30 count:16];
          }
          while (v11);
        }
      }
      uint64_t v21 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
    }
    while (v21);
  }
  if (!objc_msgSend(v5, "count", v17)) {
    return v18;
  }
  id v15 = v18;
  objc_msgSend(v18, "setMainImageDownscalingFactorByAttachedMediaKey:", (id)objc_msgSend(v5, "copy"));
  return v15;
}

BWStillImageProcessorControllerConfiguration *BWPhotonicEngineCreateRedEyeProcessorControllerConfiguration(void *a1)
{
  if (!-[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((BOOL)a1)) {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWStillImageProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWNRFProcessorControllerConfiguration *BWPhotonicEngineCreateNRFProcessorControllerConfiguration(void *a1)
{
  unsigned int v2 = -[BWPhotonicEngineNodeConfiguration stillImageFusionScheme]((uint64_t)a1);
  int v3 = 0;
  if (v2 >= 4)
  {
    if (v2 - 4 <= 1) {
      int v3 = objc_alloc_init(BWNRFProcessorControllerConfiguration);
    }
    BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
    -[BWNRFProcessorControllerConfiguration setAlwaysAllowModifyingInputBuffers:](v3, "setAlwaysAllowModifyingInputBuffers:", -[BWPhotonicEngineNodeConfiguration alwaysAllowModifyingInputBuffers]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setCmiResourceEnabled:](v3, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((BOOL)a1));
    -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v3, "setDeferredCaptureSupportEnabled:", [a1 deferredCaptureSupportEnabled]);
    -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v3, "setDeferredPhotoProcessorEnabled:", [a1 deferredPhotoProcessorEnabled]);
    -[BWNRFProcessorControllerConfiguration setQuadraSupportEnabled:](v3, "setQuadraSupportEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setFusionEnabled:](v3, "setFusionEnabled:", -[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setSemanticRenderingVersion:](v3, "setSemanticRenderingVersion:", -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1));
    if (-[BWPhotonicEngineNodeConfiguration digitalFlashSupportEnabled]((BOOL)a1))
    {
      uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1), "allKeys"));
      -[BWNRFProcessorControllerConfiguration setLowLightFusionEnabled:](v3, "setLowLightFusionEnabled:", objc_msgSend(v4, "isEqualToSet:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", -[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1))) ^ 1);
      -[BWNRFProcessorControllerConfiguration setRawNightModeEnabled:](v3, "setRawNightModeEnabled:", [(id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1) count] != 0);
    }
    -[BWNRFProcessorControllerConfiguration setDeepFusionEnabled:](v3, "setDeepFusionEnabled:", -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setDeepFusionWaitForProcessingToFinish:](v3, "setDeepFusionWaitForProcessingToFinish:", -[BWPhotonicEngineNodeConfiguration deepFusionWaitForPreprocessingToFinish]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setSwfrEnabled:](v3, "setSwfrEnabled:", (int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) > 0);
    char v5 = -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1);
    if ([+[FigCaptureCameraParameters sharedInstance] nrfVersion] >= 4&& (v5 & 0x15) != 0)
    {
      -[BWNRFProcessorControllerConfiguration setLearnedNRMode:](v3, "setLearnedNRMode:", -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1));
    }
    -[BWNRFProcessorControllerConfiguration setDepthDataDeliveryEnabled:](v3, "setDepthDataDeliveryEnabled:", -[BWPhotonicEngineNodeConfiguration depthDataDeliveryEnabled]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setGainMapMainImageDownscalingFactor:](v3, "setGainMapMainImageDownscalingFactor:", -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setGreenGhostMitigationVersion:](v3, "setGreenGhostMitigationVersion:", -[BWPhotonicEngineNodeConfiguration greenGhostMitigationVersion]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setDemosaicedRawPixelFormat:](v3, "setDemosaicedRawPixelFormat:", -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setDemosaicedRawEnabled:](v3, "setDemosaicedRawEnabled:", -[BWPhotonicEngineNodeConfiguration demosaicedRawEnabled]((BOOL)a1));
    -[BWNRFProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v3, "setRawColorCalibrationsByPortType:", -[BWPhotonicEngineNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v3, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWPhotonicEngineNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  }
  return v3;
}

BWSoftISPProcessorControllerConfiguration *BWPhotonicEngineCreateSoftISPProcessorControllerConfiguration(void *a1)
{
  if (!-[BWPhotonicEngineNodeConfiguration softISPSupportEnabled]((BOOL)a1)
    || (int)-[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1) > 1
    || (int)-[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1) > 1)
  {
    return 0;
  }
  unsigned int v2 = objc_alloc_init(BWSoftISPProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWSoftISPProcessorControllerConfiguration setSensorRawPixelFormat:](v2, "setSensorRawPixelFormat:", -[BWPhotonicEngineNodeConfiguration sensorRawPixelFormat]((uint64_t)a1));
  -[BWSoftISPProcessorControllerConfiguration setInputDimensions:](v2, "setInputDimensions:", -[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1));
  -[BWSoftISPProcessorControllerConfiguration setSensorCenterOffset:](v2, "setSensorCenterOffset:", -[BWPhotonicEngineNodeConfiguration sensorCenterOffset]((uint64_t)a1));
  if ([(id)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1) count])
  {
    -[BWSoftISPProcessorControllerConfiguration setInputDimensionsByQSubResolutionFlavorByPortType:](v2, "setInputDimensionsByQSubResolutionFlavorByPortType:", -[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1));
  }
  int v3 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  if (objc_msgSend((id)BWDimensionsWithQSubResolutionFlavor(v3, 2), "count"))
  {
    -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1);
    -[BWSoftISPProcessorControllerConfiguration setQBinProcessingMode:](v2, "setQBinProcessingMode:", (-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) >> 2) & 2);
  }
  -[BWSoftISPProcessorControllerConfiguration setCmiResourceEnabled:](v2, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((BOOL)a1));
  -[BWSoftISPProcessorControllerConfiguration setStandardYUVProcessingEnabled:](v2, "setStandardYUVProcessingEnabled:", [a1 deferredPhotoProcessorEnabled] ^ 1);
  -[BWSoftISPProcessorControllerConfiguration setGdcEnabled:](v2, "setGdcEnabled:", [(id)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1) count] != 0);
  -[BWSoftISPProcessorControllerConfiguration setRawNightModeEnabled:](v2, "setRawNightModeEnabled:", [(id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1) count] != 0);
  -[BWSoftISPProcessorControllerConfiguration setDeepFusionEnabled:](v2, "setDeepFusionEnabled:", -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1));
  -[BWSoftISPProcessorControllerConfiguration setLearnedNREnabled:](v2, "setLearnedNREnabled:", (-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) != 0);
  -[BWSoftISPProcessorControllerConfiguration setQuadraProcessingEnabled:](v2, "setQuadraProcessingEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((BOOL)a1));
  [a1 maxLossyCompressionLevel];
  [(BWSoftISPProcessorControllerConfiguration *)v2 setLossyCompressionLevel:0];
  int v4 = [+[FigCaptureCameraParameters sharedInstance] nrfVersion];
  -[BWSoftISPProcessorControllerConfiguration setLinearRGBForDisparityEnabled:](v2, "setLinearRGBForDisparityEnabled:", [a1 depthDataType] == 8);
  -[BWSoftISPProcessorControllerConfiguration setAuxiliaryTypesForFocusPixelDisparityEnabled:](v2, "setAuxiliaryTypesForFocusPixelDisparityEnabled:", [a1 depthDataType] == 9);
  [(BWSoftISPProcessorControllerConfiguration *)v2 setLtmHDRCurvesEnabled:v4 > 3];
  -[BWSoftISPProcessorControllerConfiguration setSfhrSupportEnabled:](v2, "setSfhrSupportEnabled:", -[BWPhotonicEngineNodeConfiguration sfhrMode]((uint64_t)a1) & 1);
  -[BWSoftISPProcessorControllerConfiguration setLowlightSFHRSupportEnabled:](v2, "setLowlightSFHRSupportEnabled:", (-[BWPhotonicEngineNodeConfiguration sfhrMode]((uint64_t)a1) >> 1) & 1);
  -[BWSoftISPProcessorControllerConfiguration setDocumentScanningEnabled:](v2, "setDocumentScanningEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorClippingRecoveryEnabled]((BOOL)a1));
  return v2;
}

BWLearnedNRProcessorControllerConfiguration *BWPhotonicEngineCreateLearnedNRProcessorControllerConfiguration(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) == 0) {
    return 0;
  }
  unsigned int v2 = objc_alloc_init(BWLearnedNRProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  int v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v4 = (void *)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1EFB05948, *(void *)(*((void *)&v10 + 1) + 8 * v8++), (void)v10);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
  -[BWLearnedNRProcessorControllerConfiguration setFinalCropRectOverscanMultiplierByPortType:](v2, "setFinalCropRectOverscanMultiplierByPortType:", v3, (void)v10);
  return v2;
}

BWJasperDisparityProcessorControllerConfiguration *BWPhotonicEngineCreateJasperDisparityProcessorControllerConfiguration(void *a1)
{
  if ([a1 depthDataType] != 7) {
    return 0;
  }
  unsigned int v2 = objc_alloc_init(BWJasperDisparityProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWIntelligentDistortionCorrectionProcessorControllerConfiguration *BWPhotonicEngineCreateIntelligentDistortionCorrectionProcessorControllerConfiguration(void *a1)
{
  if (![(id)-[BWPhotonicEngineNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1) count]&& !objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1), "count"))
  {
    return 0;
  }
  unsigned int v2 = objc_alloc_init(BWIntelligentDistortionCorrectionProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithGeometricDistortionCorrectionEnabled:](v2, "setPortTypesWithGeometricDistortionCorrectionEnabled:", -[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithIntelligentDistortionCorrectionEnabled:](v2, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", -[BWPhotonicEngineNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionExpandedImageDimensions:](v2, "setGeometricDistortionCorrectionExpandedImageDimensions:", -[BWPhotonicEngineNodeConfiguration geometricDistortionCorrectionExpandedImageDimensions]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionInputCropOffset:](v2, "setGeometricDistortionCorrectionInputCropOffset:", -[BWPhotonicEngineNodeConfiguration sensorCenterOffset]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionVersion:](v2, "setIntelligentDistortionCorrectionVersion:", -[BWPhotonicEngineNodeConfiguration intelligentDistortionCorrectionVersion]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionAppliesFinalDimensions:](v2, "setIntelligentDistortionCorrectionAppliesFinalDimensions:", -[BWPhotonicEngineNodeConfiguration intelligentDistortionCorrectionAppliesFinalDimensions]((BOOL)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setHorizontalSensorBinningFactor:](v2, "setHorizontalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setVerticalSensorBinningFactor:](v2, "setVerticalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setProvidedInferenceAttachedMediaByMode:](v2, "setProvidedInferenceAttachedMediaByMode:", -[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setStereoPhotoOutputDimensions:](v2, "setStereoPhotoOutputDimensions:", [a1 stereoPhotoOutputDimensions]);
  return v2;
}

BWInferenceEngineControllerConfiguration *BWPhotonicEngineCreateInferenceControllerConfiguration(void *a1)
{
  _DWORD v38[3] = *MEMORY[0x1E4F143B8];
  if (!-[BWPhotonicEngineNodeConfiguration generateInferencesForSemanticProcessingIfNeeded]((BOOL)a1)) {
    return 0;
  }
  BOOL v2 = (-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
    && (-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((BOOL)a1)
     || -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1));
  BOOL v3 = (int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) >= 1
    && (-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((BOOL)a1)
     || -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1));
  uint64_t v4 = [(id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) count];
  if (!-[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((BOOL)a1) && !v2)
  {
    BOOL v5 = -[BWPhotonicEngineNodeConfiguration semanticStyleRenderingEnabled]((BOOL)a1);
    int v6 = v4 || v5;
    if ((v6 | v3) != 1) {
      return 0;
    }
  }
  uint64_t v7 = objc_alloc_init(BWInferenceEngineControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v7);
  -[BWInferenceEngineControllerConfiguration setFastMattingEnabled:](v7, "setFastMattingEnabled:", (int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1);
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA80] set];
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) < 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    [v8 addObject:@"PersonSemanticsSkin"];
    [v8 addObject:0x1EFA6A200];
    uint64_t v9 = 2;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1) {
    [v8 addObject:0x1EFA745A0];
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) >= 3)
  {
    [v8 addObjectsFromArray:BWInferenceLowResPersonInstanceMaskKeys()];
    v9 |= 0x10uLL;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 3)
  {
    [v8 addObject:0x1EFA74420];
    [v8 addObject:@"PersonSemanticsHair"];
  }
  if (-[BWPhotonicEngineNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1)) {
    v9 |= 8uLL;
  }
  if (-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1)
    && (int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) >= 2)
  {
    v38[0] = @"PersonSemanticsSkin";
    v38[1] = 0x1EFA745A0;
    v38[2] = 0x1EFA6A200;
    -[BWInferenceEngineControllerConfiguration setSwfrInferenceMasks:](v7, "setSwfrInferenceMasks:", [MEMORY[0x1E4F1C978] arrayWithObjects:v38 count:3]);
    objc_msgSend(v8, "addObjectsFromArray:", -[BWInferenceEngineControllerConfiguration swfrInferenceMasks](v7, "swfrInferenceMasks"));
  }
  if ([(id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1) count])
  {
    [v8 addObject:@"PersonSemanticsSkin"];
    [v8 addObject:@"PersonSemanticsHair"];
    [v8 addObject:0x1EFA6A200];
    [v8 addObject:0x1EFA745A0];
  }
  if (-[BWPhotonicEngineNodeConfiguration semanticStyleRenderingEnabled]((BOOL)a1)
    || -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1))
  {
    [v8 addObject:@"PersonSemanticsSkin"];
    [v8 addObject:0x1EFA745A0];
    int v10 = -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1);
    long long v11 = &BWAttachedMediaKey_PersonSegmentationMask;
    if (v10 <= 3) {
      long long v11 = &BWInferenceAttachedMediaKey_LowResPersonSegmentationMask;
    }
    [v8 addObject:*v11];
    [(BWInferenceEngineControllerConfiguration *)v7 setSmartCameraClassificationsEnabled:1];
  }
  long long v27 = v7;
  BOOL v12 = -[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((BOOL)a1);
  uint64_t v13 = v9 | 6;
  long long v32 = 0u;
  long long v33 = 0u;
  if (!v12) {
    uint64_t v13 = v9;
  }
  uint64_t v26 = v13;
  long long v34 = 0uLL;
  long long v35 = 0uLL;
  uint64_t v14 = (void *)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
  uint64_t v15 = [v14 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v33 != v17) {
          objc_enumerationMutation(v14);
        }
        long long v19 = (void *)[(id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) objectForKeyedSubscript:*(void *)(*((void *)&v32 + 1) + 8 * i)];
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        uint64_t v20 = [v19 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)v29;
          do
          {
            for (uint64_t j = 0; j != v21; ++j)
            {
              if (*(void *)v29 != v22) {
                objc_enumerationMutation(v19);
              }
              objc_msgSend(v8, "addObject:", *(void *)(*((void *)&v28 + 1) + 8 * j), v26);
            }
            uint64_t v21 = [v19 countByEnumeratingWithState:&v28 objects:v36 count:16];
          }
          while (v21);
        }
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v16);
  }
  long long v24 = v27;
  -[BWInferenceEngineControllerConfiguration setMattingOutputValidContentDetectionEnabled:](v27, "setMattingOutputValidContentDetectionEnabled:", [(id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) objectForKeyedSubscript:&unk_1EFAFFC78] != 0);
  -[BWInferenceEngineControllerConfiguration setEnabledInferenceMasks:](v27, "setEnabledInferenceMasks:", [v8 allObjects]);
  [(BWInferenceEngineControllerConfiguration *)v27 setEnabledVisionInferences:v26];
  -[BWInferenceEngineControllerConfiguration setPersonSemanticsVersion:](v27, "setPersonSemanticsVersion:", -[BWPhotonicEngineNodeConfiguration personSemanticsVersion]((uint64_t)a1));
  -[BWInferenceEngineControllerConfiguration setProducesHighQualityInferencesFromZoomRegionWithLargeDigitalZoom:](v27, "setProducesHighQualityInferencesFromZoomRegionWithLargeDigitalZoom:", FigCaptureVideoDimensionsAreValid([a1 stereoPhotoOutputDimensions]));
  -[BWInferenceEngineControllerConfiguration setSuppressVisionTimeOutFailure:](v27, "setSuppressVisionTimeOutFailure:", (int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) > 0);
  return v24;
}

id BWInferenceLowResPersonInstanceMaskKeys()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:4];
  uint64_t v1 = 1;
  do
  {
    [v0 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@%d", @"LowResPersonInstanceMask", v1)];
    uint64_t v1 = (v1 + 1);
  }
  while (v1 != 5);
  BOOL v2 = (void *)[v0 copy];
  return v2;
}

BWSWFRProcessorControllerConfiguration *BWPhotonicEngineCreateSWFRProcessorControllerConfiguration(void *a1)
{
  if ((int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) < 1) {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWSWFRProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWSWFRProcessorControllerConfiguration setVersion:](v2, "setVersion:", -[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1));
  [a1 maxLossyCompressionLevel];
  [(BWSWFRProcessorControllerConfiguration *)v2 setLossyCompressionLevel:0];
  return v2;
}

BWDeferredProcessorControllerConfiguration *BWPhotonicEngineCreateDeferredProcessorControllerConfiguration(void *a1)
{
  if (![a1 deferredPhotoProcessorEnabled]) {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWDeferredProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  BOOL v3 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  uint64_t v4 = (void *)BWDimensionsWithQSubResolutionFlavor(v3, 2);
  if ([v4 count]) {
    [(BWDeferredProcessorControllerConfiguration *)v2 setUltraHighResolutionSensorRawDimensions:FigCaptureLargestDimensionsFromDimensionsArray(v4)];
  }
  -[BWDeferredProcessorControllerConfiguration setInferenceMainImageDownscalingFactor:](v2, "setInferenceMainImageDownscalingFactor:", -[BWPhotonicEngineNodeConfiguration inferenceMainImageDownscalingFactor]((uint64_t)a1));
  return v2;
}

BWDeferredCaptureControllerConfiguration *BWPhotonicEngineCreateDeferredContainerControllerConfiguration(void *a1)
{
  if (![a1 deferredCaptureSupportEnabled]) {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWDeferredCaptureControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWDeepZoomProcessorControllerConfiguration *BWPhotonicEngineCreateDeepZoomProcessorControllerConfiguration(void *a1)
{
  if ((int)-[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 1)
  {
    if ([a1 deferredPhotoProcessorEnabled])
    {
      uint64_t v2 = 3;
      if (!FigCaptureVideoDimensionsAreValid([a1 deepFusionEnhancedResolutionDimensions]))
      {
        if (FigCaptureVideoDimensionsAreValid([a1 stereoPhotoOutputDimensions])) {
          uint64_t v2 = 3;
        }
        else {
          uint64_t v2 = 1;
        }
      }
      goto LABEL_11;
    }
    if ((int)-[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 2
      && ([a1 deferredCaptureSupportEnabled] & 1) == 0)
    {
      uint64_t v2 = 2;
LABEL_11:
      BOOL v3 = objc_alloc_init(BWDeepZoomProcessorControllerConfiguration);
      BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
      -[BWDeepZoomProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1));
      [(BWDeepZoomProcessorControllerConfiguration *)v3 setType:v2];
      -[BWDeepZoomProcessorControllerConfiguration setMode:](v3, "setMode:", -[BWPhotonicEngineNodeConfiguration deepZoomMode]((uint64_t)a1));
      -[BWDeepZoomProcessorControllerConfiguration setStereoPhotoOutputDimensions:](v3, "setStereoPhotoOutputDimensions:", [a1 stereoPhotoOutputDimensions]);
      return v3;
    }
  }
  return 0;
}

BWDeepFusionProcessorControllerConfiguration *BWPhotonicEngineCreateDeepFusionProcessorControllerConfiguration(void *a1)
{
  if (!-[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((BOOL)a1)
    || ([a1 deferredCaptureSupportEnabled] & 1) != 0)
  {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWDeepFusionProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWDeepFusionProcessorControllerConfiguration setCmiResourceEnabled:](v2, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((BOOL)a1));
  -[BWDeepFusionProcessorControllerConfiguration setStillImageFusionScheme:](v2, "setStillImageFusionScheme:", -[BWPhotonicEngineNodeConfiguration stillImageFusionScheme]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setSemanticRenderingVersion:](v2, "setSemanticRenderingVersion:", -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v2, "setRawColorCalibrationsByPortType:", -[BWPhotonicEngineNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v2, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWPhotonicEngineNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setQuadraSupportEnabled:](v2, "setQuadraSupportEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((BOOL)a1));
  -[BWDeepFusionProcessorControllerConfiguration setGainMapMainImageDownscalingFactor:](v2, "setGainMapMainImageDownscalingFactor:", -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1));
  return v2;
}

BWColorConstancyProcessorControllerConfiguration *BWPhotonicEngineCreateColorConstancyProcessorControllerConfiguration(void *a1)
{
  if ((int)-[BWPhotonicEngineNodeConfiguration constantColorVersion]((uint64_t)a1) < 1) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWColorConstancyProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWColorConstancyProcessorControllerConfiguration setVersion:](v2, "setVersion:", -[BWPhotonicEngineNodeConfiguration constantColorVersion]((uint64_t)a1));
  [a1 maxLossyCompressionLevel];
  [(BWColorConstancyProcessorControllerConfiguration *)v2 setLossyCompressionLevel:0];
  -[BWColorConstancyProcessorControllerConfiguration setClippingRecoveryEnabled:](v2, "setClippingRecoveryEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorClippingRecoveryEnabled]((BOOL)a1));
  -[BWColorConstancyProcessorControllerConfiguration setSaturationBoostEnabled:](v2, "setSaturationBoostEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorSaturationBoostEnabled]((BOOL)a1));
  return v2;
}

uint64_t copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4) {
    return 4294954516;
  }
  uint64_t v9 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 4294954511;
  }
  if (CFEqual(a2, @"AutofocusProcessor_VideoMode"))
  {
    switch(*(_DWORD *)(v9 + 40))
    {
      case 0:
        long long v11 = @"Mode_StillPreview";
        goto LABEL_24;
      case 1:
        long long v11 = @"Mode_VideoPreview";
        goto LABEL_24;
      case 2:
        long long v11 = @"Mode_VideoRecording";
        goto LABEL_24;
      case 3:
        long long v11 = @"Mode_Conference";
        goto LABEL_24;
      case 4:
        long long v11 = @"Mode_Panorama";
        goto LABEL_24;
      case 5:
        long long v11 = @"Mode_TimeLapsePreview";
        goto LABEL_24;
      case 6:
        long long v11 = @"Mode_TimeLapseCapture";
        goto LABEL_24;
      default:
        return 0;
    }
  }
  if (CFEqual(a2, @"AutoExposure"))
  {
    if (*(_DWORD *)(v9 + 7464) == 1)
    {
      float valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = @"x";
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      BOOL v36 = @"y";
      CFNumberRef v32 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      float v37 = @"w";
      CFNumberRef v33 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      float v38 = @"h";
      CFNumberRef v34 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      CFDictionaryRef v13 = CFDictionaryCreate(v12, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v14 = 0;
      *a4 = v13;
      do
      {
        CFRelease(*(void **)((char *)&values + v14));
        v14 += 8;
      }
      while (v14 != 32);
      return 0;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, @"SpotMeteredExposure"))
  {
    if (*(_DWORD *)(v9 + 7464) == 2)
    {
      float valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = @"x";
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      BOOL v36 = @"y";
      CFNumberRef v32 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      float v37 = @"w";
      CFNumberRef v33 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      float v38 = @"h";
      CFNumberRef v34 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      CFDictionaryRef v16 = CFDictionaryCreate(v15, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v17 = 0;
      *a4 = v16;
      do
      {
        CFRelease(*(void **)((char *)&values + v17));
        v17 += 8;
      }
      while (v17 != 32);
      return 0;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, @"FlashExposure"))
  {
    if (*(_DWORD *)(v9 + 7464) == 5)
    {
      float valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = @"x";
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      BOOL v36 = @"y";
      CFNumberRef v32 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      float v37 = @"w";
      CFNumberRef v33 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      float valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      float v38 = @"h";
      CFNumberRef v34 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      CFDictionaryRef v21 = CFDictionaryCreate(v20, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v22 = 0;
      *a4 = v21;
      do
      {
        CFRelease(*(void **)((char *)&values + v22));
        v22 += 8;
      }
      while (v22 != 32);
      return 0;
    }
LABEL_31:
    *a4 = 0;
    return 4294954513;
  }
  if (CFEqual(a2, @"MonitorSubjectArea"))
  {
    long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v24 = *(unsigned __int8 *)(v9 + 4336);
    goto LABEL_35;
  }
  if (CFEqual(a2, @"ProvidesStortorgetMetadata"))
  {
    if (*(unsigned char *)(v9 + 18120)) {
      long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    }
    else {
      long long v23 = (__CFString **)MEMORY[0x1E4F1CFC8];
    }
LABEL_42:
    long long v11 = *v23;
LABEL_24:
    CFDictionaryRef v18 = (const __CFDictionary *)CFRetain(v11);
LABEL_25:
    CFDictionaryRef v19 = v18;
    uint64_t result = 0;
    *a4 = v19;
    return result;
  }
  if (CFEqual(a2, @"ExposureBias"))
  {
    p_keys = (void **)(v9 + 7524);
    CFAllocatorRef v26 = a3;
    CFNumberType v27 = kCFNumberFloatType;
LABEL_45:
    CFDictionaryRef v18 = CFNumberCreate(v26, v27, p_keys);
    goto LABEL_25;
  }
  if (CFEqual(a2, @"PreFlashAFParameters"))
  {
    CFDictionaryRef v18 = FigImageControl_CopyPreFlashAFParameters(a1);
    goto LABEL_25;
  }
  if (CFEqual(a2, @"DeviceRotationDegrees"))
  {
    unsigned int v28 = *(unsigned __int16 *)(v9 + 5666);
    if (v28 > 3) {
      return 4294954513;
    }
    if (*(_WORD *)(v9 + 5666)) {
      int v29 = -90 * v28 + 360;
    }
    else {
      int v29 = 0;
    }
    LODWORD(keys) = v29;
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_keys = &keys;
    CFNumberType v27 = kCFNumberSInt32Type;
    goto LABEL_45;
  }
  if (CFEqual(a2, @"AutoWhiteBalanceLock"))
  {
    long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v24 = *(unsigned __int8 *)(v9 + 7424);
    goto LABEL_35;
  }
  if (CFEqual(a2, @"ExposureLock"))
  {
    long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v24 = *(unsigned __int8 *)(v9 + 7472);
    goto LABEL_35;
  }
  if (CFEqual(a2, @"HDRScene"))
  {
    if (!*(unsigned char *)(v9 + 9061)) {
      return 4294954513;
    }
    long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v24 = *(unsigned __int8 *)(v9 + 9060);
    goto LABEL_35;
  }
  if (CFEqual(a2, @"HDRSceneDetectionEnabled"))
  {
    long long v23 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v24 = *(unsigned __int8 *)(v9 + 9061);
LABEL_35:
    if (!v24) {
      long long v23 = (__CFString **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_42;
  }
  if (CFEqual(a2, @"FocusPreset"))
  {
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E4F539A8]))
    {
      long long v11 = @"Still";
      goto LABEL_24;
    }
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E4F539C0]))
    {
      long long v11 = @"Video";
      goto LABEL_24;
    }
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E4F539C8]))
    {
      long long v11 = @"CinematicVideo";
      goto LABEL_24;
    }
    uint64_t result = CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E4F539B8]);
    if (result)
    {
      long long v11 = @"TimeLapse";
      goto LABEL_24;
    }
    *a4 = 0;
  }
  else
  {
    if (CFEqual(a2, @"FaceDetectionMode"))
    {
      if (*(unsigned char *)(v9 + 7473) && *(unsigned char *)(v9 + 560))
      {
        long long v11 = @"AEAndAF";
      }
      else if (*(unsigned char *)(v9 + 7473))
      {
        long long v11 = @"AEOnly";
      }
      else if (*(unsigned char *)(v9 + 560))
      {
        long long v11 = @"AFOnly";
      }
      else
      {
        long long v11 = @"Disable";
      }
      goto LABEL_24;
    }
    return 4294954512;
  }
  return result;
}

void sub_1A593919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5939510(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t BWCMSampleBufferCreateDeepCopyWithNewPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2, int a3, CFTypeRef *a4, CMSampleBufferRef *a5)
{
  CMItemCount timingArrayEntriesNeededOut = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  if (!a1 || !a2 || !a4 || !a5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v22 = FigSignalErrorAt();
LABEL_40:
    if (formatDescriptionOut) {
      CFRelease(formatDescriptionOut);
    }
    goto LABEL_34;
  }
  int v10 = (const opaqueCMFormatDescription *)*a4;
  SampleTimingInfoArradouble y = CMSampleBufferGetSampleTimingInfoArray(a1, 1, 0, &timingArrayEntriesNeededOut);
  if (SampleTimingInfoArray)
  {
    uint64_t v22 = SampleTimingInfoArray;
    fig_log_get_emitter();
LABEL_39:
    FigDebugAssert3();
    goto LABEL_40;
  }
  int v24 = a3;
  if (timingArrayEntriesNeededOut) {
    CMSampleBufferGetSampleTimingInfoArray(a1, timingArrayEntriesNeededOut, &timingArrayOut, &timingArrayEntriesNeededOut);
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  char v13 = 1;
  uint64_t v14 = v10;
  do
  {
    CFAllocatorRef v15 = v14;
    if (!v14)
    {
      uint64_t v16 = CMVideoFormatDescriptionCreateForImageBuffer(v12, a2, &formatDescriptionOut);
      if (v16) {
        goto LABEL_38;
      }
      CFAllocatorRef v15 = formatDescriptionOut;
    }
    if (timingArrayEntriesNeededOut) {
      p_CMSampleTimingInfo timingArrayOut = &timingArrayOut;
    }
    else {
      p_CMSampleTimingInfo timingArrayOut = 0;
    }
    uint64_t v16 = CMSampleBufferCreateForImageBuffer(v12, a2, 1u, 0, 0, v15, p_timingArrayOut, &sampleBufferOut);
    BOOL v19 = v16 == -12743 && formatDescriptionOut == 0;
    if (v16 && !v19)
    {
LABEL_38:
      uint64_t v22 = v16;
      fig_log_get_emitter();
      goto LABEL_39;
    }
    if (v19) {
      uint64_t v14 = 0;
    }
    if (sampleBufferOut) {
      break;
    }
    char v20 = (v10 != 0) & v13;
    char v13 = 0;
  }
  while ((v20 & 1) != 0);
  CMPropagateAttachments(a1, sampleBufferOut);
  if (v24) {
    sbu_replaceAttachedMediaWithDeepCopy(sampleBufferOut);
  }
  else {
    CMRemoveAttachment(sampleBufferOut, @"AttachedMedia");
  }
  *a5 = sampleBufferOut;
  CMSampleBufferRef sampleBufferOut = 0;
  CMVideoFormatDescriptionRef v21 = formatDescriptionOut;
  if (!formatDescriptionOut) {
    return 0;
  }
  if (*a4)
  {
    CFRelease(*a4);
    CMVideoFormatDescriptionRef v21 = formatDescriptionOut;
  }
  uint64_t v22 = 0;
  *a4 = v21;
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
LABEL_34:
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  return v22;
}

uint64_t BWCMSampleBufferCreateCopyWithNewPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  return BWCMSampleBufferCreateDeepCopyWithNewPixelBuffer(a1, a2, 1, a3, a4);
}

float BWModifiedMovingAverage(float a1, float a2, float a3)
{
  return (float)(a1 * a3) + (float)(a2 * (float)(1.0 - a3));
}

__CFString *mfsp_avVideoCodec(__CFString *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ([(__CFString *)result outputFormat])
    {
      unsigned int v2 = [(__CFString *)v1 outputFormat];
      return (__CFString *)BWStringForOSType(v2);
    }
    else
    {
      id v9 = 0;
      uint64_t v3 = objc_msgSend((id)-[__CFString sourceConfiguration](v1, "sourceConfiguration"), "source");
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      int v6 = *(void (**)(uint64_t, __CFString *, void, id *))(v5 + 48);
      if (v6)
      {
        v6(v3, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v9);
        id v7 = v9;
      }
      else
      {
        id v7 = 0;
      }
      int v8 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", @"HEVC"), "BOOLValue");

      if (v8) {
        return @"hvc1";
      }
      else {
        return @"avc1";
      }
    }
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata()
{
  return 0;
}

void sub_1A5941E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void FigCaptureLogCameraStreamingPowerEvent(int a1, const void *a2, int a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, float a9, long long *a10)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a10)
  {
    long long v16 = a10[1];
    long long v35 = *a10;
    long long v36 = v16;
    int v37 = *((_DWORD *)a10 + 8);
  }
  else
  {
    int v37 = 0;
    long long v36 = 0u;
    long long v35 = 0u;
  }
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (sCameraStreamingPowerEventsByPortType && sCameraPowerLogEventQueue)
  {
    if (dword_1EB4C55B0)
    {
      int v34 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2) {
      CFRetain(a2);
    }
    atomic_fetch_add_explicit(&sPendingPowerEventsCount, 1uLL, memory_order_relaxed);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigCaptureLogCameraStreamingPowerEvent_block_invoke;
    block[3] = &__block_descriptor_108_e5_v8__0l;
    int v23 = a1;
    int v24 = a3;
    char v29 = a4;
    block[4] = a2;
    void block[5] = a5;
    block[6] = a6;
    float v25 = a9;
    char v30 = a7;
    char v31 = a8;
    BOOL v32 = a10 != 0;
    long long v26 = v35;
    long long v27 = v36;
    int v28 = v37;
    dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, block);
  }
  else
  {
    CFDictionaryRef v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  id v5 = +[BWCameraStreamingMonitor sharedCameraStreamingMonitor];
  uint64_t v6 = *(unsigned int *)(a1 + 484);
  uint64_t v7 = [*(id *)(a1 + 496) tccIdentity];
  uint64_t v8 = [*(id *)(a1 + 496) mediaEnvironment];
  long long v9 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v9;
  [v5 setCameraAccess:a2 deviceType:v6 clientAuditToken:v19 tccIdentity:v7 mediaEnvironment:v8 completionHandler:0];
  os_unfair_lock_unlock(v4);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  int v10 = *(void **)(a1 + 552);
  uint64_t result = [v10 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        BWFigVideoCaptureStreamSetClientProcessHasAccessToCamera(*(void *)(*((void *)&v15 + 1) + 8 * v14++), a2);
      }
      while (v12 != v14);
      uint64_t result = [v10 countByEnumeratingWithState:&v15 objects:v20 count:16];
      uint64_t v12 = result;
    }
    while (result);
  }
  return result;
}

void BWFigVideoCaptureStreamSetClientProcessHasAccessToCamera(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 352);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 352));
    *(unsigned char *)(a1 + 356) = a2;
    os_unfair_lock_unlock(v4);
  }
}

uint64_t FigCaptureMetadataUtilitiesScaleFinalCropRectForPadding(const void *a1, float a2)
{
  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  __asm { FMOV            V0.2D, #1.0 }
  long long v9 = _Q0;
  FigCFDictionaryGetCGRectIfPresent();
  FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, *(CGFloat *)&v9, *((CGFloat *)&v9 + 1), 1.0 / (a2 + 1.0));
  return FigCFDictionarySetCGRect();
}

CGFloat mscsn_applyPreviewShiftToCropRect(double a1, double a2, CGFloat a3, CGFloat a4, double a5, double a6, float a7)
{
  double v7 = a1 + a5;
  if (1.0 - a3 < v7) {
    double v7 = 1.0 - a3;
  }
  if (v7 < 0.0) {
    double v7 = 0.0;
  }
  double v8 = a2 + a6;
  if (1.0 - a4 < v8) {
    double v8 = 1.0 - a4;
  }
  if (v8 < 0.0) {
    double v8 = 0.0;
  }
  return FigCaptureMetadataUtilitiesScaleRect(v7, v8, a3, a4, a7);
}

CGFloat FigCaptureMetadataUtilitiesScaleRect2D(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  CGFloat v9 = CGRectGetWidth(*(CGRect *)&a1) * a5;
  v12.origin.double x = a1;
  v12.origin.double y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  CGRectGetHeight(v12);
  v13.origin.double x = a1;
  v13.origin.double y = a2;
  v13.size.CGFloat width = a3;
  v13.size.CGFloat height = a4;
  CGFloat v10 = CGRectGetMidX(v13) - v9 * 0.5;
  v14.origin.double x = a1;
  v14.origin.double y = a2;
  v14.size.CGFloat width = a3;
  v14.size.CGFloat height = a4;
  CGRectGetMidY(v14);
  return v10;
}

CGFloat FigCaptureMetadataUtilitiesScaleRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return FigCaptureMetadataUtilitiesScaleRect2D(a1, a2, a3, a4, a5);
}

uint64_t BWOverCaptureSampleBufferUnpackAndRetain(CMAttachmentBearerRef target, int a2, void *a3, CFTypeRef *a4, void *a5, void *a6)
{
  if (target)
  {
    if (a4) {
      *a4 = CFRetain(target);
    }
    if (a3)
    {
      CFTypeRef v11 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, @"AttachedMedia", 0), "objectForKeyedSubscript:", @"SynchronizedSlaveFrame");
      if (v11) {
        CFTypeRef v11 = CFRetain(v11);
      }
      *a3 = v11;
    }
    if (a5)
    {
      CFTypeRef v12 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, @"AttachedMedia", 0), "objectForKeyedSubscript:", @"DepthData_DX");
      if (v12) {
        CFTypeRef v12 = CFRetain(v12);
      }
      *a5 = v12;
    }
    if (a6)
    {
      CFTypeRef v13 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, @"AttachedMedia", 0), "objectForKeyedSubscript:", @"DepthData_DY");
      if (v13) {
        CFTypeRef v13 = CFRetain(v13);
      }
      *a6 = v13;
    }
    if (a2) {
      CMRemoveAttachment(target, @"AttachedMedia");
    }
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t BWInferenceTypeDescription(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%d", a1);
}

uint64_t FigCaptureCurrentProcessIsDeferredmediad()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  unsigned int v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  uint64_t v3 = [(__CFString *)v2 isEqualToString:@"com.apple.deferredmediad"];

  CFRelease(v1);
  return v3;
}

uint64_t BWIsSmartStyleAllowedForAdjustedImage(void *a1)
{
  unsigned int v2 = objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "processedImageFilters");
  if (objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "burstQualityCaptureEnabled")) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "smartStyle");
  if (result)
  {
    uint64_t result = BWCIFilterArrayContainsPortraitFilters(v2);
    if (result) {
      return BWCIFilterArrayContainsPortraitEffectStageFilters(v2, 0) ^ 1;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesCreateAllowedClassSetForMetadataItems()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  return objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
}

void FigCaptureMetadataUtilitiesAddSampleBufferMetadataUsedByVideoEncoderToPixelBuffer(void *target)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!target) {
      return;
    }
  }
  else
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
    if (!target) {
      return;
    }
  }
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFDictionaryRef v3 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
  if (v3) {
    BOOL v5 = ImageBuffer == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CVImageBufferRef v6 = ImageBuffer;
    uint64_t v7 = *MEMORY[0x1E4F540F8];
    v29[0] = *MEMORY[0x1E4F541C0];
    v29[1] = v7;
    uint64_t v8 = *MEMORY[0x1E4F54210];
    uint64_t v30 = *MEMORY[0x1E4F53E48];
    uint64_t v31 = v8;
    uint64_t v32 = *MEMORY[0x1E4F54068];
    v28[0] = v29[0];
    v28[1] = v7;
    v28[2] = v30;
    v28[3] = v8;
    uint64_t v9 = *MEMORY[0x1E4F53C08];
    v28[4] = v32;
    v28[5] = v9;
    uint64_t v10 = *MEMORY[0x1E4F543A0];
    v28[6] = *MEMORY[0x1E4F54388];
    v28[7] = v10;
    uint64_t v11 = *MEMORY[0x1E4F54318];
    v28[8] = *MEMORY[0x1E4F54390];
    v28[9] = v11;
    uint64_t v12 = *MEMORY[0x1E4F541C8];
    v28[10] = *MEMORY[0x1E4F54320];
    v28[11] = v12;
    v28[12] = *MEMORY[0x1E4F54128];
    int v13 = FigCapturePlatformIdentifier();
    int v14 = 0;
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    if (v13 >= 9) {
      long long v15 = (const void **)v28;
    }
    else {
      long long v15 = (const void **)v29;
    }
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    if (v13 >= 9) {
      uint64_t v16 = 13;
    }
    else {
      uint64_t v16 = 5;
    }
    *(_OWORD *)keys = 0uLL;
    long long v22 = 0uLL;
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    do
    {
      CFDataRef Value = CFDictionaryGetValue(v3, *v15);
      if (Value)
      {
        keys[v14] = (void *)*v15;
        *((void *)v19 + v14++) = Value;
      }
      ++v15;
      --v16;
    }
    while (v16);
    if (v14 > 0)
    {
      CFDictionaryRef v18 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v19, v14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMSetAttachment(v6, v2, v18, 1u);
      CFRelease(v18);
    }
  }
}

void *BWDetectedObjectsCreateFilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CMAttachmentBearerRef target = 0;
  CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F53070];
  uint64_t result = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (result)
  {
    int v14 = result;
    uint64_t v15 = *MEMORY[0x1E4F53DC0];
    uint64_t v16 = [result objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    uint64_t v17 = *MEMORY[0x1E4F53DC8];
    uint64_t v18 = [v14 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    if (v16 | v18)
    {
      BOOL v19 = (void *)v18;
      memset(&timingArrayOut, 0, sizeof(timingArrayOut));
      SampleTimingInfoArradouble y = CMSampleBufferGetSampleTimingInfoArray((CMSampleBufferRef)a1, 1, &timingArrayOut, 0);
      uint64_t result = 0;
      if (!SampleTimingInfoArray)
      {
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &timingArrayOut, 0, 0, (CMSampleBufferRef *)&target);
        id v22 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        int v23 = [a2 containsObject:*MEMORY[0x1E4F538C8]];
        if (v16) {
          BOOL v24 = v23 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24) {
          [v22 setObject:v16 forKeyedSubscript:v15];
        }
        v43.origin.double x = a3;
        v43.origin.double y = a4;
        v43.size.CGFloat width = a5;
        v43.size.CGFloat height = a6;
        if (!CGRectEqualToRect(v43, *MEMORY[0x1E4F1DB28]))
        {
          v44.origin.double x = a3;
          v44.origin.double y = a4;
          v44.size.CGFloat width = a5;
          v44.size.CGFloat height = a6;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v44);
          if (DictionaryRepresentation)
          {
            [v22 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F53260]];
            [v22 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F53268]];
          }
        }
        uint64_t v26 = *MEMORY[0x1E4F542E0];
        uint64_t v27 = [v14 objectForKeyedSubscript:*MEMORY[0x1E4F542E0]];
        if (v27) {
          [v22 setObject:v27 forKeyedSubscript:v26];
        }
        if (v19)
        {
          int v34 = v22;
          DeepCopdouble y = (void *)CFPropertyListCreateDeepCopy(v21, v19, 1uLL);
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          uint64_t v29 = [v19 countByEnumeratingWithState:&v35 objects:v41 count:16];
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = *(void *)v36;
            do
            {
              for (uint64_t i = 0; i != v30; ++i)
              {
                if (*(void *)v36 != v31) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v33 = *(void *)(*((void *)&v35 + 1) + 8 * i);
                if (([a2 containsObject:v33] & 1) == 0) {
                  [DeepCopy removeObjectForKey:v33];
                }
              }
              uint64_t v30 = [v19 countByEnumeratingWithState:&v35 objects:v41 count:16];
            }
            while (v30);
          }
          id v22 = v34;
          [v34 setObject:DeepCopy forKeyedSubscript:v17];
        }
        objc_msgSend(v22, "setObject:forKeyedSubscript:", objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DD0]), *MEMORY[0x1E4F53DD0]);
        CMSetAttachment(target, v12, v22, 1u);

        return (void *)target;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void BWDetectedObjectsConvertSampleBufferDetectedObjectsFromSensorToBufferCoordinateSpace(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v1) {
    goto LABEL_10;
  }
  CFStringRef v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4F53DC8];
  uint64_t v4 = [v1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
  if (!v4) {
    return;
  }
  BOOL v5 = (const void *)v4;
  CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  v12.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
  v12.size = v6;
  if (!FigCFDictionaryGetCGRectIfPresent()
    || ((int v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue"),
         (int v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue")) != 0)
      ? (BOOL v9 = v7 == 0)
      : (BOOL v9 = 1),
        v9))
  {
LABEL_10:
    fig_log_get_emitter();
    FigDebugAssert3();
    return;
  }
  CGAffineTransformMakeScale(&v11, 1.0 / (double)v7, 1.0 / (double)v8);
  CGRect v13 = CGRectApplyAffineTransform(v12, &v11);
  DetectedObjectsInfoForCropRect = FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(v5, v13.origin.x, v13.origin.y, v13.size.width);
  [v2 setObject:DetectedObjectsInfoForCropRect forKeyedSubscript:v3];
  [v2 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F52DC8]];
}

void BWDetectedFacesConvertSampleBufferFacesFromSensorToBufferCoordinateSpace(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v1) {
    goto LABEL_12;
  }
  CFStringRef v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4F53DC0];
  uint64_t v4 = (void *)[v1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
  if (v4)
  {
    BOOL v5 = v4;
    CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    v15.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
    v15.size = v6;
    if ([v4 count])
    {
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        int v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue");
        int v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue");
        if (v8 && v7 != 0)
        {
          CGAffineTransformMakeScale(&v14, 1.0 / (double)v7, 1.0 / (double)v8);
          CGRect v16 = CGRectApplyAffineTransform(v15, &v14);
          double x = v16.origin.x;
          double y = v16.origin.y;
          double width = v16.size.width;
          v17.origin.double x = 0.0;
          v17.origin.double y = 0.0;
          v17.size.double width = 1.0;
          v17.size.CGFloat height = 1.0;
          if (!CGRectEqualToRect(v16, v17))
          {
            FacesArrayForCropRect = FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(v5, x, y, width);
            [v2 setObject:FacesArrayForCropRect forKeyedSubscript:v3];
            [v2 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F52DA8]];
          }
          return;
        }
      }
LABEL_12:
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
}

void *FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(CFPropertyListRef propertyList, double a2, double a3, double a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (propertyList)
  {
    DeepCopdouble y = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, 1uLL);
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v21 = [DeepCopy countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v21)
    {
      uint64_t v19 = *(void *)v29;
      uint64_t v18 = *MEMORY[0x1E4F538F8];
      uint64_t v17 = *MEMORY[0x1E4F538E8];
      uint64_t v16 = *MEMORY[0x1E4F54D30];
      uint64_t v20 = DeepCopy;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v29 != v19) {
            objc_enumerationMutation(DeepCopy);
          }
          BOOL v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          uint64_t v10 = objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", v18);
          long long v26 = 0u;
          long long v27 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          uint64_t v11 = [v10 countByEnumeratingWithState:&v22 objects:v32 count:16];
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = *(void *)v23;
            do
            {
              for (uint64_t j = 0; j != v12; ++j)
              {
                if (*(void *)v23 != v13) {
                  objc_enumerationMutation(v10);
                }
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(*(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
              }
              uint64_t v12 = [v10 countByEnumeratingWithState:&v22 objects:v32 count:16];
            }
            while (v12);
          }
          DeepCopdouble y = v20;
          if ([v9 isEqualToString:v17])
          {
            objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", v16);
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(*(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
          }
        }
        uint64_t v21 = [v20 countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v21);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return DeepCopy;
}

uint64_t BWDetectedFacesRemoveFacesFromSampleBuffer(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v2 = *MEMORY[0x1E4F53DC0];
  return [v1 removeObjectForKey:v2];
}

void sub_1A594DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_getSystemStyleFromDefaults()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCaptureSmartStyleSettingsGetSystemStyle(*(void *)(DerivedStorage + 88));
  if (!result)
  {
    char v2 = objc_msgSend(0, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"));
    uint64_t result = 0;
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = FigCaptureSmartStyleSettingsSystemStyle;
      return FigCaptureSmartStyleSettingsGetSystemStyle(v3);
    }
  }
  return result;
}

uint64_t FigCaptureSmartStyleSettingsGetSystemStyle(uint64_t a1)
{
  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1) {
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_14);
  }
  uint64_t v5 = 0;
  CGSize v6 = &v5;
  uint64_t v7 = 0x3052000000;
  int v8 = __Block_byref_object_copy__7;
  BOOL v9 = __Block_byref_object_dispose__7;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsGetSystemStyle_block_invoke;
  void v4[3] = &unk_1E5C24F58;
  v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigImageControl_UnlockWhiteBalance()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 742_Block_object_dispose(&STACK[0x4E0], 8) = 1;
  *(unsigned char *)(DerivedStorage + 7444) = 0;
  return 0;
}

uint64_t gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v16;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(a1);
        }
        int v8 = *(void **)(*((void *)&v15 + 1) + 8 * v7);
        uint64_t v14 = 0;
        ParentOutputOfOutputWithSharedPool = gr_findParentOutputOfOutputWithSharedPool(v8, a2, &v14);
        if (!ParentOutputOfOutputWithSharedPool) {
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_1();
        }
        uint64_t v10 = (void *)[ParentOutputOfOutputWithSharedPool mediaPropertiesForAttachedMediaKey:v14];
        if (!v10) {
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_2();
        }
        uint64_t v11 = [v10 preparedPixelBufferPool];
        if (!v11) {
          objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Parent of shared pool output should have a prepared pool" userInfo:0]);
        }
        uint64_t v12 = v11;
        uint64_t v13 = (void *)[v8 mediaPropertiesForAttachedMediaKey:v14];
        if (!v13) {
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_3();
        }
        [v13 setPreparedSharedPixelBufferPool:v12];
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1A5951750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5951AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t cfse_addEndpointInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, __CFString *a8, void *a9)
{
  v24[7] = *MEMORY[0x1E4F143B8];
  v23[0] = @"endpoint-pid";
  v23[1] = @"endpoint-proxy-pid";
  v24[0] = a1;
  v24[1] = a2;
  uint64_t v11 = @"unknown";
  if (a8) {
    uint64_t v11 = a8;
  }
  v23[2] = @"endpoint";
  v23[3] = @"endpoint-uid";
  v24[2] = a3;
  v24[3] = a4;
  v23[4] = @"endpoint-type";
  v23[5] = @"endpoint-audit-token";
  v24[4] = a5;
  v24[5] = a6;
  v23[6] = @"endpoint-camera-uid";
  v24[6] = v11;
  uint64_t v12 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v24, v23, 7));
  uint64_t v13 = v12;
  if (a7) {
    [v12 setObject:a7 forKeyedSubscript:@"endpoint-proxy-audit-token"];
  }
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:v13];
  if (![a9 count] || objc_msgSend(a5, "isEqualToString:", @"InputVideo")) {
    return [a9 addObject:v14];
  }
  if ([a5 isEqualToString:@"ApplicationVideo"])
  {
    long long v16 = a9;
    uint64_t v17 = v14;
    uint64_t v18 = 0;
    return [v16 insertObject:v17 atIndex:v18];
  }
  char v19 = [a5 isEqualToString:@"VideoPreview"];
  uint64_t v20 = [a9 count];
  if (v19)
  {
    if (v20)
    {
      uint64_t v21 = 0;
      while ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a9, "objectAtIndexedSubscript:", v21), "objectForKeyedSubscript:", @"endpoint-type"), "isEqualToString:", @"ApplicationVideo") & 1) != 0)
      {
        if (++v21 >= (unint64_t)[a9 count]) {
          return [a9 addObject:v14];
        }
      }
LABEL_23:
      long long v16 = a9;
      uint64_t v17 = v14;
      uint64_t v18 = v21;
      return [v16 insertObject:v17 atIndex:v18];
    }
  }
  else if (v20)
  {
    uint64_t v21 = 0;
    while (1)
    {
      long long v22 = (void *)[a9 objectAtIndexedSubscript:v21];
      if ((objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", @"endpoint-type"), "isEqualToString:", @"ApplicationVideo") & 1) == 0&& (objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", @"endpoint-type"), "isEqualToString:", @"VideoPreview") & 1) == 0)
      {
        break;
      }
      if (++v21 >= (unint64_t)[a9 count]) {
        return [a9 addObject:v14];
      }
    }
    goto LABEL_23;
  }
  return [a9 addObject:v14];
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyList(uint64_t a1)
{
  if (FigCaptureGetModelSpecificName_sModelNameCheckOnce != -1) {
    dispatch_once(&FigCaptureGetModelSpecificName_sModelNameCheckOnce, &__block_literal_global_15);
  }
  uint64_t v2 = (__CFString *)FigCaptureGetModelSpecificName_sModelNameStr;
  return FigCaptureCFCreatePropertyListForModelAndBundleIdentifier(@"com.apple.CMCapture", a1, v2, 0);
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyListForModelAndBundleIdentifier(uint64_t a1, uint64_t a2, __CFString *a3, int a4)
{
  uint64_t v7 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:a1];
  uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0;
  }
  if (a3)
  {
    uint64_t v10 = (void *)v8;
    uint64_t v11 = objc_msgSend((id)objc_msgSend(v7, "resourcePath"), "stringByAppendingPathComponent:", a3);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = [v10 fileExistsAtPath:v11] ? a3 : @"Default";
    uint64_t v13 = [v7 URLForResource:a2 withExtension:0 subdirectory:v12];
    if (!v13) {
      return 0;
    }
    if (a4)
    {
      uint64_t v14 = +[FigCaptureFlatPlist flatPlistWithContentsOfURL:v13];
      if (v14) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v14 = (FigCaptureFlatPlist *)[MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v13];
      if (v14) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v15 = [v7 URLForResource:a2 withExtension:0];
  if (!v15) {
    return 0;
  }
  if (a4) {
    uint64_t v14 = +[FigCaptureFlatPlist flatPlistWithContentsOfURL:v15];
  }
  else {
    uint64_t v14 = (FigCaptureFlatPlist *)[MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v15];
  }
LABEL_19:
  return v14;
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyListForModel(uint64_t a1, __CFString *a2, int a3)
{
  return FigCaptureCFCreatePropertyListForModelAndBundleIdentifier(@"com.apple.CMCapture", a1, a2, a3);
}

unint64_t FigCaptureBinaryPlistGetOffsetForReference(uint64_t a1, uint64_t a2)
{
  return bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a2);
}

uint64_t FigCaptureGetModelSubdirPath(uint64_t a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.CMCapture"];
  uint64_t v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (!a1) {
    return 0;
  }
  if (!v3 || v2 == 0) {
    return 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(v2, "resourcePath"), "stringByAppendingPathComponent:", a1);
  if (!result) {
    return 0;
  }
  return result;
}

id loadDefaultsWritesWithPrefix(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v6 = [v5 persistentDomainForName:@"com.apple.coremedia"];

  unint64_t v7 = 0x1E4F1C000uLL;
  uint64_t v8 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v6];
  BOOL v9 = getPrefs();
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    char v12 = 0;
    uint64_t v13 = *(void *)v29;
    do
    {
      uint64_t v14 = 0;
      uint64_t v15 = v6;
      do
      {
        if (*(void *)v29 != v13) {
          objc_enumerationMutation(v9);
        }
        id v6 = *(id *)(*((void *)&v28 + 1) + 8 * v14);

        if (v6) {
          [v8 addEntriesFromDictionary:v6];
        }
        else {
          char v12 = 1;
        }
        ++v14;
        uint64_t v15 = v6;
      }
      while (v11 != v14);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v11);

    unint64_t v7 = 0x1E4F1C000;
    if (v12) {
      [v9 compact];
    }
  }
  else
  {
  }
  id v16 = v8;
  id v17 = v3;
  uint64_t v18 = objc_opt_new();
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = __extractSubset_block_invoke;
  v32[3] = &unk_1E5C24E78;
  v32[4] = v17;
  id v19 = v18;
  id v33 = v19;
  [v16 enumerateKeysAndObjectsUsingBlock:v32];

  uint64_t v20 = v33;
  id v21 = v19;

  long long v22 = (void *)MEMORY[0x1E4F1CA48];
  long long v23 = [v21 allKeys];
  long long v24 = [v22 arrayWithArray:v23];

  long long v25 = [v4 allKeys];
  [v24 removeObjectsInArray:v25];

  long long v26 = [*(id *)(v7 + 2656) dictionaryWithDictionary:v4];
  [v26 addEntriesFromDictionary:v21];
  [v26 removeObjectsForKeys:v24];

  return v26;
}

id getPrefs()
{
  id v0 = (void *)getPrefs_s_prefs;
  if (!getPrefs_s_prefs)
  {
    uint64_t v1 = [MEMORY[0x1E4F28F50] weakObjectsPointerArray];
    uint64_t v2 = (void *)getPrefs_s_prefs;
    getPrefs_s_prefs = v1;

    id v0 = (void *)getPrefs_s_prefs;
  }
  return v0;
}

uint64_t pgs_limitTransformToOverscan(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 28);
  int v5 = *(_DWORD *)(a1 + 32);
  float v6 = (float)v4;
  int v7 = v4 + *(_DWORD *)(a1 + 36) - 1;
  int v8 = v5 + *(_DWORD *)(a1 + 40) - 1;
  *(float *)uint64_t v34 = v6;
  *(float *)&v34[1] = (float)v5;
  *(float *)&v34[2] = (float)v7;
  *(float *)&v34[3] = (float)v5;
  *(float *)&v34[4] = v6;
  *(float *)&v34[5] = (float)v8;
  *(float *)&v34[6] = (float)v7;
  *(float *)&v34[7] = (float)v8;
  float v9 = (float)*a2;
  float v10 = (float)a2[1];
  float v11 = (float)(v10 + (float)a2[3]) + -1.0;
  float v12 = *(float *)(a3 + 8);
  float v13 = *(float *)(a3 + 20);
  float v14 = v9 + 0.5;
  float v15 = v10 + 0.5;
  float v16 = (float)((float)(v9 + (float)a2[2]) + -1.0) + -0.5;
  double v17 = fabsf(v12);
  float v18 = v11 + -0.5;
  double v19 = fabsf(v13);
  float v20 = 3.4028e38;
  do
  {
    float v21 = *(float *)&v34[v3];
    float v22 = v12 + v21;
    if ((float)(v12 + v21) < v14)
    {
      float v23 = -1.0;
      if (v17 < 0.00000001) {
        goto LABEL_14;
      }
      float v24 = v14 - v21;
      goto LABEL_13;
    }
    if (v22 > v16) {
      float v23 = -1.0;
    }
    else {
      float v23 = 1.0;
    }
    if (v17 >= 0.00000001 && v22 > v16)
    {
      float v24 = v16 - v21;
LABEL_13:
      float v23 = v24 / v12;
    }
LABEL_14:
    float v26 = *(float *)&v34[v3 + 1];
    float v27 = v13 + v26;
    if ((float)(v13 + v26) < v15)
    {
      float v28 = -1.0;
      if (v19 < 0.00000001) {
        goto LABEL_24;
      }
      float v29 = v15 - v26;
      goto LABEL_23;
    }
    BOOL v30 = v27 <= v18;
    if (v27 > v18) {
      float v28 = -1.0;
    }
    else {
      float v28 = 1.0;
    }
    if (!v30 && v19 >= 0.00000001)
    {
      float v29 = v18 - v26;
LABEL_23:
      float v28 = v29 / v13;
    }
LABEL_24:
    if (v23 >= v28) {
      float v23 = v28;
    }
    if (v20 >= v23) {
      float v20 = v23;
    }
    v3 += 2;
  }
  while (v3 != 8);
  if (v20 < 0.0 || v20 > 1.0)
  {
    *(unsigned char *)(a1 + 49) = 1;
    return 4294954511;
  }
  else
  {
    if (v20 < 1.0)
    {
      *(float *)(a3 + _Block_object_dispose(&STACK[0x4E0], 8) = v12 * v20;
      *(float *)(a3 + 20) = v13 * v20;
    }
    uint64_t v32 = 0;
    if (v20 < *(float *)(a1 + 44)) {
      *(float *)(a1 + 44) = v20;
    }
  }
  return v32;
}

uint64_t pgs_computeTransformFromCameraMotion(double *a1, double *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, float a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a5)
  {
    v8.f64[0] = *a2;
    float64x2_t v9 = 0uLL;
    float64x2_t v10 = 0uLL;
    if (a3) {
      float64x2_t v10 = vcvtq_f64_f32(*a3);
    }
    v8.f64[1] = a2[1];
    float64x2_t v11 = vaddq_f64(v8, v10);
    if (a4) {
      float64x2_t v9 = vcvtq_f64_f32(*a4);
    }
    uint64_t v17 = LODWORD(a6);
    float64x2_t v18 = v11;
    uint64_t v15 = LODWORD(a6);
    float64x2_t v16 = vaddq_f64(v8, v9);
    pgs_inverseRotationMatrixFromQuaternion(a1, (uint64_t)v21);
    FigMotionComputeTransformFromRotation((uint64_t)&v17, (uint64_t)&v15, v21, a5);
    float v19 = 0.0;
    float v20 = 0.0;
    float v12 = *a2;
    float v13 = a2[1];
    ComputePerspectiveProjectedPoint((float *)a5, &v20, &v19, v12, v13);
    *(void *)a5 = 1065353216;
    *(float *)(a5 + _Block_object_dispose(&STACK[0x4E0], 8) = v20 - v12;
    *(void *)(a5 + 12) = 0x3F80000000000000;
    *(float *)(a5 + 20) = v19 - v13;
    *(void *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

float pgs_inverseRotationMatrixFromQuaternion(double *a1, uint64_t a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  float v4 = v2 + v2;
  double v5 = a1[2];
  double v6 = a1[3];
  float v7 = v5 + v5;
  float v8 = v6 + v6;
  *(float *)&double v2 = v2;
  *(float *)&double v5 = v5;
  *(float *)&double v6 = v6;
  *(float *)&double v6 = *(float *)&v6 * v8;
  float v9 = 1.0 - (float)(*(float *)&v2 * v4);
  float v10 = (float)(1.0 - (float)(*(float *)&v5 * v7)) - *(float *)&v6;
  *(float *)(a2 + 32) = v9 - (float)(*(float *)&v5 * v7);
  *(float *)&double v5 = *(float *)&v5 * v8;
  *(float *)&double v3 = v3;
  float v11 = v4 * *(float *)&v3;
  *(float *)(a2 + 16) = v9 - *(float *)&v6;
  *(float *)(a2 + 20) = *(float *)&v5 - v11;
  *(float *)&double v6 = (float)(*(float *)&v2 * v7) + (float)(v8 * *(float *)&v3);
  *(float *)a2 = v10;
  *(float *)(a2 + 4) = (float)(*(float *)&v2 * v7) - (float)(v8 * *(float *)&v3);
  *(float *)&double v2 = *(float *)&v2 * v8;
  *(float *)&double v3 = v7 * *(float *)&v3;
  *(float *)(a2 + _Block_object_dispose(&STACK[0x4E0], 8) = *(float *)&v2 + *(float *)&v3;
  *(_DWORD *)(a2 + 12) = LODWORD(v6);
  float result = *(float *)&v2 - *(float *)&v3;
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 2_Block_object_dispose(&STACK[0x4E0], 8) = *(float *)&v5 + v11;
  return result;
}

double FigMotionPreMultiplyScalingTranslationToTransform(uint64_t a1, int8x16_t a2, int32x4_t a3, float a4, float a5, int8x16_t a6)
{
  a6.i32[0] = *(_DWORD *)(a1 + 24);
  int32x4_t v6 = a3;
  *(float *)&v6.i32[1] = a5;
  float32x4_t v7 = (float32x4_t)vzip1q_s32(v6, v6);
  v7.i32[2] = a3.i32[0];
  int32x4_t v8 = (int32x4_t)a2;
  *(float *)&v8.i32[1] = a4;
  float32x4_t v9 = (float32x4_t)vzip1q_s32(v8, v8);
  v9.i32[2] = a2.i32[0];
  a2.i64[0] = *(void *)(a1 + 28);
  float32x4_t v10 = (float32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a2, 0xCuLL);
  v10.i32[3] = v10.i32[0];
  *(float32x4_t *)a1 = vmlaq_f32(vmulq_f32(v10, v7), *(float32x4_t *)a1, v9);
  *(float32x2_t *)a2.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a2.i8, a5), *(float32x2_t *)(a1 + 16), a4);
  *(void *)(a1 + 16) = a2.i64[0];
  return *(double *)a2.i64;
}

double FigMotionComputeTransformFromRotation(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  long long v6 = *a3;
  long long v7 = a3[1];
  *(_DWORD *)(a4 + 32) = *((_DWORD *)a3 + 8);
  *(_OWORD *)a4 = v6;
  *(_OWORD *)(a4 + 16) = v7;
  *(float *)&long long v7 = *(double *)(a2 + 8);
  float v8 = *(double *)(a2 + 16);
  FigMotionPostMultiplyScalingTranslationToTransform((float *)a4, 1.0 / *(float *)a2, (float)-*(float *)&v7 / *(float *)a2, 1.0 / *(float *)a2, (float)-v8 / *(float *)a2);
  v10.i32[0] = *(_DWORD *)a1;
  v11.i64[0] = *(void *)(a1 + 8);
  *(float *)v11.i32 = *(double *)v11.i64;
  float v12 = *(double *)(a1 + 16);
  float v13 = *(float *)a1;
  return FigMotionPreMultiplyScalingTranslationToTransform(a4, v10, v11, v13, v12, v9);
}

float FigMotionPostMultiplyScalingTranslationToTransform(float *a1, float a2, float a3, float a4, float a5)
{
  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[3];
  float v8 = a1[4];
  float v9 = a1[6];
  float v10 = a1[7];
  float v11 = (float)(a1[2] + (float)(a5 * v6)) + (float)(a3 * *a1);
  float v12 = (float)(a1[5] + (float)(a5 * v8)) + (float)(a3 * v7);
  a1[8] = (float)(a1[8] + (float)(a5 * v10)) + (float)(a3 * v9);
  float v13 = v5 * a2;
  a1[2] = v11;
  a1[3] = v7 * a2;
  float result = v9 * a2;
  *a1 = v13;
  a1[1] = v6 * a4;
  a1[4] = v8 * a4;
  a1[5] = v12;
  a1[6] = result;
  a1[7] = v10 * a4;
  return result;
}

float ComputePerspectiveProjectedPoint(float *a1, float *a2, float *a3, float a4, float a5)
{
  float v5 = (float)(a1[8] + (float)(a1[7] * a5)) + (float)(a1[6] * a4);
  if (fabsf(v5) > 0.00000001) {
    float v5 = 1.0 / v5;
  }
  *a2 = (float)((float)(a1[2] + (float)(a1[1] * a5)) + (float)(*a1 * a4)) * v5;
  float result = v5 * (float)((float)(a1[5] + (float)(a1[4] * a5)) + (float)(a1[3] * a4));
  *a3 = result;
  return result;
}

uint64_t FigMotionGetMotionDataFromISP(CFDictionaryRef theDict, float64x2_t *a2, uint64_t a3, int a4, int *a5, float32x2_t *a6, uint64_t a7, int a8, int *a9)
{
  if (theDict)
  {
    if (a2 && a5)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53F90]);
      if (Value)
      {
        long long v38 = a6;
        uint64_t v41 = 0;
        uint64_t v18 = FigMotionISPMotionDataFromCFData(Value, &v41);
        if (v18)
        {
          uint64_t ISPHallData = v18;
          fig_log_get_emitter();
          FigDebugAssert3();
          fig_log_get_emitter();
          goto LABEL_30;
        }
        LODWORD(v20) = *((_DWORD *)v41 + 1);
        if ((int)v20 >= a4) {
          LODWORD(v20) = a4;
        }
        *a5 = v20;
        if ((int)v20 < 1)
        {
          float32x2_t v24 = 0;
          float v25 = 0.0;
        }
        else
        {
          int v37 = a8;
          uint64_t v21 = 0;
          uint64_t v22 = (float *)(a3 + 8);
          float v23 = a2 + 1;
          float32x2_t v24 = 0;
          float v25 = 0.0;
          uint64_t v26 = 44;
          float64x2_t v39 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
          float32x2_t v27 = (float32x2_t)vdup_n_s32(0x37800000u);
          do
          {
            int64_t v28 = FigHostTimeToNanoseconds();
            CMTimeMake(&time, v28, 1000000000);
            v23[-1].f64[1] = CMTimeGetSeconds(&time);
            float v29 = (int *)&v41[v26];
            uint64_t v30 = *(void *)&v41[v26 - 24];
            v31.i64[0] = (int)v30;
            v31.i64[1] = SHIDWORD(v30);
            *float v23 = vmulq_f64(vcvtq_f64_s64(v31), v39);
            uint64_t v32 = *((void *)v29 - 2);
            v31.i64[0] = (int)v32;
            v31.i64[1] = SHIDWORD(v32);
            v23[1] = vmulq_f64(vcvtq_f64_s64(v31), v39);
            float32x2_t v19 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)(v29 - 2)), v27);
            float v33 = (float)*v29 * 0.000015259;
            if (a3)
            {
              *((float32x2_t *)v22 - 1) = v19;
              *uint64_t v22 = v33;
            }
            float32x2_t v24 = vadd_f32(v24, v19);
            float v25 = v25 + v33;
            ++v21;
            uint64_t v20 = *a5;
            v22 += 3;
            v23 += 3;
            v26 += 40;
          }
          while (v21 < v20);
          a8 = v37;
        }
        if (v38 && v20)
        {
          v19.f32[0] = (float)(int)v20;
          *long long v38 = vdiv_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
          v38[1].f32[0] = v25 / (float)(int)v20;
        }
      }
      else
      {
        *a5 = 0;
      }
    }
    uint64_t ISPHallData = 0;
    if (!a7 || !a9) {
      return ISPHallData;
    }
    CFDataRef v35 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53F78]);
    if (v35)
    {
      uint64_t ISPHallData = FigMotionGetISPHallData(v35, a7, a9, a8);
      if (ISPHallData)
      {
        fig_log_get_emitter();
LABEL_30:
        FigDebugAssert3();
      }
    }
    else
    {
      uint64_t ISPHallData = 0;
      *a9 = 0;
    }
    return ISPHallData;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionISPMotionDataFromCFData(const __CFData *a1, const UInt8 **a2)
{
  if (a2
    && (unint64_t Length = CFDataGetLength(a1), Length > 7)
    && (unint64_t v5 = Length, (BytePtr = CFDataGetBytePtr(a1)) != 0)
    && v5 == 40 * *((int *)BytePtr + 1) + 8
    && !*(_DWORD *)BytePtr)
  {
    *a2 = BytePtr;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t portIndexFromPortType(const void *a1, int *a2)
{
  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DD8]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DF0]))
    {
      int v4 = 1;
LABEL_17:
      *a2 = v4;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DE8]))
    {
      int v4 = 2;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DF8]))
    {
      int v4 = 3;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52E10]))
    {
      int v4 = 4;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52E00]))
    {
      int v4 = 5;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DE0]))
    {
      int v4 = 6;
      goto LABEL_17;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

void FigMotionComputeQuaternionForTimeStamp(uint64_t a1, void *a2, char *a3, double a4)
{
  float v8 = (unsigned char *)(a1 + 10256);
  BOOL v9 = *(unsigned char *)(a1 + 10257) == 0;
  if (a2)
  {
    *a2 = 0x3FF0000000000000;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
  uint64_t v10 = 0;
  float v11 = flt_1A5F0C790[v9];
  float v12 = 1.0;
  int v13 = -1;
  do
  {
    float v14 = *(double *)(a1 + 8 + 8 * v10) - a4;
    float v15 = fabsf(v14);
    if (v12 > v15)
    {
      float v12 = v15;
      int v13 = v10;
    }
    ++v10;
  }
  while (v10 != 256);
  if (v12 > v11 && !*v8) {
    low_freq_error_logging();
  }
  if (v13 != -1)
  {
    double v16 = *(double *)(a1 + 8 * v13 + 8);
    if (v16 >= a4)
    {
      int v22 = (v13 - 1);
      if (v13 + 255 <= 0) {
        int v22 = -(1 - v13);
      }
      uint64_t v20 = v22;
      double v19 = *(double *)(a1 + 8 * v13 + 8);
      double v16 = *(double *)(a1 + 8 * v22 + 8);
      uint64_t v18 = v13;
    }
    else
    {
      if (v13 + 1 <= 0) {
        int v17 = --(char)(v13 + 1);
      }
      else {
        int v17 = (v13 + 1);
      }
      uint64_t v18 = v17;
      double v19 = *(double *)(a1 + 8 * v17 + 8);
      uint64_t v20 = v13;
    }
    double v23 = vabdd_f64(v19, a4);
    double v24 = v11;
    BOOL v26 = v19 >= a4 && v23 <= v24 && v16 <= a4;
    double v27 = vabdd_f64(v16, a4);
    if (v26 && v27 <= v24)
    {
      if (vabdd_f64(v19, v16) > 0.000001)
      {
        float v32 = (a4 - v16) / (v19 - v16);
        FigMotionInterpolateQuaternionsByAngle(a1 + 2056 + 32 * v20, (double *)(a1 + 2056 + 32 * v18), v32);
        *a2 = v33;
        a2[1] = v34;
        a2[2] = v35;
        a2[3] = v36;
        goto LABEL_34;
      }
      uint64_t v29 = a1 + 32 * v20;
    }
    else
    {
      uint64_t v29 = a1 + 32 * v13;
    }
    uint64_t v30 = (_OWORD *)(v29 + 2056);
    long long v31 = v30[1];
    *(_OWORD *)a2 = *v30;
    *((_OWORD *)a2 + 1) = v31;
LABEL_34:
    char v21 = 1;
    goto LABEL_35;
  }
  if (!*v8) {
    low_freq_error_logging();
  }
  char v21 = 0;
LABEL_35:
  *a3 = v21;
}

uint64_t FigMotionInitializeQuaternion(void *a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t FigMotionComputeLensMovementAndSagForTimeStamp(uint64_t a1, float32x2_t *a2, float32x2_t *a3, unsigned int a4, double a5, float a6)
{
  *a2 = 0;
  if (a3) {
    *a3 = 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = a1 + ((unint64_t)a4 << 12) + 8;
  int v8 = -1;
  float v9 = 1.0;
  do
  {
    float v10 = *(double *)(v7 + 8 * v6) - a5;
    float v11 = fabsf(v10);
    if (v9 > v11)
    {
      int v8 = v6;
      float v9 = v11;
    }
    ++v6;
  }
  while (v6 != 512);
  if (v8 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *(void *)(a1 + 8 * a4 + 16392);
  if (!a3 || v12)
  {
    unint64_t v13 = a1 + ((unint64_t)a4 << 12) + 8200;
    uint64_t v14 = v8;
    double v15 = *(double *)(v7 + 8 * v8);
    if (v15 >= a5)
    {
      int v24 = v8 + 511;
      BOOL v17 = -v24 < 0;
      int v25 = -v24 & 0x1FF;
      int v26 = v24 & 0x1FF;
      if (v17) {
        int v27 = v26;
      }
      else {
        int v27 = -v25;
      }
      uint64_t v22 = v27;
      double v21 = v15;
      double v15 = *(double *)(v7 + 8 * v27);
      uint64_t v20 = v14;
    }
    else
    {
      int v16 = v8 + 1;
      BOOL v17 = -v16 < 0;
      int v18 = -v16 & 0x1FF;
      int v19 = v16 & 0x1FF;
      if (!v17) {
        int v19 = -v18;
      }
      uint64_t v20 = v19;
      double v21 = *(double *)(v7 + 8 * v19);
      uint64_t v22 = v14;
    }
    if (v21 >= a5
      && (vabdd_f64(v21, a5) <= 0.00200000009 ? (BOOL v28 = v15 <= a5) : (BOOL v28 = 0), v28
                                                                            && vabdd_f64(v15, a5) <= 0.00200000009))
    {
      if (vabdd_f64(v21, v15) > 0.000001)
      {
        double v31 = v21 - v15;
        float v32 = (a5 - v15) / v31;
        float32x2_t v33 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v13 + 8 * v20), v32), *(float32x2_t *)(v13 + 8 * v22), 1.0 - v32);
        *a2 = v33;
        if (a3)
        {
          *(float *)&double v31 = 1.0 - v32;
          *a3 = vmla_f32(vmul_n_f32(*(float32x2_t *)(v12 + 8 * v20), v32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v31, 0), *(float32x2_t *)(v12 + 8 * v22));
          goto LABEL_29;
        }
        goto LABEL_36;
      }
      float32x2_t v29 = *(float32x2_t *)(v13 + 8 * v22);
      *a2 = v29;
      if (a3)
      {
        float32x2_t v30 = *(float32x2_t *)(v12 + 8 * v22);
        goto LABEL_28;
      }
    }
    else
    {
      float32x2_t v29 = *(float32x2_t *)(v13 + 8 * v14);
      *a2 = v29;
      if (a3)
      {
        float32x2_t v30 = *(float32x2_t *)(v12 + 8 * v14);
LABEL_28:
        *a3 = v30;
LABEL_29:
        uint64_t result = 0;
        *a2 = vmul_n_f32(*a2, a6);
        *a3 = vmul_n_f32(*a3, a6);
        return result;
      }
    }
    float32x2_t v33 = v29;
LABEL_36:
    uint64_t result = 0;
    *a2 = vmul_n_f32(v33, a6);
    return result;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionComputeFramePTSOffsetFromISPCrop(const __CFDictionary *a1, double *a2)
{
  int v12 = 0;
  if (a1)
  {
    if (a2)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F54198]);
      if (Value)
      {
        int valuePtr = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F54160]);
        if (v5)
        {
          CFNumberGetValue(v5, kCFNumberSInt32Type, &v12);
          if (v12 > 0)
          {
            long long v10 = *MEMORY[0x1E4F1DB28];
            long long v11 = *MEMORY[0x1E4F1DB28];
            uint64_t SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
            if (SensorValidCropRect)
            {
              uint64_t v8 = SensorValidCropRect;
              fig_log_get_emitter();
              FigDebugAssert3();
              return v8;
            }
            if (!CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F54220]))
            {
              double v7 = 0.0;
              goto LABEL_11;
            }
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              double v7 = *((double *)&v10 + 1);
LABEL_11:
              uint64_t v8 = 0;
              *a2 = (*((double *)&v11 + 1) - v7) * (double)valuePtr / ((double)v12 * 1000000.0);
              return v8;
            }
          }
          fig_log_get_emitter();
        }
        else
        {
          fig_log_get_emitter();
        }
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

void FigMotionQuaternionFromDeltaRotation(float *a1)
{
  double v1 = sqrtf((float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)(a1[2] * a1[2]));
  if (v1 > 1.0e-10) {
    __sincos_stret(v1 * 0.5);
  }
}

uint64_t BWSynchronizeSmartStyleAttachedMediaPTS(opaqueCMSampleBuffer *a1)
{
  v26[5] = *MEMORY[0x1E4F143B8];
  v26[0] = @"HumanFullBodiesMask";
  v26[1] = @"HumanSkinsMask";
  _OWORD v26[2] = 0x1EFA74700;
  v26[3] = 0x1EFA748E0;
  v26[4] = 0x1EFA74840;
  double v2 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:5];
  memset(&v24, 0, sizeof(v24));
  CMSampleBufferGetPresentationTimeStamp(&v24, a1);
  memset(&v23, 0, sizeof(v23));
  CMSampleBufferGetDuration(&v23, a1);
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  uint64_t result = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v20;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F530C0];
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8 * v8);
        long long v10 = (opaqueCMSampleBuffer *)objc_msgSend((id)CMGetAttachment(a1, @"AttachedMedia", 0), "objectForKeyedSubscript:", v9);
        if (v10)
        {
          long long v11 = v10;
          memset(&v18, 0, sizeof(v18));
          CMSampleBufferGetPresentationTimeStamp(&v18, v10);
          CMTime time1 = v24;
          CMTime time2 = v18;
          if (CMTimeCompare(&time1, &time2))
          {
            CMAttachmentBearerRef target = 0;
            CMTime time1 = v24;
            CMTime time2 = v23;
            int v12 = BWCMSampleBufferCreateCopyWithNewTimingIncludingMetadata(v11, &time1, (long long *)&time2.value, (CMSampleBufferRef *)&target);
            CMAttachmentBearerRef v13 = target;
            if (!v12 && target)
            {
              CMTime time1 = v18;
              CFDictionaryRef v14 = CMTimeCopyAsDictionary(&time1, v6);
              CMSetAttachment(target, v7, v14, 1u);

              BWSampleBufferSetAttachedMedia(a1, v9, (uint64_t)target);
              CMAttachmentBearerRef v13 = target;
            }
            if (v13) {
              CFRelease(v13);
            }
          }
        }
        ++v8;
      }
      while (v4 != v8);
      uint64_t result = [v2 countByEnumeratingWithState:&v19 objects:v25 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void BWSampleBufferRemoveAllAttachedMedia(const void *a1)
{
}

uint64_t FigCaptureTransformFlipAppliedBeforeRotationToAfter(uint64_t result, int a2)
{
  if (result && (a2 == 270 || a2 == 90))
  {
    if (result == 1) {
      unsigned int v2 = 2;
    }
    else {
      unsigned int v2 = result;
    }
    if (result == 2) {
      return 1;
    }
    else {
      return v2;
    }
  }
  return result;
}

void iqsn_releaseBufferContext(void *a1)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 30, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    unsigned int v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
    double v3 = (const void *)*((void *)a1 + 1);
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void *TimestampedAudioBufferListNew(const __CFAllocator *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = CFAllocatorAllocate(a1, 72, 0);
  uint64_t v9 = v8;
  if (v8)
  {
    v8[8] = 0;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    CFTypeRef v10 = a1 ? CFRetain(a1) : 0;
    *uint64_t v9 = v10;
    *((_DWORD *)v9 + 4) = a4;
    if (a2)
    {
      long long v11 = CFAllocatorAllocate(a1, (16 * a2) | 8, 0);
      v9[6] = v11;
      if (v11)
      {
        bzero(v11, (16 * a2) | 8);
        unint64_t v12 = 0;
        CMAttachmentBearerRef v13 = (unsigned int *)v9[6];
        *CMAttachmentBearerRef v13 = a2;
        uint64_t v14 = 16 * a2;
        while (1)
        {
          double v15 = &v13[v12 / 4];
          void v15[2] = a3;
          v15[3] = a4;
          int v16 = CFAllocatorAllocate(a1, a4, 0);
          CMAttachmentBearerRef v13 = (unsigned int *)v9[6];
          *(void *)&v13[v12 / 4 + 4] = v16;
          if (!v16) {
            break;
          }
          v12 += 16;
          if (v14 == v12) {
            return v9;
          }
        }
      }
      TimestampedAudioBufferListDispose((const __CFAllocator **)v9);
      return 0;
    }
  }
  return v9;
}

void TimestampedAudioBufferListQueueReleaseAndClear(CFTypeRef *a1)
{
  if (a1)
  {
    unsigned int v2 = (opaqueCMSimpleQueue *)*a1;
    if (v2)
    {
      while (1)
      {
        double v3 = (const __CFAllocator **)CMSimpleQueueDequeue(v2);
        if (!v3) {
          break;
        }
        TimestampedAudioBufferListDispose(v3);
        unsigned int v2 = (opaqueCMSimpleQueue *)*a1;
      }
      CFRelease(*a1);
      *a1 = 0;
    }
  }
}

void multiStreamCameraSourceNode_sendBufferToBufferServicingThread(void *a1, unsigned int a2, void *a3, UInt8 *bytes)
{
  if (a3)
  {
    CFDataRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 24);
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFDictionaryGetTypeID()) {
      CFDictionarySetValue((CFMutableDictionaryRef)a3, @"BWPTS", v7);
    }
    else {
      CVBufferSetAttachment((CVBufferRef)a3, @"BWPTS", v7, kCVAttachmentMode_ShouldNotPropagate);
    }
    CFRelease(v7);
    CFRetain(a3);
    unint64_t v9 = (unint64_t)a1 + 512 * (unint64_t)a2 + 384;
    if (CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v9 + 24), a3))
    {
      CFRelease(a3);
    }
    else
    {
      CFTypeRef v10 = *(NSObject **)(v9 + 32);
      long long v11 = *(void (__cdecl **)(void *))(v9 + 40);
      dispatch_async_f(v10, a1, v11);
    }
  }
}

uint64_t asn_audioUnitRenderProc(uint64_t a1, AudioUnitRenderActionFlags *a2, const AudioTimeStamp *a3, uint64_t a4, UInt32 a5)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 440), 1uLL, memory_order_relaxed);
  StreamBasicDescriptiouint64_t n = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 248));
  memset(&v42, 0, sizeof(v42));
  CMTimeMake(&v42, (uint64_t)a3->mSampleTime, (int)StreamBasicDescription->mSampleRate);
  long long v11 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 288));
  if (v11)
  {
    if ((~a3->mFlags & 3) == 0)
    {
      uint64_t v12 = *(void *)(a1 + 304);
      if (v12)
      {
        if (*(unsigned char *)(a1 + 324))
        {
          memset(&v41, 0, sizeof(v41));
          int64_t v13 = AudioConvertHostTimeToNanos(a3->mHostTime - v12);
          CMTimeMake(&v41, v13, 1000000000);
          CMTime time1 = v41;
          CMTime time2 = *(CMTime *)(a1 + 336);
          int32_t v14 = CMTimeCompare(&time1, &time2);
          memset(&time1, 0, sizeof(time1));
          CMTime time2 = v42;
          CMTime rhs = *(CMTime *)(a1 + 312);
          CMTimeSubtract(&time1, &time2, &rhs);
          CMTime time2 = time1;
          CMTimeAbsoluteValue(&v37, &time2);
          CMTime time2 = *(CMTime *)(a1 + 336);
          if (CMTimeCompare(&v37, &time2) > 0 || v14 >= 1)
          {
            if (!*(unsigned char *)(a1 + 600) && v14 >= 1)
            {
              HostTimeClocuint64_t k = CMClockGetHostTimeClock();
              double RelativeRate = CMSyncGetRelativeRate(HostTimeClock, *(CMClockOrTimebaseRef *)(a1 + 232));
              if (RelativeRate != 1.0)
              {
                CMTime rhs = v41;
                CMTimeMultiplyByFloat64(&time2, &rhs, RelativeRate);
                CMTime v41 = time2;
              }
              int32_t mSampleRate = (int)StreamBasicDescription->mSampleRate;
              CMTime rhs = v41;
              CMTimeConvertScale(&time2, &rhs, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              CMTime v41 = time2;
              *((_DWORD *)v11 + 14) = time2.value;
            }
            uint64_t v18 = MEMORY[0x1E4F1F9F8];
            *(_OWORD *)(a1 + 360) = *MEMORY[0x1E4F1F9F8];
            *(void *)(a1 + 376) = *(void *)(v18 + 16);
          }
        }
      }
    }
    uint64_t v19 = AudioUnitRender(*(AudioUnit *)(a1 + 264), a2, a3, 1u, a5, *((AudioBufferList **)v11 + 6));
    if (v19)
    {
LABEL_30:
      uint64_t v29 = v19;
      goto LABEL_32;
    }
    *((void *)v11 + 1) = add_explicit + 1;
    *((_DWORD *)v11 + 5) = a5;
    if ((a3->mFlags & 2) == 0) {
      FigDebugAssert3();
    }
    long long v20 = v11 + 24;
    if (*(unsigned char *)(a1 + 372))
    {
      CMTimeMake(&v34, *(unsigned int *)(a1 + 384), (int)StreamBasicDescription->mSampleRate);
      CMTime time1 = *(CMTime *)(a1 + 360);
      CMTimeAdd(&v41, &time1, &v34);
    }
    else
    {
      int64_t v21 = AudioConvertHostTimeToNanos(a3->mHostTime);
      CMTimeMake(&time, v21, 1000000000);
      CMClockRef v22 = CMClockGetHostTimeClock();
      CMSyncConvertTime(&v41, &time, v22, *(CMClockOrTimebaseRef *)(a1 + 232));
      *long long v20 = *(_OWORD *)&v41.value;
      CMTimeEpoch epoch = v41.epoch;
      *((void *)v11 + 5) = v41.epoch;
      int32_t v24 = (int)StreamBasicDescription->mSampleRate;
      *(_OWORD *)&time1.long long value = *v20;
      time1.CMTimeEpoch epoch = epoch;
      CMTimeConvertScale(&v41, &time1, v24, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *long long v20 = *(_OWORD *)&v41.value;
      *((void *)v11 + 5) = v41.epoch;
      int64_t v25 = *((unsigned int *)v11 + 14);
      if (!v25) {
        goto LABEL_23;
      }
      CMTimeMake(&v35, v25, (int)StreamBasicDescription->mSampleRate);
      *(_OWORD *)&time1.long long value = *v20;
      time1.CMTimeEpoch epoch = *((void *)v11 + 5);
      CMTimeSubtract(&v41, &time1, &v35);
    }
    *long long v20 = *(_OWORD *)&v41.value;
    *((void *)v11 + 5) = v41.epoch;
LABEL_23:
    *((void *)v11 + _Block_object_dispose(&STACK[0x4E0], 8) = *(void *)&a3->mSampleTime;
    *(_DWORD *)(a1 + 384) = *((_DWORD *)v11 + 5);
    int v26 = (_OWORD *)(a1 + 360);
    uint64_t v27 = *((void *)v11 + 5);
    *(_OWORD *)(a1 + 360) = *v20;
    *(void *)(a1 + 376) = v27;
    int64_t v28 = *((unsigned int *)v11 + 14);
    if (v28)
    {
      CMTimeMake(&v33, v28, (int)StreamBasicDescription->mSampleRate);
      *(_OWORD *)&time1.long long value = *v26;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 376);
      CMTimeAdd(&v41, &time1, &v33);
      *int v26 = *(_OWORD *)&v41.value;
      *(void *)(a1 + 376) = v41.epoch;
    }
    uint64_t v19 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 296), v11);
    if (!v19)
    {
      CMTimeMake(&v32, a5, (int)StreamBasicDescription->mSampleRate);
      CMTime time1 = v42;
      CMTimeAdd(&v41, &time1, &v32);
      *(CMTime *)(a1 + 312) = v41;
      if ((a3->mFlags & 2) != 0)
      {
        memset(&v41, 0, sizeof(v41));
        CMTimeMake(&v41, a5, (int)StreamBasicDescription->mSampleRate);
        CMTime time2 = v41;
        CMTimeConvertScale(&time1, &time2, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime v41 = time1;
        UInt64 mHostTime = a3->mHostTime;
        uint64_t v29 = 0;
        *(void *)(a1 + 304) = AudioConvertNanosToHostTime(time1.value) + mHostTime;
      }
      else
      {
        uint64_t v29 = 0;
        *(void *)(a1 + 304) = 0;
      }
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 280), (const void *)0xFFFFFFFFFFFFBE56);
  uint64_t v29 = 4294950486;
LABEL_32:
  CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 280), (const void *)(int)v29);
  if (v11) {
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 288), v11);
  }
LABEL_29:
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 392), (void *)a1, (dispatch_function_t)asn_generateSamples);
  return v29;
}

uint64_t BWActiveDeviceTypeFromPortType(void *a1)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF8]]) {
    return 1;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52E10]]) {
    return 64;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52E00]]) {
    return 2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF0]]) {
    return 8;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DD8]]) {
    return 4;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DE8]]) {
    return 16;
  }
  if (([a1 isEqualToString:*MEMORY[0x1E4F52DE0]] & 1) == 0) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], objc_msgSend(NSString, "stringWithFormat:", @"Unknown port type %@.  Does not align with any active device types", a1), 0 reason userInfo]);
  }
  return 32;
}

void BWNodeSanitizeMetadataIfNecessary(const void *a1)
{
  if (objc_msgSend((id)CMGetAttachment(a1, @"FrameIsBlackened", 0), "BOOLValue"))
  {
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], MEMORY[0x1E4F1CC08], 1u);
    CMRemoveAttachment(a1, @"FrameIsBlackened");
  }
}

void sub_1A595DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRemoteOperationSenderEnqueueOperation(void *a1, unsigned int *a2)
{
  return roEnqueue(a1, a2, 0);
}

uint64_t roEnqueue(void *a1, unsigned int *a2, uint64_t a3)
{
  CFAllocatorRef SharedMemPoolAllocator = (const __CFAllocator *)FigRemoteQueueSenderGetSharedMemPoolAllocator((uint64_t)a1);
  if (a1
    && a2
    && (CFAllocatorRef v7 = SharedMemPoolAllocator) != 0
    && FigIsSharedMemPoolAllocator(SharedMemPoolAllocator))
  {
    uint64_t v8 = *a2;
    if ((v8 - 7) >= 0xFFFFFFFA)
    {
      CFTypeRef v10 = &roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v8];
      if (!FigRemoteQueueSenderGetContext((uint64_t)a1))
      {
        long long v11 = malloc_type_malloc(0x78uLL, 0x10E20404DDAD7CFuLL);
        void *v11 = FigSimpleMutexCreate();
        v11[1] = 0;
        _OWORD v11[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
        memset_pattern16(v11 + 3, &unk_1A5EFD590, 0x18uLL);
        v11[14] = 0;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 6) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        *((_OWORD *)v11 + 4) = 0u;
        FigRemoteQueueSenderSetContext(a1, (uint64_t)v11, &__block_literal_global_73_0, &__block_literal_global_77);
      }
      return ((uint64_t (*)(const __CFAllocator *, unsigned int *, void *, uint64_t))*v10)(v7, a2, a1, a3);
    }
    else
    {
      return 4294950633;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
}

uint64_t FigRemoteQueueSenderGetContext(uint64_t result)
{
  if (result) {
    return *(void *)(result + 128);
  }
  return result;
}

uint64_t FigRemoteQueueSenderGetSharedMemPoolAllocator(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

CFAllocatorRef FigIsSharedMemPoolAllocator(const __CFAllocator *result)
{
  memset(&v1, 0, sizeof(v1));
  if (result)
  {
    CFAllocatorGetContext(result, &v1);
    return (const __CFAllocator *)(v1.allocate == (CFAllocatorAllocateCallBack)shmemAllocatorAllocate);
  }
  return result;
}

uint64_t __multiStreamCameraSourceNode_outputSampleBuffer_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) liveFormat];
  if (!result)
  {
    double v3 = *(void **)(a1 + 32);
    return [v3 makeConfiguredFormatLive];
  }
  return result;
}

CFAllocatorRef FigSharedMemPoolAllocatorCreate(const __CFAllocator *a1, void *a2)
{
  context.versiouint64_t n = 0;
  context.info = a2;
  context.retaiuint64_t n = (CFAllocatorRetainCallBack)shmemAllocatorRetain;
  context.release = (CFAllocatorReleaseCallBack)shmemAllocatorRelease;
  context.copyDescriptiouint64_t n = (CFAllocatorCopyDescriptionCallBack)shmemAllocatorCopyDescription;
  context.allocate = (CFAllocatorAllocateCallBack)shmemAllocatorAllocate;
  context.reallocate = (CFAllocatorReallocateCallBack)shmemAllocatorReallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)shmemAllocatorDeallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)shmemAllocatorPreferredSize;
  return CFAllocatorCreate(a1, &context);
}

uint64_t FigSharedMemPoolCreate(uint64_t a1, size_t a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  if (a5 && a2)
  {
    size_t v7 = 0;
    BOOL v8 = a3 != 0;
    BOOL v9 = a4 != 0;
    if (a4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a4;
    }
    BOOL v11 = !v8 || !v9;
    if (v8 && v9) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = (uint64_t *)&sDefaultBlockSizes;
    }
    uint64_t v13 = 18;
    if (!v11) {
      uint64_t v13 = v10;
    }
    unint64_t v14 = 16;
    while (1)
    {
      unint64_t v15 = v12[v7];
      if (v15 <= v14 || (v12[v7] & 0xF) != 0) {
        goto LABEL_16;
      }
      if (v15 >= a2) {
        break;
      }
      ++v7;
      unint64_t v14 = v15;
      if (v13 == v7)
      {
        size_t v7 = v13;
LABEL_21:
        MEMORY[0x1A62711C0](&FigSharedMemPoolGetTypeID_registerOnce, shmemPoolRegister);
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          uint64_t v18 = Instance;
          *(void *)(Instance + 56) = v7;
          uint64_t v19 = malloc_type_calloc(v7, 0x18uLL, 0x10A00404E934A1DuLL);
          *(void *)(v18 + 4_Block_object_dispose(&STACK[0x4E0], 8) = v19;
          if (v19)
          {
            for (uint64_t i = *(void *)(v18 + 56); i; --i)
            {
              void *v19 = 0;
              v19[1] = v19;
              uint64_t v21 = *v12++;
              _OWORD v19[2] = v21;
              v19 += 3;
            }
            *(_DWORD *)(v18 + 64) = 0;
            *(void *)(v18 + 32) = a2;
            MEMORY[0x1A62711C0](&FigSharedMemPoolSharedRegionGetTypeID_registerOnce, shmemRegionRegister);
            uint64_t v22 = _CFRuntimeCreateInstance();
            if (v22)
            {
              CMTime v23 = (void *)v22;
              int32_t v24 = mmap(0, a2, 3, 4097, -1, 0);
              if (v24 != (_DWORD *)-1)
              {
                int64_t v25 = v24;
                v23[2] = v24;
                v23[3] = a2;
                *int32_t v24 = 1936224364;
                v24[1] = a2;
                *((void *)v24 + 1) = 0;
                *((void *)v24 + 2) = 0;
                *((void *)v24 + 3) = v23;
                pid_t v26 = getpid();
                uint64_t result = 0;
                *((void *)v25 + 4) = v26;
                *(void *)(v18 + 16) = v23;
                *(void *)(v18 + 24) = v23[2];
                *(void *)(v18 + 40) = 48;
                *a5 = v18;
                return result;
              }
              fig_log_get_emitter();
              FigDebugAssert3();
              CFRelease(v23);
            }
            else
            {
              fig_log_get_emitter();
              FigDebugAssert3();
            }
          }
          fig_log_get_emitter();
          FigDebugAssert3();
          CFRelease((CFTypeRef)v18);
        }
        else
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        return 4294954510;
      }
    }
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_16:
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t FigRemoteQueueSenderCreate(const __CFAllocator *a1, int a2, const void *a3, int *a4, unint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (!a7 || !a3 || (unint64_t v8 = a5, a5 >= 4) || a2 <= 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  MEMORY[0x1A62711C0](&FigRemoteQueueSenderGetTypeID_registerOnce, rqSenderRegister);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950630;
  }
  uint64_t v14 = Instance;
  *(void *)(Instance + 52) = -1;
  unint64_t v15 = (int *)(Instance + 52);
  *(void *)(Instance + 60) = -1;
  int v16 = (int *)(Instance + 60);
  int v17 = *(_DWORD *)(Instance + 40);
  if (v8)
  {
    uint64_t v18 = a4;
    unint64_t v19 = v8;
    do
    {
      int v20 = *v18++;
      v17 += v20;
      *(_DWORD *)(Instance + 40) = v17;
      --v19;
    }
    while (v19);
  }
  if ((v17 - 1) >= 0x100)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v35 = 4294950629;
LABEL_43:
    CFRelease((CFTypeRef)v14);
    return v35;
  }
  uint64_t v21 = (void *)CFRetain(a3);
  *(void *)(v14 + 16) = v21;
  CFAllocatorRef v22 = FigSharedMemPoolAllocatorCreate(a1, v21);
  *(void *)(v14 + 24) = v22;
  if (!v22) {
    goto LABEL_39;
  }
  unint64_t v23 = 32 * *(unsigned int *)(v14 + 40) + 32;
  int32_t v24 = (void *)FigSharedMemBlockAllocate(*(void *)(v14 + 16), v23);
  *(void *)(v14 + 32) = v24;
  if (!v24) {
    goto LABEL_39;
  }
  bzero(v24, v23);
  int64_t v25 = *(_DWORD **)(v14 + 32);
  *int64_t v25 = 1936223601;
  if (v8)
  {
    pid_t v26 = v25 + 2;
    do
    {
      int v27 = *a4++;
      *v26++ = v27;
      --v8;
    }
    while (v8);
  }
  if (pipe(v15)
    || pipe(v16)
    || fcntl(*v15, 4, 4) == -1
    || fcntl(*(_DWORD *)(v14 + 56), 4, 4) == -1
    || fcntl(*v16, 4, 4) == -1
    || fcntl(*(_DWORD *)(v14 + 56), 73, 1) == -1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v35 = *__error();
    goto LABEL_43;
  }
  uint64_t v28 = FigSimpleMutexCreate();
  *(void *)(v14 + 72) = v28;
  if (!v28) {
    goto LABEL_39;
  }
  dispatch_semaphore_t v29 = dispatch_semaphore_create(0);
  *(void *)(v14 + 96) = v29;
  if (!v29
    || (dispatch_semaphore_t v30 = dispatch_semaphore_create(0), (*(void *)(v14 + 104) = v30) == 0)
    || (double v31 = FigDispatchQueueCreateWithPriority(), (*(void *)(v14 + 88) = v31) == 0)
    || (CMTime v32 = dispatch_source_create(MEMORY[0x1E4F14478], *(int *)(v14 + 60), 0, v31),
        (*(void *)(v14 + 80) = v32) == 0))
  {
LABEL_39:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v35 = 4294950630;
    goto LABEL_43;
  }
  dispatch_set_context(v32, (void *)v14);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v14 + 80), (dispatch_function_t)rqSenderHandleDequeue);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v14 + 80), (dispatch_function_t)rqSenderCancelDequeues);
  *(void *)(v14 + 120) = voucher_copy();
  dispatch_resume(*(dispatch_object_t *)(v14 + 80));
  *(unsigned char *)(v14 + 112) = 0;
  FigRemoteQueueSenderSetContext((void *)v14, 0, 0, 0);
  *(_DWORD *)(v14 + 152) = a2;
  CMTime v33 = (ipc_space_read_t *)MEMORY[0x1E4F14960];
  CMTime v34 = (mach_port_name_t *)(v14 + 156);
  if (mach_port_allocate(*MEMORY[0x1E4F14960], 1u, (mach_port_name_t *)(v14 + 156)))
  {
    fig_log_get_emitter();
LABEL_42:
    FigDebugAssert3();
    uint64_t v35 = 4294950634;
    goto LABEL_43;
  }
  *(unsigned char *)(v14 + 160) = 1;
  mach_msg_type_number_t port_info_outCnt = 1;
  integer_t port_info_out = 0;
  if (mach_port_get_attributes(*v33, *(_DWORD *)(v14 + 156), 1, &port_info_out, &port_info_outCnt)
    || (port_info_out += 10, MEMORY[0x1A6272AA0](*v33, *v34, 1, &port_info_out, port_info_outCnt))
    || mach_port_insert_right(*v33, *v34, *v34, 0x14u))
  {
    fig_log_get_emitter();
    goto LABEL_42;
  }
  uint64_t v35 = 0;
  *(void *)(v14 + 16_Block_object_dispose(&STACK[0x4E0], 8) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(v14 + 176) = 0;
  *(void *)(v14 + 184) = 0;
  *(void *)(v14 + 192) = -1;
  *(void *)(v14 + 200) = -1;
  *(void *)(v14 + 20_Block_object_dispose(&STACK[0x4E0], 8) = -1;
  *(_DWORD *)(v14 + 216) = 0;
  *a7 = v14;
  return v35;
}

void *FigRemoteQueueSenderSetContext(void *result, uint64_t a2, void *aBlock, const void *a4)
{
  if (result)
  {
    size_t v7 = result;
    if (result[16])
    {
      uint64_t v8 = result[17];
      if (v8) {
        (*(void (**)(void))(v8 + 16))();
      }
    }
    v7[16] = a2;
    v7[17] = _Block_copy(aBlock);
    uint64_t result = _Block_copy(a4);
    v7[18] = result;
  }
  return result;
}

void __mscsn_handleStreamDroppedSampleNotification_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  double v3 = (const void *)*MEMORY[0x1E4F54418];
  uint64_t v4 = *MEMORY[0x1E4F54400];
  uint64_t v5 = 20;
  do
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) + 384;
    if (*(_DWORD *)(v6 + v2) == 1)
    {
      uint64_t v7 = v6 + v2;
      int v8 = *(unsigned __int8 *)(v7 + 8);
      BOOL v9 = *(void **)(v7 + 16);
      if (CFEqual(*(CFTypeRef *)(a1 + 56), v3))
      {
        CFDictionaryRef v10 = (const __CFDictionary *)[*(id *)(a1 + 32) objectForKeyedSubscript:v4];
        memset(&v17, 0, sizeof(v17));
        CMTimeMakeFromDictionary(&v17, v10);
        if (v8)
        {
          CMTime v16 = v17;
          id v11 = +[BWDroppedSample newDroppedSampleWithReason:0x1EFA67EA0 pts:&v16];
          [v9 emitDroppedSample:v11];

          uint64_t v12 = *(void **)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) + 104);
          CMTime v16 = v17;
          [v12 sourceNodeDidDropFrameWithPTS:&v16];
        }
      }
      else if (CFEqual(*(CFTypeRef *)(a1 + 56), @"Discontinuity"))
      {
        CFDictionaryRef v13 = (const __CFDictionary *)[*(id *)(a1 + 32) objectForKeyedSubscript:@"EventTimeStamp"];
        memset(&v17, 0, sizeof(v17));
        CMTimeMakeFromDictionary(&v17, v13);
        if (v8)
        {
          uint64_t v14 = *(void *)(a1 + 40);
          CMTime v16 = v17;
          id v15 = +[BWDroppedSample newDroppedSampleWithReason:v14 pts:&v16];
          [v9 emitDroppedSample:v15];
        }
      }
    }
    v2 += 512;
    --v5;
  }
  while (v5);
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t BWSampleBufferCreateForDroppedFrame(CMTime *a1, CMFormatDescriptionRef formatDescription, void *a3, CMAttachmentBearerRef *a4)
{
  CMAttachmentBearerRef target = 0;
  if (formatDescription && a4)
  {
    sampleTimingArray.presentationTimeStamp = *a1;
    *(_OWORD *)&sampleTimingArray.duration.long long value = *MEMORY[0x1E4F1F9F8];
    sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
    uint64_t v6 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, formatDescription, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&target);
    if (v6)
    {
      uint64_t v10 = v6;
      fig_log_get_emitter();
      FigDebugAssert3();
      return v10;
    }
    if ([a3 isEqualToString:@"HighFrameRateAutoFocusDiscontinuity"])
    {
      uint64_t v7 = (const void *)*MEMORY[0x1E4F1F360];
    }
    else
    {
      if (([a3 isEqualToString:@"VideoDeviceDiscontinuity"] & 1) == 0)
      {
        int v9 = [a3 isEqualToString:0x1EFA67E80];
        uint64_t v7 = 0;
        int v8 = (CFTypeRef *)MEMORY[0x1E4F1F378];
        if (v9) {
          int v8 = (CFTypeRef *)MEMORY[0x1E4F1F370];
        }
        goto LABEL_11;
      }
      uint64_t v7 = 0;
    }
    int v8 = (CFTypeRef *)MEMORY[0x1E4F1F368];
LABEL_11:
    if (*v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F240], *v8, 1u);
      if (v7) {
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F248], v7, 1u);
      }
    }
    uint64_t v10 = 0;
    *a4 = target;
    return v10;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWSampleBufferGetAttachedMedia(const void *a1, uint64_t a2)
{
  double v3 = (void *)CMGetAttachment(a1, @"AttachedMedia", 0);
  return [v3 objectForKeyedSubscript:a2];
}

BOOL BWSampleBufferIsMarkerBuffer(const void *a1)
{
  unint64_t v2 = (unint64_t)CMGetAttachment(a1, @"RecordingSettings", 0);
  unint64_t v3 = (unint64_t)CMGetAttachment(a1, @"FileWriterAction", 0);
  unint64_t v4 = (unint64_t)CMGetAttachment(a1, @"AttachedMediaSwapPlaceholderSampleBuffer", 0);
  return (v2 | v3 | v4 | (unint64_t)CMGetAttachment(a1, @"IrisMovieRequest", 0)) != 0;
}

id BWSampleBufferCopyDictionaryOfAttachedMedia(const void *a1)
{
  CFAllocatorContext v1 = (void *)CMGetAttachment(a1, @"AttachedMedia", 0);
  return v1;
}

void sfsn_setOverCaptureSlaveStreamStatusOnSampleBuffer(const void *a1, uint64_t a2)
{
  if (!objc_msgSend((id)CMGetAttachment(a1, @"OverCaptureSlaveStreamStatus", 0), "intValue"))
  {
    unint64_t v4 = (const void *)[NSNumber numberWithInt:a2];
    CMSetAttachment(a1, @"OverCaptureSlaveStreamStatus", v4, 1u);
  }
}

uint64_t BWInferenceGetAttachedInferenceResult(const void *a1, uint64_t a2)
{
  unint64_t v3 = (void *)CMGetAttachment(a1, @"Inferences", 0);
  uint64_t v4 = [NSNumber numberWithInt:a2];
  return [v3 objectForKeyedSubscript:v4];
}

uint64_t BWFilterDetectedObjectsInfoUsingSet(uint64_t result, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    unint64_t v3 = (void *)result;
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v3);
          }
          uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * i);
          if (([a2 containsObject:v9] & 1) == 0) {
            [v4 addObject:v9];
          }
        }
        uint64_t v6 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }
    return [v3 removeObjectsForKeys:v4];
  }
  return result;
}

BOOL __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 dimensions];
  uint64_t v4 = *(void *)(a1 + 32);
  return FigCaptureVideoDimensionsAreEqual(v3, v4);
}

uint64_t mscsn_metadataOutputKeyForOutputIndex(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 9:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B60];
      goto LABEL_7;
    case 10:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B58];
      goto LABEL_7;
    case 12:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B78];
      goto LABEL_7;
    case 13:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B80];
      goto LABEL_7;
    case 18:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B70];
LABEL_7:
      uint64_t result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getPTEffectRenderRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  uint64_t v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTEffectRenderRequestClass_softClass;
  uint64_t v8 = getPTEffectRenderRequestClass_softClass;
  if (!getPTEffectRenderRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectRenderRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPTEffectRenderRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A596824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPTEffectDescriptorClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  uint64_t v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTEffectDescriptorClass_softClass;
  uint64_t v8 = getPTEffectDescriptorClass_softClass;
  if (!getPTEffectDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectDescriptorClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPTEffectDescriptorClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A596833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPTEffectClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  uint64_t v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTEffectClass_softClass;
  uint64_t v8 = getPTEffectClass_softClass;
  if (!getPTEffectClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPTEffectClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A596842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __vtsp_invalidateThumbnailSinkContentsIfNeeded_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 72))
  {
    uint64_t v2 = result;
    uint64_t result = [*(id *)(v1 + 80) postNotification:@"ThumbnailImageQueueUpdated" notificationPayload:0];
    uint64_t v1 = *(void *)(v2 + 32);
  }
  *(unsigned char *)(v1 + 72) = 0;
  return result;
}

void __rqReceiverSetSource_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    os_retain(*(void **)(v1 + 72));
    voucher_adopt();
    pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 40));
    char v2 = *(unsigned char *)(v1 + 69);
    if (!v2)
    {
      LODWORD(v4) = 0;
      for (int i = 0; ; int i = v6)
      {
        uint64_t v10 = 0;
        IOSurfaceRef buffer = 0;
        int v12 = 0;
        if (v2) {
          pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 40));
        }
        if (v4 == -16665) {
          break;
        }
        if (!*(void *)(v1 + 56)) {
          goto LABEL_3;
        }
        int v6 = *(_DWORD *)(v1 + 64);
        if (i)
        {
          if (i != v6) {
            goto LABEL_3;
          }
        }
        uint64_t v7 = rqReceiverDequeue(v1, (uint64_t)&v10);
        if (v7 == -16668) {
          goto LABEL_3;
        }
        uint64_t v4 = v7;
        uint64_t v8 = (void (**)(void *, uint64_t, uint64_t *, void))_Block_copy(*(const void **)(v1 + 56));
        pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
        v8[2](v8, v4, &v10, *(void *)(v1 + 80));
        _Block_release(v8);
        FigSharedMemBlockRelease(v10);
        uint64_t v10 = 0;
        if (buffer)
        {
          IOSurfaceDecrementUseCount(buffer);
          CFRelease(buffer);
        }
        char v2 = 1;
      }
      if (!*(unsigned char *)(v1 + 68))
      {
        uint64_t v9 = *(NSObject **)(v1 + 48);
        if (v9)
        {
          *(unsigned char *)(v1 + 6_Block_object_dispose(&STACK[0x4E0], 8) = 1;
          dispatch_suspend(v9);
        }
      }
    }
LABEL_3:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
    uint64_t v3 = (void *)voucher_adopt();
    os_release(v3);
  }
}

uint64_t rqReceiverDequeue(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 69))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950631;
  }
  unsigned __int16 __buf = 0;
  ssize_t v4 = read(*(_DWORD *)(a1 + 32), &__buf, 2uLL);
  if (v4 < 0)
  {
    if (*__error() == 35) {
      return 4294950628;
    }
    else {
      return *__error();
    }
  }
  if (v4 != 2)
  {
    *(unsigned char *)(a1 + 69) = 1;
    return 4294950631;
  }
  uint64_t v5 = *(void *)(a1 + 24) + 32 * __buf;
  if (!*(void *)(v5 + 48))
  {
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  int v6 = IOSurfaceLookup(*(_DWORD *)(v5 + 56));
  if (v6)
  {
    uint64_t v7 = v6;
    IOSurfaceIncrementUseCount(v6);
LABEL_13:
    uint64_t v8 = 0;
    *(void *)a2 = FigSharedMemBlockRetain(*(void *)(v5 + 40));
    *(void *)(a2 + _Block_object_dispose(&STACK[0x4E0], 8) = v7;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v5 + 60);
    __dmb(0xBu);
    goto LABEL_15;
  }
  uint64_t v8 = 4294950629;
LABEL_15:
  if (write(*(_DWORD *)(a1 + 36), &__buf, 2uLL) != 2) {
    *(unsigned char *)(a1 + 69) = 1;
  }
  return v8;
}

uint64_t __FigRemoteOperationReceiverCreateMessageReceiver_block_invoke(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t a4)
{
  if (a2)
  {
    unsigned int v7 = 0;
LABEL_3:
    if (a4) {
      pthread_mutex_lock(*(pthread_mutex_t **)a4);
    }
    uint64_t v8 = (unsigned int *)(a4 + 72);
    if (v7 != *(_DWORD *)(a4 + 72))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
    uint64_t v9 = *v8;
    if (v9)
    {
      if ((v9 - 7) >= 0xFFFFFFFA) {
        ((void (*)(uint64_t))roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v9 + 2])(a4 + 72);
      }
      *(_OWORD *)(a4 + 8_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
      *(_OWORD *)(a4 + 104) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)a4);
  }
  unsigned int Type = FigRemoteOperationGetType(a3);
  unsigned int v7 = Type;
  if (!Type) {
    goto LABEL_3;
  }
  if (Type - 7 <= 0xFFFFFFF9)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_3;
  }
  long long v13 = *a3;
  uint64_t v14 = 12;
  if (*((_DWORD **)*a3 + 4) == *a3) {
    uint64_t v14 = 10;
  }
  Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(*(void *)&v13[v14]);
  if (Region) {
    CFRetain(Region);
  }
  int v16 = *((unsigned __int8 *)v13 + 12);
  CMTime v17 = &roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v7];
  ((void (*)(_DWORD **, uint64_t))v17[1])(a3, a4);
  uint64_t result = ((uint64_t (*)(_DWORD *))v17[3])(v13);
  if (!v16) {
    goto LABEL_3;
  }
  return result;
}

uint64_t FigRemoteOperationGetType(_DWORD **a1)
{
  if (a1)
  {
    uint64_t v1 = *a1;
    if (*a1)
    {
      if (*v1 == 1919774576) {
        return v1[1];
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

unsigned int *FigRemoteOperationCleanup(unsigned int *result)
{
  uint64_t v1 = *result;
  if ((v1 - 7) >= 0xFFFFFFFA) {
    return (unsigned int *)roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v1 + 2]();
  }
  return result;
}

uint64_t roEnqueueSampleBuffer(const __CFAllocator *a1, int *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v67 = 0;
  uint64_t v68 = 0;
  int v69 = 0;
  CGRect v65 = 0;
  uint64_t v66 = 0;
  uint64_t v7 = *((void *)a2 + 3);
  CFTypeRef v63 = 0;
  int v64 = 0;
  uint64_t v8 = a2[1];
  if (v8 >= 3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v7 = 0;
    uint64_t v12 = 0;
    goto LABEL_30;
  }
  int v61 = a4;
  uint64_t v60 = a5;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  uint64_t v12 = (uint64_t)Context;
  if (Context) {
    pthread_mutex_lock(*Context);
  }
  CFTypeRef v13 = *(CFTypeRef *)(v12 + 8);
  if (v13) {
    CFTypeRef v13 = CFRetain(v13);
  }
  CFTypeRef v63 = v13;
  unint64_t v14 = *((void *)a2 + 4);
  if (!v14) {
    unint64_t v14 = *(void *)(v12 + 8 * v8 + 24);
  }
  uint64_t v62 = 0;
  if (!v7)
  {
    CVImageBufferRef ImageBuffer = 0;
LABEL_18:
    Dataunint64_t Length = 0;
    uint64_t v18 = 0;
    goto LABEL_19;
  }
  DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)v7);
  if (!DataBuffer)
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v7);
    goto LABEL_18;
  }
  int v16 = DataBuffer;
  Dataunint64_t Length = CMBlockBufferGetDataLength(DataBuffer);
  uint64_t v18 = (__CVBuffer *)CMGetAttachment(v16, (CFStringRef)*MEMORY[0x1E4F1EC38], 0);
  CVImageBufferRef ImageBuffer = 0;
  if (!*((void *)a2 + 4) && v14 >= 0x21)
  {
    if (DataLength)
    {
      CVImageBufferRef ImageBuffer = *(CVImageBufferRef *)(v12 + 8 * v8 + 48);
      if (ImageBuffer)
      {
        double v20 = (float)((float)DataLength / (float)(unint64_t)ImageBuffer);
        CVImageBufferRef ImageBuffer = 0;
        if (v20 < 0.8) {
          unint64_t v14 = 32;
        }
      }
    }
  }
LABEL_19:
  int v21 = *a2;
  if (*a2 != 3 && v21 != 6)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v7 = 0;
LABEL_30:
    uint64_t v24 = 4294950629;
    goto LABEL_66;
  }
  if (!v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_30;
  }
  uint64_t v58 = v8;
  uint64_t v59 = a3;
  size_t v57 = DataLength;
  if (v21 == 6)
  {
    if ((unint64_t)ImageBuffer | (unint64_t)v18)
    {
      unint64_t v54 = v14;
      uint64_t v55 = v5;
      CFAllocatorRef v56 = a1;
      CFArrayRef v22 = (CFArrayRef)*((void *)a2 + 5);
      if (ImageBuffer) {
        unint64_t v23 = ImageBuffer;
      }
      else {
        unint64_t v23 = v18;
      }
      if (v22) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
  }
  else if ((unint64_t)ImageBuffer | (unint64_t)v18)
  {
    unint64_t v54 = v14;
    uint64_t v55 = v5;
    CFAllocatorRef v56 = a1;
    if (ImageBuffer) {
      unint64_t v23 = ImageBuffer;
    }
    else {
      unint64_t v23 = v18;
    }
LABEL_35:
    CFArrayRef v22 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F53070], 1, MEMORY[0x1E4F1D510]);
    CFAutorelease(v22);
LABEL_36:
    CFIndex Count = CFArrayGetCount(v22);
    uint64_t v53 = (uint64_t)&v53;
    unint64_t v26 = 8 * Count;
    MEMORY[0x1F4188790](Count, v27, v28, v29);
    unint64_t v30 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    double v31 = (const void **)((char *)&v53 - v30);
    if (v26 >= 0x200) {
      size_t v32 = 512;
    }
    else {
      size_t v32 = v26;
    }
    bzero((char *)&v53 - v30, v32);
    MEMORY[0x1F4188790](v33, v34, v35, v36);
    CMTime v37 = (char *)&v53 - v30;
    bzero(v37, v32);
    if (CFArrayGetCount(v22) < 1)
    {
      CFIndex v39 = 0;
    }
    else
    {
      CFIndex v38 = 0;
      CFIndex v39 = 0;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, v38);
        CFTypeRef v41 = CVBufferCopyAttachment(v23, ValueAtIndex, 0);
        if (v41)
        {
          CFTypeRef v42 = CFAutorelease(v41);
          if (v42)
          {
            v31[v39] = ValueAtIndex;
            *(void *)&v37[8 * v39++] = v42;
          }
        }
        ++v38;
      }
      while (v38 < CFArrayGetCount(v22));
    }
    CFDictionaryRef v43 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v31, (const void **)v37, v39, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    a1 = v56;
    goto LABEL_49;
  }
  CFDictionaryRef v43 = 0;
LABEL_49:
  int v44 = roReplaceFlatDictionaryAttachments((CMAttachmentBearerRef)v7, a1, &v64);
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
  if (SerializedAtomDataAndSurfaceForSampleBuffer)
  {
    uint64_t v24 = SerializedAtomDataAndSurfaceForSampleBuffer;
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v7 = 0;
  }
  else
  {
    int v46 = CFAllocatorAllocate(a1, 8 * v44 + 68, 0);
    uint64_t v7 = (uint64_t)v46;
    if (v46)
    {
      v46[16] = 0;
      *((_OWORD *)v46 + 2) = 0u;
      *((_OWORD *)v46 + 3) = 0u;
      *(_OWORD *)int v46 = 0u;
      *((_OWORD *)v46 + 1) = 0u;
      int v67 = v46;
      uint64_t v68 = v66;
      int v69 = a2[1];
      *(void *)int v46 = 0x3726D6F70;
      *((void *)v46 + 2) = *((void *)a2 + 1);
      *((void *)v46 + 4) = v46;
      *((void *)v46 + 3) = roSerializationContextGetCacheForName(v12, a1, *((const __CFString **)a2 + 2));
      *(void *)(v7 + 40) = FigSharedMemBlockRetain((uint64_t)v65);
      *(void *)(v7 + 56) = v62;
      uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress((uint64_t)v65);
      *(void *)(v7 + 4_Block_object_dispose(&STACK[0x4E0], 8) = RemoteAddress;
      *(_DWORD *)(v7 + 64) = v44;
      if (v44) {
        memcpy((void *)(v7 + 68), v64, 8 * v44);
      }
      if (!RemoteAddress)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      if (v61) {
        uint64_t v48 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(v59, (uint64_t)&v67, 1uLL, v60);
      }
      else {
        uint64_t v48 = FigRemoteQueueSenderEnqueueSequence(v59, (uint64_t)&v67, 1uLL);
      }
      uint64_t v24 = v48;
      if (v48)
      {
        if (v48 != -16669)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
      else
      {
        uint64_t v49 = v12 + 8 * (int)v58;
        if (*(void *)(v49 + 24) != v62)
        {
          *(void *)(v49 + 24) = v62;
          *(void *)(v49 + 4_Block_object_dispose(&STACK[0x4E0], 8) = v57;
        }
        CGRect v50 = *(const void **)(v12 + 8);
        if (v50) {
          CFRelease(v50);
        }
        uint64_t v24 = 0;
        *(void *)(v12 + _Block_object_dispose(&STACK[0x4E0], 8) = v63;
        CFTypeRef v63 = 0;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v24 = 4294950630;
    }
  }
  if (v43) {
    CFRelease(v43);
  }
LABEL_66:
  if (v63) {
    CFRelease(v63);
  }
  if (v64) {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v64);
  }
  if (v7)
  {
    if (v24)
    {
      roCleanupSampleBufferMessageData(v7);
    }
    else
    {
      Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion((uint64_t)v65);
      if (Region) {
        CFRelease(Region);
      }
    }
    CFAllocatorDeallocate(a1, (void *)v7);
  }
  CFAllocatorDeallocate(a1, v65);
  if (v12) {
    pthread_mutex_unlock(*(pthread_mutex_t **)v12);
  }
  return v24;
}

void FigSharedMemBlockRelease(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 - 16) == 1936220779)
    {
      uint64_t v2 = a1 - 16 - *(unsigned int *)(a1 - 4);
      if (*(int *)(a1 - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 - 12), 0xFFFFFFFF, memory_order_relaxed);
      uint64_t v3 = *(void *)(v2 + 32);
      pid_t v4 = getpid();
      uint64_t v5 = 16;
      if (v3 == v4) {
        uint64_t v5 = 24;
      }
      int v6 = *(const void **)(v2 + v5);
      if (v6)
      {
        CFRelease(v6);
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
}

uint64_t roSerializationContextGetCacheForName(uint64_t a1, const __CFAllocator *a2, const __CFString *key)
{
  if (!key) {
    goto LABEL_7;
  }
  CFNumberRef Value = (UInt8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value) {
    return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
  }
  CFIndex Length = CFStringGetLength(key);
  maxBufLeuint64_t n = 0;
  v10.locatiouint64_t n = 0;
  v10.length = Length;
  if (CFStringGetBytes(key, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen) != Length)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_7:
    CFNumberRef Value = 0;
    return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
  }
  CFNumberRef Value = (UInt8 *)CFAllocatorAllocate(a2, maxBufLen + 1, 0);
  if (Value)
  {
    v11.locatiouint64_t n = 0;
    v11.length = Length;
    CFStringGetBytes(key, v11, 0x8000100u, 0, 0, Value, maxBufLen, 0);
    Value[maxBufLen] = 0;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), key, Value);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
}

uint64_t FigRemoteQueueSenderEnqueueSequence(uint64_t a1, uint64_t a2, unint64_t a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  uint64_t v6 = rqSenderEnqueue(a1, a2, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v6;
}

uint64_t rqSenderEnqueue(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 113))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_50;
  }
  unint64_t v6 = a3;
  unint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7 > a3)
  {
    if (*(int *)(*(void *)(a1 + 32) + 4) + a3 > v7)
    {
LABEL_55:
      uint64_t v49 = 4294950627;
LABEL_51:
      uint64_t v50 = *(unsigned __int16 *)(a1 + 48);
      if (v5 != v50)
      {
        int v51 = (int *)(v3 + 16);
        do
        {
          int v52 = (unsigned __int16)v50;
          rqSenderCleanupQueueElement(*(void *)(a1 + 32) + 32 * (unsigned __int16)v50 + 32);
          uint64_t v53 = *v51;
          v51 += 5;
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 4 * v53 + 20), 0xFFFFFFFF, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 4), 0xFFFFFFFF, memory_order_relaxed);
          LODWORD(v50) = (v52 + 1) % *(_DWORD *)(a1 + 40);
        }
        while (v5 != (unsigned __int16)v50);
      }
      return v49;
    }
    if (a3)
    {
      uint64_t v8 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v9 = v3 + 20 * v8;
        if (*(_DWORD *)(v9 + 16) >= 3u)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v49 = 4294950629;
          goto LABEL_51;
        }
        uint64_t v10 = *(void *)(a1 + 32);
        if (*(_DWORD *)(v10 + 4 * *(unsigned int *)(v9 + 16) + 20) >= *(_DWORD *)(v10
                                                                                   + 4 * *(unsigned int *)(v9 + 16)
                                                                                   + 8))
          goto LABEL_55;
        uint64_t v62 = (int *)(v9 + 16);
        if (*(void *)v9)
        {
          uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress(*(void *)v9);
          if (!RemoteAddress)
          {
            uint64_t v49 = 4294950632;
            goto LABEL_51;
          }
          uint64_t v61 = RemoteAddress;
          uint64_t v10 = *(void *)(a1 + 32);
        }
        else
        {
          uint64_t v61 = 0;
        }
        uint64_t v12 = v3 + 20 * v8;
        uint64_t v15 = *(const void **)(v12 + 8);
        unint64_t v14 = (IOSurfaceRef *)(v12 + 8);
        CFTypeRef v13 = v15;
        uint64_t v60 = v14;
        if (v15)
        {
          uint64_t v57 = v10;
          uint64_t v58 = v3 + 20 * v8;
          uint64_t v59 = v8;
          CFRetain(v13);
          IOSurfaceIncrementUseCount(*v14);
          IOSurfaceID ID = IOSurfaceGetID(*v14);
          rqSenderRegisterIOSurface(a1, *v14);
          if (*(_DWORD *)(a1 + 216))
          {
            int v65 = *(_DWORD *)(a1 + 156);
            uint64_t ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
            uint64_t v18 = *(void *)(a1 + 192);
            if (v18 != -1)
            {
              uint64_t v19 = ContinuousUpTimeNanoseconds;
              uint64_t v20 = ContinuousUpTimeNanoseconds - 1000000 * *(unsigned int *)(a1 + 216);
              uint64_t v64 = v20;
              do
              {
                uint64_t v21 = *(void *)(a1 + 176) + 32 * v18;
                if (v20 <= *(void *)(v21 + 8)) {
                  break;
                }
                uint64_t v22 = *(void *)(v21 + 16);
                IOSurfaceID valuePtr = 0;
                IOSurfaceID valuePtr = IOSurfaceGetID(*(IOSurfaceRef *)v21);
                unint64_t v23 = (__IOSurface *)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 176) + 32 * v18));
                int v24 = IOSurfaceIsInUse(v23);
                int v25 = *(_DWORD *)(a1 + 216);
                if (v24)
                {
                  if (v25)
                  {
                    uint64_t v26 = *(void *)(a1 + 176);
                    uint64_t v27 = v26 + 32 * v18;
                    *(void *)(v27 + _Block_object_dispose(&STACK[0x4E0], 8) = v19;
                    uint64_t v28 = *(void *)(a1 + 200);
                    if (v28 != v18)
                    {
                      uint64_t v31 = *(void *)(v27 + 24);
                      uint64_t v29 = (void *)(v27 + 24);
                      uint64_t v30 = v31;
                      if (v31 != -1) {
                        *(void *)(v26 + 32 * v30 + 16) = *(void *)(v26 + 32 * v18 + 16);
                      }
                      uint64_t v32 = v26 + 32 * v18;
                      uint64_t v35 = *(void *)(v32 + 16);
                      uint64_t v33 = (uint64_t *)(v32 + 16);
                      uint64_t v34 = v35;
                      if (v35 != -1) {
                        *(void *)(v26 + 32 * v34 + 24) = v30;
                      }
                      if (v28 != -1) {
                        *(void *)(v26 + 32 * v28 + 16) = v18;
                      }
                      uint64_t v36 = *(void *)(a1 + 192);
                      if (v36 == v18)
                      {
                        uint64_t v36 = *v33;
                        *(void *)(a1 + 192) = *v33;
                      }
                      *uint64_t v29 = v28;
                      uint64_t *v33 = -1;
                      *(void *)(a1 + 200) = v18;
                      if (v36 == -1) {
                        *(void *)(a1 + 192) = v18;
                      }
                    }
                  }
                }
                else
                {
                  if (v25)
                  {
                    uint64_t v37 = v19;
                    uint64_t v38 = *(void *)(a1 + 176);
                    uint64_t v39 = v38 + 32 * v18;
                    CFTypeRef v41 = (void *)(v39 + 24);
                    uint64_t v40 = *(void *)(v39 + 24);
                    if (v40 != -1) {
                      *(void *)(v38 + 32 * v40 + 16) = *(void *)(v39 + 16);
                    }
                    uint64_t v42 = *(void *)(v39 + 16);
                    if (v42 != -1) {
                      *(void *)(v38 + 32 * v42 + 24) = v40;
                    }
                    if (*(void *)(a1 + 192) == v18) {
                      *(void *)(a1 + 192) = v42;
                    }
                    if (*(void *)(a1 + 200) == v18) {
                      *(void *)(a1 + 200) = *v41;
                    }
                    if (*(void *)v39)
                    {
                      CFRelease(*(CFTypeRef *)v39);
                      *(void *)uint64_t v39 = 0;
                    }
                    *(void *)(v38 + 32 * v18 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
                    *CFTypeRef v41 = -1;
                    *(void *)(v39 + 16) = *(void *)(a1 + 208);
                    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x4E0], 8) = v18;
                    uint64_t v19 = v37;
                    uint64_t v20 = v64;
                  }
                  CFNumberRef v43 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
                  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 168), v43);
                  CFRelease(v43);
                  LODWORD(v43) = IOSurfaceCreateMachPort(v23);
                  global_queue = dispatch_get_global_queue(0, 0);
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = 0x40000000;
                  block[2] = __rqSurfacesReleaseAgedOut_block_invoke;
                  block[3] = &__block_descriptor_tmp_55_0;
                  int v67 = v65;
                  int v68 = (int)v43;
                  dispatch_async(global_queue, block);
                }
                CFRelease(v23);
                uint64_t v18 = v22;
              }
              while (v22 != -1);
            }
          }
          uint64_t v8 = v59;
          unint64_t v45 = a3;
          uint64_t v3 = a2;
          uint64_t v10 = v57;
          uint64_t v9 = v58;
          IOSurfaceID v46 = ID;
        }
        else
        {
          IOSurfaceID v46 = 0;
          unint64_t v45 = v6;
        }
        uint64_t v47 = v10 + 32 * v5;
        *(void *)(v47 + 32) = FigSharedMemBlockRetain(*(void *)v9);
        *(void *)(v47 + 40) = v61;
        *(void *)(v47 + 4_Block_object_dispose(&STACK[0x4E0], 8) = *v60;
        *(_DWORD *)(v47 + 56) = v46;
        uint64_t v48 = *v62;
        *(_DWORD *)(v47 + 60) = v48;
        atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 32) + 4 * v48 + 20), 1u);
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 4), 1u, memory_order_relaxed);
        __buf[v8] = v5;
        uint64_t v5 = (unsigned __int16)(((unsigned __int16)v5 + 1) % *(_DWORD *)(a1 + 40));
        ++v8;
        unint64_t v6 = v45;
      }
      while (v8 != v45);
    }
    if (write(*(_DWORD *)(a1 + 56), __buf, 2 * v6) == 2 * v6)
    {
      uint64_t v49 = 0;
      *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x4E0], 8) = v5;
      return v49;
    }
    *(unsigned char *)(a1 + 113) = 1;
LABEL_50:
    uint64_t v49 = 4294950631;
    goto LABEL_51;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  uint64_t v49 = FigSignalErrorAt();
  if (v49) {
    goto LABEL_51;
  }
  return v49;
}

uint64_t FigSharedMemBlockRetain(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*(_DWORD *)(a1 - 16) == 1936220779)
    {
      uint64_t v2 = a1 - 16 - *(unsigned int *)(a1 - 4);
      if (*(int *)(a1 - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 - 12), 1u, memory_order_relaxed);
      uint64_t v3 = *(void *)(v2 + 32);
      pid_t v4 = getpid();
      uint64_t v5 = 16;
      if (v3 == v4) {
        uint64_t v5 = 24;
      }
      unint64_t v6 = *(const void **)(v2 + v5);
      if (v6) {
        CFRetain(v6);
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return v1;
}

uint64_t roReplaceFlatDictionaryAttachments(CMAttachmentBearerRef target, const __CFAllocator *a2, void **a3)
{
  v61[1] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v56 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  CMAttachmentBearerRef v57 = target;
  CFDictionaryRef v5 = CMCopyDictionaryOfAttachments(v56, target, 1u);
  if (!v5) {
    return 0;
  }
  CFDictionaryRef v6 = v5;
  CFIndex Count = CFDictionaryGetCount(v5);
  unint64_t v54 = &v49;
  MEMORY[0x1F4188790](Count, v8, v9, v10);
  unint64_t v11 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (CFStringRef *)((char *)&v49 - v11);
  if ((unint64_t)(8 * Count) >= 0x200) {
    size_t v13 = 512;
  }
  else {
    size_t v13 = 8 * Count;
  }
  bzero((char *)&v49 - v11, v13);
  MEMORY[0x1F4188790](v14, v15, v16, v17);
  uint64_t v18 = (CFTypeRef *)((char *)&v49 - v11);
  bzero((char *)&v49 - v11, v13);
  CFDictionaryRef v55 = v6;
  CFDictionaryGetKeysAndValues(v6, (const void **)((char *)&v49 - v11), (const void **)((char *)&v49 - v11));
  if (Count >= 1)
  {
    uint64_t v49 = a3;
    uint64_t v19 = 0;
    uint64_t v20 = (const void *)*MEMORY[0x1E4F55BA0];
    uint64_t v21 = (const void *)*MEMORY[0x1E4F55B98];
    int v51 = (const void *)*MEMORY[0x1E4F55BA0];
    CFAllocatorRef v52 = a2;
    uint64_t v50 = v21;
    while (1)
    {
      CFTypeID v22 = CFGetTypeID(*v18);
      if (v22 != CFDictionaryGetTypeID()) {
        goto LABEL_31;
      }
      long long value = 0;
      v61[0] = 0;
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)*v18, v20, (const void **)&value)
        || !CFDictionaryGetValueIfPresent((CFDictionaryRef)*v18, v21, (const void **)v61))
      {
        goto LABEL_31;
      }
      CFTypeID v23 = CFGetTypeID(v61[0]);
      if (v23 != FigFlatDictionaryGetTypeID())
      {
        uint64_t v28 = 0;
        goto LABEL_18;
      }
      LODWORD(valuePtr) = 0;
      BackingPointer = (const void *)FigFlatDictionaryGetBackingPointer((uint64_t)v61[0], &valuePtr);
      Regiouint64_t n = FigSharedMemBlockGetRegion((uint64_t)BackingPointer);
      CFAllocatorRef Pool = FigSharedMemPoolAllocatorGetPool(a2);
      if (Region == FigSharedMemPoolGetSharedRegion((uint64_t)Pool))
      {
        uint64_t v29 = FigSharedMemBlockRetain((uint64_t)BackingPointer);
        uint64_t v28 = v29;
      }
      else
      {
        uint64_t v27 = CFAllocatorAllocate(a2, valuePtr, 0);
        uint64_t v28 = (uint64_t)v27;
        if (!v27) {
          goto LABEL_18;
        }
        memcpy(v27, BackingPointer, valuePtr);
        uint64_t v29 = v28;
      }
      uint64_t v30 = (const void *)FigSharedMemBlockGetRegion(v29);
      if (v30) {
        CFRelease(v30);
      }
LABEL_18:
      CFTypeID v31 = CFGetTypeID(value);
      if (v31 == FigFlatDictionaryKeySpecGetTypeID())
      {
        BinaryForExport = FigFlatDictionaryKeySpecCreateBinaryForExport(a2, (uint64_t)value, 0);
        if (BinaryForExport)
        {
          uint64_t v33 = (uint64_t)BinaryForExport;
          uint64_t v34 = (const void *)FigSharedMemBlockGetRegion((uint64_t)BinaryForExport);
          if (v34) {
            CFRelease(v34);
          }
          if (v28)
          {
            uint64_t valuePtr = 0;
            uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress(v28);
            uint64_t v58 = 0;
            uint64_t valuePtr = RemoteAddress;
            uint64_t v58 = FigSharedMemBlockGetRemoteAddress(v33);
            CFAllocatorRef v36 = v56;
            uint64_t Mutable = CFDictionaryCreateMutable(v56, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFNumberRef v38 = CFNumberCreate(v36, kCFNumberLongLongType, &valuePtr);
            int v53 = v19;
            CFNumberRef v39 = v38;
            CFDictionaryAddValue(Mutable, v21, v38);
            CFRelease(v39);
            CFNumberRef v40 = CFNumberCreate(v36, kCFNumberLongLongType, &v58);
            CFDictionaryAddValue(Mutable, v20, v40);
            CFRelease(v40);
            CFTypeRef v41 = v49;
            int v42 = v53;
            uint64_t v19 = (v53 + 2);
            CFAllocatorRef v43 = v36;
            CMAttachmentBearerRef v44 = v57;
            unint64_t v45 = (char *)CFAllocatorReallocate(v43, *v49, 8 * (int)v19, 0);
            *CFTypeRef v41 = v45;
            IOSurfaceID v46 = (uint64_t *)&v45[8 * v42];
            *IOSurfaceID v46 = v28;
            v46[1] = v33;
            CMRemoveAttachment(v44, *v12);
            if (Mutable)
            {
              CMSetAttachment(v44, *v12, Mutable, 1u);
              CFRelease(Mutable);
            }
            uint64_t v20 = v51;
            a2 = v52;
            uint64_t v21 = v50;
            goto LABEL_31;
          }
          uint64_t v47 = (const void *)FigSharedMemBlockGetRegion(v33);
          uint64_t v28 = v33;
          if (!v47) {
            goto LABEL_29;
          }
LABEL_28:
          CFRetain(v47);
LABEL_29:
          FigSharedMemBlockRetain(v28);
          goto LABEL_30;
        }
      }
      if (v28)
      {
        uint64_t v47 = (const void *)FigSharedMemBlockGetRegion(v28);
        if (v47) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
LABEL_30:
      CMRemoveAttachment(v57, *v12);
LABEL_31:
      ++v12;
      ++v18;
      if (!--Count) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v19 = 0;
LABEL_37:
  CFRelease(v55);
  return v19;
}

uint64_t FigSharedMemBlockGetRegion(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result - 16;
    if (*(_DWORD *)(result - 16) == 1936220779)
    {
      if (*(int *)(result - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      uint64_t v3 = v2 - *(unsigned int *)(v1 - 4);
      uint64_t v4 = *(void *)(v3 + 32);
      pid_t v5 = getpid();
      uint64_t v6 = v3 + 16;
      if (v4 == v5) {
        uint64_t v6 = v3 + 24;
      }
      return *(void *)v6;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t FigSharedMemBlockGetRemoteAddress(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result - 16) == 1936220779)
    {
      uint64_t v1 = *(unsigned int *)(result - 4);
      uint64_t v2 = *(void *)(result - 16 - v1 + 8);
      if (v2) {
        return v1 + v2 + 16;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 0;
  }
  return result;
}

uint64_t roDeserializeSampleBuffer(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a1;
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    CFTypeRef cf = 0;
    if (*(_DWORD *)(v4 + 4) == 3)
    {
      uint64_t BlockBufferWrapper = roCreateBlockBufferWrapper(v4, (CMBlockBufferRef *)&cf);
      if (BlockBufferWrapper
        || (uint64_t BlockBufferWrapper = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface(),
            BlockBufferWrapper))
      {
        uint64_t v9 = BlockBufferWrapper;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        roRebuildFlatDictionaryAttachments(*(CMAttachmentBearerRef *)(a2 + 96));
        int v6 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(v4 + 4);
        *(_DWORD *)(a2 + 76) = v6;
        unint64_t v7 = *(const void **)(v4 + 24);
        *(void *)(a2 + 80) = *(void *)(v4 + 16);
        NameForCache = roSerializationContextGetNameForCache(a2, v7);
        if (NameForCache) {
          NameForCache = CFRetain(NameForCache);
        }
        uint64_t v9 = 0;
        *(void *)(a2 + 8_Block_object_dispose(&STACK[0x4E0], 8) = NameForCache;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v9 = 4294950629;
    }
    if (cf) {
      CFRelease(cf);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v9;
}

const void *roSerializationContextGetNameForCache(uint64_t a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (!Value)
  {
    CFNumberRef Value = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)a2, 0x8000100u);
    if (Value)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, Value);
      CFRelease(Value);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  return Value;
}

void roRebuildFlatDictionaryAttachments(CMAttachmentBearerRef target)
{
  v28[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], target, 1u);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFIndex Count = CFDictionaryGetCount(v2);
    MEMORY[0x1F4188790](Count, v5, v6, v7);
    unint64_t v8 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v9 = (CFStringRef *)((char *)&v24 - v8);
    if ((unint64_t)(8 * Count) >= 0x200) {
      size_t v10 = 512;
    }
    else {
      size_t v10 = 8 * Count;
    }
    bzero((char *)&v24 - v8, v10);
    MEMORY[0x1F4188790](v11, v12, v13, v14);
    uint64_t v15 = (CFTypeRef *)((char *)&v24 - v8);
    bzero((char *)&v24 - v8, v10);
    CFDictionaryGetKeysAndValues(v3, (const void **)((char *)&v24 - v8), (const void **)((char *)&v24 - v8));
    if (Count >= 1)
    {
      uint64_t v16 = (const void *)*MEMORY[0x1E4F55BA0];
      uint64_t v17 = (const void *)*MEMORY[0x1E4F55B98];
      do
      {
        CFTypeID v18 = CFGetTypeID(*v15);
        if (v18 == CFDictionaryGetTypeID())
        {
          long long value = 0;
          v28[0] = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)*v15, v16, (const void **)&value))
          {
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)*v15, v17, (const void **)v28))
            {
              uint64_t v25 = 0;
              uint64_t valuePtr = 0;
              CFNumberGetValue((CFNumberRef)v28[0], kCFNumberLongLongType, &valuePtr);
              CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v25);
              uint64_t v19 = valuePtr;
              if (valuePtr && (uint64_t v20 = v25) != 0)
              {
                Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(valuePtr);
                if (Region) {
                  CFRetain(Region);
                }
                CFTypeID v22 = (const void *)FigSharedMemBlockGetRegion(v20);
                if (v22) {
                  CFRetain(v22);
                }
                LazyFlatDictionaryWrapper = (const void *)FigCreateLazyFlatDictionaryWrapper(v19, v20, (uint64_t)&__block_literal_global_57);
                CMRemoveAttachment(target, *v9);
                if (LazyFlatDictionaryWrapper)
                {
                  CMSetAttachment(target, *v9, LazyFlatDictionaryWrapper, 1u);
                  CFRelease(LazyFlatDictionaryWrapper);
                }
              }
              else
              {
                CMRemoveAttachment(target, *v9);
              }
            }
          }
        }
        ++v9;
        ++v15;
        --Count;
      }
      while (Count);
    }
    CFRelease(v3);
  }
}

uint64_t roCreateBlockBufferWrapper(uint64_t a1, CMBlockBufferRef *blockBufferOut)
{
  uint64_t v2 = 48;
  if (*(void *)(a1 + 32) == a1) {
    uint64_t v2 = 40;
  }
  CFDictionaryRef v3 = *(void **)(a1 + v2);
  if (v3)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t v7 = *(void *)(a1 + 56);
    if (roGetShmemDeallocator_once != -1) {
      dispatch_once(&roGetShmemDeallocator_once, &__block_literal_global_45);
    }
    uint64_t v8 = CMBlockBufferCreateWithMemoryBlock(v6, v3, v7, (CFAllocatorRef)roGetShmemDeallocator_shmemDeallocator, 0, 0, *(void *)(a1 + 56), 0, blockBufferOut);
    if (v8)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigSharedMemBlockRetain((uint64_t)v3);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v8;
}

void roCleanupSampleBufferOperation(uint64_t a1)
{
  if (*(_DWORD *)a1 != 3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

void roCleanupSampleBufferMessageData(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    CFDictionaryRef v3 = (void *)(a1 + 40);
    BOOL v4 = v2 == a1;
    if (v2 == a1) {
      uint64_t v5 = 40;
    }
    else {
      uint64_t v5 = 48;
    }
    uint64_t v6 = *(void *)(a1 + v5);
    if (v4 && *(int *)(a1 + 64) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1 + 68;
      do
      {
        Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(*(void *)(v8 + 8 * v7));
        if (Region) {
          CFRetain(Region);
        }
        FigSharedMemBlockRelease(*(void *)(v8 + 8 * v7++));
      }
      while (v7 < *(int *)(a1 + 64));
    }
    FigSharedMemBlockRelease(v6);
    *CFDictionaryRef v3 = 0;
    v3[1] = 0;
  }
}

uint64_t FigSharedMemPoolGetSharedRegion(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t rqSenderRegisterIOSurface(uint64_t a1, IOSurfaceRef buffer)
{
  IOSurfaceGetID(buffer);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (a1 && buffer)
  {
    if (*(_DWORD *)(a1 + 156))
    {
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 168), UInt32))
      {
        if (!*(_DWORD *)(a1 + 216)) {
          goto LABEL_17;
        }
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 168), UInt32);
        int SInt32 = FigCFNumberGetSInt32();
        uint64_t ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
        if (!*(_DWORD *)(a1 + 216)) {
          goto LABEL_17;
        }
        uint64_t v8 = SInt32;
        uint64_t v9 = *(void *)(a1 + 176);
        uint64_t v10 = v9 + 32 * SInt32;
        *(void *)(v10 + _Block_object_dispose(&STACK[0x4E0], 8) = ContinuousUpTimeNanoseconds;
        uint64_t v11 = *(void *)(a1 + 200);
        if (v11 == SInt32) {
          goto LABEL_17;
        }
        uint64_t v14 = *(void *)(v10 + 24);
        uint64_t v12 = (void *)(v10 + 24);
        uint64_t v13 = v14;
        if (v14 != -1) {
          *(void *)(v9 + 32 * v13 + 16) = *(void *)(v9 + 32 * SInt32 + 16);
        }
        uint64_t v15 = v9 + 32 * SInt32;
        uint64_t v18 = *(void *)(v15 + 16);
        uint64_t v16 = (uint64_t *)(v15 + 16);
        uint64_t v17 = v18;
        if (v18 != -1) {
          *(void *)(v9 + 32 * v17 + 24) = v13;
        }
        if (v11 != -1) {
          *(void *)(v9 + 32 * v11 + 16) = SInt32;
        }
        uint64_t v19 = *(void *)(a1 + 192);
        if (v19 == SInt32)
        {
          uint64_t v19 = *v16;
          *(void *)(a1 + 192) = *v16;
        }
        *uint64_t v12 = v11;
        *uint64_t v16 = -1;
        *(void *)(a1 + 200) = SInt32;
        if (v19 != -1)
        {
LABEL_17:
          mach_port_t MachPort = 0;
LABEL_36:
          uint64_t v39 = 0;
          goto LABEL_37;
        }
        mach_port_t MachPort = 0;
        uint64_t v39 = 0;
        *(void *)(a1 + 192) = v8;
      }
      else
      {
        mach_port_t MachPort = IOSurfaceCreateMachPort(buffer);
        if (!FigRemoteQueueIOSurfaceSender_ShareIOSurface(*(_DWORD *)(a1 + 156), MachPort))
        {
          uint64_t valuePtr = -1;
          IOSurfaceID ID = IOSurfaceGetID(buffer);
          if (*(_DWORD *)(a1 + 216))
          {
            uint64_t v21 = *(void *)(a1 + 208);
            if (v21 == -1)
            {
              CFTypeID v23 = *(void **)(a1 + 176);
              uint64_t v21 = *(void *)(a1 + 184);
              uint64_t valuePtr = v21;
              *(void *)(a1 + 184) = v21 + 1;
              CFTypeID v22 = malloc_type_realloc(v23, 32 * (v21 + 1), 0x1020040B07D1DCCuLL);
              *(void *)(a1 + 176) = v22;
            }
            else
            {
              uint64_t valuePtr = *(void *)(a1 + 208);
              CFTypeID v22 = *(void **)(a1 + 176);
              *(void *)(a1 + 20_Block_object_dispose(&STACK[0x4E0], 8) = v22[4 * v21 + 2];
            }
            uint64_t v24 = (CFTypeRef *)&v22[4 * v21];
            *uint64_t v24 = CFRetain(buffer);
            v24[1] = 0;
            v24[2] = (CFTypeRef)-1;
            v24[3] = (CFTypeRef)-1;
            uint64_t v25 = FigGetContinuousUpTimeNanoseconds();
            if (*(_DWORD *)(a1 + 216))
            {
              uint64_t v26 = *(void *)(a1 + 176);
              uint64_t v27 = v26 + 32 * v21;
              *(void *)(v27 + _Block_object_dispose(&STACK[0x4E0], 8) = v25;
              uint64_t v28 = *(void *)(a1 + 200);
              if (v28 != v21)
              {
                uint64_t v31 = *(void *)(v27 + 24);
                uint64_t v29 = (void *)(v27 + 24);
                uint64_t v30 = v31;
                if (v31 != -1) {
                  *(void *)(v26 + 32 * v30 + 16) = *(void *)(v26 + 32 * v21 + 16);
                }
                uint64_t v32 = v26 + 32 * v21;
                uint64_t v35 = *(void *)(v32 + 16);
                uint64_t v33 = (uint64_t *)(v32 + 16);
                uint64_t v34 = v35;
                if (v35 != -1) {
                  *(void *)(v26 + 32 * v34 + 24) = v30;
                }
                if (v28 != -1) {
                  *(void *)(v26 + 32 * v28 + 16) = v21;
                }
                uint64_t v36 = *(void *)(a1 + 192);
                if (v36 == v21)
                {
                  uint64_t v36 = *v33;
                  *(void *)(a1 + 192) = *v33;
                }
                *uint64_t v29 = v28;
                uint64_t *v33 = -1;
                *(void *)(a1 + 200) = v21;
                if (v36 == -1) {
                  *(void *)(a1 + 192) = v21;
                }
              }
            }
          }
          CFNumberRef v37 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
          CFNumberRef v38 = CFNumberCreate(v4, kCFNumberSInt32Type, &ID);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 168), v38, v37);
          CFRelease(v38);
          CFRelease(v37);
          goto LABEL_36;
        }
        uint64_t v39 = 4294954514;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      mach_port_t MachPort = 0;
      uint64_t v39 = 4294950633;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    mach_port_t MachPort = 0;
    uint64_t v39 = 4294950629;
  }
LABEL_37:
  if (UInt32) {
    CFRelease(UInt32);
  }
  if (MachPort) {
    FigMachPortReleaseSendRight_();
  }
  return v39;
}

CFAllocatorRef FigSharedMemPoolAllocatorGetPool(const __CFAllocator *result)
{
  memset(&v1, 0, sizeof(v1));
  if (result)
  {
    CFAllocatorGetContext(result, &v1);
    if ((unint64_t (*)(unint64_t, uint64_t, uint64_t))v1.allocate == shmemAllocatorAllocate) {
      return (const __CFAllocator *)v1.info;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t FigFlatDictionaryKeySpecGetTypeID()
{
  return sFigFlatDictionaryKeySpecID;
}

_DWORD *FigFlatDictionaryKeySpecCreateBinaryForExport(const __CFAllocator *a1, uint64_t a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a2 + 20)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 36);
  if (v5)
  {
    LODWORD(v6) = 0;
    uint64_t v7 = *(uint64_t **)(a2 + 48);
    uint64_t v8 = *(unsigned int *)(a2 + 36);
    do
    {
      uint64_t v9 = *v7;
      v7 += 3;
      uint64_t v6 = v6 + strlen(*(const char **)(v9 + 8)) + 1;
      --v8;
    }
    while (v8);
    uint64_t v10 = v6 + 12;
  }
  else
  {
    uint64_t v10 = 12;
  }
  size_t v12 = (24 * v5);
  int v13 = v10 + v12;
  uint64_t v14 = CFAllocatorAllocate(a1, v10 + v12, 0);
  uint64_t v11 = v14;
  if (v14)
  {
    v14[1] = *(_DWORD *)(a2 + 16);
    _DWORD *v14 = FigFlatDictionaryKeySpaceGetLabel(*(_DWORD *)(a2 + 28));
    _OWORD v11[2] = *(_DWORD *)(a2 + 36);
    uint64_t v15 = (uint64_t *)(v11 + 3);
    memcpy(v11 + 3, *(const void **)(a2 + 48), v12);
    if (*(_DWORD *)(a2 + 36))
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v15 + v12;
      do
      {
        uint64_t v19 = *v15;
        uint64_t *v15 = v17;
        v15 += 3;
        size_t v20 = strlen(*(const char **)(v19 + 8));
        strncpy(&v18[v17], *(const char **)(v19 + 8), v20 + 1);
        v17 += strlen(*(const char **)(v19 + 8)) + 1;
        ++v16;
      }
      while (v16 < *(unsigned int *)(a2 + 36));
    }
    if (a3) {
      *a3 = v13;
    }
  }
  return v11;
}

uint64_t FigFlatDictionaryKeySpaceGetLabel(int a1)
{
  uint64_t result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1) {
    return *(unsigned int *)(sKeySpaceNames + 4 * a1);
  }
  return result;
}

uint64_t FigFlatDictionaryGetTypeID()
{
  return sFigFlatDictionaryID;
}

uint64_t FigFlatDictionaryGetBackingPointer(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(_DWORD *)(v2 + 20);
  }
  return *(void *)(v2 + 24);
}

uint64_t FigCreateLazyFlatDictionaryWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [FigFlatToNSDictionaryWrapper alloc];
  return (uint64_t)[(FigFlatToNSDictionaryWrapper *)v6 initLazilyWithFlatDictionaryBacking:a1 exportedKeySpec:a2 deallocatorBlock:a3];
}

void roCommonCleanupMessageData(void *a1)
{
  if (a1)
  {
    uint64_t v2 = 6;
    if ((void *)a1[4] == a1) {
      uint64_t v2 = 5;
    }
    FigSharedMemBlockRelease(a1[v2]);
    a1[5] = 0;
    a1[6] = 0;
  }
}

void roCleanupConfigurationLiveOperation(uint64_t a1)
{
  if (*(_DWORD *)a1 != 5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
}

uint64_t FigRemoteQueueIOSurfaceSender_ShareIOSurface(int a1, int a2)
{
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  uint64_t v8 = 1245184;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(void *)&msg[16] = 0x481200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v4 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, 0x1F4u, 0);
  uint64_t v5 = v4;
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18550)
      {
        uint64_t v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          uint64_t v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32]) {
            return v5;
          }
        }
      }
      else
      {
        uint64_t v5 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_20;
  }
  return v5;
}

double flatDictionaryKeySpec_init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t __cs_prewarmSystemOverride_block_invoke_2()
{
  return MEMORY[0x1F40CE410](1000000000, 4);
}

uint64_t doirb_findDetectedObjectsInfoClosestToPTS(void *a1, CMTime *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = [a1 count];
  if (v4 < 1)
  {
    int v7 = -1;
    int v19 = -1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *MEMORY[0x1E4F54348];
    uint64_t v22 = v4;
    int v7 = -1;
    long long v23 = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    while (1)
    {
      uint64_t v9 = (void *)[a1 objectAtIndexedSubscript:v5];
      v33.CMTimeEpoch epoch = v8;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)&v33.long long value = v23;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v30;
        float v13 = 3.4028e38;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v30 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v15 = objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *(void *)(*((void *)&v29 + 1) + 8 * i)), "objectForKeyedSubscript:", v6);
            if (v15)
            {
              memset(&time1, 0, sizeof(time1));
              [v15 longLongValue];
              int64_t v16 = FigHostTimeToNanoseconds();
              CMTimeMake(&time, v16, 1000000000);
              CMTimeConvertScale(&time1, &time, a2->timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              CMTime lhs = *a2;
              CMTime rhs = time1;
              CMTimeSubtract(&v26, &lhs, &rhs);
              float Seconds = CMTimeGetSeconds(&v26);
              if (v13 > Seconds)
              {
                CMTime v33 = time1;
                float v13 = Seconds;
              }
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v29 objects:v34 count:16];
        }
        while (v11);
      }
      else
      {
        float v13 = 3.4028e38;
      }
      if (fabsf(v13) > 0.5) {
        break;
      }
      CMTime time1 = v33;
      CMTime lhs = *a2;
      int32_t v18 = CMTimeCompare(&time1, &lhs);
      if (!v18)
      {
        if (v9) {
          return (uint64_t)v9;
        }
        break;
      }
      int v19 = v5;
      if (v18 < 1) {
        goto LABEL_26;
      }
      ++v5;
      int v7 = v19;
      if (v5 == v22)
      {
        int v7 = v19;
        break;
      }
    }
    int v19 = -1;
LABEL_26:
    if ((v7 & 0x80000000) == 0 && v19 == -1) {
      return [a1 lastObject];
    }
    if (v7 == -1 && (v19 & 0x80000000) == 0) {
      return [a1 firstObject];
    }
  }
  if (((v19 | v7) & 0x80000000) == 0) {
    return [a1 objectAtIndexedSubscript:(v19 + v7) >> 1];
  }
  return 0;
}

void __captureSession_createClientApplicationStateMonitor_block_invoke(uint64_t a1)
{
  uint64_t v2 = [FigCaptureClientApplicationStateMonitor alloc];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __captureSession_createClientApplicationStateMonitor_block_invoke_2;
  v10[3] = &__block_descriptor_48_e14_v20__0i8i12i16l;
  long long v3 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(v11 + 96);
  long long v5 = *(_OWORD *)(a1 + 64);
  v9[0] = v3;
  v9[1] = v5;
  uint64_t v6 = [(FigCaptureClientApplicationStateMonitor *)v2 initWithClientAuditToken:v9 mediaEnvironment:v4 forThirdPartyTorch:0 applicationAndLayoutStateHandler:v10];
  *(void *)(*(void *)(a1 + 32) + 120) = v6;
  int v7 = [(FigCaptureClientApplicationStateMonitor *)v6 applicationID];
  *(void *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x4E0], 8) = [(NSString *)v7 copy];
  *(unsigned char *)(*(void *)(a1 + 32) + 404) = [(id)FigCaptureGetSupportedPrewarmingBundleIdentifiers() containsObject:v7];
  if ([(NSString *)v7 isEqualToString:0x1EFA44100]
    || [(NSString *)v7 isEqualToString:0x1EFA55980])
  {
    os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
    byte_1EB4C5948 = 1;
    os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
  }
  if (v7 && [(id)FigCaptureGetSupportedPrewarmingBundleIdentifiers() containsObject:v7])
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 112) = 1;
    os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
    if (!qword_1EB4C59A0) {
      qword_1EB4C59A0 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    id v8 = +[FigWeakReference weakReferenceToObject:*(void *)(a1 + 40)];
    [(id)qword_1EB4C59A0 setObject:v8 forKeyedSubscript:v7];
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
    objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "addLayoutObserver:", *(void *)(*(void *)(a1 + 32) + 712));
  }
}

void captureSession_updateDeferredGraphSetupStartCondition(const void *a1, unsigned char *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return;
  }
  uint64_t v7 = (uint64_t)DerivedStorage;
  float v11 = 0.0;
  id v8 = DerivedStorage + 90;
  os_unfair_lock_lock(DerivedStorage + 90);
  if (*a2 == a3)
  {
    os_unfair_lock_unlock(v8);
    return;
  }
  *a2 = a3;
  if ((unsigned char *)(v7 + 538) == a2)
  {
    if (!dword_1EB4C5110) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((unsigned char *)(v7 + 537) == a2 && a3)
  {
    if (!dword_1EB4C5110) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((unsigned char *)(v7 + 539) == a2 && a3 && dword_1EB4C5110)
  {
LABEL_16:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_17:
  BOOL shouldStartDeferredGraphSetup = captureSession_shouldStartDeferredGraphSetup(v7, &v11);
  os_unfair_lock_unlock(v8);
  if (shouldStartDeferredGraphSetup) {
    captureSession_startDeferredGraphSetupOnWorkerQueueAfter(a1, v11);
  }
}

__CFString *FigCaptureDisplayTypeName(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5C29288[a1];
  }
}

BOOL captureSession_shouldStartDeferredGraphSetup(uint64_t a1, float *a2)
{
  if (!*(unsigned char *)(a1 + 537) || *(unsigned __int8 *)(a1 + 376) | *(unsigned __int8 *)(a1 + 539)) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 112);
  BOOL result = *(unsigned char *)(a1 + 112) == 0;
  if (v5 && *(unsigned char *)(a1 + 538)) {
    BOOL result = 1;
  }
  if (a2 && result)
  {
    float v6 = 0.1;
    if (*(unsigned char *)(a1 + 540) && *(void *)(a1 + 544))
    {
      mach_absolute_time();
      float v7 = (float)((float)(FigHostTimeToNanoseconds() / 1000) / -1000000.0) + 0.5;
      float v8 = 0.6;
      if (v7 < 0.5) {
        float v8 = v7 + 0.1;
      }
      if (v7 <= 0.0) {
        float v6 = 0.1;
      }
      else {
        float v6 = v8;
      }
    }
    *a2 = v6;
    return 1;
  }
  return result;
}

void __captureSession_createClientApplicationStateMonitor_block_invoke_2(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 128)) {
    captureSession_updateSessionStateWithApplicationAndLayoutState(*(const void **)(a1 + 40), a3 == 1, (a4 - 3) < 2, a4 == 3, a4 == 4);
  }
}

__CFString *FigCaptureBKSApplicationStateToString(unsigned int a1)
{
  if (a1 > 8) {
    return @"--- Undefined state ---";
  }
  else {
    return off_1E5C2D8C8[a1];
  }
}

void __captureSourceServer_handleCopySourcesMessage_block_invoke(uint64_t a1)
{
  if ((gFigXPCServerCaptureSource_block_invoke_registeredForChanges & 1) == 0)
  {
    gFigXPCServerCaptureSource_block_invoke_registeredForChanges = 1;
    FigCameraUsageRegisterChangeHandler(&__block_literal_global_110);
  }
  long long v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v13.val = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v13.val[4] = v2;
  long long v3 = SecTaskCreateWithAuditToken((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v13);
  if (v3)
  {
    uint64_t v4 = v3;
    CFArrayRef v5 = (const __CFArray *)SecTaskCopyValueForEntitlement(v3, @"com.apple.tcc.delegated-services", 0);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFArrayGetTypeID())
      {
        v14.length = CFArrayGetCount(v6);
        v14.locatiouint64_t n = 0;
        char v8 = CFArrayContainsValue(v6, v14, (const void *)*MEMORY[0x1E4FA9A38]) != 0;
      }
      else
      {
        char v8 = 0;
      }
      CFRelease(v6);
    }
    else
    {
      char v8 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    char v8 = 0;
  }
  long long v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v13.val = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v13.val[4] = v9;
  BOOL HasAccessToCamera = FigCaptureSourceClientHasAccessToCamera((long long *)&v13);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) >= 1)
  {
    CFIndex v11 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v11);
      FigVideoCaptureSourceSetClientProcessRequiresDynamicTCCAccessChecks((uint64_t)ValueAtIndex, v8);
      FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, HasAccessToCamera);
      ++v11;
    }
    while (v11 < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)));
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t FigVideoCaptureSourceSetClientProcessRequiresDynamicTCCAccessChecks(uint64_t a1, char a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 8) == 1)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 12))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 48));
      *(unsigned char *)(v4 + 229) = a2;
      CFArrayRef v5 = *(pthread_mutex_t **)(v4 + 48);
      return pthread_mutex_unlock(v5);
    }
  }
  return result;
}

uint64_t FigVideoCaptureSourceSetClientProcessHasAccessToCamera(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 12))
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 8) == 1)
    {
      uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(result + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
      if ((result - 17) >= 4)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 48));
        *(unsigned char *)(v4 + 22_Block_object_dispose(&STACK[0x4E0], 8) = a2;
        uint64_t v5 = *(void *)(v4 + 80);
        if (v5) {
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(v5, a2);
        }
        CFArrayRef v6 = *(pthread_mutex_t **)(v4 + 48);
        return pthread_mutex_unlock(v6);
      }
    }
  }
  return result;
}

BOOL FigCaptureSourceClientHasAccessToCamera(long long *a1)
{
  long long v2 = a1[1];
  long long v6 = *a1;
  long long v7 = v2;
  if (FigCaptureGetPIDFromAuditToken(&v6))
  {
    FigCaptureGetTCCServer();
    long long v3 = a1[1];
    long long v6 = *a1;
    long long v7 = v3;
    if (FigCaptureTCCAccessCheckAuditToken())
    {
      return 1;
    }
    else
    {
      long long v5 = a1[1];
      long long v6 = *a1;
      long long v7 = v5;
      return FigCaptureClientIsRunningInXCTest(&v6) != 0;
    }
  }
  else
  {
    FigDebugAssert3();
    return 0;
  }
}

uint64_t FigCaptureGetTCCServer()
{
  if (FigCaptureGetTCCServer_onceToken != -1) {
    dispatch_once(&FigCaptureGetTCCServer_onceToken, &__block_literal_global_66);
  }
  return FigCaptureGetTCCServer_sFigCaptureTCCServer;
}

BOOL FigCaptureTCCAccessCheckAuditToken()
{
  tcc_service_singleton_for_CF_name();
  uint64_t v0 = (void *)tcc_credential_create_for_process_with_audit_token();
  CFAllocatorContext v1 = (void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  uint64_t v4 = 0;
  long long v5 = &v4;
  long long v6 = 0x2020000000uLL;
  tcc_server_message_request_authorization();

  BOOL v2 = v5[3] == 2;
  _Block_object_dispose(&v4, 8);
  return v2;
}

void sub_1A596E69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double FigCaptureMakeRectWithAspectRatioInsideDimensions(uint64_t a1, int a2, float a3)
{
  float v3 = (float)(int)a1;
  float v4 = (float)SHIDWORD(a1);
  if ((float)((float)(int)a1 / (float)SHIDWORD(a1)) >= a3)
  {
    float v5 = v4 * a3;
    float v6 = (float)SHIDWORD(a1);
  }
  else
  {
    float v5 = (float)(int)a1;
    float v6 = v3 / a3;
  }
  float v7 = v4 - v6;
  BOOL v8 = (float)(v3 - v5) <= 2.0 && v7 <= 2.0;
  signed int v9 = a1;
  if (!v8)
  {
    if (a2) {
      signed int v9 = (int)v5 & 0xFFFFFFFE;
    }
    else {
      signed int v9 = 2 * llroundf(v5 * 0.5);
    }
  }
  double v10 = round(((double)(int)a1 - (double)v9) * 0.5 * 0.5);
  return v10 + v10;
}

void sn_notifyOnStateTransition(void *a1, os_unfair_lock_s *a2, int a3, void *a4, id *a5)
{
  id v13 = (id)[a4 copy];
  os_unfair_lock_lock(a2);
  if ([a1 currentState] == a3)
  {
    os_unfair_lock_unlock(a2);
LABEL_3:

    double v10 = (void (*)(void *))a4[2];
    v10(a4);
    return;
  }
  if (*a5)
  {
    [*a5 addObject:v13];
    os_unfair_lock_unlock(a2);
  }
  else
  {
    os_unfair_lock_unlock(a2);
    CFIndex v11 = objc_opt_new();
    os_unfair_lock_lock(a2);
    if ([a1 currentState] == a3)
    {
      os_unfair_lock_unlock(a2);

      goto LABEL_3;
    }
    id v12 = *a5;
    if (!*a5)
    {
      *a5 = v11;
      id v12 = v11;
      CFIndex v11 = 0;
    }
    [v12 addObject:v13];
    os_unfair_lock_unlock(a2);
  }
}

uint64_t BWGetMaximumDisplayFrequency()
{
  if (BWGetDisplaySupportsPerseus_onceToken != -1) {
    dispatch_once(&BWGetDisplaySupportsPerseus_onceToken, &__block_literal_global_418);
  }
  if (BWGetDisplaySupportsPerseus_displaySupportsPerseus) {
    return 120;
  }
  else {
    return 60;
  }
}

uint64_t FigCaptureClientIsRunningInMediaserverd(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  float v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3) {
    return 0;
  }
  float v4 = v3;
  float v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  uint64_t v6 = [(__CFString *)v5 isEqualToString:0x1EFA45300];

  CFRelease(v4);
  return v6;
}

uint64_t FigCaptureClientIsContinuityCapture(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  float v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3) {
    return 0;
  }
  float v4 = v3;
  float v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  if ([(__CFString *)v5 isEqualToString:0x1EFA55C00]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = [(__CFString *)v5 isEqualToString:0x1EFA558C0];
  }

  CFRelease(v4);
  return v6;
}

void __captureSession_performBlockWithAVCMSessionForIsUsingCamera_block_invoke(void *a1)
{
  long long v2 = (void *)MEMORY[0x1A6272C70]();
  if (FigCaptureAudiomxdSupportEnabled() && !*(void *)(a1[5] + 176))
  {
    *(void *)(a1[5] + 176) = [objc_alloc(MEMORY[0x1E4F4E9F0]) initAuxiliarySession];
  }
  else if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0 {
         && !*(void *)(a1[5] + 184)
  }
         && !CMSessionCreate())
  {
    *(void *)(a1[5] + 184) = 0;
  }
  if (*(_OWORD *)(a1[5] + 176) != 0) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  float v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t __captureSession_setIsUsingCamera_block_invoke(uint64_t result, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = 0;
    return objc_msgSend(a2, "setMXSessionProperty:value:error:", *MEMORY[0x1E4F76320], objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(result + 32)), &v3);
  }
  else if (a3)
  {
    return CMSessionSetProperty();
  }
  return result;
}

uint64_t __FigCaptureSessionCreate_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"CMSessionForIsUsingCamera-%d", *(unsigned int *)(*(void *)(result + 32) + 16));
    return CMSessionSetProperty();
  }
  return result;
}

uint64_t FigCaptureAudiomxdSupportEnabled()
{
  if (FigCaptureAudiomxdSupportEnabled_sOnceToken != -1) {
    dispatch_once(&FigCaptureAudiomxdSupportEnabled_sOnceToken, &__block_literal_global_127_0);
  }
  return FigCaptureAudiomxdSupportEnabled_sCaptureAudiomxdSupportEnabled;
}

BOOL BWAudioCaptureModeIsSpatial(int a1)
{
  return (a1 - 1) < 2;
}

__CFString *BWCaptureDevicePositionToString(int a1)
{
  CFAllocatorRef v1 = @"Unspecified";
  if (a1 == 1) {
    CFAllocatorRef v1 = @"Back";
  }
  if (a1 == 2) {
    return @"Front";
  }
  else {
    return v1;
  }
}

void *cspc_timeOfFlightFormatWithMaximumPoints(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  float v4 = 0;
  int v5 = 0;
  uint64_t v6 = *(void *)v11;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)v11 != v6) {
        objc_enumerationMutation(a1);
      }
      audit_token_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
      if ((int)[v8 maxPoints] > v5)
      {
        int v5 = [v8 maxPoints];
        float v4 = v8;
      }
    }
    uint64_t v3 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  }
  while (v3);
  return v4;
}

void __captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresVisualIntelligenceObjectDetection(void *a1)
{
  CFAllocatorRef v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F559E8];
  return [v1 containsObject:v2];
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(void *a1)
{
  CFAllocatorRef v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F559E0];
  return [v1 containsObject:v2];
}

id FigCaptureBuildObjectDetectionPipeline(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, BWFaceDetectionNode **a6, double a7, double a8, double a9, double a10)
{
  id v24 = 0;
  BOOL v20 = [a2 count] != 0;
  BOOL v21 = [a3 count] != 0;
  uint64_t v22 = [[BWFaceDetectionNode alloc] initWithObjectMetadataIdentifiers:a2 movieFileOutputMetadataIdentifierGroups:a3];
  [(BWNode *)v22 setName:@"Face Detection"];
  [(BWFaceDetectionNode *)v22 setMetadataObjectOutputEnabled:v20];
  [(BWFaceDetectionNode *)v22 setBoxedMetadataOutputEnabled:v21];
  -[BWFaceDetectionNode setRectOfInterest:](v22, "setRectOfInterest:", a7, a8, a9, a10);
  [(BWFaceDetectionNode *)v22 setEmitsEmptyObjectDetectionMetadata:a4];
  if (([a1 addNode:v22 error:&v24] & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", a5, -[BWNode input](v22, "input"), 0) & 1) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  *a6 = v22;
  id result = v24;
  if (v24) {
    return (id)[v24 code];
  }
  return result;
}

BOOL FigCaptureClientIsFacemetricsd(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v2;
  uint64_t v3 = SecTaskCreateWithAuditToken(v1, &v9);
  if (!v3) {
    return 0;
  }
  float v4 = v3;
  CFStringRef v5 = SecTaskCopySigningIdentifier(v3, 0);
  if (v5)
  {
    CFStringRef v6 = v5;
    BOOL v7 = CFEqual(v5, @"com.apple.facemetricsd");
    CFRelease(v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresTextLocalization(void *a1)
{
  CFAllocatorRef v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F559C8];
  return [v1 containsObject:v2];
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresMRCNode(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFAllocatorRef v1 = objc_msgSend(a1, "metadataIdentifiers", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v9;
    uint64_t v5 = *MEMORY[0x1E4F55990];
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        BOOL v7 = *(void **)(*((void *)&v8 + 1) + 8 * v6);
        if (([v7 isEqualToString:v5] & 1) == 0
          && ([v7 hasPrefix:@"mdta/com.apple.quicktime.detected-machine-readable-code."] & 1) != 0)
        {
          return 1;
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t FigVideoCaptureSourcesActivateAndCreateDevices(CFArrayRef theArray, const __CFArray *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  CFArrayRef v10 = a2;
  CFArrayRef v11 = theArray;
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  unsigned int v213 = 0;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (v10)
    {
LABEL_3:
      CFIndex v12 = CFArrayGetCount(v10);
      goto LABEL_6;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  CFIndex v12 = 0;
LABEL_6:
  char v174 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:Count];
  uint64_t v13 = objc_msgSend(a6, "objectForKeyedSubscript:");
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  CFRange v14 = (id *)&unk_1EB4C5000;
  if (Count != v12)
  {
    uint64_t v161 = 0;
    id obj = 0;
    int v166 = 0;
    id v56 = 0;
    int v57 = -12780;
LABEL_81:
    unsigned int v213 = v57;
    goto LABEL_234;
  }
  int v169 = (void *)v13;
  uint64_t v161 = (void *)[(id)sActiveVideoCaptureSources copy];
  if ([a3 isEqualToString:0x1EFA55AE0])
  {
    long long v211 = 0u;
    long long v212 = 0u;
    long long v209 = 0u;
    long long v210 = 0u;
    uint64_t v15 = [a6 countByEnumeratingWithState:&v209 objects:v229 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v210;
LABEL_10:
      uint64_t v18 = 0;
      while (1)
      {
        if (*(void *)v210 != v17) {
          objc_enumerationMutation(a6);
        }
        if (objc_msgSend((id)objc_msgSend(a6, "objectForKeyedSubscript:", *(void *)(*((void *)&v209 + 1) + 8 * v18)), "invalidated"))break; {
        if (v16 == ++v18)
        }
        {
          uint64_t v16 = [a6 countByEnumeratingWithState:&v209 objects:v229 count:16];
          if (!v16) {
            goto LABEL_16;
          }
          goto LABEL_10;
        }
      }
      id obj = 0;
      int v166 = 0;
      id v56 = 0;
      int v57 = -12785;
      goto LABEL_81;
    }
  }
LABEL_16:
  int v173 = a6;
  long long v207 = 0u;
  long long v208 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  int v19 = (void *)sActiveVideoCaptureSources;
  uint64_t v20 = [(id)sActiveVideoCaptureSources countByEnumeratingWithState:&v205 objects:v228 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v206;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v206 != v22) {
          objc_enumerationMutation(v19);
        }
        captureSource_deactivateInternal(*(const void **)(*((void *)&v205 + 1) + 8 * i));
      }
      uint64_t v21 = [v19 countByEnumeratingWithState:&v205 objects:v228 count:16];
    }
    while (v21);
  }
  [(id)sActiveVideoCaptureSources removeAllObjects];
  CFArrayRef v185 = v11;
  CFArrayRef v186 = v10;
  if (Count < 1)
  {
    int v187 = 0;
    int v164 = 0;
    char v26 = 0;
    id obj = 0;
    int v166 = 0;
    int v44 = 0;
    IOSurfaceID v46 = 0;
    unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
    int v42 = v169;
  }
  else
  {
    int v187 = 0;
    int v164 = 0;
    int v24 = 0;
    char v25 = 0;
    char v26 = 0;
    id obj = 0;
    int v166 = 0;
    CFIndex v27 = 0;
    uint64_t v28 = *MEMORY[0x1E4F52D90];
    uint64_t v182 = *MEMORY[0x1E4F52DF8];
    uint64_t v180 = *MEMORY[0x1E4F52E10];
    uint64_t v178 = *MEMORY[0x1E4F52DD8];
    do
    {
      CFArrayGetValueAtIndex(v11, v27);
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v10, v27);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      long long v31 = *(void **)(DerivedStorage + 104);
      if (objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", @"CaptureDeviceID"), "isEqualToString:", 0x1EFA45440))
      {
        ++v187;
        char v32 = v25 | (objc_msgSend((id)objc_msgSend(v169, "supportedProperties"), "objectForKeyedSubscript:", v28) != 0);
        if (v32)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
          if (*(unsigned char *)(DerivedStorage + 12))
          {
            unsigned int v213 = -12785;
          }
          else
          {
            int v33 = objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
            int v34 = objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", @"Position"), "intValue");
            if (*(void *)(DerivedStorage + 144))
            {
              if ((v33 == 12 || v33 == 6)
                && (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1EFA6BE40), "BOOLValue") & 1) == 0)
              {
                if (v33 == 6) {
                  uint64_t v39 = v182;
                }
                else {
                  uint64_t v39 = v180;
                }
                id v37 = v166;
                if (!v166) {
                  id v37 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                int v166 = v37;
                uint64_t v36 = v39;
              }
              else
              {
                id v35 = obj;
                if (!obj) {
                  id v35 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                uint64_t v36 = [*(id *)(DerivedStorage + 144) allKeys];
                id obj = v35;
                id v37 = v35;
              }
            }
            else
            {
              int v38 = v34;
              id v37 = v166;
              if (!v166) {
                id v37 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              }
              int v166 = v37;
              if (v33 == 13)
              {
                uint64_t v36 = v178;
              }
              else
              {
                int v176 = v24;
                uint64_t v40 = a7;
                id v41 = v37;
                uint64_t v36 = BWCaptureDevicePositionAndDeviceTypeToPortType(v38, v33);
                id v37 = v41;
                a7 = v40;
                int v24 = v176;
              }
            }
            [v37 addObject:v36];
            if (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1EFA6BE20), "BOOLValue"))v164 |= objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", 0x1EFA6B2A0), "BOOLValue"); {
            if (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1EFA6BE00), "BOOLValue"))v24 |= objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", 0x1EFA6B2C0), "BOOLValue");
            }
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
          if (v213)
          {
            uint64_t v154 = v163;
            LODWORD(v153) = v213;
            FigDebugAssert3();
            id v56 = 0;
            unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
            CFRange v14 = (id *)&unk_1EB4C5000;
            goto LABEL_233;
          }
          char v26 = 1;
          char v25 = 1;
        }
        else
        {
          char v25 = 0;
          v26 |= v32;
        }
      }
      ++v27;
      CFArrayRef v11 = v185;
      CFArrayRef v10 = v186;
    }
    while (Count != v27);
    int v42 = v169;
    if (v25)
    {
      if ((v24 & 1) != 0
        && (uint64_t v43 = *MEMORY[0x1E4F52E00], ([v166 containsObject:*MEMORY[0x1E4F52E00]] & 1) == 0))
      {
        long long v203 = 0u;
        long long v204 = 0u;
        long long v201 = 0u;
        long long v202 = 0u;
        uint64_t v58 = [obj countByEnumeratingWithState:&v201 objects:v227 count:16];
        CFRange v14 = (id *)&unk_1EB4C5000;
        if (v58)
        {
          uint64_t v59 = v58;
          uint64_t v60 = *(void *)v202;
          while (2)
          {
            for (uint64_t j = 0; j != v59; ++j)
            {
              if (*(void *)v202 != v60) {
                objc_enumerationMutation(obj);
              }
              if ([*(id *)(*((void *)&v201 + 1) + 8 * j) containsObject:v43])
              {
                int v44 = 0;
                unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
                int v42 = v169;
                goto LABEL_59;
              }
            }
            uint64_t v59 = [obj countByEnumeratingWithState:&v201 objects:v227 count:16];
            if (v59) {
              continue;
            }
            break;
          }
        }
        unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
        id v62 = v166;
        int v42 = v169;
        if (!v166) {
          id v62 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        int v166 = v62;
        [v62 addObject:v43];
        int v44 = 1;
      }
      else
      {
        int v44 = 0;
        unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
        CFRange v14 = (id *)&unk_1EB4C5000;
      }
LABEL_59:
      IOSurfaceID v46 = +[BWMultiCamConfiguration configurationWithUnsynchronizedActiveStreamsPortTypes:v166 synchronizedActiveStreamsGroupsPortTypes:obj stereoVideoCaptureEnabled:a7];
    }
    else
    {
      int v44 = 0;
      IOSurfaceID v46 = 0;
      unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
      CFRange v14 = (id *)&unk_1EB4C5000;
    }
  }
  if (sTimeOfFlightAFEnabled) {
    BOOL v47 = v42 == 0;
  }
  else {
    BOOL v47 = 1;
  }
  if (!v47)
  {
    BOOL v48 = [(BWMultiCamConfiguration *)v46 isEqual:+[BWMultiCamConfiguration configurationWithCurrentStateFromCaptureDevice:v42]];
    char v26 = !v48;
    if ((v48 & v164 & 1) == 0)
    {
      unsigned int v49 = cs_resetTimeOfFlightAutoFocus(v42);
      unsigned int v213 = v49;
      if (v49)
      {
        uint64_t v154 = v163;
        LODWORD(v153) = v49;
        goto LABEL_256;
      }
    }
  }
  int v160 = v44;
  int v158 = v46;
  if (sStructuredLightAFEnabled)
  {
    if (v42)
    {
      BOOL v50 = [(BWMultiCamConfiguration *)v46 isEqual:+[BWMultiCamConfiguration configurationWithCurrentStateFromCaptureDevice:v42]];
      char v26 = !v50;
      if ((v44 & v50 & 1) == 0)
      {
        BOOL v51 = v50;
        FigSimpleMutexCheckIsLockedOnThisThread();
        sStructuredLightAFEnabled = 0;
        sStructuredLightAFSuspended = 1;
        cs_updateStructuredLightAFEnabledStatus();
        if (dword_1EB4C4FD0)
        {
          LODWORD(v236[0]) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v53 = v236[0];
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = v53 & 0xFFFFFFFE;
          }
          if (v54)
          {
            LODWORD(v237[0]) = 136315650;
            *(void *)((char *)v237 + 4) = "cs_resetStructuredLightAutoFocus";
            WORD6(v237[0]) = 1024;
            *(_DWORD *)((char *)v237 + 14) = sStructuredLightAFSuspended;
            WORD1(v237[1]) = 1024;
            DWORD1(v237[1]) = sStructuredLightAFEnabled;
            LODWORD(v154) = 24;
            char v153 = (int *)v237;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
          int v42 = v169;
          if (v51) {
            goto LABEL_94;
          }
          goto LABEL_78;
        }
      }
    }
  }
  if (v26)
  {
LABEL_78:
    unsigned int v55 = objc_msgSend(v42, "setPropertyIfSupported:value:", *MEMORY[0x1E4F52D90], 0, v153, v154);
    unsigned int v213 = v55;
    if (!v55)
    {
      [v42 resetSynchronizedStreamsGroups];
      id v56 = 0;
      int v159 = 1;
      goto LABEL_106;
    }
    uint64_t v154 = v163;
    LODWORD(v153) = v55;
LABEL_256:
    FigDebugAssert3();
    id v56 = 0;
    goto LABEL_233;
  }
LABEL_94:
  id v56 = -[BWMultiCamConfiguration copyActiveSynchronizedStreamsGroupsForDevice:errorOut:](v46, "copyActiveSynchronizedStreamsGroupsForDevice:errorOut:", v42, &v213, v153, v154);
  if (v213)
  {
    uint64_t v154 = v163;
    LODWORD(v153) = v213;
    goto LABEL_248;
  }
  long long v199 = 0u;
  long long v200 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  CFTypeRef v63 = (void *)[v42 synchronizedStreamsGroups];
  uint64_t v64 = [v63 countByEnumeratingWithState:&v197 objects:v226 count:16];
  if (v64)
  {
    uint64_t v65 = v64;
    uint64_t v66 = *(void *)v198;
    uint64_t v67 = *MEMORY[0x1E4F555D0];
    do
    {
      for (uint64_t k = 0; k != v65; ++k)
      {
        if (*(void *)v198 != v66) {
          objc_enumerationMutation(v63);
        }
        int v69 = *(void **)(*((void *)&v197 + 1) + 8 * k);
        if (([v56 containsObject:v69] & 1) == 0) {
          [v69 setProperty:v67 value:0];
        }
      }
      uint64_t v65 = [v63 countByEnumeratingWithState:&v197 objects:v226 count:16];
    }
    while (v65);
    int v159 = 0;
    unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
  }
  else
  {
    int v159 = 0;
  }
LABEL_106:
  if (Count >= 1)
  {
    CFIndex v70 = 0;
    uint64_t v168 = *MEMORY[0x1E4F52DF8];
    uint64_t v167 = *MEMORY[0x1E4F52E10];
    uint64_t v191 = *MEMORY[0x1E4F52DE0];
    uint64_t v184 = v56;
    while (1)
    {
      CFIndex v183 = v70;
      uint64_t v71 = CFArrayGetValueAtIndex(v11, v70);
      int v72 = (void *)[*(id *)(CMBaseObjectGetDerivedStorage() + 104) objectForKeyedSubscript:@"CaptureDeviceID"];
      uint64_t v73 = [v173 objectForKeyedSubscript:v72];
      unsigned int v74 = [v72 isEqualToString:0x1EFA45440];
      if (v187 > 1) {
        unsigned int v75 = v74;
      }
      else {
        unsigned int v75 = 0;
      }
      unsigned int v181 = v75;
      CFArrayRef v76 = v10;
      uint64_t v77 = v71;
      uint64_t v78 = (void *)CFArrayGetValueAtIndex(v76, v70);
      uint64_t v79 = CMBaseObjectGetDerivedStorage();
      FigSimpleMutexCheckIsLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(v79 + 48));
      if (*(unsigned char *)(v79 + 12))
      {
        uint64_t v154 = v163;
        LODWORD(v153) = 0;
        FigDebugAssert3();
        id v125 = 0;
        int v108 = -12785;
        goto LABEL_204;
      }
      if (*(_DWORD *)(v79 + 8) != 1)
      {
        id v125 = 0;
        int v108 = -12780;
        goto LABEL_204;
      }
      uint64_t v179 = v73;
      captureSource_turnOffAndTeardownFigFlashlight(v71);
      int v222 = 0;
      uint64_t v80 = CMBaseObjectGetDerivedStorage();
      unint64_t v81 = *(void **)(v80 + 104);
      long long v82 = *(_OWORD *)(v80 + 32);
      long long v238 = *(_OWORD *)(v80 + 16);
      long long v239 = v82;
      uint64_t v177 = v81;
      int v83 = objc_msgSend((id)objc_msgSend(v81, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
      uint64_t v84 = (void *)[v78 objectForKeyedSubscript:0x1EFA6BE60];
      int v175 = v84 ? [v84 intValue] : 1;
      char v85 = objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", 0x1EFA6BE40, v153, v154), "BOOLValue");
      char v189 = v78;
      BOOL v190 = v71;
      uint64_t v192 = v79;
      if (!*(void *)(v80 + 144)) {
        break;
      }
      if (v83 == 6 || v83 == 12) {
        char v87 = v85;
      }
      else {
        char v87 = 1;
      }
      if ((v87 & 1) == 0)
      {
        if (v83 == 6) {
          uint64_t v95 = v168;
        }
        else {
          uint64_t v95 = v167;
        }
        uint64_t v90 = (void *)[MEMORY[0x1E4F1CA48] array];
        [*(id *)(v80 + 144) objectForKeyedSubscript:v95];
        uint64_t v96 = CMBaseObjectGetDerivedStorage();
        int v97 = cs_addObjectToStreamsAttributes(v96, v90);
        int v222 = v97;
        if (v97)
        {
          uint64_t v156 = v163;
          LODWORD(v153) = v97;
          FigDebugAssert3();
LABEL_178:
          CFRange v14 = (id *)&unk_1EB4C5000;
          goto LABEL_179;
        }
        goto LABEL_138;
      }
      unsigned int v88 = (void *)[MEMORY[0x1E4F1CA48] array];
      *(_OWORD *)os_log_type_t type = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v221 = 0u;
      char v89 = (void *)[*(id *)(v80 + 144) allKeys];
      uint64_t v90 = (void *)[v89 countByEnumeratingWithState:type objects:v237 count:16];
      if (v90)
      {
        uint64_t v91 = *(void *)v219;
        while (2)
        {
          for (uint64_t m = 0; m != v90; uint64_t m = (char *)m + 1)
          {
            if (*(void *)v219 != v91) {
              objc_enumerationMutation(v89);
            }
            [*(id *)(v80 + 144) objectForKeyedSubscript:*(void *)(*(void *)&type[8] + 8 * (void)m)];
            uint64_t v93 = CMBaseObjectGetDerivedStorage();
            int v94 = cs_addObjectToStreamsAttributes(v93, v88);
            int v222 = v94;
            if (v94)
            {
              uint64_t v156 = v163;
              LODWORD(v153) = v94;
              FigDebugAssert3();
              unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
              CFRange v14 = (id *)&unk_1EB4C5000;
              id v56 = v184;
              goto LABEL_179;
            }
          }
          uint64_t v90 = (void *)[v89 countByEnumeratingWithState:type objects:v237 count:16];
          if (v90) {
            continue;
          }
          break;
        }
        unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
      }
LABEL_139:
      if (*(void *)(v80 + 152))
      {
        uint64_t v90 = (void *)[MEMORY[0x1E4F1CA48] array];
        long long v214 = 0u;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        int v98 = (void *)[*(id *)(v80 + 152) allKeys];
        uint64_t v99 = [v98 countByEnumeratingWithState:&v214 objects:v236 count:16];
        if (v99)
        {
          uint64_t v100 = v99;
          uint64_t v101 = *(void *)v215;
          while (2)
          {
            for (uint64_t n = 0; n != v100; ++n)
            {
              if (*(void *)v215 != v101) {
                objc_enumerationMutation(v98);
              }
              uint64_t v103 = *(void *)(*((void *)&v214 + 1) + 8 * n);
              if (v83 != 13
                || ([*(id *)(*((void *)&v214 + 1) + 8 * n) isEqualToString:v191] & 1) == 0)
              {
                [*(id *)(v80 + 152) objectForKeyedSubscript:v103];
                uint64_t v104 = CMBaseObjectGetDerivedStorage();
                int v105 = cs_addObjectToStreamsAttributes(v104, v90);
                int v222 = v105;
                if (v105)
                {
                  uint64_t v156 = v163;
                  LODWORD(v153) = v105;
                  FigDebugAssert3();
                  unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
                  CFRange v14 = (id *)&unk_1EB4C5000;
                  id v56 = v184;
                  goto LABEL_208;
                }
              }
            }
            uint64_t v100 = [v98 countByEnumeratingWithState:&v214 objects:v236 count:16];
            if (v100) {
              continue;
            }
            break;
          }
          unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
          uint64_t v77 = v190;
        }
        uint64_t v79 = v192;
      }
      FigSimpleMutexCheckIsLockedOnThisThread();
      FigSimpleMutexCheckIsLockedOnThisThread();
      if (*(void *)(v80 + 80)) {
        FigDebugAssert3();
      }
      int v106 = [BWFigVideoCaptureDevice alloc];
      v240[0] = v238;
      v240[1] = v239;
      LODWORD(v157) = v175;
      uint64_t v107 = [(BWFigVideoCaptureDevice *)v106 initWithCaptureDevice:v179 attributes:v177 synchronizedStreamsAttributes:v88 unsynchronizedStreamsAttributes:v90 multiCamEnabled:v181 applicationID:a3 clientAuditToken:v240 tccIdentity:a4 mediaEnvironment:a5 deviceClientPriority:v157 error:&v222];
      *(void *)(v80 + 80) = v107;
      int v108 = v222;
      if (v222)
      {
        id v56 = v184;
LABEL_214:
        CFRange v14 = (id *)&unk_1EB4C5000;
LABEL_215:
        uint64_t v154 = v163;
        LODWORD(v153) = v108;
        FigDebugAssert3();
        id v125 = 0;
        goto LABEL_204;
      }
      id v56 = v184;
      if (!v107)
      {
        int v108 = -12786;
        goto LABEL_214;
      }
      objc_msgSend(*(id *)(v80 + 80), "setUltraHighResolutionZeroShutterLagSupportEnabled:", objc_msgSend((id)objc_msgSend(v189, "objectForKeyedSubscript:", 0x1EFA6BE80), "BOOLValue"));
      [*(id *)(v80 + 176) setObject:CMClockGetHostTimeClock() forKeyedSubscript:@"Clock"];
      objc_msgSend(*(id *)(v80 + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", 1), 0x1EFA6BF00);
      uint64_t v109 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(v109 + 200) = 0;
      if (*(void *)(v109 + 80))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        int v110 = CMNotificationCenterAddListener();
        if (dword_1EB4C4FD0)
        {
          unsigned int v224 = 0;
          os_log_type_t v223 = OS_LOG_TYPE_DEFAULT;
          char v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v112 = v224;
          if (os_log_type_enabled(v111, v223)) {
            unsigned int v113 = v112;
          }
          else {
            unsigned int v113 = v112 & 0xFFFFFFFE;
          }
          if (v113)
          {
            int v230 = 136315394;
            char v231 = "captureSource_registerDeviceNotificationListeners";
            __int16 v232 = 2048;
            double v233 = *(double *)&v77;
            LODWORD(v155) = 22;
            char v153 = &v230;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v79 = v192;
        }
        int v222 = v110;
        if (!v110)
        {
          if ((objc_msgSend((id)objc_msgSend(*(id *)(v80 + 104), "objectForKeyedSubscript:", @"Torch"), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(*(id *)(v80 + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue"))
          {
            int v114 = *(void **)(v80 + 80);
            objc_msgSend((id)sThermalMonitor_0, "maxTorchLevel", v153, v155);
            float v116 = v115;
            [(id)sPowerMonitor maxTorchLevel];
            BOOL v118 = (id *)(v116 >= v117 ? &sPowerMonitor : &sThermalMonitor_0);
            [*v118 maxTorchLevel];
            objc_msgSend(v114, "setMaxTorchLevel:");
            if (dword_1EB4C4FD0)
            {
              unsigned int v224 = 0;
              os_log_type_t v223 = OS_LOG_TYPE_DEFAULT;
              int v119 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v120 = v224;
              if (os_log_type_enabled(v119, v223)) {
                unsigned int v121 = v120;
              }
              else {
                unsigned int v121 = v120 & 0xFFFFFFFE;
              }
              if (v121)
              {
                [(id)sThermalMonitor_0 maxTorchLevel];
                double v123 = v122;
                [(id)sPowerMonitor maxTorchLevel];
                int v230 = 136315650;
                char v231 = "captureSource_bringupBWFigVideoCaptureDevice";
                __int16 v232 = 2048;
                double v233 = v123;
                __int16 v234 = 2048;
                double v235 = v124;
                LODWORD(v155) = 32;
                char v153 = &v230;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v79 = v192;
            }
          }
          objc_msgSend(*(id *)(v80 + 80), "sendCalibrationDataToISP", v153, v155);
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(*(void *)(v80 + 80), *(unsigned __int8 *)(v80 + 228));
          goto LABEL_178;
        }
        uint64_t v142 = v163;
      }
      else
      {
        uint64_t v142 = v163;
        FigDebugAssert3();
        int v110 = -12780;
        int v222 = -12780;
      }
      uint64_t v156 = v142;
      LODWORD(v153) = v110;
      FigDebugAssert3();
      CFRange v14 = (id *)&unk_1EB4C5000;
LABEL_208:
      uint64_t v77 = v190;
      uint64_t v79 = v192;
LABEL_179:
      int v108 = v222;
      if (v222) {
        goto LABEL_215;
      }
      *(unsigned char *)(v79 + 13) = 1;
      id v125 = *(id *)(v79 + 80);
      uint64_t v126 = [(id)sThermalMonitor_0 thermalLevel];
      [(id)sPowerMonitor maxTorchLevel];
      float v128 = v127;
      [(id)sThermalMonitor_0 maxTorchLevel];
      if (v128 >= v129) {
        long long v130 = &sThermalMonitor_0;
      }
      else {
        long long v130 = &sPowerMonitor;
      }
      objc_msgSend((id)*v130, "maxTorchLevel", v153, v156);
      captureSource_setThermalLevelAndMaxTorchLevel(v79, v126, v131);
      [(id)sSystemPressureMonitor callSystemPressureLevelChangedHandler];
      if (v189
        && objc_msgSend((id)objc_msgSend(*(id *)(v79 + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
      {
        *(unsigned char *)(v79 + 230) = objc_msgSend((id)objc_msgSend(v189, "objectForKeyedSubscript:", @"SuspendAdjustingFocusNotifications"), "BOOLValue");
      }
      memset(v237, 0, 64);
      char v132 = *(void **)(v79 + 192);
      uint64_t v133 = [v132 countByEnumeratingWithState:v237 objects:v240 count:16];
      if (v133)
      {
        uint64_t v134 = v133;
        uint64_t v135 = **(void **)&v237[1];
        do
        {
          for (iuint64_t i = 0; ii != v134; ++ii)
          {
            if (**(void **)&v237[1] != v135) {
              objc_enumerationMutation(v132);
            }
            float v137 = *(void **)(*((void *)&v237[0] + 1) + 8 * ii);
            if ((![v137 isEqualToString:@"ImageControlMode"]
               || (objc_msgSend((id)objc_msgSend(*(id *)(v192 + 176), "objectForKeyedSubscript:", @"AutoAdjustImageControlMode"), "BOOLValue") & 1) == 0)&& (objc_msgSend(v137, "isEqualToString:", @"AutoFlashEnabled") & 1) == 0&& (objc_msgSend(v137, "isEqualToString:", @"StillImageStabilizationAutomaticallyEnabled") & 1) == 0)
            {
              CFDictionaryRef v138 = (const __CFDictionary *)[*(id *)(v192 + 176) objectForKeyedSubscript:v137];
              if (v138) {
                captureSource_setPropertyInternal(v190, v137, v138);
              }
            }
          }
          uint64_t v134 = [v132 countByEnumeratingWithState:v237 objects:v240 count:16];
        }
        while (v134);
      }
      uint64_t v79 = v192;
      if (*(unsigned char *)(v192 + 229))
      {
        long long v139 = *(_OWORD *)(v192 + 32);
        v236[0] = *(_OWORD *)(v192 + 16);
        v236[1] = v139;
        BOOL HasAccessToCamera = FigCaptureSourceClientHasAccessToCamera(v236);
        *(unsigned char *)(v192 + 22_Block_object_dispose(&STACK[0x4E0], 8) = HasAccessToCamera;
        uint64_t v141 = *(void *)(v192 + 80);
        id v56 = v184;
        uint64_t v77 = v190;
        if (v141) {
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(v141, HasAccessToCamera);
        }
        int v108 = 0;
      }
      else
      {
        int v108 = 0;
        id v56 = v184;
        uint64_t v77 = v190;
      }
LABEL_204:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v79 + 48));
      unsigned int v213 = v108;
      if (v108)
      {
        uint64_t v154 = v163;
        LODWORD(v153) = v108;
        goto LABEL_248;
      }
      [v14[335] addObject:v77];
      [v174 addObject:v125];

      CFIndex v70 = v183 + 1;
      CFArrayRef v11 = v185;
      CFArrayRef v10 = v186;
      if (v183 + 1 == Count) {
        goto LABEL_221;
      }
    }
    uint64_t v90 = 0;
LABEL_138:
    unsigned int v88 = 0;
    goto LABEL_139;
  }
LABEL_221:
  if (v159)
  {
    uint64_t v143 = [(BWMultiCamConfiguration *)v158 multiCamConfigurationForDevice:v169 errorOut:&v213];
    if (v213)
    {
      uint64_t v154 = v163;
      LODWORD(v153) = v213;
    }
    else
    {
      unsigned int v144 = [v169 setPropertyIfSupported:*MEMORY[0x1E4F52D90] value:v143];
      unsigned int v213 = v144;
      if (!v144) {
        goto LABEL_224;
      }
      uint64_t v154 = v163;
      LODWORD(v153) = v144;
    }
LABEL_248:
    FigDebugAssert3();
    goto LABEL_233;
  }
LABEL_224:
  if (sTimeOfFlightAFEnabled != (v164 & 1))
  {
    if (v169)
    {
      sTimeOfFlightAFEnabled = v164 & 1;
      if (v164)
      {
        sTimeOfFlightAFSuspended = (int)[(id)sThermalMonitor_0 thermalLevel] > 1;
        if (objc_msgSend(v166, "containsObject:", *MEMORY[0x1E4F52DE0], v153, v154))
        {
          unsigned int updated = cs_updateTimeOfFlightAFEnabledStatus();
          unsigned int v213 = updated;
          if (updated)
          {
            uint64_t v154 = v163;
            LODWORD(v153) = updated;
            goto LABEL_248;
          }
        }
      }
    }
  }
  if (sStructuredLightAFEnabled != v160)
  {
    if (v169)
    {
      sStructuredLightAFEnabled = v160;
      sStructuredLightAFSuspended = (int)[(id)sThermalMonitor_0 thermalLevel] > 1;
      if (sStructuredLightAFEnabled) {
        cs_updateStructuredLightAFTargetStreamResources();
      }
    }
  }
LABEL_233:
  if (!v213)
  {
    int v151 = v174;
    goto LABEL_243;
  }
LABEL_234:

  long long v195 = 0u;
  long long v196 = 0u;
  long long v193 = 0u;
  long long v194 = 0u;
  id v146 = v14[335];
  uint64_t v147 = [v146 countByEnumeratingWithState:&v193 objects:v225 count:16];
  if (v147)
  {
    uint64_t v148 = v147;
    uint64_t v149 = *(void *)v194;
    do
    {
      for (juint64_t j = 0; jj != v148; ++jj)
      {
        if (*(void *)v194 != v149) {
          objc_enumerationMutation(v146);
        }
        captureSource_deactivateInternal(*(const void **)(*((void *)&v193 + 1) + 8 * jj));
      }
      uint64_t v148 = [v146 countByEnumeratingWithState:&v193 objects:v225 count:16];
    }
    while (v148);
  }
  objc_msgSend(v14[335], "removeAllObjects", v153, v154);
  int v151 = 0;
  unint64_t v45 = (pthread_mutex_t **)&unk_1EB4C5000;
LABEL_243:
  pthread_mutex_unlock(v45[334]);
  if (a8) {
    *a8 = [v151 copy];
  }

  return v213;
}

uint64_t cs_addObjectToStreamsAttributes(uint64_t a1, void *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v4 = 4294954511;
  }
  else if (*(void *)(a1 + 104))
  {
    objc_msgSend(a2, "addObject:");
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 4294954513;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  return v4;
}

void captureSource_turnOffAndTeardownFigFlashlight(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(void *)(DerivedStorage + 208))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t v3 = *(void *)(DerivedStorage + 208);
    if (v3 && (uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, double))(v5 + 40);
    if (v6) {
      v6(v3, 0.0);
    }
    BOOL v7 = *(const void **)(DerivedStorage + 208);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 20_Block_object_dispose(&STACK[0x4E0], 8) = 0;
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a1, @"TorchActive", (uint64_t)&unk_1EFB02390, 0, 1);
    uint64_t v8 = [NSNumber numberWithFloat:0.0];
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a1, @"TorchLevel", v8, 1, 1);
  }
}

uint64_t captureSource_setThermalLevelAndMaxTorchLevel(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  FigSimpleMutexCheckIsLockedOnThisThread();
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", @"Torch"), "BOOLValue") & 1) != 0
    || objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue"))
  {
    *(float *)&double v6 = a3;
    [*(id *)(a1 + 80) setMaxTorchLevel:v6];
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", @"Sphere"), "BOOLValue");
  if (result)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v8 = objc_msgSend(*(id *)(a1 + 80), "captureStreams", 0);
    uint64_t result = [v8 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (result)
    {
      uint64_t v9 = result;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(*((void *)&v12 + 1) + 8 * v11++) setSphereThermalLevel:a2];
        }
        while (v9 != v11);
        uint64_t result = [v8 countByEnumeratingWithState:&v12 objects:v16 count:16];
        uint64_t v9 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t cs_updateTimeOfFlightAFEnabledStatus()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (sTimeOfFlightAFEnabled) {
    BOOL v0 = sTimeOfFlightAFSuspended == 0;
  }
  else {
    BOOL v0 = 0;
  }
  uint64_t v1 = v0;
  id v2 = cs_copyActiveCaptureDevice();
  uint64_t v3 = objc_msgSend(v2, "setProperty:value:", *MEMORY[0x1E4F52DA0], objc_msgSend(NSNumber, "numberWithBool:", v1));
  if (v3)
  {
    uint64_t v11 = v3;
    FigDebugAssert3();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v4 = (void *)sActiveVideoCaptureSources;
    uint64_t v5 = [(id)sActiveVideoCaptureSources countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          v13[0] = MEMORY[0x1E4F143A8];
          v13[1] = 3221225472;
          v13[2] = __cs_updateTimeOfFlightAFEnabledStatus_block_invoke;
          v13[3] = &__block_descriptor_33_e154_i16__0__FigCaptureSourceStorage_qiCC____8I____OpaqueFigSimpleMutex__q____CFString__i__________OpaqueFigCaptureSource_f___i__OpaqueFigFlashlight__iBBB_BB_8l;
          char v14 = v1;
          uint64_t v10 = captureSource_safelyAccessStorage(v9, (uint64_t)v13);
        }
        uint64_t v11 = v10;
        uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v6);
    }
    else
    {
      uint64_t v11 = 0;
    }
  }

  return v11;
}

id cs_copyActiveCaptureDevice()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  BOOL v0 = (void *)sActiveVideoCaptureSources;
  uint64_t v1 = [(id)sActiveVideoCaptureSources countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)v10;
LABEL_3:
  uint64_t v4 = 0;
  while (1)
  {
    if (*(void *)v10 != v3) {
      objc_enumerationMutation(v0);
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v6 = DerivedStorage;
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
      id v7 = (id)[*(id *)(v6 + 80) device];
      pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 48));
      if (v7) {
        return v7;
      }
    }
    if (v2 == ++v4)
    {
      uint64_t v2 = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t FigCaptureConfigureDepthConverterNode(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v22 = 0;
  if (a2)
  {
    unint64_t v12 = [a2 depthDataTransform];
    uint64_t v14 = v13;
    uint64_t v15 = [a2 outputFormat];
    long long v16 = a2;
LABEL_7:
    uint64_t v19 = objc_msgSend((id)objc_msgSend(v16, "sourceConfiguration"), "source");
    goto LABEL_8;
  }
  long long v16 = a3;
  if (a3)
  {
    unint64_t v12 = [a3 depthDataTransformWithSourceDimensions];
    uint64_t v14 = v17;
    uint64_t v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "sourceConfiguration"), "depthDataFormat"), "format");
    goto LABEL_7;
  }
  unint64_t v12 = 0;
  if (a4)
  {
    uint64_t v14 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "sourceConfiguration"), "depthDataFormat"), "dimensions");
    uint64_t v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "sourceConfiguration"), "depthDataFormat"), "format");
    long long v16 = a4;
    goto LABEL_7;
  }
  uint64_t v19 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
LABEL_8:
  unint64_t v20 = HIDWORD(v12);
  [a1 setOutputFormat:v15];
  [a1 setOutputDimensions:v14];
  if (v12) {
    unint64_t v20 = FigCaptureNormalizeAngle(-HIDWORD(v12));
  }
  [a1 setRotationDegrees:v20];
  [a1 setMirroringEnabled:v12 & 1];
  objc_msgSend(a1, "setStreamingGDRFilteringEnabled:", objc_msgSend((id)objc_msgSend(a2, "depthDataSinkConfiguration"), "filteringEnabled") & (a6 ^ 1));
  if (v19 && FigVideoCaptureSourcePearlModuleType(v19, &v22) == 2) {
    objc_msgSend(a1, "setStreamingSMPFilteringEnabled:", objc_msgSend((id)objc_msgSend(a2, "depthDataSinkConfiguration"), "filteringEnabled"));
  }
  [a1 setProvidesUnfilteredDepthAsAttachedMedia:a7];
  [a1 setBaseRotationDegrees:a5];
  return v22;
}

uint64_t FigVideoCaptureSourcePearlModuleType(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourcePearlModuleType_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A597C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWUtilitiesUnderlyingDeviceTypeFromPortType(void *a1, unsigned int a2)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DD8]]) {
    return 2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF0]]) {
    return 3;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DE8]]) {
    return 7;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF8]])
  {
    if (a2 - 15 >= 2) {
      return 2;
    }
    else {
      return a2;
    }
  }
  else if ([a1 isEqualToString:*MEMORY[0x1E4F52E10]])
  {
    if (a2 == 11) {
      return 11;
    }
    else {
      return 7;
    }
  }
  else if ([a1 isEqualToString:*MEMORY[0x1E4F52E00]])
  {
    return 5;
  }
  else if ([a1 isEqualToString:*MEMORY[0x1E4F52DE0]])
  {
    return 10;
  }
  else
  {
    return 0;
  }
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresEyeReliefStatus(void *a1)
{
  uint64_t v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F559D0];
  return [v1 containsObject:v2];
}

uint64_t csp_projectorModeFromPointCloudDataConnectionConfigurations(void *a1)
{
  if (![a1 count]) {
    return 0;
  }
  uint64_t v2 = objc_msgSend((id)objc_msgSend(a1, "firstObject"), "projectorMode");
  if ((unint64_t)[a1 count] >= 2)
  {
    unint64_t v3 = 1;
    do
    {
      if (v2 != objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v3), "projectorMode"))objc_exception_throw((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E4F1C3B8], @"Projector modes from connection configs with the same source need to be the same", 0)); {
      ++v3;
      }
    }
    while ([a1 count] > v3);
  }
  return v2;
}

uint64_t FigCaptureCinematicFramingNodeRequiredInGraph(int a1, int a2, int a3)
{
  return (a1 | a3) & (a2 ^ 1u);
}

void sub_1A5985940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t FigCaptureIsDebuggerOrSlowAllocationPathEnabled()
{
  return 0;
}

__SecTask *FigCaptureCurrentProcessIsXCTest()
{
  uint64_t result = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (result)
  {
    uint64_t v1 = result;
    uint64_t IsRunningInXCTestWithSecTask = FigCaptureClientIsRunningInXCTestWithSecTask(result);
    CFRelease(v1);
    return (__SecTask *)IsRunningInXCTestWithSecTask;
  }
  return result;
}

uint64_t captureSource_setExposureOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = (void *)[a2 objectForKeyedSubscript:@"ExposureMode"];
  if (!v6) {
    goto LABEL_27;
  }
  int v7 = [v6 intValue];
  if (v7)
  {
    if (v7 != 3)
    {
      if (v7 == 2)
      {
        CGSize v8 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
        rect.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
        rect.size = v8;
        CFDictionaryRef v9 = (const __CFDictionary *)[a2 objectForKeyedSubscript:@"ExposureRect"];
        if (v9 && CGRectMakeWithDictionaryRepresentation(v9, &rect))
        {
          uint64_t v10 = objc_msgSend(*(id *)(v5 + 80), "setExposureModeAutoWithRect:", rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
          if (v10)
          {
            uint64_t v27 = v10;
            FigDebugAssert3();
            return v27;
          }
          if (![a2 objectForKeyedSubscript:@"FaceDrivenAEAFMode"]) {
            return 0;
          }
          return captureSource_setFaceDrivenAEAFMode(a1, objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"FaceDrivenAEAFMode"), "intValue"));
        }
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    CFDictionaryRef v14 = (const __CFDictionary *)[a2 objectForKeyedSubscript:@"ExposureDuration"];
    if (v14)
    {
      memset(&rect, 0, 24);
      CMTimeMakeFromDictionary((CMTime *)&rect, v14);
      uint64_t v15 = (void *)[a2 objectForKeyedSubscript:@"ExposureActiveMinFrameRate"];
      if (v15)
      {
        [v15 doubleValue];
        double v17 = v16;
        long long v18 = (void *)[a2 objectForKeyedSubscript:@"ExposureActiveMaxFrameRate"];
        if (v18)
        {
          [v18 doubleValue];
          double v20 = v19;
          uint64_t v21 = (void *)[a2 objectForKeyedSubscript:@"ISO"];
          if (v21)
          {
            [v21 floatValue];
            int v23 = v22;
            uint64_t v24 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"RequestID"), "intValue");
            char v25 = *(void **)(v5 + 80);
            origiuint64_t n = rect.origin;
            CGFloat width = rect.size.width;
            LODWORD(v26) = v23;
            return [v25 setExposureModeCustomWithExposureDuration:&origin minFrameRate:v24 maxFrameRate:v17 ISO:v20 requestID:v26];
          }
        }
      }
LABEL_31:
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
LABEL_27:
    FigDebugAssert3();
LABEL_28:
    return FigSignalErrorAt();
  }
  unint64_t v12 = *(void **)(v5 + 80);
  return [v12 setExposureModeLocked];
}

uint64_t captureSource_setFocusOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t v5 = (void *)[a2 objectForKey:@"FocusMode"];
  if (v5)
  {
    int v6 = [v5 intValue];
    int v7 = v6;
    if ((v6 - 1) < 2)
    {
      CGSize v8 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      rect.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
      rect.size = v8;
      if (!objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"FocusPointOfInterest"), "BOOLValue")|| (CFDictionaryRef v9 = (const __CFDictionary *)objc_msgSend(a2, "objectForKeyedSubscript:", @"FocusRect")) != 0&& CGRectMakeWithDictionaryRepresentation(v9, &rect))
      {
        uint64_t v10 = (void *)[a2 objectForKeyedSubscript:@"FocusRangeRestriction"];
        if (v10) {
          signed int v11 = [v10 intValue];
        }
        else {
          signed int v11 = 0;
        }
        long long v18 = (void *)[a2 objectForKeyedSubscript:@"SmoothFocus"];
        if (v18) {
          uint64_t v21 = [v18 BOOLValue];
        }
        else {
          uint64_t v21 = 0;
        }
        if (v11 < 3)
        {
          LODWORD(v19) = dword_1A5F0D33C[v11];
          LODWORD(v20) = dword_1A5F0D348[v11];
          uint64_t v22 = objc_msgSend(*(id *)(DerivedStorage + 80), "setFocusModeAutoWithRect:restrictToRect:continuous:smooth:rangeRestrictionNear:rangeRestrictionFar:isFocusRectInOverscanSpace:", 0, v7 == 2, v21, 0, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, v19, v20);
          if (v22)
          {
            uint64_t v24 = v22;
            FigDebugAssert3();
            return v24;
          }
          if ([a2 objectForKeyedSubscript:@"FaceDrivenAEAFMode"]) {
            return captureSource_setFaceDrivenAEAFMode(a1, objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"FaceDrivenAEAFMode"), "intValue"));
          }
          return 0;
        }
      }
      else
      {
        FigDebugAssert3();
      }
      return FigSignalErrorAt();
    }
    if (!v6)
    {
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"FocusPosition"), "floatValue");
      int v13 = v12;
      uint64_t v14 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"RequestID"), "intValue");
      uint64_t v15 = *(void **)(DerivedStorage + 80);
      LODWORD(v16) = v13;
      return [v15 setFocusModeManualWithLensPosition:v14 requestID:v16];
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

double FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + a1 * a7;
}

double fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(double a1, double a2, double a3, double a4, float a5, double a6)
{
  if (a5 > 1.0)
  {
    float v6 = 1.0 / a5;
    float v7 = (float)(1.0 - v6) * 0.5;
    double v8 = v6;
    a1 = v7 + a1 * v8;
    a3 = a3 * v8;
  }
  double result = a6 + a1;
  if (1.0 - a3 < result) {
    double result = 1.0 - a3;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t captureSource_setFaceDrivenAEAFMode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void **)(DerivedStorage + 80);
  if (v4)
  {
    uint64_t v5 = [v4 setFaceDetectionDrivenImageProcessingMode:a2];
    if (v5) {
      FigDebugAssert3();
    }
    else {
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2), @"FaceDrivenAEAFMode");
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return v5;
}

void captureSession_postSinkRemoteQueueUpdatedNotification(const void *a1, uint64_t a2, uint64_t a3)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    v5[0] = @"SectionID";
    v5[1] = @"RemoteQueueReceiver";
    v6[0] = a2;
    v6[1] = a3;
    uint64_t v4 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:v5 count:2];
    if (v4) {
      captureSession_postNotificationWithPayload(a1, @"RemoteQueueUpdated", v4);
    }
  }
}

uint64_t FigRemoteQueueSenderCreateXPCObject(uint64_t a1, void *a2)
{
  xpc_object_t value = 0;
  if (a1 && a2)
  {
    SharedRegiouint64_t n = FigSharedMemPoolGetSharedRegion(*(void *)(a1 + 16));
    xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
    if (v5)
    {
      float v6 = v5;
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
      if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0 || !*(unsigned char *)(a1 + 160)) {
        goto LABEL_16;
      }
      uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress(*(void *)(a1 + 32));
      if (RemoteAddress)
      {
        if (FigSharedMemPoolSharedRegionGetOwner(SharedRegion))
        {
LABEL_16:
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v13 = 4294950629;
LABEL_17:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
          xpc_release(v6);
          return v13;
        }
      }
      else
      {
        uint64_t v8 = FigSharedMemPoolSharedRegionCreateXPCObject(SharedRegion, a1, &value);
        if (v8)
        {
          uint64_t v13 = v8;
          fig_log_get_emitter();
          FigDebugAssert3();
          goto LABEL_17;
        }
      }
      int v9 = *(_DWORD *)(a1 + 52);
      int v10 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = -1;
      xpc_dictionary_set_mach_recv();
      *(unsigned char *)(a1 + 160) = 0;
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
      if (value)
      {
        xpc_dictionary_set_value(v6, "SharedRegion", value);
        xpc_release(value);
      }
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t Address = FigSharedMemPoolSharedRegionGetAddress(SharedRegion);
      xpc_dictionary_set_uint64(v6, "QueueOffset", v11 - Address);
      xpc_dictionary_set_uint64(v6, "QueueData", RemoteAddress);
      xpc_dictionary_set_fd(v6, "RecvFd", v9);
      xpc_dictionary_set_fd(v6, "SendFd", v10);
      close(v10);
      uint64_t v13 = 0;
      *a2 = v6;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294950630;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v13;
}

uint64_t FigSharedMemPoolSharedRegionCreateXPCObject(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a3 && !*(_DWORD *)(a1 + 40) && (xpc_object_t v6 = xpc_shmem_create(*(void **)(a1 + 16), *(void *)(a1 + 24))) != 0)
  {
    xpc_object_t v7 = v6;
    int v8 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 40), (unsigned int *)&v8, 1u, memory_order_relaxed, memory_order_relaxed);
    if (v8)
    {
      xpc_release(v6);
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *(void *)(a1 + 32) = a2;
      *a3 = v7;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

uint64_t csr_notificationFilter(int a1, int a2, void *a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  if (theDict)
  {
    CFNumberRef Value = CFDictionaryGetValue(theDict, @"FormatDescription_Serialized");
    CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MasterClockType");
  }
  else
  {
    CFNumberRef Value = 0;
    CFNumberRef v58 = 0;
  }
  unint64_t v53 = (unint64_t)xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_SampleBuffer_SerializedSurface);
  xpc_object_t v52 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_Surface_Serialized);
  xid obj = (unint64_t)xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSampleBuffer_SerializedSurface);
  xpc_object_t v55 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSurface_Serialized);
  xpc_object_t v51 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_ThumbnailSurface_Serialized);
  xpc_object_t v54 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_DepthDataSurface_Serialized);
  xpc_object_t v8 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_ConstantColorConfidenceMapSurface_Serialized);
  xpc_object_t v9 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized);
  xpc_object_t v10 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_HairSegmentationMatteSurface_Serialized);
  xpc_object_t v11 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized);
  xpc_object_t v12 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized);
  xpc_object_t v13 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized);
  xpc_object_t v57 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface_Serialized);
  xpc_object_t xdict = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionRemoteQueueUpdatedNotificationPayloadKey_RemoteQueueReceiver_Serialized);
  id v62 = 0;
  unint64_t v63 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  FigXPCMessageCreateBlockBufferData();
  FigXPCMessageCreateBlockBufferData();
  if (!Value
    && !v53
    && !v52
    && !v55
    && !v51
    && !v54
    && !v8
    && !v9
    && !v10
    && !v11
    && !v12
    && !v13
    && !v57
    && !xdict
    && !v58)
  {
    return 0;
  }
  xpc_object_t v47 = v8;
  xpc_object_t v45 = v11;
  xpc_object_t v46 = v10;
  MutableCopdouble y = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    goto LABEL_106;
  }
  if (Value)
  {
    uint64_t v59 = 0;
    if (FigRemote_CreateFormatDescriptionFromSerializedDictionary()) {
      goto LABEL_106;
    }
    CFDictionarySetValue(MutableCopy, @"FormatDescription", v59);
    CFRelease(v59);
    CFDictionaryRemoveValue(MutableCopy, @"FormatDescription_Serialized");
  }
  if (v63 | v53)
  {
    if (v53)
    {
      IOSurfaceRef v17 = IOSurfaceLookupFromXPCObject((xpc_object_t)v53);
      int SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      int SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
    }
    if (SampleBufferFromSerializedAtomBlockBufferAndSurface) {
      goto LABEL_106;
    }
    CFDictionarySetValue(MutableCopy, @"SampleBuffer", v62);
  }
  if (v52)
  {
    IOSurfaceRef v19 = IOSurfaceLookupFromXPCObject(v52);
    if (!v19) {
      goto LABEL_106;
    }
    IOSurfaceRef v20 = v19;
    CFDictionarySetValue(MutableCopy, @"Surface", v19);
    CFRelease(v20);
  }
  if (v61 | xobj)
  {
    if (xobj)
    {
      IOSurfaceRef v21 = IOSurfaceLookupFromXPCObject((xpc_object_t)xobj);
      int v22 = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
      if (v21) {
        CFRelease(v21);
      }
    }
    else
    {
      int v22 = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
    }
    if (v22) {
      goto LABEL_106;
    }
    CFDictionarySetValue(MutableCopy, @"PreviewSampleBuffer", v60);
  }
  if (v55)
  {
    IOSurfaceRef v23 = IOSurfaceLookupFromXPCObject(v55);
    if (!v23) {
      goto LABEL_106;
    }
    IOSurfaceRef v24 = v23;
    CFDictionarySetValue(MutableCopy, @"PreviewSurface", v23);
    CFRelease(v24);
  }
  if (v51)
  {
    IOSurfaceRef v25 = IOSurfaceLookupFromXPCObject(v51);
    if (!v25) {
      goto LABEL_106;
    }
    IOSurfaceRef v26 = v25;
    CFDictionarySetValue(MutableCopy, @"ThumbnailSurface", v25);
    CFRelease(v26);
  }
  if (v54)
  {
    IOSurfaceRef v27 = IOSurfaceLookupFromXPCObject(v54);
    if (!v27) {
      goto LABEL_106;
    }
    IOSurfaceRef v28 = v27;
    CFDictionarySetValue(MutableCopy, @"DepthDataSurface", v27);
    CFRelease(v28);
  }
  if (v47)
  {
    IOSurfaceRef v29 = IOSurfaceLookupFromXPCObject(v47);
    if (!v29) {
      goto LABEL_106;
    }
    IOSurfaceRef v30 = v29;
    CFDictionarySetValue(MutableCopy, @"ConstantColorConfidenceMapSurface", v29);
    CFRelease(v30);
  }
  if (v9)
  {
    IOSurfaceRef v31 = IOSurfaceLookupFromXPCObject(v9);
    if (!v31) {
      goto LABEL_106;
    }
    IOSurfaceRef v32 = v31;
    CFDictionarySetValue(MutableCopy, @"PortraitEffectsMatteSurface", v31);
    CFRelease(v32);
  }
  if (v46)
  {
    IOSurfaceRef v33 = IOSurfaceLookupFromXPCObject(v46);
    if (!v33) {
      goto LABEL_106;
    }
    IOSurfaceRef v34 = v33;
    CFDictionarySetValue(MutableCopy, @"HairSegmentationMatteSurface", v33);
    CFRelease(v34);
  }
  if (v45)
  {
    IOSurfaceRef v35 = IOSurfaceLookupFromXPCObject(v45);
    if (!v35) {
      goto LABEL_106;
    }
    IOSurfaceRef v36 = v35;
    CFDictionarySetValue(MutableCopy, @"SkinSegmentationMatteSurface", v35);
    CFRelease(v36);
  }
  if (v12)
  {
    IOSurfaceRef v37 = IOSurfaceLookupFromXPCObject(v12);
    if (!v37) {
      goto LABEL_106;
    }
    IOSurfaceRef v38 = v37;
    CFDictionarySetValue(MutableCopy, @"TeethSegmentationMatteSurface", v37);
    CFRelease(v38);
  }
  if (v13)
  {
    IOSurfaceRef v39 = IOSurfaceLookupFromXPCObject(v13);
    if (!v39) {
      goto LABEL_106;
    }
    IOSurfaceRef v40 = v39;
    CFDictionarySetValue(MutableCopy, @"GlassesSegmentationMatteSurface", v39);
    CFRelease(v40);
  }
  if (!v57) {
    goto LABEL_71;
  }
  IOSurfaceRef v41 = IOSurfaceLookupFromXPCObject(v57);
  if (!v41)
  {
LABEL_106:
    fig_log_get_emitter();
    FigDebugAssert3();
    int v44 = -12786;
    goto LABEL_91;
  }
  IOSurfaceRef v42 = v41;
  CFDictionarySetValue(MutableCopy, @"DeferredPhotoProxySurface", v41);
  CFRelease(v42);
LABEL_71:
  if (!v58) {
    goto LABEL_74;
  }
  uint64_t v43 = (const void *)csr_masterClockFromClockType(DerivedStorage, v58);
  if (v43)
  {
    CFDictionarySetValue(MutableCopy, @"MasterClock", v43);
LABEL_74:
    if (xdict)
    {
      uint64_t v59 = 0;
      int v44 = FigRemoteQueueReceiverCreateFromXPCObject(v14, xdict, (uint64_t *)&v59);
      if (v44)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        CFDictionarySetValue(MutableCopy, @"RemoteQueueReceiver", v59);
        CFRelease(v59);
      }
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_90:
  int v44 = 0;
LABEL_91:
  if (v62) {
    CFRelease(v62);
  }
  if (v63) {
    CFRelease((CFTypeRef)v63);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v61) {
    CFRelease((CFTypeRef)v61);
  }
  if (MutableCopy && v44)
  {
    CFRelease(MutableCopy);
    MutableCopdouble y = 0;
  }
  *a5 = MutableCopy;
  if (v44) {
    return 1;
  }
  else {
    return 4;
  }
}

BOOL csr_notificationFilter_0(int a1, CFTypeRef cf1)
{
  return CFEqual(cf1, @"ActiveFormat") != 0;
}

uint64_t FigRemoteQueueReceiverCreateFromXPCObject(uint64_t a1, xpc_object_t xdict, uint64_t *a3)
{
  CFTypeRef cf = 0;
  if (!xdict)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_47:
    int v10 = -1;
    uint64_t v20 = 4294950629;
    goto LABEL_23;
  }
  if (!a3) {
    goto LABEL_33;
  }
  uint int64 = xpc_dictionary_get_uint64(xdict, "QueueData");
  if (uint64) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "SharedRegion");
  if (!value)
  {
LABEL_33:
    fig_log_get_emitter();
LABEL_46:
    FigDebugAssert3();
    goto LABEL_47;
  }
  uint64_t v8 = FigSharedMemPoolSharedRegionCreateFromXPCObject(a1, value, (uint64_t *)&cf);
  if (v8)
  {
    uint64_t v20 = v8;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_22;
  }
  uint64_t v9 = xpc_dictionary_get_uint64(xdict, "QueueOffset");
  if (!v9)
  {
    fig_log_get_emitter();
    goto LABEL_46;
  }
  uint int64 = v9 + FigSharedMemPoolSharedRegionGetAddress((uint64_t)cf);
LABEL_8:
  int v10 = xpc_dictionary_dup_fd(xdict, "RecvFd");
  if (v10 < 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    int v11 = -1;
LABEL_36:
    uint64_t v20 = 4294950629;
    goto LABEL_24;
  }
  int v11 = xpc_dictionary_dup_fd(xdict, "SendFd");
  if (v11 < 0 || (unsigned int mach_recv = xpc_dictionary_extract_mach_recv()) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_36;
  }
  CFTypeRef v13 = cf;
  if (rqSurfaceRegistrationOnce != -1) {
    dispatch_once(&rqSurfaceRegistrationOnce, &__block_literal_global_107);
  }
  MEMORY[0x1A62711C0](&FigRemoteQueueReceiverGetTypeID_registerOnce, rqReceiverRegister);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v15 = Instance;
    if (v13) {
      CFTypeRef v16 = CFRetain(v13);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)(v15 + 16) = v16;
    *(void *)(v15 + 24) = FigSharedMemBlockRetain(uint64);
    if (fcntl(v10, 4, 4) == -1 || fcntl(v11, 4, 4) == -1 || fcntl(v11, 73, 1) == -1)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v20 = *__error();
      CFRelease((CFTypeRef)v15);
      if (!v20) {
        goto LABEL_22;
      }
      goto LABEL_42;
    }
    uint64_t v17 = FigSimpleMutexCreate();
    *(void *)(v15 + 40) = v17;
    if (v17)
    {
      *(_DWORD *)(v15 + 64) = 1;
      *(_DWORD *)(v15 + 32) = v10;
      *(_DWORD *)(v15 + 36) = v11;
      *(void *)(v15 + 80) = 0;
      *(void *)(v15 + 8_Block_object_dispose(&STACK[0x4E0], 8) = 0;
      *(_DWORD *)(v15 + 96) = mach_recv;
      long long v18 = dispatch_source_create(MEMORY[0x1E4F14458], mach_recv, 0, (dispatch_queue_t)rqSurfaceRegistrationQueue);
      *(void *)(v15 + 104) = v18;
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 0x40000000;
      handler[2] = __rqReceiverCreate_block_invoke_2;
      handler[3] = &__block_descriptor_tmp_81;
      unsigned int v25 = mach_recv;
      handler[4] = v18;
      dispatch_source_set_cancel_handler(v18, handler);
      IOSurfaceRef v19 = *(NSObject **)(v15 + 104);
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      v23[2] = __rqReceiverCreate_block_invoke_3;
      v23[3] = &__block_descriptor_tmp_82;
      v23[4] = v18;
      dispatch_source_set_event_handler(v19, v23);
      dispatch_resume(*(dispatch_object_t *)(v15 + 104));
      uint64_t v20 = 0;
      *a3 = v15;
LABEL_22:
      int v10 = -1;
LABEL_23:
      int v11 = -1;
      goto LABEL_24;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    CFRelease((CFTypeRef)v15);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v20 = 4294950630;
LABEL_42:
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  if ((v10 & 0x80000000) == 0) {
    close(v10);
  }
  if ((v11 & 0x80000000) == 0) {
    close(v11);
  }
  FigMachPortReleaseReceiveRight_();
  return v20;
}

uint64_t FigSharedMemPoolSharedRegionGetAddress(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t FigSharedMemPoolSharedRegionCreateFromXPCObject(uint64_t a1, void *a2, uint64_t *a3)
{
  if (!a3 || !a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  MEMORY[0x1A62711C0](&FigSharedMemPoolSharedRegionGetTypeID_registerOnce, shmemRegionRegister);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954510;
  }
  uint64_t v6 = Instance;
  size_t v7 = xpc_shmem_map(a2, (void **)(Instance + 16));
  *(void *)(v6 + 24) = v7;
  if (v7 <= 0x2F)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 4294954516;
LABEL_12:
    CFRelease((CFTypeRef)v6);
    return v8;
  }
  uint64_t v8 = shmemRegionRegisterSharedRegion(v6);
  if (v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_12;
  }
  *(_DWORD *)(v6 + 40) = 1;
  *a3 = v6;
  return v8;
}

uint64_t shmemRegionRegisterSharedRegion(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (*(_DWORD *)v1 != 1936224364)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 8), (unint64_t *)&v2, v1, memory_order_relaxed, memory_order_relaxed);
  if (!v2)
  {
    *(void *)(v1 + 16) = a1;
    return v2;
  }
  return FigSignalErrorAt();
}

uint64_t csr_masterClockFromClockType(uint64_t a1, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (*(_DWORD *)(a1 + 24) != valuePtr || (uint64_t result = *(void *)(a1 + 16)) == 0)
  {
    CMClockRef clockOut = 0;
    if (valuePtr == 1)
    {
      HostTimeClocuint64_t k = CMClockGetHostTimeClock();
      CMClockRef clockOut = HostTimeClock;
      if (!HostTimeClock)
      {
        fig_log_get_emitter();
        goto LABEL_17;
      }
      CMClockRef v4 = HostTimeClock;
      CFRetain(HostTimeClock);
    }
    else
    {
      if (valuePtr != 2) {
        return *(void *)(a1 + 16);
      }
      if (CMAudioClockCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &clockOut) || (CMClockRef v4 = clockOut) == 0)
      {
        fig_log_get_emitter();
LABEL_17:
        FigDebugAssert3();
        return *(void *)(a1 + 16);
      }
    }
    uint64_t v6 = *(const void **)(a1 + 16);
    if (v6)
    {
      CFRelease(v6);
      CMClockRef v4 = clockOut;
    }
    *(void *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 24) = valuePtr;
    return *(void *)(a1 + 16);
  }
  return result;
}

uint64_t BWAddEntriesWithKeysFromDictionaryToDictionary(void *a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(a2);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * v9);
        uint64_t v11 = [a1 objectForKeyedSubscript:v10];
        if (v11) {
          [a3 setObject:v11 forKeyedSubscript:v10];
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

unsigned char *BWSmartCameraSceneUpdateResetTemporalHysteresisAndFiltering(unsigned char *result)
{
  if (*result) {
    result[26] = 1;
  }
  return result;
}

id FigCaptureBuildSceneClassifierPipeline(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, void *a10, void *a11, BWSceneClassifierSinkNode **a12)
{
  IOSurfaceRef v19 = a10;
  id v34 = 0;
  if (a11)
  {
    uint64_t v20 = [MEMORY[0x1E4F1CA48] array];
    IOSurfaceRef v19 = a10;
    IOSurfaceRef v21 = (void *)v20;
  }
  else
  {
    IOSurfaceRef v21 = 0;
  }
  IOSurfaceRef v32 = v19;
  if (v19) {
    int v22 = (void *)[MEMORY[0x1E4F1CA48] array];
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = a3 & 0xFFFFFFFFFFFFLL;
  IOSurfaceRef v24 = FigCaptureCreateAndConfigureSmartCameraInferenceNode(a4, v23, a8, a9, a7);
  if (!v24)
  {
    fig_log_get_emitter();
LABEL_27:
    FigDebugAssert3();
    goto LABEL_22;
  }
  unsigned int v25 = v24;
  if (([a1 addNode:v24 error:&v34] & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", a2, -[BWNode input](v25, "input"), a5) & 1) == 0)
  {
    goto LABEL_26;
  }
  objc_msgSend(v22, "addObject:", objc_msgSend(a2, "connection"));
  IOSurfaceRef v26 = [(BWNode *)v25 output];
  if (a6 >= 1)
  {
    uint64_t v27 = (a6 + 1);
    IOSurfaceRef v28 = [[BWFanOutNode alloc] initWithFanOutCount:v27 mediaType:1986618469];
    [(BWNode *)v28 setName:@"Post Smart Camera Inferences Fan Out"];
    if (([a1 addNode:v28 error:&v34] & 1) == 0
      || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", v26, -[BWNode input](v28, "input"), a5) & 1) == 0)
    {
      goto LABEL_26;
    }
    objc_msgSend(v22, "addObject:", -[BWNodeOutput connection](v26, "connection"));
    IOSurfaceRef v26 = [(NSArray *)[(BWNode *)v28 outputs] objectAtIndexedSubscript:0];
    if (v21)
    {
      uint64_t v29 = 1;
      do
      {
        objc_msgSend(v21, "addObject:", -[NSArray objectAtIndexedSubscript:](-[BWNode outputs](v28, "outputs"), "objectAtIndexedSubscript:", v29));
        [(BWFanOutNode *)v28 setDiscardsAttachedMedia:1 forOutputIndex:v29++];
      }
      while (v27 != v29);
    }
  }
  IOSurfaceRef v30 = -[BWSceneClassifierSinkNode initWithCaptureDevice:version:sinkID:]([BWSceneClassifierSinkNode alloc], "initWithCaptureDevice:version:sinkID:", a8, v23, [a1 sinkID]);
  if (([a1 addNode:v30 error:&v34] & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", v26, -[BWNode input](v30, "input"), a5) & 1) == 0)
  {
LABEL_26:
    fig_log_get_emitter();
    goto LABEL_27;
  }
  *a12 = v30;
  objc_msgSend(v22, "addObject:", -[BWNodeOutput connection](v26, "connection"));
  objc_msgSend((id)objc_msgSend(a1, "graph"), "enableConcurrentPrepareForNode:", v30);
  if (v32) {
    *IOSurfaceRef v32 = v22;
  }
  if (a11) {
    *a11 = v21;
  }
LABEL_22:
  id result = v34;
  if (v34) {
    return (id)[v34 code];
  }
  return result;
}

uint64_t BWSmartCameraSceneInitialize(uint64_t result, char a2, __int16 a3, __int16 a4, uint64_t a5, float a6, float a7, float a8)
{
  *(unsigned char *)id result = a2;
  *(unsigned char *)(result + 1) = 0;
  *(float *)(result + 4) = a8;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x4E0], 8) = 2143289344;
  *(float *)(result + 12) = a6;
  *(float *)(result + 16) = a7;
  *(_WORD *)(result + 20) = a3;
  *(_WORD *)(result + 22) = a4;
  *(_WORD *)(result + 24) = 0;
  *(unsigned char *)(result + 26) = 0;
  *(void *)(result + 32) = a5;
  return result;
}

BWInferenceNode *FigCaptureCreateAndConfigureSmartCameraInferenceNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = [[BWInferenceNode alloc] initWithConvEngineSupportWithCaptureDevice:a3 scheduler:a4 priority:a1];
  [(BWNode *)v7 setName:@"Smart Camera Inference Node"];
  uint64_t v8 = [[BWInferenceConfiguration alloc] initWithInferenceType:101];
  LODWORD(v9) = 5.0;
  [(BWInferenceConfiguration *)v8 setMaximumFramesPerSecond:v9];
  if ([(BWInferenceNode *)v7 addInferenceOfType:101 version:a2 & 0xFFFFFFFFFFFFLL configuration:v8])
  {
    return 0;
  }
  [(BWInferenceNode *)v7 setApplyRecommendedMasterPortType:1];
  if (a5)
  {
    uint64_t v10 = [[BWInferenceConfiguration alloc] initWithInferenceType:130];
    [(BWInferenceConfiguration *)v10 setPriority:13];
    LODWORD(v11) = 5.0;
    [(BWInferenceConfiguration *)v10 setMaximumFramesPerSecond:v11];
    [(BWInferenceNode *)v7 addInferenceOfType:130 version:BWInferenceVersionMakeMajor(1) & 0xFFFFFFFFFFFFLL configuration:v10];
  }
  return v7;
}

void *BWInferenceSmartCameraOutputs(unsigned __int16 a1)
{
  double v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:4];
  if (a1 >= 5uLL)
  {
    uint64_t v3 = *MEMORY[0x1E4F54D58];
    v12[0] = *MEMORY[0x1E4F54D50];
    v12[1] = v3;
    uint64_t v4 = *MEMORY[0x1E4F54D88];
    v12[2] = *MEMORY[0x1E4F54D70];
    v12[3] = v4;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 4), @"semdev/probabilities");
    uint64_t v11 = *MEMORY[0x1E4F54D90];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v11, 1), @"text/probabilities");
    uint64_t v10 = *MEMORY[0x1E4F54D98];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v10, 1), @"water/probabilities");
    uint64_t v5 = *MEMORY[0x1E4F54D40];
    v9[0] = *MEMORY[0x1E4F54D38];
    v9[1] = v5;
    uint64_t v6 = *MEMORY[0x1E4F54D60];
    _OWORD v9[2] = *MEMORY[0x1E4F54D48];
    void v9[3] = v6;
    uint64_t v7 = *MEMORY[0x1E4F54D78];
    v9[4] = *MEMORY[0x1E4F54D68];
    v9[5] = v7;
    v9[6] = *MEMORY[0x1E4F54D80];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v9, 7), @"leaf/probabilities");
  }
  return v2;
}

uint64_t FigCaptureDeviceGetClassID()
{
  return sFigCaptureDeviceID;
}

uint64_t ptn_rotationDegreesAndMirroringFromLiveConfiguration(uint64_t result, int a2, int a3, char *a4)
{
  if (a2 & a3)
  {
LABEL_2:
    char v5 = a2 & a3 ^ 1;
    id result = FigCaptureNormalizeAngle((int)result + 180);
    if (!a4) {
      return result;
    }
    goto LABEL_7;
  }
  if ((a2 & 1) == 0 && !a3)
  {
    char v5 = 0;
    if (!a4) {
      return result;
    }
    goto LABEL_7;
  }
  if (result == 270 || result == 90)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_2;
    }
  }
  else if (a3)
  {
    goto LABEL_2;
  }
  char v5 = 1;
  if (!a4) {
    return result;
  }
LABEL_7:
  *a4 = v5;
  return result;
}

uint64_t FigCaptureExifOrientationFromRotationDegreesAndMirroring(int a1, int a2)
{
  if (a2) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 3;
  }
  if (a2) {
    int v3 = 5;
  }
  else {
    int v3 = 8;
  }
  if (a1 != 270) {
    int v3 = 1;
  }
  if (a1 != 180) {
    unsigned int v2 = v3;
  }
  if (a2) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  if (a2) {
    int v5 = 7;
  }
  else {
    int v5 = 6;
  }
  if (a1 == 90) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 1;
  }
  if (!a1) {
    unsigned int v6 = v4;
  }
  if (a1 <= 179) {
    return v6;
  }
  else {
    return v2;
  }
}

uint64_t FigCaptureNormalizeAngle(int a1)
{
  if (a1 % 360 >= 0) {
    return (a1 % 360);
  }
  else {
    return (a1 % 360 + 360);
  }
}

uint64_t FigCaptureRotationDegreesAndMirroringFromExifOrientation(int a1, char *a2)
{
  switch(a1)
  {
    case 2:
      uint64_t result = 0;
      char v3 = 1;
      if (a2) {
        goto LABEL_17;
      }
      return result;
    case 3:
      char v3 = 0;
      goto LABEL_8;
    case 4:
      char v3 = 1;
LABEL_8:
      uint64_t result = 180;
      if (!a2) {
        return result;
      }
      goto LABEL_17;
    case 5:
      char v3 = 1;
      goto LABEL_16;
    case 6:
      char v3 = 0;
      goto LABEL_13;
    case 7:
      char v3 = 1;
LABEL_13:
      uint64_t result = 90;
      if (!a2) {
        return result;
      }
      goto LABEL_17;
    case 8:
      char v3 = 0;
LABEL_16:
      uint64_t result = 270;
      if (a2) {
        goto LABEL_17;
      }
      return result;
    default:
      uint64_t result = 0;
      char v3 = 0;
      if (!a2) {
        return result;
      }
LABEL_17:
      *a2 = v3;
      return result;
  }
}

uint64_t FigCaptureVTRotationFromDegrees(int a1)
{
  uint64_t result = 0;
  if (a1 > 179)
  {
    if (a1 == 180)
    {
      uint64_t v3 = MEMORY[0x1E4F45350];
    }
    else
    {
      if (a1 != 270) {
        return result;
      }
      uint64_t v3 = MEMORY[0x1E4F45358];
    }
  }
  else if (a1)
  {
    if (a1 != 90) {
      return result;
    }
    uint64_t v3 = MEMORY[0x1E4F45360];
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F45348];
  }
  return *(void *)v3;
}

BOOL BWColorSpacePropertiesIsHDR(int a1)
{
  return (a1 - 5) < 3;
}

uint64_t __rqReceiverCreate_block_invoke_3(uint64_t a1)
{
  return MEMORY[0x1F40CBB78](*(void *)(a1 + 32), 40, figremotequeue_server);
}

uint64_t BWPixelBufferColorSpace(__CVBuffer *a1)
{
  if (BWPixelBufferIsHDR(a1)) {
    return 1;
  }
  CFDictionaryRef v3 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v3) {
    CFTypeRef v4 = CFAutorelease(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  return 2
       * (+[BWVideoFormat colorSpacePropertiesForPixelBufferAttachments:v4] == 10);
}

BOOL BWPixelBufferIsHDR(__CVBuffer *a1)
{
  CFDictionaryRef v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v1) {
    CFTypeRef v2 = CFAutorelease(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  return +[BWVideoFormat colorSpacePropertiesForPixelBufferAttachments:v2]- 5 < 3;
}

void sub_1A5995E1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t getDKTrackingAgentClass()
{
  uint64_t v2 = 0;
  CFDictionaryRef v3 = &v2;
  uint64_t v4 = 0x3052000000;
  int v5 = __Block_byref_object_copy__36;
  unsigned int v6 = __Block_byref_object_dispose__36;
  uint64_t v0 = getDKTrackingAgentClass_softClass;
  uint64_t v7 = getDKTrackingAgentClass_softClass;
  if (!getDKTrackingAgentClass_softClass)
  {
    DockKitCoreLibraryCore();
    v3[5] = (uint64_t)objc_getClass("DKTrackingAgent");
    getDKTrackingAgentClass_softClass = v3[5];
    uint64_t v0 = v3[5];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5995F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DockKitCoreLibraryCore()
{
  if (!DockKitCoreLibraryCore_frameworkLibrary) {
    DockKitCoreLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  return DockKitCoreLibraryCore_frameworkLibrary;
}

void sub_1A5996194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void captureSession_buildGraphDidBecomeLiveObserver(uint64_t a1, int a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v46 = DerivedStorage;
  int v5 = *(void **)(DerivedStorage + 664);
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  unsigned int v6 = (void *)[v5 previewSinkPipelines];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v65 objects:v73 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v43 = 0;
    uint64_t v9 = *(void *)v66;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v66 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v65 + 1) + 8 * i);
        if (objc_msgSend(v11, "imageQueueSinkNode", v43))
        {
          uint64_t v12 = objc_msgSend(v5, "cameraSourcePipelineWithSourceID:", objc_msgSend(v11, "sourceID"));
          int v13 = [v11 depthFilterRenderingEnabled];
          if ((unint64_t)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v12), "captureStreams"), "count") > 1)int v14 = 1; {
          else
          }
            int v14 = v13;
          a2 |= v14;
          if ((a2 & 1) != 0 && [v11 previewSinkEnabled])
          {
            id v15 = v43;
            if (!v43) {
              id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            objc_msgSend(v15, "addObject:", v11, v15);
          }
          objc_msgSend(v4, "addObject:", objc_msgSend(v11, "imageQueueSinkNode"));
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v65 objects:v73 count:16];
    }
    while (v8);
  }
  else
  {
    uint64_t v43 = 0;
  }
  CFTypeRef v16 = v43;
  if (objc_msgSend(v43, "count", v43))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 360));
    *(void *)(v46 + 472) = v16;
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 360));
    uint64_t v17 = 0;
  }
  else
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    unsigned int v25 = (void *)[v5 previewSinkPipelines];
    uint64_t v26 = [v25 countByEnumeratingWithState:&v61 objects:v72 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v62;
LABEL_44:
      uint64_t v29 = 0;
      while (1)
      {
        if (*(void *)v62 != v28) {
          objc_enumerationMutation(v25);
        }
        IOSurfaceRef v30 = *(void **)(*((void *)&v61 + 1) + 8 * v29);
        if ([v30 imageQueueSinkNode]) {
          break;
        }
        if (v27 == ++v29)
        {
          uint64_t v27 = [v25 countByEnumeratingWithState:&v61 objects:v72 count:16];
          if (v27) {
            goto LABEL_44;
          }
          goto LABEL_52;
        }
      }
      uint64_t v17 = [v30 imageQueueSinkNode];
      if (v17) {
        goto LABEL_22;
      }
    }
LABEL_52:
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    IOSurfaceRef v31 = (void *)[v5 videoDataSinkPipelines];
    uint64_t v32 = [v31 countByEnumeratingWithState:&v57 objects:v71 count:16];
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)v58;
LABEL_54:
      uint64_t v35 = 0;
      while (1)
      {
        if (*(void *)v58 != v34) {
          objc_enumerationMutation(v31);
        }
        IOSurfaceRef v36 = *(void **)(*((void *)&v57 + 1) + 8 * v35);
        if ([v36 sinkNode]) {
          break;
        }
        if (v33 == ++v35)
        {
          uint64_t v33 = [v31 countByEnumeratingWithState:&v57 objects:v71 count:16];
          if (v33) {
            goto LABEL_54;
          }
          goto LABEL_65;
        }
      }
      uint64_t v17 = [v36 sinkNode];
      if (v17) {
        goto LABEL_22;
      }
    }
LABEL_65:
    uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "audioDataSinkPipelines"), "firstObject"), "sinkNode");
    if (!v17)
    {
      uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "stillImageSinkPipelineSessionStorages"), "firstObject"), "stillImageSinkPipeline"), "stillImageSinkNode");
      if (!v17)
      {
        uint64_t v17 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes](objc_msgSend((id)objc_msgSend(v5, "movieFileSinkPipelines"), "firstObject")), "firstObject");
        if (!v17)
        {
          uint64_t v17 = -[FigCaptureAudioFileSinkPipeline audioFileSinkNode](objc_msgSend((id)objc_msgSend(v5, "audioFileSinkPipelines"), "firstObject"));
          if (!v17)
          {
            uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "metadataSinkPipelines"), "firstObject"), "sinkNode");
            if (!v17)
            {
              long long v55 = 0u;
              long long v56 = 0u;
              long long v54 = 0u;
              long long v53 = 0u;
              IOSurfaceRef v37 = (void *)[v5 depthDataSinkPipelines];
              uint64_t v38 = [v37 countByEnumeratingWithState:&v53 objects:v70 count:16];
              if (v38)
              {
                uint64_t v39 = v38;
                uint64_t v40 = *(void *)v54;
LABEL_72:
                uint64_t v41 = 0;
                while (1)
                {
                  if (*(void *)v54 != v40) {
                    objc_enumerationMutation(v37);
                  }
                  IOSurfaceRef v42 = *(void **)(*((void *)&v53 + 1) + 8 * v41);
                  if ([v42 sinkNode]) {
                    break;
                  }
                  if (v39 == ++v41)
                  {
                    uint64_t v39 = [v37 countByEnumeratingWithState:&v53 objects:v70 count:16];
                    if (v39) {
                      goto LABEL_72;
                    }
                    goto LABEL_80;
                  }
                }
                uint64_t v17 = [v42 sinkNode];
                if (v17) {
                  goto LABEL_22;
                }
              }
LABEL_80:
              uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "visionDataSinkPipelines"), "firstObject"), "sinkNode");
              if (!v17)
              {
                uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "pointCloudDataSinkPipelines"), "firstObject"), "sinkNode");
                if (!v17) {
                  uint64_t v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "cameraCalibrationDataSinkPipelines"), "firstObject"), "sinkNode");
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_22:
  if ([v44 count] || v17)
  {
    if (v17 && ([v4 containsObject:v17] & 1) == 0) {
      [v4 addObject:v17];
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v18 = [v4 countByEnumeratingWithState:&v49 objects:v69 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = 0;
      uint64_t v21 = *(void *)v50;
      do
      {
        for (uint64_t j = 0; j != v19; ++j)
        {
          if (*(void *)v50 != v21) {
            objc_enumerationMutation(v4);
          }
          uint64_t v23 = *(void *)(*((void *)&v49 + 1) + 8 * j);
          IOSurfaceRef v24 = [[FigBWNodeRenderObserver alloc] initWithBWNode:v23];
          [(FigBWNodeRenderObserver *)v24 setWillRenderSampleBufferHandler:0];
          v47[0] = MEMORY[0x1E4F143A8];
          v47[1] = 3221225472;
          v47[2] = __captureSession_buildGraphDidBecomeLiveObserver_block_invoke;
          v47[3] = &__block_descriptor_49_e37_v32__0__BWFormat_8__BWNodeInput_16q24l;
          v47[4] = v46;
          v47[5] = a1;
          BOOL v48 = v23 == v17;
          [(FigBWNodeRenderObserver *)v24 setFormatDidBecomeLiveHandler:v47];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (!v20) {
              id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            [v20 addObject:v24];
          }
          if (v23 == v17) {
            *(void *)(v46 + 672) = v24;
          }
          else {
        }
          }
        uint64_t v19 = [v4 countByEnumeratingWithState:&v49 objects:v69 count:16];
      }
      while (v19);
    }
    else
    {
      id v20 = 0;
    }
    *(void *)(v46 + 680) = v20;
  }
}

void *cs_findOwnerOfUpstreamPoolFeedingInput(void *a1)
{
  while (1)
  {
    CFDictionaryRef v1 = objc_msgSend((id)objc_msgSend(a1, "connection"), "output");
    uint64_t v2 = v1;
    if (!v1 || ![v1 passthroughMode]) {
      break;
    }
    a1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "node"), "inputs"), "objectAtIndexedSubscript:", (int)objc_msgSend(v2, "indexOfInputWhichDrivesThisOutput"));
  }
  return v2;
}

void captureSession_startDeferredGraphSetupOnWorkerQueueAfter(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 112))
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke;
    void v9[3] = &__block_descriptor_40_e8_v12__0B8l;
    v9[4] = DerivedStorage;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(a1, *(void *)(v6 + 640), (uint64_t)v9, 0.0);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke_2;
  v8[3] = &__block_descriptor_48_e8_v12__0B8l;
  v8[4] = v5;
  v8[5] = a1;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(a1, *(void *)(v7 + 640), (uint64_t)v8, a2);
}

void captureSession_dispatchGraphCalloutToWorkerQueueAfter(const void *a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 640);
  captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(a1, v6, a2, a3);
}

BOOL FigCaptureMetadataUtilitiesDenormalizeCropRect(double a1, double a2, double a3, double a4)
{
  return CGRectIsEmpty(*(CGRect *)&a1);
}

uint64_t captureSource_setPropertyInternal(const void *a1, const void *Value, const __CFDictionary *a3)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (CFEqual(Value, @"ActiveFormat_FigCaptureSessionOnly"))
  {
    uint64_t v9 = kFigCaptureSourceProperty_ActiveFormat;
  }
  else if (CFEqual(Value, @"ActiveMaxFrameRate_FigCaptureSessionOnly"))
  {
    uint64_t v9 = kFigCaptureSourceProperty_ActiveMaxFrameRate;
  }
  else
  {
    if (!CFEqual(Value, @"ActiveMinFrameRate_FigCaptureSessionOnly")) {
      goto LABEL_9;
    }
    uint64_t v9 = kFigCaptureSourceProperty_ActiveMinFrameRate;
  }
  if (!*v9)
  {
LABEL_9:
    int v11 = CFEqual(Value, @"PropertySetByProxy");
    if (v11)
    {
      if (!*(unsigned char *)(DerivedStorage + 241))
      {
        FigDebugAssert3();
        return 4294954516;
      }
      CFNumberRef Value = CFDictionaryGetValue(a3, @"PropertyKey");
      a3 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"PropertyValue");
    }
    else if (CFEqual(Value, @"VideoZoomFactor"))
    {
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
LABEL_15:
      if (CFEqual(Value, @"PrewarmingEnabled"))
      {
        uint64_t v10 = 0;
        *(unsigned char *)(DerivedStorage + 240) = [(__CFDictionary *)a3 BOOLValue];
        return v10;
      }
      if (CFEqual(Value, @"HasProxy"))
      {
        uint64_t v10 = 0;
        *(unsigned char *)(DerivedStorage + 241) = [(__CFDictionary *)a3 BOOLValue];
        return v10;
      }
      if (*(unsigned char *)(DerivedStorage + 241)) {
        id v13 = (id)[*(id *)(DerivedStorage + 176) objectForKeyedSubscript:Value];
      }
      else {
        id v13 = 0;
      }
      if (!*(unsigned char *)(DerivedStorage + 13))
      {
        if (!CFEqual(Value, @"TorchLevel")) {
          goto LABEL_35;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(__CFDictionary *)a3 floatValue];
          captureSource_handleThirdPartyTorchLevelCommand(a1, v15);
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, @"ActiveMinFrameRate"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          *(float *)&double v14 = (float)(int)[(__CFDictionary *)a3 intValue];
          [*(id *)(DerivedStorage + 80) setMinimumFrameRate:v14];
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, @"ActiveMaxFrameRate"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(__CFDictionary *)a3 floatValue];
          objc_msgSend(*(id *)(DerivedStorage + 80), "setMaximumFrameRate:");
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, @"ActiveDepthDataMaxFrameRate"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(__CFDictionary *)a3 floatValue];
          objc_msgSend(*(id *)(DerivedStorage + 80), "setDepthMaxFrameRate:");
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, @"FocusOperation"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v18 = captureSource_setFocusOperation((uint64_t)a1, a3);
LABEL_40:
          uint64_t v10 = v18;
          goto LABEL_41;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
LABEL_90:
        FigDebugAssert3();
        uint64_t v18 = FigSignalErrorAt();
        goto LABEL_40;
      }
      if (CFEqual(Value, @"CinematicVideoFocusOperation"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [*(id *)(DerivedStorage + 80) setCinematicVideoFocus:a3];
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, @"ObservedPropertyCounts"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          uint64_t v19 = [(__CFDictionary *)a3 countByEnumeratingWithState:&v87 objects:v100 count:16];
          if (v19)
          {
            uint64_t v20 = v19;
            uint64_t v21 = *(void *)v88;
            id v76 = v13;
            do
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if (*(void *)v88 != v21) {
                  objc_enumerationMutation(a3);
                }
                objc_msgSend(*(id *)(DerivedStorage + 80), "setProperty:isObserved:", *(void *)(*((void *)&v87 + 1) + 8 * i), (int)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", *(void *)(*((void *)&v87 + 1) + 8 * i)), "intValue") > 0);
              }
              uint64_t v20 = [(__CFDictionary *)a3 countByEnumeratingWithState:&v87 objects:v100 count:16];
              id v13 = v76;
            }
            while (v20);
          }
          goto LABEL_35;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      id v77 = v13;
      if (CFEqual(Value, @"ExposureOperation"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = captureSource_setExposureOperation((uint64_t)a1, a3);
LABEL_60:
          uint64_t v10 = v23;
          goto LABEL_41;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"ActiveMaxExposureDuration"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          memset(v93, 0, 24);
          CMTimeMakeFromDictionary((CMTime *)v93, a3);
          IOSurfaceRef v24 = *(void **)(DerivedStorage + 80);
          origiuint64_t n = v93[0].origin;
          CGFloat width = v93[0].size.width;
          [v24 setMaxExposureDurationClientOverride:&origin];
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"ExposureTargetBiasOperation"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = captureSource_setExposureTargetBiasOperation((uint64_t)a1, a3);
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"WhiteBalanceOperation"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = captureSource_setWhiteBalanceOperation((uint64_t)a1, a3);
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"TorchLevel"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unsigned int v25 = *(void **)(DerivedStorage + 80);
          [(__CFDictionary *)a3 floatValue];
          uint64_t v23 = objc_msgSend(v25, "setTorchLevel:");
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"AutoTorchEnabled"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setAutomaticallyAdjustsTorch:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"ProvidesStortorgetMetadata"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setProvidesStortorgetMetadata:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"AutoAdjustImageControlMode"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setAutomaticallyAdjustsImageControlMode:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"ImageControlMode"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setImageControlMode:", -[__CFDictionary intValue](a3, "intValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"TimeLapseCaptureRate"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v26 = *(void **)(DerivedStorage + 80);
          [(__CFDictionary *)a3 floatValue];
          objc_msgSend(v26, "setTimeLapseCaptureRate:");
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"UltraHighResolutionZeroShutterLagEnabled"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          objc_msgSend(*(id *)(DerivedStorage + 80), "setUltraHighResolutionZeroShutterLagEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"FaceDrivenAEAFMode"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = captureSource_setFaceDrivenAEAFMode((uint64_t)a1, [(__CFDictionary *)a3 intValue]);
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"FaceDetectionConfiguration"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [*(id *)(DerivedStorage + 80) setFaceDetectionConfiguration:a3];
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"StillImageSceneMonitoringConfiguration"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:", objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"FlashMode"), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"HDRMode"), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"QualityPrioritization"), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"DigitalFlashMode"),
                    "intValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"VideoZoomFactor"))
      {
        if (isKindOfClass)
        {
          uint64_t v27 = (void *)[(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomFactor"];
          uint64_t v28 = (void *)[(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomRampRate"];
          uint64_t v29 = (void *)[(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomRampDuration"];
          IOSurfaceRef v30 = (void *)[(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomRampType"];
          IOSurfaceRef v31 = (void *)[(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomRampTuning"];
          uint64_t v32 = [(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomRampCommandID"];
          if (v27)
          {
            if (v28)
            {
              if (v29)
              {
                if (v30)
                {
                  if (v31)
                  {
                    uint64_t v33 = (void *)v32;
                    if (v32)
                    {
                      [v27 floatValue];
                      int v35 = v34;
                      if ([v30 intValue] == 3)
                      {
                        uint64_t v36 = [v31 intValue] + 1;
                        IOSurfaceRef v37 = *(void **)(DerivedStorage + 80);
                        uint64_t v38 = [v33 intValue];
                        LODWORD(v39) = v35;
                        [v37 rampToVideoZoomFactor:v36 withTuning:v38 commandID:v39];
                      }
                      else
                      {
                        uint64_t v43 = *(void **)(DerivedStorage + 80);
                        uint64_t v44 = [v30 intValue];
                        [v28 floatValue];
                        int v46 = v45;
                        [v29 doubleValue];
                        double v48 = v47;
                        uint64_t v49 = [v33 intValue];
                        LODWORD(v50) = v35;
                        LODWORD(v51) = v46;
                        [v43 rampToVideoZoomFactor:v44 withRampType:v49 rate:v50 duration:v51 commandID:v48];
                      }
                      id v13 = v77;
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
          FigDebugAssert3();
          uint64_t v10 = 4294954516;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v10 = FigSignalErrorAt();
            if (v10) {
              goto LABEL_140;
            }
            goto LABEL_137;
          }
          [(__CFDictionary *)a3 floatValue];
          objc_msgSend(*(id *)(DerivedStorage + 80), "setZoomFactor:");
          [*(id *)(DerivedStorage + 176) setObject:a3 forKeyedSubscript:Value];
          if (*(unsigned char *)(DerivedStorage + 241))
          {
            uint64_t v40 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
            [v40 setObject:v13 forKeyedSubscript:@"OldPropertyValue"];
            [v40 setObject:a3 forKeyedSubscript:@"NewPropertyValue"];
            uint64_t v41 = &kFigCaptureSourceNotificationKey_ClientShouldIgnoreNotification;
            if (v11) {
              uint64_t v41 = &kFigCaptureSourceNotificationKey_ProxyShouldIgnoreNotification;
            }
            [v40 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*v41];
            captureSource_postNotificationWithPayload(a1, Value, v40);
            goto LABEL_139;
          }
          uint64_t v10 = 0;
        }
        goto LABEL_147;
      }
      if (CFEqual(Value, @"VideoZoomRampAcceleration")) {
        goto LABEL_35;
      }
      if (CFEqual(Value, @"SubjectAreaChangeMonitoringEnabled"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setSubjectAreaChangeMonitoringEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"BravoCameraSelection"))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          v93[0].origin.double x = 0.0;
          v93[0].origin.double y = 0.0;
          [(__CFDictionary *)a3 getBytes:v93 length:16];
          objc_msgSend(*(id *)(DerivedStorage + 80), "setBravoStreamSelectionConfiguration:", *(void *)&v93[0].origin.x, *(void *)&v93[0].origin.y);
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"EligibleFallbackCaptureSourceDeviceTypes"))
      {
        if (!a3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          int v52 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Position"), "intValue");
          long long v53 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v83 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          uint64_t v54 = [(__CFDictionary *)a3 countByEnumeratingWithState:&v83 objects:v99 count:16];
          if (v54)
          {
            uint64_t v55 = v54;
            uint64_t v56 = *(void *)v84;
            do
            {
              for (uint64_t j = 0; j != v55; ++j)
              {
                if (*(void *)v84 != v56) {
                  objc_enumerationMutation(a3);
                }
                objc_msgSend(v53, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(v52, objc_msgSend(*(id *)(*((void *)&v83 + 1) + 8 * j), "intValue")));
              }
              uint64_t v55 = [(__CFDictionary *)a3 countByEnumeratingWithState:&v83 objects:v99 count:16];
            }
            while (v55);
          }
          [*(id *)(DerivedStorage + 80) setBravoStreamSelectionEligibleFallbackPortTypes:v53];
          goto LABEL_64;
        }
        uint64_t v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, @"NonDestructiveCropSize"))
      {
        v93[0].origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB30];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        if (!CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)v93))
        {
          uint64_t v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        objc_msgSend(*(id *)(DerivedStorage + 80), "setNonDestructiveCropSize:", v93[0].origin.x, v93[0].origin.y);
        uint64_t v10 = 0;
      }
      else
      {
        if (!CFEqual(Value, @"AutoFlashEnabled"))
        {
          if (CFEqual(Value, @"StillImageStabilizationAutomaticallyEnabled"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v61 = [(__CFDictionary *)a3 BOOLValue];
              [*(id *)(DerivedStorage + 80) setStillImageStabilizationSceneDetectionEnabled:v61];
              long long v62 = (void *)[*(id *)(DerivedStorage + 176) objectForKeyedSubscript:@"StillImageSceneMonitoringConfiguration"];
              v95[0] = @"FlashMode";
              v96[0] = objc_msgSend(v62, "objectForKeyedSubscript:");
              v95[1] = @"HDRMode";
              v96[1] = objc_msgSend(v62, "objectForKeyedSubscript:");
              v95[2] = @"QualityPrioritization";
              if (v61) {
                uint64_t v63 = 2;
              }
              else {
                uint64_t v63 = 1;
              }
              v96[2] = [NSNumber numberWithInt:v63];
              v95[3] = @"DigitalFlashMode";
              v96[3] = objc_msgSend(v62, "objectForKeyedSubscript:");
              objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v96, v95, 4), @"StillImageSceneMonitoringConfiguration");
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"ResumeAdjustingFocusNotifications_FigCaptureSessionOnly"))
          {
            if (*(unsigned char *)(DerivedStorage + 230))
            {
              long long v64 = *(void **)(DerivedStorage + 80);
              v82[0] = MEMORY[0x1E4F143A8];
              v82[1] = 3221225472;
              v82[2] = __captureSource_setPropertyInternal_block_invoke;
              v82[3] = &__block_descriptor_48_e5_v8__0l;
              v82[4] = DerivedStorage;
              v82[5] = a1;
              [v64 performBlockOnNotificationQueue:v82];
            }
            goto LABEL_35;
          }
          if (CFEqual(Value, @"VideoHDRSuspended"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v65 = [(__CFDictionary *)a3 BOOLValue];
              long long v78 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v66 = (void *)[*(id *)(DerivedStorage + 80) captureStreams];
              uint64_t v67 = [v66 countByEnumeratingWithState:&v78 objects:v94 count:16];
              if (v67)
              {
                uint64_t v68 = v67;
                uint64_t v69 = *(void *)v79;
                do
                {
                  for (uint64_t k = 0; k != v68; ++k)
                  {
                    if (*(void *)v79 != v69) {
                      objc_enumerationMutation(v66);
                    }
                    [*(id *)(*((void *)&v78 + 1) + 8 * k) setHighlightRecoverySuspended:v65];
                  }
                  uint64_t v68 = [v66 countByEnumeratingWithState:&v78 objects:v94 count:16];
                  id v13 = v77;
                }
                while (v68);
              }
              goto LABEL_35;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"DigitalFlashMode"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setStreamingDigitalFlashMode:", -[__CFDictionary intValue](a3, "intValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"GlobalToneMappingEnabled"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setGlobalToneMappingEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"OverheadCameraMode"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setOverheadCameraMode:", -[__CFDictionary intValue](a3, "intValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"CenterStageRectOfInterest"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              memset(v93, 0, 32);
              CGRectMakeWithDictionaryRepresentation(a3, v93);
              objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageRectOfInterest:", v93[0].origin.x, v93[0].origin.y, v93[0].size.width, v93[0].size.height);
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"CenterStageFramingMode"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageFramingMode:", -[__CFDictionary intValue](a3, "intValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"CenterStageMetadataDeliveryEnabled"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageMetadataDeliveryEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"StartPanningAtPoint"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              v93[0].origin.double x = 0.0;
              v93[0].origin.double y = 0.0;
              CGPointMakeWithDictionaryRepresentation(a3, &v93[0].origin);
              objc_msgSend(*(id *)(DerivedStorage + 80), "startPanningAtPoint:", v93[0].origin.x, v93[0].origin.y);
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"PanWithTranslation"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              v93[0].origin.double x = 0.0;
              v93[0].origin.double y = 0.0;
              CGPointMakeWithDictionaryRepresentation(a3, &v93[0].origin);
              objc_msgSend(*(id *)(DerivedStorage + 80), "panWithTranslation:", v93[0].origin.x, v93[0].origin.y);
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"PortraitEffectStudioLightQuality"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setPortraitEffectStudioLightQuality:", (int)-[__CFDictionary intValue](a3, "intValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"BackgroundBlurAperture"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              [(__CFDictionary *)a3 floatValue];
              objc_msgSend(*(id *)(DerivedStorage + 80), "setBackgroundBlurAperture:");
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"StudioLightingIntensity"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              [(__CFDictionary *)a3 floatValue];
              objc_msgSend(*(id *)(DerivedStorage + 80), "setStudioLightingIntensity:");
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"GesturesEnabled"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setGesturesEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"BackgroundReplacementPixelBuffer"))
          {
            if (!a3 || (CFTypeID v71 = CFGetTypeID(a3), v71 == CVPixelBufferGetTypeID()))
            {
              [*(id *)(DerivedStorage + 80) setBackgroundReplacementPixelBuffer:a3];
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"PerformOneShotFraming"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([(__CFDictionary *)a3 BOOLValue]) {
                [*(id *)(DerivedStorage + 80) performOneShotFraming];
              }
              goto LABEL_35;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"ResetFraming"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([(__CFDictionary *)a3 BOOLValue]) {
                [*(id *)(DerivedStorage + 80) resetFraming];
              }
              goto LABEL_35;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"CenterStageFieldOfViewRestrictedToWide"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageFieldOfViewRestrictedToWide:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
              goto LABEL_64;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, @"Hidden"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([*(id *)(DerivedStorage + 80) device])
              {
                objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 80), "device"), "setPropertyIfSupported:value:", @"Hidden", a3);
              }
              else
              {
                if (!dword_1EB4C4FD0) {
                  goto LABEL_35;
                }
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
LABEL_64:
              id v13 = v77;
              goto LABEL_35;
            }
            uint64_t v75 = v3;
            LODWORD(v74) = 0;
LABEL_184:
            FigDebugAssert3();
LABEL_185:
            uint64_t v23 = FigSignalErrorAt();
            goto LABEL_60;
          }
          if (CFEqual(Value, @"DeskViewEnabled"))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v23 = captureSource_setDeskViewEnabled((uint64_t)a1, [(__CFDictionary *)a3 BOOLValue]);
              goto LABEL_60;
            }
            goto LABEL_185;
          }
          if ([*(id *)(DerivedStorage + 80) device] && BWDeviceTypeIsExtensionDeviceType(v8))
          {
            if (dword_1EB4C4FD0)
            {
              int v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v23 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 80), "device", v74, v75), "setProperty:value:", Value, a3);
            goto LABEL_60;
          }
          uint64_t v10 = 4294954512;
LABEL_147:
          id v13 = v77;
          if (!v77) {
            return v10;
          }
          goto LABEL_141;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        v93[0].origin.double x = 0.0;
        uint64_t v58 = [(__CFDictionary *)a3 BOOLValue];
        [*(id *)(DerivedStorage + 80) setAutoFlashEnabled:v58 error:v93];
        uint64_t v10 = [*(id *)&v93[0].origin.x code];
        long long v59 = (void *)[*(id *)(DerivedStorage + 176) objectForKeyedSubscript:@"StillImageSceneMonitoringConfiguration"];
        v97[0] = @"FlashMode";
        if (v58) {
          uint64_t v60 = 2;
        }
        else {
          uint64_t v60 = 0;
        }
        v98[0] = [NSNumber numberWithInt:v60];
        v97[1] = @"HDRMode";
        v98[1] = objc_msgSend(v59, "objectForKeyedSubscript:");
        v97[2] = @"QualityPrioritization";
        v98[2] = objc_msgSend(v59, "objectForKeyedSubscript:");
        v97[3] = @"DigitalFlashMode";
        v98[3] = objc_msgSend(v59, "objectForKeyedSubscript:");
        objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v98, v97, 4), @"StillImageSceneMonitoringConfiguration");
      }
LABEL_41:
      if (v10) {
        goto LABEL_140;
      }
LABEL_35:
      if (isKindOfClass)
      {
LABEL_36:
        uint64_t v16 = [(__CFDictionary *)a3 objectForKeyedSubscript:@"ZoomFactor", v74, v75];
        uint64_t v17 = *(void **)(DerivedStorage + 176);
LABEL_138:
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, Value, v74);
LABEL_139:
        uint64_t v10 = 0;
LABEL_140:
        if (!v13) {
          return v10;
        }
LABEL_141:
        CFRelease(v13);
        return v10;
      }
LABEL_137:
      uint64_t v17 = *(void **)(DerivedStorage + 176);
      uint64_t v16 = (uint64_t)a3;
      goto LABEL_138;
    }
    char isKindOfClass = 0;
    goto LABEL_15;
  }
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", a3);
  return 0;
}

uint64_t captureSource_setWhiteBalanceOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = (void *)[a2 objectForKeyedSubscript:@"WhiteBalanceMode"];
  if (!v5) {
    goto LABEL_12;
  }
  int v6 = [v5 intValue];
  if (!v6)
  {
    uint64_t v9 = (void *)[a2 objectForKeyedSubscript:@"DeviceWhiteBalanceGains"];
    if (v9)
    {
      uint64_t v10 = v9;
      if ([v9 length] == 12)
      {
        int v16 = 0;
        uint64_t v15 = 0;
        [v10 getBytes:&v15 length:12];
        uint64_t v11 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"RequestID"), "intValue");
        LODWORD(v13) = HIDWORD(v15);
        LODWORD(v12) = v15;
        LODWORD(v14) = v16;
        return objc_msgSend(*(id *)(v4 + 80), "setWhiteBalanceModeLockedWithGains:requestID:", v11, v12, v13, v14);
      }
    }
LABEL_12:
    FigDebugAssert3();
    goto LABEL_13;
  }
  if (v6 == 2)
  {
    uint64_t v7 = *(void **)(v4 + 80);
    return [v7 setWhiteBalanceModeAuto];
  }
LABEL_13:
  return FigSignalErrorAt();
}

uint64_t captureSource_setExposureTargetBiasOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (void *)[a2 objectForKeyedSubscript:@"Bias"];
  if (v4)
  {
    [v4 floatValue];
    int v6 = v5;
    uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"RequestID"), "intValue");
    int v8 = *(void **)(DerivedStorage + 80);
    LODWORD(v9) = v6;
    return [v8 setExposureTargetBias:v7 requestID:v9];
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t captureSource_setDeskViewEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (uint64_t v4 = *(void **)(DerivedStorage + 80)) != 0)
  {
    int v5 = objc_msgSend((id)objc_msgSend(v4, "captureStream"), "stream");
    uint64_t v6 = *MEMORY[0x1E4F548C8];
    uint64_t v7 = [NSNumber numberWithBool:a2];
    return [v5 setPropertyIfSupported:v6 value:v7];
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t getFTBipartiteMatcherClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__1;
  uint64_t v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTBipartiteMatcherClass_softClass;
  uint64_t v8 = getFTBipartiteMatcherClass_softClass;
  if (!getFTBipartiteMatcherClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTBipartiteMatcherClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTBipartiteMatcherClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A599BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FigCaptureSourceGetClassID_block_invoke()
{
  ClassIOSurfaceID ID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureSourceClassDesc, ClassID, 1, &FigCaptureSourceGetClassID_sFigCaptureSourceClassID);
}

double iqsn_cleanupBufferContext(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x4E0], 8) = *(void *)(v4 + 16);
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_1A599E0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

CFTypeRef FigAppleMakerNoteStillImageProcessingFlagsToShortString(uint64_t a1)
{
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%u", a1);
  return CFAutorelease(v1);
}

void rqSenderHandleDequeue(uint64_t a1)
{
  unsigned __int16 v7 = 0;
  os_retain(*(void **)(a1 + 120));
  voucher_adopt();
  ssize_t v2 = read(*(_DWORD *)(a1 + 60), &v7, 2uLL);
  if (v2 < 0)
  {
LABEL_12:
    __error();
  }
  else
  {
    while (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 40) > v7)
      {
        uint64_t v3 = *(void *)(a1 + 32) + 32 * v7;
        uint64_t v4 = *(int *)(v3 + 60);
        rqSenderCleanupQueueElement(v3 + 32);
        *(_DWORD *)(a1 + 44) = (v7 + 1) % *(_DWORD *)(a1 + 40);
        uint64_t v5 = *(void *)(a1 + 32);
        if (*(int *)(v5 + 4 * v4 + 20) <= 0)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v5 = *(void *)(a1 + 32);
        }
        if (*(int *)(v5 + 4) <= 0)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v5 = *(void *)(a1 + 32);
        }
        atomic_fetch_add((atomic_uint *volatile)(v5 + 4 * v4 + 20), 0xFFFFFFFF);
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 4), 0xFFFFFFFF, memory_order_relaxed) == 1&& *(unsigned char *)(a1 + 114))
        {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
        }
      }
      ssize_t v2 = read(*(_DWORD *)(a1 + 60), &v7, 2uLL);
      if (v2 < 0) {
        goto LABEL_12;
      }
    }
    *(unsigned char *)(a1 + 113) = 1;
    if (*(unsigned char *)(a1 + 114)) {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
    }
    dispatch_suspend(*(dispatch_object_t *)(a1 + 80));
    *(unsigned char *)(a1 + 112) = 1;
  }
  uint64_t v6 = (void *)voucher_adopt();
  os_release(v6);
}

double rqSenderCleanupQueueElement(uint64_t a1)
{
  ssize_t v2 = *(__IOSurface **)(a1 + 16);
  if (v2)
  {
    IOSurfaceDecrementUseCount(v2);
    CFRelease(*(CFTypeRef *)(a1 + 16));
  }
  FigSharedMemBlockRelease(*(void *)a1);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t FigCaptureSpeakerInterferenceMitigationIsSupported()
{
  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8], @"This function may not be called outside of cameracaptured, mediaserverd, or audiomxd", 0 reason userInfo]);
  }
  return objc_msgSend(&unk_1EFB03BD8, "containsObject:", objc_msgSend(NSNumber, "numberWithLong:", MGGetProductType()));
}

uint64_t FigCaptureCurrentProcessIsCameracaptured()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  ssize_t v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  uint64_t v3 = [(__CFString *)v2 isEqualToString:0x1EFA559C0];

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureCurrentProcessIsAudiomxd()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  ssize_t v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  uint64_t v3 = [(__CFString *)v2 isEqualToString:@"com.apple.audiomxd"];

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureGetPIDVersionFromAuditToken(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pidversion(&v3);
}

__SecTask *FigCaptureClientIsSwiftPlaygroundsDevelopmentAppWithSecTask(__SecTask *result)
{
  if (result) {
    return FigCaptureClientHasEntitlementWithSecTask(result, @"com.apple.developer.swift-playgrounds-app.development-build");
  }
  return result;
}

__SecTask *FigCaptureClientIsAllowedToRunInBackground(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  audit_token_t v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = FigCaptureClientHasEntitlementWithSecTask(v3, @"com.apple.private.avfoundation.background-camera-access");
  CFRelease(v4);
  return v5;
}

uint64_t getPATCCAccessClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__6;
  audit_token_t v7 = __Block_byref_object_dispose__6;
  uint64_t v0 = getPATCCAccessClass_softClass;
  uint64_t v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A59A10F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__SecTask *FigCaptureClientIsNonStandard(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  uint64_t v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = FigCaptureClientHasEntitlementWithSecTask(v3, @"com.apple.private.avfoundation.capture.nonstandard-client.allow");
  CFRelease(v4);
  return v5;
}

uint64_t getPAApplicationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__6;
  audit_token_t v7 = __Block_byref_object_dispose__6;
  uint64_t v0 = getPAApplicationClass_softClass;
  uint64_t v8 = getPAApplicationClass_softClass;
  if (!getPAApplicationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPAApplicationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPAApplicationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A59A15E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *psn_updateFocusDistanceBasedScene(uint64_t a1, void *a2)
{
  double result = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53EB0]];
  if (result)
  {
    [result floatValue];
    float v6 = v5;
    double result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EE0]), "intValue");
    if (result != 1)
    {
      float v7 = 100.0;
      if (v6 >= 0.0 && v6 <= 100.0) {
        float v7 = v6;
      }
      return (void *)BWSmartCameraSceneUpdateWithConfidence(a1, v7);
    }
  }
  return result;
}

uint64_t BWSmartCameraSceneUpdateWithConfidence(uint64_t result, float a2)
{
  if (!*(unsigned char *)result) {
    return result;
  }
  if (*(unsigned char *)(result + 26))
  {
    *(unsigned char *)(result + 26) = 0;
    uint64_t v2 = 22;
    if (!*(unsigned char *)(result + 1)) {
      uint64_t v2 = 20;
    }
    *(_WORD *)(result + 24) = *(_WORD *)(result + v2);
    float v3 = a2;
  }
  else
  {
    float v3 = *(float *)(result + 8);
  }
  float v4 = (float)(*(float *)(result + 4) * a2) + (float)(v3 * (float)(1.0 - *(float *)(result + 4)));
  *(float *)(result + _Block_object_dispose(&STACK[0x4E0], 8) = v4;
  float v5 = *(float *)(result + 12);
  if (*(unsigned char *)(result + 1))
  {
    if (v4 < (float)(v5 - *(float *)(result + 16)))
    {
LABEL_9:
      uint64_t v6 = 22;
      if (!*(unsigned char *)(result + 1)) {
        uint64_t v6 = 20;
      }
      int v7 = *(__int16 *)(result + v6);
      int v8 = *(__int16 *)(result + 24);
      if (v8 >= v7)
      {
        __int16 v9 = 0;
        *(unsigned char *)(result + 1) ^= 1u;
      }
      else
      {
        __int16 v9 = v8 + 1;
      }
      *(_WORD *)(result + 24) = v9;
      return result;
    }
  }
  else if (v4 > v5)
  {
    goto LABEL_9;
  }
  if (*(_WORD *)(result + 24)) {
    *(_WORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t FigImageControl_ToneMapping_ConfigureDevice(uint64_t a1, void *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStreauint64_t m = af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  uint64_t v6 = CameraParametersForCaptureStream;
  uint64_t v7 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)values = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  *(_OWORD *)keys = 0u;
  long long v47 = 0u;
  while (*((_DWORD *)CameraParametersForCaptureStream + v7 + 62))
  {
    if (++v7 == 10) {
      goto LABEL_6;
    }
  }
  if (v7)
  {
LABEL_6:
    keys[0] = *(void **)MEMORY[0x1E4F54570];
    unint64_t v8 = v7;
    values[0] = createCFArrayFromIntArray((char *)CameraParametersForCaptureStream + 208, v7);
    keys[1] = *(void **)MEMORY[0x1E4F54568];
    values[1] = createCFArrayFromIntArray((char *)v6 + 248, v8);
    LODWORD(v9) = 2;
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_7:
  uint64_t v10 = 0;
  while (*((_DWORD *)v6 + v10 + 112))
  {
    if (++v10 == 10) {
      goto LABEL_12;
    }
  }
  if (!v10) {
    goto LABEL_14;
  }
LABEL_12:
  if (!*(unsigned char *)(DerivedStorage + 9054))
  {
    keys[v9] = (void *)*MEMORY[0x1E4F545A8];
    unint64_t v11 = v10;
    int v12 = v9 | 1;
    values[v9] = createCFArrayFromIntArray((char *)v6 + 448, v10);
    keys[v9 | 1] = (void *)*MEMORY[0x1E4F545A0];
    LODWORD(v9) = v9 + 2;
    values[v12] = createCFArrayFromIntArray((char *)v6 + 488, v11);
  }
LABEL_14:
  uint64_t v13 = 0;
  while (*((_DWORD *)v6 + v13 + 132))
  {
    if (++v13 == 10) {
      goto LABEL_19;
    }
  }
  if (!v13) {
    goto LABEL_20;
  }
LABEL_19:
  keys[v9] = (void *)*MEMORY[0x1E4F546A0];
  unint64_t v14 = v13;
  int v15 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 528, v13);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E4F54698];
  LODWORD(v9) = v9 + 2;
  values[v15] = createCFArrayFromIntArray((char *)v6 + 568, v14);
  LODWORD(v13) = 1;
LABEL_20:
  uint64_t v16 = 0;
  while (*((_DWORD *)v6 + v16 + 152))
  {
    if (++v16 == 10) {
      goto LABEL_25;
    }
  }
  if (!v16) {
    goto LABEL_26;
  }
LABEL_25:
  keys[v9] = (void *)*MEMORY[0x1E4F546E0];
  unint64_t v17 = v16;
  int v18 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 608, v16);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E4F546D8];
  LODWORD(v9) = v9 + 2;
  values[v18] = createCFArrayFromIntArray((char *)v6 + 648, v17);
  LODWORD(v13) = 1;
LABEL_26:
  uint64_t v19 = 0;
  while (*((_DWORD *)v6 + v19 + 172))
  {
    if (++v19 == 10) {
      goto LABEL_31;
    }
  }
  if (!v19) {
    goto LABEL_32;
  }
LABEL_31:
  keys[v9] = (void *)*MEMORY[0x1E4F546B0];
  unint64_t v20 = v19;
  int v21 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 688, v19);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E4F546A8];
  LODWORD(v9) = v9 + 2;
  values[v21] = createCFArrayFromIntArray((char *)v6 + 728, v20);
  LODWORD(v13) = 1;
LABEL_32:
  uint64_t v22 = 0;
  while (*((_DWORD *)v6 + v22 + 192))
  {
    if (++v22 == 10) {
      goto LABEL_37;
    }
  }
  if (v22)
  {
LABEL_37:
    keys[v9] = (void *)*MEMORY[0x1E4F546D0];
    unint64_t v23 = v22;
    int v24 = v9 + 1;
    values[v9] = createCFArrayFromIntArray((char *)v6 + 768, v22);
    keys[(v9 + 1)] = (void *)*MEMORY[0x1E4F546C8];
    LODWORD(v9) = v9 + 2;
    values[v24] = createCFArrayFromIntArray((char *)v6 + 808, v23);
LABEL_38:
    char v25 = 1;
    LODWORD(v45[0]) = 1;
    LODWORD(v44[0]) = 260;
    keys[v9] = (void *)*MEMORY[0x1E4F546C0];
    values[v9] = createCFArrayFromIntArray((char *)v45, 1uLL);
    int v26 = v9 + 1;
    keys[(v9 + 1)] = (void *)*MEMORY[0x1E4F546B8];
    LODWORD(v9) = v9 + 2;
    values[v26] = createCFArrayFromIntArray((char *)v44, 1uLL);
    goto LABEL_39;
  }
  if (v13) {
    goto LABEL_38;
  }
  char v25 = 0;
LABEL_39:
  uint64_t v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if ((int)v9 < 1)
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v9 = v9;
    uint64_t v28 = values;
    CFDictionaryRef v29 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v30 = [a2 setProperty:*MEMORY[0x1E4F54A80] value:v29];
    do
    {
      IOSurfaceRef v31 = *v28++;
      CFRelease(v31);
      --v9;
    }
    while (v9);
    CFRelease(v29);
  }
  if (*(unsigned char *)(DerivedStorage + 508)) {
    char v32 = v25;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0)
  {
    int v33 = (int)(float)((float)(*((float *)v6 + 3) * 256.0) + 0.5);
    float v34 = *((float *)v6 + 7);
    int v42 = (int)(float)((float)(*((float *)v6 + 6) * 256.0) + 0.5);
    int valuePtr = v33;
    HIDWORD(v41) = (int)(float)((float)(v34 * 256.0) + 0.5);
    LODWORD(v41) = 260;
    int v35 = (void *)*MEMORY[0x1E4F545B0];
    v44[0] = *(void **)MEMORY[0x1E4F1CFD0];
    uint64_t v36 = (void *)*MEMORY[0x1E4F54528];
    v45[0] = v35;
    v45[1] = v36;
    CFAllocatorRef v37 = *v27;
    v44[1] = CFNumberCreate(*v27, kCFNumberIntType, &valuePtr);
    v45[2] = *(void **)MEMORY[0x1E4F546F8];
    v44[2] = CFNumberCreate(v37, kCFNumberIntType, &v42);
    v45[3] = *(void **)MEMORY[0x1E4F545E8];
    v44[3] = CFNumberCreate(v37, kCFNumberIntType, (char *)&v41 + 4);
    v45[4] = *(void **)MEMORY[0x1E4F54618];
    v44[4] = CFNumberCreate(v37, kCFNumberIntType, &v41);
    CFDictionaryRef v38 = CFDictionaryCreate(v37, (const void **)v45, (const void **)v44, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v30 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E4F548E0], v38, v41);
    for (uint64_t i = 1; i != 5; ++i)
      CFRelease(v44[i]);
    CFRelease(v38);
  }
  return v30;
}

CFArrayRef createCFArrayFromIntArray(char *valuePtr, unint64_t numValues)
{
  CFIndex v2 = numValues;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  if (numValues >= 0xA) {
    unint64_t v3 = 10;
  }
  else {
    unint64_t v3 = numValues;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v3)
  {
    uint64_t v6 = (CFNumberRef *)v11;
    do
    {
      *v6++ = CFNumberCreate(v4, kCFNumberIntType, valuePtr);
      valuePtr += 4;
      --v3;
    }
    while (v3);
  }
  CFArrayRef v7 = CFArrayCreate(v4, (const void **)v11, v2, MEMORY[0x1E4F1D510]);
  if (v2)
  {
    unint64_t v8 = (const void **)v11;
    do
    {
      uint64_t v9 = *v8++;
      CFRelease(v9);
      --v2;
    }
    while (v2);
  }
  return v7;
}

uint64_t FigImageControl_Exposure_ConfigureDevice(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStreauint64_t m = (float *)af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  unsigned int v6 = *(_DWORD *)(DerivedStorage + 7468);
  if (!v6) {
    unsigned int v6 = *(_DWORD *)(DerivedStorage + 7464);
  }
  if (CameraParametersForCaptureStream[235] <= 0.0 || v6 > 1) {
    return 0;
  }
  uint64_t result = setupMeteringFaceDetection(a1, a2, 0);
  if (!result) {
    *(unsigned char *)(DerivedStorage + 7456) = 1;
  }
  return result;
}

uint64_t setupMeteringFaceDetection(uint64_t a1, void *a2, int a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStreauint64_t m = (float *)af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  uint64_t v80 = 0;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  *(_OWORD *)keys = 0u;
  long long v75 = 0u;
  CFDataRef v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  *(_OWORD *)values = 0u;
  long long v68 = 0u;
  int v65 = 512;
  int valuePtr = 184;
  int32x2_t v12 = (int32x2_t)*((unsigned int *)CameraParametersForCaptureStream + 228);
  unsigned int v63 = vcvts_n_s32_f32(*(float *)v12.i32, 0xAuLL);
  int v64 = 2048;
  unsigned int v9 = vcvts_n_s32_f32(CameraParametersForCaptureStream[229], 0xAuLL);
  unsigned int v61 = vcvts_n_s32_f32(CameraParametersForCaptureStream[232], 0xAuLL);
  unsigned int v62 = v9;
  unsigned int v10 = vcvts_n_s32_f32(CameraParametersForCaptureStream[233], 0xAuLL);
  unsigned int v59 = vcvts_n_s32_f32(CameraParametersForCaptureStream[234], 0xAuLL);
  unsigned int v60 = v10;
  unsigned int v11 = vcvts_n_s32_f32(CameraParametersForCaptureStream[235], 0xAuLL);
  v12.i32[0] = (__int32)CameraParametersForCaptureStream[239];
  unsigned int v57 = vcvts_n_s32_f32(CameraParametersForCaptureStream[236], 0xAuLL);
  unsigned int v58 = v11;
  unsigned int v13 = vcvts_n_s32_f32(CameraParametersForCaptureStream[237], 0xAuLL);
  unsigned int v55 = vcvts_n_s32_f32(CameraParametersForCaptureStream[238], 0xAuLL);
  unsigned int v56 = v13;
  if (*(_DWORD *)(DerivedStorage + 40) == 4)
  {
    unsigned int v14 = vcvts_n_s32_f32(CameraParametersForCaptureStream[230], 0xAuLL);
    unsigned int v60 = vcvts_n_s32_f32(CameraParametersForCaptureStream[231], 0xAuLL);
    unsigned int v61 = v14;
  }
  if (!*(unsigned char *)(DerivedStorage + 7473)) {
    unsigned int v62 = 0;
  }
  if (*(float *)v12.i32 <= 0.0) {
    *(float *)v12.i32 = 40.0;
  }
  int32x2_t v53 = v12;
  keys[0] = *(void **)MEMORY[0x1E4F54598];
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  keys[1] = *(void **)MEMORY[0x1E4F545F0];
  values[1] = CFNumberCreate(v15, kCFNumberIntType, &v61);
  *(void *)&long long v75 = *MEMORY[0x1E4F545D0];
  *(void *)&long long v68 = CFNumberCreate(v15, kCFNumberIntType, &v60);
  *((void *)&v75 + 1) = *MEMORY[0x1E4F54648];
  *((void *)&v68 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v65);
  *(void *)&long long v76 = *MEMORY[0x1E4F54630];
  *(void *)&long long v69 = CFNumberCreate(v15, kCFNumberIntType, &v64);
  *((void *)&v76 + 1) = *MEMORY[0x1E4F54588];
  *((void *)&v69 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v56);
  *(void *)&long long v77 = *MEMORY[0x1E4F54558];
  *(void *)&long long v70 = CFNumberCreate(v15, kCFNumberIntType, &v55);
  *((void *)&v77 + 1) = *MEMORY[0x1E4F54590];
  *((void *)&v70 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v63);
  *(void *)&long long v78 = *MEMORY[0x1E4F54620];
  *(void *)&long long v71 = CFNumberCreate(v15, kCFNumberIntType, &v62);
  *((void *)&v78 + 1) = *MEMORY[0x1E4F545F8];
  *((void *)&v71 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v59);
  *(void *)&long long v79 = *MEMORY[0x1E4F54560];
  *(void *)&long long v72 = CFNumberCreate(v15, kCFNumberIntType, &v58);
  *((void *)&v79 + 1) = *MEMORY[0x1E4F545D8];
  uint64_t v16 = 0;
  *((void *)&v72 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v57);
  uint64_t v80 = *MEMORY[0x1E4F546F0];
  float32x4_t v17 = (float32x4_t)vdupq_lane_s32(v53, 0);
  float v18 = 0.0;
  v19.i32[1] = 1;
  float32x4_t v45 = v17;
  unint64_t v20 = v81;
  v21.i64[0] = 0x3F0000003F000000;
  v21.i64[1] = 0x3F0000003F000000;
  v22.i64[0] = 0xC1000000C1000000;
  v22.i64[1] = 0xC1000000C1000000;
  v23.i64[0] = 0xBF000000BF000000;
  v23.i64[1] = 0xBF000000BF000000;
  do
  {
    uint64_t v24 = 0;
    *(float *)v19.i32 = (float)((float)((float)(int)v16 + 0.5) + -8.0) * (float)((float)((float)(int)v16 + 0.5) + -8.0);
    float32x4_t v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    int32x4_t v19 = (int32x4_t)xmmword_1A5DBD230;
    do
    {
      int32x4_t v50 = v19;
      float32x4_t v25 = vaddq_f32(vaddq_f32(vcvtq_f32_s32(v19), v21), v22);
      float32x4_t v54 = vdivq_f32(vmulq_f32(vmlaq_f32(v46, v25, v25), v23), v17);
      float v49 = expf(v54.f32[1]);
      *(float *)&long long v26 = expf(v54.f32[0]);
      float v48 = *(float *)&v26;
      long long v27 = v26;
      *((float *)&v27 + 1) = v49;
      long long v51 = v27;
      float v47 = expf(v54.f32[2]);
      long long v28 = v51;
      *((float *)&v28 + 2) = v47;
      long long v52 = v28;
      float v29 = expf(v54.f32[3]);
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      v23.i64[0] = 0xBF000000BF000000;
      v23.i64[1] = 0xBF000000BF000000;
      v22.i64[0] = 0xC1000000C1000000;
      v22.i64[1] = 0xC1000000C1000000;
      float32x4_t v17 = v45;
      long long v31 = v52;
      *((float *)&v31 + 3) = v29;
      *(_OWORD *)&v20[v24] = v31;
      float v18 = (float)((float)((float)(v18 + v48) + v49) + v47) + v29;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      int32x4_t v19 = vaddq_s32(v50, v30);
      v24 += 16;
    }
    while (v24 != 64);
    ++v16;
    v20 += 64;
  }
  while (v16 != 16);
  uint64_t v32 = 0;
  float v33 = 16384.0 / v18;
  if (roundf((float)(16384.0 / v18) * v82) > 255.0) {
    float v33 = 255.0 / v82;
  }
  do
  {
    float v34 = (float32x4_t *)&v81[64 * v32];
    *(int16x4_t *)v35.i8 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(*v34, v33))));
    v35.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[1], v33))));
    *(int16x4_t *)v36.i8 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[2], v33))));
    v36.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[3], v33))));
    bytes[v32++] = vuzp1q_s8(v35, v36);
  }
  while (v32 != 16);
  CFDataRef v73 = CFDataCreate(v15, (const UInt8 *)bytes, 256);
  CFDictionaryRef v37 = CFDictionaryCreate(v15, (const void **)keys, (const void **)values, 13, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a3)
  {
    if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54708], v37))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    uint64_t v38 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54738], (const void *)*MEMORY[0x1E4F54638]);
    if (v38)
    {
LABEL_25:
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    int v39 = [a2 setProperty:*MEMORY[0x1E4F54708] value:v37];
    if (v39)
    {
      int v42 = v39;
      fig_log_get_emitter();
      uint64_t v44 = v3;
      LODWORD(v43) = v42;
      FigDebugAssert3();
    }
    uint64_t v38 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E4F54738], *MEMORY[0x1E4F54638], v43, v44);
    if (v38) {
      goto LABEL_25;
    }
  }
  for (uint64_t i = 0; i != 13; ++i)
    CFRelease(values[i]);
  CFRelease(v37);
  return v38;
}

void *af_sbp_getCameraParametersForCaptureStream(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[1] == a2) {
    return DerivedStorage + 71;
  }
  if (DerivedStorage[2] == a2) {
    return DerivedStorage + 228;
  }
  if (DerivedStorage[3] == a2) {
    return DerivedStorage + 385;
  }
  return 0;
}

uint64_t setupSearchPositions(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v16 = llroundf((float)(a8 * -0.16667) + 21.0);
  int valuePtr = 0;
  unsigned int v52 = v16;
  if (a4 <= a2) {
    int v17 = a2;
  }
  else {
    int v17 = a4;
  }
  if (v17 >= a3) {
    int v18 = a3;
  }
  else {
    int v18 = v17;
  }
  int v19 = v18 == a2;
  int v46 = v18;
  unint64_t v20 = computeAFSearchPositions(a1, a2, a3, v18, a5, v19);
  *(_DWORD *)(DerivedStorage + 172) = a5;
  if (a5 >= 1)
  {
    CFIndex v21 = 0;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v20, v21);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      *(_DWORD *)(DerivedStorage + 92 + 4 * v21++) = valuePtr;
    }
    while (a5 != v21);
  }
  if (*(unsigned char *)(DerivedStorage + 504)
    && *(unsigned __int8 *)(DerivedStorage + 505) == v19
    && *(unsigned __int8 *)(DerivedStorage + 506) == a6
    && (*(_DWORD *)(DerivedStorage + 500) == v16 || a6 == 0))
  {
LABEL_32:
    int v39 = (const void *)*MEMORY[0x1E4F54778];
    if (!a7) {
      goto LABEL_49;
    }
LABEL_44:
    uint64_t v43 = captureStreamSetPropertyOnActivityScheduler(a1, v39, v20);
    goto LABEL_50;
  }
  *(unsigned char *)(DerivedStorage + 504) = 1;
  *(unsigned char *)(DerivedStorage + 505) = v19;
  *(_DWORD *)(DerivedStorage + 500) = v16;
  *(unsigned char *)(DerivedStorage + 506) = a6;
  if (a6)
  {
    int v49 = 66;
    int v50 = 56;
    int v48 = 42;
    uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int valuePtr = 2;
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52EE0], v25);
    CFRelease(v25);
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberIntType, &v50);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52ED8], v26);
    CFRelease(v26);
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberIntType, &v49);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52EF0], v27);
    CFRelease(v27);
    CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &v52);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52EE8], v28);
    CFRelease(v28);
    CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, &v48);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52ED0], v29);
    CFRelease(v29);
    int32x4_t v30 = (const void *)*MEMORY[0x1E4F547D0];
    long long v31 = (const void *)*MEMORY[0x1E4F52E80];
    if (a7)
    {
      captureStreamSetPropertyOnActivityScheduler(a1, v30, v31);
      captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54AA8], Mutable);
      if (!Mutable) {
        goto LABEL_32;
      }
    }
    else
    {
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v30, (uint64_t)v31);
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, *MEMORY[0x1E4F54AA8], (uint64_t)Mutable);
      if (!Mutable) {
        goto LABEL_32;
      }
    }
    CFRelease(Mutable);
    goto LABEL_32;
  }
  uint64_t v32 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*(_DWORD *)(DerivedStorage + 640)) {
    int v33 = 1;
  }
  else {
    int v33 = 2;
  }
  int valuePtr = v33;
  CFNumberRef v34 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E4F52E70], v34);
  CFRelease(v34);
  int8x16_t v35 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E4F52E68], (const void *)*MEMORY[0x1E4F1CFD0]);
  if (v46 == a2) {
    int8x16_t v36 = v35;
  }
  else {
    int8x16_t v36 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E4F52E58], v36);
  int valuePtr = 56;
  CFNumberRef v37 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E4F52E60], v37);
  CFRelease(v37);
  uint64_t v38 = (const void *)*MEMORY[0x1E4F54768];
  if (!a7)
  {
    af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v38, (uint64_t)v32);
    if (!v32) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  captureStreamSetPropertyOnActivityScheduler(a1, v38, v32);
  if (v32) {
LABEL_35:
  }
    CFRelease(v32);
LABEL_36:
  if (!*(unsigned char *)(DerivedStorage + 514))
  {
    if (!*(_DWORD *)(DerivedStorage + 640)) {
      goto LABEL_32;
    }
    int v42 = (const void *)*MEMORY[0x1E4F54770];
    if (a7) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  uint64_t v40 = (const void *)*MEMORY[0x1E4F547D0];
  uint64_t v41 = (const void *)*MEMORY[0x1E4F52E88];
  if (a7)
  {
    captureStreamSetPropertyOnActivityScheduler(a1, v40, v41);
    if (!*(_DWORD *)(DerivedStorage + 640))
    {
LABEL_43:
      int v39 = (const void *)*MEMORY[0x1E4F54778];
      goto LABEL_44;
    }
    int v42 = (const void *)*MEMORY[0x1E4F54770];
LABEL_42:
    captureStreamSetPropertyOnActivityScheduler(a1, v42, v35);
    goto LABEL_43;
  }
  af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v40, (uint64_t)v41);
  if (*(_DWORD *)(DerivedStorage + 640))
  {
    int v42 = (const void *)*MEMORY[0x1E4F54770];
LABEL_47:
    af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v42, (uint64_t)v35);
  }
  int v39 = (const void *)*MEMORY[0x1E4F54778];
LABEL_49:
  uint64_t v43 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v39, (uint64_t)v20);
LABEL_50:
  uint64_t v44 = v43;
  if (v20) {
    CFRelease(v20);
  }
  return v44;
}

uint64_t captureStreamSetPropertyOnActivityScheduler(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 4294954516;
  if (!a1 || !a2) {
    return v7;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  unsigned int v10 = Mutable;
  CFDictionaryAddValue(Mutable, @"propertyKey", a2);
  if (a3) {
    CFDictionaryAddValue(v10, @"propertyValue", a3);
  }
  uint64_t v11 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v8 + 72), v10);
  if (v11)
  {
    uint64_t v7 = v11;
    CFRelease(v10);
    return v7;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFAllocatorRef v15 = *(uint64_t (**)(uint64_t))(v14 + 16);
  if (!v15) {
    return 4294954514;
  }
  return v15(v12);
}

uint64_t af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 32), "supportedProperties"), "objectForKeyedSubscript:", a2);
  uint64_t v7 = 32;
  if (!v6) {
    uint64_t v7 = 8;
  }
  uint64_t v8 = *(void **)(DerivedStorage + v7);
  return [v8 setProperty:a2 value:a3];
}

__CFArray *computeAFSearchPositions(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  float v13 = *(float *)(DerivedStorage + 664);
  if (v13 == 0.0)
  {
    float v16 = (float)a3;
    if (*(_DWORD *)(DerivedStorage + 640))
    {
      int v22 = 0;
      float v21 = (float)a4;
      float v19 = v16 - (float)a2;
      float v14 = 0.0;
      float v13 = 255.0;
      float v33 = 900.0;
      goto LABEL_17;
    }
    float v14 = 0.0;
    float v15 = 900.0;
    float v13 = 255.0;
  }
  else
  {
    float v14 = *(float *)(DerivedStorage + 668);
    float v15 = *(float *)(DerivedStorage + 672);
    float v16 = (float)a3;
    if (v14 > 0.0)
    {
      float v17 = v13 * v14;
      if (v13 >= v16) {
        float v16 = v14 * v16;
      }
      else {
        float v16 = (float)(v13 * v14) + (float)((float)(v16 - v13) * v15);
      }
      if (v13 >= (float)a2) {
        float v18 = v14 * (float)a2;
      }
      else {
        float v18 = v17 + (float)((float)((float)a2 - v13) * v15);
      }
      float v19 = v16 - v18;
      float v20 = (float)a4;
      float v33 = *(float *)(DerivedStorage + 672);
      if (v13 >= (float)a4) {
        float v21 = v14 * v20;
      }
      else {
        float v21 = v17 + (float)((float)(v20 - v13) * v15);
      }
      goto LABEL_16;
    }
  }
  float v16 = (float)(v13 / (float)(v15 - v16)) + -1.0;
  float v19 = v16 - (float)((float)(v13 / (float)(v15 - (float)a2)) + -1.0);
  float v33 = v15;
  float v21 = (float)(v13 / (float)(v15 - (float)a4)) + -1.0;
LABEL_16:
  int v22 = 1;
LABEL_17:
  if (a5 >= 1)
  {
    int v23 = 0;
    if (a6) {
      int v24 = a5 - 1;
    }
    else {
      int v24 = a5;
    }
    float v25 = (float)v24;
    while (1)
    {
      float v26 = v19 * (float)v23;
      float v27 = v21 + (float)(v26 / v25);
      if (v27 > v16) {
        break;
      }
      if ((float)(v21 + (float)(v26 / (float)(a5 - 1))) <= v16) {
        goto LABEL_26;
      }
      int valuePtr = a3;
      int v28 = a3;
LABEL_33:
      int v29 = *(_DWORD *)(DerivedStorage + 688);
      BOOL v30 = v28 < v29;
      if (v28 <= v29) {
        int v28 = *(_DWORD *)(DerivedStorage + 688);
      }
      if (v30 || v28 >= 256)
      {
        if (v28 >= 255) {
          int v28 = 255;
        }
        int valuePtr = v28;
      }
      CFNumberRef v31 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
      if (a5 == ++v23) {
        return Mutable;
      }
    }
    float v27 = v27 - v19;
LABEL_26:
    if (v22)
    {
      if (v14 <= 0.0)
      {
        float v27 = v33 - (float)(v13 / (float)(v27 + 1.0));
      }
      else if ((float)(v14 * v13) >= v27)
      {
        float v27 = v27 / v14;
      }
      else
      {
        float v27 = v13 + (float)((float)(v27 + (float)((float)-v13 * v14)) / v33);
      }
    }
    int v28 = (int)(float)(v27 + 0.5);
    int valuePtr = v28;
    goto LABEL_33;
  }
  return Mutable;
}

void __csr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
  FigCFDictionarySetInt32();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void __csr_ensureClientEstablished_block_invoke_0(uint64_t a1)
{
  uint64_t Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
  sDeadServerNotificationQueue = (uint64_t)dispatch_queue_create("com.apple.figcapturesource.deadserver-notifications", 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

FigCaptureStillImageSinkPipelineSessionStorage *captureSession_createStillImageSinkPipelineSessionStorage(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int a6, unsigned int *a7)
{
  v397[16] = *MEMORY[0x1E4F143B8];
  unsigned int v346 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float v15 = (void *)[a2 stillImageConnectionConfiguration];
  float v314 = (void *)[v15 sourceConfiguration];
  uint64_t v16 = [a2 movieFileVideoConnectionConfiguration];
  uint64_t v308 = a4;
  uint64_t v309 = a5;
  int v299 = a6;
  if (objc_msgSend((id)objc_msgSend(v15, "sinkConfiguration"), "sinkType") == 10) {
    float v17 = (void *)[v15 sinkConfiguration];
  }
  else {
    float v17 = 0;
  }
  float v18 = (void *)[v314 requiredFormat];
  uint64_t v311 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](a3);
  float v310 = captureSession_inferenceScheduler();
  uint64_t v345 = -[FigCaptureCameraSourcePipeline stillImageOutputsByPortType](a3);
  int StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([v314 source], &v346);
  if (v346) {
    goto LABEL_271;
  }
  float v20 = (void *)a3;
  int v21 = StillImageNoiseReductionAndFusionScheme;
  uint64_t v22 = -[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v20);
  newCFNumberRef Value = (char *)-[FigCaptureCameraSourcePipeline stillImageOutputColorInfo]((uint64_t)v20);
  unsigned int v23 = [v17 optimizesImagesForOfflineVideoStabilization];
  uint64_t IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
  uint64_t v343 = v18;
  unsigned int v344 = v20;
  unsigned int v313 = a7;
  unsigned int v315 = v23;
  if ((v21 - 3) <= 1)
  {
    uint64_t v25 = IsCameraOrDerivative;
    float v26 = objc_alloc_init(FigCaptureStillImageUnifiedBracketingSinkPipelineConfiguration);
    v381[0] = 0;
    id v318 = v26;
    cs_updateStillImageSinkPipelineCommonConfiguration(v26, (uint64_t)v20, v15, v16, v18, v25);
    float v27 = (void *)[v15 sourceConfiguration];
    if (objc_msgSend((id)objc_msgSend(v15, "sinkConfiguration"), "sinkType") == 10) {
      int v28 = (void *)[v15 sinkConfiguration];
    }
    else {
      int v28 = 0;
    }
    v300 = (void *)[v27 depthDataFormat];
    int v322 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v20);
    float v33 = (void *)-[FigCaptureCameraSourcePipeline stillImageOutputsByPortType]((uint64_t)v20);
    CFNumberRef v34 = (void *)-[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v20);
    BOOL v324 = v28;
    int v35 = [v28 maxQualityPrioritization];
    int v36 = objc_msgSend((id)objc_msgSend(v27, "requiredFormat"), "isHighPhotoQualitySupported");
    BOOL v37 = 0;
    unsigned int v307 = v15;
    int v319 = v35;
    if (v36 && v35 >= 2) {
      BOOL v37 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v20);
    }
    BOOL v301 = v37;
    objc_msgSend(v318, "setRawSensorDimensions:", objc_msgSend(v18, "sensorDimensions"));
    uint64_t v38 = (void *)[v33 allKeys];
    id v336 = (id)[v34 allKeys];
    int v39 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v40 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    if (FigCaptureSushiRawDNGDictionaryCreatedInGraph()) {
      int v41 = [v18 sushiRawSupported];
    }
    else {
      int v41 = 0;
    }
    int v46 = [v324 demosaicedRawEnabled];
    int v47 = v46 | v41;
    int v316 = v46;
    if ((v46 | v41) == 1) {
      uint64_t v326 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    }
    else {
      uint64_t v326 = 0;
    }
    int v333 = v41;
    uint64_t v304 = a1;
    uint64_t v305 = DerivedStorage;
    uint64_t v321 = v27;
    if (v41) {
      CMAttachmentBearerRef v331 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    }
    else {
      CMAttachmentBearerRef v331 = 0;
    }
    long long v394 = 0u;
    long long v393 = 0u;
    long long v392 = 0u;
    long long v391 = 0u;
    id obj = (id)[v322 captureStreams];
    uint64_t v48 = [obj countByEnumeratingWithState:&v391 objects:v397 count:16];
    if (!v48) {
      goto LABEL_65;
    }
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)v392;
    id v328 = (id)*MEMORY[0x1E4F1CF80];
LABEL_31:
    uint64_t v51 = 0;
    while (1)
    {
      if (*(void *)v392 != v50) {
        objc_enumerationMutation(obj);
      }
      unsigned int v52 = *(void **)(*((void *)&v391 + 1) + 8 * v51);
      uint64_t v53 = [v52 portType];
      if (([v38 containsObject:v53] & 1) == 0
        && ![v336 containsObject:v53])
      {
        goto LABEL_63;
      }
      objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(v52, "sensorIDString"), v53);
      float32x4_t v54 = NSNumber;
      [v52 baseZoomFactor];
      objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(v54, "numberWithFloat:"), v53);
      if (!v47) {
        goto LABEL_63;
      }
      uint64_t v55 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
      uint64_t v56 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(v55, v53, v381);
      if (v381[0])
      {
        uint64_t v290 = v303;
        LODWORD(v287) = v381[0];
LABEL_393:
        FigDebugAssert3();
LABEL_394:
        a7 = v313;
        uint64_t v135 = v305;
        long long v85 = v344;
        float v82 = v318;
        goto LABEL_203;
      }
      unsigned int v57 = (const void *)v56;
      if (!v56)
      {
        cf[0] = 0;
        uint64_t v60 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v61) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = 0;
        }
        long long v68 = *(uint64_t (**)(uint64_t, __CFString *, id, CFTypeRef *))(v62 + 48);
        if (v68)
        {
          v381[0] = v68(v60, @"WhiteBalanceCalibrations", v328, cf);
          if (!v381[0]) {
            [v326 setObject:BWDNGColorCalibrations((void *)cf[0]) forKeyedSubscript:v53];
          }
        }
        else
        {
          v381[0] = -12782;
        }
        if (v333) {
          objc_msgSend(v331, "setObject:forKeyedSubscript:", objc_msgSend(v343, "rawLensShadingCorrection"), v53);
        }
        CFTypeRef v67 = cf[0];
        if (!cf[0]) {
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      cf[0] = 0;
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = 0;
      }
      unsigned int v63 = *(uint64_t (**)(const void *, __CFString *, id, CFTypeRef *))(v59 + 48);
      if (v63)
      {
        v381[0] = v63(v57, @"WhiteBalanceCalibrations", v328, cf);
        if (!v381[0]) {
          [v326 setObject:BWDNGColorCalibrations((void *)cf[0]) forKeyedSubscript:v53];
        }
        if (v333)
        {
LABEL_50:
          uint64_t v64 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
          int v65 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v64, v343, v53, v381);
          if (v381[0])
          {
            uint64_t v290 = v303;
            LODWORD(v287) = v381[0];
            goto LABEL_393;
          }
          uint64_t v66 = v65;
          if (!v65)
          {
            uint64_t v290 = v303;
            LODWORD(v287) = 0;
            FigDebugAssert3();
            v381[0] = -12780;
            goto LABEL_394;
          }
          objc_msgSend(v331, "setObject:forKeyedSubscript:", objc_msgSend(v65, "rawLensShadingCorrection"), v53);
        }
      }
      else
      {
        v381[0] = -12782;
        if (v333) {
          goto LABEL_50;
        }
      }
      CFTypeRef v67 = v57;
LABEL_62:
      CFRelease(v67);
LABEL_63:
      if (v49 == ++v51)
      {
        uint64_t v49 = [obj countByEnumeratingWithState:&v391 objects:v397 count:16];
        if (v49) {
          goto LABEL_31;
        }
LABEL_65:
        [v318 setStillImageSinkPipelineProcessingMode:0];
        [v318 setPipelineStagePriority:14];
        [v318 setInferencePriority:14];
        uint64_t v69 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
        [v318 setDeviceType:cs_captureSourceDeviceType(v69)];
        objc_msgSend(v318, "setDeviceHasFlash:", objc_msgSend(v322, "hasFlash"));
        [v318 setSensorIDStringsByPortType:v39];
        [v318 setBaseZoomFactorsByPortType:v40];
        objc_msgSend(v318, "setRedEyeReductionVersion:", objc_msgSend(v343, "redEyeReductionVersion"));
        int v70 = [v343 semanticRenderingSupported];
        uint64_t v71 = 0;
        if (v70) {
          uint64_t v71 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings", 0), "commonSettings"), "semanticRenderingVersion");
        }
        [v318 setSemanticRenderingVersion:v71];
        a7 = v313;
        if ([v324 depthDataDeliveryEnabled]) {
          uint64_t v72 = 0;
        }
        else {
          uint64_t v72 = [v343 semanticDevelopmentVersion];
        }
        [v318 setSemanticDevelopmentVersion:v72];
        objc_msgSend(v318, "setSemanticStyleRenderingEnabled:", objc_msgSend(v324, "semanticStyleRenderingEnabled"));
        if ([v343 isDeepZoomSupported]) {
          uint64_t v73 = [+[FigCaptureCameraParameters sharedInstance] deepZoomVersion];
        }
        else {
          uint64_t v73 = 0;
        }
        [v318 setDeepZoomVersion:v73];
        uint64_t v74 = (void *)[MEMORY[0x1E4F1CA48] array];
        long long v75 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](v344);
        long long v76 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnStillImageOutputEnabled](v344);
        if (!-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v344))
        {
          long long v390 = 0u;
          long long v389 = 0u;
          long long v388 = 0u;
          long long v387 = 0u;
          uint64_t v77 = [v75 countByEnumeratingWithState:&v387 objects:v396 count:16];
          if (v77)
          {
            uint64_t v78 = v77;
            uint64_t v79 = *(void *)v388;
            do
            {
              for (uint64_t i = 0; i != v78; ++i)
              {
                if (*(void *)v388 != v79) {
                  objc_enumerationMutation(v75);
                }
                uint64_t v81 = *(void *)(*((void *)&v387 + 1) + 8 * i);
                if (([v76 containsObject:v81] & 1) == 0) {
                  [v74 addObject:v81];
                }
              }
              uint64_t v78 = [v75 countByEnumeratingWithState:&v387 objects:v396 count:16];
            }
            while (v78);
          }
        }
        float v82 = v318;
        [v318 setPortTypesWithGeometricDistortionCorrectionEnabled:v74];
        long long v83 = v343;
        int v84 = [v343 stillImageGDCSourceMode];
        long long v85 = v344;
        long long v86 = v324;
        if (([v343 intelligentDistortionCorrectionSupported] & 1) == 0 && !objc_msgSend(v74, "count")) {
          goto LABEL_164;
        }
        objc_msgSend(v318, "setDcProcessorVersion:", -[FigCaptureCameraParameters distortionCorrectionVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "distortionCorrectionVersion"));
        if (v84 == 2) {
          unsigned int v87 = [v324 depthDataDeliveryEnabled] ^ 1;
        }
        else {
          unsigned int v87 = 0;
        }
        if (v84 == 1) {
          uint64_t v88 = 1;
        }
        else {
          uint64_t v88 = v87;
        }
        [v318 setGdcInDCProcessorSupported:v88];
        if ([v324 intelligentDistortionCorrectionEnabled])
        {
          long long v89 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v383 = 0u;
          long long v384 = 0u;
          long long v385 = 0u;
          long long v386 = 0u;
          long long v90 = (void *)[v322 captureStreams];
          uint64_t v91 = [v90 countByEnumeratingWithState:&v383 objects:v395 count:16];
          if (v91)
          {
            uint64_t v92 = v91;
            uint64_t v93 = *(void *)v384;
            while (2)
            {
              for (uint64_t j = 0; j != v92; ++j)
              {
                if (*(void *)v384 != v93) {
                  objc_enumerationMutation(v90);
                }
                uint64_t v95 = [*(id *)(*((void *)&v383 + 1) + 8 * j) portType];
                uint64_t v96 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
                int v97 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v96, v343, v95, v381);
                if (v381[0])
                {
                  uint64_t v290 = v303;
                  LODWORD(v287) = v381[0];
                  FigDebugAssert3();
                  long long v85 = v344;
                  float v82 = v318;
                  uint64_t v135 = v305;
                  goto LABEL_203;
                }
                int v98 = v97;
                if (!v97)
                {
                  FigDebugAssert3();
                  goto LABEL_270;
                }
                if ([v97 intelligentDistortionCorrectionSupported]) {
                  [v89 addObject:v95];
                }
              }
              uint64_t v92 = [v90 countByEnumeratingWithState:&v383 objects:v395 count:16];
              if (v92) {
                continue;
              }
              break;
            }
          }
          if ([v89 count]) {
            uint64_t v99 = (void *)[v89 copy];
          }
          else {
            uint64_t v99 = 0;
          }
          long long v83 = v343;
          long long v85 = v344;
          float v82 = v318;
          long long v86 = v324;
          [v318 setPortTypesWithIntelligentDistortionCorrectionEnabled:v99];
        }
        if ([v74 count] && !objc_msgSend(v82, "gdcInDCProcessorSupported"))
        {
LABEL_270:
          unsigned int v346 = -12780;
        }
        else
        {
LABEL_164:
          uint64_t v133 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v85);
          if (csp_gdcExpandsImageDimensions(v133)
            && [v83 gdcInStillImageSinkPipelineSupported]
            && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v85)
            && ([v321 cinematicFramingEnabled] & 1) == 0
            && ([v321 manualCinematicFramingEnabled] & 1) == 0)
          {
            objc_msgSend(v82, "setGdcInDCProcessorOutputCropDimensions:", objc_msgSend(v83, "stillImageGDCInDCProcessorOutputCropDimensions"));
            objc_msgSend(v82, "setOutputStillImageDimensions:", objc_msgSend(v83, "soleHighResStillImageDimensions"));
          }
          if (cs_shouldEnableGreenGhostMitigation(v321)) {
            uint64_t v134 = [v83 greenGhostMitigationVersion];
          }
          else {
            uint64_t v134 = 0;
          }
          uint64_t v135 = v305;
          [v82 setGreenGhostMitigationVersion:v134];
          if (v316)
          {
            objc_msgSend(v82, "setDemosaicedRawPixelFormat:", objc_msgSend(v83, "internalDemosaicedRawPixelFormat"));
            goto LABEL_176;
          }
          if (v333)
          {
LABEL_176:
            [v82 setRawColorCalibrationsByPortType:v326];
            [v82 setRawLensShadingCorrectionCoefficientsByPortType:v331];
          }
          unsigned int v136 = [v83 isDeepFusionSupported];
          if (v319 > 2) {
            uint64_t v137 = v136;
          }
          else {
            uint64_t v137 = 0;
          }
          [v82 setDeepFusionSupported:v137];
          objc_msgSend(v82, "setLearnedNRSupported:", objc_msgSend(v83, "isLearnedNRSupported"));
          if ([v83 isDeferredPhotoProcessingSupported]) {
            uint64_t v138 = [v86 deferredProcessingEnabled];
          }
          else {
            uint64_t v138 = 0;
          }
          [v82 setDeferredProcessingSupported:v138];
          objc_msgSend(v82, "setResponsiveShutterSupported:", objc_msgSend(v83, "isResponsiveShutterSupported"));
          objc_msgSend(v82, "setResponsiveShutterEnabled:", objc_msgSend(v86, "responsiveCaptureEnabled"));
          objc_msgSend(v82, "setFastCapturePrioritizationEnabled:", objc_msgSend(v86, "fastCapturePrioritizationEnabled"));
          objc_msgSend(v82, "setCaptureTimePhotosCurationSupported:", objc_msgSend(v83, "isCaptureTimePhotoCurationSupported"));
          if ([v86 bravoConstituentPhotoDeliveryEnabled]
            && (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v321, "source"), @"ConstituentPhotoCalibrationData"), "BOOLValue") & 1) == 0)
          {
            uint64_t v289 = v303;
            LODWORD(v287) = 0;
            FigDebugAssert3();
          }
          if (objc_msgSend(v83, "isSIFRSupported", v287, v289))
          {
            if ([v83 isStillImageStabilizationSupported]) {
              uint64_t v139 = 1;
            }
            else {
              uint64_t v139 = [v83 isHighPhotoQualitySupported];
            }
          }
          else
          {
            uint64_t v139 = 0;
          }
          [v82 setSifrStillImageCaptureEnabledIfAvailable:v139];
          if ([v86 depthDataDeliveryEnabled])
          {
            [v82 setDepthDataType:cs_stillImageDepthDataType(v321)];
            objc_msgSend(v82, "setPearlModuleType:", FigVideoCaptureSourcePearlModuleType(objc_msgSend(v321, "source"), v381));
            if (!v381[0])
            {
              objc_msgSend(v82, "setSifrStillImageCaptureEnabledIfAvailable:", objc_msgSend(v82, "sifrStillImageCaptureEnabledIfAvailable") & (objc_msgSend((id)objc_msgSend(v321, "requiredFormat"), "isSIFRStillImageCaptureWithDepthDataDisabled") ^ 1));
              goto LABEL_194;
            }
            uint64_t v290 = v303;
            LODWORD(v287) = v381[0];
            FigDebugAssert3();
          }
          else
          {
LABEL_194:
            if (([v83 isGainMapSupported] & 1) != 0
              || [v300 gainMapSupported]
              && [v86 depthDataDeliveryEnabled])
            {
              LODWORD(v140) = 0x40000000;
              [v82 setGainMapMainImageDownscalingFactor:v140];
            }
            LODWORD(v140) = 2.0;
            [v82 setUbInferenceMainImageDownscalingFactor:v140];
            [v83 defaultPortraitLightingEffectStrength];
            [v82 setAdjustablePortraitLightingEffectStrengthSupported:1];
            uint64_t v141 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v85);
            [v82 setSupportedSemanticSegmentationMatteURNs:cs_captureSourceGetAttribute(v141, @"SupportedSemanticSegmentationMatteURNs")];
            objc_msgSend(v82, "setEnabledSemanticSegmentationMatteURNs:", objc_msgSend(v86, "enabledSemanticSegmentationMatteURNs"));
            if ([v82 depthDataType] == 2
              || ([v82 deepFusionSupported] & 1) != 0)
            {
              uint64_t v142 = 1;
            }
            else
            {
              uint64_t v142 = [v82 learnedNRSupported];
            }
            objc_msgSend(v82, "setCameraInfoByPortType:", objc_msgSend(v322, "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", v142, 0, 0));
            objc_msgSend(v82, "setMaxLossyCompressionLevel:", +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
            [v82 setHighQualityPhotoCaptureForVideoFormatEnabled:v301];
            cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(v82, v321, (uint64_t)v85);
          }
LABEL_203:
          unsigned int v346 = v381[0];
          if (!v381[0])
          {
            v397[0] = 0;
            v396[0] = 0;
            v395[0] = [v82 cameraInfoByPortType];
            *(void *)&long long v391 = [v82 sensorIDStringsByPortType];
            if (cs_configurePointCloudSourceForStillImageSinkPipeline(v308, [v314 sourceDeviceType], &v345, v395, &v391, v397, v396))
            {
              [v82 setCameraInfoByPortType:v395[0]];
              [v82 setSensorIDStringsByPortType:(void)v391];
            }
            uint64_t v143 = a7;
            uint64_t v144 = objc_msgSend(*(id *)(v135 + 656), "objectForKeyedSubscript:", objc_msgSend(v85, "sourceID", v287, v290));
            uint64_t v145 = v135;
            if (v144) {
              uint64_t v146 = *(void *)(v144 + 24);
            }
            else {
              uint64_t v146 = 0;
            }
            uint64_t v147 = [NSString stringWithFormat:@"%@ %@", v146, +[FigCaptureStillImageUnifiedBracketingSinkPipeline pipelineBaseName](FigCaptureStillImageUnifiedBracketingSinkPipeline, "pipelineBaseName")];
            uint64_t v148 = [FigCaptureStillImageUnifiedBracketingSinkPipeline alloc];
            uint64_t v149 = v345;
            uint64_t v150 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat]((uint64_t)v344) highResStillImageDimensions];
            uint64_t v151 = v397[0];
            uint64_t v152 = v396[0];
            uint64_t v153 = *(void *)(v145 + 712);
            if ([v318 cinematicFramingWarpingRequired]) {
              uint64_t v154 = -[FigCaptureCameraSourcePipeline cinematicFramingCameraStatesProvider]((uint64_t)v344);
            }
            else {
              uint64_t v154 = 0;
            }
            uint64_t DerivedStorage = v145;
            uint64_t v155 = [(FigCaptureStillImageUnifiedBracketingSinkPipeline *)v148 initWithConfiguration:v318 captureDevice:v311 sourceOutputsByPortType:v149 highResStillImageDimensions:v150 supplementalPointCloudCaptureDevice:v151 supplementalPointCloudSourceOutput:v152 captureStatusDelegate:v153 inferenceScheduler:v310 cinematicFramingStatesProvider:v154 graph:*(void *)(v145 + 632) name:v147];
            goto LABEL_407;
          }
        }
LABEL_271:
        FigDebugAssert3();
        char v188 = 0;
        goto LABEL_438;
      }
    }
  }
  unsigned int v298 = IsCameraOrDerivative;
  if (v21 != 5)
  {
    int v42 = objc_alloc_init(FigCaptureStillImageSinkPipelineConfiguration);
    cs_updateStillImageSinkPipelineCommonConfiguration(v42, (uint64_t)v20, v15, v16, v18, v298);
    -[FigCaptureStillImageSinkPipelineConfiguration setClientPID:]((uint64_t)v42, *(_DWORD *)(DerivedStorage + 16));
    -[FigCaptureStillImageSinkPipelineConfiguration setStillImageISPChromaNoiseReductionEnabled:]((uint64_t)v42, [v18 ispChromaNoiseReductionEnabled]);
    -[FigCaptureStillImageSinkPipelineConfiguration setStereoFusionSupported:]((uint64_t)v42, [v18 isStereoFusionSupported]);
    -[FigCaptureStillImageSinkPipelineConfiguration setIsIrisSupported:]((uint64_t)v42, [v18 isIrisSupported]);
    -[FigCaptureStillImageSinkPipelineConfiguration setHdrSupported:]((uint64_t)v42, [v18 isHDRSupported]);
    id v318 = v42;
    -[FigCaptureStillImageSinkPipelineConfiguration setGnrHDRSupported:]((uint64_t)v42, [v18 isGNRHDRSupported]);
    if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v20)) {
      -[FigCaptureStillImageSinkPipelineConfiguration setStillImageColorInfoForFramesOriginatingFromVideoStream:](v42, newValue);
    }
    uint64_t v43 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", objc_msgSend(v20, "sourceID"));
    if (v43) {
      uint64_t v44 = *(void *)(v43 + 24);
    }
    else {
      uint64_t v44 = 0;
    }
    float32x4_t v45 = -[FigCaptureStillImageSinkPipeline initWithConfiguration:captureDevice:sourceOutputsByPortType:captureStatusDelegate:inferenceScheduler:graph:name:]([FigCaptureStillImageSinkPipeline alloc], "initWithConfiguration:captureDevice:sourceOutputsByPortType:captureStatusDelegate:inferenceScheduler:graph:name:", v42, v311, v345, *(void *)(DerivedStorage + 712), v310, *(void *)(DerivedStorage + 632), [NSString stringWithFormat:@"%@ %@", v44, +[FigCaptureStillImageSinkPipeline pipelineBaseName](FigCaptureStillImageSinkPipeline, "pipelineBaseName")]);
    goto LABEL_408;
  }
  int v29 = objc_alloc_init(FigCapturePhotonicEngineSinkPipelineConfiguration);
  int v380 = 0;
  id v318 = v29;
  cs_updateStillImageSinkPipelineCommonConfiguration(v29, (uint64_t)v20, v15, v16, v18, v298);
  BOOL v30 = (void *)[v15 sourceConfiguration];
  uint64_t v304 = a1;
  uint64_t v31 = DerivedStorage;
  if (objc_msgSend((id)objc_msgSend(v15, "sinkConfiguration"), "sinkType") == 10) {
    uint64_t v32 = (void *)[v15 sinkConfiguration];
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v100 = [v30 depthDataFormat];
  uint64_t v297 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v344);
  uint64_t v101 = (void *)-[FigCaptureCameraSourcePipeline stillImageOutputsByPortType]((uint64_t)v344);
  char v102 = (void *)-[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v344);
  id obja = v32;
  int v103 = [v32 maxQualityPrioritization];
  BOOL v104 = 0;
  int v293 = v103;
  if (objc_msgSend((id)objc_msgSend(v30, "requiredFormat"), "isHighPhotoQualitySupported") && v103 >= 2) {
    BOOL v104 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v344);
  }
  objc_msgSend(v318, "setRawSensorDimensions:", objc_msgSend(v18, "sensorDimensions"));
  [v18 sensorCenterOffset];
  objc_msgSend(v318, "setSensorCenterOffset:");
  int v105 = (void *)[v101 allKeys];
  long long v327 = (void *)[v102 allKeys];
  id v337 = (id)[MEMORY[0x1E4F1CA60] dictionary];
  __int16 v334 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph()) {
    int v106 = [v18 sushiRawSupported];
  }
  else {
    int v106 = 0;
  }
  uint64_t v107 = v344;
  int v108 = [obja demosaicedRawEnabled];
  int v332 = v108 | v106;
  int v296 = v108;
  if ((v108 | v106) == 1) {
    int v317 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  }
  else {
    int v317 = 0;
  }
  uint64_t v306 = v31;
  unsigned int v307 = v15;
  float v302 = v30;
  uint64_t v295 = v22;
  BOOL v294 = v104;
  CMTimeValue v292 = (void *)v100;
  int v325 = v106;
  if (v106) {
    int v323 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  }
  else {
    int v323 = 0;
  }
  id v329 = (id)[MEMORY[0x1E4F1CA48] array];
  long long v376 = 0u;
  long long v377 = 0u;
  long long v378 = 0u;
  long long v379 = 0u;
  id v330 = (id)[v297 captureStreams];
  uint64_t v109 = [v330 countByEnumeratingWithState:&v376 objects:v397 count:16];
  if (!v109) {
    goto LABEL_154;
  }
  uint64_t v110 = v109;
  uint64_t v111 = *(void *)v377;
  uint64_t v320 = *MEMORY[0x1E4F1CF80];
  do
  {
    uint64_t v112 = 0;
    do
    {
      if (*(void *)v377 != v111) {
        objc_enumerationMutation(v330);
      }
      unsigned int v113 = *(void **)(*((void *)&v376 + 1) + 8 * v112);
      uint64_t v114 = objc_msgSend(v113, "portType", v287, v289);
      if (([v105 containsObject:v114] & 1) != 0
        || [v327 containsObject:v114])
      {
        objc_msgSend(v337, "setObject:forKeyedSubscript:", objc_msgSend(v113, "sensorIDString"), v114);
        float v115 = NSNumber;
        [v113 baseZoomFactor];
        objc_msgSend(v334, "setObject:forKeyedSubscript:", objc_msgSend(v115, "numberWithFloat:"), v114);
        uint64_t v116 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v107);
        uint64_t v117 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(v116, v114, &v380);
        BOOL v118 = (const void *)v117;
        if (v380)
        {
          uint64_t v289 = v303;
          LODWORD(v287) = v380;
        }
        else
        {
          uint64_t v119 = v117;
          if (!v117) {
            uint64_t v119 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v107);
          }
          uint64_t v120 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v107);
          unsigned int v121 = v343;
          uint64_t v122 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v120, v343, v114, &v380);
          float v18 = (void *)v122;
          if (!v380)
          {
            if (v122) {
              unsigned int v121 = (void *)v122;
            }
            if (v332)
            {
              long long v375 = 0;
              uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v123) {
                uint64_t v124 = v123;
              }
              else {
                uint64_t v124 = 0;
              }
              id v125 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void **))(v124 + 48);
              if (v125)
              {
                int v380 = v125(v119, @"WhiteBalanceCalibrations", v320, &v375);
                if (!v380) {
                  [v317 setObject:BWDNGColorCalibrations(v375) forKeyedSubscript:v114];
                }
              }
              else
              {
                int v380 = -12782;
              }

              if (v325) {
                objc_msgSend(v323, "setObject:forKeyedSubscript:", objc_msgSend(v121, "rawLensShadingCorrection"), v114);
              }
            }
            if (+[FigCaptureSourceFormatDimensions identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:", [obja maxPhotoDimensions], objc_msgSend(v121, "highResStillImageDimensions")) == 2)objc_msgSend(v329, "addObject:", v114); {
            uint64_t v107 = v344;
            }
            if (v118) {
LABEL_144:
            }
              CFRelease(v118);
LABEL_145:
            if (v18) {
              CFRelease(v18);
            }
            goto LABEL_147;
          }
          uint64_t v289 = v303;
          LODWORD(v287) = v380;
        }
        FigDebugAssert3();
        if (v118) {
          goto LABEL_144;
        }
        goto LABEL_145;
      }
LABEL_147:
      ++v112;
    }
    while (v110 != v112);
    uint64_t v126 = [v330 countByEnumeratingWithState:&v376 objects:v397 count:16];
    uint64_t v110 = v126;
  }
  while (v126);
LABEL_154:
  objc_msgSend(v318, "setStillImageSinkPipelineProcessingMode:", 0, v287);
  [v318 setPipelineStagePriority:14];
  [v318 setInferencePriority:14];
  uint64_t v127 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v107);
  [v318 setDeviceType:cs_captureSourceDeviceType(v127)];
  uint64_t v128 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v107);
  [v318 setDevicePosition:cs_captureSourceCameraPosition(v128)];
  objc_msgSend(v318, "setDeviceHasFlash:", objc_msgSend(v297, "hasFlash"));
  [v318 setSensorIDStringsByPortType:v337];
  [v318 setBaseZoomFactorsByPortType:v334];
  if (FigCaptureSoftISPEnabled(v302, (void *)[v307 sinkConfiguration])
    && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v107))
  {
    [v318 setSfhrMode:FigCaptureSFHRMode(v302)];
    float v131 = v343;
    char v132 = obja;
    if ([v343 swfrSupported]) {
      uint64_t v130 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "swfrVersion");
    }
    else {
      uint64_t v130 = 0;
    }
    unsigned int v129 = 1;
  }
  else
  {
    [v318 setSfhrMode:0];
    unsigned int v129 = 0;
    uint64_t v130 = 0;
    char v132 = obja;
    float v131 = v343;
  }
  [v318 setSwfrVersion:v130];
  if ([v132 constantColorEnabled]) {
    uint64_t v156 = [v131 constantColorVersion];
  }
  else {
    uint64_t v156 = 0;
  }
  [v318 setConstantColorVersion:v156];
  if ([v132 constantColorEnabled]) {
    uint64_t v157 = 0x18000000200;
  }
  else {
    uint64_t v157 = 0;
  }
  [v318 setConstantColorConfidenceMapDimensions:v157];
  objc_msgSend(v318, "setConstantColorClippingRecoveryEnabled:", objc_msgSend(v132, "constantColorClippingRecoveryEnabled"));
  objc_msgSend(v318, "setConstantColorSaturationBoostEnabled:", objc_msgSend(v132, "constantColorSaturationBoostEnabled"));
  objc_msgSend(v318, "setRedEyeReductionVersion:", objc_msgSend(v131, "redEyeReductionVersion"));
  if ([v131 semanticRenderingSupported]) {
    uint64_t v158 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "semanticRenderingVersion");
  }
  else {
    uint64_t v158 = 0;
  }
  [v318 setSemanticRenderingVersion:v158];
  if ([v132 depthDataDeliveryEnabled]) {
    uint64_t v159 = 0;
  }
  else {
    uint64_t v159 = [v131 semanticDevelopmentVersion];
  }
  [v318 setSemanticDevelopmentVersion:v159];
  objc_msgSend(v318, "setSemanticStyleRenderingEnabled:", objc_msgSend(v132, "semanticStyleRenderingEnabled"));
  unsigned int v160 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "smartStyleRenderingVersion");
  if (v299) {
    uint64_t v161 = v160;
  }
  else {
    uint64_t v161 = 0;
  }
  [v318 setSmartStyleRenderingVersion:v161];
  objc_msgSend(v318, "setSmartStyleReversibilityEnabled:", (int)objc_msgSend(v318, "smartStyleRenderingVersion") > 0);
  if ([v318 smartStyleRenderingVersion])
  {
    [v318 setSmartStyleLinearThumbnailDimensions:0x30000000400];
    [v318 setSmartStyleStyledThumbnailDimensions:0xC000000100];
  }
  [v318 setGenerateInferencesForSemanticProcessingIfNeeded:1];
  if ([v131 isDeepZoomSupported]) {
    uint64_t v162 = [+[FigCaptureCameraParameters sharedInstance] deepZoomVersion];
  }
  else {
    uint64_t v162 = 0;
  }
  [v318 setDeepZoomVersion:v162];
  [v318 setDeepZoomMode:0];
  uint64_t v163 = (void *)[MEMORY[0x1E4F1CA48] array];
  int v164 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](v107);
  char v165 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnStillImageOutputEnabled](v107);
  BOOL v166 = (BOOL)v107;
  uint64_t v167 = v165;
  if (!-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](v166))
  {
    long long v373 = 0u;
    long long v374 = 0u;
    long long v371 = 0u;
    long long v372 = 0u;
    uint64_t v168 = [v164 countByEnumeratingWithState:&v371 objects:v396 count:16];
    if (v168)
    {
      uint64_t v169 = v168;
      uint64_t v170 = *(void *)v372;
      do
      {
        for (uint64_t k = 0; k != v169; ++k)
        {
          if (*(void *)v372 != v170) {
            objc_enumerationMutation(v164);
          }
          uint64_t v172 = *(void *)(*((void *)&v371 + 1) + 8 * k);
          if ((v129 | [v167 containsObject:v172] ^ 1) == 1) {
            [v163 addObject:v172];
          }
        }
        uint64_t v169 = [v164 countByEnumeratingWithState:&v371 objects:v396 count:16];
      }
      while (v169);
    }
  }
  unsigned int v335 = v129;
  [v318 setPortTypesWithGeometricDistortionCorrectionEnabled:v163];
  int v173 = [v343 stillImageGDCSourceMode];
  if (([v343 intelligentDistortionCorrectionSupported] & 1) != 0 || objc_msgSend(v163, "count"))
  {
    objc_msgSend(v318, "setDcProcessorVersion:", -[FigCaptureCameraParameters distortionCorrectionVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "distortionCorrectionVersion"));
    [v318 setDcProcessingWithDepthSupported:objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v302, "source"), @"DepthDataDeliveryConfigurations"), "objectForKeyedSubscript:", @"DCProcessingSupported", "BOOLValue")];
    if (v173 == 2)
    {
      char v174 = obja;
      uint64_t v175 = [obja depthDataDeliveryEnabled] ^ 1;
    }
    else
    {
      if (v173 == 3) {
        uint64_t v175 = v129;
      }
      else {
        uint64_t v175 = 0;
      }
      BOOL v176 = v173 == 1;
      char v174 = obja;
      if (v176) {
        uint64_t v175 = 1;
      }
    }
    [v318 setGdcInDCProcessorSupported:v175];
    if ([v174 intelligentDistortionCorrectionEnabled])
    {
      uint64_t v177 = (void *)[MEMORY[0x1E4F1CA48] array];
      long long v367 = 0u;
      long long v368 = 0u;
      long long v369 = 0u;
      long long v370 = 0u;
      uint64_t v178 = (void *)[v297 captureStreams];
      uint64_t v179 = [v178 countByEnumeratingWithState:&v367 objects:v395 count:16];
      if (!v179) {
        goto LABEL_266;
      }
      uint64_t v180 = v179;
      uint64_t v181 = *(void *)v368;
      while (1)
      {
        for (uint64_t m = 0; m != v180; ++m)
        {
          if (*(void *)v368 != v181) {
            objc_enumerationMutation(v178);
          }
          uint64_t v183 = [*(id *)(*((void *)&v367 + 1) + 8 * m) portType];
          uint64_t v184 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
          CFArrayRef v185 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v184, v343, v183, &v380);
          if (v380)
          {
            uint64_t v291 = v303;
            LODWORD(v28_Block_object_dispose(&STACK[0x4E0], 8) = v380;
            FigDebugAssert3();
            int v243 = v313;
            uint64_t v237 = v344;
            long long v221 = v318;
            uint64_t DerivedStorage = v306;
            goto LABEL_398;
          }
          CFArrayRef v186 = v185;
          if (!v185)
          {
            FigDebugAssert3();
            goto LABEL_390;
          }
          if ([v185 intelligentDistortionCorrectionSupported]) {
            [v177 addObject:v183];
          }
        }
        uint64_t v180 = [v178 countByEnumeratingWithState:&v367 objects:v395 count:16];
        if (!v180)
        {
LABEL_266:
          if ([v177 count]) {
            int v187 = (void *)[v177 copy];
          }
          else {
            int v187 = 0;
          }
          [v318 setPortTypesWithIntelligentDistortionCorrectionEnabled:v187];

          break;
        }
      }
    }
    if ([v163 count] && !objc_msgSend(v318, "gdcInDCProcessorSupported"))
    {
LABEL_390:
      unsigned int v346 = -12780;
      goto LABEL_391;
    }
  }
  uint64_t v189 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
  if (csp_gdcExpandsImageDimensions(v189)
    && [v343 gdcInStillImageSinkPipelineSupported]
    && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((BOOL)v344)
    && ([v302 cinematicFramingEnabled] & 1) == 0
    && ([v302 manualCinematicFramingEnabled] & 1) == 0)
  {
    objc_msgSend(v318, "setGdcInDCProcessorOutputCropDimensions:", objc_msgSend(v343, "stillImageGDCInDCProcessorOutputCropDimensions"));
    objc_msgSend(v318, "setOutputStillImageDimensions:", objc_msgSend(v343, "soleHighResStillImageDimensions"));
  }
  if (cs_shouldEnableGreenGhostMitigation(v302)) {
    uint64_t v190 = [v343 greenGhostMitigationVersion];
  }
  else {
    uint64_t v190 = 0;
  }
  uint64_t v191 = obja;
  [v318 setGreenGhostMitigationVersion:v190];
  if (v296)
  {
    objc_msgSend(v318, "setDemosaicedRawPixelFormat:", objc_msgSend(v343, "internalDemosaicedRawPixelFormat"));
    goto LABEL_288;
  }
  if (v325)
  {
LABEL_288:
    [v318 setRawColorCalibrationsByPortType:v317];
    [v318 setRawLensShadingCorrectionCoefficientsByPortType:v323];
  }
  uint64_t v192 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (obja)
  {
    unsigned int v193 = [v343 isDeepFusionSupported];
    if (v293 > 2) {
      uint64_t v194 = v193;
    }
    else {
      uint64_t v194 = 0;
    }
    [v318 setDeepFusionSupported:v194];
    [v318 setDepthWithDeepFusionSupported:objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v302, "source"), @"DepthDataDeliveryConfigurations"), "objectForKeyedSubscript:", @"DeepFusionSupported", "BOOLValue")];
    int v195 = +[FigCaptureSourceFormatDimensions identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:", [obja maxPhotoDimensions], objc_msgSend(v343, "highResStillImageDimensions"));
    long long v196 = -[FigCaptureCameraSourcePipeline ultraHighResolutionSensorRawDimensionsByPortType](v344);
    if ([obja deferredProcessingEnabled])
    {
      if (v195 == 2)
      {
        long long v365 = 0u;
        long long v366 = 0u;
        long long v363 = 0u;
        long long v364 = 0u;
        uint64_t v197 = [v329 countByEnumeratingWithState:&v363 objects:&v391 count:16];
        if (v197)
        {
          uint64_t v198 = v197;
          uint64_t v199 = *(void *)v364;
          do
          {
            for (uint64_t n = 0; n != v198; ++n)
            {
              if (*(void *)v364 != v199) {
                objc_enumerationMutation(v329);
              }
              uint64_t v201 = *(void *)(*((void *)&v363 + 1) + 8 * n);
              if (![v192 objectForKeyedSubscript:v201]) {
                objc_msgSend(v192, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"), v201);
              }
              objc_msgSend((id)objc_msgSend(v192, "objectForKeyedSubscript:", v201), "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", v201), &unk_1EFAFFDC8);
            }
            uint64_t v198 = [v329 countByEnumeratingWithState:&v363 objects:&v391 count:16];
          }
          while (v198);
        }
        [v318 setUltraHighResolutionProcessingEnabled:0];
      }
      if (v195 >= 1)
      {
        if ([v318 deepFusionSupported])
        {
          if ([v318 clientIsCameraOrDerivative])
          {
            long long v361 = 0u;
            long long v362 = 0u;
            long long v359 = 0u;
            long long v360 = 0u;
            long long v202 = (void *)[v343 highResStillImageDimensions];
            uint64_t v203 = [v202 countByEnumeratingWithState:&v359 objects:&v387 count:16];
            if (v203)
            {
              uint64_t v204 = v203;
              uint64_t v205 = *(void *)v360;
              do
              {
                for (iuint64_t i = 0; ii != v204; ++ii)
                {
                  if (*(void *)v360 != v205) {
                    objc_enumerationMutation(v202);
                  }
                  long long v207 = *(void **)(*((void *)&v359 + 1) + 8 * ii);
                  if ([v207 flavor] == 1) {
                    objc_msgSend(v318, "setDeepFusionEnhancedResolutionDimensions:", objc_msgSend(v207, "dimensions"));
                  }
                }
                uint64_t v204 = [v202 countByEnumeratingWithState:&v359 objects:&v387 count:16];
              }
              while (v204);
            }
          }
        }
      }
    }
    else if (v195 == 2)
    {
      long long v357 = 0u;
      long long v358 = 0u;
      long long v355 = 0u;
      long long v356 = 0u;
      uint64_t v208 = [v329 countByEnumeratingWithState:&v355 objects:&v383 count:16];
      if (v208)
      {
        uint64_t v209 = v208;
        uint64_t v210 = *(void *)v356;
        do
        {
          for (juint64_t j = 0; jj != v209; ++jj)
          {
            if (*(void *)v356 != v210) {
              objc_enumerationMutation(v329);
            }
            uint64_t v212 = *(void *)(*((void *)&v355 + 1) + 8 * jj);
            if (![v192 objectForKeyedSubscript:v212]) {
              objc_msgSend(v192, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"), v212);
            }
            objc_msgSend((id)objc_msgSend(v192, "objectForKeyedSubscript:", v212), "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", v212), &unk_1EFAFFDC8);
          }
          uint64_t v209 = [v329 countByEnumeratingWithState:&v355 objects:&v383 count:16];
        }
        while (v209);
      }
      objc_msgSend(v318, "setUltraHighResolutionProcessingEnabled:", objc_msgSend(v343, "isLearnedNRSupported"));
    }
  }
  unsigned int v213 = -[FigCaptureCameraSourcePipeline zoomBasedQSubSensorRawDimensionsByPortType](v344);
  long long v351 = 0u;
  long long v352 = 0u;
  long long v353 = 0u;
  long long v354 = 0u;
  uint64_t v214 = [v213 countByEnumeratingWithState:&v351 objects:cf count:16];
  if (v214)
  {
    uint64_t v215 = v214;
    uint64_t v216 = *(void *)v352;
    uint64_t v217 = *MEMORY[0x1E4F52DE8];
    do
    {
      for (kuint64_t k = 0; kk != v215; ++kk)
      {
        if (*(void *)v352 != v216) {
          objc_enumerationMutation(v213);
        }
        long long v219 = *(void **)(*((void *)&v351 + 1) + 8 * kk);
        [v219 isEqualToString:v217];
        if (![v192 objectForKeyedSubscript:v219]) {
          objc_msgSend(v192, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"), v219);
        }
        objc_msgSend((id)objc_msgSend(v192, "objectForKeyedSubscript:", v219), "setObject:forKeyedSubscript:", objc_msgSend(v213, "objectForKeyedSubscript:", v219), &unk_1EFAFFE10);
      }
      uint64_t v215 = [v213 countByEnumeratingWithState:&v351 objects:cf count:16];
    }
    while (v215);
  }
  long long v220 = v343;
  long long v221 = v318;
  if (![obja digitalFlashCaptureEnabled])
  {
LABEL_355:
    if ([v192 count]) {
      double v235 = v192;
    }
    else {
      double v235 = 0;
    }
    [v221 setDimensionsByQSubResolutionFlavorByPortType:v235];
    objc_msgSend(v221, "setLearnedNRSupported:", objc_msgSend(v220, "isLearnedNRSupported"));
    if ([v220 isDeferredPhotoProcessingSupported]) {
      uint64_t v236 = [v191 deferredProcessingEnabled];
    }
    else {
      uint64_t v236 = 0;
    }
    uint64_t v237 = v344;
    [v221 setDeferredProcessingSupported:v236];
    objc_msgSend(v221, "setResponsiveShutterSupported:", objc_msgSend(v220, "isResponsiveShutterSupported"));
    objc_msgSend(v221, "setResponsiveShutterEnabled:", objc_msgSend(v191, "responsiveCaptureEnabled"));
    objc_msgSend(v221, "setFastCapturePrioritizationEnabled:", objc_msgSend(v191, "fastCapturePrioritizationEnabled"));
    objc_msgSend(v221, "setCaptureTimePhotosCurationSupported:", objc_msgSend(v220, "isCaptureTimePhotoCurationSupported"));
    if ([v191 bravoConstituentPhotoDeliveryEnabled]
      && (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v302, "source"), @"ConstituentPhotoCalibrationData"), "BOOLValue") & 1) == 0)
    {
      uint64_t v289 = v303;
      LODWORD(v28_Block_object_dispose(&STACK[0x4E0], 8) = 0;
      FigDebugAssert3();
    }
    if (objc_msgSend(v220, "isSIFRSupported", v288, v289))
    {
      if ([v220 isStillImageStabilizationSupported]) {
        uint64_t v238 = 1;
      }
      else {
        uint64_t v238 = [v220 isHighPhotoQualitySupported];
      }
    }
    else
    {
      uint64_t v238 = 0;
    }
    [v221 setSifrStillImageCaptureEnabledIfAvailable:v238];
    if ([v191 depthDataDeliveryEnabled])
    {
      [v221 setDepthDataType:cs_stillImageDepthDataType(v302)];
      objc_msgSend(v221, "setPearlModuleType:", FigVideoCaptureSourcePearlModuleType(objc_msgSend(v302, "source"), &v380));
      if (v380)
      {
        uint64_t v291 = v303;
        LODWORD(v28_Block_object_dispose(&STACK[0x4E0], 8) = v380;
        FigDebugAssert3();
        int v243 = v313;
        uint64_t DerivedStorage = v306;
        goto LABEL_398;
      }
      objc_msgSend(v221, "setSifrStillImageCaptureEnabledIfAvailable:", objc_msgSend(v221, "sifrStillImageCaptureEnabledIfAvailable") & (objc_msgSend((id)objc_msgSend(v302, "requiredFormat"), "isSIFRStillImageCaptureWithDepthDataDisabled") ^ 1));
      [v220 maxContinuousZoomFactorForDepthDataDelivery];
      [v221 setContinuousZoomWithDepthSupported:v239 != 0.0];
    }
    if (([v220 isGainMapSupported] & 1) != 0
      || [v292 gainMapSupported]
      && [v191 depthDataDeliveryEnabled])
    {
      LODWORD(v240) = 0x40000000;
      [v221 setGainMapMainImageDownscalingFactor:v240];
    }
    LODWORD(v240) = 2.0;
    [v221 setUbInferenceMainImageDownscalingFactor:v240];
    [v220 defaultPortraitLightingEffectStrength];
    [v221 setAdjustablePortraitLightingEffectStrengthSupported:1];
    uint64_t v241 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
    [v221 setSupportedSemanticSegmentationMatteURNs:cs_captureSourceGetAttribute(v241, @"SupportedSemanticSegmentationMatteURNs")];
    objc_msgSend(v221, "setEnabledSemanticSegmentationMatteURNs:", objc_msgSend(v191, "enabledSemanticSegmentationMatteURNs"));
    [v221 setSoftISPSupported:v335];
    if (v335)
    {
      objc_msgSend(v221, "setSensorRawPixelFormat:", objc_msgSend(v297, "sensorRawPixelFormat"));
      objc_msgSend(v221, "setQuadraProcessingSupportEnabled:", objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v302, "source"), 0x1EFA6B9E0), "BOOLValue"));
    }
    objc_msgSend(v221, "setStillImageGDCSourceMode:", objc_msgSend((id)objc_msgSend(v302, "requiredFormat"), "stillImageGDCSourceMode"));
    if ([v221 depthDataType] != 8 || objc_msgSend(v318, "softISPSupported"))
    {
      long long v221 = v318;
      if ([v318 depthDataType] == 2)
      {
        uint64_t v242 = 1;
        int v243 = v313;
        uint64_t DerivedStorage = v306;
        uint64_t v237 = v344;
        char v244 = v302;
        BOOL v245 = v294;
      }
      else
      {
        uint64_t DerivedStorage = v306;
        uint64_t v237 = v344;
        char v244 = v302;
        BOOL v245 = v294;
        if ([v318 depthDataType] == 8)
        {
          uint64_t v242 = 1;
          int v243 = v313;
        }
        else
        {
          int v243 = v313;
          if (([v318 deepFusionSupported] & 1) != 0
            || ([v318 learnedNRSupported] & 1) != 0)
          {
            uint64_t v242 = 1;
          }
          else
          {
            uint64_t v242 = [v318 softISPSupported];
          }
        }
      }
      objc_msgSend(v318, "setCameraInfoByPortType:", objc_msgSend(v297, "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", v242, objc_msgSend(v318, "softISPSupported"), objc_msgSend(v318, "softISPSupported")));
      objc_msgSend(v318, "setModuleCalibrationByPortType:", objc_msgSend(v297, "moduleCalibrationByPortType"));
      objc_msgSend(v318, "setMaxLossyCompressionLevel:", +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
      [v318 setHighQualityPhotoCaptureForVideoFormatEnabled:v245];
      cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(v318, v244, (uint64_t)v237);
      goto LABEL_398;
    }
    goto LABEL_390;
  }
  int v222 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v347 = 0u;
  long long v348 = 0u;
  long long v349 = 0u;
  long long v350 = 0u;
  id v338 = (id)[v297 captureStreams];
  uint64_t v223 = [v338 countByEnumeratingWithState:&v347 objects:v381 count:16];
  if (!v223) {
    goto LABEL_351;
  }
  uint64_t v224 = v223;
  uint64_t v225 = *(void *)v348;
LABEL_341:
  uint64_t v226 = 0;
  while (1)
  {
    if (*(void *)v348 != v225) {
      objc_enumerationMutation(v338);
    }
    int v227 = (void *)[*(id *)(*((void *)&v347 + 1) + 8 * v226) portType];
    uint64_t v228 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v344);
    uint64_t v229 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v228, v343, (uint64_t)v227, &v380);
    if (v380) {
      break;
    }
    char v231 = (void *)v229;
    if (!v229) {
      goto LABEL_390;
    }
    CFStringRef v232 = (const __CFString *)[NSString stringWithFormat:@"rawNightMode.enabled.%@", objc_msgSend((id)BWPortTypeToDisplayString(v227, v230), "lowercaseString")];
    double v233 = (void *)CFPreferencesCopyAppValue(v232, @"com.apple.coremedia");
    if (([v233 BOOLValue] & 1) != 0
      || [v231 isDigitalFlashRawNightModeSupported])
    {
      [v222 addObject:v227];
    }

    if (v224 == ++v226)
    {
      uint64_t v224 = [v338 countByEnumeratingWithState:&v347 objects:v381 count:16];
      if (!v224)
      {
LABEL_351:
        if ([v222 count]) {
          id v234 = (id)[v222 copy];
        }
        else {
          id v234 = 0;
        }
        uint64_t v191 = obja;
        long long v220 = v343;
        long long v221 = v318;
        [v318 setPortTypesWithRawNightModeEnabled:v234];
        goto LABEL_355;
      }
      goto LABEL_341;
    }
  }
  uint64_t v291 = v303;
  LODWORD(v28_Block_object_dispose(&STACK[0x4E0], 8) = v380;
  FigDebugAssert3();
  int v243 = v313;
  uint64_t DerivedStorage = v306;
  uint64_t v237 = v344;
  long long v221 = v318;
LABEL_398:
  unsigned int v346 = v380;
  if (v380)
  {
LABEL_391:
    FigDebugAssert3();
    char v188 = 0;
    a7 = v313;
    goto LABEL_438;
  }
  v397[0] = 0;
  v396[0] = 0;
  v395[0] = [v221 cameraInfoByPortType];
  *(void *)&long long v391 = [v221 sensorIDStringsByPortType];
  if (cs_configurePointCloudSourceForStillImageSinkPipeline(v308, [v314 sourceDeviceType], &v345, v395, &v391, v397, v396))
  {
    [v221 setCameraInfoByPortType:v395[0]];
    [v221 setSensorIDStringsByPortType:(void)v391];
  }
  uint64_t v143 = v243;
  uint64_t v246 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", objc_msgSend(v237, "sourceID", v288, v291));
  if (v246) {
    uint64_t v247 = *(void *)(v246 + 24);
  }
  else {
    uint64_t v247 = 0;
  }
  uint64_t v248 = [NSString stringWithFormat:@"%@ %@", v247, +[FigCapturePhotonicEngineSinkPipeline pipelineBaseName](FigCapturePhotonicEngineSinkPipeline, "pipelineBaseName")];
  char v249 = [FigCapturePhotonicEngineSinkPipeline alloc];
  uint64_t v250 = v345;
  uint64_t v251 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat]((uint64_t)v344) highResStillImageDimensions];
  uint64_t v252 = v397[0];
  uint64_t v253 = v396[0];
  uint64_t v254 = *(void *)(DerivedStorage + 712);
  if ([v318 cinematicFramingWarpingRequired]) {
    uint64_t v255 = -[FigCaptureCameraSourcePipeline cinematicFramingCameraStatesProvider]((uint64_t)v344);
  }
  else {
    uint64_t v255 = 0;
  }
  uint64_t v155 = [(FigCapturePhotonicEngineSinkPipeline *)v249 initWithConfiguration:v318 captureDevice:v311 sourceOutputsByPortType:v250 sourceSensorRawOutputsByPortType:v295 highResStillImageDimensions:v251 supplementalPointCloudCaptureDevice:v252 supplementalPointCloudSourceOutput:v253 captureStatusDelegate:v254 inferenceScheduler:v310 cinematicFramingStatesProvider:v255 graph:*(void *)(DerivedStorage + 632) name:v248];
LABEL_407:
  float32x4_t v45 = v155;
  float v18 = v343;
  float v15 = v307;
  a7 = v143;
  a1 = v304;
LABEL_408:
  if (!v45)
  {
    FigDebugAssert3();
    char v188 = 0;
    unsigned int v346 = FigSignalErrorAt();
    goto LABEL_438;
  }
  float v256 = [(FigCaptureStillImageSinkPipeline *)v45 stillImageCoordinatorNode];
  [(FigCaptureStillImageSinkPipeline *)v45 compressedShotBufferNode];
  char v257 = objc_alloc_init(BWStillImageSampleBufferSinkNodeAnalyticsConfiguration);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatDimensionWidth:](v257, "setFormatDimensionWidth:", [v18 dimensions]);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatDimensionHeight:](v257, "setFormatDimensionHeight:", (unint64_t)[v18 dimensions] >> 32);
  [v18 maxSupportedFrameRate];
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatMaxFrameRate:](v257, "setFormatMaxFrameRate:");
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsHighQualityPhotoWithVideoFormatSupported:](v257, "setIsHighQualityPhotoWithVideoFormatSupported:", [v18 isHighPhotoQualitySupported]);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsPhotoFormat:](v257, "setIsPhotoFormat:", [v18 isPhotoFormat]);
  [(BWStillImageSampleBufferSinkNodeAnalyticsConfiguration *)v257 setIsTimeLapse:v315];
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setPixelFormat:](v257, "setPixelFormat:", [v18 format]);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setBinned:](v257, "setBinned:", [v18 isBinned]);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsSemanticStyleRenderingSupported:](v257, "setIsSemanticStyleRenderingSupported:", [v18 isSemanticStyleRenderingSupported]);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsSmartStyleRenderingSupported:](v257, "setIsSmartStyleRenderingSupported:", [v18 isSmartStyleRenderingSupported]);
  [(BWStillImageSampleBufferSinkNodeAnalyticsConfiguration *)v257 setFastCapturePrioritizationEnabled:[(BWStillImageCoordinatorNode *)v256 fastCapturePrioritizationEnabled]];
  __n128 v258 = [(FigCaptureStillImageSinkPipeline *)v45 stillImageSinkNode];
  CFTypeRef v259 = (void *)[v318 sinkConfiguration];
  CMTime v260 = v15;
  uint64_t v261 = [v18 isCaptureTimePhotoCurationSupported];
  int objb = v45;
  uint64_t v262 = (id *)DerivedStorage;
  uint64_t v263 = *(void *)(CMBaseObjectGetDerivedStorage() + 664);
  uint64_t v264 = [v259 sinkID];
  if ([v259 sinkType] != 10) {
    CFTypeRef v259 = 0;
  }
  [(BWStillImageSampleBufferSinkNode *)v258 setStillImageCapturePipeliningMode:[(BWStillImageCoordinatorNode *)v256 stillImageCapturePipeliningMode]];
  [(BWStillImageSampleBufferSinkNode *)v258 setDeferredPhotoProcessorEnabled:0];
  [(BWStillImageSampleBufferSinkNode *)v258 setClientIsCameraOrDerivative:captureSession_clientIsCameraOrDerivative(a1)];
  uint64_t v265 = v261;
  long long v266 = v260;
  [(BWStillImageSampleBufferSinkNode *)v258 setCaptureTimePhotosCurationSupported:v265];
  -[BWStillImageSampleBufferSinkNode setFocusPixelBlurScoreEnabled:](v258, "setFocusPixelBlurScoreEnabled:", [v259 focusPixelBlurScoreEnabled]);
  v397[0] = MEMORY[0x1E4F143A8];
  v397[1] = 3221225472;
  v397[2] = (uint64_t)__captureSession_configureStillImageSinkNode_block_invoke;
  v397[3] = (uint64_t)&unk_1E5C28A40;
  v397[4] = v263;
  v397[5] = v264;
  long long v267 = v262;
  long long v268 = objb;
  v397[6] = (uint64_t)v256;
  v397[7] = a1;
  [(BWStillImageSampleBufferSinkNode *)v258 setSampleBufferAvailableHandler:v397];
  [(BWStillImageSampleBufferSinkNode *)v258 setAnalyticsConfiguration:v257];
  long long v269 = objc_alloc_init(FigCapturePixelConverter);
  long long v270 = (FigCaptureSessionPreparedBracket *)objc_msgSend(v267[66], "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(v260, "sinkConfiguration"), "sinkID"));
  if (!v270)
  {
    if (objc_msgSend((id)objc_msgSend(v260, "sinkConfiguration"), "sinkType") == 3) {
      long long v270 = objc_alloc_init(FigCaptureSessionPreparedBracket);
    }
    else {
      long long v270 = 0;
    }
  }
  if (objc_msgSend((id)objc_msgSend(v260, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled")) {
    float v271 = 0.90909;
  }
  else {
    float v271 = 0.0;
  }
  long long v272 = [FigCaptureStillImageSinkPipelineSessionStorage alloc];
  uint64_t v273 = [v309 imageQueueSinkNode];
  *(float *)&double v274 = v271;
  char v188 = [(FigCaptureStillImageSinkPipelineSessionStorage *)v272 initWithStillImageSinkPipeline:objb cameraSourcePipeline:v344 previewSinkNode:v273 pixelConverter:v269 colorInfo:newValue stillImagesAreOptimizedForOfflineVideoStabilization:v315 videoStabilizationOverscanCropMultiplier:v274 preparedBracket:v270 stillImageConnectionConfiguration:v260];
  a7 = v313;
  if (!v188)
  {
    FigDebugAssert3();
    unsigned int v346 = -12786;
    goto LABEL_438;
  }
  if (objc_msgSend((id)objc_msgSend(v266, "sinkConfiguration"), "sinkType") == 10)
  {
    long long v275 = objc_msgSend(v267[61], "objectForKeyedSubscript:", -[FigCaptureSinkPipeline sinkID](objb, "sinkID"));
    if ([v275 processedOutputFormat]
      && [v275 processedOutputFormat] != 1785750887
      && [v275 processedOutputFormat] != 1752589105
      && [v275 processedOutputFormat] != 1635148593)
    {
      id objc = (id)stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(v188, (void *)[v275 figCaptureStillImageSettingsRepresentation]);
      uint64_t v276 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", [v311 supportsWideColor], cs_figCaptureColorSpaceFromSourcePipeline((uint64_t)v344), objc_msgSend(v343, "format"), objc_msgSend(v343, "dimensions"), objc_msgSend(v275, "processedOutputFormat"));
      if ([v275 bracketedImageCount]) {
        uint64_t v277 = [v275 bracketedImageCount];
      }
      else {
        uint64_t v277 = 1;
      }
      if (objc_msgSend((id)objc_msgSend(v275, "bravoConstituentImageDeliveryDeviceTypes"), "count")) {
        uint64_t v277 = v277
      }
             * objc_msgSend((id)objc_msgSend(v275, "bravoConstituentImageDeliveryDeviceTypes"), "count");
      unsigned int v346 = -[FigCapturePixelConverter updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:](v269, "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", [v275 processedOutputFormat], objc, v277, v276, v276 != 0);
    }
    uint64_t v283 = [(FigCaptureSinkPipeline *)v268 sinkID];
    uint64_t v284 = [v275 settingsID];
    unint64_t v285 = (void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(v283, v284, v346);

    v267[62] = v285;
  }
  else
  {
    uint64_t v278 = [(FigCaptureSessionPreparedBracket *)[(FigCaptureStillImageSinkPipelineSessionStorage *)v188 preparedBracket] outputFormat];
    uint64_t v279 = v278;
    if ((int)v278 > 1752589104)
    {
      if (v278 == 1752589105) {
        goto LABEL_438;
      }
      int v280 = 1785750887;
    }
    else
    {
      if (!v278) {
        goto LABEL_438;
      }
      int v280 = 1635148593;
    }
    if (v278 != v280)
    {
      uint64_t v281 = [(FigCaptureSessionPreparedBracket *)[(FigCaptureStillImageSinkPipelineSessionStorage *)v188 preparedBracket] imageCount];
      uint64_t v282 = [(FigCaptureSessionPreparedBracket *)[(FigCaptureStillImageSinkPipelineSessionStorage *)v188 preparedBracket] colorSpaceProperties];
      [(FigCapturePixelConverter *)v269 updateOutputPixelFormat:v279 dimensions:[(FigCaptureSessionPreparedBracket *)[(FigCaptureStillImageSinkPipelineSessionStorage *)v188 preparedBracket] outputDimensions] poolCapacity:v281 colorSpaceProperties:v282 alwaysUseHardwareForConversion:v282 != 0];
    }
  }
LABEL_438:
  *a7 = v346;
  return v188;
}

uint64_t cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    float v5 = (void *)MEMORY[0x1E4F1C9E8];
    if (a2)
    {
      uint64_t v6 = [NSNumber numberWithLongLong:a2];
      if (a3) {
        uint64_t v7 = [NSNumber numberWithInt:a3];
      }
      else {
        uint64_t v7 = 0;
      }
      return objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", v4, @"SectionID", v6, @"SettingsID", v7, @"ErrorStatus", 0);
    }
    else
    {
      if (a3) {
        uint64_t v8 = [NSNumber numberWithInt:a3];
      }
      else {
        uint64_t v8 = 0;
      }
      return objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", v4, @"SectionID", v8, @"ErrorStatus", 0, v9, v10);
    }
  }
  return result;
}

BOOL cs_configurePointCloudSourceForStillImageSinkPipeline(uint64_t a1, int a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  if (a1)
  {
    uint64_t v14 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput](a1);
    if (a2 == 13)
    {
      float v15 = (void *)MEMORY[0x1E4F52DE0];
      if (a3)
      {
        uint64_t v16 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:*a3];
        [v16 setObject:v14 forKeyedSubscript:*v15];
        *a3 = (id)[v16 copy];
      }
      if (a4)
      {
        float v17 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:*a4];
        objc_msgSend(v17, "addEntriesFromDictionary:", objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a1), "cameraInfoByPortType"));
        *a4 = (id)[v17 copy];
      }
      if (a5)
      {
        float v18 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:*a5];
        objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a1), "captureStream"), "sensorIDString"), *v15);
        *a5 = v18;
      }
    }
    else
    {
      if (a6) {
        *a6 = -[FigCaptureCameraSourcePipeline captureDevice](a1);
      }
      if (a7) {
        *a7 = v14;
      }
    }
  }
  return a1 != 0;
}

BOOL FigCaptureSushiRawDNGDictionaryCreatedInGraph()
{
  return (int)FigCapturePlatformIdentifier() > 6;
}

void *FigCaptureSFHRMode(void *result)
{
  if (result)
  {
    CFAllocatorRef v1 = result;
    if ([result sourceDeviceType] == 10)
    {
      return 0;
    }
    else
    {
      id v8 = 0;
      uint64_t v2 = [v1 source];
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      float v5 = *(void (**)(uint64_t, __CFString *, void, id *))(v4 + 48);
      if (v5)
      {
        v5(v2, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v8);
        id v6 = v8;
      }
      else
      {
        id v6 = 0;
      }

      uint64_t result = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", 0x1EFA4ABE0), "BOOLValue");
      if (result)
      {
        unsigned int v7 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", 0x1EFA6B9A0), "BOOLValue");
        if (objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", 0x1EFA6B9C0), "BOOLValue")) {
          return (void *)(v7 | 2);
        }
        else {
          return (void *)v7;
        }
      }
    }
  }
  return result;
}

CFArrayRef FigCaptureSourceCopySourcesForClientAuditToken(int a1, long long *a2, uint64_t a3, char a4)
{
  LODWORD(v6) = a1;
  v119[1] = *MEMORY[0x1E4F143B8];
  if (cs_initializeStatics_onceToken != -1) {
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_93_0);
  }
  long long v7 = a2[1];
  long long v115 = *a2;
  long long v116 = v7;
  PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&v115);
  uint64_t v87 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a3) {
    uint64_t v10 = [[FigCaptureSourceBackings alloc] initWithSourceInfoDictionaries:a3 commonSettings:0 hevcSettings:0 h264Settings:0];
  }
  else {
    uint64_t v10 = +[FigCaptureSourceBackings sharedCaptureSourceBackings];
  }
  theArradouble y = Mutable;
  long long v83 = v10;
  FigCaptureSourceInitialize((uint64_t)v10, a4);
  int v80 = (int)v6;
  if (v6)
  {
    uint64_t v12 = objc_msgSend(MEMORY[0x1E4F96430], "predicateMatchingIdentifier:", objc_msgSend(NSNumber, "numberWithInt:", PIDFromAuditToken));
    float v13 = (void *)[MEMORY[0x1E4F96448] descriptor];
    uint64_t v14 = *MEMORY[0x1E4F62718];
    v119[0] = *MEMORY[0x1E4F62718];
    objc_msgSend(v13, "setEndowmentNamespaces:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v119, 1));
    float v15 = (void *)[MEMORY[0x1E4F96438] statesForPredicate:v12 withDescriptor:v13 error:0];
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v103 objects:v118 count:16];
    if (!v16) {
      goto LABEL_32;
    }
    uint64_t v17 = v16;
    char v18 = 0;
    uint64_t v19 = *(void *)v104;
LABEL_9:
    uint64_t v20 = 0;
    while (1)
    {
      if (*(void *)v104 != v19) {
        objc_enumerationMutation(v15);
      }
      int v21 = *(void **)(*((void *)&v103 + 1) + 8 * v20);
      if (objc_msgSend((id)objc_msgSend(v21, "process"), "isApplication")) {
        break;
      }
      if (objc_msgSend((id)objc_msgSend(v21, "process"), "isXPCService"))
      {
        if ([v21 taskState] != 4) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      uint64_t v22 = (void *)[v21 process];
      if (v22) {
        [v22 auditToken];
      }
      else {
        memset(v102, 0, sizeof(v102));
      }
      if (FigCaptureClientIsRunningInMediaserverd(v102)) {
        goto LABEL_22;
      }
      unsigned int v23 = (void *)[v21 process];
      if (v23) {
        [v23 auditToken];
      }
      else {
        memset(v101, 0, sizeof(v101));
      }
      if (FigCaptureClientIsAVConferenced(v101)) {
LABEL_22:
      }
        char v18 = 1;
      if (v17 == ++v20)
      {
        uint64_t v17 = [v15 countByEnumeratingWithState:&v103 objects:v118 count:16];
        if (v17) {
          goto LABEL_9;
        }
        if ((v18 & 1) == 0)
        {
LABEL_32:
          long long v24 = a2[1];
          long long v115 = *a2;
          long long v116 = v24;
          int IsAllowedToUseMetadataCameras = FigCaptureClientIsAllowedToUseMetadataCameras(&v115);
          long long v25 = a2[1];
          long long v115 = *a2;
          long long v116 = v25;
          int IsLaunchPrewarmingEnabled = FigCaptureSessionIsLaunchPrewarmingEnabled();
          long long v26 = a2[1];
          long long v115 = *a2;
          long long v116 = v26;
          BOOL IsFacemetricsd = FigCaptureClientIsFacemetricsd(&v115);
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          id obj = [(FigCaptureSourceBackings *)v83 sourceInfoDictionaries];
          uint64_t v27 = [(NSArray *)obj countByEnumeratingWithState:&v97 objects:v117 count:16];
          if (v27)
          {
            uint64_t v28 = v27;
            float v82 = 0;
            uint64_t v29 = *(void *)v98;
            iddouble x = -1;
            uint64_t v79 = *MEMORY[0x1E4F52DE8];
            float v30 = 1.0;
            float v31 = 1.0;
            float v32 = 1.0;
            do
            {
              for (uint64_t i = 0; i != v28; ++i)
              {
                if (*(void *)v98 != v29) {
                  objc_enumerationMutation(obj);
                }
                CFNumberRef v34 = *(void **)(*((void *)&v97 + 1) + 8 * i);
                if ((objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1EFA4F980, v77, v78), "isEqual:", @"vide") & 1) != 0|| objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1EFA4F980), "isEqual:", @"pcld"))
                {
                  int v35 = (void *)[v34 objectForKeyedSubscript:0x1EFA53CC0];
                  unsigned int v36 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
                  if (objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1EFA53D00), "count"))
                  {
                    unsigned int v96 = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  BOOL v39 = v36 != 15 || IsLaunchPrewarmingEnabled != 0;
                  if (IsAllowedToUseMetadataCameras) {
                    BOOL v40 = 0;
                  }
                  else {
                    BOOL v40 = v36 - 21 >= 0xFFFFFFFC;
                  }
                  if (!v40 && v39)
                  {
                    int v42 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", @"Position"), "intValue");
                    int v43 = v42;
                    if (!IsFacemetricsd || v42 == 2)
                    {
                      *(void *)xpc_object_t value = 0;
                      long long v44 = a2[1];
                      long long v115 = *a2;
                      long long v116 = v44;
                      if (!FigVideoCaptureSourceCreateWithSourceInfo(v87, v34, (uint64_t)&v115, 0, v83, (CFTypeRef *)value))
                      {
                        float32x4_t v45 = *(const void **)value;
                        if (*(void *)value)
                        {
                          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
                          int v47 = (id *)DerivedStorage;
                          switch(v36)
                          {
                            case 4u:
                            case 6u:
                            case 8u:
                            case 9u:
                            case 0xCu:
                              if (!*(void *)(DerivedStorage + 144))
                              {
                                *(void *)(DerivedStorage + 144) = captureSource_copyCaptureSourcesForStreamUniqueIDs((void *)[v34 objectForKeyedSubscript:0x1EFA53D80], theArray);
                                if (v36 > 9 || ((1 << v36) & 0x310) == 0) {
                                  goto LABEL_77;
                                }
                                uint64_t v48 = (void *)[MEMORY[0x1E4F1CA48] array];
                                uint64_t v49 = v48;
                                if (v36 == 9 || v36 == 4) {
                                  objc_msgSend(v48, "addObject:", &unk_1EFB022A0, v77, v78);
                                }
                                if ((v36 & 0xFFFFFFFE) == 8)
                                {
                                  [v47[18] objectForKeyedSubscript:v79];
                                  if (objc_msgSend((id)objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))objc_msgSend(v49, "addObject:", &unk_1EFB022B8); {
                                }
                                  }
                                objc_msgSend(v47[22], "setObject:forKeyedSubscript:", v49, @"EligibleFallbackCaptureSourceDeviceTypes", v77, v78);
                                objc_msgSend(v47[22], "setObject:forKeyedSubscript:", (id)objc_msgSend(v49, "copy"), @"SupportedFallbackCaptureSourceDeviceTypes");
                              }
                              if (v36 == 4)
                              {
                                objc_msgSend((id)objc_msgSend((id)objc_msgSend(v47[13], "objectForKeyedSubscript:", @"BravoSwitchOverVideoZoomFactors"), "objectAtIndexedSubscript:", 0), "floatValue");
                                float v31 = v51;
                              }
                              else
                              {
                                if (v36 != 8) {
                                  goto LABEL_77;
                                }
                                objc_msgSend((id)objc_msgSend((id)objc_msgSend(v47[13], "objectForKeyedSubscript:", @"BravoSwitchOverVideoZoomFactors"), "objectAtIndexedSubscript:", 0), "floatValue");
                                float v32 = 1.0 / v50;
                              }
                              break;
                            case 5u:
                              iddouble x = CFArrayGetCount(theArray);
                              break;
                            case 0xAu:
                              float v82 = v45;
                              break;
                            case 0xDu:
                              if (!*(void *)(DerivedStorage + 152)) {
                                *(void *)(DerivedStorage + 152) = captureSource_copyCaptureSourcesForStreamUniqueIDs((void *)[v34 objectForKeyedSubscript:0x1EFA53DA0], theArray);
                              }
LABEL_77:
                              if (v43 == 2 && v36 == 7) {
                                float v30 = 0.5;
                              }
                              break;
                            default:
                              break;
                          }
                          CFArrayAppendValue(theArray, v45);
                          CFRelease(v45);
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v28 = [(NSArray *)obj countByEnumeratingWithState:&v97 objects:v117 count:16];
            }
            while (v28);
          }
          else
          {
            float v82 = 0;
            iddouble x = -1;
            float v30 = 1.0;
            float v31 = 1.0;
            float v32 = 1.0;
          }
          CFArrayRef v6 = theArray;
          if (CFArrayGetCount(theArray) >= 1)
          {
            CFIndex v53 = 0;
            do
            {
              CFArrayGetValueAtIndex(v6, v53);
              uint64_t v54 = CMBaseObjectGetDerivedStorage();
              if ([*(id *)(v54 + 104) objectForKeyedSubscript:0x1EFA50FC0]) {
                *(void *)(v54 + 160) = v82;
              }
              int v55 = objc_msgSend((id)objc_msgSend(*(id *)(v54 + 104), "objectForKeyedSubscript:", @"DeviceType", v77, v78), "intValue");
              int v56 = objc_msgSend((id)objc_msgSend(*(id *)(v54 + 104), "objectForKeyedSubscript:", @"Position"), "intValue");
              if ((v55 - 7) >= 3)
              {
                float v57 = v31;
                if (v55 != 3) {
                  float v57 = 1.0;
                }
              }
              else if (v56 == 2)
              {
                float v57 = v30;
              }
              else
              {
                float v57 = v32;
              }
              *(float *)(v54 + 16_Block_object_dispose(&STACK[0x4E0], 8) = v57;
              ++v53;
              CFArrayRef v6 = theArray;
            }
            while (CFArrayGetCount(theArray) > v53);
          }
          if (idx != -1) {
            CFArrayRemoveValueAtIndex(v6, idx);
          }
          pthread_mutex_lock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
          [(id)sAllVideoCaptureSources addObjectsFromArray:v6];
          pthread_mutex_unlock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
          [(id)sSystemPressureMonitor callSystemPressureLevelChangedHandler];
          LOBYTE(v6) = v80;
          goto LABEL_101;
        }
LABEL_31:
        objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "prewarmDefaultVideoDeviceForPID:completionHandler:", PIDFromAuditToken, 0);
        goto LABEL_32;
      }
    }
    if ([v21 taskState] != 4
      || (objc_msgSend((id)objc_msgSend(v21, "endowmentNamespaces"), "containsObject:", v14) & 1) == 0)
    {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_101:
  if ((v6 & 2) != 0)
  {
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t v58 = [(FigCaptureSourceBackings *)v83 sourceInfoDictionaries];
    uint64_t v59 = [(NSArray *)v58 countByEnumeratingWithState:&v91 objects:v107 count:16];
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = *(void *)v92;
      do
      {
        for (uint64_t j = 0; j != v60; ++j)
        {
          if (*(void *)v92 != v61) {
            objc_enumerationMutation(v58);
          }
          unsigned int v63 = *(void **)(*((void *)&v91 + 1) + 8 * j);
          if (objc_msgSend((id)objc_msgSend(v63, "objectForKeyedSubscript:", 0x1EFA4F980, v77, v78), "isEqual:", @"soun"))
          {
            *(void *)xpc_object_t value = 0;
            long long v64 = a2[1];
            long long v115 = *a2;
            long long v116 = v64;
            int v65 = FigAudioCaptureSourceCreateWithSourceInfo(v87, v63, &v115, 0, (CFTypeRef *)value);
            uint64_t v66 = *(const void **)value;
            if (!v65 && *(void *)value != 0)
            {
              CFArrayAppendValue(theArray, *(const void **)value);
              CFRelease(v66);
            }
          }
        }
        uint64_t v60 = [(NSArray *)v58 countByEnumeratingWithState:&v91 objects:v107 count:16];
      }
      while (v60);
    }
  }
  if ((v80 & 8) != 0)
  {
    *(void *)xpc_object_t value = 0;
    long long v68 = a2[1];
    long long v115 = *a2;
    long long v116 = v68;
    if (!FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo(v87, v11, &v115, (uint64_t *)value))
    {
      uint64_t v69 = *(const void **)value;
      CFArrayAppendValue(theArray, *(const void **)value);
      CFRelease(v69);
    }
  }
  if (dword_1EB4C4FD0)
  {
    unsigned int v96 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v71 = v96;
    if (os_log_type_enabled(v70, type)) {
      unsigned int v72 = v71;
    }
    else {
      unsigned int v72 = v71 & 0xFFFFFFFE;
    }
    if (v72)
    {
      int Count = CFArrayGetCount(theArray);
      long long v74 = a2[1];
      long long v115 = *a2;
      long long v116 = v74;
      int v75 = FigCaptureGetPIDFromAuditToken(&v115);
      *(_DWORD *)xpc_object_t value = 136315906;
      *(void *)&value[4] = "FigCaptureSourceCopySourcesForClientAuditToken";
      __int16 v109 = 1024;
      int v110 = Count;
      __int16 v111 = 1024;
      int v112 = v80;
      __int16 v113 = 1024;
      int v114 = v75;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return theArray;
}

uint64_t captureSource_copyCaptureSourcesForStreamUniqueIDs(void *a1, const __CFArray *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  float v13 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(a1, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = a1;
  uint64_t v12 = [a1 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v12)
  {
    uint64_t v11 = *(void *)v15;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(obj);
        }
        float v5 = *(void **)(*((void *)&v14 + 1) + 8 * v4);
        if (CFArrayGetCount(a2) >= 1)
        {
          CFIndex v6 = 0;
          do
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            if (objc_msgSend(v5, "isEqualToString:", objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"UniqueID")))objc_msgSend(v13, "setObject:forKeyedSubscript:", ValueAtIndex, BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Position"), "intValue"), objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue"))); {
            ++v6;
            }
          }
          while (CFArrayGetCount(a2) > v6);
        }
        ++v4;
      }
      while (v4 != v12);
      uint64_t v12 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v12);
  }
  return [v13 copy];
}

void FigCaptureSourceInitialize(uint64_t a1, char a2)
{
  if (a1)
  {
    if (cs_initializeStatics_onceToken != -1) {
      dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_93_0);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigCaptureSourceInitialize_block_invoke;
    block[3] = &unk_1E5C24B78;
    void block[4] = a1;
    char v5 = a2;
    if (FigCaptureSourceInitialize_onceToken != -1) {
      dispatch_once(&FigCaptureSourceInitialize_onceToken, block);
    }
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t cs_isIrisMovieVitalityScoringEnabled(void *a1)
{
  if (!+[BWInferenceEngine isNeuralEngineSupported]
    || !objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "livePhotoVitalityScoringSupported"))
  {
    return 0;
  }
  return [a1 irisMovieCaptureEnabled];
}

uint64_t FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v16 = 0;
  if (cs_initializeStatics_onceToken != -1) {
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_93_0);
  }
  FigCaptureSourceGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    FigDebugAssert3();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    long long v8 = a3[1];
    *(_OWORD *)(DerivedStorage + 16) = *a3;
    *(_OWORD *)(DerivedStorage + 32) = v8;
    long long v9 = *(_OWORD *)(DerivedStorage + 32);
    long long v14 = *(_OWORD *)(DerivedStorage + 16);
    long long v15 = v9;
    if (FigCaptureAuditTokenIsValid((uint64_t)&v14))
    {
      long long v10 = *(_OWORD *)(DerivedStorage + 32);
      long long v14 = *(_OWORD *)(DerivedStorage + 16);
      long long v15 = v10;
      *(void *)(DerivedStorage + 72) = FigCaptureCopyClientCodeSigningIdentifier(&v14);
    }
    *(void *)uint64_t DerivedStorage = (int)FigAtomicAdd32();
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4E0], 8) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
    *(_DWORD *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = 5;
    id v11 = +[FigWeakReference weakReferenceToObject:v16];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo_block_invoke;
    v13[3] = &unk_1E5C2AE28;
    void v13[4] = v11;
    *(void *)(DerivedStorage + 232) = [[FigCaptureProprietaryDefaults alloc] initWithDefaultsChangedHandler:v13];
    *(unsigned char *)(DerivedStorage + 13) = 1;
    pthread_mutex_lock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
    [(id)sAllProprietaryDefaultsCaptureSources addObject:v16];
    pthread_mutex_unlock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
    *a4 = v16;
  }
  return v6;
}

uint64_t FigCaptureClientIsAllowedToUseMetadataCameras(_OWORD *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v3 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v3;
  uint64_t v4 = SecTaskCreateWithAuditToken(v2, &v9);
  if (v4)
  {
    char v5 = v4;
    unsigned __int8 v6 = FigCaptureClientHasEntitlementWithSecTask(v4, @"com.apple.private.avfoundation.metadata-cameras.allow");
    CFRelease(v5);
    if (v6) {
      return 1;
    }
  }
  long long v8 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v8;
  return FigCaptureClientIsRunningInXCTest(&v9);
}

uint64_t captureSession_handlePlaybackOrRouteStateChange()
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return FigDebugAssert3();
  }
  CFAllocatorRef v2 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return FigDebugAssert3();
  }
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v7 = v0;
    LODWORD(v6) = 0;
    FigDebugAssert3();
  }
  long long v3 = objc_msgSend(v2[97], "objectForKeyedSubscript:", 0x1EFA45440, v6, v7);
  if (!v3) {
    return FigDebugAssert3();
  }
  uint64_t result = objc_msgSend(v3, "setProperty:value:", *MEMORY[0x1E4F52D70], objc_msgSend(NSNumber, "numberWithBool:", cs_audioIsPlayingToBuiltInSpeaker(objc_msgSend(MEMORY[0x1E4F4E9F0], "sharedInstance"))));
  if (result) {
    return FigDebugAssert3();
  }
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void *cs_audioIsPlayingToBuiltInSpeaker(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)[a1 isOtherAudioPlaying];
  if (result)
  {
    uint64_t result = (void *)[a1 currentRoute];
    if (result)
    {
      long long v3 = (void *)[result outputs];
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      uint64_t result = (void *)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (result)
      {
        uint64_t v4 = (uint64_t)result;
        uint64_t v5 = *(void *)v9;
        uint64_t v6 = *MEMORY[0x1E4F4E970];
        while (2)
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (*(void *)v9 != v5) {
              objc_enumerationMutation(v3);
            }
            if ([*(id *)(*((void *)&v8 + 1) + 8 * i) portType] == v6) {
              return (void *)cs_isOtherAppExcludingCameraAppPlayingAudio();
            }
          }
          uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
          uint64_t result = 0;
          if (v4) {
            continue;
          }
          break;
        }
      }
    }
  }
  return result;
}

id csu_createInMemorySourcesArrayFromOnDiskSourcesArray(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        long long v8 = (void *)[v7 objectForKeyedSubscript:@"Formats"];
        if (v8)
        {
          long long v9 = csu_captureSourceVideoFormatsForFormatDictionaries(v8, 1);
          long long v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v7];
          [v10 setObject:v9 forKeyedSubscript:@"Formats"];
          [v2 addObject:v10];
        }
        else
        {
          [v2 addObject:v7];
        }
      }
      uint64_t v4 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  return v2;
}

void *csu_captureSourceVideoFormatsForFormatDictionaries(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    uint64_t v8 = *MEMORY[0x1E4F24D70];
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(a1);
        }
        long long v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        long long v11 = [[FigCaptureSourceVideoFormat alloc] initWithFigCaptureStreamFormatDictionary:v10];
        [v4 addObject:v11];
        if (a2
          && objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v8), "intValue") == 875704438)
        {
          if ([v10 objectForKeyedSubscript:@"NativeFormatCodecType"])
          {
            long long v12 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v10];
            [v12 setObject:&unk_1EFAFF648 forKeyedSubscript:v8];
            objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(v12, "objectForKeyedSubscript:", v8), @"NativeFormatCodecType");
            if ([a1 containsObject:v12])
            {
              long long v13 = 0;
LABEL_15:

              goto LABEL_16;
            }
            long long v14 = [[FigCaptureSourceVideoFormat alloc] initWithFigCaptureStreamFormatDictionary:v12];
          }
          else
          {
            long long v14 = [(FigCaptureSourceVideoFormat *)v11 copyWithNewPixelFormat:875704422];
          }
          long long v13 = v14;
          if (v14) {
            [v4 addObject:v14];
          }
          goto LABEL_15;
        }
LABEL_16:
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
  return v4;
}

uint64_t captureSessionServer_handleNoReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t captureSessionServer_handleSessionSetConfigurationMessage(int a1, void *a2)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  long long v10 = 0;
  uint64_t v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v10, 0, 0);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = [[FigCaptureSessionConfiguration alloc] initWithXPCEncoding:xpc_dictionary_get_value(a2, (const char *)*MEMORY[0x1E4F20290])];
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(const void *, FigCaptureSessionConfiguration *))(v7 + 24);
    if (v8)
    {
      v8(v4, v5);
    }
    else
    {
      long long v11 = @"ErrorStatus";
      v12[0] = &unk_1EFB00FE0;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }

    CFRelease(v4);
  }
  return v3;
}

uint64_t captureSessionServer_messageUnpackCopy(int a1, xpc_object_t xdict, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  v18[0] = 0;
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  v18[1] = 0;
  uint64_t v10 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v10)
  {
    uint64_t v16 = v10;
    FigDebugAssert3();
  }
  else
  {
    FigDebugAssert3();
    uint64_t v16 = FigSignalErrorAt();
  }
  if (v16) {
    goto LABEL_20;
  }
  if (a5)
  {
    uint64_t v11 = FigXPCMessageCopyCFString();
    if (v11)
    {
      uint64_t v16 = v11;
LABEL_20:
      FigDebugAssert3();
      goto LABEL_12;
    }
    if (!*a5)
    {
      FigDebugAssert3();
      long long v14 = 0;
      uint64_t v16 = 4294954512;
      goto LABEL_13;
    }
  }
  if (!a6)
  {
    uint64_t v16 = 0;
LABEL_12:
    long long v14 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = FigXPCMessageCopyCFData();
  if (v12)
  {
    uint64_t v16 = v12;
    goto LABEL_20;
  }
  long long v13 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:0 error:v18];
  long long v14 = v13;
  if (v18[0])
  {
    LODWORD(v17) = 0;
    FigDebugAssert3();
    objc_msgSend(v18[0], "code", v17, v6);
LABEL_23:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_13;
  }
  *a6 = (id)[v13 decodeObjectOfClass:a3 forKey:*MEMORY[0x1E4F284E8]];
  [v14 finishDecoding];
  if (!*a6)
  {
    FigDebugAssert3();
    goto LABEL_23;
  }
  uint64_t v16 = 0;
LABEL_13:

  return v16;
}

uint64_t FigCaptureSessionGetTypeID()
{
  if (FigCaptureSessionGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureSessionGetClassID_onceToken, &__block_literal_global_55);
  }
  uint64_t v0 = FigCaptureSessionGetClassID_sFigCaptureSessionClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

void captureSession_SetConfiguration(const void *a1, void *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    LODWORD(v66) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!LOBYTE(DerivedStorage->_os_unfair_lock_opaque))
  {
    if (a2)
    {
      if ([a2 configurationID])
      {
        if (LOBYTE(DerivedStorage[101]._os_unfair_lock_opaque)
          && !objc_msgSend((id)objc_msgSend(a2, "sourceConfigurations"), "count"))
        {
          uint64_t v44 = [a2 configurationID];
          captureSession_postNotificationWithPayload(a1, @"ConfigurationDidBecomeLive", (const void *)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithLongLong:", v44), @"ConfigurationID", 0, @"ErrorStatus", 0));
        }
        else
        {
          int v55 = a1;
          id v7 = a2;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          uint64_t v8 = (void *)[a2 sinkConfigurations];
          uint64_t v9 = [v8 countByEnumeratingWithState:&v70 objects:v74 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = 0;
            uint64_t v12 = *(void *)v71;
            do
            {
              for (uint64_t i = 0; i != v10; ++i)
              {
                if (*(void *)v71 != v12) {
                  objc_enumerationMutation(v8);
                }
                long long v14 = *(void **)(*((void *)&v70 + 1) + 8 * i);
                if (objc_msgSend(v14, "sinkType", v53, v54) == 10)
                {
                  if (!v11) {
                    uint64_t v11 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
                  }
                  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v14, "irisPreparedSettings"), objc_msgSend(v14, "sinkID"));
                }
              }
              uint64_t v10 = [v8 countByEnumeratingWithState:&v70 objects:v74 count:16];
            }
            while (v10);
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t v59 = DerivedStorage;
          locuint64_t k = DerivedStorage + 90;
          id v57 = v11;
          uint64_t v58 = a2;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v15 = (void *)[a2 connectionConfigurations];
          uint64_t v16 = [v15 countByEnumeratingWithState:&v66 objects:v74 count:16];
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = *(void *)v67;
            uint64_t v60 = v15;
            do
            {
              for (uint64_t j = 0; j != v17; ++j)
              {
                if (*(void *)v67 != v18) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v20 = *(void **)(*((void *)&v66 + 1) + 8 * j);
                if (objc_msgSend((id)objc_msgSend(v20, "sinkConfiguration", v53), "sinkType") == 1
                  && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                {
                  uint64_t v21 = (void *)[v20 sourceConfiguration];
                  uint64_t v22 = (void *)[v21 requiredFormat];
                  [v22 dimensions];
                  MGGetFloat32Answer();
                  float v24 = v23 / 3.14159265 * 180.0;
                  int v25 = FigCaptureNormalizeAngle(-90 * llroundf(v24 / 90.0));
                  BOOL IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType([v21 sourceDeviceType]);
                  int v27 = [v21 sourcePosition];
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
                  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
                  {
                    int v25 = FigCaptureNormalizeAngle(v25 + 90);
                    int v28 = FigCaptureCameraRequires180DegreesRotation(v27 == 2, IsExtensionDeviceType);
                    if ([v20 mirroringEnabled])
                    {
                      if ((IsExtensionDeviceType | v28)) {
                        goto LABEL_34;
                      }
                    }
                    int v29 = [v20 mirroringEnabled] | IsExtensionDeviceType;
                    if (v27 != 2) {
                      int v29 = 1;
                    }
                    if (((v29 | v28) & 1) == 0) {
LABEL_34:
                    }
                      int v25 = FigCaptureNormalizeAngle(v25 + 180);
                  }
                  int v30 = [v20 mirroringEnabled];
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
                  objc_msgSend(v20, "setOrientation:", FigCaptureOrientationFromRotationDegrees(v25, v27 == 2, IsExtensionDeviceType, v30));
                  [v20 setOutputFormat:0];
                  *(void *)&long long v70 = [v22 previewDimensions];
                  *(int32x2_t *)&double v31 = FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v70, v25);
                  objc_msgSend(v20, "setOutputWidth:", v70, v31);
                  [v20 setOutputHeight:DWORD1(v70)];
                  long long v15 = v60;
                  if ((cs_shouldEnableOverCapture((void *)[v20 sourceConfiguration]) & 1) != 0
                    || objc_msgSend((id)objc_msgSend(v20, "videoPreviewSinkConfiguration"), "primaryCaptureRectModificationEnabled"))
                  {
                    *(void *)&long long v70 = 0;
                    LODWORD(v70) = MGGetSInt32Answer();
                    DWORD1(v70) = MGGetSInt32Answer();
                    FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v70, (unint64_t)[v20 transform] >> 32);
                    objc_msgSend(v20, "setOutputWidth:", FigCaptureRoundFloatToMultipleOf(2, (float)(int)v70));
                    objc_msgSend(v20, "setOutputHeight:", FigCaptureRoundFloatToMultipleOf(2, (float)SDWORD1(v70)));
                  }
                }
                else if (objc_msgSend((id)objc_msgSend(v20, "videoDataSinkConfiguration"), "optimizedForPreview"))
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    FigCaptureSetOptimalVideoPreviewDataConnectionDimensions(v20);
                  }
                }
                if (cs_shouldEnableOverCapture((void *)[v20 sourceConfiguration])) {
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "setSpatialOverCaptureEnabled:", 1);
                }
              }
              uint64_t v17 = [v15 countByEnumeratingWithState:&v66 objects:v74 count:16];
            }
            while (v17);
          }
          if (objc_msgSend(v58, "suppressVideoEffects", v53))
          {
            long long v64 = 0u;
            long long v65 = 0u;
            *(_OWORD *)os_log_type_t type = 0u;
            long long v63 = 0u;
            float v32 = (void *)[v58 connectionConfigurations];
            uint64_t v33 = [v32 countByEnumeratingWithState:type objects:&v70 count:16];
            if (v33)
            {
              uint64_t v34 = v33;
              uint64_t v35 = *(void *)v63;
              do
              {
                for (uint64_t k = 0; k != v34; ++k)
                {
                  if (*(void *)v63 != v35) {
                    objc_enumerationMutation(v32);
                  }
                  BOOL v37 = (void *)[*(id *)(*(void *)&type[8] + 8 * k) sourceConfiguration];
                  [v37 setBackgroundBlurEnabled:0];
                  [v37 setStudioLightingEnabled:0];
                  [v37 setReactionEffectsEnabled:0];
                  [v37 setBackgroundReplacementEnabled:0];
                }
                uint64_t v34 = [v32 countByEnumeratingWithState:type objects:&v70 count:16];
              }
              while (v34);
            }
          }
          os_unfair_lock_lock(lock);
          uint64_t v38 = *(void **)&v59[112]._os_unfair_lock_opaque;
          if (v38 == v58)
          {
            os_unfair_lock_unlock(lock);
            id v39 = 0;
            int v40 = 0;
          }
          else
          {
            id v39 = v38;
            os_unfair_lock_unlock(lock);
            int v40 = cs_configurationChangesAreLiveReconfigurable(v39, v58);
          }
          os_unfair_lock_lock(lock);
          int v41 = v57;
          if (*(double *)&v59[104]._os_unfair_lock_opaque == 0.0) {
            *(CFAbsoluteTime *)&v59[104]._os_unfair_lock_opaque = CFAbsoluteTimeGetCurrent();
          }
          int v42 = *(void **)&v59[112]._os_unfair_lock_opaque;
          if (v42 == v58)
          {
            int v42 = v58;
          }
          else
          {
            *(void *)&v59[112]._os_unfair_lock_opaque = v58;
            int v43 = *(void **)&v59[120]._os_unfair_lock_opaque;
            *(void *)&v59[120]._os_unfair_lock_opaque = v57;
            int v41 = v43;
          }
          if (LOBYTE(v59[134]._os_unfair_lock_opaque) != v40) {
            LOBYTE(v59[134]._os_unfair_lock_opaque) = v40;
          }
          BYTE2(v59[93]._os_unfair_lock_opaque) = cs_configurationUsesSourceType(v58, 1);
          HIBYTE(v59[95]._os_unfair_lock_opaque) = cs_configurationUsesSourceType(*(void **)&v59[112]._os_unfair_lock_opaque, 2);
          HIBYTE(v59[93]._os_unfair_lock_opaque) = [*(id *)&v59[112]._os_unfair_lock_opaque allowedToRunInMultitaskingMode];
          *(void *)&v59[138]._os_unfair_lock_opaque = 0;
          captureSession_updateRunningCondition(v55, 0, 0);
          os_unfair_lock_unlock(lock);

          v61[0] = MEMORY[0x1E4F143A8];
          v61[1] = 3221225472;
          v61[2] = __captureSession_SetConfiguration_block_invoke;
          v61[3] = &__block_descriptor_48_e5_v8__0l;
          v61[4] = v59;
          v61[5] = v55;
          captureSession_performBlockOnWorkerQueue(v55, (uint64_t)v61);
        }
        return;
      }
      LODWORD(v53) = 0;
      FigDebugAssert3();
      uint64_t v50 = FigSignalErrorAt();
      if (!v50) {
        return;
      }
      uint64_t v52 = v50;
      uint64_t v48 = (void *)MEMORY[0x1A6272C70](v50, v51);
      uint64_t v49 = (const void *)cs_notificationPayloadWithConfigurationIDAndErrorStatus(objc_msgSend(a2, "configurationID", v53, v2), v52);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v45 = FigSignalErrorAt();
      if (!v45) {
        return;
      }
      uint64_t v47 = v45;
      uint64_t v48 = (void *)MEMORY[0x1A6272C70](v45, v46);
      uint64_t v49 = (const void *)cs_notificationPayloadWithErrorStatus(v47);
    }
    captureSession_postNotificationWithPayload(a1, @"ConfigurationCommitted", v49);
  }
}

uint64_t captureSession_checkClientSessionIsAllowedToRun(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(DerivedStorage + 360));
  if (!*(_DWORD *)(DerivedStorage + 400))
  {
    long long v10 = *(_OWORD *)(DerivedStorage + 36);
    v19[0] = *(_OWORD *)(DerivedStorage + 20);
    v19[1] = v10;
    if (!FigCaptureAuditTokenIsValid((uint64_t)v19)) {
      return 4294950893;
    }
  }
  unsigned int v11 = cs_configurationUsesSourceType(a2, 1);
  if (!*(unsigned char *)(DerivedStorage + 384))
  {
    if (v11)
    {
      if (*(unsigned char *)(DerivedStorage + 376)) {
        goto LABEL_9;
      }
      if (*(unsigned char *)(DerivedStorage + 377) && !*(unsigned char *)(DerivedStorage + 375) || *(unsigned char *)(DerivedStorage + 382)) {
        goto LABEL_10;
      }
    }
    uint64_t v12 = 0;
    goto LABEL_25;
  }
  if (v11)
  {
    if (!*(unsigned char *)(DerivedStorage + 376))
    {
LABEL_10:
      if (*(unsigned char *)(DerivedStorage + 377) && !*(unsigned char *)(DerivedStorage + 375))
      {
        uint64_t v12 = 4294950888;
        goto LABEL_25;
      }
      if (*(unsigned char *)(DerivedStorage + 382)) {
        uint64_t v12 = 4294950344;
      }
      else {
        uint64_t v12 = 0;
      }
      if (!*(unsigned char *)(DerivedStorage + 384) || *(unsigned char *)(DerivedStorage + 382)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_9:
    if (!*(unsigned char *)(DerivedStorage + 373))
    {
      uint64_t v12 = 4294950893;
      goto LABEL_25;
    }
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v12 = 0;
  *(unsigned char *)(DerivedStorage + 384) = 0;
LABEL_25:
  if (a3) {
    *a3 = *(unsigned char *)(DerivedStorage + 373);
  }
  if (a4)
  {
    if (*(unsigned char *)(DerivedStorage + 373))
    {
      long long v13 = *(void **)(DerivedStorage + 392);
      if (([v13 isEqualToString:0x1EFA579A0] & 1) != 0
        || ([v13 isEqualToString:0x1EFA579C0] & 1) != 0
        || ([v13 isEqualToString:@"LockScreen"] & 1) != 0
        || ([v13 isEqualToString:0x1EFA579E0] & 1) != 0)
      {
        char v14 = 1;
      }
      else
      {
        char v14 = [v13 isEqualToString:0x1EFA57A00];
      }
    }
    else
    {
      char v14 = 0;
    }
    char v15 = FigCaptureClientApplicationIDIsVisualIntelligenceCamera(*(void **)(DerivedStorage + 88));
    char v16 = objc_msgSend(+[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor](FigCaptureDeviceLockStateMonitor, "sharedDeviceLockStateMonitor"), "deviceIsLocked");
    char v17 = *(unsigned char *)(DerivedStorage + 113);
    if (v17) {
      char v17 = v16 & (v14 | v15);
    }
    *a4 = v17;
  }
  if (a5) {
    *a5 = *(unsigned char *)(DerivedStorage + 379);
  }
  return v12;
}

void *cs_configurationUsesSourceType(void *result, int a2)
{
  if (result)
  {
    uint64_t v3 = (void *)[result connectionConfigurations];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __cs_configurationUsesSourceType_block_invoke;
    void v4[3] = &__block_descriptor_36_e50_B32__0__FigCaptureConnectionConfiguration_8Q16_B24l;
    int v5 = a2;
    return (void *)([v3 indexOfObjectPassingTest:v4] != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void captureSession_performBlockOnWorkerQueue(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v6 = *(NSObject **)(v5 + 136);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockOnWorkerQueue_block_invoke;
    block[3] = &unk_1E5C28920;
    void block[4] = a2;
    void block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void sub_1A59AE1D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureOrientationFromRotationDegrees(int a1, int a2, int a3, int a4)
{
  int v8 = FigCaptureCameraRequires180DegreesRotation(a2, a3);
  if (a4)
  {
    if (a1 % 360 <= 0) {
      int v9 = 0;
    }
    else {
      int v9 = 360;
    }
    a1 = v9 - a1 % 360;
  }
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    if (v8) {
      unsigned int v10 = 3;
    }
    else {
      unsigned int v10 = 4;
    }
    int v11 = a3 | a2 & (v8 ^ 1);
    if (v11) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    if (a1 != 270) {
      int v12 = 0;
    }
    if (a1 != 180) {
      unsigned int v10 = v12;
    }
    if (v8) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 3;
    }
    if (v11) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    if (a1 != 90) {
      int v14 = 0;
    }
    if (a1) {
      unsigned int v13 = v14;
    }
    if (a1 <= 179) {
      return v13;
    }
    else {
      return v10;
    }
  }
  else
  {
    if (a2) {
      int v16 = 4;
    }
    else {
      int v16 = 3;
    }
    if (a1 != 270) {
      int v16 = 0;
    }
    if (a1 == 180) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = v16;
    }
    if (a2) {
      unsigned int v18 = 3;
    }
    else {
      unsigned int v18 = 4;
    }
    if (a1 != 90) {
      unsigned int v18 = 0;
    }
    if (!a1) {
      unsigned int v18 = 1;
    }
    if (a1 <= 179) {
      return v18;
    }
    else {
      return v17;
    }
  }
}

uint64_t FigCaptureBuildPipelineStageName(uint64_t a1, void *a2)
{
  int v4 = [a2 sourcePosition];
  int v5 = v4;
  uint64_t v6 = @"back";
  if (v4 != 1) {
    uint64_t v6 = 0;
  }
  BOOL v7 = v4 != 2 && v4 != 1;
  if (v4 == 2) {
    int v8 = @"front";
  }
  else {
    int v8 = v6;
  }
  int v9 = [a2 sourceDeviceType] - 1;
  BOOL v10 = 0;
  int v11 = @"infrared";
  switch(v9)
  {
    case 0:
      BOOL v10 = 0;
      int v11 = @"mic";
      goto LABEL_30;
    case 1:
    case 10:
      BOOL v10 = v5 == 2;
      if (v5 == 2) {
        int v11 = 0;
      }
      else {
        int v11 = @"wide";
      }
      goto LABEL_30;
    case 2:
      BOOL v10 = 0;
      int v11 = @"tele";
      goto LABEL_30;
    case 3:
      BOOL v10 = 0;
      int v11 = @"dual";
      goto LABEL_30;
    case 4:
      goto LABEL_30;
    case 5:
    case 11:
      BOOL v10 = 0;
      int v11 = @"truedepth";
      goto LABEL_30;
    case 6:
      BOOL v10 = 0;
      int v11 = @"superwide";
      goto LABEL_30;
    case 7:
      BOOL v10 = 0;
      int v11 = @"widebravo";
      goto LABEL_30;
    case 8:
      BOOL v10 = 0;
      int v11 = @"superbravo";
      goto LABEL_30;
    case 9:
      BOOL v10 = 0;
      int v11 = @"time-of-flight";
      goto LABEL_30;
    case 12:
      BOOL v10 = 0;
      int v11 = @"lidardepth";
      goto LABEL_30;
    case 13:
      BOOL v10 = 0;
      int v11 = @"overhead";
      goto LABEL_30;
    case 14:
      BOOL v10 = 0;
      int v11 = @"external";
      goto LABEL_30;
    case 15:
      BOOL v10 = 0;
      int v11 = @"continuity";
      goto LABEL_30;
    case 16:
    case 17:
      BOOL v10 = 0;
      int v11 = @"widemetadata";
      goto LABEL_30;
    case 18:
      BOOL v10 = 0;
      int v11 = @"superwidemetadata";
      goto LABEL_30;
    case 19:
      BOOL v10 = 0;
      int v11 = @"infraredmetadata";
LABEL_30:
      int v14 = (void *)[MEMORY[0x1E4F28E78] string];
      unsigned int v13 = v14;
      if (v7)
      {
        if (v10) {
          return [NSString stringWithFormat:@"%@%@", a1, v13];
        }
        char v15 = @".";
      }
      else
      {
        [v14 appendFormat:@".%@", v8];
        if (v10) {
          return [NSString stringWithFormat:@"%@%@", a1, v13];
        }
        char v15 = @"-";
      }
      [v13 appendString:v15];
      [v13 appendString:v11];
      return [NSString stringWithFormat:@"%@%@", a1, v13];
    default:
      int v12 = (void *)[MEMORY[0x1E4F28E78] string];
      unsigned int v13 = v12;
      if (!v7) {
        [v12 appendFormat:@".%@", v8];
      }
      return [NSString stringWithFormat:@"%@%@", a1, v13];
  }
}

uint64_t FigCaptureNameSplitterNodeOutputsCorrespondingToConnections(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v5 = result;
    int v6 = 0;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(a1);
        }
        objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v8), "setName:", +[FigCaptureSinkConfiguration stringForSinkType:](FigCaptureSinkConfiguration, "stringForSinkType:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v9 + v8), "sinkConfiguration"), "sinkType")));
        ++v8;
      }
      while (v5 != v8);
      uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v5 = result;
      int v6 = v9 + v8;
    }
    while (result);
  }
  return result;
}

id BWInferenceTextLocalizationNetworkForVersion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[BWEspressoInferenceAdapter locateNetworkFileFromFormat:@"text_localization-MAJOR_MINOR_PATCH.PLATFORM" defaultOverrideKey:@"text_localization_model" version:a2 & 0xFFFFFFFFFFFFLL e5Bundle:a3];
}

id BWInferenceSmartCameraNetworkForVersion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[BWEspressoInferenceAdapter locateNetworkFileFromFormat:@"smartcam_MAJOR_MINOR_PATCH.PLATFORM" defaultOverrideKey:@"smart_camera_pipeline_model" version:a2 & 0xFFFFFFFFFFFFLL e5Bundle:a3];
}

uint64_t processBuffer(uint64_t a1, void *a2)
{
  uint64_t v348 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 4294954511;
  }
  uint64_t v6 = DerivedStorage;
  CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F53070];
  uint64_t result = (uint64_t)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (result)
  {
    uint64_t v335 = v6;
    uint64_t v8 = (unsigned __int8 *)(v6 + 7536);
    FigImageControl_Sharpness(a1);
    FigImageControl_ToneMapping(a1, a2);
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    pixelBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
    CMSampleBufferRef sbuf = (opaqueCMSampleBuffer *)a2;
    CFStringRef v337 = v7;
    CFDictionaryRef v10 = (const __CFDictionary *)CMGetAttachment(a2, v7, 0);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53BF8]);
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53BF0]);
    LODWORD(time.value) = 0;
    uint64_t v341 = 0;
    long long v13 = (const void *)*MEMORY[0x1E4F53EC0];
    if (!CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53EC0])) {
      goto LABEL_212;
    }
    CFDictionaryRef theDict = (CFDictionaryRef)(v6 + 7536);
    HIDWORD(valuePtr) = 0;
    int v14 = *(void **)(v9 + 48);
    if (v14)
    {
      CMSampleBufferGetPresentationTimeStamp((CMTime *)((char *)&time.value + 4), (CMSampleBufferRef)a2);
      CMTimeGetSeconds((CMTime *)((char *)&time.value + 4));
      FigCoreMotionGetVector(v14, (const char *)&time, (uint64_t)&v341 + 4, (uint64_t)&v341);
      float v15 = *((float *)&v341 + 1);
      float v16 = *(float *)&time.value;
      float v17 = *(float *)&v341;
    }
    else
    {
      float v17 = 0.0;
      float v15 = 0.0;
      float v16 = 0.0;
    }
    float v19 = (float)((float)((float)(*(float *)(v9 + 5636) - v16) * (float)(*(float *)(v9 + 5636) - v16))
                + (float)((float)(*(float *)(v9 + 5640) - v15) * (float)(*(float *)(v9 + 5640) - v15)))
        + (float)((float)(*(float *)(v9 + 5644) - v17) * (float)(*(float *)(v9 + 5644) - v17));
    HIDWORD(valuePtr) = *(_DWORD *)(v9 + 5500);
    char v18 = BYTE4(valuePtr);
    *(float *)(v9 + 4 * SHIDWORD(valuePtr) + 550_Block_object_dispose(&STACK[0x4E0], 8) = v19;
    *(float *)(v9 + 5636) = v16;
    *(float *)(v9 + 5640) = v15;
    *(float *)(v9 + 5644) = v17;
    *(_DWORD *)(v9 + 5500) = (v18 + 1) & 0x1F;
    float v20 = (float)((float)(v15 * v15) + (float)(v16 * v16)) + (float)(v17 * v17);
    if (v20 < 1.3225 && v20 > 0.7225)
    {
      uint64_t v21 = *(int *)(v9 + 5504);
      if ((int)v21 <= 6) {
        int v22 = v21 + 1;
      }
      else {
        int v22 = 0;
      }
      *(_DWORD *)(v9 + 5504) = v22;
      if (fabsf((float)(v17 * v17) / v20) <= 0.81)
      {
        if (!*(unsigned char *)(v9 + 573)) {
          float v16 = -v16;
        }
        float v26 = atan2f(v15, v16);
        if (v26 < 0.0) {
          float v26 = v26 + 6.2832;
        }
        signed int v24 = llroundf(v26 * 0.63662);
        __int16 v25 = v24 - 4;
        BOOL v23 = v24 <= 3;
      }
      else
      {
        BOOL v23 = v17 <= 0.0;
        LOWORD(v24) = 4;
        __int16 v25 = 5;
      }
      if (v23) {
        __int16 v25 = v24;
      }
      uint64_t v27 = 0;
      *(_WORD *)(v9 + 2 * v21 + 564_Block_object_dispose(&STACK[0x4E0], 8) = v25;
      memset(v344, 0, 24);
      do
      {
        unint64_t v28 = *(unsigned __int16 *)(v9 + 5648 + v27);
        if (v28 <= 5) {
          ++*(_DWORD *)&v344[4 * v28];
        }
        v27 += 2;
      }
      while (v27 != 16);
      int v29 = 0;
      HIDWORD(valuePtr) = 0;
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      double v31 = (const void *)*MEMORY[0x1E4F548D8];
      do
      {
        if (*(int *)&v344[4 * v29] >= 5 && v29 != *(unsigned __int16 *)(v9 + 5664))
        {
          *(_WORD *)(v9 + 5664) = v29;
          if (v29 < 4)
          {
            if (*(unsigned char *)(v9 + 518))
            {
              *(_WORD *)(v9 + 5666) = v29;
              CFNumberRef v32 = CFNumberCreate(v30, kCFNumberIntType, (char *)&valuePtr + 4);
              captureStreamSetPropertyOnActivityScheduler(a1, v31, v32);
              CFRelease(v32);
              int v29 = HIDWORD(valuePtr);
            }
          }
        }
        HIDWORD(valuePtr) = v29 + 1;
        BOOL v23 = v29++ <= 4;
      }
      while (v23);
    }
    uint64_t v33 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F558C8]);
    if (v33)
    {
      uint64_t v34 = *(const void **)(v9 + 9024);
      *(void *)(v9 + 9024) = v33;
      CFRetain(v33);
      if (v34) {
        CFRelease(v34);
      }
    }
    CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v10, v13);
    if (v35
      && (CFArrayRef v36 = v35, v37 = CFGetTypeID(v35), v37 == CFArrayGetTypeID())
      && ((Count = CFArrayGetCount(v36), Count >= 0x10) ? (uint64_t v39 = 16) : (uint64_t v39 = Count), v39))
    {
      int v40 = 0;
      for (CFIndex i = 0; i != v39; ++i)
      {
        *(_DWORD *)unsigned int v344 = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v36, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v344);
        if (v39 == 1) {
          int v40 = *(_DWORD *)v344;
        }
        else {
          v40 += *(_DWORD *)v344 * *(_DWORD *)(v9 + 436 + 4 * i);
        }
      }
    }
    else
    {
      int v40 = 0;
    }
    uint64_t v8 = (unsigned __int8 *)theDict;
    if (Value && v12)
    {
      LODWORD(v338.value) = 0;
      LODWORD(valuePtr) = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &v338);
      CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
      if (LODWORD(v338.value) != 4)
      {
        BOOL v43 = *(_DWORD *)(v9 + 640) != 0;
LABEL_86:
        *(unsigned char *)(v9 + 6216) = v43;
        if (valuePtr == 1)
        {
          int v339 = -1;
          CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53D98]);
          if (v63) {
            CFNumberGetValue(v63, kCFNumberIntType, &v339);
          }
          int v64 = v339;
          if (*(int *)(v9 + 6220) > 0 || v339 == *(_DWORD *)(v9 + 92))
          {
            uint64_t v65 = CMBaseObjectGetDerivedStorage();
            uint64_t v66 = v65;
            uint64_t v67 = *(unsigned int *)(v65 + 6220);
            if ((int)v67 < 1)
            {
              LODWORD(v69) = 0;
            }
            else
            {
              for (uint64_t j = 0; j != v67; ++j)
              {
                if (*(_DWORD *)(v65 + 5736 + 4 * j) == v64)
                {
                  *(void *)(v65 + 8 * j + 5896) = v40;
                  goto LABEL_166;
                }
              }
              if ((int)v67 > 19) {
                goto LABEL_166;
              }
              uint64_t v69 = 0;
              long long v70 = (int *)(v65 + 5736);
              long long v71 = (char *)(v65 + 5904);
              size_t v72 = 8 * (int)v67;
              size_t v73 = 4 * (int)v67;
              while (*v70 < v64)
              {
                ++v69;
                ++v70;
                v71 += 8;
                v72 -= 8;
                v73 -= 4;
                if (v67 == v69)
                {
                  LODWORD(v69) = *(_DWORD *)(v65 + 6220);
                  goto LABEL_164;
                }
              }
              memmove(v70 + 1, v70, v73);
              memmove(v71, v71 - 8, v72);
LABEL_164:
              uint64_t v8 = (unsigned __int8 *)theDict;
            }
            *(_DWORD *)(v66 + 4336 + 4 * v69 + 1400) = v64;
            *(void *)(v66 + 4336 + 8 * v69 + 1560) = v40;
            ++*(_DWORD *)(v66 + 6220);
LABEL_166:
            CMSampleBufferGetPresentationTimeStamp((CMTime *)v344, sbuf);
            *(Float64 *)(v9 + 5672) = CMTimeGetSeconds((CMTime *)v344);
          }
          if (*(_DWORD *)(v9 + 640))
          {
            if (LODWORD(v338.value) == 4)
            {
              float v135 = (float)v40;
              *(void *)(v9 + 6232) = (unint64_t)(float)((float)v40 * 0.85);
              *(void *)(v9 + 624_Block_object_dispose(&STACK[0x4E0], 8) = (unint64_t)(float)((float)v40 * 1.4);
              *(_DWORD *)(v9 + 6280) = v339;
              *(void *)(v9 + 6264) = v40;
              if (*(unsigned char *)(v9 + 7582))
              {
                LODWORD(v136) = *(_DWORD *)(v9 + 6220);
                uint64_t v136 = (int)v136 >= 20 ? 20 : v136;
                if ((int)v136 < 2) {
                  goto LABEL_419;
                }
                uint64_t v137 = 0;
                int v138 = 0;
                do
                {
                  unint64_t v139 = *(void *)(v9 + 5904 + 8 * v137++);
                  if (v139 > *(void *)(v9 + 8 * v138 + 5896)) {
                    int v138 = v137;
                  }
                }
                while (v136 - 1 != v137);
                if (!v138)
                {
LABEL_419:
                  int v138 = *(_DWORD *)(v9 + 5736);
                  if (v138) {
                    goto LABEL_182;
                  }
                }
                if (v138 == v136 - 1 && *(_DWORD *)(v9 + 4 * v138 + 5736) != 255)
                {
LABEL_182:
                  *(void *)(v9 + 6232) = (unint64_t)(float)(v135 * 0.98);
                  *(void *)(v9 + 624_Block_object_dispose(&STACK[0x4E0], 8) = (unint64_t)(float)(v135 * 1.02);
                }
              }
            }
          }
          else
          {
            LODWORD(v140) = *(_DWORD *)(v9 + 6220);
            if ((int)v140 < 1)
            {
              unint64_t v144 = 0;
              unint64_t v143 = 0;
              int v142 = 0;
            }
            else
            {
              unint64_t v141 = 0;
              int v142 = 0;
              unint64_t v143 = 0;
              unint64_t v144 = 0;
              if ((int)v140 >= 20) {
                uint64_t v140 = 20;
              }
              else {
                uint64_t v140 = v140;
              }
              uint64_t v145 = (void *)(v9 + 5912);
              uint64_t v146 = (int *)(v9 + 5744);
              unsigned int v147 = -2;
              uint64_t v148 = v9 + 4336;
              do
              {
                unint64_t v149 = *(v145 - 2);
                if (v149 > v144)
                {
                  int v142 = *(v146 - 2);
                  int v150 = ((unint64_t)(6844998857600 * v142) >> 32) - 3200 * v142;
                  int v151 = (int)((v150 >> 7) + (v150 >> 31) + 9600) >> 8;
                  if (v141)
                  {
                    unint64_t v152 = v142 - (uint64_t)*(int *)(v148 + 4 * (v147 + 1) + 1400);
                    unint64_t v153 = (v149 - *(void *)(v148 + 8 * (v147 + 1) + 1560)) * v151;
                    if (v153 >= v152) {
                      unint64_t v143 = v153 / v152;
                    }
                    else {
                      unint64_t v143 = 0;
                    }
                    if (v141 >= 2
                      && (v149 - *(void *)(v9 + 4336 + 8 * v147 + 1560))
                       * v151
                       / (v142 - (uint64_t)*(int *)(v9 + 4336 + 4 * v147 + 1400)) > v143)
                    {
                      unint64_t v143 = (v149 - *(void *)(v9 + 4336 + 8 * v147 + 1560))
                           * v151
                           / (v142 - (uint64_t)*(int *)(v9 + 4336 + 4 * v147 + 1400));
                    }
                  }
                  else
                  {
                    unint64_t v143 = 0;
                  }
                  if (v141 < (v140 - 1))
                  {
                    unint64_t v154 = *(v146 - 1) - (uint64_t)v142;
                    if ((v149 - *(v145 - 1)) * v151 / v154 > v143) {
                      unint64_t v143 = (v149 - *(v145 - 1)) * v151 / v154;
                    }
                    if ((uint64_t)v141 < (int)v140 - 2)
                    {
                      unint64_t v155 = (v149 - *v145) * v151;
                      if (v155 / (v142 - (uint64_t)*v146) > v143) {
                        unint64_t v143 = v155 / (v142 - (uint64_t)*v146);
                      }
                    }
                  }
                  unint64_t v144 = *(v145 - 2);
                }
                ++v141;
                ++v147;
                ++v145;
                ++v146;
              }
              while (v140 != v141);
            }
            unint64_t v156 = v144 >> 5;
            if (v143 > v144 >> 5) {
              unint64_t v156 = v143;
            }
            if (v156 >= v144 >> 2) {
              unint64_t v156 = v144 >> 2;
            }
            *(void *)(v9 + 6232) = v144 - v156;
            *(void *)(v9 + 624_Block_object_dispose(&STACK[0x4E0], 8) = v144 + ((7 * v156) >> 2);
            *(_DWORD *)(v9 + 6280) = v142;
            *(void *)(v9 + 6264) = v144;
          }
        }
LABEL_212:
        uint64_t v157 = sbuf;
        FigImageControl_Focus(a1, sbuf);
        FigImageControl_Exposure(a1, sbuf);
        FigImageControl_WhiteBalance(a1, sbuf);
        CFStringRef v158 = v337;
        uint64_t v159 = v335;
        if (((v8[1] | v8[1525]) & (*v8 ^ 0xFF)) == 0) {
          goto LABEL_356;
        }
        uint64_t v160 = CMBaseObjectGetDerivedStorage();
        CFDictionaryRef v161 = (const __CFDictionary *)CMGetAttachment(sbuf, v337, 0);
        uint64_t v162 = (void *)*MEMORY[0x1E4F54128];
        CFDictionaryGetValue(v161, (const void *)*MEMORY[0x1E4F54128]);
        CameraParametersForPortunsigned int Type = af_sbp_getCameraParametersForPortType();
        if (!CameraParametersForPortType) {
          goto LABEL_356;
        }
        uint64_t v164 = CameraParametersForPortType;
        if (!*(_DWORD *)(CameraParametersForPortType + 1236)) {
          goto LABEL_356;
        }
        char v165 = (char *)(v160 + 17320);
        CVPixelBufferRef pixelBufferb = (CVPixelBufferRef)v160;
        BOOL v166 = (unsigned char *)(v160 + 7538);
        float v167 = *(float *)(CameraParametersForPortType + 1204);
        int v168 = *(unsigned __int8 *)(v160 + 9060);
        int v325 = v165[1];
        HIDWORD(v341) = 0;
        LODWORD(time.value) = 0;
        CFDictionaryRef theDicta = v161;
        CFNumberRef v169 = (const __CFNumber *)CFDictionaryGetValue(v161, (const void *)*MEMORY[0x1E4F540F8]);
        if (v169) {
          CFNumberGetValue(v169, kCFNumberFloatType, (char *)&v341 + 4);
        }
        kedouble y = v162;
        uint64_t v170 = (void *)*MEMORY[0x1E4F53BC8];
        CFNumberRef v171 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F53BC8]);
        if (v171) {
          CFNumberGetValue(v171, kCFNumberSInt32Type, &time);
        }
        uint64_t v172 = 1224;
        if (!LODWORD(time.value)) {
          uint64_t v172 = 1220;
        }
        float v173 = v168 ? -*(float *)(v164 + v172) : *(float *)(v164 + v172);
        v166[1522] = 0;
        CFDataRef v174 = (const __CFData *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F53F58]);
        if (!v174 || (CFDataRef v175 = v174, CFDataGetLength(v174) != 1024))
        {
LABEL_356:
          int v280 = *(_DWORD *)(v159 + 7460);
          int v281 = *(_DWORD *)(v159 + 7604);
          if (v280 > 0 || v281 >= 1)
          {
            if (v280 >= 1)
            {
              uint64_t v282 = *(const void **)(v159 + 7544);
              if (v282) {
                captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54760], v282);
              }
            }
            uint64_t v283 = *(const void **)(v159 + 9032);
            if (v283 && v281 >= 1) {
              captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54780], v283);
            }
            captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F547B0], (const void *)*MEMORY[0x1E4F1CFD0]);
            if (v280) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v159 + 7460), -v280, memory_order_relaxed);
            }
            if (v281) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v159 + 7604), -v281, memory_order_relaxed);
            }
          }
          uint64_t v284 = CMBaseObjectGetDerivedStorage();
          CFAllocatorRef v285 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v287 = CMBaseObjectGetDerivedStorage();
          CFDictionaryRef v288 = (const __CFDictionary *)CMGetAttachment(v157, v158, 0);
          time.xpc_object_t value = 0;
          LODWORD(v338.value) = 0;
          *(void *)unsigned int v344 = 0;
          if (*(_DWORD *)(v287 + 7464) == 2) {
            unsigned int v289 = 3;
          }
          else {
            unsigned int v289 = 1;
          }
          uint64_t v341 = v289;
          CFNumberRef v290 = CFNumberCreate(v285, kCFNumberIntType, &v341);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F540A0], v290);
          CFRelease(v290);
          uint64_t v291 = (const void *)*MEMORY[0x1E4F54B40];
          CMTimeValue v292 = CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E4F54B40]);
          CFDictionaryAddValue(Mutable, v291, v292);
          FigImageControl_CurrentFocusRect(a1, (_DWORD *)&time.value + 1, &v338, &time, (_DWORD *)&v341 + 1);
          if (SLODWORD(time.value) >= 1 && SHIDWORD(v341) >= 1)
          {
            if (!*(unsigned char *)(v287 + 7664))
            {
              uint64_t v303 = (float *)af_sbp_getCameraParametersForPortType();
              if (!v303)
              {
LABEL_394:
                if (!*(unsigned char *)(v284 + 88))
                {
                  pthread_mutex_lock(*(pthread_mutex_t **)(v284 + 17336));
                  if (!*(unsigned char *)(v284 + 88))
                  {
                    uint64_t v311 = (int *)(v284 + 17328);
                    CMTimeEpoch v312 = *(const void **)(v284 + 16 * *(int *)(v284 + 17328) + 17352);
                    if (v312)
                    {
                      CFRelease(v312);
                      *(void *)(v284 + 16 * *v311 + 17352) = 0;
                    }
                    CMSampleBufferGetPresentationTimeStamp((CMTime *)v344, v157);
                    Float64 Seconds = CMTimeGetSeconds((CMTime *)v344);
                    int v314 = *v311;
                    *(Float64 *)(v284 + 16 * *v311 + 17344) = Seconds;
                    if (Mutable)
                    {
                      CFTypeRef v315 = CFRetain(Mutable);
                      int v314 = *v311;
                      uint64_t v316 = *v311;
                    }
                    else
                    {
                      CFTypeRef v315 = 0;
                      uint64_t v316 = v314;
                    }
                    *(void *)(v284 + 16 * v316 + 17352) = v315;
                    *uint64_t v311 = (v314 + 1) % 20;
                  }
                  pthread_mutex_unlock(*(pthread_mutex_t **)(v284 + 17336));
                }
                if (Mutable) {
                  CFRelease(Mutable);
                }
                return 0;
              }
              float v304 = *v303;
              if (*v303 != 1.0)
              {
                float v305 = (1000.0 - 1000.0 / v304) * 0.5;
                LODWORD(v338.value) = (int)(float)(v304 * (float)((float)SLODWORD(v338.value) - v305));
                LODWORD(time.value) = (int)(float)(v304 * (float)SLODWORD(time.value));
                HIDWORD(time.value) = (int)(float)(v304 * (float)((float)SHIDWORD(time.value) - v305));
                HIDWORD(v341) = (int)(float)(v304 * (float)SHIDWORD(v341));
              }
            }
            int v293 = CFArrayCreateMutable(v285, 4, MEMORY[0x1E4F1D510]);
            CFNumberRef v294 = CFNumberCreate(v285, kCFNumberIntType, (char *)&time.value + 4);
            CFArrayAppendValue(v293, v294);
            CFRelease(v294);
            CFNumberRef v295 = CFNumberCreate(v285, kCFNumberIntType, &v338);
            CFArrayAppendValue(v293, v295);
            CFRelease(v295);
            CFNumberRef v296 = CFNumberCreate(v285, kCFNumberIntType, &time);
            CFArrayAppendValue(v293, v296);
            CFRelease(v296);
            CFNumberRef v297 = CFNumberCreate(v285, kCFNumberIntType, (char *)&v341 + 4);
            CFArrayAppendValue(v293, v297);
            CFRelease(v297);
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52C18], v293);
            CFRelease(v293);
          }
          CFNumberRef v298 = (const __CFNumber *)CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E4F53BD8]);
          CFNumberRef v299 = (const __CFNumber *)CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E4F53B98]);
          if (v298)
          {
            CFNumberRef v300 = v299;
            if (v299)
            {
              uint64_t valuePtr = 0;
              CFNumberGetValue(v298, kCFNumberFloatType, (char *)&valuePtr + 4);
              CFNumberGetValue(v300, kCFNumberFloatType, &valuePtr);
              HIDWORD(valuePtr) = log2f(*(float *)&valuePtr / *((float *)&valuePtr + 1));
              CFNumberRef v301 = CFNumberCreate(v285, kCFNumberFloatType, (char *)&valuePtr + 4);
              *(void *)unsigned int v344 = v301;
              CFDictionaryAddValue(Mutable, @"AEOffset", v301);
              CFRelease(v301);
            }
          }
          switch(*(_DWORD *)(v287 + 7464))
          {
            case 1:
              int v302 = 1;
              goto LABEL_388;
            case 2:
              int v302 = 2;
              goto LABEL_388;
            case 3:
              int v302 = 3;
              goto LABEL_388;
            case 4:
              int v302 = 4;
              goto LABEL_388;
            case 5:
              int v302 = 5;
LABEL_388:
              HIDWORD(valuePtr) = v302;
              break;
            default:
              HIDWORD(valuePtr) = 0;
              break;
          }
          CFNumberRef v306 = CFNumberCreate(v285, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F53258], v306);
          CFRelease(v306);
          CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(v157);
          if (ImageBuffer)
          {
            CFTypeRef v308 = CVBufferCopyAttachment(ImageBuffer, v337, 0);
            if (v308)
            {
              CFDictionaryRef v309 = (const __CFDictionary *)CFAutorelease(v308);
              if (v309)
              {
                float v310 = (const void *)*MEMORY[0x1E4F532F8];
                if (CFDictionaryGetValueIfPresent(v309, (const void *)*MEMORY[0x1E4F532F8], (const void **)v344)) {
                  CFDictionaryAddValue(Mutable, v310, *(const void **)v344);
                }
              }
            }
          }
          goto LABEL_394;
        }
        int v317 = v170;
        int v322 = v165;
        int v318 = v168;
        float v176 = *(float *)(v164 + 1200);
        BytePtr = CFDataGetBytePtr(v175);
        CFDataRef v178 = (const __CFData *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F53F50]);
        uint64_t v179 = CFDataGetBytePtr(v178);
        CFDataRef v180 = (const __CFData *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F53F48]);
        uint64_t v181 = CFDataGetBytePtr(v180);
        uint64_t v182 = v181;
        CVPixelBufferRef v183 = pixelBufferb;
        unsigned int v332 = *((_DWORD *)pixelBufferb + 2545);
        if (!v332)
        {
          uint64_t v184 = 0;
          int32x4_t v185 = 0uLL;
          do
          {
            int32x4_t v185 = vaddq_s32(*(int32x4_t *)&BytePtr[v184], v185);
            v184 += 16;
          }
          while (v184 != 1024);
          int v186 = vaddvq_s32(v185);
          CVPixelBufferRef v183 = pixelBufferb;
          *((_DWORD *)pixelBufferb + 2545) = v186;
          unsigned int v332 = v186;
        }
        int v187 = (float64x2_t *)((char *)v183 + 9096);
        if (*v166)
        {
          uint64_t v188 = 0;
          uint64_t v189 = v187 + 68;
          do
          {
            long long v190 = *(_OWORD *)&BytePtr[v188];
            v191.i64[0] = v190;
            v191.i64[1] = DWORD1(v190);
            float64x2_t v192 = vcvtq_f64_u64(v191);
            v191.i64[0] = DWORD2(v190);
            v191.i64[1] = HIDWORD(v190);
            float64x2_t *v189 = v192;
            v189[1] = vcvtq_f64_u64(v191);
            long long v193 = *(_OWORD *)&v179[v188];
            v191.i64[0] = v193;
            v191.i64[1] = DWORD1(v193);
            float64x2_t v194 = vcvtq_f64_u64(v191);
            v191.i64[0] = DWORD2(v193);
            v191.i64[1] = HIDWORD(v193);
            v189[129] = vcvtq_f64_u64(v191);
            v189[128] = v194;
            long long v195 = *(_OWORD *)&v181[v188];
            v191.i64[0] = v195;
            v191.i64[1] = DWORD1(v195);
            float64x2_t v196 = vcvtq_f64_u64(v191);
            v191.i64[0] = DWORD2(v195);
            v191.i64[1] = HIDWORD(v195);
            v189[257] = vcvtq_f64_u64(v191);
            v189[256] = v196;
            v188 += 16;
            v189 += 2;
          }
          while (v188 != 1024);
        }
        int v319 = v187;
        v338.xpc_object_t value = 0;
        *(void *)&v338.CMTimeScale timescale = 0;
        LOWORD(valuePtr) = 0;
        FigCFDictionaryGetInt16IfPresent();
        if ((__int16)valuePtr <= 0)
        {
          if ((*(_DWORD *)(v164 + 1216) - 256) >= 0xFFFFFFC8) {
            int v197 = *(_DWORD *)(v164 + 1216);
          }
          else {
            int v197 = 255;
          }
        }
        else
        {
          HIWORD(v338.value) = valuePtr;
          FigCFDictionaryGetInt16IfPresent();
          FigCFDictionaryGetInt16IfPresent();
          FigCFDictionaryGetInt16IfPresent();
          if ((*(_DWORD *)(v164 + 1216) - 256) >= 0xFFFFFFC8) {
            int v197 = *(_DWORD *)(v164 + 1216);
          }
          else {
            int v197 = 255;
          }
          if ((__int16)valuePtr >= 1)
          {
            uint64_t v198 = 0;
            float v199 = (float)SWORD2(v338.value) * 0.0039062;
            float v200 = (float)SHIWORD(v338.value) * 0.0039062;
            float v201 = (float)SLOWORD(v338.timescale) * 0.0039062;
            float v202 = (float)(v201 + (float)((float)SHIWORD(v338.timescale) * 0.0039062)) + -2.0;
            do
            {
              float v203 = (float)(unsigned __int16)v198 * 0.0039062;
              *((float *)&time.value + v198 + 1) = v203;
              float v204 = fminf(v200 * fmaxf(v203 - v199, 0.0), 1.0);
              float v205 = v204
                   * (float)(v201 + (float)(v204 * (float)((float)((float)(1.0 - v201) - v202) + (float)(v204 * v202))));
              if (v205 < 0.0) {
                float v205 = 0.0;
              }
              if (v205 > 1.0) {
                float v205 = 1.0;
              }
              *(float *)&v344[4 * v198++] = v205;
            }
            while (v198 != 257);
            uint64_t v206 = 0;
            unsigned int v207 = 0;
            *(_DWORD *)unsigned int v344 = 0;
            int v347 = 1065353216;
            unsigned int v208 = 1;
            float v209 = v343;
            do
            {
              float v210 = *((float *)pixelBufferb + v206 + 2288);
              if (v210 >= v209) {
                float v210 = v209;
              }
              if (v207 <= 0xFF)
              {
                uint64_t v211 = v207;
                do
                {
                  float v212 = *((float *)&time.value + v211 + 1);
                  if (v212 >= v210) {
                    break;
                  }
                  if (v210 >= v212 && v212 > *((float *)&time.value + v207 + 1)) {
                    unsigned int v207 = (unsigned __int16)v211;
                  }
                  ++v211;
                }
                while ((unsigned __int16)v211 != 256);
              }
              if (v208 <= 0x100)
              {
                uint64_t v213 = v208;
                do
                {
                  float v214 = *((float *)&time.value + v213 + 1);
                  if (v210 <= v214)
                  {
                    unsigned int v208 = (unsigned __int16)v213;
                    if (v214 > *((float *)&time.value + v207 + 1)) {
                      break;
                    }
                  }
                  ++v213;
                }
                while ((unsigned __int16)v213 != 257);
              }
              ispToneCurve[v206++] = *(float *)&v344[4 * v207]
                                   + (float)((float)((float)(*(float *)&v344[4 * v208] - *(float *)&v344[4 * v207])
                                                   / (float)(*((float *)&time.value + v208 + 1)
                                                           - *((float *)&time.value + v207 + 1)))
                                           * (float)(v210 - *((float *)&time.value + v207 + 1)));
            }
            while (v206 != 257);
            goto LABEL_269;
          }
        }
        CFDataRef v215 = (const __CFData *)CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F53F18]);
        if (v215)
        {
          uint64_t v216 = CFDataGetBytePtr(v215);
          if (v216)
          {
            if (*(_WORD *)v216 == 257)
            {
              for (uint64_t k = 0; k != 257; ++k)
              {
                LOWORD(v217) = *(_WORD *)&v216[2 * k + 2];
                float v217 = (float)LODWORD(v217) * 0.000015259;
                ispToneCurve[k] = v217;
              }
            }
          }
        }
LABEL_269:
        float v219 = v167 + v173;
        int v220 = 256;
        do
        {
          unint64_t v221 = (unsigned __int16)v220;
          float v222 = ispToneCurve[(unsigned __int16)v220--];
        }
        while (v222 > (float)((float)v197 / 255.0));
        int v223 = v221 - 1;
        int v224 = v221 - 1;
        do
        {
          unsigned __int16 v225 = v224;
          float v226 = ispToneCurve[(unsigned __int16)v224--];
        }
        while (v226 > (float)((float)(v197 - 1) / 255.0));
        if (v221 <= 0xFE)
        {
          for (unint64_t m = 254; m >= v221; --m)
          {
            *((_DWORD *)BytePtr + 255) += *(_DWORD *)&BytePtr[4 * m];
            *((_DWORD *)v179 + 255) += *(_DWORD *)&v179[4 * m];
            *((_DWORD *)v182 + 255) += *(_DWORD *)&v182[4 * m];
          }
        }
        *((_DWORD *)BytePtr + 254) = *(_DWORD *)&BytePtr[4 * v223];
        *((_DWORD *)v179 + 254) = *(_DWORD *)&v179[4 * v223];
        unsigned int v228 = *(_DWORD *)&v182[4 * v223];
        *((_DWORD *)v182 + 254) = v228;
        int v229 = v221 - 2;
        if ((unsigned __int16)(v221 - 2) >= v225 && v223 > v225)
        {
          do
          {
            *((_DWORD *)BytePtr + 254) += *(_DWORD *)&BytePtr[4 * (unsigned __int16)v229];
            *((_DWORD *)v179 + 254) += *(_DWORD *)&v179[4 * (unsigned __int16)v229];
            unsigned int v228 = *((_DWORD *)v182 + 254) + *(_DWORD *)&v182[4 * (unsigned __int16)v229];
            *((_DWORD *)v182 + 254) = v228;
            --v229;
          }
          while ((unsigned __int16)v229 >= v225);
        }
        uint64_t v320 = v166;
        int v230 = *(_DWORD *)(v164 + 1000);
        if (v230 >= 1)
        {
          unsigned __int16 v231 = 0;
          float v232 = *(float *)(v164 + 1004);
          do
          {
            uint64_t v233 = v231;
            float v234 = 0.0;
            switch(*(_DWORD *)(v164 + 4 * v231 + 1072))
            {
              case 1:
                double v235 = (unsigned int *)&BytePtr[4 * *(int *)(v164 + 4 * v231 + 1008)];
                goto LABEL_285;
              case 2:
                double v235 = (unsigned int *)&v179[4 * *(int *)(v164 + 4 * v231 + 1008)];
                goto LABEL_285;
              case 3:
                double v235 = (unsigned int *)&v182[4 * *(int *)(v164 + 4 * v231 + 1008)];
LABEL_285:
                unsigned int v236 = v332;
                goto LABEL_289;
              case 5:
                double v235 = (unsigned int *)&BytePtr[4 * *(int *)(v164 + 4 * v231 + 1008)];
                unsigned int v236 = *((_DWORD *)BytePtr + 255);
                goto LABEL_289;
              case 6:
                double v235 = (unsigned int *)&v179[4 * *(int *)(v164 + 4 * v231 + 1008)];
                unsigned int v236 = *((_DWORD *)v179 + 255);
                goto LABEL_289;
              case 7:
                double v235 = (unsigned int *)&v182[4 * *(int *)(v164 + 4 * v231 + 1008)];
                unsigned int v236 = *((_DWORD *)v182 + 255);
LABEL_289:
                float v234 = (float)*v235 / (float)v236;
                break;
              default:
                break;
            }
            float v237 = *(float *)(v164 + 4 * v233 + 1136);
            float v176 = v176 + (float)(v237 * powf(v234, v232));
            unsigned __int16 v231 = v233 + 1;
          }
          while (v230 > (unsigned __int16)(v233 + 1));
        }
        *((double *)pixelBufferb + 2041) = (double)v221;
        *((double *)pixelBufferb + 2042) = (double)v225;
        uint64_t v238 = *((void *)BytePtr + 127);
        v239.i64[0] = v238;
        v239.i64[1] = HIDWORD(v238);
        *int v319 = vcvtq_f64_u64(v239);
        uint64_t v240 = *((void *)v179 + 127);
        v239.i64[0] = v240;
        v239.i64[1] = HIDWORD(v240);
        float64x2_t v241 = vcvtq_f64_u64(v239);
        v319[1] = v241;
        *((double *)pixelBufferb + 1141) = (double)v228;
        LODWORD(v241.f64[0]) = *((_DWORD *)v182 + 255);
        *((double *)pixelBufferb + 1142) = (double)*(unint64_t *)&v241.f64[0];
        *((double *)pixelBufferb + 1143) = (double)v332;
        LODWORD(v341) = 0;
        FigCFDictionaryGetFloatIfPresent();
        HIDWORD(valuePtr) = 0;
        if (*(float *)(v164 + 1248) > 0.0) {
          FigCaptureComputeImageGainFromMetadata();
        }
        int v242 = *(_DWORD *)(v164 + 1236);
        int v243 = SLODWORD(v319[513].f64[1]) % v242;
        double v244 = v176;
        *((double *)pixelBufferb + v243 + 2043) = v176;
        uint64_t v157 = sbuf;
        CFStringRef v158 = v337;
        if (v322[2])
        {
          int v245 = LODWORD(v319[513].f64[0]) - 1;
          goto LABEL_304;
        }
        float v246 = *(float *)(v164 + 1244);
        if (*((float *)&valuePtr + 1) <= 0.0)
        {
          if (*(float *)&v341 <= v246 && *((float *)&v341 + 1) >= *(float *)(v164 + 1212)) {
            goto LABEL_302;
          }
        }
        else if (*(float *)&v341 < v246 && *((float *)&valuePtr + 1) < *(float *)(v164 + 1248))
        {
LABEL_302:
          int v247 = -1;
          goto LABEL_303;
        }
        int v247 = 1;
LABEL_303:
        int v245 = LODWORD(v319[513].f64[0]) + v247;
LABEL_304:
        LODWORD(v319[513].f64[0]) = v245;
        if (v245 < 0)
        {
          int v245 = 0;
          LODWORD(v319[513].f64[0]) = 0;
        }
        int v248 = *(_DWORD *)(v164 + 1232);
        if (v245 > v248)
        {
          LODWORD(v319[513].f64[0]) = v248;
          int v245 = v248;
        }
        *((double *)pixelBufferb + v243 + 2103) = vabdd_f64(v244, *((double *)pixelBufferb + 1134));
        *((double *)pixelBufferb + 1134) = v244;
        LODWORD(v319[513].f64[1]) = v243 + 1;
        if (v242 < 1)
        {
          int v249 = 0;
          double v251 = 0.0;
        }
        else
        {
          int v249 = 0;
          unsigned __int16 v250 = 0;
          double v251 = 0.0;
          double v252 = 0.0;
          do
          {
            unsigned __int16 v253 = v250;
            double v254 = *((double *)pixelBufferb + v250 + 2043);
            if (v254 < 1.79769313e308)
            {
              ++v249;
              double v252 = v252 + v254;
              double v251 = v251 + *((double *)pixelBufferb + v250 + 2103);
            }
            ++v250;
          }
          while (v242 > (unsigned __int16)(v253 + 1));
          if (v249)
          {
            *((double *)pixelBufferb + 1133) = v252 / (double)v249;
            double v251 = v251 / (double)v249;
            v322[1] = v245 > 0;
          }
        }
        if (v249 >= *(_DWORD *)(v164 + 1240)) {
          float v255 = v219;
        }
        else {
          float v255 = v219 + v219;
        }
        if (*((_DWORD *)pixelBufferb + 1866) == 2)
        {
          if (v325 || !v322[1]) {
            goto LABEL_325;
          }
          char v256 = 1;
        }
        else
        {
          char v256 = 0;
        }
        char *v322 = v256;
LABEL_325:
        uint64_t v257 = CMBaseObjectGetDerivedStorage();
        CFDictionaryRef v258 = (const __CFDictionary *)CMGetAttachment(sbuf, v337, 0);
        CFDictionaryGetValue(v258, key);
        uint64_t v259 = af_sbp_getCameraParametersForPortType();
        if (v259
          && (uint64_t v260 = v259,
              float v261 = *(float *)(v259 + 1208),
              *(_DWORD *)unsigned int v344 = 0,
              (CFNumberRef v262 = (const __CFNumber *)CFDictionaryGetValue(v258, (const void *)*MEMORY[0x1E4F55768])) != 0))
        {
          CFNumberGetValue(v262, kCFNumberFloatType, v344);
          int v263 = *(_DWORD *)(v260 + 1236);
          int v264 = *(_DWORD *)(v257 + 17316) % v263;
          double v265 = *(float *)v344;
          uint64_t v266 = v257 + 8 * v264;
          *(double *)(v266 + 16584) = *(float *)v344;
          *(double *)(v266 + 17064) = vabdd_f64(v265, *(double *)(v257 + 9088));
          *(double *)(v257 + 908_Block_object_dispose(&STACK[0x4E0], 8) = v265;
          *(_DWORD *)(v257 + 17316) = v264 + 1;
          if (v263 < 1)
          {
            int v267 = 0;
            double v269 = 0.0;
          }
          else
          {
            int v267 = 0;
            unsigned __int16 v268 = 0;
            double v269 = 0.0;
            double v270 = 0.0;
            do
            {
              unsigned __int16 v271 = v268;
              double v272 = *(double *)(v257 + 8 * v268 + 16584);
              if (v272 < 1.79769313e308)
              {
                ++v267;
                double v270 = v270 + v272;
                double v269 = v269 + *(double *)(v257 + 8 * v268 + 17064);
              }
              ++v268;
            }
            while (v263 > (unsigned __int16)(v271 + 1));
            if (v267)
            {
              *(double *)(v257 + 9080) = v270 / (double)v267;
              double v269 = v269 / (double)v267;
            }
          }
          if (v267 < *(_DWORD *)(v260 + 1240)) {
            float v261 = v261 + v261;
          }
          HIDWORD(time.value) = 0;
          CFNumberRef v275 = (const __CFNumber *)CFDictionaryGetValue(v258, v317);
          if (v275 && (CFNumberGetValue(v275, kCFNumberSInt32Type, (char *)&time.value + 4), HIDWORD(time.value))) {
            uint64_t v276 = (float *)(v260 + 1224);
          }
          else {
            uint64_t v276 = (float *)(v260 + 1220);
          }
          uint64_t v159 = v335;
          float v277 = *v276;
          int v274 = v318;
          if (v318) {
            float v277 = -*v276;
          }
          BOOL v273 = *(double *)(v257 + 9080) > (float)(v261 + v277);
        }
        else
        {
          BOOL v273 = 0;
          double v269 = 0.0;
          uint64_t v159 = v335;
          int v274 = v318;
        }
        BOOL v278 = *((double *)pixelBufferb + 1133) <= v255 && !v273;
        if (!v278 && (!v322[1] || *v322)) {
          v320[1522] = 1;
        }
        double v279 = *(float *)(v164 + 1228);
        if (v251 > v279 && v269 > v279 && v320[1522] != v274) {
          v320[1522] = v274;
        }
        goto LABEL_356;
      }
      if (*(unsigned char *)(v9 + 6216))
      {
        BOOL v43 = 0;
        goto LABEL_86;
      }
    }
    if (v19 < 0.0016) {
      *(void *)(v9 + 6264) = (unint64_t)(float)((float)((float)(1.0 - (float)((float)(v19 * 62.5) + 0.9))
    }
                                                               * (float)v40)
                                                       + (float)((float)*(unint64_t *)(v9 + 6264)
                                                               * (float)((float)(v19 * 62.5) + 0.9)));
    int v44 = *(_DWORD *)(v9 + 7628);
    if (v44 < 1 || (int v45 = *(_DWORD *)(v9 + 7632), v45 < 1))
    {
      int v44 = *(_DWORD *)(v9 + 7484);
      if (!v44) {
        goto LABEL_212;
      }
      int v45 = *(_DWORD *)(v9 + 7488);
      if (!v45) {
        goto LABEL_212;
      }
      uint64_t v46 = (int *)(v9 + 7476);
      uint64_t v47 = 7480;
    }
    else
    {
      uint64_t v46 = (int *)(v9 + 7620);
      uint64_t v47 = 7624;
    }
    uint64_t v48 = (int *)(v9 + v47);
    if (!*(unsigned char *)(v9 + 4336))
    {
      long long v74 = *(const void **)(v9 + 6296);
      if (v74)
      {
        CFRelease(v74);
        *(void *)(v9 + 6296) = 0;
      }
      goto LABEL_212;
    }
    int v330 = *v48;
    int v49 = *v46;
    CMSampleBufferGetPresentationTimeStamp(&v338, sbuf);
    double v50 = CMTimeGetSeconds(&v338);
    if (v50 - *(double *)(v9 + 6304) < 0.00826446281) {
      goto LABEL_212;
    }
    *(double *)(v9 + 6304) = v50;
    int v51 = (*(_DWORD *)(v9 + 5492) + 1) & 0x1F;
    *(_DWORD *)(v9 + 5492) = v51;
    HIDWORD(valuePtr) = v51;
    uint64_t v52 = pixelBuffer;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (!FigCapturePixelFormatGetCompressionType(PixelFormatType)
      && !FigCapturePixelFormatIsTenBit(PixelFormatType))
    {
      if (!pixelBuffer) {
        goto LABEL_159;
      }
      goto LABEL_81;
    }
    uint64_t v54 = CMBaseObjectGetDerivedStorage();
    int v55 = (CVPixelBufferRef *)(v54 + 6296);
    if (*(void *)(v54 + 6296)) {
      goto LABEL_76;
    }
    OSType v56 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    if (FigCapturePixelFormatIsFullRange(v56)) {
      uint64_t v58 = 875704422;
    }
    else {
      uint64_t v58 = 875704438;
    }
    unint64_t v59 = Width >> 2;
    if (Width <= 0xA03) {
      unint64_t v59 = 640;
    }
    if (v59 >= Width) {
      unint64_t v59 = Width;
    }
    uint64_t v60 = 2 * llroundf((float)v59 * 0.5);
    if (!BWCreateIOSurfaceBackedCVPixelBuffer(v60, 2 * llroundf((float)(Height * (int)v60 / Width) * 0.5), v58, v55, @"AF SBP: Scene Monitoring Intermediate"))
    {
LABEL_76:
      uint64_t v61 = *(OpaqueVTPixelTransferSession **)(v54 + 6288);
      if (!v61)
      {
        if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (VTPixelTransferSessionRef *)(v54 + 6288)))
        {
          goto LABEL_415;
        }
        uint64_t v61 = *(OpaqueVTPixelTransferSession **)(v54 + 6288);
      }
      if (!VTPixelTransferSessionTransferImage(v61, pixelBuffer, *v55))
      {
        uint64_t v52 = *v55;
        if (!*v55) {
          goto LABEL_160;
        }
LABEL_81:
        signed int v62 = CVPixelBufferGetPixelFormatType(v52);
        if (v62 > 2037741157)
        {
          if (v62 != 2037741171 && v62 != 2037741158) {
            goto LABEL_159;
          }
          char v324 = 1;
        }
        else
        {
          char v324 = 0;
          if (v62 != 875704422 && v62 != 875704438) {
            goto LABEL_159;
          }
        }
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v52, 0);
        int WidthOfPlane = CVPixelBufferGetWidthOfPlane(v52, 0);
        pixelBuffera = v52;
        int HeightOfPlane = CVPixelBufferGetHeightOfPlane(v52, 0);
        int v77 = v49 * WidthOfPlane;
        int v78 = v49 * WidthOfPlane / 1000;
        int v79 = v44 * WidthOfPlane / 1000;
        int v80 = v330 * HeightOfPlane / 1000;
        int v81 = v45 * HeightOfPlane / 1000;
        if (v77 >= -999) {
          int v82 = v78 & 0xF;
        }
        else {
          int v82 = v78;
        }
        int v83 = v78 - v82;
        int v84 = v82 + v79;
        if (v330 * HeightOfPlane >= -999) {
          int v85 = (v330 * HeightOfPlane / 1000) & 3;
        }
        else {
          int v85 = v330 * HeightOfPlane / 1000;
        }
        unsigned int v86 = WidthOfPlane - (v79 + v78);
        if (WidthOfPlane >= v79 + v78) {
          unsigned int v86 = ((v84 + 7) & 0xFFFFFFF0) - v84;
        }
        if (v81 + v80 <= HeightOfPlane) {
          int v87 = v81 + v80 - (((_BYTE)v85 + (_BYTE)v81) & 3);
        }
        else {
          int v87 = HeightOfPlane;
        }
        if (v83 >= WidthOfPlane) {
          goto LABEL_159;
        }
        int v88 = v80 - v85;
        if (v80 - v85 >= HeightOfPlane) {
          goto LABEL_159;
        }
        int v89 = v86 + v84;
        if ((int)(v86 + v84 + v83) > WidthOfPlane || v87 > HeightOfPlane) {
          goto LABEL_159;
        }
        if (v324)
        {
          if (BytesPerRowOfPlane >= 2 * WidthOfPlane) {
            goto LABEL_122;
          }
        }
        else if (BytesPerRowOfPlane >= WidthOfPlane)
        {
LABEL_122:
          int v331 = v85;
          long long v345 = 0u;
          long long v346 = 0u;
          memset(v344, 0, sizeof(v344));
          if (!CVPixelBufferLockBaseAddress(pixelBuffera, 1uLL))
          {
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 0);
            if (BaseAddressOfPlane)
            {
              if (v324)
              {
                if (v88 < v87)
                {
                  uint64_t v91 = 2 * v83;
                  uint64_t v92 = v88;
                  long long v93 = &BaseAddressOfPlane[BytesPerRowOfPlane * v88];
                  uint64_t v94 = 4 * BytesPerRowOfPlane;
                  uint64_t v95 = v80 - (uint64_t)v331;
                  unsigned int v96 = &BaseAddressOfPlane[BytesPerRowOfPlane + BytesPerRowOfPlane * v95];
                  long long v97 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v95 + 2)];
                  long long v98 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v95 + 3)];
                  do
                  {
                    if (v89 >= 1)
                    {
                      int v99 = 0;
                      long long v100 = v98;
                      uint64_t v101 = v97;
                      char v102 = v96;
                      long long v103 = v93;
                      do
                      {
                        long long v104 = &v102[v91];
                        unsigned long long v105 = (unsigned __int128)vld2q_s8(v104);
                        long long v106 = &v103[v91];
                        unsigned long long v107 = (unsigned __int128)vld2q_s8(v106);
                        int v108 = &v101[v91];
                        unsigned long long v109 = (unsigned __int128)vld2q_s8(v108);
                        int v110 = &v100[v91];
                        unsigned long long v111 = (unsigned __int128)vld2q_s8(v110);
                        uint32x4_t v112 = vshrq_n_u32(vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8((uint8x16_t)v105), (uint8x16_t)v107), (uint8x16_t)v109), (uint8x16_t)v111)), 8uLL);
                        ++*(_DWORD *)&v344[4 * v112.u32[0]];
                        ++*(_DWORD *)&v344[4 * v112.u32[1]];
                        ++*(_DWORD *)&v344[4 * v112.u32[2]];
                        ++*(_DWORD *)&v344[4 * v112.u32[3]];
                        v99 += 16;
                        v103 += 32;
                        v102 += 32;
                        v101 += 32;
                        v100 += 32;
                      }
                      while (v99 < v89);
                    }
                    v92 += 4;
                    v93 += v94;
                    v96 += v94;
                    v97 += v94;
                    v98 += v94;
                  }
                  while (v92 < v87);
                }
              }
              else if (v88 < v87)
              {
                uint64_t v113 = v88;
                int v114 = &BaseAddressOfPlane[BytesPerRowOfPlane * v88 + v78 - v82];
                uint64_t v115 = 4 * BytesPerRowOfPlane;
                uint64_t v116 = v80 - (uint64_t)v331;
                uint64_t v117 = &BaseAddressOfPlane[BytesPerRowOfPlane + BytesPerRowOfPlane * v116 + v78 - v82];
                BOOL v118 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v116 + 2) + v78 - v82];
                uint64_t v119 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v116 + 3) + v78 - v82];
                do
                {
                  if (v89 >= 1)
                  {
                    uint64_t v120 = 0;
                    do
                    {
                      uint32x4_t v121 = vshrq_n_u32(vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)&v117[v120]), *(uint8x16_t *)&v114[v120]), *(uint8x16_t *)&v118[v120]), *(uint8x16_t *)&v119[v120])), 8uLL);
                      ++*(_DWORD *)&v344[4 * v121.u32[0]];
                      ++*(_DWORD *)&v344[4 * v121.u32[1]];
                      ++*(_DWORD *)&v344[4 * v121.u32[2]];
                      ++*(_DWORD *)&v344[4 * v121.u32[3]];
                      v120 += 16;
                    }
                    while ((int)v120 < v89);
                  }
                  v113 += 4;
                  v114 += v115;
                  v117 += v115;
                  v118 += v115;
                  v119 += v115;
                }
                while (v113 < v87);
              }
              if (!CVPixelBufferUnlockBaseAddress(pixelBuffera, 1uLL))
              {
                uint64_t v122 = 0;
                int32x4_t v123 = 0uLL;
                do
                {
                  int32x4_t v123 = vaddq_s32(*(int32x4_t *)&v344[v122], v123);
                  v122 += 16;
                }
                while (v122 != 64);
                uint64_t v124 = 0;
                unsigned int v125 = vaddvq_s32(v123);
                uint64_t v126 = SHIDWORD(valuePtr);
                uint64_t v127 = v9 + 32 * SHIDWORD(valuePtr) + 4338;
                do
                {
                  *(_WORD *)(v127 + 2 * v124) = 4095 * *(_DWORD *)&v344[4 * v124] / v125;
                  ++v124;
                }
                while (v124 != 16);
                uint64_t v128 = 0;
                uint64_t v129 = v9 + 32 * v126 + 4338;
                uint64_t v130 = v9 + 32 * (((_BYTE)v126 + 26) & 0x1F) + 4338;
                float v131 = 0.0;
                do
                {
                  if (*(_WORD *)(v130 + v128) && *(_WORD *)(v129 + v128))
                  {
                    unsigned int v132 = *(unsigned __int16 *)(v130 + v128);
                    float v131 = v131 + (float)((float)v132 * log2f((float)v132 / (float)*(unsigned __int16 *)(v129 + v128)));
                  }
                  v128 += 2;
                }
                while (v128 != 32);
                unsigned int v133 = 0;
                ++*(_DWORD *)(v9 + 5496);
                *(_DWORD *)(v9 + 4 * v126 + 5364) = (int)fmaxf(v131, 0.0);
                for (int n = -1; n != -6; --n)
                {
                  if (*(_DWORD *)(v9 + 4 * (((_BYTE)v126 + (_BYTE)n) & 0x1F) + 5364) > *(_DWORD *)(v9 + 9056)) {
                    ++v133;
                  }
                }
                uint64_t v8 = (unsigned __int8 *)theDict;
                if (v133 >= 4 && *(int *)(v9 + 5496) >= 49)
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  CMNotificationCenterPostNotification();
                }
                goto LABEL_212;
              }
            }
          }
        }
LABEL_159:
        fig_log_get_emitter();
        FigDebugAssert3();
LABEL_160:
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v8 = (unsigned __int8 *)theDict;
        goto LABEL_212;
      }
    }
LABEL_415:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_160;
  }
  return result;
}

uint64_t af_sbp_getCameraParametersForPortType()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  [*(id *)(DerivedStorage + 8) portType];
  if (FigCFEqual()) {
    return DerivedStorage + 568;
  }
  if (FigCFEqual()) {
    return DerivedStorage + 1824;
  }
  if (FigCFEqual()) {
    return DerivedStorage + 3080;
  }
  return 0;
}

uint64_t FigCoreMotionGetVector(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "getVectorX:y:z:forTimeStamp:", a2, a3, a4);
}

uint64_t FigImageControl_CurrentFocusRect(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  switch(*(_DWORD *)(DerivedStorage + 7612))
  {
    case 0:
    case 4:
      *a3 = 0;
      *a2 = 0;
      *a5 = 0;
      *a4 = 0;
      break;
    case 1:
      if (!*(unsigned char *)(DerivedStorage + 7664)) {
        goto LABEL_5;
      }
      *a2 = *(_DWORD *)(DerivedStorage + 7668);
      *a3 = *(_DWORD *)(DerivedStorage + 7672);
      *a4 = *(_DWORD *)(DerivedStorage + 7676);
      int v10 = *(_DWORD *)(DerivedStorage + 7680);
      goto LABEL_6;
    case 2:
    case 3:
LABEL_5:
      *a2 = *(_DWORD *)(DerivedStorage + 7620);
      *a3 = *(_DWORD *)(DerivedStorage + 7624);
      *a4 = *(_DWORD *)(DerivedStorage + 7628);
      int v10 = *(_DWORD *)(DerivedStorage + 7632);
LABEL_6:
      *a5 = v10;
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t FigImageControl_WhiteBalance(uint64_t a1, const void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (unsigned char *)(DerivedStorage + 7424);
  if (!*(unsigned char *)(DerivedStorage + 7444))
  {
    CFStringRef v7 = (int *)DerivedStorage;
    int v8 = *(_DWORD *)(DerivedStorage + 7428);
    if (v8 == 1)
    {
      if (*v5)
      {
        uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54C88], 0);
        *uint64_t v5 = 0;
        goto LABEL_27;
      }
    }
    else if (!v8)
    {
      if (*v5)
      {
        uint64_t v6 = 0;
      }
      else
      {
        uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A50], 0);
        *uint64_t v5 = 1;
      }
      if (*((_WORD *)v7 + 3716))
      {
        if ((!*((_WORD *)v7 + 3717) || !*((_WORD *)v7 + 3718)) && !v7[1860]) {
          goto LABEL_27;
        }
        goto LABEL_19;
      }
      if (v7[1860])
      {
        if (!*((_WORD *)v7 + 3717) && !*((_WORD *)v7 + 3718))
        {
          CFDictionaryRef v15 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
          if (v15)
          {
            CFDictionaryRef v16 = v15;
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E4F53C70]);
            if (Value) {
              CFNumberGetValue(Value, kCFNumberSInt16Type, v7 + 1858);
            }
            CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E4F53C48]);
            if (v18) {
              CFNumberGetValue(v18, kCFNumberSInt16Type, (char *)v7 + 7434);
            }
            CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E4F53C10]);
            if (v19) {
              CFNumberGetValue(v19, kCFNumberSInt16Type, v7 + 1859);
            }
          }
        }
LABEL_19:
        if (v7[1860] <= 0) {
          CFIndex v9 = 3;
        }
        else {
          CFIndex v9 = 4;
        }
        CFNumberRef v21 = 0;
        int v10 = (void *)*MEMORY[0x1E4F53A98];
        uint64_t v23 = 0;
        keys[0] = v10;
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, v7 + 1858);
        keys[1] = *(void **)MEMORY[0x1E4F53A90];
        values[1] = CFNumberCreate(v11, kCFNumberSInt16Type, (char *)v7 + 7434);
        keys[2] = *(void **)MEMORY[0x1E4F53A88];
        values[2] = CFNumberCreate(v11, kCFNumberSInt16Type, v7 + 1859);
        if (v7[1860] >= 1)
        {
          uint64_t v23 = *MEMORY[0x1E4F52E90];
          CFNumberRef v21 = CFNumberCreate(v11, kCFNumberSInt32Type, v7 + 1860);
        }
        CFDictionaryRef v12 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54AA0], v12);
        for (uint64_t i = 0; i != v9; ++i)
          CFRelease(values[i]);
        CFRelease(v12);
      }
LABEL_27:
      v5[20] = 1;
      return v6;
    }
    uint64_t v6 = 0;
    goto LABEL_27;
  }
  return 0;
}

uint64_t FigImageControl_ToneMapping(uint64_t a1, const void *a2)
{
  keys[128] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v5 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v6 = 0;
  int v118 = 256;
  int v119 = 256;
  int valuePtr = 64;
  int v117 = 256;
  int v114 = 64;
  int v115 = 64;
  unsigned int v113 = 0;
  if (!*(unsigned char *)(DerivedStorage + 6336))
  {
    if (*(unsigned char *)(DerivedStorage + 508))
    {
      uint64_t v6 = 0;
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 634_Block_object_dispose(&STACK[0x4E0], 8) = 1065353216;
      *(void *)(DerivedStorage + 6352) = *(void *)(DerivedStorage + 584);
      float v7 = *(float *)(DerivedStorage + 580);
      *(float *)(DerivedStorage + 636_Block_object_dispose(&STACK[0x4E0], 8) = v7;
      *(float *)(DerivedStorage + 6372) = 1.0 / (float)(1.0 - v7);
      atomic_fetch_add_explicit((atomic_uint *volatile)(DerivedStorage + 6340), 1u, memory_order_relaxed);
      keys[0] = *(void **)MEMORY[0x1E4F545B8];
      values[0] = *(void **)MEMORY[0x1E4F1CFD0];
      CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F549A8], v8);
      CFRelease(v8);
    }
    *(unsigned char *)(DerivedStorage + 6336) = 1;
  }
  if (!*(unsigned char *)(DerivedStorage + 508))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53C70]);
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53C48]);
    if (v10) {
      CFNumberGetValue(v10, kCFNumberIntType, &v115);
    }
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53C10]);
    if (v11) {
      CFNumberGetValue(v11, kCFNumberIntType, &v114);
    }
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53C08]);
    if (v12) {
      CFNumberGetValue(v12, kCFNumberIntType, &v119);
    }
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F543A0]);
    if (v13) {
      CFNumberGetValue(v13, kCFNumberIntType, &v118);
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F54388]);
    if (v14) {
      CFNumberGetValue(v14, kCFNumberIntType, &v117);
    }
    int v16 = v118;
    int v15 = v119;
    int v17 = v117;
    CFDataRef v18 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53F58]);
    CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53F50]);
    CFDataRef v20 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53F48]);
    if (v18)
    {
      if (v19)
      {
        CFDataRef v21 = v20;
        if (v20)
        {
          BytePtr = CFDataGetBytePtr(v18);
          uint64_t v23 = CFDataGetBytePtr(v19);
          uint64_t v24 = CFDataGetBytePtr(v21);
          uint64_t v25 = 0;
          uint64_t v26 = DerivedStorage + 6388;
          do
          {
            unsigned int v27 = *(_DWORD *)&v23[v25] + *(_DWORD *)&BytePtr[v25] + *(_DWORD *)&v24[v25];
            int v28 = *(_DWORD *)(v26 + v25);
            if (v28) {
              unsigned int v27 = (5 * v27 + 11 * v28 + 7) >> 4;
            }
            *(_DWORD *)(v26 + v25) = v27;
            v25 += 4;
          }
          while (v25 != 1024);
        }
      }
    }
    int v29 = *(_DWORD *)(DerivedStorage + 6344);
    *(_DWORD *)(DerivedStorage + 6344) = v29 + 1;
    if (v29)
    {
      int v30 = *(_DWORD *)(DerivedStorage + 7468);
      if (!v30) {
        int v30 = *(_DWORD *)(DerivedStorage + 7464);
      }
      if ((v30 - 3) >= 2)
      {
        float v31 = *(float *)(DerivedStorage + 584);
        float v32 = *(float *)(DerivedStorage + 588);
        float v33 = *(float *)(DerivedStorage + 580);
        uint64_t v34 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        if (*(unsigned char *)(DerivedStorage + 522))
        {
          float v35 = *(float *)(DerivedStorage + 604);
          if (*(_DWORD *)(DerivedStorage + 40)) {
            float v35 = v35
          }
                + (float)((float)((float)(v35 - *(float *)(DerivedStorage + 600)) * -0.066667)
                        * (float)((float)((float)((float)((float)v15 * (float)v16) * (float)v17) * 0.000000059605) + -1.0));
          if (v35 != *(float *)(DerivedStorage + 6348))
          {
            *(float *)(DerivedStorage + 634_Block_object_dispose(&STACK[0x4E0], 8) = v35;
            unsigned int v113 = vcvts_n_s32_f32(v35, 0xAuLL);
            CFNumberRef v36 = CFNumberCreate(*v34, kCFNumberIntType, &v113);
            uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54848], v36);
            CFRelease(v36);
          }
        }
        CFDataRef v37 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F53F60]);
        if (v37)
        {
          *(unsigned char *)(DerivedStorage + 6384) = 1;
          int v41 = CFDataGetBytePtr(v37);
          uint64_t v42 = 0;
          int v43 = 0;
          int v44 = 0;
          float v45 = *(float *)(DerivedStorage + 592);
          float v46 = *(float *)(DerivedStorage + 596);
          do
          {
            v44 += *(_DWORD *)(DerivedStorage + 6388 + v42);
            v43 += *(_DWORD *)&v41[v42];
            *(_DWORD *)((char *)keys + v42) = v44;
            *(_DWORD *)((char *)values + v42) = v43;
            v42 += 4;
          }
          while (v42 != 1024);
          float v47 = (float)v44;
          int v48 = (int)(float)((float)((float)v44 * 0.001) + 0.5);
          int v49 = (int)keys[0];
          if (SLODWORD(keys[0]) >= v48)
          {
            int v53 = 0;
            int v51 = 0;
            LODWORD(v50) = 0;
            int v52 = (int)(float)((float)(v47 * 0.985) + 0.5);
LABEL_47:
            uint64_t v54 = v50;
            int v56 = *((_DWORD *)keys + v50);
            if (v56 >= v52)
            {
              int v55 = v51;
            }
            else
            {
              while (1)
              {
                int v55 = v56;
                if (v54 == 255) {
                  break;
                }
                int v56 = *((_DWORD *)keys + ++v54);
                if (v56 >= v52) {
                  goto LABEL_55;
                }
              }
              LODWORD(v54) = 256;
            }
          }
          else
          {
            uint64_t v50 = 0;
            do
            {
              int v51 = v49;
              if (v50 == 255)
              {
                int v53 = 256;
                int v52 = (int)(float)((float)(v47 * 0.985) + 0.5);
                LODWORD(v54) = 256;
                int v55 = v49;
                int v56 = v49;
                goto LABEL_55;
              }
              int v49 = *((_DWORD *)keys + ++v50);
            }
            while (v49 < v48);
            int v52 = (int)(float)((float)(v47 * 0.985) + 0.5);
            int v53 = v50;
            if (v50 < 0x100) {
              goto LABEL_47;
            }
            LODWORD(v54) = v50;
            int v55 = v51;
            int v56 = v49;
          }
LABEL_55:
          float v58 = v45
              + (float)((float)(1.0 - v45)
                      * (float)((float)((float)((float)(v52 - v55) / (float)(v56 - v55)) + (float)(int)v54) * 0.0039062));
          float v59 = 0.005625;
          if ((float)(v33 * (float)((float)((float)((float)(v48 - v51) / (float)(v49 - v51)) + (float)v53) * 0.0039062)) <= 0.005625) {
            float v59 = v33 * (float)((float)((float)((float)(v48 - v51) / (float)(v49 - v51)) + (float)v53) * 0.0039062);
          }
          if (v58 >= 0.62996) {
            float v60 = v58;
          }
          else {
            float v60 = 0.62996;
          }
          float v61 = v59 + (float)((float)(v60 - v59) * 0.18);
          int v62 = *((_DWORD *)values + (int)(float)((float)(v61 * 90.51) + 0.5));
          int v63 = v62 - *((_DWORD *)values + (int)(float)((float)(v61 * 11.314) + 0.5));
          int v64 = (int)(float)((float)(v61 * 724.08) + 0.5);
          if (v64 >= 255) {
            int v64 = 255;
          }
          int v65 = *((_DWORD *)values + v64);
          int v66 = v65 - v62;
          if ((int)(float)((float)(v61 * 5792.6) + 0.5) >= 255) {
            int v67 = 255;
          }
          else {
            int v67 = (int)(float)((float)(v61 * 5792.6) + 0.5);
          }
          float v68 = (float)v66 / (float)v43;
          float v69 = 1.2;
          float v70 = (float)v63 / (float)v43;
          float v71 = (float)(*((_DWORD *)values + v67) - v65) / (float)v43;
          float v72 = v46 + (float)((float)(1.0 - v46) * (float)((float)(1.2 - v68) - v70));
          float v73 = v46 + (float)((float)(1.0 - v46) * (float)((float)(1.2 - v68) - v71));
          if (v72 <= 1.2) {
            float v74 = v72;
          }
          else {
            float v74 = 1.2;
          }
          if (v72 <= 0.1) {
            float v31 = 0.1;
          }
          else {
            float v31 = v74;
          }
          if (v73 <= 1.2) {
            float v69 = v73;
          }
          *(float *)(DerivedStorage + 7412) = v70;
          if (v73 <= 0.1) {
            float v32 = 0.1;
          }
          else {
            float v32 = v69;
          }
          *(float *)(DerivedStorage + 7416) = v68;
          *(float *)(DerivedStorage + 7420) = v71;
          float v33 = powf(v59, 0.45455);
          float v57 = 1.0 / (float)(powf(v60, 0.45455) - v33);
        }
        else if (*(unsigned char *)(DerivedStorage + 6384))
        {
          float v31 = *(float *)(DerivedStorage + 6360);
          float v32 = *(float *)(DerivedStorage + 6364);
          float v33 = *(float *)(DerivedStorage + 6376);
          float v57 = *(float *)(DerivedStorage + 6380);
        }
        else
        {
          float v57 = 1.0 / (float)(1.0 - v33);
        }
        int v75 = *(_DWORD *)(DerivedStorage + 6340);
        float v76 = *(float *)(DerivedStorage + 6352);
        float v77 = *(float *)(DerivedStorage + 6356);
        if (vabds_f32(v76, v31) > 0.02
          || vabds_f32(v77, v32) > 0.02
          || ((float v78 = *(float *)(DerivedStorage + 6372), v78 <= (float)(v57 * 1.02))
            ? (_NF = (float)(v78 * 1.02) < v57)
            : (_NF = 1),
              _NF))
        {
          int v80 = (BOOL *)(DerivedStorage + 6385);
          float v81 = *(float *)(DerivedStorage + 6368);
          float v78 = *(float *)(DerivedStorage + 6372);
        }
        else
        {
          float v81 = *(float *)(DerivedStorage + 6368);
          int v80 = (BOOL *)(DerivedStorage + 6385);
          if (!*(unsigned char *)(DerivedStorage + 6385) && vabds_f32(v81, v33) <= 0.01 && v75 == 0) {
            return v6;
          }
        }
        *(float *)(DerivedStorage + 6360) = v31;
        *(float *)(DerivedStorage + 6364) = v32;
        *(float *)(DerivedStorage + 6376) = v33;
        *(float *)(DerivedStorage + 6380) = v57;
        float v82 = 0.01;
        if ((float)(v31 - v76) <= 0.01) {
          float v83 = v31 - v76;
        }
        else {
          float v83 = 0.01;
        }
        if ((float)(v31 - v76) <= -0.01) {
          float v84 = -0.01;
        }
        else {
          float v84 = v83;
        }
        *(float *)v38.i32 = v76 + v84;
        if ((float)(v32 - v77) <= 0.01) {
          float v85 = v32 - v77;
        }
        else {
          float v85 = 0.01;
        }
        if ((float)(v32 - v77) <= -0.01) {
          float v86 = -0.01;
        }
        else {
          float v86 = v85;
        }
        *(float *)v39.i32 = v77 + v86;
        if ((float)(v33 - v81) <= 0.01) {
          float v82 = v33 - v81;
        }
        if ((float)(v33 - v81) <= -0.01) {
          float v87 = -0.01;
        }
        else {
          float v87 = v82;
        }
        *(float *)v40.i32 = v81 + v87;
        float v88 = 1.008;
        if ((float)(v57 / v78) <= 1.008) {
          float v88 = v57 / v78;
        }
        if ((float)(v57 / v78) <= 0.99206) {
          float v89 = 0.99206;
        }
        else {
          float v89 = v88;
        }
        float v90 = v78 * v89;
        *(_DWORD *)(DerivedStorage + 6352) = v38.i32[0];
        *(_DWORD *)(DerivedStorage + 6356) = v39.i32[0];
        *(_DWORD *)(DerivedStorage + 636_Block_object_dispose(&STACK[0x4E0], 8) = v40.i32[0];
        *(float *)(DerivedStorage + 6372) = v90;
        BOOL v91 = vabds_f32(v31, *(float *)v38.i32) > 0.00001
           || vabds_f32(v32, *(float *)v39.i32) > 0.00001
           || vabds_f32(v57, v90) > 0.00001
           || vabds_f32(v33, *(float *)v40.i32) > 0.00001;
        uint64_t v92 = 0;
        *int v80 = v91;
        *(float *)v39.i32 = (float)(*(float *)v38.i32 + *(float *)v39.i32) + -2.0;
        float32x4_t v93 = (float32x4_t)vdupq_lane_s32(v40, 0);
        float32x4_t v94 = (float32x4_t)vdupq_lane_s32(v39, 0);
        *(float *)v39.i32 = (float)(1.0 - *(float *)v38.i32) - *(float *)v39.i32;
        float32x4_t v95 = (float32x4_t)vdupq_lane_s32(v39, 0);
        float32x4_t v96 = (float32x4_t)vdupq_lane_s32(v38, 0);
        int32x4_t v97 = (int32x4_t)xmmword_1A5DBD230;
        float32x4_t v98 = (float32x4_t)vdupq_n_s32(0x3B808081u);
        __asm { FMOV            V16.4S, #1.0 }
        float32x4_t v102 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v103.i64[0] = 0xFF000000FFLL;
        v103.i64[1] = 0xFF000000FFLL;
        v104.i64[0] = 0x400000004;
        v104.i64[1] = 0x400000004;
        do
        {
          float32x4_t v105 = vminnmq_f32(vmulq_n_f32(vmaxnmq_f32(vsubq_f32(vmulq_f32(vcvtq_f32_s32(v97), v98), v93), (float32x4_t)0), v90), _Q16);
          v106.i64[0] = 0x3F0000003F000000;
          v106.i64[1] = 0x3F0000003F000000;
          float32x4_t v107 = vmlaq_f32(v106, v102, vmulq_f32(v105, vmlaq_f32(v96, vmlaq_f32(v95, v94, v105), v105)));
          int32x4_t v108 = (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vcvtq_s32_f32(v107), (int32x4_t)0), v103);
          *(int16x4_t *)v107.f32 = vmovn_s32(v108);
          *(_DWORD *)((char *)keys + v92) = vmovn_s16((int16x8_t)v107).u32[0];
          v92 += 4;
          int32x4_t v97 = vaddq_s32(v97, v104);
        }
        while (v92 != 256);
        unsigned int v113 = v108.u32[3];
        CFAllocatorRef v109 = *v34;
        values[0] = CFDataCreate(*v34, (const UInt8 *)keys, 256);
        values[1] = values[0];
        values[2] = values[0];
        CFArrayRef v110 = CFArrayCreate(v109, (const void **)values, 3, MEMORY[0x1E4F1D510]);
        if (*(unsigned char *)(DerivedStorage + 508)) {
          uint64_t v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54858], v110);
        }
        if (v75) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(DerivedStorage + 6340), -v75, memory_order_relaxed);
        }
        CFRelease(values[0]);
        CFRelease(v110);
      }
    }
  }
  return v6;
}

uint64_t FigImageControl_Sharpness(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 736)) {
    return 0;
  }
  uint64_t v3 = (unsigned char *)(DerivedStorage + 7448);
  if (*(unsigned char *)(DerivedStorage + 7448)) {
    return 0;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (char *)v5;
  uint64_t v7 = 0;
  long long v47 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)values = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  *(_OWORD *)keys = 0u;
  long long v40 = 0u;
  while (*(_DWORD *)(v5 + 736 + 4 * v7))
  {
    if (++v7 == 10) {
      goto LABEL_9;
    }
  }
  if (v7)
  {
LABEL_9:
    keys[0] = *(void **)MEMORY[0x1E4F54688];
    unint64_t v8 = v7;
    values[0] = createCFArrayFromIntArray((char *)(v5 + 696), v7);
    keys[1] = *(void **)MEMORY[0x1E4F54680];
    values[1] = createCFArrayFromIntArray(v6 + 736, v8);
    int v9 = 2;
    goto LABEL_10;
  }
  int v9 = 0;
LABEL_10:
  uint64_t v10 = 0;
  while (*(_DWORD *)&v6[4 * v10 + 896])
  {
    if (++v10 == 10)
    {
      uint64_t v11 = a1;
      goto LABEL_15;
    }
  }
  uint64_t v11 = a1;
  if (!v10) {
    goto LABEL_16;
  }
LABEL_15:
  keys[v9] = (void *)*MEMORY[0x1E4F54658];
  unint64_t v12 = v10;
  int v13 = v9 | 1;
  values[v9] = createCFArrayFromIntArray(v6 + 856, v10);
  keys[v9 | 1u] = (void *)*MEMORY[0x1E4F54650];
  v9 += 2;
  values[v13] = createCFArrayFromIntArray(v6 + 896, v12);
LABEL_16:
  uint64_t v14 = 0;
  while (*(_DWORD *)&v6[4 * v14 + 936])
  {
    if (++v14 == 10) {
      goto LABEL_21;
    }
  }
  if (!v14) {
    goto LABEL_22;
  }
LABEL_21:
  keys[v9] = (void *)*MEMORY[0x1E4F54580];
  unint64_t v15 = v14;
  int v16 = v9 + 1;
  values[v9] = createCFArrayFromIntArray(v6 + 936, v14);
  keys[v9 + 1] = (void *)*MEMORY[0x1E4F54578];
  v9 += 2;
  values[v16] = createCFArrayFromIntArray(v6 + 976, v15);
LABEL_22:
  int v17 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v9 >= 1)
  {
    CFIndex v18 = v9;
    CFDataRef v19 = values;
    CFDictionaryRef v20 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v18, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    captureStreamSetPropertyOnActivityScheduler(v11, (const void *)*MEMORY[0x1E4F54A80], v20);
    do
    {
      CFDataRef v21 = *v19++;
      CFRelease(v21);
      --v18;
    }
    while (v18);
    CFRelease(v20);
  }
  uint64_t v22 = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  CFTypeRef cf = 0;
  long long v47 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)values = 0u;
  uint64_t v24 = (_DWORD *)(v22 + 1448);
  while (*(v24 - 8) && *v24)
  {
    ++v24;
    if (++v23 == 8) {
      goto LABEL_32;
    }
  }
  if (!v23)
  {
    uint64_t v4 = 0;
    goto LABEL_57;
  }
LABEL_32:
  uint64_t v37 = v11;
  uint64_t v25 = 0;
  CFAllocatorRef v26 = *v17;
  unsigned int v27 = (void *)*MEMORY[0x1E4F539E0];
  int v28 = (void *)*MEMORY[0x1E4F539E8];
  int v29 = (char *)(v22 + 1448);
  do
  {
    CFNumberRef v30 = CFNumberCreate(v26, kCFNumberSInt32Type, v29 - 32);
    CFNumberRef v31 = CFNumberCreate(v26, kCFNumberSInt32Type, v29);
    CFNumberRef v32 = v31;
    keys[0] = v27;
    keys[1] = v28;
    v43[0] = v30;
    v43[1] = v31;
    if (v30 && v31)
    {
      CFDictionaryRef v33 = CFDictionaryCreate(v26, (const void **)keys, (const void **)v43, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      values[v25] = v33;
      if (v33) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = 4294954510;
      }
    }
    else
    {
      uint64_t v4 = 4294954510;
      if (!v30) {
        goto LABEL_40;
      }
    }
    CFRelease(v30);
LABEL_40:
    if (v32) {
      CFRelease(v32);
    }
    if (v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      CFDictionaryRef v34 = 0;
      goto LABEL_48;
    }
    ++v25;
    v29 += 4;
  }
  while (v23 != v25);
  CFTypeRef cf = CFArrayCreate(v26, (const void **)values, v23, MEMORY[0x1E4F1D510]);
  if (!cf)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFDictionaryRef v34 = 0;
LABEL_63:
    uint64_t v4 = 4294954510;
    goto LABEL_48;
  }
  CFDictionaryRef v34 = CFDictionaryCreate(v26, MEMORY[0x1E4F539F0], &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v34)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_63;
  }
  uint64_t v4 = captureStreamSetPropertyOnActivityScheduler(v37, (const void *)*MEMORY[0x1E4F54970], v34);
  if (v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_48:
  float v35 = values;
  do
  {
    if (*v35) {
      CFRelease(*v35);
    }
    ++v35;
    --v23;
  }
  while (v23);
  if (cf) {
    CFRelease(cf);
  }
  if (v34) {
    CFRelease(v34);
  }
LABEL_57:
  *uint64_t v3 = 1;
  return v4;
}

uint64_t FigImageControl_Exposure(uint64_t a1, const void *a2)
{
  uint64_t v289 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (unsigned char *)(DerivedStorage + 7456);
  CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFDictionaryRef v7 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  int v8 = *(_DWORD *)(DerivedStorage + 7468);
  if (!v8) {
    int v8 = *(_DWORD *)(DerivedStorage + 7464);
  }
  kedouble y = v6;
  if (*v5 && !*(unsigned char *)(DerivedStorage + 7457))
  {
    uint64_t v13 = 0;
    goto LABEL_131;
  }
  int v9 = *(_DWORD *)(DerivedStorage + 7484);
  if (!v9 || (int v10 = *(_DWORD *)(DerivedStorage + 7488)) == 0)
  {
    float v11 = *(float *)(DerivedStorage + 608);
    int v12 = (int)((float)((float)(v11 * -1000.0) + 1000.0) * 0.5);
    *(_DWORD *)(DerivedStorage + 7476) = v12;
    *(_DWORD *)(DerivedStorage + 7480) = v12;
    int v10 = (int)(float)(v11 * 1000.0);
    *(_DWORD *)(DerivedStorage + 7484) = v10;
    *(_DWORD *)(DerivedStorage + 748_Block_object_dispose(&STACK[0x4E0], 8) = v10;
    LOWORD(v9) = v10;
  }
  uint64_t v13 = 0;
  switch(v8)
  {
    case 0:
    case 1:
      if (*(unsigned char *)(DerivedStorage + 7472)) {
        unlockAEnow(a1);
      }
      if (*(float *)(DerivedStorage + 1508) <= 0.0)
      {
        int v21 = *(_DWORD *)(DerivedStorage + 7476);
        int v22 = *(_DWORD *)(DerivedStorage + 7480);
        int v9 = *(_DWORD *)(DerivedStorage + 7484);
        int v10 = *(_DWORD *)(DerivedStorage + 7488);
        goto LABEL_46;
      }
      uint64_t v13 = setupMeteringFaceDetection(a1, *(void **)(DerivedStorage + 8), 1);
      goto LABEL_130;
    case 2:
      if (*(unsigned char *)(DerivedStorage + 7472))
      {
        unlockAEnow(a1);
        int v9 = *(_DWORD *)(DerivedStorage + 7484);
        int v10 = *(_DWORD *)(DerivedStorage + 7488);
      }
      setupExposureWindow(a1, *(_DWORD *)(DerivedStorage + 7476), *(_DWORD *)(DerivedStorage + 7480), v9, v10, *(_DWORD *)(DerivedStorage + 40) != 3);
      if (*v5 || !*(unsigned char *)(DerivedStorage + 512)) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54738], (const void *)*MEMORY[0x1E4F54640]);
      }
      if (*(_DWORD *)(DerivedStorage + 40) == 3)
      {
        *(_DWORD *)IOSurfaceRef buffer = 204;
        LODWORD(v285[0]) = 60;
        LODWORD(v273[0]) = 75;
        LODWORD(v272[0]) = 8;
        CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, v273);
        uint64_t v37 = (const void **)MEMORY[0x1E4F54748];
        if (*(unsigned char *)(DerivedStorage + 511))
        {
          keys[0].origin.double y = 0.0;
          keys[0].origin.double x = 0.0;
          values[0] = 0;
          values[1] = 0;
          CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFNumberRef v39 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, v272);
          keys[0].origin.double x = *(CGFloat *)MEMORY[0x1E4F54518];
          keys[0].origin.double y = *(CGFloat *)MEMORY[0x1E4F54510];
          values[0] = v36;
          values[1] = v39;
          CFDictionaryRef v40 = CFDictionaryCreate(v38, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (captureStreamSetPropertyOnActivityScheduler(a1, *v37, v40))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          CFRelease(v40);
          CFRelease(v39);
        }
        else if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54748], v36))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, v285);
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54700], v43))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, buffer);
        uint64_t v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F548F8], v44);
        if (v13)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v36);
        CFRelease(v43);
        CFRelease(v44);
      }
      goto LABEL_130;
    case 3:
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      unint64_t v15 = (unsigned char *)(v14 + 7472);
      if (*(_DWORD *)(v14 + 40) != 4)
      {
        if (!captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A40], (const void *)*MEMORY[0x1E4F1CFD0]))goto LABEL_92; {
        fig_log_get_emitter();
        }
        goto LABEL_373;
      }
      *(unsigned char *)(v14 + 17705) = 1;
      if (*(_DWORD *)(v14 + 1548))
      {
        int v16 = *(_DWORD *)(v14 + 9048);
        if (v16 < 1) {
          float v17 = 0.001;
        }
        else {
          float v17 = 1.0 / (float)v16;
        }
        FigImageControl_SetExposureStabilityZone(a1, 1, v17);
        CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(v14 + 1552));
        keys[0].origin.double x = *(CGFloat *)MEMORY[0x1E4F546E8];
        values[0] = v46;
        CFNumberRef v47 = CFNumberCreate(v45, kCFNumberIntType, (const void *)(v14 + 1556));
        keys[0].origin.double y = *(CGFloat *)MEMORY[0x1E4F54600];
        values[1] = v47;
        CFDictionaryRef v48 = CFDictionaryCreate(v45, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A28], v48))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v48);
        CFRelease(v46);
        CFRelease(v47);
        CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v14 + 1560));
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54628], v49))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v49);
        if (!*(unsigned char *)(v14 + 1566))
        {
          CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v14 + 612));
          if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54700], v50))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          CFRelease(v50);
        }
        unint64_t v15 = (unsigned char *)(v14 + 7472);
      }
      else if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A40], (const void *)*MEMORY[0x1E4F1CFD0]))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      if (!*(unsigned char *)(v14 + 1564)
        && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A58], (const void *)*MEMORY[0x1E4F1CFD0]))
      {
        fig_log_get_emitter();
LABEL_373:
        FigDebugAssert3();
      }
LABEL_92:
      if ((*(_DWORD *)(v14 + 40) != 4 || !*(unsigned char *)(v14 + 1565)) && !*(unsigned char *)(v14 + 620))
      {
        if (*(unsigned char *)(v14 + 508)
          && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A60], (const void *)*MEMORY[0x1E4F1CFD0]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        if (*(unsigned char *)(v14 + 520)
          && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A68], (const void *)*MEMORY[0x1E4F1CFD0]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
      uint64_t v13 = 0;
      unsigned char *v15 = 1;
LABEL_130:
      *(_WORD *)uint64_t v5 = 1;
LABEL_131:
      if (v8 != 8) {
        return v13;
      }
      if (!v5[112])
      {
        uint64_t v101 = CMBaseObjectGetDerivedStorage();
        float32x4_t v102 = *(uint64_t **)(v101 + 7560);
        CFDictionaryRef v103 = (const __CFDictionary *)CMGetAttachment(a2, key, 0);
        if (!v103) {
          goto LABEL_341;
        }
        if (!v102) {
          return v13;
        }
        if (!*v102) {
          return v13;
        }
        int v104 = *(_DWORD *)(v101 + 7532) + 1;
        *(_DWORD *)(v101 + 7532) = v104;
        if (v104) {
          return v13;
        }
        CFDictionaryRef v105 = v103;
        uint64_t v270 = 0;
        uint64_t valuePtr = 0;
        *(void *)IOSurfaceRef buffer = 0;
        v285[0] = 0;
        __int16 v267 = 0;
        v273[0] = 0;
        int v269 = 0;
        v272[0] = 0;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E4F53B98]);
        if (!Value) {
          goto LABEL_341;
        }
        CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
        CFNumberRef v107 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53BD8]);
        if (!v107) {
          goto LABEL_341;
        }
        CFNumberGetValue(v107, kCFNumberIntType, &valuePtr);
        CFNumberRef v108 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53E90]);
        if (v108
          && (CFNumberGetValue(v108, kCFNumberDoubleType, buffer),
              (CFNumberRef v109 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53E48])) != 0)
          && (CFNumberGetValue(v109, kCFNumberDoubleType, v285),
              (CFNumberRef v110 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53F70])) != 0))
        {
          CFNumberGetValue(v110, kCFNumberSInt16Type, &v267);
          CFNumberRef v111 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53F68]);
          if (v111)
          {
            CFNumberGetValue(v111, kCFNumberDoubleType, v273);
            CFNumberRef v112 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F53C08]);
            if (v112)
            {
              CFNumberGetValue(v112, kCFNumberIntType, (char *)&v270 + 4);
              CFNumberRef v113 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F54388]);
              if (v113)
              {
                CFNumberGetValue(v113, kCFNumberIntType, &v270);
                CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F543A0]);
                if (v114)
                {
                  CFNumberGetValue(v114, kCFNumberIntType, &v269);
                  CFNumberRef v115 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F54390]);
                  if (v115)
                  {
                    CFNumberGetValue(v115, kCFNumberDoubleType, v272);
                    double v116 = *(double *)buffer * *(double *)buffer;
                    double v117 = log2(*(double *)buffer * *(double *)buffer / (*(double *)v285 * ((double)v267 / 100.0)));
                    double v118 = log2((double)SHIDWORD(valuePtr));
                    long double v119 = v117 + v118 - log2((double)(int)valuePtr);
                    if (vabdd_f64(v117, v119) <= *((double *)v102 + 3)) {
                      return v13;
                    }
                    double v120 = *(double *)v102;
                    if (*v102 && (int v121 = *((_DWORD *)v102 + 2)) != 0)
                    {
                      double v122 = *(double *)v273 * *(double *)v272;
                      double v123 = log2(v116/ (*(double *)(*(void *)&v120 + 8)* ((double)(int)(*(double *)v273 * *(double *)v272 * *(double *)(*(void *)&v120 + 16))/ 100.0)));
                      int v124 = (int)((double)(int)**(_DWORD **)&v120
                                 + (v119 - v123)
                                 * ((double)(*(_DWORD *)(*(void *)&v120 + 24 * v121 - 24) - **(_DWORD **)&v120)
                                  / (log2(v116/ (*(double *)(*(void *)&v120 + 24 * v121 - 16)* ((double)(int)(v122 * *(double *)(*(void *)&v120 + 24 * v121 - 8))/ 100.0)))- v123))+ 0.5);
                      if ((v124 & 0x80000000) == 0)
                      {
                        if (v121 <= v124) {
                          int v124 = v121 - 1;
                        }
                        uint64_t v125 = *(void *)&v120 + 24 * v124;
                        double v126 = *(double *)(v125 + 8);
                        int v127 = vcvtd_n_s64_f64(*(double *)(v125 + 16), 8uLL);
LABEL_353:
                        if (v126 >= 0.01) {
                          int v246 = 1000;
                        }
                        else {
                          int v246 = 100000;
                        }
                        int v268 = v246;
                        int v266 = (int)((double)v246 * v126 + 0.5);
                        int v247 = v127 >> 3;
                        int v248 = v127 >> 5;
                        if (v127 <= 256) {
                          int v127 = 256;
                        }
                        if (v127 >= 0x800) {
                          int v127 = 2048;
                        }
                        int v265 = v127;
                        if (v247 <= 256) {
                          unsigned int v249 = 256;
                        }
                        else {
                          unsigned int v249 = v247;
                        }
                        if (v249 >= 0x400) {
                          unsigned int v249 = 1024;
                        }
                        unsigned int v264 = v249;
                        if (v248 <= 256) {
                          unsigned int v250 = 256;
                        }
                        else {
                          unsigned int v250 = v248;
                        }
                        if (v250 >= 0x200) {
                          unsigned int v250 = 512;
                        }
                        unsigned int v263 = v250;
                        keys[0].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F70];
                        CFAllocatorRef v251 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v266);
                        keys[0].origin.double y = *(CGFloat *)MEMORY[0x1E4F52F68];
                        values[1] = CFNumberCreate(v251, kCFNumberIntType, &v268);
                        keys[0].size.CGFloat width = *(CGFloat *)MEMORY[0x1E4F52E78];
                        *(void *)&long long v281 = CFNumberCreate(v251, kCFNumberIntType, &v265);
                        keys[0].size.CGFloat height = *(CGFloat *)MEMORY[0x1E4F52F58];
                        *((void *)&v281 + 1) = CFNumberCreate(v251, kCFNumberIntType, &v264);
                        keys[1].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F60];
                        *(void *)&long long v282 = CFNumberCreate(v251, kCFNumberIntType, &v263);
                        CFDictionaryRef v252 = CFDictionaryCreate(v251, (const void **)keys, (const void **)values, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                        captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A90], v252);
                        CFRelease(values[0]);
                        CFRelease(values[1]);
                        CFRelease((CFTypeRef)v281);
                        CFRelease(*((CFTypeRef *)&v281 + 1));
                        CFRelease((CFTypeRef)v282);
                        CFRelease(v252);
                        return v13;
                      }
                    }
                    else
                    {
                      fig_log_get_emitter();
                      FigDebugAssert3();
                    }
                    double v244 = v273[0];
                    double v245 = *(double *)buffer * *(double *)buffer;
                    double v126 = v245 / (exp2(v119) * (*(double *)&v244 / 100.0));
                    int v127 = 256;
                    if (v126 < 0.00001) {
                      double v126 = 0.00001;
                    }
                    goto LABEL_353;
                  }
                }
              }
            }
          }
          fig_log_get_emitter();
        }
        else
        {
LABEL_341:
          fig_log_get_emitter();
        }
        FigDebugAssert3();
        return v13;
      }
      uint64_t v64 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v65 = (const __CFDictionary *)CMGetAttachment(a2, key, 0);
      CFDataRef v66 = (const __CFData *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53BC0]);
      if (v66)
      {
        BytePtr = CFDataGetBytePtr(v66);
        uint64_t v68 = 0;
        float v69 = values;
        do
        {
          uint64_t v70 = 0;
          float v71 = (uint32x4_t *)v69;
          do
          {
            uint16x8_t v72 = *(uint16x8_t *)&BytePtr[v70];
            *float v71 = vmovl_u16(*(uint16x4_t *)v72.i8);
            v71[1] = vmovl_high_u16(v72);
            v71 += 2;
            v70 += 16;
          }
          while (v70 != 32);
          ++v68;
          v69 += 8;
          BytePtr += 32;
        }
        while (v68 != 16);
        LODWORD(v272[0]) = 0;
        uint64_t valuePtr = 0;
        CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53C70]);
        if (v73) {
          CFNumberGetValue(v73, kCFNumberIntType, v272);
        }
        CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53C48]);
        if (v74) {
          CFNumberGetValue(v74, kCFNumberIntType, (char *)&valuePtr + 4);
        }
        CFNumberRef v75 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53C10]);
        if (v75) {
          CFNumberGetValue(v75, kCFNumberIntType, &valuePtr);
        }
        CFDataRef v76 = (const __CFData *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53F60]);
        if (v76)
        {
          CFDataRef v77 = v76;
          if (CFDataGetLength(v76) == 1024)
          {
            v290.locatioint n = 0;
            v290.length = 1024;
            CFDataGetBytes(v77, v290, buffer);
            uint64_t v78 = 0;
            int32x4_t v79 = 0uLL;
            do
            {
              int32x4_t v79 = vaddq_s32(*(int32x4_t *)&buffer[v78], v79);
              v78 += 16;
            }
            while (v78 != 1024);
            uint64_t v80 = 0;
            float64x2_t v81 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)vaddvq_s32(v79)), 0);
            float64x2_t v82 = (float64x2_t)vdupq_n_s64(0x4117E80000000000uLL);
            do
            {
              long long v83 = *(_OWORD *)&buffer[v80];
              v84.i64[0] = v83;
              v84.i64[1] = DWORD1(v83);
              float64x2_t v85 = vcvtq_f64_u64(v84);
              v84.i64[0] = DWORD2(v83);
              v84.i64[1] = HIDWORD(v83);
              *(int32x4_t *)&buffer[v80] = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v85, v82), v81)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v84), v82), v81)));
              v80 += 16;
            }
            while (v80 != 1024);
            uint64_t v86 = 0;
            int v87 = 0;
            int v88 = 0;
            do
            {
              unsigned int v89 = *(_DWORD *)&buffer[4 * v86];
              v88 += v89;
              if (v89 > *(_DWORD *)&buffer[4 * v87]) {
                int v87 = v86;
              }
              ++v86;
            }
            while (v86 != 256);
            *(_DWORD *)&buffer[4 * v87] = *(_DWORD *)&buffer[4 * v87] - v88 + 391680;
            int v90 = *(_DWORD *)(v64 + 7532) + 1;
            *(_DWORD *)(v64 + 7532) = v90;
            if ((v90 & 1) == 0)
            {
              CFArrayRef v91 = (const __CFArray *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F558C8]);
              uint64_t v260 = v64;
              if (v91)
              {
                CFArrayRef v92 = v91;
                memset(keys, 0, 32);
                unint64_t Count = CFArrayGetCount(v91);
                if (Count >= 8) {
                  uint64_t v94 = 8;
                }
                else {
                  uint64_t v94 = Count;
                }
                if (v94)
                {
                  CFIndex v95 = 0;
                  int v96 = 0;
                  int32x4_t v97 = (const void *)*MEMORY[0x1E4F558D8];
                  do
                  {
                    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v92, v95);
                    if (ValueAtIndex)
                    {
                      CFDictionaryRef v99 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v97);
                      if (v99)
                      {
                        CGRectMakeWithDictionaryRepresentation(v99, keys);
                        long long v100 = &v285[2 * v96];
                        *(_DWORD *)long long v100 = (int)(CGRectGetMinX(keys[0]) * 3264.0 + 0.5);
                        *((_DWORD *)v100 + 1) = (int)(CGRectGetMinY(keys[0]) * 2448.0 + 0.5);
                        *((_DWORD *)v100 + 2) = (CGRectGetWidth(keys[0]) * 3264.0 + 0.5);
                        *((_DWORD *)v100 + 3) = (CGRectGetHeight(keys[0]) * 2448.0 + 0.5);
                        ++v96;
                      }
                    }
                    ++v95;
                  }
                  while (v94 != v95);
                }
                else
                {
                  int v96 = 0;
                }
              }
              else
              {
                int v96 = 0;
              }
              keya = fopen("/tmp/ae.txt", "a");
              uint64_t v128 = 0;
              uint64_t v129 = 0;
              int v130 = *(_DWORD *)(v64 + 7532);
              float v131 = (char *)&centerWeight;
              do
              {
                uint64_t v132 = 0;
                uint64_t v133 = v128;
                do
                {
                  uint16x8_t v134 = *(uint16x8_t *)&v131[v132];
                  int8x16_t v135 = vorrq_s8((int8x16_t)vshlq_n_s32(*(int32x4_t *)((char *)&values[2] + v133), 0x10uLL), (int8x16_t)vmovl_high_u16(v134));
                  uint64_t v136 = (int8x16_t *)((char *)keys + v133);
                  int8x16_t *v136 = vorrq_s8((int8x16_t)vshlq_n_s32(*(int32x4_t *)((char *)values + v133), 0x10uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8));
                  v136[1] = v135;
                  v133 += 32;
                  v132 += 16;
                }
                while (v132 != 32);
                ++v129;
                v128 += 64;
                v131 += 32;
              }
              while (v129 != 16);
              for (uint64_t i = 0; i != 9; ++i)
              {
                if ((unint64_t)(i - 3) <= 5)
                {
                  unint64_t v138 = sort_uint32_increments[i];
                  if (v138 <= 0xFF) {
                    uint64_t v139 = 255;
                  }
                  else {
                    uint64_t v139 = sort_uint32_increments[i];
                  }
                  uint64_t v140 = keys;
                  unint64_t v141 = (char *)keys + 4 * v138;
                  unint64_t v142 = sort_uint32_increments[i];
                  do
                  {
                    unsigned int v143 = *((_DWORD *)&keys[0].origin.x + v142);
                    unint64_t v144 = v142;
                    if (v142 >= v138)
                    {
                      uint64_t v145 = 0;
                      while (1)
                      {
                        unsigned int v146 = *((_DWORD *)&v140->origin.x + v145);
                        if (v146 <= v143) {
                          break;
                        }
                        *(_DWORD *)&v141[4 * v145] = v146;
                        v145 -= v138;
                        unint64_t v144 = v142 + v145;
                        if (v142 + v145 < v138) {
                          goto LABEL_205;
                        }
                      }
                      unint64_t v144 = v142 + v145;
                    }
LABEL_205:
                    *((_DWORD *)&keys[0].origin.x + v144) = v143;
                    v141 += 4;
                    uint64_t v140 = (CGRect *)((char *)v140 + 4);
                  }
                  while (v142++ != v139);
                }
              }
              uint64_t v148 = 0;
              int v149 = 0;
              int v150 = 0;
              int v151 = 0;
              int v152 = 0;
              int v153 = 0;
              do
              {
                unsigned int v154 = *(_DWORD *)((char *)&keys[0].origin.x + v148);
                int v155 = (unsigned __int16)v154;
                v151 += (unsigned __int16)v154;
                if (v151 > 319) {
                  int v156 = v150;
                }
                else {
                  int v156 = v150 + 1;
                }
                if (v151 <= 319) {
                  int v157 = v149;
                }
                else {
                  int v157 = v149 + 1;
                }
                int v158 = v153 + (unsigned __int16)v154 * HIWORD(v154);
                int v159 = v155 + v152;
                if ((v151 - 15569) < 0xFFFFC46F)
                {
                  int v150 = v156;
                  int v149 = v157;
                }
                else
                {
                  int v153 = v158;
                  int v152 = v159;
                }
                v148 += 4;
              }
              while (v148 != 1024);
              if (v152 < 1) {
                int v160 = 0;
              }
              else {
                int v160 = v153 / v152;
              }
              for (uint64_t j = 0; j != 16; ++j)
              {
                for (uint64_t k = 0; k != 16; ++k)
                {
                  if (v96 < 1)
                  {
                    int v163 = 0;
                  }
                  else
                  {
                    int v163 = 0;
                    uint64_t v164 = &v285[1];
                    uint64_t v165 = v96;
                    do
                    {
                      int v166 = *((_DWORD *)v164 - 2);
                      int v167 = *((_DWORD *)v164 - 1);
                      int v168 = (v166 << 12) / 3264;
                      int v169 = (v167 << 12) / 2448;
                      unsigned int v170 = ((*(_DWORD *)v164 + v166) << 12) / 0xCC0u;
                      unsigned int v171 = ((*((_DWORD *)v164 + 1) + v167) << 12) / 0x990u;
                      if (v168 <= k << 8) {
                        int v168 = k << 8;
                      }
                      if (v169 <= j << 8) {
                        unsigned int v172 = j << 8;
                      }
                      else {
                        unsigned int v172 = v169;
                      }
                      if (v170 >= (k << 8) + 256) {
                        unsigned int v173 = (k << 8) + 256;
                      }
                      else {
                        unsigned int v173 = v170;
                      }
                      if (v171 >= (j << 8) + 256) {
                        unsigned int v171 = (j << 8) + 256;
                      }
                      BOOL v174 = v173 >= v168;
                      unsigned int v175 = v173 - v168;
                      if (v175 != 0 && v174 && v171 > v172) {
                        v163 += (int)((v171 - v172) * v175) >> 8;
                      }
                      v164 += 2;
                      --v165;
                    }
                    while (v165);
                  }
                  if (v130 > 1)
                  {
                    int v177 = autoExposureSimulation_state[16 * j + k];
                    int v163 = (9 * v163 - v177 + 8 * v177 + 7) >> 4;
                  }
                  autoExposureSimulation_state[16 * j + k] = v163;
                }
              }
              uint64_t v178 = 0;
              unsigned int v179 = 0;
              int v180 = 0;
              uint64_t v181 = values;
              uint64_t v182 = (char *)autoExposureSimulation_state;
              do
              {
                uint64_t v183 = 0;
                int32x4_t v184 = (int32x4_t)v179;
                int32x4_t v185 = 0uLL;
                int32x4_t v186 = (int32x4_t)v180;
                int v187 = (int32x4_t *)v181;
                int32x4_t v188 = 0uLL;
                do
                {
                  uint16x8_t v189 = *(uint16x8_t *)&v182[v183];
                  int32x4_t v191 = *v187;
                  int32x4_t v190 = v187[1];
                  v187 += 2;
                  int32x4_t v188 = vmlaq_s32(v188, v190, (int32x4_t)vmovl_high_u16(v189));
                  int32x4_t v186 = vmlaq_s32(v186, v191, (int32x4_t)vmovl_u16(*(uint16x4_t *)v189.i8));
                  int32x4_t v185 = (int32x4_t)vaddw_high_u16((uint32x4_t)v185, v189);
                  int32x4_t v184 = (int32x4_t)vaddw_u16((uint32x4_t)v184, *(uint16x4_t *)v189.i8);
                  v183 += 16;
                }
                while (v183 != 32);
                int v180 = vaddvq_s32(vaddq_s32(v186, v188));
                unsigned int v179 = vaddvq_s32(vaddq_s32(v184, v185));
                ++v178;
                v182 += 32;
                v181 += 8;
              }
              while (v178 != 16);
              uint64_t v258 = a1;
              unsigned int v192 = 0;
              unsigned int v193 = 0x10000;
              do
              {
                if (((v192 + v193) >> 1) * ((v192 + v193) >> 1) > v179) {
                  unsigned int v193 = (v192 + v193) >> 1;
                }
                else {
                  unsigned int v192 = (v192 + v193) >> 1;
                }
              }
              while (v192 + 1 < v193);
              uint64_t v194 = 0;
              int32x4_t v195 = 0uLL;
              do
              {
                int32x4_t v195 = vaddq_s32(*(int32x4_t *)&buffer[v194], v195);
                v194 += 16;
              }
              while (v194 != 1024);
              uint64_t v196 = 0;
              int v197 = 0;
              unsigned int v198 = vaddvq_s32(v195);
              int v199 = -1;
              int v200 = -1;
              int v201 = -1;
              do
              {
                v197 += *(_DWORD *)&buffer[4 * v196];
                if (v201 == -1 && v197 >= (int)(10 * v198) >> 10) {
                  int v201 = v196;
                }
                if (v200 == -1 && v197 >= (int)(665 * v198) >> 10) {
                  int v200 = v196;
                }
                if (v199 == -1 && v197 >= (int)(972 * v198) >> 10) {
                  int v199 = v196;
                }
                ++v196;
              }
              while (v196 != 256);
              int v205 = (v200 << 11) / (v199 + v201);
              if (v205 <= 512) {
                int v205 = 512;
              }
              if (v205 >= 2048) {
                unsigned int v206 = 2048;
              }
              else {
                unsigned int v206 = v205;
              }
              unsigned int v207 = v206 - 1024;
              int v208 = v180 / (int)v179;
              if (v206 < 0x401)
              {
                unsigned int v209 = (112976 * v207 + 192937984) >> 20;
              }
              else
              {
                unsigned int v209 = (131744 * v207 + 192937984) >> 20;
                int v210 = (int)((double)((v279 << 10) / v198) + -51.2);
                if (v210 >= 1)
                {
                  int v211 = 4 * v210;
                  if (v211 >= 1024) {
                    int v211 = 1024;
                  }
                  unsigned int v209 = (int)(184 * v211 + (1024 - v211) * v209) >> 10;
                }
              }
              int v212 = 8 * v192;
              if ((int)(8 * v192) >= 768) {
                int v212 = 768;
              }
              int v213 = v212 & ~(v212 >> 31);
              unsigned int v214 = ((1024 - v213) * v160 + v208 * v213) >> 10;
              unsigned int v215 = (int)(225 * v213 + v209 * (1024 - v213)) >> 10;
              if (keya)
              {
                int v254 = ((1024 - v213) * v160 + v208 * v213) >> 10;
                unsigned int v255 = v209;
                unsigned int v256 = v206;
                int v257 = v208;
                LODWORD(keys[0].origin.x) = 1065353216;
                LODWORD(v273[0]) = 256;
                CFNumberRef v216 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53E48]);
                if (v216) {
                  CFNumberGetValue(v216, kCFNumberFloatType, keys);
                }
                CFNumberRef v217 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E4F53C08]);
                if (v217)
                {
                  CFNumberGetValue(v217, kCFNumberIntType, v273);
                  double v218 = (double)SLODWORD(v273[0]) * 0.00390625;
                }
                else
                {
                  double v218 = 1.0;
                }
                fprintf(keya, "avg:%3d tgt:%3d  current: t=%.1fms %.1fx", v254, v215, *(float *)&keys[0].origin.x * 1000.0, v218);
                fprintf(keya, " faceAvg=%d faceWeight=%d (xl=%d xm=%d xh=%d) scale:%d sceneTarget:%d blend:%d average:%d target:%d outliers:%d/%d", v257, 4 * v192, v201, v200, v199, v256, v255, v213, v254, v215, v150, v149);
                unsigned int v214 = v254;
              }
              if ((double)v215 * 1.0443 < (double)v214 || (double)v215 * 0.9576 > (double)v214)
              {
                int v220 = 256;
                HIDWORD(v270) = 256;
                float v221 = (float)((float)((float)((float)v215 * 0.1) / (float)v214) + 0.9) * *(float *)(v260 + 7528);
                float v222 = 0.066667;
                if (v221 <= 0.066667)
                {
                  float v222 = (float)((float)((float)((float)v215 * 0.1) / (float)v214) + 0.9) * *(float *)(v260 + 7528);
                }
                else
                {
                  int v220 = vcvts_n_s32_f32(v221 / 0.066667, 8uLL);
                  if (v220 >= 3840) {
                    int v220 = 3840;
                  }
                }
                int v268 = v220;
                if (v222 >= 0.000125) {
                  float v223 = v222;
                }
                else {
                  float v223 = 0.000125;
                }
                if (v223 >= 0.01) {
                  int v224 = 1000;
                }
                else {
                  int v224 = 100000;
                }
                int v269 = v224;
                LODWORD(v270) = (int)(float)((float)((float)v224 * v223) + 0.5);
                keys[0].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F70];
                CFAllocatorRef v225 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                v273[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v270);
                keys[0].origin.double y = *(CGFloat *)MEMORY[0x1E4F52F68];
                v273[1] = CFNumberCreate(v225, kCFNumberIntType, &v269);
                keys[0].size.CGFloat width = *(CGFloat *)MEMORY[0x1E4F52E78];
                CFNumberRef v274 = CFNumberCreate(v225, kCFNumberIntType, &v268);
                keys[0].size.CGFloat height = *(CGFloat *)MEMORY[0x1E4F52F60];
                CFNumberRef v275 = CFNumberCreate(v225, kCFNumberIntType, (char *)&v270 + 4);
                keys[1].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F58];
                CFNumberRef v276 = CFNumberCreate(v225, kCFNumberIntType, (char *)&v270 + 4);
                CFDictionaryRef v226 = CFDictionaryCreate(v225, (const void **)keys, (const void **)v273, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                for (uint64_t m = 0; m != 5; ++m)
                  CFRelease(v273[m]);
                if (keya) {
                  fprintf(keya, "  set: t=%.1fms %.1fx", v223 * 1000.0, (float)((float)v268 * 0.0039062));
                }
                captureStreamSetPropertyOnActivityScheduler(v258, (const void *)*MEMORY[0x1E4F54A90], v226);
                *(float *)(v260 + 752_Block_object_dispose(&STACK[0x4E0], 8) = (float)(v223 * (float)v268) * 0.0039062;
              }
              if (keya)
              {
                fputc(10, keya);
                fclose(keya);
              }
            }
          }
        }
      }
      return v13;
    case 4:
      *(void *)IOSurfaceRef buffer = 0;
      if (!*(unsigned char *)(DerivedStorage + 7472))
      {
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A40], (const void *)*MEMORY[0x1E4F1CFD0]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        *(unsigned char *)(DerivedStorage + 7472) = 1;
      }
      float v18 = *(float *)(DerivedStorage + 7492);
      if (v18 <= 0.125)
      {
        int v19 = (int)(float)((float)(1.0 / v18) + 0.5);
        int v20 = 1;
      }
      else
      {
        if (v18 >= 0.01) {
          int v19 = 1000;
        }
        else {
          int v19 = 100000;
        }
        int v20 = (int)(float)((float)((float)v19 * v18) + 0.5);
      }
      LODWORD(v273[0]) = v19;
      LODWORD(v285[0]) = v20;
      double v31 = *(double *)(DerivedStorage + 7504);
      if (v31 != 0.0)
      {
        double v32 = *(double *)(DerivedStorage + 7512);
        if (v32 != 0.0)
        {
          double v33 = (double)v19 / (double)v20;
          if (v33 >= v31)
          {
            if (v33 <= v32) {
              *(void *)IOSurfaceRef buffer = floor(v33);
            }
            else {
              *(void *)IOSurfaceRef buffer = *(void *)(DerivedStorage + 7512);
            }
          }
          else
          {
            *(void *)IOSurfaceRef buffer = *(void *)(DerivedStorage + 7504);
            float v34 = 1.0 / v31;
            *(float *)(DerivedStorage + 7492) = v34;
            if (v34 <= 0.125)
            {
              LODWORD(v285[0]) = 1;
              LODWORD(v273[0]) = (int)(float)((float)(1.0 / v34) + 0.5);
            }
            else
            {
              if (v34 >= 0.01) {
                int v35 = 1000;
              }
              else {
                int v35 = 100000;
              }
              LODWORD(v273[0]) = v35;
              LODWORD(v285[0]) = (int)(float)((float)((float)v35 * v34) + 0.5);
            }
          }
        }
      }
      LODWORD(v272[0]) = 256;
      uint64_t valuePtr = 0x10000000100;
      float v51 = *(float *)(DerivedStorage + 7500);
      if (v51 == 3.4028e38)
      {
        CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F53F70]);
        if (v52) {
          CFNumberGetValue(v52, kCFNumberFloatType, (void *)(DerivedStorage + 7500));
        }
        CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F53C08]);
        if (v53) {
          CFNumberGetValue(v53, kCFNumberIntType, &valuePtr);
        }
        CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F543A0]);
        if (v54) {
          CFNumberGetValue(v54, kCFNumberIntType, v272);
        }
        CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F54388]);
        if (v55) {
          CFNumberGetValue(v55, kCFNumberIntType, (char *)&valuePtr + 4);
        }
        LODWORD(keys[0].origin.x) = 1065353216;
        CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F54390]);
        if (v56) {
          CFNumberGetValue(v56, kCFNumberFloatType, keys);
        }
        HIDWORD(valuePtr) = vcvtps_s32_f32((float)SHIDWORD(valuePtr) / *(float *)&keys[0].origin.x);
      }
      else if (v51 <= 0.0)
      {
        LODWORD(valuePtr) = vcvts_n_s32_f32(*(float *)(DerivedStorage + 7496), 8uLL);
      }
      else
      {
        LODWORD(keys[0].origin.x) = 1112014848;
        CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F53F68]);
        if (v57)
        {
          CFNumberGetValue(v57, kCFNumberFloatType, keys);
          float v58 = *(float *)&keys[0].origin.x;
        }
        else
        {
          float v58 = 50.0;
        }
        LODWORD(valuePtr) = (int)(float)((float)(*(float *)(DerivedStorage + 7500) * 256.0) / v58);
      }
      *(_OWORD *)&keys[1].origin.double y = 0u;
      *(_OWORD *)&keys[0].size.CGFloat height = 0u;
      *(_OWORD *)&keys[0].origin.double y = 0u;
      *(void *)&long long v283 = 0;
      long long v282 = 0u;
      *(_OWORD *)values = 0u;
      long long v281 = 0u;
      keys[0].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F70];
      CFAllocatorRef v59 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, v285);
      keys[0].origin.double y = *(CGFloat *)MEMORY[0x1E4F52F68];
      values[1] = CFNumberCreate(v59, kCFNumberIntType, v273);
      keys[0].size.CGFloat width = *(CGFloat *)MEMORY[0x1E4F52E78];
      *(void *)&long long v281 = CFNumberCreate(v59, kCFNumberIntType, &valuePtr);
      keys[0].size.CGFloat height = *(CGFloat *)MEMORY[0x1E4F52F60];
      *((void *)&v281 + 1) = CFNumberCreate(v59, kCFNumberIntType, v272);
      keys[1].origin.double x = *(CGFloat *)MEMORY[0x1E4F52F58];
      *(void *)&long long v282 = CFNumberCreate(v59, kCFNumberIntType, (char *)&valuePtr + 4);
      if (*(double *)buffer <= 0.0)
      {
        unsigned int v60 = 5;
      }
      else
      {
        keys[1].origin.double y = *(CGFloat *)MEMORY[0x1E4F52EC8];
        *((void *)&v282 + 1) = CFNumberCreate(v59, kCFNumberDoubleType, buffer);
        unsigned int v60 = 6;
      }
      if (*(int *)(DerivedStorage + 7520) >= 1)
      {
        *((void *)&keys[0].origin.x + v60) = *MEMORY[0x1E4F52E90];
        values[v60++] = CFNumberCreate(v59, kCFNumberSInt32Type, (const void *)(DerivedStorage + 7520));
      }
      CFDictionaryRef v61 = CFDictionaryCreate(v59, (const void **)keys, (const void **)values, v60, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A90], v61);
      unint64_t v62 = 0;
      uint64_t v63 = 8 * v60;
      do
      {
        CFRelease(values[v62 / 8]);
        v62 += 8;
      }
      while (v63 != v62);
      CFRelease(v61);
      goto LABEL_130;
    case 5:
      if (*(float *)(DerivedStorage + 1508) <= 0.0)
      {
        int v21 = *(_DWORD *)(DerivedStorage + 7476);
        int v22 = *(_DWORD *)(DerivedStorage + 7480);
LABEL_46:
        setupExposureWindow(a1, v21, v22, v9, v10, 1);
      }
      uint64_t v13 = 0;
      goto LABEL_130;
    case 8:
      HIDWORD(valuePtr) = 1032358025;
      *(unsigned char *)(DerivedStorage + 7472) = 1;
      *(_DWORD *)(DerivedStorage + 7532) = 0;
      uint64_t v23 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A40], (const void *)*MEMORY[0x1E4F1CFD0]);
      CFBooleanRef v24 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"exposure_table:Disable", @"com.apple.coremedia");
      if (v24)
      {
        CFBooleanRef v25 = v24;
        uint64_t v26 = a1;
        CFTypeID v27 = CFGetTypeID(v24);
        if (v27 == CFBooleanGetTypeID()) {
          *(unsigned char *)(DerivedStorage + 756_Block_object_dispose(&STACK[0x4E0], 8) = CFBooleanGetValue(v25) != 0;
        }
        CFRelease(v25);
        a1 = v26;
      }
      if (*(unsigned char *)(DerivedStorage + 7568))
      {
        CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F53E48]);
        LODWORD(keys[0].origin.x) = 256;
        if (v28) {
          CFNumberGetValue(v28, kCFNumberFloatType, (char *)&valuePtr + 4);
        }
        CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F53C08]);
        if (v29) {
          CFNumberGetValue(v29, kCFNumberIntType, keys);
        }
        float v30 = (float)(*((float *)&valuePtr + 1) * (float)SLODWORD(keys[0].origin.x)) * 0.0039062;
        if (v30 < 0.000125) {
          float v30 = 0.000125;
        }
        *((float *)&valuePtr + 1) = v30;
        *(float *)(DerivedStorage + 752_Block_object_dispose(&STACK[0x4E0], 8) = v30;
        uint64_t v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54728], v23);
        goto LABEL_130;
      }
      if (*(void *)(DerivedStorage + 7560)) {
        goto LABEL_130;
      }
      *(_OWORD *)IOSurfaceRef buffer = 0u;
      long long v278 = 0u;
      long long v286 = 0u;
      *(_OWORD *)CFAllocatorRef v285 = 0u;
      CFPropertyListRef v41 = CFPreferencesCopyAppValue(@"exposure_table:IntegrationTime", @"com.apple.coremedia");
      if (v41)
      {
        *(void *)IOSurfaceRef buffer = @"IntegrationTime";
        v285[0] = (void *)v41;
        LODWORD(v42) = 1;
      }
      else
      {
        LODWORD(v42) = 0;
      }
      CFPropertyListRef v228 = CFPreferencesCopyAppValue(@"exposure_table:MaxGain", @"com.apple.coremedia");
      if (v228)
      {
        *(void *)((unint64_t)buffer | (8 * v42)) = @"MaxGain";
        *(void *)((unint64_t)v285 & 0xFFFFFFFFFFFFFFF7 | (8 * (v42 & 1))) = v228;
        LODWORD(v42) = v42 + 1;
      }
      CFPropertyListRef v229 = CFPreferencesCopyAppValue(@"exposure_table:ExposureDelta", @"com.apple.coremedia");
      if (v229)
      {
        *(void *)&buffer[8 * v42] = @"ExposureDelta";
        v285[v42] = (void *)v229;
        LODWORD(v42) = v42 + 1;
      }
      CFPropertyListRef v230 = CFPreferencesCopyAppValue(@"exposure_table:StabilityZone", @"com.apple.coremedia");
      if (v230)
      {
        *(void *)&buffer[8 * v42] = @"StabilityZone";
        v285[v42] = (void *)v230;
        LODWORD(v42) = v42 + 1;
      }
      else if (!v42)
      {
LABEL_332:
        uint64_t v259 = a1;
        uint64_t v236 = 0;
        uint64_t v288 = 0;
        memset(keys, 0, sizeof(keys));
        uint64_t v284 = 0;
        long long v282 = 0u;
        long long v283 = 0u;
        *(_OWORD *)values = 0u;
        long long v281 = 0u;
        CFAllocatorRef v237 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          *(void *)((char *)&keys[0].origin.x + v236 * _Block_object_dispose(&STACK[0x4E0], 8) = CFNumberCreate(v237, kCFNumberDoubleType, (char *)&gDefaultExposureTable + v236 * 8);
          values[v236] = CFNumberCreate(v237, kCFNumberDoubleType, (char *)&gDefaultExposureTable + v236 * 8 + 72);
          ++v236;
        }
        while (v236 != 9);
        uint64_t v238 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        CFArrayRef v239 = CFArrayCreate(v237, (const void **)keys, 9, MEMORY[0x1E4F1D510]);
        CFArrayRef v240 = CFArrayCreate(v237, (const void **)values, 9, v238);
        *(_OWORD *)BOOL v273 = xmmword_1E5C2D828;
        v272[0] = v239;
        v272[1] = v240;
        CFDictionaryRef v241 = CFDictionaryCreate(v237, (const void **)v273, (const void **)v272, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        int v242 = malloc_type_malloc(0x20uLL, 0x1020040A02120EAuLL);
        uint64_t v13 = exposure_table_initialize((uint64_t)v242, v241);
        if (v13) {
          free(v242);
        }
        else {
          *(void *)(DerivedStorage + 7560) = v242;
        }
        CFRelease(v241);
        CFRelease(v239);
        CFRelease(v240);
        uint64_t v243 = 0;
        a1 = v259;
        do
        {
          CFRelease(*(CFTypeRef *)((char *)&keys[0].origin.x + v243 * 8));
          CFRelease(values[v243++]);
        }
        while (v243 != 9);
        goto LABEL_130;
      }
      uint64_t v42 = v42;
      CFDictionaryRef v231 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)buffer, (const void **)v285, v42, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      float v232 = malloc_type_malloc(0x20uLL, 0x1020040A02120EAuLL);
      int v233 = exposure_table_initialize((uint64_t)v232, v231);
      if (v233) {
        free(v232);
      }
      else {
        *(void *)(DerivedStorage + 7560) = v232;
      }
      CFRelease(v231);
      float v234 = v285;
      do
      {
        double v235 = *v234++;
        CFRelease(v235);
        --v42;
      }
      while (v42);
      if (!v233)
      {
        uint64_t v13 = 0;
        goto LABEL_130;
      }
      goto LABEL_332;
    default:
      goto LABEL_130;
  }
}

id BWPortTypesWithQSubResolutionFlavor(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        int v10 = (void *)[a1 objectForKeyedSubscript:v9];
        if (objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2))) {
          [v4 addObject:v9];
        }
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
  id result = (id)[v4 count];
  if (result) {
    return (id)[v4 copy];
  }
  return result;
}

uint64_t FigCaptureStringFromPixelBufferUniversalLossyCompressionLevel(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%d", a1);
}

uint64_t BWPhotoEncoderStringFromEncodingScheme(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%d", a1);
}

uint64_t __FigCaptureCameracapturedEnabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  FigCaptureCameracapturedEnabled_sCameracapturedEnabled = result;
  return result;
}

uint64_t FigCapturePlatformChipRevisionIdentifier()
{
  if (fcp_identifyChipRevision_identifyChipRevisionOnceToken != -1) {
    dispatch_once(&fcp_identifyChipRevision_identifyChipRevisionOnceToken, &__block_literal_global_75);
  }
  return sPlatformChipRevisionID;
}

BWNodeInputMediaConfiguration *simpleInputMediaConfigurationWithDelayedBufferCount(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(BWNodeInputMediaConfiguration);
  [(BWNodeInputMediaConfiguration *)v2 setFormatRequirements:objc_alloc_init(BWVideoFormatRequirements)];
  [(BWNodeInputMediaConfiguration *)v2 setPassthroughMode:0];
  [(BWNodeInputMediaConfiguration *)v2 setDelayedBufferCount:a1];
  return v2;
}

void sub_1A59C9668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t mrcn_createSampleBufferProcessor()
{
  uint64_t v0 = FigSampleBufferProcessorCreateForCustom();
  if (v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

void sub_1A59CC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t cs_initMemoryPoolSize(uint64_t a1, void *a2)
{
  uint64_t v3 = FigCaptureClientApplicationIDIsCameraOrDerivative(a2);
  if ((unint64_t)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "physicalMemory") >> 32) {
    uint64_t v4 = 200;
  }
  else {
    uint64_t v4 = 1;
  }
  uint64_t v5 = +[BWMemoryPool sharedMemoryPool];
  return [(BWMemoryPool *)v5 ensureMemoryAsyncWithSize:v4 withMaximizeSystemMemory:a1 useOptimizedMemorySizeDistributionsIfAvailable:v3];
}

__CFData *FigLivePhotoMetadataCopySetupDataAddingDimensions(const __CFData *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a1)
  {
    CFIndex Length = CFDataGetLength(a1);
    MutableCopdouble y = CFDataCreateMutableCopy(v3, Length + 16, a1);
  }
  else
  {
    MutableCopdouble y = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 16);
  }
  uint64_t v7 = MutableCopy;
  if (MutableCopy)
  {
    *(void *)bytes = 0x736D696410000000;
    *(_DWORD *)uint64_t v9 = bswap32(a2);
    unsigned int v10 = bswap32(HIDWORD(a2));
    CFDataAppendBytes(MutableCopy, bytes, 8);
    CFDataAppendBytes(v7, v9, 8);
  }
  return v7;
}

void *FigCaptureEncodedByteStreamFormatForPixelFormat(int a1)
{
  if (a1 > 1717855599)
  {
    if (a1 <= 1751410031)
    {
      if (a1 == 1717855600) {
        return &unk_1EFB01E68;
      }
      if (a1 == 1717856627) {
        return &unk_1EFB01E38;
      }
    }
    else
    {
      switch(a1)
      {
        case 1751410032:
          return &unk_1EFB01E50;
        case 1815491698:
          return &unk_1EFB01E98;
        case 1751411059:
          return &unk_1EFB01E20;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    if (a1 <= 1701722229)
    {
      if (a1 == 1278226488) {
        return &unk_1EFB01E80;
      }
      unsigned __int16 v3 = 14438;
    }
    else
    {
      if (a1 == 1701722230 || a1 == 1701738598) {
        return result;
      }
      unsigned __int16 v3 = 30838;
    }
    if (a1 == (v3 | 0x656E0000)) {
      return result;
    }
  }
  if (!FigCapturePixelFormatIsYCbCr(a1)) {
    return 0;
  }
  uint64_t result = 0;
  if (a1 > 1751527983)
  {
    if (a1 == 1751527984) {
      return result;
    }
    int v4 = 2087216688;
  }
  else
  {
    if (a1 == 761816624) {
      return result;
    }
    int v4 = 795371056;
  }
  if (a1 != v4)
  {
    int IsTenBit = FigCapturePixelFormatIsTenBit(a1);
    int IsFullRange = FigCapturePixelFormatIsFullRange(a1);
    if (IsTenBit)
    {
      uint64_t v7 = &unk_1EFB01EC8;
      int v8 = &unk_1EFB01EB0;
    }
    else
    {
      uint64_t v7 = &unk_1EFB01EF8;
      int v8 = &unk_1EFB01EE0;
    }
    if (IsFullRange) {
      return v8;
    }
    else {
      return v7;
    }
  }
  return result;
}

void _executeBlockWithAutoreleasePool(void (**a1)(void))
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  a1[2](a1);
}

void BWPreviewSynchronizerDestroy(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

double FigMotionAdjustBravoDataForReferenceCamera(uint64_t a1)
{
  if (a1)
  {
    if ((*(unsigned char *)a1 & 6) != 0)
    {
      _computeExtrinsicMatrixBetweenCamera(a1, 0, 6, 2);
      _computeExtrinsicMatrixBetweenCamera(a1, 5, 4, 2);
      _invertExtrinsicMatrixStoredInBravoData(a1, 2, 1);
      _computeExtrinsicMatrixBetweenCamera(a1, 1, 6, 4);
      _invertExtrinsicMatrixStoredInBravoData(a1, 0, 1);
      _invertExtrinsicMatrixStoredInBravoData(a1, 0, 2);
      double result = 0.0;
      *(_OWORD *)(a1 + 392) = 0u;
      *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
      *(_OWORD *)(a1 + 424) = 0u;
      *(_DWORD *)(a1 + 392) = 1065353216;
      *(_DWORD *)(a1 + 412) = 1065353216;
      *(_DWORD *)(a1 + 432) = 1065353216;
    }
  }
  return result;
}

float _invertExtrinsicMatrixStoredInBravoData(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 0;
  int v4 = (float *)(a1 + 104 + 48 * BravoCurrentToReferenceMapping[3 * a2 + a3]);
  uint64_t v5 = a1 + 104 + 48 * BravoCurrentToReferenceMapping[3 * a3 + a2];
  do
  {
    *(float *)(v5 + v3 * 4) = v4[dword_1A5F0C7F4[v3]];
    ++v3;
  }
  while (v3 != 12);
  for (uint64_t i = 0; i != 48; i += 16)
  {
    float result = -(float)((float)((float)(*(float *)(v5 + i + 4) * v4[7]) + (float)(*(float *)(v5 + i) * v4[3]))
                    + (float)(*(float *)(v5 + i + 8) * v4[11]));
    *(float *)(v5 + i + 12) = result;
  }
  return result;
}

float *_computeExtrinsicMatrixBetweenCamera(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = 0;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (float *)(a1 + 104 + 48 * a3);
  uint64_t v6 = (float *)(a1 + 104 + 48 * a4);
  uint64_t v7 = v33;
  int v8 = (double *)v32;
  uint64_t v9 = v5;
  unsigned int v10 = v6;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = v8;
    do
    {
      *(double *)&v7[8 * v11] = v9[v11];
      *uint64_t v12 = v10[v11];
      v12 += 3;
      ++v11;
    }
    while (v11 != 3);
    ++v4;
    v10 += 4;
    v9 += 4;
    v7 += 24;
    ++v8;
  }
  while (v4 != 3);
  uint64_t v13 = 0;
  long long v14 = v32;
  do
  {
    uint64_t v15 = 0;
    int v16 = (double *)v33;
    do
    {
      uint64_t v17 = 0;
      double v18 = 0.0;
      int v19 = v16;
      do
      {
        double v20 = *v19;
        v19 += 3;
        double v18 = v18 + *(double *)&v14[v17] * v20;
        v17 += 8;
      }
      while (v17 != 24);
      *(double *)&v31[6 * v13 + 3 + 2 * v15++] = v18;
      ++v16;
    }
    while (v15 != 3);
    ++v13;
    v14 += 24;
  }
  while (v13 != 3);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  float v23 = v5[7] - v6[7];
  uint64_t v24 = a1 + 48 * a2 + 104;
  v31[0] = v5[3] - v6[3];
  v31[1] = v23;
  v31[2] = v5[11] - v6[11];
  uint64_t v25 = v24;
  do
  {
    uint64_t v26 = 0;
    uint64_t v27 = (4 * v22) | 3;
    *(_DWORD *)(v24 + 4 * v27) = 0;
    float result = &v31[v21 + 3];
    do
    {
      float v29 = *(double *)&result[2 * v26];
      *(float *)(v25 + 4 * v26) = v29;
      float v30 = *(float *)(v24 + 4 * v27) + *(double *)&v32[8 * v26 + v21 * 4] * v31[v26];
      *(float *)(v24 + 4 * v27) = v30;
      ++v26;
    }
    while (v26 != 3);
    ++v22;
    v25 += 16;
    v21 += 6;
  }
  while (v22 != 3);
  return result;
}

uint64_t __FigCaptureTCCAccessPreflight_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t result = tcc_authorization_record_get_authorization_right();
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  }
  return result;
}

uint64_t setProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  uint64_t v134 = 0;
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 4294954511;
  }
  uint64_t v7 = DerivedStorage;
  if (CFEqual(a2, @"AutoExposure"))
  {
    float v8 = *(float *)(v7 + 608);
    if (v8 <= 0.0) {
      float v8 = 0.5;
    }
    *(float *)&uint64_t valuePtr = v8;
    *((float *)&valuePtr + 1) = v8;
    if (a3)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"w");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
      }
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"h");
      if (v10) {
        CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr);
      }
      *(float *)&uint64_t v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a3, @"x");
      if (v11) {
        CFNumberGetValue(v11, kCFNumberFloatType, (char *)&v134 + 4);
      }
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a3, @"y");
      if (v12) {
        CFNumberGetValue(v12, kCFNumberFloatType, &v134);
      }
    }
    else
    {
      *(float *)&uint64_t v134 = (float)(1.0 - v8) * 0.5;
      *((float *)&v134 + 1) = *(float *)&v134;
    }
    FigImageControl_AutoExposure(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
    return 0;
  }
  if (CFEqual(a2, @"FlashExposure"))
  {
    uint64_t valuePtr = 0x3F0000003F000000;
    if (a3)
    {
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a3, @"w");
      if (v13) {
        CFNumberGetValue(v13, kCFNumberFloatType, (char *)&valuePtr + 4);
      }
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a3, @"h");
      if (v14) {
        CFNumberGetValue(v14, kCFNumberFloatType, &valuePtr);
      }
      *(float *)&uint64_t v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(a3, @"x");
      if (v15) {
        CFNumberGetValue(v15, kCFNumberFloatType, (char *)&v134 + 4);
      }
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a3, @"y");
      if (v16) {
        CFNumberGetValue(v16, kCFNumberFloatType, &v134);
      }
    }
    else
    {
      uint64_t v134 = 0x3E8000003E800000;
    }
    FigImageControl_FlashMetering(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
    return 0;
  }
  if (CFEqual(a2, @"ContinuousAutoFocus"))
  {
    unsigned __int8 v17 = *(_DWORD *)(v7 + 40) == 0;
    uint64_t valuePtr = 0x3F0000003F000000;
    if (a3)
    {
      CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a3, @"w");
      if (v18) {
        CFNumberGetValue(v18, kCFNumberFloatType, (char *)&valuePtr + 4);
      }
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, @"h");
      if (v19) {
        CFNumberGetValue(v19, kCFNumberFloatType, &valuePtr);
      }
      *(float *)&uint64_t v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a3, @"x");
      if (v20) {
        CFNumberGetValue(v20, kCFNumberFloatType, (char *)&v134 + 4);
      }
      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a3, @"y");
      if (v21) {
        CFNumberGetValue(v21, kCFNumberFloatType, &v134);
      }
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
      CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a3, @"far");
      if (v22) {
        CFNumberGetValue(v22, kCFNumberFloatType, &rect);
      }
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a3, @"near");
      if (v23) {
        CFNumberGetValue(v23, kCFNumberFloatType, &v127);
      }
      CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"smooth");
      if (v24) {
        BOOL v25 = CFBooleanGetValue(v24) != 0;
      }
      else {
        BOOL v25 = 0;
      }
      CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"highFrameRate");
      if (v29) {
        unsigned __int8 v17 = CFBooleanGetValue(v29) != 0;
      }
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v134 = 0x3E8000003E800000;
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
    }
    return FigImageControl_ContinuousAutoFocus(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5), llroundf(*(float *)&rect.origin.x * 255.0), llroundf(*(float *)&v127 * 255.0), v25, v17);
  }
  if (!CFEqual(a2, @"ContinuousAutoFocusWithSmoothFocus"))
  {
    if (CFEqual(a2, @"FocusPreset"))
    {
      if (CFEqual(a3, @"Still"))
      {
        double v31 = *(const void **)(v7 + 680);
        double v32 = (const void **)MEMORY[0x1E4F539A8];
      }
      else if (CFEqual(a3, @"Video"))
      {
        double v31 = *(const void **)(v7 + 680);
        double v32 = (const void **)MEMORY[0x1E4F539C0];
      }
      else if (CFEqual(a3, @"CinematicVideo"))
      {
        *(unsigned char *)(v7 + 625) = 0;
        double v31 = *(const void **)(v7 + 680);
        double v32 = (const void **)MEMORY[0x1E4F539C8];
      }
      else
      {
        int v47 = CFEqual(a3, @"TimeLapse");
        double v31 = *(const void **)(v7 + 680);
        if (!v47)
        {
          if (v31)
          {
            CFRelease(*(CFTypeRef *)(v7 + 680));
            a3 = 0;
            *(void *)(v7 + 680) = 0;
            return (uint64_t)a3;
          }
          return 0;
        }
        double v32 = (const void **)MEMORY[0x1E4F539B8];
      }
      CFDictionaryRef v48 = *v32;
      *(void *)(v7 + 680) = *v32;
      if (v48) {
        CFRetain(v48);
      }
      if (v31) {
        CFRelease(v31);
      }
      return 0;
    }
    if (!a3) {
      return 4294954516;
    }
    if (CFEqual(a2, @"SpotMeteredExposure"))
    {
      uint64_t valuePtr = 0x3F0000003F000000;
      CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a3, @"w");
      if (v33) {
        CFNumberGetValue(v33, kCFNumberFloatType, (char *)&valuePtr + 4);
      }
      CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(a3, @"h");
      if (v34) {
        CFNumberGetValue(v34, kCFNumberFloatType, &valuePtr);
      }
      *(float *)&uint64_t v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a3, @"x");
      if (v35) {
        CFNumberGetValue(v35, kCFNumberFloatType, (char *)&v134 + 4);
      }
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(a3, @"y");
      if (v36) {
        CFNumberGetValue(v36, kCFNumberFloatType, &v134);
      }
      *(_DWORD *)(v7 + 5496) = 0;
      FigImageControl_SpotMetering(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
      return 0;
    }
    if (CFEqual(a2, @"SpotMeteredExposureAreaOfInterest"))
    {
      memset(&rect, 0, sizeof(rect));
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3) && CGRectMakeWithDictionaryRepresentation(a3, &rect))
      {
        int v38 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
        int v39 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
        int v40 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
        CGFloat Height = CGRectGetHeight(rect);
        FigImageControl_SetSpotMeteringAreaOfInterest(a1, v38, v39, v40, (int)(Height * 1000.0 + 0.5));
        return 0;
      }
      return 4294954516;
    }
    if (CFEqual(a2, @"AutoExposureAreaOfInterest"))
    {
      memset(&rect, 0, sizeof(rect));
      CFTypeID v42 = CFDictionaryGetTypeID();
      if (v42 == CFGetTypeID(a3) && CGRectMakeWithDictionaryRepresentation(a3, &rect))
      {
        int v43 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
        int v44 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
        int v45 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
        CGFloat v46 = CGRectGetHeight(rect);
        FigImageControl_SetAutoExposureAreaOfInterest(a1, v43, v44, v45, (int)(v46 * 1000.0 + 0.5));
        return 0;
      }
      return 4294954516;
    }
    if (CFEqual(a2, @"ManualExposure"))
    {
      float v130 = 1.0;
      float v131 = 0.0;
      int v128 = 0;
      float v129 = 0.033333;
      rect.origin.double x = 0.0;
      double v127 = 0.0;
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(a3, @"IntegrationTime");
      if (v49) {
        CFNumberGetValue(v49, kCFNumberFloatType, &v129);
      }
      CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(a3, @"Gain");
      if (v50) {
        CFNumberGetValue(v50, kCFNumberFloatType, &v130);
      }
      CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52E90]);
      if (v51) {
        CFNumberGetValue(v51, kCFNumberSInt32Type, &v128);
      }
      CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ManualExposureMinFrameRate");
      if (v52) {
        CFNumberGetValue(v52, kCFNumberDoubleType, &rect);
      }
      CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ManualExposureMaxFrameRate");
      if (v53) {
        CFNumberGetValue(v53, kCFNumberDoubleType, &v127);
      }
      CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ISO");
      if (v54)
      {
        CFNumberGetValue(v54, kCFNumberFloatType, &v131);
        FigImageControl_ManualExposureWithISO(v129, rect.origin.x, v127, v131, a1, v128);
      }
      else
      {
        FigImageControl_ManualExposure(v129, v130);
      }
      return 0;
    }
    if (CFEqual(a2, @"ExposureBias"))
    {
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      CFTypeID v55 = CFDictionaryGetTypeID();
      if (v55 == CFGetTypeID(a3))
      {
        CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F548F8]);
        if (v56)
        {
          CFNumberRef v57 = v56;
          CFTypeID v58 = CFGetTypeID(v56);
          if (v58 == CFNumberGetTypeID()) {
            CFNumberGetValue(v57, kCFNumberFloatType, &rect);
          }
        }
        CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52E90]);
        if (v59)
        {
          CFNumberRef v60 = v59;
          CFTypeID v61 = CFGetTypeID(v59);
          if (v61 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v60, kCFNumberSInt32Type, &v127);
            int v62 = LODWORD(v127);
LABEL_123:
            FigImageControl_SetExposureBias(a1, v62, *(float *)&rect.origin.x);
            return 0;
          }
        }
      }
      else
      {
        CFTypeID v64 = CFNumberGetTypeID();
        if (v64 == CFGetTypeID(a3))
        {
          CFNumberGetValue(a3, kCFNumberFloatType, &rect);
        }
        else
        {
          a3 = (const __CFDictionary *)FigSignalErrorAt();
          if (a3) {
            return (uint64_t)a3;
          }
        }
      }
      int v62 = 0;
      goto LABEL_123;
    }
    if (CFEqual(a2, @"ExposureConvergenceSpeed"))
    {
      LODWORD(rect.origin.x) = 1048576000;
      CFTypeID v63 = CFNumberGetTypeID();
      if (v63 == CFGetTypeID(a3)) {
        CFNumberGetValue(a3, kCFNumberFloatType, &rect);
      }
      return FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata();
    }
    if (CFEqual(a2, @"ExposureStabilityZone"))
    {
      LODWORD(rect.origin.x) = 1028443341;
      CFTypeID v65 = CFNumberGetTypeID();
      if (v65 == CFGetTypeID(a3))
      {
        CFNumberGetValue(a3, kCFNumberFloatType, &rect);
        float v66 = *(float *)&rect.origin.x;
      }
      else
      {
        float v66 = 0.05;
      }
      return FigImageControl_SetExposureStabilityZone(a1, 0, v66);
    }
    if (CFEqual(a2, @"ExposureLock"))
    {
      FigImageControl_LockExposure();
      return 0;
    }
    if (CFEqual(a2, @"ContinuousAutoFocusAreaOfInterest"))
    {
      memset(&rect, 0, sizeof(rect));
      CFTypeID v67 = CFDictionaryGetTypeID();
      if (v67 != CFGetTypeID(a3) || !CGRectMakeWithDictionaryRepresentation(a3, &rect)) {
        return 4294954516;
      }
      int v68 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
      int v69 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
      int v70 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
      CGFloat v71 = CGRectGetHeight(rect);
      return FigImageControl_SetContinuousAutoFocusAreaOfInterest(a1, v68, v69, v70, (int)(v71 * 1000.0 + 0.5));
    }
    if (CFEqual(a2, @"ContinuousAutoFocusUseStrictAreaOfInterest"))
    {
      CFTypeID v72 = CFGetTypeID(a3);
      if (v72 == CFBooleanGetTypeID())
      {
        int v73 = CFBooleanGetValue(a3);
        a3 = 0;
        *(unsigned char *)(v7 + 561) = v73 != 0;
        return (uint64_t)a3;
      }
      goto LABEL_258;
    }
    if (CFEqual(a2, @"FocusScan"))
    {
      unsigned __int8 v74 = *(_DWORD *)(v7 + 40) == 0;
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      uint64_t valuePtr = 0x3F0000003F000000;
      CFNumberRef v75 = (const __CFNumber *)CFDictionaryGetValue(a3, @"w");
      if (v75) {
        CFNumberGetValue(v75, kCFNumberFloatType, (char *)&valuePtr + 4);
      }
      CFNumberRef v76 = (const __CFNumber *)CFDictionaryGetValue(a3, @"h");
      if (v76) {
        CFNumberGetValue(v76, kCFNumberFloatType, &valuePtr);
      }
      *(float *)&uint64_t v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(a3, @"x");
      if (v77) {
        CFNumberGetValue(v77, kCFNumberFloatType, (char *)&v134 + 4);
      }
      CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(a3, @"y");
      if (v78) {
        CFNumberGetValue(v78, kCFNumberFloatType, &v134);
      }
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
      CFNumberRef v79 = (const __CFNumber *)CFDictionaryGetValue(a3, @"far");
      if (v79) {
        CFNumberGetValue(v79, kCFNumberFloatType, &rect);
      }
      CFNumberRef v80 = (const __CFNumber *)CFDictionaryGetValue(a3, @"near");
      if (v80) {
        CFNumberGetValue(v80, kCFNumberFloatType, &v127);
      }
      CFBooleanRef v81 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"smooth");
      if (v81) {
        BOOL v82 = CFBooleanGetValue(v81) != 0;
      }
      else {
        BOOL v82 = 0;
      }
      CFBooleanRef v83 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"highFrameRate");
      if (v83) {
        unsigned __int8 v74 = CFBooleanGetValue(v83) != 0;
      }
      *(_DWORD *)(v7 + 5496) = 0;
      FigImageControl_FocusScan(a1, (int)(float)(*((float *)&v134 + 1) * 1000.0), (int)(float)(*(float *)&v134 * 1000.0), (int)(float)(*((float *)&valuePtr + 1) * 1000.0), (int)(float)(*(float *)&valuePtr * 1000.0), llroundf(*(float *)&rect.origin.x * 255.0), llroundf(*(float *)&v127 * 255.0), v82, v74);
      return 0;
    }
    if (CFEqual(a2, @"FocusLock"))
    {
      FigImageControl_LockFocus();
      return 0;
    }
    if (CFEqual(a2, @"ManualFocus"))
    {
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      CFTypeID v84 = CFDictionaryGetTypeID();
      if (v84 == CFGetTypeID(a3))
      {
        CFNumberRef v85 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53A80]);
        if (v85)
        {
          CFNumberRef v86 = v85;
          CFTypeID v87 = CFGetTypeID(v85);
          if (v87 == CFNumberGetTypeID()) {
            CFNumberGetValue(v86, kCFNumberSInt32Type, &rect);
          }
        }
        CFNumberRef v88 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52E90]);
        if (v88)
        {
          CFNumberRef v89 = v88;
          CFTypeID v90 = CFGetTypeID(v88);
          if (v90 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v89, kCFNumberSInt32Type, &v127);
            int v91 = LODWORD(v127);
LABEL_173:
            FigImageControl_ManualFocus(a1, SLODWORD(rect.origin.x), v91);
            return 0;
          }
        }
      }
      else
      {
        CFTypeID v93 = CFNumberGetTypeID();
        if (v93 == CFGetTypeID(a3))
        {
          float v131 = 0.0;
          CFNumberGetValue(a3, kCFNumberFloatType, &v131);
          int v91 = 0;
          LODWORD(rect.origin.x) = (int)(float)(v131 * 255.0);
          goto LABEL_173;
        }
      }
      int v91 = 0;
      goto LABEL_173;
    }
    if (CFEqual(a2, @"AutofocusProcessor_VideoMode"))
    {
      if (CFEqual(a3, @"Mode_StillPreview"))
      {
        unsigned int v92 = 0;
      }
      else if (CFEqual(a3, @"Mode_VideoPreview"))
      {
        unsigned int v92 = 1;
      }
      else
      {
        if (CFEqual(a3, @"Mode_VideoRecording"))
        {
          int v100 = *(_DWORD *)(v7 + 40);
          int v96 = (unsigned int *)(v7 + 40);
          if (v100 == 2)
          {
            a3 = 0;
            unsigned int v92 = 2;
            goto LABEL_184;
          }
          unsigned int v92 = 2;
          FigImageControl_VideoModeChange(a1, 2u);
          float32x4_t v98 = (const void **)MEMORY[0x1E4F1CFD0];
          goto LABEL_182;
        }
        if (CFEqual(a3, @"Mode_Conference"))
        {
          unsigned int v92 = 3;
        }
        else if (CFEqual(a3, @"Mode_Panorama"))
        {
          unsigned int v92 = 4;
        }
        else if (CFEqual(a3, @"Mode_TimeLapsePreview"))
        {
          unsigned int v92 = 5;
        }
        else if (CFEqual(a3, @"Mode_TimeLapseCapture"))
        {
          unsigned int v92 = 6;
        }
        else
        {
          unsigned int v92 = 0;
        }
      }
      int v97 = *(_DWORD *)(v7 + 40);
      int v96 = (unsigned int *)(v7 + 40);
      if (v92 == v97 || (FigImageControl_VideoModeChange(a1, v92), *v96 != 2))
      {
        a3 = 0;
        goto LABEL_184;
      }
      float32x4_t v98 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_182:
      a3 = (const __CFDictionary *)captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54CE0], *v98);
LABEL_184:
      *int v96 = v92;
      return (uint64_t)a3;
    }
    uint64_t v94 = (unsigned char *)(v7 + 4336);
    if (CFEqual(a2, @"MonitorSubjectArea"))
    {
      int v95 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
      if (*v94 != v95)
      {
        a3 = 0;
        *(_DWORD *)(v7 + 5496) = 0;
        *uint64_t v94 = v95;
        return (uint64_t)a3;
      }
      return 0;
    }
    if (CFEqual(a2, @"ProvidesStortorgetMetadata"))
    {
      int v99 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
      if (*(unsigned __int8 *)(v7 + 18120) != v99)
      {
        a3 = 0;
        *(unsigned char *)(v7 + 18120) = v99;
        return (uint64_t)a3;
      }
      return 0;
    }
    if (CFEqual(a2, @"FaceDetectionMode"))
    {
      *(unsigned char *)(v7 + 7580) = 0;
      if (CFEqual(a3, @"Disable"))
      {
        *(unsigned char *)(v7 + 560) = 0;
LABEL_194:
        uint64_t v101 = a1;
        int v102 = 0;
LABEL_211:
        FigImageControl_SetUseFaceLocationForMetering(v101, v102);
        return 0;
      }
      if (CFEqual(a3, @"AEOnly"))
      {
        *(unsigned char *)(v7 + 560) = 0;
      }
      else
      {
        if (CFEqual(a3, @"AFOnly"))
        {
          *(unsigned char *)(v7 + 560) = 1;
          goto LABEL_194;
        }
        if (!CFEqual(a3, @"AEAndAF")) {
          return 4294954516;
        }
        *(unsigned char *)(v7 + 560) = 1;
      }
      uint64_t v101 = a1;
      int v102 = 1;
      goto LABEL_211;
    }
    if (CFEqual(a2, @"WhiteBalanceGains"))
    {
      CFTypeID v103 = CFGetTypeID(a3);
      if (v103 == CFDictionaryGetTypeID())
      {
        LOWORD(v127) = 0;
        LOWORD(v131) = 0;
        LOWORD(v130) = 0;
        LODWORD(rect.origin.x) = 0;
        CFNumberRef v104 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53A98]);
        if (v104) {
          CFNumberGetValue(v104, kCFNumberSInt16Type, &v127);
        }
        CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53A90]);
        if (v105) {
          CFNumberGetValue(v105, kCFNumberSInt16Type, &v131);
        }
        CFNumberRef v106 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53A88]);
        if (v106) {
          CFNumberGetValue(v106, kCFNumberSInt16Type, &v130);
        }
        CFNumberRef v107 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52E90]);
        if (v107)
        {
          CFNumberGetValue(v107, kCFNumberSInt32Type, &rect);
          int x_low = LODWORD(rect.origin.x);
        }
        else
        {
          int x_low = 0;
        }
        return FigImageControl_ManualWhiteBalanceGains(a1, SLOWORD(v127), SLOWORD(v131), SLOWORD(v130), x_low);
      }
      goto LABEL_258;
    }
    if (CFEqual(a2, @"AutoWhiteBalanceLock"))
    {
      CFTypeID v109 = CFGetTypeID(a3);
      if (v109 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue(a3))
        {
          return FigImageControl_LockWhiteBalance();
        }
        else
        {
          return FigImageControl_UnlockWhiteBalance();
        }
      }
      goto LABEL_258;
    }
    if (CFEqual(a2, @"HDRSceneDetectionEnabled"))
    {
      char v110 = CFBooleanGetValue(a3) != 0;
      return FigImageControl_ConfigureHDRSceneDetection(a1, v110);
    }
    if (CFEqual(a2, @"HDRLowLightDetectionDisabled"))
    {
      CFTypeID v111 = CFGetTypeID(a3);
      if (v111 == CFBooleanGetTypeID())
      {
        int v112 = CFBooleanGetValue(a3);
        a3 = 0;
        *(unsigned char *)(v7 + 17322) = v112 != 0;
        return (uint64_t)a3;
      }
      goto LABEL_258;
    }
    if (!CFEqual(a2, @"HDRLowLightGainThresholdsByPortType")) {
      return 4294954512;
    }
    CFTypeID v113 = CFGetTypeID(a3);
    if (v113 != CFDictionaryGetTypeID()) {
      goto LABEL_258;
    }
    size_t Count = CFDictionaryGetCount(a3);
    uint64_t v115 = 1;
    if (*(void *)(v7 + 16)) {
      uint64_t v115 = 2;
    }
    if (*(void *)(v7 + 24)) {
      ++v115;
    }
    if (Count != v115)
    {
LABEL_258:
      return FigSignalErrorAt();
    }
    int64_t v116 = Count;
    double v117 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    double v118 = (const void **)malloc_type_calloc(v116, 8uLL, 0x6004044C4A2DFuLL);
    long double v119 = v118;
    if (v117 && v118)
    {
      CFDictionaryGetKeysAndValues(a3, v117, v118);
      if (v116 < 1)
      {
LABEL_257:
        a3 = 0;
      }
      else
      {
        double v120 = v117;
        int v121 = v119;
        while (1)
        {
          double v122 = *v121;
          CFTypeID v123 = CFGetTypeID(*v120);
          if (v123 != CFStringGetTypeID()) {
            break;
          }
          CFTypeID v124 = CFGetTypeID(v122);
          if (v124 != CFNumberGetTypeID()) {
            break;
          }
          CameraParametersForPortunsigned int Type = af_sbp_getCameraParametersForPortType();
          if (!CameraParametersForPortType) {
            break;
          }
          uint64_t v126 = CameraParametersForPortType;
          CFNumberGetValue((CFNumberRef)v122, kCFNumberFloatType, (void *)(CameraParametersForPortType + 1248));
          *(_DWORD *)(v126 + 1244) = 1007299575;
          ++v121;
          ++v120;
          if (!--v116) {
            goto LABEL_257;
          }
        }
        a3 = (const __CFDictionary *)FigSignalErrorAt();
      }
    }
    else
    {
      a3 = (const __CFDictionary *)FigSignalErrorAt();
      if (!v117)
      {
LABEL_266:
        if (v119) {
          free(v119);
        }
        return (uint64_t)a3;
      }
    }
    free(v117);
    goto LABEL_266;
  }
  if (!a3) {
    return (uint64_t)a3;
  }
  CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"smooth");
  if (!v27) {
    return 0;
  }
  BOOL v28 = CFBooleanGetValue(v27) != 0;
  return FigImageControl_ContinuousAutoFocusWithSmoothFocus(a1, v28);
}

uint64_t FigImageControl_SetContinuousAutoFocusAreaOfInterest(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7612) != 1) {
    return 4294954516;
  }
  if (*(_DWORD *)(DerivedStorage + 7620) != a2
    || *(_DWORD *)(DerivedStorage + 7624) != a3
    || *(_DWORD *)(DerivedStorage + 7628) != a4
    || *(_DWORD *)(DerivedStorage + 7632) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7620) = a2;
    *(_DWORD *)(DerivedStorage + 7624) = a3;
    *(_DWORD *)(DerivedStorage + 762_Block_object_dispose(&STACK[0x4E0], 8) = a4;
    *(_DWORD *)(DerivedStorage + 7632) = a5;
    uint64_t v11 = *(unsigned __int8 *)(DerivedStorage + 625);
    if (!*(unsigned char *)(DerivedStorage + 625))
    {
      *(unsigned char *)(DerivedStorage + 7581) = 1;
      return v11;
    }
    setupFocusWindowMatrix(a1, a2, a3, a4, a5, *(unsigned __int8 *)(DerivedStorage + 560), 5, 3, 1);
  }
  return 0;
}

uint64_t FigImageControl_SetAutoExposureAreaOfInterest(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) == 1)
  {
    if (*(_DWORD *)(DerivedStorage + 7476) != a2
      || *(_DWORD *)(DerivedStorage + 7480) != a3
      || *(_DWORD *)(DerivedStorage + 7484) != a4
      || *(_DWORD *)(DerivedStorage + 7488) != a5)
    {
      *(_DWORD *)(DerivedStorage + 7476) = a2;
      *(_DWORD *)(DerivedStorage + 7480) = a3;
      *(_DWORD *)(DerivedStorage + 7484) = a4;
      *(_DWORD *)(DerivedStorage + 748_Block_object_dispose(&STACK[0x4E0], 8) = a5;
      *(unsigned char *)(DerivedStorage + 7457) = 1;
    }
  }
  else
  {
    FigImageControl_AutoExposure(a1, a2, a3, a4, a5);
  }
  return 0;
}

uint64_t FigImageControl_SetExposureBias(uint64_t a1, int a2, float a3)
{
  CGRect keys[2] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v7 = llroundf(exp2f(a3) * 256.0);
  int v16 = v7;
  *(float *)(DerivedStorage + 7524) = a3;
  if (v7 <= 0)
  {
    int v8 = 1;
  }
  else
  {
    if (v7 < 0x10000) {
      goto LABEL_6;
    }
    int v8 = 0xFFFF;
  }
  int v16 = v8;
LABEL_6:
  if (*(unsigned char *)(DerivedStorage + 513)) {
    BOOL v9 = a2 < 1;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v16);
    CFNumberRef v10 = (const void *)*MEMORY[0x1E4F548F8];
  }
  else
  {
    CFNumberRef v10 = (const void *)*MEMORY[0x1E4F548F8];
    uint64_t v11 = (void *)*MEMORY[0x1E4F52E90];
    keys[0] = *(void **)MEMORY[0x1E4F548F8];
    keys[1] = v11;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v16);
    CFTypeRef cf = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v13 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(values);
    CFRelease(cf);
  }
  uint64_t v14 = captureStreamSetPropertyOnActivityScheduler(a1, v10, v13);
  CFRelease(v13);
  return v14;
}

uint64_t FigImageControl_ContinuousAutoFocus(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a7 | a6) >= 0x100)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a7 <= a6) {
      unsigned int v17 = a6;
    }
    else {
      unsigned int v17 = a7;
    }
    if (a7 >= a6) {
      unsigned int v18 = a6;
    }
    else {
      unsigned int v18 = a7;
    }
    if (*(_DWORD *)(DerivedStorage + 7612) != 1
      || *(_DWORD *)(DerivedStorage + 7620) != a2
      || *(_DWORD *)(DerivedStorage + 7624) != a3
      || *(_DWORD *)(DerivedStorage + 7628) != a4
      || *(_DWORD *)(DerivedStorage + 7632) != a5
      || *(_DWORD *)(DerivedStorage + 7636) != v18
      || *(_DWORD *)(DerivedStorage + 7640) != v17
      || *(unsigned __int8 *)(DerivedStorage + 7583) != a8
      || *(unsigned __int8 *)(DerivedStorage + 7584) != a9)
    {
      if (*(unsigned char *)(DerivedStorage + 521)) {
        BOOL v19 = *(unsigned char *)(DerivedStorage + 624) != 0;
      }
      else {
        BOOL v19 = 0;
      }
      int v21 = *(_DWORD *)(DerivedStorage + 7596);
      if (*(unsigned char *)(DerivedStorage + 521)) {
        BOOL v22 = v21 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      *(_DWORD *)(DerivedStorage + 7612) = 1;
      char v23 = !v22;
      *(_DWORD *)(DerivedStorage + 7620) = a2;
      if (v21 == -1) {
        char v23 = v19;
      }
      *(_DWORD *)(DerivedStorage + 7624) = a3;
      *(_DWORD *)(DerivedStorage + 762_Block_object_dispose(&STACK[0x4E0], 8) = a4;
      *(_DWORD *)(DerivedStorage + 7632) = a5;
      *(_DWORD *)(DerivedStorage + 7636) = v18;
      *(_DWORD *)(DerivedStorage + 7640) = v17;
      if (v18) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v17 == 255;
      }
      char v25 = !v24;
      *(unsigned char *)(DerivedStorage + 7582) = v25;
      *(unsigned char *)(DerivedStorage + 7584) = a9;
      *(unsigned char *)(DerivedStorage + 7583) = a8;
      *(unsigned char *)(DerivedStorage + 7586) = v23;
      BOOL v26 = *(unsigned char *)(DerivedStorage + 621) && *(int *)(DerivedStorage + 656) < 120
         || *(unsigned char *)(DerivedStorage + 622) != 0;
      *(unsigned char *)(DerivedStorage + 7585) = v26;
      *(unsigned char *)(DerivedStorage + 7580) = 0;
      *(_DWORD *)(DerivedStorage + 768_Block_object_dispose(&STACK[0x4E0], 8) = 999;
    }
    return 0;
  }
}

uint64_t FigImageControl_AutoExposure(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 1
    || *(_DWORD *)(DerivedStorage + 7476) != a2
    || *(_DWORD *)(DerivedStorage + 7480) != a3
    || *(_DWORD *)(DerivedStorage + 7484) != a4
    || *(_DWORD *)(DerivedStorage + 7488) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 1;
    *(_DWORD *)(DerivedStorage + 7476) = a2;
    *(_DWORD *)(DerivedStorage + 7480) = a3;
    *(_DWORD *)(DerivedStorage + 7484) = a4;
    *(_DWORD *)(DerivedStorage + 748_Block_object_dispose(&STACK[0x4E0], 8) = a5;
    *(unsigned char *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_VideoModeChange(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = (unsigned char *)(DerivedStorage + 17704);
  int v26 = 0;
  uint64_t v7 = 616;
  if ((a2 & 0xFFFFFFFE) == 2) {
    uint64_t v7 = 612;
  }
  int v8 = *(_DWORD *)(DerivedStorage + v7);
  int v27 = v8;
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x68) != 0)
    {
LABEL_18:
      if (v6[1]) {
        unlockAEnow(a1);
      }
      FigImageControl_RestoreAEValues(a1);
      goto LABEL_21;
    }
    if (((1 << a2) & 6) != 0)
    {
      int v9 = FigCapturePlatformIdentifier();
      FigImageControl_SetExposureStabilityZone(a1, 0, flt_1A5F0D358[v9 < 10]);
      goto LABEL_18;
    }
  }
  int v10 = FigCapturePlatformIdentifier();
  FigImageControl_SetExposureStabilityZone(a1, 0, flt_1A5F0D360[v10 < 10]);
  if (a2 != 4) {
    goto LABEL_18;
  }
  if (*v6)
  {
LABEL_21:
    int v20 = 0;
    uint64_t v19 = 0;
    goto LABEL_22;
  }
  uint64_t v11 = (const void *)*MEMORY[0x1E4F54730];
  *(void *)(v5 + 17672) = [*(id *)(v5 + 8) copyProperty:*MEMORY[0x1E4F54730] error:0];
  CFAllocatorRef v12 = (const void *)*MEMORY[0x1E4F54740];
  *(void *)(v5 + 17680) = [*(id *)(v5 + 8) copyProperty:*MEMORY[0x1E4F54740] error:0];
  CFNumberRef v13 = (const void *)*MEMORY[0x1E4F54718];
  *(void *)(v5 + 1768_Block_object_dispose(&STACK[0x4E0], 8) = [*(id *)(v5 + 8) copyProperty:*MEMORY[0x1E4F54718] error:0];
  BOOL v24 = (const void *)*MEMORY[0x1E4F54720];
  *(void *)(v5 + 17696) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:");
  *(void *)(v5 + 17664) = [*(id *)(v5 + 8) copyProperty:*MEMORY[0x1E4F54AB8] error:0];
  int valuePtr = *(_DWORD *)(v5 + 1532);
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v11, v15))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v15);
  int valuePtr = *(_DWORD *)(v5 + 1536);
  CFNumberRef v16 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v12, v16))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v16);
  int valuePtr = *(_DWORD *)(v5 + 1540);
  CFNumberRef v17 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v13, v17))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v17);
  int valuePtr = *(_DWORD *)(v5 + 1544);
  CFNumberRef v18 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  uint64_t v19 = captureStreamSetPropertyOnActivityScheduler(a1, v24, v18);
  if (v19)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v18);
  int v20 = *(_DWORD *)(v5 + 1528);
  int v26 = v20;
  unsigned char *v6 = 1;
LABEL_22:
  if (v8)
  {
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &v27);
    uint64_t v19 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54700], v21);
    CFRelease(v21);
  }
  if (v20)
  {
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &v26);
    uint64_t v19 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54AB8], v22);
    CFRelease(v22);
  }
  return v19;
}

uint64_t FigImageControl_SetUseFaceLocationForMetering(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 7473) != a2)
  {
    *(unsigned char *)(DerivedStorage + 7473) = a2;
    *(unsigned char *)(DerivedStorage + 7457) = 1;
  }
  return 0;
}

uint64_t FigImageControl_SetExposureStabilityZone(uint64_t a1, int a2, float a3)
{
  CGRect keys[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v7 = llroundf((float)(exp2f(a3) + -1.0) * 1024.0);
  int v8 = v7 >> 2;
  if (v7 > 31) {
    int v9 = 1;
  }
  else {
    int v9 = a2;
  }
  if (!v9) {
    int v8 = 8;
  }
  int v17 = v8;
  int valuePtr = v7;
  if (v8 > v7) {
    int valuePtr = v8;
  }
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (*(unsigned char *)(DerivedStorage + 511))
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v17);
    CFNumberRef v13 = (void *)*MEMORY[0x1E4F54510];
    keys[0] = *(void **)MEMORY[0x1E4F54518];
    keys[1] = v13;
    values[0] = v10;
    values[1] = v12;
    CFDictionaryRef v14 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v15 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54748], v14);
    CFRelease(v14);
    CFRelease(v12);
  }
  else
  {
    uint64_t v15 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54748], v10);
  }
  CFRelease(v10);
  return v15;
}

void FigImageControl_RestoreAEValues(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (unsigned char *)(DerivedStorage + 17704);
  if (*(unsigned char *)(DerivedStorage + 17704))
  {
    uint64_t v4 = DerivedStorage;
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54730], *(const void **)(DerivedStorage + 17672));
    uint64_t v5 = *(const void **)(v4 + 17672);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v4 + 17672) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54740], *(const void **)(v4 + 17680));
    uint64_t v6 = *(const void **)(v4 + 17680);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v4 + 17680) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54718], *(const void **)(v4 + 17688));
    int v7 = *(const void **)(v4 + 17688);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v4 + 1768_Block_object_dispose(&STACK[0x4E0], 8) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54720], *(const void **)(v4 + 17696));
    int v8 = *(const void **)(v4 + 17696);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v4 + 17696) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54AB8], *(const void **)(v4 + 17664));
    int v9 = *(const void **)(v4 + 17664);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v4 + 17664) = 0;
    }
    *uint64_t v3 = 0;
  }
}

uint64_t FigImageControl_Focus_StartNow(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  int v4 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v4) {
    int v4 = *(_DWORD *)(DerivedStorage + 7612);
  }
  if (v4 != 1) {
    return 0;
  }
  if (!*(_DWORD *)(DerivedStorage + 652)) {
    return 0;
  }
  uint64_t v5 = (unsigned char *)(DerivedStorage + 7580);
  if (!*(unsigned char *)(DerivedStorage + 7586) || !*(unsigned char *)(DerivedStorage + 7585)) {
    return 0;
  }
  setupFocusWindowMatrix(a1, *(_DWORD *)(DerivedStorage + 7620), *(_DWORD *)(DerivedStorage + 7624), *(_DWORD *)(DerivedStorage + 7628), *(_DWORD *)(DerivedStorage + 7632), *(unsigned __int8 *)(DerivedStorage + 560), 5, 3, 0);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  getDefaultFocusScanRange(a1, (_DWORD *)&v9 + 1, (int *)&v9, (_DWORD *)&v8 + 1, (int *)&v8);
  setupSearchPositions(a1, SHIDWORD(v9), v9, SHIDWORD(v8), v8, 1, 0, 1.0);
  uint64_t v6 = (void **)MEMORY[0x1E4F54D28];
  if (!*(unsigned char *)(v3 + 561)) {
    uint64_t v6 = (void **)MEMORY[0x1E4F54D20];
  }
  uint64_t result = doFocusNow(a1, 0, *v6, 0);
  *(unsigned char *)(v3 + 7587) = 0;
  *(float32x4_t *)(v3 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v3 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
  *(unsigned char *)(v3 + 7664) = 0;
  *uint64_t v5 = 1;
  *(void *)(v3 + 6232) = 1;
  *(void *)(v3 + 624_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  *(_DWORD *)(v3 + 760_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  return result;
}

uint64_t FigImageControl_ConfigureHDRSceneDetection(uint64_t a1, char a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 9061) = a2;
  *(unsigned char *)(DerivedStorage + 9060) = 0;
  uint64_t v5 = (void *)*MEMORY[0x1E4F545B8];
  values = (void *)*MEMORY[0x1E4F1CFD0];
  keys[0] = v5;
  CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F549A8], v6);
  CFRelease(v6);
  return v7;
}

FigCaptureThermalMonitor *__FigCaptureDeferredPhotoProcessorCopyProcessorForPID_block_invoke()
{
  uint64_t result = objc_alloc_init(FigCaptureThermalMonitor);
  sThermalMonitor = (uint64_t)result;
  return result;
}

void captureSessionServer_handlePrewarm(void *a1)
{
  int64_t int64 = xpc_dictionary_get_int64(a1, (const char *)*MEMORY[0x1E4F20290]);
  int64_t v3 = xpc_dictionary_get_int64(a1, (const char *)*MEMORY[0x1E4F202B8]);
  FigXPCMessageCopyCFString();
  FigXPCMessageCopyCFString();
  int v4 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8])
  {
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (*v4 == 1)
    {
      CFDictionaryRef v6 = CStringPtrAndBufferToFree;
      if (CStringPtrAndBufferToFree)
      {
        size_t v7 = strlen(CStringPtrAndBufferToFree);
        strncpy(__dst, &v6[v7 - 8], 8uLL);
      }
      kdebug_trace();
    }
    free(0);
  }
  FigCaptureSessionPrewarm(0, int64, v3, 0);
}

id captureSession_createVideoDataSinkPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, void *a8, int a9, int a10, void *a11, uint64_t a12, char a13, char a14, char a15, char a16)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef v21 = objc_alloc_init(FigCaptureVideoDataSinkPipelineConfiguration);
  [(FigCaptureVideoDataSinkPipelineConfiguration *)(uint64_t)v21 setSourceVideoTransform:a4];
  -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v21, a6);
  -[FigCaptureVideoDataSinkPipelineConfiguration setVisOutputDimensions:]((uint64_t)v21, a5);
  -[FigCaptureCameraSourcePipelineConfiguration setDepthType:]((uint64_t)v21, a9);
  -[FigCaptureVideoDataSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v21, a10);
  -[FigCaptureVideoDataSinkPipelineConfiguration setFaceTrackingEnabled:]((uint64_t)v21, a13);
  -[FigCaptureVideoDataSinkPipelineConfiguration setOfflineVISMotionDataEnabled:]((uint64_t)v21, a14);
  PortTypesWithGDCInVIS = (char *)cs_getPortTypesWithGDCInVIS(a11);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v21, PortTypesWithGDCInVIS);
  char v23 = (char *)[a7 sourceConfiguration];
  if (!v23) {
    char v23 = (char *)[a8 sourceConfiguration];
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setStillImageConnectionConfiguration:](v21, v23);
  int v24 = [a7 underlyingDeviceType];
  if (!v24) {
    int v24 = [a8 underlyingDeviceType];
  }
  -[FigCapturePreviewSinkPipelineConfiguration setSourceColorSpaceProperties:]((uint64_t)v21, v24);
  -[FigCaptureDepthDataPipelineConfiguration setCameraInfoByPortType:](v21, (char *)a7);
  long long v25 = *(_OWORD *)(DerivedStorage + 36);
  v53[0] = *(_OWORD *)(DerivedStorage + 20);
  v53[1] = v25;
  int v26 = objc_msgSend((id)objc_msgSend(a7, "sourceConfiguration", -[FigCaptureVideoDataSinkPipelineConfiguration setClientAuditToken:]((uint64_t)v21, (uint64_t)v53).n128_f64[0]), "colorSpace");
  if (cs_shouldConvertToBT2020((uint64_t)a11, v26)) {
    char v27 = *(unsigned char *)(DerivedStorage + 696) == 0;
  }
  else {
    char v27 = 0;
  }
  -[FigCaptureMetadataSinkPipelineConfiguration setBoxedMetadataEnabled:]((uint64_t)v21, v27);
  int v28 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)a11);
  -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:]((uint64_t)v21, v28);
  -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:]((uint64_t)v21, +[FigCaptureCameraParameters videoDataMaxLossyCompressionLevel](FigCaptureCameraParameters, "videoDataMaxLossyCompressionLevel"));
  -[FigCaptureVideoDataSinkPipelineConfiguration setForcePixelTransfer:]((uint64_t)v21, a16);
  shouldEnablePreviewStabilizatioint n = cs_shouldEnablePreviewStabilization(a1, a7);
  -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v21, shouldEnablePreviewStabilization);
  if (a7) {
    char v30 = a15;
  }
  else {
    char v30 = 0;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v21, v30);
  double v31 = (void *)[a7 sourceConfiguration];
  if ([v31 cinematicFramingEnabled])
  {
    int v32 = 2;
  }
  else if ([v31 manualCinematicFramingEnabled])
  {
    int v32 = 2;
  }
  else
  {
    int v32 = 1;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageSashimiRawRetainedBufferCount:]((uint64_t)v21, v32);
  if (!a12)
  {
    shouldEnablePocketDetectioint n = cs_shouldEnablePocketDetection(a1, a7);
    -[FigCaptureVideoDataSinkPipelineConfiguration setPocketDetectionEnabled:]((uint64_t)v21, shouldEnablePocketDetection);
  }
  -[FigCaptureVideoDataSinkPipelineConfiguration setClientApplicationID:](v21, *(char **)(DerivedStorage + 88));
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v21, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a7, "sinkConfiguration"), "sinkID"), "isEqualToString:", 0x1EFA67DE0));
  char HasOverCapture = -[FigCaptureMovieFileSinkPipelineConfiguration captureDeviceHasOverCaptureEnabled]((BOOL)v21);
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v21, HasOverCapture);
  if (-[FigCaptureVideoDataSinkPipelineConfiguration deskCamEnabled]((BOOL)v21))
  {
    -[FigCaptureVideoDataSinkPipelineConfiguration setOverheadCameraMode:]((uint64_t)v21, 2);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v21, 1);
  }
  uint64_t v35 = objc_msgSend(*(id *)(DerivedStorage + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(a11, "sourceID"));
  if (a7)
  {
    char v36 = v35 != 0;
    v54[0] = a7;
    uint64_t v37 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v54 count:1];
    int v38 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)a11);
    char shouldEnableVideoSTF = cs_shouldEnableVideoSTF(v37, v36, v38);
    -[FigCaptureVideoDataSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)v21, shouldEnableVideoSTF);
  }
  uint64_t v40 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", objc_msgSend(a11, "sourceID"));
  if (v40)
  {
    uint64_t v41 = *(void *)(v40 + 24);
    int v42 = *(_DWORD *)(v40 + 32);
  }
  else
  {
    uint64_t v41 = 0;
    int v42 = 0;
  }
  int v43 = -[FigCaptureVideoDataSinkPipelineConfiguration sourceDeviceType]((uint64_t)v21);
  uint64_t v44 = FigCaptureBuildSinkPipelineName(v41, v42, v43, @"Video Data Sink Pipeline");
  int v45 = [FigCaptureVideoDataSinkPipeline alloc];
  CGFloat v46 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a11);
  id v47 = -[FigCaptureVideoDataSinkPipeline initWithConfiguration:sourceVideoOutput:captureDevice:graph:name:delegate:](v45, (uint64_t)v21, a2, v46, *(void **)(DerivedStorage + 632), v44, *(void *)(DerivedStorage + 712));
  if (!v47) {
    FigDebugAssert3();
  }
  return v47;
}

uint64_t FigCaptureBuildSinkPipelineName(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (a2 != a3 && (int v6 = a3 - 2, (a3 - 2) <= 0x12) && ((0x79223u >> v6) & 1) != 0) {
    size_t v7 = (__CFString *)[NSString stringWithFormat:@" (%@)", off_1E5C2B0B8[v6]];
  }
  else {
    size_t v7 = &stru_1EFA403E0;
  }
  return [NSString stringWithFormat:@"%@%@ %@", a1, v7, a4];
}

uint64_t cs_shouldEnablePocketDetection(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!cs_isPocketDetectionNeeded(*(void *)(DerivedStorage + 88))) {
    return 0;
  }
  int v4 = objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat");
  return [v4 isPocketDetectionSupported];
}

uint64_t cs_shouldConvertToBT2020(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](result) format];
    uint64_t result = FigCapturePixelFormatIsTenBit(v4);
    if (result)
    {
      uint64_t result = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline videoOutputColorInfo](v3), "objectForKeyedSubscript:", *MEMORY[0x1E4F24A90]), "isEqualToString:", *MEMORY[0x1E4F24AC0]);
      if (result)
      {
        LODWORD(result) = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline videoOutputColorInfo](v3), "objectForKeyedSubscript:", *MEMORY[0x1E4F24BC8]), "isEqualToString:", *MEMORY[0x1E4F24BD8]);
        if (a2 == 2) {
          return result;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

void *cs_getPortTypesWithGDCInVIS(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](a1);
  uint64_t v3 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnVideoCaptureOutputsEnabled](a1);
  int v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([(id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a1) stereoVideoCaptureEnabled])
  {
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a1), "activePortTypes"));
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v5 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v2);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          if (([v3 containsObject:v9] & 1) == 0) {
            [v4 addObject:v9];
          }
        }
        uint64_t v6 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
  }
  return v4;
}

void FigCaptureSessionPrewarm(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (initializeGlobals_initializeGlobalsOnceToken != -1) {
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_916);
  }
  if (([a1 isEqualToString:0x1EFA44100] & 1) != 0
    || ([a1 isEqualToString:0x1EFA55980] & 1) != 0)
  {
    int v9 = 1;
    IsSecureCaptureExtensioint n = 1;
  }
  else
  {
    IsSecureCaptureExtensioint n = cs_bundleIdentifierIsSecureCaptureExtension((uint64_t)a1);
    int v9 = 0;
  }
  int v10 = FigCaptureClientApplicationIDIsVisualIntelligenceCamera(a1);
  if ((cs_isPocketDetectionNeeded((uint64_t)a1) & 1) == 0 && a2 && a1 && a4)
  {
    id v11 = a1;
    if (cs_bundleIdentifierIsSecureCaptureExtension((uint64_t)a1)
      && (id v11 = cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier((uint64_t)a1)) == 0)
    {
      uint64_t v66 = v4;
      LODWORD(v65) = 0;
      FigDebugAssert3();
    }
    else if (([a4 isEqualToString:0x1EFA579C0] & 1) != 0 {
           || [a4 isEqualToString:0x1EFA57A00])
    }
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
      long long v12 = (const void *)qword_1E96B6F48;
      qword_1E96B6F48 = (uint64_t)v11;
      qword_1E96B6F50 = a2;
      CFRetain(v11);
      if (v12) {
        CFRelease(v12);
      }
      cs_cancelPocketDetectionTimeoutTimer();
      long long v13 = qword_1E96B6F58;
      if (!qword_1E96B6F58)
      {
        long long v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
        long long v13 = dispatch_queue_create("com.apple.coremedia.capturesession.timeOutForPocketDetectionNeeded", v14);
        qword_1E96B6F58 = (uint64_t)v13;
      }
      uint64_t v15 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v13);
      dispatch_time_t v16 = dispatch_time(0, 0x28FA6B000);
      dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0x4190AB00uLL);
      *(void *)&long long handler = MEMORY[0x1E4F143A8];
      *((void *)&handler + 1) = 3221225472;
      CFTypeID v84 = __cs_setPocketDetectionNeeded_block_invoke;
      CFNumberRef v85 = &unk_1E5C24F10;
      CFNumberRef v86 = v15;
      id v87 = v11;
      dispatch_source_set_event_handler(v15, &handler);
      qword_1E96B6F60 = (uint64_t)v15;
      dispatch_activate(v15);
      os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
    }
  }
  int v74 = 0;
  *(void *)&long long handler = 4;
  int v17 = sysctlbyname("kern.memorystatus_level", &v74, (size_t *)&handler, 0, 0);
  int v18 = 0;
  int v19 = v74;
  if (v17) {
    int v19 = 0;
  }
  int v68 = v19;
  if (v9)
  {
    int v20 = objc_alloc_init(FigCaptureThermalMonitor);
    int v18 = [(FigCaptureThermalMonitor *)v20 thermalLevel];

    if (cs_prewarmSystemOverride_onceToken != -1) {
      dispatch_once(&cs_prewarmSystemOverride_onceToken, &__block_literal_global_956);
    }
    if (!dispatch_group_wait((dispatch_group_t)cs_prewarmSystemOverride_overrideGroup, 0)) {
      dispatch_group_async((dispatch_group_t)cs_prewarmSystemOverride_overrideGroup, (dispatch_queue_t)cs_prewarmSystemOverride_overrideQueue, &__block_literal_global_959);
    }
    os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
    if ((void)xmmword_1EB4C5970)
    {
      mach_absolute_time();
      if ((float)((float)FigHostTimeToNanoseconds() / 1000000000.0) > 3.0)
      {
        os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
        dword_1EB4C5944 = 0;
        byte_1EB4C5948 = 0;
        xmmword_1EB4C5950 = 0u;
        *(_OWORD *)&qword_1EB4C5960 = 0u;
        xmmword_1EB4C5970 = 0u;
        qword_1EB4C5988 = 0;
        *(uint64_t *)((char *)&qword_1EB4C5988 + 5) = 0;

        qword_1EB4C5980 = 0;
      }
    }
    if (dword_1EB4C5944 != 2)
    {
      if (!dword_1EB4C5944)
      {
        dword_1EB4C5944 = 2;
        *(void *)&xmmword_1EB4C5950 = a2;
        *((void *)&xmmword_1EB4C5950 + 1) = a3;

        qword_1EB4C5980 = a4;
        LODWORD(qword_1EB4C598_Block_object_dispose(&STACK[0x4E0], 8) = v68;
        HIDWORD(qword_1EB4C598_Block_object_dispose(&STACK[0x4E0], 8) = v18;
        byte_1EB4C5994 = objc_msgSend(+[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor](FigCaptureDeviceLockStateMonitor, "sharedDeviceLockStateMonitor"), "deviceIsLocked");
        if (*MEMORY[0x1E4F1EBA8])
        {
          CFNumberRef v21 = fig_log_handle();
          if (os_signpost_enabled(v21))
          {
            LODWORD(handler) = 134217984;
            *(void *)((char *)&handler + 4) = *((void *)&xmmword_1EB4C5950 + 1);
            _os_signpost_emit_with_name_impl(&dword_1A5887000, v21, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CameraAppLaunchWithOrigin", "%{signpost.description:begin_time}llu", (uint8_t *)&handler, 0xCu);
          }
        }
      }
      goto LABEL_46;
    }
    CFNumberRef v22 = (void *)qword_1EB4C5980;
    if (qword_1EB4C5980)
    {
      if ([(id)qword_1EB4C5980 isEqualToString:0x1EFA57940]) {
        LOBYTE(v23) = 0;
      }
      else {
        int v23 = [v22 isEqualToString:0x1EFA57960] ^ 1;
      }
      if (a4 && (v23 & 1) == 0)
      {
LABEL_43:
        if ((objc_msgSend(a4, "isEqualToString:", 0x1EFA57940, v65, v66) & 1) == 0
          && ([a4 isEqualToString:0x1EFA57960] & 1) == 0)
        {

          qword_1EB4C5980 = a4;
        }
      }
    }
    else if (a4)
    {
      goto LABEL_43;
    }
LABEL_46:
    os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
    os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
    if (([a4 isEqualToString:@"LockScreen"] & 1) != 0
      || ([a4 isEqualToString:0x1EFA579E0] & 1) != 0
      || [a4 isEqualToString:0x1EFA57A00])
    {
      mach_absolute_time();
      uint64_t v24 = FigHostTimeToNanoseconds();
      int v25 = byte_1E96B767C;
      if (byte_1E96B767C && dword_1E96B768C && !byte_1E96B7690 && (float)((float)v24 / 1000000000.0) > 2.0)
      {
        captureSession_reportCancelledLockScreenCameraLaunch();
        int v25 = byte_1E96B767C;
      }
      if (!v25)
      {
        byte_1E96B767C = 1;
        qword_1E96B7680 = mach_absolute_time();
        LOBYTE(word_1E96B768_Block_object_dispose(&STACK[0x4E0], 8) = 1;
      }
    }
    os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
  }
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (a1) {
    int v26 = (const void *)objc_msgSend((id)objc_msgSend((id)qword_1EB4C59A0, "objectForKeyedSubscript:", a1), "referencedObject");
  }
  else {
    int v26 = 0;
  }
  int v27 = dword_1EB4C59C4;
  if (dword_1EB4C59C4 <= 0)
  {
    int v27 = 23;
    dword_1EB4C59C4 = 23;
  }
  BOOL v28 = v68 >= v27 || FigCFEqual() != 0;
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  v69[0] = MEMORY[0x1E4F143A8];
  v69[1] = 3221225472;
  v69[2] = __FigCaptureSessionPrewarm_block_invoke;
  v69[3] = &__block_descriptor_42_e8_v12__0i8l;
  BOOL v70 = v28;
  char v71 = IsSecureCaptureExtension;
  v69[4] = a1;
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (qword_1EB4C59E0) {
    CFBooleanRef v29 = (void *)CFRetain((CFTypeRef)qword_1EB4C59E0);
  }
  else {
    CFBooleanRef v29 = 0;
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  if (!v10
    || ([v29 isEqualToString:0x1EFA44100] & 1) == 0
    && ![a1 isEqualToString:0x1EFA55980])
  {
    double v31 = v69;
    if (!v29) {
      goto LABEL_75;
    }
LABEL_74:
    CFRelease(v29);
    goto LABEL_75;
  }
  if (dword_1EB4C5110)
  {
    unsigned int v73 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  byte_1EB4C59E8 = 1;
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  FigCaptureSessionCancelPrewarm(v29);
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  captureSession_primeMemoryPoolPrewarmTimer();
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  BOOL v28 = 0;
  double v31 = 0;
  if (v29) {
    goto LABEL_74;
  }
LABEL_75:
  if (v28 && captureSession_shouldPrewarmMemoryPool())
  {
    byte_1EB4C59C8 = 1;
    captureSession_prewarmMemoryPool(IsSecureCaptureExtension, a1);
    double v31 = 0;
  }
  objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor", v65, v66), "prewarmDefaultVideoDeviceForPID:completionHandler:", 0, v31);
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  int v32 = (const void *)qword_1EB4C59E0;
  qword_1EB4C59E0 = (uint64_t)a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v32) {
    CFRelease(v32);
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  if (v26)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v34 = DerivedStorage;
      uint64_t v35 = (os_unfair_lock_s *)(DerivedStorage + 360);
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
      double v36 = *(double *)(v34 + 552);
      if (v36 <= 0.0)
      {
        BOOL v38 = 1;
      }
      else
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        BOOL v38 = v36 > v37;
      }
      if (*(unsigned char *)(v34 + 372) && v38 && *(unsigned char *)(v34 + 376))
      {
        if (*(double *)(v34 + 552) > 0.0) {
          *(void *)(v34 + 552) = 0;
        }
        if (dword_1EB4C5110)
        {
          unsigned int v73 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          int v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v44 = v73;
          if (os_log_type_enabled(v43, type)) {
            unsigned int v45 = v44;
          }
          else {
            unsigned int v45 = v44 & 0xFFFFFFFE;
          }
          if (v45)
          {
            CGFloat v46 = *(void **)(v34 + 104);
            if (*(unsigned char *)(v34 + 373)) {
              id v47 = "Session already prewarmed";
            }
            else {
              id v47 = "Updating running condition";
            }
            int v74 = 136315906;
            CFNumberRef v75 = "captureSession_prewarm";
            __int16 v76 = 2114;
            CFNumberRef v77 = v46;
            __int16 v78 = 2112;
            *(void *)CFNumberRef v79 = a4;
            *(_WORD *)&v79[8] = 2080;
            CFNumberRef v80 = v47;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(unsigned char *)(v34 + 373))
        {
          *(unsigned char *)(v34 + 373) = 1;

          *(void *)(v34 + 392) = [a4 copy];
          captureSession_updateRunningCondition(v26, 0, 0);
          *(unsigned char *)(v34 + 540) = objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "isOnHomeScreen");
        }
        float v54 = *(float *)&dword_1EB4C599C;
        if (*(float *)&dword_1EB4C599C <= 0.0)
        {
          dword_1EB4C599C = 0x40000000;
          float v54 = 2.0;
        }
        if (*(void *)(v34 + 560))
        {
          if (dword_1EB4C5110)
          {
            unsigned int v73 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFTypeID v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v56 = v73;
            if (os_log_type_enabled(v55, type)) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = v56 & 0xFFFFFFFE;
            }
            if (v57)
            {
              CFTypeID v58 = *(void **)(v34 + 104);
              int v74 = 136315650;
              CFNumberRef v75 = "captureSession_prewarm";
              __int16 v76 = 2114;
              CFNumberRef v77 = v58;
              __int16 v78 = 2048;
              *(double *)CFNumberRef v79 = v54;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          captureSession_cancelPrewarmingTimeoutTimer();
        }
        else if (dword_1EB4C5110)
        {
          unsigned int v73 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFNumberRef v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v60 = v73;
          if (os_log_type_enabled(v59, type)) {
            unsigned int v61 = v60;
          }
          else {
            unsigned int v61 = v60 & 0xFFFFFFFE;
          }
          if (v61)
          {
            int v62 = *(void **)(v34 + 104);
            int v74 = 136315650;
            CFNumberRef v75 = "captureSession_prewarm";
            __int16 v76 = 2114;
            CFNumberRef v77 = v62;
            __int16 v78 = 2048;
            *(double *)CFNumberRef v79 = v54;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFTypeID v63 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v34 + 136));
        dispatch_time_t v64 = dispatch_time(0, (uint64_t)(float)(v54 * 1000000000.0));
        dispatch_source_set_timer(v63, v64, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(v54 * 0.1 * 1000000000.0));
        *(void *)&long long handler = MEMORY[0x1E4F143A8];
        *((void *)&handler + 1) = 3221225472;
        CFTypeID v84 = __captureSession_prewarm_block_invoke;
        CFNumberRef v85 = &unk_1E5C24F10;
        CFNumberRef v86 = v63;
        id v87 = (id)v26;
        dispatch_source_set_event_handler(v63, &handler);
        *(void *)(v34 + 560) = v63;
        dispatch_activate(v63);
      }
      else if (dword_1EB4C5110)
      {
        unsigned int v73 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFDictionaryRef v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v49 = v73;
        if (os_log_type_enabled(v48, type)) {
          unsigned int v50 = v49;
        }
        else {
          unsigned int v50 = v49 & 0xFFFFFFFE;
        }
        if (v50)
        {
          CFNumberRef v51 = *(void **)(v34 + 104);
          int v52 = *(unsigned __int8 *)(v34 + 372);
          int v53 = *(unsigned __int8 *)(v34 + 376);
          int v74 = 136316418;
          CFNumberRef v75 = "captureSession_prewarm";
          __int16 v76 = 2114;
          CFNumberRef v77 = v51;
          __int16 v78 = 1024;
          *(_DWORD *)CFNumberRef v79 = v52;
          *(_WORD *)&v79[4] = 1024;
          *(_DWORD *)&v79[6] = v38;
          LOWORD(v80) = 1024;
          *(_DWORD *)((char *)&v80 + 2) = v53;
          HIWORD(v80) = 2112;
          CFBooleanRef v81 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      os_unfair_lock_unlock(v35);
    }
  }
  else if (dword_1EB4C5110)
  {
    unsigned int v73 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = v73;
    if (os_log_type_enabled(v39, type)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      int v42 = "only";
      int v74 = 136316418;
      CFNumberRef v75 = "FigCaptureSessionPrewarm";
      __int16 v76 = 2112;
      CFNumberRef v77 = a1;
      if (v28) {
        int v42 = "+ memory pool";
      }
      __int16 v78 = 2112;
      *(void *)CFNumberRef v79 = a4;
      *(_WORD *)&v79[8] = 2080;
      CFNumberRef v80 = v42;
      LOWORD(v81) = 1024;
      *(_DWORD *)((char *)&v81 + 2) = v68;
      HIWORD(v81) = 1024;
      int v82 = v18;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t cs_isPocketDetectionNeeded(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1
    && (!cs_bundleIdentifierIsSecureCaptureExtension(a1)
     || (uint64_t v1 = (uint64_t)cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier(v1)) != 0))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
    if (qword_1E96B6F48) {
      uint64_t v1 = CFEqual((CFTypeRef)v1, (CFTypeRef)qword_1E96B6F48) != 0;
    }
    else {
      uint64_t v1 = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
  }
  else
  {
    FigDebugAssert3();
  }
  return v1;
}

uint64_t cs_bundleIdentifierIsSecureCaptureExtension(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  os_unfair_lock_assert_not_owner(&sFigCaptureSessionPrewarming);
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if ([(id)qword_1EB4C59A8 objectForKey:a1])
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend((id)qword_1EB4C59A8, "objectForKeyedSubscript:", a1), "BOOLValue");
  }
  else
  {
    if (!qword_1EB4C59A8) {
      qword_1EB4C59A8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    uint64_t v6 = 0;
    uint64_t v3 = (void *)[MEMORY[0x1E4F223F8] bundleRecordWithBundleIdentifier:a1 allowPlaceholder:0 error:&v6];
    objc_opt_class();
    uint64_t v2 = 0;
    if (objc_opt_isKindOfClass()) {
      uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "extensionPointRecord"), "identifier"), "isEqualToString:", 0x1EFA55D60);
    }
    uint64_t v4 = [NSNumber numberWithBool:v2];
    [(id)qword_1EB4C59A8 setObject:v4 forKeyedSubscript:a1];
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  return v2;
}

BOOL captureSession_shouldPrewarmMemoryPool()
{
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  float v0 = *(float *)&dword_1EB4C59C0;
  if (*(float *)&dword_1EB4C59C0 <= 0.0)
  {
    dword_1EB4C59C0 = 1077936128;
    float v0 = 3.0;
  }
  BOOL v2 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_1EB4C59D0 >= v0 && byte_1EB4C59C8 == 0;
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  return v2;
}

void captureSession_prewarmMemoryPool(uint64_t a1, void *a2)
{
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (byte_1EB4C59C8)
  {

    getpid();
    qword_1EB4C59D8 = FigOSTransactionCreate();
    qword_1EB4C59D0 = CFAbsoluteTimeGetCurrent();
    cs_initMemoryPoolSize(a1, a2);
    captureSession_primeMemoryPoolPrewarmTimer();
  }
  else if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
}

void *als_updateAmbientLightValue(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v4 = [result referencedObject];
        uint64_t result = (void *)IOHIDEventGetType();
        if (result == 12)
        {
          if (v4)
          {
            uint64_t result = (void *)IOHIDEventGetIntegerValue();
            *(_DWORD *)(v4 + 24) = result;
          }
        }
      }
    }
  }
  return result;
}

__CFString *BWStringFromPixelBuffer(__CVBuffer *a1)
{
  if (!a1) {
    return @"<CVPixelBuffer NULL>";
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  extraRowsOnBottouint64_t m = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if (extraColumnsOnLeft + Width + extraColumnsOnRight == Width
    && extraRowsOnTop + Height + extraRowsOnBottom == Height)
  {
    uint64_t v6 = &stru_1EFA403E0;
  }
  else
  {
    uint64_t v6 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @" (%lux%lu)", extraColumnsOnLeft + Width + extraColumnsOnRight, extraRowsOnTop + Height + extraRowsOnBottom);
  }
  if (!FigCapturePixelFormatIsVersatileRaw(PixelFormatType)) {
    return (__CFString *)[NSString stringWithFormat:@"<CVPixelBuffer %p> %lux%lu%@, '%@'", a1, Width, Height, v6, BWStringFromCVPixelFormatType(PixelFormatType), v12];
  }
  unsigned int v8 = objc_msgSend((id)(id)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24E08], 0), "intValue");
  signed int v9 = FigCaptureVersatileRawPatternForVersatileBayerPattern(v8);
  int v10 = NSString;
  id v11 = BWStringFromCVPixelFormatType(PixelFormatType);
  return (__CFString *)[v10 stringWithFormat:@"<CVPixelBuffer %p> %lux%lu%@, versatile RAW format '%@', pattern '%@'", a1, Width, Height, v6, v11, BWStringFromCVPixelFormatType(v9)];
}

void __FigCaptureSessionServerStart_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = mach_absolute_time();
  uint64_t v4 = mach_continuous_time();
  FigCaptureSessionPrewarm(a2, v3, v4, @"RBSProcessMonitor");
}

uint64_t cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(void *a1, void *a2, uint64_t a3)
{
  if ([a2 backgroundBlurEnabled] & 1) != 0 || (objc_msgSend(a2, "studioLightingEnabled")) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = [a2 backgroundReplacementEnabled] ^ 1;
  }
  if (([a2 cinematicFramingEnabled] & 1) == 0
    && ![a2 manualCinematicFramingEnabled])
  {
    uint64_t v6 = 0;
  }
  [a1 setCinematicFramingWarpingRequired:v6];
  uint64_t result = [a1 cinematicFramingWarpingRequired];
  if (result)
  {
    unsigned int v8 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a3), "highResStillImageDimensions"), "firstObject");
    if (v8) {
      uint64_t v9 = [v8 dimensions];
    }
    else {
      uint64_t v9 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a3) cinematicFramingOutputDimensions];
    }
    return [a1 setCinematicFramingWarpingOutputDimensions:v9];
  }
  return result;
}

void __captureSession_performBlockOnWorkerQueue_block_invoke(uint64_t a1)
{
  BOOL v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

void __captureSession_updateRunningCondition_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (*(unsigned char *)DerivedStorage) {
    return;
  }
  uint64_t v4 = (os_unfair_lock_s *)(DerivedStorage + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  int v5 = *(_DWORD *)(DerivedStorage + 408);
  if (*(unsigned char *)(DerivedStorage + 364) && (v5 != 3 ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6))
  {
    *(void *)(DerivedStorage + 424) = 0;
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(DerivedStorage + 368);
  int v17 = *(unsigned __int8 *)(DerivedStorage + 373);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  if (!dword_1EB4C5110)
  {
    if (v7) {
      goto LABEL_18;
    }
LABEL_15:
    if (v2)
    {
      int v10 = (const void *)cs_notificationPayloadWithErrorStatus(v8);
      captureSession_postNotificationWithPayload(v1, @"DidStopRunning", v10);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v4 = (os_unfair_lock_s *)(DerivedStorage + 360);
  if ((v7 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  captureSession_transitionToSessionStatus(v1, 1, 0);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (dword_1EB4C5110)
  {
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 360));
  if (*(double *)(v11 + 416) == 0.0) {
    *(CFAbsoluteTime *)(v11 + 416) = CFAbsoluteTimeGetCurrent();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 360));
  if (!*(void *)(v11 + 784)) {
    *(void *)(v11 + 784) = FigOSTransactionCreate();
  }
  captureSession_stopObservingInvalidAudioRecordingState();
  unsigned int started = captureSession_commitInflightConfiguration((uint64_t)v1);
  if (started || (unsigned int started = captureSession_startGraph(v1)) != 0)
  {
    if (started == -12785 || started == -12681 || started == -12689)
    {
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v17)
      {
        unsigned int started = -16407;
LABEL_35:
        dispatch_time_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        os_unfair_lock_lock(v4);
        *(unsigned char *)(DerivedStorage + 373) = 0;
        *(unsigned char *)(DerivedStorage + 540) = 0;
        captureSession_cancelPrewarmingTimeoutTimer();
        *(unsigned char *)(DerivedStorage + 364) = 0;
        captureSession_updateRunningCondition(v1, 0, 0);
        os_unfair_lock_unlock(v4);
LABEL_38:
        captureSession_transitionToSessionStatus(v1, 0, started);
        return;
      }
    }
    else
    {
      if (v17) {
        goto LABEL_35;
      }
      if (started != -16407)
      {
        captureSession_resetSessionRunningStateOnFatalError((uint64_t)v1, started);
        goto LABEL_38;
      }
    }
    FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
    os_unfair_lock_lock(v4);
    *(unsigned char *)(DerivedStorage + 364) = 0;
    os_unfair_lock_unlock(v4);
    unsigned int started = -16407;
    goto LABEL_38;
  }
}

void captureSession_makeCommittedConfigurationLive(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v3 = *(void **)(DerivedStorage + 456);
  uint64_t v4 = *(void **)(DerivedStorage + 464);
  if (v3 == v4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v4 = 0;
    BOOL v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    id v5 = v3;
    *(void *)(DerivedStorage + 464) = v5;
    uint64_t v6 = [v5 configurationID];
    BOOL v7 = *(_DWORD *)(DerivedStorage + 408) == 2;
    uint64_t v8 = cs_configurationContainsVideoSource(*(void **)(DerivedStorage + 464));
    uint64_t v9 = cs_configurationContainsStillImageSinkConfiguration(*(void **)(DerivedStorage + 464));
    uint64_t v10 = cs_configurationContainsMovieFileSinkConfiguration(*(void **)(DerivedStorage + 464));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));

  if (v6)
  {
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithLongLong:", v6), @"ConfigurationID", 0, @"ErrorStatus", 0);
    uint64_t v12 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v11];
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v7), 0x1EFA56960);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v8), 0x1EFA56900);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v9), 0x1EFA56920);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v10), 0x1EFA56940);
    captureSession_postNotificationWithPayload(a1, @"ConfigurationDidBecomeLive", v12);
  }
  long long v13 = *(void **)(DerivedStorage + 496);
  if (v13)
  {
    *(void *)(DerivedStorage + 496) = 0;
    captureSession_postNotificationWithPayload(a1, @"IrisPreparationComplete", v13);
  }
  captureSession_transitionToSessionStatus(a1, 2, 0);
}

void captureSession_transitionToSessionStatus(const void *a1, int a2, unsigned int a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v117 = [*(id *)(DerivedStorage + 120) clientType];
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  int v6 = *(_DWORD *)(DerivedStorage + 408);
  *(_DWORD *)(DerivedStorage + 40_Block_object_dispose(&STACK[0x4E0], 8) = a2;
  int v129 = *(unsigned __int8 *)(DerivedStorage + 374);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  if (dword_1EB4C5110)
  {
    v157[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    if (a2 == 2)
    {
      if (([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100] & 1) != 0
        || [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
      {
        os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
        qword_1EB4C5968 = mach_absolute_time();
        os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
      }
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
      double v8 = 0.0;
      if (*(double *)(DerivedStorage + 416) > 0.0)
      {
        double v8 = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 416);
        *(void *)(DerivedStorage + 416) = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
      if (v8 > 0.0 && dword_1EB4C5110)
      {
        v157[0] = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      int v160 = __captureSession_setIsUsingCamera_block_invoke;
      CFDictionaryRef v161 = &__block_descriptor_33_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
      LOBYTE(v162) = v129;
      captureSession_performBlockWithAVCMSessionForIsUsingCamera(a1, (uint64_t)buf);
    }
    int v10 = 0;
  }
  else
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    int v160 = __captureSession_setIsUsingCamera_block_invoke;
    CFDictionaryRef v161 = &__block_descriptor_33_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
    LOBYTE(v162) = 0;
    captureSession_performBlockWithAVCMSessionForIsUsingCamera(a1, (uint64_t)buf);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));

    *(void *)(DerivedStorage + 392) = 0;
    *(void *)(DerivedStorage + 416) = 0;
    *(unsigned char *)(DerivedStorage + 381) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
    int v10 = 1;
  }
  if (v6 != a2)
  {
    if ([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100]) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980];
    }
    uint64_t v12 = objc_msgSend(*(id *)(DerivedStorage + 88), "isEqualToString:", 0x1EFA55880, v104, v108);
    if (v6)
    {
      if (!v10) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v15 = +[FigCaptureMemoryReporter sharedInstance];
      dispatch_time_t v16 = +[BWMemoryPool sharedMemoryPool];
      int v17 = v15;
      int v6 = 0;
      [(FigCaptureMemoryReporter *)v17 incrementActiveClientCount:v11 clientIsCameraMessagesApp:v12 withMemoryPool:v16];
      if (!v10)
      {
LABEL_23:
        if (a2 == 2)
        {
          if (v6 != 1) {
            return;
          }
          int v18 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:cs_notificationPayloadWithErrorStatus(a3)];
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsVideoSource(*(void **)(DerivedStorage + 464))), 0x1EFA56900);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v129 != 0), 0x1EFA56980);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsStillImageSinkConfiguration(*(void **)(DerivedStorage + 464))), 0x1EFA56920);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsMovieFileSinkConfiguration(*(void **)(DerivedStorage + 464))), 0x1EFA56940);
          uint64_t v19 = *(void *)(DerivedStorage + 392);
          if (v19) {
            [v18 setObject:v19 forKeyedSubscript:@"PrewarmReason"];
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", DerivedStorage + 20, 32), @"ClientAuditToken");
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
          captureSession_postNotificationWithPayload(a1, @"DidStartRunning", v18);
          if (v117 == 5)
          {
            os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
            uint64_t v20 = CMBaseObjectGetDerivedStorage();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v20 + 360));
            if (!*(void *)(v20 + 568))
            {
              CFNumberRef v21 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v20 + 136));
              dispatch_time_t v22 = dispatch_time(0, 5000000000);
              dispatch_source_set_timer(v21, v22, 0x12A05F200uLL, 0x6F05B59D3B20000uLL);
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 3221225472;
              int v160 = __captureSession_startAVConferenceBackgroundRunningTrackingTimerIfNeeded_block_invoke;
              CFDictionaryRef v161 = &__block_descriptor_40_e5_v8__0l;
              uint64_t v162 = (uint64_t)a1;
              dispatch_source_set_event_handler(v21, buf);
              *(void *)(v20 + 56_Block_object_dispose(&STACK[0x4E0], 8) = v21;
              dispatch_activate(v21);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
          }
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
          objc_msgSend(*(id *)(DerivedStorage + 432), "setWindowed:", *(unsigned __int8 *)(DerivedStorage + 378) | objc_msgSend(*(id *)(DerivedStorage + 432), "windowed"));
          objc_msgSend(*(id *)(DerivedStorage + 432), "setPipEnabled:", *(unsigned __int8 *)(DerivedStorage + 379) | objc_msgSend(*(id *)(DerivedStorage + 432), "pipEnabled"));
          int v23 = (os_unfair_lock_s *)(DerivedStorage + 360);
        }
        else
        {
          if (a2 != 1)
          {
            if (!a2)
            {
              uint64_t v13 = CMBaseObjectGetDerivedStorage();
              if (!_FigIsCurrentDispatchQueue())
              {
                uint64_t v109 = v116;
                LODWORD(v105) = 0;
                FigDebugAssert3();
              }
              if ((objc_msgSend(*(id *)(v13 + 88), "isEqualToString:", 0x1EFA44100, v105, v109) & 1) != 0
                || [*(id *)(v13 + 88) isEqualToString:0x1EFA55980])
              {
                os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
                if (a3 == -16407 && dword_1EB4C5944)
                {
                  if (!(void)xmmword_1EB4C5970)
                  {
                    *(void *)&xmmword_1EB4C5970 = mach_absolute_time();
                    byte_1EB4C5995 = *(unsigned char *)(v13 + 648);
                    if (*MEMORY[0x1E4F1EBA8])
                    {
                      long long v14 = fig_log_handle();
                      if (os_signpost_enabled(v14))
                      {
                        *(_WORD *)buf = 0;
                        _os_signpost_emit_with_name_impl(&dword_1A5887000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", (const char *)&unk_1A5F8B35A, buf, 2u);
                      }
                    }
                  }
                }
                else
                {
                  captureSession_abandonCameraAppSessionStartupTelemetry();
                }
                os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
                os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
                if (byte_1E96B767C)
                {
                  if (a3 && a3 != -16403)
                  {
                    if (!dword_1E96B768C)
                    {
                      if (a3 == -16407) {
                        int v33 = 1;
                      }
                      else {
                        int v33 = 2;
                      }
                      dword_1E96B768C = v33;
                    }
                  }
                  else
                  {
                    captureSession_reportCancelledLockScreenCameraLaunch();
                  }
                }
                os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
              }
              int v115 = v6;
              if (dword_1EB4C5110)
              {
                v157[0] = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CFTypeID v113 = (os_unfair_lock_s *)(DerivedStorage + 360);
              uint64_t v35 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v106, v110);
              float v130 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              double v36 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              int v128 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              double v127 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              uint64_t v126 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              uint64_t v125 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              CFTypeID v124 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
              id obj = (id)[MEMORY[0x1E4F1CA48] array];
              long long v143 = 0u;
              long long v144 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              double v37 = *(void **)(v13 + 656);
              uint64_t v38 = [v37 countByEnumeratingWithState:&v143 objects:v158 count:16];
              if (v38)
              {
                uint64_t v39 = v38;
                uint64_t v40 = *(void *)v144;
                do
                {
                  uint64_t v41 = 0;
                  do
                  {
                    if (*(void *)v144 != v40) {
                      objc_enumerationMutation(v37);
                    }
                    uint64_t v42 = *(void *)(*((void *)&v143 + 1) + 8 * v41);
                    uint64_t v43 = [*(id *)(v13 + 656) objectForKeyedSubscript:v42];
                    if (v43) {
                      uint64_t v44 = *(void *)(v43 + 8);
                    }
                    else {
                      uint64_t v44 = 0;
                    }
                    [v35 setObject:v44 forKeyedSubscript:v42];
                    ++v41;
                  }
                  while (v39 != v41);
                  uint64_t v45 = [v37 countByEnumeratingWithState:&v143 objects:v158 count:16];
                  uint64_t v39 = v45;
                }
                while (v45);
              }
              CFNumberRef v114 = a1;
              long long v141 = 0u;
              long long v142 = 0u;
              long long v139 = 0u;
              long long v140 = 0u;
              uint64_t v122 = v13;
              CGFloat v46 = (void *)[*(id *)(v13 + 664) previewSinkPipelines];
              uint64_t v47 = [v46 countByEnumeratingWithState:&v139 objects:v157 count:16];
              if (v47)
              {
                uint64_t v48 = v47;
                uint64_t v49 = *(void *)v140;
                do
                {
                  for (uint64_t i = 0; i != v48; ++i)
                  {
                    if (*(void *)v140 != v49) {
                      objc_enumerationMutation(v46);
                    }
                    CFNumberRef v51 = *(void **)(*((void *)&v139 + 1) + 8 * i);
                    uint64_t v52 = [v51 sinkID];
                    if (v52)
                    {
                      uint64_t v53 = v52;
                      [obj addObject:v52];
                      objc_msgSend(v130, "setObject:forKeyedSubscript:", objc_msgSend(v51, "filters"), v53);
                      float v54 = NSNumber;
                      [v51 simulatedAperture];
                      objc_msgSend(v36, "setObject:forKeyedSubscript:", objc_msgSend(v54, "numberWithFloat:"), v53);
                      objc_msgSend(v128, "setObject:forKeyedSubscript:", objc_msgSend(v51, "semanticStyle"), v53);
                      CFTypeID v55 = NSNumber;
                      [v51 primaryCaptureRectAspectRatio];
                      objc_msgSend(v126, "setObject:forKeyedSubscript:", objc_msgSend(v55, "numberWithDouble:"), v53);
                      [v51 primaryCaptureRectCenter];
                      [v125 setObject:CGPointCreateDictionaryRepresentation(v165) forKeyedSubscript:v53];
                      objc_msgSend(v124, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v51, "primaryCaptureRectUniqueID")), v53);
                      unsigned int v56 = NSNumber;
                      [v51 portraitLightingEffectStrength];
                      objc_msgSend(v127, "setObject:forKeyedSubscript:", objc_msgSend(v56, "numberWithFloat:"), v53);
                      uint64_t v57 = objc_msgSend(*(id *)(v13 + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(v51, "sourceID"));
                      if (v57) {
                        objc_msgSend(v36, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", -[FigCaptureCinematographyPipeline simulatedAperture](v57)), v53);
                      }
                    }
                  }
                  uint64_t v48 = [v46 countByEnumeratingWithState:&v139 objects:v157 count:16];
                }
                while (v48);
              }
              CFTypeID v58 = (os_unfair_lock_s *)(v13 + 360);
              if (*(unsigned char *)(v13 + 624))
              {
                CFNumberRef v59 = v114;
                uint64_t CurrentSmartStyle = cs_getCurrentSmartStyle();
              }
              else
              {
                uint64_t CurrentSmartStyle = 0;
                CFNumberRef v59 = v114;
              }
              os_unfair_lock_lock(v58);
              unsigned int v61 = *(unsigned __int8 *)(v13 + 382);
              os_unfair_lock_unlock(v58);
              captureSession_teardownGraph(v59, v61, 0, 0, 0, 0);
              os_unfair_lock_lock(v58);
              uint64_t v62 = [v35 count];
              CFTypeID v63 = *(void **)(v13 + 456);
              if (v62 && v63 == *(void **)(v13 + 448))
              {
                *(void *)(v13 + 456) = 0;
                os_unfair_lock_unlock(v58);
                if (v63)
                {
                  uint64_t v112 = CurrentSmartStyle;
                  long long v137 = 0u;
                  long long v138 = 0u;
                  long long v135 = 0u;
                  long long v136 = 0u;
                  uint64_t v70 = [v35 countByEnumeratingWithState:&v135 objects:type count:16];
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    uint64_t v72 = *(void *)v136;
                    do
                    {
                      for (uint64_t j = 0; j != v71; ++j)
                      {
                        if (*(void *)v136 != v72) {
                          objc_enumerationMutation(v35);
                        }
                        cs_updateConfigurationsWithCaptureSource(v63, [v35 objectForKeyedSubscript:*(void *)(*((void *)&v135 + 1) + 8 * j)]);
                      }
                      uint64_t v71 = [v35 countByEnumeratingWithState:&v135 objects:type count:16];
                    }
                    while (v71);
                  }
                  long long v133 = 0u;
                  long long v134 = 0u;
                  long long v131 = 0u;
                  long long v132 = 0u;
                  uint64_t v121 = [obj countByEnumeratingWithState:&v131 objects:v155 count:16];
                  if (v121)
                  {
                    uint64_t v120 = *(void *)v132;
                    long long v119 = *MEMORY[0x1E4F1DAD8];
                    do
                    {
                      for (uint64_t k = 0; k != v121; ++k)
                      {
                        CFNumberRef v75 = v63;
                        if (*(void *)v132 != v120) {
                          objc_enumerationMutation(obj);
                        }
                        uint64_t v76 = *(void *)(*((void *)&v131 + 1) + 8 * k);
                        uint64_t v77 = [v130 objectForKeyedSubscript:v76];
                        __int16 v78 = (void *)[v36 objectForKeyedSubscript:v76];
                        CFNumberRef v79 = (void *)[v127 objectForKeyedSubscript:v76];
                        uint64_t v80 = [v128 objectForKeyedSubscript:v76];
                        CFBooleanRef v81 = (void *)[v126 objectForKeyedSubscript:v76];
                        CFDictionaryRef v82 = (const __CFDictionary *)[v125 objectForKeyedSubscript:v76];
                        *(_OWORD *)buf = v119;
                        CGPointMakeWithDictionaryRepresentation(v82, (CGPoint *)buf);
                        CFBooleanRef v83 = (void *)[v124 objectForKeyedSubscript:v76];
                        [v78 floatValue];
                        float v85 = v84;
                        [v79 floatValue];
                        float v87 = v86;
                        [v81 doubleValue];
                        double v89 = v88;
                        uint64_t v90 = [v83 longLongValue];
                        CFTypeID v63 = v75;
                        cs_updateConfigurationsWithPreviewSinkProperties(v75, v76, v77, v80, v90, v85, v87, v89, *(double *)buf, *(double *)&buf[8]);
                      }
                      uint64_t v121 = [obj countByEnumeratingWithState:&v131 objects:v155 count:16];
                    }
                    while (v121);
                  }
                  uint64_t v13 = v122;
                  if (*(unsigned char *)(v122 + 624))
                  {
                    [v63 setSmartStyle:v112];
                    *(unsigned char *)(v122 + 624) = 0;
                  }
                  CFNumberRef v59 = v114;
                }
              }
              else
              {
                *(void *)(v13 + 456) = 0;
                os_unfair_lock_unlock(v58);
              }

              if (FigCaptureClientApplicationIDIsVisualIntelligenceCamera(*(void **)(v13 + 88)))
              {
                os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
                byte_1EB4C59E8 = 0;
                os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
              }
              os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
              int v64 = byte_1EB4C59E8;
              os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
              if (dword_1EB4C5110)
              {
                unsigned int v148 = 0;
                os_log_type_t v147 = OS_LOG_TYPE_DEFAULT;
                uint64_t v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v66 = v148;
                if (os_log_type_enabled(v65, v147)) {
                  unsigned int v67 = v66;
                }
                else {
                  unsigned int v67 = v66 & 0xFFFFFFFE;
                }
                if (v67)
                {
                  uint64_t v68 = *(void *)(v122 + 104);
                  int v69 = "not ";
                  int v150 = "captureSession_didStopRunning";
                  int v149 = 136315650;
                  if (!v64) {
                    int v69 = "";
                  }
                  __int16 v151 = 2114;
                  uint64_t v152 = v68;
                  __int16 v153 = 2080;
                  unsigned int v154 = v69;
                  LODWORD(v111) = 32;
                  CFNumberRef v107 = &v149;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                uint64_t v13 = v122;
              }
              if (!v64) {
                [+[BWMemoryPool sharedMemoryPool] disable];
              }
              objc_msgSend(MEMORY[0x1E4F1E058], "clearCache", v107, v111);
              [MEMORY[0x1E4F1E040] clearCache];

              *(void *)(v13 + 784) = 0;
              *(void *)(v13 + 736) = 0;

              *(void *)(v13 + 744) = 0;
              uint64_t v91 = CMBaseObjectGetDerivedStorage();
              if (!_FigIsCurrentDispatchQueue()) {
                FigDebugAssert3();
              }
              int v92 = v115;
              if (FigDebugIsInternalBuild()
                && [*(id *)(v91 + 88) isEqualToString:0x1EFA44100])
              {
                if (dword_1EB4C5110)
                {
                  unsigned int v148 = 0;
                  os_log_type_t v147 = OS_LOG_TYPE_DEFAULT;
                  CFTypeID v93 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v94 = v148;
                  if (os_log_type_enabled(v93, v147)) {
                    unsigned int v95 = v94;
                  }
                  else {
                    unsigned int v95 = v94 & 0xFFFFFFFE;
                  }
                  if (v95)
                  {
                    uint64_t v96 = *(void *)(v91 + 104);
                    int v149 = 136315394;
                    int v150 = "captureSession_startObservingInvalidAudioRecordingState";
                    __int16 v151 = 2114;
                    uint64_t v152 = v96;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  int v92 = v115;
                }
                int v97 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v91 + 136));
                dispatch_time_t v98 = dispatch_time(0, 10000000000);
                dispatch_source_set_timer(v97, v98, 0x2540BE400uLL, 0xDE0B6B3A7640000uLL);
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 3221225472;
                int v160 = __captureSession_startObservingInvalidAudioRecordingState_block_invoke;
                CFDictionaryRef v161 = &__block_descriptor_48_e5_v8__0l;
                uint64_t v162 = v91;
                int v163 = v59;
                dispatch_source_set_event_handler(v97, buf);
                *(void *)(v91 + 200) = v97;
                dispatch_activate(v97);
              }
              if (v92 >= 1)
              {
                int v99 = (const void *)cs_notificationPayloadWithErrorStatus(a3);
                captureSession_postNotificationWithPayload(v59, @"DidStopRunning", v99);
                if (v117 == 5)
                {
                  os_unfair_lock_lock(v113);
                  uint64_t v100 = CMBaseObjectGetDerivedStorage();
                  os_unfair_lock_assert_owner((const os_unfair_lock *)(v100 + 360));
                  uint64_t v101 = *(NSObject **)(v100 + 568);
                  if (v101)
                  {
                    dispatch_source_cancel(v101);

                    *(void *)(v100 + 56_Block_object_dispose(&STACK[0x4E0], 8) = 0;
                  }
                  os_unfair_lock_unlock(v113);
                }
                uint64_t v102 = *(void *)(CMBaseObjectGetDerivedStorage() + 88);
                SystemStyle = (void *)FigCaptureSmartStyleSettingsGetSystemStyle(v102);
                if (SystemStyle)
                {
                  if ((objc_msgSend(SystemStyle, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null")) & 1) == 0)
                  {
                    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "timeIntervalSince1970");
                    FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp(objc_msgSend(NSNumber, "numberWithDouble:"), v102);
                  }
                }
              }
            }
            return;
          }
          uint64_t v24 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:cs_notificationPayloadWithErrorStatus(a3)];
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsVideoSource(*(void **)(DerivedStorage + 448))), 0x1EFA56900);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsStillImageSinkConfiguration(*(void **)(DerivedStorage + 448))), 0x1EFA56920);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", cs_configurationContainsMovieFileSinkConfiguration(*(void **)(DerivedStorage + 448))), 0x1EFA56940);
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", DerivedStorage + 20, 32), @"ClientAuditToken");
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
          captureSession_postNotificationWithPayload(a1, @"WillStartRunning", v24);
          if (([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100] & 1) == 0
            && ![*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
          {
            return;
          }
          os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
          qword_1EB4C5960 = mach_absolute_time();
          if (!dword_1EB4C5944)
          {
            dword_1EB4C5944 = 1;
            v158[0] = 0;
            *(void *)buf = 4;
            int v31 = sysctlbyname("kern.memorystatus_level", v158, (size_t *)buf, 0, 0) ? 0 : v158[0];
            LODWORD(qword_1EB4C598_Block_object_dispose(&STACK[0x4E0], 8) = v31;
            HIDWORD(qword_1EB4C598_Block_object_dispose(&STACK[0x4E0], 8) = [*(id *)(DerivedStorage + 720) thermalLevel];
            if (*MEMORY[0x1E4F1EBA8])
            {
              int v32 = fig_log_handle();
              if (os_signpost_enabled(v32))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A5887000, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CameraLaunchWithoutPrewarm", (const char *)&unk_1A5F8B35A, buf, 2u);
              }
            }
          }
          if ((void)xmmword_1EB4C5970)
          {
            *((void *)&xmmword_1EB4C5970 + 1) = mach_absolute_time();
            if (*MEMORY[0x1E4F1EBA8])
            {
              int v25 = fig_log_handle();
              if (os_signpost_enabled(v25))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A5887000, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", " enableTelemetry=YES ", buf, 2u);
              }
            }
          }
          os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
          os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
          mach_absolute_time();
          BOOL v27 = (float)((float)FigHostTimeToNanoseconds() / 1000000000.0) < 1.0 || byte_1E96B7690 != 0;
          mach_absolute_time();
          uint64_t v28 = FigHostTimeToNanoseconds();
          int v29 = byte_1E96B767C;
          if (byte_1E96B767C && dword_1E96B768C && !v27 && (float)((float)v28 / 1000000000.0) > 2.0)
          {
            captureSession_reportCancelledLockScreenCameraLaunch();
            int v29 = byte_1E96B767C;
          }
          if (v29) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27;
          }
          if (v30)
          {
            byte_1E96B767C = 1;
            qword_1E96B7680 = mach_absolute_time();
          }
          int v23 = &sLockScreenCameraLaunchTelemetry;
        }
        os_unfair_lock_unlock(v23);
        return;
      }
    }
    [+[FigCaptureMemoryReporter sharedInstance] decrementActiveClientCount:v11 clientIsCameraMessagesApp:v12];
    goto LABEL_23;
  }
}

uint64_t cs_configurationContainsVideoSource(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = objc_msgSend(a1, "sourceConfigurations", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        int v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        if ([v6 sourceType] == 1
          && [v6 sourceDeviceType] - 17 > 3)
        {
          return 1;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t cs_notificationPayloadWithErrorStatus(uint64_t a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 2;
  switch(a1)
  {
    case 0xFFFFBFE8:
      uint64_t v1 = 5;
      goto LABEL_10;
    case 0xFFFFBFE9:
      uint64_t v1 = 4;
      goto LABEL_10;
    case 0xFFFFBFEA:
    case 0xFFFFBFEB:
      goto LABEL_6;
    case 0xFFFFBFEC:
      goto LABEL_10;
    case 0xFFFFBFED:
      uint64_t v1 = 1;
      goto LABEL_10;
    default:
      if (a1 == -16952)
      {
        uint64_t v1 = 6;
LABEL_10:
        v7[0] = @"ErrorStatus";
        v7[1] = @"ErrorReason";
        v8[0] = &unk_1EFAFFDB0;
        v8[1] = [NSNumber numberWithInt:v1];
        uint64_t v3 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v4 = v8;
        uint64_t v5 = (__CFString **)v7;
        uint64_t v6 = 2;
      }
      else
      {
        if (!a1) {
          return 0;
        }
LABEL_6:
        long long v9 = @"ErrorStatus";
        v10[0] = [NSNumber numberWithInt:a1];
        uint64_t v3 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v4 = v10;
        uint64_t v5 = &v9;
        uint64_t v6 = 1;
      }
      return [v3 dictionaryWithObjects:v4 forKeys:v5 count:v6];
  }
}

void captureSession_performBlockWithAVCMSessionForIsUsingCamera(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v6 = *(NSObject **)(v5 + 192);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockWithAVCMSessionForIsUsingCamera_block_invoke;
    block[3] = &unk_1E5C28B08;
    void block[4] = a2;
    void block[5] = v5;
    void block[6] = a1;
    dispatch_async(v6, block);
  }
}

void captureSession_stopObservingInvalidAudioRecordingState()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  uint64_t v1 = *(NSObject **)(DerivedStorage + 200);
  if (v1)
  {
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v1 = *(NSObject **)(DerivedStorage + 200);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 200));
    *(void *)(DerivedStorage + 200) = 0;
  }
}

uint64_t __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke(uint64_t a1)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 404))
  {
    uint64_t v3 = result;
    if ((*(_DWORD *)(result + 400) - 1) <= 1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(result + 360));
      uint64_t v4 = *(void **)(v3 + 464);
      if (!v4) {
        uint64_t v4 = *(void **)(v3 + 456);
      }
      int v5 = *(_DWORD *)(v3 + 408);
      uint64_t v20 = [v4 configurationID];
      id v6 = *(id *)(v3 + 456);
      if (v5 == 2)
      {
        unsigned int v21 = cs_configurationContainsVideoSource(v4);
        id v22 = (id)[*(id *)(v3 + 392) copy];
      }
      else
      {
        id v22 = 0;
        unsigned int v21 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
      long long v7 = *(NSObject **)(v3 + 152);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke_2;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      void block[4] = v3;
      dispatch_async(v7, block);
      v31[0] = 0;
      LODWORD(valuePtr) = 0;
      cs_getMasterClockAndType(*(void **)(v3 + 664), v31, (int *)&valuePtr);
      CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      uint64_t v9 = [v6 configurationID];
      long long v10 = (const void *)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithLongLong:", v9), @"ConfigurationID", v31[0], @"MasterClock", v8, @"MasterClockType", 0);
      if (v8) {
        CFRelease(v8);
      }
      captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), @"ConfigurationCommitted", v10);
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v23 = v3;
      uint64_t v11 = (void *)[*(id *)(v3 + 664) previewSinkPipelines];
      uint64_t v12 = [v11 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v25 != v14) {
              objc_enumerationMutation(v11);
            }
            dispatch_time_t v16 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            if ([v16 sinkID])
            {
              int v17 = (const void *)[v16 imageQueueUpdatedPayloadToBeSentAfterCommitConfiguration];
              [v16 setImageQueueUpdatedNotificationSent:1];
              captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), @"ImageQueueUpdated", v17);
              if ([v16 previewRunning])
              {
                uint64_t v18 = [v16 sinkID];
                int valuePtr = @"SectionID";
                v31[0] = v18;
                captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), @"DidStartPreviewing", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&valuePtr count:1]);
              }
            }
          }
          uint64_t v13 = [v11 countByEnumeratingWithState:&v24 objects:v29 count:16];
        }
        while (v13);
      }
      if (v5 == 2)
      {
        captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), @"ConfigurationDidBecomeLive", (const void *)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSNumber, "numberWithLongLong:", v20), @"ConfigurationID", 0, @"ErrorStatus", 0));
        uint64_t v19 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        objc_msgSend(v19, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v23 + 20, 32), @"ClientAuditToken");
        objc_msgSend(v19, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v21), 0x1EFA56900);
        if (v22) {
          [v19 setObject:v22 forKeyedSubscript:@"PrewarmReason"];
        }
        captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), @"DidStartRunning", v19);
      }
      return captureSession_transitionToSessionLaunchPrewarmStatus(*(void *)(a1 + 32), 0);
    }
  }
  return result;
}

uint64_t __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_2()
{
  return captureSession_handlePlaybackOrRouteStateChange();
}

uint64_t FigCaptureSessionCreate(uint64_t a1, long long *a2, void *a3, CFTypeRef *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (initializeGlobals_initializeGlobalsOnceToken != -1) {
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_916);
  }
  if (dword_1EB4C5110)
  {
    unsigned int v42 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3)
  {
    long long v8 = a2[1];
    long long v49 = *a2;
    long long v50 = v8;
    if (!FigCaptureClientIsWebBrowserRenderingExtension(&v49))
    {
LABEL_31:
      uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954516;
    }
  }
  else
  {
    long long v9 = a2[1];
    long long v49 = *a2;
    long long v50 = v9;
    if (FigCaptureClientIsWebBrowserRenderingExtension(&v49))
    {
      long long v10 = a2[1];
      long long v49 = *a2;
      long long v50 = v10;
      if ((FigCaptureClientHasEntitlement(&v49, @"com.apple.private.avfoundation.capture.temporary.no-media-environment.allow") & 1) == 0)goto LABEL_31; {
    }
      }
  }
  FigCaptureSessionGetClassID();
  uint64_t v11 = CMDerivedObjectCreate();
  if (v11)
  {
    uint64_t v37 = v11;
    FigDebugAssert3();
    return v37;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v13 = a2[1];
  long long v49 = *a2;
  long long v50 = v13;
  *(_DWORD *)(DerivedStorage + 16) = FigCaptureGetPIDFromAuditToken(&v49);
  long long v14 = *a2;
  *(_OWORD *)(DerivedStorage + 36) = a2[1];
  *(_OWORD *)(DerivedStorage + 20) = v14;
  *(_DWORD *)(DerivedStorage + 84) = 0;
  *(void *)(DerivedStorage + 96) = [a3 copy];
  *(_DWORD *)(DerivedStorage + 360) = 0;
  *(void *)(DerivedStorage + 432) = objc_alloc_init(BWMultitaskingSessionAnalyticsPayload);
  uint64_t v15 = [FigCaptureSessionParsedConfigurationRestrictions alloc];
  long long v49 = *(_OWORD *)(DerivedStorage + 20);
  long long v50 = *(_OWORD *)(DerivedStorage + 36);
  *(void *)(DerivedStorage + 440) = [(FigCaptureSessionParsedConfigurationRestrictions *)v15 initWithClientAuditToken:&v49];
  *(_DWORD *)(DerivedStorage + 584) = -1;
  *(void *)(DerivedStorage + 592) = 0;
  *(_DWORD *)(DerivedStorage + 216) = 0;
  *(void *)(DerivedStorage + 24_Block_object_dispose(&STACK[0x4E0], 8) = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 136) = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 144) = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 152) = FigDispatchQueueCreateWithPriority();
  *(unsigned char *)(DerivedStorage + 160) = 1;
  *(void *)(DerivedStorage + 192) = FigDispatchQueueCreateWithPriority();
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 3221225472;
  v40[2] = __FigCaptureSessionCreate_block_invoke;
  v40[3] = &__block_descriptor_40_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
  v40[4] = DerivedStorage;
  captureSession_performBlockWithAVCMSessionForIsUsingCamera(cf, (uint64_t)v40);
  dispatch_time_t v16 = [BWFigCaptureSession alloc];
  *(void *)(DerivedStorage + 712) = -[BWFigCaptureSession initWithFigCaptureSession:](v16, (uint64_t)cf);
  *(void *)(DerivedStorage + 720) = objc_alloc_init(FigCaptureThermalMonitor);
  id v17 = +[FigCaptureSessionObservatory sharedObservatory];
  [v17 captureSessionWasCreated:cf];
  long long v18 = a2[1];
  long long v49 = *a2;
  long long v50 = v18;
  captureSession_createClientApplicationStateMonitor(cf, &v49);
  uint64_t v19 = [FigCaptureSessionLoggingPrefix alloc];
  long long v20 = a2[1];
  long long v49 = *a2;
  long long v50 = v20;
  *(void *)(DerivedStorage + 104) = -[FigCaptureSessionLoggingPrefix initWithClientAuditToken:captureSession:](v19, &v49, (uint64_t)cf);
  CFTypeRef v21 = cf;
  long long v22 = a2[1];
  *(_OWORD *)uint64_t v44 = *a2;
  *(_OWORD *)&v44[16] = v22;
  os_unfair_lock_lock((os_unfair_lock_t)&sSessionIDLock);
  uint64_t v23 = sNextSessionCount + 1;
  if ((unint64_t)(sNextSessionCount + 1) > 1) {
    uint64_t v24 = sNextSessionCount + 1;
  }
  else {
    uint64_t v24 = 1;
  }
  sNextSessionsize_t Count = v24;
  os_unfair_lock_unlock((os_unfair_lock_t)&sSessionIDLock);
  long long v49 = *(_OWORD *)v44;
  long long v50 = *(_OWORD *)&v44[16];
  long long v25 = (__CFString *)FigCaptureCopyClientCodeSigningIdentifier(&v49);
  long long v26 = (void *)[NSString stringWithFormat:@"<%p[%@][%llu]>", v21, v25, v23];

  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = v26;
  *(_DWORD *)(DerivedStorage + 772) = 0;
  *(void *)(DerivedStorage + 776) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(void *)(DerivedStorage + 792) = 0;
  *(unsigned char *)(DerivedStorage + 113) = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "highPriorityLaunchFromLockScreenSupported");
  if (FigDebugIsInternalBuild())
  {
    if (dword_1EB4C5110)
    {
      unsigned int v42 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      long long v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v28 = v42;
      if (os_log_type_enabled(v27, type)) {
        unsigned int v29 = v28;
      }
      else {
        unsigned int v29 = v28 & 0xFFFFFFFE;
      }
      if (v29)
      {
        uint64_t v30 = *(void *)(DerivedStorage + 104);
        uint64_t v31 = FigCapturePlatformIdentifierString();
        int v32 = FigCapturePlatformChipRevisionIdentifierString();
        *(_DWORD *)uint64_t v44 = 136316162;
        *(void *)&v44[4] = "FigCaptureSessionCreate";
        *(_WORD *)&v44[12] = 2114;
        *(void *)&v44[14] = v30;
        *(_WORD *)&v44[22] = 2112;
        *(void *)&v44[24] = @"DISABLED";
        __int16 v45 = 2112;
        uint64_t v46 = v31;
        __int16 v47 = 2112;
        uint64_t v48 = v32;
        _os_log_send_and_compose_impl();
      }
LABEL_27:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else if (dword_1EB4C5110)
  {
    unsigned int v42 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v34 = v42;
    if (os_log_type_enabled(v33, type)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      uint64_t v36 = *(void *)(DerivedStorage + 104);
      *(_DWORD *)uint64_t v44 = 136315394;
      *(void *)&v44[4] = "FigCaptureSessionCreate";
      *(_WORD *)&v44[12] = 2114;
      *(void *)&v44[14] = v36;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_27;
  }
  uint64_t v37 = 0;
  *a4 = cf;
  return v37;
}

uint64_t FigCaptureSessionRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = 4294954516;
    goto LABEL_17;
  }
  uint64_t v4 = csr_ensureClientEstablished();
  if (v4
    || (uint64_t v4 = FigXPCCreateBasicMessage(), v4)
    || (uint64_t v4 = FigXPCMessageSetCFString(), v4)
    || (uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v4))
  {
    uint64_t v10 = v4;
    fig_log_get_emitter();
LABEL_22:
    FigDebugAssert3();
    goto LABEL_17;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigCaptureSessionGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v10 = v6;
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_22;
  }
  *(void *) CMBaseObjectGetDerivedStorage() = uint64;
  FigXPCRemoteClientAssociateObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(void, __CFString *, void))(v8 + 56);
  if (!v9)
  {
    uint64_t v10 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v10 = v9(0, @"CaptureSession_RemoteVideoPreviewEnabled", *MEMORY[0x1E4F1CFD0]);
  if (v10)
  {
LABEL_16:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_17;
  }
  *a3 = 0;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t FigCaptureSessionGetClassID()
{
  if (FigCaptureSessionGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureSessionGetClassID_onceToken, &__block_literal_global_55);
  }
  return FigCaptureSessionGetClassID_sFigCaptureSessionClassID;
}

uint64_t captureSessionRemote_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t ObjectID = captureSessionRemote_getObjectID(a1, &v11);
  if (ObjectID)
  {
    uint64_t v8 = ObjectID;
    fig_log_get_emitter();
    goto LABEL_8;
  }
  if (!CFEqual(a2, @"CaptureSession_SmartStyle") && !CFEqual(a2, @"CaptureSession_SystemStyleOverride")) {
    goto LABEL_13;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (!a3 || (isKindOfClass & 1) != 0)
  {
    id v12 = 0;
    if (!a3) {
      a3 = [MEMORY[0x1E4F1CA98] null];
    }
    if (![MEMORY[0x1E4F28DB0] archivedDataWithRootObject:a3 requiringSecureCoding:1 error:&v12])
    {
      fig_log_get_emitter();
      LODWORD(v10) = 0;
      FigDebugAssert3();
      objc_msgSend(v12, "code", v10, v3);
      FigSignalErrorAt();
    }
LABEL_13:
    uint64_t v8 = FigXPCSendStdSetPropertyMessage();
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  uint64_t v8 = 4294954516;
LABEL_7:
  fig_log_get_emitter();
LABEL_8:
  FigDebugAssert3();
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

__SecTask *FigCaptureClientIsWebBrowserRenderingExtension(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return FigCaptureClientHasEntitlement(v3, @"com.apple.developer.web-browser-engine.rendering");
}

uint64_t captureSourceRemote_UpdateCameraHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, void *a8)
{
  xpc_object_t xdict = 0;
  *a8 = 0;
  uint64_t v13 = csr_ensureClientEstablished_0();
  if (v13)
  {
    uint64_t v15 = v13;
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    goto LABEL_9;
  }
  uint64_t v14 = captureSourceRemote_createBasicMessage(a1, 1969449075, &xdict);
  if (v14
    || (uint64_t v14 = FigXPCMessageSetCFString(), v14)
    || a4 && (uint64_t v14 = FigXPCMessageSetCFDictionary(), v14)
    || ([NSNumber numberWithUnsignedInt:a5], uint64_t v14 = FigXPCMessageSetCFNumber(), v14)
    || (xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_UpdateCameraHistoryDownplayOverrideList, a6 != 0), xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_CameraCanBeInOverrideList, a7 != 0), uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v14))
  {
    uint64_t v15 = v14;
    fig_log_get_emitter();
    goto LABEL_12;
  }
  uint64_t v15 = 0xFFFFFFFFLL;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t captureSourceRemote_CameraHistoryDownplayOverrideList(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v2 = csr_ensureClientEstablished_0();
  if (v2)
  {
    uint64_t v4 = v2;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v3 = captureSourceRemote_createBasicMessage(a1, 1667785839, &v6);
  if (v3 || (uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v3))
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
    goto LABEL_8;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

__CFArray *FigCaptureSourceRemoteCopyCaptureSources(unsigned int a1)
{
  xpc_object_t v10 = 0;
  xpc_object_t xdict = 0;
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E4F20290], a1),
        FigXPCRemoteClientSendSyncMessageCreatingReply()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    xpc_object_t v2 = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E4F202A8]);
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t count = xpc_array_get_count(v2);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (xpc_array_get_count(v2))
      {
        size_t v6 = 0;
        while (1)
        {
          xpc_object_t v7 = xpc_array_get_value(v2, v6);
          xpc_object_t value = 0;
          if (captureSourceRemote_createInternal(v7, &value)) {
            break;
          }
          CFArrayAppendValue(Mutable, value);
          if (value) {
            CFRelease(value);
          }
          if (xpc_array_get_count(v2) <= ++v6) {
            goto LABEL_11;
          }
        }
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return Mutable;
}

uint64_t captureSourceRemote_createInternal(void *a1, void *a2)
{
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  FigCaptureSourceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4) {
    goto LABEL_10;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = xpc_dictionary_get_uint64(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_ObjectID);
  uint64_t v4 = FigXPCRemoteClientAssociateObject();
  if (v4) {
    goto LABEL_10;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_SourceType);
  *(_DWORD *)(DerivedStorage + 52) = uint64;
  if (uint64 != 5)
  {
    uint64_t v4 = FigXPCMessageCopyCFDictionary();
    if (!v4)
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      xpc_object_t value = xpc_dictionary_get_value(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_FormatsArray);
      BOOL v9 = xpc_dictionary_get_BOOL(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_420fOptimizationDisabled);
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 3221225472;
      applier[2] = __csr_createFormatsArrayFromSerializedSource_block_invoke;
      applier[3] = &unk_1E5C25640;
      applier[4] = v7;
      BOOL v13 = !v9;
      xpc_array_apply(value, applier);
      *(void *)(DerivedStorage + 40) = v7;
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v10 = v4;
    fig_log_get_emitter();
    FigDebugAssert3();
    return v10;
  }
LABEL_7:
  uint64_t v10 = 0;
  *(_DWORD *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  *a2 = 0;
  return v10;
}

uint64_t FigCaptureSourceGetClassID()
{
  if (FigCaptureSourceGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureSourceGetClassID_onceToken, &__block_literal_global_87);
  }
  return FigCaptureSourceGetClassID_sFigCaptureSourceClassID;
}

uint64_t csr_ensureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __csr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E5C24978;
  void block[4] = &v3;
  if (csr_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&csr_ensureClientEstablished_onceToken, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t csr_ensureClientEstablished_0()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __csr_ensureClientEstablished_block_invoke_0;
  block[3] = &unk_1E5C24978;
  void block[4] = &v3;
  if (csr_ensureClientEstablished_onceToken_0 != -1) {
    dispatch_once(&csr_ensureClientEstablished_onceToken_0, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A59E2874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FigCaptureSessionGetClassID_block_invoke()
{
  ClassIOSurfaceID ID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureSessionClassDesc, ClassID, 1, &FigCaptureSessionGetClassID_sFigCaptureSessionClassID);
}

uint64_t __FigCaptureDeferredPhotoProcessorGetClassID_block_invoke()
{
  ClassIOSurfaceID ID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureDeferredPhotoProcessorClassDesc, ClassID, 1, &FigCaptureDeferredPhotoProcessorGetClassID_sFigCaptureDeferredPhotoProcessorClassID);
}

uint64_t csp_dockKitNodeEnabled(uint64_t a1, int a2)
{
  if (a1) {
    uint64_t v4 = *(void **)(a1 + 184);
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = [v4 imageControlMode];
  int v6 = [v4 imageControlMode];
  int v7 = [v4 imageControlMode];
  int v8 = [v4 cinematicFramingEnabled];
  if ([v4 manualCinematicFramingEnabled]) {
    int v9 = [v4 isDockedTrackingEnabled] ^ 1;
  }
  else {
    int v9 = 0;
  }
  int v10 = csp_cinematicVideoEnabled(a1);
  int v11 = MGGetBoolAnswer();
  if (a2) {
    a2 = [v4 isDockedTrackingEnabled] ^ 1;
  }
  int v12 = _os_feature_enabled_impl();
  unsigned int v13 = ~(a2 | ~v11 | v8 | v9);
  if (v5 == 5) {
    unsigned int v13 = 0;
  }
  if (v6 == 6) {
    unsigned int v13 = 0;
  }
  if (v7 == 4) {
    unsigned int v13 = 0;
  }
  if (v10) {
    uint64_t v14 = v12 & v13;
  }
  else {
    uint64_t v14 = v13;
  }
  if (a1)
  {
    if (*(unsigned char *)(a1 + 347))
    {
      if ([v4 sourcePosition] == 1) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v14;
      }
    }
    if (v11 && *(unsigned char *)(a1 + 346))
    {
      if ([v4 sourceDeviceType] == 2) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v14;
      }
    }
  }
  if (dword_1EB4C5210)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v14;
}

uint64_t __FigCaptureGetCurrentProcessAuditToken_block_invoke()
{
  mach_msg_type_number_t task_info_outCnt = 8;
  return task_info(*MEMORY[0x1E4F14960], 0xFu, (task_info_t)&FigCaptureGetCurrentProcessAuditToken_currentProcessAuditToken, &task_info_outCnt);
}

uint64_t captureSourceRemote_SetProprietaryDefault(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = captureSourceRemote_createBasicMessage(a1, 1937010788, &v4);
  if (v1 || (uint64_t v1 = FigXPCMessageSetCFString(), v1) || (uint64_t v1 = FigXPCMessageSetCFObject(), v1))
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

double psn_smallestBoundingRectAlignedToMultipleOf(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  float v9 = a2 + 0.001;
  double v10 = (double)(int)FigCaptureFloorFloatToMultipleOf(a1, v9);
  float v11 = a3 + 0.001;
  double v20 = (double)(int)FigCaptureFloorFloatToMultipleOf(a1, v11);
  float v12 = a4 + -0.001;
  double v13 = (double)(int)FigCaptureCeilFloatToMultipleOf(a1, v12);
  float v14 = a5 + -0.001;
  double v15 = (double)(int)FigCaptureCeilFloatToMultipleOf(a1, v14);
  v23.origin.double x = v10;
  v23.origin.double y = v20;
  v23.size.CGFloat width = v13;
  v23.size.CGFloat height = v15;
  double MaxX = CGRectGetMaxX(v23);
  v24.origin.double x = a2;
  v24.origin.double y = a3;
  v24.size.CGFloat width = a4;
  v24.size.CGFloat height = a5;
  if (MaxX >= CGRectGetMaxX(v24)) {
    double v17 = -0.0;
  }
  else {
    double v17 = (double)a1;
  }
  CGFloat v18 = v17 + v13;
  v25.origin.double x = v10;
  v25.origin.double y = v20;
  v25.size.CGFloat width = v18;
  v25.size.CGFloat height = v15;
  CGRectGetMaxY(v25);
  v26.origin.double x = a2;
  v26.origin.double y = a3;
  v26.size.CGFloat height = a5;
  v26.size.CGFloat width = a4;
  CGRectGetMaxY(v26);
  return v10;
}

double psn_pixelBufferRect(__CVBuffer *a1)
{
  double v2 = *MEMORY[0x1E4F1DB28];
  CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return v2;
}

CGFloat psn_rectBoundedByRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (a7 >= a3) {
    double v14 = a3;
  }
  else {
    double v14 = a7;
  }
  if (v14 >= 0.0) {
    double v15 = v14;
  }
  else {
    double v15 = 0.0;
  }
  if (a8 >= a4) {
    double v16 = a4;
  }
  else {
    double v16 = a8;
  }
  if (v16 < 0.0) {
    double v16 = 0.0;
  }
  double v24 = v16;
  v26.origin.double x = a5;
  v26.origin.double y = a6;
  v26.size.CGFloat width = a7;
  v26.size.CGFloat height = a8;
  double MinX = CGRectGetMinX(v26);
  v27.origin.double x = a5;
  v27.origin.double y = a6;
  v27.size.CGFloat width = a7;
  v27.size.CGFloat height = a8;
  double v25 = v15;
  BOOL v18 = CGRectGetMaxX(v27) - v15 < a1;
  double v19 = a1;
  if (v18)
  {
    v28.origin.double x = a5;
    v28.origin.double y = a6;
    v28.size.CGFloat width = a7;
    v28.size.CGFloat height = a8;
    double v19 = CGRectGetMaxX(v28) - v15;
  }
  if (MinX <= v19)
  {
    v30.origin.double x = a5;
    v30.origin.double y = a6;
    v30.size.CGFloat width = a7;
    v30.size.CGFloat height = a8;
    double v20 = v24;
    if (CGRectGetMaxX(v30) - v25 < a1)
    {
      v31.origin.double x = a5;
      v31.origin.double y = a6;
      v31.size.CGFloat width = a7;
      v31.size.CGFloat height = a8;
      a1 = CGRectGetMaxX(v31) - v25;
    }
  }
  else
  {
    v29.origin.double x = a5;
    v29.origin.double y = a6;
    v29.size.CGFloat width = a7;
    v29.size.CGFloat height = a8;
    a1 = CGRectGetMinX(v29);
    double v20 = v24;
  }
  v32.origin.double x = a5;
  v32.origin.double y = a6;
  v32.size.CGFloat width = a7;
  v32.size.CGFloat height = a8;
  double MinY = CGRectGetMinY(v32);
  v33.origin.double x = a5;
  v33.origin.double y = a6;
  v33.size.CGFloat width = a7;
  v33.size.CGFloat height = a8;
  BOOL v18 = CGRectGetMaxY(v33) - v20 < a2;
  double v22 = a2;
  if (v18)
  {
    v34.origin.double x = a5;
    v34.origin.double y = a6;
    v34.size.CGFloat width = a7;
    v34.size.CGFloat height = a8;
    double v22 = CGRectGetMaxY(v34) - v20;
  }
  if (MinY <= v22)
  {
    v36.origin.double x = a5;
    v36.origin.double y = a6;
    v36.size.CGFloat width = a7;
    v36.size.CGFloat height = a8;
    if (CGRectGetMaxY(v36) - v20 < a2)
    {
      v37.origin.double x = a5;
      v37.origin.double y = a6;
      v37.size.CGFloat width = a7;
      v37.size.CGFloat height = a8;
      CGRectGetMaxY(v37);
    }
  }
  else
  {
    v35.origin.double x = a5;
    v35.origin.double y = a6;
    v35.size.CGFloat width = a7;
    v35.size.CGFloat height = a8;
    CGRectGetMinY(v35);
  }
  return a1;
}

float64_t FigCaptureMetadataUtilitiesClampRectToBoundingRect(float64x2_t a1, float64_t a2, double a3, double a4, float64x2_t a5, float64_t a6, double a7, double a8)
{
  a5.f64[1] = a6;
  *(float *)&unsigned int v8 = a5.f64[0] + a7;
  *(float *)&unsigned int v9 = a6 + a8;
  v10.f64[0] = a1.f64[0] + a3;
  v10.f64[1] = a2 + a4;
  a1.f64[1] = a2;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v9, v8);
  a1.f64[0] = vminnmq_f32(vmaxnmq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1), v10), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a5), a5)), v11).f32[0];
  return a1.f64[0];
}

uint64_t BWUpdateTrackedFacesMetadataOnSampleBuffer(void *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, double a8, double a9, uint64_t a10, int a11, int a12)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  BOOL v17 = a11 == 90 || a11 == 270;
  if (v17) {
    double v18 = a9;
  }
  else {
    double v18 = a8;
  }
  double v19 = v18 / a4;
  if (v17) {
    double v20 = a8;
  }
  else {
    double v20 = a9;
  }
  double v21 = v20 / a5;
  if (!a11)
  {
    BOOL v22 = v19 == 1.0 && v21 == 1.0;
    if (v22 && a12 == 0) {
      return 0;
    }
  }
  if (a12) {
    float v25 = -1.0;
  }
  else {
    float v25 = 1.0;
  }
  CFStringRef v26 = (const __CFString *)*MEMORY[0x1E4F531A0];
  uint64_t result = (uint64_t)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F531A0], 0);
  if (result)
  {
    CGRect v28 = (void *)result;
    CGRect v29 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:result];
    CGRect v30 = (void *)[v28 objectForKeyedSubscript:getkCVAFaceTracking_TrackedFacesArray()];
    uint64_t result = [v30 count];
    if (result)
    {
      uint64_t v104 = (void *)[MEMORY[0x1E4F1CA48] array];
      [v29 setObject:v104 forKeyedSubscript:getkCVAFaceTracking_TrackedFacesArray()];
      memset(&v120, 0, sizeof(v120));
      CGAffineTransformMakeTranslation(&v120, -a2, -a3);
      CGAffineTransformMakeScale(&t2, v19, v21);
      CGAffineTransform t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &t2);
      CGAffineTransform v120 = v122;
      FigCaptureMakeMirrorAndRotateVideoTransform((int)(v19 * a4 + -1.0), (int)(v21 * a5 + -1.0), a12, a11, (uint64_t)&v118);
      CGAffineTransform t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &v118);
      CGAffineTransform v120 = v122;
      CGAffineTransformMakeTranslation(&v117, a6, a7);
      CGAffineTransform t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &v117);
      CGAffineTransform v120 = v122;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      uint64_t v105 = [v30 countByEnumeratingWithState:&v113 objects:v130 count:16];
      if (v105)
      {
        uint64_t v103 = *(void *)v114;
        float v31 = (float)(v25 * (float)a11) * 0.0174532925;
        __float2 v34 = __sincosf_stret(v31);
        *(float *)v33.i32 = v34.__cosval;
        *(float *)v32.i32 = v34.__sinval;
        v35.i32[3] = 0;
        v35.i64[0] = LODWORD(v34.__cosval);
        *(float *)&v35.i32[2] = -v34.__sinval;
        int32x4_t v36 = vzip1q_s32(v35, v32);
        v36.i32[3] = 0;
        int32x4_t v99 = v36;
        int32x4_t v37 = vzip2q_s32(v35, vdupq_lane_s32(v33, 0));
        v37.i32[3] = 0;
        int32x4_t v98 = v37;
        long long v101 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        long long v102 = *MEMORY[0x1E4F1DB20];
        id obj = v30;
        while (2)
        {
          for (uint64_t i = 0; i != v105; ++i)
          {
            if (*(void *)v114 != v103) {
              objc_enumerationMutation(obj);
            }
            uint64_t v39 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:*(void *)(*((void *)&v113 + 1) + 8 * i)];
            [v104 addObject:v39];
            uint64_t v40 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v39, "objectForKeyedSubscript:", getkCVAFaceTracking_CameraColor()));
            [v39 setObject:v40 forKeyedSubscript:getkCVAFaceTracking_CameraColor()];
            uint64_t v41 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v40, "objectForKeyedSubscript:", getkCVAFaceTracking_Extrinsics_0()));
            [v40 setObject:v41 forKeyedSubscript:getkCVAFaceTracking_Extrinsics_0()];
            unsigned int v42 = (void *)[v41 objectForKeyedSubscript:getkCVAFaceTracking_Rotation_0()];
            if (v42)
            {
              uint64_t v43 = v42;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v42, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 0), "floatValue");
              v111.tdouble x = v44;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 1), "floatValue");
              v111.c = v45;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 2), "floatValue");
              v111.a = v46;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 0), "floatValue");
              __int32 v110 = v47;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 1), "floatValue");
              __int32 v109 = v48;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 2), "floatValue");
              __int32 v108 = v49;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 0), "floatValue");
              __int32 v107 = v50;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 1), "floatValue");
              __int32 v106 = v51;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 2), "floatValue");
              float32x4_t v56 = *(float32x4_t *)&v111.a;
              float32x4_t v54 = *(float32x4_t *)&v111.c;
              float32x4_t v53 = *(float32x4_t *)&v111.tx;
              uint64_t v52 = 0;
              v53.i32[1] = v110;
              v53.i32[2] = v107;
              v54.i32[1] = v109;
              v54.i32[2] = v106;
              v56.i32[1] = v108;
              v56.i32[2] = v55;
              *(int32x4_t *)&t1.a = v99;
              *(int32x4_t *)&t1.c = v98;
              *(_OWORD *)&t1.tdouble x = xmmword_1A5DBD350;
              memset(&v122, 0, sizeof(v122));
              do
              {
                *(float32x4_t *)((char *)&v122.a + v52) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(_OWORD *)((char *)&t1.a + v52))), v54, *(float32x2_t *)((char *)&t1.a + v52), 1), v56, *(float32x4_t *)((char *)&t1.a + v52), 2);
                v52 += 16;
              }
              while (v52 != 48);
              CGAffineTransform v111 = v122;
              v128[0] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v122.tx), LODWORD(v122.a))));
              v128[1] = [NSNumber numberWithFloat:v111.c];
              v128[2] = [NSNumber numberWithFloat:v111.tx];
              v129[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:v128 count:3];
              HIDWORD(v57) = HIDWORD(v111.a);
              LODWORD(v57) = HIDWORD(v111.a);
              v127[0] = [NSNumber numberWithFloat:v57];
              HIDWORD(v5_Block_object_dispose(&STACK[0x4E0], 8) = HIDWORD(v111.c);
              LODWORD(v5_Block_object_dispose(&STACK[0x4E0], 8) = HIDWORD(v111.c);
              v127[1] = [NSNumber numberWithFloat:v58];
              HIDWORD(v59) = HIDWORD(v111.tx);
              LODWORD(v59) = HIDWORD(v111.tx);
              v127[2] = [NSNumber numberWithFloat:v59];
              v129[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:v127 count:3];
              v126[0] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.a), LODWORD(v111.b))));
              v126[1] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.c), LODWORD(v111.d))));
              v126[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.tx), LODWORD(v111.ty))));
              v129[2] = [MEMORY[0x1E4F1C978] arrayWithObjects:v126 count:3];
              objc_msgSend(v41, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v129, 3), getkCVAFaceTracking_Rotation_0());
            }
            unsigned int v60 = (void *)[v40 objectForKeyedSubscript:getkCVAFaceTracking_Intrinsics_0()];
            if (v60)
            {
              unsigned int v61 = v60;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v60, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 0), "floatValue");
              float v63 = v62;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 1), "floatValue");
              float v65 = v64;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 2), "floatValue");
              float v67 = v66;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 2), "floatValue");
              float v69 = v19 * v63;
              float v70 = v21 * v65;
              float v71 = v25 * v70;
              if (a11 == 270 || a11 == 90)
              {
                float v72 = v25 * v70;
              }
              else
              {
                float v72 = v69;
                float v69 = v71;
              }
              double v73 = v67;
              double v74 = v68;
              CGFloat v75 = v120.tx + v120.c * v74 + v120.a * v67;
              CGFloat v76 = v120.d * v74 + v120.b * v73;
              CGFloat v77 = v120.ty + v76;
              *(float *)&CGFloat v76 = v72;
              v124[0] = [NSNumber numberWithFloat:v76];
              v124[1] = &unk_1EFAFF1B0;
              v124[2] = [NSNumber numberWithDouble:v75];
              v125[0] = [MEMORY[0x1E4F1C978] arrayWithObjects:v124 count:3];
              v123[0] = &unk_1EFAFF1B0;
              *(float *)&double v78 = v69;
              v123[1] = [NSNumber numberWithFloat:v78];
              v123[2] = [NSNumber numberWithDouble:v77];
              v125[1] = [MEMORY[0x1E4F1C978] arrayWithObjects:v123 count:3];
              v125[2] = &unk_1EFB031A0;
              objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v125, 3), getkCVAFaceTracking_Intrinsics_0());
            }
            CFNumberRef v79 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v39, "objectForKeyedSubscript:", getkCVAFaceTracking_SmoothData()));
            [v39 setObject:v79 forKeyedSubscript:getkCVAFaceTracking_SmoothData()];
            uint64_t v80 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v79, "objectForKeyedSubscript:", getkCVAFaceTracking_Geometry()));
            [v79 setObject:v80 forKeyedSubscript:getkCVAFaceTracking_Geometry()];
            if ([v80 objectForKeyedSubscript:getkCVAFaceTracking_GeometryLandmarks()])
            {
              CFBooleanRef v81 = objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryLandmarks()), "mutableCopy");
              unint64_t v82 = [v81 length];
              CFBooleanRef v83 = (float32x2_t *)[v81 mutableBytes];
              if (v82 >= 4)
              {
                unint64_t v84 = 0;
                float64x2_t v85 = *(float64x2_t *)&v120.a;
                float64x2_t v86 = *(float64x2_t *)&v120.c;
                float64x2_t v87 = *(float64x2_t *)&v120.tx;
                do
                {
                  *CFBooleanRef v83 = vcvt_f32_f64(vaddq_f64(v87, vmlaq_n_f64(vmulq_n_f64(v86, v83->f32[1]), v85, v83->f32[0])));
                  ++v83;
                  v84 += 2;
                }
                while (v82 >> 2 > v84);
              }
              [v80 setObject:v81 forKeyedSubscript:getkCVAFaceTracking_GeometryLandmarks()];
            }
            if ([v80 objectForKeyedSubscript:getkCVAFaceTracking_GeometryVertices()] && a12)
            {
              double v88 = objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryVertices()), "mutableCopy");
              unint64_t v89 = [v88 length];
              uint64_t v90 = [v88 mutableBytes];
              if (v89 >= 4)
              {
                unint64_t v91 = 0;
                do
                {
                  *(float *)(v90 + 4 * v91) = v25 * *(float *)(v90 + 4 * v91);
                  v91 += 3;
                }
                while (v89 >> 2 > v91);
              }
              [v80 setObject:v88 forKeyedSubscript:getkCVAFaceTracking_GeometryVertices()];
            }
            *(_OWORD *)&t1.a = v102;
            *(_OWORD *)&t1.c = v101;
            CFDictionaryRef v92 = (const __CFDictionary *)[v39 objectForKeyedSubscript:getkCVAFaceTracking_DetectedFaceRect()];
            if (CGRectMakeWithDictionaryRepresentation(v92, (CGRect *)&t1))
            {
              FigCaptureMetadataUtilitiesDenormalizeCropRect(t1.a, t1.b, t1.c, t1.d);
              t1.a = v132.origin.x;
              t1.b = v132.origin.y;
              t1.c = v132.size.width;
              t1.d = v132.size.height;
              CGAffineTransform v122 = v120;
              CGRect v133 = CGRectApplyAffineTransform(v132, &v122);
              t1.a = v133.origin.x;
              t1.b = v133.origin.y;
              t1.c = v133.size.width;
              t1.d = v133.size.height;
              CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
              if (!ImageBuffer) {
                return 4294954516;
              }
              unsigned int v94 = ImageBuffer;
              CVPixelBufferGetWidth(ImageBuffer);
              CVPixelBufferGetHeight(v94);
              FigCaptureMetadataUtilitiesNormalizeCropRect(t1.a, t1.b, t1.c, t1.d);
              t1.a = v134.origin.x;
              t1.b = v134.origin.y;
              t1.c = v134.size.width;
              t1.d = v134.size.height;
              CFDictionaryRef v95 = CGRectCreateDictionaryRepresentation(v134);
              [v39 setObject:v95 forKeyedSubscript:getkCVAFaceTracking_DetectedFaceRect()];
            }
          }
          uint64_t v105 = [obj countByEnumeratingWithState:&v113 objects:v130 count:16];
          if (v105) {
            continue;
          }
          break;
        }
      }
      CMSetAttachment(a1, v26, v29, 1u);
      return 0;
    }
  }
  return result;
}

CGFloat psn_wideBoundingRect(int a1, CGFloat result, CGFloat a3, CGFloat a4, CGFloat a5, float a6, float a7, double a8, float a9)
{
  float v9 = 4032.0 / (a8 * 4224.0);
  float v10 = 1.0 / a8;
  if (!a1) {
    float v10 = v9;
  }
  float v11 = v9 * a9;
  if ((float)(a6 * 1.5) < a7) {
    a7 = a6 * 1.5;
  }
  if (a7 < a6) {
    a7 = a6;
  }
  float v12 = (float)(a7 - a6) / (float)((float)(a6 * 1.5) - a6);
  float v13 = v11 + (float)((float)(1.0 - v11) * v12);
  float v14 = (float)(v10 * a9) + (float)((float)(1.0 - (float)(v10 * a9)) * v12);
  if (v13 != 1.0 || v14 != 1.0) {
    return FigCaptureMetadataUtilitiesScaleRect2D(result, a3, a4, a5, v13);
  }
  return result;
}

uint64_t TimestampedAudioBufferListReset(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(unsigned int **)(result + 48);
    if (v1)
    {
      uint64_t v2 = *v1;
      if (v2)
      {
        int v3 = *(_DWORD *)(result + 16);
        uint64_t v4 = v1 + 3;
        do
        {
          _DWORD *v4 = v3;
          v4 += 4;
          --v2;
        }
        while (v2);
      }
    }
    *(_DWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  return result;
}

uint64_t captureSession_shouldEnableDeferredNodePrepare(uint64_t a1, void *a2, int a3)
{
  if (a2 && [a2 sourceType] != 1)
  {
    uint64_t v10 = v3;
    LODWORD(v9) = 0;
    FigDebugAssert3();
    if (a3) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!a3) {
    return 0;
  }
LABEL_4:
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (captureSession_clientIsCameraOrDerivative(a1)) {
    return objc_msgSend(a2, "imageControlMode", v9, v10) != 4;
  }
  uint64_t result = FigCaptureClientApplicationIDIsMagnifier(*(void *)(DerivedStorage + 88));
  if (result) {
    return objc_msgSend(a2, "imageControlMode", v9, v10) != 4;
  }
  return result;
}

uint64_t captureSessionServer_serializeSessionNotification(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5, void *a6)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    FigDebugAssert3();
    return 1;
  }
  if (a4)
  {
    v58[0] = 0x1EFA56F80;
    v58[1] = 0x1EFA56FA0;
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v58, 2), "containsObject:", a3) & 1) == 0)
    {
      double v57 = a6;
      __int32 v47 = a5;
      uint64_t v9 = CFDictionaryGetValue(a4, @"FormatDescription");
      uint64_t v10 = CFDictionaryGetValue(a4, @"SampleBuffer");
      float32x4_t v56 = (__IOSurface *)CFDictionaryGetValue(a4, @"Surface");
      __int32 v55 = CFDictionaryGetValue(a4, @"PreviewSampleBuffer");
      float v11 = (__IOSurface *)CFDictionaryGetValue(a4, @"PreviewSurface");
      float v12 = (__IOSurface *)CFDictionaryGetValue(a4, @"ThumbnailSurface");
      float v13 = (__IOSurface *)CFDictionaryGetValue(a4, @"DepthDataSurface");
      __int32 v48 = (__IOSurface *)CFDictionaryGetValue(a4, @"ConstantColorConfidenceMapSurface");
      float v14 = (__IOSurface *)CFDictionaryGetValue(a4, @"PortraitEffectsMatteSurface");
      float32x4_t v53 = (__IOSurface *)CFDictionaryGetValue(a4, @"HairSegmentationMatteSurface");
      uint64_t v52 = (__IOSurface *)CFDictionaryGetValue(a4, @"SkinSegmentationMatteSurface");
      __int32 v51 = (__IOSurface *)CFDictionaryGetValue(a4, @"TeethSegmentationMatteSurface");
      __int32 v50 = (__IOSurface *)CFDictionaryGetValue(a4, @"GlassesSegmentationMatteSurface");
      float32x4_t v54 = (__IOSurface *)CFDictionaryGetValue(a4, @"DeferredPhotoProxySurface");
      __int32 v49 = CFDictionaryGetValue(a4, @"MasterClock");
      double v15 = (void *)CFDictionaryGetValue(a4, @"RemoteQueueReceiver");
      double v16 = v14;
      BOOL v17 = v10 != 0;
      if (!v9
        && !v10
        && !v56
        && !v54
        && !v55
        && !v11
        && !v12
        && !v13
        && !v16
        && !v53
        && !v52
        && !v51
        && !v50
        && !v15
        && !v49
        && !v48)
      {
        return 0;
      }
      xpc_object_t value = v15;
      CGFloat v46 = v16;
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex Count = CFDictionaryGetCount(a4);
      MutableCopdouble y = CFDictionaryCreateMutableCopy(v20, Count, a4);
      CFDictionaryRemoveValue(MutableCopy, @"ClientAuditToken");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsVideoSource");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsStillImageSink");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsMovieFileSink");
      CFDictionaryRemoveValue(MutableCopy, @"ReconfiguredWhileRunning");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsVideoSource");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsStillImageSink");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsMovieFileSink");
      CFDictionaryRemoveValue(MutableCopy, @"ClientAuditToken");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsVideoSource");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsStillImageSink");
      CFDictionaryRemoveValue(MutableCopy, @"ContainsMovieFileSink");
      if (v9)
      {
        CFDictionaryRemoveValue(MutableCopy, @"FormatDescription");
        if (FigRemote_CreateSerializableDictionaryForFormatDescription()) {
          goto LABEL_76;
        }
        CFDictionarySetValue(MutableCopy, @"FormatDescription_Serialized", 0);
      }
      if (v10)
      {
        CFDictionaryRemoveValue(MutableCopy, @"SampleBuffer");
        if (FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer()) {
          goto LABEL_76;
        }
        FigXPCMessageSetAndConsumeVMData();
      }
      if (v56)
      {
        CFDictionaryRemoveValue(MutableCopy, @"Surface");
        xpc_object_t XPCObject = IOSurfaceCreateXPCObject(v56);
        if (!XPCObject) {
          goto LABEL_76;
        }
        double v24 = XPCObject;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_Surface_Serialized, XPCObject);
        xpc_release(v24);
        BOOL v17 = 1;
        if (!v55) {
          goto LABEL_35;
        }
      }
      else if (!v55)
      {
        goto LABEL_35;
      }
      CFDictionaryRemoveValue(MutableCopy, @"PreviewSampleBuffer");
      if (FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer()) {
        goto LABEL_76;
      }
      FigXPCMessageSetAndConsumeVMData();
      BOOL v17 = 1;
LABEL_35:
      if (v11)
      {
        CFDictionaryRemoveValue(MutableCopy, @"PreviewSurface");
        xpc_object_t v25 = IOSurfaceCreateXPCObject(v11);
        if (!v25) {
          goto LABEL_76;
        }
        CFStringRef v26 = v25;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSurface_Serialized, v25);
        xpc_release(v26);
        BOOL v17 = 1;
      }
      if (v12)
      {
        CFDictionaryRemoveValue(MutableCopy, @"ThumbnailSurface");
        xpc_object_t v27 = IOSurfaceCreateXPCObject(v12);
        if (!v27) {
          goto LABEL_76;
        }
        CGRect v28 = v27;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_ThumbnailSurface_Serialized, v27);
        xpc_release(v28);
        BOOL v17 = 1;
      }
      if (v13)
      {
        CFDictionaryRemoveValue(MutableCopy, @"DepthDataSurface");
        xpc_object_t v29 = IOSurfaceCreateXPCObject(v13);
        if (!v29) {
          goto LABEL_76;
        }
        CGRect v30 = v29;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_DepthDataSurface_Serialized, v29);
        xpc_release(v30);
        BOOL v17 = 1;
      }
      if (v48)
      {
        CFDictionaryRemoveValue(MutableCopy, @"ConstantColorConfidenceMapSurface");
        xpc_object_t v31 = IOSurfaceCreateXPCObject(v48);
        if (!v31) {
          goto LABEL_76;
        }
        int32x4_t v32 = v31;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_ConstantColorConfidenceMapSurface_Serialized, v31);
        xpc_release(v32);
        BOOL v17 = 1;
      }
      if (v46)
      {
        CFDictionaryRemoveValue(MutableCopy, @"PortraitEffectsMatteSurface");
        xpc_object_t v33 = IOSurfaceCreateXPCObject(v46);
        if (!v33) {
          goto LABEL_76;
        }
        __float2 v34 = v33;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized, v33);
        xpc_release(v34);
        BOOL v17 = 1;
      }
      if (v53)
      {
        CFDictionaryRemoveValue(MutableCopy, @"HairSegmentationMatteSurface");
        xpc_object_t v35 = IOSurfaceCreateXPCObject(v53);
        if (!v35) {
          goto LABEL_76;
        }
        int32x4_t v36 = v35;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_HairSegmentationMatteSurface_Serialized, v35);
        xpc_release(v36);
        BOOL v17 = 1;
      }
      if (v52)
      {
        CFDictionaryRemoveValue(MutableCopy, @"SkinSegmentationMatteSurface");
        xpc_object_t v37 = IOSurfaceCreateXPCObject(v52);
        if (!v37) {
          goto LABEL_76;
        }
        uint64_t v38 = v37;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized, v37);
        xpc_release(v38);
        BOOL v17 = 1;
      }
      if (v51)
      {
        CFDictionaryRemoveValue(MutableCopy, @"TeethSegmentationMatteSurface");
        xpc_object_t v39 = IOSurfaceCreateXPCObject(v51);
        if (!v39) {
          goto LABEL_76;
        }
        uint64_t v40 = v39;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized, v39);
        xpc_release(v40);
        BOOL v17 = 1;
      }
      if (v50)
      {
        CFDictionaryRemoveValue(MutableCopy, @"GlassesSegmentationMatteSurface");
        xpc_object_t v41 = IOSurfaceCreateXPCObject(v50);
        if (!v41) {
          goto LABEL_76;
        }
        unsigned int v42 = v41;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized, v41);
        xpc_release(v42);
        BOOL v17 = 1;
      }
      if (v54)
      {
        CFDictionaryRemoveValue(MutableCopy, @"DeferredPhotoProxySurface");
        xpc_object_t v43 = IOSurfaceCreateXPCObject(v54);
        if (!v43) {
          goto LABEL_76;
        }
        CGFloat v44 = v43;
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface_Serialized, v43);
        xpc_release(v44);
        BOOL v17 = 1;
      }
      if (v49) {
        CFDictionaryRemoveValue(MutableCopy, @"MasterClock");
      }
      if (value)
      {
        xpc_dictionary_set_value(v57, (const char *)kFigCaptureSessionRemoteQueueUpdatedNotificationPayloadKey_RemoteQueueReceiver_Serialized, value);
        CFDictionaryRemoveValue(MutableCopy, @"RemoteQueueReceiver");
      }
      else if (!v17)
      {
        *__int32 v47 = MutableCopy;
        return 4;
      }
      if (!FigXPCMessageSetCFDictionary())
      {
        uint64_t v18 = 2;
        if (!MutableCopy) {
          return v18;
        }
LABEL_72:
        CFRelease(MutableCopy);
        return v18;
      }
LABEL_76:
      FigDebugAssert3();
      uint64_t v18 = 1;
      if (!MutableCopy) {
        return v18;
      }
      goto LABEL_72;
    }
    return 1;
  }
  return 0;
}

BOOL captureSession_shouldUseSceneClassifierToGateMetadataDetection(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v3 = 0;
  v17[3] = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    if (a1
      && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage()) != 0
      && (FigCaptureClientApplicationIDIsVisualIntelligenceCamera(*(void **)(DerivedStorage + 88)) & 1) != 0
      || captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(a1, (void *)[a3 sourceConfiguration]))
    {
      int v7 = (void *)[a3 metadataIdentifiers];
      uint64_t v13 = 0;
      float v14 = &v13;
      uint64_t v15 = 0x2020000000;
      char v16 = 0;
      uint64_t v8 = *MEMORY[0x1E4F55990];
      v17[0] = *MEMORY[0x1E4F21878];
      v17[1] = v8;
      v17[2] = *MEMORY[0x1E4F559C8];
      uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:3];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = __captureSession_shouldUseSceneClassifierToGateMetadataDetection_block_invoke;
      v12[3] = &unk_1E5C28A88;
      double v12[4] = v9;
      void v12[5] = &v13;
      uint64_t v10 = objc_msgSend(v7, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithBlock:", v12));
      if (*((unsigned char *)v14 + 24)) {
        BOOL v3 = [v10 count] == 0;
      }
      else {
        BOOL v3 = 0;
      }
      _Block_object_dispose(&v13, 8);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_1A59ED988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", @"AVCaptureSessionPresetPhoto");
  LODWORD(DerivedStorage) = *(unsigned __int8 *)(DerivedStorage + 375);
  unsigned int IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
  if (DerivedStorage) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = IsCameraOrDerivative;
  }
  if (v5) {
    return v7;
  }
  else {
    return 0;
  }
}

void captureSession_setPreviewRunning(const void *a1, uint64_t a2, void *a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if ([a3 previewRunning] != a2)
  {
    uint64_t v9 = @"SectionID";
    v10[0] = [a3 sinkID];
    int v6 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    unsigned int v7 = kFigCaptureSessionPreviewSinkNotification_DidStartPreviewing;
    if (!a2) {
      unsigned int v7 = kFigCaptureSessionPreviewSinkNotification_DidStopPreviewing;
    }
    uint64_t v8 = *v7;
    [a3 setPreviewRunning:a2];
    captureSession_postNotificationWithPayload(a1, v8, v6);
  }
}

uint64_t BWCIFilterArrayContainsPortraitFilters(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(a1);
        }
        NSClassFromString(&cfstr_Cideptheffect.isa);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(&cfstr_Ciportraiteffe_8.isa);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(&cfstr_Ciportraiteffe_9.isa);
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              continue;
            }
          }
        }
        return 1;
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t result = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t BWDeviceIsiPad()
{
  if (BWDeviceIsiPad_onceToken != -1) {
    dispatch_once(&BWDeviceIsiPad_onceToken, &__block_literal_global_54);
  }
  return BWDeviceIsiPad_isiPad;
}

uint64_t FigCaptureMainScreenDimensions(int a1)
{
  unsigned int v2 = MGGetSInt32Answer();
  unsigned int v3 = MGGetSInt32Answer();
  BOOL v4 = (int)v3 > (int)v2;
  BOOL v5 = (a1 & v4) == 0;
  if ((a1 & v4) != 0) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (v5) {
    uint64_t v7 = v2;
  }
  else {
    uint64_t v7 = v3;
  }
  return v7 | (v6 << 32);
}

double BWGetOriginalPresentationTimeStampFromBuffer@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  CFDictionaryRef v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  if (v4) {
    CMTimeMakeFromDictionary(&v7, v4);
  }
  else {
    CMSampleBufferGetPresentationTimeStamp(&v7, (CMSampleBufferRef)a1);
  }
  double result = *(double *)&v7.value;
  *(CMTime *)a2 = v7;
  return result;
}

void *FigRemoteOperationReceiverCreateMessageReceiver(void *a1, void *a2)
{
  unsigned int v2 = a2;
  if (a2)
  {
    if (FigRemoteQueueReceiverGetContext((uint64_t)a1))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    CFDictionaryRef v4 = (char *)malloc_type_malloc(0x78uLL, 0x10E20404DDAD7CFuLL);
    *(void *)CFDictionaryRef v4 = FigSimpleMutexCreate();
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 8_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    FigRemoteQueueReceiverSetContext(a1, (uint64_t)v4, &__block_literal_global_8);
    uint64_t v5 = _Block_copy(v2);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __FigRemoteOperationReceiverCreateMessageReceiver_block_invoke;
    aBlock[3] = &unk_1E5C24A60;
    aBlock[4] = v5;
    unsigned int v2 = _Block_copy(aBlock);
    _Block_release(v5);
  }
  return v2;
}

void *FigRemoteQueueReceiverSetContext(void *result, uint64_t a2, void *aBlock)
{
  if (result)
  {
    uint64_t v5 = result;
    if (result[10])
    {
      uint64_t v6 = result[11];
      if (v6) {
        (*(void (**)(void))(v6 + 16))();
      }
    }
    v5[10] = a2;
    double result = _Block_copy(aBlock);
    v5[11] = result;
  }
  return result;
}

uint64_t FigRemoteQueueReceiverGetContext(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t FigCaptureTCCAccessPreflight()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  tcc_service_singleton_for_CF_name();
  tcc_credential_singleton_for_self();
  uint64_t v0 = (void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  tcc_server_message_request_authorization();

  unint64_t v1 = v6[3];
  if (v1 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = dword_1A5F0C610[v1];
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A59F58CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __FigCaptureSessionPrewarm_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    captureSession_prewarmMemoryPool(*(unsigned __int8 *)(a1 + 41), *(void **)(a1 + 32));
  }
}

uint64_t captureSessionRemote_StartRunning(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_commonAsyncMessage(uint64_t a1)
{
  if (!captureSessionRemote_createBasicMessage(a1)
    || FigXPCMessageSetCFString()
    || FigXPCMessageSetCFData()
    || FigXPCRemoteClientSendAsyncMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_SetSectionProperty(uint64_t a1, uint64_t a2, const void *a3, opaqueCMSampleBuffer *a4)
{
  uint64_t BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = 4294954510;
    goto LABEL_29;
  }
  uint64_t v7 = FigXPCMessageSetCFString();
  if (v7) {
    goto LABEL_8;
  }
  uint64_t v7 = FigXPCMessageSetCFString();
  if (v7) {
    goto LABEL_8;
  }
  if (CFEqual(a3, @"CaptureSessionMetadataSource_MetadataSampleBuffer")
    && (CFTypeID v8 = CFGetTypeID(a4), v8 == CMSampleBufferGetTypeID()))
  {
    FormatDescriptioint n = CMSampleBufferGetFormatDescription(a4);
    CFTypeRef cf = CFRetain(FormatDescription);
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
    CFRelease(cf);
    if (SerializedAtomDataAndSurfaceForSampleBuffer) {
      goto LABEL_36;
    }
    uint64_t v7 = FigXPCMessageSetAndConsumeVMData();
    if (v7)
    {
LABEL_8:
      uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = v7;
      fig_log_get_emitter();
LABEL_37:
      FigDebugAssert3();
      goto LABEL_29;
    }
  }
  else if (CFEqual(a3, @"PreviewFilters") && (CFTypeID v11 = CFGetTypeID(a4), v11 == CFArrayGetTypeID()))
  {
    float v12 = (void *)MEMORY[0x1A6272C70]();
    csr_serializeObjectUsingNSSecureCoding((uint64_t)a4);
    uint64_t v13 = FigXPCMessageSetCFData();
    if (v13)
    {
      uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = v13;
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_29;
    }
  }
  else if (CFEqual(a3, @"SemanticStyles") && (CFTypeID v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID()))
  {
    uint64_t v15 = (void *)[(opaqueCMSampleBuffer *)a4 mutableCopy];
    xpc_object_t empty = xpc_dictionary_create_empty();
    BOOL v17 = @"SemanticStyleSet";
    if ([(opaqueCMSampleBuffer *)a4 objectForKeyedSubscript:@"SemanticStyleSet"])
    {
      uint64_t v18 = (void *)[v15 objectForKeyedSubscript:@"SemanticStyleSet"];
      double v19 = &kFigCaptureSessionSetSectionProperty_SetSemanticStylesKey_SemanticStyleSet;
    }
    else
    {
      BOOL v17 = @"SemanticStyle";
      uint64_t v18 = (void *)[(opaqueCMSampleBuffer *)a4 objectForKeyedSubscript:@"SemanticStyle"];
      double v19 = &kFigCaptureSessionSetSectionProperty_SetSemanticStylesKey_SemanticStyle;
    }
    xpc_dictionary_set_value(empty, *v19, (xpc_object_t)[v18 copyXPCEncoding]);
    [v15 setObject:0 forKeyedSubscript:v17];
    FigXPCRelease();
    double v21 = (void *)[v15 objectForKeyedSubscript:@"CAContextFencePortSendRight"];
    if (v21)
    {
      [v21 port];
      xpc_dictionary_set_mach_send();
      [v15 setObject:0 forKeyedSubscript:@"CAContextFencePortSendRight"];
    }
    xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E4F20290], empty);
    uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigXPCMessageSetCFObject();

    FigXPCRelease();
    if (SerializedAtomDataAndSurfaceForSampleBuffer) {
      goto LABEL_36;
    }
  }
  else if (CFEqual(a3, @"PrimaryCaptureRectAspectRatio"))
  {
    CFAllocatorRef v20 = (void *)[(opaqueCMSampleBuffer *)a4 objectForKeyedSubscript:@"CAContextFencePortSendRight"];
    if (v20)
    {
      [v20 port];
      xpc_dictionary_set_mach_send();
      objc_msgSend((id)-[opaqueCMSampleBuffer mutableCopy](a4, "mutableCopy"), "setObject:forKeyedSubscript:", 0, @"CAContextFencePortSendRight");
    }
    uint64_t v7 = FigXPCMessageSetCFObject();
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = FigXPCMessageSetCFObject();
    if (v7) {
      goto LABEL_8;
    }
  }
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (SerializedAtomDataAndSurfaceForSampleBuffer)
  {
LABEL_36:
    fig_log_get_emitter();
    goto LABEL_37;
  }
LABEL_29:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return SerializedAtomDataAndSurfaceForSampleBuffer;
}

uint64_t captureSessionRemote_SetConfiguration(uint64_t a1, void *a2)
{
  uint64_t BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || (CFDictionaryRef v4 = (void *)[a2 copyXPCEncoding],
        xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E4F20290], v4),
        xpc_release(v4),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_createBasicMessage(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  if (captureSessionRemote_getObjectID(a1, &v2) || FigXPCCreateBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

uint64_t captureSessionRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigVideoCaptureSourceSetSessionProperty(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  return captureSource_setPropertyWithDeviceCheck(a1, 1, a2, a3, a4);
}

uint64_t cs_configurationsTransitionBetweenCenterStageAndManualFraming(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v3 = (void *)[a1 connectionConfigurations];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        CFTypeID v8 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        int v9 = objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "cinematicFramingEnabled");
        if ((v9 & 1) != 0
          || (objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "manualCinematicFramingEnabled") & 1) != 0)
        {
          int v11 = v9 ^ 1;
          int v10 = v9 ^ 1;
          goto LABEL_13;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
      int v10 = 0;
      int v11 = 1;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
  }
LABEL_13:
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  float v12 = objc_msgSend(a2, "connectionConfigurations", 0);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v21;
LABEL_15:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v21 != v15) {
        objc_enumerationMutation(v12);
      }
      BOOL v17 = *(void **)(*((void *)&v20 + 1) + 8 * v16);
      if (objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "cinematicFramingEnabled"))
      {
        int v18 = 1;
        return v10 & v18;
      }
      if (objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "manualCinematicFramingEnabled")) {
        break;
      }
      if (v14 == ++v16)
      {
        uint64_t v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v14) {
          goto LABEL_15;
        }
        goto LABEL_25;
      }
    }
    if (v11) {
      goto LABEL_25;
    }
    return 1;
  }
  else
  {
LABEL_25:
    int v18 = 0;
    return v10 & v18;
  }
}

void cs_updateConfigurationsWithCaptureSource(void *a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v53 = 0;
  id v54 = 0;
  id v51 = 0;
  id v52 = 0;
  id v49 = 0;
  id v50 = 0;
  id v47 = 0;
  id v48 = 0;
  CFDictionaryRef dict = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v3 = (void *)[a1 connectionConfigurations];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v42 objects:v55 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = 0;
    uint64_t v7 = *(void *)v43;
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    int v9 = (CGSize *)MEMORY[0x1E4F1DB30];
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v43 != v7) {
          objc_enumerationMutation(v3);
        }
        int v11 = (void *)[*(id *)(*((void *)&v42 + 1) + 8 * i) sourceConfiguration];
        if ([v11 source] == a2)
        {
          if ((v6 & 1) == 0)
          {
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v12) {
              uint64_t v13 = v12;
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v13 + 48);
            if (v14) {
              v14(a2, @"ActiveMaxFrameRate", v8, &v54);
            }
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v15) {
              uint64_t v16 = v15;
            }
            else {
              uint64_t v16 = 0;
            }
            BOOL v17 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v16 + 48);
            if (v17) {
              v17(a2, @"ActiveMinFrameRate", v8, &v53);
            }
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            long long v20 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v19 + 48);
            if (v20) {
              v20(a2, @"VideoZoomFactor", v8, &v52);
            }
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v21) {
              uint64_t v22 = v21;
            }
            else {
              uint64_t v22 = 0;
            }
            long long v23 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v22 + 48);
            if (v23) {
              v23(a2, @"FaceDetectionConfiguration", v8, &v51);
            }
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            long long v26 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v25 + 48);
            if (v26) {
              v26(a2, @"AutoAdjustImageControlMode", v8, &v50);
            }
            if (([v50 BOOLValue] & 1) == 0)
            {
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v28 = v27 ? v27 : 0;
              xpc_object_t v29 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v28 + 48);
              if (v29) {
                v29(a2, @"ImageControlMode", v8, &v49);
              }
            }
            uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v30) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = 0;
            }
            int32x4_t v32 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v31 + 48);
            if (v32) {
              v32(a2, @"FaceDrivenAEAFMode", v8, &v48);
            }
            unsigned int v33 = [v11 sourceDeviceType];
            if (v33 <= 9 && ((1 << v33) & 0x310) != 0)
            {
              uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v35 = v34 ? v34 : 0;
              int32x4_t v36 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(v35 + 48);
              if (v36) {
                v36(a2, @"EligibleFallbackCaptureSourceDeviceTypes", v8, &v47);
              }
            }
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            xpc_object_t v39 = *(void (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v38 + 48);
            if (v39) {
              v39(a2, @"NonDestructiveCropSize", v8, &dict);
            }
          }
          if (v54)
          {
            [v54 floatValue];
            objc_msgSend(v11, "setRequiredMaxFrameRate:");
          }
          if (v53)
          {
            [v53 floatValue];
            objc_msgSend(v11, "setRequiredMinFrameRate:");
          }
          if (v52)
          {
            [v52 floatValue];
            objc_msgSend(v11, "setVideoZoomFactor:");
          }
          if (v51) {
            objc_msgSend(v11, "setFaceDetectionConfiguration:");
          }
          if (v49) {
            objc_msgSend(v11, "setImageControlMode:", objc_msgSend(v49, "intValue"));
          }
          if (v48) {
            objc_msgSend(v11, "setFaceDrivenAEAFMode:", objc_msgSend(v48, "intValue"));
          }
          if (v47) {
            objc_msgSend(v11, "setFallbackPrimaryConstituentDeviceTypes:");
          }
          if (dict)
          {
            CGSize size = *v9;
            if (CGSizeMakeWithDictionaryRepresentation(dict, &size))
            {
              [v11 setNonDestructiveCropEnabled:1];
              objc_msgSend(v11, "setNormalizedNonDestructiveCropSize:", size.width, size.height);
            }
          }
          char v6 = 1;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v42 objects:v55 count:16];
    }
    while (v5);
    id v40 = v53;
  }
  else
  {
    id v40 = 0;
  }
}

BOOL captureSession_isGraphCalloutCancelled(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 360));
  int v5 = *(_DWORD *)(a1 + 408);
  os_unfair_lock_unlock(v4);
  if (v5) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = 1;
  }
  return v6 || *(void *)(a1 + 640) != a2 || *(void *)(a1 + 632) == 0;
}

void __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v3 + 537) && !(*(unsigned __int8 *)(v3 + 376) | *(unsigned __int8 *)(v3 + 539)))
    {
      if (*(unsigned char *)(v3 + 112))
      {
        int v4 = *(unsigned __int8 *)(v3 + 538);
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
        if (!v4) {
          return;
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
      }
      int v5 = *(void **)(*(void *)(a1 + 32) + 632);
      [v5 startDeferredSourceNodesIfNeeded];
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
    }
  }
}

void cs_reportCameraAppLaunchCoreAnalyticsData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = objc_alloc_init(BWCameraAppLaunchAnalyticsPayload);
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setIsPrewarmed:a1];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setLaunchMode:@"Photo"];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setDevicePosition:1];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setPrewarmReason:a2];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setLaunchDuration:a3];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setMemoryStatusLevel:qword_1EB4C5988];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setThermalLevel:HIDWORD(qword_1EB4C5988)];
  -[BWCameraAppLaunchAnalyticsPayload setIspStartDuration:](v8, "setIspStartDuration:", objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "createDeviceTime"));
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setNumberOfGraphStartsDuringLaunch:dword_1EB4C5990];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setDeviceIsLocked:byte_1EB4C5994];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setIsColdLaunch:byte_1EB4C5948];
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setDeviceStolenCondition:0];
  if ((void)xmmword_1EB4C5970
    && (!byte_1EB4C5995 ? (uint64_t v6 = 1) : (uint64_t v6 = 2),
        [(BWCameraAppLaunchAnalyticsPayload *)v8 setDeviceStolenCondition:v6],
        *((void *)&xmmword_1EB4C5970 + 1)))
  {
    uint64_t v7 = ((int)(FigHostTimeToNanoseconds() / 1000 + 999) / 1000);
  }
  else
  {
    uint64_t v7 = 0;
  }
  [(BWCameraAppLaunchAnalyticsPayload *)v8 setDeviceStolenDuration:v7];
  [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v8];
}

uint64_t VisionLibrary()
{
  unint64_t v1 = 0;
  uint64_t result = VisionLibraryCore();
  if (!result) {
    VisionLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t VisionLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = VisionLibraryCore_frameworkLibrary;
  uint64_t v5 = VisionLibraryCore_frameworkLibrary;
  if (!VisionLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C258B8;
    long long v7 = *(_OWORD *)&off_1E5C258C8;
    v3[3] = _sl_dlopen();
    VisionLibraryCore_frameworkLibrardouble y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A59FA148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_buildGraphWithConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  unsigned int v733 = v6;
  int v786 = v7;
  unsigned int v705 = v8;
  id v751 = v9;
  int v11 = v10;
  uint64_t v12 = (const void *)v5;
  uint64_t v986 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v921 = 0;
  __int16 v920 = 0;
  char v919 = 0;
  v708 = v11;
  char v744 = [v11 configuresAppAudioSessionToMixWithOthers];
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v694 = v4;
    LODWORD(v686) = 0;
    FigDebugAssert3();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (dword_1EB4C5110)
  {
    LODWORD(v975) = 0;
    LOBYTE(v971) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(DerivedStorage + 632))
  {
    FigDebugAssert3();
LABEL_757:
    unsigned int v656 = FigSignalErrorAt();
    BOOL v699 = 0;
    unsigned int v921 = v656;
    goto LABEL_725;
  }
  uint64_t v15 = [*(id *)(DerivedStorage + 656) count];
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  unsigned int v921 = captureSession_checkClientSessionIsAllowedToRun((uint64_t)v12, v11, (unsigned char *)&v920 + 1, &v919, &v920);
  locuint64_t k = (os_unfair_lock_s *)(DerivedStorage + 360);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  BOOL v699 = v921 == 0;
  uint64_t v810 = (uint64_t)v12;
  if (v921) {
    goto LABEL_710;
  }
  if ((int)FigCapturePlatformIdentifier() < 10)
  {
    int v16 = 1;
  }
  else if (v919)
  {
    int v16 = 3;
  }
  else
  {
    int v16 = [v11 allCameraSourcesAreMetadataCameras] ^ 1;
  }
  unsigned int v776 = v16;
  BOOL v17 = *(void **)(DerivedStorage + 712);
  if (v17 && v705)
  {
    if (*(unsigned char *)(DerivedStorage + 112))
    {
      objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "removeLayoutObserver:", *(void *)(DerivedStorage + 712));
      BOOL v17 = *(void **)(DerivedStorage + 712);
    }

    BOOL v17 = -[BWFigCaptureSession initWithFigCaptureSession:]([BWFigCaptureSession alloc], (uint64_t)v12);
    *(void *)(DerivedStorage + 712) = v17;
    if (*(unsigned char *)(DerivedStorage + 112))
    {
      objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "addLayoutObserver:", *(void *)(DerivedStorage + 712));
      BOOL v17 = *(void **)(DerivedStorage + 712);
    }
  }
  if (!v17 || (uint64_t v18 = objc_alloc_init(BWGraph), (*(void *)(DerivedStorage + 632) = v18) == 0))
  {
    FigDebugAssert3();
    goto LABEL_757;
  }
  ++*(void *)(DerivedStorage + 640);
  v809 = v18;
  [(BWGraph *)v18 setClientApplicationID:*(void *)(DerivedStorage + 88)];
  [*(id *)(DerivedStorage + 632) setClientPID:*(unsigned int *)(DerivedStorage + 16)];
  objc_msgSend(*(id *)(DerivedStorage + 632), "setClientExpectsCameraMountedInLandscapeOrientation:", objc_msgSend(v11, "clientExpectsCameraMountedInLandscapeOrientation"));
  [*(id *)(DerivedStorage + 632) setStatusDelegate:*(void *)(DerivedStorage + 712)];
  long long v20 = objc_alloc_init(FigCaptureSessionPipelines);
  *(void *)(DerivedStorage + 664) = v20;
  uint64_t v21 = *(void **)(DerivedStorage + 712);
  if (v21)
  {
    objc_setProperty_nonatomic(v21, v19, v20, 16);
    uint64_t v22 = *(void *)(DerivedStorage + 712);
    if (v22) {
      *(void *)(v22 + 24) = *(void *)(DerivedStorage + 640);
    }
  }
  v813 = v20;
  objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor", v686, v694), "addLayoutObserverWithoutImmediateCallback:", *(void *)(DerivedStorage + 712));
  unsigned int v738 = objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor"), "isDisplayConnected");
  [*(id *)(DerivedStorage + 632) beginConfiguration];
  [*(id *)(DerivedStorage + 632) setMemoryAnalyticsReportingEnabled:1];
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 632), "memoryAnalyticsPayload"), "setClientApplicationID:", *(void *)(DerivedStorage + 88));
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 632), "memoryAnalyticsPayload"), "setClientIsCameraOrDerivative:", captureSession_clientIsCameraOrDerivative((uint64_t)v12));
  if ([*(id *)(DerivedStorage + 632) memoryAnalyticsReportingEnabled]) {
    [+[FigCaptureMemoryReporter sharedInstance] resetPeakFootprint];
  }
  long long v918 = 0u;
  long long v917 = 0u;
  long long v916 = 0u;
  long long v915 = 0u;
  long long v23 = (void *)[v11 connectionConfigurations];
  uint64_t v24 = [v23 countByEnumeratingWithState:&v915 objects:v969 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v916;
    while (2)
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v916 != v26) {
          objc_enumerationMutation(v23);
        }
        uint64_t v28 = *(void **)(*((void *)&v915 + 1) + 8 * i);
        uint64_t v29 = [v28 irisSinkConfiguration];
        if (v29)
        {
          uint64_t v30 = (void *)v29;
          if ([v28 mediaType] == 1986618469)
          {
            objc_msgSend(-[FigCaptureSessionPipelines movieFileSinkPipelineWithSinkID:](v813, "movieFileSinkPipelineWithSinkID:", objc_msgSend(v30, "sinkID")), "setMomentCaptureMovieRecordingEnabled:", objc_msgSend(v30, "momentCaptureMovieRecordingEnabled"));
            goto LABEL_38;
          }
        }
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v915 objects:v969 count:16];
      if (v25) {
        continue;
      }
      break;
    }
  }
LABEL_38:
  unsigned __int8 v700 = cs_audioIsPlayingToBuiltInSpeaker((void *)[MEMORY[0x1E4F4E9F0] sharedInstance]);
  uint64_t v12 = (const void *)v810;
  uint64_t v31 = [[FigCaptureSessionParsedConfiguration alloc] initWithSessionConfiguration:v11 clientSetsUserInitiatedCaptureRequestTime:captureSession_clientSetsUserInitiatedCaptureRequestTime() restrictions:*(void *)(DerivedStorage + 440)];
  if (!v31)
  {
    unsigned int v656 = FigSignalErrorAt();
    unsigned int v921 = v656;
    BOOL v699 = 1;
    goto LABEL_725;
  }
  int32x4_t v32 = v31;
  *(unsigned char *)(DerivedStorage + 696) = [(FigCaptureSessionParsedConfiguration *)v31 useOfflineVISPipeline];
  long long v911 = 0u;
  long long v912 = 0u;
  long long v913 = 0u;
  long long v914 = 0u;
  unsigned int v33 = [(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations];
  uint64_t v34 = [(NSArray *)v33 countByEnumeratingWithState:&v911 objects:v968 count:16];
  if (v34)
  {
    uint64_t v35 = v34;
    int v36 = 0;
    uint64_t v37 = *(void *)v912;
    uint64_t v38 = v813;
    do
    {
      for (uint64_t j = 0; j != v35; ++j)
      {
        if (*(void *)v912 != v37) {
          objc_enumerationMutation(v33);
        }
        int v40 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v911 + 1) + 8 * j), "cameraConfiguration"), "sourceDeviceType");
        if (v40 != 5 && v40 != 10) {
          ++v36;
        }
      }
      uint64_t v35 = [(NSArray *)v33 countByEnumeratingWithState:&v911 objects:v968 count:16];
    }
    while (v35);
  }
  else
  {
    int v36 = 0;
    uint64_t v38 = v813;
  }
  *(unsigned char *)(DerivedStorage + 649) = [(FigCaptureSessionParsedConfiguration *)v32 empty];
  shouldPrewarmMemoryCFAllocatorRef Pool = captureSession_shouldPrewarmMemoryPool();
  captureSession_cancelMemoryPoolPrewarming(0, [(NSArray *)[(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations] count] == 0);
  newCFNumberRef Value = [(FigCaptureSessionParsedConfiguration *)v32 smartStyle];
  uint64_t v43 = *(void *)(CMBaseObjectGetDerivedStorage() + 88);
  SystemStyle = (void *)FigCaptureSmartStyleSettingsGetSystemStyle(v43);
  if (SystemStyle)
  {
    if ((objc_msgSend(SystemStyle, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null")) & 1) == 0)
    {
      id SystemStyleBackgroundedTimestamp = FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp(v43);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "timeIntervalSince1970");
      double v47 = v46;
      [SystemStyleBackgroundedTimestamp doubleValue];
      if (v47 - v48 > 30.0) {
        FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID(v43);
      }
    }
  }
  if (!newValue) {
    newCFNumberRef Value = (char *)captureSession_getSystemStyleFromDefaults();
  }
  if (cs_isTrueVideoCaptureEnabled(v32)) {
    *(void *)(DerivedStorage + 736) = dispatch_semaphore_create(1);
  }
  v811 = v32;
  uint64_t v812 = DerivedStorage;
  if ([(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations])
  {
    if (v15)
    {
      if (!shouldPrewarmMemoryPool) {
        goto LABEL_182;
      }
      goto LABEL_178;
    }
    BOOL v709 = shouldPrewarmMemoryPool;
    int v711 = v36;
    uint64_t v49 = [(NSArray *)[(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations] count];
    id v793 = (id)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v49];
    id v713 = (id)v49;
    id v767 = (id)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v49];
    long long v907 = 0u;
    long long v908 = 0u;
    long long v909 = 0u;
    long long v910 = 0u;
    id obj = [(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations];
    uint64_t v50 = [(NSArray *)obj countByEnumeratingWithState:&v907 objects:v967 count:16];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = *(void *)v908;
      uint64_t v53 = MEMORY[0x1E4F1CC38];
      do
      {
        for (uint64_t k = 0; k != v51; ++k)
        {
          if (*(void *)v908 != v52) {
            objc_enumerationMutation(obj);
          }
          __int32 v55 = *(void **)(*((void *)&v907 + 1) + 8 * k);
          uint64_t v56 = (void *)[v55 cameraConfiguration];
          double v57 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          if (cs_timeOfFlightAssistedAutoFocusEnabled(v56)) {
            [v57 setObject:v53 forKeyedSubscript:0x1EFA6BE20];
          }
          if (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v56, "source"), 0x1EFA6B2C0), "BOOLValue"))objc_msgSend(v57, "setObject:forKeyedSubscript:", v53, 0x1EFA6BE00); {
          if ([v56 depthDataDeliveryEnabled])
          }
          {
            int v58 = [v56 sourceDeviceType];
            if (v58 == 12 || v58 == 6) {
              [v57 setObject:v53 forKeyedSubscript:0x1EFA6BE40];
            }
          }
          if (*(unsigned char *)(DerivedStorage + 112)) {
            [v57 setObject:v53 forKeyedSubscript:@"SuspendAdjustingFocusNotifications"];
          }
          objc_msgSend(v57, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v776), 0x1EFA6BE60);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v55, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "ultraHighResolutionZeroShutterLagSupportEnabled"))objc_msgSend(v57, "setObject:forKeyedSubscript:", v53, 0x1EFA6BE80); {
          objc_msgSend(v793, "addObject:", objc_msgSend(v56, "source"));
          }
          [v767 addObject:v57];
        }
        uint64_t v51 = [(NSArray *)obj countByEnumeratingWithState:&v907 objects:v967 count:16];
      }
      while (v51);
    }
    id v906 = 0;
    memset(v979, 0, sizeof(v979));
    long long v980 = 0u;
    long long v981 = 0u;
    unsigned int v60 = [(FigCaptureSessionParsedConfiguration *)v32 parsedMovieFileSinkConfigurations];
    uint64_t v61 = [(NSArray *)v60 countByEnumeratingWithState:v979 objects:&v982 count:16];
    if (v61)
    {
      uint64_t v62 = **(void **)&v979[1];
      uint64_t v63 = v810;
      uint64_t v64 = DerivedStorage;
      unint64_t v65 = 0x1E4F1C000;
      while (2)
      {
        for (uint64_t m = 0; m != v61; ++m)
        {
          if (**(void **)&v979[1] != v62) {
            objc_enumerationMutation(v60);
          }
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v979[0] + 1) + 8 * m), "videoConnectionConfiguration"), "stereoVideoCaptureEnabled"))
          {
            LODWORD(v61) = 1;
            goto LABEL_98;
          }
        }
        uint64_t v61 = [(NSArray *)v60 countByEnumeratingWithState:v979 objects:&v982 count:16];
        if (v61) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v63 = v810;
      uint64_t v64 = DerivedStorage;
      unint64_t v65 = 0x1E4F1C000uLL;
    }
LABEL_98:
    int v67 = HIBYTE(v920);
    int v706 = v920;
    unsigned int v68 = [v708 xctestAuthorizedToStealDevice];
    uint64_t v69 = [v708 tccIdentity];
    id v723 = *(id *)(v64 + 96);
    uint64_t v728 = v69;
    unsigned int v939 = 0;
    uint64_t v70 = CMBaseObjectGetDerivedStorage();
    id v719 = +[FigWeakReference weakReferenceToObject:v63];
    id v71 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
    float v72 = (void *)[*(id *)(v65 + 2632) array];
    v777 = objc_msgSend(*(id *)(v65 + 2632), "arrayWithArray:", objc_msgSend(*(id *)(v70 + 776), "allKeys"));
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v695 = v4;
      LODWORD(v687) = 0;
      FigDebugAssert3();
    }
    unsigned int v716 = v68;
    long long v943 = 0u;
    long long v942 = 0u;
    long long v941 = 0u;
    *(_OWORD *)os_log_type_t type = 0u;
    uint64_t v73 = objc_msgSend(v793, "countByEnumeratingWithState:objects:count:", type, &v982, 16, v687, v695);
    unsigned int obja = v61;
    if (v73)
    {
      uint64_t v74 = v73;
      uint64_t v75 = *(void *)v941;
LABEL_102:
      uint64_t v76 = 0;
      while (1)
      {
        if (*(void *)v941 != v75) {
          objc_enumerationMutation(v793);
        }
        uint64_t v77 = *(void *)(*(void *)&type[8] + 8 * v76);
        uint64_t CaptureDeviceID = FigCaptureSourceGetCaptureDeviceID(v77, &v939);
        if (v939)
        {
          uint64_t v695 = v4;
          LODWORD(v68_Block_object_dispose(&STACK[0x4E0], 8) = v939;
          goto LABEL_738;
        }
        uint64_t v79 = CaptureDeviceID;
        if (([v72 containsObject:CaptureDeviceID] & 1) == 0) {
          [v72 addObject:v79];
        }
        if ([v777 containsObject:v79]) {
          [v777 removeObject:v79];
        }
        SourceDeviceunsigned int Type = FigCaptureSourceGetSourceDeviceType(v77, &v939);
        if (v939) {
          break;
        }
        if ((SourceDeviceType - 17) < 4)
        {
          int v81 = 1;
          goto LABEL_116;
        }
        if (v74 == ++v76)
        {
          uint64_t v74 = [v793 countByEnumeratingWithState:type objects:&v982 count:16];
          if (v74) {
            goto LABEL_102;
          }
          goto LABEL_114;
        }
      }
      uint64_t v695 = v4;
      LODWORD(v68_Block_object_dispose(&STACK[0x4E0], 8) = v939;
LABEL_738:
      FigDebugAssert3();
LABEL_739:
      if (v939) {
        goto LABEL_161;
      }
LABEL_168:
      unsigned int v921 = v939;
      if (v939)
      {
LABEL_217:
        FigDebugAssert3();
        uint64_t DerivedStorage = v812;
LABEL_711:
        unsigned int v656 = v921;
LABEL_712:
        uint64_t v12 = (const void *)v810;
        goto LABEL_725;
      }
      CGAffineTransform v120 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v713];
      long long v902 = 0u;
      long long v903 = 0u;
      long long v904 = 0u;
      long long v905 = 0u;
      uint64_t v121 = [(FigCaptureSessionParsedConfiguration *)v811 parsedCameraSourceConfigurations];
      uint64_t v122 = [(NSArray *)v121 countByEnumeratingWithState:&v902 objects:v966 count:16];
      if (v122)
      {
        uint64_t v123 = v122;
        int v124 = 0;
        uint64_t v125 = *(void *)v903;
        do
        {
          uint64_t v126 = 0;
          uint64_t v127 = v124;
          do
          {
            if (*(void *)v903 != v125) {
              objc_enumerationMutation(v121);
            }
            int v128 = objc_msgSend(*(id *)(*((void *)&v902 + 1) + 8 * v126), "cameraConfiguration", v688);
            int v129 = (void *)[v906 objectAtIndexedSubscript:v127 + v126];
            objc_msgSend(v129, "setClientExpectsCameraMountedInLandscapeOrientation:", objc_msgSend(v708, "clientExpectsCameraMountedInLandscapeOrientation"));
            objc_msgSend(v120, "setObject:forKeyedSubscript:", -[FigCaptureSessionActiveCameraCaptureSource initWithSource:device:]([FigCaptureSessionActiveCameraCaptureSource alloc], (const void *)objc_msgSend(v128, "source"), v129), objc_msgSend(v128, "sourceID"));
            ++v126;
          }
          while (v123 != v126);
          uint64_t v123 = [(NSArray *)v121 countByEnumeratingWithState:&v902 objects:v966 count:16];
          int v124 = v127 + v126;
        }
        while (v123);
      }
      uint64_t DerivedStorage = v812;
      *(void *)(v812 + 656) = objc_msgSend(v120, "copy", v688);

      os_unfair_lock_lock(lock);
      unsigned int v921 = captureSession_checkClientSessionIsAllowedToRun(v810, *(void **)(v812 + 456), 0, 0, 0);
      os_unfair_lock_unlock(lock);
      if (v921) {
        goto LABEL_710;
      }
      uint64_t v38 = v813;
      int32x4_t v32 = v811;
      int v36 = v711;
      if (!v709) {
        goto LABEL_182;
      }
LABEL_178:
      if (captureSession_clientIsCameraOrDerivative(v810)) {
        IsSecureCaptureExtensiouint64_t n = 1;
      }
      else {
        IsSecureCaptureExtensiouint64_t n = cs_bundleIdentifierIsSecureCaptureExtension(*(void *)(DerivedStorage + 88));
      }
      os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
      qword_1EB4C59D0 = CFAbsoluteTimeGetCurrent();
      os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
      cs_initMemoryPoolSize(IsSecureCaptureExtension, *(void **)(DerivedStorage + 88));
LABEL_182:
      [(BWGraph *)v809 setMemoryPool:+[BWMemoryPool sharedMemoryPool]];
      long long v901 = 0u;
      long long v900 = 0u;
      long long v899 = 0u;
      long long v898 = 0u;
      v724 = [(FigCaptureSessionParsedConfiguration *)v32 parsedCameraSourceConfigurations];
      id objb = (id)[(NSArray *)v724 countByEnumeratingWithState:&v898 objects:v965 count:16];
      if (objb)
      {
        uint64_t v729 = *(void *)v899;
        do
        {
          uint64_t v131 = 0;
          do
          {
            if (*(void *)v899 != v729) {
              objc_enumerationMutation(v724);
            }
            id v794 = *(id *)(*((void *)&v898 + 1) + 8 * (void)v131);
            uint64_t v132 = objc_msgSend((id)objc_msgSend(v794, "cameraConfiguration"), "sourceID");
            uint64_t v133 = [*(id *)(DerivedStorage + 656) objectForKeyedSubscript:v132];
            uint64_t v134 = [(FigCaptureSessionParsedConfiguration *)v32 parsedMicSourceConfiguration];
            if (v133) {
              id v768 = *(id *)(v133 + 16);
            }
            else {
              id v768 = 0;
            }
            long long v135 = captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration(v810, v794, v134 != 0, v36 > 1, (uint64_t)v768, -[FigCaptureSessionParsedConfiguration continuityCameraIsWired](v811, "continuityCameraIsWired"), -[FigCaptureSessionParsedConfiguration continuityCameraClientDeviceClass](v811, "continuityCameraClientDeviceClass"), -[FigCaptureSessionParsedConfiguration clientIsVOIP](v811, "clientIsVOIP"), -[FigCaptureSessionParsedConfiguration suppressVideoEffects](v811, "suppressVideoEffects"), (char *)[v751 objectForKeyedSubscript:v132], -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v811, "smartStyleRenderingEnabled"), newValue, v786, v744, &v921);
            if (v921) {
              goto LABEL_217;
            }
            uint64_t v136 = (uint64_t)v135;
            uint64_t DerivedStorage = v812;
            if (v133) {
              uint64_t v137 = *(void *)(v133 + 24);
            }
            else {
              uint64_t v137 = 0;
            }
            uint64_t v38 = v813;
            uint64_t v138 = [NSString stringWithFormat:@"%@ Source Pipeline", v137];
            long long v139 = [FigCaptureCameraSourcePipeline alloc];
            if (v133) {
              long long v140 = *(void **)(v133 + 16);
            }
            else {
              long long v140 = 0;
            }
            id v141 = -[FigCaptureCameraSourcePipeline initWithConfiguration:captureDevice:graph:name:renderDelegate:ispFastSwitchEnabled:error:](v139, v136, v140, *(void **)(v812 + 632), v138, *(void *)(v812 + 712), v733, (int *)&v921);
            if (!v141) {
              goto LABEL_711;
            }
            id v142 = v141;
            -[FigCaptureCameraSourcePipeline setBlackenFramesForContinuityDisplayConnected:]((uint64_t)v141, v738);
            [(FigCaptureSessionPipelines *)v813 addCameraSourcePipeline:v142];
            uint64_t v131 = (char *)v131 + 1;
            int32x4_t v32 = v811;
          }
          while (objb != v131);
          uint64_t v143 = [(NSArray *)v724 countByEnumeratingWithState:&v898 objects:v965 count:16];
          id objb = (id)v143;
        }
        while (v143);
      }
      goto LABEL_201;
    }
LABEL_114:
    int v81 = 0;
LABEL_116:
    long long v938 = 0u;
    long long v937 = 0u;
    long long v936 = 0u;
    *(_OWORD *)v935 = 0u;
    uint64_t v82 = [v72 countByEnumeratingWithState:v935 objects:v979 count:16];
    if (v82)
    {
      uint64_t v83 = v82;
      uint64_t v84 = *(void *)v936;
      do
      {
        for (uint64_t n = 0; n != v83; ++n)
        {
          if (*(void *)v936 != v84) {
            objc_enumerationMutation(v72);
          }
          uint64_t v86 = *(void *)(*(void *)&v935[8] + 8 * n);
          uint64_t v87 = [*(id *)(v70 + 776) objectForKeyedSubscript:v86];
          if (v87)
          {
            uint64_t v88 = v87;
            if ([v71 streamsInUseForDevice:v87])
            {
              [v71 invalidateVideoDevice:v88 forPID:*(unsigned int *)(v70 + 16)];
              [*(id *)(v70 + 776) setObject:0 forKeyedSubscript:v86];
            }
          }
        }
        uint64_t v83 = [v72 countByEnumeratingWithState:v935 objects:v979 count:16];
      }
      while (v83);
    }
    if ([*(id *)(v70 + 776) count])
    {
LABEL_143:
      long long v933 = 0u;
      long long v932 = 0u;
      long long v931 = 0u;
      long long v930 = 0u;
      uint64_t v102 = [v72 countByEnumeratingWithState:&v930 objects:&v975 count:16];
      if (v102)
      {
        uint64_t v103 = v102;
        uint64_t v104 = *(void *)v931;
        do
        {
          for (iuint64_t i = 0; ii != v103; ++ii)
          {
            if (*(void *)v931 != v104) {
              objc_enumerationMutation(v72);
            }
            uint64_t v106 = *(void *)(*((void *)&v930 + 1) + 8 * ii);
            if (![*(id *)(v70 + 776) objectForKeyedSubscript:v106])
            {
              uint64_t v107 = [v71 copyDeviceWithID:v106 forClient:*(unsigned int *)(v70 + 768) informClientWhenDeviceAvailableAgain:v67 == 0 error:&v939];
              if (!v107) {
                goto LABEL_739;
              }
              __int32 v108 = (void *)v107;
              [*(id *)(v70 + 776) setObject:v107 forKeyedSubscript:v106];
            }
          }
          uint64_t v103 = [v72 countByEnumeratingWithState:&v930 objects:&v975 count:16];
        }
        while (v103);
      }
      long long v929 = 0u;
      long long v928 = 0u;
      long long v927 = 0u;
      long long v926 = 0u;
      uint64_t v109 = [v777 countByEnumeratingWithState:&v926 objects:&v971 count:16];
      if (v109)
      {
        uint64_t v110 = v109;
        uint64_t v111 = *(void *)v927;
        do
        {
          for (juint64_t j = 0; jj != v110; ++jj)
          {
            if (*(void *)v927 != v111) {
              objc_enumerationMutation(v777);
            }
            uint64_t v113 = *(void *)(*((void *)&v926 + 1) + 8 * jj);
            objc_msgSend(v71, "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(v70 + 776), "objectForKeyedSubscript:", v113), *(unsigned int *)(v70 + 768), 0, 0);
            [*(id *)(v70 + 776) setObject:0 forKeyedSubscript:v113];
          }
          uint64_t v110 = [v777 countByEnumeratingWithState:&v926 objects:&v971 count:16];
        }
        while (v110);
      }
      unsigned int v939 = FigVideoCaptureSourcesActivateAndCreateDevices((CFArrayRef)v793, (const __CFArray *)v767, *(void **)(v70 + 88), v728, (uint64_t)v723, *(void **)(v70 + 776), obja, &v906);
      if (v939)
      {
LABEL_161:
        long long v925 = 0u;
        long long v924 = 0u;
        long long v923 = 0u;
        long long v922 = 0u;
        long long v114 = objc_msgSend(*(id *)(v70 + 776), "allKeys", v688, v695);
        uint64_t v115 = [v114 countByEnumeratingWithState:&v922 objects:v970 count:16];
        if (v115)
        {
          uint64_t v116 = v115;
          uint64_t v117 = *(void *)v923;
          do
          {
            for (kuint64_t k = 0; kk != v116; ++kk)
            {
              if (*(void *)v923 != v117) {
                objc_enumerationMutation(v114);
              }
              uint64_t v119 = *(void *)(*((void *)&v922 + 1) + 8 * kk);
              objc_msgSend(v71, "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(v70 + 776), "objectForKeyedSubscript:", v119), *(unsigned int *)(v70 + 768), 0, 0);
              [*(id *)(v70 + 776) setObject:0 forKeyedSubscript:v119];
            }
            uint64_t v116 = [v114 countByEnumeratingWithState:&v922 objects:v970 count:16];
          }
          while (v116);
        }
      }
      goto LABEL_168;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v70 + 772));
    uint64_t v89 = *(unsigned int *)(v70 + 768);
    if (v89)
    {
      *(_DWORD *)(v70 + 76_Block_object_dispose(&STACK[0x4E0], 8) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v70 + 772));
      [v71 unregisterClient:v89];
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v70 + 772));
    }
    int v90 = [*(id *)(v70 + 120) clientType];
    unsigned int v91 = *(_DWORD *)(v70 + 16);
    if (v67)
    {
      unsigned int v702 = *(_DWORD *)(v70 + 16);
LABEL_132:
      uint64_t v92 = 0;
LABEL_133:
      uint64_t v93 = 0;
LABEL_134:
      uint64_t v94 = 2;
LABEL_142:
      os_unfair_lock_lock((os_unfair_lock_t)(v70 + 360));
      unsigned __int8 v98 = [*(id *)(v70 + 456) allCameraSourcesAreMetadataCameras];
      os_unfair_lock_unlock((os_unfair_lock_t)(v70 + 360));
      uint64_t v99 = objc_msgSend(NSString, "stringWithFormat:", @"<FigCaptureSession: %p>", v810);
      uint64_t v100 = *(void *)(v70 + 88);
      v934[0] = MEMORY[0x1E4F143A8];
      v934[1] = 3221225472;
      v934[2] = __captureSession_activateCameraCaptureSourcesAndCreateDevices_block_invoke;
      v934[3] = &unk_1E5C289F0;
      v934[4] = v719;
      v934[5] = v70;
      LOWORD(v689) = v98;
      int v101 = objc_msgSend(v71, "registerClientWithPID:clientApplicationID:clientDescription:clientPriority:canStealFromClientsWithSamePriority:deviceSharingWithOtherClientsAllowed:deviceSharingWithAVFlashlightAllowed:clientIsAVFlashlight:deviceAvailabilityChangedHandler:", v702, v100, v99, v94, v92, v93, v689, v934);
      os_unfair_lock_lock((os_unfair_lock_t)(v70 + 772));
      *(_DWORD *)(v70 + 76_Block_object_dispose(&STACK[0x4E0], 8) = v101;
      os_unfair_lock_unlock((os_unfair_lock_t)(v70 + 772));
      goto LABEL_143;
    }
    int v95 = v90;
    if (v90 != 5)
    {
      if (v90 == 6)
      {
        long long v96 = *(_OWORD *)(v70 + 36);
        long long v975 = *(_OWORD *)(v70 + 20);
        long long v976 = v96;
        unsigned int v702 = v91;
        if (FigCaptureClientIsFacemetricsd(&v975)
          || ([*(id *)(v70 + 88) isEqualToString:0x1EFA55860] & 1) != 0)
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v94 = 1;
          goto LABEL_142;
        }
        if ([*(id *)(v70 + 88) isEqualToString:0x1EFA55820])
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v94 = 3;
          goto LABEL_142;
        }
        if (([*(id *)(v70 + 88) isEqualToString:0x1EFA558C0] & 1) != 0
          || ([*(id *)(v70 + 88) isEqualToString:0x1EFA55A80] & 1) != 0)
        {
          uint64_t v93 = 0;
          uint64_t v92 = 1;
          uint64_t v94 = 4;
          goto LABEL_142;
        }
        if (([*(id *)(v70 + 88) isEqualToString:0x1EFA55800] & 1) == 0)
        {
          uint64_t v92 = [*(id *)(v70 + 88) isEqualToString:0x1EFA55A40];
          goto LABEL_133;
        }
        goto LABEL_744;
      }
      long long v97 = *(_OWORD *)(v70 + 36);
      long long v975 = *(_OWORD *)(v70 + 20);
      long long v976 = v97;
      if (!FigCaptureClientIsAVConferenced(&v975))
      {
        unsigned int v702 = v91;
        if (v95 == 8)
        {
          uint64_t v93 = 0;
          uint64_t v94 = 2;
          uint64_t v92 = v716;
          goto LABEL_142;
        }
        if (!v706)
        {
          if (([*(id *)(v70 + 88) isEqualToString:0x1EFA55C20] & 1) == 0)
          {
            uint64_t v94 = 3;
            if (v81)
            {
              int v663 = [*(id *)(v70 + 88) isEqualToString:0x1EFA55C40];
              uint64_t v93 = 0;
              if (v663) {
                uint64_t v94 = 1;
              }
              else {
                uint64_t v94 = 3;
              }
              uint64_t v92 = v663 ^ 1u;
            }
            else
            {
              uint64_t v93 = 0;
              uint64_t v92 = 1;
            }
            goto LABEL_142;
          }
          goto LABEL_132;
        }
LABEL_744:
        uint64_t v93 = 0;
        uint64_t v92 = 1;
        goto LABEL_134;
      }
    }
    unsigned int v702 = 0;
    uint64_t v92 = 1;
    uint64_t v94 = 3;
    uint64_t v93 = 1;
    goto LABEL_142;
  }
LABEL_201:
  if (![(FigCaptureSessionParsedConfiguration *)v32 parsedMicSourceConfiguration]) {
    goto LABEL_246;
  }
  long long v144 = (char *)[v708 sessionPreset];
  int v145 = [v708 usesAppAudioSession];
  char v778 = [v708 configuresAppAudioSession];
  char v795 = [v708 configuresAppAudioSessionToMixWithOthers];
  long long v146 = [(FigCaptureSessionParsedConfiguration *)v32 parsedMicSourceConfiguration];
  uint64_t v147 = CMBaseObjectGetDerivedStorage();
  unsigned int v148 = (char *)objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedMicSourceConfiguration micConnectionConfigurations](v146, "micConnectionConfigurations"), "firstObject"), "sourceConfiguration");
  v769 = [(FigCaptureSessionParsedMicSourceConfiguration *)v146 micConnectionConfigurations];
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v695 = v4;
    LODWORD(v687) = 0;
    FigDebugAssert3();
  }
  if (*(unsigned __int8 *)(v147 + 272) != v145) {
    captureSession_destroyAudioSessionForMicPipeline();
  }
  if (v145 && *(_DWORD *)(v147 + 400) == 1 && FigCaptureAudiomxdSupportEnabled())
  {
    uint64_t v149 = objc_msgSend(NSString, "stringWithFormat:", @"FigCaptureSession-%d-proxy", *(unsigned int *)(v147 + 16));
    captureSession_destroyAudioSessionForMicPipeline();
    long long v983 = 0u;
    long long v982 = 0u;
    FigCaptureGetCurrentProcessAuditToken(&v982);
    v979[0] = v982;
    v979[1] = v983;
    PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(v979);
    v979[0] = v982;
    v979[1] = v983;
    *(void *)(v147 + 256) = cs_createAuxiliaryAVAudioSession(PIDFromAuditToken, (uint64_t)v979, v149);
    *(unsigned char *)(v147 + 296) = 1;
  }
  if (!FigCaptureAudiomxdSupportEnabled() || *(void *)(v147 + 256))
  {
    if ((FigCaptureAudiomxdSupportEnabled() & 1) != 0 || *(void *)(v147 + 264)) {
      goto LABEL_231;
    }
    if (v145)
    {
      if (AudioSessionGetPrimaryAudioSessionIDForAuditToken()) {
        *(void *)(v147 + 264) = AudioSessionCopyCMSessionForSessionID();
      }
LABEL_230:
      *(unsigned char *)(v147 + 272) = v145;
      unsigned int started = captureSession_startObservingAudioInterruptionNotification(v810);
      if (!started) {
        goto LABEL_231;
      }
      unsigned int v664 = started;
      LODWORD(v970[0]) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v672 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v673 = v970[0];
      if (os_log_type_enabled(v672, type[0])) {
        unsigned int v674 = v673;
      }
      else {
        unsigned int v674 = v673 & 0xFFFFFFFE;
      }
      if (!v674) {
        goto LABEL_797;
      }
LABEL_791:
      uint64_t v681 = *(void *)(v147 + 104);
      LODWORD(v979[0]) = 136315650;
      *(void *)((char *)v979 + 4) = "captureSession_buildMicSourcePipeline";
      WORD6(v979[0]) = 2114;
      *(void *)((char *)v979 + 14) = v681;
      WORD3(v979[1]) = 1024;
      DWORD2(v979[1]) = v664;
      _os_log_send_and_compose_impl();
LABEL_797:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_798;
    }
    unsigned int v167 = CMSessionCreate();
    if (!v167)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"FigCaptureSession-%d", *(unsigned int *)(v147 + 16));
      unsigned int v168 = CMSessionSetProperty();
      if (v168)
      {
        unsigned int v664 = v168;
        LODWORD(v970[0]) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v675 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v676 = v970[0];
        if (os_log_type_enabled(v675, type[0])) {
          unsigned int v677 = v676;
        }
        else {
          unsigned int v677 = v676 & 0xFFFFFFFE;
        }
        if (!v677) {
          goto LABEL_797;
        }
        goto LABEL_791;
      }
      [NSNumber numberWithInt:*(unsigned int *)(v147 + 16)];
      unsigned int v169 = CMSessionSetProperty();
      if (v169)
      {
        unsigned int v664 = v169;
        LODWORD(v970[0]) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v678 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v679 = v970[0];
        if (os_log_type_enabled(v678, type[0])) {
          unsigned int v680 = v679;
        }
        else {
          unsigned int v680 = v679 & 0xFFFFFFFE;
        }
        if (!v680) {
          goto LABEL_797;
        }
        goto LABEL_791;
      }
      long long v170 = *(_OWORD *)(v147 + 36);
      v979[0] = *(_OWORD *)(v147 + 20);
      v979[1] = v170;
      [MEMORY[0x1E4F1C9B8] dataWithBytes:v979 length:32];
      unsigned int v171 = CMSessionSetProperty();
      if (v171)
      {
        unsigned int v664 = v171;
        *(_DWORD *)os_log_type_t type = 0;
        v935[0] = OS_LOG_TYPE_DEFAULT;
        v682 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v683 = *(_DWORD *)type;
        if (os_log_type_enabled(v682, v935[0])) {
          unsigned int v684 = v683;
        }
        else {
          unsigned int v684 = v683 & 0xFFFFFFFE;
        }
        if (v684)
        {
          uint64_t v685 = *(void *)(v147 + 104);
          LODWORD(v970[0]) = 136315650;
          *(void *)((char *)v970 + 4) = "captureSession_buildMicSourcePipeline";
          WORD6(v970[0]) = 2114;
          *(void *)((char *)v970 + 14) = v685;
          WORD3(v970[1]) = 1024;
          DWORD2(v970[1]) = v664;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_797;
      }
      goto LABEL_230;
    }
    unsigned int v664 = v167;
LABEL_798:
    uint64_t DerivedStorage = v812;
    unsigned int v921 = v664;
    goto LABEL_710;
  }
  uint64_t v151 = objc_msgSend(NSString, "stringWithFormat:", @"FigCaptureSession-%d", *(unsigned int *)(v147 + 16));
  if (v145)
  {
    long long v152 = *(_OWORD *)(v147 + 36);
    v979[0] = *(_OWORD *)(v147 + 20);
    v979[1] = v152;
    id v153 = objc_alloc(MEMORY[0x1E4F4E9F0]);
    long long v982 = v979[0];
    long long v983 = v979[1];
    AuxiliaryAVAudioSessiouint64_t n = (void *)[v153 initSiblingSession:0xFFFFFFFFLL auditToken:&v982 clientIdentifier:v151 autoReconnect:0];
  }
  else
  {
    uint64_t v155 = *(unsigned int *)(v147 + 16);
    long long v156 = *(_OWORD *)(v147 + 36);
    long long v982 = *(_OWORD *)(v147 + 20);
    long long v983 = v156;
    AuxiliaryAVAudioSessiouint64_t n = cs_createAuxiliaryAVAudioSession(v155, (uint64_t)&v982, v151);
  }
  *(void *)(v147 + 256) = AuxiliaryAVAudioSession;
  if (!AuxiliaryAVAudioSession)
  {
    unsigned int v664 = -12786;
    goto LABEL_798;
  }
  *(unsigned char *)(v147 + 272) = v145;
  unsigned int v157 = captureSession_startObservingAudioInterruptionNotification(v810);
  if (v157)
  {
    unsigned int v664 = v157;
    LODWORD(v970[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v665 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v666 = v970[0];
    if (os_log_type_enabled(v665, type[0])) {
      unsigned int v667 = v666;
    }
    else {
      unsigned int v667 = v666 & 0xFFFFFFFE;
    }
    if (!v667) {
      goto LABEL_797;
    }
    goto LABEL_791;
  }
  uint64_t v158 = CMBaseObjectGetDerivedStorage();
  if (v158)
  {
    int v159 = (void *)v158;
    if (*(void *)(v158 + 280))
    {
      LODWORD(v970[0]) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v668 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v669 = v970[0];
      if (os_log_type_enabled(v668, type[0])) {
        unsigned int v670 = v669;
      }
      else {
        unsigned int v670 = v669 & 0xFFFFFFFE;
      }
      if (v670)
      {
        uint64_t v671 = v159[13];
        LODWORD(v979[0]) = 136315394;
        *(void *)((char *)v979 + 4) = "captureSession_startObservingForAudiomxdDeath";
        WORD6(v979[0]) = 2114;
        *(void *)((char *)v979 + 14) = v671;
        LODWORD(v695) = 22;
        v687 = v979;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v38 = v813;
    }
    else
    {
      id v160 = +[FigWeakReference weakReferenceToObject:v810];
      CFDictionaryRef v161 = (void *)[MEMORY[0x1E4F4E9F0] sharedInstance];
      uint64_t v162 = *MEMORY[0x1E4F4E890];
      *(void *)&long long v982 = MEMORY[0x1E4F143A8];
      *((void *)&v982 + 1) = 3221225472;
      *(void *)&long long v983 = __captureSession_startObservingForAudiomxdDeath_block_invoke;
      *((void *)&v983 + 1) = &unk_1E5C28A18;
      id v984 = v160;
      v985 = v159;
      int v163 = (void *)[v161 addObserverForType:1 name:v162 block:&v982];
      uint64_t v164 = (void *)[MEMORY[0x1E4F4E9F0] sharedInstance];
      uint64_t v165 = *MEMORY[0x1E4F4E8A0];
      *(void *)&v979[0] = MEMORY[0x1E4F143A8];
      *((void *)&v979[0] + 1) = 3221225472;
      *(void *)&v979[1] = __captureSession_startObservingForAudiomxdDeath_block_invoke_783;
      *((void *)&v979[1] + 1) = &unk_1E5C28A18;
      *(void *)&long long v980 = v160;
      *((void *)&v980 + 1) = v159;
      int v166 = (void *)[v164 addObserverForType:1 name:v165 block:v979];
      v159[35] = v163;
      v159[36] = v166;
    }
  }
LABEL_231:
  int v173 = cs_clientWantsAudioResumptionOnBackground(*(void **)(v147 + 88));
  if (v173)
  {
    uint64_t v174 = *(void *)(v147 + 264);
    if ((v174 || *(void *)(v147 + 256)) && !*(void *)(v147 + 304))
    {
      v655 = *(void **)(v147 + 256);
      if (v655)
      {
        *(void *)&long long v982 = 0;
        [v655 setMXSessionProperty:*MEMORY[0x1E4F766F0] value:MEMORY[0x1E4F1CC38] error:&v982];
      }
      else if (v174)
      {
        unsigned int v175 = CMSessionSetProperty();
LABEL_717:
        *(unsigned char *)(v147 + 312) = 1;
        dispatch_source_t v657 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v147 + 136));
        *(void *)(v147 + 304) = v657;
        if (v657)
        {
          v658 = v657;
          dispatch_time_t v659 = dispatch_time(0, 300000000000);
          dispatch_source_set_timer(v658, v659, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          v660 = *(NSObject **)(v147 + 304);
          *(void *)&long long v975 = MEMORY[0x1E4F143A8];
          *((void *)&v975 + 1) = 3221225472;
          *(void *)&long long v976 = __captureSession_buildMicSourcePipeline_block_invoke;
          *((void *)&v976 + 1) = &__block_descriptor_40_e5_v8__0l;
          *(void *)&long long v977 = v147;
          dispatch_source_set_event_handler(v660, &v975);
          dispatch_resume(*(dispatch_object_t *)(v147 + 304));
        }
        goto LABEL_236;
      }
      unsigned int v175 = 0;
      goto LABEL_717;
    }
  }
  unsigned int v175 = 0;
LABEL_236:
  char v176 = v173 ^ 1;
  int v177 = objc_alloc_init(FigCaptureMicSourcePipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v177, v148);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v177, v769);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v177, (char *)[(FigCaptureSessionParsedMicSourceConfiguration *)v146 cameraConfigurationForStereoAudioCapture]);
  -[FigCaptureMetadataSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v177, [(FigVideoCaptureConnectionConfiguration *)[(FigCaptureSessionParsedMicSourceConfiguration *)v146 movieFileVideoConnectionConfigurationForStereoAudioCapture] physicalMirroringForMovieRecordingEnabled]);
  uint64_t v178 = [(FigCaptureSourceConfiguration *)[(FigCaptureSessionParsedMicSourceConfiguration *)v146 cameraConfigurationForStereoAudioCapture] sourceID];
  if (v178)
  {
    unsigned int v179 = (void *)[*(id *)(v147 + 656) objectForKeyedSubscript:v178];
    if (v179) {
      unsigned int v179 = (void *)v179[2];
    }
    -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v177, (char *)objc_msgSend(v179, "zoomCommandHandler", v687, v695));
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v177, v144);
  -[FigCaptureMicSourcePipelineConfiguration setConfiguresAppAudioSession:]((uint64_t)v177, v778);
  -[FigCaptureMicSourcePipelineConfiguration setAudioSourceNodeShouldCallEndInterruption:]((uint64_t)v177, v176);
  -[FigCaptureMicSourcePipelineConfiguration setConfiguresAppAudioSessionToMixWithOthers:]((uint64_t)v177, v795);
  -[FigCaptureMicSourcePipelineConfiguration setClientOSVersionSupportsDecoupledIO:]((uint64_t)v177, [v148 clientOSVersionSupportsDecoupledIO]);
  long long v180 = *(_OWORD *)(v147 + 36);
  long long v971 = *(_OWORD *)(v147 + 20);
  long long v972 = v180;
  -[FigCaptureMicSourcePipelineConfiguration setClientAuditToken:]((uint64_t)v177, (uint64_t)&v971);
  uint64_t v181 = -[FigCaptureMicSourcePipeline initWithConfiguration:graph:name:audioSession:cmSession:isAppAudioSession:audioSessionIsProxy:audioIsPlayingToBuiltinSpeaker:renderDelegate:]([FigCaptureMicSourcePipeline alloc], (uint64_t)v177, *(void **)(v147 + 632), @"Microphone Source Pipeline", *(void **)(v147 + 256), *(void *)(v147 + 264), v145, *(unsigned char *)(v147 + 296), v700, *(void *)(v147 + 712));
  if (v181)
  {
    [*(id *)(v147 + 664) setMicSourcePipeline:v181];
  }
  else
  {
    uint64_t v695 = v4;
    LODWORD(v687) = 0;
    FigDebugAssert3();
    unsigned int v175 = FigSignalErrorAt();
  }
  uint64_t DerivedStorage = v812;
  unsigned int v921 = v175;
  if (v175) {
    goto LABEL_710;
  }
  int32x4_t v32 = v811;
  char isTrueVideoCaptureEnabled = cs_isTrueVideoCaptureEnabled(v811);
  if (*(unsigned char *)(v812 + 112) && (isTrueVideoCaptureEnabled & 1) == 0) {
    -[BWGraph enableDeferredStartForSourceNode:mustStartAfterNonDeferred:](v809, "enableDeferredStartForSourceNode:mustStartAfterNonDeferred:", -[FigCaptureMicSourcePipeline sourceNode]((uint64_t)[(FigCaptureSessionPipelines *)v38 micSourcePipeline]), 0);
  }
LABEL_246:
  long long v897 = 0u;
  long long v896 = 0u;
  long long v895 = 0u;
  long long v894 = 0u;
  uint64_t v183 = [(FigCaptureSessionParsedConfiguration *)v32 metadataSourceConfigurations];
  uint64_t v184 = [(NSArray *)v183 countByEnumeratingWithState:&v894 objects:v964 count:16];
  if (v184)
  {
    uint64_t v185 = v184;
    uint64_t v186 = *(void *)v895;
    do
    {
      for (uint64_t mm = 0; mm != v185; ++mm)
      {
        if (*(void *)v895 != v186) {
          objc_enumerationMutation(v183);
        }
        int32x4_t v188 = *(void **)(*((void *)&v894 + 1) + 8 * mm);
        if ([v188 sourceSubType] != 3)
        {
          if ([v188 sourceSubType] == 1) {
            uint16x8_t v189 = @"Client Supplied Metadata Source Pipeline";
          }
          else {
            uint16x8_t v189 = @"Core Motion Metadata Source Pipeline";
          }
          int32x4_t v190 = -[FigCaptureMetadataSourcePipeline initWithConfiguration:graph:name:errorOut:]([FigCaptureMetadataSourcePipeline alloc], v188, *(void **)(DerivedStorage + 632), (uint64_t)v189, &v921);
          if (v921) {
            goto LABEL_710;
          }
          [(FigCaptureSessionPipelines *)v813 addMetadataSourcePipeline:v190];
        }
      }
      uint64_t v185 = [(NSArray *)v183 countByEnumeratingWithState:&v894 objects:v964 count:16];
    }
    while (v185);
  }
  *(void *)v935 = 0;
  int32x4_t v191 = v813;
  cs_getMasterClockAndType(v813, (uint64_t *)v935, 0);
  if (*(void *)v935)
  {
    long long v974 = 0u;
    long long v973 = 0u;
    long long v972 = 0u;
    long long v971 = 0u;
    unsigned int v192 = [(FigCaptureSessionPipelines *)v813 cameraSourcePipelines];
    uint64_t v193 = [(NSArray *)v192 countByEnumeratingWithState:&v971 objects:&v982 count:16];
    uint64_t v12 = (const void *)v810;
    uint64_t v194 = v811;
    if (v193)
    {
      uint64_t v195 = v193;
      uint64_t v196 = *(void *)v972;
      do
      {
        for (nuint64_t n = 0; nn != v195; ++nn)
        {
          if (*(void *)v972 != v196) {
            objc_enumerationMutation(v192);
          }
          -[FigCaptureCameraSourcePipeline setMasterClock:](*(void *)(*((void *)&v971 + 1) + 8 * nn), *(uint64_t *)v935);
        }
        uint64_t v195 = [(NSArray *)v192 countByEnumeratingWithState:&v971 objects:&v982 count:16];
      }
      while (v195);
    }
    memset(v970, 0, 64);
    unsigned int v198 = [(FigCaptureSessionPipelines *)v813 metadataSourcePipelines];
    uint64_t v199 = [(NSArray *)v198 countByEnumeratingWithState:v970 objects:v979 count:16];
    if (v199)
    {
      uint64_t v200 = v199;
      uint64_t v201 = **(void **)&v970[1];
      do
      {
        for (uint64_t i1 = 0; i1 != v200; ++i1)
        {
          if (**(void **)&v970[1] != v201) {
            objc_enumerationMutation(v198);
          }
          -[FigCaptureMetadataSourcePipeline setMasterClock:](*(void *)(*((void *)&v970[0] + 1) + 8 * i1), *(uint64_t *)v935);
        }
        uint64_t v200 = [(NSArray *)v198 countByEnumeratingWithState:v970 objects:v979 count:16];
      }
      while (v200);
    }
    goto LABEL_286;
  }
  uint64_t v203 = [(NSArray *)[(FigCaptureSessionPipelines *)v813 metadataSourcePipelines] count];
  *(_OWORD *)os_log_type_t type = 0u;
  long long v941 = 0u;
  int v204 = v203 != 0;
  long long v942 = 0u;
  long long v943 = 0u;
  int v205 = [(FigCaptureSessionPipelines *)v813 cameraSourcePipelines];
  uint64_t v206 = [(NSArray *)v205 countByEnumeratingWithState:type objects:&v975 count:16];
  if (v206)
  {
    uint64_t v207 = v206;
    uint64_t v208 = *(void *)v941;
    uint64_t v12 = (const void *)v810;
    uint64_t v194 = v811;
    do
    {
      for (uint64_t i2 = 0; i2 != v207; ++i2)
      {
        if (*(void *)v941 != v208) {
          objc_enumerationMutation(v205);
        }
        v204 |= -[FigCaptureCameraSourcePipeline requiresMasterClock](*(void *)(*(void *)&type[8] + 8 * i2));
      }
      uint64_t v207 = [(NSArray *)v205 countByEnumeratingWithState:type objects:&v975 count:16];
    }
    while (v207);
    if ((v204 & 1) == 0) {
      goto LABEL_286;
    }
LABEL_283:
    unsigned int v921 = -12783;
    goto LABEL_710;
  }
  uint64_t v12 = (const void *)v810;
  uint64_t v194 = v811;
  if (v204) {
    goto LABEL_283;
  }
LABEL_286:
  unsigned int v921 = 0;
  long long v890 = 0u;
  long long v891 = 0u;
  long long v892 = 0u;
  long long v893 = 0u;
  v720 = [(FigCaptureSessionParsedConfiguration *)v194 parsedCinematographyConfigurations];
  uint64_t v730 = [(NSArray *)v720 countByEnumeratingWithState:&v890 objects:v963 count:16];
  if (v730)
  {
    id v725 = *(id *)v891;
    do
    {
      uint64_t v210 = 0;
      do
      {
        if (*(id *)v891 != v725) {
          objc_enumerationMutation(v720);
        }
        int v211 = *(void **)(*((void *)&v890 + 1) + 8 * v210);
        int v212 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v211, "videoPreviewSinkConnectionConfiguration"), "sourceConfiguration"), "sourceID");
        uint64_t v213 = [*(id *)(DerivedStorage + 656) objectForKeyedSubscript:v212];
        id objc = v211;
        uint64_t v214 = objc_msgSend((id)objc_msgSend(v211, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
        if (v213)
        {
          uint64_t v215 = *(void *)(v213 + 24);
          int v216 = *(_DWORD *)(v213 + 32);
        }
        else
        {
          uint64_t v215 = 0;
          int v216 = 0;
        }
        uint64_t v779 = FigCaptureBuildSinkPipelineName(v215, v216, v214, @"Cinematography Pipeline");
        uint64_t v217 = [(FigCaptureSessionPipelines *)v191 cameraSourcePipelineWithSourceID:v212];
        id v770 = (id)-[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v217, v214);
        unsigned int v796 = v214;
        if (-[FigCaptureCameraSourcePipeline depthType](v217) == 3)
        {
          id v752 = (id)-[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v217, 7);
          uint64_t v218 = 2;
        }
        else
        {
          id v752 = (id)-[FigCaptureCameraSourcePipeline depthOutput](v217);
          uint64_t v218 = v214;
        }
        uint64_t v745 = -[FigCaptureCameraSourcePipeline nextPreviewOutputForSourceDeviceType:](v217, v218);
        v739 = captureSession_inferenceScheduler();
        float v219 = objc_alloc_init(FigCaptureCinematographyPipelineConfiguration);
        long long v886 = 0u;
        long long v887 = 0u;
        long long v888 = 0u;
        long long v889 = 0u;
        int v220 = [(FigCaptureSessionParsedConfiguration *)v194 parsedMetadataSinkConfigurations];
        uint64_t v221 = [(NSArray *)v220 countByEnumeratingWithState:&v886 objects:v962 count:16];
        if (v221)
        {
          uint64_t v222 = v221;
          float v223 = 0;
          uint64_t v224 = *(void *)v887;
          do
          {
            for (uint64_t i3 = 0; i3 != v222; ++i3)
            {
              if (*(void *)v887 != v224) {
                objc_enumerationMutation(v220);
              }
              CFDictionaryRef v226 = *(void **)(*((void *)&v886 + 1) + 8 * i3);
              if (objc_msgSend(v212, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v226, "metadataObjectConnectionConfiguration"), "sourceConfiguration"), "sourceID")))float v223 = (char *)objc_msgSend((id)objc_msgSend(v226, "metadataObjectConnectionConfiguration"), "metadataIdentifiers"); {
            }
              }
            uint64_t v222 = [(NSArray *)v220 countByEnumeratingWithState:&v886 objects:v962 count:16];
          }
          while (v222);
        }
        else
        {
          float v223 = 0;
        }
        -[FigCaptureCinematographyPipelineConfiguration setObjectMetadataIdentifiers:](v219, v223);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v219, (char *)[objc videoPreviewSinkConnectionConfiguration]);
        int v227 = -[FigCaptureCameraSourcePipeline depthType](v217);
        -[FigCaptureMetadataSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v219, v227);
        uint64_t v194 = v811;
        -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v219, [(FigCaptureSessionParsedConfiguration *)v811 smartStyleRenderingEnabled]);
        -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v219, newValue);
        char v228 = -[FigCaptureCameraSourcePipeline preLTMThumbnailEnabled](v217);
        -[FigCaptureMetadataSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v219, v228);
        char v229 = -[FigCaptureCameraSourcePipeline postColorProcessingThumbnailEnabled](v217);
        -[FigCaptureMetadataSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v219, v229);
        CFPropertyListRef v230 = [FigCaptureCinematographyPipeline alloc];
        uint64_t v231 = -[FigCaptureCameraSourcePipeline semanticMasksOutputsBySourceDeviceType:](v217, v796);
        float v232 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v217);
        int v233 = -[FigCaptureCinematographyPipeline initWithConfiguration:videoSourceCaptureOutput:sourceSemanticMasksOutput:previewOutput:auxiliaryOutput:graph:name:sourceID:captureDevice:inferenceScheduler:errorOut:](v230, (uint64_t)v219, (uint64_t)v770, v231, v745, (uint64_t)v752, v809, v779, v212, v232, (uint64_t)v739, &v921);

        uint64_t v12 = (const void *)v810;
        uint64_t DerivedStorage = v812;
        if (v921) {
          goto LABEL_726;
        }
        int32x4_t v191 = v813;
        [(FigCaptureSessionPipelines *)v813 addCinematographyPipeline:v233];
        ++v210;
      }
      while (v210 != v730);
      uint64_t v234 = [(NSArray *)v720 countByEnumeratingWithState:&v890 objects:v963 count:16];
      uint64_t v730 = v234;
    }
    while (v234);
  }
  captureSession_teardownImageQueueSinkNodesIfNeeded((uint64_t)v12, [(FigCaptureSessionParsedConfiguration *)v194 parsedPreviewSinkConfigurations]);
  long long v885 = 0u;
  long long v884 = 0u;
  long long v883 = 0u;
  long long v882 = 0u;
  v701 = [(FigCaptureSessionParsedConfiguration *)v194 parsedPreviewSinkConfigurations];
  uint64_t v707 = [(NSArray *)v701 countByEnumeratingWithState:&v882 objects:v961 count:16];
  if (v707)
  {
    uint64_t v703 = *(void *)v883;
    do
    {
      double v235 = 0;
      do
      {
        if (*(void *)v883 != v703) {
          objc_enumerationMutation(v701);
        }
        v721 = v235;
        uint64_t v236 = *(void **)(*((void *)&v882 + 1) + 8 * (void)v235);
        uint64_t v780 = objc_msgSend((id)objc_msgSend(v236, "cameraConfiguration"), "sourceID");
        uint64_t v237 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v191, "cameraSourcePipelineWithSourceID:");
        int v238 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v237) format];
        id objd = (id)objc_msgSend(*(id *)(DerivedStorage + 504), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v236, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
        unsigned int v717 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 512), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v236, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "BOOLValue");
        char v771 = -[FigCaptureCameraSourcePipeline trueVideoCaptureEnabled](v237);
        id v797 = (id)v237;
        double v239 = -[FigCaptureCameraSourcePipeline trueVideoCaptureAdditionalZoomFactor](v237);
        long long v975 = 0u;
        long long v976 = 0u;
        long long v977 = 0u;
        long long v978 = 0u;
        CFArrayRef v240 = [(FigCaptureSessionParsedConfiguration *)v194 parsedMovieFileSinkConfigurations];
        uint64_t v241 = [(NSArray *)v240 countByEnumeratingWithState:&v975 objects:&v982 count:16];
        if (v241)
        {
          uint64_t v242 = v241;
          uint64_t v243 = *(void *)v976;
LABEL_319:
          uint64_t v244 = 0;
          while (1)
          {
            if (*(void *)v976 != v243) {
              objc_enumerationMutation(v240);
            }
            double v245 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v975 + 1) + 8 * v244), "videoConnectionConfiguration"), "sourceConfiguration");
            uint64_t v246 = objc_msgSend((id)objc_msgSend(v245, "requiredFormat"), "dimensions");
            objc_msgSend((id)objc_msgSend(v245, "requiredFormat"), "maxSupportedFrameRate");
            if ((int)v246 >= 3840 && SHIDWORD(v246) >= 2160 && v247 >= 60.0) {
              goto LABEL_344;
            }
            if (v242 == ++v244)
            {
              uint64_t v242 = [(NSArray *)v240 countByEnumeratingWithState:&v975 objects:&v982 count:16];
              if (v242) {
                goto LABEL_319;
              }
              break;
            }
          }
        }
        long long v974 = 0u;
        long long v973 = 0u;
        long long v972 = 0u;
        long long v971 = 0u;
        unsigned int v249 = [(FigCaptureSessionParsedConfiguration *)v811 parsedVideoDataSinkConfigurations];
        uint64_t v250 = [(NSArray *)v249 countByEnumeratingWithState:&v971 objects:v979 count:16];
        if (v250)
        {
          uint64_t v251 = v250;
          uint64_t v252 = *(void *)v972;
LABEL_332:
          uint64_t v253 = 0;
          while (1)
          {
            if (*(void *)v972 != v252) {
              objc_enumerationMutation(v249);
            }
            int v254 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v971 + 1) + 8 * v253), "videoDataConnectionConfiguration"), "sourceConfiguration");
            uint64_t v255 = objc_msgSend((id)objc_msgSend(v254, "requiredFormat"), "dimensions");
            objc_msgSend((id)objc_msgSend(v254, "requiredFormat"), "maxSupportedFrameRate");
            if ((int)v255 >= 3840 && SHIDWORD(v255) >= 2160 && v256 >= 60.0) {
              break;
            }
            if (v251 == ++v253)
            {
              uint64_t v251 = [(NSArray *)v249 countByEnumeratingWithState:&v971 objects:v979 count:16];
              char v258 = 0;
              if (v251) {
                goto LABEL_332;
              }
              goto LABEL_345;
            }
          }
LABEL_344:
          char v258 = 1;
          goto LABEL_345;
        }
        char v258 = 0;
LABEL_345:
        char v753 = v258;
        int v731 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)v797);
        char IsFullRange = FigCapturePixelFormatIsFullRange(v238);
        BOOL v259 = -[FigCaptureCameraSourcePipeline videoHDRImageStatisticsEnabled]((BOOL)v797);
        char v740 = [(FigCaptureSessionParsedConfiguration *)v811 smartStyleRenderingEnabled];
        LODWORD(v979[0]) = 0;
        uint64_t v746 = CMBaseObjectGetDerivedStorage();
        uint64_t v260 = (void *)[v236 cameraConfiguration];
        unint64_t v261 = [v236 videoPreviewSinkConnectionConfiguration];
        CFNumberRef v262 = (char *)[v236 videoThumbnailConnectionConfiguration];
        unsigned int v263 = (char *)[v236 depthDataConnectionConfiguration];
        unsigned int v264 = (char *)[v236 previewTimeMachineConnectionConfiguration];
        int v265 = (char *)[v236 previewSmartStyleCoefficientsTimeMachineConnectionConfiguration];
        int v266 = (char *)[v236 sceneClassifierConnectionConfiguration];
        __int16 v267 = (void *)[v236 metadataObjectConnectionConfiguration];
        newValuea = (char *)[v236 stillImageConnectionConfiguration];
        int StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([v260 source], v979);
        if (LODWORD(v979[0]))
        {
          uint64_t v696 = v4;
          LODWORD(v690) = v979[0];
          FigDebugAssert3();
          int v269 = 0;
          uint64_t v12 = (const void *)v810;
          uint64_t DerivedStorage = v812;
          int32x4_t v191 = v813;
        }
        else
        {
          int v710 = StillImageNoiseReductionAndFusionScheme;
          char v714 = v259;
          int v269 = objc_alloc_init(FigCapturePreviewSinkPipelineConfiguration);
          -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v269, (char *)v261);
          v712 = v262;
          -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v269, v262);
          -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v269, v263);
          -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v269, v264);
          -[FigCaptureCameraSourcePipelineConfiguration setVideoPreviewSinkConnectionConfiguration:](v269, v265);
          -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v269, v266);
          char v270 = FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v267);
          int v271 = FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(v267);
          char v272 = FigCaptureMetadataObjectConfigurationRequiresSceneClassification(v267);
          int v273 = FigCaptureMetadataObjectConfigurationRequiresVisualIntelligenceObjectDetection(v267);
          if ((v270 & 1) != 0 || (v271 & 1) != 0 || (v272 & 1) != 0 || v273) {
            -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v269, (char *)v267);
          }
          -[FigCapturePreviewSinkPipelineConfiguration setStillImageConnectionConfiguration:](v269, newValuea);
          unint64_t v274 = BWInferenceSmartCameraCurrentVersion();
          -[FigCapturePreviewSinkPipelineConfiguration setSceneClassifierPipelineVersion:]((uint64_t)v269, v274 & 0xFFFFFFFFFFFFLL);
          -[FigCapturePreviewSinkPipelineConfiguration setSourceColorSpaceProperties:]((uint64_t)v269, v731);
          -[FigCapturePreviewSinkPipelineConfiguration setSourcePixelFormatIsFullRange:]((uint64_t)v269, IsFullRange);
          unsigned int v275 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v260, "source"), @"DeviceType"), "intValue");
          -[FigCapturePreviewSinkPipelineConfiguration setSourceIsBravoDevice:]((uint64_t)v269, (v275 < 0xA) & (0x310u >> v275));
          char IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(v810);
          -[FigCapturePreviewSinkPipelineConfiguration setClientIsCameraOrDerivative:]((uint64_t)v269, IsCameraOrDerivative);
          long long v277 = *(_OWORD *)(v746 + 36);
          long long v982 = *(_OWORD *)(v746 + 20);
          long long v983 = v277;
          long long v278 = objc_msgSend(newValuea, "irisSinkConfiguration", -[FigCapturePreviewSinkPipelineConfiguration setClientAuditToken:]((uint64_t)v269, (uint64_t)&v982).n128_f64[0]);
          char isIrisMovieVitalityScoringEnabled = cs_isIrisMovieVitalityScoringEnabled(v278);
          -[FigCapturePreviewSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v269, isIrisMovieVitalityScoringEnabled);
          char shouldEnableDeferredNodePrepare = captureSession_shouldEnableDeferredNodePrepare(v810, (void *)[(id)v261 sourceConfiguration], objc_msgSend((id)v261, "enabled"));
          -[FigCapturePreviewSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v269, shouldEnableDeferredNodePrepare);
          -[FigCapturePreviewSinkPipelineConfiguration setRemoteVideoPreview:]((uint64_t)v269, *(unsigned char *)(v746 + 208));
          char shouldEnableOverCapture = cs_shouldEnableOverCapture(v260);
          -[FigCapturePreviewSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v269, shouldEnableOverCapture);
          -[FigCaptureCameraSourcePipelineConfiguration setForceCNRDisabled:]((uint64_t)v269, objc_msgSend((id)objc_msgSend((id)v261, "videoPreviewSinkConfiguration"), "primaryCaptureRectModificationEnabled"));
          if (objc_msgSend((id)objc_msgSend(newValuea, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled"))double v282 = 0.100000001; {
          else
          }
            double v282 = 0.0;
          -[FigCapturePreviewSinkPipelineConfiguration setVideoStabilizationOverscan:]((uint64_t)v269, v282);
          -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v269, v771);
          -[FigCapturePreviewSinkPipelineConfiguration setTrueVideoCaptureAdditionalZoomFactor:]((uint64_t)v269, v239);
          char v283 = cs_stillImageDepthDataType(v260) == 4;
          -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v269, v283);
          if ([(id)v261 previewDepthFilterRenderingEnabled]) {
            char v284 = cs_streamingDepthDataType(v260) == 3;
          }
          else {
            char v284 = 0;
          }
          int32x4_t v191 = v813;
          -[FigCaptureCameraSourcePipelineConfiguration setSoftISPEnabled:]((uint64_t)v269, v284);
          char v285 = [v260 smartCameraEnabled];
          if (v710 < 3) {
            char v286 = v285;
          }
          else {
            char v286 = 0;
          }
          -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v269, v286);
          if (v271) {
            char IsLaunchPrewarmingEnabled = FigCaptureSessionIsLaunchPrewarmingEnabled();
          }
          else {
            char IsLaunchPrewarmingEnabled = 0;
          }
          -[FigCaptureCameraSourcePipelineConfiguration setEnableStillImageSensorOverscanIfAvailable:]((uint64_t)v269, IsLaunchPrewarmingEnabled);
          -[FigCapturePreviewSinkPipelineConfiguration setMaxLossyCompressionLevel:]((uint64_t)v269, +[FigCaptureCameraParameters previewMaxLossyCompressionLevel](FigCaptureCameraParameters, "previewMaxLossyCompressionLevel"));
          if (v261 | (unint64_t)v712) {
            char v288 = v740;
          }
          else {
            char v288 = 0;
          }
          -[FigCapturePreviewSinkPipelineConfiguration setSmartStyleRenderingEnabled:]((uint64_t)v269, v288);
          uint64_t v12 = (const void *)v810;
          if ([v260 cinematicFramingEnabled])
          {
            int v289 = 2;
          }
          else if ([v260 manualCinematicFramingEnabled])
          {
            int v289 = 2;
          }
          else
          {
            int v289 = 1;
          }
          -[FigCapturePreviewSinkPipelineConfiguration setSmartStyleRenderingMethod:]((uint64_t)v269, v289);
          shouldEnablePreviewStabilizatiouint64_t n = cs_shouldEnablePreviewStabilization(v810, (void *)v261);
          -[FigCapturePreviewSinkPipelineConfiguration setPreviewStabilizationEnabled:]((uint64_t)v269, shouldEnablePreviewStabilization);
          -[FigCaptureMovieFileSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)v269, objc_msgSend(*(id *)(v746 + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(v260, "sourceID")) != 0);
          -[FigCaptureCameraSourcePipelineConfiguration setConfigureForStereoPhotoCaptureSupport:]((uint64_t)v269, v714);
          if (objc_msgSend((id)objc_msgSend((id)v261, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled"))
          {
            LOBYTE(v970[0]) = 0;
            LODWORD(v975) = 0;
            LODWORD(v971) = 0;
            cs_getZoomPIPOverlayConfiguration((void *)v261, (char *)v970, (float *)&v975, (float *)&v971);
            -[FigCaptureCameraSourcePipelineConfiguration setClockSynchronizationEnabled:]((uint64_t)v269, v970[0]);
            -[FigCapturePreviewSinkPipelineConfiguration setZoomPIPMinimumUIZoomFactor:]((uint64_t)v269, *(float *)&v975);
            -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationOverscanOverride:]((uint64_t)v269, *(float *)&v971);
          }
          shouldEnablePocketDetectiouint64_t n = cs_shouldEnablePocketDetection(v810, (void *)v261);
          -[FigCapturePreviewSinkPipelineConfiguration setPocketDetectionEnabled:]((uint64_t)v269, shouldEnablePocketDetection);
          -[FigCapturePreviewSinkPipelineConfiguration setParallelGraphRebuildEnabled:]((uint64_t)v269, v705);
          -[FigCapturePreviewSinkPipelineConfiguration setIspFastSwitchEnabled:]((uint64_t)v269, v733);
          -[FigCapturePreviewSinkPipelineConfiguration setRebuildingGraphForTrueVideoTransition:]((uint64_t)v269, v786);
          -[FigCaptureMovieFileSinkPipelineConfiguration setClientApplicationID:](v269, *(char **)(v746 + 88));
          -[FigCapturePreviewSinkPipelineConfiguration setPreallocatePreviewStitcherOutputBufferPool:]((uint64_t)v269, v753);
          -[FigCapturePreviewSinkPipelineConfiguration setCoreMediaFaceTrackingEnabled:]((uint64_t)v269, objc_msgSend((id)objc_msgSend(v236, "videoPreviewSinkConnectionConfiguration"), "coreMediaFaceTrackingEnabled"));
          uint64_t DerivedStorage = v812;
        }
        unsigned int v921 = v979[0];
        if (LODWORD(v979[0])) {
          goto LABEL_710;
        }
        uint64_t v292 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", objc_msgSend(v797, "sourceID"));
        if (v292)
        {
          uint64_t v293 = *(void *)(v292 + 24);
          int v294 = *(_DWORD *)(v292 + 32);
        }
        else
        {
          uint64_t v293 = 0;
          int v294 = 0;
        }
        uint64_t v295 = FigCaptureBuildSinkPipelineName(v293, v294, objc_msgSend((id)objc_msgSend(v236, "videoPreviewSinkConnectionConfiguration", v690, v696), "underlyingDeviceType"), @"Preview Sink Pipeline");
        uint64_t v296 = [(FigCaptureSessionPipelines *)v191 cinematographyPipelineWithSourceID:v780];
        uint64_t v297 = v296;
        if (v296)
        {
          uint64_t v298 = -[FigCaptureCinematographyPipeline previewOutput](v296);
          CFNumberRef v299 = v797;
        }
        else
        {
          uint64_t v300 = [v236 sourceDeviceType];
          CFNumberRef v299 = v797;
          uint64_t v298 = -[FigCaptureCameraSourcePipeline nextPreviewOutputForSourceDeviceType:]((uint64_t)v797, v300);
        }
        CFNumberRef v301 = [FigCaptureSessionPreviewSinkPipeline alloc];
        int v302 = captureSession_inferenceScheduler();
        uint64_t v303 = -[FigCapturePreviewSinkPipeline initWithConfiguration:sourcePreviewOutput:imageQueueSinkNode:graph:name:inferenceScheduler:captureDevice:previewTapDelegate:zoomPIPOverlayDelegate:](v301, "initWithConfiguration:sourcePreviewOutput:imageQueueSinkNode:graph:name:inferenceScheduler:captureDevice:previewTapDelegate:zoomPIPOverlayDelegate:", v269, v298, objd, v809, v295, v302, -[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v299), *(void *)(DerivedStorage + 712), *(void *)(DerivedStorage + 712));
        if (!v303)
        {
          FigDebugAssert3();
          unsigned int v921 = FigSignalErrorAt();
          goto LABEL_711;
        }
        float v304 = v303;
        [(FigCaptureSessionPreviewSinkPipeline *)v303 setSourceID:v780];
        [(FigCaptureSessionPreviewSinkPipeline *)v304 setImageQueueUpdatedNotificationSent:v717];
        if ([(FigCapturePreviewSinkPipeline *)v304 depthFilterRenderingEnabled]) {
          -[FigCaptureCameraSourcePipeline setFaceFilteringDelegate:](v299, (uint64_t)[(FigCapturePreviewSinkPipeline *)v304 filterNode]);
        }
        uint64_t v305 = -[FigCaptureCinematographyPipeline cinematicVideoFocusDetectionsProvider](v297);
        -[FigCaptureCameraSourcePipeline setCinematicVideoFocusDetectionsProvider:]((uint64_t)v299, v305);
        uint64_t v194 = v811;
        if (v786)
        {
          os_unfair_lock_lock(lock);
          if ([*(id *)(DerivedStorage + 520) count])
          {
            [(BWPreviewStitcherNode *)[(FigCapturePreviewSinkPipeline *)v304 previewStitcherNode] setWaitsForFencedUpdateBeforeFirstEmit:1];
            if (dword_1EB4C5110)
            {
              LODWORD(v975) = 0;
              LOBYTE(v971) = 0;
              CFNumberRef v306 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v307 = v975;
              if (os_log_type_enabled(v306, (os_log_type_t)v971)) {
                unsigned int v308 = v307;
              }
              else {
                unsigned int v308 = v307 & 0xFFFFFFFE;
              }
              if (v308)
              {
                uint64_t v309 = *(void *)(DerivedStorage + 104);
                LODWORD(v979[0]) = 136315394;
                *(void *)((char *)v979 + 4) = "captureSession_buildGraphWithConfiguration";
                WORD6(v979[0]) = 2114;
                *(void *)((char *)v979 + 14) = v309;
                LODWORD(v697) = 22;
                v691 = v979;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          if ((v771 & 1) == 0) {
            *(unsigned char *)(DerivedStorage + 539) = 1;
          }
          os_unfair_lock_unlock(lock);
        }
        -[FigCaptureSessionPipelines addPreviewSinkPipeline:](v191, "addPreviewSinkPipeline:", v304, v691, v697);
        double v235 = v721 + 1;
      }
      while (v721 + 1 != (char *)v707);
      uint64_t v310 = [(NSArray *)v701 countByEnumeratingWithState:&v882 objects:v961 count:16];
      uint64_t v707 = v310;
    }
    while (v310);
  }
  long long v881 = 0u;
  long long v880 = 0u;
  long long v879 = 0u;
  long long v878 = 0u;
  v754 = [(FigCaptureSessionParsedConfiguration *)v194 videoThumbnailSinkConfigurations];
  id v798 = (id)[(NSArray *)v754 countByEnumeratingWithState:&v878 objects:v960 count:16];
  if (v798)
  {
    v781 = (long long *)(DerivedStorage + 20);
    uint64_t v787 = *(void *)v879;
    do
    {
      uint64_t v311 = 0;
      do
      {
        if (*(void *)v879 != v787) {
          objc_enumerationMutation(v754);
        }
        CMTimeEpoch v312 = *(void **)(*((void *)&v878 + 1) + 8 * (void)v311);
        uint64_t v313 = objc_msgSend((id)objc_msgSend(v312, "sourceConfiguration"), "sourceID");
        id v314 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v191, "previewSinkPipelineWithSourceID:sourceDeviceType:", v313, [v312 underlyingDeviceType]);
        uint64_t v315 = [*(id *)(DerivedStorage + 656) objectForKeyedSubscript:v313];
        uint64_t v316 = [(FigCaptureSessionPipelines *)v191 cameraSourcePipelineWithSourceID:v313];
        unsigned int v317 = +[FigCaptureCameraParameters previewMaxLossyCompressionLevel];
        if (v315)
        {
          uint64_t v318 = *(void *)(v315 + 24);
          LODWORD(v315) = *(_DWORD *)(v315 + 32);
        }
        else
        {
          uint64_t v318 = 0;
        }
        uint64_t v319 = FigCaptureBuildSinkPipelineName(v318, v315, [v312 underlyingDeviceType], @"Video Thumbnail Sink Pipeline");
        uint64_t v320 = [v314 videoThumbnailSinkOutputTransform];
        uint64_t v322 = v321;
        *(void *)&v979[0] = v320;
        *((void *)&v979[0] + 1) = v321;
        unint64_t v324 = [v314 outputTransform];
        if (*(void *)&v979[0]) {
          BOOL v325 = 0;
        }
        else {
          BOOL v325 = *((void *)&v979[0] + 1) == 0;
        }
        if (v325) {
          uint64_t v326 = -[FigCaptureCameraSourcePipeline preferredPreviewDimensions](v316);
        }
        else {
          uint64_t v326 = v323;
        }
        long long v327 = [FigCaptureVideoThumbnailSinkPipeline alloc];
        uint64_t v328 = [v314 videoThumbnailSinkOutput];
        uint64_t v329 = *(void *)(v812 + 712);
        long long v330 = v781[1];
        long long v982 = *v781;
        long long v983 = v330;
        int v331 = -[FigCaptureVideoThumbnailSinkPipeline initWithGraph:name:videoSourceOutput:videoSourceTransform:outputTransform:videoThumbnailConnectionConfiguration:maxLossyCompressionLevel:clientAuditToken:notificationDelegate:](v327, v809, v319, v328, v320, v322, v324, v326, v312, v317, &v982, v329);
        if (!v331) {
          goto LABEL_723;
        }
        int32x4_t v191 = v813;
        [(FigCaptureSessionPipelines *)v813 addVideoThumbnailSinkPipeline:v331];
        uint64_t v311 = (char *)v311 + 1;
        uint64_t v12 = (const void *)v810;
        uint64_t DerivedStorage = v812;
      }
      while (v798 != v311);
      uint64_t v332 = [(NSArray *)v754 countByEnumeratingWithState:&v878 objects:v960 count:16];
      id v798 = (id)v332;
    }
    while (v332);
  }
  captureSession_cleanUpUnusedPreparedBrackets((uint64_t)v12, [(FigCaptureSessionParsedConfiguration *)v811 parsedStillImageSinkConfigurations]);
  long long v877 = 0u;
  long long v876 = 0u;
  long long v875 = 0u;
  long long v874 = 0u;
  int v333 = [(FigCaptureSessionParsedConfiguration *)v811 parsedStillImageSinkConfigurations];
  uint64_t v334 = [(NSArray *)v333 countByEnumeratingWithState:&v874 objects:v959 count:16];
  if (v334)
  {
    uint64_t v335 = v334;
    uint64_t v336 = *(void *)v875;
    do
    {
      for (uint64_t i4 = 0; i4 != v335; ++i4)
      {
        if (*(void *)v875 != v336) {
          objc_enumerationMutation(v333);
        }
        CMTime v338 = *(void **)(*((void *)&v874 + 1) + 8 * i4);
        int v339 = (void *)[v338 stillImageConnectionConfiguration];
        uint64_t v340 = objc_msgSend((id)objc_msgSend(v339, "sourceConfiguration"), "sourceID");
        uint64_t v341 = [v339 underlyingDeviceType];
        uint64_t v342 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v813, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v339, "sourceConfiguration"), "sourceID"));
        id v343 = [(FigCaptureSessionPipelines *)v813 previewSinkPipelineWithSourceID:v340 sourceDeviceType:v341];
        if ([v338 pointCloudDataConnectionConfiguration]) {
          uint64_t v344 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v813, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v338, "pointCloudDataConnectionConfiguration"), "sourceConfiguration"), "sourceID"));
        }
        else {
          uint64_t v344 = 0;
        }
        long long v345 = captureSession_createStillImageSinkPipelineSessionStorage(v810, v338, v342, v344, v343, [(FigCaptureSessionParsedConfiguration *)v811 smartStyleRenderingEnabled], &v921);
        if (v921) {
          goto LABEL_710;
        }
        [(FigCaptureSessionPipelines *)v813 addStillImageSinkPipelineSessionStorage:v345];
      }
      uint64_t v335 = [(NSArray *)v333 countByEnumeratingWithState:&v874 objects:v959 count:16];
    }
    while (v335);
  }
  long long v873 = 0u;
  long long v872 = 0u;
  long long v871 = 0u;
  long long v870 = 0u;
  long long v346 = v811;
  v741 = [(FigCaptureSessionParsedConfiguration *)v811 parsedVideoDataSinkConfigurations];
  uint64_t v12 = (const void *)v810;
  int v347 = v813;
  id v755 = (id)[(NSArray *)v741 countByEnumeratingWithState:&v870 objects:v958 count:16];
  if (v755)
  {
    uint64_t v747 = *(void *)v871;
    do
    {
      for (i5 = 0; i5 != v755; i5 = (char *)i5 + 1)
      {
        if (*(void *)v871 != v747) {
          objc_enumerationMutation(v741);
        }
        long long v349 = *(void **)(*((void *)&v870 + 1) + 8 * (void)i5);
        id v799 = (id)[v349 videoDataConnectionConfiguration];
        long long v350 = (void *)[v349 metadataObjectConnectionConfiguration];
        LOBYTE(v982) = 0;
        uint64_t v351 = objc_msgSend((id)objc_msgSend(v349, "cameraConfiguration"), "sourceID");
        uint64_t v352 = [v349 sourceDeviceType];
        long long v353 = [(FigCaptureSessionPipelines *)v813 cameraSourcePipelineWithSourceID:v351];
        uint64_t v788 = [(FigCaptureSessionPipelines *)v813 previewSinkPipelineWithSourceID:v351 sourceDeviceType:v352];
        int v354 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v349, "videoDataConnectionConfiguration"), "videoDataSinkConfiguration"), "optimizedForPreview");
        if (objc_msgSend((id)objc_msgSend(v349, "videoDataConnectionConfiguration"), "videoStabilizationMethod"))BOOL v355 = objc_msgSend((id)objc_msgSend(v349, "videoDataConnectionConfiguration"), "videoStabilizationMethod") == 4; {
        else
        }
          BOOL v355 = 1;
        if ((v354 & v355) == 1)
        {
          uint64_t v782 = -[FigCaptureCameraSourcePipeline nextPreviewOutputForSourceDeviceType:]((uint64_t)v353, v352);
          uint64_t v356 = -[FigCaptureCameraSourcePipeline previewOutputTransformForSourceDeviceType:]((uint64_t)v353, v352);
        }
        else
        {
          uint64_t v782 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:sharesBuffersWithOtherConnections:]((uint64_t)v353, v352, (char *)&v982);
          uint64_t v356 = -[FigCaptureCameraSourcePipeline videoCaptureOutputTransformForSourceDeviceType:]((uint64_t)v353, v352);
        }
        id obje = v357;
        id v772 = (id)v356;
        char v358 = FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(v350);
        char v359 = FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v350);
        uint64_t v360 = -[FigCaptureCameraSourcePipeline videoCaptureDimensionsWithoutOverscan]((uint64_t)v353);
        int v361 = objc_msgSend((id)objc_msgSend(v349, "cameraConfiguration"), "cinematicFramingEnabled");
        int v362 = objc_msgSend((id)objc_msgSend(v349, "cameraConfiguration"), "cinematicFramingEnabled");
        int v363 = v361 | objc_msgSend((id)objc_msgSend(v349, "cameraConfiguration"), "cinematicFramingEnabled") | v362;
        if (v363 == 1) {
          uint64_t v360 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v349, "cameraConfiguration"), "requiredFormat"), "cinematicFramingOutputDimensions");
        }
        int v364 = [v799 videoStabilizationType];
        int v365 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v353);
        char v366 = [(FigCaptureSessionParsedConfiguration *)v811 smartStyleRenderingEnabled];
        int v693 = v365;
        uint64_t v12 = (const void *)v810;
        id VideoDataSinkPipeline = captureSession_createVideoDataSinkPipeline(v810, v782, (uint64_t)v772, (uint64_t)obje, v360, v363, v799, v350, v364, v693, v353, v788, v359, v358, v366, v982);
        if (!VideoDataSinkPipeline) {
          goto LABEL_713;
        }
        int v347 = v813;
        [(FigCaptureSessionPipelines *)v813 addVideoDataSinkPipeline:VideoDataSinkPipeline];
        long long v346 = v811;
      }
      id v755 = (id)[(NSArray *)v741 countByEnumeratingWithState:&v870 objects:v958 count:16];
    }
    while (v755);
  }
  if ([(NSArray *)[(FigCaptureSessionParsedConfiguration *)v346 parsedVideoDataSinkConfigurations] count])
  {
    captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary((uint64_t)v12);
  }
  long long v869 = 0u;
  long long v868 = 0u;
  long long v867 = 0u;
  long long v866 = 0u;
  v800 = [(FigCaptureSessionParsedConfiguration *)v346 parsedVisionDataSinkConfigurations];
  uint64_t v368 = [(NSArray *)v800 countByEnumeratingWithState:&v866 objects:v957 count:16];
  if (v368)
  {
    uint64_t v369 = v368;
    uint64_t v370 = *(void *)v867;
    do
    {
      uint64_t v371 = 0;
      do
      {
        if (*(void *)v867 != v370) {
          objc_enumerationMutation(v800);
        }
        long long v372 = *(void **)(*((void *)&v866 + 1) + 8 * v371);
        long long v373 = (void *)[v372 visionDataConnectionConfiguration];
        uint64_t v374 = [v372 videoDataConnectionConfiguration];
        id v375 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v347, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v373, "sourceConfiguration"), "sourceID"));
        uint64_t v376 = objc_msgSend(*(id *)(v812 + 656), "objectForKeyedSubscript:", objc_msgSend(v375, "sourceID"));
        if (v376)
        {
          uint64_t v377 = *(void *)(v376 + 24);
          int v378 = *(_DWORD *)(v376 + 32);
        }
        else
        {
          uint64_t v377 = 0;
          int v378 = 0;
        }
        uint64_t v379 = FigCaptureBuildSinkPipelineName(v377, v378, [v373 underlyingDeviceType], @"Vision Data Sink Pipeline");
        uint64_t v380 = -[FigCaptureCameraSourcePipeline visionDataOutputForSourceDeviceType:]((uint64_t)v375, [v373 underlyingDeviceType]);
        long long v381 = [FigCaptureVisionDataSinkPipeline alloc];
        long long v382 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v375);
        uint64_t v383 = *(void *)(v812 + 712);
        long long v384 = *(_OWORD *)(v812 + 36);
        long long v982 = *(_OWORD *)(v812 + 20);
        long long v983 = v384;
        long long v385 = -[FigCaptureVisionDataSinkPipeline initWithVisionDataConnectionConfiguration:videoDataConnectionConfiguration:graph:name:visionCaptureOutput:captureDevice:clientAuditToken:delegate:](v381, v373, v374, v809, v379, v380, v382, &v982, v383);
        if (!v385) {
          goto LABEL_723;
        }
        int v347 = v813;
        [(FigCaptureSessionPipelines *)v813 addVisionDataSinkPipeline:v385];
        ++v371;
      }
      while (v369 != v371);
      uint64_t v386 = [(NSArray *)v800 countByEnumeratingWithState:&v866 objects:v957 count:16];
      uint64_t v369 = v386;
    }
    while (v386);
  }
  long long v865 = 0u;
  long long v864 = 0u;
  long long v863 = 0u;
  long long v862 = 0u;
  newValueb = [(FigCaptureSessionParsedConfiguration *)v811 parsedLiDARDepthPipelineConfigurations];
  uint64_t v387 = v812;
  uint64_t v748 = [(NSArray *)newValueb countByEnumeratingWithState:&v862 objects:v956 count:16];
  if (v748)
  {
    id v742 = *(id *)v863;
    unint64_t v388 = 0x1E4F1C000uLL;
    do
    {
      uint64_t v389 = 0;
      do
      {
        if (*(id *)v863 != v742) {
          objc_enumerationMutation(newValueb);
        }
        long long v390 = *(void **)(*((void *)&v862 + 1) + 8 * v389);
        uint64_t v391 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v390, "depthDataConnectionConfiguration"), "sourceConfiguration"), "sourceID");
        uint64_t v392 = objc_msgSend((id)objc_msgSend(v390, "timeOfFlightCameraConfiguration"), "sourceID");
        uint64_t v393 = [*(id *)(v387 + 656) objectForKeyedSubscript:v391];
        uint64_t v394 = [*(id *)(v387 + 656) objectForKeyedSubscript:v392];
        uint64_t v789 = v391;
        uint64_t v395 = [(FigCaptureSessionPipelines *)v347 cameraSourcePipelineWithSourceID:v391];
        id v756 = [(FigCaptureSessionPipelines *)v347 cameraSourcePipelineWithSourceID:v392];
        id v801 = v390;
        uint64_t v783 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v395, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v390, "depthDataConnectionConfiguration"), "sourceConfiguration"), "sourceDeviceType"));
        id v773 = (id)FigCaptureBuildSinkPipelineName(@"LiDARDepthCamera", 13, 13, @"LiDARDepth Pipeline");
        uint64_t v396 = (void *)[*(id *)(v388 + 2656) dictionary];
        if (v393) {
          uint64_t v397 = *(void **)(v393 + 16);
        }
        else {
          uint64_t v397 = 0;
        }
        uint64_t v398 = [v397 cameraInfoByPortType];
        if (v394) {
          id v399 = *(void **)(v394 + 16);
        }
        else {
          id v399 = 0;
        }
        uint64_t v400 = [v399 cameraInfoByPortType];
        [v396 addEntriesFromDictionary:v398];
        [v396 addEntriesFromDictionary:v400];
        long long v401 = (void *)[*(id *)(v388 + 2656) dictionary];
        long long v402 = (void *)[MEMORY[0x1E4F1CA48] array];
        if (v393) {
          long long v403 = *(void **)(v393 + 16);
        }
        else {
          long long v403 = 0;
        }
        objc_msgSend(v402, "addObjectsFromArray:", objc_msgSend(v403, "captureStreams"));
        id objf = v396;
        if (v394) {
          long long v404 = *(void **)(v394 + 16);
        }
        else {
          long long v404 = 0;
        }
        objc_msgSend(v402, "addObjectsFromArray:", objc_msgSend(v404, "captureStreams"));
        long long v861 = 0u;
        long long v860 = 0u;
        long long v859 = 0u;
        long long v858 = 0u;
        uint64_t v405 = [v402 countByEnumeratingWithState:&v858 objects:v955 count:16];
        if (v405)
        {
          uint64_t v406 = v405;
          uint64_t v407 = *(void *)v859;
          do
          {
            for (uint64_t i6 = 0; i6 != v406; ++i6)
            {
              if (*(void *)v859 != v407) {
                objc_enumerationMutation(v402);
              }
              objc_msgSend(v401, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(*((void *)&v858 + 1) + 8 * i6), "sensorIDString"), objc_msgSend(*(id *)(*((void *)&v858 + 1) + 8 * i6), "portType"));
            }
            uint64_t v406 = [v402 countByEnumeratingWithState:&v858 objects:v955 count:16];
          }
          while (v406);
        }
        uint64_t v409 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput]((uint64_t)v756);
        uint64_t v410 = [FigCaptureLiDARDepthPipeline alloc];
        if (v393) {
          uint64_t v411 = *(void *)(v393 + 16);
        }
        else {
          uint64_t v411 = 0;
        }
        uint64_t v387 = v812;
        if (v394) {
          long long v412 = *(void **)(v394 + 16);
        }
        else {
          long long v412 = 0;
        }
        long long v413 = -[FigCaptureLiDARDepthPipeline initWithCaptureDevice:cameraInfoByPortType:sensorIDStringsByPortType:timeOfFlightCameraType:depthDataCaptureConnectionConfiguration:videoSourceCaptureOutput:pointCloudOutput:graph:name:rgbCameraSourceID:errorOut:](v410, "initWithCaptureDevice:cameraInfoByPortType:sensorIDStringsByPortType:timeOfFlightCameraType:depthDataCaptureConnectionConfiguration:videoSourceCaptureOutput:pointCloudOutput:graph:name:rgbCameraSourceID:errorOut:", v411, objf, v401, [v412 timeOfFlightCameraType], objc_msgSend(v801, "depthDataConnectionConfiguration"), v783, v409, v809, v773, v789, &v921);
        int v347 = v813;
        [(FigCaptureSessionPipelines *)v813 addLiDARDepthPipeline:v413];
        ++v389;
        unint64_t v388 = 0x1E4F1C000;
      }
      while (v389 != v748);
      uint64_t v414 = [(NSArray *)newValueb countByEnumeratingWithState:&v862 objects:v956 count:16];
      uint64_t v748 = v414;
    }
    while (v414);
  }
  long long v857 = 0u;
  long long v856 = 0u;
  long long v855 = 0u;
  long long v854 = 0u;
  v802 = [(FigCaptureSessionParsedConfiguration *)v811 parsedDepthDataSinkConfigurations];
  uint64_t v415 = [(NSArray *)v802 countByEnumeratingWithState:&v854 objects:v954 count:16];
  uint64_t v416 = v810;
  if (v415)
  {
    uint64_t v417 = v415;
    uint64_t v418 = *(void *)v855;
    do
    {
      uint64_t v419 = 0;
      do
      {
        if (*(void *)v855 != v418) {
          objc_enumerationMutation(v802);
        }
        long long v420 = *(void **)(*((void *)&v854 + 1) + 8 * v419);
        long long v421 = (void *)[v420 depthDataConnectionConfiguration];
        uint64_t v422 = [v420 videoDataConnectionConfiguration];
        uint64_t v423 = [v420 metadataObjectConnectionConfiguration];
        if (v422) {
          v424 = (void *)v422;
        }
        else {
          v424 = (void *)v423;
        }
        if (!v421) {
          long long v421 = v424;
        }
        uint64_t v425 = objc_msgSend((id)objc_msgSend(v421, "sourceConfiguration"), "sourceID");
        uint64_t v426 = [v421 underlyingDeviceType];
        v427 = v347;
        id v428 = [(FigCaptureSessionPipelines *)v347 previewSinkPipelineWithSourceID:v425 sourceDeviceType:v426];
        uint64_t v429 = [(FigCaptureSessionPipelines *)v427 videoDataSinkPipelineForMetadataWithSourceID:v425 sourceDeviceType:v426];
        id v430 = [(FigCaptureSessionPipelines *)v427 cameraSourcePipelineWithSourceID:v425];
        id v431 = [(FigCaptureSessionPipelines *)v427 lidarDepthPipelineWithRGBCameraSourceID:v425];
        uint64_t v432 = [v431 depthDataSinkOutput];
        if (-[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v429))
        {
          uint64_t v433 = -[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v429);
          goto LABEL_510;
        }
        if (v432)
        {
          long long v434 = v431;
LABEL_509:
          uint64_t v433 = [v434 depthDataSinkOutput];
          goto LABEL_510;
        }
        if ([v428 depthDataSinkOutput])
        {
          long long v434 = v428;
          goto LABEL_509;
        }
        uint64_t v433 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v430, [v421 underlyingDeviceType]);
LABEL_510:
        uint64_t v435 = v433;
        uint64_t DerivedStorage = v812;
        long long v436 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v430);
        char v437 = -[FigCaptureCameraSourcePipeline hardwareDepthFilteringEnabled]((BOOL)v430);
        DepthDataPipelineConfiguratiouint64_t n = captureSession_createDepthDataPipelineConfiguration(v810, v420, v436, v437, v432 != 0);
        uint64_t v439 = objc_msgSend(*(id *)(v812 + 656), "objectForKeyedSubscript:", objc_msgSend(v430, "sourceID"));
        if (v439)
        {
          uint64_t v440 = *(void *)(v439 + 24);
          int v441 = *(_DWORD *)(v439 + 32);
        }
        else
        {
          uint64_t v440 = 0;
          int v441 = 0;
        }
        v442 = -[FigCaptureDepthDataPipeline initWithConfiguration:sourceOutput:graph:name:delegate:]([FigCaptureDepthDataPipeline alloc], "initWithConfiguration:sourceOutput:graph:name:delegate:", DepthDataPipelineConfiguration, v435, v809, FigCaptureBuildSinkPipelineName(v440, v441, [v421 underlyingDeviceType], @"Depth Data Sink Pipeline"), *(void *)(v812 + 712));
        if (!v442)
        {
          FigDebugAssert3();
          unsigned int v656 = FigSignalErrorAt();
          unsigned int v921 = v656;
          BOOL v699 = 1;
          goto LABEL_712;
        }
        int v347 = v813;
        [(FigCaptureSessionPipelines *)v813 addDepthDataSinkPipeline:v442];
        ++v419;
        uint64_t v416 = v810;
      }
      while (v417 != v419);
      uint64_t v443 = [(NSArray *)v802 countByEnumeratingWithState:&v854 objects:v954 count:16];
      uint64_t v417 = v443;
    }
    while (v443);
  }
  long long v852 = 0u;
  long long v853 = 0u;
  long long v850 = 0u;
  long long v851 = 0u;
  v774 = [(FigCaptureSessionParsedConfiguration *)v811 parsedMetadataSinkConfigurations];
  uint64_t v444 = [(NSArray *)v774 countByEnumeratingWithState:&v850 objects:v953 count:16];
  if (v444)
  {
    id v445 = (id)v444;
    uint64_t v446 = *(void *)v851;
    uint64_t v749 = *(void *)v851;
    do
    {
      uint64_t v447 = 0;
      id objg = v445;
      do
      {
        if (*(void *)v851 != v446) {
          objc_enumerationMutation(v774);
        }
        CGSize v448 = *(void **)(*((void *)&v850 + 1) + 8 * (void)v447);
        v449 = (void *)[v448 metadataObjectConnectionConfiguration];
        if (([v449 attachMetadataToVideoBuffers] & 1) == 0)
        {
          v450 = v347;
          uint64_t v451 = objc_msgSend((id)objc_msgSend(v449, "sourceConfiguration"), "sourceID");
          uint64_t v452 = [v449 underlyingDeviceType];
          id v453 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v450, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v449, "sourceConfiguration"), "sourceID"));
          int v454 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v453);
          v455 = captureSession_createMetadataSinkPipelineConfiguration(v416, v448, v454, &v921);
          if (v921) {
            goto LABEL_217;
          }
          uint64_t v456 = (uint64_t)v455;
          id v457 = [(FigCaptureSessionPipelines *)v450 depthDataSinkPipelineWithSourceID:v451 sourceDeviceType:v452];
          v803 = (BWPipelineStage *)[v457 pipelineStage];
          id v458 = [(FigCaptureSessionPipelines *)v450 previewSinkPipelineWithSourceID:v451 sourceDeviceType:v452];
          uint64_t v459 = [(FigCaptureSessionPipelines *)v450 videoDataSinkPipelineForMetadataWithSourceID:v451 sourceDeviceType:v452];
          if ((FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v449) & 1) != 0
            || (FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(v449) & 1) != 0
            || (v460 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration](v456),
                (FigCaptureMetadataObjectConfigurationRequiresSceneClassification(v460) & 1) != 0)
            || (v461 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration](v456),
                FigCaptureMetadataObjectConfigurationRequiresVisualIntelligenceObjectDetection(v461)))
          {
            uint64_t v462 = [v458 metadataSinkOutput];
            if (!v462) {
              uint64_t v462 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v453, [v449 underlyingDeviceType]);
            }
            v790 = (void *)v462;
            uint64_t v463 = [v458 metadataSinkOutput];
            BOOL v464 = -[FigCaptureMetadataSinkPipelineConfiguration compressed8BitInputEnabled](v456);
            if (v463) {
              char v465 = 0;
            }
            else {
              char v465 = v464;
            }
            -[FigCaptureMetadataSinkPipelineConfiguration setCompressed8BitInputEnabled:](v456, v465);
          }
          else
          {
            v790 = 0;
          }
          v466 = (void *)[v457 videoAndConvertedDepthDataOutput];
          if (!v466) {
            v466 = (void *)-[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v459);
          }
          uint64_t v467 = -[FigCaptureCameraSourcePipeline detectedObjectsOutputForSourceDeviceType:]((uint64_t)v453, [v449 underlyingDeviceType]);
          if (!v467) {
            uint64_t v467 = -[FigCaptureCameraSourcePipeline secureDetectedObjectsOutputForSourceDeviceType:]((uint64_t)v453, [v449 underlyingDeviceType]);
          }
          uint64_t v468 = v459;
          uint64_t v784 = -[FigCaptureCameraSourcePipeline eyeReliefStatusOutputForSourceDeviceType:]((uint64_t)v453, [v449 underlyingDeviceType]);
          if (!v466) {
            v466 = (void *)-[FigCaptureCameraSourcePipeline trackedFacesOutputForSourceDeviceType:]((uint64_t)v453, [v449 underlyingDeviceType]);
          }
          uint64_t v469 = objc_msgSend(*(id *)(v812 + 656), "objectForKeyedSubscript:", objc_msgSend(v453, "sourceID"));
          if (v469)
          {
            uint64_t v470 = *(void *)(v469 + 24);
            int v471 = *(_DWORD *)(v469 + 32);
          }
          else
          {
            uint64_t v470 = 0;
            int v471 = 0;
          }
          uint64_t v472 = FigCaptureBuildSinkPipelineName(v470, v471, [v449 underlyingDeviceType], @"Metadata Sink Pipeline");
          uint64_t v473 = [(FigCaptureSessionPipelines *)v813 cinematographyPipelineWithSourceID:v451];
          if (v473) {
            uint64_t v467 = -[FigCaptureCinematographyPipeline detectedObjectsOutput](v473);
          }
          v474 = [FigCaptureMetadataSinkPipeline alloc];
          v475 = (void *)-[FigCaptureVideoDataSinkPipeline offlineVISMotionDataCaptureOutput](v468);
          v476 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v453);
          v477 = captureSession_inferenceScheduler();
          uint64_t v478 = *(void *)(v812 + 712);
          long long v479 = *(_OWORD *)(v812 + 36);
          long long v982 = *(_OWORD *)(v812 + 20);
          long long v983 = v479;
          v480 = -[FigCaptureMetadataSinkPipeline initWithConfiguration:graph:name:videoPreviewOutput:offlineVISMotionDataSourceOutput:objectDetectionSourceOutput:faceTrackingSourceOutput:eyeReliefStatusSourceOutput:captureDevice:faceTrackingPipelineStage:clientAuditToken:inferenceScheduler:delegate:](v474, v456, v809, v472, v790, v475, v467, v466, v784, v476, v803, &v982, (uint64_t)v477, v478);
          id v445 = objg;
          if (!v480) {
            goto LABEL_723;
          }
          int v347 = v813;
          [(FigCaptureSessionPipelines *)v813 addMetadataSinkPipeline:v480];
          uint64_t v416 = v810;
          uint64_t v446 = v749;
        }
        uint64_t v447 = (char *)v447 + 1;
      }
      while (v445 != v447);
      uint64_t v481 = [(NSArray *)v774 countByEnumeratingWithState:&v850 objects:v953 count:16];
      id v445 = (id)v481;
    }
    while (v481);
  }
  long long v848 = 0u;
  long long v849 = 0u;
  long long v846 = 0u;
  long long v847 = 0u;
  v482 = v811;
  v715 = [(FigCaptureSessionParsedConfiguration *)v811 parsedMovieFileSinkConfigurations];
  v722 = (char *)[(NSArray *)v715 countByEnumeratingWithState:&v846 objects:v952 count:16];
  if (!v722) {
    goto LABEL_622;
  }
  uint64_t v718 = *(void *)v847;
  do
  {
    v483 = 0;
    do
    {
      if (*(void *)v847 != v718) {
        objc_enumerationMutation(v715);
      }
      v484 = *(void **)(*((void *)&v846 + 1) + 8 * (void)v483);
      v485 = (void *)[v484 videoConnectionConfiguration];
      v486 = (void *)[v484 audioConnectionConfiguration];
      uint64_t v487 = [v484 detectedObjectMetadataConnectionConfigurations];
      if (v485) {
        v488 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v347, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v485, "sourceConfiguration"), "sourceID"));
      }
      else {
        v488 = 0;
      }
      v732 = (void *)v487;
      if (v486) {
        uint64_t v489 = [(FigCaptureSessionPipelines *)v347 micSourcePipeline];
      }
      else {
        uint64_t v489 = 0;
      }
      uint64_t v490 = -[FigCaptureSessionPipelines cinematographyPipelineWithSourceID:](v347, "cinematographyPipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v485, "sourceConfiguration"), "sourceID"));
      uint64_t v491 = v490;
      if (v490) {
        uint64_t v492 = -[FigCaptureCinematographyPipeline videoCaptureOutput](v490);
      }
      else {
        uint64_t v492 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v488, [v485 underlyingDeviceType]);
      }
      uint64_t v785 = v492;
      uint64_t v493 = -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v489, [v486 builtInMicrophonePosition]);
      if ([v486 audioCaptureMode] == 2) {
        char v494 = v700;
      }
      else {
        char v494 = 1;
      }
      newValuec = v483;
      id objh = (id)v493;
      if (v494) {
        id v757 = 0;
      }
      else {
        id v757 = (id)-[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v489, [v486 builtInMicrophonePosition]);
      }
      id v775 = (id)v489;
      [(id)-[FigCaptureMicSourcePipeline sourceNode](v489) setCinematicVideoCaptureEnabled:v491 != 0];
      *(void *)&long long v975 = 0;
      cs_getMasterClockAndType(v813, (uint64_t *)&v975, 0);
      int v495 = [v485 videoStabilizationType];
      id v727 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v813, "previewSinkPipelineWithSourceID:sourceDeviceType:", [v488 sourceID], objc_msgSend(v485, "underlyingDeviceType"));
      uint64_t v496 = -[FigCaptureCameraSourcePipeline videoCaptureOutputTransformForSourceDeviceType:]((uint64_t)v488, objc_msgSend((id)objc_msgSend(v485, "sourceConfiguration"), "sourceDeviceType"));
      uint64_t v498 = v497;
      char v499 = [(FigCaptureSessionParsedConfiguration *)v811 smartStyleRenderingEnabled];
      int v500 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v488);
      MovieFileSinkPipelineConfigurationFromParsedConfiguratiouint64_t n = captureSession_createMovieFileSinkPipelineConfigurationFromParsedConfiguration(v810, v484, v488, v496, v498, v495, v499, v500, v700, v733);
      v502 = [(FigCaptureSessionPipelines *)v813 metadataSourcePipelines];
      v791 = v484;
      if ([(NSArray *)v502 count]) {
        v503 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", -[NSArray count](v502, "count"));
      }
      else {
        v503 = 0;
      }
      long long v844 = 0u;
      long long v845 = 0u;
      long long v842 = 0u;
      long long v843 = 0u;
      uint64_t v504 = [(NSArray *)v502 countByEnumeratingWithState:&v842 objects:v951 count:16];
      if (v504)
      {
        uint64_t v505 = v504;
        uint64_t v506 = *(void *)v843;
        do
        {
          for (uint64_t i7 = 0; i7 != v505; ++i7)
          {
            if (*(void *)v843 != v506) {
              objc_enumerationMutation(v502);
            }
            [v503 addObject:-[FigCaptureMetadataSourcePipeline output](*(void *)(*((void *)&v842 + 1) + 8 * i7))];
          }
          uint64_t v505 = [(NSArray *)v502 countByEnumeratingWithState:&v842 objects:v951 count:16];
        }
        while (v505);
      }
      if (v488)
      {
        uint64_t v508 = objc_msgSend(*(id *)(v812 + 656), "objectForKeyedSubscript:", objc_msgSend(v488, "sourceID"));
        v509 = v791;
        if (v508)
        {
          uint64_t v510 = *(void *)(v508 + 24);
          int v511 = *(_DWORD *)(v508 + 32);
        }
        else
        {
          uint64_t v510 = 0;
          int v511 = 0;
        }
        uint64_t v512 = FigCaptureBuildSinkPipelineName(v510, v511, [v485 underlyingDeviceType], @"Movie File Sink Pipeline");
      }
      else
      {
        v513 = NSString;
        unsigned int v514 = [v486 builtInMicrophonePosition];
        v509 = v791;
        if (v514 > 2) {
          v515 = 0;
        }
        else {
          v515 = off_1E5C28BF8[v514];
        }
        uint64_t v512 = [v513 stringWithFormat:@"%@ Microphone Movie File Sink Pipeline", v515];
      }
      uint64_t v516 = v512;
      if (cs_shouldConvertToBT2020((uint64_t)v488, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v509, "videoConnectionConfiguration"), "sourceConfiguration"), "colorSpace")))char v517 = *(unsigned char *)(v812 + 696) == 0; {
      else
      }
        char v517 = 0;
      -[FigCaptureMovieFileSinkPipelineConfiguration setP3ToBT2020ConversionEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, v517);
      if (v485)
      {
        char v518 = v491 != 0;
        v950 = v485;
        v519 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v950 count:1];
        int v520 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)v488);
        char shouldEnableVideoSTF = cs_shouldEnableVideoSTF(v519, v518, v520);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, shouldEnableVideoSTF);
        shouldEnableVideoGreenGhostMitigatiouint64_t n = cs_shouldEnableVideoGreenGhostMitigation(v485, v518);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoGreenGhostMitigationEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, shouldEnableVideoGreenGhostMitigation);
        char v523 = -[FigCaptureCameraSourcePipeline isLightSourceMaskAndKeypointDescriptorDataOnVideoCaptureOutputsEnabledForSourceDeviceType:]((uint64_t)v488, [v485 underlyingDeviceType]);
        -[FigCaptureMovieFileSinkPipelineConfiguration setLightSourceMaskAndKeypointDescriptorDataEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, v523);
      }
      -[FigCaptureMovieFileSinkPipelineConfiguration videoSourceCaptureTransform]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration);
      BOOL v526 = v525 * v524 < 8294400
          && [(NSArray *)[(FigCaptureSessionParsedConfiguration *)v811 parsedCameraSourceConfigurations] count] == 1;
      id v743 = (id)-[FigCaptureMetadataSinkPipeline smartCameraInferenceOutput]((uint64_t)-[FigCaptureSessionPipelines metadataSinkPipelineWithSourceID:sourceDeviceType:](v813, "metadataSinkPipelineWithSourceID:sourceDeviceType:", objc_msgSend((id)objc_msgSend(v485, "sourceConfiguration"), "sourceID"), objc_msgSend(v485, "underlyingDeviceType")));
      uint64_t v750 = (uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration;
      id v804 = v488;
      if (-[FigCaptureMovieFileSinkPipelineConfiguration boxedMetadataPostVISEnabled]((BOOL)MovieFileSinkPipelineConfigurationFromParsedConfiguration)
        || ![v732 count])
      {
        unsigned __int8 v529 = v526;
        uint64_t v527 = v516;
        v530 = 0;
        goto LABEL_603;
      }
      uint64_t v527 = v516;
      uint64_t v528 = -[FigCaptureSessionPipelines metadataSinkPipelineWithSourceID:sourceDeviceType:](v813, "metadataSinkPipelineWithSourceID:sourceDeviceType:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v732, "firstObject"), "sourceConfiguration"), "sourceID"), objc_msgSend((id)objc_msgSend(v732, "firstObject"), "underlyingDeviceType"));
      unsigned __int8 v529 = v526;
      if (v528)
      {
        v530 = (void *)-[FigCaptureMetadataSinkPipeline detectedObjectBoxedMetadataOutputs](v528);
LABEL_603:
        uint64_t v531 = 0;
        goto LABEL_604;
      }
      uint64_t v531 = -[FigCaptureCameraSourcePipeline detectedObjectsOutputForSourceDeviceType:]((uint64_t)v804, [v485 underlyingDeviceType]);
      v530 = 0;
LABEL_604:
      v532 = [FigCaptureSessionMovieFileSinkPipeline alloc];
      uint64_t v533 = *(void *)(v812 + 632);
      v534 = captureSession_inferenceScheduler();
      v535 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v804);
      uint64_t v536 = -[FigCaptureMicSourcePipeline sourceNode]((uint64_t)v775);
      v537 = objc_autorelease(-[FigCaptureMovieFileSinkPipeline initWithConfiguration:videoSourceCaptureOutput:audioSourceCaptureOutput:audioSourceCinematicAudioCaptureOutput:smartCameraInferenceOutput:detectedObjectBoxedMetadataOutputs:objectDetectionSourceOutput:metadataSourcePipelineOutputs:graph:name:inferenceScheduler:captureDevice:audioSourceDelegate:fileCoordinatorStatusDelegate:recordingStatusDelegate:irisRequestDelegate:masterClock:delayedCompressorCleanupEnabled:]((char *)v532, v750, v785, (uint64_t)objh, (uint64_t)v757, (uint64_t)v743, v530, v531, (uint64_t)v503, v533, v527, (uint64_t)v534, v535, v536, *(void *)(v812 + 712), *(void *)(v812 + 712), *(void *)(v812 + 712), v975,
                 v529));
      if (!v537) {
        goto LABEL_723;
      }
      uint64_t v538 = (uint64_t)v537;
      objc_msgSend(v537, "setCheckIfFileAlreadyExistForMFO:", objc_msgSend(v708, "checkIfFileAlreadyExistForMFO"));
      int v347 = v813;
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v791, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled"))
      {
        v539 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v804);
        long long v840 = *MEMORY[0x1E4F1FA10];
        long long v792 = v840;
        uint64_t v841 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
        uint64_t v540 = v841;
        [v539 setZeroShutterLagEarliestAllowedPTS:&v840];
        v541 = (void *)[v727 timeMachineSinkNode];
        long long v838 = v792;
        uint64_t v839 = v540;
        [v541 setEarliestAllowedPTS:&v838];
      }
      if (-[FigCaptureMovieFileSinkPipelineConfiguration trueVideoCaptureEnabled](v750)
        && [(id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v804) position] == 1)
      {

        id v542 = (id)-[FigCaptureMovieFileSinkPipeline ispProcessingSession](v538);
        *(void *)(v812 + 744) = v542;
        if (v542)
        {
          if (dword_1EB4C5110)
          {
            LODWORD(v971) = 0;
            LOBYTE(v970[0]) = 0;
            v543 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v544 = v971;
            if (os_log_type_enabled(v543, v970[0])) {
              unsigned int v545 = v544;
            }
            else {
              unsigned int v545 = v544 & 0xFFFFFFFE;
            }
            if (v545)
            {
              uint64_t v546 = *(void *)(v812 + 104);
              uint64_t v547 = *(void *)(v812 + 744);
              LODWORD(v979[0]) = 136315650;
              *(void *)((char *)v979 + 4) = "captureSession_buildGraphWithConfiguration";
              WORD6(v979[0]) = 2114;
              *(void *)((char *)v979 + 14) = v546;
              WORD3(v979[1]) = 2048;
              *((void *)&v979[1] + 1) = v547;
              LODWORD(v69_Block_object_dispose(&STACK[0x4E0], 8) = 32;
              v692 = v979;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      -[FigCaptureSessionPipelines addMovieFileSinkPipeline:](v813, "addMovieFileSinkPipeline:", v538, v692, v698);
      v483 = newValuec + 1;
      v482 = v811;
    }
    while (newValuec + 1 != v722);
    uint64_t v548 = [(NSArray *)v715 countByEnumeratingWithState:&v846 objects:v952 count:16];
    v722 = (char *)v548;
  }
  while (v548);
LABEL_622:
  long long v836 = 0u;
  long long v837 = 0u;
  long long v834 = 0u;
  long long v835 = 0u;
  v549 = [(FigCaptureSessionParsedConfiguration *)v482 audioFileSinkConnectionConfigurations];
  uint64_t v550 = [(NSArray *)v549 countByEnumeratingWithState:&v834 objects:v949 count:16];
  if (!v550)
  {
LABEL_636:
    long long v832 = 0u;
    long long v833 = 0u;
    long long v830 = 0u;
    long long v831 = 0u;
    v805 = [(FigCaptureSessionParsedConfiguration *)v811 audioDataSinkConnectionConfigurations];
    uint64_t v564 = [(NSArray *)v805 countByEnumeratingWithState:&v830 objects:v948 count:16];
    if (v564)
    {
      uint64_t v565 = v564;
      uint64_t v566 = *(void *)v831;
LABEL_638:
      uint64_t v567 = 0;
      while (1)
      {
        if (*(void *)v831 != v566) {
          objc_enumerationMutation(v805);
        }
        v568 = *(void **)(*((void *)&v830 + 1) + 8 * v567);
        int v569 = [v568 audioCaptureMode];
        uint64_t v570 = [(FigCaptureSessionPipelines *)v813 micSourcePipeline];
        int v571 = [v568 builtInMicrophonePosition];
        uint64_t v572 = v569 == 2
             ? -[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v570, v571)
             : -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v570, v571);
        uint64_t v573 = v572;
        v574 = NSString;
        unsigned int v575 = [v568 builtInMicrophonePosition];
        v576 = v575 > 2 ? 0 : off_1E5C28BF8[v575];
        uint64_t v577 = [v574 stringWithFormat:@"%@ Microphone Audio Data Sink Pipeline", v576];
        v578 = [FigCaptureAudioDataSinkPipeline alloc];
        uint64_t v579 = *(void *)(v812 + 712);
        long long v580 = *(_OWORD *)(v812 + 36);
        long long v982 = *(_OWORD *)(v812 + 20);
        long long v983 = v580;
        v581 = -[FigCaptureAudioDataSinkPipeline initWithConfiguration:graph:name:sourceAudioOutput:clientAuditToken:renderDelegate:](v578, v568, v809, v577, v573, &v982, v579);
        if (!v581) {
          goto LABEL_723;
        }
        [(FigCaptureSessionPipelines *)v813 addAudioDataSinkPipeline:v581];
        if (v565 == ++v567)
        {
          uint64_t v565 = [(NSArray *)v805 countByEnumeratingWithState:&v830 objects:v948 count:16];
          if (v565) {
            goto LABEL_638;
          }
          break;
        }
      }
    }
    long long v828 = 0u;
    long long v829 = 0u;
    long long v826 = 0u;
    long long v827 = 0u;
    v806 = [(FigCaptureSessionParsedConfiguration *)v811 pointCloudDataSinkConnectionConfigurations];
    uint64_t v582 = [(NSArray *)v806 countByEnumeratingWithState:&v826 objects:v947 count:16];
    if (v582)
    {
      uint64_t v583 = v582;
      uint64_t v584 = *(void *)v827;
LABEL_652:
      uint64_t v585 = 0;
      while (1)
      {
        if (*(void *)v827 != v584) {
          objc_enumerationMutation(v806);
        }
        v586 = *(void **)(*((void *)&v826 + 1) + 8 * v585);
        id v587 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v813, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v586, "sourceConfiguration"), "sourceID"));
        uint64_t v588 = [NSString stringWithFormat:@"%@ Point Cloud Data Sink Pipeline", objc_msgSend(v587, "name")];
        uint64_t v589 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput]((uint64_t)v587);
        v590 = [FigCapturePointCloudDataSinkPipeline alloc];
        uint64_t v591 = *(void *)(v812 + 712);
        long long v592 = *(_OWORD *)(v812 + 36);
        long long v982 = *(_OWORD *)(v812 + 20);
        long long v983 = v592;
        v593 = -[FigCapturePointCloudDataSinkPipeline initWithConfiguration:sourceOutput:graph:name:clientAuditToken:delegate:](v590, v586, v589, v809, v588, &v982, v591);
        if (!v593) {
          goto LABEL_723;
        }
        [(FigCaptureSessionPipelines *)v813 addPointCloudDataSinkPipeline:v593];
        if (v583 == ++v585)
        {
          uint64_t v583 = [(NSArray *)v806 countByEnumeratingWithState:&v826 objects:v947 count:16];
          if (v583) {
            goto LABEL_652;
          }
          break;
        }
      }
    }
    long long v824 = 0u;
    long long v825 = 0u;
    long long v822 = 0u;
    long long v823 = 0u;
    v807 = [(FigCaptureSessionParsedConfiguration *)v811 cameraCalibrationDataSinkConnectionConfigurations];
    uint64_t v594 = [(NSArray *)v807 countByEnumeratingWithState:&v822 objects:v946 count:16];
    v595 = v813;
    if (v594)
    {
      uint64_t v596 = v594;
      uint64_t v597 = *(void *)v823;
LABEL_660:
      uint64_t v598 = 0;
      while (1)
      {
        if (*(void *)v823 != v597) {
          objc_enumerationMutation(v807);
        }
        v599 = *(void **)(*((void *)&v822 + 1) + 8 * v598);
        uint64_t v600 = objc_msgSend((id)objc_msgSend(v599, "sourceConfiguration"), "sourceID");
        uint64_t v601 = [v599 underlyingDeviceType];
        id v602 = [(FigCaptureSessionPipelines *)v595 cameraSourcePipelineWithSourceID:v600];
        uint64_t v603 = objc_msgSend(*(id *)(v812 + 656), "objectForKeyedSubscript:", objc_msgSend(v602, "sourceID"));
        uint64_t v604 = v603;
        if (v603)
        {
          uint64_t v603 = *(void *)(v603 + 24);
          int v605 = *(_DWORD *)(v604 + 32);
        }
        else
        {
          int v605 = 0;
        }
        uint64_t v606 = FigCaptureBuildSinkPipelineName(v603, v605, v601, @"Calibration Data Sink Pipeline");
        uint64_t v607 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v602, v601);
        v608 = v604 ? *(void **)(v604 + 16) : 0;
        uint64_t v609 = [v608 cameraInfoByPortType];
        v610 = [FigCaptureCameraCalibrationDataSinkPipeline alloc];
        uint64_t v611 = *(void *)(v812 + 712);
        long long v612 = *(_OWORD *)(v812 + 36);
        long long v982 = *(_OWORD *)(v812 + 20);
        long long v983 = v612;
        v613 = -[FigCaptureCameraCalibrationDataSinkPipeline initWithConfiguration:sourceOutput:graph:name:cameraInfoByPortType:clientAuditToken:delegate:](v610, v599, v607, v809, v606, v609, &v982, v611);
        uint64_t v12 = (const void *)v810;
        if (!v613) {
          break;
        }
        v595 = v813;
        [(FigCaptureSessionPipelines *)v813 addCameraCalibrationDataSinkPipeline:v613];
        if (v596 == ++v598)
        {
          uint64_t v614 = [(NSArray *)v807 countByEnumeratingWithState:&v822 objects:v946 count:16];
          uint64_t v596 = v614;
          if (v614) {
            goto LABEL_660;
          }
          goto LABEL_673;
        }
      }
LABEL_713:
      FigDebugAssert3();
      unsigned int v656 = FigSignalErrorAt();
      unsigned int v921 = v656;
      BOOL v699 = 1;
      goto LABEL_724;
    }
LABEL_673:
    long long v820 = 0u;
    long long v821 = 0u;
    long long v818 = 0u;
    long long v819 = 0u;
    v615 = v811;
    v616 = [(FigCaptureSessionParsedConfiguration *)v811 parsedMetadataSinkConfigurations];
    uint64_t v617 = [(NSArray *)v616 countByEnumeratingWithState:&v818 objects:v945 count:16];
    if (v617)
    {
      uint64_t v618 = v617;
      uint64_t v619 = *(void *)v819;
      do
      {
        for (uint64_t i8 = 0; i8 != v618; ++i8)
        {
          if (*(void *)v819 != v619) {
            objc_enumerationMutation(v616);
          }
          v621 = *(void **)(*((void *)&v818 + 1) + 8 * i8);
          if (captureSession_shouldUseSceneClassifierToGateMetadataDetection(v810, [v621 sceneClassifierConnectionConfiguration], objc_msgSend(v621, "metadataObjectConnectionConfiguration")))
          {
            uint64_t v622 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v621, "metadataObjectConnectionConfiguration"), "sourceConfiguration"), "sourceID");
            uint64_t v623 = objc_msgSend((id)objc_msgSend(v621, "metadataObjectConnectionConfiguration"), "underlyingDeviceType");
            uint64_t v624 = -[FigCaptureSessionPipelines metadataSinkPipelineWithSinkID:](v813, "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v621, "metadataObjectConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
            id v625 = [(FigCaptureSessionPipelines *)v813 previewSinkPipelineWithSourceID:v622 sourceDeviceType:v623];
            uint64_t v626 = v623;
            v615 = v811;
            uint64_t v627 = [(FigCaptureSessionPipelines *)v813 movieFileSinkPipelineWithSourceID:v622 sourceDeviceType:v626];
            if (-[FigCaptureMetadataSinkPipeline mrcSceneObserver](v624))
            {
              uint64_t v628 = -[FigCaptureMetadataSinkPipeline mrcSceneObserver](v624);
              -[FigCaptureMovieFileSinkPipeline setMrcSceneObserver:](v627, v628);
              [v625 setMrcSceneObserver:-[FigCaptureMetadataSinkPipeline mrcSceneObserver](v624)];
            }
          }
        }
        uint64_t v618 = [(NSArray *)v616 countByEnumeratingWithState:&v818 objects:v945 count:16];
      }
      while (v618);
    }
    long long v816 = 0u;
    long long v817 = 0u;
    long long v814 = 0u;
    long long v815 = 0u;
    v629 = [(FigCaptureSessionParsedConfiguration *)v615 parsedPreviewSinkConfigurations];
    uint64_t v630 = [(NSArray *)v629 countByEnumeratingWithState:&v814 objects:v944 count:16];
    uint64_t v631 = v810;
    v632 = v813;
    if (v630)
    {
      uint64_t v633 = v630;
      uint64_t v634 = *(void *)v815;
      v808 = v629;
      do
      {
        for (uint64_t i9 = 0; i9 != v633; ++i9)
        {
          if (*(void *)v815 != v634) {
            objc_enumerationMutation(v629);
          }
          v636 = *(void **)(*((void *)&v814 + 1) + 8 * i9);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v636, "videoPreviewSinkConnectionConfiguration"), "videoPreviewSinkConfiguration"), "semanticStyleRenderingEnabled"))
          {
            uint64_t v637 = objc_msgSend((id)objc_msgSend(v636, "cameraConfiguration"), "sourceID");
            uint64_t v638 = objc_msgSend((id)objc_msgSend(v636, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
            -[FigCaptureMovieFileSinkPipeline setSemanticStyleSceneObserver:]((uint64_t)-[FigCaptureSessionPipelines movieFileSinkPipelineWithSourceID:sourceDeviceType:](v632, "movieFileSinkPipelineWithSourceID:sourceDeviceType:", v637, v638), objc_msgSend(-[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v632, "previewSinkPipelineWithSourceID:sourceDeviceType:", v637, v638), "semanticStyleSceneObserver"));
          }
          else if ([v708 smartStyleRenderingEnabled])
          {
            uint64_t v639 = objc_msgSend((id)objc_msgSend(v636, "cameraConfiguration"), "sourceID");
            uint64_t v640 = objc_msgSend((id)objc_msgSend(v636, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
            uint64_t v641 = [(FigCaptureSessionPipelines *)v632 cameraSourcePipelineWithSourceID:v639];
            uint64_t v642 = [(FigCaptureSessionPipelines *)v632 movieFileSinkPipelineWithSourceID:v639 sourceDeviceType:v640];
            uint64_t v643 = [(FigCaptureSessionPipelines *)v632 cinematographyPipelineWithSourceID:v639];
            id v644 = [(FigCaptureSessionPipelines *)v632 previewSinkPipelineWithSourceID:v639 sourceDeviceType:v640];
            uint64_t v645 = [(FigCaptureSessionPipelines *)v632 metadataSinkPipelineWithSourceID:v639 sourceDeviceType:v640];
            if (v643) {
              uint64_t v646 = -[FigCaptureCinematographyPipeline semanticStyleSceneObserver](v643);
            }
            else {
              uint64_t v646 = -[FigCaptureCameraSourcePipeline semanticStyleSceneObserver](v641);
            }
            [v644 setSemanticStyleSceneObserver:v646];
            uint64_t v647 = -[FigCaptureCameraSourcePipeline semanticStyleSceneObserver](v641);
            -[FigCaptureMovieFileSinkPipeline setSemanticStyleSceneObserver:](v642, v647);
            uint64_t v648 = -[FigCaptureCameraSourcePipeline semanticStyleSceneObserver](v641);
            -[FigCaptureMetadataSinkPipeline setSemanticStyleSceneObserver:](v645, v648);
            uint64_t v631 = v810;
            v632 = v813;
            v629 = v808;
          }
        }
        uint64_t v633 = [(NSArray *)v629 countByEnumeratingWithState:&v814 objects:v944 count:16];
      }
      while (v633);
    }
    captureSession_purgeFileSinkCache();
    captureSession_updateGraphConnectionEnabledState(v631, v811);
    captureSession_buildGraphDidBecomeLiveObserver(v631, [(FigCaptureSessionParsedConfiguration *)v811 isMultiCamSession]);
    uint64_t DerivedStorage = v812;
    if (![(BWGraph *)v809 deferredNodePrepareEnabled]) {
      goto LABEL_703;
    }
    v649 = objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v811, "parsedCameraSourceConfigurations"), "firstObject"), "cameraConfiguration");
    v650 = (void *)[v649 requiredFormat];
    int v651 = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme([v649 source], &v921);
    if (!v921)
    {
      int v652 = v651;
      int v653 = [v650 isPhotoFormat];
      if (v652 > 2) {
        int v654 = v653;
      }
      else {
        int v654 = 0;
      }
      [(BWGraph *)v809 setResumesConnectionsAsNodesArePrepared:v654 | v705];
LABEL_703:
      captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications(v631);
      goto LABEL_711;
    }
LABEL_710:
    FigDebugAssert3();
    goto LABEL_711;
  }
  uint64_t v551 = v550;
  uint64_t v552 = *(void *)v835;
LABEL_624:
  uint64_t v553 = 0;
  while (1)
  {
    if (*(void *)v835 != v552) {
      objc_enumerationMutation(v549);
    }
    v554 = *(void **)(*((void *)&v834 + 1) + 8 * v553);
    int v555 = [v554 audioCaptureMode];
    uint64_t v556 = [(FigCaptureSessionPipelines *)v813 micSourcePipeline];
    int v557 = [v554 builtInMicrophonePosition];
    uint64_t v558 = v555 == 2
         ? -[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v556, v557)
         : -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v556, v557);
    uint64_t v559 = v558;
    v560 = NSString;
    unsigned int v561 = [v554 builtInMicrophonePosition];
    v562 = v561 > 2 ? 0 : off_1E5C28BF8[v561];
    v563 = -[FigCaptureAudioFileSinkPipeline initWithConfiguration:graph:name:sourceAudioOutput:recordingStatusDelegate:]([FigCaptureAudioFileSinkPipeline alloc], v554, v809, [v560 stringWithFormat:@"%@ Microphone Audio File Sink Pipeline", v562], v559, *(void *)(v812 + 712));
    if (!v563) {
      break;
    }
    [(FigCaptureSessionPipelines *)v813 addAudioFileSinkPipeline:v563];
    if (v551 == ++v553)
    {
      uint64_t v551 = [(NSArray *)v549 countByEnumeratingWithState:&v834 objects:v949 count:16];
      if (v551) {
        goto LABEL_624;
      }
      goto LABEL_636;
    }
  }
LABEL_723:
  FigDebugAssert3();
  unsigned int v656 = FigSignalErrorAt();
  unsigned int v921 = v656;
  BOOL v699 = 1;
  uint64_t v12 = (const void *)v810;
LABEL_724:
  uint64_t DerivedStorage = v812;
LABEL_725:
  if (v656)
  {
LABEL_726:
    captureSession_teardownGraph(v12, 0, 0, 0, 0, 0);
    v661 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  }
  else
  {
    v661 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (v699)
    {
      *(void *)&long long v982 = 0;
      objc_msgSend(*(id *)(DerivedStorage + 632), "commitConfigurationWithID:error:", objc_msgSend(v708, "configurationID"), &v982);
      if ((void)v982) {
        unsigned int v921 = [(id)v982 code];
      }
    }
  }
  uint64_t result = v921;
  if (*v661 == 1)
  {
    kdebug_trace();
    return v921;
  }
  return result;
}

uint64_t cs_timeOfFlightAssistedAutoFocusEnabled(void *a1)
{
  int v2 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), 0x1EFA6B2A0), "BOOLValue");
  if (objc_msgSend(&unk_1EFB03620, "containsObject:", objc_msgSend((id)FigCaptureDeviceCoreRepairStatusesByKeys(), "objectForKeyedSubscript:", @"RearCameraAssembly")))
  {
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else if (v2)
  {
    objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "maxSupportedFrameRate");
    return 1;
  }
  return 0;
}

uint64_t FigCaptureSourceGetCaptureDeviceID(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x3052000000;
  unsigned int v8 = __Block_byref_object_copy__40;
  int v9 = __Block_byref_object_dispose__40;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetCaptureDeviceID_block_invoke;
  void v4[3] = &unk_1E5C2D580;
  void v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A5A006B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_teardownImageQueueSinkNodesIfNeeded(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v4 = (void *)[*(id *)(DerivedStorage + 504) allKeys];
  uint64_t result = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v19;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v18 + 1) + 8 * v8);
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        uint64_t v10 = [a2 countByEnumeratingWithState:&v14 objects:v22 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v15;
LABEL_8:
          uint64_t v13 = 0;
          while (1)
          {
            if (*(void *)v15 != v12) {
              objc_enumerationMutation(a2);
            }
            if (objc_msgSend(v9, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v13), "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID")))break; {
            if (v11 == ++v13)
            }
            {
              uint64_t v11 = [a2 countByEnumeratingWithState:&v14 objects:v22 count:16];
              if (v11) {
                goto LABEL_8;
              }
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          [*(id *)(DerivedStorage + 504) setObject:0 forKeyedSubscript:v9];
          [*(id *)(DerivedStorage + 512) setObject:0 forKeyedSubscript:v9];
        }
        ++v8;
      }
      while (v8 != v6);
      uint64_t result = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t captureSession_purgeFileSinkCache()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unint64_t v1 = objc_msgSend(DerivedStorage[94], "allKeys", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v9;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void *)(*((void *)&v8 + 1) + 8 * v5);
        uint64_t v7 = [DerivedStorage[83] movieFileSinkPipelineWithSinkID:v6];
        if (!(v7 | [DerivedStorage[83] audioFileSinkPipelineWithSinkID:v6]))
        {
          [DerivedStorage[94] setObject:0 forKeyedSubscript:v6];
          [DerivedStorage[95] setObject:0 forKeyedSubscript:v6];
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t captureSession_cleanUpUnusedPreparedBrackets(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v4 = (void *)[*(id *)(DerivedStorage + 528) allKeys];
  uint64_t result = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v19;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v18 + 1) + 8 * v8);
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        uint64_t v10 = [a2 countByEnumeratingWithState:&v14 objects:v22 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v15;
LABEL_8:
          uint64_t v13 = 0;
          while (1)
          {
            if (*(void *)v15 != v12) {
              objc_enumerationMutation(a2);
            }
            if (objc_msgSend(v9, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v13), "stillImageConnectionConfiguration"), "sinkConfiguration"), "sinkID")))break; {
            if (v11 == ++v13)
            }
            {
              uint64_t v11 = [a2 countByEnumeratingWithState:&v14 objects:v22 count:16];
              if (v11) {
                goto LABEL_8;
              }
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          [*(id *)(DerivedStorage + 528) setObject:0 forKeyedSubscript:v9];
        }
        ++v8;
      }
      while (v8 != v6);
      uint64_t result = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void captureSession_cancelMemoryPoolPrewarming(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (!a1 || qword_1EB4C59B0 == a1)
  {
    if (byte_1EB4C59C8)
    {
      if (dword_1EB4C5110)
      {
        int v17 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      byte_1EB4C59C8 = 0;
      captureSession_cancelMemoryPoolPrewarmingTimeoutTimer();
      uint64_t v6 = qword_1EB4C59D8;
      qword_1EB4C59D8 = 0;
      if (v6)
      {
        uint64_t v7 = &v11;
        uint64_t v11 = MEMORY[0x1E4F143A8];
        uint64_t v12 = 3221225472;
        uint64_t v13 = __captureSession_cancelMemoryPoolPrewarming_block_invoke;
        long long v14 = &unk_1E5C24430;
        uint64_t v15 = v6;
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v8 = +[BWMemoryPool sharedMemoryPool];
      if (a2 && v8)
      {
        [(BWMemoryPool *)v8 disableWithCompletionHandler:v7];
      }
      else if (v7)
      {
        ((void (*)(uint64_t *))v7[2])(v7);
      }
    }
  }
  else if (dword_1EB4C5110)
  {
    int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
}

void sub_1A5A01CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t cs_shouldEnableVideoGreenGhostMitigation(void *a1, char a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 0;
  }
  v5[0] = a1;
  id v3 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:1], 1);
  if ([v3 containsObject:&unk_1EFAFFDC8]) {
    return [a1 videoGreenGhostMitigationEnabled];
  }
  if ([v3 containsObject:&unk_1EFAFFDE0]) {
    return [a1 videoGreenGhostMitigationEnabled];
  }
  uint64_t result = [v3 containsObject:&unk_1EFAFFDF8];
  if (result) {
    return [a1 videoGreenGhostMitigationEnabled];
  }
  return result;
}

void *cs_createAuxiliaryAVAudioSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[22] = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F4E9F0]) initAuxiliarySession];
  [v6 setMXSessionProperty:*MEMORY[0x1E4F75FA8] value:a3 error:v10];
  if (v10[0]
    || (objc_msgSend(v6, "setMXSessionProperty:value:error:", *MEMORY[0x1E4F75FB0], objc_msgSend(NSNumber, "numberWithInt:", a1), v10), v10[0])|| (uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", a2, 32), objc_msgSend(v6, "setMXSessionProperty:value:error:", *MEMORY[0x1E4F75F28], v7, v10), v10[0]))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v10[0])
    {

      return 0;
    }
  }
  return v6;
}

uint64_t cs_clientWantsAudioResumptionOnBackground(void *a1)
{
  if (([a1 isEqualToString:0x1EFA44100] & 1) != 0
    || ([a1 isEqualToString:0x1EFA557C0] & 1) != 0)
  {
    return 1;
  }
  return [a1 isEqualToString:0x1EFA55980];
}

void captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary(uint64_t a1)
{
  handler[27] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken != -1) {
    dispatch_once(&cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken, &__block_literal_global_521);
  }
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 584)))
  {
    LODWORD(state64) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  id v3 = (int *)(DerivedStorage + 584);
  uint64_t v4 = objc_msgSend([NSString alloc], "initWithFormat:", @"com.apple.coremedia.figassetwriter.writing-video-%d", *(unsigned int *)(DerivedStorage + 16));
  *(void *)(DerivedStorage + 576) = v4;
  if (dword_1EB4C5110)
  {
    LODWORD(state64) = 0;
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = *(void **)(DerivedStorage + 576);
  }
  else
  {
    uint64_t v6 = (void *)v4;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v8 = (const char *)[v6 UTF8String];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke;
  handler[3] = &__block_descriptor_48_e8_v12__0i8l;
  handler[4] = DerivedStorage;
  void handler[5] = a1;
  if (notify_register_dispatch(v8, (int *)(DerivedStorage + 584), global_queue, handler))
  {
    LODWORD(state64) = 0;
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    uint64_t state64 = 0;
    if (!notify_get_state(*v3, &state64))
    {
      uint64_t v9 = state64;
      if (state64 < 2)
      {
        *(void *)(DerivedStorage + 592) = state64;
        if (v9 == 1) {
          *(unsigned char *)(DerivedStorage + 600) = *(unsigned char *)(DerivedStorage + 377);
        }
        goto LABEL_14;
      }
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_19:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_14;
    }
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();

  *(void *)(DerivedStorage + 576) = 0;
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 584)))
  {
    notify_cancel(*v3);
    *id v3 = -1;
  }
  *(void *)(DerivedStorage + 592) = 0;
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
}

void captureSession_destroyAudioSessionForMicPipeline()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  int v1 = FigCaptureAudiomxdSupportEnabled();
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  int IsCurrentDispatchQueue = _FigIsCurrentDispatchQueue();
  if (v1)
  {
    if (!IsCurrentDispatchQueue) {
      FigDebugAssert3();
    }
    uint64_t v4 = *(void *)(v2 + 320);
    if (v4)
    {
      uint64_t v5 = (id *)(v2 + 320);
      [*(id *)(v2 + 256) removeObserverForType:1 observer:v4 name:*MEMORY[0x1E4F4E830]];
LABEL_14:

      *uint64_t v5 = 0;
    }
  }
  else
  {
    if (!IsCurrentDispatchQueue) {
      FigDebugAssert3();
    }
    if (*(void *)(v2 + 320))
    {
      uint64_t v5 = (id *)(v2 + 320);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *(void *)(v2 + 320));
      goto LABEL_14;
    }
  }
  if (FigCaptureAudiomxdSupportEnabled())
  {
    uint64_t v6 = (void *)(DerivedStorage + 256);
  }
  else
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 264);
    if (!v7) {
      return;
    }
    uint64_t v6 = (void *)(DerivedStorage + 264);
    CFRelease(v7);
  }
  void *v6 = 0;
}

void captureSession_cancelMemoryPoolPrewarmingTimeoutTimer()
{
  if (qword_1EB4C59B0)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EB4C59B0);

    qword_1EB4C59B0 = 0;
  }
}

void __captureSession_cancelMemoryPoolPrewarming_block_invoke(uint64_t a1)
{
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(void *a1)
{
  int v1 = (void *)[a1 metadataIdentifiers];
  uint64_t v2 = *MEMORY[0x1E4F21898];
  return [v1 containsObject:v2];
}

uint64_t FigImageControl_Focus(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v247 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v5) {
    int v5 = *(_DWORD *)(DerivedStorage + 7612);
  }
  int v220 = v5;
  uint64_t v222 = DerivedStorage;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  CFIndex v8 = *(int *)(v6 + 6220);
  kedouble y = (const __CFString *)*MEMORY[0x1E4F53070];
  CFMutableArrayRef Mutable = (__CFDictionary *)CMGetAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CFDictionaryRef v10 = Mutable;
  uint64_t v221 = a1;
  CMAttachmentBearerRef target = a2;
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v47 = FigSignalErrorAt();
      uint64_t v48 = v222;
      goto LABEL_48;
    }
  }
  CFDictionaryRef theDict = Mutable;
  LODWORD(rect.origin.x) = 0;
  CFMutableArrayRef v11 = CFArrayCreateMutable(0, v8, MEMORY[0x1E4F1D510]);
  if (!v11)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v47 = FigSignalErrorAt();
    uint64_t v48 = v222;
    uint64_t v49 = theDict;
    if (!v10) {
      goto LABEL_46;
    }
    goto LABEL_48;
  }
  uint64_t v12 = v11;
  CFDictionaryRef v223 = v10;
  if ((int)v8 >= 1)
  {
    uint64_t v13 = v8;
    long long v14 = (char *)(v6 + 5896);
    uint64_t v15 = (char *)(v6 + 5736);
    long long v16 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFMutableArrayRef v17 = CFArrayCreateMutable(0, 2, v16);
      if (!v17)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v47 = FigSignalErrorAt();
        goto LABEL_255;
      }
      uint64_t v18 = v17;
      CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, v15);
      if (!v19)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v47 = FigSignalErrorAt();
        goto LABEL_254;
      }
      CFNumberRef v20 = v19;
      CFArraySetValueAtIndex(v18, 0, v19);
      CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt64Type, v14);
      if (!v21) {
        break;
      }
      CFNumberRef v22 = v21;
      CFArraySetValueAtIndex(v18, 1, v21);
      CFArrayAppendValue(v12, v18);
      CFRelease(v20);
      CFRelease(v22);
      CFRelease(v18);
      v14 += 8;
      v15 += 4;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v47 = FigSignalErrorAt();
    CFRelease(v20);
LABEL_254:
    CFRelease(v18);
LABEL_255:
    a1 = v221;
    uint64_t v48 = v222;
    CFDictionaryRef v27 = v223;
    CFRelease(v12);
LABEL_44:
    if (v27) {
      goto LABEL_48;
    }
    goto LABEL_45;
  }
LABEL_12:
  if (*(unsigned char *)(v6 + 8289) && !*(unsigned char *)(v6 + 8288))
  {
    long long v23 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else
  {
    long long v23 = (const void **)MEMORY[0x1E4F1CFD0];
    if (*(_DWORD *)(v6 + 7612)) {
      long long v23 = (const void **)MEMORY[0x1E4F1CFC8];
    }
  }
  CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F53BE8], *v23);
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v25 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D510]);
  CFNumberRef v26 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5636));
  CFDictionaryRef v27 = v223;
  if (!v26) {
    goto LABEL_270;
  }
  CFNumberRef v28 = v26;
  CFArrayAppendValue(v25, v26);
  CFRelease(v28);
  CFNumberRef v29 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5640));
  if (!v29) {
    goto LABEL_270;
  }
  CFNumberRef v30 = v29;
  CFArrayAppendValue(v25, v29);
  CFRelease(v30);
  CFNumberRef v31 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5644));
  if (v31)
  {
    CFNumberRef v32 = v31;
    CFArrayAppendValue(v25, v31);
    CFRelease(v32);
    CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F532F8], v25);
    CMSetAttachment(ImageBuffer, key, theDict, 1u);
    CFNumberRef Value = CFDictionaryGetValue(v223, (const void *)*MEMORY[0x1E4F54128]);
    if (Value)
    {
      uint64_t v34 = Value;
      if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F52DF8])
        && !CFEqual(v34, (CFTypeRef)*MEMORY[0x1E4F52E00])
        && !CFEqual(v34, (CFTypeRef)*MEMORY[0x1E4F52E10]))
      {
        uint64_t v35 = portIndexFromPortType(v34, (int *)&rect);
        if (v35)
        {
          uint64_t v47 = v35;
          fig_log_get_emitter();
          FigDebugAssert3();
          goto LABEL_40;
        }
        if (*(unsigned char *)(v6 + 18120))
        {
          unsigned int x_low = LODWORD(rect.origin.x);
          if (*(unsigned char *)(v6 + 56 * LODWORD(rect.origin.x) + 17728) || *(unsigned char *)(v6 + LODWORD(rect.origin.x) + 18104))
          {
            float v219 = (unsigned char *)(v6 + 56 * LODWORD(rect.origin.x) + 17728);
            int v37 = objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v223, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
            if (v37 <= 1) {
              int v38 = 1;
            }
            else {
              int v38 = v37;
            }
            int v39 = *(_DWORD *)(v6 + 18112) * v38;
            uint64_t v40 = (*(_DWORD *)(v6 + 18116) * v38);
            *(_DWORD *)CMTime time = 1065353216;
            int Width = CVPixelBufferGetWidth(ImageBuffer);
            size_t Height = CVPixelBufferGetHeight(ImageBuffer);
            int v43 = Width;
            CFDictionaryRef v27 = v223;
            FigMotionComputeLensPositionScalingFactor(v223, v43, Height, v39, v40, (float *)time);
            LODWORD(valuePtr.origin.x) = 0;
            if (!*(unsigned char *)(v6 + LODWORD(rect.origin.x) + 18104)) {
              goto LABEL_379;
            }
            int FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
            float v45 = *(float *)&valuePtr.origin.x;
            if (FloatIfPresent)
            {
              float v45 = *(float *)&valuePtr.origin.x * (float)(*(float *)(v6 + 56 * x_low + 17756) * *(float *)time);
              *(float *)&valuePtr.origin.double x = v45;
            }
            if (v45 == 0.0)
            {
LABEL_379:
              if (*v219) {
                FigMotionCalculateAdjustedLensPosition(v223, v6 + 56 * x_low + 17712, (float *)&valuePtr, *(float *)(v6 + 5644), *(float *)time);
              }
            }
            CFNumberRef v46 = CFNumberCreate(v24, kCFNumberFloat32Type, &valuePtr);
            CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F54120], v46);
            CFRelease(v46);
          }
        }
      }
    }
    uint64_t v47 = 0;
  }
  else
  {
LABEL_270:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v47 = FigSignalErrorAt();
  }
LABEL_40:
  CFRelease(v12);
  uint64_t v48 = v222;
  if (!v25)
  {
    a1 = v221;
    goto LABEL_44;
  }
  CFRelease(v25);
  if (!v27)
  {
    a1 = v221;
LABEL_45:
    uint64_t v49 = theDict;
LABEL_46:
    CFRelease(v49);
    goto LABEL_48;
  }
  a1 = v221;
LABEL_48:
  if (*(_DWORD *)(v48 + 652))
  {
    unsigned int theDicta = v47;
    uint64_t v50 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef v51 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
    CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F53BF8]);
    CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F53BF0]);
    CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F53EE0]);
    uint64_t v236 = 0;
    uint64_t v237 = 0;
    long long v244 = 0u;
    long long v245 = 0u;
    long long v242 = 0u;
    long long v243 = 0u;
    long long v240 = 0u;
    long long v241 = 0u;
    memset(&rect, 0, sizeof(rect));
    int v55 = *(_DWORD *)(v50 + 40);
    int v235 = 0;
    FigCFDictionaryGetInt32IfPresent();
    if (!CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F53EC0])) {
      goto LABEL_147;
    }
    BOOL v57 = ((v55 - 1) & 0xFFFFFFFA) == 0 || *(unsigned char *)(v50 + 7585) != 0;
    getFocusPeakSums(v51, (char *)&rect);
    int v235 = -1;
    CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F53D98]);
    if (v58) {
      CFNumberGetValue(v58, kCFNumberIntType, &v235);
    }
    double v59 = *(void **)(v50 + 48);
    if (v59)
    {
      CMSampleBufferGetPresentationTimeStamp((CMTime *)time, target);
      CMTimeGetSeconds((CMTime *)time);
      FigCoreMotionGetVector(v59, (const char *)&v237, (uint64_t)&v236 + 4, (uint64_t)&v236);
    }
    if (!v52 || !v53) {
      goto LABEL_147;
    }
    signed int v234 = 0;
    uint64_t v233 = 0;
    CFNumberGetValue(v52, kCFNumberIntType, (char *)&v233 + 4);
    CFNumberGetValue(v53, kCFNumberIntType, &v233);
    if (v54) {
      CFNumberGetValue(v54, kCFNumberSInt32Type, &v234);
    }
    if (SHIDWORD(v237) >= 1) {
      *(_DWORD *)(v50 + 7592) = HIDWORD(v237);
    }
    if (*(int *)(v50 + 7656) <= 0 && !*(unsigned char *)(v50 + 81)
      || HIDWORD(v233) == 2
      || *(unsigned char *)(v50 + 7586) && *(_DWORD *)(v50 + 7588) != *(_DWORD *)(v50 + 7592))
    {
LABEL_80:
      int v67 = HIDWORD(v233);
      if (HIDWORD(v233) != *(_DWORD *)(v50 + 7660))
      {
        int32x4_t v68 = vdupq_n_s32(v234);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v68, (int32x4_t)xmmword_1A5F0C5A0), (int16x8_t)vceqq_s32(v68, (int32x4_t)xmmword_1A5F0C5B0)))) & 1) == 0&& !*(_DWORD *)(v50 + 7656)&& HIDWORD(v233) == 2&& v234 != 12)
        {
          sendFocusStartNotification(a1, 0);
          int v67 = HIDWORD(v233);
        }
        *(_DWORD *)(v50 + 7660) = v67;
      }
      if (v67 == 4)
      {
        if (*(unsigned char *)(v50 + 8288))
        {
          HIDWORD(v232) = 0;
          *(unsigned char *)(v50 + 828_Block_object_dispose(&STACK[0x4E0], 8) = 0;
          uint64_t v69 = *(unsigned int *)(v50 + 9016);
          float v70 = 1.0;
          if ((int)v69 >= 2)
          {
            uint64_t v71 = 0;
            float v72 = (float *)(v50 + 8296);
            uint64_t v73 = 1;
            do
            {
              float v74 = *(float *)(v50 + 8292 + 4 * v71);
              float v75 = *(float *)(v50 + 8532 + 4 * v71);
              float v76 = *(float *)(v50 + 8772 + 4 * v71);
              float v77 = sqrtf((float)((float)(v75 * v75) + (float)(v74 * v74)) + (float)(v76 * v76));
              ++v71;
              if (v77 > 0.0 && v71 < v69)
              {
                float v78 = 1.0 / v77;
                float v79 = v74 * v78;
                float v80 = v75 * v78;
                float v81 = v76 * v78;
                uint64_t v82 = v72;
                uint64_t v83 = *(unsigned int *)(v50 + 9016);
                do
                {
                  float v84 = *v82;
                  float v85 = v82[60];
                  float v86 = v82[120];
                  float v87 = sqrtf((float)((float)(v85 * v85) + (float)(v84 * v84)) + (float)(v86 * v86));
                  if (v87 > 0.0)
                  {
                    float v88 = (float)((float)((float)(v80 * v85) + (float)(v79 * v84)) + (float)(v81 * v86)) / v87;
                    if (v88 < v70) {
                      float v70 = v88;
                    }
                  }
                  --v83;
                  ++v82;
                }
                while (v73 != v83);
              }
              ++v73;
              ++v72;
            }
            while (v71 != v69 - 1);
          }
          *(float *)(v50 + 9012) = acosf(v70);
          if (v57)
          {
            int v89 = 0;
            BOOL v90 = 0;
            CFDictionaryRef v91 = 0;
          }
          else
          {
            uint64_t v94 = [*(id *)(v50 + 8) copyProperty:*MEMORY[0x1E4F54940] error:(char *)&v232 + 4];
            CFDictionaryRef v91 = (const __CFDictionary *)v94;
            int v89 = HIDWORD(v232);
            BOOL v90 = v94 != 0;
            if (HIDWORD(v232) && v94) {
              FigImageControl_Focus_cold_1();
            }
          }
          int v95 = *(const void **)(v50 + 8280);
          if (v95)
          {
            CFRelease(v95);
            *(void *)(v50 + 8280) = 0;
            int v89 = HIDWORD(v232);
          }
          valuePtr.origin.double x = 7.74860419e-304;
          valuePtr.origin.double y = 7.74860419e-304;
          if (v89) {
            BOOL v96 = 0;
          }
          else {
            BOOL v96 = v90;
          }
          if (v96)
          {
            LODWORD(v232) = 0;
            int v230 = 0;
            *(void *)(v50 + 8280) = v91;
            CFNumberRef v97 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E4F52EA8]);
            if (v97) {
              CFNumberGetValue(v97, kCFNumberIntType, &v232);
            }
            CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E4F52EB8]);
            if (v98) {
              CFNumberGetValue(v98, kCFNumberIntType, &v230);
            }
            CFArrayRef v99 = (const __CFArray *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E4F52EB0]);
            if (!v99) {
              goto LABEL_135;
            }
            int v100 = v230;
            if (v230 < 1) {
              goto LABEL_135;
            }
            CFArrayRef v101 = v99;
            uint64_t v102 = 0;
            int v103 = 0;
            int v104 = v232;
            do
            {
              v231.xpc_object_t value = 0;
              if (v104 < 1)
              {
                CMTimeValue v106 = 0;
                CMTimeValue v107 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v105 = 0;
                CMTimeValue v106 = 0;
                CMTimeValue v107 = 0x7FFFFFFFFFFFFFFFLL;
                do
                {
                  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v101, v105 + (int)v102 * v104);
                  if (ValueAtIndex)
                  {
                    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &v231);
                    if (v231.value < v107) {
                      CMTimeValue v107 = v231.value;
                    }
                    if (v231.value > v106) {
                      CMTimeValue v106 = v231.value;
                    }
                  }
                  int v104 = v232;
                  ++v105;
                }
                while ((int)v105 < (int)v232);
                int v100 = v230;
              }
              *((unsigned char *)&valuePtr.origin.x + v102) = 100 * (v106 - v107) <= 20 * v106;
              if (100 * (v106 - v107) > 20 * v106) {
                ++v103;
              }
              ++v102;
            }
            while (v102 < v100);
            a1 = v221;
            uint64_t v48 = v222;
            if (!v103)
            {
LABEL_135:
              valuePtr.origin.double x = 0.0;
              valuePtr.origin.double y = 0.0;
            }
          }
          for (uint64_t i = 0; i != 16; ++i)
          {
            int64_t v110 = *((void *)&rect.origin.x + i);
            uint64_t v111 = v50 + 8 * i;
            *(void *)(v111 + 7704) = (uint64_t)(float)((float)v110 * 0.85);
            *(void *)(v111 + 7832) = (uint64_t)(float)((float)v110 * 1.4);
            if (v110 < 1)
            {
              int v115 = 0;
            }
            else if (v57)
            {
              uint64_t v112 = 0;
              int64x2_t v113 = vdupq_n_s64(v110);
              int32x4_t v114 = 0uLL;
              do
              {
                int32x4_t v114 = vsubq_s32(v114, vuzp1q_s32((int32x4_t)vcgtq_s64(*(int64x2_t *)((char *)&rect.origin + v112), v113), (int32x4_t)vcgtq_s64(*(int64x2_t *)((char *)&rect.size + v112), v113)));
                v112 += 32;
              }
              while (v112 != 128);
              int v115 = 16 - vaddvq_s32(v114);
            }
            else
            {
              int v115 = *((unsigned char *)&valuePtr.origin.x + i) == 0;
            }
            *(_DWORD *)(v50 + 4 * i + 7960) = v115;
          }
          if (*(float *)(v50 + 9012) > 0.044)
          {
            memset_pattern16((void *)(v50 + 7704), &unk_1A5F0C5C0, 0x80uLL);
            *(_OWORD *)(v50 + 792_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
            *(_OWORD *)(v50 + 7944) = 0u;
            *(_OWORD *)(v50 + 7896) = 0u;
            *(_OWORD *)(v50 + 7912) = 0u;
            *(_OWORD *)(v50 + 7864) = 0u;
            *(_OWORD *)(v50 + 7880) = 0u;
            *(_OWORD *)(v50 + 7832) = 0u;
            *(_OWORD *)(v50 + 784_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
            memset_pattern16((void *)(v50 + 7960), &unk_1A5F0C5E0, 0x40uLL);
          }
        }
        goto LABEL_147;
      }
      if (*(unsigned char *)(v50 + 8288))
      {
        int v92 = *(_DWORD *)(v50 + 9016);
        if (v92 > 59) {
          goto LABEL_147;
        }
      }
      else
      {
        int v92 = 0;
        *(unsigned char *)(v50 + 828_Block_object_dispose(&STACK[0x4E0], 8) = 1;
      }
      uint64_t v93 = (_DWORD *)(v50 + 4 * v92);
      *(_DWORD *)(v50 + 9016) = v92 + 1;
      v93[2073] = v237;
      v93[2133] = HIDWORD(v236);
      v93[2193] = v236;
LABEL_147:
      uint64_t v47 = theDicta;
      goto LABEL_148;
    }
    unsigned int v60 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v61 = v60;
    int v62 = *(_DWORD *)(v50 + 84);
    if (v62 == 1)
    {
      uint64_t v63 = kFigAutofocusSampleBufferProcessorFocusMode_FixedFocusPoints;
    }
    else
    {
      if (v62 != 5)
      {
LABEL_76:
        *(unsigned char *)(v50 + 81) = 0;
        int v64 = *(_DWORD *)(v50 + 7656);
        BOOL v65 = __OFSUB__(v64, 1);
        int v66 = v64 - 1;
        if (v66 < 0 == v65)
        {
          *(_DWORD *)(v50 + 7656) = v66;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        if (v61) {
          CFRelease(v61);
        }
        goto LABEL_80;
      }
      uint64_t v63 = kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint;
    }
    CFDictionaryAddValue(v60, @"FocusMode", *v63);
    goto LABEL_76;
  }
LABEL_148:
  switch(v220)
  {
    case 1:
      uint64_t v116 = CMBaseObjectGetDerivedStorage();
      uint64_t v117 = (unsigned char *)(v116 + 7580);
      CFDictionaryRef v118 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
      uint64_t v236 = 0;
      uint64_t v237 = 0;
      int v235 = 0;
      *(_OWORD *)theDictb = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
      *(_OWORD *)keya = *MEMORY[0x1E4F1DB28];
      valuePtr.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
      valuePtr.CGSize size = *(CGSize *)theDictb;
      signed int v234 = 0;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      int v119 = 0;
      if (__PAIR64__(v237, HIDWORD(v236)) && v236) {
        int v119 = *(_DWORD *)(v116 + 7692) + 1;
      }
      *(_DWORD *)(v116 + 7692) = v119;
      CFDictionaryRef v120 = (const __CFDictionary *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E4F53BE0]);
      if (v120 && *(unsigned char *)(v116 + 560))
      {
        CGRectMakeWithDictionaryRepresentation(v120, &valuePtr);
        *(_DWORD *)(v116 + 766_Block_object_dispose(&STACK[0x4E0], 8) = (int)CGRectGetMinX(valuePtr);
        *(_DWORD *)(v116 + 7672) = (int)CGRectGetMinY(valuePtr);
        *(_DWORD *)(v116 + 7676) = (int)CGRectGetWidth(valuePtr);
        *(_DWORD *)(v116 + 7680) = (int)CGRectGetHeight(valuePtr);
        *(unsigned char *)(v116 + 7664) = CGRectGetHeight(valuePtr) > 0.0;
        *(_DWORD *)(v116 + 556) = 0;
        CFArrayRef v121 = *(const __CFArray **)(v116 + 9024);
        if (v121)
        {
          int Count = CFArrayGetCount(v121);
          if (Count >= 1)
          {
            CFIndex v123 = 0;
            int v124 = (const void *)*MEMORY[0x1E4F558D8];
            uint64_t v125 = Count;
            float v126 = 1000000.0;
            do
            {
              CFDictionaryRef v127 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v116 + 9024), v123);
              if (v127)
              {
                rect.origiuint64_t n = *(CGPoint *)keya;
                rect.CGSize size = *(CGSize *)theDictb;
                CFDictionaryRef v128 = (const __CFDictionary *)CFDictionaryGetValue(v127, v124);
                if (v128) {
                  CGRectMakeWithDictionaryRepresentation(v128, &rect);
                }
                double MidX = CGRectGetMidX(valuePtr);
                float v130 = MidX - CGRectGetMidX(rect);
                float v131 = fabsf(v130);
                double MidY = CGRectGetMidY(valuePtr);
                float v133 = MidY - CGRectGetMidY(rect);
                float v134 = v131 + fabsf(v133);
                if (v134 < v126)
                {
                  *(_DWORD *)(v116 + 556) = v123;
                  float v126 = v134;
                }
              }
              ++v123;
            }
            while (v125 != v123);
          }
        }
      }
      else
      {
        *(unsigned char *)(v116 + 7664) = 0;
      }
      if (!*v117)
      {
        if (*(_DWORD *)(v116 + 652))
        {
          if (HIDWORD(v237) != 4 || *(unsigned char *)(v116 + 81)) {
            return 0;
          }
          setupFocusWindowMatrix(a1, *(_DWORD *)(v116 + 7620), *(_DWORD *)(v116 + 7624), *(_DWORD *)(v116 + 7628), *(_DWORD *)(v116 + 7632), *(unsigned __int8 *)(v116 + 560), 5, 3, 1);
          if (*(unsigned char *)(v116 + 7586))
          {
            if (*(unsigned char *)(v116 + 7585))
            {
              LODWORD(rect.origin.x) = 0;
              *(_DWORD *)CMTime time = 0;
              LODWORD(v231.value) = 0;
              HIDWORD(v233) = 0;
              getDefaultFocusScanRange(a1, &rect, (int *)time, &v231, (int *)&v233 + 1);
              setupSearchPositions(a1, SLODWORD(rect.origin.x), *(int *)time, v231.value, SHIDWORD(v233), 1, 1, 1.0);
              id v153 = (void **)MEMORY[0x1E4F54D28];
              if (!*(unsigned char *)(v116 + 561)) {
                id v153 = (void **)MEMORY[0x1E4F54D20];
              }
              uint64_t v47 = doFocusNow(a1, 0, *v153, 1);
              *(unsigned char *)(v116 + 7587) = 0;
            }
            else
            {
              uint64_t v47 = 0;
              *(unsigned char *)(v116 + 7587) = 1;
            }
            goto LABEL_217;
          }
          if (*(unsigned char *)(v116 + 7585))
          {
            captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54870], 0);
            uint64_t v47 = 0;
            *(unsigned char *)(v116 + 8289) = 0;
            goto LABEL_217;
          }
        }
        else
        {
          setupFocusWindows((float)*(int *)(v116 + 7620) * 0.001, (float)*(int *)(v116 + 7624) * 0.001, (float)*(int *)(v116 + 7628) * 0.001, (float)*(int *)(v116 + 7632) * 0.001, a1, *(unsigned __int8 *)(v116 + 560));
        }
        uint64_t v47 = 0;
LABEL_217:
        *(float32x4_t *)(v116 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v116 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
        *(unsigned char *)(v116 + 7664) = 0;
        *uint64_t v117 = 1;
        *(void *)(v116 + 6232) = 1;
        *(void *)(v116 + 624_Block_object_dispose(&STACK[0x4E0], 8) = 0;
        *(_DWORD *)(v116 + 760_Block_object_dispose(&STACK[0x4E0], 8) = 0;
        return v47;
      }
      if (*(unsigned char *)(v116 + 7581))
      {
        setupFocusWindowMatrix(a1, *(_DWORD *)(v116 + 7620), *(_DWORD *)(v116 + 7624), *(_DWORD *)(v116 + 7628), *(_DWORD *)(v116 + 7632), *(unsigned __int8 *)(v116 + 560), 5, 3, 1);
        uint64_t v47 = 0;
        *(unsigned char *)(v116 + 7581) = 0;
        return v47;
      }
      if (HIDWORD(v237) == 4)
      {
        int v154 = *(_DWORD *)(v116 + 7684);
        BOOL v65 = __OFSUB__(v154, 1);
        int v155 = v154 - 1;
        long long v156 = target;
        if (v155 < 0 == v65)
        {
          uint64_t v47 = 0;
          *(_DWORD *)(v116 + 7684) = v155;
          return v47;
        }
      }
      else
      {
        *(_DWORD *)(v116 + 7684) = 0;
        long long v156 = target;
      }
      if (*(unsigned char *)(v116 + 81) || *(unsigned char *)(v116 + 8288) || !*(unsigned char *)(v116 + 44)) {
        return 0;
      }
      CFNumberRef v157 = (const __CFNumber *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E4F53D98]);
      if (v157) {
        CFNumberGetValue(v157, kCFNumberIntType, &v234);
      }
      if (v235)
      {
        uint64_t v47 = 0;
        *(_DWORD *)(v116 + 760_Block_object_dispose(&STACK[0x4E0], 8) = 0;
LABEL_213:
        *(_DWORD *)(v116 + 768_Block_object_dispose(&STACK[0x4E0], 8) = 0;
        return v47;
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v116 + 7576));
      int v173 = *(_DWORD *)(v116 + 7608);
      BOOL v65 = __OFSUB__(v173, 1);
      int v174 = v173 - 1;
      if (v174 < 0 == v65)
      {
        *(_DWORD *)(v116 + 760_Block_object_dispose(&STACK[0x4E0], 8) = v174;
        os_unfair_lock_unlock((os_unfair_lock_t)(v116 + 7576));
        return 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v116 + 7576));
      if (!*(unsigned char *)(v116 + 7582))
      {
        if (*(_DWORD *)(v116 + 40)) {
          int v175 = *(_DWORD *)(v116 + 692) + 1;
        }
        else {
          int v175 = 1;
        }
        LODWORD(rect.origin.x) = v175;
        unsigned int v176 = *(_DWORD *)(v116 + 5500);
        int v177 = 20;
        float v178 = 3.4028e38;
        LOBYTE(v179) = v176;
        do
        {
          uint64_t v179 = ((_BYTE)v179 - 1) & 0x1F;
          uint64_t v180 = v116 + 4 * v179;
          if (*(float *)(v180 + 5508) < v178) {
            float v178 = *(float *)(v180 + 5508);
          }
          --v177;
        }
        while (v177);
        if (v178 <= 0.0004)
        {
          uint64_t v47 = 0;
LABEL_289:
          float v181 = 0.0;
          int v182 = 3;
          do
          {
            unsigned int v176 = ((_BYTE)v176 - 1) & 0x1F;
            uint64_t v183 = v116 + 4 * v176;
            if (*(float *)(v183 + 5508) > v181) {
              float v181 = *(float *)(v183 + 5508);
            }
            --v182;
          }
          while (v182);
          if (v181 > 0.0004) {
            return v47;
          }
          goto LABEL_294;
        }
        if (*(_DWORD *)(v116 + 652))
        {
          if (*(uint64_t *)(v116 + 8 * v179 + 7704) >= 2)
          {
            memset_pattern16((void *)(v116 + 7704), &unk_1A5F0C5D0, 0x80uLL);
            *(_OWORD *)(v116 + 792_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
            *(_OWORD *)(v116 + 7944) = 0u;
            *(_OWORD *)(v116 + 7896) = 0u;
            *(_OWORD *)(v116 + 7912) = 0u;
            *(_OWORD *)(v116 + 7864) = 0u;
            *(_OWORD *)(v116 + 7880) = 0u;
            *(_OWORD *)(v116 + 7832) = 0u;
            *(_OWORD *)(v116 + 784_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
            memset_pattern16((void *)(v116 + 7960), &unk_1A5F0C5E0, 0x40uLL);
          }
        }
        else if (v234 != v175)
        {
          CFNumberRef v217 = CFNumberCreate(0, kCFNumberIntType, &rect);
          uint64_t v47 = doManualFocusNow(v221, (uint64_t)v217);
          CFRelease(v217);
          *(void *)(v116 + 6232) = 1;
          *(void *)(v116 + 624_Block_object_dispose(&STACK[0x4E0], 8) = 1;
          unsigned int v176 = *(_DWORD *)(v116 + 5500);
          goto LABEL_288;
        }
        uint64_t v47 = 0;
LABEL_288:
        long long v156 = target;
        goto LABEL_289;
      }
      uint64_t v47 = 0;
LABEL_294:
      if (!*(unsigned char *)(v116 + 573) || !*(unsigned char *)(v116 + 7587))
      {
        int v184 = *(_DWORD *)(v116 + 628);
        if (v184 < 1)
        {
          if (!__PAIR64__(v237, HIDWORD(v236))) {
            return v47;
          }
        }
        else if (*(_DWORD *)(v116 + 7692) < v184)
        {
          return v47;
        }
      }
      if (!*(unsigned char *)(v116 + 560)
        || CGRectGetHeight(valuePtr) <= 0.0
        || (int v185 = *(_DWORD *)(v116 + 6284), CGRectGetHeight(valuePtr) * 0.800000012 >= (double)v185)
        || CGRectGetHeight(valuePtr) <= (float)((float)v185 * 0.8))
      {
        float v186 = currentGain(v156);
        if (*(_DWORD *)(v116 + 652))
        {
          CFArrayRef v187 = (const __CFArray *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E4F53EC0]);
          if (v187)
          {
            uint64_t v188 = v47;
            int v189 = CFArrayGetCount(v187);
            long long v244 = 0u;
            long long v245 = 0u;
            long long v242 = 0u;
            long long v243 = 0u;
            long long v240 = 0u;
            long long v241 = 0u;
            memset(&rect, 0, sizeof(rect));
            getFocusPeakSums(v118, (char *)&rect);
            uint64_t v190 = 0;
            memset(time, 0, sizeof(time));
            do
            {
              *(void *)&time[v190] = CFNumberCreate(0, kCFNumberSInt64Type, (char *)&rect + v190);
              v190 += 8;
            }
            while (v190 != 128);
            CFArrayRef v191 = CFArrayCreate(0, (const void **)time, 16, MEMORY[0x1E4F1D510]);
            for (uint64_t j = 0; j != 128; j += 8)
              CFRelease(*(CFTypeRef *)&time[j]);
            if (v189 < 1)
            {
              int v195 = 0;
              int v194 = 0;
            }
            else
            {
              uint64_t v193 = 0;
              int v194 = 0;
              int v195 = 0;
              if (v189 >= 16) {
                uint64_t v196 = 16;
              }
              else {
                uint64_t v196 = v189;
              }
              uint64_t v197 = v116 + 7960;
              do
              {
                int v198 = *(_DWORD *)(v197 + 4 * v193);
                uint64_t v199 = *((void *)&rect.origin.x + v193);
                uint64_t v200 = v197 + 8 * v193;
                if (v199 < *(void *)(v200 - 256) || v199 > *(void *)(v200 - 128)) {
                  v194 += v198;
                }
                v195 += v198;
                ++v193;
              }
              while (v196 != v193);
            }
            if (v191)
            {
              uint64_t v204 = *(int *)(v116 + 7696);
              int v205 = (CFTypeRef *)(v116 + 8 * v204 + 8024);
              if (*v205) {
                CFRelease(*v205);
              }
              CFTypeRef *v205 = v191;
              if ((int)v204 <= 30) {
                int v206 = v204 + 1;
              }
              else {
                int v206 = 0;
              }
              *(_DWORD *)(v116 + 7696) = v206;
            }
            BOOL v207 = v194 > (int)(float)((float)v195 * 0.666) || v195 == 0;
            if (v207 || *(unsigned char *)(v116 + 7587))
            {
              int v208 = *(_DWORD *)(v116 + 7688);
              *(_DWORD *)(v116 + 768_Block_object_dispose(&STACK[0x4E0], 8) = v208 + 1;
              if (v208 >= 4)
              {
                uint64_t v232 = 0;
                uint64_t v233 = 0;
                getDefaultFocusScanRange(v221, (_DWORD *)&v233 + 1, (int *)&v233, (_DWORD *)&v232 + 1, (int *)&v232);
                setupSearchPositions(v221, SHIDWORD(v233), v233, SHIDWORD(v232), v232, 1, 1, v186);
                if (*(unsigned char *)(v116 + 7587))
                {
                  unsigned int v209 = (void **)MEMORY[0x1E4F54D28];
                  if (!*(unsigned char *)(v116 + 561)) {
                    unsigned int v209 = (void **)MEMORY[0x1E4F54D20];
                  }
                  uint64_t v188 = doFocusNow(v221, 0, *v209, 1);
                  *(unsigned char *)(v116 + 7587) = 0;
                }
                else if (*(unsigned char *)(v116 + 7586) || *(unsigned char *)(v116 + 7585))
                {
                  uint64_t v188 = captureStreamSetPropertyOnActivityScheduler(v221, (const void *)*MEMORY[0x1E4F547C8], 0);
                  *(_DWORD *)(v116 + 6220) = 0;
                  *(_DWORD *)(v116 + 5496) = 0;
                }
                else if (*(unsigned char *)(v116 + 7583))
                {
                  if (*(int *)(v116 + 660) <= 1) {
                    int v218 = 1;
                  }
                  else {
                    int v218 = *(_DWORD *)(v116 + 660);
                  }
                  doPeakTrackingAutofocusNow(v221, v218);
                }
                else
                {
                  uint64_t v188 = doAutofocusNow(v221);
                }
                CMSampleBufferGetPresentationTimeStamp(&v231, target);
                *(Float64 *)(v116 + 568_Block_object_dispose(&STACK[0x4E0], 8) = CMTimeGetSeconds(&v231);
                FigImageControl_CurrentFocusRect(v221, (_DWORD *)(v116 + 5704), (_DWORD *)(v116 + 5708), (_DWORD *)(v116 + 5712), (_DWORD *)(v116 + 5716));
                *(void *)(v116 + 7684) = 10;
                ++*(_DWORD *)(v116 + 9044);
              }
            }
            else
            {
              *(_DWORD *)(v116 + 768_Block_object_dispose(&STACK[0x4E0], 8) = 0;
            }
            return v188;
          }
        }
        else
        {
          unint64_t v201 = *(int *)(v116 + 6264);
          if (v201 >= *(void *)(v116 + 6232) && v201 <= *(void *)(v116 + 6248)) {
            goto LABEL_213;
          }
          int v202 = *(_DWORD *)(v116 + 7688);
          *(_DWORD *)(v116 + 768_Block_object_dispose(&STACK[0x4E0], 8) = v202 + 1;
          if (v202 >= 2)
          {
            *(_DWORD *)CMTime time = 0;
            LODWORD(v231.value) = 0;
            uint64_t v233 = 0;
            if (*(unsigned char *)(v116 + 560) && CGRectGetHeight(valuePtr) > 0.0)
            {
              int v203 = 0;
              *(_DWORD *)(v116 + 6284) = (int)CGRectGetHeight(valuePtr);
            }
            else
            {
              int v203 = 0;
              *(_DWORD *)(v116 + 6284) = 0;
              if (v234 >= 97)
              {
                int v203 = v234 - 80;
                if (v201 < *(void *)(v116 + 6232))
                {
                  int v210 = *(_DWORD *)(v116 + 6220);
                  if (v210 >= 2)
                  {
                    uint64_t v211 = (v210 - 1);
                    int v212 = (int *)(v116 + 5740);
                    uint64_t v213 = (void *)(v116 + 5904);
                    do
                    {
                      unint64_t v214 = *(v213 - 1);
                      if (v201 > v214 && *v213 >= v201) {
                        int v203 = *(v212 - 1) + (v201 - v214) * (*v212 - (uint64_t)*(v212 - 1)) / (*v213 - v214) - 20;
                      }
                      ++v212;
                      ++v213;
                      --v211;
                    }
                    while (v211);
                  }
                }
              }
            }
            getDefaultFocusScanRange(v221, time, (int *)&v231, (_DWORD *)&v233 + 1, (int *)&v233);
            if (*(unsigned char *)(v116 + 7582)) {
              int v215 = HIDWORD(v233);
            }
            else {
              int v215 = v203;
            }
            setupSearchPositions(v221, *(int *)time, v231.value, v215, v233, 0, 1, v186);
            ++*(_DWORD *)(v116 + 9044);
            if (*(unsigned char *)(v116 + 7583))
            {
              if (*(int *)(v116 + 660) <= 1) {
                int v216 = 1;
              }
              else {
                int v216 = *(_DWORD *)(v116 + 660);
              }
              doPeakTrackingAutofocusNow(v221, v216);
            }
            else
            {
              uint64_t v47 = doAutofocusNow(v221);
            }
            CMSampleBufferGetPresentationTimeStamp((CMTime *)&rect, target);
            *(Float64 *)(v116 + 568_Block_object_dispose(&STACK[0x4E0], 8) = CMTimeGetSeconds((CMTime *)&rect);
            FigImageControl_CurrentFocusRect(v221, (_DWORD *)(v116 + 5704), (_DWORD *)(v116 + 5708), (_DWORD *)(v116 + 5712), (_DWORD *)(v116 + 5716));
            *(void *)(v116 + 7684) = 10;
          }
        }
      }
      return v47;
    case 2:
      uint64_t v135 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v136 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
      CFNumberRef v137 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E4F53BC8]);
      CFNumberRef v138 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E4F53C98]);
      CFNumberRef v139 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E4F53BB0]);
      if (*(int *)(v135 + 636) >= 1) {
        int v140 = *(_DWORD *)(v135 + 636);
      }
      else {
        int v140 = 12;
      }
      uint64_t v141 = 692;
      if (!*(_DWORD *)(v135 + 40)) {
        uint64_t v141 = 688;
      }
      if (*(unsigned char *)(v135 + 81)) {
        return 0;
      }
      CFNumberRef v148 = v139;
      int v149 = *(_DWORD *)(v135 + v141);
      float v150 = currentGain(target);
      int v151 = *(_DWORD *)(v135 + 652);
      if (*(unsigned char *)(v135 + 626))
      {
        BOOL v152 = v151 != 0;
      }
      else if (v151)
      {
        BOOL v152 = *(unsigned char *)(v135 + 7583) == 0;
      }
      else
      {
        BOOL v152 = 0;
      }
      if (*(unsigned char *)(v135 + 7580))
      {
        if (*(unsigned char *)(v135 + 44))
        {
          int v158 = *(_DWORD *)(v135 + 524);
          BOOL v65 = __OFSUB__(v158, 1);
          int v159 = v158 - 1;
          if (v159 < 0 != v65)
          {
            if (!v137 || !v138) {
              goto LABEL_380;
            }
            LODWORD(rect.origin.x) = 0;
            *(_DWORD *)CMTime time = 0;
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v137, kCFNumberIntType, &rect);
            CFNumberGetValue(v138, kCFNumberIntType, time);
            if (v148) {
              CFNumberGetValue(v148, kCFNumberIntType, &valuePtr);
            }
            if (LODWORD(valuePtr.origin.x) | LODWORD(rect.origin.x) | *(unsigned __int8 *)(v135 + 7472)
              && *(_DWORD *)time
              || (v168 = *(_DWORD *)(v135 + 528), BOOL v65 = __OFSUB__(v168, 1), v169 = v168 - 1, (v169 < 0) ^ v65))
            {
LABEL_380:
              if (*(unsigned char *)(v135 + 7586))
              {
                uint64_t v47 = doFocusNow(a1, 1, (void *)*MEMORY[0x1E4F54D28], 1);
                unsigned int v171 = target;
              }
              else
              {
                unsigned int v171 = target;
                if (*(unsigned char *)(v135 + 7583))
                {
                  if (*(int *)(v135 + 660) <= 1) {
                    int v172 = 1;
                  }
                  else {
                    int v172 = *(_DWORD *)(v135 + 660);
                  }
                  doPeakTrackingAutofocusNow(a1, v172);
                  uint64_t v47 = 0;
                }
                else
                {
                  uint64_t v47 = doAutofocusNow(a1);
                }
              }
              CMSampleBufferGetPresentationTimeStamp((CMTime *)&rect, v171);
              *(Float64 *)(v135 + 568_Block_object_dispose(&STACK[0x4E0], 8) = CMTimeGetSeconds((CMTime *)&rect);
              FigImageControl_CurrentFocusRect(a1, (_DWORD *)(v135 + 5704), (_DWORD *)(v135 + 5708), (_DWORD *)(v135 + 5712), (_DWORD *)(v135 + 5716));
              *(_DWORD *)(v135 + 6284) = 0;
              if (*(_DWORD *)(v135 + 7612) == 2)
              {
                *(_DWORD *)(v135 + 7612) = 3;
                *(unsigned char *)(v135 + 8289) = 1;
              }
            }
            else
            {
              uint64_t v47 = 0;
              *(_DWORD *)(v135 + 52_Block_object_dispose(&STACK[0x4E0], 8) = v169;
            }
          }
          else
          {
            uint64_t v47 = 0;
            *(_DWORD *)(v135 + 524) = v159;
          }
        }
        else
        {
          CFDictionaryRef v161 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigAutofocusSampleBufferProcessorProperty_FocusMode, (const void **)kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v161) {
            CFRelease(v161);
          }
          return 0;
        }
      }
      else
      {
        if (*(unsigned char *)(v135 + 515)) {
          captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A48], 0);
        }
        int v160 = *(_DWORD *)(v135 + 7620);
        if (v152) {
          setupFocusWindowMatrix(a1, v160, *(_DWORD *)(v135 + 7624), *(_DWORD *)(v135 + 7628), *(_DWORD *)(v135 + 7632), 0, 4, 4, 1);
        }
        else {
          setupFocusWindows((float)v160 * 0.001, (float)*(int *)(v135 + 7624) * 0.001, (float)*(int *)(v135 + 7628) * 0.001, (float)*(int *)(v135 + 7632) * 0.001, a1, 0);
        }
        *(float32x4_t *)(v135 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v135 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
        *(unsigned char *)(v135 + 7664) = 0;
        if (*(unsigned char *)(v135 + 7582))
        {
          int v162 = *(_DWORD *)(v135 + 7640);
          int v163 = *(_DWORD *)(v135 + 7636);
          int v164 = 2 * v140 * (v162 - v163) / 255;
          if (v164 >= v140) {
            int v164 = v140;
          }
          if (v164 <= 5) {
            int v165 = 5;
          }
          else {
            int v165 = v164;
          }
          uint64_t v166 = a1;
          int v167 = *(_DWORD *)(v135 + 7636);
        }
        else
        {
          uint64_t v166 = a1;
          int v163 = v149;
          int v162 = 255;
          int v167 = v149;
          int v165 = v140;
        }
        uint64_t v47 = setupSearchPositions(v166, v163, v162, v167, v165, v152, 1, v150);
        *(void *)(v135 + 524) = 0x1400000004;
        *(unsigned char *)(v135 + 7580) = 1;
      }
      return v47;
    case 3:
      if (!*(unsigned char *)(v48 + 7580))
      {
        doLockFocusNow(a1);
        *(unsigned char *)(v48 + 7580) = 1;
      }
      return v47;
    case 4:
      if (*(unsigned char *)(v48 + 7580) || *(unsigned char *)(v48 + 81)) {
        return v47;
      }
      doLockFocusNow(a1);
      int v142 = *(_DWORD *)(v48 + 7648);
      LODWORD(valuePtr.origin.x) = v142;
      if (v142 == -1)
      {
        int v142 = *(_DWORD *)(v48 + 7644);
        LODWORD(valuePtr.origin.x) = v142;
      }
      if (v142 == 0x7FFFFFFF)
      {
        CFDictionaryRef v143 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
        if (v143)
        {
          CFNumberRef v144 = (const __CFNumber *)CFDictionaryGetValue(v143, (const void *)*MEMORY[0x1E4F53D98]);
          if (v144) {
            CFNumberGetValue(v144, kCFNumberSInt32Type, &valuePtr);
          }
        }
      }
      if (*(unsigned char *)(v48 + 516))
      {
        CFAllocatorRef v145 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (*(_DWORD *)(v48 + 7652))
        {
          CGFloat v146 = *MEMORY[0x1E4F52E90];
          rect.origin.double x = *(CGFloat *)MEMORY[0x1E4F53A80];
          rect.origin.double y = v146;
          *(void *)CMTime time = CFNumberCreate(v145, kCFNumberSInt32Type, &valuePtr);
          *(void *)&time[8] = CFNumberCreate(v145, kCFNumberSInt32Type, (const void *)(v48 + 7652));
          CFDictionaryRef v147 = CFDictionaryCreate(v145, (const void **)&rect, (const void **)time, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(*(CFTypeRef *)time);
          CFRelease(*(CFTypeRef *)&time[8]);
          goto LABEL_220;
        }
      }
      else
      {
        CFAllocatorRef v145 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      }
      CFDictionaryRef v147 = CFNumberCreate(v145, kCFNumberSInt32Type, &valuePtr);
LABEL_220:
      uint64_t v47 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A98], v147);
      CFRelease(v147);
      *(unsigned char *)(v48 + 7580) = 1;
      return v47;
    default:
      return v47;
  }
}

CFIndex getFocusPeakSums(const __CFDictionary *a1, char *a2)
{
  CFIndex result = (CFIndex)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F53EC0]);
  if (result)
  {
    CFArrayRef v4 = (const __CFArray *)result;
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if ((int)result >= 1)
    {
      CFIndex v5 = 0;
      if ((int)result >= 16) {
        uint64_t v6 = 16;
      }
      else {
        uint64_t v6 = result;
      }
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, v5);
        CFIndex result = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, a2);
        ++v5;
        a2 += 8;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void setupFocusWindowMatrix(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = (unsigned char *)(DerivedStorage + 7585);
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  *(_OWORD *)int32x4_t v68 = 0u;
  long long v69 = 0u;
  if (*(unsigned char *)(DerivedStorage + 9053)) {
    return;
  }
  uint64_t v19 = DerivedStorage;
  int v53 = a2;
  int v54 = a3;
  int v20 = *(_DWORD *)(DerivedStorage + 9040);
  *(_OWORD *)(DerivedStorage + 46_Block_object_dispose(&STACK[0x4E0], 8) = 0uLL;
  *(_OWORD *)(DerivedStorage + 484) = 0uLL;
  *(_OWORD *)(DerivedStorage + 436) = 0uLL;
  *(_OWORD *)(DerivedStorage + 452) = 0uLL;
  uint64_t v21 = (a8 * a7);
  if ((int)v21 >= 17) {
    setupFocusWindowMatrix_cold_1();
  }
  int v46 = a6;
  int valuePtr = 0;
  int v59 = 0;
  *(_DWORD *)(DerivedStorage + 176) = v21;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((int)v21 <= 0)
  {
    CFArrayRef v37 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v68, (a8 * a7), MEMORY[0x1E4F1D510]);
    int v57 = 0;
    goto LABEL_33;
  }
  long long v42 = (unsigned char *)(DerivedStorage + 7585);
  uint64_t v55 = DerivedStorage;
  uint64_t v23 = 0;
  int v52 = 1000 - (__int16)v20;
  CFDictionaryRef v51 = (void *)*MEMORY[0x1E4F52F48];
  uint64_t v50 = (void *)*MEMORY[0x1E4F52F78];
  uint64_t v49 = *MEMORY[0x1E4F52F88];
  uint64_t v48 = *MEMORY[0x1E4F52F50];
  uint64_t v47 = *MEMORY[0x1E4F52F80];
  uint64_t v45 = *MEMORY[0x1E4F52EA0];
  uint64_t v44 = *MEMORY[0x1E4F52F40];
  uint64_t v43 = *MEMORY[0x1E4F1CFD0];
  do
  {
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)keys = 0u;
    uint64_t v63 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    *(_OWORD *)values = 0u;
    int v57 = 1;
    int v24 = (__int16)((int)v23 % a7) * a4 / a7 + v53;
    int v25 = (__int16)((__int16)((int)v23 % a7) * a4 / a7 + v53);
    HIWORD(valuePtr) = (__int16)((int)v23 % a7) * a4 / a7 + v53;
    int v26 = (__int16)((int)v23 / a7) * a5 / a8 + v54;
    LOWORD(valuePtr) = (__int16)((int)v23 / a7) * a5 / a8 + v54;
    int v27 = (a4 + v25 * a4) / a7 - v25 * a4 / a7;
    HIWORD(v59) = (a4 + v25 * a4) / a7 - v25 * a4 / a7;
    unsigned __int16 v28 = valuePtr;
    int v29 = (a5 + (__int16)valuePtr * a5) / a8;
    int v30 = v29 - (__int16)valuePtr * a5 / a8;
    LOWORD(v59) = v29 - (__int16)valuePtr * a5 / a8;
    if ((v24 & 0x8000) != 0)
    {
      LOWORD(v25) = 0;
      LOWORD(v27) = v27 + v24;
      HIWORD(v59) = v27;
      HIWORD(valuePtr) = 0;
      if ((v26 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }
    else if ((v26 & 0x8000) == 0)
    {
      goto LABEL_7;
    }
    unsigned __int16 v28 = 0;
    LOWORD(v30) = v30 + v26;
    LOWORD(v59) = v30;
    LOWORD(valuePtr) = 0;
LABEL_7:
    if ((__int16)v27 + (unsigned __int16)v25 >= 1001)
    {
      LOWORD(v27) = 1000 - v25;
      HIWORD(v59) = 1000 - v25;
    }
    if ((__int16)v30 + v28 >= 1001)
    {
      LOWORD(v30) = 1000 - v28;
      LOWORD(v59) = 1000 - v28;
    }
    if (v20 > (__int16)v27)
    {
      HIWORD(v59) = v20;
      if (v52 < (unsigned __int16)v25) {
        HIWORD(valuePtr) = 1000 - v20;
      }
    }
    if (v20 > (__int16)v30)
    {
      LOWORD(v59) = v20;
      if (v52 < v28) {
        LOWORD(valuePtr) = 1000 - v20;
      }
    }
    keys[0] = v51;
    values[0] = CFNumberCreate(v22, kCFNumberSInt16Type, (char *)&valuePtr + 2);
    keys[1] = v50;
    values[1] = CFNumberCreate(v22, kCFNumberSInt16Type, &valuePtr);
    *(void *)&long long v65 = v49;
    *(void *)&long long v61 = CFNumberCreate(v22, kCFNumberSInt16Type, (char *)&v59 + 2);
    *((void *)&v65 + 1) = v48;
    *((void *)&v61 + 1) = CFNumberCreate(v22, kCFNumberSInt16Type, &v59);
    *(void *)&long long v66 = v47;
    *(void *)&long long v62 = CFNumberCreate(v22, kCFNumberIntType, &v57);
    CFIndex v31 = 5;
    if (!v23 && v46)
    {
      int v56 = 4096;
      *((void *)&v66 + 1) = v45;
      CFNumberRef v32 = CFNumberCreate(v22, kCFNumberIntType, &v56);
      uint64_t v67 = v44;
      *((void *)&v62 + 1) = v32;
      uint64_t v63 = v43;
      CFIndex v31 = 7;
    }
    unsigned int v33 = (_DWORD *)(v55 + 4 * v23);
    v33[45] = SHIWORD(valuePtr);
    v33[61] = (__int16)valuePtr;
    v33[77] = SHIWORD(v59);
    v33[93] = (__int16)v59;
    v33[109] = v57;
    CFDictionaryRef v34 = CFDictionaryCreate(v22, (const void **)keys, (const void **)values, v31, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v35 = 0;
    v68[v23] = v34;
    int v57 = 0;
    do
    {
      int v36 = values[v35];
      if (v36)
      {
        CFRelease(v36);
        int v35 = v57;
      }
      int v57 = ++v35;
    }
    while (v35 < (int)v31);
    ++v23;
  }
  while (v23 != v21);
  CFArrayRef v37 = CFArrayCreate(v22, (const void **)v68, (a8 * a7), MEMORY[0x1E4F1D510]);
  int v38 = 0;
  int v57 = 0;
  uint64_t v19 = v55;
  uint64_t v18 = v42;
  do
  {
    int v39 = v68[v38];
    if (v39)
    {
      CFRelease(v39);
      int v38 = v57;
    }
    int v57 = ++v38;
  }
  while (v38 < (int)v21);
LABEL_33:
  uint64_t v40 = *(const void **)(v19 + 9032);
  if (v40) {
    CFRelease(v40);
  }
  *(void *)(v19 + 9032) = v37;
  if (*v18)
  {
    xpc_object_t v41 = (const void *)*MEMORY[0x1E4F54780];
    if (a9) {
      captureStreamSetPropertyOnActivityScheduler(a1, v41, v37);
    }
    else {
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v41, (uint64_t)v37);
    }
  }
  else
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 7604), 1u, memory_order_relaxed);
  }
}

uint64_t getDefaultFocusScanRange(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, int *a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v10 = *(_DWORD *)(result + 636);
  if (v10 <= 0) {
    int v10 = 12;
  }
  uint64_t v11 = 692;
  if (!*(_DWORD *)(result + 40)) {
    uint64_t v11 = 688;
  }
  if (*(unsigned char *)(result + 7582))
  {
    int v12 = *(_DWORD *)(result + 7640);
    int v13 = *(_DWORD *)(result + 7636);
    if (2 * v10 * (v12 - v13) / 255 < v10) {
      int v10 = 2 * v10 * (v12 - v13) / 255;
    }
    if (v10 <= 5) {
      int v10 = 5;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(result + v11);
    if (*(_WORD *)(result + 5664) != 4 && v13 <= *(_DWORD *)(result + 632)) {
      int v13 = *(_DWORD *)(result + 632);
    }
    int v12 = 255;
  }
  *a2 = v13;
  *a3 = v12;
  *a4 = v13;
  *a5 = v10;
  return result;
}

uint64_t doFocusNow(uint64_t a1, int a2, void *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 5000;
  if (*(unsigned char *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = DerivedStorage + 7583;
  xpc_object_t value = a3;
  CFArrayRef v37 = (void *)*MEMORY[0x1E4F53938];
  int v11 = 9;
  if (*(unsigned char *)(DerivedStorage + 7583))
  {
    if (*(int *)(DerivedStorage + 660) >= 9) {
      int v11 = 9;
    }
    else {
      int v11 = *(_DWORD *)(DerivedStorage + 660);
    }
    if (v11 <= 1) {
      int v11 = 1;
    }
    int v12 = 2;
  }
  else
  {
    int v12 = 1;
  }
  int v13 = *(unsigned __int8 *)(DerivedStorage + 7585);
  int v41 = v11;
  int v43 = v12;
  unsigned int v14 = *(_DWORD *)(DerivedStorage + 40);
  BOOL v15 = v14 > 6 || ((1 << v14) & 0x6E) == 0;
  int v39 = a4;
  uint64_t v38 = a1;
  if (v15)
  {
    int v16 = a2;
    uint64_t v18 = (const void **)MEMORY[0x1E4F539A8];
  }
  else
  {
    if (v13 && (a2 & 1) == 0) {
      int v43 = 2;
    }
    int v16 = a2;
    if (v14 - 5 >= 2) {
      CFMutableArrayRef v17 = (const void **)MEMORY[0x1E4F539C0];
    }
    else {
      CFMutableArrayRef v17 = (const void **)MEMORY[0x1E4F539B8];
    }
    if (*(unsigned char *)(DerivedStorage + 18160)) {
      uint64_t v18 = (const void **)MEMORY[0x1E4F539B0];
    }
    else {
      uint64_t v18 = v17;
    }
  }
  uint64_t v19 = *v18;
  if (*(void *)(DerivedStorage + 680)) {
    int v20 = *(const void **)(DerivedStorage + 680);
  }
  else {
    int v20 = v19;
  }
  storePreviousFocusState(DerivedStorage);
  *(_DWORD *)(v9 + 6220) = 0;
  *(_DWORD *)(v9 + 5496) = 0;
  *(_WORD *)(v9 + 80) = 256;
  *(unsigned char *)(v10 + 706) = 0;
  int v21 = *(_DWORD *)(v9 + 7588) + 1;
  *(_DWORD *)(v9 + 758_Block_object_dispose(&STACK[0x4E0], 8) = v21;
  int v40 = v21;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v24 = CFNumberCreate(v22, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v25 = CFNumberCreate(v22, kCFNumberSInt32Type, &v43);
  CFNumberRef v26 = CFNumberCreate(v22, kCFNumberSInt32Type, &v41);
  CFNumberRef v27 = CFNumberCreate(v22, kCFNumberSInt32Type, &v40);
  unsigned __int16 v28 = (const void *)*MEMORY[0x1E4F1CFD0];
  int v29 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v16) {
    int v30 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    int v30 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53980], v30);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53988], v24);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53990], value);
  if (v13) {
    CFIndex v31 = v28;
  }
  else {
    CFIndex v31 = v29;
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53968], v31);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53998], v25);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53978], v20);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53960], v37);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F53970], v26);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F52E90], v27);
  CFRelease(v24);
  CFRelease(v25);
  CFRelease(v26);
  CFRelease(v27);
  sendFocusStartNotification(v38, v16 ^ 1);
  CFNumberRef v32 = (const void *)*MEMORY[0x1E4F54948];
  if (v39) {
    uint64_t v33 = captureStreamSetPropertyOnActivityScheduler(v38, v32, Mutable);
  }
  else {
    uint64_t v33 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(v38, (uint64_t)v32, (uint64_t)Mutable);
  }
  uint64_t v34 = v33;
  if (v33)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable) {
      return v34;
    }
    goto LABEL_37;
  }
  if (Mutable) {
LABEL_37:
  }
    CFRelease(Mutable);
  return v34;
}

__n128 storePreviousFocusState(uint64_t a1)
{
  LODWORD(v1) = *(_DWORD *)(a1 + 6220);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a1 + 5736;
    do
    {
      *(_DWORD *)(a1 + 5816 + 4 * v2) = *(_DWORD *)(v3 + 4 * v2);
      *(void *)(v3 + 8 * v2 + 320) = *(void *)(v3 + 8 * v2 + 160);
      ++v2;
      uint64_t v1 = *(int *)(a1 + 6220);
    }
    while (v2 < v1);
  }
  *(void *)(a1 + 5680) = *(void *)(a1 + 5672);
  *(void *)(a1 + 5696) = *(void *)(a1 + 5688);
  *(_DWORD *)(a1 + 6224) = v1;
  *(void *)(a1 + 6240) = *(void *)(a1 + 6232);
  *(void *)(a1 + 6256) = *(void *)(a1 + 6248);
  *(void *)(a1 + 6272) = *(void *)(a1 + 6264);
  __n128 result = *(__n128 *)(a1 + 5704);
  *(__n128 *)(a1 + 5720) = result;
  return result;
}

void sendFocusStartNotification(uint64_t a1, char a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  int v5 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v5) {
    int v5 = *(_DWORD *)(DerivedStorage + 7612);
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = Mutable;
  BOOL v8 = v5 == 2;
  if (v5 == 2) {
    int v9 = 5;
  }
  else {
    int v9 = 1;
  }
  uint64_t v10 = kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint;
  if (!v8) {
    uint64_t v10 = kFigAutofocusSampleBufferProcessorFocusMode_FixedFocusPoints;
  }
  CFDictionaryAddValue(Mutable, @"FocusMode", *v10);
  *(_DWORD *)(v4 + 84) = v9;
  if (*(unsigned char *)(v4 + 7664)) {
    int v11 = (int *)(v4 + 7668);
  }
  else {
    int v11 = (int *)(v4 + 180);
  }
  if (*(unsigned char *)(v4 + 7664)) {
    int v12 = (int *)(v4 + 7672);
  }
  else {
    int v12 = (int *)(v4 + 244);
  }
  if (*(unsigned char *)(v4 + 7664)) {
    int v13 = (int *)(v4 + 7676);
  }
  else {
    int v13 = (int *)(v4 + 308);
  }
  if (*(unsigned char *)(v4 + 7664)) {
    unsigned int v14 = (int *)(v4 + 7680);
  }
  else {
    unsigned int v14 = (int *)(v4 + 372);
  }
  v20.size.CGFloat height = (float)((float)*v14 * 0.001);
  v20.size.CGFloat width = (float)((float)*v13 * 0.001);
  v20.origin.double y = (float)((float)*v12 * 0.001);
  v20.origin.double x = (float)((float)*v11 * 0.001);
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v20);
  CFDictionaryAddValue(v7, @"FocusRectDict", DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  if (*(unsigned char *)(v4 + 7664))
  {
    CFDictionaryAddValue(v7, @"isFaceRect", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFArrayRef v16 = *(const __CFArray **)(v4 + 9024);
    if (v16)
    {
      CFIndex v17 = *(int *)(v4 + 556);
      if (CFArrayGetCount(v16) > v17)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 9024), *(int *)(v4 + 556));
        CFDictionaryAddValue(v7, @"faceData", ValueAtIndex);
      }
    }
  }
  if ((a2 & 1) == 0)
  {
    ++*(_DWORD *)(v4 + 7656);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v7)
  {
    CFRelease(v7);
  }
}

float currentGain(const void *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  int v8 = 256;
  int valuePtr = 256;
  int v7 = 256;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F53C08]);
  if (Value) {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  }
  CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F543A0]);
  if (v3) {
    CFNumberGetValue(v3, kCFNumberIntType, &v8);
  }
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F54388]);
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberIntType, &v7);
    float v5 = (float)v7;
  }
  else
  {
    float v5 = 256.0;
  }
  return (float)((float)((float)valuePtr * (float)v8) * v5) * 0.000000059605;
}

void __fcc_probeCameraDriverService_block_invoke()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  refCouint64_t n = dispatch_queue_create("ProbeCameraDriverService", 0);
  dispatch_object_t object = dispatch_semaphore_create(0);
  uint64_t v15 = 0;
  uint64_t v0 = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
  IONotificationPortSetDispatchQueue(v0, refCon);
  uint64_t v1 = 0;
  uint64_t v2 = (const char **)&sCameraDriverInfo;
  v16[0] = 0;
  v16[1] = 0;
  int v17 = 0;
  do
  {
    CFDictionaryRef v3 = IOServiceMatching(*v2);
    if (IOServiceAddMatchingNotification(v0, "IOServiceFirstMatch", v3, (IOServiceMatchingCallback)fcc_cameraDriverServiceMatchingCallback, &refCon, (io_iterator_t *)((char *)v16 + v1)))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fcc_cameraDriverServiceMatchingCallback((uint64_t)&refCon, *(_DWORD *)((char *)v16 + v1));
    v2 += 3;
    v1 += 4;
  }
  while (v1 != 20);
  float v5 = object;
  dispatch_time_t v6 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v5, v6))
  {
    int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = 0;
  unsigned int v9 = atomic_load((unsigned int *)&v15);
  uint64_t v10 = &sCameraDriverInfo;
  do
  {
    io_object_t v11 = *(_DWORD *)((char *)v16 + v8);
    if (v11 == v9)
    {
      fcc_probeCameraDriverService_cameraDriverInfo = (uint64_t)v10;
      io_object_t v11 = v9;
      if (dword_1EB4C5450)
      {
        int v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        io_object_t v11 = *(_DWORD *)((char *)v16 + v8);
      }
    }
    IOObjectRelease(v11);
    v10 += 3;
    v8 += 4;
  }
  while (v8 != 20);
  IONotificationPortDestroy(v0);
  dispatch_release(object);
  dispatch_release(refCon);
}

uint64_t fcc_cameraDriverServiceMatchingCallback(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_object_t v5 = result;
    do
    {
      int v6 = 0;
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 16), (unsigned int *)&v6, iterator);
      if (v6)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
      }
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_object_t v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications(uint64_t a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return FigDebugAssert3();
  }
  CFDictionaryRef v3 = DerivedStorage;
  if (*DerivedStorage) {
    return FigDebugAssert3();
  }
  uint64_t result = FigCaptureAudiomxdSupportEnabled();
  if (!result) {
    return result;
  }
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (*((void *)v3 + 41)) {
    return FigDebugAssert3();
  }
  if (*((void *)v3 + 42)) {
    return FigDebugAssert3();
  }
  io_object_t v5 = (void *)[*((id *)v3 + 97) objectForKeyedSubscript:0x1EFA45440];
  if (!v5) {
    return FigDebugAssert3();
  }
  int v6 = (void *)[v5 supportedProperties];
  uint64_t result = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F52D70]];
  if (!result) {
    return result;
  }
  id v7 = +[FigWeakReference weakReferenceToObject:a1];
  uint64_t v8 = (void *)[MEMORY[0x1E4F74F68] sharedInstance];
  unsigned int v9 = (uint64_t *)MEMORY[0x1E4F74E98];
  v20[0] = *MEMORY[0x1E4F74E98];
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];
  [v8 setAttribute:v10 forKey:*MEMORY[0x1E4F74EA8] error:0];
  io_object_t v11 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v12 = *v9;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  _OWORD v19[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke;
  v19[3] = &unk_1E5C247D8;
  void v19[4] = v7;
  int v13 = (void *)[v11 addObserverForName:v12 object:v8 queue:0 usingBlock:v19];
  if (!v13) {
    return FigDebugAssert3();
  }
  *((void *)v3 + 41) = v13;
  unsigned int v14 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v15 = *MEMORY[0x1E4F4E9B8];
  uint64_t v16 = [MEMORY[0x1E4F4E9F0] sharedInstance];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  id v18[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_3;
  v18[3] = &unk_1E5C247D8;
  v18[4] = v7;
  int v17 = (void *)[v14 addObserverForName:v15 object:v16 queue:0 usingBlock:v18];
  if (!v17) {
    return FigDebugAssert3();
  }
  *((void *)v3 + 42) = v17;
  return captureSession_handlePlaybackOrRouteStateChange();
}

__CFDictionary *FigCaptureMetadataUtiliesCreateExifAuxRegionsDictForSampleBuffer(const void *a1, int Count)
{
  CFNumberRef v4 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53270], 0);
  int v5 = FigCFEqual();
  double v62 = FigCaptureUnityRect();
  double v63 = v6;
  double v64 = v7;
  CGFloat v65 = v8;
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  v61.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
  v61.CGSize size = v9;
  memset(&rect, 0, sizeof(rect));
  CFDictionaryRef v10 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55C08], 0);
  if (!v10)
  {
    BOOL v11 = 0;
    if (Count) {
      goto LABEL_3;
    }
LABEL_8:
    CFArrayRef v14 = 0;
    goto LABEL_9;
  }
  BOOL v11 = CGRectMakeWithDictionaryRepresentation(v10, &rect);
  if (!Count) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v12 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
  int v13 = (void *)[v12 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
  CFArrayRef v14 = (const __CFArray *)[v13 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
  if (v14 || (CFArrayRef v14 = (const __CFArray *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]]) != 0)
  {
    int Count = CFArrayGetCount(v14);
    if (Count) {
      goto LABEL_11;
    }
  }
  else
  {
    int Count = 0;
  }
LABEL_9:
  if (!v11 && !v5) {
    return 0;
  }
LABEL_11:
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_43;
  }
  BOOL v51 = v11;
  int v52 = v5;
  if (!v5) {
    FigCFDictionaryGetCGRectIfPresent();
  }
  int v17 = (void *)CMGetAttachment(a1, @"StillSettings", 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F2F728], (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v17, "requestedSettings"), "outputWidth")));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F2F720], (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v17, "requestedSettings"), "outputHeight")));
  CFMutableArrayRef v18 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v50 = Mutable;
    if (Count >= 1)
    {
      CFIndex v20 = 0;
      int v21 = (const void *)*MEMORY[0x1E4F54180];
      kedouble y = (void *)*MEMORY[0x1E4F54348];
      uint64_t v49 = (void *)*MEMORY[0x1E4F2F750];
      int v56 = (void *)*MEMORY[0x1E4F53CB8];
      uint64_t v48 = (void *)*MEMORY[0x1E4F2F738];
      uint64_t v55 = (void *)*MEMORY[0x1E4F53CB0];
      uint64_t v47 = (void *)*MEMORY[0x1E4F2F730];
      int v54 = (void *)*MEMORY[0x1E4F53D80];
      int v46 = (void *)*MEMORY[0x1E4F2F740];
      int v53 = (void *)*MEMORY[0x1E4F53E70];
      uint64_t v45 = (void *)*MEMORY[0x1E4F2F748];
      CFAllocatorRef v22 = (const void *)*MEMORY[0x1E4F2F780];
      uint64_t v23 = (const void *)*MEMORY[0x1E4F2F760];
      uint64_t v24 = Count;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v20);
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v21);
        if (Value)
        {
          if (CGRectMakeWithDictionaryRepresentation(Value, &v61))
          {
            v66.origin.double x = FigCaptureTransformRectToCoordinateSpaceOfRect(v61.origin.x, v61.origin.y, v61.size.width, v61.size.height, v62, v63, v64);
            double width = v66.size.width;
            double height = v66.size.height;
            v74.origin.double x = 0.0;
            v74.origin.double y = 0.0;
            v74.size.double width = 1.0;
            v74.size.double height = 1.0;
            CGRect v67 = CGRectIntersection(v66, v74);
            CGRect v61 = v67;
            if (v67.size.width * v67.size.height >= width * height * 0.5)
            {
              CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v29)
              {
                int v30 = v29;
                CGRectGetMidX(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetWidth(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetMidY(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetHeight(v61);
                FigCFDictionarySetCGFloat();
                CFIndex v31 = CFDictionaryGetValue(ValueAtIndex, key);
                if (v31) {
                  CFDictionaryAddValue(v30, v49, v31);
                }
                CFNumberRef v32 = CFDictionaryGetValue(ValueAtIndex, v56);
                if (v32) {
                  CFDictionaryAddValue(v30, v48, v32);
                }
                uint64_t v33 = CFDictionaryGetValue(ValueAtIndex, v55);
                if (v33) {
                  CFDictionaryAddValue(v30, v47, v33);
                }
                uint64_t v34 = CFDictionaryGetValue(ValueAtIndex, v54);
                if (v34) {
                  CFDictionaryAddValue(v30, v46, v34);
                }
                int v35 = CFDictionaryGetValue(ValueAtIndex, v53);
                if (v35) {
                  CFDictionaryAddValue(v30, v45, v35);
                }
                CFDictionaryAddValue(v30, v22, v23);
                CFArrayAppendValue(v19, v30);
                CFRelease(v30);
              }
            }
          }
        }
        ++v20;
      }
      while (v24 != v20);
    }
    CFMutableArrayRef Mutable = v50;
    if (v51)
    {
      double FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
      memset(&v59, 0, sizeof(v59));
      FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v59, v62, v63, v64, v65, FinalCropRect, v37, v38, v39);
      CGAffineTransform v58 = v59;
      CGRect v68 = CGRectApplyAffineTransform(rect, &v58);
      double v40 = v68.size.width;
      double v41 = v68.size.height;
      v75.origin.double x = 0.0;
      v75.origin.double y = 0.0;
      v75.size.double width = 1.0;
      v75.size.double height = 1.0;
      CGRect v69 = CGRectIntersection(v68, v75);
      CGRect rect = v69;
      if (v69.size.width * v69.size.height >= v40 * v41 * 0.5)
      {
        long long v42 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CGRectGetMidX(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetWidth(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetMidY(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetHeight(rect);
        FigCFDictionarySetCGFloat();
        CFDictionaryAddValue(v42, (const void *)*MEMORY[0x1E4F2F780], (const void *)*MEMORY[0x1E4F2F768]);
        CFArrayAppendValue(v19, v42);
        CFRelease(v42);
      }
    }
    if (v52)
    {
      memset(&v59, 0, 32);
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        int v43 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        v70.origiuint64_t n = *(CGPoint *)&v59.a;
        v70.CGSize size = *(CGSize *)&v59.c;
        CGRectGetMidX(v70);
        FigCFDictionarySetCGFloat();
        v71.origiuint64_t n = *(CGPoint *)&v59.a;
        v71.CGSize size = *(CGSize *)&v59.c;
        CGRectGetWidth(v71);
        FigCFDictionarySetCGFloat();
        v72.origiuint64_t n = *(CGPoint *)&v59.a;
        v72.CGSize size = *(CGSize *)&v59.c;
        CGRectGetMidY(v72);
        FigCFDictionarySetCGFloat();
        v73.origiuint64_t n = *(CGPoint *)&v59.a;
        v73.CGSize size = *(CGSize *)&v59.c;
        CGRectGetHeight(v73);
        FigCFDictionarySetCGFloat();
        CFDictionaryAddValue(v43, (const void *)*MEMORY[0x1E4F2F780], (const void *)*MEMORY[0x1E4F2F758]);
        CFArrayAppendValue(v19, v43);
        CFRelease(v43);
      }
    }
    CFDictionaryAddValue(v50, (const void *)*MEMORY[0x1E4F2F778], v19);
    CFRelease(v19);
  }
  else
  {
LABEL_43:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return Mutable;
}

double FigCaptureUnityRect()
{
  return 0.0;
}

uint64_t roDeserializeConfigurationLive(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  CFTypeRef cf = 0;
  if (!a2) {
    goto LABEL_11;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  if (*(_DWORD *)(v3 + 4) != 5) {
    goto LABEL_11;
  }
  uint64_t v5 = 48;
  if (*(void *)(v3 + 32) == v3) {
    uint64_t v5 = 40;
  }
  if (*(void *)(v3 + v5))
  {
    *(void *)(a2 + 96) = *(void *)(v3 + 64);
    FormatDescriptionFromSerializedDictionardouble y = roDeserializePropertyListData(v3, 0, &cf);
    if (FormatDescriptionFromSerializedDictionary
      || (FormatDescriptionFromSerializedDictionardouble y = FigRemote_CreateFormatDescriptionFromSerializedDictionary(),
          FormatDescriptionFromSerializedDictionary))
    {
      uint64_t v10 = FormatDescriptionFromSerializedDictionary;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(a2 + 76) = v7;
      double v8 = *(const void **)(v3 + 24);
      *(void *)(a2 + 80) = *(void *)(v3 + 16);
      NameForCache = roSerializationContextGetNameForCache(a2, v8);
      if (NameForCache) {
        NameForCache = CFRetain(NameForCache);
      }
      uint64_t v10 = 0;
      *(void *)(a2 + 8_Block_object_dispose(&STACK[0x4E0], 8) = NameForCache;
    }
  }
  else
  {
LABEL_11:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = 4294950629;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2) {
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  }
  return v10;
}

uint64_t roDeserializePropertyListData(uint64_t a1, CFOptionFlags a2, CFPropertyListRef *a3)
{
  CFErrorRef error = 0;
  uint64_t v3 = 48;
  if (*(void *)(a1 + 32) == a1) {
    uint64_t v3 = 40;
  }
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  double v6 = *(const UInt8 **)(a1 + v3);
  if (!v6)
  {
    CFIndex Code = 0;
    *a3 = 0;
    return Code;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, *(void *)(a1 + 56), (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950630;
  }
  CFDataRef v9 = v8;
  *a3 = CFPropertyListCreateWithData(v7, v8, a2, 0, &error);
  CFRelease(v9);
  if (*a3) {
    return 0;
  }
  if (!error)
  {
    CFIndex Code = 4294962336;
LABEL_14:
    fig_log_get_emitter();
    FigDebugAssert3();
    return Code;
  }
  CFStringRef v11 = CFErrorCopyFailureReason(error);
  CFIndex Code = CFErrorGetCode(error);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(error);
  if (Code) {
    goto LABEL_14;
  }
  return Code;
}

void __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke(uint64_t a1)
{
  uint64_t v1 = (const void *)[*(id *)(a1 + 32) referencedObject];
  if (v1)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_2;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    unsigned char v2[4] = v1;
    captureSession_performBlockOnWorkerQueue(v1, (uint64_t)v2);
  }
}

void __FigCaptureGetModelSpecificName_block_invoke()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v9 = 0u;
  size_t v7 = 64;
  sysctlbyname("hw.model", cStr, &v7, 0, 0);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    CFStringRef v2 = Mutable;
    CFStringAppendCString(Mutable, cStr, 0);
    CFIndex Length = CFStringGetLength(v2);
    if (CFStringHasSuffix(v2, @"AP")) {
      CFIndex v4 = Length - 2;
    }
    else {
      CFIndex v4 = 0;
    }
    if (CFStringHasSuffix(v2, @"DEV")) {
      v5.length = Length - 3;
    }
    else {
      v5.length = v4;
    }
    if (v5.length < 1)
    {
      double v6 = (void *)CFRetain(v2);
    }
    else
    {
      v5.locatiouint64_t n = 0;
      double v6 = (void *)CFStringCreateWithSubstring(v0, v2, v5);
    }
    FigCaptureGetModelSpecificName_sModelNameStr = (uint64_t)v6;
    CFRelease(v2);
  }
  if (!FigCaptureGetModelSpecificName_sModelNameStr) {
    FigCaptureGetModelSpecificName_sModelNameStr = @"N51";
  }
}

uint64_t fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(int a1)
{
  v4[2] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0xFFFFFFFE) != 6) {
    return 0;
  }
  BOOL v1 = a1 == 7;
  v3[0] = *MEMORY[0x1E4F55138];
  v4[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  v3[1] = *MEMORY[0x1E4F55140];
  v4[1] = [NSNumber numberWithBool:v1];
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:v3 count:2];
}

void BWSampleBufferPropagateAttachedMedia(const void *a1, const void *a2)
{
  uint64_t v3 = (void *)BWSampleBufferDeepCopyDictionaryOfAttachedMedia(a1);
  if (v3)
  {
    id v4 = v3;
    CMSetAttachment(a2, @"AttachedMedia", v3, 1u);
  }
}

uint64_t FigRemoteQueueReceiverSetHandler(uint64_t a1, NSObject *a2, const void *a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  ++*(_DWORD *)(a1 + 64);
  double v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    _Block_release(v6);
    *(void *)(a1 + 56) = 0;
  }
  if (!a3) {
    goto LABEL_9;
  }
  int v7 = *(unsigned __int8 *)(a1 + 69);
  CFDataRef v8 = _Block_copy(a3);
  long long v9 = v8;
  if (!v7)
  {
    *(void *)(a1 + 56) = v8;
    if (v8) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v12 = (const void *)a1;
    long long v11 = 0;
    goto LABEL_10;
  }
  CFRetain((CFTypeRef)a1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigRemoteQueueReceiverSetHandler_block_invoke;
  block[3] = &unk_1E5C2BFE8;
  void block[4] = v9;
  void block[5] = a1;
  dispatch_async(a2, block);
  if (!*(void *)(a1 + 56)) {
    goto LABEL_9;
  }
LABEL_6:
  dispatch_source_t v10 = dispatch_source_create(MEMORY[0x1E4F14478], *(int *)(a1 + 32), 0, a2);
  if (!v10)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  long long v11 = v10;
  uint64_t v12 = (const void *)a1;
LABEL_10:
  rqReceiverSetSource(v12, v11);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void rqReceiverSetSource(CFTypeRef cf, NSObject *a2)
{
  id v4 = *((void *)cf + 6);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*((unsigned char *)cf + 68))
    {
      *((unsigned char *)cf + 6_Block_object_dispose(&STACK[0x4E0], 8) = 0;
      dispatch_resume(*((dispatch_object_t *)cf + 6));
    }
    *((void *)cf + 6) = 0;
  }
  if (a2)
  {
    CFRetain(cf);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __rqReceiverSetSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_84;
    handler[4] = cf;
    dispatch_source_set_event_handler(a2, handler);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    void v5[2] = __rqReceiverSetSource_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_85;
    v5[4] = cf;
    void v5[5] = a2;
    dispatch_source_set_cancel_handler(a2, v5);
    *((void *)cf + 6) = a2;
    if (!*((void *)cf + 9))
    {
      *((void *)cf + 9) = voucher_copy();
      a2 = *((void *)cf + 6);
    }
    *((unsigned char *)cf + 6_Block_object_dispose(&STACK[0x4E0], 8) = 0;
    dispatch_resume(a2);
  }
}

void sub_1A5A0D9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

__CFDictionary *FigCaptureMetadataUtilitiesCreateMetadataAttachments(CMSampleBufferRef sbuf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, char a14, const void *a15, const void *a16, const void *a17, const void *a18, uint64_t a19, char a20)
{
  uint64_t v275 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  DeepCopdouble y = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFTypeRef v29 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v29)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return DeepCopy;
  }
  int v30 = (void *)v29;
  uint64_t v253 = DeepCopy;
  int v238 = a5;
  if (FigCaptureMetadataUtilitiesCreateMetadataAttachments_sOnceToken != -1) {
    dispatch_once(&FigCaptureMetadataUtilitiesCreateMetadataAttachments_sOnceToken, &__block_literal_global_16);
  }
  uint64_t v31 = *MEMORY[0x1E4F54128];
  CFNumberRef v32 = (void *)[v30 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if ([v32 isEqual:*MEMORY[0x1E4F52DF8]])
  {
    int v247 = 1;
  }
  else
  {
    uint64_t v33 = (void *)[v30 objectForKeyedSubscript:v31];
    int v247 = [v33 isEqual:*MEMORY[0x1E4F52E10]];
  }
  int v254 = v30;
  BOOL IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DE0]), "integerValue"));
  CVImageBufferRef v243 = ImageBuffer;
  int v242 = a8;
  uint64_t v234 = v31;
  if (IsExtensionDeviceType)
  {
    int v35 = (__CFString *)CMGetAttachment(sbuf, @"CameraManufacturer", 0);
    int v36 = objc_msgSend((id)-[__CFString lowercaseString](v35, "lowercaseString"), "hasPrefix:", @"apple");
    CGFloat v37 = @"Apple";
    if (!v36) {
      CGFloat v37 = v35;
    }
    unsigned int v249 = v37;
    CFTypeRef v245 = CMGetAttachment(sbuf, @"CameraNonLocalizedName", 0);
  }
  else
  {
    CFTypeRef v245 = (CFTypeRef)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString;
    unsigned int v249 = @"Apple";
  }
  CGSize v38 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  v264.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
  v264.CGSize size = v38;
  int CGRectIfPresent = FigCFDictionaryGetCGRectIfPresent();
  CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53270], 0);
  int v235 = FigCFEqual();
  CGFloat v39 = v253;
  -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(a2, a3 != 0, v247, IsExtensionDeviceType, 0)), *MEMORY[0x1E4F2FCA0]);
  uint64_t v40 = *MEMORY[0x1E4F52FD8];
  CFTypeRef v41 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F52FD8], 0);
  if (v41) {
    [(__CFDictionary *)v253 setObject:v41 forKeyedSubscript:v40];
  }
  if (a13)
  {
    [(__CFDictionary *)v253 setObject:CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F218], 0) forKeyedSubscript:*MEMORY[0x1E4F1F218]];
    [(__CFDictionary *)v253 setObject:CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55B48], 0) forKeyedSubscript:*MEMORY[0x1E4F55B48]];
    [(__CFDictionary *)v253 setObject:CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55B50], 0) forKeyedSubscript:*MEMORY[0x1E4F55B50]];
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", [v254 objectForKeyedSubscript:*MEMORY[0x1E4F542D8]], *MEMORY[0x1E4F542D8]);
    [(__CFDictionary *)v253 setObject:CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F52FB8], 0) forKeyedSubscript:*MEMORY[0x1E4F52FB8]];
    [(__CFDictionary *)v253 setObject:CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F52FB0], 0) forKeyedSubscript:*MEMORY[0x1E4F52FB0]];
  }
  uint64_t v42 = *MEMORY[0x1E4F1F240];
  CFTypeRef v43 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F240], 0);
  if (v43)
  {
    [(__CFDictionary *)v253 setObject:v43 forKeyedSubscript:v42];
    if (FigCFEqual())
    {
      uint64_t v44 = *MEMORY[0x1E4F1F248];
      CFTypeRef v45 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F248], 0);
      if (v45) {
        [(__CFDictionary *)v253 setObject:v45 forKeyedSubscript:v44];
      }
    }
  }
  if (a10) {
    [(__CFDictionary *)v253 setObject:fcmu_makerNoteMetadata(sbuf, a16, a17, a18) forKeyedSubscript:*MEMORY[0x1E4F2FC20]];
  }
  uint64_t v46 = *MEMORY[0x1E4F52E18];
  CFTypeRef v47 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F52E18], 0);
  if (v47) {
    [(__CFDictionary *)v253 setObject:v47 forKeyedSubscript:v46];
  }
  uint64_t v48 = (CFStringRef *)MEMORY[0x1E4F55B40];
  CMSampleBufferRef target = sbuf;
  if (a11)
  {
    if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
      dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
    }
    id v268 = 0;
    CFTypeRef v49 = CMGetAttachment(sbuf, v28, 0);
    if (v49)
    {
      uint64_t v50 = (void *)v49;
      BOOL v51 = (void *)CMGetAttachment(sbuf, @"StillImageProcessingFlags", 0);
      if (v51)
      {
        if (([v51 unsignedIntValue] & 0x40) == 0) {
          goto LABEL_240;
        }
        CFTypeRef v52 = CMGetAttachment(sbuf, *v48, 0);
        if (!v52) {
          goto LABEL_240;
        }
        int v53 = (void *)v52;
        id v54 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        if (v54)
        {
          uint64_t v55 = v54;
          int v56 = v48;
          [v54 setObject:&unk_1EFAFE328 forKeyedSubscript:*MEMORY[0x1E4F52C10]];
          int v57 = (void *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55BC8], 0);
          CGAffineTransform v58 = (void *)[v53 objectForKeyedSubscript:*MEMORY[0x1E4F55798]];
          if (v57)
          {
            [v57 floatValue];
            [v58 floatValue];
          }
          [v55 setObject:v58 forKeyedSubscript:*MEMORY[0x1E4F52BC0]];
          CFTypeRef v59 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55C00], 0);
          if (v59) {
            unsigned int v60 = (void *)v59;
          }
          else {
            unsigned int v60 = &unk_1EFB05898;
          }
          [v55 setObject:v60 forKeyedSubscript:*MEMORY[0x1E4F52BF0]];
          CFTypeRef v61 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55BF8], 0);
          if (v61) {
            double v62 = (void *)v61;
          }
          else {
            double v62 = &unk_1EFB05898;
          }
          [v55 setObject:v62 forKeyedSubscript:*MEMORY[0x1E4F52BE8]];
          uint64_t v63 = [v53 objectForKeyedSubscript:*MEMORY[0x1E4F55AB8]];
          [v55 setObject:v63 forKeyedSubscript:*MEMORY[0x1E4F52BF8]];
          objc_msgSend(v55, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55BF0], 0), *MEMORY[0x1E4F52BE0]);
          uint64_t v64 = [v50 objectForKeyedSubscript:*MEMORY[0x1E4F53248]];
          [v55 setObject:v64 forKeyedSubscript:*MEMORY[0x1E4F52BD0]];
          uint64_t AttachedInference = BWInferenceGetAttachedInference(sbuf, 801, 0x1EFA6A0A0);
          if (AttachedInference) {
            uint64_t v66 = AttachedInference;
          }
          else {
            uint64_t v66 = MEMORY[0x1E4F1CBF0];
          }
          uint64_t v67 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v66 requiringSecureCoding:1 error:&v268];
          [v55 setObject:v67 forKeyedSubscript:*MEMORY[0x1E4F52BC8]];
          if (v268)
          {
            [v268 code];
            FigSignalErrorAt();
          }
          objc_msgSend(v55, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55BD8], 0), *MEMORY[0x1E4F52C00]);
          CFDictionaryRef v68 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55C08], 0);
          CGFloat v39 = v253;
          uint64_t v48 = v56;
          if (v68)
          {
            CFDictionaryRef v69 = v68;
            CGSize v70 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
            CGPoint v240 = (CGPoint)*MEMORY[0x1E4F1DB20];
            CGSize size = (CGSize)*MEMORY[0x1E4F1DB20];
            CGSize v267 = v70;
            CGSize v233 = v70;
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              rect.origiuint64_t n = v240;
              rect.CGSize size = v233;
              if (CGRectMakeWithDictionaryRepresentation(v69, &rect))
              {
                v276.origin.double x = FigCaptureTransformRectToCoordinateSpaceOfRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, size.width, size.height, v267.width);
                CFDictionaryRef v69 = CGRectCreateDictionaryRepresentation(v276);
              }
            }
            [v55 setObject:v69 forKeyedSubscript:*MEMORY[0x1E4F52BD8]];
          }
          CFTypeRef v71 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55C10], 0);
          if (v71) {
            [v55 setObject:v71 forKeyedSubscript:*MEMORY[0x1E4F52C08]];
          }
          if ([v55 count]) {
            [(__CFDictionary *)v253 setObject:v55 forKeyedSubscript:*MEMORY[0x1E4F52BB8]];
          }
          goto LABEL_56;
        }
      }
    }
    fig_log_get_emitter();
    uint64_t v232 = v239;
    LODWORD(v231) = 0;
    FigDebugAssert3();
LABEL_240:
    uint64_t v55 = 0;
LABEL_56:
  }
  if (a12)
  {
    CFStringRef v72 = *v48;
    CFTypeRef v73 = CMGetAttachment(sbuf, *v48, 0);
    if (v73) {
      [(__CFDictionary *)v39 setObject:v73 forKeyedSubscript:v72];
    }
  }
  uint64_t v74 = a19;
  CGRect v75 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v231, v232);
  if (v75) {
    [(__CFDictionary *)v39 setObject:v75 forKeyedSubscript:*MEMORY[0x1E4F2FD40]];
  }
  unint64_t v76 = HIDWORD(Dimensions);
  [v75 setObject:v249 forKeyedSubscript:*MEMORY[0x1E4F2FD60]];
  [v75 setObject:v245 forKeyedSubscript:*MEMORY[0x1E4F2FD68]];
  [v75 setObject:FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductVersion forKeyedSubscript:*MEMORY[0x1E4F2FD88]];
  [v75 setObject:FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString forKeyedSubscript:*MEMORY[0x1E4F2FD50]];
  if (!a19) {
    uint64_t v74 = [MEMORY[0x1E4F1C9C8] now];
  }
  uint64_t v77 = [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter stringFromDate:v74];
  [v75 setObject:v77 forKeyedSubscript:*MEMORY[0x1E4F2FD38]];
  [v75 setObject:&unk_1EFAFE238 forKey:*MEMORY[0x1E4F2FDA8]];
  [v75 setObject:&unk_1EFAFE238 forKey:*MEMORY[0x1E4F2FDB8]];
  [v75 setObject:&unk_1EFAFE250 forKey:*MEMORY[0x1E4F2FD80]];
  [(__CFDictionary *)v39 setObject:&unk_1EFAFE238 forKey:*MEMORY[0x1E4F2F6B0]];
  [(__CFDictionary *)v39 setObject:&unk_1EFAFE238 forKey:*MEMORY[0x1E4F2F6A8]];
  float v78 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (v78) {
    [(__CFDictionary *)v39 setObject:v78 forKeyedSubscript:*MEMORY[0x1E4F2F800]];
  }
  [v78 setObject:@"0232" forKeyedSubscript:*MEMORY[0x1E4F2F968]];
  [v78 setObject:v77 forKeyedSubscript:*MEMORY[0x1E4F2F7F0]];
  [v78 setObject:v77 forKeyedSubscript:*MEMORY[0x1E4F2F7E8]];
  uint64_t v79 = [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter stringFromDate:v74];
  [v78 setObject:v79 forKeyedSubscript:*MEMORY[0x1E4F2F950]];
  [v78 setObject:v79 forKeyedSubscript:*MEMORY[0x1E4F2F948]];
  uint64_t v80 = [FigCaptureMetadataUtilitiesGetTimeZoneFormatter() stringFromDate:v74];
  [v78 setObject:v80 forKeyedSubscript:*MEMORY[0x1E4F2F8C0]];
  [v78 setObject:v80 forKeyedSubscript:*MEMORY[0x1E4F2F8D0]];
  [v78 setObject:v80 forKeyedSubscript:*MEMORY[0x1E4F2F8C8]];
  double width = (double)(int)Dimensions;
  double height = (double)SHIDWORD(Dimensions);
  CFDictionaryRef v83 = (const __CFDictionary *)CMGetAttachment(sbuf, @"EncodedImageSurfaceCGSize", 0);
  if (v83)
  {
    size.double width = 0.0;
    size.double height = 0.0;
    if (CGSizeMakeWithDictionaryRepresentation(v83, &size))
    {
      double width = size.width;
      double height = size.height;
      LODWORD(Dimensions) = (int)size.width;
      LODWORD(v76) = (int)size.height;
    }
  }
  int v241 = v76;
  if (width > 0.0 && height > 0.0)
  {
    uint64_t v84 = [NSNumber numberWithUnsignedLong:(unint64_t)width];
    [v78 setObject:v84 forKeyedSubscript:*MEMORY[0x1E4F2F8D8]];
    uint64_t v85 = [NSNumber numberWithUnsignedLong:(unint64_t)height];
    [v78 setObject:v85 forKeyedSubscript:*MEMORY[0x1E4F2F8E0]];
  }
  [v78 setObject:v249 forKeyedSubscript:*MEMORY[0x1E4F2F888]];
  float v86 = (void *)[MEMORY[0x1E4F28E78] string];
  float v87 = (uint64_t *)MEMORY[0x1E4F53EA0];
  float v88 = (uint64_t *)MEMORY[0x1E4F53E90];
  if (v86)
  {
    int v89 = v86;
    if (IsExtensionDeviceType)
    {
      if (v245) {
        objc_msgSend(v86, "appendString:");
      }
LABEL_90:
      [v78 setObject:v89 forKeyedSubscript:*MEMORY[0x1E4F2F890]];
      goto LABEL_91;
    }
    if (FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString) {
      objc_msgSend(v86, "appendString:");
    }
    int v90 = objc_msgSend((id)CMGetAttachment(sbuf, @"CaptureDeviceType", 0), "intValue");
    if (v247)
    {
      [v89 appendString:@" front"];
      CFDictionaryRef v91 = @" TrueDepth";
      if (v90 != 6 && v90 != 12) {
        goto LABEL_86;
      }
    }
    else
    {
      [v89 appendString:@" back"];
      int v92 = v90 - 4;
      if ((v90 - 4) > 6 || ((0x71u >> v92) & 1) == 0) {
        goto LABEL_86;
      }
      CFDictionaryRef v91 = off_1E5C24FE8[v92];
    }
    [v89 appendString:v91];
LABEL_86:
    [v89 appendString:@" camera"];
    uint64_t v93 = (void *)[v254 objectForKeyedSubscript:*v87];
    if (v93)
    {
      [v93 doubleValue];
      objc_msgSend(v89, "appendFormat:", @" %gmm", v94);
    }
    int v95 = (void *)[v254 objectForKeyedSubscript:*v88];
    if (v95)
    {
      [v95 floatValue];
      objc_msgSend(v89, "appendFormat:", @" f/%g", v96);
    }
    goto LABEL_90;
  }
LABEL_91:
  uint64_t v246 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v250 = *v87;
  CFNumberRef v97 = objc_msgSend(v254, "objectForKeyedSubscript:");
  uint64_t v248 = *v88;
  CFNumberRef v98 = objc_msgSend(v254, "objectForKeyedSubscript:");
  CFArrayRef v99 = (void *)CMGetAttachment(sbuf, @"ExifSlaveFocalLengths", 0);
  int v100 = (void *)CMGetAttachment(sbuf, @"ExifSlaveLensFNumbers", 0);
  long long v260 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  long long v263 = 0u;
  uint64_t v101 = [v99 countByEnumeratingWithState:&v260 objects:v274 count:16];
  if (v101)
  {
    uint64_t v102 = v101;
    uint64_t v103 = *(void *)v261;
    int v104 = v97;
    do
    {
      for (uint64_t i = 0; i != v102; ++i)
      {
        if (*(void *)v261 != v103) {
          objc_enumerationMutation(v99);
        }
        CMTimeValue v106 = *(void **)(*((void *)&v260 + 1) + 8 * i);
        [v106 doubleValue];
        double v108 = v107;
        [v104 doubleValue];
        if (v108 > v109) {
          int v104 = v106;
        }
        [v106 doubleValue];
        double v111 = v110;
        [v97 doubleValue];
        if (v111 < v112) {
          CFNumberRef v97 = v106;
        }
      }
      uint64_t v102 = [v99 countByEnumeratingWithState:&v260 objects:v274 count:16];
    }
    while (v102);
  }
  else
  {
    int v104 = v97;
  }
  long long v258 = 0u;
  long long v259 = 0u;
  long long v256 = 0u;
  long long v257 = 0u;
  uint64_t v113 = [v100 countByEnumeratingWithState:&v256 objects:v273 count:16];
  if (!v113)
  {
    uint64_t v116 = v98;
    if (!v97) {
      goto LABEL_124;
    }
    goto LABEL_118;
  }
  uint64_t v114 = v113;
  uint64_t v115 = *(void *)v257;
  uint64_t v116 = v98;
  do
  {
    for (uint64_t j = 0; j != v114; ++j)
    {
      if (*(void *)v257 != v115) {
        objc_enumerationMutation(v100);
      }
      CFDictionaryRef v118 = *(void **)(*((void *)&v256 + 1) + 8 * j);
      [v118 doubleValue];
      double v120 = v119;
      [v116 doubleValue];
      if (v120 > v121) {
        uint64_t v116 = v118;
      }
      [v118 doubleValue];
      double v123 = v122;
      [v98 doubleValue];
      if (v123 < v124) {
        CFNumberRef v98 = v118;
      }
    }
    uint64_t v114 = [v100 countByEnumeratingWithState:&v256 objects:v273 count:16];
  }
  while (v114);
  if (v97)
  {
LABEL_118:
    if (v104)
    {
      BOOL v125 = !v98 || v116 == 0;
      if (!v125)
      {
        [v246 addObject:v97];
        [v246 addObject:v104];
        [v246 addObject:v98];
        [v246 addObject:v116];
        [v78 setObject:v246 forKeyedSubscript:*MEMORY[0x1E4F2F8A0]];
      }
    }
  }
LABEL_124:
  CMSampleBufferRef v126 = target;
  float v127 = 0.0;
  int v129 = v253;
  CFDictionaryRef v128 = v254;
  unint64_t v130 = 0x1E4F28000uLL;
  if ((objc_msgSend((id)objc_msgSend((id)CMGetAttachment(target, @"StillSettings", 0), "captureSettings"), "captureFlags") & 0x80) != 0)
  {
    int v131 = objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E4F541A8]), "BOOLValue");
    uint64_t v132 = (void *)MEMORY[0x1E4F541A0];
    if (!v131) {
      uint64_t v132 = (void *)MEMORY[0x1E4F53D40];
    }
    objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *v132), "floatValue");
    float v127 = v133;
  }
  float v134 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53E48]];
  uint64_t v135 = (void *)MEMORY[0x1E4F2F920];
  if (v134)
  {
    [v134 doubleValue];
    if (v136 <= 0.0)
    {
      double v139 = 0.0;
      uint64_t v140 = [NSNumber numberWithDouble:0.0];
      [v78 setObject:v140 forKeyedSubscript:*MEMORY[0x1E4F2F828]];
    }
    else
    {
      long double v137 = v136;
      if (v136 >= 1.0) {
        double v138 = round(v136 * 10.0) / 10.0;
      }
      else {
        double v138 = 1.0 / (double)(int)(1.0 / v136 + 0.5);
      }
      uint64_t v141 = [NSNumber numberWithDouble:v138];
      [v78 setObject:v141 forKeyedSubscript:*MEMORY[0x1E4F2F828]];
      double v139 = -log2(v137);
    }
    objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithDouble:", v139), *v135);
  }
  uint64_t v142 = [v254 objectForKeyedSubscript:*MEMORY[0x1E4F53D48]];
  CFDictionaryRef v143 = (void *)MEMORY[0x1E4F2F7B0];
  if (v142) {
    [v78 setObject:v142 forKeyedSubscript:*MEMORY[0x1E4F2F7B0]];
  }
  CFNumberRef v144 = (void *)[v254 objectForKeyedSubscript:v248];
  if (v144)
  {
    CFAllocatorRef v145 = v144;
    [v144 doubleValue];
    long double v147 = v146;
    [v78 setObject:v145 forKeyedSubscript:*MEMORY[0x1E4F2F830]];
    double v148 = 0.0;
    if (v147 > 0.0)
    {
      long double v149 = log2(v147);
      double v148 = v149 + v149;
    }
    uint64_t v150 = [NSNumber numberWithDouble:v148];
    [v78 setObject:v150 forKeyedSubscript:*MEMORY[0x1E4F2F6D0]];
  }
  int v151 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53F70]];
  BOOL v152 = (void *)MEMORY[0x1E4F2F878];
  if (v151)
  {
    if (v127 != 0.0)
    {
      int v153 = objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F68]), "intValue");
      LODWORD(size.width) = 0;
      FigCaptureComputeImageGainFromMetadata();
      float v154 = exp2f(-v127);
      float v155 = (float)v153;
      unint64_t v130 = 0x1E4F28000uLL;
      *(float *)&double v156 = v154 * (float)(*(float *)&size.width * v155);
      int v151 = (void *)[NSNumber numberWithFloat:v156];
    }
    int v157 = [v151 intValue];
    int v158 = 12;
    uint64_t v159 = 4u;
    while (1)
    {
      int v160 = *(_DWORD *)((char *)&fcmu_snapISO_sISOTable + v159);
      if (v157 <= (v160 + v158) >> 1) {
        break;
      }
      v159 += 4;
      int v158 = v160;
      if (v159 == 216)
      {
        LOWORD(v15_Block_object_dispose(&STACK[0x4E0], 8) = v157;
        break;
      }
    }
    uint64_t v272 = [NSNumber numberWithShort:(__int16)v158];
    objc_msgSend(v78, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v272, 1), *v152);
  }
  CFDictionaryRef v161 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F52C18]];
  if (v161)
  {
    int v162 = v161;
    int v163 = (int)(objc_msgSend((id)objc_msgSend(v161, "objectAtIndexedSubscript:", 0), "intValue") * Dimensions) / 1000;
    int v164 = (int)(objc_msgSend((id)objc_msgSend(v162, "objectAtIndexedSubscript:", 1), "intValue") * v241) / 1000;
    int v165 = (int)(objc_msgSend((id)objc_msgSend(v162, "objectAtIndexedSubscript:", 2), "intValue") * Dimensions) / 1000;
    int v166 = (int)(objc_msgSend((id)objc_msgSend(v162, "objectAtIndexedSubscript:", 3), "intValue") * v241) / 1000;
    if (CGRectIfPresent && !v235)
    {
      CGAffineTransformMakeScale(&v255, (double)(int)Dimensions, (double)v241);
      CGRect v277 = CGRectApplyAffineTransform(v264, &v255);
      LOWORD(v163) = llround(FigCaptureTransformRectToCoordinateSpaceOfRect((double)(__int16)v163, (double)(__int16)v164, (double)(__int16)v165, (double)(__int16)v166, v277.origin.x, v277.origin.y, v277.size.width)* (double)(int)Dimensions);
      LOWORD(v164) = llround(v167 * (double)v241);
      LOWORD(v165) = llround(v168 * (double)(int)Dimensions);
      LOWORD(v166) = llround(v169 * (double)v241);
    }
    v271[0] = [NSNumber numberWithShort:(__int16)(v163+ ((__int16)(v165 + ((unsigned __int16)(v165 & 0x8000) >> 15)) >> 1))];
    unint64_t v130 = 0x1E4F28000uLL;
    v271[1] = [NSNumber numberWithShort:(__int16)(v164+ ((__int16)(v166 + ((unsigned __int16)(v166 & 0x8000) >> 15)) >> 1))];
    v271[2] = [NSNumber numberWithShort:(__int16)v165];
    v271[3] = [NSNumber numberWithShort:(__int16)v166];
    uint64_t v170 = [MEMORY[0x1E4F1C978] arrayWithObjects:v271 count:4];
    [v78 setObject:v170 forKeyedSubscript:*MEMORY[0x1E4F2F938]];
    CMSampleBufferRef v126 = target;
    int v129 = v253;
    CFDictionaryRef v128 = v254;
    BOOL v152 = (void *)MEMORY[0x1E4F2F878];
  }
  unsigned int v171 = (void *)[v128 objectForKeyedSubscript:*MEMORY[0x1E4F54250]];
  if (v171)
  {
    unsigned int v172 = [v171 intValue];
    if ((v172 & 0x80000000) == 0)
    {
      if (v172 < 0xD) {
        unsigned int v173 = 1;
      }
      else {
        unsigned int v173 = 2;
      }
      if (v172 >= 9) {
        uint64_t v174 = v173;
      }
      else {
        uint64_t v174 = 0;
      }
      uint64_t v175 = [NSNumber numberWithInt:v174];
      [v78 setObject:v175 forKeyedSubscript:*MEMORY[0x1E4F2F918]];
    }
  }
  uint64_t v176 = [v128 objectForKeyedSubscript:v250];
  if (v176) {
    [v78 setObject:v176 forKeyedSubscript:*MEMORY[0x1E4F2F850]];
  }
  CFTypeRef v177 = CMGetAttachment(v126, @"SDOFCustomRendered", 0);
  if (v177 || (CFTypeRef v177 = (CFTypeRef)[v128 objectForKeyedSubscript:*MEMORY[0x1E4F53F30]]) != 0) {
    [v78 setObject:v177 forKeyedSubscript:*MEMORY[0x1E4F2F7E0]];
  }
  float v178 = (void *)[v128 objectForKeyedSubscript:@"CompositeImage"];
  if (v178)
  {
    uint64_t v179 = v178;
    unsigned int v180 = [v178 intValue];
    if (v180 < 3)
    {
      float v181 = @"CompositeImage";
      int v182 = v78;
      uint64_t v183 = v179;
LABEL_172:
      [v182 setObject:v183 forKeyedSubscript:v181];
      goto LABEL_177;
    }
    if (v180 == 3)
    {
      uint64_t v184 = [v254 objectForKeyedSubscript:@"SourceImageNumberOfCompositeImage"];
      unint64_t v130 = 0x1E4F28000;
      uint64_t v185 = [v254 objectForKeyedSubscript:@"SourceExposureTimesOfCompositeImage"];
      if (v184)
      {
        uint64_t v186 = v185;
        if (v185)
        {
          [v78 setObject:v179 forKeyedSubscript:@"CompositeImage"];
          [v78 setObject:v184 forKeyedSubscript:@"SourceImageNumberOfCompositeImage"];
          float v181 = @"SourceExposureTimesOfCompositeImage";
          int v182 = v78;
          uint64_t v183 = (void *)v186;
          goto LABEL_172;
        }
      }
    }
  }
LABEL_177:
  CFArrayRef v187 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53E38]];
  uint64_t v188 = (void *)MEMORY[0x1E4F2F810];
  if (v187)
  {
    uint64_t v189 = (uint64_t)v187;
    if (v127 != 0.0)
    {
      [v187 floatValue];
      *(float *)&double v191 = v190 - v127;
      uint64_t v189 = [*(id *)(v130 + 3792) numberWithFloat:v191];
    }
    [v78 setObject:v189 forKeyedSubscript:*v188];
  }
  uint64_t v192 = [v254 objectForKeyedSubscript:@"ExifWhiteBalance"];
  if (v192) {
    [v78 setObject:v192 forKeyedSubscript:*MEMORY[0x1E4F2F970]];
  }
  uint64_t v193 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53258]];
  if (v193)
  {
    int v194 = [v193 intValue];
    if (v194 == 4) {
      int v195 = &unk_1EFAFE268;
    }
    else {
      int v195 = &unk_1EFAFE220;
    }
    if (v194 == 4) {
      uint64_t v196 = &unk_1EFAFE268;
    }
    else {
      uint64_t v196 = &unk_1EFAFE280;
    }
    [v78 setObject:v195 forKeyedSubscript:*MEMORY[0x1E4F2F818]];
    uint64_t v197 = v196;
    unint64_t v130 = 0x1E4F28000;
    [v78 setObject:v197 forKeyedSubscript:*MEMORY[0x1E4F2F820]];
  }
  int v198 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53DE8]];
  [v198 doubleValue];
  if (v199 > 1.0) {
    [v78 setObject:v198 forKeyedSubscript:*MEMORY[0x1E4F2F808]];
  }
  uint64_t v200 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F53E98]];
  if (v200)
  {
    [v200 doubleValue];
    if (v201 > 0.0)
    {
      double v202 = v201;
      int v203 = (void *)CMGetAttachment(v126, @"BWStillImageCaptureSettings", 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v203, "metadata"), "exifFocalLengthMultiplierByPortType"), "objectForKeyedSubscript:", objc_msgSend(v254, "objectForKeyedSubscript:", v234)), "floatValue");
      double v205 = v204;
      BOOL v125 = v204 == 0.0;
      double v206 = 1.0;
      if (!v125) {
        double v206 = v205;
      }
      double v207 = v202 * v206;
      int v208 = v203;
      unint64_t v130 = 0x1E4F28000uLL;
      objc_msgSend((id)objc_msgSend(v208, "metadata"), "exifFocalLengthOverride");
      if (v209 == 0.0) {
        double v210 = v207;
      }
      else {
        double v210 = v209;
      }
      uint64_t v211 = [NSNumber numberWithInt:llround(v210)];
      [v78 setObject:v211 forKeyedSubscript:*MEMORY[0x1E4F2F848]];
    }
  }
  uint64_t v212 = [v254 objectForKeyedSubscript:*MEMORY[0x1E4F53FB0]];
  if (v212) {
    [v78 setObject:v212 forKeyedSubscript:*MEMORY[0x1E4F2F880]];
  }
  uint64_t v213 = (void *)[v254 objectForKeyedSubscript:*MEMORY[0x1E4F540A0]];
  unint64_t v214 = *(void **)(v130 + 3792);
  if (v213) {
    uint64_t v215 = [v213 intValue];
  }
  else {
    uint64_t v215 = 1;
  }
  uint64_t v216 = [v214 numberWithInt:v215];
  [v78 setObject:v216 forKeyedSubscript:*MEMORY[0x1E4F2F8B8]];
  int v217 = objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F10]), "intValue");
  uint64_t v218 = 32 * (a4 == 0);
  if (a4 && v238)
  {
    if (a6 == 2)
    {
      if (v217 == 1) {
        uint64_t v218 = 25;
      }
      else {
        uint64_t v218 = 24;
      }
    }
    else if (a6 == 1)
    {
      if (v217 == 1) {
        uint64_t v218 = 9;
      }
      else {
        uint64_t v218 = 0;
      }
    }
    else if (a6)
    {
      uint64_t v218 = 32;
    }
    else
    {
      uint64_t v218 = 16;
    }
  }
  uint64_t v219 = [NSNumber numberWithInt:v218];
  [v78 setObject:v219 forKeyedSubscript:*MEMORY[0x1E4F2F838]];
  [v78 setObject:&unk_1EFAFE250 forKeyedSubscript:*MEMORY[0x1E4F2F908]];
  [v78 setObject:&unk_1EFAFE298 forKeyedSubscript:*MEMORY[0x1E4F2F900]];
  ExifAuxRegionsDictForSampleBuffer = FigCaptureMetadataUtiliesCreateExifAuxRegionsDictForSampleBuffer(v126, v242 != 0);
  uint64_t v221 = (void *)MEMORY[0x1E4F2F6D8];
  if (ExifAuxRegionsDictForSampleBuffer)
  {
    uint64_t v222 = ExifAuxRegionsDictForSampleBuffer;
    int v269 = @"Regions";
    char v270 = ExifAuxRegionsDictForSampleBuffer;
    -[__CFDictionary setObject:forKeyedSubscript:](v129, "setObject:forKeyedSubscript:", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v270 forKeys:&v269 count:1], *MEMORY[0x1E4F2F6D8]);
  }
  if (a9)
  {
    uint64_t v223 = [v254 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    [(__CFDictionary *)v129 setObject:v223 forKeyedSubscript:*MEMORY[0x1E4F52FF0]];
  }
  uint64_t v224 = (void *)CMGetAttachment(v243, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  if (v224 && [v224 isEqualToString:*MEMORY[0x1E4F24AC0]])
  {
    CFAllocatorRef v225 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
    CFDataRef v226 = CGColorSpaceCopyICCData(v225);
    [(__CFDictionary *)v129 setObject:v226 forKeyedSubscript:*MEMORY[0x1E4F2F420]];
    CGColorSpaceRelease(v225);
    CFRelease(v226);
    int v227 = &unk_1EFAFE2B0;
  }
  else
  {
    int v227 = &unk_1EFAFE298;
  }
  [v78 setObject:v227 forKeyedSubscript:*MEMORY[0x1E4F2F7C0]];
  if (objc_msgSend((id)CMGetAttachment(v126, @"FrameIsBlackened", 0), "BOOLValue"))
  {
    [(__CFDictionary *)v129 setObject:0 forKeyedSubscript:*v221];
    [v78 setObject:&unk_1EFAFE2C8 forKeyedSubscript:*v143];
    [v78 setObject:&unk_1EFAFE2C8 forKeyedSubscript:*v188];
    [v78 setObject:&unk_1EFAFE2C8 forKeyedSubscript:*MEMORY[0x1E4F2F828]];
    [v78 setObject:&unk_1EFB02C90 forKeyedSubscript:*v152];
    [v78 setObject:&unk_1EFAFE2C8 forKeyedSubscript:*v135];
  }
  if (!a15)
  {
    DeepCopdouble y = v129;
    if (!a14) {
      return DeepCopy;
    }
    goto LABEL_235;
  }
  DeepCopdouble y = (__CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a15, 1uLL);
  if ((BWStillImageProcessingFlagsForSampleBuffer(v126) & 0x100000) != 0) {
    CFDictionaryRemoveValue(DeepCopy, (const void *)*MEMORY[0x1E4F2FA18]);
  }
  FigCFDictionaryAddEntriesToDictionaryWithRecursion();

  if (a14)
  {
LABEL_235:
    uint64_t v228 = *MEMORY[0x1E4F531A8];
    CFTypeRef v229 = CMGetAttachment(v126, (CFStringRef)*MEMORY[0x1E4F531A8], 0);
    if (v229) {
      [(__CFDictionary *)DeepCopy setObject:v229 forKeyedSubscript:v228];
    }
  }
  return DeepCopy;
}

id FigCaptureMetadataUtilitiesGetTimeZoneFormatter()
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptureMetadataUtilitiesGetTimeZoneFormatter_block_invoke_2;
  block[3] = &unk_1E5C249F0;
  void block[4] = &__block_literal_global_165;
  if (FigCaptureMetadataUtilitiesGetTimeZoneFormatter_onceToken != -1) {
    dispatch_once(&FigCaptureMetadataUtilitiesGetTimeZoneFormatter_onceToken, block);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sLock);
  id v0 = (id)FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sTimeZoneFormatter;
  os_unfair_lock_unlock((os_unfair_lock_t)&FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sLock);
  return v0;
}

uint64_t FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(int a1, int a2, int a3, int a4, int a5)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  int v10 = FigCaptureCameraRequires180DegreesRotation(a3, a4);
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    int v11 = a2 & ~a5;
    switch(a1)
    {
      case 1:
        if ((a5 & 1) == 0)
        {
          if (!a4 && ((a3 ^ 1 | v10) & 1) != 0) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        return 8;
      case 2:
        if (a5) {
          return 6;
        }
        if (a4 || ((a3 ^ 1 | v10) & 1) == 0)
        {
LABEL_47:
          BOOL v20 = a2 == 0;
          unsigned int v21 = 5;
        }
        else
        {
LABEL_46:
          BOOL v20 = a2 == 0;
          unsigned int v21 = 7;
        }
        if (v20) {
          return v21 + 1;
        }
        else {
          return v21;
        }
      case 3:
        BOOL v15 = v11 == 0;
        if (v11) {
          unsigned int v16 = 2;
        }
        else {
          unsigned int v16 = 1;
        }
        unsigned int v17 = 3;
        goto LABEL_19;
      case 4:
        BOOL v15 = v11 == 0;
        if (v11) {
          unsigned int v16 = 4;
        }
        else {
          unsigned int v16 = 3;
        }
        unsigned int v17 = 1;
LABEL_19:
        if (!v15) {
          ++v17;
        }
        BOOL v18 = v10 == 0;
        goto LABEL_38;
      default:
        return 6;
    }
  }
  switch(a1)
  {
    case 1:
      BOOL v13 = a2 == 0;
      unsigned int v14 = 1;
      goto LABEL_24;
    case 2:
      BOOL v13 = a2 == 0;
      unsigned int v14 = 3;
LABEL_24:
      if (v13) {
        return v14;
      }
      else {
        return v14 + 1;
      }
    case 3:
      BOOL v19 = a2 == 0;
      if (a2) {
        unsigned int v16 = 7;
      }
      else {
        unsigned int v16 = 8;
      }
      unsigned int v17 = 5;
      goto LABEL_35;
    case 4:
      BOOL v19 = a2 == 0;
      if (a2) {
        unsigned int v16 = 5;
      }
      else {
        unsigned int v16 = 6;
      }
      unsigned int v17 = 7;
LABEL_35:
      if (v19) {
        ++v17;
      }
      BOOL v18 = a3 == 0;
LABEL_38:
      if (v18) {
        uint64_t result = v16;
      }
      else {
        uint64_t result = v17;
      }
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

double acpr_convertFloatRowMajorArrayToSimdMatrix(uint64_t *a1, double a2, double a3, double a4, double a5, int32x4_t a6)
{
  v6.i64[0] = *a1;
  a6.i64[0] = a1[4];
  v6.i64[1] = a1[2];
  *(void *)&double result = vuzp1q_s32(v6, a6).u64[0];
  return result;
}

__n128 acpr_computePixelBufferToRawSensorHomography@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17.f64[0] = (double)(int)a2;
  v17.f64[1] = (double)SHIDWORD(a2);
  FigCFDictionaryGetCGRectIfPresent();
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "doubleValue");
  float64_t v6 = v5;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "doubleValue");
  v16.f64[0] = v6;
  v16.f64[1] = v7;
  FigCFDictionaryGetCGRectIfPresent();
  float64x2_t v8 = vdivq_f64(v16, v17);
  float64x2_t v9 = vmlsq_f64((float64x2_t)0, v8, (float64x2_t)0);
  float64_t v10 = v8.f64[0];
  v8.f64[0] = 0.0;
  *(_OWORD *)a3 = *(unint64_t *)&v10;
  *(_OWORD *)(a3 + 16) = 0u;
  *(float64x2_t *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a3 + 64) = v9;
  *(__n128 *)(a3 + 80) = result;
  return result;
}

double acpr_computeRelativeExtrinsics(int32x4_t a1, int32x4_t a2, int32x4_t a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7 = 0;
  _OWORD v9[2] = vzip1q_s32(vzip2q_s32(a1, a3), vdupq_laneq_s32(a2, 2));
  memset(v10, 0, sizeof(v10));
  do
  {
    v10[v7] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, COERCE_FLOAT(v9[v7])), a6, *(float32x2_t *)&v9[v7], 1), a7, (float32x4_t)v9[v7], 2);
    ++v7;
  }
  while (v7 != 3);
  return *(double *)v10;
}

uint64_t FigCaptureAddDetectedObjectTypesFromMetadataIdentifiersToSet(void *a1, void *a2)
{
  if ([a1 containsObject:*MEMORY[0x1E4F1F138]]) {
    [a2 addObject:*MEMORY[0x1E4F538C8]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F1F140]]) {
    [a2 addObject:*MEMORY[0x1E4F538C0]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F55978]]) {
    [a2 addObject:*MEMORY[0x1E4F538D0]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F1F130]]) {
    [a2 addObject:*MEMORY[0x1E4F538B0]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F1F128]]) {
    [a2 addObject:*MEMORY[0x1E4F538A0]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F1F148]]) {
    [a2 addObject:*MEMORY[0x1E4F538E8]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F55988]]) {
    [a2 addObject:*MEMORY[0x1E4F538E0]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F55968]]) {
    [a2 addObject:*MEMORY[0x1E4F538A8]];
  }
  if ([a1 containsObject:*MEMORY[0x1E4F55970]]) {
    [a2 addObject:*MEMORY[0x1E4F538B8]];
  }
  uint64_t result = [a1 containsObject:*MEMORY[0x1E4F55980]];
  if (result)
  {
    uint64_t v5 = *MEMORY[0x1E4F538D8];
    return [a2 addObject:v5];
  }
  return result;
}

uint64_t cs_getZoomPIPOverlayConfiguration(void *a1, char *a2, float *a3, float *a4)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled");
  if (result)
  {
    int v9 = objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "spatialOverCaptureEnabled");
    uint64_t result = objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "sourceDeviceType");
    if (result <= 9
      && ((1 << result) & 0x310) != 0
      && (uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "requiredFormat"), "dimensions"), (((int)result > 3839) & ~v9) != 1))
    {
      char v11 = 0;
      float v10 = 15.0;
    }
    else
    {
      float v10 = 0.0;
      char v11 = 1;
    }
    if (v9) {
      float v10 = 0.0;
    }
    float v12 = 8.0;
    if (a2) {
      goto LABEL_12;
    }
  }
  else
  {
    char v11 = 0;
    float v10 = 0.0;
    float v12 = 0.0;
    if (a2) {
LABEL_12:
    }
      *a2 = v11;
  }
  if (a3) {
    *a3 = v12;
  }
  if (a4) {
    *a4 = v10;
  }
  return result;
}

CFTypeRef FigCaptureSourceServerCopySourceForToken(int a1)
{
  if (captureSourceServer_initializeStatics_onceToken != -1) {
    dispatch_once(&captureSourceServer_initializeStatics_onceToken, &__block_literal_global_56);
  }
  if (pthread_mutex_lock((pthread_mutex_t *)sSourceListLock)) {
    return 0;
  }
  if (CFArrayGetCount((CFArrayRef)sSourceList) < 1)
  {
LABEL_15:
    CFTypeRef v2 = 0;
  }
  else
  {
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v3);
      id v11 = 0;
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v7 = v6 ? v6 : 0;
      float64x2_t v8 = *(void (**)(const void *, __CFString *, uint64_t, id *))(v7 + 48);
      if (v8) {
        v8(ValueAtIndex, @"SourceToken", v4, &v11);
      }
      if (v11)
      {
        int v9 = [v11 intValue];

        if (v9 == a1) {
          break;
        }
      }
      if (++v3 >= CFArrayGetCount((CFArrayRef)sSourceList)) {
        goto LABEL_15;
      }
    }
    CFTypeRef v2 = CFRetain(ValueAtIndex);
  }
  pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  return v2;
}

uint64_t FigCaptureSpeakerInterferenceMitigationIsRequired()
{
  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8], @"This function may not be called outside of cameracaptured, mediaserverd, or audiomxd", 0 reason userInfo]);
  }
  if (FigCaptureSpeakerInterferenceMitigationInitialize_onceToken != -1) {
    dispatch_once(&FigCaptureSpeakerInterferenceMitigationInitialize_onceToken, &__block_literal_global_80);
  }
  pthread_mutex_lock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  uint64_t v0 = sIsSpeakerInterferenceMitigationRequired;
  pthread_mutex_unlock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  return v0;
}

uint64_t __FigCaptureTCCAccessCheckAuditToken_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t result = tcc_authorization_record_get_authorization_right();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __fcu_initializeTrace_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t __cdpp_initializeStatics_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t flashlightRemote_PowerOff(uint64_t a1)
{
  return flashlightRemote_sendBasicMessage(a1, 1886876208, 0);
}

uint64_t flashlightRemote_sendBasicMessage(uint64_t a1, uint64_t a2, void *a3)
{
  if (!flashlightRemote_createBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = 4294954510;
    goto LABEL_8;
  }
  if (!a3)
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    if (!v5) {
      goto LABEL_8;
    }
    fig_log_get_emitter();
LABEL_14:
    FigDebugAssert3();
    goto LABEL_8;
  }
  if (*a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = 4294954516;
    goto LABEL_8;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v4)
  {
    uint64_t v5 = v4;
    fig_log_get_emitter();
    goto LABEL_14;
  }
  if (*a3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = 4294954513;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t flashlightRemote_createBasicMessage()
{
  if (FigXPCCreateBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

void __FigCaptureDeferredPhotoProcessorCreate_block_invoke(uint64_t a1)
{
  BOOL v1 = (const void *)[*(id *)(a1 + 32) retainReferencedObject];
  captureDeferredPhotoProcessor_terminateImmediatelyDueToError((uint64_t)v1, 4294950475);
  if (v1)
  {
    CFRelease(v1);
  }
}

void captureDeferredPhotoProcessor_terminateImmediatelyDueToError(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 57))
    {
      if (a2 != -16823)
      {
        if (a2 == -16821)
        {
          uint64_t v5 = NSString;
          int v6 = FigCaptureCameracapturedEnabled();
          uint64_t v7 = "mediaserverd";
          if (v6) {
            uint64_t v7 = "cameracaptured";
          }
          objc_msgSend(v5, "stringWithFormat:", @"camera launch in %s", v7);
        }
        else
        {
          objc_msgSend(NSString, "stringWithFormat:", @"unexpected error: %d", a2);
        }
      }
      if (dword_1EB4C4F10)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(unsigned char *)(v4 + 57) = 1;
      objc_msgSend(*(id *)(v4 + 96), "_prepareToTerminateImmediatelyDueToError:", a2, v9, v10);
    }
  }
  if (captureDeferredPhotoProcessor_terminateImmediatelyDueToError_exitImmediatelyToken != -1) {
    dispatch_once(&captureDeferredPhotoProcessor_terminateImmediatelyDueToError_exitImmediatelyToken, &__block_literal_global_173);
  }
}

uint64_t FigCaptureCameracapturedEnabled()
{
  if (FigCaptureCameracapturedEnabled_sOnceToken != -1) {
    dispatch_once(&FigCaptureCameracapturedEnabled_sOnceToken, &__block_literal_global_131);
  }
  return FigCaptureCameracapturedEnabled_sCameracapturedEnabled;
}

uint64_t BWQSubResolutionFlavorSupported(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(a1);
        }
        float64x2_t v8 = (void *)[a1 objectForKeyedSubscript:*(void *)(*((void *)&v10 + 1) + 8 * v7)];
        unint64_t v9 = FigCaptureDimensionsFromDictionaryRepresentation(objc_msgSend(v8, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2)));
        if (FigCaptureVideoDimensionsAreValid(v9)) {
          return 1;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v5 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

unint64_t FigCaptureDimensionsFromDictionaryRepresentation(void *a1)
{
  unsigned int v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"width"), "intValue");
  return v2 | (unint64_t)(objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"height"), "intValue") << 32);
}

void __flashlight_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  if (dword_1E96B6928)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFIndex v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t flashlightServer_handleReplyMessage()
{
  xpc_connection_get_audit_token();
  memset(v3, 0, sizeof(v3));
  FigCaptureClientIsAVConferenced(v3);
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t flashlight_PowerOff(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  if (*(float *)(DerivedStorage + 24) <= 0.0) {
    flashlight_teardownDevice(a1, 1);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return 0;
}

uint64_t flashlight_teardownDevice(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 80)) {
    FigSimpleMutexCheckIsLockedOnThisThread();
  }
  uint64_t v5 = *(void **)(DerivedStorage + 56);
  *(void *)(DerivedStorage + 56) = 0;
  if (v5)
  {
    if (*(float *)(DerivedStorage + 24) > 0.0)
    {
      uint64_t v6 = *(void **)(DerivedStorage + 64);
      if (v6) {
        [v6 setProperty:*MEMORY[0x1E4F54C70] value:&unk_1EFAFDF08];
      }
    }
    objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", v5, *(unsigned int *)(DerivedStorage + 44), 0, 0);
  }
  *(void *)(DerivedStorage + 64) = 0;
  flashlight_handleSystemSleepPrevention(0.0, (uint64_t)a1, 0);
  if (*(float *)(DerivedStorage + 24) > 0.0)
  {
    *(_DWORD *)(DerivedStorage + 24) = 0;
    if (a2)
    {
      id v7 = objc_alloc(NSNumber);
      LODWORD(v_Block_object_dispose(&STACK[0x4E0], 8) = *(_DWORD *)(DerivedStorage + 24);
      unint64_t v9 = (void *)[v7 initWithFloat:v8];
      flashlight_postNotificationWithPayload(a1, @"FlashlightLevel", v9);
    }
    else
    {
      FigCaptureLogTorchPowerEvent(*(_DWORD *)(DerivedStorage + 96), *(const void **)(DerivedStorage + 104), 0.0);
      *(_DWORD *)(DerivedStorage + 2_Block_object_dispose(&STACK[0x4E0], 8) = *(_DWORD *)(DerivedStorage + 24);
    }
  }
  flashlight_logLevelAnalytics(DerivedStorage, 0.0);
  uint64_t result = flashlight_logBeamWidthAnalytics(DerivedStorage, -1.0);
  if (*(void *)(DerivedStorage + 232))
  {
    long long v11 = objc_alloc_init(BWFlashlightAnalyticsPayload);
    [(BWFlashlightAnalyticsPayload *)v11 setLevelUsage:DerivedStorage + 144];
    [(BWFlashlightAnalyticsPayload *)v11 setBeamWidthUsage:DerivedStorage + 248];
    uint64_t result = [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v11];
    *(void *)(DerivedStorage + 224) = 0;
    *(_OWORD *)(DerivedStorage + 192) = 0u;
    *(_OWORD *)(DerivedStorage + 20_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *(_OWORD *)(DerivedStorage + 160) = 0u;
    *(_OWORD *)(DerivedStorage + 176) = 0u;
    *(_OWORD *)(DerivedStorage + 144) = 0u;
    *(_OWORD *)(DerivedStorage + 24_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *(_OWORD *)(DerivedStorage + 264) = 0u;
    *(_OWORD *)(DerivedStorage + 280) = 0u;
    *(_OWORD *)(DerivedStorage + 296) = 0u;
    *(_OWORD *)(DerivedStorage + 312) = 0u;
    *(void *)(DerivedStorage + 32_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  *(void *)(DerivedStorage + 232) = 0;
  *(_DWORD *)(DerivedStorage + 12_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  *(_DWORD *)(DerivedStorage + 240) = -1;
  return result;
}

uint64_t flashlight_logLevelAnalytics(uint64_t result, float a2)
{
  uint64_t v2 = result;
  unsigned int v3 = vcvtps_u32_f32(a2 * 10.0);
  if (v3 && (*(_DWORD *)(result + 240) & 0x80000000) != 0) {
    uint64_t result = flashlight_logBeamWidthAnalytics(result, *(float *)(result + 32));
  }
  if (*(_DWORD *)(v2 + 128) != v3)
  {
    uint64_t result = mach_absolute_time();
    uint64_t v4 = *(unsigned int *)(v2 + 128);
    if (v4)
    {
      uint64_t v5 = result - *(void *)(v2 + 136);
      *(void *)(v2 + 8 * v4 + 144) += v5;
      *(void *)(v2 + 232) += v5;
    }
    *(_DWORD *)(v2 + 12_Block_object_dispose(&STACK[0x4E0], 8) = v3;
    *(void *)(v2 + 136) = result;
  }
  return result;
}

uint64_t flashlight_logBeamWidthAnalytics(uint64_t result, float a2)
{
  unsigned int v2 = vcvtps_s32_f32(a2 * 10.0);
  if (*(_DWORD *)(result + 240) != v2)
  {
    uint64_t v3 = result;
    uint64_t result = mach_absolute_time();
    uint64_t v4 = *(unsigned int *)(v3 + 240);
    if ((v4 & 0x80000000) == 0) {
      *(void *)(v3 + 8 * v4 + 248) += result - *(void *)(v3 + 336);
    }
    *(_DWORD *)(v3 + 240) = v2;
    *(void *)(v3 + 336) = result;
  }
  return result;
}

uint64_t flashlight_handleSystemSleepPrevention(float a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 80);
  if (result) {
    uint64_t result = FigSimpleMutexCheckIsLockedOnThisThread();
  }
  if ((*(void *)(DerivedStorage + 72) | 2) != 2)
  {
    if (a1 == 0.0 || a3)
    {
      if (!*(unsigned char *)(DerivedStorage + 36)) {
        return result;
      }
      uint64_t result = IOPMAssertionRelease(*(_DWORD *)(DerivedStorage + 40));
      *(unsigned char *)(DerivedStorage + 36) = 0;
      if (result || !dword_1E96B6928) {
        return result;
      }
    }
    else
    {
      if (*(unsigned char *)(DerivedStorage + 36)) {
        return result;
      }
      id v7 = NSString;
      int v8 = FigCaptureCameracapturedEnabled();
      unint64_t v9 = "mediaserverd";
      if (v8) {
        unint64_t v9 = "cameracaptured";
      }
      uint64_t result = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, (CFStringRef)objc_msgSend(v7, "stringWithFormat:", @"%s-idleSleepPreventionForFlashlight(ClientPID:%d)", v9, *(unsigned int *)(DerivedStorage + 96)), (IOPMAssertionID *)(DerivedStorage + 40));
      if (result) {
        return result;
      }
      *(unsigned char *)(DerivedStorage + 36) = 1;
      if (!dword_1E96B6928) {
        return result;
      }
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t flashlightServer_getAndRetainFlashlightObjectFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t FigFlashlightGetTypeID()
{
  if (FigFlashlightGetClassID_onceToken != -1) {
    dispatch_once(&FigFlashlightGetClassID_onceToken, &__block_literal_global_57);
  }
  uint64_t v0 = FigFlashlightGetClassID_sFigFlashlightClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

void captureSession_createClientApplicationStateMonitor(const void *a1, long long *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(void *)(DerivedStorage + 120))
  {
    long long v6 = *(_OWORD *)(DerivedStorage + 36);
    long long v17 = *(_OWORD *)(DerivedStorage + 20);
    long long v18 = v6;
    PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&v17);
    long long v8 = a2[1];
    long long v17 = *a2;
    long long v18 = v8;
    if (PIDFromAuditToken == FigCaptureGetPIDFromAuditToken(&v17))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    [*(id *)(v5 + 120) invalidate];
  }
  long long v10 = a2[1];
  long long v17 = *a2;
  long long v18 = v10;
  if (FigCaptureClientIsRunningInMediaserverd(&v17))
  {
    BOOL v11 = 0;
  }
  else
  {
    long long v12 = a2[1];
    long long v17 = *a2;
    long long v18 = v12;
    BOOL v11 = FigCaptureClientIsAVConferenced(&v17) == 0;
  }
  *(unsigned char *)(v5 + 12_Block_object_dispose(&STACK[0x4E0], 8) = v11;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __captureSession_createClientApplicationStateMonitor_block_invoke;
  v14[3] = &__block_descriptor_80_e5_v8__0l;
  long long v13 = a2[1];
  long long v15 = *a2;
  long long v16 = v13;
  v14[4] = v5;
  v14[5] = a1;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v14);
}

uint64_t FigCaptureClientIsAVConferenced(_OWORD *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  uint64_t v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  uint64_t v6 = [(__CFString *)v5 isEqualToString:0x1EFA55840];

  CFRelease(v4);
  return v6;
}

uint64_t FigSampleBufferProcessorCreateForAutofocus(uint64_t a1, void *a2, void *a3, void *a4, void *a5, const __CFDictionary *a6, const void *a7, void *a8)
{
  if (a8 && a2)
  {
    long long v10 = a7;
    uint64_t v14 = ((uint64_t (*)(void))FigImageControl_Sharpness_ConfigureLogging)();
    uint64_t v15 = FigImageControl_Sharpness_ConfigureLogging(v14);
    uint64_t v16 = FigImageControl_Sharpness_ConfigureLogging(v15);
    FigImageControl_Sharpness_ConfigureLogging(v16);
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigSampleBufferProcessorGetClassID();
    uint64_t v18 = CMDerivedObjectCreate();
    if (v18)
    {
      uint64_t v38 = v18;
      fig_log_get_emitter();
      FigDebugAssert3();
      return v38;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    bzero((void *)DerivedStorage, 0x46F8uLL);
    *(_DWORD *)(DerivedStorage + 7576) = 0;
    *(_DWORD *)(DerivedStorage + 742_Block_object_dispose(&STACK[0x4E0], 8) = 1;
    *(_DWORD *)(DerivedStorage + 7616) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 764_Block_object_dispose(&STACK[0x4E0], 8) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7596) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7600) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 9056) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 746_Block_object_dispose(&STACK[0x4E0], 8) = FigGetCFPreferenceNumberWithDefault();
    *(unsigned char *)(DerivedStorage + 7537) = FigGetCFPreferenceNumberWithDefault() != 0;
    *(unsigned char *)(DerivedStorage + 7536) = FigGetCFPreferenceNumberWithDefault() != 0;
    uint64_t v20 = 0;
    *(unsigned char *)(DerivedStorage + 753_Block_object_dispose(&STACK[0x4E0], 8) = FigGetCFPreferenceNumberWithDefault() != 0;
    do
    {
      float v21 = (float)(unsigned __int16)v20 * 0.0039062;
      if (v21 >= 0.018) {
        float v22 = powf(v21, 0.45) * 1.099 + -0.0989999995;
      }
      else {
        float v22 = v21 * 4.5;
      }
      *(float *)(DerivedStorage + 9152 + 4 * v20++) = v22;
    }
    while (v20 != 257);
    *(_DWORD *)(DerivedStorage + 10180) = 0;
    if (*(void *)(DerivedStorage + 17336)
      || (uint64_t v23 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 17336) = v23) != 0))
    {
      *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = a2;
      *(void *)(DerivedStorage + 16) = a3;
      *(void *)(DerivedStorage + 24) = a4;
      *(void *)(DerivedStorage + 32) = a5;
      uint64_t v24 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v25 = (const __CFDictionary *)[*(id *)(v24 + 8) supportedProperties];
      if (v25)
      {
        CFDictionaryRef v26 = v25;
        *(unsigned char *)(v24 + 44) = CFDictionaryContainsKey(v25, @"AutoFocusNow") != 0;
        *(unsigned char *)(v24 + 45) = CFDictionaryContainsKey(v26, @"AutoAENow") != 0;
        *(unsigned char *)(v24 + 510) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54B40]) != 0;
        *(unsigned char *)(v24 + 509) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54AE8]) != 0;
        *(unsigned char *)(v24 + 50_Block_object_dispose(&STACK[0x4E0], 8) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F548E0]) != 0;
        *(unsigned char *)(v24 + 511) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54708]) != 0;
        *(unsigned char *)(v24 + 512) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54738]) != 0;
        *(unsigned char *)(v24 + 514) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F547D0]) != 0;
        *(unsigned char *)(v24 + 51_Block_object_dispose(&STACK[0x4E0], 8) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F548D8]) != 0;
        *(unsigned char *)(v24 + 519) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54710]) != 0;
        *(unsigned char *)(v24 + 515) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54A48]) != 0;
        *(unsigned char *)(v24 + 520) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54A68]) != 0;
        *(unsigned char *)(v24 + 521) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54948]) != 0;
        *(unsigned char *)(v24 + 522) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54848]) != 0;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v26, (const void *)*MEMORY[0x1E4F54A98]);
        if (Value)
        {
          CFDictionaryGetValue(Value, @"PropertyType");
          *(unsigned char *)(v24 + 516) = FigCFEqual() != 0;
        }
        CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v26, (const void *)*MEMORY[0x1E4F548F8]);
        if (v28)
        {
          CFDictionaryGetValue(v28, @"PropertyType");
          *(unsigned char *)(v24 + 513) = FigCFEqual() != 0;
        }
        *(unsigned char *)(v24 + 517) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E4F54AA0]) != 0;
      }
      *(void *)(DerivedStorage + 5656) = -1;
      *(void *)(DerivedStorage + 564_Block_object_dispose(&STACK[0x4E0], 8) = -1;
      *(_DWORD *)(DerivedStorage + 5664) = -1;
      *(void *)(DerivedStorage + 6304) = 0;
      uint64_t v29 = FigCoreMotionAlloc(1, 0, 0, 0.033333, 0.0);
      *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4E0], 8) = v29;
      if (v29)
      {
        uint64_t v30 = CMSimpleQueueCreate(v17, 100, (CMSimpleQueueRef *)(DerivedStorage + 72));
        if (!v30)
        {
          if (v10)
          {
            CFRetain(v10);
            goto LABEL_26;
          }
          uint64_t v30 = FigActivitySchedulerCreateForNewThread();
          if (!v30)
          {
            long long v10 = a7;
LABEL_26:
            *(void *)(DerivedStorage + 64) = v10;
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            uint64_t v34 = *(uint64_t (**)(const void *, const __CFDictionary *(*)(), void))(v33 + 8);
            if (v34)
            {
              uint64_t v35 = v34(v10, setPropertiesOnStream, 0);
              if (!v35)
              {
                *(void *)(DerivedStorage + 532) = 0x3F0000003F000000;
                *(_DWORD *)(DerivedStorage + 7552) = 1;
                *(_DWORD *)(DerivedStorage + 9040) = 1;
                *(_DWORD *)(DerivedStorage + 40) = -1;
                *(unsigned char *)(DerivedStorage + 18160) = 0;
                *(unsigned char *)(DerivedStorage + 17704) = 0;
                configureDevice(0, a6);
                if (*(_DWORD *)(DerivedStorage + 652)
                  || (uint64_t v30 = [*(id *)(DerivedStorage + 8) registerForNotification:*MEMORY[0x1E4F54408] listener:0 callback:captureStreamListener], !v30))
                {
                  uint64_t v36 = *(unsigned int *)(DerivedStorage + 1804);
                  if ((int)v36 >= 1)
                  {
                    CGFloat v37 = (void *)(DerivedStorage + 16344);
                    do
                    {
                      *CGFloat v37 = 0x7FEFFFFFFFFFFFFFLL;
                      v37[30] = 0x7FEFFFFFFFFFFFFFLL;
                      ++v37;
                      --v36;
                    }
                    while (v36);
                  }
                  uint64_t v38 = 0;
                  *a8 = 0;
                  return v38;
                }
                goto LABEL_46;
              }
              uint64_t v38 = v35;
            }
            else
            {
              uint64_t v38 = 4294954514;
            }
            fig_log_get_emitter();
LABEL_39:
            FigDebugAssert3();
            goto LABEL_41;
          }
        }
LABEL_46:
        uint64_t v38 = v30;
        fig_log_get_emitter();
        goto LABEL_39;
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = FigSignalErrorAt();
    }
LABEL_41:
    CGFloat v39 = *(void **)(DerivedStorage + 48);
    if (v39) {
      FigCoreMotionRelease(v39);
    }
    return v38;
  }
  return FigSignalErrorAt();
}

uint64_t FigCoreMotionAlloc(int a1, int a2, int a3, float a4, float a5)
{
  long long v10 = [FigCoreMotionDelegate alloc];
  *(float *)&double v11 = a4;
  *(float *)&double v12 = a5;
  return (uint64_t)[(FigCoreMotionDelegate *)v10 initWithAccelerometer:a1 != 0 gravityZ:a2 != 0 fusedMotion:a3 != 0 accelUpdateInterval:0 fusedMotionUpdateInterval:v11 motionCallbackThreadPriority:v12];
}

unint64_t BWInferenceVersionMake(unsigned __int16 a1, int a2, uint64_t a3)
{
  return (a2 << 16) | (unint64_t)(a3 << 32) | a1;
}

BOOL BWColorSpaceIsHDR(int a1)
{
  return ((a1 - 2) & 0xFFFFFFFD) == 0;
}

void __FigFlashlightCreate_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [*(id *)(a1 + 32) retainReferencedObject];
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v8 = *(_DWORD *)(DerivedStorage + 96);
    if (dword_1E96B6928)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v10 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __flashlight_videoDeviceAvailabilityListener_block_invoke;
    block[3] = &unk_1E5C24C40;
    void block[5] = a2;
    void block[6] = DerivedStorage;
    void block[4] = v6;
    int v12 = v8;
    dispatch_async(v10, block);
    CFRelease(v5);
  }
}

void FigCaptureSpeakerSetInterferenceMitigationIsRequired(unsigned int a1, int a2)
{
  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3A8], @"This function may not be called outside of cameracaptured, mediaserverd, or audiomxd", 0 reason userInfo]);
  }
  if (FigCaptureSpeakerInterferenceMitigationInitialize_onceToken != -1) {
    dispatch_once(&FigCaptureSpeakerInterferenceMitigationInitialize_onceToken, &__block_literal_global_80);
  }
  pthread_mutex_lock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  int v4 = sIsSpeakerInterferenceMitigationRequired;
  if (sIsSpeakerInterferenceMitigationRequired != a1) {
    sIsSpeakerInterferenceMitigationRequired = a1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  if (a2 || v4 != a1)
  {
    if ((FigCaptureCurrentProcessIsCameracaptured()
       || FigCaptureCurrentProcessIsMediaserverd())
      && FigCaptureAudiomxdSupportEnabled())
    {
      notify_set_state(gSpeakerInterferenceMitigationToken, a1);
      CStringPtr = CFStringGetCStringPtr(@"SpeakerInterferenceMitigationRequiredChanged", 0x8000100u);
      notify_post(CStringPtr);
    }
    else
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, @"SpeakerInterferenceMitigationRequiredChanged", 0, 0, 1u);
    }
  }
}

uint64_t FigCaptureCurrentProcessIsMediaserverd()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v0) {
    return 0;
  }
  CFAllocatorRef v1 = v0;
  long long v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  uint64_t v3 = [(__CFString *)v2 isEqualToString:0x1EFA45300];

  CFRelease(v1);
  return v3;
}

void __captureSession_performBlockOnWorkerQueueSynchronously_block_invoke(uint64_t a1)
{
  long long v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void captureSession_updateInflightConfigurationWithIrisSinkPropertyForKey(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v21 = v4;
    LODWORD(v20) = 0;
    FigDebugAssert3();
  }
  int v8 = (os_unfair_lock_s *)(DerivedStorage + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  id v9 = *(id *)(DerivedStorage + 448);
  os_unfair_lock_unlock(v8);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v10 = (void *)[v9 connectionConfigurations];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * i), "irisSinkConfiguration", v20, v21);
        if (objc_msgSend((id)objc_msgSend(v15, "sinkID"), "isEqual:", a2))
        {
          if (CFEqual(a3, @"BeginIrisMovieCaptureHostTime"))
          {
            if (dword_1EB4C5110)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v18 = v15;
            uint64_t v19 = 0;
LABEL_19:
            objc_msgSend(v18, "setIrisMovieCaptureSuspended:", v19, v20);
            continue;
          }
          if (CFEqual(a3, @"EndIrisMovieCaptureHostTime"))
          {
            if (dword_1EB4C5110)
            {
              CFAllocatorRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v18 = v15;
            uint64_t v19 = 1;
            goto LABEL_19;
          }
          if (CFEqual(a3, @"PreservesLivePhotoCaptureSuspendedOnSessionStop")) {
            objc_msgSend(v15, "setPreservesIrisMovieCaptureSuspendedOnSessionStop:", objc_msgSend(a4, "BOOLValue"));
          }
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v12);
  }
}

void __FigCaptureSessionAttachToClient_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v2 = (long long *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 64);
  long long v30 = *(_OWORD *)(a1 + 48);
  long long v31 = v3;
  PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&v30);
  uint64_t v5 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 84));
  uint64_t v6 = *(void *)(a1 + 32);
  long long v7 = *v2;
  *(_OWORD *)(v6 + 36) = v2[1];
  *(_OWORD *)(v6 + 20) = v7;
  int v8 = *(os_unfair_lock_s **)(a1 + 32);
  v8[4]._os_unfair_lock_opaque = PIDFromAuditToken;
  os_unfair_lock_unlock(v8 + 21);
  dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 152), &__block_literal_global_65);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 104);
  long long v10 = v2[1];
  long long v32 = *v2;
  long long v33 = v10;
  if (v9)
  {
    long long v11 = *v2;
    *(_OWORD *)(v9 + 24) = v2[1];
    *(_OWORD *)(v9 + _Block_object_dispose(&STACK[0x4E0], 8) = v11;
    long long v30 = v32;
    long long v31 = v33;
    *(_DWORD *)(v9 + 40) = FigCaptureGetPIDFromAuditToken(&v30);
    [(id)v9 _updateLoggingPrefix];
  }
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureSession_transitionToSessionLaunchPrewarmStatus(*(void *)(a1 + 40), 2);
  uint64_t v13 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v13 + 296))
  {

    uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"FigCaptureSession-%d", *(unsigned int *)(*(void *)(a1 + 32) + 16));
    uint64_t v15 = *(void *)(a1 + 32);
    long long v16 = *(_OWORD *)(v15 + 36);
    long long v32 = *(_OWORD *)(v15 + 20);
    long long v33 = v16;
    id v17 = objc_alloc(MEMORY[0x1E4F4E9F0]);
    long long v30 = v32;
    long long v31 = v33;
    uint64_t v18 = [v17 initSiblingSession:0xFFFFFFFFLL auditToken:&v30 clientIdentifier:v14 autoReconnect:0];
    uint64_t v19 = *(void *)(a1 + 32);
    *(void *)(v19 + 256) = v18;
    uint64_t v20 = [*(id *)(v19 + 664) micSourcePipeline];
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(v21 + 256);
    long long v23 = *(_OWORD *)(v21 + 36);
    long long v30 = *(_OWORD *)(v21 + 20);
    long long v31 = v23;
    -[FigCaptureMicSourcePipeline updateWithAudioSession:clientAuditToken:](v20, v22, &v30);
    *(unsigned char *)(*(void *)(a1 + 32) + 296) = 0;
    captureSession_startObservingAudioInterruptionNotification(*(void *)(a1 + 40));
    uint64_t v13 = *(void *)(a1 + 32);
  }
  long long v24 = *(void **)(v13 + 664);
  long long v25 = *(_OWORD *)(v13 + 36);
  long long v30 = *(_OWORD *)(v13 + 20);
  long long v31 = v25;
  objc_msgSend(v24, "updateClientAuditToken:", &v30, v28, v29);
  long long v26 = *(const void **)(a1 + 40);
  long long v27 = v2[1];
  long long v30 = *v2;
  long long v31 = v27;
  captureSession_createClientApplicationStateMonitor(v26, &v30);
  if (*v5 == 1) {
    kdebug_trace();
  }
}

uint64_t captureSession_transitionToSessionLaunchPrewarmStatus(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = result;
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v4 + 400) = a2;
  return result;
}

uint64_t captureSession_startObservingAudioInterruptionNotification(uint64_t a1)
{
  v16[16] = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (!FigCaptureAudiomxdSupportEnabled())
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue()) {
      FigDebugAssert3();
    }
    if (!DerivedStorage[33]) {
      return 4294954510;
    }
    if (!DerivedStorage[40])
    {
      id v8 = +[FigWeakReference weakReferenceToObject:a1];
      uint64_t v9 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
      uint64_t v10 = *MEMORY[0x1E4F75DB0];
      uint64_t v11 = DerivedStorage[33];
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __captureSession_startObservingCMSessionInterruptionNotification_block_invoke;
      v16[3] = &unk_1E5C247D8;
      v16[4] = v8;
      uint64_t v6 = (void *)[v9 addObserverForName:v10 object:v11 queue:0 usingBlock:v16];
      goto LABEL_15;
    }
LABEL_16:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (!DerivedStorage[32]) {
    return 4294954510;
  }
  if (DerivedStorage[40]) {
    goto LABEL_16;
  }
  id v3 = +[FigWeakReference weakReferenceToObject:a1];
  uint64_t v4 = (void *)DerivedStorage[32];
  uint64_t v5 = *MEMORY[0x1E4F4E830];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __captureSession_startObservingAVAudioSessionInterruptionNotification_block_invoke;
  v15[3] = &unk_1E5C247D8;
  v15[4] = v3;
  uint64_t v6 = (void *)[v4 addObserverForType:1 name:v5 block:v15];
  if (v6)
  {
LABEL_15:
    id v12 = v6;
    uint64_t result = 0;
    DerivedStorage[40] = v12;
    return result;
  }
  long long v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954510;
}

uint64_t captureSourceServer_handleProprietaryDefaultsDomainForAuditToken(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5 = (int)a1;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFDataRef theData = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  xpc_connection_get_pid(a1);
  memset(&buffer[1], 0, sizeof(audit_token_t));
  uint64_t v6 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if (v6)
  {
    uint64_t v21 = v6;
LABEL_49:
    FigDebugAssert3();
    goto LABEL_38;
  }
  uint64_t v7 = FigXPCMessageCopyCFData();
  if (v7)
  {
    uint64_t v21 = v7;
    goto LABEL_49;
  }
  memset(buffer, 0, 32);
  v31.locatiouint64_t n = 0;
  v31.length = 32;
  CFDataGetBytes(theData, v31, (UInt8 *)buffer);
  xpc_connection_get_audit_token();
  if (*(void *)buffer[0].val) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *(void *)&buffer[0].val[2] == 0;
  }
  if (v8 && *(void *)&buffer[0].val[4] == 0 && *(void *)&buffer[0].val[6] == 0)
  {
    buffer[0] = buffer[1];
  }
  else
  {
    tokeuint64_t n = buffer[1];
    uint64_t v11 = SecTaskCreateWithAuditToken((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &token);
    if (!v11) {
      goto LABEL_50;
    }
    id v12 = v11;
    *(void *)token.val = 0;
    CFTypeRef v13 = SecTaskCopyValueForEntitlement(v11, @"com.apple.private.tcc.manager.get-identity-for-credential", (CFErrorRef *)&token);
    BOOL v14 = 0;
    uint64_t v15 = *(const void **)token.val;
    if (!*(void *)token.val && v13)
    {
      CFTypeID v16 = CFGetTypeID(v13);
      BOOL v14 = v16 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v13) != 0;
      uint64_t v15 = *(const void **)token.val;
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v12);
    if (!v14)
    {
LABEL_50:
      FigDebugAssert3();
      goto LABEL_33;
    }
  }
  CFTypeRef v17 = cf;
  audit_token_t v29 = buffer[0];
  if (cf && (uint64_t v18 = *(void **)(CMBaseObjectGetVTable() + 16)) != 0) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*v19 < 5uLL || (uint64_t v20 = (uint64_t (*)(CFTypeRef, audit_token_t *, CFTypeRef *))v19[12]) == 0)
  {
    uint64_t v21 = 4294954514;
    goto LABEL_38;
  }
  tokeuint64_t n = v29;
  uint64_t v21 = v20(v17, &token, &v25);
  if (v21)
  {
LABEL_38:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v21);
    goto LABEL_39;
  }
LABEL_33:
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (v25) {
    FigXPCMessageSetCFString();
  }
  if (dword_1EB4C51D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v21 = 0;
LABEL_39:
  if (cf) {
    CFRelease(cf);
  }
  if (theData) {
    CFRelease(theData);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v21;
}

uint64_t captureSource_ProprietaryDefaultsDomainForAuditToken(uint64_t a1, _OWORD *a2, __CFString **a3)
{
  *a3 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 12)) {
    return 4294954511;
  }
  getCMIOExtensionProviderClass();
  if (objc_opt_respondsToSelector())
  {
    CMIOExtensionProviderClass = (void *)getCMIOExtensionProviderClass();
    long long v7 = a2[1];
    v9[0] = *a2;
    v9[1] = v7;
    BOOL v8 = (__CFString *)(id)[CMIOExtensionProviderClass proprietaryDefaultsDomainForAuditToken:v9];
  }
  else
  {
    BOOL v8 = @"unknown";
  }
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

uint64_t getCMIOExtensionProviderClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__40;
  long long v7 = __Block_byref_object_dispose__40;
  uint64_t v0 = getCMIOExtensionProviderClass_softClass;
  uint64_t v8 = getCMIOExtensionProviderClass_softClass;
  if (!getCMIOExtensionProviderClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getCMIOExtensionProviderClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getCMIOExtensionProviderClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A1D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 160) = 1;
  return result;
}

uint64_t captureDeferredPhotoProcessorServer_handleReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t fcsc_deserializeDataUsingNSSecureCoding(uint64_t a1, uint64_t a2)
{
  id v8 = 0;
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:a1 error:&v8];
  if (v8)
  {
    fig_log_get_emitter();
    LODWORD(v7) = 0;
    FigDebugAssert3();
    objc_msgSend(v8, "code", v7, v2);
    FigSignalErrorAt();
    uint64_t v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "setDelegate:", +[FigCaptureCIFilterUnarchiverDelegate sharedInstance](FigCaptureCIFilterUnarchiverDelegate, "sharedInstance"));
    uint64_t v5 = [v4 decodeObjectOfClasses:a2 forKey:*MEMORY[0x1E4F284E8]];
    [v4 finishDecoding];
  }

  return v5;
}

uint64_t captureDeferredPhotoProcessor_Prewarm(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  kdebug_trace();
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4F10)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EB4C4F10)
    {
      int v13 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (!*DerivedStorage) {
    return FigSignalErrorAt();
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _OWORD v11[2] = __captureDeferredPhotoProcessor_Prewarm_block_invoke;
  v11[3] = &unk_1E5C27F38;
  v11[6] = DerivedStorage;
  v11[7] = a1;
  v11[4] = a2;
  _OWORD v11[5] = a3;
  captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v11);
  if (*v6 == 1) {
    kdebug_trace();
  }
  kdebug_trace();
  return 0;
}

void captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync_block_invoke;
    block[3] = &unk_1E5C28920;
    void block[4] = a2;
    void block[5] = a1;
    dispatch_sync(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t captureDeferredPhotoProcessorServer_getAndRetainProcessorObjectFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t FigCaptureDeferredPhotoProcessorSetXPCConnection(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    xpc_retain(a2);
    *((void *)v6 + 10) = a2;
    *((void *)v6 + 11) = a3;
  }
  return 0;
}

uint64_t FigCaptureDeferredPhotoProcessorGetTypeID()
{
  if (FigCaptureDeferredPhotoProcessorGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureDeferredPhotoProcessorGetClassID_onceToken, &__block_literal_global_26);
  }
  uint64_t v0 = FigCaptureDeferredPhotoProcessorGetClassID_sFigCaptureDeferredPhotoProcessorClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

void captureSession_updateSessionStateWithApplicationAndLayoutState(const void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float v30 = 0.0;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v11 = DerivedStorage;
    id v12 = (os_unfair_lock_s *)(DerivedStorage + 360);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    if (*(unsigned char *)(v11 + 376)) {
      int v13 = 0;
    }
    else {
      int v13 = a2;
    }
    if (*(unsigned char *)(v11 + 376)) {
      int v14 = a2 ^ 1;
    }
    else {
      int v14 = 0;
    }
    *(unsigned char *)(v11 + 376) = a2;
    *(unsigned char *)(v11 + 377) = a3;
    *(unsigned char *)(v11 + 37_Block_object_dispose(&STACK[0x4E0], 8) = a4;
    *(unsigned char *)(v11 + 379) = a5;
    if (*(_DWORD *)(v11 + 408) == 2)
    {
      objc_msgSend(*(id *)(v11 + 432), "setWindowed:", objc_msgSend(*(id *)(v11 + 432), "windowed") | a4);
      objc_msgSend(*(id *)(v11 + 432), "setPipEnabled:", objc_msgSend(*(id *)(v11 + 432), "pipEnabled") | a5);
    }
    if (*(unsigned char *)(v11 + 375)) {
      BOOL v15 = a3 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      void v29[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke;
      v29[3] = &__block_descriptor_40_e5_v8__0l;
      v29[4] = v11;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v29);
      if (*(void *)(v11 + 592) == 1) {
        *(unsigned char *)(v11 + 600) = 1;
      }
    }
    if (((*(unsigned char *)(v11 + 376) == 0) & ~v14) == 0)
    {
      *(unsigned char *)(v11 + 380) = 0;
      *(unsigned char *)(v11 + 382) = 0;
      if (*(unsigned char *)(v11 + 374)) {
        *(unsigned char *)(v11 + 384) = 0;
      }
    }
    if (v14)
    {
      if (*(unsigned char *)(v11 + 373))
      {
        *(unsigned char *)(v11 + 373) = 0;
        captureSession_cancelPrewarmingTimeoutTimer();
        *(void *)(v11 + 544) = mach_absolute_time();
        BOOL shouldStartDeferredGraphSetup = captureSession_shouldStartDeferredGraphSetup(v11, &v30);
      }
      else
      {
        BOOL shouldStartDeferredGraphSetup = 0;
      }
      if (*(double *)(v11 + 552) > 0.0)
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        if (v17 > *(double *)(v11 + 552))
        {
          if (dword_1EB4C5110)
          {
            int v28 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(unsigned char *)(v11 + 372) = 0;
        }
        *(void *)(v11 + 552) = 0;
      }
    }
    else
    {
      BOOL shouldStartDeferredGraphSetup = 0;
    }
    if (v13) {
      *(void *)(v11 + 544) = 0;
    }
    captureSession_updateRunningCondition(a1, 0, 0);
    os_unfair_lock_unlock(v12);
    if (shouldStartDeferredGraphSetup)
    {
      if (dword_1EB4C5110)
      {
        int v28 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      captureSession_startDeferredGraphSetupOnWorkerQueueAfter(a1, v30);
    }
    if (v13)
    {
      if (cs_clientWantsAudioResumptionOnBackground(*(void **)(v11 + 88)))
      {
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        _OWORD v26[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_936;
        v26[3] = &__block_descriptor_40_e5_v8__0l;
        v26[4] = v11;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v26);
      }
      +[BWAutoFocusPositionSensorMonitor clientHasBeenBackgrounded];
      uint64_t v20 = (os_unfair_lock_s *)(v11 + 772);
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 772));
      int v21 = *(_DWORD *)(v11 + 768);
      os_unfair_lock_unlock(v20);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_2;
      v24[3] = &__block_descriptor_36_e5_v8__0l;
      int v25 = v21;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v24);
    }
  }
}

uint64_t captureSessionServer_handleCommonNoArgumentMessage(int a1, void *a2, void (*a3)(const void *))
{
  uint64_t v7 = 0;
  uint64_t v4 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v7, 0, 0);
  uint64_t v5 = v7;
  if (v7)
  {
    a3(v7);
    CFRelease(v5);
  }
  return v4;
}

void captureSession_StartRunning(const void *a1)
{
  v4[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    if (*(double *)(DerivedStorage + 416) == 0.0) {
      *(CFAbsoluteTime *)(DerivedStorage + 416) = CFAbsoluteTimeGetCurrent();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke;
    void v4[3] = &__block_descriptor_40_e5_v8__0l;
    void v4[4] = a1;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v4);
    captureSession_updateSessionStateWithNewInputCondition(a1, (unsigned char *)(DerivedStorage + 372), 1, 0, 1);
  }
}

void captureSession_updateSessionStateWithNewInputCondition(const void *a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v11 = DerivedStorage;
    id v12 = (os_unfair_lock_s *)(DerivedStorage + 360);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    int v13 = (unsigned char *)(v11 + 372);
    if (a3 && v13 == a2)
    {
      *(unsigned char *)(v11 + 384) = 0;
      *(unsigned char *)(v11 + 380) = 0;
      *(unsigned char *)(v11 + 382) = 0;
    }
    if ((a3 & 1) == 0 && ((int v14 = (unsigned char *)(v11 + 382), (unsigned char *)(v11 + 380) == a2) || v14 == a2))
    {
      *(unsigned char *)(v11 + 380) = 0;
      unsigned char *v14 = 0;
    }
    else if ((*(unsigned char *)(v11 + 380) || *(unsigned char *)(v11 + 384) || *(unsigned char *)(v11 + 382)) {
           && a4 == -16406
    }
           && v13 == a2
           && (a3 & 1) == 0)
    {
      *(unsigned char *)(v11 + 384) = 0;
      *(unsigned char *)(v11 + 380) = 0;
      *(unsigned char *)(v11 + 382) = 0;
      if (!*(unsigned char *)(v11 + 364))
      {
        uint64_t v19 = @"ErrorStatus";
        v20[0] = [NSNumber numberWithInt:4294950890];
        captureSession_postNotificationWithPayload(a1, @"DidStopRunning", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1]);
      }
      *a2 = a3;
      a4 = 4294950890;
    }
    else
    {
      int v15 = *(_DWORD *)(v11 + 408);
      if (a4 == -16406 && v15 == 3 && v13 == a2 && (a3 & 1) == 0
        || a4 == -12689 && (unsigned char *)(v11 + 380) == a2 && v15 == 3 && a3)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a4 = 0;
      }
      else
      {
        *a2 = a3;
      }
    }
    int v17 = *(unsigned __int8 *)(v11 + 373);
    if (*(unsigned char *)(v11 + 376))
    {
      if (!*(unsigned char *)(v11 + 373))
      {
        *(unsigned char *)(v11 + 380) = 0;
        *(unsigned char *)(v11 + 382) = 0;
        if (*(unsigned char *)(v11 + 374)) {
          *(unsigned char *)(v11 + 384) = 0;
        }
        goto LABEL_40;
      }
      int v17 = 1;
    }
    if (v17 && a3 && ((unsigned char *)(v11 + 380) == a2 || (unsigned char *)(v11 + 382) == a2))
    {
      if (dword_1EB4C5110)
      {
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
LABEL_40:
    captureSession_updateRunningCondition(a1, a4, a5);
    os_unfair_lock_unlock(v12);
  }
}

void captureSession_updateRunningCondition(const void *a1, int a2, int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v7 = *(unsigned __int8 *)(DerivedStorage + 364);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(DerivedStorage + 360));
  if (!*(unsigned char *)(DerivedStorage + 372))
  {
    if (!v7)
    {
      int v8 = 0;
      int v17 = 0;
      int v9 = 0;
      a2 = -16409;
      goto LABEL_53;
    }
    goto LABEL_7;
  }
  if (!v7)
  {
    if (*(unsigned char *)(DerivedStorage + 374))
    {
      if (*(unsigned char *)(DerivedStorage + 376) && !*(unsigned char *)(DerivedStorage + 373)) {
        goto LABEL_23;
      }
      if ((!*(unsigned char *)(DerivedStorage + 377) || *(unsigned char *)(DerivedStorage + 375))
        && !*(unsigned char *)(DerivedStorage + 380)
        && !*(unsigned char *)(DerivedStorage + 382)
        && (!*(unsigned char *)(DerivedStorage + 384) || !*(unsigned char *)(DerivedStorage + 383)))
      {
        goto LABEL_46;
      }
      if (*(unsigned char *)(DerivedStorage + 376))
      {
LABEL_23:
        int v8 = -16403;
      }
      else
      {
        if (*(unsigned char *)(DerivedStorage + 380)) {
          int v8 = -16407;
        }
        else {
          int v8 = -16408;
        }
        if (!(*(unsigned __int8 *)(DerivedStorage + 380) | *(unsigned __int8 *)(DerivedStorage + 377)))
        {
          if (*(unsigned char *)(DerivedStorage + 382))
          {
            int v8 = -16952;
          }
          else if (*(unsigned char *)(DerivedStorage + 384))
          {
            if (*(unsigned char *)(DerivedStorage + 383)) {
              int v8 = -16404;
            }
            else {
              int v8 = 0;
            }
          }
          else
          {
            int v8 = 0;
          }
        }
      }
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 384) || !*(unsigned char *)(DerivedStorage + 383))
      {
LABEL_46:
        int v8 = 0;
        a2 = 0;
        int v17 = 0;
        int v9 = 1;
        *(unsigned char *)(DerivedStorage + 364) = 1;
        *(_DWORD *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x4E0], 8) = 0;
        goto LABEL_53;
      }
      int v8 = -16404;
    }
    a2 = 0;
    int v17 = 0;
    int v9 = 0;
    *(void *)(DerivedStorage + 416) = 0;
    goto LABEL_53;
  }
  if (!*(unsigned char *)(DerivedStorage + 384) || !*(unsigned char *)(DerivedStorage + 383))
  {
    if (*(unsigned char *)(DerivedStorage + 374))
    {
      if (*(unsigned char *)(DerivedStorage + 376) && !*(unsigned char *)(DerivedStorage + 373))
      {
        a2 = -16403;
        goto LABEL_7;
      }
      if (*(unsigned char *)(DerivedStorage + 380))
      {
        if (!*(unsigned char *)(DerivedStorage + 381))
        {
          *(unsigned char *)(DerivedStorage + 381) = 1;
          FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
          a2 = -16407;
          goto LABEL_7;
        }
        FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
      }
      else if (*(unsigned char *)(DerivedStorage + 377))
      {
        if (!*(unsigned char *)(DerivedStorage + 375))
        {
          a2 = -16408;
          goto LABEL_7;
        }
      }
      else if (*(unsigned char *)(DerivedStorage + 382))
      {
        a2 = -16952;
        goto LABEL_7;
      }
    }
    int v8 = 0;
    a2 = 0;
    int v17 = 0;
    int v9 = 0;
    goto LABEL_53;
  }
  a2 = -16404;
LABEL_7:
  *(unsigned char *)(DerivedStorage + 364) = 0;
  int v8 = 0;
  int v9 = 0;
  if (cs_errorIsFatal(a2)) {
    *(_DWORD *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  else {
    *(_DWORD *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x4E0], 8) = a2;
  }
  int v17 = 1;
LABEL_53:
  if (dword_1EB4C5110)
  {
    unsigned int v27 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v9)
  {
    if (dword_1EB4C5110)
    {
      unsigned int v27 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __captureSession_updateRunningCondition_block_invoke;
    v24[3] = &__block_descriptor_41_e5_v8__0l;
    void v24[4] = a1;
    char v25 = a3;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v24);
  }
  if (v17)
  {
    if (dword_1EB4C5110)
    {
      unsigned int v27 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      id v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v13 = v27;
      if (os_log_type_enabled(v12, type)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = *(void *)(DerivedStorage + 104);
        int v28 = 136315650;
        audit_token_t v29 = "captureSession_updateRunningCondition";
        __int16 v30 = 2114;
        uint64_t v31 = v15;
        __int16 v32 = 1024;
        int v33 = a2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __captureSession_updateRunningCondition_block_invoke_592;
    v22[3] = &__block_descriptor_44_e5_v8__0l;
    v22[4] = a1;
    int v23 = a2;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v22);
  }
  if (!v8) {
    goto LABEL_73;
  }
  if (cs_errorIsFatal(v8))
  {
    FigDebugAssert3();
    if ((a3 & 1) == 0)
    {
LABEL_71:
      if (v8 == *(_DWORD *)(DerivedStorage + 368)) {
        return;
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_71;
  }
  *(_DWORD *)(DerivedStorage + 36_Block_object_dispose(&STACK[0x4E0], 8) = v8;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __captureSession_updateRunningCondition_block_invoke_2;
  v20[3] = &__block_descriptor_44_e5_v8__0l;
  v20[4] = a1;
  int v21 = v8;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v20);
LABEL_73:
  int v16 = a3 ^ 1;
  if (!a2) {
    int v16 = 1;
  }
  if (((v17 | v16) & 1) == 0)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    id v18[2] = __captureSession_updateRunningCondition_block_invoke_3;
    v18[3] = &__block_descriptor_44_e5_v8__0l;
    v18[4] = a1;
    int v19 = a2;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v18);
  }
}

uint64_t FigCaptureSessionStartRunning(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 32);
  if (v4)
  {
    return v4(a1);
  }
  else
  {
    uint64_t v6 = @"ErrorStatus";
    v7[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

void captureSession_cancelPrewarmingTimeoutTimer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 560);
  if (v1)
  {
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v1 = *(NSObject **)(DerivedStorage + 560);
    }
    dispatch_source_cancel(v1);

    *(void *)(DerivedStorage + 560) = 0;
  }
}

void __FigCaptureGetTCCServer_block_invoke()
{
  uint64_t v0 = dispatch_queue_create("com.apple.coremedia.capture.tccserver", 0);
  FigCaptureGetTCCServer_sFigCaptureTCCServer = tcc_server_create();
  if (!FigCaptureGetTCCServer_sFigCaptureTCCServer)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dispatch_release(v0);
}

void captureDeferredContainerManager_servedObjectRefconDestructor(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(CFTypeRef))(v4 + 24);
      if (v5) {
        v5(v2);
      }
      CFRelease(*a1);
    }
    free(a1);
  }
}

unsigned char *captureDeferredContainerManager_Finalize()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result) {
    unsigned char *result = 1;
  }
  return result;
}

uint64_t captureDeferredContainerManager_Invalidate()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage) {
    *uint64_t DerivedStorage = 1;
  }
  return 0;
}

uint64_t figremotequeue_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x4E0], 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 18453) >= 0xFFFFFFFD
    && (uint64_t v5 = (void (*)(void))FigRemoteQueueIOSurfaceReceiver_figremotequeue_subsystem[5 * (v4 - 18450) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t _XShareIOSurface(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    int v3 = -304;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_7;
  }
  uint64_t result = FigRemoteQueueIOSurfaceReceiver_ShareIOSurface(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28));
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ShareIOSurface(unsigned int a1, mach_port_t port)
{
  if (port)
  {
    IOSurfaceRef v3 = IOSurfaceLookupFromMachPort(port);
    if (v3)
    {
      IOSurfaceRef v4 = v3;
      unint64_t v5 = a1;
      CFDictionaryRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)rqSharedSurfaces, (const void *)a1);
      if (!Value)
      {
        CFDictionaryRef Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        CFDictionaryAddValue((CFMutableDictionaryRef)rqSharedSurfaces, (const void *)v5, Value);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, v4);
      CFRelease(v4);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigMachPortReleaseSendRight_();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

uint64_t captureSessionServer_handleReplyMessage()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t captureSession_SetSectionProperty(const void *a1, const void *a2, const void *a3, void *a4)
{
  uint64_t v28 = 0;
  audit_token_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  int v31 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2 && a3 && a4)
    {
      if (CFEqual(a3, @"PreviewFilters")
        || CFEqual(a3, @"SimulatedAperture")
        || CFEqual(a3, @"PortraitLightingEffectStrength")
        || CFEqual(a3, @"SemanticStyles")
        || CFEqual(a3, @"PrimaryCaptureRectAspectRatio"))
      {
        uint64_t v10 = (os_unfair_lock_s *)(DerivedStorage + 360);
        os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
        int v11 = *(unsigned __int8 *)(DerivedStorage + 536);
        if (CFEqual(a3, @"PrimaryCaptureRectAspectRatio"))
        {
          id v12 = (id)[*(id *)(DerivedStorage + 520) objectForKeyedSubscript:a2];
          os_unfair_lock_unlock(v10);
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
          if (!v11)
          {
            if (CFEqual(a3, @"PrimaryCaptureRectAspectRatio") || CFEqual(a3, @"SemanticStyles"))
            {
              long long v24 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:a4];
              [v24 setObject:0 forKeyedSubscript:@"CAContextFencePortSendRight"];
              a4 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:v24];
            }
            id v12 = 0;
            int v13 = 0;
            goto LABEL_16;
          }
          id v12 = 0;
        }
        int v13 = 1;
LABEL_16:
        CFRetain(a2);
        CFRetain(a3);
        if (a4) {
          CFRetain(a4);
        }
        if (v13)
        {
          if (v12)
          {
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"AspectRatio"), "doubleValue");
            double v15 = v14;
            uint64_t v16 = [a4 objectForKeyedSubscript:@"CAContextFencePortSendRight"];
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterX"), "doubleValue");
            double v18 = v17;
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterY"), "doubleValue");
            double v20 = v19;
            uint64_t v21 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"UniqueID"), "longLongValue");
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"TrueVideoTransitionPercentComplete"), "doubleValue");
            objc_msgSend(v12, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", v16, v21, v15, v18, v20, v22);
            CFRelease(a2);
            CFRelease(a3);
            if (a4) {
              CFRelease(a4);
            }
          }
          else
          {
            v27[0] = MEMORY[0x1E4F143A8];
            v27[1] = 3221225472;
            void v27[2] = __captureSession_SetSectionProperty_block_invoke;
            v27[3] = &__block_descriptor_64_e5_v8__0l;
            v27[4] = a1;
            v27[5] = a2;
            v27[6] = a3;
            v27[7] = a4;
            captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v27);
          }
        }
        else
        {
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 3221225472;
          _OWORD v26[2] = __captureSession_SetSectionProperty_block_invoke_2;
          v26[3] = &__block_descriptor_64_e5_v8__0l;
          v26[4] = a1;
          void v26[5] = a2;
          v26[6] = a3;
          v26[7] = a4;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v26);
        }

        goto LABEL_25;
      }
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      void v25[2] = __captureSession_SetSectionProperty_block_invoke_3;
      v25[3] = &unk_1E5C28B50;
      void v25[6] = a2;
      v25[7] = a3;
      v25[8] = a4;
      v25[9] = a1;
      v25[4] = &v28;
      v25[5] = DerivedStorage;
      captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v25);
    }
    else
    {
      FigDebugAssert3();
      *((_DWORD *)v29 + 6) = FigSignalErrorAt();
    }
LABEL_25:
    uint64_t v9 = *((unsigned int *)v29 + 6);
    goto LABEL_26;
  }
  uint64_t v9 = FigSignalErrorAt();
LABEL_26:
  _Block_object_dispose(&v28, 8);
  return v9;
}

void sub_1A5A247E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void captureSession_performBlockOnWorkerQueueSynchronously(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    IOSurfaceRef v4 = *(NSObject **)(DerivedStorage + 136);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockOnWorkerQueueSynchronously_block_invoke;
    block[3] = &unk_1E5C249F0;
    void block[4] = a2;
    dispatch_sync(v4, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void FigCaptureSessionAttachToClient(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionAttachToClient_block_invoke;
    void v6[3] = &__block_descriptor_80_e5_v8__0l;
    long long v5 = a2[1];
    long long v7 = *a2;
    long long v8 = v5;
    void v6[4] = DerivedStorage;
    v6[5] = a1;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v6);
  }
}

uint64_t FigCaptureSessionRemotePrewarmWithOptions(CFTypeRef cf, const __CFDictionary *a2)
{
  if (sCaptureSessionRemoteClient)
  {
    captureSessionRemote_prewarm((uint64_t)cf, a2);
  }
  else
  {
    if (cf) {
      CFRetain(cf);
    }
    if (a2) {
      CFRetain(a2);
    }
    global_queue = dispatch_get_global_queue(2, 0);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionRemotePrewarmWithOptions_block_invoke;
    void v6[3] = &__block_descriptor_48_e5_v8__0l;
    void v6[4] = cf;
    v6[5] = a2;
    dispatch_async(global_queue, v6);
  }
  return 0;
}

uint64_t captureSessionRemote_prewarm(uint64_t a1, const __CFDictionary *a2)
{
  if (csr_ensureClientEstablished() || FigXPCCreateBasicMessage()) {
    goto LABEL_16;
  }
  FigCFDictionaryGetInt64IfPresent();
  xpc_dictionary_set_int64(0, (const char *)*MEMORY[0x1E4F20290], 0);
  if (FigCFDictionaryGetInt64IfPresent()) {
    xpc_dictionary_set_int64(0, (const char *)*MEMORY[0x1E4F202B8], 0);
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a2, @"PrewarmKey_Reason");
  if (Value)
  {
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID()) {
      FigXPCMessageSetCFString();
    }
  }
  if (a1 && FigXPCMessageSetCFString() || FigXPCRemoteClientSendAsyncMessage())
  {
LABEL_16:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
    id v6 = (id)sPrewarmedBundleIdentifiers;
    if (!sPrewarmedBundleIdentifiers)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      sPrewarmedBundleIdentifiers = (uint64_t)v6;
    }
    [v6 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:a1];
    os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  }
  return FigXPCRelease();
}

void mscsn_handleStreamDroppedSampleNotification(int a1, uint64_t a2, __CFString *cf, uint64_t a4, void *a5)
{
  if (@"Discontinuity" == cf)
  {
    uint64_t v9 = (void *)[a5 objectForKeyedSubscript:*MEMORY[0x1E4F543F0]];
    if ([v9 isEqualToString:*MEMORY[0x1E4F55580]])
    {
      uint64_t v10 = BWDroppedSampleReasonVideoDeviceDiscontinuity;
    }
    else if ([v9 isEqualToString:*MEMORY[0x1E4F55578]])
    {
      uint64_t v10 = BWDroppedSampleReasonHighFrameRateAutoFocusDiscontinuity;
    }
    else
    {
      [v9 isEqualToString:*MEMORY[0x1E4F55588]];
      uint64_t v10 = BWDroppedSampleReasonVideoDeviceDiscontinuity;
    }
    long long v8 = *v10;
  }
  else
  {
    long long v8 = 0;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3052000000;
  double v18 = __Block_byref_object_copy__31;
  double v19 = __Block_byref_object_dispose__31;
  uint64_t v20 = a2;
  CFRetain(cf);
  uint64_t v11 = 0;
  id v12 = (unsigned char *)(v16[5] + 388);
  while (!v12[5] || (*v12 & 4) == 0)
  {
    ++v11;
    v12 += 512;
    if (v11 == 20)
    {
      uint64_t v11 = 0;
      break;
    }
  }
  int v13 = *(NSObject **)(v16[5] + 384 + (v11 << 9) + 32);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __mscsn_handleStreamDroppedSampleNotification_block_invoke;
  v14[3] = &unk_1E5C26FE8;
  void v14[6] = &v15;
  v14[7] = cf;
  v14[4] = a5;
  v14[5] = v8;
  dispatch_async(v13, v14);
  _Block_object_dispose(&v15, 8);
}

void sub_1A5A24FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void cdpr_deadConnectionCallback(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 12));
  *(unsigned char *)(DerivedStorage + 9) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 12));
}

uint64_t FigMotionGetBravoDataFromDictionary(const __CFDictionary *a1, uint64_t a2)
{
  if (a1
    && a2
    && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52DD8])) != 0
    && (CFDictionaryRef v5 = Value,
        CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52DF0]),
        CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52DE8]),
        (unint64_t)v6 | (unint64_t)v7))
  {
    CFDictionaryRef v8 = v7;
    memset_pattern16((void *)(a2 + 28), &unk_1A5F0C830, 0xCuLL);
    memset_pattern16((void *)(a2 + 40), &unk_1A5F0C830, 0xCuLL);
    memset_pattern16((void *)(a2 + 64), &unk_1A5F0C5E0, 0xCuLL);
    uint64_t v9 = a2 + 104;
    uint64_t v10 = 76;
    do
    {
      *(_DWORD *)(a2 + v10) = 1065353216;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_DWORD *)uint64_t v9 = 1065353216;
      v10 += 4;
      *(_DWORD *)(v9 + 20) = 1065353216;
      *(_DWORD *)(v9 + 40) = 1065353216;
      v9 += 48;
    }
    while (v10 != 104);
    if (v6 && (uint64_t CameraInfo = FigMotionExtractCameraInfo(v6, a2, 1u, 2), CameraInfo)
      || v8 && (uint64_t CameraInfo = FigMotionExtractCameraInfo(v8, a2, 2u, 4), CameraInfo)
      || (uint64_t CameraInfo = FigMotionExtractCameraInfo(v5, a2, 0, 6), CameraInfo))
    {
      uint64_t v15 = CameraInfo;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v13 = 0;
        uint64_t v14 = dword_1A5F0C824[i];
        do
        {
          *(float *)(a2 + 76 + 4 * BravoCurrentToReferenceMapping[3 * v14 + dword_1A5F0C824[v13]]) = *(float *)(a2 + 28 + 4 * dword_1A5F0C824[v13]) / *(float *)(a2 + 28 + 4 * v14);
          ++v13;
        }
        while (v13 != 3);
      }
      return 0;
    }
    return v15;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionExtractCameraInfo(const __CFDictionary *a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a1 && (LODWORD(point.x) = 0, FigCFDictionaryGetFloatIfPresent()))
  {
    float v8 = *(float *)&point.x;
    if (*(float *)&point.x <= 1.0e-10) {
      float v8 = 1.0;
    }
    *(float *)(a2 + 4 * a3 + 2_Block_object_dispose(&STACK[0x4E0], 8) = v8;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v14 = FigSignalErrorAt();
    if (v14)
    {
      fig_log_get_emitter();
      goto LABEL_26;
    }
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52CA8]);
  if (!Value || (CFDataRef v10 = Value, CFDataGetLength(Value) != 48))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v22 = FigSignalErrorAt();
    if (!v22) {
      goto LABEL_9;
    }
    uint64_t v14 = v22;
    fig_log_get_emitter();
LABEL_26:
    FigDebugAssert3();
    return v14;
  }
  v24.locatiouint64_t n = 0;
  v24.length = 48;
  CFDataGetBytes(v10, v24, (UInt8 *)(a2 + 48 * a4 + 104));
LABEL_9:
  uint64_t v11 = a3;
  uint64_t v12 = a2 + 4 * a3;
  uint64_t v13 = (int *)(v12 + 64);
  if (a1 && (LODWORD(point.x) = 0, FigCFDictionaryGetFloatIfPresent()))
  {
    uint64_t v14 = 0;
    *(_DWORD *)(v12 + 52) = LODWORD(point.x);
    *uint64_t v13 = 1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v14 = FigSignalErrorAt();
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F52D20];
  if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F52D20]))
  {
    CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(a1, v15);
    if (v16)
    {
      uint64_t v17 = a2 + 8 * v11;
      CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
      CGPointMakeWithDictionaryRepresentation(v16, &point);
      CGPoint v18 = point;
      goto LABEL_17;
    }
LABEL_24:
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
    if (!v14) {
      return v14;
    }
    goto LABEL_25;
  }
  int v19 = *v13;
  CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F52D18]);
  if (!v20) {
    goto LABEL_24;
  }
  uint64_t v17 = a2 + 8 * v11;
  CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
  CGPointMakeWithDictionaryRepresentation(v20, &point);
  CGPoint v18 = (CGPoint)vmulq_n_f64((float64x2_t)point, (double)v19);
LABEL_17:
  *(float32x2_t *)(v17 + 4) = vcvt_f32_f64((float64x2_t)v18);
  if (v14)
  {
LABEL_25:
    fig_log_get_emitter();
    goto LABEL_26;
  }
  return v14;
}

uint64_t captureSourceServer_handleUpdateCameraHistoryMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5 = (int)a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  CFNumberRef number = 0;
  CFTypeRef v19 = 0;
  unsigned int valuePtr = 0;
  CFTypeRef v16 = 0;
  uint64_t pid = xpc_connection_get_pid(a1);
  uint64_t v7 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if (v7)
  {
    uint64_t updated = v7;
LABEL_31:
    FigDebugAssert3();
LABEL_10:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)updated);
    goto LABEL_16;
  }
  uint64_t v8 = FigXPCMessageCopyCFString();
  if (v8)
  {
    uint64_t updated = v8;
    goto LABEL_31;
  }
  uint64_t v9 = FigXPCMessageCopyCFDictionary();
  if (v9)
  {
    uint64_t updated = v9;
    goto LABEL_31;
  }
  uint64_t v10 = FigXPCMessageCopyCFNumber();
  if (v10)
  {
    uint64_t updated = v10;
    goto LABEL_31;
  }
  CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
  if (v20)
  {
    if (css_cameraInfoIsValid((void *)v19))
    {
      if (valuePtr)
      {
        if (valuePtr <= 0x13)
        {
          BOOL v11 = xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_UpdateCameraHistoryDownplayOverrideList);
          BOOL v12 = xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_CameraCanBeInOverrideList);
          uint64_t updated = FigCaptureSourceUpdateCameraHistory((uint64_t)cf, pid, (uint64_t)v20, (uint64_t)v19, valuePtr, v11, v12, (uint64_t)&v16);
          if (updated) {
            goto LABEL_10;
          }
        }
      }
    }
  }
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (v16) {
    FigXPCMessageSetCFArray();
  }
  if (dword_1EB4C51D0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t updated = 0;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (number) {
    CFRelease(number);
  }
  if (v16) {
    CFRelease(v16);
  }
  return updated;
}

uint64_t css_cameraInfoIsValid(void *a1)
{
  if ([a1 count] != 3) {
    return 0;
  }
  uint64_t result = [a1 objectForKeyedSubscript:@"CreatorID"];
  if (result)
  {
    uint64_t result = [a1 objectForKeyedSubscript:@"DeviceUID"];
    if (result) {
      return [a1 objectForKeyedSubscript:@"OverrideRanking"] != 0;
    }
  }
  return result;
}

uint64_t captureSource_UpdateCameraHistory(uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned int a5, int a6, int a7, void *a8)
{
  *a8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 12)) {
    return 4294954511;
  }
  uint64_t v16 = DerivedStorage;
  unsigned int v36 = a5;
  uint64_t v17 = (void *)[*(id *)(DerivedStorage + 232) objectForKey:a3];
  if (dword_1EB4C4FD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6)
  {
    cs_updateCameraHistoryDownplayOverrideListForPreferenceKey((uint64_t)a3);
    CFTypeRef v19 = (void *)[a3 componentsSeparatedByString:@"/"];
    CFTypeRef v20 = v17;
    if ([v19 count] == 3)
    {
      int v35 = a6;
      uint64_t v21 = NSString;
      uint64_t v22 = [v19 firstObject];
      uint64_t v34 = [v19 lastObject];
      int v23 = v21;
      a6 = v35;
      uint64_t v24 = [v23 stringWithFormat:@"%@/override/%@", v22, v34];
      CFTypeRef v20 = v17;
      if (v24)
      {
        char v25 = (void *)[(id)sCameraHistoriesUpdatedWithOverridingCamera objectForKeyedSubscript:a3];
        CFTypeRef v20 = v17;
        if ((cs_cameraInfosAreEqualExcludingRank(v25, a4) & 1) == 0)
        {
          long long v26 = a4;
          if (!a7)
          {
            CFTypeRef v20 = v17;
            if (!v25) {
              goto LABEL_15;
            }
            long long v26 = 0;
          }
          [(id)sCameraHistoriesUpdatedWithOverridingCamera setObject:v26 forKeyedSubscript:a3];
          if (dword_1EB4C4FD0)
          {
            unsigned int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
          [(id)sTemporaryCameraHistoryItems setObject:sCameraHistoriesUpdatedWithOverridingCamera forKeyedSubscript:@"camera-histories-updated-with-overriding-camera"];
          [(id)sServerUserDefaults setObject:sTemporaryCameraHistoryItems forKey:@"tmp"];
          pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
          CFTypeRef v20 = v17;
          a6 = v35;
        }
      }
    }
  }
  else
  {
    CFTypeRef v20 = 0;
  }
LABEL_15:
  if (!objc_msgSend(v17, "count", v32, v33))
  {
LABEL_19:
    LODWORD(v2_Block_object_dispose(&STACK[0x4E0], 8) = -1;
LABEL_21:
    if (v17)
    {
      audit_token_t v29 = (void *)[MEMORY[0x1E4F1CA48] arrayWithArray:v17];
      CFTypeRef v20 = v29;
      if ((int)v28 >= 1) {
        [v29 removeObjectAtIndex:v28];
      }
    }
    else
    {
      CFTypeRef v20 = (void *)[MEMORY[0x1E4F1CA48] array];
    }
    while ([v20 count] >= (unint64_t)v36)
      [v20 removeLastObject];
    [v20 insertObject:a4 atIndex:0];
    [*(id *)(v16 + 232) setObject:v20 forKey:a3];
    goto LABEL_28;
  }
  uint64_t v28 = 0;
  while ((cs_cameraInfosAreEqualExcludingRank(a4, (void *)[v17 objectAtIndexedSubscript:v28]) & 1) == 0)
  {
    if ([v17 count] <= (unint64_t)++v28) {
      goto LABEL_19;
    }
  }
  if (v28) {
    goto LABEL_21;
  }
  if (dword_1EB4C4FD0)
  {
    int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!a6) {
      return 0;
    }
  }
  else if (!a6)
  {
    return 0;
  }
LABEL_28:
  if (v20) {
    CFTypeRef v30 = CFRetain(v20);
  }
  else {
    CFTypeRef v30 = 0;
  }
  uint64_t result = 0;
  *a8 = v30;
  return result;
}

uint64_t cs_cameraInfosAreEqualExcludingRank(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"CreatorID"), "isEqualToString:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CreatorID"));
      if (result)
      {
        int v5 = (void *)[a1 objectForKeyedSubscript:@"DeviceUID"];
        uint64_t v6 = [a2 objectForKeyedSubscript:@"DeviceUID"];
        return [v5 isEqualToString:v6];
      }
    }
  }
  return result;
}

uint64_t FigCaptureSourceUpdateCameraHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && (uint64_t v16 = *(void **)(CMBaseObjectGetVTable() + 16)) != 0) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*v17 < 3uLL) {
    return 4294954514;
  }
  CGPoint v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v17[8];
  if (!v18) {
    return 4294954514;
  }
  return v18(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t __captureSourceRemote_copyClock_block_invoke(uint64_t a1, int64_t a2, uint64_t a3, _DWORD *a4, int64_t *a5, int64_t *a6)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = captureSourceRemote_createBasicMessage(*(void *)(a1 + 40), 1667460203, &xdict);
  if (v11
    || (xpc_dictionary_set_mach_send(),
        xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteCopyClockMessagePayload_ClientClockToken, a2), uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v11))
  {
    uint64_t v15 = v11;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    int64_t int64 = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockObjectToken);
    int64_t v13 = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockTimeoutToken);
    int v14 = xpc_dictionary_copy_mach_send();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockType);
    if (int64) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = 1315914603;
    }
    *a4 = v14;
    *a5 = int64;
    *a6 = v13;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

void captureDeferredPhotoProcessorRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureDeferredPhotoProcessorRemote_Invalidate();
  if (sCaptureDeferredPhotoProcessorRemoteClient) {
    FigXPCRemoteClientDisassociateObject();
  }
  if (!*(unsigned char *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

uint64_t captureDeferredPhotoProcessorRemote_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = 1;
    if (!*(unsigned char *)(DerivedStorage + 9))
    {
      uint64_t v3 = FigXPCCreateBasicMessage();
      if (v3)
      {
        uint64_t v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
        if (!v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

float AEMatrix_FindQualityFromSums(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3 = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v14[0] = 0;
  uint64_t v4 = 4294967294;
  do
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      if (((v4 + v6) & 0xFFFFFFF0) == 0)
      {
        int v8 = *(_DWORD *)(a1 + 4 * (v4 + v6)) - *(_DWORD *)(a2 + 4 * v6);
        if (v8 < 0) {
          int v8 = *(_DWORD *)(a2 + 4 * v6) - *(_DWORD *)(a1 + 4 * (v4 + v6));
        }
        v5 += v8;
        v14[v3] = v5;
        ++v7;
      }
      ++v6;
    }
    while (v6 != 16);
    if (v7 <= 1) {
      unsigned int v7 = 1;
    }
    v14[v3++] = v5 / (int)v7;
    ++v4;
  }
  while (v3 != 5);
  uint64_t v9 = 0;
  int v10 = 0;
  int v11 = 0;
  do
  {
    int v12 = v14[v9];
    if (v12 < v14[v11]) {
      int v11 = v9;
    }
    if (v12 > v14[v10]) {
      int v10 = v9;
    }
    ++v9;
  }
  while (v9 != 5);
  float result = 1.0 - (float)((float)(int)v14[v11] / (float)(int)v14[v10]);
  *a3 = result;
  return result;
}

uint64_t FigCaptureDeferredPhotoProcessorServerStart()
{
  v3[0] = 1;
  v3[1] = captureDeferredPhotoProcessorServer_handleReplyMessage;
  long long v4 = 0u;
  long long v5 = 0u;
  if (captureDeferredPhotoProcessorServer_initializeStatics_onceToken != -1) {
    dispatch_once(&captureDeferredPhotoProcessorServer_initializeStatics_onceToken, &__block_literal_global_73);
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t v1 = FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.deferredmedia.photoprocessor", (uint64_t)v3, Mutable);
  if (v1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable) {
      return v1;
    }
    goto LABEL_5;
  }
  if (Mutable) {
LABEL_5:
  }
    CFRelease(Mutable);
  return v1;
}

uint64_t FigCaptureXPCServerStart(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_304);
  }
  if (FigCaptureIsDebuggerOrSlowAllocationPathEnabled())
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a3)
    {
      CFIndex Count = CFDictionaryGetCount(a3);
      MutableCopdouble y = CFDictionaryCreateMutableCopy(v4, Count, a3);
    }
    else
    {
      MutableCopdouble y = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFMutableDictionaryRef v8 = MutableCopy;
    FigCFDictionarySetInt32();
    uint64_t v9 = FigXPCServerStart();
    if (v8) {
      CFRelease(v8);
    }
    return v9;
  }
  else
  {
    return FigXPCServerStart();
  }
}

uint64_t FigCaptureDeferredPhotoProcessorRemoteCopyPhotoProcessor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 4294954516;
    goto LABEL_19;
  }
  CFAllocatorRef v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a1;
  if (!sCaptureDeferredPhotoProcessorRemoteClient)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22088], (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v8 = FigXPCRemoteClientCreate();
    if (!sCaptureDeferredPhotoProcessorRemoteClient)
    {
      unsigned int v9 = 1;
      int v10 = 250;
      useconds_t v11 = 250000;
      do
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        usleep(v11);
        uint64_t v8 = FigXPCRemoteClientCreate();
        if (sCaptureDeferredPhotoProcessorRemoteClient) {
          break;
        }
        v10 += 250;
        v11 += 250000;
      }
      while (v9++ < 3);
    }
    CFAllocatorRef v4 = a4;
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v5 = a3;
    uint64_t v6 = a1;
    if (v8)
    {
      fig_log_get_emitter();
LABEL_28:
      FigDebugAssert3();
      goto LABEL_19;
    }
  }
  uint64_t v14 = FigXPCCreateBasicMessage();
  if (v14
    || v5 && (uint64_t v14 = FigXPCMessageSetCFString(), v14)
    || (uint64_t v14 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v14))
  {
    uint64_t v8 = v14;
    fig_log_get_emitter();
    goto LABEL_28;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  uint64_t v16 = uint64;
  FigCaptureDeferredPhotoProcessorGetClassID();
  uint64_t v17 = CMDerivedObjectCreate();
  if (v17)
  {
    uint64_t v8 = v17;
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_28;
  }
  *(void *) CMBaseObjectGetDerivedStorage() = v16;
  FigXPCRemoteClientAssociateObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 12) = 0;
  *(void *)(DerivedStorage + 16) = v6;
  uint64_t v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 24) = v19;
  if (v19)
  {
    uint64_t v8 = 0;
    void *v4 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 4294954510;
  }
LABEL_19:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

CFTypeRef FigCaptureDeferredPhotoProcessorCopyProcessorForPID(int a1, _OWORD *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (FigCaptureDeferredPhotoProcessorCopyProcessorForPID_onceToken != -1) {
    dispatch_once(&FigCaptureDeferredPhotoProcessorCopyProcessorForPID_onceToken, &__block_literal_global_97);
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v6 = a2[1];
  *(_OWORD *)token.val = *a2;
  *(_OWORD *)&token.val[4] = v6;
  unsigned int v7 = SecTaskCreateWithAuditToken(v5, &token);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  unsigned int v9 = (__CFString *)SecTaskCopySigningIdentifier(v7, 0);
  if (FigCaptureClientHasEntitlementWithSecTask(v8, @"com.apple.private.avfoundation.capture.deferred-photo-processor.allow"))
  {
    CFTypeRef cf = 0;
    if (!a1)
    {
      uint64_t v19 = v2;
      LODWORD(v1_Block_object_dispose(&STACK[0x4E0], 8) = 0;
      FigDebugAssert3();
      CFTypeRef v14 = 0;
LABEL_12:
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v16 = *(__CFString **)(DerivedStorage + 24);
      if (!v16)
      {
        uint64_t v16 = v9;
        *(void *)(DerivedStorage + 24) = v16;
      }
      if (-[__CFString isEqualToString:](v16, "isEqualToString:", 0x1EFA557E0, v18, v19))
      {

        *(void *)(DerivedStorage + 24) = @"com.apple.camera";
      }
      goto LABEL_16;
    }
    if (cdpp_initializeStatics_onceToken != -1) {
      dispatch_once(&cdpp_initializeStatics_onceToken, &__block_literal_global_105);
    }
    FigCaptureDeferredPhotoProcessorGetClassID();
    if (!CMDerivedObjectCreate())
    {
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      *(void *)(v10 + _Block_object_dispose(&STACK[0x4E0], 8) = FigDispatchQueueCreateWithPriority();
      *(void *)(v10 + 16) = FigDispatchQueueCreateWithPriority();
      *(_DWORD *)(v10 + 32) = a1;
      *(unsigned char *)(v10 + 1) = MGGetBoolAnswer();
      if (dword_1EB4C4F10)
      {
        int v23 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(void *)(v10 + 40) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      *(void *)(v10 + 96) = [[BWCaptureDeferredPhotoProcessor alloc] initWithFigCaptureDeferredPhotoProcessor:cf];
      *(unsigned char *)uint64_t v10 = 1;
      out_tokeuint64_t n = 0;
      id v12 = +[FigWeakReference weakReferenceToObject:cf];
      int64_t v13 = *(NSObject **)(v10 + 16);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = __FigCaptureDeferredPhotoProcessorCreate_block_invoke;
      handler[3] = &unk_1E5C25910;
      handler[4] = v12;
      notify_register_dispatch(kFigCaptureDeferredNotification_deferredmediadImmediateTermination, &out_token, v13, handler);
      CFTypeRef v14 = cf;
      goto LABEL_12;
    }
    FigDebugAssert3();
  }
  CFTypeRef v14 = 0;
LABEL_16:

  CFRelease(v8);
  return v14;
}

uint64_t FigCaptureDeferredPhotoProcessorGetClassID()
{
  if (FigCaptureDeferredPhotoProcessorGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureDeferredPhotoProcessorGetClassID_onceToken, &__block_literal_global_26);
  }
  return FigCaptureDeferredPhotoProcessorGetClassID_sFigCaptureDeferredPhotoProcessorClassID;
}

void *FigCaptureGetCaptureDeviceCreateFunction()
{
  if (fcc_probeCameraDriverService_onceToken != -1) {
    dispatch_once(&fcc_probeCameraDriverService_onceToken, &__block_literal_global_93);
  }
  if (!fcc_probeCameraDriverService_cameraDriverInfo) {
    goto LABEL_7;
  }
  uint64_t v0 = *(const char **)(fcc_probeCameraDriverService_cameraDriverInfo + 16);
  uint64_t v1 = dlopen(*(const char **)(fcc_probeCameraDriverService_cameraDriverInfo + 8), 4);
  if (!v1 || (float result = dlsym(v1, v0)) == 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_7:
    CFAllocatorRef v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return result;
}

opaqueCMSimpleQueue *TimestampedAudioBufferListQueueTransfer(opaqueCMSimpleQueue *result, opaqueCMSimpleQueue *a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      float result = (opaqueCMSimpleQueue *)CMSimpleQueueDequeue(result);
      if (result)
      {
        CFAllocatorRef v4 = result;
        do
        {
          CFAllocatorRef v5 = (unsigned int *)*((void *)v4 + 6);
          if (v5)
          {
            uint64_t v6 = *v5;
            if (v6)
            {
              int v7 = *((_DWORD *)v4 + 4);
              uint64_t v8 = v5 + 3;
              do
              {
                *uint64_t v8 = v7;
                v8 += 4;
                --v6;
              }
              while (v6);
            }
          }
          *((_DWORD *)v4 + 5) = 0;
          *((_DWORD *)v4 + 14) = 0;
          *((void *)v4 + 1) = 0;
          CMSimpleQueueEnqueue(a2, v4);
          float result = (opaqueCMSimpleQueue *)CMSimpleQueueDequeue(v3);
          CFAllocatorRef v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t captureSession_SetProperty(const void *a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"CaptureSession_SmartStyle")) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = CFEqual(a2, @"CaptureSession_SystemStyleOverride") != 0;
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2)
    {
      if (a3) {
        BOOL v7 = 1;
      }
      if (v7)
      {
        if (CFEqual(a2, @"CaptureSession_RemoteVideoPreviewEnabled"))
        {
          int Value = CFBooleanGetValue(a3);
          uint64_t result = 0;
          *(unsigned char *)(DerivedStorage + 20_Block_object_dispose(&STACK[0x4E0], 8) = Value != 0;
          return result;
        }
        if (!CFEqual(a2, @"CaptureSession_ForegroundAutoResumeStopTime"))
        {
          if (CFEqual(a2, @"CaptureSession_SmartStyle"))
          {
            v12[0] = MEMORY[0x1E4F143A8];
            v12[1] = 3221225472;
            void v12[2] = __captureSession_SetProperty_block_invoke;
            v12[3] = &unk_1E5C264A0;
            double v12[4] = a3;
            void v12[5] = a1;
            void v12[6] = DerivedStorage;
            captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v12);
          }
          else
          {
            if (!CFEqual(a2, @"CaptureSession_SystemStyleOverride")) {
              return 4294954512;
            }
            FigCaptureSmartStyleSettingsSetSystemStyle((uint64_t)a3, *(void *)(DerivedStorage + 88));
          }
          return 0;
        }
        CFTypeID v10 = CFGetTypeID(a3);
        if (v10 == CFNumberGetTypeID())
        {
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
          [(__CFBoolean *)a3 doubleValue];
          *(void *)(DerivedStorage + 552) = v11;
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
          return 0;
        }
      }
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureSourceRemote_ProprietaryDefaultsDomainForAuditToken(uint64_t a1, const UInt8 *a2)
{
  uint64_t v10 = 0;
  uint64_t v4 = csr_ensureClientEstablished_0();
  if (v4)
  {
    uint64_t v8 = v4;
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_11:
    FigXPCRelease();
    goto LABEL_8;
  }
  uint64_t v5 = captureSourceRemote_createBasicMessage(a1, 1885626740, &v10);
  if (v5)
  {
    uint64_t v8 = v5;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_11;
  }
  CFDataRef v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 32, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  uint64_t v7 = FigXPCMessageSetCFData();
  if (v7 || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
  {
    uint64_t v8 = v7;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  FigXPCRelease();
  if (v6) {
    CFRelease(v6);
  }
LABEL_8:
  FigXPCRelease();
  return v8;
}

void multiStreamCameraSourceNode_pointCloudServiceQueueCallback(uint64_t a1)
{
}

uint64_t getPTDisparityPostProcessingClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  CFDataRef v6 = __Block_byref_object_copy__29;
  uint64_t v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTDisparityPostProcessingClass_softClass;
  uint64_t v8 = getPTDisparityPostProcessingClass_softClass;
  if (!getPTDisparityPostProcessingClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPTDisparityPostProcessingClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPTDisparityPostProcessingClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A33E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *csu_dependentUserDefaultsDictionary()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v1 = [MEMORY[0x1E4F1CBF0] countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v11;
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v11 != v3) {
          objc_enumerationMutation(v4);
        }
        CFStringRef v6 = *(const __CFString **)(*((void *)&v10 + 1) + 8 * i);
        CFPropertyListRef v7 = CFPreferencesCopyAppValue(v6, @"com.apple.coremedia");
        if (v7)
        {
          uint64_t v8 = v7;
          [v0 setObject:v7 forKeyedSubscript:v6];
          CFRelease(v8);
        }
      }
      uint64_t v2 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v2);
  }
  if (objc_msgSend((id)objc_msgSend(v0, "allKeys"), "count")) {
    return v0;
  }
  else {
    return 0;
  }
}

uint64_t csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v44 = 0;
  id v36 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v34 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v43 = 0;
  long long v42 = 0uLL;
  FigSimpleMutexCheckIsLockedOnThisThread();
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v6 = [a1 countByEnumeratingWithState:&v38 objects:v51 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v39;
    do
    {
      uint64_t v9 = 0;
      uint64_t v35 = v7;
      do
      {
        if (*(void *)v39 != v8) {
          objc_enumerationMutation(a1);
        }
        long long v10 = *(void **)(*((void *)&v38 + 1) + 8 * v9);
        uint64_t v11 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor", v28, v29), "copyDeviceForPublishingWithID:error:", v10, &v44);
        if (v11)
        {
          long long v12 = (void *)v11;
          id v37 = 0;
          if ([v10 isEqualToString:0x1EFA45440]
            && (long long v13 = FigCaptureCFCreatePropertyList(@"AVCaptureSession.plist")) != 0)
          {
            CFTypeRef v14 = v13;

            FigCaptureCreateSourceInfoArrayFromDeviceAndModelSpecificPlist(v12, v14, 1, &v37, &v43, &v42, (void *)&v42 + 1);
            [v34 addObjectsFromArray:v37];
          }
          else
          {
            if (v42 == 0)
            {
              uint64_t v15 = &v42;
              uint64_t v16 = (void *)&v42 + 1;
              uint64_t v17 = v12;
            }
            else
            {
              uint64_t v17 = v12;
              uint64_t v15 = 0;
              uint64_t v16 = 0;
            }
            FigCaptureCreateSourceInfoArrayFromDeviceAndGenericPlist(v17, &v37, v15, v16);
            CFTypeRef v14 = 0;
          }
          if (dword_1EB4C5710)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v7 = v35;
          }

          [v36 addObjectsFromArray:v37];
          objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", v12, 0, 0, 0);
        }
        else
        {
          LODWORD(v37) = 0;
          uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v19 = v37;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            int v45 = 136315650;
            uint64_t v46 = "csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs";
            __int16 v47 = 2112;
            uint64_t v48 = v10;
            __int16 v49 = 1024;
            unsigned int v50 = v44;
            LODWORD(v29) = 28;
            uint64_t v28 = &v45;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [a1 countByEnumeratingWithState:&v38 objects:v51 count:16];
    }
    while (v7);
  }
  if (a2) {
    *a2 = v36;
  }
  if (a3) {
    *a3 = v43;
  }
  if (a4) {
    *a4 = (id)v42;
  }
  if (a5) {
    *a5 = *((id *)&v42 + 1);
  }

  if (!v44) {
    return 0;
  }
  LODWORD(v37) = 0;
  uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v23 = v37;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = v23 & 0xFFFFFFFE;
  }
  if (v24)
  {
    int v45 = 136315394;
    uint64_t v46 = "csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs";
    __int16 v47 = 1024;
    LODWORD(v4_Block_object_dispose(&STACK[0x4E0], 8) = v44;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFStringRef v26 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v27 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(@"CaptureSourceInfo", 0, @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFPreferencesSynchronize(@"com.apple.cameracapture.volatile", v26, v27);
  return v44;
}

FigCaptureSourceBackings *csu_createBackingsFromCaptureSourceInfoDict(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v8 = v1;
    LODWORD(v7) = 0;
    FigDebugAssert3();
  }
  objc_msgSend(a1, "objectForKeyedSubscript:", @"DependentUserDefaults", v7, v8);
  csu_dependentUserDefaultsDictionary();
  if (!FigCFEqual()) {
    return 0;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"Version"), "intValue") != 204)
  {
    if (!dword_1EB4C5710) {
      return 0;
    }
LABEL_16:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if ((objc_msgSend((id)MGCopyAnswer(), "isEqualToString:", objc_msgSend(a1, "objectForKeyedSubscript:", @"BuildVersion")) & 1) == 0)
  {
    if (!dword_1EB4C5710) {
      return 0;
    }
    goto LABEL_16;
  }
  if ((objc_msgSend((id)FigCaptureGetModelSpecificName(), "isEqualToString:", objc_msgSend(a1, "objectForKeyedSubscript:", @"DeviceModel")) & 1) == 0)
  {
    if (!dword_1EB4C5710) {
      return 0;
    }
    goto LABEL_16;
  }
  if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"ExperimentsEnabled"), "BOOLValue"))
  {
    id v3 = csu_createInMemorySourcesArrayFromOnDiskSourcesArray((void *)[a1 objectForKeyedSubscript:@"Sources"]);
    uint64_t v4 = -[FigCaptureSourceBackings initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:]([FigCaptureSourceBackings alloc], "initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:", v3, [a1 objectForKeyedSubscript:@"CommonSettings"], objc_msgSend(a1, "objectForKeyedSubscript:", @"HEVCSettings"), objc_msgSend(a1, "objectForKeyedSubscript:", @"H264Settings"));

    return v4;
  }
  if (dword_1EB4C5710) {
    goto LABEL_16;
  }
  return 0;
}

uint64_t captureSession_startDeferredGraphSetupWork(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = _FigIsCurrentDispatchQueue();
  if (!result)
  {
    uint64_t v34 = v1;
    LODWORD(v33) = 0;
    uint64_t result = FigDebugAssert3();
  }
  if (dword_1EB4C5110)
  {
    int v50 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 650))
  {
    *(unsigned char *)(DerivedStorage + 650) = 1;
    if (([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100] & 1) != 0
      || [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
    {
      os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
      if (byte_1E96B767C)
      {
        os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
        uint64_t v6 = word_1E96B7688;
        uint64_t v7 = dword_1E96B768C;
        uint64_t v8 = HIBYTE(word_1E96B7688);
        [+[BWAggdDataReporter sharedInstance] reportLockScreenCameraLaunchCompletedWithPrewarming:word_1E96B7688 restartedSessionDueToError:dword_1E96B768C];
        uint64_t v9 = objc_alloc_init(BWCameraLockScreenLaunchAnalyticsPayload);
        [(BWCameraLockScreenLaunchAnalyticsPayload *)v9 setCompleted:1];
        [(BWCameraLockScreenLaunchAnalyticsPayload *)v9 setPrewarmed:v6];
        [(BWCameraLockScreenLaunchAnalyticsPayload *)v9 setIspStreamingStarted:v8];
        [(BWCameraLockScreenLaunchAnalyticsPayload *)v9 setLaunchError:v7];
        [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v9];

        os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
        byte_1E96B767C = 0;
        word_1E96B7688 = 0;
        dword_1E96B768C = 0;
      }
      os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
    }
    if (objc_msgSend(*(id *)(DerivedStorage + 632), "deferredNodePrepareEnabled", v33, v34)) {
      [*(id *)(DerivedStorage + 632) startDeferredSourceNodesIfNeeded];
    }
    if (*(unsigned char *)(DerivedStorage + 112))
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v10 = *(void **)(DerivedStorage + 656);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v46;
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v46 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = (void *)[*(id *)(DerivedStorage + 656) objectForKeyedSubscript:*(void *)(*((void *)&v45 + 1) + 8 * v14)];
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v15 = (void *)v15[1];
              uint64_t v17 = v16[2];
            }
            else
            {
              uint64_t v17 = 0;
            }
            FigVideoCaptureSourceSetSessionProperty(v15, v17, @"ResumeAdjustingFocusNotifications_FigCaptureSessionOnly", 0);
            ++v14;
          }
          while (v12 != v14);
          uint64_t v18 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
          uint64_t v12 = v18;
        }
        while (v18);
      }
    }
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    unsigned int v19 = (void *)[*(id *)(DerivedStorage + 664) cameraSourcePipelines];
    uint64_t v20 = [v19 countByEnumeratingWithState:&v41 objects:v52 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v42;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v42 != v22) {
            objc_enumerationMutation(v19);
          }
          [(id)-[FigCaptureCameraSourcePipeline captureDevice](*(void *)(*((void *)&v41 + 1) + 8 * i)) startupFaceDetectionIfNeeded];
        }
        uint64_t v21 = [v19 countByEnumeratingWithState:&v41 objects:v52 count:16];
      }
      while (v21);
    }
    if (FigVideoCaptureSourcesNeedDeferredTimeOfFlightAFEnablement())
    {
      unsigned int v24 = FigDispatchQueueCreateWithPriority();
      uint64_t v25 = *(void *)(DerivedStorage + 640);
      CFStringRef v26 = *(NSObject **)(DerivedStorage + 168);
      if (!v26)
      {
        CFStringRef v26 = dispatch_group_create();
        *(void *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x4E0], 8) = v26;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __captureSession_startDeferredGraphSetupWork_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      void block[4] = DerivedStorage;
      void block[5] = v25;
      dispatch_group_async(v26, v24, block);
      if (v24) {
        CFRelease(v24);
      }
    }
    if ([*(id *)(DerivedStorage + 632) deferredNodePrepareEnabled])
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      CFStringRef v27 = (void *)[*(id *)(DerivedStorage + 664) stillImageSinkPipelineSessionStorages];
      uint64_t v28 = [v27 countByEnumeratingWithState:&v36 objects:v51 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v37;
        do
        {
          for (uint64_t j = 0; j != v29; ++j)
          {
            if (*(void *)v37 != v30) {
              objc_enumerationMutation(v27);
            }
            objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v36 + 1) + 8 * j), "stillImageSinkPipeline"), "enablePrepareTimeAllocationsForDeferredPrepare");
          }
          uint64_t v29 = [v27 countByEnumeratingWithState:&v36 objects:v51 count:16];
        }
        while (v29);
      }
      uint64_t v32 = *(void **)(DerivedStorage + 632);
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 3221225472;
      v35[2] = __captureSession_startDeferredGraphSetupWork_block_invoke_2;
      v35[3] = &__block_descriptor_48_e5_v8__0l;
      v35[4] = a1;
      v35[5] = DerivedStorage;
      return [v32 startDeferredNodePrepareIfNeededWithCompletionHandler:v35];
    }
    else
    {
      return [*(id *)(DerivedStorage + 632) startDeferredSourceNodesIfNeeded];
    }
  }
  return result;
}

void captureSession_setPreviewSinkProperty(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v44 = v4;
    LODWORD(v42) = 0;
    FigDebugAssert3();
  }
  uint64_t v9 = objc_msgSend(*(id *)(DerivedStorage + 664), "previewSinkPipelineWithSinkID:", a2, v42, v44);
  uint64_t v10 = objc_msgSend(*(id *)(DerivedStorage + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(v9, "sourceID"));
  if (v9)
  {
    uint64_t v11 = v10;
    if (CFEqual(a3, @"PreviewFilters"))
    {
      [v9 setFilters:a4];
    }
    else if (CFEqual(a3, @"SimulatedAperture"))
    {
      [a4 floatValue];
      if (v11)
      {
        -[FigCaptureCinematographyPipeline setSimulatedAperture:](v11);
      }
      else
      {
        objc_msgSend(v9, "setSimulatedAperture:");
      }
    }
    else if (CFEqual(a3, @"PortraitLightingEffectStrength"))
    {
      [a4 floatValue];
      objc_msgSend(v9, "setPortraitLightingEffectStrength:");
    }
    else if (CFEqual(a3, @"SemanticStyles"))
    {
      uint64_t v28 = [a4 objectForKeyedSubscript:@"SemanticStyleSet"];
      uint64_t v29 = [a4 objectForKeyedSubscript:@"SemanticStyle"];
      uint64_t v30 = [a4 objectForKeyedSubscript:@"CAContextFencePortSendRight"];
      uint64_t v31 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"Animated"), "BOOLValue");
      if (v28)
      {
        [v9 setSemanticStyleSet:v28 fencePortSendRight:v30];
      }
      else
      {
        [v9 setSemanticStyle:v29 animated:v31];
      }
    }
    else if (CFEqual(a3, @"PrimaryCaptureRectAspectRatio"))
    {
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"AspectRatio"), "doubleValue");
      double v33 = v32;
      uint64_t v34 = [a4 objectForKeyedSubscript:@"CAContextFencePortSendRight"];
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterX"), "doubleValue");
      double v36 = v35;
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterY"), "doubleValue");
      double v38 = v37;
      uint64_t v39 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"UniqueID"), "longLongValue");
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"TrueVideoTransitionPercentComplete"), "doubleValue");
      objc_msgSend(v9, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", v34, v39, v33, v36, v38, v40);
    }
    else if (CFEqual(a3, @"PrimaryAndOverCaptureCompositingEnabled"))
    {
      uint64_t v41 = [a4 BOOLValue] ^ 1;
      [v9 setDisplaysWidestCameraOnly:v41];
    }
  }
  else
  {
    if (cs_shouldCachePreviewSinkSessionPropertyWithKey_onceToken != -1) {
      dispatch_once(&cs_shouldCachePreviewSinkSessionPropertyWithKey_onceToken, &__block_literal_global_987);
    }
    if ([(id)cs_shouldCachePreviewSinkSessionPropertyWithKey_cachedPreviewSinkPropertyKeys containsObject:a3])
    {
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      if (!_FigIsCurrentDispatchQueue())
      {
        uint64_t v45 = v4;
        LODWORD(v43) = 0;
        FigDebugAssert3();
      }
      uint64_t v13 = (os_unfair_lock_s *)(v12 + 360);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 360));
      id v14 = *(id *)(v12 + 448);
      os_unfair_lock_unlock(v13);
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = v14;
      uint64_t v15 = (void *)[v14 connectionConfigurations];
      uint64_t v16 = [v15 countByEnumeratingWithState:&v48 objects:v52 count:16];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)v49;
        do
        {
          uint64_t v19 = 0;
          do
          {
            if (*(void *)v49 != v18) {
              objc_enumerationMutation(v15);
            }
            uint64_t v20 = objc_msgSend(*(id *)(*((void *)&v48 + 1) + 8 * v19), "videoPreviewSinkConfiguration", v43, v45);
            if (objc_msgSend((id)objc_msgSend(v20, "sinkID"), "isEqual:", a2))
            {
              if (CFEqual(a3, @"PreviewFilters"))
              {
                [v20 setFilters:a4];
              }
              else if (CFEqual(a3, @"SimulatedAperture"))
              {
                [a4 floatValue];
                objc_msgSend(v20, "setSimulatedAperture:");
              }
              else if (CFEqual(a3, @"PortraitLightingEffectStrength"))
              {
                [a4 floatValue];
                objc_msgSend(v20, "setPortraitLightingEffectStrength:");
              }
              else if (CFEqual(a3, @"SemanticStyles"))
              {
                objc_msgSend(v20, "setSemanticStyle:", objc_msgSend(a4, "objectForKeyedSubscript:", @"SemanticStyle"));
              }
              else if (CFEqual(a3, @"PrimaryCaptureRectAspectRatio"))
              {
                if ([v20 primaryCaptureRectModificationEnabled])
                {
                  uint64_t v47 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"UniqueID"), "longLongValue");
                  if (v47 >= [v20 primaryCaptureRectUniqueID])
                  {
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"AspectRatio"), "doubleValue");
                    double v22 = v21;
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterX"), "doubleValue");
                    double v24 = v23;
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"CenterY"), "doubleValue");
                    double v26 = v25;
                    [v20 setPrimaryCaptureRectAspectRatio:v22];
                    objc_msgSend(v20, "setPrimaryCaptureRectCenter:", v24, v26);
                    [v20 setPrimaryCaptureRectUniqueID:v47];
                  }
                }
              }
            }
            ++v19;
          }
          while (v17 != v19);
          uint64_t v27 = [v15 countByEnumeratingWithState:&v48 objects:v52 count:16];
          uint64_t v17 = v27;
        }
        while (v27);
      }
    }
  }
}

uint64_t captureDeferredContainerManager_handleReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294951138;
  }
  return v1;
}

uint64_t bwisr_getRequestedRotationDegrees(void *a1, void *a2)
{
  int v3 = [a2 rotationDegrees];
  return ((int)(v3 - [a1 rotationDegrees] + 360) % 360);
}

void __ubn_dispatch_sync_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __ubn_dispatch_sync_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class __getVNRecognizeFoodAndDrinkRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNRecognizeFoodAndDrinkRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNRecognizeFoodAndDrinkRequestClass_block_invoke_cold_1();
  }
  getVNRecognizeFoodAndDrinkRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNProcessingDeviceClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNProcessingDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNProcessingDeviceClass_block_invoke_cold_1();
  }
  getVNProcessingDeviceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNDetectFaceRectanglesRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNDetectFaceRectanglesRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNDetectFaceRectanglesRequestClass_block_invoke_cold_1();
  }
  getVNDetectFaceRectanglesRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNDetectFaceLandmarksRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNDetectFaceLandmarksRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNDetectFaceLandmarksRequestClass_block_invoke_cold_1();
  }
  getVNDetectFaceLandmarksRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNClassifyFaceAttributesRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNClassifyFaceAttributesRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNClassifyFaceAttributesRequestClass_block_invoke_cold_1();
  }
  getVNClassifyFaceAttributesRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_3(uint64_t a1, void *a2)
{
  int v3 = (void *)[a2 uniqueID];
  uint64_t v4 = *(void *)(a1 + 32);
  return [v3 isEqualToString:v4];
}

void __containerManager_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"ServerConnectionDied");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22088], (const void *)*MEMORY[0x1E4F1CFD0]);
  sDeadServerNotificationQueue_0 = (uint64_t)dispatch_queue_create("com.apple.coremedia.capturedeferredcontainermanager.deadserver-notifications", 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t __captureDeferredPhotoProcessor_terminateImmediatelyDueToError_block_invoke()
{
  objc_msgSend(+[FigCaptureDeferredProcessingEngine sharedProcessingEngine](FigCaptureDeferredProcessingEngine, "sharedProcessingEngine"), "immediateTermination");
  uint64_t v0 = +[BWDeferredTransactionBroker sharedInstance];
  return [(BWDeferredTransactionBroker *)v0 exitImmediately];
}

uint64_t __FigCaptureIsRunningInVirtualization_block_invoke()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!result) {
    FigCaptureIsRunningInVirtualization_sAnswer = v2 != 0;
  }
  return result;
}

uint64_t __FigCaptureDeferredContainerManagerGetClassID_block_invoke()
{
  ClassIOSurfaceID ID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureDeferredContainerManagerClassDesc, ClassID, 1, &FigCaptureDeferredContainerManagerGetClassID_sFigCaptureDeferredContainerManagerClassID);
}

uint64_t __BWDeviceIsiPhone_block_invoke()
{
  uint64_t result = [(id)MGCopyAnswer() intValue];
  BWDeviceIsiPhone_isiPhone = result == 1;
  return result;
}

uint64_t FigCaptureReleaseCameraDriverService(uint64_t object)
{
  if (object) {
    return IOObjectRelease(object);
  }
  return object;
}

uint64_t FigCapturePlatformIdentifierString()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformIDString;
}

uint64_t FigCapturePlatformGetVariant()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformVariant;
}

uint64_t FigCaptureIsRunningInVirtualization()
{
  if (FigCaptureIsRunningInVirtualization_sOnceToken != -1) {
    dispatch_once(&FigCaptureIsRunningInVirtualization_sOnceToken, &__block_literal_global_99);
  }
  return FigCaptureIsRunningInVirtualization_sAnswer;
}

uint64_t FigCaptureGetCameraDriverService()
{
  if (fcc_probeCameraDriverService_onceToken != -1) {
    dispatch_once(&fcc_probeCameraDriverService_onceToken, &__block_literal_global_93);
  }
  if (!fcc_probeCameraDriverService_cameraDriverInfo) {
    return 0;
  }
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching(*(const char **)fcc_probeCameraDriverService_cameraDriverInfo);
  return IOServiceGetMatchingService(v0, v1);
}

uint64_t FigCaptureDeferredContainerManagerRemoteCopyContainerManager()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __containerManager_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E5C24978;
  void block[4] = &v6;
  if (containerManager_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&containerManager_ensureClientEstablished_onceToken, block);
  }
  int v0 = *((_DWORD *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  if (v0
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || (uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280])) == 0)
  {
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    uint64_t v3 = 0;
    goto LABEL_9;
  }
  uint64_t v2 = uint64;
  block[0] = 0;
  FigCaptureDeferredContainerManagerGetClassID();
  if (CMDerivedObjectCreate())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_12;
  }
  *(void *) CMBaseObjectGetDerivedStorage() = v2;
  FigXPCRemoteClientAssociateObject();
  uint64_t v3 = block[0];
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t FigCaptureDeferredContainerManagerGetClassID()
{
  if (FigCaptureDeferredContainerManagerGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureDeferredContainerManagerGetClassID_onceToken, &__block_literal_global_24);
  }
  return FigCaptureDeferredContainerManagerGetClassID_sFigCaptureDeferredContainerManagerClassID;
}

uint64_t FigCaptureDeferredContainerManagerCopyContainerManagerForPID(int a1)
{
  if (a1)
  {
    if (containerManager_initializeStatics_onceToken != -1) {
      dispatch_once(&containerManager_initializeStatics_onceToken, &__block_literal_global_116);
    }
    FigCaptureDeferredContainerManagerGetClassID();
    if (CMDerivedObjectCreate())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
}

uint64_t BWStringFromDimensions(unint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%dx%d", a1, HIDWORD(a1));
}

unint64_t BWCommonDimensionsForQSubResolutionFlavor(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)v13;
LABEL_3:
    uint64_t v8 = 0;
    uint64_t v9 = v6;
    while (1)
    {
      if (*(void *)v13 != v7) {
        objc_enumerationMutation(a1);
      }
      uint64_t v10 = (void *)[a1 objectForKeyedSubscript:*(void *)(*((void *)&v12 + 1) + 8 * v8)];
      unint64_t v6 = FigCaptureDimensionsFromDictionaryRepresentation(objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2)));
      if (FigCaptureVideoDimensionsAreValid(v9) && !FigCaptureVideoDimensionsAreEqual(v9, v6)) {
        break;
      }
      ++v8;
      uint64_t v9 = v6;
      if (v5 == v8)
      {
        uint64_t v5 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          goto LABEL_3;
        }
        return v6;
      }
    }
  }
  return 0;
}

void *BWAllStillImageQSubResolutionFlavors()
{
  return &unk_1EFB03BF0;
}

void sub_1A5A3AFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWStillImageProcessorTypeToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%llu", a1);
}

void __sipc_createStateMachine_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  [a2 reset];
}

uint64_t __sipc_createStateMachine_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  [a2 reset];
  [a2 _completeCurrentRequestAndInitiateNextRequest];
  return [a2 _updateStateIfNeeded];
}

uint64_t __sipc_createStateMachine_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  [a2 _prepare];
  return [a2 _updateStateIfNeeded];
}

uint64_t __sipc_createStateMachine_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  [a2 _process];
  return [a2 _updateStateIfNeeded];
}

void sub_1A5A49404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5A49D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5A4B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void cfr_bbufUtilXPCObjectReleaser(xpc_object_t object)
{
  if (object) {
    xpc_release(object);
  }
}

void sub_1A5A4C3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t cfss_atExitHandler()
{
  if (sRunningInsideCameracaptured)
  {
    uint64_t result = +[CMCaptureFrameSenderEndpointsServerSideSingleton removeAllEndpointsWithPID:getpid()];
    if (result)
    {
      CFDictionaryRef v1 = (void *)[MEMORY[0x1E4F28C40] defaultCenter];
      return [v1 postNotificationName:@"FrameServerEndpointsChanged" object:0];
    }
  }
  else
  {
    return FigCaptureSourceRemoteSuppressFrameSenderServerEndpoint(@"all-endpoint-uids");
  }
  return result;
}

CMCaptureFrameSenderEndpoints *__cfs_serverSideEndpoints_block_invoke()
{
  uint64_t result = objc_alloc_init(CMCaptureFrameSenderEndpoints);
  sServerSideEndpoints = (uint64_t)result;
  return result;
}

uint64_t FigLivePhotoMetadataComputeSerializationSize(unsigned int a1, unsigned int a2, void *a3)
{
  return FigLivePhotoMetadataComputeSerializationSizeV3(a1, a2, 0, 0, 0, 0, a3);
}

uint64_t FigLivePhotoMetadataComputeSerializationSizeV3(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, void *a7)
{
  *a7 = 0;
  if (a1 && a1 < 4 && (a1 > 1 || !(a4 | a3 | a5 | a6)))
  {
    uint64_t v7 = 32 * a2 + 48;
    if (a1 > 1)
    {
      unint64_t v8 = v7 + 32 * a3 + 32 * (a5 + (unint64_t)a4 + a6) + 16;
      *a7 = v8;
      if (a1 == 2) {
        return 0;
      }
      uint64_t v7 = v8 + 72;
    }
    *a7 = v7;
    return 0;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigLivePhotoMetadataComputeDeserializationSize(unsigned int *a1, unint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  *a6 = 0;
  if (a4) {
    *a4 = 0;
  }
  if (!a3 && !a5) {
    goto LABEL_30;
  }
  if (a2 <= 0x2F) {
    goto LABEL_30;
  }
  unsigned int v6 = *a1;
  if (!*a1) {
    goto LABEL_30;
  }
  if (a3 >= v6) {
    unsigned int v7 = *a1;
  }
  else {
    unsigned int v7 = a3;
  }
  if (v7 >= 3) {
    unsigned int v7 = 3;
  }
  uint64_t v8 = a1[11];
  uint64_t v9 = 32 * v8;
  unint64_t v10 = 32 * v8 + 48;
  if (v6 == 1)
  {
    if (v10 == a2)
    {
      unint64_t v11 = 0;
LABEL_18:
      uint64_t v13 = 0;
LABEL_25:
      if (v7 <= 1) {
        unint64_t v11 = 0;
      }
      unint64_t v15 = v11 + v10 + v13;
      if (a4) {
        *a4 = v6;
      }
      *a5 = v7;
      *a6 = v15;
      return 0;
    }
  }
  else if (v10 <= a2)
  {
    unint64_t v11 = (32 * a1[8 * v8 + 15] + 32 * a1[8 * v8 + 12] + 32 * (a1[8 * v8 + 14] + (unint64_t)a1[8 * v8 + 13])) | 0x10;
    unint64_t v12 = v11 + v10;
    if (v6 == 2)
    {
      if (v12 == a2) {
        goto LABEL_18;
      }
    }
    else if (v12 <= a2)
    {
      unint64_t v14 = v9 + v11 + 120;
      if (v6 == 3)
      {
        if (v14 != a2) {
          goto LABEL_30;
        }
      }
      else if (v14 > a2)
      {
        goto LABEL_30;
      }
      uint64_t v13 = 72;
      goto LABEL_25;
    }
  }
LABEL_30:
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigLivePhotoMetadataSerializeIntoBuffer(const void *a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, unsigned int a5, size_t a6, unsigned int *a7)
{
  CGPoint v8 = *(CGPoint *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  return FigLivePhotoMetadataSerializeIntoBufferV3(a1, &v8, a3, a4, 0, 0, 0, 0, a5, a6, a7);
}

uint64_t FigLivePhotoMetadataSerializeIntoBufferV3(const void *a1, CGPoint *a2, const __CFDictionary *a3, const __CFArray *a4, const __CFDictionary *Value, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unsigned int a9, size_t a10, unsigned int *a11)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (!a11)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_98:
    return FigSignalErrorAt();
  }
  bzero(a11, a10);
  uint64_t v17 = (const void **)MEMORY[0x1E4F538F8];
  CFDictionaryRef v87 = Value;
  if (Value) {
    int Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F538F8]);
  }
  if (a6)
  {
    kedouble y = (const __CFArray *)CFDictionaryGetValue(a6, *v17);
    if (a7)
    {
LABEL_6:
      CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(a7, *v17);
      goto LABEL_9;
    }
  }
  else
  {
    kedouble y = 0;
    if (a7) {
      goto LABEL_6;
    }
  }
  CFArrayRef v18 = 0;
LABEL_9:
  theArradouble y = v18;
  if (a8) {
    CFArrayRef v99 = (const __CFArray *)CFDictionaryGetValue(a8, *v17);
  }
  else {
    CFArrayRef v99 = 0;
  }
  CFDictionaryRef v88 = a7;
  CFDictionaryRef v89 = a8;
  if (a4)
  {
    unsigned int Count = CFArrayGetCount(a4);
    if (Value) {
      goto LABEL_14;
    }
LABEL_17:
    unsigned int v97 = 0;
    if (key) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  unsigned int Count = 0;
  if (!Value) {
    goto LABEL_17;
  }
LABEL_14:
  unsigned int v97 = CFArrayGetCount(Value);
  if (key)
  {
LABEL_15:
    unsigned int v95 = CFArrayGetCount(key);
    goto LABEL_19;
  }
LABEL_18:
  unsigned int v95 = 0;
LABEL_19:
  unsigned int v20 = v99;
  if (theArray)
  {
    unsigned int v93 = CFArrayGetCount(theArray);
    if (!v99) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  unsigned int v93 = 0;
  if (v99) {
LABEL_21:
  }
    unsigned int v20 = CFArrayGetCount(v99);
LABEL_22:
  uint64_t v117 = 0;
  uint64_t result = FigLivePhotoMetadataComputeSerializationSizeV3(a9, Count, v97, v95, v93, v20, &v117);
  if (result) {
    return result;
  }
  if (v117 != a10)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_98;
  }
  unsigned int v91 = v20;
  *a11 = a9;
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53E48]);
  if (v22)
  {
    LODWORD(valuePtr.origin.x) = 0;
    CFNumberGetValue(v22, kCFNumberFloat32Type, &valuePtr);
    a11[1] = LODWORD(valuePtr.origin.x);
    int v23 = 1;
  }
  else
  {
    int v23 = 0;
  }
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53CE8]);
  if (v24)
  {
    valuePtr.origin.double x = 0.0;
    CFNumberGetValue(v24, kCFNumberSInt64Type, &valuePtr);
    *((void *)a11 + 1) = *(void *)&valuePtr.origin.x;
    v23 |= 2u;
  }
  CFDataRef v25 = (const __CFData *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F55CA8]);
  if (v25)
  {
    CFDataRef v26 = v25;
    if (CFDataGetLength(v25) == 8)
    {
      v129.locatiouint64_t n = 0;
      v129.length = 8;
      CFDataGetBytes(v26, v129, buffer);
      *((void *)a11 + 2) = *(void *)buffer;
      v23 |= 4u;
    }
  }
  CFDataRef v27 = (const __CFData *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F55CB0]);
  if (v27)
  {
    CFDataRef v28 = v27;
    if (CFDataGetLength(v27) == 8)
    {
      v130.locatiouint64_t n = 0;
      v130.length = 8;
      CFDataGetBytes(v28, v130, v125);
      *((void *)a11 + 3) = *(void *)v125;
      v23 |= 8u;
    }
  }
  int v116 = 1065353216;
  CFNumberRef v29 = (const __CFNumber *)CMGetAttachment(a1, @"TotalZoomFactor", 0);
  if (v29)
  {
    CFNumberGetValue(v29, kCFNumberFloat32Type, &v116);
    a11[8] = v116;
    v23 |= 0x10u;
  }
  int v115 = 1065353216;
  if (!FigCaptureComputeImageGainFromMetadata())
  {
    a11[9] = v115;
    v23 |= 0x20u;
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53BF8]);
  if (v30)
  {
    CFNumberGetValue(v30, kCFNumberSInt8Type, a11 + 10);
    v23 |= 0x40u;
  }
  CFDictionaryRef v86 = Value;
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F53EE0]);
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt8Type, (char *)a11 + 41);
    LOWORD(v23) = v23 | 0x80;
  }
  else if (!v23)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  uint64_t v84 = a2;
  CFDictionaryRef v85 = a3;
  *((_WORD *)a11 + 21) = v23;
  memset(&v114, 0, sizeof(v114));
  valuePtr.origiuint64_t n = *a2;
  valuePtr.size.double width = a2[1].x;
  CMTimeConvertScale(&v114, (CMTime *)&valuePtr, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  a11[11] = Count;
  if (Count)
  {
    CFIndex v32 = 0;
    int v33 = 0;
    uint64_t v34 = (const void *)*MEMORY[0x1E4F54348];
    double v35 = (const void *)*MEMORY[0x1E4F54180];
    double v36 = (const void *)*MEMORY[0x1E4F53E70];
    double v37 = (_WORD *)a11 + 39;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v32);
      CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v34);
      if (v39)
      {
        time.xpc_object_t value = 0;
        CFNumberGetValue(v39, kCFNumberSInt64Type, &time);
        int64_t v40 = FigHostTimeToNanoseconds();
        CMTimeMake(&lhs, v40, 1000000000);
        valuePtr.origiuint64_t n = *(CGPoint *)&v114.value;
        *(void *)&valuePtr.size.double width = v114.epoch;
        CMTimeSubtract(&v112, &lhs, (CMTime *)&valuePtr);
        *(void *)(v37 - 15) = v112.value;
        v33 |= 1u;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      CFDictionaryRef v41 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v35);
      if (v41 && CGRectMakeWithDictionaryRepresentation(v41, &valuePtr))
      {
        *(float32x4_t *)(v37 - 11) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)valuePtr.origin), (float64x2_t)valuePtr.size);
        v33 |= 2u;
      }
      CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v36);
      if (v42)
      {
        LODWORD(time.value) = 0;
        CFNumberGetValue(v42, kCFNumberSInt32Type, &time);
        *(_DWORD *)(v37 - 3) = time.value;
        v33 |= 4u;
      }
      *double v37 = v33;
      *(v37 - 1) = 0;
      ++v32;
      v37 += 16;
    }
    while (Count != v32);
  }
  if (a9 < 2) {
    return 0;
  }
  uint64_t v43 = 0;
  uint64_t v83 = Count;
  uint64_t v44 = &a11[8 * Count];
  v44[12] = v97;
  v44[13] = v95;
  v44 += 12;
  v44[2] = v93;
  v44[3] = v91;
  v124[0] = v97;
  v124[1] = v95;
  v124[2] = v93;
  void v124[3] = v91;
  v123[0] = v87;
  v123[1] = a6;
  v123[2] = v88;
  void v123[3] = v89;
  v122[0] = v86;
  v122[1] = key;
  v122[2] = theArray;
  v122[3] = v99;
  int v90 = v44;
  uint64_t v45 = v44 + 4;
  v121[0] = v44 + 4;
  v121[1] = &v44[8 * v97 + 4];
  uint64_t v46 = v95 + v97;
  uint64_t v94 = v93 + v46;
  v121[2] = &v45[8 * v46];
  v121[3] = &v45[8 * v94];
  float v96 = (const void *)*MEMORY[0x1E4F54348];
  CFDictionaryRef theDicta = (CFDictionaryRef)*MEMORY[0x1E4F54180];
  CFArrayRef theArraya = (CFArrayRef)*MEMORY[0x1E4F53888];
  keya = (void *)*MEMORY[0x1E4F53D80];
  uint64_t v47 = (const void *)*MEMORY[0x1E4F53898];
  do
  {
    uint64_t v98 = v43;
    uint64_t v48 = v124[v43];
    if (v48)
    {
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v123[v43], v96);
      if (v49)
      {
        time.xpc_object_t value = 0;
        CFNumberGetValue(v49, kCFNumberSInt64Type, &time);
        int64_t v50 = FigHostTimeToNanoseconds();
        CMTimeMake(&v110, v50, 1000000000);
        valuePtr.origiuint64_t n = *(CGPoint *)&v114.value;
        *(void *)&valuePtr.size.double width = v114.epoch;
        CMTimeSubtract(&v109, &v110, (CMTime *)&valuePtr);
        CMTimeValue v51 = v109.value;
        __int16 v52 = 1;
      }
      else
      {
        __int16 v52 = 0;
        CMTimeValue v51 = 0;
      }
      CFIndex v53 = 0;
      CFArrayRef v54 = (const __CFArray *)v122[v98];
      uint64_t v55 = v121[v98];
      do
      {
        CFDictionaryRef v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v53);
        *(void *)uint64_t v55 = v51;
        memset(&valuePtr, 0, sizeof(valuePtr));
        CFDictionaryRef v57 = (const __CFDictionary *)CFDictionaryGetValue(v56, theDicta);
        __int16 v58 = v52;
        if (v57)
        {
          __int16 v58 = v52;
          if (CGRectMakeWithDictionaryRepresentation(v57, &valuePtr))
          {
            *(float32x4_t *)(v55 + _Block_object_dispose(&STACK[0x4E0], 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)valuePtr.origin), (float64x2_t)valuePtr.size);
            __int16 v58 = v52 | 2;
          }
        }
        CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v56, theArraya);
        if (v59)
        {
          LODWORD(time.value) = 0;
          CFNumberGetValue(v59, kCFNumberSInt32Type, &time);
          *(_DWORD *)(v55 + 24) = time.value;
          v58 |= 4u;
        }
        CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(v56, keya);
        if (v60)
        {
          LOWORD(time.value) = 0;
          CFNumberGetValue(v60, kCFNumberSInt16Type, &time);
          __int16 v61 = time.value & 0x3FF;
          v58 |= 8u;
        }
        else
        {
          __int16 v61 = 0;
        }
        CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue(v56, v47);
        if (v62)
        {
          LOWORD(time.value) = 0;
          CFNumberGetValue(v62, kCFNumberSInt16Type, &time);
          __int16 v61 = v61 & 0xF3FF | ((time.value & 3) << 10);
          v58 |= 0x10u;
        }
        *(_WORD *)(v55 + 30) = v58;
        *(_WORD *)(v55 + 2_Block_object_dispose(&STACK[0x4E0], 8) = v61;
        ++v53;
        v55 += 32;
      }
      while (v48 != v53);
    }
    uint64_t v43 = v98 + 1;
  }
  while (v98 != 3);
  if (a9 < 3) {
    return 0;
  }
  uint64_t v63 = v91 + v94;
  uint64_t v64 = (uint64_t)&v90[8 * v63 + 4];
  unsigned int v120 = 0;
  *(_OWORD *)CFDictionaryRef v118 = 0u;
  long long v119 = 0u;
  CFDataRef v65 = (const __CFData *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55CE8], 0);
  if (v65 && (CFDataRef v66 = v65, CFDataGetLength(v65) == 36))
  {
    v131.locatiouint64_t n = 0;
    v131.length = 36;
    CFDataGetBytes(v66, v131, v118);
    uint64_t v67 = &a11[8 * v83 + 8 * v63];
    long long v68 = v119;
    *(_OWORD *)(v67 + 17) = *(_OWORD *)v118;
    *(_OWORD *)(v67 + 21) = v68;
    v67[25] = v120;
    __int16 v69 = 3;
  }
  else
  {
    CGSize v70 = &a11[8 * v83 + 8 * v63];
    v70[25] = 0;
    *(_OWORD *)(v70 + 21) = 0u;
    *(_OWORD *)(v70 + 17) = 0u;
    __int16 v69 = 2;
  }
  valuePtr.origiuint64_t n = *v84;
  valuePtr.size.double width = v84[1].x;
  CMTimeConvertScale(&v108, (CMTime *)&valuePtr, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *(void *)&v90[8 * v63 + 14] = v108.value;
  *(void *)&v90[8 * v63 + 16] = 0;
  CFDictionaryRef v71 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
  if (v71)
  {
    CFDictionaryRef v72 = v71;
    CFTypeID v73 = CFGetTypeID(v71);
    if (v73 == CFDictionaryGetTypeID())
    {
      memset(&valuePtr, 0, 24);
      CMTimeMakeFromDictionary((CMTime *)&valuePtr, v72);
      if (BYTE4(valuePtr.origin.y))
      {
        *(CGPoint *)&time.xpc_object_t value = valuePtr.origin;
        time.CMTimeEpoch epoch = *(void *)&valuePtr.size.width;
        CMTimeConvertScale(&v107, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        *(void *)&v90[8 * v63 + 16] = v107.value;
        v69 |= 4u;
      }
    }
  }
  LOWORD(v90[8 * v63 + 18]) = 0;
  CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v85, @"IrisSequenceAdjusterRecipe");
  if (v74)
  {
    CFNumberRef v75 = v74;
    CFTypeID v76 = CFGetTypeID(v74);
    if (v76 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v75, kCFNumberSInt8Type, &v90[8 * v63 + 18]);
      if (LOBYTE(v90[8 * v63 + 18]))
      {
        CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(v85, @"IrisSequenceAdjusterDisplacement");
        if (v77)
        {
          CFNumberRef v78 = v77;
          CFTypeID v79 = CFGetTypeID(v77);
          if (v79 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v78, kCFNumberSInt8Type, (char *)&v90[8 * v63 + 18] + 1);
            v69 |= 0x18u;
          }
        }
      }
    }
  }
  BYTE2(v90[8 * v63 + 18]) = 0;
  CFNumberRef v80 = (const __CFNumber *)CFDictionaryGetValue(v85, @"InterpolatedFrame");
  if (v80)
  {
    CFNumberRef v81 = v80;
    CFTypeID v82 = CFGetTypeID(v80);
    if (v82 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v81, kCFNumberSInt8Type, (void *)(v64 + 58));
      v69 |= 0x20u;
    }
  }
  uint64_t result = 0;
  *(_WORD *)uint64_t v64 = v69;
  *(void *)(v64 + 59) = 0;
  *(void *)(v64 + 64) = 0;
  return result;
}

uint64_t FigLivePhotoMetadataSerializeIntoBufferV2(const void *a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unsigned int a9, size_t a10, unsigned int *a11)
{
  CGPoint v12 = *(CGPoint *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  return FigLivePhotoMetadataSerializeIntoBufferV3(a1, &v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t FigLivePhotoMetadataDeserializeIntoBuffer(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v45 = 0;
    unsigned int v44 = 0;
    uint64_t result = FigLivePhotoMetadataComputeDeserializationSize((unsigned int *)a1, a2, a3, 0, &v44, &v45);
    if (result) {
      return result;
    }
    if (v44 != a3 || v45 != a4) {
      goto LABEL_74;
    }
    uint64_t v10 = *(unsigned int *)(a1 + 44);
    *(_DWORD *)a5 = a3;
    int v11 = *(unsigned __int16 *)(a1 + 42);
    *(_WORD *)(a5 + 42) = v11;
    if (v11)
    {
      *(_DWORD *)(a5 + 4) = *(_DWORD *)(a1 + 4);
      if ((v11 & 2) == 0)
      {
LABEL_7:
        if ((v11 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_47;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_7;
    }
    *(void *)(a5 + _Block_object_dispose(&STACK[0x4E0], 8) = *(void *)(a1 + 8);
    if ((v11 & 4) == 0)
    {
LABEL_8:
      if ((v11 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_48;
    }
LABEL_47:
    *(void *)(a5 + 16) = *(void *)(a1 + 16);
    if ((v11 & 8) == 0)
    {
LABEL_9:
      if ((v11 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_49;
    }
LABEL_48:
    *(void *)(a5 + 24) = *(void *)(a1 + 24);
    if ((v11 & 0x10) == 0)
    {
LABEL_10:
      if ((v11 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_50;
    }
LABEL_49:
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
    if ((v11 & 0x20) == 0)
    {
LABEL_11:
      if ((v11 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_51;
    }
LABEL_50:
    *(_DWORD *)(a5 + 36) = *(_DWORD *)(a1 + 36);
    if ((v11 & 0x40) == 0)
    {
LABEL_12:
      if ((v11 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_52;
    }
LABEL_51:
    *(unsigned char *)(a5 + 40) = *(unsigned char *)(a1 + 40);
    if ((v11 & 0x80) == 0)
    {
LABEL_13:
      if (v11)
      {
LABEL_14:
        *(_DWORD *)(a5 + 44) = v10;
        if (v10)
        {
          uint64_t v12 = 0;
          for (int i = v10; i; --i)
          {
            __int16 v14 = *(_WORD *)(a1 + v12 + 78);
            uint64_t v15 = a5 + v12;
            *(_WORD *)(v15 + 7_Block_object_dispose(&STACK[0x4E0], 8) = v14;
            *(_WORD *)(v15 + 76) = 0;
            if (v14)
            {
              *(void *)(v15 + 4_Block_object_dispose(&STACK[0x4E0], 8) = *(void *)(a1 + v12 + 48);
              if ((v14 & 2) != 0)
              {
LABEL_23:
                *(_OWORD *)(a5 + v12 + 56) = *(_OWORD *)(a1 + v12 + 56);
                if ((v14 & 4) == 0) {
                  goto LABEL_20;
                }
LABEL_19:
                *(_DWORD *)(a5 + v12 + 72) = *(_DWORD *)(a1 + v12 + 72);
                goto LABEL_20;
              }
            }
            else if ((v14 & 2) != 0)
            {
              goto LABEL_23;
            }
            if ((v14 & 4) != 0) {
              goto LABEL_19;
            }
LABEL_20:
            v12 += 32;
          }
        }
        if (a3 < 2) {
          return 0;
        }
        uint64_t v16 = a1 + 32 * v10;
        unsigned int v19 = *(_DWORD *)(v16 + 48);
        uint64_t v17 = (_DWORD *)(v16 + 48);
        uint64_t v18 = v19;
        uint64_t v20 = a5 + 32 * v10;
        *(_DWORD *)(v20 + 4_Block_object_dispose(&STACK[0x4E0], 8) = v19;
        double v21 = (_DWORD *)(v20 + 48);
        int v22 = v17[1];
        int v23 = v17[2];
        int v24 = v17[3];
        v21[1] = v22;
        long long v21[2] = v23;
        v21[3] = v24;
        if (v19 || v22 || v23 || v24)
        {
          uint64_t v25 = 0;
          v47[0] = v17 + 4;
          v47[1] = &v17[8 * v18 + 4];
          uint64_t v26 = (v22 + v18);
          uint64_t v27 = (v26 + v23);
          v47[2] = &v17[8 * v26 + 4];
          v47[3] = &v17[8 * v27 + 4];
          v46[0] = v21 + 4;
          v46[1] = &v21[8 * v18 + 4];
          v48[0] = v18;
          v48[1] = v22;
          v48[2] = v23;
          v48[3] = v24;
          v46[2] = &v21[8 * v26 + 4];
          v46[3] = &v21[8 * v27 + 4];
          while (1)
          {
            int v28 = v48[v25];
            if (v28) {
              break;
            }
LABEL_42:
            if (++v25 == 4) {
              goto LABEL_43;
            }
          }
          uint64_t v29 = 0;
          uint64_t v30 = v46[v25];
          uint64_t v31 = v47[v25];
          while (1)
          {
            __int16 v32 = *(_WORD *)(v31 + v29 + 30);
            uint64_t v33 = v30 + v29;
            *(_WORD *)(v33 + 30) = v32;
            *(_WORD *)(v33 + 2_Block_object_dispose(&STACK[0x4E0], 8) = *(_WORD *)(v31 + v29 + 28);
            if (v32)
            {
              *(void *)(v30 + v29) = *(void *)(v31 + v29);
              if ((v32 & 2) != 0)
              {
LABEL_40:
                *(_OWORD *)(v30 + v29 + _Block_object_dispose(&STACK[0x4E0], 8) = *(_OWORD *)(v31 + v29 + 8);
                if ((v32 & 4) == 0) {
                  goto LABEL_37;
                }
LABEL_36:
                *(_DWORD *)(v30 + v29 + 24) = *(_DWORD *)(v31 + v29 + 24);
                goto LABEL_37;
              }
            }
            else if ((v32 & 2) != 0)
            {
              goto LABEL_40;
            }
            if ((v32 & 4) != 0) {
              goto LABEL_36;
            }
LABEL_37:
            v29 += 32;
            if (!--v28) {
              goto LABEL_42;
            }
          }
        }
LABEL_43:
        if (a3 < 3) {
          return 0;
        }
        uint64_t v34 = (v22 + v18 + v23 + v24);
        double v35 = &v17[8 * v34];
        __int16 v38 = *((_WORD *)v35 + 8);
        double v36 = v35 + 4;
        char v37 = v38;
        CFNumberRef v39 = &v21[8 * v34];
        *((_WORD *)v39 + _Block_object_dispose(&STACK[0x4E0], 8) = v38;
        int64_t v40 = v39 + 4;
        if (v38)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 32 * v10 + 32 * v34 + a5 + 68;
          do
          {
            *(_DWORD *)(v43 + v42 * 4) = v36[v42 + 1];
            ++v42;
          }
          while (v42 != 9);
        }
        else
        {
          uint64_t v41 = a5 + 32 * (v10 + v34);
          *(_DWORD *)(v41 + 100) = 0;
          *(_OWORD *)(v41 + 84) = 0u;
          *(_OWORD *)(v41 + 6_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
        }
        if ((v37 & 2) != 0)
        {
          *((void *)v40 + 5) = *((void *)v36 + 5);
          if ((v37 & 4) == 0)
          {
LABEL_60:
            if ((v37 & 8) == 0) {
              goto LABEL_61;
            }
            goto LABEL_68;
          }
        }
        else if ((v37 & 4) == 0)
        {
          goto LABEL_60;
        }
        *((void *)v40 + 6) = *((void *)v36 + 6);
        if ((v37 & 8) == 0)
        {
LABEL_61:
          if ((v37 & 0x10) == 0) {
            goto LABEL_62;
          }
          goto LABEL_69;
        }
LABEL_68:
        *((unsigned char *)v40 + 56) = *((unsigned char *)v36 + 56);
        if ((v37 & 0x10) == 0)
        {
LABEL_62:
          if ((v37 & 0x20) == 0)
          {
LABEL_64:
            uint64_t result = 0;
            *((void *)v40 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
            *(void *)((char *)v40 + 59) = 0;
            return result;
          }
LABEL_63:
          *((unsigned char *)v40 + 5_Block_object_dispose(&STACK[0x4E0], 8) = *((unsigned char *)v36 + 58);
          goto LABEL_64;
        }
LABEL_69:
        *((unsigned char *)v40 + 57) = *((unsigned char *)v36 + 57);
        if ((v37 & 0x20) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
LABEL_74:
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
LABEL_52:
    *(unsigned char *)(a5 + 41) = *(unsigned char *)(a1 + 41);
    if (v11) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader(__CFData **a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFErrorRef error = 0;
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v29 = FigSignalErrorAt();
    CFDataRef v24 = 0;
    CFURLRef v5 = 0;
    uint64_t v4 = 0;
    CFDictionaryRef Mutable = 0;
    CFPropertyListRef v9 = 0;
    unsigned int v6 = 0;
    goto LABEL_29;
  }
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFDataRef v24 = 0;
    CFURLRef v5 = 0;
    uint64_t v4 = 0;
LABEL_48:
    CFPropertyListRef v9 = 0;
    unsigned int v6 = 0;
    goto LABEL_52;
  }
  uint64_t v4 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFDataRef v24 = 0;
    CFURLRef v5 = 0;
    goto LABEL_48;
  }
  FigCFDictionarySetInt32();
  CFURLRef v5 = CFURLCreateWithFileSystemPath(v2, @"/System/Library/CoreServices/SystemVersion.plist", kCFURLPOSIXPathStyle, 0);
  if (!v5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFDataRef v24 = 0;
    goto LABEL_48;
  }
  unsigned int v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v6)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFDataRef v24 = 0;
    CFPropertyListRef v9 = 0;
    goto LABEL_52;
  }
  unsigned int v7 = CFReadStreamCreateWithFile(v2, v5);
  if (!v7) {
    goto LABEL_28;
  }
  CGPoint v8 = v7;
  if (!CFReadStreamOpen(v7))
  {
    CFRelease(v8);
    goto LABEL_28;
  }
  CFPropertyListRef v9 = CFPropertyListCreateWithStream(v2, v8, 0, 0, 0, &error);
  CFReadStreamClose(v8);
  CFRelease(v8);
  if (!v9)
  {
LABEL_28:
    fig_log_get_emitter();
    FigDebugAssert3();
    CFErrorGetCode(error);
    uint64_t v29 = FigSignalErrorAt();
    CFDataRef v24 = 0;
    CFPropertyListRef v9 = 0;
    goto LABEL_29;
  }
  uint64_t v31 = a1;
  CFURLRef v32 = v5;
  CFTypeID v10 = CFGetTypeID(v9);
  if (v10 == CFDictionaryGetTypeID())
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v12 = off_1E5C24698[i];
      int Value = CFDictionaryGetValue((CFDictionaryRef)v9, v12);
      if (Value) {
        CFDictionaryAddValue(v6, v12, Value);
      }
    }
  }
  if (CFDictionaryGetCount(Mutable) >= 1) {
    CFDictionaryAddValue(Mutable, @"SystemVersion", v6);
  }
  uint64_t v14 = 0;
  CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F1D020];
  do
  {
    CFURLRef v16 = CFURLCreateWithFileSystemPath(v2, FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader_frameworkList[v14], kCFURLPOSIXPathStyle, 1u);
    if (!v16) {
      goto LABEL_23;
    }
    CFURLRef v17 = v16;
    uint64_t v18 = CFBundleCreate(v2, v16);
    if (v18)
    {
      unsigned int v19 = v18;
      ValueForInfoDictionaryKedouble y = CFBundleGetValueForInfoDictionaryKey(v18, v15);
      if (ValueForInfoDictionaryKey)
      {
        double v21 = ValueForInfoDictionaryKey;
        CFTypeRef v22 = CFRetain(ValueForInfoDictionaryKey);
        CFAutorelease(v22);
        CFRelease(v19);
        CFRelease(v17);
        CFDictionaryAddValue(v4, FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader_frameworkList[v14 + 1], v21);
        goto LABEL_23;
      }
      CFRelease(v19);
    }
    CFRelease(v17);
LABEL_23:
    v14 += 2;
  }
  while (v14 != 14);
  CFDictionaryAddValue(Mutable, @"FrameworkVersions", v4);
  CFDataRef v23 = CFPropertyListCreateData(v2, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, &error);
  CFDataRef v24 = v23;
  if (v23)
  {
    CFIndex Length = CFDataGetLength(v23);
    BytePtr = CFDataGetBytePtr(v24);
    *(_DWORD *)bytes = bswap32(Length + 8);
    int v35 = 1986487907;
    uint64_t v27 = CFDataCreateMutable(v2, Length + 8);
    CFURLRef v5 = v32;
    if (v27)
    {
      int v28 = v27;
      CFDataAppendBytes(v27, bytes, 8);
      CFDataAppendBytes(v28, BytePtr, Length);
      uint64_t v29 = 0;
      *uint64_t v31 = v28;
      goto LABEL_29;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_52:
    uint64_t v29 = 4294954510;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFErrorGetCode(error);
    uint64_t v29 = FigSignalErrorAt();
    CFURLRef v5 = v32;
  }
LABEL_29:
  if (error) {
    CFRelease(error);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v29;
}

uint64_t BWInferenceSchedulerGraphDirectedEdgeSize()
{
  return 32;
}

void BWInferenceSchedulerGraphDirectedEdgeRelinquish(id *a1)
{
  free(a1);
}

uint64_t qtrmg_trackQueueNowBelowWaterLevelCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = [a5 objectForKeyedSubscript:*MEMORY[0x1E4F32520]];
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  [*(id *)(a2 + 16) addObject:v6];
  MEMORY[0x1A6270C80](*(void *)(a2 + 8));
  unsigned int v7 = *(pthread_mutex_t **)a2;
  return pthread_mutex_unlock(v7);
}

uint64_t FigAssetWriterSetFormatWriterProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CGPoint v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, a3);
}

uint64_t FigFormatReaderGetTrackCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

uint64_t qtrmg_metadataTrackWithIDShouldBePropagated(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v31 = 0;
  CFTypeRef cf = 0;
  if (qtrmg_metadataTrackWithIDShouldBePropagated_onceToken != -1) {
    dispatch_once(&qtrmg_metadataTrackWithIDShouldBePropagated_onceToken, &__block_literal_global_3);
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v5 + 56);
  if (!v6
    || v6(a1, a2, &cf, 0)
    || ((FigBaseObject = FigTrackReaderGetFigBaseObject(), (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v9 = 0)
      : (uint64_t v9 = v8),
        (CFTypeID v10 = *(unsigned int (**)(uint64_t, void, void, id *))(v9 + 48)) == 0
     || v10(FigBaseObject, *MEMORY[0x1E4F34A10], *MEMORY[0x1E4F1CF80], &v31)))
  {
    FigDebugAssert3();
    goto LABEL_31;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v11 = v31;
  uint64_t v12 = [v31 countByEnumeratingWithState:&v27 objects:v34 count:16];
  if (!v12)
  {
LABEL_31:
    uint64_t v21 = 1;
    goto LABEL_32;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)v28;
  do
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (*(void *)v28 != v14) {
        objc_enumerationMutation(v11);
      }
      CFArrayRef Identifiers = CMMetadataFormatDescriptionGetIdentifiers(*(CMMetadataFormatDescriptionRef *)(*((void *)&v27 + 1)
                                                                                                + 8 * i));
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v17 = [(__CFArray *)Identifiers countByEnumeratingWithState:&v23 objects:v33 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v24;
        while (2)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            if (*(void *)v24 != v19) {
              objc_enumerationMutation(Identifiers);
            }
            if ([(id)qtrmg_metadataTrackWithIDShouldBePropagated_nonPropagatingMetadataIdentifiers containsObject:*(void *)(*((void *)&v23 + 1) + 8 * j)])
            {
              uint64_t v21 = 0;
              goto LABEL_32;
            }
          }
          uint64_t v18 = [(__CFArray *)Identifiers countByEnumeratingWithState:&v23 objects:v33 count:16];
          if (v18) {
            continue;
          }
          break;
        }
      }
    }
    uint64_t v13 = [v11 countByEnumeratingWithState:&v27 objects:v34 count:16];
    uint64_t v21 = 1;
  }
  while (v13);
LABEL_32:
  if (cf) {
    CFRelease(cf);
  }

  return v21;
}

uint64_t qtrmg_getTrackTimescale(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v5 + 56);
  if (!v6 || v6(a1, a2, &cf, 0))
  {
    FigDebugAssert3();
    return 0;
  }
  else
  {
    id v15 = 0;
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v11 = *(uint64_t (**)(uint64_t, void, void, id *))(v9 + 48);
    if (v11)
    {
      int v12 = v11(FigBaseObject, *MEMORY[0x1E4F34AB0], *MEMORY[0x1E4F1CF80], &v15);
      id v13 = v15;
    }
    else
    {
      id v13 = 0;
      int v12 = -12782;
    }
    uint64_t v10 = [v13 intValue];

    if (cf) {
      CFRelease(cf);
    }
    if (v12) {
      FigDebugAssert3();
    }
  }
  return v10;
}

uint64_t FigAssetReaderEnableOriginalSampleReferenceExtractionFromTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, 0, a3);
}

uint64_t FigAssetReaderEnableOriginalSampleExtractionFromTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, 0, a3);
}

uint64_t FigAssetWriterAddNativeTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, a3);
}

uint64_t FigFormatReaderCopyTrackByID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, a3, 0);
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(FigBaseObject, a2, a3, a4);
}

uint64_t FigAssetWriterSetFormatWriterTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  return v10(a1, a2, a3, a4);
}

uint64_t qtrmg_setupMetadataTrackReferences(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", 2 * objc_msgSend(a3, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = [a3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(a3);
        }
        [v6 addObject:*(void *)(*((void *)&v18 + 1) + 8 * i)];
        objc_msgSend(v6, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
      }
      uint64_t v8 = [a3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }
  if ([v6 count])
  {
    id v11 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    int v12 = objc_msgSend(v11, "initWithObjectsAndKeys:", v6, *MEMORY[0x1E4F34AE8], 0);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFURLRef v16 = *(uint64_t (**)(uint64_t, void, void *))(v14 + 56);
    if (!v16)
    {

      uint64_t v15 = 4294954514;
LABEL_17:
      FigDebugAssert3();
      goto LABEL_18;
    }
    uint64_t v15 = v16(a1, *MEMORY[0x1E4F32D50], v12);

    if (v15) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_18:

  return v15;
}

uint64_t FigAssetReaderStartExtractionForTimeRange(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, long long *))(v7 + 96);
  if (!v8) {
    return 4294954514;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  return v8(a1, &v12, &v10);
}

uint64_t FigAssetWriterBeginSession(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  return v6(a1, &v8);
}

uint64_t qtrmg_trackIDForNextTrackBelowWater(uint64_t a1, void *a2)
{
  *a2 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  if (![*(id *)(a1 + 16) count] && (uint64_t v4 = FigConditionVariableWaitRelative(), v4))
  {
    uint64_t v5 = v4;
    FigDebugAssert3();
  }
  else
  {
    *a2 = (id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 16), "firstObject"), "copy");
    [*(id *)(a1 + 16) removeObjectAtIndex:0];
    uint64_t v5 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return v5;
}

uint64_t FigAssetWriterIsTrackQueueAboveHighWaterLevel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 0;
  }
  return v6(a1, a2);
}

uint64_t FigAssetReaderExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 104);
  if (!v10) {
    return 4294954514;
  }
  return v10(a1, a2, 1, a3, a4);
}

CMSampleBufferRef qtrmg_createTrimmedSampleBufferIfNeeded(void *a1, CMTime *a2)
{
  CMSampleBufferRef sampleBufferOut = 0;
  memset(&v18, 0, sizeof(v18));
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1F308];
  CFDictionaryRef v5 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
  CMTimeMakeFromDictionary(&v18, v5);
  if (v18.flags)
  {
    CMTime time1 = v18;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (!CMTimeCompare(&time1, &time2)) {
      CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
  }
  memset(&time1, 0, sizeof(time1));
  CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1F300];
  CFDictionaryRef v7 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F300], 0);
  CMTimeMakeFromDictionary(&time1, v7);
  if (time1.flags)
  {
    CMTime time2 = time1;
    CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (!CMTimeCompare(&time2, &rhs)) {
      CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
  }
  if ((v18.flags | time1.flags))
  {
    long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
    *(_OWORD *)&timingInfoOut.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
    *(_OWORD *)&timingInfoOut.decodeTimeStamp.xpc_object_t value = v8;
    timingInfoOut.decodeTimeStamp.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
    long long v9 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
    *(_OWORD *)&timingInfoOut.duration.xpc_object_t value = *MEMORY[0x1E4F1FA70];
    *(_OWORD *)&timingInfoOut.duration.CMTimeEpoch epoch = v9;
    if (CMSampleBufferGetSampleTimingInfo((CMSampleBufferRef)a1, 0, &timingInfoOut)) {
      goto LABEL_27;
    }
    CMSampleTimingInfo v13 = timingInfoOut;
    if ((v18.flags & 1) == 0)
    {
LABEL_14:
      CMTime time2 = v13.presentationTimeStamp;
      CMTime rhs = *a2;
      if (CMTimeCompare(&time2, &rhs) < 0 && (v13.duration.flags & 1) != 0)
      {
        if (time1.flags)
        {
          CMTime rhs = v13.duration;
          CMTime lhs = time1;
          CMTimeSubtract(&time2, &rhs, &lhs);
          v13.duratiouint64_t n = time2;
        }
        CMTime time2 = v13.duration;
        CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (CMTimeCompare(&time2, &rhs) >= 1)
        {
          memset(&time2, 0, sizeof(time2));
          CMTime rhs = v13.presentationTimeStamp;
          CMTime lhs = v13.duration;
          CMTimeAdd(&time2, &rhs, &lhs);
          CMTime rhs = time2;
          CMTime lhs = *a2;
          if (CMTimeCompare(&rhs, &lhs) >= 1)
          {
            CMTime lhs = *a2;
            CMTime presentationTimeStamp = v13.presentationTimeStamp;
            CMTimeSubtract(&rhs, &lhs, &presentationTimeStamp);
            v13.duratiouint64_t n = rhs;
          }
        }
      }
      if (v13.duration.flags)
      {
        CMTime time2 = v13.duration;
        CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        if (CMTimeCompare(&time2, &rhs) <= 0)
        {
          CMTimeMake(&time2, 1, v13.duration.timescale);
          v13.duratiouint64_t n = time2;
        }
      }
      if (!CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMSampleBufferRef)a1, 1, &v13, &sampleBufferOut))
      {
        CMRemoveAttachment(sampleBufferOut, v4);
        CMRemoveAttachment(sampleBufferOut, v6);
        return sampleBufferOut;
      }
LABEL_27:
      FigDebugAssert3();
      return sampleBufferOut;
    }
    if ((v13.duration.flags & 1) == 0)
    {
LABEL_13:
      CMTime rhs = v13.presentationTimeStamp;
      CMTime lhs = v18;
      CMTimeAdd(&time2, &rhs, &lhs);
      v13.CMTime presentationTimeStamp = time2;
      goto LABEL_14;
    }
    CMTime time2 = v18;
    CMTime rhs = timingInfoOut.duration;
    if (CMTimeCompare(&time2, &rhs) < 0)
    {
      CMTime time2 = v13.duration;
      CMTime rhs = v18;
      CMTimeSubtract(&v13.duration, &time2, &rhs);
      goto LABEL_13;
    }
  }
  return sampleBufferOut;
}

uint64_t CMTimeCompareApproximately(CMTime *a1, CMTime *a2)
{
  if ((a1->flags & 0x1F) == 3 || (a2->flags & 0x1F) == 3)
  {
    memset(&time1, 0, sizeof(time1));
    CMTime lhs = *a1;
    CMTime rhs = *a2;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1, &time);
    CMTimeMake(&time2, 1, 1000000000);
    CMTime lhs = time1;
    if (CMTimeCompare(&lhs, &time2) < 1) {
      return 0;
    }
  }
  CMTime time1 = *a1;
  CMTime lhs = *a2;
  return CMTimeCompare(&time1, &lhs);
}

uint64_t FigAssetWriterMarkEndOfDataForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 104);
  if (v9)
  {
    return v9(a1, a2);
  }
  return result;
}

uint64_t FigAssetWriterAddSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 80);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, a3);
}

uint64_t qtrmg_writeStillImageTimeMetadataSample(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5, int32_t a6)
{
  long long v19 = *a3;
  uint64_t v20 = *((void *)a3 + 2);
  CMSampleBufferRef QuickTimeMovieStillImageTimeSampleBuffer = FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer((uint64_t)&v19, a4, a5, a6);
  if (!QuickTimeMovieStillImageTimeSampleBuffer)
  {
    FigDebugAssert3();
    return 0;
  }
  CMSampleBufferRef v9 = QuickTimeMovieStillImageTimeSampleBuffer;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  long long v12 = *(uint64_t (**)(uint64_t, uint64_t, CMSampleBufferRef))(v11 + 80);
  if (!v12)
  {
    uint64_t v16 = 4294954514;
LABEL_15:
    FigDebugAssert3();
    goto LABEL_16;
  }
  uint64_t v13 = v12(a1, a2, v9);
  if (v13)
  {
    uint64_t v16 = v13;
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 104);
  if (!v17)
  {
    uint64_t v16 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v16 = v17(a1, a2);
  if (v16) {
    goto LABEL_15;
  }
LABEL_16:
  CFRelease(v9);
  return v16;
}

uint64_t qtrmg_writeVideoOrientationMetadataSamples(uint64_t a1, uint64_t a2, void *a3, CMTime *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v8 = [a3 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v31;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v31 != v10) {
        objc_enumerationMutation(a3);
      }
      long long v12 = *(opaqueCMSampleBuffer **)(*((void *)&v30 + 1) + 8 * v11);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v14 = v13 ? v13 : 0;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(v14 + 80);
      int v16 = v15 ? v15(a1, a2, v12) : -12782;
      memset(&v29, 0, sizeof(v29));
      CMSampleBufferGetPresentationTimeStamp(&v29, v12);
      memset(&v28, 0, sizeof(v28));
      CMSampleBufferGetDecodeTimeStamp(&v28, v12);
      if (v16) {
        goto LABEL_25;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [a3 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v9) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  CMAttachmentBearerRef target = 0;
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *MEMORY[0x1E4F1FA70];
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA70] + 16);
  sampleTimingArray.CMTime presentationTimeStamp = *a4;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  if (CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&target))
  {
    goto LABEL_25;
  }
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F270], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
  CMAttachmentBearerRef v17 = target;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, CMAttachmentBearerRef))(v19 + 80);
  if (v20) {
    int v21 = v20(a1, a2, v17);
  }
  else {
    int v21 = -12782;
  }
  if (target) {
    CFRelease(target);
  }
  if (v21) {
LABEL_25:
  }
    FigDebugAssert3();
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  long long v24 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 104);
  if (v24) {
    return v24(a1, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigAssetWriterEndSession(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 112);
  if (!v6) {
    return 4294954514;
  }
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  return v6(a1, &v8);
}

uint64_t FigAssetWriterFinish(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 120);
  if (!v4) {
    return 4294954514;
  }
  return v4(a1);
}

uint64_t FigAssetReaderInvalidate()
{
  uint64_t FigBaseObject = FigAssetReaderGetFigBaseObject();
  if (!FigBaseObject) {
    return 4294954516;
  }
  uint64_t v1 = FigBaseObject;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }
  return v5(v1);
}

uint64_t FigAssetWriterInvalidate()
{
  uint64_t FigBaseObject = FigAssetWriterGetFigBaseObject();
  if (!FigBaseObject) {
    return 4294954516;
  }
  uint64_t v1 = FigBaseObject;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }
  return v5(v1);
}

uint64_t __qtrmg_metadataTrackWithIDShouldBePropagated_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F218A0], *MEMORY[0x1E4F1F170], 0);
  qtrmg_metadataTrackWithIDShouldBePropagated_nonPropagatingMetadataCFArrayRef Identifiers = result;
  return result;
}

uint64_t BWPhotoEncoderResolveEncodingSchemeForRequestedSettings(void *a1)
{
  if (FigCapturePixelFormatIsDemosaicedRaw([a1 rawOutputFormat]))
  {
    if ([a1 rawOutputFileCodec] == 1786276963) {
      return 4;
    }
    else {
      return 3;
    }
  }
  else if ([a1 outputFileType] == 1785096550)
  {
    return 1;
  }
  else if ([a1 outputFileType] == 1751476579 {
         || [a1 outputFileType] == 1751476582)
  }
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t BWPhotoEncoderResolveEncodingSchemeForCompressedPhotoWithLinDNG(void *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = FigCapturePixelFormatIsDemosaicedRaw([a1 rawOutputFormat]);
  if (result)
  {
    if ([a1 outputFileType] == 1785096550)
    {
      return 1;
    }
    else if ([a1 outputFileType] == 1751476579 {
           || [a1 outputFileType] == 1751476582)
    }
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL BWPhotoEncoderIsLinDNGEncodingScheme(int a1)
{
  return (a1 - 3) < 2;
}

uint64_t BWPhotoEncoderCodecTypeForEncodingScheme(unsigned int a1)
{
  if (a1 > 4) {
    return 1785750887;
  }
  else {
    return *(unsigned int *)&aFff_0[4 * a1 + 4];
  }
}

BOOL BWPhotoEncoderShouldGenerateClientThumbnail(void *a1, uint64_t a2, _DWORD *a3)
{
  if ([a1 payloadType] != 1) {
    return 0;
  }
  int v5 = [a1 outputFormat] ? objc_msgSend(a1, "isOutputFormatCompressed") ^ 1 : 0;
  int IsBayerRaw = FigCapturePixelFormatIsBayerRaw([a1 rawOutputFormat]);
  int v7 = IsBayerRaw;
  if ((v5 & 1) == 0 && !IsBayerRaw) {
    return 0;
  }
  if ([a1 previewEnabled])
  {
    int v8 = [a1 previewWidth];
    int v9 = [a1 previewHeight];
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
  }
  if (([a1 thumbnailEnabled] & v5) == 1)
  {
    int v10 = [a1 thumbnailWidth];
    int v11 = [a1 thumbnailHeight];
  }
  else
  {
    int v10 = 0;
    int v11 = 0;
  }
  if (([a1 rawThumbnailEnabled] & v7) == 1)
  {
    int v12 = [a1 rawThumbnailWidth];
    int v13 = [a1 rawThumbnailHeight];
  }
  else
  {
    int v12 = 0;
    int v13 = 0;
  }
  if (v11 * v10 <= v13 * v12) {
    int v14 = v12;
  }
  else {
    int v14 = v10;
  }
  if (v11 * v10 <= v13 * v12) {
    int v15 = v13;
  }
  else {
    int v15 = v11;
  }
  BOOL result = v14 * v15 > v9 * v8;
  if (a3)
  {
    if (v14 * v15 > v9 * v8)
    {
      *a3 = v14;
      a3[1] = v15;
      return 1;
    }
  }
  return result;
}

void BWPhotoEncoderApplyFinalCropToFaceObservationsForSampleBuffer(const void *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0))
  {
    double FinalCropRectFromSource = FigCaptureMetadataUtilitiesGetFinalCropRectFromSource();
    BWUpdateLandmarksForStillImageCrop(a1, 802, FinalCropRectFromSource, v3, v4, v5);
  }
  else
  {
    FigDebugAssert3();
  }
}

void BWPhotoEncoderApplyCropRectOnSampleBufferMetadata(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFTypeRef v10 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v10) {
    goto LABEL_12;
  }
  int v11 = (void *)v10;
  v27.origin.double x = a2;
  v27.origin.double y = a3;
  v27.size.double width = a4;
  v27.size.double height = a5;
  if (!CGRectIsEmpty(v27))
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
    if (ImageBuffer)
    {
      int v13 = ImageBuffer;
      CFTypeRef v14 = CMGetAttachment(a1, @"StillImageSettings", 0);
      if (v14)
      {
        int v15 = (void *)v14;
        unint64_t v16 = psn_pixelBufferDimensions(v13);
        unsigned int v17 = [v15 outputWidth];
        unint64_t v18 = v17 | (unint64_t)([v15 outputHeight] << 32);
        FigCaptureMetadataUtilitiesUpdateMetadataForStillImageCrop(v11, v16, v18, a2, a3, a4, a5, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
        FigCaptureMetadataUtilitiesUpdateMetadataForNewFinalDimensions((uint64_t)v11, v16, v18);
        goto LABEL_6;
      }
    }
LABEL_12:
    FigDebugAssert3();
    uint64_t v19 = 0;
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v19 = (void *)CMGetAttachment(a1, @"RawDNGDictionary", 0);
  if (v19)
  {
    uint64_t v20 = v19;
    double FinalCropRectFromSource = FigCaptureMetadataUtilitiesGetFinalCropRectFromSource();
    uint64_t v19 = BWCreateDNGDictionaryForZoom(v20, FinalCropRectFromSource, v22, v23, v24);
    if (v19)
    {
      id v25 = v19;
      CMSetAttachment(a1, @"RawDNGDictionary", v19, 1u);
      uint64_t v19 = v25;
    }
  }
LABEL_9:
}

uint64_t BWPhotoEncoderScalePixelBuffer(__CVBuffer *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
  {
    uint64_t v19 = [a4 updateOutputPixelFormat:CVPixelBufferGetPixelFormatType(a1) dimensions:a2 poolCapacity:a5 colorSpaceProperties:a3 alwaysUseHardwareForConversion:1];
    if (v19)
    {
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v20 = objc_msgSend(a4, "convertPixelBuffer:cropRect:allocateOutputFromBufferPool:outputPixelBuffer:", a1, (int)a5 > 0, a6, a7, a8, a9, a10);
      if (!v20) {
        return v20;
      }
    }
    FigDebugAssert3();
    return v20;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWPhotoEncoderThumbnailEnabled(int a1, void *a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if ((a1 - 3) > 1)
  {
    int v14 = [a2 thumbnailEnabled];
    int v11 = [a2 thumbnailFormat];
    unsigned int v12 = [a2 thumbnailWidth];
    unsigned int v13 = [a2 thumbnailHeight];
    if (!v14) {
      return 0;
    }
  }
  else
  {
    char v10 = [a2 rawThumbnailEnabled];
    int v11 = [a2 rawThumbnailFormat];
    unsigned int v12 = [a2 rawThumbnailWidth];
    unsigned int v13 = [a2 rawThumbnailHeight];
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  unsigned int v15 = v13;
  switch(a1)
  {
    case 1:
    case 3:
      goto LABEL_7;
    case 2:
      if (v11 == 1752589105) {
        goto LABEL_11;
      }
LABEL_7:
      int v16 = 1785750887;
      break;
    case 4:
      if (v11 == 1785750887) {
        goto LABEL_11;
      }
      int v16 = 1786276963;
      break;
    default:
      return 0;
  }
  if (v11 != v16) {
    return 0;
  }
LABEL_11:
  unsigned int v17 = [a2 outputWidth];
  if (v12 >= v17) {
    int v18 = v17;
  }
  else {
    int v18 = v12;
  }
  unsigned int v19 = [a2 outputHeight];
  if (v15 >= v19) {
    int v20 = v19;
  }
  else {
    int v20 = v15;
  }
  if (v18 <= v20) {
    int v21 = v20;
  }
  else {
    int v21 = v18;
  }
  if (a3) {
    *a3 = v11;
  }
  if (a4)
  {
    *a4 = v18;
    a4[1] = v20;
  }
  if (a5) {
    *a5 = v21;
  }
  return 1;
}

uint64_t BWPhotoEncoderContainerFormatForEncodingScheme(unsigned int a1)
{
  if (a1 > 4) {
    return 1;
  }
  else {
    return *(unsigned int *)&aGepj1cvhgepjcl[4 * a1 + 16];
  }
}

uint64_t BWPhotoEncoderFileTypeForEncodingScheme(unsigned int a1)
{
  if (a1 > 4) {
    return 1785096550;
  }
  else {
    return dword_1A5DBD32C[a1];
  }
}

uint64_t BWPhotoEncoderIsLeftEyeFrameForCurrentRequest(void *a1)
{
  int v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53248]), "intValue");
  unsigned __int8 v11 = 0;
  int v3 = FigCaptureRotationDegreesAndMirroringFromExifOrientation(v2, (char *)&v11);
  int v4 = v11;
  int v5 = v3 | v11;
  uint64_t v6 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if (v4) {
    BOOL v7 = v3 == 180;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v8 = v7 || v5 == 0;
  int v9 = (void *)MEMORY[0x1E4F52DD8];
  if (v8) {
    int v9 = (void *)MEMORY[0x1E4F52DE8];
  }
  return [v6 isEqualToString:*v9];
}

BOOL BWPhotoEncoderIsPrimaryFrame(int a1)
{
  return (a1 & 0x100000) == 0;
}

__CFString *BWPhotoEncoderStringForPhotoEncoderNodeAttachedMediaPropagationMode(uint64_t a1)
{
  uint64_t v1 = @"Propagate Only";
  if (a1 == 1) {
    uint64_t v1 = @"Encode Only";
  }
  if (a1 == 2) {
    return @"Propagate And Encode";
  }
  else {
    return v1;
  }
}

void *BWPhotoEncoderEncodingOptionsForAuxiliaryImage(unint64_t a1, unint64_t a2, void *a3, int a4, uint64_t a5)
{
  if (!a1 || !a2)
  {
    FigDebugAssert3();
    return 0;
  }
  uint64_t v6 = a3;
  if (!a3) {
    return v6;
  }
  int v10 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F24CE8]), "intValue");
  if (!(v10 | objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E4F24CD0]), "intValue")))return 0; {
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  uint64_t v6 = v11;
  if (v11)
  {
    [v11 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F56198]];
    v15.size.double width = (double)a1;
    v15.size.double height = (double)a2;
    v15.origin.double x = 0.0;
    v15.origin.double y = 0.0;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v15);
    [v6 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F56170]];

    if (a4) {
      [v6 setObject:&unk_1EFAFDCE0 forKeyedSubscript:*MEMORY[0x1E4F56140]];
    }
    uint64_t v13 = [NSNumber numberWithUnsignedInt:a5];
    [v6 setObject:v13 forKeyedSubscript:*MEMORY[0x1E4F56178]];
  }
  else
  {
    FigDebugAssert3();
  }
  return v6;
}

uint64_t BWPhotoEncoderTonemapItemMetadataFromGainMapMetadata(void *a1, void *a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v5 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532C8], @"TonemapBaseHDRHeadroom", v4);
  if (v5)
  {
    uint64_t v13 = v5;
LABEL_18:
    FigDebugAssert3();
    return v13;
  }
  uint64_t v6 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532B8], @"TonemapAlternateHDRHeadroom", v4);
  if (v6)
  {
    uint64_t v13 = v6;
    goto LABEL_18;
  }
  BOOL v7 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v8 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532F0], @"GainMapMin", v7);
  if (v8)
  {
    uint64_t v13 = v8;
    goto LABEL_18;
  }
  uint64_t v9 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532E0], @"GainMapMax", v7);
  if (v9)
  {
    uint64_t v13 = v9;
    goto LABEL_18;
  }
  uint64_t v10 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532D8], @"Gamma", v7);
  if (v10)
  {
    uint64_t v13 = v10;
    goto LABEL_18;
  }
  uint64_t v11 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532D0], @"BaseOffset", v7);
  if (v11)
  {
    uint64_t v13 = v11;
    goto LABEL_18;
  }
  uint64_t v12 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E4F532C0], @"AlternateOffset", v7);
  if (v12)
  {
    uint64_t v13 = v12;
    goto LABEL_18;
  }
  v15[0] = v7;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v15, 1), @"TonemapChannelMetadata");
  [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"TonemapBaseColorIsWorkingColor"];
  uint64_t v13 = 0;
  if (a2) {
    *a2 = v4;
  }
  return v13;
}

uint64_t BWPhotoEncoderAddKeyAsRationalToDict(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v8 = (void *)[a1 objectForKeyedSubscript:a2];
  if (v8)
  {
    [v8 doubleValue];
    LODWORD(v10) = llround(v9 * 1000000.0);
    v12[0] = [NSNumber numberWithInt:v10];
    v12[1] = &unk_1EFAFDCF8;
    objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 2), a3);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294950306;
  }
}

uint64_t BWPhotoEncoderCreateGTCColorSpaceFromGainMapMetadata(void *a1, uint64_t a2, int a3, void *a4)
{
  if (!a1 || !a2) {
    goto LABEL_28;
  }
  uint64_t v8 = [MEMORY[0x1E4F1CA60] dictionary];
  if (!v8) {
    goto LABEL_29;
  }
  double v9 = (void *)v8;
  CFUUIDRef v10 = CFUUIDCreate(0);
  if (!v10) {
    goto LABEL_29;
  }
  CFUUIDRef v11 = v10;
  [v9 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F1A708]];
  CFRelease(v11);
  uint64_t v12 = *MEMORY[0x1E4F532B8];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532B8]]) {
    goto LABEL_28;
  }
  uint64_t v13 = [a1 objectForKeyedSubscript:v12];
  [v9 setObject:v13 forKeyedSubscript:*MEMORY[0x1E4F1A728]];
  uint64_t v14 = *MEMORY[0x1E4F532C8];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532C8]]) {
    goto LABEL_28;
  }
  uint64_t v15 = [a1 objectForKeyedSubscript:v14];
  [v9 setObject:v15 forKeyedSubscript:*MEMORY[0x1E4F1A718]];
  uint64_t v16 = *MEMORY[0x1E4F532C0];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532C0]]) {
    goto LABEL_28;
  }
  uint64_t v17 = [a1 objectForKeyedSubscript:v16];
  [v9 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F1A720]];
  uint64_t v18 = *MEMORY[0x1E4F532D0];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532D0]]) {
    goto LABEL_28;
  }
  uint64_t v19 = [a1 objectForKeyedSubscript:v18];
  [v9 setObject:v19 forKeyedSubscript:*MEMORY[0x1E4F1A710]];
  uint64_t v20 = *MEMORY[0x1E4F532D8];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532D8]]) {
    goto LABEL_28;
  }
  uint64_t v21 = [a1 objectForKeyedSubscript:v20];
  [v9 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F1A730]];
  uint64_t v22 = *MEMORY[0x1E4F532F0];
  if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532F0]]
    || (double v23 = NSNumber,
        objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v22), "floatValue"),
        *(float *)&double v25 = -v24,
        uint64_t v26 = [v23 numberWithFloat:v25],
        [v9 setObject:v26 forKeyedSubscript:*MEMORY[0x1E4F1A740]],
        uint64_t v27 = *MEMORY[0x1E4F532E0],
        ![a1 objectForKeyedSubscript:*MEMORY[0x1E4F532E0]]))
  {
LABEL_28:
    FigDebugAssert3();
    return 4294950306;
  }
  CMTime v28 = NSNumber;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v27), "floatValue");
  *(float *)&double v30 = -v29;
  uint64_t v31 = [v28 numberWithFloat:v30];
  [v9 setObject:v31 forKeyedSubscript:*MEMORY[0x1E4F1A738]];
  long long v32 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (!v32)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294950305;
  }
  long long v33 = v32;
  [v32 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F1A758]];
  [v33 setObject:a2 forKeyedSubscript:*MEMORY[0x1E4F1A750]];
  uint64_t v34 = (CFStringRef *)MEMORY[0x1E4F1A6E8];
  if (!a3) {
    uint64_t v34 = (CFStringRef *)MEMORY[0x1E4F1A748];
  }
  ColorSyncProfileRef v35 = ColorSyncProfileCreateWithName(*v34);
  if (v35)
  {
    ColorSyncProfileRef v36 = v35;
    uint64_t CopyWithFlexGTC = ColorSyncProfileCreateCopyWithFlexGTC();
    if (CopyWithFlexGTC)
    {
      __int16 v38 = (const void *)CopyWithFlexGTC;
      CFNumberRef v39 = (const void *)MEMORY[0x1A626F820](CopyWithFlexGTC, 0);
      if (v39)
      {
        if (a4)
        {
          uint64_t v40 = 0;
          *a4 = v39;
        }
        else
        {
          CFRelease(v39);
          uint64_t v40 = 0;
        }
      }
      else
      {
        FigDebugAssert3();
        uint64_t v40 = FigSignalErrorAt();
      }
      CFRelease(v38);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v40 = FigSignalErrorAt();
    }
    CFRelease(v36);
    return v40;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

double BWPhotoEncoderDenormalizedZoomRectForAttachedMedia(opaqueCMSampleBuffer *a1, double a2, double a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v6 = (long long *)MEMORY[0x1E4F1DB20];
  double x = *MEMORY[0x1E4F1DB20];
  if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0))
  {
    long long v22 = *v6;
    long long v23 = v6[1];
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      long long v22 = 0uLL;
      __asm { FMOV            V0.2D, #1.0 }
      long long v23 = _Q0;
    }
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a1);
    if (ImageBuffer)
    {
      uint64_t v14 = ImageBuffer;
      size_t Width = CVPixelBufferGetWidth(ImageBuffer);
      size_t Height = CVPixelBufferGetHeight(v14);
      if (a3 != 0.0)
      {
        if (Width)
        {
          unint64_t v17 = Height;
          if (Height)
          {
            v24.origin.double x = FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRectForAttachedMedia(Width, Height, *(CGFloat *)&v22, *((CGFloat *)&v22 + 1), *(CGFloat *)&v23, *((CGFloat *)&v23 + 1), a2, a3);
            double x = v24.origin.x;
            CGFloat y = v24.origin.y;
            CGFloat v19 = v24.size.width;
            CGFloat v20 = v24.size.height;
            if (CGRectIsNull(v24))
            {
              FigDebugAssert3();
            }
            else
            {
              v25.origin.double x = 0.0;
              v25.origin.CGFloat y = 0.0;
              v25.size.double width = (double)Width;
              v25.size.double height = (double)v17;
              v27.origin.double x = x;
              v27.origin.CGFloat y = y;
              v27.size.double width = v19;
              v27.size.double height = v20;
              if (!CGRectContainsRect(v25, v27))
              {
                v28.origin.double x = 0.0;
                v28.origin.CGFloat y = 0.0;
                v26.origin.double x = x;
                v26.origin.CGFloat y = y;
                v26.size.double width = v19;
                v26.size.double height = v20;
                v28.size.double width = (double)Width;
                v28.size.double height = (double)v17;
                *(void *)&double x = (unint64_t)CGRectIntersection(v26, v28);
              }
            }
          }
        }
      }
    }
  }
  return x;
}

uint64_t BWPhotoEncoderAddGainMapQualityControllerParametersToEncodingOptions(void *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  [a1 setObject:&unk_1EFAFDD10 forKeyedSubscript:*MEMORY[0x1E4F56158]];
  uint64_t v4 = *MEMORY[0x1E4F56358];
  v5[0] = &unk_1EFB05888;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  return [a1 setObject:v2 forKeyedSubscript:*MEMORY[0x1E4F56150]];
}

BOOL BWPhotoEncoderIsHighGainImage(BOOL result, int a2, int a3)
{
  if (result)
  {
    if (FigCaptureComputeImageGainFromMetadata())
    {
      return 0;
    }
    else if ((a2 - 3) <= 1 && a3)
    {
      return 1.0 >= 16.0;
    }
    else
    {
      if (a2 == 10) {
        BOOL v5 = 1.0 <= 32.0;
      }
      else {
        BOOL v5 = 1.0 <= 8.0;
      }
      return !v5;
    }
  }
  return result;
}

uint64_t BWPhotoEncoderDefaultJPEGIndexedQTable(__CVBuffer *a1, BOOL a2, int a3, int *a4, unsigned char *a5, int a6)
{
  BOOL IsHighGainImage = BWPhotoEncoderIsHighGainImage(a2, a3, a6);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  if (a4)
  {
    int v12 = Height * Width > 0xF423FF || IsHighGainImage;
    if (Height >= 0xBD1 || Height <= 0x77F || Width - 3265 >= 0x3C0) {
      int v15 = 5;
    }
    else {
      int v15 = 2;
    }
    if (v12) {
      int v16 = 0;
    }
    else {
      int v16 = v15;
    }
    *a4 = v16;
  }
  if (a5) {
    *a5 = IsHighGainImage;
  }
  return 0;
}

__CFString *BWPhotoEncoderTranscodeQualityHintFromQuantizationTableIndex(unsigned int a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return off_1E5C24770[a1];
  }
}

uint64_t BWPhotoEncoderAuxImageTypeForDepthPixelFormat(int a1)
{
  if (a1 <= 1717856626)
  {
    if (a1 == 825306677 || a1 == 825437747) {
      return 0;
    }
    int v2 = 1717855600;
    goto LABEL_8;
  }
  uint64_t v1 = 2;
  if (a1 > 1751411058)
  {
    if (a1 == 1751411059) {
      return v1;
    }
    return 0;
  }
  if (a1 != 1717856627)
  {
    int v2 = 1751410032;
LABEL_8:
    if (a1 == v2) {
      return 3;
    }
    return 0;
  }
  return v1;
}

uint64_t BWPhotoEncoderFacePrintInferenceVersion()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  return BWInferenceVersionMakeMajor(2);
}

uint64_t BWPhotoEncoderSemanticSegmentationMatteURNForAttachedMediaKey(void *a1)
{
  if ([a1 isEqualToString:@"PersonSemanticsHair"])
  {
    uint64_t v2 = MEMORY[0x1E4F55FC8];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:@"PersonSemanticsSkin"])
  {
    uint64_t v2 = MEMORY[0x1E4F55FD0];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:@"PersonSemanticsTeeth"])
  {
    uint64_t v2 = MEMORY[0x1E4F55FE0];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:@"PersonSemanticsGlasses"])
  {
    uint64_t v2 = MEMORY[0x1E4F55FC0];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:0x1EFA745A0]) {
    return *MEMORY[0x1E4F55FD8];
  }
  else {
    return 0;
  }
}

uint64_t BWPhotoEncoderNodeAuxImageTypeForSemanticMatteAttachedMediaKey(void *a1)
{
  if ([a1 isEqualToString:@"PersonSemanticsHair"]) {
    return 5;
  }
  if ([a1 isEqualToString:@"PersonSemanticsSkin"]) {
    return 6;
  }
  if ([a1 isEqualToString:@"PersonSemanticsTeeth"]) {
    return 7;
  }
  if ([a1 isEqualToString:@"PersonSemanticsGlasses"]) {
    return 8;
  }
  if ([a1 isEqualToString:0x1EFA745A0]) {
    return 9;
  }
  return 0;
}

__CFString *BWPhotoEncoderAttachedMediaKeyForSemanticSegmentationMatteURN(void *a1)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F55FC8]]) {
    return @"PersonSemanticsHair";
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55FD0]]) {
    return @"PersonSemanticsSkin";
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55FE0]]) {
    return @"PersonSemanticsTeeth";
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F55FC0]]) {
    return @"PersonSemanticsGlasses";
  }
  return 0;
}

BOOL BWPhotoEncoderSupportsAddingAuxiliaryMetadataSeparately(int a1)
{
  return (a1 - 5) < 0xFFFFFFFE;
}

uint64_t BWPhotoEncoderSmartStyleCastIsSystemStyle(void *a1)
{
  if (([a1 isEqual:FigSmartStyleCastTypeStandard] & 1) != 0
    || ([a1 isEqual:FigSmartStyleCastTypeNeutral] & 1) != 0
    || ([a1 isEqual:FigSmartStyleCastTypeBlushWarm] & 1) != 0
    || ([a1 isEqual:FigSmartStyleCastTypeGoldWarm] & 1) != 0
    || ([a1 isEqual:FigSmartStyleCastTypeTanWarm] & 1) != 0
    || ([a1 isEqual:FigSmartStyleCastTypeCool] & 1) != 0)
  {
    return 1;
  }
  if (([a1 isEqual:FigSmartStyleCastTypeNoFilter] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeWarmAuthentic] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeColorful] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeEarthy] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeCloudCover] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeUrbanCool] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeDreamyHues] & 1) == 0
    && ([a1 isEqual:FigSmartStyleCastTypeStarkBW] & 1) == 0)
  {
    [a1 isEqual:FigSmartStyleCastTypeLongGray];
  }
  return 0;
}

float BWPhotoEncoderHEIFDeltaMapDownscalingFactor()
{
  return 1.4142;
}

float BWPhotoEncoderHEIFDeltaMapQuality(void *a1)
{
  int IsSystemStyle = BWPhotoEncoderSmartStyleCastIsSystemStyle((void *)[a1 cast]);
  float result = 0.6;
  if (IsSystemStyle) {
    return *(float *)"fff?";
  }
  return result;
}

uint64_t BWPhotoEncoderDeltaMapPixelFormat(void *a1, int a2)
{
  unsigned int v4 = 641230384;
  BOOL v5 = (void *)[a1 cast];
  if (([v5 isEqual:FigSmartStyleCastTypeStarkBW] & 1) != 0
    || (uint64_t v6 = (void *)[a1 cast], objc_msgSend(v6, "isEqual:", FigSmartStyleCastTypeLongGray)))
  {
    unsigned int v4 = 641230388;
    unsigned int v7 = 645424692;
  }
  else
  {
    unsigned int v7 = 645424688;
  }
  if (a2 == 1) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t BWPhotoEncoderDecompressStyledImageForDeltaMap(void *a1, char a2)
{
  if (a2) {
    return 0;
  }
  else {
    return BWPhotoEncoderSmartStyleCastIsSystemStyle(objc_msgSend(a1, "cast", v2, v3)) ^ 1;
  }
}

double scaleHomography(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5)
{
  uint64_t v5 = 0;
  float v7 = a5;
  long long v16 = xmmword_1A5DBD350;
  float32x4_t v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v17 + v5 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(v15[v5])), a2, *(float32x2_t *)&v15[v5], 1), a3, (float32x4_t)v15[v5], 2);
    ++v5;
  }
  while (v5 != 3);
  uint64_t v8 = 0;
  v9.i64[1] = 0;
  *(float *)&unsigned int v6 = a4;
  v9.i64[0] = v6;
  v10.i32[0] = 0;
  v10.i64[1] = 0;
  v10.f32[1] = v7;
  float32x4_t v13 = v17;
  long long v11 = v18;
  long long v12 = v19;
  v13.i32[3] = 0;
  HIDWORD(v11) = 0;
  HIDWORD(v12) = 0;
  v15[0] = v13;
  v15[1] = v11;
  long long v16 = v12;
  float32x4_t v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v17 + v8 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v15[v8])), v10, *(float32x2_t *)&v15[v8], 1), (float32x4_t)xmmword_1A5DBD350, (float32x4_t)v15[v8], 2);
    ++v8;
  }
  while (v8 != 3);
  if (fabsf(*((float *)&v19 + 2)) > 0.00000001) {
    v13.i64[0] = vmulq_n_f32(v17, 1.0 / *((float *)&v19 + 2)).u64[0];
  }
  return *(double *)v13.i64;
}

double bwsc_convertHomographyToPixelCoordinates(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  v34.columns[0] = (simd_float3)*MEMORY[0x1E4F14998];
  __asm { FMOV            V2.4S, #-1.0 }
  _Q2.i32[2] = *(void *)(MEMORY[0x1E4F14998] + 24);
  long long v25 = *(_OWORD *)(MEMORY[0x1E4F14998] + 16);
  _Q2.i32[0] = v25;
  simd_float3 v27 = *(simd_float3 *)(MEMORY[0x1E4F14998] + 32);
  _Q2.i32[3] = HIDWORD(v25);
  v34.columns[1] = _Q2;
  simd_float3 v15 = *(simd_float3 *)MEMORY[0x1E4F14998];
  simd_float3 v16 = _Q2;
  __asm { FMOV            V2.4S, #1.0 }
  v34.columns[2].i32[0] = v27.i32[0];
  v34.columns[2].i64[1] = *(void *)(MEMORY[0x1E4F14998] + 40);
  simd_float3 v17 = v34.columns[2];
  simd_float3x3 v35 = __invert_f3(v34);
  uint64_t v10 = 0;
  simd_float3 v28 = v15;
  simd_float3 v29 = v16;
  simd_float3 v30 = v17;
  float32x4_t v31 = 0u;
  float32x4_t v32 = 0u;
  float32x4_t v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v10 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v10 * 4))), a3, *(float32x2_t *)&v28.f32[v10], 1), a4, *(float32x4_t *)((char *)&v28 + v10 * 4), 2);
    v10 += 4;
  }
  while (v10 != 12);
  uint64_t v11 = 0;
  simd_float3 v28 = (simd_float3)v31;
  simd_float3 v29 = (simd_float3)v32;
  simd_float3 v30 = (simd_float3)v33;
  float32x4_t v31 = 0u;
  float32x4_t v32 = 0u;
  float32x4_t v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v11 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v35.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v11 * 4))), (float32x4_t)v35.columns[1], *(float32x2_t *)&v28.f32[v11], 1), (float32x4_t)v35.columns[2], *(float32x4_t *)((char *)&v28 + v11 * 4), 2);
    v11 += 4;
  }
  while (v11 != 12);
  float32x4_t v22 = v32;
  float32x4_t v24 = v31;
  v36.columns[0].f32[0] = 1.0 / (float)(int)a1;
  v36.columns[0].i32[1] = v15.i32[1];
  v36.columns[0].i64[1] = v15.i64[1];
  simd_float3 v18 = v36.columns[0];
  float32x4_t v20 = v33;
  v36.columns[1].i32[0] = v25;
  v36.columns[1].f32[1] = 1.0 / (float)SHIDWORD(a1);
  v36.columns[1].i64[1] = *((void *)&v25 + 1);
  simd_float3 v26 = v36.columns[1];
  v36.columns[2] = v27;
  simd_float3x3 v37 = __invert_f3(v36);
  uint64_t v12 = 0;
  simd_float3 v28 = v18;
  simd_float3 v29 = v26;
  simd_float3 v30 = v27;
  float32x4_t v31 = 0u;
  float32x4_t v32 = 0u;
  float32x4_t v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v12 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v12 * 4))), v22, *(float32x2_t *)&v28.f32[v12], 1), v20, *(float32x4_t *)((char *)&v28 + v12 * 4), 2);
    v12 += 4;
  }
  while (v12 != 12);
  uint64_t v13 = 0;
  simd_float3 v28 = (simd_float3)v31;
  simd_float3 v29 = (simd_float3)v32;
  simd_float3 v30 = (simd_float3)v33;
  float32x4_t v31 = 0u;
  float32x4_t v32 = 0u;
  float32x4_t v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v13 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v37.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v13 * 4))), (float32x4_t)v37.columns[1], *(float32x2_t *)&v28.f32[v13], 1), (float32x4_t)v37.columns[2], *(float32x4_t *)((char *)&v28 + v13 * 4), 2);
    v13 += 4;
  }
  while (v13 != 12);
  return *(double *)v31.i64;
}

void *BWSemanticStyleFiltersForSemanticStyleAndFilterToCombine(void *a1, unsigned int a2, int a3, int a4, int a5, void *a6, uint64_t a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return (void *)MEMORY[0x1E4F1CBF0];
  }
  uint64_t v13 = (void *)MEMORY[0x1E4F1E018];
  v52[0] = *MEMORY[0x1E4F1E248];
  uint64_t v14 = [NSNumber numberWithInt:*MEMORY[0x1E4F1E300]];
  v52[1] = @"kCIContextIOSurfaceMemoryPoolID";
  v53[0] = v14;
  v53[1] = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", -[BWMemoryPool poolIdentifier](+[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"), "poolIdentifier"));
  simd_float3 v15 = objc_msgSend(v13, "contextWithOptions:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v53, v52, 2));
  if (a3)
  {
    simd_float3 v16 = sscc_colorCubesForSemanticStyle(a1, a2, 1, a6);
    simd_float3 v17 = sscc_colorCubeFiltersForColorCubes(v16, a2, a4, a5);
    simd_float3 v18 = sscc_colorCubesForSemanticStyle(a1, a2, 0, a6);
    long long v19 = sscc_colorCubeFiltersForColorCubes(v18, a2, a4, a5);
    if (a7)
    {
      simd_float3 v17 = (void *)[v17 arrayByAddingObjectsFromArray:a7];
      long long v19 = (void *)[v19 arrayByAddingObjectsFromArray:a7];
    }
    uint64_t v20 = [v15 createColorCubeDataForFilters:v17 dimension:32];
    uint64_t v21 = [v15 createColorCubeDataForFilters:v19 dimension:32];
    if (a4) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = v21;
    }
    if (a5) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v20;
    }
    uint64_t v51 = v21;
    float32x4_t v24 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v51 count:1];
    uint64_t v50 = v23;
    long long v25 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v50 count:1];
    unsigned int v44 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id obj = v24;
    uint64_t v26 = [v24 countByEnumeratingWithState:&v45 objects:v54 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      int v28 = 0;
      uint64_t v29 = *(void *)v46;
      simd_float3 v30 = @"-forced-to-background";
      int v31 = a4 | a5;
      if (a4) {
        simd_float3 v30 = @"-mask-visualization";
      }
      uint64_t v41 = v30;
      CFStringRef v32 = (const __CFString *)*MEMORY[0x1E4F1DB90];
      do
      {
        uint64_t v33 = 0;
        uint64_t v34 = v28;
        do
        {
          if (*(void *)v46 != v29) {
            objc_enumerationMutation(obj);
          }
          uint64_t v35 = *(void *)(*((void *)&v45 + 1) + 8 * v33);
          simd_float3x3 v36 = (void *)[MEMORY[0x1E4F1E040] colorCubesMixedWithMaskFilter];
          simd_float3x3 v37 = @"semanticStyleSceneType-unknown";
          if (a2 <= 3) {
            simd_float3x3 v37 = off_1E5C247A0[a2];
          }
          if (v31) {
            simd_float3x3 v37 = (__CFString *)[(__CFString *)v37 stringByAppendingString:v41];
          }
          [v36 setName:v37];
          [v36 setCubeDimension:8589936700.0];
          CGColorSpaceRef v38 = CGColorSpaceCreateWithName(v32);
          [v36 setColorSpace:CFAutorelease(v38)];
          [v36 setCube0Data:v35];
          objc_msgSend(v36, "setCube1Data:", objc_msgSend(v25, "objectAtIndexedSubscript:", v34 + v33));
          [v44 addObject:v36];
          ++v33;
        }
        while (v27 != v33);
        uint64_t v27 = [obj countByEnumeratingWithState:&v45 objects:v54 count:16];
        int v28 = v34 + v33;
      }
      while (v27);
    }
  }
  else
  {
    CFNumberRef v39 = sscc_colorCubesForSemanticStyle(a1, a2, 0, a6);
    uint64_t v49 = objc_msgSend(v15, "createColorCubeDataForFilters:dimension:", sscc_colorCubeFiltersForColorCubes(v39, a2, a4, a5), 32);
    return sscc_colorCubeFiltersForColorCubes((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v49 count:1], a2, a4, a5);
  }
  return v44;
}

void *sscc_colorCubeFiltersForColorCubes(void *a1, unsigned int a2, int a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v9 = [a1 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    uint64_t v12 = @"-forced-to-background";
    int v13 = a3 | a4;
    if (a3) {
      uint64_t v12 = @"-mask-visualization";
    }
    uint64_t v21 = v12;
    CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1DB90];
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(a1);
        }
        uint64_t v16 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        simd_float3 v17 = (void *)[MEMORY[0x1E4F1E040] colorCubeWithColorSpaceFilter];
        simd_float3 v18 = @"semanticStyleSceneType-unknown";
        if (a2 <= 3) {
          simd_float3 v18 = off_1E5C247A0[a2];
        }
        if (v13) {
          simd_float3 v18 = (__CFString *)[(__CFString *)v18 stringByAppendingString:v21];
        }
        [v17 setName:v18];
        [v17 setCubeDimension:8589936700.0];
        CGColorSpaceRef v19 = CGColorSpaceCreateWithName(v14);
        [v17 setColorSpace:CFAutorelease(v19)];
        [v17 setCubeData:v16];
        [v8 addObject:v17];
      }
      uint64_t v10 = [a1 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }
  return v8;
}

void *sscc_colorCubesForSemanticStyle(void *a1, int a2, int a3, void *a4)
{
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
  [a1 mappedToneBias];
  float v10 = v9;
  switch(a2)
  {
    case 0:
      uint64_t v11 = (void *)MEMORY[0x1E4F1C9B8];
      if (v9 <= 0.0) {
        uint64_t v12 = &sBWSemanticStyleIndoorSceneToneBiasMinusOneCubeData;
      }
      else {
        uint64_t v12 = &sBWSemanticStyleIndoorSceneToneBiasPlusOneCubeData;
      }
      goto LABEL_14;
    case 1:
      uint64_t v11 = (void *)MEMORY[0x1E4F1C9B8];
      if (v9 <= 0.0) {
        uint64_t v12 = &sBWSemanticStyleFoodSceneToneBiasMinusOneCubeData;
      }
      else {
        uint64_t v12 = &sBWSemanticStyleFoodSceneToneBiasPlusOneCubeData;
      }
      goto LABEL_14;
    case 2:
      uint64_t v11 = (void *)MEMORY[0x1E4F1C9B8];
      if (v9 <= 0.0) {
        uint64_t v12 = &sBWSemanticStyleOutdoorSceneToneBiasMinusOneCubeData;
      }
      else {
        uint64_t v12 = &sBWSemanticStyleOutdoorSceneToneBiasPlusOneCubeData;
      }
      goto LABEL_14;
    case 3:
      uint64_t v11 = (void *)MEMORY[0x1E4F1C9B8];
      if (v9 <= 0.0) {
        uint64_t v12 = &sBWSemanticStyleSunsetSceneToneBiasMinusOneCubeData;
      }
      else {
        uint64_t v12 = &sBWSemanticStyleSunsetSceneToneBiasPlusOneCubeData;
      }
LABEL_14:
      uint64_t v13 = [v11 dataWithBytesNoCopy:v12 length:0x20000 freeWhenDone:0];
      if (!v13) {
        goto LABEL_15;
      }
      goto LABEL_19;
    default:
LABEL_15:
      if (v10 <= 0.0) {
        CFStringRef v14 = &sBWSemanticStyleIndoorSceneToneBiasMinusOneCubeData;
      }
      else {
        CFStringRef v14 = &sBWSemanticStyleIndoorSceneToneBiasPlusOneCubeData;
      }
      uint64_t v13 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v14 length:0x20000 freeWhenDone:0];
LABEL_19:
      float v15 = fabsf(v10);
      if (a3) {
        float v16 = v15 * 0.2;
      }
      else {
        float v16 = v15;
      }
      uint64_t v17 = [a4 identityColorLookupTable];
      *(float *)&double v18 = v16;
      objc_msgSend(v8, "addObject:", objc_msgSend(a4, "interpolatedColorLookupTableFromTable:toTable:fractionComplete:", v17, v13, v18));
      [a1 mappedWarmthBias];
      if (v19 >= 0.0) {
        uint64_t v20 = &sBWSemanticStyleWarmthBiasPlusOneCubeData;
      }
      else {
        uint64_t v20 = &sBWSemanticStyleWarmthBiasMinusOneCubeData;
      }
      float v21 = 0.4;
      if (v19 <= 0.0) {
        float v21 = 0.5;
      }
      float v22 = fabsf(v19);
      if (a3) {
        float v23 = v21;
      }
      else {
        float v23 = 1.0;
      }
      uint64_t v24 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v20 length:0x20000 freeWhenDone:0];
      uint64_t v25 = [a4 identityColorLookupTable];
      *(float *)&double v26 = v22 * v23;
      objc_msgSend(v8, "addObject:", objc_msgSend(a4, "interpolatedColorLookupTableFromTable:toTable:fractionComplete:", v25, v24, v26));
      return v8;
  }
}

_DWORD *fdvc_buildForest(void *a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x10200406C4767B9uLL);
  uint64_t v3 = (void *)[a1 objectForKeyedSubscript:@"trees"];
  v2[6] = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"nFeatures"), "intValue");
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"threshold"), "doubleValue");
  *((void *)v2 + 2) = v4;
  int v5 = [v3 count];
  v2[7] = v5;
  *(void *)uint64_t v2 = malloc_type_malloc(16 * v5, 0x10200403A5D3213uLL);
  size_t v6 = [v3 count];
  if (v6)
  {
    unint64_t v7 = 0;
    int v8 = 0;
    do
      v8 += objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", v7++), "objectForKeyedSubscript:", @"nodes"), "count");
    while ([v3 count] > v7);
    size_t v6 = 24 * v8;
  }
  float v9 = (char *)malloc_type_malloc(v6, 0x10000401E56706BuLL);
  *((void *)v2 + 1) = v9;
  if ([v3 count])
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)[v3 objectAtIndexedSubscript:v10];
      uint64_t v12 = *(void *)v2 + 16 * v10;
      uint64_t v13 = (void *)[v11 objectForKeyedSubscript:@"nodes"];
      *(_DWORD *)(v12 + _Block_object_dispose(&STACK[0x4E0], 8) = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"maxDepth"), "intValue");
      *(void *)uint64_t v12 = v9;
      if ([v13 count])
      {
        unint64_t v14 = 0;
        float v15 = v9 + 8;
        do
        {
          float v16 = (void *)[v13 objectAtIndex:v14];
          *((_DWORD *)v15 - 2) = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 0), "intValue");
          *((_DWORD *)v15 - 1) = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 1), "intValue");
          *(_DWORD *)float v15 = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 2), "intValue");
          objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 3), "doubleValue");
          *((void *)v15 + 1) = v17;
          ++v14;
          v15 += 24;
        }
        while ([v13 count] > v14);
      }
      v9 += 24 * (int)[v13 count];
      ++v10;
    }
    while ([v3 count] > v10);
  }
  return v2;
}

_DWORD *__FigDisplayedVitalityClassifierLoadModel_block_invoke()
{
  uint64_t v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture"), "URLForResource:withExtension:", @"DisplayedVitalityForest", @"plist");
  uint64_t v2 = 0;
  float result = (_DWORD *)[MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v0 error:&v2];
  if (result)
  {
    float result = fdvc_buildForest(result);
    FigDisplayedVitalityClassifierLoadModel_aForestClassifier = (uint64_t)result;
  }
  return result;
}

void FigDisplayedVitalityClassify(void *a1, int a2, double *a3, double *a4, double *a5, double a6)
{
  double v191 = a4;
  uint64_t v248 = *MEMORY[0x1E4F143B8];
  if (FigDisplayedVitalityClassifierLoadModel_once != -1) {
    dispatch_once(&FigDisplayedVitalityClassifierLoadModel_once, &__block_literal_global_5);
  }
  uint64_t v11 = FigDisplayedVitalityClassifierLoadModel_aForestClassifier;
  if ([a1 count])
  {
    uint64_t v192 = a3;
    float v190 = a5;
    size_t v12 = 72 * [a1 count];
    int v195 = malloc_type_malloc(v12, 0x9950293BuLL);
    uint64_t v193 = malloc_type_malloc(v12, 0xEA285674uLL);
    long long v196 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v199 = 0u;
    uint64_t v13 = [a1 countByEnumeratingWithState:&v196 objects:v205 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      int v15 = 0;
      uint64_t v16 = *(void *)v197;
      do
      {
        uint64_t v17 = 0;
        double v18 = (char *)v195 + 72 * v15;
        do
        {
          if (*(void *)v197 != v16) {
            objc_enumerationMutation(a1);
          }
          float v19 = *(void **)(*((void *)&v196 + 1) + 8 * v17);
          if ((unint64_t)[v19 length] <= 0x23) {
            FigDisplayedVitalityClassify_cold_2();
          }
          uint64_t v20 = [v19 bytes];
          for (uint64_t i = 0; i != 9; ++i)
            *(double *)&v18[8 * i] = *(float *)(v20 + 4 * i);
          ++v15;
          ++v17;
          v18 += 72;
        }
        while (v17 != v14);
        uint64_t v14 = [a1 countByEnumeratingWithState:&v196 objects:v205 count:16];
      }
      while (v14);
    }
    uint64_t v189 = v11;
    int v22 = [a1 count];
    float v23 = v193;
    *(void *)uint64_t v193 = 0x3FF0000000000000;
    v23[1] = 0;
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = 0x3FF0000000000000;
    void v23[5] = 0;
    v23[6] = 0;
    void v23[7] = 0;
    v23[8] = 0x3FF0000000000000;
    if (v22 >= 2)
    {
      int v24 = 1;
      uint64_t v25 = 9;
      double v26 = (char *)v195;
      do
      {
        uint64_t v27 = (double *)((char *)v195 + 8 * v25);
        double v28 = v27[7];
        double v29 = v27[8];
        double v30 = v27[4];
        double v31 = v27[5];
        double v32 = v30 * v29 - v28 * v31;
        double v224 = v32;
        double v33 = v27[1];
        double v34 = v27[2];
        double v35 = v28 * v34 - v33 * v29;
        double v36 = v33 * v31 - v30 * v34;
        double v225 = v35;
        double v226 = v36;
        double v37 = *v27;
        double v38 = v27[3];
        double v39 = v27[6];
        double v40 = v35 * v38 + *v27 * v32 + v39 * v36;
        if (v40 >= 2.22044605e-16 || v40 <= -2.22044605e-16)
        {
          double v224 = v32 / v40;
          double v225 = v35 / v40;
          double v226 = v36 / v40;
          double v227 = (v39 * v31 - v38 * v29) / v40;
          double v228 = (v37 * v29 - v39 * v34) / v40;
          double v229 = (v38 * v34 - v37 * v31) / v40;
          double v230 = (v38 * v28 - v39 * v30) / v40;
          double v231 = (v39 * v33 - v37 * v28) / v40;
          double v232 = (v37 * v30 - v38 * v33) / v40;
        }
        else
        {
          printf("FAILED: Matrix inversion.");
        }
        uint64_t v42 = 0;
        uint64_t v43 = v26;
        do
        {
          uint64_t v44 = 0;
          long long v45 = &v224;
          do
          {
            uint64_t v46 = 0;
            double v47 = 0.0;
            long long v48 = v45;
            do
            {
              double v49 = *v48;
              v48 += 3;
              double v47 = v47 + *(double *)&v43[v46] * v49;
              v46 += 8;
            }
            while (v46 != 24);
            *((double *)&v206 + 3 * v42 + v44++) = v47;
            ++v45;
          }
          while (v44 != 3);
          ++v42;
          v43 += 24;
        }
        while (v42 != 3);
        uint64_t v50 = (char *)v193 + 8 * v25;
        *((_OWORD *)v50 + 1) = v207;
        *((_OWORD *)v50 + 2) = v208;
        *((_OWORD *)v50 + 3) = v209;
        *((void *)v50 + _Block_object_dispose(&STACK[0x4E0], 8) = v210;
        *(_OWORD *)uint64_t v50 = v206;
        v25 += 9;
        ++v24;
        v26 += 72;
      }
      while (v24 != v22);
    }
    unsigned int v51 = [a1 count];
    int v52 = v51;
    int __pattern4 = 2143289344;
    if (v51)
    {
      uint64_t v194 = v51;
      uint64_t v53 = 8 * v51;
      size_t v54 = 72 * v51;
      uint64_t v55 = (double *)malloc_type_malloc(v54, 0xC6F7D147uLL);
      CFDictionaryRef v56 = malloc_type_malloc(v54, 0xE762A6C2uLL);
      memset_pattern4(v56, &__pattern4, v54);
      CFDictionaryRef v57 = (double *)malloc_type_malloc(8 * v52, 0x100004000313F17uLL);
      double v224 = 1.0;
      double v225 = 0.0;
      double v227 = 0.0;
      double v228 = 1.0;
      double v231 = 0.0;
      double v230 = 0.0;
      double v232 = 1.0;
      long long v243 = 0x3FF0000000000000uLL;
      long long v244 = 0uLL;
      *(void *)&long long v245 = 0x3FF0000000000000;
      long long v246 = 0uLL;
      uint64_t v247 = 0x3FF0000000000000;
      if (a2 >= 0) {
        int v58 = a2;
      }
      else {
        int v58 = a2 + 1;
      }
      double v226 = (double)(v58 >> 1);
      if ((int)v192 >= 0) {
        int v59 = (int)v192;
      }
      else {
        int v59 = v192 + 1;
      }
      double v229 = (double)(v59 >> 1);
      *(double *)&long long v244 = (double)-(v58 >> 1);
      *((double *)&v245 + 1) = (double)-(v59 >> 1);
      if (v52 >= 1)
      {
        int v60 = 0;
        __int16 v61 = v55;
        CFNumberRef v62 = (char *)v193;
        do
        {
          uint64_t v63 = 0;
          uint64_t v64 = v62;
          do
          {
            uint64_t v65 = 0;
            CFDataRef v66 = &v224;
            do
            {
              uint64_t v67 = 0;
              double v68 = 0.0;
              __int16 v69 = v66;
              do
              {
                double v70 = *v69;
                v69 += 3;
                double v68 = v68 + *(double *)&v64[v67] * v70;
                v67 += 8;
              }
              while (v67 != 24);
              *((double *)&v206 + 3 * v63 + v65++) = v68;
              ++v66;
            }
            while (v65 != 3);
            ++v63;
            v64 += 24;
          }
          while (v63 != 3);
          uint64_t v71 = 0;
          long long v240 = v208;
          long long v241 = v209;
          uint64_t v242 = v210;
          long long v239 = v207;
          long long v238 = v206;
          CFDictionaryRef v72 = &v243;
          do
          {
            uint64_t v73 = 0;
            CFNumberRef v74 = &v238;
            do
            {
              uint64_t v75 = 0;
              double v76 = 0.0;
              CFNumberRef v77 = (double *)v74;
              do
              {
                double v78 = *v77;
                v77 += 3;
                double v76 = v76 + *(double *)((char *)v72 + v75) * v78;
                v75 += 8;
              }
              while (v75 != 24);
              *((double *)&v206 + 3 * v71 + v73++) = v76;
              CFNumberRef v74 = (long long *)((char *)v74 + 8);
            }
            while (v73 != 3);
            ++v71;
            CFDictionaryRef v72 = (long long *)((char *)v72 + 24);
          }
          while (v71 != 3);
          *((_OWORD *)v61 + 1) = v207;
          *((_OWORD *)v61 + 2) = v208;
          *((_OWORD *)v61 + 3) = v209;
          *((void *)v61 + _Block_object_dispose(&STACK[0x4E0], 8) = v210;
          *(_OWORD *)__int16 v61 = v206;
          v61 += 9;
          v62 += 72;
          ++v60;
        }
        while (v60 != v52);
      }
      uint64_t v186 = (double *)v56;
      size_t v79 = 72 * v52;
      CFNumberRef v80 = (double *)malloc_type_malloc(v79, 0x100004000313F17uLL);
      CFNumberRef v81 = (char *)malloc_type_malloc(v79, 0x100004000313F17uLL);
      CFTypeID v82 = v81;
      if (v52 >= 1)
      {
        unint64_t v83 = 0;
        uint64_t v84 = v55 + 5;
        do
        {
          double v85 = *(v84 - 3) * v84[1];
          if (v85 >= 0.0 || (double v86 = *v84 * v84[2], v86 >= 0.0))
          {
            v57[v83 / 8] = -1.0;
            *(void *)&v81[v83] = 0xBFF0000000000000;
            double v87 = -1.0;
            CFDictionaryRef v88 = v80;
          }
          else
          {
            v57[v83 / 8] = 0.0;
            v80[v83 / 8] = v85 + v86;
            double v87 = *v84 * *v84 + *(v84 - 3) * *(v84 - 3);
            CFDictionaryRef v88 = (double *)v81;
          }
          v88[v83 / 8] = v87;
          v83 += 8;
          v84 += 9;
        }
        while (v53 != v83);
        uint64_t v89 = 0;
        int v90 = -1;
        do
        {
          if (v57[v89] >= 0.0)
          {
            double v91 = 0.0;
            int v92 = -3;
            double v93 = 0.0;
            do
            {
              uint64_t v94 = (v89 + v92);
              if ((int)v89 + v92 >= 0 && (int)v94 < v52)
              {
                double v95 = *(double *)&v81[8 * v94];
                if (v95 >= 0.0)
                {
                  double v93 = v93 + v80[v94];
                  double v91 = v91 + v95;
                }
              }
              ++v92;
            }
            while (v92 != 4);
            v57[v89] = sqrt(-v91 / v93);
            if (v90 < 0) {
              int v90 = v89;
            }
          }
          else if (v89)
          {
            v57[v89] = v57[(v89 - 1)];
          }
          ++v89;
        }
        while (v89 != v194);
        if (v90 >= 1)
        {
          float v96 = v57;
          uint64_t v97 = v90;
          do
          {
            *v96++ = v57[v90];
            --v97;
          }
          while (v97);
        }
      }
      uint64_t v192 = v57;
      CFArrayRef v187 = v55;
      free(v80);
      free(v82);
      v185[7] = v185;
      v203[2] = 3;
      v203[3] = 3;
      v203[0] = 3;
      v203[1] = 3;
      int v201 = 100;
      int v202 = 0;
      uint64_t v242 = 0;
      long long v241 = 0u;
      long long v240 = 0u;
      long long v239 = 0u;
      long long v238 = 0u;
      uint64_t v237 = 0;
      long long v236 = 0u;
      long long v235 = 0u;
      long long v234 = 0u;
      long long v233 = 0u;
      __int16 v204 = 65;
      v223[0] = 0x3FF0000000000000;
      memset(&v223[1], 0, 24);
      v223[4] = 0x3FF0000000000000;
      memset(&v223[5], 0, 24);
      v222[0] = 0x3FF0000000000000;
      memset(&v222[1], 0, 24);
      v222[4] = 0x3FF0000000000000;
      memset(&v222[5], 0, 24);
      uint64_t v188 = malloc_type_malloc(v79, 0x100004000313F17uLL);
      if (v52 >= 1)
      {
        uint64_t v98 = 0;
        int v100 = v187;
        CFArrayRef v99 = v188;
        do
        {
          uint64_t v101 = 0;
          double v102 = v192[v98];
          *(double *)&v222[8] = 1.0 / v102;
          *(double *)&v223[8] = v102;
          uint64_t v103 = v100;
          do
          {
            uint64_t v104 = 0;
            uint64_t v105 = (double *)v222;
            do
            {
              uint64_t v106 = 0;
              double v107 = 0.0;
              CMTime v108 = v105;
              do
              {
                double v109 = *v108;
                v108 += 3;
                double v107 = v107 + v103[v106++] * v109;
              }
              while (v106 != 3);
              *((double *)&v243 + 3 * v101 + v104++) = v107;
              ++v105;
            }
            while (v104 != 3);
            ++v101;
            v103 += 3;
          }
          while (v101 != 3);
          uint64_t v110 = 0;
          v220[2] = v245;
          v220[3] = v246;
          uint64_t v221 = v247;
          v220[1] = v244;
          v220[0] = v243;
          double v111 = v223;
          do
          {
            uint64_t v112 = 0;
            uint64_t v113 = v220;
            do
            {
              uint64_t v114 = 0;
              double v115 = 0.0;
              int v116 = (double *)v113;
              do
              {
                double v117 = *v116;
                v116 += 3;
                double v115 = v115 + *(double *)&v111[v114++] * v117;
              }
              while (v114 != 3);
              *((double *)&v243 + 3 * v110 + v112++) = v115;
              uint64_t v113 = (_OWORD *)((char *)v113 + 8);
            }
            while (v112 != 3);
            ++v110;
            v111 += 3;
          }
          while (v110 != 3);
          uint64_t v211 = v243;
          uint64_t v215 = v245;
          uint64_t v212 = *((void *)&v244 + 1);
          uint64_t v213 = v246;
          uint64_t v214 = *((void *)&v243 + 1);
          uint64_t v216 = *((void *)&v246 + 1);
          uint64_t v219 = v247;
          uint64_t v217 = v244;
          uint64_t v218 = *((void *)&v245 + 1);
          long long v239 = 0uLL;
          long long v238 = 0x3FF0000000000000uLL;
          long long v240 = 0x3FF0000000000000uLL;
          long long v241 = 0uLL;
          uint64_t v242 = 0x3FF0000000000000;
          long long v234 = 0uLL;
          long long v233 = 0x3FF0000000000000uLL;
          long long v235 = 0x3FF0000000000000uLL;
          long long v236 = 0uLL;
          uint64_t v237 = 0x3FF0000000000000;
          v185[5] = &v202;
          v185[4] = &v224;
          v185[3] = &v201;
          v185[2] = &v206;
          v185[1] = v203;
          v185[0] = &v233;
          dgesdd_NEWLAPACK();
          if (v202)
          {
            long long v239 = 0uLL;
            long long v238 = 0x3FF0000000000000uLL;
            long long v240 = 0x3FF0000000000000uLL;
            long long v241 = 0uLL;
            uint64_t v242 = 0x3FF0000000000000;
            long long v234 = 0uLL;
            long long v233 = 0x3FF0000000000000uLL;
            long long v235 = 0x3FF0000000000000uLL;
            long long v236 = 0uLL;
            uint64_t v237 = 0x3FF0000000000000;
          }
          else
          {
            uint64_t v118 = *((void *)&v238 + 1);
            uint64_t v119 = v239;
            uint64_t v120 = *((void *)&v240 + 1);
            *((void *)&v238 + 1) = *((void *)&v239 + 1);
            *(void *)&long long v239 = v241;
            *((void *)&v239 + 1) = v118;
            *((void *)&v240 + 1) = *((void *)&v241 + 1);
            *(void *)&long long v241 = v119;
            *((void *)&v241 + 1) = v120;
            uint64_t v121 = *((void *)&v233 + 1);
            uint64_t v122 = v234;
            uint64_t v123 = *((void *)&v235 + 1);
            *((void *)&v233 + 1) = *((void *)&v234 + 1);
            *(void *)&long long v234 = v236;
            *((void *)&v234 + 1) = v121;
            *((void *)&v235 + 1) = *((void *)&v236 + 1);
            *(void *)&long long v236 = v122;
            *((void *)&v236 + 1) = v123;
          }
          uint64_t v124 = 0;
          BOOL v125 = &v238;
          do
          {
            uint64_t v126 = 0;
            uint64_t v127 = &v233;
            do
            {
              uint64_t v128 = 0;
              double v129 = 0.0;
              CFRange v130 = (double *)v127;
              do
              {
                double v131 = *v130;
                v130 += 3;
                double v129 = v129 + *(double *)((char *)v125 + v128) * v131;
                v128 += 8;
              }
              while (v128 != 24);
              *((double *)&v243 + 3 * v124 + v126++) = v129;
              uint64_t v127 = (long long *)((char *)v127 + 8);
            }
            while (v126 != 3);
            ++v124;
            BOOL v125 = (long long *)((char *)v125 + 24);
          }
          while (v124 != 3);
          long long v132 = v246;
          v99[2] = v245;
          v99[3] = v132;
          *((void *)v99 + _Block_object_dispose(&STACK[0x4E0], 8) = v247;
          long long v133 = v244;
          _OWORD *v99 = v243;
          v99[1] = v133;
          CFArrayRef v99 = (_OWORD *)((char *)v99 + 72);
          v100 += 9;
          ++v98;
        }
        while (v98 != v194);
      }
      uint64_t v135 = v186;
      float v134 = v187;
      *uint64_t v186 = 1.0;
      v135[1] = 0.0;
      void v135[2] = 0.0;
      v135[3] = 0.0;
      v135[4] = 1.0;
      v135[5] = 0.0;
      v135[6] = 0.0;
      v135[7] = 0.0;
      v135[8] = 1.0;
      uint64_t v136 = v189;
      long double v137 = v192;
      if (v52 > 1)
      {
        double v138 = (double *)((char *)v188 + 72);
        int v139 = 1;
        uint64_t v140 = 9;
        uint64_t v141 = v135;
        do
        {
          uint64_t v142 = 0;
          CFDictionaryRef v143 = v141;
          do
          {
            uint64_t v144 = 0;
            CFAllocatorRef v145 = v138;
            do
            {
              uint64_t v146 = 0;
              double v147 = 0.0;
              double v148 = v145;
              do
              {
                double v149 = *v148;
                v148 += 3;
                double v147 = v147 + v143[v146++] * v149;
              }
              while (v146 != 3);
              *((double *)&v243 + 3 * v142 + v144++) = v147;
              ++v145;
            }
            while (v144 != 3);
            ++v142;
            v143 += 3;
          }
          while (v142 != 3);
          uint64_t v150 = &v135[v140];
          long long v151 = v246;
          *((_OWORD *)v150 + 2) = v245;
          *((_OWORD *)v150 + 3) = v151;
          *((void *)v150 + _Block_object_dispose(&STACK[0x4E0], 8) = v247;
          long long v152 = v244;
          *(_OWORD *)uint64_t v150 = v243;
          *((_OWORD *)v150 + 1) = v152;
          v140 += 9;
          ++v139;
          v138 += 9;
          v141 += 9;
        }
        while (v139 != v52);
      }
      free(v188);
      unint64_t v153 = 0;
      double v154 = *v137;
      unsigned int v155 = v52 <= 1 ? 1 : v52;
      uint64_t v156 = 8 * v155;
      int v157 = v135 + 8;
      double v158 = *v137;
      double v159 = -1.0;
      do
      {
        float v160 = *(v157 - 8);
        float v161 = *(v157 - 4);
        double v162 = *v157;
        v157 += 9;
        float v163 = v162;
        float v164 = ((float)((float)(v160 + v161) + v163) + -1.0) * 0.5;
        double v165 = acosf(fmaxf(fminf(v164, 1.0), -1.0));
        if (v159 < v165) {
          double v159 = v165;
        }
        double v166 = v137[v153 / 8];
        if (v158 > v166) {
          double v158 = v137[v153 / 8];
        }
        if (v154 < v166) {
          double v154 = v137[v153 / 8];
        }
        v153 += 8;
      }
      while (v156 != v153);
      double v167 = v159 * 57.2957795;
      double v168 = v154 - v158;
      free(v134);
      free(v135);
      free(v137);
    }
    else
    {
      double v167 = 0.0;
      double v168 = 0.0;
      uint64_t v136 = v189;
    }
    free(v193);
    free(v195);
    *(double *)&long long v206 = v167;
    *((double *)&v206 + 1) = v168;
    *(double *)&long long v207 = a6;
    double v169 = v190;
    if (v52)
    {
      if (v191) {
        double *v191 = v167;
      }
      if (v169) {
        *double v169 = v168;
      }
      if (v136)
      {
        if (*(_DWORD *)(v136 + 24) != 3) {
          FigDisplayedVitalityClassify_cold_1();
        }
        if (a6 >= 0.1 || (v167 < 1.0 ? (BOOL v170 = v168 < 10.0) : (BOOL v170 = 0), !v170))
        {
          int v171 = *(_DWORD *)(v136 + 28);
          if (v171 >= 1)
          {
            uint64_t v172 = 0;
            double v173 = 0.0;
            do
            {
              int v174 = *(_DWORD *)(*(void *)v136 + 16 * v172 + 8);
              if (v174 < 0)
              {
LABEL_141:
                NSLog(&cfstr_ProgrammingErr.isa);
                int v171 = *(_DWORD *)(v136 + 28);
                double v184 = -1.0;
              }
              else
              {
                int v175 = 0;
                uint64_t v176 = *(void *)(*(void *)v136 + 16 * v172);
                int v177 = v174 + 1;
                while (1)
                {
                  int v178 = v175;
                  uint64_t v179 = (int *)(v176 + 24 * v175);
                  if (*v179 < 0 && (*(_DWORD *)(v176 + 24 * v178 + 4) & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v180 = v176 + 24 * v178;
                  double v181 = *((double *)&v206 + *(int *)(v180 + 8));
                  double v182 = *(double *)(v180 + 16);
                  uint64_t v183 = (int *)(v180 + 4);
                  if (v181 > v182) {
                    uint64_t v179 = v183;
                  }
                  int v175 = *v179;
                  if (--v177 <= 0) {
                    goto LABEL_141;
                  }
                }
                double v184 = *(double *)(v176 + 24 * v178 + 16);
              }
              double v173 = v173 + v184;
              ++v172;
            }
            while (v172 < v171);
          }
        }
      }
    }
  }
}

void *FigCaptureMultiStreamFormatGetDescriptionString(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55300]), "intValue");
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F8]), "intValue");
  int v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
  objc_msgSend(v2, "appendFormat:", @"Sensor: %i x %i", v3, v4);
  if (v5)
  {
    unsigned int v6 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoBinningFactorHorizontal"), "intValue");
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 2;
    }
    unsigned int v8 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoBinningFactorVertical"), "intValue");
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 2;
    }
    objc_msgSend(v2, "appendFormat:", @" (Binned) (%d x %d)", v7, v9);
  }
  uint64_t v10 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552B0]), "intValue");
  uint64_t v11 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552A8]), "intValue");
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    [v2 appendString:@", FES: Disabled"];
  }
  else {
    [v2 appendFormat:@", FES: %i x %i", v10, v11];
  }
  [v2 appendFormat:@", %i-%ifps", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoMinFrameRate", "intValue"), objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoMaxFrameRate", "intValue")];
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F0]), "intValue")) {
    [v2 appendString:@", *HDR*"];
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"Experimental"), "BOOLValue")) {
    [v2 appendString:@", *EXP*"];
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55308]), "BOOLValue")) {
    uint64_t v13 = @", *SBS ON*";
  }
  else {
    uint64_t v13 = @", *SBS OFF*";
  }
  [v2 appendString:v13];
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552D8]), "BOOLValue")) {
    [v2 appendFormat:@", *SIFR ON, binning factor %d*", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552D0]), "intValue")];
  }
  else {
    [v2 appendString:@", *SIFR OFF*"];
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552C8]), "intValue") == 1) {
    [v2 appendString:@", *Quadra SensorRaw*"];
  }
  return v2;
}

void *FigCaptureMultiStreamFormatsArrayGetDescriptionString(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(a1);
        }
        [v2 appendFormat:@"\t%i: %@\n", v5 + v7, FigCaptureMultiStreamFormatGetDescriptionString(*(void **)(*((void *)&v9 + 1) + 8 * v7))];
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      uint64_t v5 = (v5 + v7);
    }
    while (v4);
  }
  return v2;
}

void *FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets()
{
  return &unk_1EFB02BE8;
}

uint64_t noiseReductionGetAlgorithmFromTuningOptions(CFDictionaryRef theDict)
{
  uint64_t result = 1;
  unsigned int valuePtr = 1;
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NoiseReductionMethod");
    if (Value && (v4 = Value, CFTypeID v5 = CFGetTypeID(Value), v5 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL noiseReductionRequiresOutputSampleBuffer(const __CFDictionary *a1)
{
  return noiseReductionGetAlgorithmFromTuningOptions(a1) > 1;
}

void *noiseReductionContextCreate(uint64_t a1, uint64_t a2)
{
  return noiseReductionContextCreateWithOptions(a1, a2, 0);
}

void *noiseReductionContextCreateWithOptions(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v6 = malloc_type_malloc(0x40uLL, 0x10A0040916CA4BBuLL);
  if (v6)
  {
    int AlgorithmFromTuningOptions = noiseReductionGetAlgorithmFromTuningOptions(a3);
    *(_DWORD *)uint64_t v6 = -348055553;
    if ((AlgorithmFromTuningOptions - 2) < 2)
    {
      v6[2] = multiBandNoiseReductionContextCreate;
      void v6[3] = multiBandNoiseReductionContextDestroy;
      void v6[4] = multiBandNoiseReductionReleaseBuffers;
      v6[5] = 0;
      void v6[6] = multiBandNoiseReductionWithTuningOptions;
      v6[7] = multiBandPyramidFusion;
      unsigned int v8 = multiBandNoiseReductionContextCreate(a1, a2, a3);
    }
    else
    {
      if (!AlgorithmFromTuningOptions)
      {
        v6[7] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 3) = 0u;
        *(_OWORD *)(v6 + 1) = 0u;
        return v6;
      }
      if (AlgorithmFromTuningOptions != 1)
      {
        free(v6);
        return 0;
      }
      v6[2] = powerBlurNoiseReductionContextCreate;
      void v6[3] = powerBlurNoiseReductionContextDestroy;
      void v6[4] = powerBlurNoiseReductionReleaseBuffers;
      void v6[6] = 0;
      v6[7] = 0;
      v6[5] = powerBlurNoiseReductionWithTuningOptions;
      unsigned int v8 = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t, const __CFDictionary *))powerBlurNoiseReductionContextCreate)(a1, a2, a3);
    }
    v6[1] = v8;
  }
  return v6;
}

void noiseReductionContextDestroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void (*)(void))a1[3];
    if (v2) {
      v2(a1[1]);
    }
    free(a1);
  }
}

uint64_t noiseReductionReleaseBuffers(uint64_t result)
{
  if (result && *(_DWORD *)result == -348055553)
  {
    uint64_t v1 = *(uint64_t (**)(void))(result + 32);
    if (v1) {
      return v1(*(void *)(result + 8));
    }
  }
  return result;
}

uint64_t noiseReductionWithTuningOptions(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  long long v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!a1)
  {
    uint64_t v12 = powerBlurNoiseReductionWithTuningOptions(0, sbuf, a3, a4, a5);
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)a1 == -348055553)
  {
    long long v11 = *(uint64_t (**)(void, CMSampleBufferRef, uint64_t, uint64_t, const __CFDictionary *))(a1 + 40);
    if (v11)
    {
      uint64_t v12 = v11(*(void *)(a1 + 8), sbuf, a3, a4, a5);
      if (!v12) {
        goto LABEL_11;
      }
LABEL_9:
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_11;
    }
    uint64_t v12 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v12 = FigSignalErrorAt();
  }
LABEL_11:
  if (*v10 == 1) {
    kdebug_trace();
  }
  return v12;
}

uint64_t noiseReduction(CMSampleBufferRef sbuf, char a2, int a3)
{
  uint64_t v6 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v7 = powerBlurNoiseReduction(sbuf, a2, a3);
  if (*v6 == 1) {
    kdebug_trace();
  }
  return v7;
}

uint64_t noiseReductionInOutWithTuningOptions(uint64_t a1, opaqueCMSampleBuffer *a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (a1 && a2 && a3 && a2 != a3 && *(_DWORD *)a1 == -348055553)
  {
    long long v11 = *(uint64_t (**)(void, opaqueCMSampleBuffer *, opaqueCMSampleBuffer *, uint64_t))(a1 + 48);
    if (*(void *)(a1 + 40))
    {
      if (!v11) {
        goto LABEL_10;
      }
    }
    else if (!v11)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      unsigned int v12 = -12780;
      goto LABEL_11;
    }
    unsigned int v19 = v11(*(void *)(a1 + 8), a2, a3, a6);
    if (v19)
    {
      unsigned int v12 = v19;
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_11;
    }
LABEL_23:
    uint64_t v18 = 0;
    goto LABEL_24;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_10:
  unsigned int v12 = FigSignalErrorAt();
  if (!v12) {
    goto LABEL_23;
  }
LABEL_11:
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  if (!ImageBuffer || (uint64_t v14 = ImageBuffer, (v15 = CMSampleBufferGetImageBuffer(a3)) == 0))
  {
    fig_log_get_emitter();
LABEL_33:
    FigDebugAssert3();
    int v17 = 0;
    goto LABEL_16;
  }
  uint64_t v16 = v15;
  if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut)
    || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v14, v16))
  {
    fig_log_get_emitter();
    goto LABEL_33;
  }
  CMPropagateAttachments(a2, a3);
  int v17 = 1;
LABEL_16:
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (v17) {
    uint64_t v18 = v12;
  }
  else {
    uint64_t v18 = 4294954513;
  }
LABEL_24:
  if (*v10 == 1) {
    kdebug_trace();
  }
  return v18;
}

uint64_t noiseReductionPyramidLayers(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -348055553)
  {
    if (*(void *)(a1 + 48))
    {
      uint64_t v1 = *(_DWORD **)(a1 + 8);
      return multiBandNoiseReductionPyramidLayers(v1);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294954516;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t noiseReductionWithPyramid(uint64_t a1, opaqueCMSampleBuffer *a2, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5)
{
  long long v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!a1 || !a2) {
    goto LABEL_18;
  }
  if (a4 == 1) {
    goto LABEL_8;
  }
  if (noiseReductionPyramidLayers(a1) != a4) {
    goto LABEL_22;
  }
  if (a4 >= 1)
  {
LABEL_8:
    uint64_t v11 = a4;
    unsigned int v12 = a3;
    while (*v12)
    {
      ++v12;
      if (!--v11) {
        goto LABEL_11;
      }
    }
    goto LABEL_18;
  }
LABEL_11:
  if (*(_DWORD *)a1 != -348055553)
  {
LABEL_18:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!*(void *)(a1 + 48))
  {
LABEL_22:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v13 = 4294954516;
    goto LABEL_15;
  }
  uint64_t v13 = multiBandNoiseReductionWithPyramid(*(_DWORD **)(a1 + 8), a2, a3, a4, a5);
  if (v13)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_15:
  if (*v10 == 1) {
    kdebug_trace();
  }
  return v13;
}

uint64_t noiseReductionPyramidFusionMaxBuffers(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -348055553)
  {
    if (*(void *)(a1 + 48))
    {
      uint64_t v1 = *(_DWORD **)(a1 + 8);
      return multiBandNoiseReductionPyramidFusionMaxBuffers(v1);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294954516;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t noiseReductionPyramidFusion(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!a1 || !a5 || (int)noiseReductionPyramidFusionMaxBuffers(a1) < (int)a4) {
    goto LABEL_18;
  }
  if ((int)a4 >= 1)
  {
    uint64_t v15 = a4;
    uint64_t v16 = a2;
    while (*v16 && *(void *)*v16 != a5)
    {
      ++v16;
      if (!--v15) {
        goto LABEL_11;
      }
    }
    goto LABEL_18;
  }
LABEL_11:
  if (*(_DWORD *)a1 != -348055553)
  {
LABEL_18:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_15;
  }
  int v17 = *(uint64_t (**)(void, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56);
  if (v17)
  {
    uint64_t v18 = v17(*(void *)(a1 + 8), a2, a3, a4, a5, a6, a7);
    if (v18)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v18 = 4294954516;
  }
LABEL_15:
  if (*v14 == 1) {
    kdebug_trace();
  }
  return v18;
}

uint64_t powerBlurNoiseReduction(CMSampleBufferRef sbuf, char a2, int a3)
{
  return powerBlurNoiseReductionWithTuningOptions(0, sbuf, a2, a3, 0);
}

uint64_t powerBlurNoiseReductionWithTuningOptions(uint64_t a1, CMSampleBufferRef sbuf, char a3, int a4, const __CFDictionary *a5)
{
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  int valuePtr = 0;
  CGSize v11 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  rect.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
  rect.CGSize size = v11;
  uint64_t v83 = 0;
  if (!ImageBuffer)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_5;
  }
  unsigned int v12 = ImageBuffer;
  if ((CVPixelBufferGetPixelFormatType(ImageBuffer) | 0x10) != 0x34323076
    || (CVPixelBufferGetWidthOfPlane(v12, 1uLL) & 7) != 0
    || (size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v12, 1uLL), (BytesPerRowOfPlane & 7) != 0))
  {
LABEL_5:
    return FigSignalErrorAt();
  }
  uint64_t v15 = BytesPerRowOfPlane;
  CFDictionaryRef v16 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CFDictionaryRef v17 = v16;
  int v82 = 1017370378;
  int v80 = 256;
  int v81 = 256;
  int v79 = 256;
  if (v16)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E4F54210]);
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
  }
  if (!a5)
  {
    unsigned int v19 = 0;
    CFDictionaryRef dict = 0;
    if (!v17) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  unsigned int v19 = CFDictionaryGetValue(a5, @"ChromaNoiseReductionTuningParameters");
  CFDictionaryRef dict = (const __CFDictionary *)CFDictionaryGetValue(a5, @"CropRect");
  CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(a5, @"ClientSpecifiedMetadata");
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a5, @"Method");
  if (v21) {
    CFNumberGetValue(v21, kCFNumberIntType, (char *)&v83 + 4);
  }
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a5, @"Synchronization");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberIntType, &v83);
  }
  if (v20) {
    CFDictionaryRef v17 = v20;
  }
  if (v17)
  {
LABEL_21:
    CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E4F53E48]);
    if (v23) {
      CFNumberGetValue(v23, kCFNumberFloatType, &v82);
    }
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E4F53C08]);
    if (v24) {
      CFNumberGetValue(v24, kCFNumberIntType, &v81);
    }
    CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E4F543A0]);
    if (v25) {
      CFNumberGetValue(v25, kCFNumberIntType, &v80);
    }
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E4F54388]);
    if (v26) {
      CFNumberGetValue(v26, kCFNumberIntType, &v79);
    }
  }
LABEL_29:
  int v28 = v80;
  int v27 = v81;
  int v29 = v79;
  int v30 = powerBlurNoiseReductionWithTuningOptions_ncpu;
  if (!powerBlurNoiseReductionWithTuningOptions_ncpu)
  {
    size_t v78 = 4;
    sysctlbyname("hw.ncpu", &powerBlurNoiseReductionWithTuningOptions_ncpu, &v78, 0, 0);
    int v30 = powerBlurNoiseReductionWithTuningOptions_ncpu;
  }
  int v31 = v28 * v27;
  BOOL v32 = v30 > 1;
  int v33 = 2 * v30;
  if ((a4 & v32) != 0) {
    int v34 = v33;
  }
  else {
    int v34 = 1;
  }
  unsigned int v69 = v34;
  if (v19)
  {
    LODWORD(v7_Block_object_dispose(&STACK[0x4E0], 8) = 1065353216;
    float v87 = 1.0;
    uint64_t v86 = 0;
    FigCFDictionaryGetInt32IfPresent();
    int v35 = HIDWORD(v86);
    FigCFDictionaryGetInt32IfPresent();
    int v36 = v86;
    if (FigCFDictionaryGetFloat32IfPresent())
    {
      FigCFDictionaryGetFloat32IfPresent();
      int v35 = (int)(float)((float)(v87 * (float)v35) / *(float *)&v78);
    }
  }
  else
  {
    unint64_t v37 = 0;
    while (sensorParameters[v37] != valuePtr)
    {
      BOOL v38 = v37 >= 0xC;
      v37 += 3;
      if (v38)
      {
        int v35 = 20;
        int v36 = 30;
        goto LABEL_43;
      }
    }
    double v39 = (char *)&sensorParameters[v37];
    int v36 = *((_DWORD *)v39 + 1);
    int v35 = *((_DWORD *)v39 + 2);
  }
LABEL_43:
  int v40 = v31 * v29;
  int CFPreferenceNumberWithDefault = powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning;
  if (powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning == -1)
  {
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning = CFPreferenceNumberWithDefault;
  }
  int v42 = powerBlurNoiseReductionWithTuningOptions_parameterOverride;
  if (powerBlurNoiseReductionWithTuningOptions_parameterOverride == -1 || CFPreferenceNumberWithDefault != 0)
  {
    if (CFPreferenceNumberWithDefault) {
      CFPreferencesSynchronize(@"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    }
    powerBlurNoiseReductionWithTuningOptions_slopeOverride = FigGetCFPreferenceNumberWithDefault();
    powerBlurNoiseReductionWithTuningOptions_biasOverride = FigGetCFPreferenceNumberWithDefault();
    int v42 = (powerBlurNoiseReductionWithTuningOptions_slopeOverride & powerBlurNoiseReductionWithTuningOptions_biasOverride) >= 0;
    powerBlurNoiseReductionWithTuningOptions_parameterOverride = v42;
  }
  float v44 = (float)v40 * 0.000000059605;
  if (v42)
  {
    if (powerBlurNoiseReductionWithTuningOptions_slopeOverride >= 0) {
      int v35 = powerBlurNoiseReductionWithTuningOptions_slopeOverride;
    }
    if (powerBlurNoiseReductionWithTuningOptions_biasOverride >= 0) {
      int v36 = powerBlurNoiseReductionWithTuningOptions_biasOverride;
    }
  }
  float v45 = (float)((float)v36 + (float)((float)v35 * v44)) * 0.1;
  BOOL v46 = v44 <= 2.0;
  if (a1)
  {
    int v47 = *(_DWORD *)(a1 + 8);
    if (v47 == 17)
    {
      BOOL v46 = 0;
    }
    else if (v47 == 9)
    {
      BOOL v46 = 1;
    }
  }
  if (v45 > 40.0) {
    float v45 = 40.0;
  }
  if (v45 >= 4.0) {
    float v48 = v45;
  }
  else {
    float v48 = 4.0;
  }
  if (powerBlurNoiseReductionWithTuningOptions_enableBinOutput == -1) {
    powerBlurNoiseReductionWithTuningOptions_enableBinOutput = FigGetCFPreferenceNumberWithDefault();
  }
  if (dict && CGRectMakeWithDictionaryRepresentation(dict, &rect))
  {
    size_t Width = CVPixelBufferGetWidth(v12);
    size_t Height = CVPixelBufferGetHeight(v12);
    if (CGRectIsEmpty(rect)) {
      return FigSignalErrorAt();
    }
    CGRect rect = CGRectIntegral(rect);
    v89.origin.double x = 0.0;
    v89.origin.CGFloat y = 0.0;
    v89.size.double width = (double)Width;
    v89.size.double height = (double)Height;
    CGRect v90 = CGRectIntersection(rect, v89);
    if (!CGRectEqualToRect(rect, v90)) {
      return FigSignalErrorAt();
    }
    unint64_t v51 = (unint64_t)rect.size.width + 1;
    if ((v51 & 0xE) != 0 || ((int)rect.origin.x & 0xE) != 0) {
      return FigSignalErrorAt();
    }
    uint64_t WidthOfPlane = v51 >> 1;
    unint64_t HeightOfPlane = ((unint64_t)rect.size.height + 1) >> 1;
    int v54 = (int)rect.origin.x >> 1;
    int v55 = (int)rect.origin.y >> 1;
    int v56 = 1;
  }
  else
  {
    uint64_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v12, 1uLL);
    unint64_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v12, 1uLL);
    int v56 = 0;
    int v54 = 0;
    int v55 = 0;
  }
  rect.origin.double x = (double)v54;
  rect.origin.CGFloat y = (double)v55;
  rect.size.double width = (double)(unint64_t)WidthOfPlane;
  rect.size.double height = (double)HeightOfPlane;
  if (a1 && *(_DWORD *)(a1 + 4) && (a3 & 1) == 0 && (v83 & 0xFFFFFFFD00000000) == 0)
  {
    uint64_t result = powerBlurNoiseReductionGPU(a1 + 16, v12, (float64x2_t *)&rect, v46, v83, v48);
    if (!result) {
      return result;
    }
    if (HIDWORD(v83) == 2) {
      return FigSignalErrorAt();
    }
    if (result == -2)
    {
      powerBlurNoiseReductionGPUContextDestroy(a1 + 16);
      *(_DWORD *)(a1 + 4) = 0;
    }
  }
  if (CVPixelBufferLockBaseAddress(v12, 0)) {
    return FigSignalErrorAt();
  }
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v12, 1uLL);
  if (v56) {
    uint64_t v58 = (uint64_t)BaseAddressOfPlane + 2 * v54 + v15 * v55;
  }
  else {
    uint64_t v58 = (uint64_t)BaseAddressOfPlane;
  }
  size_t v59 = CVPixelBufferGetBytesPerRowOfPlane(v12, 0);
  int v60 = CVPixelBufferGetBaseAddressOfPlane(v12, 0);
  size_t v61 = CVPixelBufferGetWidthOfPlane(v12, 0);
  size_t v62 = CVPixelBufferGetHeightOfPlane(v12, 0);
  if (v69 < 2)
  {
    if (v46) {
      chromapowerblur11x11(v58, v15, v58, v15, WidthOfPlane, HeightOfPlane, 0, HeightOfPlane, (int)v48);
    }
    else {
      chromapowerblur17x17(v58, v15, v58, v15, WidthOfPlane, HeightOfPlane, 0, HeightOfPlane, (int)v48);
    }
  }
  else
  {
    double v68 = v60;
    CFDictionaryRef dicta = (CFDictionaryRef)v62;
    int v67 = FigGetCFPreferenceNumberWithDefault();
    int v63 = FigGetCFPreferenceNumberWithDefault();
    if (v63 > 0) {
      char v64 = 1;
    }
    else {
      char v64 = a3;
    }
    size_t v65 = v69 << v64;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __powerBlurNoiseReductionWithTuningOptions_block_invoke;
    block[3] = &__block_descriptor_tmp;
    unsigned int v73 = v69;
    BOOL v77 = v46;
    void block[4] = v58;
    void block[5] = v15;
    void block[6] = WidthOfPlane;
    void block[7] = HeightOfPlane;
    float v74 = v48;
    void block[8] = v68;
    block[9] = v59;
    block[10] = v61;
    block[11] = dicta;
    int v75 = v63;
    int v76 = v67;
    dispatch_apply(v65, global_queue, block);
  }
  CVPixelBufferUnlockBaseAddress(v12, 0);
  return 0;
}

void __powerBlurNoiseReductionWithTuningOptions_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned int *)(v4 + 96);
  unint64_t v7 = v5 - v6;
  if (v5 >= v6)
  {
    uint64_t v17 = *(void *)(v4 + 64);
    uint64_t v18 = *(void *)(v4 + 72);
    size_t v20 = *(void *)(v4 + 80);
    unint64_t v19 = *(void *)(v4 + 88);
    unint64_t v21 = v19 * v7 / v6;
    unint64_t v183 = v19;
    unint64_t v22 = v19 + v19 * v7;
    CFNumberRef v23 = (const char *)(v4 + 104);
    uint8x16_t v24 = (uint8x16_t)vld1q_dup_s8(v23);
    CFNumberRef v25 = (const __int16 *)(v4 + 108);
    int16x8_t v26 = vld1q_dup_s16(v25);
    unint64_t v27 = v22 / v6;
    int16x8_t v184 = v26;
    uint8x16_t v185 = v24;
    if (16 * v20 > 0x8000)
    {
      int v29 = malloc_type_malloc(16 * v20, 0xE5C6AAA2uLL);
      int16x8_t v26 = v184;
      uint8x16_t v24 = v185;
      int v28 = v29;
    }
    else
    {
      int v28 = __src;
    }
    int v30 = v21 + 3;
    do
    {
      if (v30 < 0)
      {
        memcpy(&v28[v20 * (v30 & 0xF)], v28, v20);
        int16x8_t v26 = v184;
        uint8x16_t v24 = v185;
      }
      else
      {
        int v31 = (int8x16_t *)(v17 + v18 * v30);
        BOOL v32 = (int8x16_t *)&v28[v20 * (v30 & 0xF)];
        int8x16_t v33 = *v31;
        int8x16_t v34 = vdupq_lane_s8(*(int8x8_t *)v31->i8, 0);
        if ((int)v20 < 32)
        {
          int8x16_t v36 = v34;
        }
        else
        {
          unsigned int v35 = (v20 >> 4) - 1;
          do
          {
            int8x16_t v36 = v33;
            unsigned long long v37 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v33), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            int8x16_t v38 = v31[1];
            ++v31;
            int8x16_t v33 = v38;
            uint8x16_t v39 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v37), (int8x16_t)v37), v24);
            int8x16_t v40 = vextq_s8(v34, v36, 0xCuLL);
            uint8x16_t v41 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v36), v39), v36, v40);
            int8x16_t v42 = vextq_s8(v34, v36, 0xDuLL);
            uint8x16_t v43 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v42, (uint8x16_t)v36), v39), v36, v42);
            uint16x8_t v44 = vaddl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v41.i8);
            uint16x8_t v45 = vaddl_high_u8(v43, v41);
            int8x16_t v46 = vextq_s8(v34, v36, 0xEuLL);
            uint8x16_t v47 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v46, (uint8x16_t)v36), v39), v36, v46);
            uint16x8_t v48 = vaddw_high_u8(v45, v47);
            int8x16_t v49 = vextq_s8(v34, v36, 0xFuLL);
            uint8x16_t v50 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v36), v39), v36, v49);
            uint16x8_t v51 = vaddw_u8(vaddw_u8(v44, *(uint8x8_t *)v47.i8), *(uint8x8_t *)v50.i8);
            uint16x8_t v52 = vaddw_high_u8(v48, v50);
            int8x16_t v53 = vextq_s8(v36, v38, 1uLL);
            uint8x16_t v54 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v36), v39), v36, v53);
            uint16x8_t v55 = vaddw_u8(v51, *(uint8x8_t *)v54.i8);
            uint16x8_t v56 = vaddw_high_u8(v52, v54);
            int8x16_t v57 = vextq_s8(v36, v38, 2uLL);
            uint8x16_t v58 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v57, (uint8x16_t)v36), v39), v36, v57);
            uint16x8_t v59 = vaddw_u8(v55, *(uint8x8_t *)v58.i8);
            uint16x8_t v60 = vaddw_high_u8(v56, v58);
            int8x16_t v61 = vextq_s8(v36, v38, 3uLL);
            uint8x16_t v62 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v61, (uint8x16_t)v36), v39), v36, v61);
            uint16x8_t v63 = vaddw_u8(v59, *(uint8x8_t *)v62.i8);
            uint16x8_t v64 = vaddw_high_u8(v60, v62);
            int8x16_t v65 = vextq_s8(v36, v38, 4uLL);
            uint8x16_t v66 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v36), v39), v36, v65);
            *v32++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(v63, *(uint8x8_t *)v66.i8), 3uLL), (int16x8_t)vaddw_high_u8(v64, v66), 3uLL);
            int8x16_t v34 = v36;
            --v35;
          }
          while (v35);
        }
        unsigned long long v67 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v33), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
        uint8x16_t v68 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v67), (int8x16_t)v67), v24);
        int8x16_t v69 = vdupq_laneq_s8(v33, 15);
        int8x16_t v70 = vextq_s8(v36, v33, 0xCuLL);
        uint8x16_t v71 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v33), v68), v33, v70);
        int8x16_t v72 = vextq_s8(v36, v33, 0xDuLL);
        uint8x16_t v73 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v72, (uint8x16_t)v33), v68), v33, v72);
        uint16x8_t v74 = vaddl_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v71.i8);
        uint16x8_t v75 = vaddl_high_u8(v73, v71);
        int8x16_t v76 = vextq_s8(v36, v33, 0xEuLL);
        uint8x16_t v77 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v76, (uint8x16_t)v33), v68), v33, v76);
        uint16x8_t v78 = vaddw_high_u8(v75, v77);
        int8x16_t v79 = vextq_s8(v36, v33, 0xFuLL);
        uint8x16_t v80 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v79, (uint8x16_t)v33), v68), v33, v79);
        uint16x8_t v81 = vaddw_u8(vaddw_u8(v74, *(uint8x8_t *)v77.i8), *(uint8x8_t *)v80.i8);
        uint16x8_t v82 = vaddw_high_u8(v78, v80);
        int8x16_t v83 = vextq_s8(v33, v69, 1uLL);
        uint8x16_t v84 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v83, (uint8x16_t)v33), v68), v33, v83);
        uint16x8_t v85 = vaddw_u8(v81, *(uint8x8_t *)v84.i8);
        uint16x8_t v86 = vaddw_high_u8(v82, v84);
        int8x16_t v87 = vextq_s8(v33, v69, 2uLL);
        uint8x16_t v88 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v87, (uint8x16_t)v33), v68), v33, v87);
        uint16x8_t v89 = vaddw_u8(v85, *(uint8x8_t *)v88.i8);
        uint16x8_t v90 = vaddw_high_u8(v86, v88);
        int8x16_t v91 = vextq_s8(v33, v69, 3uLL);
        uint8x16_t v92 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v91, (uint8x16_t)v33), v68), v33, v91);
        int8x16_t v93 = vextq_s8(v33, v69, 4uLL);
        uint8x16_t v94 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v93, (uint8x16_t)v33), v68), v33, v93);
        *BOOL v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(v89, *(uint8x8_t *)v92.i8), *(uint8x8_t *)v94.i8), 3uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(v90, v92), v94), 3uLL);
      }
    }
    while (v30-- > (int)v21 - 4);
    if ((int)v21 < (int)v27)
    {
      if ((int)v20 >> 4 <= 1) {
        int v96 = 1;
      }
      else {
        int v96 = (int)v20 >> 4;
      }
      unint64_t v97 = (int)v21 + 4;
      if ((uint64_t)v97 <= (int)v27 + 3) {
        uint64_t v98 = (int)v27 + 3;
      }
      else {
        uint64_t v98 = (int)v21 + 4;
      }
      uint64_t v99 = v17 + v18 * v97 + 16;
      char v100 = v21 + 1;
      int v101 = v21 - 1;
      do
      {
        if (v97 >= v183)
        {
          memcpy(&v28[(v97 & 0xF) * v20], &v28[(((_BYTE)v183 - 1) & 0xF) * v20], v20);
          int16x8_t v26 = v184;
          uint8x16_t v24 = v185;
        }
        else
        {
          double v102 = (int8x16_t *)&v28[(v97 & 0xF) * v20];
          int8x16_t v103 = *(int8x16_t *)(v17 + v97 * v18);
          int8x16_t v104 = vdupq_lane_s8(*(int8x8_t *)v103.i8, 0);
          if ((int)v20 < 32)
          {
            int8x16_t v107 = v104;
          }
          else
          {
            unsigned int v105 = (v20 >> 4) - 1;
            uint64_t v106 = (int8x16_t *)v99;
            do
            {
              int8x16_t v107 = v103;
              unsigned long long v108 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v103), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
              uint8x16_t v109 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v108), (int8x16_t)v108), v24);
              int8x16_t v110 = *v106++;
              int8x16_t v103 = v110;
              int8x16_t v111 = vextq_s8(v104, v107, 0xCuLL);
              uint8x16_t v112 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v111, (uint8x16_t)v107), v109), v107, v111);
              int8x16_t v113 = vextq_s8(v104, v107, 0xDuLL);
              uint8x16_t v114 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v113, (uint8x16_t)v107), v109), v107, v113);
              uint16x8_t v115 = vaddl_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v112.i8);
              uint16x8_t v116 = vaddl_high_u8(v114, v112);
              int8x16_t v117 = vextq_s8(v104, v107, 0xEuLL);
              uint8x16_t v118 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v117, (uint8x16_t)v107), v109), v107, v117);
              uint16x8_t v119 = vaddw_high_u8(v116, v118);
              int8x16_t v120 = vextq_s8(v104, v107, 0xFuLL);
              uint8x16_t v121 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v120, (uint8x16_t)v107), v109), v107, v120);
              uint16x8_t v122 = vaddw_u8(vaddw_u8(v115, *(uint8x8_t *)v118.i8), *(uint8x8_t *)v121.i8);
              uint16x8_t v123 = vaddw_high_u8(v119, v121);
              int8x16_t v124 = vextq_s8(v107, v110, 1uLL);
              uint8x16_t v125 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v124, (uint8x16_t)v107), v109), v107, v124);
              uint16x8_t v126 = vaddw_u8(v122, *(uint8x8_t *)v125.i8);
              uint16x8_t v127 = vaddw_high_u8(v123, v125);
              int8x16_t v128 = vextq_s8(v107, v110, 2uLL);
              uint8x16_t v129 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v128, (uint8x16_t)v107), v109), v107, v128);
              uint16x8_t v130 = vaddw_u8(v126, *(uint8x8_t *)v129.i8);
              uint16x8_t v131 = vaddw_high_u8(v127, v129);
              int8x16_t v132 = vextq_s8(v107, v110, 3uLL);
              uint8x16_t v133 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v132, (uint8x16_t)v107), v109), v107, v132);
              uint16x8_t v134 = vaddw_u8(v130, *(uint8x8_t *)v133.i8);
              uint16x8_t v135 = vaddw_high_u8(v131, v133);
              int8x16_t v136 = vextq_s8(v107, v110, 4uLL);
              uint8x16_t v137 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v136, (uint8x16_t)v107), v109), v107, v136);
              *v102++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(v134, *(uint8x8_t *)v137.i8), 3uLL), (int16x8_t)vaddw_high_u8(v135, v137), 3uLL);
              int8x16_t v104 = v107;
              --v105;
            }
            while (v105);
          }
          unsigned long long v138 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v103), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
          uint8x16_t v139 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v138), (int8x16_t)v138), v24);
          int8x16_t v140 = vdupq_laneq_s8(v103, 15);
          int8x16_t v141 = vextq_s8(v107, v103, 0xCuLL);
          uint8x16_t v142 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v141, (uint8x16_t)v103), v139), v103, v141);
          int8x16_t v143 = vextq_s8(v107, v103, 0xDuLL);
          uint8x16_t v144 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v143, (uint8x16_t)v103), v139), v103, v143);
          uint16x8_t v145 = vaddl_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v142.i8);
          uint16x8_t v146 = vaddl_high_u8(v144, v142);
          int8x16_t v147 = vextq_s8(v107, v103, 0xEuLL);
          uint8x16_t v148 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v147, (uint8x16_t)v103), v139), v103, v147);
          uint16x8_t v149 = vaddw_high_u8(v146, v148);
          int8x16_t v150 = vextq_s8(v107, v103, 0xFuLL);
          uint8x16_t v151 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v150, (uint8x16_t)v103), v139), v103, v150);
          uint16x8_t v152 = vaddw_u8(vaddw_u8(v145, *(uint8x8_t *)v148.i8), *(uint8x8_t *)v151.i8);
          uint16x8_t v153 = vaddw_high_u8(v149, v151);
          int8x16_t v154 = vextq_s8(v103, v140, 1uLL);
          uint8x16_t v155 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v154, (uint8x16_t)v103), v139), v103, v154);
          uint16x8_t v156 = vaddw_u8(v152, *(uint8x8_t *)v155.i8);
          uint16x8_t v157 = vaddw_high_u8(v153, v155);
          int8x16_t v158 = vextq_s8(v103, v140, 2uLL);
          uint8x16_t v159 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v158, (uint8x16_t)v103), v139), v103, v158);
          uint16x8_t v160 = vaddw_u8(v156, *(uint8x8_t *)v159.i8);
          uint16x8_t v161 = vaddw_high_u8(v157, v159);
          int8x16_t v162 = vextq_s8(v103, v140, 3uLL);
          uint8x16_t v163 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v162, (uint8x16_t)v103), v139), v103, v162);
          int8x16_t v164 = vextq_s8(v103, v140, 4uLL);
          uint8x16_t v165 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v164, (uint8x16_t)v103), v139), v103, v164);
          *double v102 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(v160, *(uint8x8_t *)v163.i8), *(uint8x8_t *)v165.i8), 3uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(v161, v163), v165), 3uLL);
        }
        if ((int)v20 >= 16)
        {
          int v166 = 0;
          double v167 = (uint8x8_t *)(v17 + (v97 - 4) * v18);
          double v168 = v28;
          do
          {
            int v169 = 0;
            int8x16_t v170 = *(int8x16_t *)&v168[((v97 - 4) & 0xF) * v20];
            unsigned long long v171 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v170), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            uint8x16_t v172 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v171), (int8x16_t)v171), v24);
            int16x8_t v173 = (int16x8_t)vshll_n_u8(*v167, 3uLL);
            int16x8_t v174 = (int16x8_t)vshll_high_n_u8(*(uint8x16_t *)v167->i8, 3uLL);
            int v175 = v101;
            do
            {
              int8x16_t v176 = *(int8x16_t *)&v168[v20 * (v175 & 0xF)];
              uint8x16_t v177 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v176, (uint8x16_t)v170), v172), v170, v176);
              uint16x8_t v178 = vaddw_u8((uint16x8_t)v173, *(uint8x8_t *)v177.i8);
              uint16x8_t v179 = vaddw_high_u8((uint16x8_t)v174, v177);
              int8x16_t v180 = *(int8x16_t *)&v168[v20 * ((v100 + (_BYTE)v169) & 0xF)];
              uint8x16_t v181 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v180, (uint8x16_t)v170), v172), v170, v180);
              int16x8_t v173 = (int16x8_t)vaddw_u8(v178, *(uint8x8_t *)v181.i8);
              int16x8_t v174 = (int16x8_t)vaddw_high_u8(v179, v181);
              ++v169;
              --v175;
            }
            while (v169 != 4);
            *(int8x16_t *)v167->uint64_t i8 = vrshrn_high_n_s16(vrshrn_n_s16(v173, 4uLL), v174, 4uLL);
            v167 += 2;
            ++v166;
            v168 += 16;
          }
          while (v166 != v96);
        }
        v99 += v18;
        ++v100;
        ++v101;
      }
      while (v97++ != v98);
    }
    if (v28 != __src) {
      free(v28);
    }
  }
  else
  {
    unint64_t v8 = v5;
    uint64_t v10 = *(void *)(v4 + 32);
    uint64_t v9 = *(void *)(v4 + 40);
    uint64_t v11 = *(void *)(v4 + 48);
    uint64_t v12 = *(void *)(v4 + 56);
    unint64_t v13 = v12 * v8;
    uint64_t v14 = v13 / v6;
    float v15 = *(float *)(v4 + 100);
    uint64_t v16 = (v12 + v13) / v6;
    if (*(unsigned char *)(v4 + 112)) {
      chromapowerblur11x11(v10, v9, v10, v9, v11, v12, v14, v16, (int)v15);
    }
    else {
      chromapowerblur17x17(v10, v9, v10, v9, v11, v12, v14, v16, (int)v15);
    }
  }
}

void chromapowerblur11x11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  int v12 = v11;
  unint64_t v54 = v13;
  int v14 = v10;
  uint64_t v48 = v15;
  uint64_t v49 = v16;
  uint64_t v18 = v17;
  uint64_t v19 = v9;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  size_t v20 = 2 * v10;
  int v51 = v21;
  if ((unint64_t)(32 * v10) > 0x8000) {
    unint64_t v22 = malloc_type_malloc(32 * v10, 0x7ECF81AFuLL);
  }
  else {
    unint64_t v22 = __src;
  }
  LODWORD(v23) = v12 + 5;
  uint16x8_t v53 = (uint16x8_t)vdupq_n_s16(a9);
  do
  {
    uint64_t v23 = (v23 - 1);
    if ((int)v23 < 0) {
      memcpy(&v22[v20 * (v23 & 0xF)], v22, v20);
    }
    else {
      chromapowerblur11H((int16x4_t *)(v19 + v23 * v18), (uint8x16_t *)&v22[v20 * (v23 & 0xF)], v14, a9);
    }
  }
  while ((int)v23 > v12 - 5);
  if (v12 < v51)
  {
    if (v14 >> 3 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v14 >> 3;
    }
    int v25 = v12;
    unint64_t v26 = v12 + 5;
    uint64_t v52 = v51 + 4;
    int v27 = v25 + 1;
    char v28 = v25 - 1;
    float32x4_t v50 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      if (v26 >= v54) {
        memcpy(&v22[v20 * (v26 & 0xF)], &v22[(((_BYTE)v54 - 1) & 0xF) * v20], v20);
      }
      else {
        chromapowerblur11H((int16x4_t *)(v19 + v26 * v18), (uint8x16_t *)&v22[v20 * (v26 & 0xF)], v14, a9);
      }
      v29.i64[0] = 0x1000100010001;
      v29.i64[1] = 0x1000100010001;
      if (v14 >= 8)
      {
        int v30 = 0;
        int v31 = (uint8x16_t *)(v48 + (v26 - 5) * v49);
        BOOL v32 = v22;
        do
        {
          int v33 = 0;
          uint8x16_t v34 = *(uint8x16_t *)&v32[v20 * ((v26 - 5) & 0xF)];
          int16x8_t v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8);
          int16x8_t v36 = (int16x8_t)vmovl_high_u8(v34);
          v37.i64[0] = 0x1000100010001;
          v37.i64[1] = 0x1000100010001;
          int v38 = v27;
          do
          {
            int8x16_t v39 = *(int8x16_t *)&v32[v20 * ((v28 + (_BYTE)v33) & 0xF)];
            int16x8_t v40 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v34)));
            uint8x16_t v41 = (uint8x16_t)vandq_s8(v39, (int8x16_t)v40);
            uint16x8_t v42 = vaddw_u8((uint16x8_t)v35, *(uint8x8_t *)v41.i8);
            int8x16_t v43 = *(int8x16_t *)&v32[v20 * (v38 & 0xF)];
            uint16x8_t v44 = vaddw_high_u8((uint16x8_t)v36, v41);
            int16x8_t v45 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v43, v34)));
            uint8x16_t v46 = (uint8x16_t)vandq_s8(v43, (int8x16_t)v45);
            int16x8_t v37 = vsubq_s16(vsubq_s16(v37, v40), v45);
            int16x8_t v35 = (int16x8_t)vaddw_u8(v42, *(uint8x8_t *)v46.i8);
            int16x8_t v36 = (int16x8_t)vaddw_high_u8(v44, v46);
            --v33;
            ++v38;
          }
          while (v33 != -5);
          *v31++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v35, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), v50)), v29))), (uint16x8_t)vqrdmulhq_s16(v36, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v37))), v50)), v29)));
          ++v30;
          v32 += 16;
        }
        while (v30 != v24);
      }
      ++v27;
      ++v28;
    }
    while ((uint64_t)v26++ < v52);
  }
  if (v22 != __src) {
    free(v22);
  }
}

void chromapowerblur17x17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  int v12 = v11;
  unint64_t v54 = v13;
  int v14 = v10;
  uint64_t v48 = v15;
  uint64_t v49 = v16;
  uint64_t v18 = v17;
  uint64_t v19 = v9;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  size_t v20 = 2 * v10;
  int v51 = v21;
  if ((unint64_t)(v10 << 6) > 0x10000) {
    unint64_t v22 = malloc_type_malloc(v10 << 6, 0xAC138ACAuLL);
  }
  else {
    unint64_t v22 = __src;
  }
  LODWORD(v23) = v12 + 8;
  uint16x8_t v53 = (uint16x8_t)vdupq_n_s16(a9);
  do
  {
    uint64_t v23 = (v23 - 1);
    if ((int)v23 < 0) {
      memcpy(&v22[v20 * (v23 & 0x1F)], v22, v20);
    }
    else {
      chromapowerblur17H((int16x4_t *)(v19 + v23 * v18), (uint8x16_t *)&v22[v20 * (v23 & 0x1F)], v14, a9);
    }
  }
  while ((int)v23 > v12 - 8);
  if (v12 < v51)
  {
    if (v14 >> 3 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v14 >> 3;
    }
    int v25 = v12;
    unint64_t v26 = v12 + 8;
    uint64_t v52 = v51 + 7;
    char v27 = v25 + 1;
    int v28 = v25 - 1;
    float32x4_t v50 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      if (v26 >= v54) {
        memcpy(&v22[v20 * (v26 & 0x1F)], &v22[(((_BYTE)v54 - 1) & 0x1F) * v20], v20);
      }
      else {
        chromapowerblur17H((int16x4_t *)(v19 + v26 * v18), (uint8x16_t *)&v22[v20 * (v26 & 0x1F)], v14, a9);
      }
      v29.i64[0] = 0x1000100010001;
      v29.i64[1] = 0x1000100010001;
      if (v14 >= 8)
      {
        int v30 = 0;
        int v31 = (uint8x16_t *)(v48 + (v26 - 8) * v49);
        BOOL v32 = v22;
        do
        {
          int v33 = 0;
          uint8x16_t v34 = *(uint8x16_t *)&v32[v20 * ((v26 - 8) & 0x1F)];
          int16x8_t v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8);
          int16x8_t v36 = (int16x8_t)vmovl_high_u8(v34);
          v37.i64[0] = 0x1000100010001;
          v37.i64[1] = 0x1000100010001;
          int v38 = v28;
          do
          {
            int8x16_t v39 = *(int8x16_t *)&v32[v20 * (v38 & 0x1F)];
            int16x8_t v40 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v34)));
            uint8x16_t v41 = (uint8x16_t)vandq_s8(v39, (int8x16_t)v40);
            uint16x8_t v42 = vaddw_u8((uint16x8_t)v35, *(uint8x8_t *)v41.i8);
            int8x16_t v43 = *(int8x16_t *)&v32[v20 * ((v27 + (_BYTE)v33) & 0x1F)];
            uint16x8_t v44 = vaddw_high_u8((uint16x8_t)v36, v41);
            int16x8_t v45 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v43, v34)));
            uint8x16_t v46 = (uint8x16_t)vandq_s8(v43, (int8x16_t)v45);
            int16x8_t v37 = vsubq_s16(vsubq_s16(v37, v40), v45);
            int16x8_t v35 = (int16x8_t)vaddw_u8(v42, *(uint8x8_t *)v46.i8);
            int16x8_t v36 = (int16x8_t)vaddw_high_u8(v44, v46);
            ++v33;
            --v38;
          }
          while (v33 != 8);
          *v31++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v35, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), v50)), v29))), (uint16x8_t)vqrdmulhq_s16(v36, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v37))), v50)), v29)));
          ++v30;
          v32 += 16;
        }
        while (v30 != v24);
      }
      ++v27;
      ++v28;
    }
    while ((uint64_t)v26++ < v52);
  }
  if (v22 != __src) {
    free(v22);
  }
}

char *powerBlurNoiseReductionContextCreate(int a1, int a2)
{
  uint64_t v4 = (char *)malloc_type_malloc(0xB8uLL, 0x10A0040E2CBC39CuLL);
  unint64_t v5 = v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 16_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 8_Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + _Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *((_DWORD *)v4 + 10) = a2;
    *(void *)uint64_t v4 = 0x172482717;
    *((_DWORD *)v4 + 1) = FigGetCFPreferenceNumberWithDefault();
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    if (CFPreferenceNumberWithDefault == 9) {
      int v7 = 9;
    }
    else {
      int v7 = 0;
    }
    if (CFPreferenceNumberWithDefault == 17) {
      int v7 = 17;
    }
    *((_DWORD *)v5 + 2) = v7;
    *((_DWORD *)v5 + 17) = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x4E0], 8) = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v5 + 19) = FigGetCFPreferenceNumberWithDefault();
    if (*((_DWORD *)v5 + 1)) {
      powerBlurNoiseReductionGPUContextInit(a1, (void *)v5 + 2);
    }
  }
  return v5;
}

void powerBlurNoiseReductionContextDestroy(_DWORD *a1)
{
  if (a1 && *a1 == 1917331223)
  {
    if (a1[1]) {
      powerBlurNoiseReductionGPUContextDestroy((uint64_t)(a1 + 4));
    }
    *((void *)a1 + 22) = 0;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + _Block_object_dispose(&STACK[0x4E0], 8) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }
}

_DWORD *powerBlurNoiseReductionReleaseBuffers(_DWORD *result)
{
  if (result && *result == 1917331223)
  {
    if (result[1]) {
      return (_DWORD *)powerBlurNoiseReductionGPUReleaseBuffers((uint64_t)(result + 4));
    }
  }
  return result;
}

uint16x8_t chromapowerblur11H(int16x4_t *a1, uint8x16_t *a2, int a3, unsigned int a4)
{
  uint16x8_t v4 = (uint16x8_t)vdupq_n_s16(a4);
  int16x8_t v5 = *(int16x8_t *)a1->i8;
  int8x16_t v6 = (int8x16_t)vdupq_lane_s16(*a1, 0);
  if (a3 <= 15)
  {
    int8x16_t v45 = vextq_s8(v6, (int8x16_t)v5, 6uLL);
    int8x16_t v49 = vextq_s8(v6, (int8x16_t)v5, 8uLL);
    int8x16_t v53 = vextq_s8(v6, (int8x16_t)v5, 0xAuLL);
  }
  else
  {
    int v7 = (int8x16_t *)&a1[2];
    int v8 = (a3 >> 3) - 1;
    v9.i64[0] = 0x2000200020002;
    v9.i64[1] = 0x2000200020002;
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    v11.i64[0] = 0x1000100010001;
    v11.i64[1] = 0x1000100010001;
    int8x16_t v12 = v6;
    do
    {
      int8x16_t v6 = (int8x16_t)v5;
      int8x16_t v13 = *v7++;
      int16x8_t v5 = (int16x8_t)v13;
      int8x16_t v14 = vextq_s8(v12, v6, 6uLL);
      int8x16_t v15 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v14, (uint8x16_t)v6)));
      uint8x16_t v16 = (uint8x16_t)vandq_s8(v14, v15);
      int16x8_t v17 = vsubq_s16((int16x8_t)vandq_s8(v15, v9), (int16x8_t)vmvnq_s8(v15));
      int8x16_t v18 = vextq_s8(v12, v6, 8uLL);
      int16x8_t v19 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v18, (uint8x16_t)v6)));
      uint8x16_t v20 = (uint8x16_t)vandq_s8(v18, (int8x16_t)v19);
      uint16x8_t v21 = vaddw_u8(vaddl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v6.i8), *(uint8x8_t *)v20.i8);
      int8x16_t v22 = vextq_s8(v12, v6, 0xAuLL);
      uint16x8_t v23 = vaddw_high_u8(vaddl_high_u8(v16, (uint8x16_t)v6), v20);
      int16x8_t v24 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v22, (uint8x16_t)v6)));
      uint8x16_t v25 = (uint8x16_t)vandq_s8(v22, (int8x16_t)v24);
      uint16x8_t v26 = vaddw_u8(v21, *(uint8x8_t *)v25.i8);
      uint16x8_t v27 = vaddw_high_u8(v23, v25);
      int8x16_t v28 = vextq_s8(v12, v6, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v28, (uint8x16_t)v6)));
      uint8x16_t v30 = (uint8x16_t)vandq_s8(v28, (int8x16_t)v29);
      int8x16_t v31 = vextq_s8(v12, v6, 0xEuLL);
      int16x8_t v32 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v31, (uint8x16_t)v6)));
      uint8x16_t v33 = (uint8x16_t)vandq_s8(v31, (int8x16_t)v32);
      uint16x8_t v34 = vaddw_high_u8(v27, v30);
      uint16x8_t v35 = vaddw_u8(vaddw_u8(v26, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v33.i8);
      int8x16_t v36 = vextq_s8(v6, v13, 2uLL);
      int16x8_t v37 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v36, (uint8x16_t)v6)));
      uint16x8_t v38 = vaddw_high_u8(v34, v33);
      uint8x16_t v39 = (uint8x16_t)vandq_s8(v36, (int8x16_t)v37);
      int8x16_t v40 = vextq_s8(v6, v13, 4uLL);
      uint16x8_t v41 = vaddw_high_u8(v38, v39);
      int16x8_t v42 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v6)));
      uint8x16_t v43 = (uint8x16_t)vandq_s8(v40, (int8x16_t)v42);
      uint16x8_t v44 = vaddw_u8(vaddw_u8(v35, *(uint8x8_t *)v39.i8), *(uint8x8_t *)v43.i8);
      int8x16_t v45 = vextq_s8(v6, v13, 6uLL);
      uint16x8_t v46 = vaddw_high_u8(v41, v43);
      int16x8_t v47 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v6)));
      uint8x16_t v48 = (uint8x16_t)vandq_s8(v45, (int8x16_t)v47);
      int8x16_t v49 = vextq_s8(v6, v13, 8uLL);
      uint16x8_t v50 = vaddw_u8(v44, *(uint8x8_t *)v48.i8);
      int16x8_t v51 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v6)));
      uint8x16_t v52 = (uint8x16_t)vandq_s8(v49, (int8x16_t)v51);
      int8x16_t v53 = vextq_s8(v6, v13, 0xAuLL);
      uint16x8_t v54 = vaddw_high_u8(v46, v48);
      int16x8_t v55 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v6)));
      int16x8_t v56 = vsubq_s16(v17, v19);
      uint8x16_t v57 = (uint8x16_t)vandq_s8(v53, (int8x16_t)v55);
      uint16x8_t v58 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v56, v24), v29), v32), v37), v42), v47), v51), v55);
      *a2++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(v50, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v57.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), v10)), v11))), (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(v54, v52), v57), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v58))), v10)), v11)));
      int8x16_t v12 = v6;
      --v8;
    }
    while (v8);
  }
  int8x16_t v59 = (int8x16_t)vdupq_laneq_s16(v5, 7);
  int8x16_t v60 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v5)));
  uint8x16_t v61 = (uint8x16_t)vandq_s8(v45, v60);
  v62.i64[0] = 0x2000200020002;
  v62.i64[1] = 0x2000200020002;
  int16x8_t v63 = vsubq_s16((int16x8_t)vandq_s8(v60, v62), (int16x8_t)vmvnq_s8(v60));
  uint16x8_t v64 = vaddl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v5.i8);
  uint16x8_t v65 = vaddl_high_u8(v61, (uint8x16_t)v5);
  int16x8_t v66 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v5)));
  uint8x16_t v67 = (uint8x16_t)vandq_s8(v49, (int8x16_t)v66);
  uint16x8_t v68 = vaddw_u8(v64, *(uint8x8_t *)v67.i8);
  uint16x8_t v69 = vaddw_high_u8(v65, v67);
  int16x8_t v70 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v5)));
  uint8x16_t v71 = (uint8x16_t)vandq_s8(v53, (int8x16_t)v70);
  uint16x8_t v72 = vaddw_u8(v68, *(uint8x8_t *)v71.i8);
  uint16x8_t v73 = vaddw_high_u8(v69, v71);
  int8x16_t v74 = vextq_s8(v6, (int8x16_t)v5, 0xCuLL);
  int16x8_t v75 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v5)));
  uint8x16_t v76 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v75);
  uint16x8_t v77 = vaddw_u8(v72, *(uint8x8_t *)v76.i8);
  uint16x8_t v78 = vaddw_high_u8(v73, v76);
  int8x16_t v79 = vextq_s8(v6, (int8x16_t)v5, 0xEuLL);
  int16x8_t v80 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v79, (uint8x16_t)v5)));
  uint8x16_t v81 = (uint8x16_t)vandq_s8(v79, (int8x16_t)v80);
  uint16x8_t v82 = vaddw_u8(v77, *(uint8x8_t *)v81.i8);
  uint16x8_t v83 = vaddw_high_u8(v78, v81);
  int8x16_t v84 = vextq_s8((int8x16_t)v5, v59, 2uLL);
  int16x8_t v85 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v84, (uint8x16_t)v5)));
  uint8x16_t v86 = (uint8x16_t)vandq_s8(v84, (int8x16_t)v85);
  uint16x8_t v87 = vaddw_u8(v82, *(uint8x8_t *)v86.i8);
  uint16x8_t v88 = vaddw_high_u8(v83, v86);
  int8x16_t v89 = vextq_s8((int8x16_t)v5, v59, 4uLL);
  int16x8_t v90 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v89, (uint8x16_t)v5)));
  uint8x16_t v91 = (uint8x16_t)vandq_s8(v89, (int8x16_t)v90);
  uint16x8_t v92 = vaddw_u8(v87, *(uint8x8_t *)v91.i8);
  uint16x8_t v93 = vaddw_high_u8(v88, v91);
  int8x16_t v94 = vextq_s8((int8x16_t)v5, v59, 6uLL);
  int16x8_t v95 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v94, (uint8x16_t)v5)));
  uint8x16_t v96 = (uint8x16_t)vandq_s8(v94, (int8x16_t)v95);
  uint16x8_t v97 = vaddw_u8(v92, *(uint8x8_t *)v96.i8);
  uint16x8_t v98 = vaddw_high_u8(v93, v96);
  int8x16_t v99 = vextq_s8((int8x16_t)v5, v59, 8uLL);
  int16x8_t v100 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v99, (uint8x16_t)v5)));
  uint8x16_t v101 = (uint8x16_t)vandq_s8(v99, (int8x16_t)v100);
  int8x16_t v102 = vextq_s8((int8x16_t)v5, v59, 0xAuLL);
  int16x8_t v103 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v102, (uint8x16_t)v5)));
  uint8x16_t v104 = (uint8x16_t)vandq_s8(v102, (int8x16_t)v103);
  uint16x8_t v105 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v63, v66), v70), v75), v80), v85), v90), v95), v100), v103);
  int16x8_t v106 = (int16x8_t)vaddw_u8(vaddw_u8(v97, *(uint8x8_t *)v101.i8), *(uint8x8_t *)v104.i8);
  int16x8_t v107 = (int16x8_t)vaddw_high_u8(vaddw_high_u8(v98, v101), v104);
  float32x4_t v108 = vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v105.i8)));
  float32x4_t v109 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
  v66.i64[0] = 0x1000100010001;
  v66.i64[1] = 0x1000100010001;
  uint16x8_t result = (uint16x8_t)vqrdmulhq_s16(v107, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v105))), v109)), (int32x4_t)v66));
  *a2 = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v106, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v108, v109)), (int32x4_t)v66))), result);
  return result;
}

uint16x8_t chromapowerblur17H(int16x4_t *a1, uint8x16_t *a2, int a3, unsigned int a4)
{
  uint16x8_t v4 = (uint16x8_t)vdupq_n_s16(a4);
  int16x8_t v5 = *(int16x8_t *)a1->i8;
  int8x16_t v6 = (int8x16_t)vdupq_lane_s16(*a1, 0);
  if (a3 <= 15)
  {
    int8x16_t v51 = vextq_s8(v6, (int8x16_t)v5, 2uLL);
    int8x16_t v55 = vextq_s8(v6, (int8x16_t)v5, 4uLL);
    int8x16_t v60 = vextq_s8(v6, (int8x16_t)v5, 6uLL);
    int8x16_t v65 = vextq_s8(v6, (int8x16_t)v5, 8uLL);
    int8x16_t v70 = vextq_s8(v6, (int8x16_t)v5, 0xAuLL);
    int8x16_t v74 = vextq_s8(v6, (int8x16_t)v5, 0xCuLL);
    int8x16_t v78 = vextq_s8(v6, (int8x16_t)v5, 0xEuLL);
  }
  else
  {
    int v7 = (int8x16_t *)&a1[2];
    int v8 = (a3 >> 3) - 1;
    v9.i64[0] = 0x2000200020002;
    v9.i64[1] = 0x2000200020002;
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    v11.i64[0] = 0x1000100010001;
    v11.i64[1] = 0x1000100010001;
    do
    {
      int8x16_t v12 = (int8x16_t)v5;
      int8x16_t v13 = *v7++;
      int16x8_t v5 = (int16x8_t)v13;
      int8x16_t v14 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v6, (uint8x16_t)v12)));
      uint8x16_t v15 = (uint8x16_t)vandq_s8(v6, v14);
      int16x8_t v16 = vsubq_s16((int16x8_t)vandq_s8(v14, v9), (int16x8_t)vmvnq_s8(v14));
      int8x16_t v17 = vextq_s8(v6, v12, 2uLL);
      int16x8_t v18 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v17, (uint8x16_t)v12)));
      uint8x16_t v19 = (uint8x16_t)vandq_s8(v17, (int8x16_t)v18);
      uint16x8_t v20 = vaddw_u8(vaddl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v12.i8), *(uint8x8_t *)v19.i8);
      uint16x8_t v21 = vaddw_high_u8(vaddl_high_u8(v15, (uint8x16_t)v12), v19);
      int8x16_t v22 = vextq_s8(v6, v12, 4uLL);
      int16x8_t v23 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v22, (uint8x16_t)v12)));
      uint8x16_t v24 = (uint8x16_t)vandq_s8(v22, (int8x16_t)v23);
      int8x16_t v25 = vextq_s8(v6, v12, 6uLL);
      int16x8_t v26 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v25, (uint8x16_t)v12)));
      uint8x16_t v27 = (uint8x16_t)vandq_s8(v25, (int8x16_t)v26);
      uint16x8_t v28 = vaddw_high_u8(v21, v24);
      uint16x8_t v29 = vaddw_u8(vaddw_u8(v20, *(uint8x8_t *)v24.i8), *(uint8x8_t *)v27.i8);
      int8x16_t v30 = vextq_s8(v6, v12, 8uLL);
      int16x8_t v31 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v30, (uint8x16_t)v12)));
      uint16x8_t v32 = vaddw_high_u8(v28, v27);
      uint8x16_t v33 = (uint8x16_t)vandq_s8(v30, (int8x16_t)v31);
      uint16x8_t v34 = vaddw_u8(v29, *(uint8x8_t *)v33.i8);
      int8x16_t v35 = vextq_s8(v6, v12, 0xAuLL);
      uint16x8_t v36 = vaddw_high_u8(v32, v33);
      int16x8_t v37 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v35, (uint8x16_t)v12)));
      uint8x16_t v38 = (uint8x16_t)vandq_s8(v35, (int8x16_t)v37);
      uint16x8_t v39 = vaddw_u8(v34, *(uint8x8_t *)v38.i8);
      int8x16_t v40 = vextq_s8(v6, v12, 0xCuLL);
      uint16x8_t v41 = vaddw_high_u8(v36, v38);
      int16x8_t v42 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v12)));
      uint8x16_t v43 = (uint8x16_t)vandq_s8(v40, (int8x16_t)v42);
      uint16x8_t v44 = vaddw_u8(v39, *(uint8x8_t *)v43.i8);
      int8x16_t v45 = vextq_s8(v6, v12, 0xEuLL);
      uint16x8_t v46 = vaddw_high_u8(v41, v43);
      int16x8_t v47 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v12)));
      uint8x16_t v48 = (uint8x16_t)vandq_s8(v45, (int8x16_t)v47);
      uint16x8_t v49 = vaddw_u8(v44, *(uint8x8_t *)v48.i8);
      uint16x8_t v50 = vaddw_high_u8(v46, v48);
      int8x16_t v51 = vextq_s8(v12, v13, 2uLL);
      int16x8_t v52 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v12)));
      uint8x16_t v53 = (uint8x16_t)vandq_s8(v51, (int8x16_t)v52);
      uint16x8_t v54 = vaddw_u8(v49, *(uint8x8_t *)v53.i8);
      int8x16_t v55 = vextq_s8(v12, v13, 4uLL);
      int16x8_t v56 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v55, (uint8x16_t)v12)));
      uint8x16_t v57 = (uint8x16_t)vandq_s8(v55, (int8x16_t)v56);
      uint16x8_t v58 = vaddw_high_u8(v50, v53);
      uint16x8_t v59 = vaddw_u8(v54, *(uint8x8_t *)v57.i8);
      int8x16_t v60 = vextq_s8(v12, v13, 6uLL);
      int16x8_t v61 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v60, (uint8x16_t)v12)));
      uint16x8_t v62 = vaddw_high_u8(v58, v57);
      uint8x16_t v63 = (uint8x16_t)vandq_s8(v60, (int8x16_t)v61);
      uint16x8_t v64 = vaddw_u8(v59, *(uint8x8_t *)v63.i8);
      int8x16_t v65 = vextq_s8(v12, v13, 8uLL);
      uint16x8_t v66 = vaddw_high_u8(v62, v63);
      int16x8_t v67 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v12)));
      uint8x16_t v68 = (uint8x16_t)vandq_s8(v65, (int8x16_t)v67);
      uint16x8_t v69 = vaddw_u8(v64, *(uint8x8_t *)v68.i8);
      int8x16_t v70 = vextq_s8(v12, v13, 0xAuLL);
      uint16x8_t v71 = vaddw_high_u8(v66, v68);
      int16x8_t v72 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v12)));
      uint8x16_t v73 = (uint8x16_t)vandq_s8(v70, (int8x16_t)v72);
      int8x16_t v74 = vextq_s8(v12, v13, 0xCuLL);
      uint16x8_t v75 = vaddw_u8(v69, *(uint8x8_t *)v73.i8);
      int16x8_t v76 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v12)));
      uint8x16_t v77 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v76);
      int8x16_t v78 = vextq_s8(v12, v13, 0xEuLL);
      uint16x8_t v79 = vaddw_high_u8(v71, v73);
      int16x8_t v80 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v78, (uint8x16_t)v12)));
      uint8x16_t v81 = (uint8x16_t)vandq_s8(v78, (int8x16_t)v80);
      int16x8_t v82 = vsubq_s16(v16, v18);
      int16x8_t v83 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v13, (uint8x16_t)v12)));
      int16x8_t v84 = vsubq_s16(v82, v23);
      uint8x16_t v85 = (uint8x16_t)vandq_s8(v13, (int8x16_t)v83);
      uint16x8_t v86 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v84, v26), v31), v37), v42), v47), v52), v56), v61), v67), v72), v76), v80), v83);
      *a2++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(v75, *(uint8x8_t *)v77.i8), *(uint8x8_t *)v81.i8), *(uint8x8_t *)v85.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v86.i8))), v10)), v11))), (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddw_high_u8(v79, v77), v81), v85), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v86))), v10)), v11)));
      int8x16_t v6 = v12;
      --v8;
    }
    while (v8);
    int8x16_t v6 = v12;
  }
  int8x16_t v87 = (int8x16_t)vdupq_laneq_s16(v5, 7);
  int8x16_t v88 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v6, (uint8x16_t)v5)));
  uint8x16_t v89 = (uint8x16_t)vandq_s8(v6, v88);
  v90.i64[0] = 0x2000200020002;
  v90.i64[1] = 0x2000200020002;
  int16x8_t v91 = vsubq_s16((int16x8_t)vandq_s8(v88, v90), (int16x8_t)vmvnq_s8(v88));
  uint16x8_t v92 = vaddl_u8(*(uint8x8_t *)v89.i8, *(uint8x8_t *)v5.i8);
  uint16x8_t v93 = vaddl_high_u8(v89, (uint8x16_t)v5);
  int16x8_t v94 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v5)));
  uint8x16_t v95 = (uint8x16_t)vandq_s8(v51, (int8x16_t)v94);
  uint16x8_t v96 = vaddw_u8(v92, *(uint8x8_t *)v95.i8);
  uint16x8_t v97 = vaddw_high_u8(v93, v95);
  int16x8_t v98 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v55, (uint8x16_t)v5)));
  uint8x16_t v99 = (uint8x16_t)vandq_s8(v55, (int8x16_t)v98);
  uint16x8_t v100 = vaddw_u8(v96, *(uint8x8_t *)v99.i8);
  uint16x8_t v101 = vaddw_high_u8(v97, v99);
  int16x8_t v102 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v60, (uint8x16_t)v5)));
  uint8x16_t v103 = (uint8x16_t)vandq_s8(v60, (int8x16_t)v102);
  uint16x8_t v104 = vaddw_u8(v100, *(uint8x8_t *)v103.i8);
  uint16x8_t v105 = vaddw_high_u8(v101, v103);
  int16x8_t v106 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v5)));
  uint8x16_t v107 = (uint8x16_t)vandq_s8(v65, (int8x16_t)v106);
  uint16x8_t v108 = vaddw_u8(v104, *(uint8x8_t *)v107.i8);
  uint16x8_t v109 = vaddw_high_u8(v105, v107);
  int16x8_t v110 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v5)));
  uint8x16_t v111 = (uint8x16_t)vandq_s8(v70, (int8x16_t)v110);
  uint16x8_t v112 = vaddw_u8(v108, *(uint8x8_t *)v111.i8);
  uint16x8_t v113 = vaddw_high_u8(v109, v111);
  int16x8_t v114 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v5)));
  uint8x16_t v115 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v114);
  uint16x8_t v116 = vaddw_u8(v112, *(uint8x8_t *)v115.i8);
  uint16x8_t v117 = vaddw_high_u8(v113, v115);
  int16x8_t v118 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v78, (uint8x16_t)v5)));
  uint8x16_t v119 = (uint8x16_t)vandq_s8(v78, (int8x16_t)v118);
  uint16x8_t v120 = vaddw_u8(v116, *(uint8x8_t *)v119.i8);
  uint16x8_t v121 = vaddw_high_u8(v117, v119);
  int8x16_t v122 = vextq_s8((int8x16_t)v5, v87, 2uLL);
  int16x8_t v123 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v122, (uint8x16_t)v5)));
  uint8x16_t v124 = (uint8x16_t)vandq_s8(v122, (int8x16_t)v123);
  uint16x8_t v125 = vaddw_u8(v120, *(uint8x8_t *)v124.i8);
  uint16x8_t v126 = vaddw_high_u8(v121, v124);
  int8x16_t v127 = vextq_s8((int8x16_t)v5, v87, 4uLL);
  int16x8_t v128 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v127, (uint8x16_t)v5)));
  uint8x16_t v129 = (uint8x16_t)vandq_s8(v127, (int8x16_t)v128);
  uint16x8_t v130 = vaddw_u8(v125, *(uint8x8_t *)v129.i8);
  uint16x8_t v131 = vaddw_high_u8(v126, v129);
  int8x16_t v132 = vextq_s8((int8x16_t)v5, v87, 6uLL);
  int16x8_t v133 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v132, (uint8x16_t)v5)));
  uint8x16_t v134 = (uint8x16_t)vandq_s8(v132, (int8x16_t)v133);
  uint16x8_t v135 = vaddw_u8(v130, *(uint8x8_t *)v134.i8);
  uint16x8_t v136 = vaddw_high_u8(v131, v134);
  int8x16_t v137 = vextq_s8((int8x16_t)v5, v87, 8uLL);
  int16x8_t v138 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v137, (uint8x16_t)v5)));
  uint8x16_t v139 = (uint8x16_t)vandq_s8(v137, (int8x16_t)v138);
  uint16x8_t v140 = vaddw_u8(v135, *(uint8x8_t *)v139.i8);
  uint16x8_t v141 = vaddw_high_u8(v136, v139);
  int8x16_t v142 = vextq_s8((int8x16_t)v5, v87, 0xAuLL);
  int16x8_t v143 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v142, (uint8x16_t)v5)));
  uint8x16_t v144 = (uint8x16_t)vandq_s8(v142, (int8x16_t)v143);
  uint16x8_t v145 = vaddw_u8(v140, *(uint8x8_t *)v144.i8);
  uint16x8_t v146 = vaddw_high_u8(v141, v144);
  int8x16_t v147 = vextq_s8((int8x16_t)v5, v87, 0xCuLL);
  int16x8_t v148 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v147, (uint8x16_t)v5)));
  uint8x16_t v149 = (uint8x16_t)vandq_s8(v147, (int8x16_t)v148);
  uint16x8_t v150 = vaddw_u8(v145, *(uint8x8_t *)v149.i8);
  uint16x8_t v151 = vaddw_high_u8(v146, v149);
  int8x16_t v152 = vextq_s8((int8x16_t)v5, v87, 0xEuLL);
  int16x8_t v153 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v152, (uint8x16_t)v5)));
  uint8x16_t v154 = (uint8x16_t)vandq_s8(v152, (int8x16_t)v153);
  int16x8_t v155 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v87, (uint8x16_t)v5)));
  uint8x16_t v156 = (uint8x16_t)vandq_s8(v87, (int8x16_t)v155);
  uint16x8_t v157 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v91, v94), v98), v102), v106), v110), v114), v118), v123), v128), v133), v138), v143),
                           v148),
                         v153),
                       v155);
  float32x4_t v158 = vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v157.i8)));
  float32x4_t v159 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
  v98.i64[0] = 0x1000100010001;
  v98.i64[1] = 0x1000100010001;
  uint16x8_t result = (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(v151, v154), v156), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v157))), v159)), (int32x4_t)v98));
  *a2 = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(v150, *(uint8x8_t *)v154.i8), *(uint8x8_t *)v156.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v158, v159)), (int32x4_t)v98))), result);
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetTypeID()
{
  return sSharedMemRegionID;
}

uint64_t shmemRegionRegister()
{
  sSharedMemRegionClass = 0;
  *(void *)algn_1EB4C6068 = "FigSharedMemPoolSharedRegion";
  qword_1EB4C6070 = (uint64_t)shmemRegionInit;
  unk_1EB4C6078 = 0;
  qword_1EB4C6080 = (uint64_t)shmemRegionFinalize;
  unk_1EB4C6088 = 0;
  qword_1EB4C6090 = 0;
  unk_1EB4C6098 = 0;
  qword_1EB4C60A0 = (uint64_t)shmemRegionCopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sSharedMemRegionIOSurfaceID ID = result;
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetSize(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetOwner(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t FigSharedMemPoolGetTypeID()
{
  return sSharedMemPoolID;
}

uint64_t shmemPoolRegister()
{
  sSharedMemPoolClass = 0;
  unk_1EB4C5B40 = "FigSharedMemoryPool";
  qword_1EB4C5B48 = (uint64_t)shmemPoolInit;
  unk_1EB4C5B50 = 0;
  qword_1EB4C5B58 = (uint64_t)shmemPoolFinalize;
  unk_1EB4C5B60 = 0;
  qword_1EB4C5B68 = 0;
  unk_1EB4C5B70 = 0;
  qword_1EB4C5B78 = (uint64_t)shmemPoolCopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sSharedMemPoolIOSurfaceID ID = result;
  return result;
}

void FigSharedMemPoolGetBlockStats(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 && a3)
  {
    unint64_t v6 = *(void *)(a1 + 56);
    if (a2)
    {
      if (v6 >= *a3) {
        unint64_t v6 = *a3;
      }
      if (v6)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          uint64_t v8 = *(void *)(a1 + 48) + 24 * i;
          *(void *)(a2 + 24 * i) = *(void *)(v8 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
          int8x16_t v9 = *(void **)v8;
          if (*(void *)v8)
          {
            uint64_t v10 = *(void *)(a1 + 24) + 4;
            uint64_t v11 = a2 + 24 * i;
            int8x16_t v12 = (void *)(v11 + 8);
            int8x16_t v13 = (void *)(v11 + 16);
            do
            {
              if (*(_DWORD *)(v10 + *v9)) {
                int8x16_t v14 = v12;
              }
              else {
                int8x16_t v14 = v13;
              }
              ++*v14;
              int8x16_t v9 = (void *)v9[1];
            }
            while (v9);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
        }
      }
    }
    *a3 = v6;
  }
}

uint64_t FigSharedMemBlockGetUsableSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result - 8) - 16;
  }
  return result;
}

void shmemAllocatorRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef shmemAllocatorCopyDescription(const void *a1)
{
  if (a1) {
    return CFCopyDescription(a1);
  }
  else {
    return (CFStringRef)CFRetain(@"<FigSharedMemPool NULL>");
  }
}

unsigned int *shmemAllocatorReallocate(unsigned int *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    size_t v5 = *(a1 - 2) - 16;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >= a2) {
    return a1;
  }
  if (!a4) {
    return 0;
  }
  unint64_t v6 = (void *)FigSharedMemBlockAllocate(a4, a2);
  int v7 = v6;
  if (a1 && v6)
  {
    memcpy(v6, a1, v5);
    FigSharedMemBlockRelease((uint64_t)a1);
  }
  return (unsigned int *)v7;
}

uint64_t shmemAllocatorPreferredSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (a1 >= 1 && *(void *)(a3 + 32) > (unint64_t)a1)
  {
    uint64_t v3 = shmemPoolLookupSubPool(a3, a1);
    if (v3) {
      return *(void *)(v3 + 16) - 16;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t FigSharedMemBlockGetSharedRegionAddressAndSize(uint64_t result, uint64_t *a2, void *a3)
{
  if (result)
  {
    uint64_t v3 = result - *(unsigned int *)(result - 4) - 16;
    if (a2) {
      *a2 = v3;
    }
    if (a3) {
      *a3 = *(unsigned int *)(v3 + 4);
    }
  }
  return result;
}

uint64_t shmemRegionFinalize(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = v1[4];
    if (v3 == getpid())
    {
      v1[3] = 0;
    }
    else
    {
      v1[1] = 0;
      v1[2] = 0;
    }
    uint16x8_t v4 = *(void **)(a1 + 16);
    size_t v5 = *(void *)(a1 + 24);
    return munmap(v4, v5);
  }
  else
  {
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
}

CFStringRef shmemRegionCopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigSharedMemPoolSharedRegion %p> {\n  Shared region: %p\n  Shared region size: %zu\n}", a1, a1[2], a1[3]);
}

void shmemPoolFinalize(void *a1)
{
  CFAllocatorRef v2 = (void *)a1[6];
  if (v2)
  {
    unint64_t v3 = a1[7];
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        size_t v5 = *(void **)(a1[6] + 24 * i);
        if (v5)
        {
          do
          {
            unint64_t v6 = (void *)v5[1];
            free(v5);
            size_t v5 = v6;
          }
          while (v6);
          unint64_t v3 = a1[7];
        }
      }
      CFAllocatorRef v2 = (void *)a1[6];
    }
    free(v2);
  }
  int v7 = (const void *)a1[2];
  if (v7)
  {
    CFRelease(v7);
  }
}

CFStringRef shmemPoolCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigSharedMemPool %p> {\n}", a1);
}

void fcsvm_vibeNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t FigCaptureTempFileManagerStart()
{
  if (FigCaptureTempFileManagerStart_once != -1) {
    dispatch_once(&FigCaptureTempFileManagerStart_once, &__block_literal_global_27);
  }
  return 0;
}

FigCaptureTempFileRemover *__FigCaptureTempFileManagerStart_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = objc_alloc_init(FigCaptureTempFileRemover);
  sTempFileRemoverSingletouint64_t n = (uint64_t)result;
  return result;
}

void __FigCaptureSessionRemotePrewarmWithOptions_block_invoke(uint64_t a1)
{
  captureSessionRemote_prewarm(*(void *)(a1 + 32), *(const __CFDictionary **)(a1 + 40));
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigCaptureSessionRemoteCancelPrewarm(CFTypeRef cf, CFTypeRef a2)
{
  if (sCaptureSessionRemoteClient)
  {
    captureSessionRemote_cancelPrewarm((uint64_t)cf);
  }
  else
  {
    if (cf) {
      CFRetain(cf);
    }
    if (a2) {
      CFRetain(a2);
    }
    global_queue = dispatch_get_global_queue(2, 0);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionRemoteCancelPrewarm_block_invoke;
    void v6[3] = &__block_descriptor_48_e5_v8__0l;
    void v6[4] = cf;
    v6[5] = a2;
    dispatch_async(global_queue, v6);
  }
  return 0;
}

void __FigCaptureSessionRemoteCancelPrewarm_block_invoke(uint64_t a1)
{
  captureSessionRemote_cancelPrewarm(*(void *)(a1 + 32));
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t captureSessionRemote_cancelPrewarm(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  int v2 = objc_msgSend((id)objc_msgSend((id)sPrewarmedBundleIdentifiers, "objectForKeyedSubscript:", a1), "BOOLValue");
  os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  if (v2)
  {
    if (csr_ensureClientEstablished()
      || FigXPCCreateBasicMessage()
      || a1 && FigXPCMessageSetCFString()
      || FigXPCRemoteClientSendAsyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else if (a1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
      [(id)sPrewarmedBundleIdentifiers setObject:0 forKeyedSubscript:a1];
      os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
    }
  }
  return FigXPCRelease();
}

uint64_t FigCaptureSessionRemoteSetWombatEnabled(BOOL a1)
{
  if (csr_ensureClientEstablished()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_BOOL(0, (const char *)kFigCaptureSessionSetWombatEnabledMessagePayload_Value, a1),
        FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSessionRemoteSetWombatInUse(BOOL a1)
{
  if (csr_ensureClientEstablished()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_BOOL(0, (const char *)kFigCaptureSessionSetWombatInUseMessagePayload_Value, a1),
        FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t csr_deadConnectionCallback(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    uint64_t result = FigDebugAssert3();
  }
  *(unsigned char *)(v3 + 9) = 1;
  return result;
}

uint64_t captureSessionRemote_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = 1;
    if (!*(unsigned char *)(DerivedStorage + 9))
    {
      uint64_t v3 = FigXPCCreateBasicMessage();
      if (v3)
      {
        uint64_t v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
        if (!v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

void captureSessionRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSessionRemote_Invalidate();
  if (sCaptureSessionRemoteClient) {
    FigXPCRemoteClientDisassociateObject();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
  int v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  uint16x8_t v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 56) = 0;
  }
  size_t v5 = *(const void **)(DerivedStorage + 16);
  if (v5) {
    CFRelease(v5);
  }
  if (!*(unsigned char *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
}

__CFString *captureSessionRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    unint64_t v6 = " (invalidated)";
  }
  else {
    unint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureSessionRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>", a1, v5, v6, v7, *(void *)DerivedStorage);
  return Mutable;
}

uint64_t captureSessionRemote_CopyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = captureSessionRemote_getObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v2 = FigXPCSendStdCopyPropertyMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSessionRemote_CopySectionProperty(uint64_t a1)
{
  if (!captureSessionRemote_createBasicMessage(a1))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v2 = 4294954510;
    goto LABEL_6;
  }
  uint64_t v1 = FigXPCMessageSetCFString();
  if (v1
    || (uint64_t v1 = FigXPCMessageSetCFString(), v1)
    || (uint64_t v1 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v1))
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_6;
  }
  uint64_t v2 = FigXPCMessageCopyCFObject();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSessionRemote_StopRunning(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_FileSinkStartRecording(uint64_t a1, uint64_t a2, void *a3)
{
  CFIndex v5 = (void *)MEMORY[0x1A6272C70]();
  if ([a3 outputURL])
  {
    [a3 outputURL];
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_FileSinkStopRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_FileSinkPauseRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_FileSinkResumeRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_StillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = (void *)MEMORY[0x1A6272C70]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_StillImageSinkPrepareToCaptureBracket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = (void *)MEMORY[0x1A6272C70]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_IrisStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, void *a3)
{
  CFIndex v5 = (void *)MEMORY[0x1A6272C70]();
  if ([a3 movieURLForOriginalImage])
  {
    [a3 movieURLForOriginalImage];
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_IrisStillImageSinkPrepareToCapture(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (CFIndex v5 = (void *)[a3 copyXPCEncoding],
        xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E4F20290], v5),
        xpc_release(v5),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

void captureSessionRemote_IrisStillImageSinkBeginMomentCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = (void *)MEMORY[0x1A6272C70]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_IrisStillImageSinkCommitMomentCaptureToStillImageCapture(uint64_t a1, uint64_t a2, void *a3)
{
  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  if ([a3 movieURLForOriginalImage])
  {
    [a3 movieURLForOriginalImage];
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "spatialOverCaptureMovieURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "spatialOverCaptureMovieURL");
    FigSandboxRegisterURLWithProcess();
  }
  uint64_t v5 = [a3 spatialOverCaptureMovieURLForOriginalImage];
  if (v5)
  {
    [a3 spatialOverCaptureMovieURLForOriginalImage];
    uint64_t v5 = FigSandboxRegisterURLWithProcess();
  }
  unint64_t v6 = (void *)MEMORY[0x1A6272C70](v5);
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_IrisStillImageSinkCommitMomentCaptureToMovieRecording(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)MEMORY[0x1A6272C70]();
  if ([a3 outputURL])
  {
    [a3 outputURL];
    FigSandboxRegisterURLWithProcess();
  }
  if ([a3 spatialOverCaptureMovieURL])
  {
    [a3 spatialOverCaptureMovieURL];
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_IrisStillImageSinkCancelMomentCapture(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (xpc_dictionary_set_int64(BasicMessage, (const char *)*MEMORY[0x1E4F20290], a3),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_IrisStillImageSinkEndMomentCapture(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (xpc_dictionary_set_int64(BasicMessage, (const char *)*MEMORY[0x1E4F20290], a3),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

void captureSessionRemote_VisionDataSinkTriggerBurst(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t FigRemoteQueueServerStart(uint64_t a1)
{
  if (a1)
  {
    if (gFigRemoteQueueServerState_0)
    {
      FigDebugAssert3();
      return 4294954514;
    }
    else
    {
      uint64_t result = 0;
      gFigRemoteQueueServerState_0 = a1;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

uint64_t FigRemoteQueueServerGetName()
{
  return gFigRemoteQueueServerState_0;
}

uint64_t FigRemoteQueueServerCurrentProcessIsRunningService()
{
  return 1;
}

uint64_t FigRemoteQueueServerAddSender()
{
  return 0;
}

uint64_t FigRemoteQueueServerRegisterIOSurface()
{
  return 0;
}

uint64_t FigRemoteQueueServerReleaseIOSurfaces()
{
  return 0;
}

void sicibmr_renderToPixelBuffer(void *a1, uint64_t a2, __CVBuffer *a3, void *a4)
{
  id v10 = (id)[objc_alloc(MEMORY[0x1E4F1E070]) initWithPixelBuffer:a3];
  double Width = (double)CVPixelBufferGetWidth(a3);
  int8x16_t v9 = objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", a2, v10, a4, 0.0, 0.0, Width, (double)CVPixelBufferGetHeight(a3), 0.0, 0.0);
  if (!*a4) {
    [v9 waitUntilCompletedAndReturnError:a4];
  }
}

uint64_t sicibmr_landmarkToC0(uint64_t result, double *a2, double *a3, double *a4)
{
  double v4 = *a3 + *a2 * a3[2];
  double v5 = 1.0 - (a3[1] + a2[1] * a3[3]);
  *a4 = v4;
  a4[1] = v5;
  switch((int)result)
  {
    case 2:
      *a4 = 1.0 - v4;
      return result;
    case 3:
      *a4 = 1.0 - v4;
      a4[1] = 1.0 - v5;
      return result;
    case 4:
      a4[1] = 1.0 - v5;
      return result;
    case 5:
      float v6 = v4;
      goto LABEL_10;
    case 6:
      float v7 = v4;
      goto LABEL_8;
    case 7:
      float v7 = v4;
      double v5 = 1.0 - v5;
LABEL_8:
      float v6 = 1.0 - v7;
      goto LABEL_10;
    case 8:
      float v6 = v4;
      double v5 = 1.0 - v5;
LABEL_10:
      *a4 = v5;
      a4[1] = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VisualIntelligenceLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  CFAllocatorRef v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = VisualIntelligenceLibraryCore_frameworkLibrary;
  uint64_t v5 = VisualIntelligenceLibraryCore_frameworkLibrary;
  if (!VisualIntelligenceLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C24A10;
    long long v7 = *(_OWORD *)&off_1E5C24A20;
    v3[3] = _sl_dlopen();
    VisualIntelligenceLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5A77F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __VisualIntelligenceLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  VisualIntelligenceLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t VisualIntelligenceLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = VisualIntelligenceLibraryCore();
  if (!result) {
    VisualIntelligenceLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getVIServiceClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__0;
  long long v7 = __Block_byref_object_dispose__0;
  uint64_t v0 = getVIServiceClass_softClass;
  uint64_t v8 = getVIServiceClass_softClass;
  if (!getVIServiceClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVIServiceClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getVIServiceClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A78124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVIServiceClass_block_invoke(uint64_t a1)
{
  VisualIntelligenceLibrary();
  Class result = objc_getClass("VIService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVIServiceClass_block_invoke_cold_1();
  }
  getVIServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigRemoteOperationSenderResetWithApplier(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  void v3[2] = __FigRemoteOperationSenderResetWithApplier_block_invoke;
  v3[3] = &unk_1E5C24A88;
  v3[4] = a2;
  return FigRemoteQueueSenderResetWithApplier(a1, (uint64_t)v3);
}

uint64_t __FigRemoteOperationSenderResetWithApplier_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v5 + 16))(v5, a2, a3, a4)) {
    return 1;
  }
  uint64_t v7 = *a4;
  if (v7 && *(_DWORD *)v7 == 1919774576)
  {
    Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(*(void *)(v7 + 40));
    if (Region) {
      CFRetain(Region);
    }
    FigRemoteOperationCleanupMessageData((_DWORD *)v7);
  }
  return 0;
}

_DWORD *FigRemoteOperationCleanupMessageData(_DWORD *result)
{
  if (result && *result == 1919774576)
  {
    uint64_t v1 = result[1];
    if ((v1 - 7) >= 0xFFFFFFFA)
    {
      uint64_t v2 = roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v1 + 3];
      return (_DWORD *)v2();
    }
  }
  else
  {
    fig_log_get_emitter();
    return (_DWORD *)FigDebugAssert3();
  }
  return result;
}

uint64_t FigRemoteOperationSenderResetIfFullAndEnqueueOperation(void *a1, unsigned int *a2)
{
  return roEnqueue(a1, a2, 1);
}

void roSerializationContextReceiverFinalize_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    uint64_t v3 = *(const void **)(a2 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a2 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
    }
    uint64_t v4 = *(const void **)(a2 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a2 + 16) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    FigSimpleMutexDestroy();
    free((void *)a2);
  }
}

uint64_t roEnqueueDictionaryPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a2;
  id v10 = *(const void **)(a2 + 24);
  if (v10) {
    MutableCopCGFloat y = (void *)CFRetain(v10);
  }
  else {
    MutableCopCGFloat y = 0;
  }
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  uint64_t v16 = (uint64_t)Context;
  if (Context) {
    pthread_mutex_lock(*Context);
  }
  CFTypeRef v17 = *(CFTypeRef *)(v16 + 8);
  if (v17) {
    CFTypeRef v17 = CFRetain(v17);
  }
  CFTypeRef v90 = v17;
  CFDictionaryRef Count = *(const __CFDictionary **)(v85 + 32);
  if (Count)
  {
    CFDictionaryRef Count = (const __CFDictionary *)CFDictionaryGetCount(Count);
    uint64_t v19 = (uint64_t)Count;
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint8x16_t v81 = &v75;
  MEMORY[0x1F4188790](Count, v13, v14, v15);
  uint16x8_t v21 = (char *)&v75 - ((v20 + 35) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)v85 != 1 || !MutableCopy)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    LODWORD(v64) = 0;
    uint64_t v59 = 4294950629;
    goto LABEL_70;
  }
  int8x16_t v22 = CFAllocatorAllocate(a1, 64, 0);
  if (!v22)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    LODWORD(v64) = 0;
    uint64_t v59 = 4294950630;
    goto LABEL_70;
  }
  int v79 = a4;
  uint64_t v75 = v5;
  *(void *)uint16x8_t v21 = v22;
  *((void *)v21 + 1) = 0;
  int16x8_t v23 = v22;
  uint64_t v24 = v85;
  *((_DWORD *)v21 + 4) = *(_DWORD *)(v85 + 4);
  v22[2] = 0u;
  v22[3] = 0u;
  *int8x16_t v22 = 0u;
  v22[1] = 0u;
  *(void *)int8x16_t v22 = 0x1726D6F70;
  *((void *)v22 + 2) = *(void *)(v24 + 8);
  *((void *)v22 + 4) = v22;
  uint64_t CacheForName = roSerializationContextGetCacheForName(v16, a1, *(const __CFString **)(v24 + 16));
  int16x8_t v80 = v23;
  *((void *)v23 + 3) = CacheForName;
  if (v19 < 1)
  {
    LODWORD(v64) = 1;
    int8x16_t v60 = v80;
LABEL_40:
    uint64_t v65 = roSerializePropertyListData(a1, MutableCopy, v60);
    if (v65)
    {
      uint64_t v59 = v65;
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_70;
    }
    uint64_t v66 = (v64 - 1);
    if (v64 != 1)
    {
      int16x8_t v67 = (uint64_t *)v21;
      do
      {
        uint64_t v68 = *v67;
        int16x8_t v67 = (uint64_t *)((char *)v67 + 20);
        *(_DWORD *)(v68 + 12) = 1;
        --v66;
      }
      while (v66);
    }
    if (v79) {
      uint64_t v69 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)v21, v64, a5);
    }
    else {
      uint64_t v69 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)v21, v64);
    }
    uint64_t v59 = v69;
    if (v69)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_70;
    }
    int8x16_t v70 = *(const void **)(v16 + 8);
    if (v70) {
      CFRelease(v70);
    }
    uint64_t v59 = 0;
    *(void *)(v16 + _Block_object_dispose(&STACK[0x4E0], 8) = v90;
    CFTypeRef v90 = 0;
    goto LABEL_51;
  }
  uint64_t v76 = a3;
  uint64_t v77 = a5;
  uint64_t v83 = v16;
  CFAllocatorRef v84 = a1;
  int8x16_t v78 = &v75;
  MEMORY[0x1F4188790](CacheForName, v26, v27, v28);
  unint64_t v29 = (8 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  int8x16_t v30 = (const void **)((char *)&v75 - v29);
  if ((unint64_t)(8 * v19) >= 0x200) {
    size_t v31 = 512;
  }
  else {
    size_t v31 = 8 * v19;
  }
  bzero((char *)&v75 - v29, v31);
  MEMORY[0x1F4188790](v32, v33, v34, v35);
  uint16x8_t v36 = (_DWORD *)((char *)&v75 - v29);
  bzero((char *)&v75 - v29, v31);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v24 + 32), (const void **)((char *)&v75 - v29), (const void **)((char *)&v75 - v29));
  unsigned int v87 = 1;
  CFAllocatorRef v82 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  int16x8_t v37 = (const void **)((char *)&v75 - v29);
  uint64_t v38 = v19;
  while (1)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v24 + 24), *v37);
    if (Value) {
      break;
    }
LABEL_28:
    v36 += 2;
    ++v37;
    if (!--v38)
    {
      uint64_t v16 = v83;
      a1 = v84;
      a3 = v76;
      a5 = v77;
      int8x16_t v60 = v80;
      if (!MutableCopy)
      {
        uint64_t v61 = v85;
        CFIndex v62 = CFDictionaryGetCount(*(CFDictionaryRef *)(v85 + 24));
        MutableCopCGFloat y = CFDictionaryCreateMutableCopy(v82, v62, *(CFDictionaryRef *)(v61 + 24));
        do
        {
          uint8x16_t v63 = *v30++;
          CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, v63);
          --v19;
        }
        while (v19);
      }
      LODWORD(v64) = v87;
      goto LABEL_40;
    }
  }
  int8x16_t v40 = Value;
  switch(*v36)
  {
    case 0:
    case 1:
      uint64_t v59 = 4294950633;
      goto LABEL_69;
    case 2:
      CFAllocatorRef v50 = v84;
      int8x16_t v51 = CFAllocatorAllocate(v84, 64, 0);
      if (!v51)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v59 = 4294950630;
        goto LABEL_69;
      }
      unsigned int v52 = v87;
      uint8x16_t v53 = &v21[20 * v87];
      *(void *)uint8x16_t v53 = v51;
      *((void *)v53 + 1) = v40;
      *((_DWORD *)v53 + 4) = 2;
      unsigned int v87 = v52 + 1;
      v51[2] = 0u;
      v51[3] = 0u;
      *int8x16_t v51 = 0u;
      v51[1] = 0u;
      *(void *)int8x16_t v51 = 0x1726D6F70;
      *((_DWORD *)v51 + 2) = 2;
      *((void *)v51 + 3) = roSerializationContextGetCacheForName(v83, v50, (const __CFString *)*v37);
      uint64_t v24 = v85;
LABEL_27:
      if (!MutableCopy) {
        goto LABEL_28;
      }
      goto LABEL_34;
    case 3:
    case 6:
      uint16x8_t v86 = MutableCopy;
      uint64_t v88 = 0;
      uint8x16_t v89 = 0;
      CFAllocatorRef v41 = v84;
      int16x8_t v42 = CFAllocatorAllocate(v84, 64, 0);
      if (!v42) {
        goto LABEL_75;
      }
      uint8x16_t v43 = v42;
      unsigned int v44 = v87;
      int8x16_t v45 = &v21[20 * v87];
      *(void *)int8x16_t v45 = v42;
      *((void *)v45 + 1) = 0;
      *((_DWORD *)v45 + 4) = 2;
      *((_OWORD *)v42 + 2) = 0u;
      *((_OWORD *)v42 + 3) = 0u;
      *(_OWORD *)int16x8_t v42 = 0u;
      *((_OWORD *)v42 + 1) = 0u;
      *int16x8_t v42 = 0x1726D6F70;
      *((_DWORD *)v42 + 2) = 3;
      v42[3] = roSerializationContextGetCacheForName(v83, v41, (const __CFString *)*v37);
      unsigned int v87 = v44 + 1;
      uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
      if (SerializedAtomDataAndSurfaceForSampleBuffer) {
        goto LABEL_73;
      }
      uint64_t v48 = v88;
      uint64_t v47 = (uint64_t)v89;
      v43[4] = v43;
      v43[5] = v47;
      v43[7] = v48;
      uint64_t RemoteAddress = FigSharedMemBlockGetRemoteAddress(v47);
      v43[6] = RemoteAddress;
      uint64_t v24 = v85;
      if (!RemoteAddress)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      goto LABEL_33;
    case 4:
      uint16x8_t v86 = MutableCopy;
      uint8x16_t v89 = 0;
      CFAllocatorRef v54 = v84;
      int8x16_t v55 = CFAllocatorAllocate(v84, 64, 0);
      if (!v55)
      {
LABEL_75:
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v59 = 4294950630;
        goto LABEL_79;
      }
      int16x8_t v56 = v55;
      unsigned int v57 = v87;
      uint16x8_t v58 = &v21[20 * v87];
      *(void *)uint16x8_t v58 = v55;
      *((void *)v58 + 1) = 0;
      *((_DWORD *)v58 + 4) = 2;
      unsigned int v87 = v57 + 1;
      *((_OWORD *)v55 + 2) = 0u;
      *((_OWORD *)v55 + 3) = 0u;
      *(_OWORD *)int8x16_t v55 = 0u;
      *((_OWORD *)v55 + 1) = 0u;
      *int8x16_t v55 = 0x1726D6F70;
      *((_DWORD *)v55 + 2) = 4;
      v55[4] = v55;
      v55[3] = roSerializationContextGetCacheForName(v83, v54, (const __CFString *)*v37);
      uint64_t SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializableDictionaryForFormatDescription();
      if (SerializedAtomDataAndSurfaceForSampleBuffer)
      {
LABEL_73:
        uint64_t v59 = SerializedAtomDataAndSurfaceForSampleBuffer;
        fig_log_get_emitter();
        goto LABEL_78;
      }
      uint64_t v59 = roSerializePropertyListData(v54, v89, v56);
      CFRelease(v89);
      if (!v59)
      {
LABEL_33:
        MutableCopCGFloat y = v86;
        if (v86)
        {
LABEL_34:
          CFRelease(MutableCopy);
          MutableCopCGFloat y = 0;
        }
        goto LABEL_28;
      }
      fig_log_get_emitter();
LABEL_78:
      FigDebugAssert3();
LABEL_79:
      MutableCopCGFloat y = v86;
LABEL_69:
      uint64_t v16 = v83;
      a1 = v84;
      LODWORD(v64) = v87;
LABEL_70:
      if (v90) {
        CFRelease(v90);
      }
LABEL_51:
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (v64)
      {
        uint64_t v64 = v64;
        do
        {
          uint16x8_t v71 = *(void **)v21;
          if (*(void *)v21)
          {
            if (v59)
            {
              if ((void *)v71[4] == v71) {
                uint64_t v72 = 5;
              }
              else {
                uint64_t v72 = 6;
              }
              FigSharedMemBlockRelease(v71[v72]);
              v71[5] = 0;
              v71[6] = 0;
            }
            else
            {
              Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(v71[5]);
              if (Region) {
                CFRelease(Region);
              }
            }
            CFAllocatorDeallocate(a1, v71);
          }
          v21 += 20;
          --v64;
        }
        while (v64);
      }
      if (v16) {
        pthread_mutex_unlock(*(pthread_mutex_t **)v16);
      }
      return v59;
    default:
      goto LABEL_27;
  }
}

uint64_t roDeserializeDictionaryPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    NameForCache = roSerializationContextGetNameForCache(a2, *(const void **)(v2 + 24));
    if (*(_DWORD *)(v2 + 4) == 1)
    {
      long long v6 = NameForCache;
      int v7 = *(_DWORD *)(a2 + 72);
      if (v7)
      {
        uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = 4294950633;
        switch(*(_DWORD *)(v2 + 8))
        {
          case 0:
          case 1:
            goto LABEL_31;
          case 2:
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 96), NameForCache, *(const void **)(a1 + 8));
            goto LABEL_25;
          case 3:
            CFTypeRef cf = 0;
            xpc_object_t value = 0;
            uint64_t BlockBufferWrapper = roCreateBlockBufferWrapper(v2, (CMBlockBufferRef *)&cf);
            if (BlockBufferWrapper) {
              goto LABEL_35;
            }
            uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (SampleBufferFromSerializedAtomBlockBufferAndSurface) {
              goto LABEL_38;
            }
            goto LABEL_24;
          case 4:
            CFTypeRef cf = 0;
            xpc_object_t value = 0;
            uint64_t v13 = 48;
            if (*(void *)(v2 + 32) == v2) {
              uint64_t v13 = 40;
            }
            if (!*(void *)(v2 + v13)) {
              goto LABEL_33;
            }
            uint64_t BlockBufferWrapper = roDeserializePropertyListData(v2, 0, &cf);
            if (BlockBufferWrapper)
            {
LABEL_35:
              uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = BlockBufferWrapper;
              fig_log_get_emitter();
            }
            else
            {
              uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateFormatDescriptionFromSerializedDictionary();
              if (cf) {
                CFRelease(cf);
              }
              if (!SampleBufferFromSerializedAtomBlockBufferAndSurface)
              {
LABEL_24:
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 96), v6, value);
                CFRelease(value);
                goto LABEL_25;
              }
LABEL_38:
              fig_log_get_emitter();
            }
            break;
          default:
            goto LABEL_26;
        }
      }
      else
      {
        xpc_object_t value = 0;
        uint64_t v9 = roDeserializePropertyListData(v2, *(_DWORD *)(v2 + 12) != 0, (CFPropertyListRef *)&value);
        if (!v9)
        {
          *(_DWORD *)(a2 + 72) = *(_DWORD *)(v2 + 4);
          *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 16);
          *(void *)(a2 + 80) = *(void *)(v2 + 16);
          if (v6) {
            CFTypeRef v10 = CFRetain(v6);
          }
          else {
            CFTypeRef v10 = 0;
          }
          uint64_t v11 = value;
          *(void *)(a2 + 8_Block_object_dispose(&STACK[0x4E0], 8) = v10;
          *(void *)(a2 + 96) = v11;
LABEL_25:
          int v7 = *(_DWORD *)(a2 + 72);
LABEL_26:
          if (v7 != 1)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          if (*(_DWORD *)(v2 + 12)) {
            uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = 36;
          }
          else {
            uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = 0;
          }
          goto LABEL_31;
        }
        uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = v9;
        fig_log_get_emitter();
      }
      FigDebugAssert3();
    }
    else
    {
LABEL_33:
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface = 4294950629;
    }
LABEL_31:
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    return SampleBufferFromSerializedAtomBlockBufferAndSurface;
  }
  roSerializationContextGetNameForCache(0, *(const void **)(v2 + 24));
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294950629;
}

void roCleanupDictionaryPayloadOperation(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
}

uint64_t roEnqueueIOSurface(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  uint64_t v11 = Context;
  if (Context) {
    pthread_mutex_lock(*Context);
  }
  if (*(_DWORD *)a2 != 2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v20 = 4294950629;
    goto LABEL_26;
  }
  int8x16_t v12 = CFAllocatorAllocate(a1, 64, 0);
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v20 = 4294950630;
    goto LABEL_26;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a2 + 32);
  v26[0] = v12;
  v26[1] = v14;
  int v27 = *(_DWORD *)(a2 + 4);
  void v12[2] = 0u;
  void v12[3] = 0u;
  *int8x16_t v12 = 0u;
  v12[1] = 0u;
  *(void *)int8x16_t v12 = 0x2726D6F70;
  *((void *)v12 + 2) = *(void *)(a2 + 8);
  *((void *)v12 + 4) = v12;
  *((void *)v12 + 3) = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  uint64_t v15 = *(const void **)(a2 + 24);
  if (v15 && (uint64_t v16 = roSerializePropertyListData(a1, v15, v13), v16))
  {
    uint64_t v20 = v16;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    unint64_t v17 = 1;
    if (!*(void *)(a2 + 40)) {
      goto LABEL_10;
    }
    *((_DWORD *)v13 + 3) = 1;
    int16x8_t v18 = CFAllocatorAllocate(a1, 64, 0);
    if (v18)
    {
      uint64_t v28 = v18;
      uint64_t v29 = *(void *)(a2 + 40);
      unint64_t v17 = 2;
      int v30 = 2;
      id v18[2] = 0u;
      v18[3] = 0u;
      *int16x8_t v18 = 0u;
      v18[1] = 0u;
      *(void *)int16x8_t v18 = 0x2726D6F70;
      *((void *)v18 + 2) = *(void *)(a2 + 8);
LABEL_10:
      if (a4) {
        uint64_t v19 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)v26, v17, a5);
      }
      else {
        uint64_t v19 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)v26, v17);
      }
      uint64_t v20 = v19;
      if (v19)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      goto LABEL_15;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v20 = 4294950630;
  }
  unint64_t v17 = 1;
LABEL_15:
  uint16x8_t v21 = (void **)v26;
  do
  {
    int8x16_t v22 = *v21;
    if (*v21)
    {
      if (v20)
      {
        if ((void *)v22[4] == v22) {
          uint64_t v23 = 5;
        }
        else {
          uint64_t v23 = 6;
        }
        FigSharedMemBlockRelease(v22[v23]);
        void v22[5] = 0;
        v22[6] = 0;
      }
      else
      {
        Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(v22[5]);
        if (Region) {
          CFRelease(Region);
        }
      }
      CFAllocatorDeallocate(a1, v22);
    }
    uint16x8_t v21 = (void **)((char *)v21 + 20);
    --v17;
  }
  while (v17);
LABEL_26:
  if (v11) {
    pthread_mutex_unlock(*v11);
  }
  return v20;
}

uint64_t roDeserializeIOSurface(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)a1;
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      if (*(_DWORD *)(a2 + 72))
      {
        if (*(void *)(a2 + 112))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v5 = *(void *)(a1 + 8);
        }
        *(void *)(a2 + 112) = v5;
LABEL_14:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
        if (*(_DWORD *)(a2 + 72) != 2)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        if (*(_DWORD *)(v4 + 12)) {
          uint64_t v6 = 36;
        }
        else {
          uint64_t v6 = 0;
        }
        goto LABEL_19;
      }
      uint64_t v7 = roDeserializePropertyListData(v4, 0, (CFPropertyListRef *)(a2 + 96));
      if (!v7)
      {
        int v8 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(v4 + 4);
        *(_DWORD *)(a2 + 76) = v8;
        uint64_t v9 = *(const void **)(v4 + 24);
        *(void *)(a2 + 80) = *(void *)(v4 + 16);
        NameForCache = roSerializationContextGetNameForCache(a2, v9);
        if (NameForCache) {
          NameForCache = CFRetain(NameForCache);
        }
        *(void *)(a2 + 8_Block_object_dispose(&STACK[0x4E0], 8) = NameForCache;
        if (*(void *)(a2 + 104))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        *(void *)(a2 + 104) = *(void *)(a1 + 8);
        goto LABEL_14;
      }
      uint64_t v6 = v7;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v6 = 4294950629;
    }
LABEL_19:
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    return v6;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294950629;
}

void roCleanupIOSurfaceOperation(uint64_t a1)
{
  if (*(_DWORD *)a1 != 2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 40) = 0;
  }
}

uint64_t roEnqueueFormatDescription(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  uint64_t v11 = Context;
  if (Context) {
    pthread_mutex_lock(*Context);
  }
  if (*(_DWORD *)a2 != 4 || !*(void *)(a2 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v13 = 0;
    uint64_t v16 = 4294950629;
    goto LABEL_12;
  }
  int8x16_t v12 = CFAllocatorAllocate(a1, 64, 0);
  uint64_t v13 = v12;
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v16 = 4294950630;
    goto LABEL_12;
  }
  uint64_t v20 = v12;
  uint64_t v21 = 0;
  int v22 = *(_DWORD *)(a2 + 4);
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)int8x16_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *int8x16_t v12 = 0x4726D6F70;
  void v12[2] = *(void *)(a2 + 8);
  double v12[4] = v12;
  void v12[3] = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  SerializableDictionaryForFormatDescriptiouint64_t n = FigRemote_CreateSerializableDictionaryForFormatDescription();
  if (SerializableDictionaryForFormatDescription
    || (SerializableDictionaryForFormatDescriptiouint64_t n = roSerializePropertyListData(a1, 0, v13),
        SerializableDictionaryForFormatDescription))
  {
    uint64_t v16 = SerializableDictionaryForFormatDescription;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_12;
  }
  if (a4) {
    uint64_t v15 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)&v20, 1uLL, a5);
  }
  else {
    uint64_t v15 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)&v20, 1uLL);
  }
  uint64_t v16 = v15;
  if (v15)
  {
    fig_log_get_emitter();
    goto LABEL_28;
  }
LABEL_12:
  if (v13)
  {
    if (v16)
    {
      uint64_t v17 = 6;
      if ((void *)v13[4] == v13) {
        uint64_t v17 = 5;
      }
      FigSharedMemBlockRelease(v13[v17]);
      void v13[5] = 0;
      v13[6] = 0;
    }
    else
    {
      Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(v13[5]);
      if (Region) {
        CFRelease(Region);
      }
    }
    CFAllocatorDeallocate(a1, v13);
  }
  if (v11) {
    pthread_mutex_unlock(*v11);
  }
  return v16;
}

uint64_t roDeserializeFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  CFTypeRef cf = 0;
  if (!a2) {
    goto LABEL_11;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  if (*(_DWORD *)(v3 + 4) != 4) {
    goto LABEL_11;
  }
  uint64_t v5 = 48;
  if (*(void *)(v3 + 32) == v3) {
    uint64_t v5 = 40;
  }
  if (*(void *)(v3 + v5))
  {
    FormatDescriptionFromSerializedDictionarCGFloat y = roDeserializePropertyListData(v3, 0, &cf);
    if (FormatDescriptionFromSerializedDictionary
      || (FormatDescriptionFromSerializedDictionarCGFloat y = FigRemote_CreateFormatDescriptionFromSerializedDictionary(),
          FormatDescriptionFromSerializedDictionary))
    {
      uint64_t v10 = FormatDescriptionFromSerializedDictionary;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(a2 + 76) = v7;
      int v8 = *(const void **)(v3 + 24);
      *(void *)(a2 + 80) = *(void *)(v3 + 16);
      NameForCache = roSerializationContextGetNameForCache(a2, v8);
      if (NameForCache) {
        NameForCache = CFRetain(NameForCache);
      }
      uint64_t v10 = 0;
      *(void *)(a2 + 8_Block_object_dispose(&STACK[0x4E0], 8) = NameForCache;
    }
  }
  else
  {
LABEL_11:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = 4294950629;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2) {
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  }
  return v10;
}

void roCleanupFormatDescriptionOperation(uint64_t a1)
{
  if (*(_DWORD *)a1 != 4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

CFAllocatorRef __roGetShmemDeallocator_block_invoke()
{
  CFAllocatorRef result = FigSharedMemPoolAllocatorCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0);
  roGetShmemDeallocator_shmemDeCFAllocatorRef allocator = (uint64_t)result;
  return result;
}

uint64_t __roEnqueue_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v5 + 16))(v5, a2, a3, a4)) {
    return 1;
  }
  uint64_t v7 = *a4;
  if (v7 && *(_DWORD *)v7 == 1919774576)
  {
    Regiouint64_t n = (const void *)FigSharedMemBlockGetRegion(*(void *)(v7 + 40));
    if (Region) {
      CFRetain(Region);
    }
    FigRemoteOperationCleanupMessageData((_DWORD *)v7);
  }
  return 0;
}

void roSerializationContextSenderFinalize_block_invoke_2(uint64_t a1, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    uint64_t v3 = *(const void **)(a2 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a2 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
    }
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 16));
    if (Count)
    {
      CFIndex v5 = Count;
      uint64_t v6 = (const void **)((char *)v10 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
      if ((unint64_t)(8 * Count) >= 0x200) {
        size_t v7 = 512;
      }
      else {
        size_t v7 = 8 * Count;
      }
      bzero((char *)v10 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a2 + 16), 0, v6);
      int v8 = v6 - 1;
      do
        FigSharedMemBlockRelease((uint64_t)v8[v5--]);
      while (v5);
    }
    uint64_t v9 = *(const void **)(a2 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a2 + 16) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    FigSimpleMutexDestroy();
    free((void *)a2);
  }
}

void roSerializationContextReset_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t Context = FigRemoteQueueSenderGetContext(a2);
  if (Context)
  {
    uint64_t v3 = Context;
    uint64_t v4 = *(const void **)(Context + 8);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
    }
  }
}

uint64_t FusionTrackerLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = FusionTrackerLibraryCore_frameworkLibrary;
  uint64_t v5 = FusionTrackerLibraryCore_frameworkLibrary;
  if (!FusionTrackerLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C24B98;
    long long v7 = *(_OWORD *)&off_1E5C24BA8;
    v3[3] = _sl_dlopen();
    FusionTrackerLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5A7A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FusionTrackerLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  FusionTrackerLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t FusionTrackerLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = FusionTrackerLibraryCore();
  if (!result) {
    FusionTrackerLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getFTCinematicTrackerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTCinematicTrackerClass_softClass;
  uint64_t v8 = getFTCinematicTrackerClass_softClass;
  if (!getFTCinematicTrackerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTrackerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTCinematicTrackerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTrackerClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTCinematicTracker");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTCinematicTrackerClass_block_invoke_cold_1();
  }
  getFTCinematicTrackerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicTapRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTCinematicTapRequestClass_softClass;
  uint64_t v8 = getFTCinematicTapRequestClass_softClass;
  if (!getFTCinematicTapRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTapRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTCinematicTapRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7AC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTapRequestClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTCinematicTapRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTCinematicTapRequestClass_block_invoke_cold_1();
  }
  getFTCinematicTapRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicTapResponseClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTCinematicTapResponseClass_softClass;
  uint64_t v8 = getFTCinematicTapResponseClass_softClass;
  if (!getFTCinematicTapResponseClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTapResponseClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTCinematicTapResponseClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTapResponseClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTCinematicTapResponse");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTCinematicTapResponseClass_block_invoke_cold_1();
  }
  getFTCinematicTapResponseClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicConfigClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTCinematicConfigClass_softClass;
  uint64_t v8 = getFTCinematicConfigClass_softClass;
  if (!getFTCinematicConfigClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicConfigClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTCinematicConfigClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7AF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicConfigClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTCinematicConfig");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTCinematicConfigClass_block_invoke_cold_1();
  }
  getFTCinematicConfigClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicInputClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTCinematicInputClass_softClass;
  uint64_t v8 = getFTCinematicInputClass_softClass;
  if (!getFTCinematicInputClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicInputClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTCinematicInputClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicInputClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTCinematicInput");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTCinematicInputClass_block_invoke_cold_1();
  }
  getFTCinematicInputClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTTapToBoxClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTTapToBoxClass_softClass;
  uint64_t v8 = getFTTapToBoxClass_softClass;
  if (!getFTTapToBoxClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTTapToBoxClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTTapToBoxClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTTapToBoxClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTTapToBox");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTTapToBoxClass_block_invoke_cold_1();
  }
  getFTTapToBoxClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTEspressoBufferClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTEspressoBufferClass_softClass;
  uint64_t v8 = getFTEspressoBufferClass_softClass;
  if (!getFTEspressoBufferClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTEspressoBufferClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTEspressoBufferClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTEspressoBufferClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTEspressoBuffer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTEspressoBufferClass_block_invoke_cold_1();
  }
  getFTEspressoBufferClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTMSRScalerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__1;
  long long v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getFTMSRScalerClass_softClass;
  uint64_t v8 = getFTMSRScalerClass_softClass;
  if (!getFTMSRScalerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getFTMSRScalerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getFTMSRScalerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTMSRScalerClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTMSRScaler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTMSRScalerClass_block_invoke_cold_1();
  }
  getFTMSRScalerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr;
  uint64_t v6 = getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr;
  if (!getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)FusionTrackerLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "FTCinematicHighPriorityTrackerOpDescription");
    getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)FusionTrackerLibrary();
  Class result = dlsym(v2, "FTCinematicHighPriorityTrackerOpDescription");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

uint64_t FTCinematicHighPriorityTrackerOpDescription(uint64_t a1)
{
  FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc = (uint64_t (*)(uint64_t))getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc();
  if (!FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc) {
    FTCinematicHighPriorityTrackerOpDescription_cold_1();
  }
  return FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc(a1);
}

uint64_t getkFTInvalidTrackIdSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkFTInvalidTrackIdSymbolLoc_ptr;
  uint64_t v6 = getkFTInvalidTrackIdSymbolLoc_ptr;
  if (!getkFTInvalidTrackIdSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)FusionTrackerLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "kFTInvalidTrackId");
    getkFTInvalidTrackIdSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7B70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkFTInvalidTrackIdSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)FusionTrackerLibrary();
  Class result = dlsym(v2, "kFTInvalidTrackId");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkFTInvalidTrackIdSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getkFTInvalidTrackId()
{
  uint64_t v0 = getkFTInvalidTrackIdSymbolLoc();
  if (!v0) {
    getkFTInvalidTrackId_cold_1();
  }
  return *(void *)v0;
}

Class __getFTBipartiteMatcherClass_block_invoke(uint64_t a1)
{
  FusionTrackerLibrary();
  Class result = objc_getClass("FTBipartiteMatcher");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getFTBipartiteMatcherClass_block_invoke_cold_1();
  }
  getFTBipartiteMatcherClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigFlashlightRemoteCreate(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __flashlightRemote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E5C24978;
  void block[4] = &v8;
  if (flashlightRemote_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&flashlightRemote_ensureClientEstablished_onceToken, block);
  }
  uint64_t v3 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  if (v3) {
    goto LABEL_17;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4 || (uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v4))
  {
    uint64_t v3 = v4;
    fig_log_get_emitter();
LABEL_18:
    FigDebugAssert3();
    goto LABEL_11;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  block[0] = 0;
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v3 = 4294954516;
LABEL_17:
    fig_log_get_emitter();
    goto LABEL_18;
  }
  FigFlashlightGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_17;
  }
  *(void *) CMBaseObjectGetDerivedStorage() = uint64;
  FigXPCRemoteClientAssociateObject();
  *a2 = block[0];
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

void __flashlightRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FlashlightServerDied");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t flashlightRemote_deadConnectionCallback(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    uint64_t result = FigDebugAssert3();
  }
  *(unsigned char *)(v3 + _Block_object_dispose(&STACK[0x4E0], 8) = 1;
  return result;
}

uint64_t flashlightRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = sFlashlightRemoteClient;
  if (sFlashlightRemoteClient) {
    uint64_t result = FigXPCRemoteClientDisassociateObject();
  }
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *flashlightRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigFlashlightRemote %p retainCount: %ld allocator: %p, objectID: %lld>", a1, v5, v6, *DerivedStorage);
  return Mutable;
}

BOOL flashlightRemote_IsAvailable(uint64_t a1)
{
  xpc_object_t xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1635148137, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    BOOL v1 = 0;
  }
  else
  {
    BOOL v1 = xpc_dictionary_get_BOOL(xdict, (const char *)*MEMORY[0x1E4F20290]);
  }
  FigXPCRelease();
  return v1;
}

BOOL flashlightRemote_IsOverheated(uint64_t a1)
{
  xpc_object_t xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1751474548, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    BOOL v1 = 0;
  }
  else
  {
    BOOL v1 = xpc_dictionary_get_BOOL(xdict, (const char *)*MEMORY[0x1E4F20290]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_PowerOn(uint64_t a1)
{
  return flashlightRemote_sendBasicMessage(a1, 1886876209, 0);
}

uint64_t flashlightRemote_SetLevel(float a1)
{
  uint64_t BasicMessage = (void *)flashlightRemote_createBasicMessage();
  if (BasicMessage)
  {
    xpc_dictionary_set_double(BasicMessage, (const char *)*MEMORY[0x1E4F20290], a1);
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    if (v3)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v3 = 4294954510;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

float flashlightRemote_GetLevel(uint64_t a1)
{
  xpc_object_t xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1735161452, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    float v1 = 0.0;
  }
  else
  {
    float v1 = xpc_dictionary_get_double(xdict, (const char *)*MEMORY[0x1E4F20290]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_SetBeamWidth(float a1)
{
  uint64_t BasicMessage = (void *)flashlightRemote_createBasicMessage();
  if (BasicMessage)
  {
    xpc_dictionary_set_double(BasicMessage, (const char *)*MEMORY[0x1E4F20290], a1);
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    if (v3)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v3 = 4294954510;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

float flashlightRemote_GetBeamWidth(uint64_t a1)
{
  xpc_object_t xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1735879012, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    float v1 = 0.0;
  }
  else
  {
    float v1 = xpc_dictionary_get_double(xdict, (const char *)*MEMORY[0x1E4F20290]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_NotifyForCurrentState()
{
  if (!flashlightRemote_createBasicMessage() || FigXPCRemoteClientSendAsyncMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t FigFlashlightCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4, CFTypeRef *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigFlashlightGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    FigDebugAssert3();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v10 = DerivedStorage;
    *(void *)(DerivedStorage + 72) = a2;
    if (a2 == 1) {
      int v11 = 2;
    }
    else {
      int v11 = 3;
    }
    *(_DWORD *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4E0], 8) = v11;
    *(unsigned char *)(DerivedStorage + 52) = a2 != 1;
    *(unsigned char *)(DerivedStorage + 53) = a2 == 2;
    *(_DWORD *)(DerivedStorage + 96) = a3;
    if (a4)
    {
      CopCGFloat y = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
      *(void *)(v10 + 104) = Copy;
      uint64_t v13 = (void *)[NSString stringWithFormat:@"<%p[%d][%@]>", cf, *(unsigned int *)(v10 + 96), Copy];
    }
    else
    {
      uint64_t v13 = objc_msgSend(NSString, "stringWithFormat:", @"<%p[%d]>", cf, a3, v22);
    }
    uint64_t v14 = v13;
    size_t v15 = [v13 lengthOfBytesUsingEncoding:4] + 1;
    uint64_t v16 = malloc_type_malloc(v15, 0xA770D93FuLL);
    *(void *)(v10 + 112) = v16;
    [v14 getCString:v16 maxLength:v15 encoding:4];
    *(void *)uint64_t v10 = dispatch_queue_create("com.apple.coremedia.flashlight.notificationQueue", 0);
    *(void *)(v10 + _Block_object_dispose(&STACK[0x4E0], 8) = dispatch_queue_create("com.apple.coremedia.flashlight.powerQueue", 0);
    *(void *)(v10 + 56) = 0;
    *(void *)(v10 + 64) = 0;
    *(_DWORD *)(v10 + 240) = -1;
    *(void *)(v10 + 80) = FigSimpleMutexCreate();
    *(void *)(v10 + 8_Block_object_dispose(&STACK[0x4E0], 8) = objc_alloc_init(FigCaptureThermalMonitor);
    id v17 = +[FigWeakReference weakReferenceToObject:cf];
    int16x8_t v18 = *(void **)(v10 + 88);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = __FigFlashlightCreate_block_invoke;
    v26[3] = &unk_1E5C24BC8;
    v26[4] = v17;
    [v18 setThermalHandler:v26];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = __FigFlashlightCreate_block_invoke_2;
    v25[3] = &unk_1E5C247D8;
    v25[4] = v17;
    *(void *)(v10 + 16) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "addObserverForName:object:queue:usingBlock:", 0x1EFA5DB60, 0, 0, v25);
    uint64_t v19 = [FigCaptureOSStateHandle alloc];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = __FigFlashlightCreate_block_invoke_3;
    v24[3] = &unk_1E5C24BF0;
    void v24[4] = v17;
    *(void *)(v10 + 120) = [(FigCaptureOSStateHandle *)v19 initWithTitle:@"FigFlashlight" queue:0 dataProviderBlock:v24];
    if (dword_1E96B6928)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *a5 = cf;
  }
  return v8;
}

void __FigFlashlightCreate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) retainReferencedObject];
  if (v4)
  {
    CFIndex v5 = (const void *)v4;
    [a2 maxTorchLevel];
    float v7 = v6;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
    if (*(float *)(DerivedStorage + 24) > v7)
    {
      int v9 = flashlight_setLevelInternal(v5, v7);
      if (v9)
      {
        uint64_t v11 = v2;
        LODWORD(v10) = v9;
        FigDebugAssert3();
      }
      if (v7 == 0.0) {
        flashlight_teardownDevice(v5, 0);
      }
    }
    flashlight_postNotificationWithPayload(v5, @"FlashlightOverheated", objc_msgSend(NSNumber, "numberWithInt:", v7 < 1.0, v10, v11));
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
    CFRelease(v5);
  }
}

void *__FigFlashlightCreate_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) retainReferencedObject];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)v1;
  uint64_t v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(void *)(CMBaseObjectGetDerivedStorage() + 56));
  [*(id *)(CMBaseObjectGetDerivedStorage() + 88) maxTorchLevel];
  float v7 = v6;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  [v3 setObject:*(void *)(DerivedStorage + 104) forKeyedSubscript:@"ClientApplicationID"];
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(DerivedStorage + 96)), @"ClientPID");
  unint64_t v9 = *(void *)(DerivedStorage + 72);
  if (v9 > 2) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)*(&off_1E5C24C60 + v9);
  }
  LODWORD(v_Block_object_dispose(&STACK[0x4E0], 8) = 1.0;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, @"ClientType", v8);
  LODWORD(v11) = *(_DWORD *)(DerivedStorage + 24);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v11), @"Level");
  LODWORD(v12) = *(_DWORD *)(DerivedStorage + 28);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v12), @"LevelSentInPowerEvent");
  LODWORD(v13) = *(_DWORD *)(DerivedStorage + 32);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v13), @"BeamWidth");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *(void *)(DerivedStorage + 56) != 0), @"PoweredOn");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v5), @"Available");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v7 < 1.0), @"Overheated");
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  CFRelease(v2);
  return v3;
}

void flashlight_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *(void *)(DerivedStorage + 16));

  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 80) = 0;
  flashlight_teardownDevice(a1, 0);
  uint64_t v3 = *(const void **)(DerivedStorage + 104);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 104) = 0;
  }
  uint64_t v4 = *(void **)(DerivedStorage + 112);
  if (v4)
  {
    *(void *)(DerivedStorage + 112) = 0;
    free(v4);
  }

  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 8);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x4E0], 8) = 0;
  }
  if (a1)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    double v8 = *(void (**)(const void *))(v7 + 24);
    if (v8)
    {
      v8(a1);
    }
  }
}

__CFString *flashlight_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigFlashlight %p retainCount: %ld allocator: %p, ", a1, v4, v5);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t flashlight_IsAvailable()
{
  return objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(void *)(CMBaseObjectGetDerivedStorage() + 56));
}

BOOL flashlight_IsOverheated()
{
  [*(id *)(CMBaseObjectGetDerivedStorage() + 88) maxTorchLevel];
  return v0 < 1.0;
}

uint64_t flashlight_PowerOn()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  if (*(void *)(DerivedStorage + 56)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = flashlight_setupDevice();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_SetLevel(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  [*(id *)(DerivedStorage + 88) maxTorchLevel];
  if (a2 > 1.0) {
    a2 = v5;
  }
  if (a2 > v5)
  {
    FigDebugAssert3();
    uint64_t v7 = 4294950766;
  }
  else
  {
    if (a2 > 0.0 && !*(void *)(DerivedStorage + 64))
    {
      uint64_t v6 = flashlight_setupDevice();
      if (v6)
      {
        uint64_t v7 = v6;
LABEL_14:
        FigDebugAssert3();
        goto LABEL_11;
      }
    }
    if (a2 == *(float *)(DerivedStorage + 24))
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = flashlight_setLevelInternal(a1, a2);
      if (v7) {
        goto LABEL_14;
      }
    }
  }
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v7;
}

float flashlight_GetLevel()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  float v1 = *(float *)(DerivedStorage + 24);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_SetBeamWidth(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  float v5 = 1.0;
  if (a2 <= 1.0) {
    float v5 = a2;
  }
  if (v5 >= 0.0) {
    float v6 = v5;
  }
  else {
    float v6 = 0.0;
  }
  if (v6 != *(float *)(DerivedStorage + 32))
  {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    *(float *)&double v8 = v6;
    unint64_t v9 = (void *)[NSNumber numberWithFloat:v8];
    FigSimpleMutexCheckIsLockedOnThisThread();
    uint64_t v10 = *(void **)(v7 + 64);
    if (v10)
    {
      uint64_t v11 = [v10 setProperty:*MEMORY[0x1E4F54C68] value:v9];
      if (v11)
      {
        uint64_t v12 = v11;
        FigDebugAssert3();
        goto LABEL_12;
      }
    }
    *(float *)(v7 + 32) = v6;
    flashlight_postNotificationWithPayload(a1, @"FlashlightBeamWidth", v9);
    if (*(float *)(v7 + 24) > 0.0) {
      flashlight_logBeamWidthAnalytics(v7, v6);
    }
  }
  uint64_t v12 = 0;
LABEL_12:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v12;
}

float flashlight_GetBeamWidth()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  float v1 = *(float *)(DerivedStorage + 32);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_NotifyForCurrentState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  [*(id *)(DerivedStorage + 88) maxTorchLevel];
  flashlight_postNotificationWithPayload(a1, @"FlashlightOverheated", (void *)[NSNumber numberWithBool:v3 < 1.0]);
  uint64_t v4 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(void *)(DerivedStorage + 56));
  flashlight_postNotificationWithPayload(a1, @"FlashlightAvailable", (void *)[NSNumber numberWithBool:v4]);
  LODWORD(v5) = *(_DWORD *)(DerivedStorage + 24);
  flashlight_postNotificationWithPayload(a1, @"FlashlightLevel", (void *)[NSNumber numberWithFloat:v5]);
  float v6 = *(pthread_mutex_t **)(DerivedStorage + 80);
  return pthread_mutex_unlock(v6);
}

uint64_t flashlight_setupDevice()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  unsigned int v12 = 0;
  int IsWombatEnabled = FigCaptureIsWombatEnabled(&v12);
  if (v12) {
    goto LABEL_19;
  }
  if (IsWombatEnabled) {
    return -12782;
  }
  CFAllocatorRef v2 = (void *)MEMORY[0x1A6272C70]();
  LOBYTE(v11) = *(void *)(DerivedStorage + 72) == 1;
  *(_DWORD *)(DerivedStorage + 44) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "registerClientWithPID:clientDescription:clientPriority:canStealFromClientsWithSamePriority:deviceSharingWithOtherClientsAllowed:deviceSharingWithAVFlashlightAllowed:clientIsAVFlashlight:deviceAvailabilityChangedHandler:", *(unsigned int *)(DerivedStorage + 96), @"FigFlashlight", *(unsigned int *)(DerivedStorage + 48), *(unsigned __int8 *)(DerivedStorage + 52), *(unsigned __int8 *)(DerivedStorage + 53), 0, v11, 0);
  *(void *)(DerivedStorage + 56) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "copyDeviceForClient:informClientWhenDeviceAvailableAgain:error:", *(unsigned int *)(DerivedStorage + 44), 0, &v12);
  if (v12)
  {
    FigDebugAssert3();
    return v12;
  }
  *(void *)(DerivedStorage + 64) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "copyStreamWithoutControlFromDevice:position:deviceType:error:", *(void *)(DerivedStorage + 56), 1, 2, &v12);
  if (v12)
  {
    objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", *(void *)(DerivedStorage + 56), *(unsigned int *)(DerivedStorage + 44), 0, 0);
    float v3 = *(const void **)(DerivedStorage + 56);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 56) = 0;
    }
  }
  if (!*(void *)(DerivedStorage + 56))
  {
LABEL_19:
    FigDebugAssert3();
    return v12;
  }
  uint64_t v4 = (void *)[*(id *)(DerivedStorage + 64) supportedProperties];
  uint64_t v5 = *MEMORY[0x1E4F54998];
  if ([v4 objectForKeyedSubscript:*MEMORY[0x1E4F54998]])
  {
    if (*(void *)(DerivedStorage + 72) == 1) {
      uint64_t v6 = MEMORY[0x1E4F1CC38];
    }
    else {
      uint64_t v6 = MEMORY[0x1E4F1CC28];
    }
    unsigned int v12 = [*(id *)(DerivedStorage + 64) setProperty:v5 value:v6];
  }
  uint64_t v7 = (void *)[*(id *)(DerivedStorage + 64) supportedProperties];
  uint64_t v8 = *MEMORY[0x1E4F54C68];
  if ([v7 objectForKeyedSubscript:*MEMORY[0x1E4F54C68]])
  {
    LODWORD(v9) = *(_DWORD *)(DerivedStorage + 32);
    return objc_msgSend(*(id *)(DerivedStorage + 64), "setProperty:value:", v8, objc_msgSend(NSNumber, "numberWithFloat:", v9));
  }
  return v12;
}

uint64_t flashlight_setLevelInternal(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v5 = objc_alloc(NSNumber);
  *(float *)&double v6 = a2;
  uint64_t v7 = (void *)[v5 initWithFloat:v6];
  FigSimpleMutexCheckIsLockedOnThisThread();
  uint64_t v8 = *(void **)(DerivedStorage + 64);
  if (v8
    && (uint64_t v9 = [v8 setProperty:*MEMORY[0x1E4F54C70] value:v7],
        flashlight_handleSystemSleepPrevention(a2, (uint64_t)a1, v9),
        v9))
  {
    FigDebugAssert3();
  }
  else
  {
    *(float *)(DerivedStorage + 24) = a2;
    flashlight_postNotificationWithPayload(a1, @"FlashlightLevel", v7);
    flashlight_logLevelAnalytics(DerivedStorage, a2);
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t AppleDepthLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  float v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = AppleDepthLibraryCore_frameworkLibrary;
  uint64_t v5 = AppleDepthLibraryCore_frameworkLibrary;
  if (!AppleDepthLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C24C78;
    long long v7 = *(_OWORD *)&off_1E5C24C88;
    v3[3] = _sl_dlopen();
    AppleDepthLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5A7E46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AppleDepthLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  AppleDepthLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AppleDepthLibrary()
{
  float v1 = 0;
  uint64_t result = AppleDepthLibraryCore();
  if (!result) {
    AppleDepthLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getADMonocularPipelineParametersClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADMonocularPipelineParametersClass_softClass;
  uint64_t v8 = getADMonocularPipelineParametersClass_softClass;
  if (!getADMonocularPipelineParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADMonocularPipelineParametersClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADMonocularPipelineParametersClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMonocularPipelineParametersClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADMonocularPipelineParameters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADMonocularPipelineParametersClass_block_invoke_cold_1();
  }
  getADMonocularPipelineParametersClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADMonocularPipelineClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADMonocularPipelineClass_softClass;
  uint64_t v8 = getADMonocularPipelineClass_softClass;
  if (!getADMonocularPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADMonocularPipelineClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADMonocularPipelineClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMonocularPipelineClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADMonocularPipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADMonocularPipelineClass_block_invoke_cold_1();
  }
  getADMonocularPipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADMutableJasperPointCloudClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADMutableJasperPointCloudClass_softClass;
  uint64_t v8 = getADMutableJasperPointCloudClass_softClass;
  if (!getADMutableJasperPointCloudClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADMutableJasperPointCloudClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADMutableJasperPointCloudClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7E8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMutableJasperPointCloudClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADMutableJasperPointCloud");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADMutableJasperPointCloudClass_block_invoke_cold_1();
  }
  getADMutableJasperPointCloudClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperPointCloudClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADJasperPointCloudClass_softClass;
  uint64_t v8 = getADJasperPointCloudClass_softClass;
  if (!getADJasperPointCloudClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADJasperPointCloudClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADJasperPointCloudClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7EA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperPointCloudClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADJasperPointCloud");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADJasperPointCloudClass_block_invoke_cold_1();
  }
  getADJasperPointCloudClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADCameraCalibrationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADCameraCalibrationClass_softClass;
  uint64_t v8 = getADCameraCalibrationClass_softClass;
  if (!getADCameraCalibrationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADCameraCalibrationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADCameraCalibrationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7EB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADCameraCalibrationClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADCameraCalibration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADCameraCalibrationClass_block_invoke_cold_1();
  }
  getADCameraCalibrationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADPolynomialsLensDistortionModelClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADPolynomialsLensDistortionModelClass_softClass;
  uint64_t v8 = getADPolynomialsLensDistortionModelClass_softClass;
  if (!getADPolynomialsLensDistortionModelClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADPolynomialsLensDistortionModelClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADPolynomialsLensDistortionModelClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADPolynomialsLensDistortionModelClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADPolynomialsLensDistortionModel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADPolynomialsLensDistortionModelClass_block_invoke_cold_1();
  }
  getADPolynomialsLensDistortionModelClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperColorStillsExecutorClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADJasperColorStillsExecutorClass_softClass;
  uint64_t v8 = getADJasperColorStillsExecutorClass_softClass;
  if (!getADJasperColorStillsExecutorClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADJasperColorStillsExecutorClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADJasperColorStillsExecutorClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7EDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperColorStillsExecutorClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADJasperColorStillsExecutor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADJasperColorStillsExecutorClass_block_invoke_cold_1();
  }
  getADJasperColorStillsExecutorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperColorV2ExecutorClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADJasperColorV2ExecutorClass_softClass;
  uint64_t v8 = getADJasperColorV2ExecutorClass_softClass;
  if (!getADJasperColorV2ExecutorClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADJasperColorV2ExecutorClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADJasperColorV2ExecutorClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7EF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperColorV2ExecutorClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADJasperColorV2Executor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADJasperColorV2ExecutorClass_block_invoke_cold_1();
  }
  getADJasperColorV2ExecutorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoPipelineClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADStereoPipelineClass_softClass;
  uint64_t v8 = getADStereoPipelineClass_softClass;
  if (!getADStereoPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADStereoPipelineClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADStereoPipelineClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7F080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoPipelineClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADStereoPipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADStereoPipelineClass_block_invoke_cold_1();
  }
  getADStereoPipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoV2PipelineClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADStereoV2PipelineClass_softClass;
  uint64_t v8 = getADStereoV2PipelineClass_softClass;
  if (!getADStereoV2PipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADStereoV2PipelineClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADStereoV2PipelineClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7F1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoV2PipelineClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADStereoV2Pipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADStereoV2PipelineClass_block_invoke_cold_1();
  }
  getADStereoV2PipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoV2PipelineParametersClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__2;
  long long v7 = __Block_byref_object_dispose__2;
  uint64_t v0 = getADStereoV2PipelineParametersClass_softClass;
  uint64_t v8 = getADStereoV2PipelineParametersClass_softClass;
  if (!getADStereoV2PipelineParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getADStereoV2PipelineParametersClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getADStereoV2PipelineParametersClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A7F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoV2PipelineParametersClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADStereoV2PipelineParameters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADStereoV2PipelineParametersClass_block_invoke_cold_1();
  }
  getADStereoV2PipelineParametersClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getADPCEDisparityColorPipelineClass_block_invoke(uint64_t a1)
{
  AppleDepthLibrary();
  Class result = objc_getClass("ADPCEDisparityColorPipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getADPCEDisparityColorPipelineClass_block_invoke_cold_1();
  }
  getADPCEDisparityColorPipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void FigCaptureStartPreferencesOSStateHandlers()
{
  if (FigCaptureStartPreferencesOSStateHandlers_sOnceToken != -1) {
    dispatch_once(&FigCaptureStartPreferencesOSStateHandlers_sOnceToken, &__block_literal_global_9);
  }
}

void __FigCaptureStartPreferencesOSStateHandlers_block_invoke()
{
  v15[4] = *MEMORY[0x1E4F143B8];
  v15[0] = @"com.apple.avfoundation";
  v15[1] = @"com.apple.camera";
  _OWORD v15[2] = @"com.apple.cameracapture";
  v15[3] = @"com.apple.coremedia";
  uint64_t v0 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:4];
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v0);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8 * v5);
        long long v7 = [FigCaptureOSStateHandle alloc];
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3221225472;
        _OWORD v9[2] = __FigCaptureStartPreferencesOSStateHandlers_block_invoke_2;
        _OWORD v9[3] = &unk_1E5C24BF0;
        UInt8 v9[4] = v6;
        uint64_t v8 = [(FigCaptureOSStateHandle *)v7 initWithTitle:v6 queue:0 dataProviderBlock:v9];
        [v1 addObject:v8];

        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }
  FigCaptureStartPreferencesOSStateHandlers_sPreferenceOSStateHandles = [objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v1];
}

CFDictionaryRef __FigCaptureStartPreferencesOSStateHandlers_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v1 = CFPreferencesCopyMultiple(0, *(CFStringRef *)(a1 + 32), (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  return v1;
}

uint64_t FigFlatDictionaryKeyGetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t FigFlatDictionaryKeyGetValueType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void *FigFlatDictionaryKeySpaceRegister(unsigned int a1, int a2)
{
  if (sKeySpaceLockCreateOnceToken != -1) {
    dispatch_once_f(&sKeySpaceLockCreateOnceToken, 0, (dispatch_function_t)figFlatDictionaryKeySpaceCreateKeySpaceLockOnce);
  }
  pthread_mutex_lock((pthread_mutex_t *)sKeySpaceLock);
  Class result = (void *)sKeySpaces;
  if (sKeySpaces)
  {
    int v5 = sKeySpacesInternalCount;
  }
  else
  {
    sKeySpaces = (uint64_t)malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    sKeySpaceNames = (uint64_t)malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
    int v5 = 4;
    sKeySpacesInternalCFIndex Count = 4;
    Class result = (void *)sKeySpaces;
  }
  if (sKeySpacesCount == v5)
  {
    sKeySpaces = (uint64_t)malloc_type_realloc(result, 8 * (v5 + 4), 0x6004044C4A2DFuLL);
    uint64_t v6 = malloc_type_realloc((void *)sKeySpaceNames, 4 * sKeySpacesInternalCount + 16, 0x100004052888210uLL);
    sKeySpaceNames = (uint64_t)v6;
    sKeySpacesInternalCount += 4;
    Class result = (void *)sKeySpaces;
  }
  else
  {
    uint64_t v6 = (void *)sKeySpaceNames;
  }
  if (result && v6)
  {
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, &sFigFlatDictionaryKeyCFSetCallbacks);
    uint64_t v8 = sKeySpacesCount;
    *(void *)(sKeySpaces + 8 * sKeySpacesCount) = Mutable;
    *(_DWORD *)(sKeySpaceNames + 4 * v_Block_object_dispose(&STACK[0x4E0], 8) = a2;
    sKeySpacesCFIndex Count = v8 + 1;
    pthread_mutex_unlock((pthread_mutex_t *)sKeySpaceLock);
    return (void *)(sKeySpacesCount - 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t figFlatDictionaryKeySpaceCreateKeySpaceLockOnce()
{
  uint64_t result = FigSimpleMutexCreate();
  sKeySpaceLocuint64_t k = result;
  return result;
}

BOOL FigFlatDictionaryKeySpaceIsValid(int a1)
{
  return a1 > 0 && sKeySpacesCount > a1;
}

uint64_t FigFlatDictionaryKeySpaceGetKeySpaceWithLabel(int a1)
{
  if (sKeySpacesCount < 2) {
    return 0;
  }
  uint64_t v1 = 1;
  while (*(_DWORD *)(sKeySpaceNames + 4 * v1) != a1)
  {
    if (sKeySpacesCount == ++v1) {
      return 0;
    }
  }
  return v1;
}

uint64_t FigFlatDictionaryKeyRegisterExistingKey(int a1, int *a2)
{
  uint64_t result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    if (a2[1] && *a2)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = a2[4];
      if ((v5 - 7) >= 3) {
        uint64_t v6 = kFigFlatDictionaryValueSizes[v5];
      }
      else {
        uint64_t v6 = *((void *)a2 + 3) + 4;
      }
      *((void *)a2 + 3) = v6;
      a2[1] = CFSetGetCount(*(CFSetRef *)(sKeySpaces + 8 * a1));
      CFSetAddValue(*(CFMutableSetRef *)(sKeySpaces + 8 * a1), a2);
      *a2 = a1;
      return 1;
    }
  }
  return result;
}

_DWORD *FigFlatDictionaryKeyRegisterNewKey(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x28uLL, 0x10D004010E3ED91uLL);
    v5[4] = a3;
    *((void *)v5 + 1) = a2;
    *((void *)v5 + 3) = a4;
    *((void *)v5 + 4) = a5;
    if ((FigFlatDictionaryKeyRegisterExistingKey(a1, v5) & 1) == 0)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

const void *FigFlatDictionaryKeyLookupFromIdentifier(int a1, uint64_t a2)
{
  uint64_t result = 0;
  value[0] = a1;
  value[1] = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = a2;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    uint64_t v6 = 0;
    return CFSetGetValue(*(CFSetRef *)(sKeySpaces + 8 * a1), value);
  }
  return result;
}

CFStringRef flatDictionaryKey_CFSetCallbackCopyDescription(uint64_t a1)
{
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a1 + 8), 0x8000100u);
}

BOOL flatDictionaryKey_CFSetCallbackEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) == 0;
}

uint64_t flatDictionaryKey_CFSetCallbackHash(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  char v2 = *v1;
  if (!*v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = v1 + 1;
  do
  {
    uint64_t result = 65599 * result + v2;
    int v5 = *v4++;
    char v2 = v5;
  }
  while (v5);
  return result;
}

void sub_1A5A84978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1A5A84B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5A84EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

double ptn_rectBoundedByDimensions(int a1, double result, double a3, double a4)
{
  if (a4 > (double)a1) {
    a4 = (double)a1;
  }
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  if ((double)a1 - a4 < result) {
    uint64_t result = (double)a1 - a4;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

void sub_1A5A87C64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

double ptn_rotateRect(int a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if (a1)
  {
    a3 = (a3 * a7 - a11) / a13;
    a4 = (a4 * a8 - a12) / a14;
    a5 = a5 * a7 / a13;
    a6 = a6 * a8 / a14;
  }
  long long v18 = a2[1];
  *(_OWORD *)&v22.a = *a2;
  *(_OWORD *)&v22.c = v18;
  *(_OWORD *)&v22.tdouble x = a2[2];
  double v19 = COERCE_DOUBLE(CGRectApplyAffineTransform(*(CGRect *)&a3, &v22));
  if (v19 <= 1.0) {
    double v20 = v19;
  }
  else {
    double v20 = 1.0;
  }
  if (v19 >= 0.0) {
    return v20;
  }
  else {
    return 0.0;
  }
}

Class __getHDRProcessorClass_block_invoke(uint64_t a1)
{
  HDRProcessingLibrary();
  Class result = objc_getClass("HDRProcessor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getHDRProcessorClass_block_invoke_cold_1();
  }
  getHDRProcessorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t HDRProcessingLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!HDRProcessingLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __HDRProcessingLibraryCore_block_invoke;
    unsigned char v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C24DD0;
    uint64_t v4 = 0;
    HDRProcessingLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = HDRProcessingLibraryCore_frameworkLibrary;
  if (!HDRProcessingLibraryCore_frameworkLibrary) {
    HDRProcessingLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __HDRProcessingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HDRProcessingLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc_block_invoke(uint64_t a1)
{
  char v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDolbyVisionRPUDataKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

double msn_getOriginalPTSForSampleBuffer@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  long long v4 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  if (a1)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
    if (v6) {
      CMTimeMakeFromDictionary(&v8, v6);
    }
    else {
      CMSampleBufferGetPresentationTimeStamp(&v8, (CMSampleBufferRef)a1);
    }
    *(void *)&long long v4 = v8.value;
    *(CMTime *)a2 = v8;
  }
  return *(double *)&v4;
}

uint64_t pbp_scanIOSurfacesCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id makeLocalDefaultsWrites()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = getPrefs();
  [v1 addPointer:v0];

  return v0;
}

uint64_t determineReferenceFrameIndex(CMAttachmentBearerRef *a1, int a2, unsigned int a3, int *a4)
{
  uint64_t v29 = objc_opt_new();
  int v30 = a2;
  int v31 = -1;
  if (a2 >= 1)
  {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F53070];
    uint64_t v8 = *MEMORY[0x1E4F53D38];
    uint64_t v9 = *MEMORY[0x1E4F54138];
    uint64_t v10 = a2;
    do
    {
      long long v11 = CMGetAttachment(*a1, v7, 0);
      long long v12 = [v11 objectForKeyedSubscript:v8];
      int v13 = [v12 intValue];

      BOOL v14 = (a3 == 7 || a3 == 2) && v13 == v30;
      size_t v15 = [v11 objectForKeyedSubscript:v9];
      char v16 = [v15 BOOLValue];

      if ((v16 & 1) == 0 && !v14) {
        [v29 addObject:v11];
      }

      ++a1;
      --v10;
    }
    while (v10);
  }
  int v17 = -1;
  if (a3 > 9)
  {
    uint64_t v19 = 0xFFFFFFFFLL;
    double v20 = a4;
    long long v18 = v29;
  }
  else
  {
    long long v18 = v29;
    if (((1 << a3) & 0xC6) != 0)
    {
      uint64_t v19 = FigCaptureReferenceFrameSelection((const __CFArray *)v29, &v31);
      int v17 = v31;
      double v20 = a4;
    }
    else
    {
      uint64_t v19 = 0xFFFFFFFFLL;
      double v20 = a4;
      if (a3 == 9 && [v29 count])
      {
        unint64_t v22 = 0;
        uint64_t v23 = *MEMORY[0x1E4F53E38];
        do
        {
          uint64_t v24 = [v29 objectAtIndexedSubscript:v22];
          int8x16_t v25 = [v24 objectForKeyedSubscript:v23];
          [v25 floatValue];
          float v27 = v26;

          if (v27 >= 0.0)
          {
            uint64_t v19 = v19;
          }
          else
          {
            int v17 = v22;
            uint64_t v19 = 0;
          }
          ++v22;
        }
        while (v22 < [v29 count]);
      }
    }
  }
  *double v20 = v17;

  return v19;
}

double makeChromaROI(double a1)
{
  return (double)((int)a1 >> 1);
}

void __extractSubset_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v6 hasPrefix:*(void *)(a1 + 32)]) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

uint64_t FigCapturePlatformReconfigure(uint64_t a1, int a2)
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return fcp_reconfigurePlatformWithOverride(a1, a2, 1);
}

uint64_t FigCapturePlatformSupportsHTPC32x4Compression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  return sPlatformSupportsHTPC32x4Compression;
}

__CFString *FigCapturePlatformChipRevisionIdentifierString()
{
  if (fcp_identifyChipRevision_identifyChipRevisionOnceToken != -1) {
    dispatch_once(&fcp_identifyChipRevision_identifyChipRevisionOnceToken, &__block_literal_global_75);
  }
  uint64_t v0 = @"Unknown";
  uint64_t v1 = @"B0";
  char v2 = @"B1";
  if (sPlatformChipRevisionID != 17) {
    char v2 = @"Unknown";
  }
  if (sPlatformChipRevisionID != 16) {
    uint64_t v1 = v2;
  }
  if (sPlatformChipRevisionID == 1) {
    uint64_t v0 = @"A1";
  }
  if (!sPlatformChipRevisionID) {
    uint64_t v0 = @"A0";
  }
  if (sPlatformChipRevisionID <= 15) {
    return v0;
  }
  else {
    return v1;
  }
}

uint64_t FigCapturePlatformSupportsExternalCameras()
{
  uint64_t result = BWDeviceIsiPad();
  if (result) {
    return MGGetBoolAnswer();
  }
  return result;
}

double FigCapturePlatformGetISPHardwareCharacteristics@<D0>(uint64_t a1@<X8>)
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1) {
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_12);
  }
  double result = *(double *)&sISPHardwareCharacteristics;
  long long v3 = unk_1EB4C6138;
  *(_OWORD *)a1 = sISPHardwareCharacteristics;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = dword_1EB4C6148;
  return result;
}

uint64_t __fcp_identifyChipRevision_block_invoke()
{
  *(_DWORD *)IOSurfaceRef buffer = -1;
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceNameMatching("arm-io");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  if (result)
  {
    io_object_t v3 = result;
    CFPropertCGFloat y = (const __CFData *)IORegistryEntryCreateCFProperty(result, @"chip-revision", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFProperty)
    {
      CFDataRef v5 = CFProperty;
      v7.locatiouint64_t n = 0;
      v7.length = 4;
      CFDataGetBytes(CFProperty, v7, buffer);
      CFRelease(v5);
    }
    uint64_t result = IOObjectRelease(v3);
    if (*(_DWORD *)buffer <= 0x11u && ((1 << buffer[0]) & 0x30003) != 0) {
      sPlatformChipRevisionIOSurfaceID ID = *(_DWORD *)buffer;
    }
  }
  return result;
}

uint64_t PrivacyAccountingLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  io_object_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = PrivacyAccountingLibraryCore_frameworkLibrary;
  uint64_t v5 = PrivacyAccountingLibraryCore_frameworkLibrary;
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C24EC0;
    long long v7 = *(_OWORD *)&off_1E5C24ED0;
    v3[3] = _sl_dlopen();
    PrivacyAccountingLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5A8E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __PrivacyAccountingLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  PrivacyAccountingLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t PrivacyAccountingLibrary()
{
  CFDictionaryRef v1 = 0;
  uint64_t result = PrivacyAccountingLibraryCore();
  if (!result) {
    PrivacyAccountingLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getPAAccessLoggerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__6;
  long long v7 = __Block_byref_object_dispose__6;
  uint64_t v0 = getPAAccessLoggerClass_softClass;
  uint64_t v8 = getPAAccessLoggerClass_softClass;
  if (!getPAAccessLoggerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPAAccessLoggerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    unsigned char v2[4] = &v3;
    __getPAAccessLoggerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A8EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAAccessLogger");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPAAccessLoggerClass_block_invoke_cold_1();
  }
  getPAAccessLoggerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PATCCAccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPATCCAccessClass_block_invoke_cold_1();
  }
  getPATCCAccessClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPAApplicationClass_block_invoke_cold_1();
  }
  getPAApplicationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPAAuthenticatedClientIdentitySymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
  uint64_t v6 = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
  if (!getPAAuthenticatedClientIdentitySymbolLoc_ptr)
  {
    CFDictionaryRef v1 = (void *)PrivacyAccountingLibrary();
    void v4[3] = (uint64_t)dlsym(v1, "PAAuthenticatedClientIdentity");
    getPAAuthenticatedClientIdentitySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5A8ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPAAuthenticatedClientIdentitySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)PrivacyAccountingLibrary();
  Class result = dlsym(v2, "PAAuthenticatedClientIdentity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPAAuthenticatedClientIdentitySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t soft_PAAuthenticatedClientIdentity(_OWORD *a1, uint64_t a2)
{
  PAAuthenticatedClientIdentitySymbolLoc = (uint64_t (*)(_OWORD *, uint64_t))getPAAuthenticatedClientIdentitySymbolLoc();
  if (!PAAuthenticatedClientIdentitySymbolLoc) {
    soft_PAAuthenticatedClientIdentity_cold_1();
  }
  long long v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  return PAAuthenticatedClientIdentitySymbolLoc(v7, a2);
}

uint64_t __pdn_sendPPSData_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 32)), @"DetectionSessionStartTime");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 40)), @"DetectionSessionStopTime");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)), @"InPocketDecision");
  if (gBWPocketDetectionNodeTrace_block_invoke_telemetryIdOnce != -1) {
    dispatch_once(&gBWPocketDetectionNodeTrace_block_invoke_telemetryIdOnce, &__block_literal_global_163);
  }
  uint64_t result = gBWPocketDetectionNodeTrace_block_invoke_telemetryId;
  if (gBWPocketDetectionNodeTrace_block_invoke_telemetryId)
  {
    return MEMORY[0x1F4145DD0]();
  }
  return result;
}

uint64_t __pdn_sendPPSData_block_invoke_2()
{
  uint64_t result = PPSCreateTelemetryIdentifier();
  gBWPocketDetectionNodeTrace_block_invoke_telemetryId = result;
  return result;
}

void FigCaptureSmartStyleSettingsSetSystemStyle(uint64_t a1, uint64_t a2)
{
  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1) {
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_14);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsSetSystemStyle_block_invoke;
  void v4[3] = &unk_1E5C24458;
  void v4[4] = a2;
  void v4[5] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
}

uint64_t __FigCaptureSmartStyleSettingsSetSystemStyle_block_invoke(uint64_t a1)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = (const __CFString *)[NSString stringWithFormat:@"%@systemstyle", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    v10[0] = @"CastType";
    v11[0] = [v3 cast];
    v10[1] = @"CastIntensity";
    uint64_t v4 = NSNumber;
    [*(id *)(a1 + 40) intensity];
    v11[1] = objc_msgSend(v4, "numberWithFloat:");
    void v10[2] = @"ToneBias";
    long long v5 = NSNumber;
    [*(id *)(a1 + 40) toneBias];
    _OWORD v11[2] = objc_msgSend(v5, "numberWithFloat:");
    _OWORD v10[3] = @"ColorBias";
    uint64_t v6 = NSNumber;
    [*(id *)(a1 + 40) colorBias];
    v11[3] = objc_msgSend(v6, "numberWithFloat:");
    long long v7 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];
  }
  else
  {
    long long v7 = 0;
  }
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(v2, v7, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  return CFPreferencesSynchronize(@"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3E0], v8);
}

id FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp(uint64_t a1)
{
  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1) {
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_14);
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3052000000;
  CFStringRef v8 = __Block_byref_object_copy__7;
  uint64_t v9 = __Block_byref_object_dispose__7;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp_block_invoke;
  void v4[3] = &unk_1E5C24F58;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A5A91078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFPropertyListRef __FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp_block_invoke(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)[NSString stringWithFormat:@"nonpersisting-global/%@systemstyle-backgrounded-timestamp", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  CFPropertyListRef result = CFPreferencesCopyValue(v2, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp(uint64_t a1, uint64_t a2)
{
  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1) {
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_14);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp_block_invoke;
  void v4[3] = &unk_1E5C24458;
  void v4[4] = a2;
  void v4[5] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
}

uint64_t __FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp_block_invoke(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)[NSString stringWithFormat:@"nonpersisting-global/%@systemstyle-backgrounded-timestamp", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(v2, *(CFPropertyListRef *)(a1 + 40), @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  return CFPreferencesSynchronize(@"com.apple.cameracapture", v4, v3);
}

void FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID(uint64_t a1)
{
  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1) {
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_14);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID_block_invoke;
  block[3] = &unk_1E5C24430;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, block);
}

uint64_t __FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID_block_invoke(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)[NSString stringWithFormat:@"nonpersisting-global/%@systemstyle-backgrounded-timestamp", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  CFStringRef v3 = (const __CFString *)[NSString stringWithFormat:@"%@systemstyle", fsss_prefixedSystemStylePreferenceKeyForBundleID(*(void **)(a1 + 32))];
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(v2, 0, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFPreferencesSetValue(v3, 0, @"com.apple.cameracapture", v4, v5);
  CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  return CFPreferencesSynchronize(@"com.apple.cameracapture", v6, v5);
}

dispatch_queue_t __FigCaptureSmartStyleSettingsPrewarm_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t result = dispatch_queue_create("com.apple.figcapture.smartstylesettings", v0);
  sFigCaptureSmartStyleQueue = (uint64_t)result;
  return result;
}

uint64_t FigCaptureGetMacModelMajorVersion()
{
  return sMacModelMajorVersion;
}

uint64_t FigCaptureGetMacModelMinorVersion()
{
  return sMacModelMinorVersion;
}

uint64_t FigCaptureMetadataUtilitiesCreateExifCompositeImageMetadata(uint64_t a1, float a2, float a3, float a4)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v8 setObject:&unk_1EFAFE208 forKeyedSubscript:@"CompositeImage"];
  v14[0] = [NSNumber numberWithInt:a1];
  v14[1] = &unk_1EFAFE220;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v14, 2), @"SourceImageNumberOfCompositeImage");
  v13[0] = &unk_1EFB05898;
  *(float *)&double v9 = a2;
  v13[1] = [NSNumber numberWithFloat:v9];
  v13[2] = &unk_1EFB05898;
  *(float *)&double v10 = a4;
  v13[3] = [NSNumber numberWithFloat:v10];
  void v13[4] = &unk_1EFB05898;
  *(float *)&double v11 = a3;
  void v13[5] = [NSNumber numberWithFloat:v11];
  v13[6] = &unk_1EFB05898;
  void v13[7] = &unk_1EFAFE220;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v13, 8), @"SourceExposureTimesOfCompositeImage");
  return [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v8];
}

uint64_t FigCaptureMetadataUtilitiesDevicePropertiesLockedForPanorama(CMAttachmentBearerRef target, int a2)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  CFStringRef v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v4) {
    goto LABEL_29;
  }
  CFStringRef v5 = v4;
  CFBooleanRef v6 = (const __CFBoolean *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F53BE8]];
  CFBooleanRef v7 = (const __CFBoolean *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53BB8]];
  uint64_t v8 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F53BA8]];
  CFBooleanRef v9 = (const __CFBoolean *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53C68]];
  if (a2)
  {
    uint64_t v10 = [v5 objectForKeyedSubscript:*MEMORY[0x1E4F54008]];
    CFBooleanRef v11 = (const __CFBoolean *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53E10]];
  }
  else
  {
    uint64_t v10 = *MEMORY[0x1E4F1CFD0];
    CFBooleanRef v11 = (const __CFBoolean *)*MEMORY[0x1E4F1CFD0];
  }
  BOOL v12 = !v6 || v7 == 0;
  BOOL v13 = v12 || v9 == 0;
  BOOL v14 = v13 || v11 == 0;
  if (v14 || v10 == 0)
  {
LABEL_29:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (CFBooleanGetValue(v6))
  {
    BOOL v16 = !CFBooleanGetValue(v7) && v8 == 0;
    if (!v16 && CFBooleanGetValue(v9) && CFBooleanGetValue(v11) && v10 == *MEMORY[0x1E4F1CFD0]) {
      return 1;
    }
  }
  return 0;
}

id FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama(CMAttachmentBearerRef target, int a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  uint64_t v4 = *MEMORY[0x1E4F559F0];
  uint64_t v23 = *MEMORY[0x1E4F55A58];
  uint64_t v24 = v4;
  uint64_t v5 = *MEMORY[0x1E4F55A38];
  uint64_t v25 = *MEMORY[0x1E4F55A50];
  uint64_t v26 = v5;
  uint64_t v6 = *MEMORY[0x1E4F53BE8];
  uint64_t v27 = *MEMORY[0x1E4F559F8];
  uint64_t v28 = v6;
  uint64_t v7 = *MEMORY[0x1E4F53C68];
  uint64_t v29 = *MEMORY[0x1E4F53BB8];
  uint64_t v30 = v7;
  uint64_t v8 = *MEMORY[0x1E4F53C08];
  uint64_t v31 = *MEMORY[0x1E4F53E10];
  uint64_t v32 = v8;
  uint64_t v9 = *MEMORY[0x1E4F54388];
  uint64_t v33 = *MEMORY[0x1E4F543A0];
  uint64_t v34 = v9;
  uint64_t v10 = *MEMORY[0x1E4F54008];
  uint64_t v35 = *MEMORY[0x1E4F53E48];
  uint64_t v36 = v10;
  uint64_t v11 = *MEMORY[0x1E4F541C0];
  uint64_t v37 = *MEMORY[0x1E4F53BA8];
  uint64_t v38 = v11;
  uint64_t v12 = *MEMORY[0x1E4F53C48];
  uint64_t v39 = *MEMORY[0x1E4F53C70];
  uint64_t v40 = v12;
  uint64_t v13 = *MEMORY[0x1E4F53C40];
  uint64_t v41 = *MEMORY[0x1E4F53C10];
  uint64_t v42 = v13;
  uint64_t v14 = *MEMORY[0x1E4F53C30];
  uint64_t v43 = *MEMORY[0x1E4F53C38];
  uint64_t v44 = v14;
  uint64_t v15 = *MEMORY[0x1E4F53D90];
  uint64_t v45 = *MEMORY[0x1E4F54128];
  uint64_t v46 = v15;
  uint64_t v47 = *MEMORY[0x1E4F53DC8];
  BOOL v16 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  for (uint64_t i = 0; i != 200; i += 8)
  {
    uint64_t v19 = *(uint64_t *)((char *)&v23 + i);
    uint64_t v20 = objc_msgSend(v16, "objectForKeyedSubscript:", v19, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38,
            v39,
            v40,
            v41,
            v42,
            v43,
            v44,
            v45,
            v46,
            v47,
            v48);
    if (v20)
    {
      [v17 setObject:v20 forKeyedSubscript:v19];
    }
    else if ((FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama_haveWarned & 1) == 0)
    {
      FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama_haveWarned = 1;
    }
  }
  if (FigCaptureMetadataUtilitiesDevicePropertiesLockedForPanorama(target, a2)) {
    uint64_t v21 = MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v21 = MEMORY[0x1E4F1CC28];
  }
  [v17 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F55780]];
  return v17;
}

uint64_t FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization(const void *a1)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  CFStringRef v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v3 = *MEMORY[0x1E4F54128];
  uint64_t v4 = *MEMORY[0x1E4F53D98];
  v20[0] = *MEMORY[0x1E4F54128];
  v20[1] = v4;
  uint64_t v5 = *MEMORY[0x1E4F53E48];
  void v20[2] = *MEMORY[0x1E4F55A18];
  v20[3] = v5;
  uint64_t v6 = *MEMORY[0x1E4F55A00];
  v20[4] = *MEMORY[0x1E4F53EE8];
  void v20[5] = v6;
  uint64_t v7 = *MEMORY[0x1E4F55A28];
  v20[6] = *MEMORY[0x1E4F55A48];
  v20[7] = v7;
  uint64_t v8 = *MEMORY[0x1E4F55A20];
  v19[0] = *MEMORY[0x1E4F55A60];
  v19[1] = v8;
  uint64_t v9 = *MEMORY[0x1E4F53F98];
  _OWORD v19[2] = *MEMORY[0x1E4F54280];
  v19[3] = v9;
  uint64_t v10 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v12 = v20[i];
    uint64_t v13 = [v10 objectForKeyedSubscript:v12];
    if (v13)
    {
      [v2 setObject:v13 forKeyedSubscript:v12];
    }
    else if ((FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization_haveWarned & 1) == 0)
    {
      FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization_haveWarned = 1;
    }
  }
  for (uint64_t j = 0; j != 4; ++j)
  {
    uint64_t v15 = v19[j];
    uint64_t v16 = [v10 objectForKeyedSubscript:v15];
    if (v16) {
      [v2 setObject:v16 forKeyedSubscript:v15];
    }
  }
  if (fcmu_darkShadeHorizontalCrop((void *)[v10 objectForKeyedSubscript:v3])) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E4F54370]), *MEMORY[0x1E4F54370]);
  }
  if (![v2 count]) {
    return 0;
  }
  id v17 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  return objc_msgSend(v17, "initWithObjectsAndKeys:", v2, *MEMORY[0x1E4F55778], 0);
}

uint64_t fcmu_darkShadeHorizontalCrop(void *a1)
{
  if (![a1 isEqualToString:*MEMORY[0x1E4F52DD8]]) {
    return 0;
  }
  if ([@"D54p" isEqualToString:FigCaptureGetModelSpecificName()]) {
    return 64;
  }
  if ([&unk_1EFB02CA8 containsObject:FigCaptureGetModelSpecificName()]) {
    return 32;
  }
  else {
    return 0;
  }
}

uint64_t FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForAggd(CMAttachmentBearerRef target)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  CFStringRef v2 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F53E48]];
    if (v4)
    {
      [v4 doubleValue];
      uint64_t v6 = (unsigned __int16)vcvtad_u64_f64(v5 * 8000.0);
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v8 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53F70]];
    if (v8)
    {
      [v8 doubleValue];
      v7 |= 2uLL;
      unint64_t v10 = (unint64_t)(unsigned __int16)llround(v9) << 16;
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v11 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53D48]];
    if (v11)
    {
      [v11 doubleValue];
      v7 |= 4uLL;
      unint64_t v13 = (unint64_t)vcvtad_u64_f64(v12 * 10.0) << 32;
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53F20]];
    if (v14 && ([v14 doubleValue], uint64_t v16 = llround(v15 * 0.00390625 * 16.0), v16))
    {
      v7 |= 8uLL;
      uint64_t v17 = v16 << 40;
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v18 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54280]];
    if ([v18 isEqualToString:*MEMORY[0x1E4F54E60]])
    {
      uint64_t v19 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F54270]];
      uint64_t v20 = v19;
      unint64_t v39 = v13;
      if (v19)
      {
        uint64_t v21 = (void *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F54DE0]];
        unint64_t v22 = v10;
        if (v21)
        {
          uint64_t v23 = vcvtad_u64_f64((double)(int)[v21 intValue] * 0.00390625);
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v23 = 0;
        }
        uint64_t v26 = v6;
        uint64_t v28 = (void *)[v20 objectForKeyedSubscript:*MEMORY[0x1E4F54DE8]];
        if (v28)
        {
          v24 |= 2uLL;
          unint64_t v27 = (unint64_t)vcvtad_u64_f64((double)(int)[v28 intValue] * 0.00390625) << 8;
        }
        else
        {
          unint64_t v27 = 0;
        }
        uint64_t v29 = (void *)[v20 objectForKeyedSubscript:*MEMORY[0x1E4F54DA8]];
        if (v29)
        {
          v24 |= 4uLL;
          uint64_t v20 = (void *)([v29 intValue] << 16);
        }
        else
        {
          uint64_t v20 = 0;
        }
      }
      else
      {
        unint64_t v22 = v10;
        uint64_t v26 = v6;
        unint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v30 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53FA0]];
      if (v30)
      {
        v24 |= 8uLL;
        uint64_t v31 = [v30 intValue] << 24;
      }
      else
      {
        uint64_t v31 = 0;
      }
      unint64_t v25 = ((unint64_t)v20 + v31 + (v23 | v27)) | (v24 << 56);
      uint64_t v6 = v26;
      unint64_t v10 = v22;
      unint64_t v13 = v39;
    }
    else
    {
      unint64_t v25 = 0;
    }
    uint64_t v32 = [MEMORY[0x1E4F1CA60] dictionary];
    if (v32)
    {
      uint64_t v33 = (void *)v32;
      if (((v10 | v6) + v13 + v17) | (v7 << 56))
      {
        uint64_t v34 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
        [v33 setObject:v34 forKeyedSubscript:*MEMORY[0x1E4F52C58]];
      }
      if (v25)
      {
        uint64_t v35 = [NSNumber numberWithUnsignedLongLong:v25];
        [v33 setObject:v35 forKeyedSubscript:*MEMORY[0x1E4F52C68]];
      }
      CFTypeRef v36 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55AC0], 0);
      if (v36) {
        [v33 setObject:v36 forKeyedSubscript:*MEMORY[0x1E4F52C60]];
      }
      if ([v33 count])
      {
        id v37 = objc_alloc(MEMORY[0x1E4F1C9E8]);
        return objc_msgSend(v37, "initWithObjectsAndKeys:", v33, *MEMORY[0x1E4F55770], 0);
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

uint64_t __FigCaptureMetadataUtilitiesCreateMetadataAttachments_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:@"en_US_POSIX"];
  uint64_t v1 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:*MEMORY[0x1E4F1C318]];
  FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString = MGCopyAnswer();
  FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductVersiouint64_t n = MGCopyAnswer();
  uint64_t v2 = MGCopyAnswer();
  uint64_t v3 = (void *)v2;
  if (FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductVersion && v2)
  {
    id v4 = [NSString alloc];
    FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductBuildVersionString = [v4 initWithFormat:@"%@ (%@)", FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductVersion, v3];
  }

  FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter setTimeStyle:0];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter setDateStyle:0];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter setDateFormat:@"yyyy:MM:dd HH:mm:ss"];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter setLocale:v0];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter setCalendar:v1];
  FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter setTimeStyle:0];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter setDateStyle:0];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter setDateFormat:@"SSS"];
  [(id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter setLocale:v0];
  double v5 = (void *)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter;
  return [v5 setCalendar:v1];
}

__CFDictionary *fcmu_makerNoteMetadata(void *a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFDictionaryRef v9 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v9)
  {
    CFDictionaryRef v10 = v9;
    uint64_t v11 = (__CFDictionary *)[MEMORY[0x1E4F1CA60] dictionary];
    if (!v11)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v11;
    }
    double v12 = objc_msgSend((id)CMGetAttachment(a1, @"StillSettings", 0), "captureSettings");
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52BA8], &unk_1EFAFE2E0);
    CFTypeRef v13 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
    if (v13)
    {
      uint64_t v14 = CFRetain(v13);
      if (v14) {
        goto LABEL_7;
      }
    }
    CMSampleBufferGetPresentationTimeStamp(&time, (CMSampleBufferRef)a1);
    CMTimeValue v209 = time.value;
    CMTimeScale timescale = time.timescale;
    if (time.flags)
    {
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      time.xpc_object_t value = v209;
      time.CMTimeScale timescale = timescale;
      uint64_t v14 = CMTimeCopyAsDictionary(&time, v15);
      if (v14)
      {
LABEL_7:
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B98], v14);
        CFRelease(v14);
      }
    }
    xpc_object_t value = 0;
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53BC0], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52870], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53BC8], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52878], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53BD8], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52880], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53B98], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52860], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53BA0], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52868], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53BF0], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528D8], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F532F8], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52930], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53458], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A70], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54280], (const void **)&value))
    {
      uint64_t v16 = value;
      if ([value isEqual:*MEMORY[0x1E4F54E78]])
      {
        uint64_t v17 = &unk_1EFAFE220;
      }
      else if ([v16 isEqual:*MEMORY[0x1E4F54E68]])
      {
        uint64_t v17 = &unk_1EFAFE268;
      }
      else if ([v16 isEqual:*MEMORY[0x1E4F54E60]])
      {
        uint64_t v17 = &unk_1EFAFE280;
      }
      else if ([v16 isEqual:*MEMORY[0x1E4F54E80]])
      {
        uint64_t v17 = &unk_1EFAFE208;
      }
      else if ([v16 isEqual:*MEMORY[0x1E4F54E88]])
      {
        uint64_t v17 = &unk_1EFAFE2F8;
      }
      else
      {
        if (![v16 isEqual:*MEMORY[0x1E4F54E70]]) {
          goto LABEL_40;
        }
        uint64_t v17 = &unk_1EFAFE310;
      }
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A20], v17);
    }
LABEL_40:
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53F30], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52960], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53300], (const void **)&value))
    {
      if ([v12 captureType] == 10) {
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52BA0], value);
      }
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52950], value);
    }
    keCGFloat y = v8;
    unint64_t v18 = 0x1E4F28000uLL;
    CFDictionaryRef theDict = v11;
    CFDictionaryRef v183 = v10;
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54270], (const void **)&value))
    {
      uint64_t v19 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DE0]);
      uint64_t v20 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DE8]);
      uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DA8]);
      if (v19 && v20)
      {
        [v19 floatValue];
        float v23 = v22 * 0.0039062;
        [v20 floatValue];
        float v25 = v24 * 0.0039062;
        uint64_t v26 = (const void *)*MEMORY[0x1E4F52B10];
        *(float *)&double v27 = v23;
        v207[0] = [NSNumber numberWithFloat:v27];
        *(float *)&double v28 = v25;
        v207[1] = [NSNumber numberWithFloat:v28];
        CFDictionaryAddValue(theDict, v26, (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v207 count:2]);
      }
      uint64_t v11 = theDict;
      if (v21) {
        CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F52B08], v21);
      }
      if (fcmu_makerNoteMetadata_didAttemptToGetOISExternalOffsetDefault)
      {
        AppBooleanCFNumberRef Value = fcmu_makerNoteMetadata_attachOISExternalOffset;
      }
      else
      {
        AppBooleanCFNumberRef Value = CFPreferencesGetAppBooleanValue(@"attachOISExternalOffset", @"com.apple.coremedia", 0);
        fcmu_makerNoteMetadata_attachOISExternalOffset = AppBooleanValue;
        fcmu_makerNoteMetadata_didAttemptToGetOISExternalOffsetDefault = 1;
      }
      unint64_t v18 = 0x1E4F28000uLL;
      if (AppBooleanValue)
      {
        uint64_t v30 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DC8]);
        uint64_t v31 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E4F54DD0]);
        if (v30)
        {
          uint64_t v32 = v31;
          if (v31)
          {
            [v30 floatValue];
            float v34 = v33 * 0.0039062;
            [v32 floatValue];
            float v36 = v35 * 0.0039062;
            id v37 = (const void *)*MEMORY[0x1E4F52B00];
            *(float *)&double v38 = v34;
            v206[0] = [NSNumber numberWithFloat:v38];
            *(float *)&double v39 = v36;
            v206[1] = [NSNumber numberWithFloat:v39];
            CFDictionaryAddValue(theDict, v37, (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v206 count:2]);
          }
        }
      }
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53FA0], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B18], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54290], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B20], value);
    }
    uint64_t v40 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55AC0], 0);
    xpc_object_t value = v40;
    if (v40) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A68], v40);
    }
    uint64_t v41 = (void *)CMGetAttachment(a1, @"StillImageCaptureType", 0);
    xpc_object_t value = v41;
    if (v41) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B30], v41);
    }
    if (a2) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528E8], a2);
    }
    if (a3) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52970], a3);
    }
    if (a4) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A30], a4);
    }
    if (v12)
    {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B28], (const void *)objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v12, "captureFlags")));
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B58], (const void *)objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v12, "sceneFlags")));
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B50], (const void *)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v12, "metadata"), "snrType")));
      uint64_t v42 = (const void *)*MEMORY[0x1E4F52B48];
      uint64_t v43 = NSNumber;
      objc_msgSend((id)objc_msgSend(v12, "metadata"), "snr");
      CFDictionaryAddValue(v11, v42, (const void *)objc_msgSend(v43, "numberWithFloat:"));
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B60], (const void *)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v12, "metadata"), "systemPressureLevel")));
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52908], (const void *)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v12, "metadata"), "cameraControlsStatisticsMaster")));
      if (objc_msgSend((id)objc_msgSend(v12, "metadata"), "zeroShutterLagFailureReason")) {
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52BB0], (const void *)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v12, "metadata"), "zeroShutterLagFailureReason")));
      }
    }
    int valuePtr = 0;
    uint64_t v44 = (void *)CMGetAttachment(a1, @"StillImageProcessingFlags", 0);
    xpc_object_t value = v44;
    if (v44)
    {
      CFNumberGetValue((CFNumberRef)v44, kCFNumberSInt32Type, &valuePtr);
      uint64_t v45 = value;
    }
    else
    {
      uint64_t v45 = &unk_1EFAFE2C8;
      xpc_object_t value = &unk_1EFAFE2C8;
    }
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B38], v45);
    uint8x16_t v181 = (void *)*MEMORY[0x1E4F53D38];
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53D38], (const void **)&value)
      && (objc_msgSend((id)CMGetAttachment(a1, @"HasUnreliableBracketingMetadata", 0), "BOOLValue") & 1) == 0)
    {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528F0], value);
    }
    uint64_t v46 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55BF0], 0);
    xpc_object_t value = v46;
    if (v46) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529A8], v46);
    }
    if (fcmu_makerNoteMetadata_sFeatureFlagsEligibilityOnceToken != -1) {
      dispatch_once(&fcmu_makerNoteMetadata_sFeatureFlagsEligibilityOnceToken, &__block_literal_global_238);
    }
    BOOL v47 = fcmu_makerNoteMetadata_sEligibleForLightingEffects
       && (valuePtr & 0x20) != 0
       && objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55B40], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F558A8]), "intValue") == 1;
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A60], (const void *)[NSNumber numberWithUnsignedInt:v47]);
    uint64_t v48 = (void *)CMGetAttachment(a1, @"StillImageSettings", 0);
    if ([v48 captureRequestIdentifier]) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52968], (const void *)[v48 captureRequestIdentifier]);
    }
    uint16x8_t v49 = objc_msgSend((id)CMGetAttachment(a1, @"PhotoManifest", 0), "descriptorForSampleBuffer:", a1);
    if ([v49 photoIdentifier]) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A28], (const void *)[v49 photoIdentifier]);
    }
    CFAllocatorRef v50 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53D50]);
    xpc_object_t value = v50;
    if (v50) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528F8], v50);
    }
    int8x16_t v51 = (const void *)*MEMORY[0x1E4F53CD8];
    unsigned int v52 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53CD8]);
    xpc_object_t value = v52;
    if (v52) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528E0], v52);
    }
    uint8x16_t v53 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F54058]);
    xpc_object_t value = v53;
    if (v53 || (uint8x16_t v53 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53D98]), (value = v53) != 0)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52940], v53);
    }
    CFAllocatorRef v54 = (void *)CMGetAttachment(a1, @"MeteorHeadroom", 0);
    xpc_object_t value = v54;
    if (v54) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529B8], v54);
    }
    int8x16_t v55 = (void *)CMGetAttachment(a1, @"MeteorPlusGainMapAverage", 0);
    xpc_object_t value = v55;
    if (v55) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529C0], v55);
    }
    AttachedMedia = (const void *)BWSampleBufferGetAttachedMedia(a1, 0x1EFA4EB60);
    if (AttachedMedia) {
      unsigned int v57 = (void *)CMGetAttachment(AttachedMedia, key, 0);
    }
    else {
      unsigned int v57 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53310]);
    }
    uint16x8_t v58 = v57;
    if (v57)
    {
      unsigned int v59 = objc_msgSend((id)objc_msgSend(v57, "objectForKeyedSubscript:", *MEMORY[0x1E4F53318]), "intValue");
      [v12 captureFlags];
      if (v59 >= 0x20000)
      {
        int8x16_t v60 = (void *)[v58 objectForKeyedSubscript:*MEMORY[0x1E4F533E0]];
        xpc_object_t value = v60;
        if (v60) {
          CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F529B8], v60);
        }
        uint64_t v61 = (void *)[v58 objectForKeyedSubscript:*MEMORY[0x1E4F533D8]];
        xpc_object_t value = v61;
        if (v61) {
          CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E4F529C0], v61);
        }
      }
    }
    CFIndex v62 = (__CFString *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53CC8]);
    uint8x16_t v63 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F53EB0]);
    uint64_t v64 = (void *)CFDictionaryGetValue(v10, v51);
    uint64_t v65 = [(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F536D0]];
    if (v63 && v64)
    {
      uint64_t v66 = (void *)v65;
      uint64_t v67 = [v63 unsignedIntValue];
      unsigned __int8 v68 = [v64 unsignedIntValue];
      [v66 floatValue];
      uint64_t v70 = vcvts_n_u32_f32(v69, 8uLL) & 0xFFFFFFF | (v68 << 28);
      uint16x8_t v71 = (const void *)*MEMORY[0x1E4F52890];
      v205[0] = [NSNumber numberWithUnsignedInt:v67];
      v205[1] = [NSNumber numberWithUnsignedInt:v70];
      CFDictionaryAddValue(v11, v71, (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v205 count:2]);
    }
    if (v62)
    {
      if (fcmu_makerNoteMetadata_didAttemptToGetAFExternalOffsetDefault)
      {
        int v72 = fcmu_makerNoteMetadata_attachAFExternalOffset;
      }
      else
      {
        int v72 = CFPreferencesGetAppBooleanValue(@"attachAFExternalOffset", @"com.apple.coremedia", 0);
        fcmu_makerNoteMetadata_attachAFExternalOffset = v72;
        fcmu_makerNoteMetadata_didAttemptToGetAFExternalOffsetDefault = 1;
      }
      unint64_t v18 = 0x1E4F28000uLL;
      if (v72)
      {
        uint8x16_t v73 = (void *)[(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F536E0]];
        int8x16_t v74 = (void *)[(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F53670]];
        uint64_t v75 = [(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F536D8]];
        if (v73)
        {
          if (v74)
          {
            uint64_t v76 = (void *)v75;
            if (v75)
            {
              [v73 floatValue];
              int v78 = v77;
              [v74 floatValue];
              int v80 = v79;
              [v76 floatValue];
              int v82 = v81;
              uint64_t v83 = (const void *)*MEMORY[0x1E4F52888];
              LODWORD(v84) = v78;
              v204[0] = [NSNumber numberWithFloat:v84];
              LODWORD(v85) = v80;
              v204[1] = [NSNumber numberWithFloat:v85];
              LODWORD(v86) = v82;
              v204[2] = [NSNumber numberWithFloat:v86];
              CFDictionaryAddValue(v11, v83, (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v204 count:3]);
            }
          }
        }
      }
    }
    unsigned int v87 = (void *)CMGetAttachment(a1, @"StillImageProcessingHomography", 0);
    if ([v87 count] == 9)
    {
      uint64_t v88 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:44];
      uint8x16_t v89 = (void *)[v88 mutableBytes];
      uint64_t v90 = 0;
      *uint8x16_t v89 = 0x800000001;
      uint64_t v91 = v89 + 1;
      do
      {
        objc_msgSend((id)objc_msgSend(v87, "objectAtIndexedSubscript:", v90), "floatValue");
        *((_DWORD *)v91 + v90++) = v92;
      }
      while (v90 != 9);
      uint64_t v11 = theDict;
      CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F52B40], v88);
    }
    uint16x8_t v93 = (void *)CMGetAttachment(a1, @"IntelligentDistortionCorrectionMakernoteEntry", 0);
    xpc_object_t value = v93;
    if (v93) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52978], v93);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53408], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529E8], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F533F0], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529D0], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F533F8], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529D8], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53400], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529E0], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53368], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52958], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54068], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529B0], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54020], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52980], value);
    }
    int16x8_t v94 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F54338]);
    uint8x16_t v95 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55180]];
    xpc_object_t value = v95;
    if (v95) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B80], v95);
    }
    uint16x8_t v96 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55190]];
    xpc_object_t value = v96;
    if (v96) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B88], v96);
    }
    uint16x8_t v97 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55198]];
    xpc_object_t value = v97;
    if (v97) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B90], v97);
    }
    int16x8_t v98 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55160]];
    xpc_object_t value = v98;
    if (v98) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B68], v98);
    }
    uint8x16_t v99 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55170]];
    xpc_object_t value = v99;
    if (v99) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B70], v99);
    }
    uint16x8_t v100 = (void *)[v94 objectForKeyedSubscript:*MEMORY[0x1E4F55178]];
    xpc_object_t value = v100;
    if (v100) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52B78], v100);
    }
    uint16x8_t v101 = (void *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F54028]);
    int16x8_t v102 = (void *)[v101 objectForKeyedSubscript:*MEMORY[0x1E4F53A58]];
    xpc_object_t value = v102;
    if (v102) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52990], v102);
    }
    uint8x16_t v103 = (void *)[v101 objectForKeyedSubscript:*MEMORY[0x1E4F53A60]];
    xpc_object_t value = v103;
    if (v103) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52998], v103);
    }
    uint16x8_t v104 = (void *)[v101 objectForKeyedSubscript:*MEMORY[0x1E4F53A48]];
    xpc_object_t value = v104;
    if (v104) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52988], v104);
    }
    uint16x8_t v105 = (void *)[v101 objectForKeyedSubscript:*MEMORY[0x1E4F53A70]];
    xpc_object_t value = v105;
    if (v105) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F529A0], v105);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      int16x8_t v106 = (void *)[v48 semanticStyle];
      if ((valuePtr & 0x200000) != 0)
      {
        uint64_t v107 = [v48 smartStyle];
        if (v107)
        {
          if ((valuePtr & 0x10000) == 0)
          {
            uint16x8_t v108 = (void *)v107;
            LOBYTE(time.value) = 0;
            FigCFDictionaryGetBooleanIfPresent();
            LOBYTE(v209) = 0;
            FigCFDictionaryGetBooleanIfPresent();
            uint64_t v109 = FigCFDictionaryGetValue();
            uint64_t v110 = *MEMORY[0x1E4F52AE8];
            v203[0] = &unk_1EFAFE268;
            uint64_t v111 = *MEMORY[0x1E4F52AF0];
            v202[0] = v110;
            v202[1] = v111;
            uint16x8_t v112 = NSNumber;
            [v108 toneBias];
            v203[1] = objc_msgSend(v112, "numberWithFloat:");
            v202[2] = *MEMORY[0x1E4F52AC8];
            uint16x8_t v113 = NSNumber;
            [v108 colorBias];
            v203[2] = objc_msgSend(v113, "numberWithFloat:");
            v202[3] = *MEMORY[0x1E4F52AD8];
            int16x8_t v114 = NSNumber;
            [v108 intensity];
            v203[3] = objc_msgSend(v114, "numberWithFloat:");
            v202[4] = *MEMORY[0x1E4F52AC0];
            _DWORD v203[4] = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E4F55F08], "makerNoteTagForSmartStyleCastType:smartStyleVersion:", objc_msgSend(v108, "cast"), 1));
            v202[5] = *MEMORY[0x1E4F52AE0];
            v203[5] = [NSNumber numberWithUnsignedChar:LOBYTE(time.value)];
            v202[6] = *MEMORY[0x1E4F52AF8];
            unint64_t v18 = 0x1E4F28000uLL;
            v203[6] = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E4F55F08], "makerNoteTagForSmartStyleTuningType:smartStyleVersion:", v109, 1));
            v202[7] = *MEMORY[0x1E4F52AD0];
            v203[7] = [NSNumber numberWithUnsignedChar:v209];
            uint8x16_t v115 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v203 forKeys:v202 count:8];
            uint16x8_t v116 = (const void **)MEMORY[0x1E4F52AB8];
LABEL_173:
            CFDictionaryAddValue(v11, *v116, v115);
            goto LABEL_174;
          }
        }
      }
      if (v106)
      {
        uint64_t v117 = *MEMORY[0x1E4F52A80];
        v201[0] = &unk_1EFAFE268;
        uint64_t v118 = *MEMORY[0x1E4F52A88];
        v200[0] = v117;
        v200[1] = v118;
        uint8x16_t v119 = NSNumber;
        [v106 toneBias];
        v201[1] = objc_msgSend(v119, "numberWithFloat:");
        v200[2] = *MEMORY[0x1E4F52A90];
        uint16x8_t v120 = NSNumber;
        [v106 warmthBias];
        v201[2] = objc_msgSend(v120, "numberWithFloat:");
        uint8x16_t v115 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v201 forKeys:v200 count:3];
        uint16x8_t v116 = (const void **)MEMORY[0x1E4F52A78];
        goto LABEL_173;
      }
    }
LABEL_174:
    uint16x8_t v121 = (void *)[(__CFDictionary *)v10 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
    if (([v121 isEqualToString:*MEMORY[0x1E4F52DF8]] & 1) != 0
      || ([v121 isEqualToString:*MEMORY[0x1E4F52E10]] & 1) != 0
      || ([v121 isEqualToString:*MEMORY[0x1E4F52E00]] & 1) != 0)
    {
      uint64_t v122 = 1;
    }
    else
    {
      uint64_t v122 = [v121 isEqualToString:*MEMORY[0x1E4F52E08]];
    }
    uint64_t v123 = [NSNumber numberWithBool:v122];
    [(__CFDictionary *)v11 setObject:v123 forKeyedSubscript:*MEMORY[0x1E4F52948]];
    uint64_t v124 = fcmu_cameraFromPortTypeAndCameraLocation(v121);
    if (v124)
    {
      uint64_t v125 = [NSNumber numberWithInt:v124];
      [(__CFDictionary *)v11 setObject:v125 forKeyedSubscript:*MEMORY[0x1E4F52900]];
    }
    uint16x8_t v126 = (void *)CMGetAttachment(a1, @"FocusPixelBlurScoreResult", 0);
    if (v126)
    {
      int8x16_t v127 = (const void *)*MEMORY[0x1E4F52938];
      int16x8_t v128 = NSNumber;
      [v126 score];
      CFDictionaryAddValue(v11, v127, (const void *)objc_msgSend(v128, "numberWithFloat:"));
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54230], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52AA8], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54210], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52AA0], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54268], (const void **)&value)) {
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52AB0], value);
    }
    if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54110], (const void **)&value))
    {
      CFStringRef keya = v62;
      uint8x16_t v129 = value;
      uint16x8_t v130 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v131 = [v129 objectForKeyedSubscript:*MEMORY[0x1E4F544D8]];
      uint16x8_t v178 = v130;
      [v130 setObject:v131 forKeyedSubscript:*MEMORY[0x1E4F52A48]];
      int8x16_t v132 = (void *)[MEMORY[0x1E4F1CA48] array];
      int16x8_t v133 = (void *)[v129 objectForKeyedSubscript:*MEMORY[0x1E4F544D0]];
      long long v187 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      uint64_t v134 = [v133 countByEnumeratingWithState:&v187 objects:v199 count:16];
      if (v134)
      {
        uint64_t v135 = v134;
        uint64_t v136 = *(void *)v188;
        uint64_t v137 = *MEMORY[0x1E4F52A58];
        uint64_t v138 = *MEMORY[0x1E4F544C8];
        uint64_t v139 = *MEMORY[0x1E4F52A50];
        uint64_t v140 = *MEMORY[0x1E4F544C0];
        do
        {
          for (uint64_t i = 0; i != v135; ++i)
          {
            if (*(void *)v188 != v136) {
              objc_enumerationMutation(v133);
            }
            int8x16_t v142 = *(void **)(*((void *)&v187 + 1) + 8 * i);
            v197[0] = v137;
            uint64_t v143 = [v142 objectForKeyedSubscript:v138];
            v197[1] = v139;
            v198[0] = v143;
            v198[1] = [v142 objectForKeyedSubscript:v140];
            objc_msgSend(v132, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v198, v197, 2));
          }
          uint64_t v135 = [v133 countByEnumeratingWithState:&v187 objects:v199 count:16];
        }
        while (v135);
      }
      [v178 setObject:v132 forKeyedSubscript:*MEMORY[0x1E4F52A40]];
      uint64_t v11 = theDict;
      CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E4F52A38], v178);
      CFDictionaryRef v10 = v183;
      unint64_t v18 = 0x1E4F28000;
      CFIndex v62 = (__CFString *)keya;
    }
    if (FigCFDictionaryGetValueIfPresent()) {
      unint64_t v144 = (unint64_t)value;
    }
    else {
      unint64_t v144 = 0;
    }
    if (!((unint64_t)v62 | v144)) {
      goto LABEL_229;
    }
    uint16x8_t v145 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint16x8_t v146 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    if (v62)
    {
      if (objc_msgSend((id)-[__CFString objectForKeyedSubscript:](v62, "objectForKeyedSubscript:", *MEMORY[0x1E4F536C8]), "BOOLValue"))int v147 = 0x10000; {
      else
      }
        int v147 = 0;
      if (objc_msgSend((id)-[__CFString objectForKeyedSubscript:](v62, "objectForKeyedSubscript:", *MEMORY[0x1E4F536A0]), "BOOLValue"))int v148 = 0x20000; {
      else
      }
        int v148 = 0;
      int v149 = v148 | v147;
      if (objc_msgSend((id)-[__CFString objectForKeyedSubscript:](v62, "objectForKeyedSubscript:", *MEMORY[0x1E4F53680]), "BOOLValue"))int v150 = 0x40000; {
      else
      }
        int v150 = 0;
      if (objc_msgSend((id)-[__CFString objectForKeyedSubscript:](v62, "objectForKeyedSubscript:", *MEMORY[0x1E4F53678]), "BOOLValue"))int v151 = 0x80000; {
      else
      }
        int v151 = 0;
      uint64_t v152 = v149 | v150 | v151;
      uint64_t v153 = [(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F53660]];
      [v145 setObject:v153 forKeyedSubscript:*MEMORY[0x1E4F528A0]];
      uint64_t v154 = [(__CFString *)v62 objectForKeyedSubscript:*MEMORY[0x1E4F536C0]];
      [v146 setObject:v154 forKeyedSubscript:*MEMORY[0x1E4F528C0]];
      if (!v144) {
        goto LABEL_225;
      }
    }
    else
    {
      uint64_t v152 = 0;
      if (!v144)
      {
LABEL_225:
        CFDictionaryRef v10 = v183;
        unint64_t v18 = 0x1E4F28000uLL;
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528B0], (const void *)[NSNumber numberWithUnsignedInt:v152]);
        if ([v145 count]) {
          CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52898], v145);
        }
        if ([v146 count]) {
          CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F528B8], v146);
        }
LABEL_229:
        if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54328], (const void **)&value)
          && (FigCFNumberGetSInt32() & 0x80000000) == 0
          && CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54200], (const void **)&value)
          || CFDictionaryGetValueIfPresent(v10, v181, (const void **)&value)
          && (FigCFNumberGetSInt32() & 0x80000000) == 0
          && CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F54208], (const void **)&value))
        {
          if (FigCFArrayGetIntAtIndex()
            && FigCFArrayGetIntAtIndex()
            && FigCFArrayGetIntAtIndex()
            && FigCFArrayGetIntAtIndex())
          {
            int v162 = vaddvq_s32(*(int32x4_t *)&time.value);
            int v163 = v162 + 5;
            if (v162 + 2 >= 0) {
              int v163 = v162 + 2;
            }
            CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F52A98], (const void *)[NSNumber numberWithInt:(v163 >> 2)]);
          }
          unint64_t v18 = 0x1E4F28000uLL;
        }
        if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F53410], (const void **)&value))
        {
          LODWORD(time.value) = 0;
          FigCFDictionaryGetIntIfPresent();
          if (LODWORD(time.value) == 1)
          {
            LODWORD(v209) = 0;
            uint64_t v186 = 0;
            int v185 = 0;
            int FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
            int v165 = FigCFDictionaryGetFloatIfPresent();
            int v166 = FigCFDictionaryGetFloatIfPresent();
            int v167 = FigCFDictionaryGetFloatIfPresent();
            if (FloatIfPresent)
            {
              if (v165 & v166 & v167)
              {
                int v169 = (const void *)*MEMORY[0x1E4F529F0];
                uint64_t v170 = *MEMORY[0x1E4F52A18];
                v196[0] = &unk_1EFAFE268;
                uint64_t v171 = *MEMORY[0x1E4F529F8];
                v195[0] = v170;
                v195[1] = v171;
                LODWORD(v16_Block_object_dispose(&STACK[0x4E0], 8) = v209;
                v196[1] = [*(id *)(v18 + 3792) numberWithFloat:v168];
                v195[2] = *MEMORY[0x1E4F52A00];
                LODWORD(v172) = HIDWORD(v186);
                v196[2] = [*(id *)(v18 + 3792) numberWithFloat:v172];
                v195[3] = *MEMORY[0x1E4F52A10];
                LODWORD(v173) = v186;
                v196[3] = [*(id *)(v18 + 3792) numberWithFloat:v173];
                v195[4] = *MEMORY[0x1E4F52A08];
                LODWORD(v174) = v185;
                v196[4] = [*(id *)(v18 + 3792) numberWithFloat:v174];
                CFDictionaryAddValue(v11, v169, (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v196 forKeys:v195 count:5]);
              }
            }
          }
        }
        unsigned int v184 = 0;
        if (FigCaptureWritePackedValueForModuleAndCalibrationValidationStatusesFromMetadata((uint64_t)v10, &v184))
        {
          uint64_t v175 = [*(id *)(v18 + 3792) numberWithUnsignedInt:v184];
          [(__CFDictionary *)v11 setObject:v175 forKeyedSubscript:*MEMORY[0x1E4F529C8]];
        }
        if (CFDictionaryGetValueIfPresent(v10, (const void *)*MEMORY[0x1E4F532A0], (const void **)&value))
        {
          LOBYTE(v209) = 0;
          FigCFDictionaryGetBooleanIfPresent();
          LODWORD(time.value) = 0;
          FigCFDictionaryGetInt32IfPresent();
          int8x16_t v176 = (const void *)*MEMORY[0x1E4F52918];
          v193[0] = *MEMORY[0x1E4F52920];
          v194[0] = [*(id *)(v18 + 3792) numberWithUnsignedChar:v209];
          v193[1] = *MEMORY[0x1E4F52928];
          v194[1] = [*(id *)(v18 + 3792) numberWithInt:LODWORD(time.value)];
          CFDictionaryAddValue(v11, v176, (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v194 forKeys:v193 count:2]);
        }
        return v11;
      }
    }
    int v155 = objc_msgSend((id)objc_msgSend((id)v144, "objectForKeyedSubscript:", *MEMORY[0x1E4F54E30]), "BOOLValue");
    if (objc_msgSend((id)objc_msgSend((id)v144, "objectForKeyedSubscript:", *MEMORY[0x1E4F54DF8]), "BOOLValue"))int v156 = 2; {
    else
    }
      int v156 = 0;
    if (objc_msgSend((id)objc_msgSend((id)v144, "objectForKeyedSubscript:", *MEMORY[0x1E4F54DC0]), "BOOLValue"))int v157 = 4; {
    else
    }
      int v157 = 0;
    if (objc_msgSend((id)objc_msgSend((id)v144, "objectForKeyedSubscript:", *MEMORY[0x1E4F54DB8]), "BOOLValue"))int v158 = 8; {
    else
    }
      int v158 = 0;
    uint64_t v152 = v156 | v155 | v157 | v158 | v152;
    uint64_t v159 = [(id)v144 objectForKeyedSubscript:*MEMORY[0x1E4F54DB0]];
    [v145 setObject:v159 forKeyedSubscript:*MEMORY[0x1E4F528A8]];
    uint64_t v160 = [(id)v144 objectForKeyedSubscript:*MEMORY[0x1E4F54E20]];
    [v146 setObject:v160 forKeyedSubscript:*MEMORY[0x1E4F528C8]];
    uint64_t v161 = [(id)v144 objectForKeyedSubscript:*MEMORY[0x1E4F54E28]];
    [v146 setObject:v161 forKeyedSubscript:*MEMORY[0x1E4F528D0]];
    goto LABEL_225;
  }
  uint64_t v11 = 0;
  if (!CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F240], 0))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return v11;
}